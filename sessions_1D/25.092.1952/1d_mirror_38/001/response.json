{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Tuple\n\n\"\"\"\n1. Identify the index (position) of the single maroon (9) pixel in the input row.\n2. Identify the contiguous block of pixels that are neither white (0) nor maroon (9). Record the sequence of pixels forming this block and their start and end indices in the input row.\n3. Create a new sequence (list) of pixels by removing the identified colored block from the input row.\n4. Find the index of the maroon (9) pixel within this new, shorter sequence.\n5. Insert the recorded colored block sequence immediately after the maroon pixel's position in the new sequence.\n6. The resulting sequence is the final output row.\n\"\"\"\n\ndef find_pivot_index(row: List[int], pivot_color: int = 9) -> int:\n    \"\"\"Finds the index of the pivot color in the row.\"\"\"\n    for i, pixel in enumerate(row):\n        if pixel == pivot_color:\n            return i\n    raise ValueError(f\"Pivot color {pivot_color} not found in the row.\")\n\ndef find_colored_block(row: List[int], background_color: int = 0, pivot_color: int = 9) -> Tuple[List[int], int, int]:\n    \"\"\"Finds the contiguous block of non-background, non-pivot color.\"\"\"\n    block = []\n    start_index = -1\n    end_index = -1\n    in_block = False\n\n    for i, pixel in enumerate(row):\n        if pixel != background_color and pixel != pivot_color:\n            if not in_block:\n                start_index = i\n                in_block = True\n            block.append(pixel)\n            end_index = i # Keep updating end index while in block\n        elif in_block:\n            # Found the end of the block\n            break # Assume only one block exists as per priors\n\n    if not block:\n        raise ValueError(\"Colored block not found in the row.\")\n\n    return block, start_index, end_index\n\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transforms the input grid by moving a colored block to the position\n    immediately after a pivot pixel (maroon, 9).\n    \"\"\"\n    # Ensure input is a 1xN grid\n    if len(input_grid) != 1:\n        raise ValueError(\"Input grid must have exactly one row.\")\n\n    input_row = input_grid[0]\n\n    # 1. Identify the index of the single maroon (9) pixel (handled later in step 4)\n    # We need to find it in the modified list later.\n\n    # 2. Identify the contiguous block of pixels (not white 0 or maroon 9)\n    colored_block, block_start_index, block_end_index = find_colored_block(input_row)\n\n    # 3. Create a new sequence by removing the identified colored block\n    temp_row = []\n    for i, pixel in enumerate(input_row):\n        if not (block_start_index <= i <= block_end_index):\n            temp_row.append(pixel)\n\n    # 4. Find the index of the maroon (9) pixel within this new, shorter sequence.\n    pivot_index_in_temp = find_pivot_index(temp_row)\n\n    # 5. Insert the recorded colored block sequence immediately after the maroon pixel's position\n    output_row = temp_row[:pivot_index_in_temp + 1] + colored_block + temp_row[pivot_index_in_temp + 1:]\n\n    # 6. Format the resulting sequence as the output grid (1xN)\n    output_grid = [output_row]\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2104,
    "candidates_token_count": 862,
    "total_token_count": 2966,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.137582,
  "retries": 1
}