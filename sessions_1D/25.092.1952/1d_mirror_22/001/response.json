{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Tuple\n\n\"\"\"\nMoves a contiguous colored block from one side of a fixed separator pixel (maroon, 9) to the other side, preserving the distance (number of background pixels) between the block and the separator.\n\n1. Identify the position of the separator pixel (maroon, 9).\n2. Identify the contiguous block of a single color C (not white(0) or maroon(9)), noting its color, start index, and end index.\n3. Determine if the block is to the left or right of the separator.\n4. Calculate the number of background pixels (distance) between the nearest edge of the block and the separator.\n5. Create an output grid initialized with the background color (white, 0).\n6. Place the separator pixel at its original position in the output grid.\n7. Calculate the new start and end indices for the block on the opposite side of the separator, maintaining the calculated distance.\n8. Place the block of color C at its new position in the output grid.\n\"\"\"\n\ndef find_separator_index(grid: np.ndarray) -> int:\n    \"\"\"Finds the index of the separator pixel (9).\"\"\"\n    separator_indices = np.where(grid == 9)[0]\n    if len(separator_indices) != 1:\n        raise ValueError(\"Expected exactly one separator pixel (9).\")\n    return separator_indices[0]\n\ndef find_colored_block(grid: np.ndarray, separator_index: int) -> Tuple[int, int, int]:\n    \"\"\"Finds the colored block (not 0 or 9), returning its start index, end index, and color.\"\"\"\n    block_color = -1\n    block_start = -1\n    block_end = -1\n    in_block = False\n\n    for i, pixel in enumerate(grid):\n        # Skip separator and background\n        if pixel == 9 or pixel == 0:\n            if in_block: # End of a block\n                block_end = i - 1\n                in_block = False\n                # Since we expect only one block, we can return here\n                return block_start, block_end, block_color\n            continue\n\n        # Found a non-background, non-separator pixel\n        if not in_block:\n            # Start of a new block\n            if block_color != -1:\n                 raise ValueError(\"Found more than one colored block.\")\n            block_color = pixel\n            block_start = i\n            in_block = True\n        elif pixel != block_color:\n             raise ValueError(f\"Found inconsistent color within a block. Expected {block_color}, got {pixel}.\")\n\n    # Handle case where block is at the very end of the grid\n    if in_block:\n        block_end = len(grid) - 1\n        return block_start, block_end, block_color\n\n    raise ValueError(\"Could not find a colored block.\")\n\n\ndef transform(input_grid: List[int]) -> List[int]:\n    \"\"\"\n    Moves a contiguous colored block across a separator pixel (9).\n\n    Args:\n        input_grid: A list representing the 1D input grid.\n\n    Returns:\n        A list representing the 1D output grid.\n    \"\"\"\n    # Convert to numpy array for easier manipulation\n    input_array = np.array(input_grid)\n    grid_size = len(input_array)\n\n    # Initialize output_grid with background color (0)\n    output_array = np.zeros_like(input_array)\n\n    # 1. Find the separator index\n    separator_index = find_separator_index(input_array)\n\n    # 2. Place the separator in the output\n    output_array[separator_index] = 9\n\n    # 3. Find the colored block\n    block_start, block_end, block_color = find_colored_block(input_array, separator_index)\n    block_length = block_end - block_start + 1\n\n    # 4. Determine side and calculate distance\n    distance = 0\n    is_left = block_end < separator_index\n    if is_left:\n        # Block is to the left of the separator\n        distance = separator_index - 1 - block_end\n    else:\n        # Block is to the right of the separator\n        distance = block_start - (separator_index + 1)\n\n    # Ensure distance is non-negative\n    distance = max(0, distance)\n\n    # 5. Calculate new position\n    new_block_start = -1\n    new_block_end = -1\n\n    if is_left:\n        # Block was left, move to right\n        new_block_start = separator_index + 1 + distance\n        new_block_end = new_block_start + block_length - 1\n    else:\n        # Block was right, move to left\n        new_block_end = separator_index - 1 - distance\n        new_block_start = new_block_end - block_length + 1\n\n    # 6. Check bounds for the new position\n    if new_block_start < 0 or new_block_end >= grid_size:\n        raise ValueError(f\"Calculated new block position [{new_block_start}, {new_block_end}] is out of bounds for grid size {grid_size}.\")\n\n    # 7. Place the block in the output grid\n    output_array[new_block_start : new_block_end + 1] = block_color\n\n    # Convert back to list for the expected output format\n    return output_array.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2393,
    "candidates_token_count": 1278,
    "total_token_count": 3671,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.463542,
  "retries": 1
}