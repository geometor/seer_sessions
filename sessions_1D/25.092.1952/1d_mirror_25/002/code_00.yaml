Grid:
  Type: 1D array (single row)
  Dimensions: Constant between input and output (e.g., 1x28)
  Background_Color: white (0)

Objects:
  - Type: Anchor_Pixel
    Color: maroon (9)
    Quantity: 1
    Position: Static (remains unchanged between input and output)
    Role: Acts as a reflection point/anchor.
  - Type: Colored_Block
    Color: One unique color (non-white, non-maroon) per grid
    Quantity: 1
    Property: Contiguous block of pixels of the same color.
    Action: Its position changes based on reflection across the Anchor_Pixel.
    Original_Position: Becomes white (0) in the output.

Transformation:
  Name: Reflection across Anchor
  Input: Grid containing one Anchor_Pixel and one Colored_Block.
  Output: Grid of the same dimensions.
  Rule:
    1. Identify the index (`anchor_index`) of the Anchor_Pixel (maroon).
    2. Identify the color (`block_color`), start index (`block_start_index`), end index (`block_end_index`), and length (`block_length`) of the Colored_Block. Assume only one such block exists.
    3. Calculate the distance (`d`) from the end of the block to the anchor: `d = anchor_index - block_end_index`. (Note: This specific calculation assumes the block is always *before* the anchor, which holds true for all examples).
    4. Calculate the new starting index for the block in the output: `new_block_start_index = anchor_index + d`.
    5. The block retains its `block_color` and `block_length`.
    6. Create an output grid initialized with the background color (white).
    7. Place the Anchor_Pixel at `anchor_index` in the output grid.
    8. Place the Colored_Block (using `block_color` and `block_length`) starting at `new_block_start_index` in the output grid.