Grid:
  Type: 1D array (single row, represented as List[List[int]])
  Dimensions: Constant between input and output (e.g., 1x28)
  Background_Color: white (0)

Objects:
  - Type: Anchor_Pixel
    Color: maroon (9)
    Quantity: 1
    Position: Static (index remains unchanged between input and output)
    Role: Acts as the center point for the reflection transformation.
  - Type: Colored_Block
    Color: Any non-white, non-maroon color (variable, e.g., green, red, gray)
    Quantity: 1
    Property: Contiguous block of pixels of the same color. Always located entirely before the Anchor_Pixel in the input.
    Action: Its position is transformed via reflection across the Anchor_Pixel.
    Input_Position: The original indices occupied by the block become white (0) in the output.
    Output_Position: Determined by the reflection rule.

Transformation:
  Name: Reflection across Anchor
  Rule:
    1. Identify the index of the Anchor_Pixel (`anchor_index`).
    2. Identify the Colored_Block: its color (`block_color`), start index (`block_start_index`), end index (`block_end_index`), and length (`block_length`).
    3. Calculate the distance (`d`) from the end of the block to the anchor: `d = anchor_index - block_end_index`.
    4. Calculate the starting index for the block in the output grid: `new_block_start_index = anchor_index + d`.
    5. Create the output grid, initially all white (0), with the same dimensions as the input.
    6. Place the Anchor_Pixel (maroon) at `anchor_index` in the output grid.
    7. Place the Colored_Block (using `block_color` and `block_length`) starting at `new_block_start_index` in the output grid.
  Invariant: Anchor position, block color, block length, grid dimensions.
  Variant: Block position.