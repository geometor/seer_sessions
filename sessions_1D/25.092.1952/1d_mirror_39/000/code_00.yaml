Grid:
  - Type: Input
    Properties:
      - Dimensions: Constant HxW (e.g., 5x6)
      - Contains:
          - Background: White pixels (0)
          - Maroon_Pixel: One pixel with color Maroon (9)
          - Colored_Shape: One contiguous object of a single color (not 0 or 9)
  - Type: Output
    Properties:
      - Dimensions: Same as Input HxW
      - Contains:
          - Background: White pixels (0)
          - Maroon_Pixel: Same pixel, same position as in Input
          - Colored_Shape: Same shape as in Input, different position

Objects:
  - Name: Maroon_Pixel
    Properties:
      - Color: Maroon (9)
      - Count: 1
      - Role: Anchor / Reference point
      - Position_Change: None (Input position == Output position)
  - Name: Colored_Shape
    Properties:
      - Color: Any color except White (0) or Maroon (9)
      - Count: 1 (contiguous block)
      - Initial_Location: Located entirely in rows above the Maroon_Pixel's row
      - Transformation: Vertical translation downwards
      - Structure_Change: None (Shape and color preserved)
      - Final_Location: Relocated to start in the row immediately below the Maroon_Pixel's row, maintaining horizontal position and relative vertical structure.

Relationships:
  - The Maroon_Pixel defines a horizontal boundary.
  - The Colored_Shape exists above this boundary in the input.
  - The transformation moves the Colored_Shape to exist below this boundary in the output.
  - The vertical starting position of the Colored_Shape in the output is directly determined by the row index of the Maroon_Pixel.

Action:
  - Identify the Maroon_Pixel's row (`maroon_row`).
  - Identify all pixels belonging to the Colored_Shape.
  - Determine the topmost row of the Colored_Shape (`shape_top_row`).
  - Create a new grid filled with White (0).
  - Copy the Maroon_Pixel to its original position in the new grid.
  - For each pixel `(r, c)` of the Colored_Shape in the input:
    - Calculate its relative row within the shape: `relative_r = r - shape_top_row`.
    - Calculate its new row in the output grid: `new_r = (maroon_row + 1) + relative_r`.
    - Copy the pixel's color to position `(new_r, c)` in the output grid.