grid_dimensions:
  rows: 1
  cols: 21 # Consistent across examples
task_type: transformation # Movement/Rearrangement
objects:
  - id: pivot
    color: maroon (9)
    representation: single pixel
    quantity: 1
    attributes:
      - stationary: true # Remains in the same index in output as input
  - id: movable_object
    color: any (excluding white (0) and maroon (9)) # Examples show green(3), gray(5), yellow(4)
    representation: contiguous horizontal block of pixels
    quantity: 1
    attributes:
      - size: variable (6, 5, 6 pixels in examples)
      - shape: horizontal line segment
      - color_preservation: true # Color remains the same after move
      - size_preservation: true # Length remains the same after move
  - id: background
    color: white (0)
    representation: all other pixels
relationships:
  - type: spatial (input)
    object_1: movable_object
    object_2: pivot
    relation: The movable_object is separated from the pivot by a gap of one or more white (0) pixels. In all examples, the object is to the left of the pivot.
    gap_size: variable (1, 2, 2 pixels in examples)
  - type: spatial (output)
    object_1: movable_object
    object_2: pivot
    relation: The movable_object is on the opposite side of the pivot compared to the input, separated by the *same* number of white (0) pixels (gap) as in the input.
actions:
  - type: identify
    target: pivot (maroon pixel)
    result: store its index
  - type: identify
    target: movable_object (contiguous block of non-white, non-maroon pixels)
    result: store its start index, end index, color, and length
  - type: calculate
    input: object indices, pivot index
    result: gap size (number of white pixels between them)
  - type: calculate
    input: object properties, pivot index, gap size, original relative position (left/right)
    result: new start and end indices for the object on the opposite side of the pivot
  - type: construct_output
    details: Create a new grid filled with the background color (white). Place the pivot at its original index. Place the movable_object (with original color and length) at the calculated new position.