task_description: >
  Reposition a contiguous colored block relative to a fixed pivot pixel (maroon)
  within a grid. The grid is processed as a flattened 1D sequence. The block
  swaps its position (from before to after, or vice-versa) relative to the pivot,
  maintaining the exact number of background pixels (white) originally separating them.

input_format: 2D NumPy array representing the grid.
processing_format: Flattened 1D list derived from the input grid.
output_format: 2D NumPy array with the same dimensions as the input, reconstructed from the transformed 1D list.

elements:
  - element: pivot_pixel
    color: maroon (9)
    properties:
      - uniqueness: The only maroon pixel in the grid.
      - persistence: Its 1D index remains unchanged in the output.
      - role: Reference point for block movement.
  - element: colored_block
    color: Any single color except white (0) or maroon (9).
    properties:
      - contiguity: Forms an unbroken sequence in the flattened 1D representation.
      - invariance: Color and length are preserved.
      - mobility: Position changes relative to the pivot.
  - element: gap
    color: white (0)
    properties:
      - location: Situated directly between the colored_block and the pivot_pixel in the 1D sequence. Can have zero length if they are adjacent.
      - invariance: Its size (number of white pixels) is preserved during transformation. (Observed size is 1 in all examples).
  - element: background
    color: white (0)
    properties:
      - role: Fills all 1D indices not occupied by the pivot, block, or gap in the output sequence.

transformation_steps:
  - step: 1_flatten
    action: Convert the input 2D grid into a 1D sequence.
  - step: 2_identify
    action: >
      Locate the 1D index of the pivot_pixel. Find the 1D start index, end index,
      color, and length of the contiguous colored_block (non-white, non-maroon).
  - step: 3_measure_gap
    action: Count the number of white pixels (gap_size) strictly between the block and pivot in the 1D input sequence.
  - step: 4_determine_side
    action: Note whether the block is before or after the pivot in the 1D input.
  - step: 5_calculate_new_position
    action: >
      Determine the new 1D start index for the block by placing it on the
      opposite side of the pivot, separated by the previously measured gap_size.
  - step: 6_construct_1d_output
    action: >
      Create a new 1D sequence filled with the background color. Place the pivot
      at its original index. Place the colored_block at its calculated new start index.
  - step: 7_reshape
    action: Reshape the transformed 1D sequence back into the original 2D grid dimensions.