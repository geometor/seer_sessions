{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid by repositioning a horizontal line based on the \nposition of a single anchor pixel (maroon, 9).\n\n1. Find the single maroon (9) pixel (the anchor) and record its row and \n   column (R_anchor, C_anchor).\n2. Find the contiguous horizontal line of non-white (0), non-maroon (9) \n   pixels (the payload). Record its color (C_payload), starting column \n   (C_payload_start_in), and length (L_payload).\n3. Initialize an output grid of the same dimensions as the input, filled \n   with white (0).\n4. Place the anchor pixel at its original position (R_anchor, C_anchor) in \n   the output grid.\n5. Calculate the new starting column for the payload line: \n   C_payload_start_out = C_payload_start_in + C_anchor.\n6. Draw the payload line in the output grid using its color (C_payload) and \n   length (L_payload), starting at row R_anchor and column C_payload_start_out.\n\"\"\"\n\nimport numpy as np\n\ndef find_anchor(grid, anchor_color=9):\n    \"\"\"Finds the coordinates of the first pixel with the anchor_color.\"\"\"\n    for r_idx, row in enumerate(grid):\n        for c_idx, pixel in enumerate(row):\n            if pixel == anchor_color:\n                return r_idx, c_idx\n    return None # Should not happen based on task description\n\ndef find_payload_line(grid, background_color=0, anchor_color=9):\n    \"\"\"\n    Finds the horizontal payload line (non-background, non-anchor color).\n    Returns its color, input row, input starting column, and length.\n    \"\"\"\n    height, width = grid.shape\n    for r_idx in range(height):\n        for c_idx in range(width):\n            pixel = grid[r_idx, c_idx]\n            if pixel != background_color and pixel != anchor_color:\n                # Found the start of the payload line\n                payload_color = pixel\n                payload_row_in = r_idx\n                payload_col_start_in = c_idx\n                payload_length = 0\n                # Measure length\n                for k in range(c_idx, width):\n                    if grid[r_idx, k] == payload_color:\n                        payload_length += 1\n                    else:\n                        break # End of line\n                return payload_color, payload_row_in, payload_col_start_in, payload_length\n    return None # Should not happen based on task description\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n    \"\"\"\n    input_np = np.array(input_grid, dtype=int)\n    height, width = input_np.shape\n    \n    # Initialize output_grid with white background\n    output_grid = np.zeros_like(input_np) # Default value is 0 (white)\n\n    # 1. Find the anchor pixel\n    anchor_pos = find_anchor(input_np)\n    if anchor_pos is None:\n        # Handle error or return input/empty grid if anchor not found\n        return output_grid.tolist() \n    anchor_row, anchor_col = anchor_pos\n    \n    # 2. Find the payload line\n    payload_info = find_payload_line(input_np)\n    if payload_info is None:\n        # Handle error or return grid with just anchor if payload not found\n        output_grid[anchor_row, anchor_col] = 9 # Still place anchor\n        return output_grid.tolist()\n    payload_color, payload_row_in, payload_col_start_in, payload_length = payload_info\n\n    # 3. Place the anchor in the output grid\n    output_grid[anchor_row, anchor_col] = 9\n\n    # 4. Calculate the new starting column for the payload\n    payload_col_start_out = payload_col_start_in + anchor_col\n\n    # 5. Draw the payload line in the output grid at the new position\n    # The new row is the anchor's row\n    payload_row_out = anchor_row\n    \n    # Ensure drawing stays within bounds (horizontally)\n    for i in range(payload_length):\n        current_col = payload_col_start_out + i\n        if 0 <= payload_row_out < height and 0 <= current_col < width:\n            output_grid[payload_row_out, current_col] = payload_color\n        # else: pixel would be out of bounds, skip drawing it\n        # Based on examples, this shouldn't be necessary, but good practice\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2693,
    "candidates_token_count": 1117,
    "total_token_count": 3810,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.85404,
  "retries": 1
}