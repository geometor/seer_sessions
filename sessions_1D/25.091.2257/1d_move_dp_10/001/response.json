{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nShift a contiguous block of a non-white, non-blue color rightwards until it is \nadjacent to a stationary blue marker pixel. The blue marker and all other \nwhite pixels maintain their original positions, except for those overwritten \nby the shifted block.\n\"\"\"\n\nimport numpy as np\nfrom typing import List, Tuple, Optional\n\n# Helper function to find the contiguous colored block (non-white, non-blue)\ndef find_colored_block(grid: List[int]) -> Optional[Tuple[int, int, int]]:\n    \"\"\"\n    Finds the first contiguous block of non-white (0) and non-blue (1) pixels.\n\n    Args:\n        grid: The input 1D list representing the grid row.\n\n    Returns:\n        A tuple containing (color, start_index, end_index) of the block,\n        or None if no such block is found.\n    \"\"\"\n    start_index = -1\n    color = -1\n    for i, pixel in enumerate(grid):\n        if pixel != 0 and pixel != 1:\n            if start_index == -1:\n                start_index = i\n                color = pixel\n            # Check if the color continues or if it's a different block color\n            elif pixel != color: \n                 # This condition assumes only ONE block, consistent with examples\n                 # If multiple blocks were possible, logic would need adjustment.\n                 # For now, we assume the first block found is the target.\n                 return (color, start_index, i - 1)\n        elif start_index != -1:\n            # Block ended\n            return (color, start_index, i - 1)\n            \n    # Handle case where the block extends to the end of the grid\n    if start_index != -1:\n        return (color, start_index, len(grid) - 1)\n        \n    return None\n\n# Helper function to find the blue marker\ndef find_blue_marker(grid: List[int]) -> Optional[int]:\n    \"\"\"\n    Finds the index of the blue (1) marker pixel.\n\n    Args:\n        grid: The input 1D list representing the grid row.\n\n    Returns:\n        The index of the blue marker, or None if not found.\n    \"\"\"\n    for i, pixel in enumerate(grid):\n        if pixel == 1:\n            return i\n    return None\n\ndef transform(input_grid: List[int]) -> List[int]:\n    \"\"\"\n    Shifts a colored block rightwards to abut a stationary blue marker.\n\n    Args:\n        input_grid: A 1D list of integers representing pixel colors.\n\n    Returns:\n        A 1D list of integers representing the transformed grid row.\n    \"\"\"\n    \n    # Find the colored block\n    block_info = find_colored_block(input_grid)\n    if block_info is None:\n        # Should not happen based on examples, but handle defensively\n        return input_grid[:] # Return a copy if no block found\n\n    block_color, block_start, block_end = block_info\n    block_length = block_end - block_start + 1\n\n    # Find the blue marker\n    marker_index = find_blue_marker(input_grid)\n    if marker_index is None:\n        # Should not happen based on examples, but handle defensively\n        return input_grid[:] # Return a copy if no marker found\n        \n    # Calculate the gap and the required shift\n    # The new end position of the block should be marker_index - 1\n    new_block_end = marker_index - 1\n    shift_amount = new_block_end - block_end\n    \n    # Calculate the new start position\n    new_block_start = block_start + shift_amount\n\n    # Initialize the output grid with white pixels\n    output_grid = [0] * len(input_grid)\n\n    # Place the shifted colored block into the output grid\n    for i in range(block_length):\n        if 0 <= new_block_start + i < len(output_grid): # Boundary check\n             output_grid[new_block_start + i] = block_color\n\n    # Place the blue marker at its original position\n    if 0 <= marker_index < len(output_grid): # Boundary check\n        output_grid[marker_index] = 1\n        \n    # Note: Other white pixels remain white by initialization.\n\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2316,
    "candidates_token_count": 1016,
    "total_token_count": 3332,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.942909,
  "retries": 1
}