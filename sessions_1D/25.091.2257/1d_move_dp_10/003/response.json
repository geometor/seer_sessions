{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nShift a contiguous block of a non-white, non-blue color rightwards within its \nrow until it is adjacent to (immediately to the left of) a stationary blue \nmarker pixel in the same row. The input and output are 2D grids containing \nonly one row.\n\"\"\"\n\nimport numpy as np\nfrom typing import Tuple, Optional\n\n# Helper function to find the contiguous colored block (non-white, non-blue)\ndef find_colored_block(grid_row: np.ndarray) -> Optional[Tuple[int, int, int]]:\n    \"\"\"\n    Finds the first contiguous block of non-white (0) and non-blue (1) pixels\n    within a given row.\n\n    Args:\n        grid_row: A 1D NumPy array representing the grid row.\n\n    Returns:\n        A tuple containing (color, start_index, end_index) of the block,\n        or None if no such block is found.\n    \"\"\"\n    start_index = -1\n    color = -1\n    for i, pixel_val in enumerate(grid_row):\n        # Ensure we are comparing integers\n        pixel_val = int(pixel_val) \n        \n        if pixel_val != 0 and pixel_val != 1: # Found a pixel of the target block color\n            if start_index == -1: # Starting a new block\n                start_index = i\n                color = pixel_val\n            elif pixel_val != color: # Color changed, meaning end of the first block\n                 # This assumes only ONE block, consistent with examples.\n                 return (color, start_index, i - 1)\n        elif start_index != -1: # Block was ongoing, but now hit a 0 or 1\n            # Block ended\n            return (color, start_index, i - 1)\n            \n    # Handle case where the block extends to the end of the grid row\n    if start_index != -1:\n        return (color, start_index, len(grid_row) - 1)\n        \n    return None # No block found\n\n# Helper function to find the blue marker\ndef find_blue_marker(grid_row: np.ndarray) -> Optional[int]:\n    \"\"\"\n    Finds the index (column) of the blue (1) marker pixel within a given row.\n\n    Args:\n        grid_row: A 1D NumPy array representing the grid row.\n\n    Returns:\n        The index of the blue marker, or None if not found.\n    \"\"\"\n    for i, pixel_val in enumerate(grid_row):\n        if int(pixel_val) == 1: # Found the blue marker\n            return i\n    return None # No blue marker found\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Shifts a colored block rightwards in the single row of the grid \n    to abut a stationary blue marker.\n\n    Args:\n        input_grid: A 2D NumPy array representing the input grid (expected 1 row).\n\n    Returns:\n        A 2D NumPy array representing the transformed grid.\n    \"\"\"\n    # Ensure input is a numpy array\n    if not isinstance(input_grid, np.ndarray):\n        input_grid = np.array(input_grid)\n        \n    # Verify input is 2D and extract the first row\n    if input_grid.ndim != 2 or input_grid.shape[0] != 1:\n        # Handle unexpected input dimensions if necessary, \n        # but based on examples, assume 1 row.\n        # For robustness, maybe raise an error or return input as is.\n        # Here, we proceed assuming the first row is the target.\n        pass # Or add error handling\n        \n    input_row = input_grid[0]\n    grid_width = input_row.shape[0]\n\n    # Find the colored block in the row\n    block_info = find_colored_block(input_row)\n    if block_info is None:\n        # Should not happen based on task description/examples\n        return input_grid.copy() # Return original if no block found\n\n    block_color, block_start, block_end = block_info\n    block_length = block_end - block_start + 1\n\n    # Find the blue marker in the row\n    marker_index = find_blue_marker(input_row)\n    if marker_index is None:\n        # Should not happen based on task description/examples\n        return input_grid.copy() # Return original if no marker found\n        \n    # Calculate the target end position for the block (right before the marker)\n    new_block_end = marker_index - 1\n    \n    # Calculate the required shift amount\n    shift_amount = new_block_end - block_end\n    \n    # Calculate the new start position for the block\n    new_block_start = block_start + shift_amount\n\n    # Initialize the output row with white (0) pixels\n    output_row = np.zeros(grid_width, dtype=int)\n\n    # Place the shifted colored block into the output row\n    # Ensure indices are within bounds\n    if new_block_start >= 0 and new_block_start + block_length <= grid_width:\n        output_row[new_block_start : new_block_start + block_length] = block_color\n\n    # Place the blue marker at its original position in the output row\n    if 0 <= marker_index < grid_width:\n        output_row[marker_index] = 1\n        \n    # Reshape the 1D output row back into a 2D grid with 1 row\n    output_grid = output_row.reshape(1, grid_width)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7039,
    "candidates_token_count": 1318,
    "total_token_count": 8357,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.934173,
  "retries": 1
}