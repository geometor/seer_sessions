{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Tuple\n\n\"\"\"\nIdentify the single contiguous block of non-white (0), non-maroon (9) pixels \n(the \"colored block\"), the single maroon (9) pixel (the \"marker\"), and the \nsequence of white (0) pixels located immediately between the colored block and \nthe marker (the \"gap\"). Move the gap pixels from their original position to the \nbeginning (left end) of the grid row. The colored block becomes immediately \nadjacent to the left of the marker pixel. All other pixels maintain their \nrelative order. The input is a NumPy array with a single row, and the output \nshould also be a NumPy array with a single row.\n\"\"\"\n\ndef find_colored_block_indices(row: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    Finds the start and end indices (exclusive) of the contiguous block \n    of non-white (0) and non-maroon (9) pixels in a list.\n    Returns (start_index, end_index).\n    Raises ValueError if no such block is found.\n    \"\"\"\n    start_index = -1\n    end_index = -1\n    block_color = -1\n\n    for i, pixel in enumerate(row):\n        if start_index == -1:\n            # Look for the start of the block\n            if pixel != 0 and pixel != 9:\n                start_index = i\n                block_color = pixel\n        elif pixel != block_color:\n            # Found the first pixel *after* the block\n            end_index = i\n            break\n            \n    # If the block started but didn't end before the list finished\n    if start_index != -1 and end_index == -1:\n        end_index = len(row)\n        \n    # Handle cases where no block is found\n    if start_index == -1:\n         raise ValueError(\"Colored block not found in input row list\")\n         \n    return start_index, end_index\n\ndef find_marker_index(row: List[int]) -> int:\n    \"\"\"\n    Finds the index of the maroon (9) marker pixel in a list.\n    Raises ValueError if the marker is not found.\n    \"\"\"\n    try:\n        # Use list.index() which is efficient for lists\n        return row.index(9)\n    except ValueError:\n        raise ValueError(\"Maroon marker (9) not found in input row list\")\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Transforms the input grid according to the described rule.\n    \"\"\"\n    # Validate input shape\n    if input_grid.ndim != 2 or input_grid.shape[0] != 1:\n        raise ValueError(\"Input grid must be a 2D NumPy array with exactly one row.\")\n        \n    # Extract the single row and convert to a Python list for easier slicing/indexing\n    input_row_list = input_grid[0].tolist()\n    \n    # 1. Identify the Colored Block indices\n    block_start_index, block_end_index = find_colored_block_indices(input_row_list)\n    \n    # 2. Identify the Marker index\n    marker_idx = find_marker_index(input_row_list)\n\n    # 3. Identify the Gap indices (pixels between block_end and marker_idx)\n    gap_start_index = block_end_index\n    gap_end_index = marker_idx # Exclusive, like slicing\n\n    # Check if gap exists and is valid (marker must be after block end)\n    if gap_start_index >= gap_end_index:\n         raise ValueError(\"Invalid input: Marker is not positioned after the colored block with a potential gap.\")\n         \n    # 4. Extract the different segments using list slicing\n    leading_pixels = input_row_list[0:block_start_index]\n    colored_block_pixels = input_row_list[block_start_index:block_end_index]\n    gap_pixels = input_row_list[gap_start_index:gap_end_index]\n    # Ensure all gap pixels are white (0), as per problem description\n    if not all(p == 0 for p in gap_pixels):\n         print(f\"Warning: Pixels found in the 'gap' segment are not all white (0): {gap_pixels}\") # Or raise error if strict\n         # raise ValueError(\"Invalid input: Non-white pixels found in the gap between block and marker.\")\n\n    marker_pixel = [input_row_list[marker_idx]] # Keep as a list for concatenation\n    trailing_pixels = input_row_list[marker_idx + 1:]\n\n    # 5. Reconstruct the row list with the gap moved to the beginning\n    output_row_list = gap_pixels + leading_pixels + colored_block_pixels + marker_pixel + trailing_pixels\n    \n    # 6. Convert the reconstructed list back into a single-row NumPy array\n    # Ensure the data type matches the input if necessary, though ints usually fine\n    output_grid = np.array([output_row_list], dtype=input_grid.dtype) \n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5340,
    "candidates_token_count": 1190,
    "total_token_count": 6530,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.162375,
  "retries": 1
}