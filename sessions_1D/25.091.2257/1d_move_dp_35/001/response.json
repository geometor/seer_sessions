{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Tuple, Optional\n\n\"\"\"\nTransforms a 1D input grid by shifting a contiguous block of a non-white, non-magenta color to the right, placing its rightmost edge immediately adjacent to the left of the single magenta pixel. The original position of the block becomes white.\n\"\"\"\n\ndef find_pixel_index(grid: np.ndarray, color: int) -> Optional[int]:\n    \"\"\"Finds the index of the first occurrence of a specific color pixel.\"\"\"\n    indices = np.where(grid == color)[0]\n    if len(indices) > 0:\n        return indices[0]\n    return None\n\ndef find_block(grid: np.ndarray, exclude_colors: List[int]) -> Optional[Tuple[int, int, int, int]]:\n    \"\"\"\n    Finds the first contiguous block of pixels whose color is not in exclude_colors.\n    Returns (start_index, end_index_exclusive, length, color).\n    \"\"\"\n    block_color = -1\n    start_index = -1\n    for i, pixel in enumerate(grid):\n        if pixel not in exclude_colors:\n            if start_index == -1:\n                start_index = i\n                block_color = pixel\n            elif pixel != block_color: # End of block (different color)\n                 end_index = i\n                 length = end_index - start_index\n                 return start_index, end_index, length, block_color\n        elif start_index != -1: # End of block (excluded color encountered)\n            end_index = i\n            length = end_index - start_index\n            return start_index, end_index, length, block_color\n    # Check if block runs to the end of the grid\n    if start_index != -1:\n        end_index = len(grid)\n        length = end_index - start_index\n        return start_index, end_index, length, block_color\n    return None # No block found\n\n\ndef transform(input_grid: List[int]) -> List[int]:\n    \"\"\"\n    Shifts a colored block rightwards to be adjacent to the magenta pixel.\n\n    Args:\n        input_grid: A list representing the 1D input grid.\n\n    Returns:\n        A list representing the transformed 1D output grid.\n    \"\"\"\n    # Convert input list to numpy array for easier manipulation\n    grid_np = np.array(input_grid)\n    grid_length = len(grid_np)\n\n    # --- Identify components ---\n    # Find the magenta pixel (anchor point)\n    magenta_color = 6\n    magenta_index = find_pixel_index(grid_np, magenta_color)\n    if magenta_index is None:\n        # Handle error: magenta pixel not found (shouldn't happen based on examples)\n        print(\"Error: Magenta pixel not found.\")\n        return input_grid # Or raise an exception\n\n    # Find the movable block (excluding white 0 and magenta 6)\n    block_info = find_block(grid_np, [0, magenta_color])\n    if block_info is None:\n         # Handle error: movable block not found (shouldn't happen based on examples)\n        print(\"Error: Movable block not found.\")\n        return input_grid # Or raise an exception\n\n    block_start, block_end, block_length, block_color = block_info\n\n    # --- Create the output grid ---\n    # Initialize output grid with background color (white 0)\n    output_grid_np = np.zeros(grid_length, dtype=int)\n\n    # Place the magenta pixel in its original position\n    output_grid_np[magenta_index] = magenta_color\n\n    # --- Calculate the new position for the block ---\n    # The block should end right before the magenta pixel\n    new_block_end = magenta_index\n    new_block_start = new_block_end - block_length\n\n    # --- Place the block in the new position ---\n    if new_block_start >= 0: # Ensure the block fits within the grid bounds\n        output_grid_np[new_block_start:new_block_end] = block_color\n    else:\n        # Handle case where block would shift off the left edge (unlikely given examples)\n        print(\"Warning: Block shifts partially or fully off the grid.\")\n        actual_start = 0\n        visible_length = new_block_end - actual_start\n        output_grid_np[actual_start:new_block_end] = block_color # Place the visible part\n\n\n    # Convert numpy array back to list for the final output\n    output_grid = output_grid_np.tolist()\n\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2189,
    "candidates_token_count": 1082,
    "total_token_count": 3271,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.934081,
  "retries": 1
}