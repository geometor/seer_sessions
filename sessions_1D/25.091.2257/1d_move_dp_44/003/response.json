{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input 1xN sequence (represented as a list containing a single list of integers)\nby identifying a specific adjacent pattern: a contiguous block of identical non-white pixels (BlockA),\nimmediately followed by a contiguous block of white (0) pixels (BlockB), immediately followed by\na maroon (9) pixel (Separator). If this pattern (BlockA -> BlockB -> Separator) is found,\nthe positions of BlockA and BlockB are swapped, while the portion of the sequence before BlockA (Prefix)\nand the portion including and after the Separator (Suffix) remain in their relative positions.\nIf the pattern is not found, the original input sequence is returned unchanged.\n\"\"\"\n\nimport numpy as np\nfrom typing import List, Optional, Tuple\n\n# Define color constants\nWHITE = 0\nMAROON = 9\n\ndef find_first_non_white_block(sequence: List[int]) -> Optional[Tuple[int, int, int]]:\n    \"\"\"Finds the start index, end index, and color of the first contiguous block of non-white pixels.\"\"\"\n    n = len(sequence)\n    start_index = -1\n    color = -1\n\n    for i in range(n):\n        if sequence[i] != WHITE:\n            start_index = i\n            color = sequence[i]\n            end_index = i\n            # Extend the block as long as the color matches\n            while end_index + 1 < n and sequence[end_index + 1] == color:\n                end_index += 1\n            return start_index, end_index, color\n    return None # No non-white block found\n\ndef find_following_white_block(sequence: List[int], start_search_index: int) -> Optional[Tuple[int, int]]:\n    \"\"\"Finds the start and end index of a contiguous white block starting immediately after start_search_index.\"\"\"\n    n = len(sequence)\n    if start_search_index >= n or sequence[start_search_index] != WHITE:\n        return None # No white block starts immediately after\n\n    start_index = start_search_index\n    end_index = start_index\n    # Extend the block as long as it's white\n    while end_index + 1 < n and sequence[end_index + 1] == WHITE:\n        end_index += 1\n    return start_index, end_index\n\ndef check_separator(sequence: List[int], index: int) -> bool:\n    \"\"\"Checks if the pixel at the given index is the MAROON separator.\"\"\"\n    return index < len(sequence) and sequence[index] == MAROON\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Applies the block swapping transformation based on the identified pattern.\n    \"\"\"\n    # --- Input Validation ---\n    if not input_grid or not isinstance(input_grid, list) or len(input_grid) != 1 or \\\n       not input_grid[0] or not isinstance(input_grid[0], list):\n        # Return input if it's not a valid 1xN grid representation\n        return input_grid\n\n    sequence = input_grid[0]\n    n = len(sequence)\n\n    # --- Find Pattern: BlockA -> BlockB -> Separator ---\n    block_a_info = find_first_non_white_block(sequence)\n\n    if block_a_info is None:\n        # BlockA not found, pattern fails\n        return input_grid\n\n    start_a, end_a, _ = block_a_info\n    block_a = sequence[start_a : end_a + 1]\n\n    # Look for BlockB immediately after BlockA\n    block_b_info = find_following_white_block(sequence, end_a + 1)\n\n    if block_b_info is None:\n        # BlockB not found immediately after BlockA, pattern fails\n        return input_grid\n\n    start_b, end_b = block_b_info\n    block_b = sequence[start_b : end_b + 1]\n\n    # Look for Separator immediately after BlockB\n    separator_index = end_b + 1\n    if not check_separator(sequence, separator_index):\n        # Separator not found immediately after BlockB, pattern fails\n        return input_grid\n\n    # --- Pattern Found: Perform Transformation ---\n\n    # Identify Prefix (before BlockA)\n    prefix = sequence[:start_a]\n\n    # Identify Suffix (Separator and onwards)\n    suffix = sequence[separator_index:]\n\n    # Reconstruct the sequence with swapped blocks\n    output_sequence = prefix + block_b + block_a + suffix\n\n    # Return the result in the expected format\n    return [output_sequence]\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5965,
    "candidates_token_count": 1091,
    "total_token_count": 7056,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.122347,
  "retries": 1
}