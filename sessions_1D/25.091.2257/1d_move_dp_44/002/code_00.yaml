task_type: sequence_manipulation
input_format: List containing a single List of integers (1xN grid). Example: [[7, 7, 7, 0, 0, 0, 9]]
output_format: List containing a single List of integers (1xN grid). Example: [[0, 0, 0, 7, 7, 7, 9]]
grid_dimensionality: 1D sequence represented as a 1xN grid.
color_palette_observed: [white(0), green(3), orange(7), azure(8), maroon(9)]
objects:
  - id: BlockA
    type: contiguous_block
    description: The first contiguous sequence, starting from index 0 or later, composed of identical non-white pixels.
    properties:
      - color: Any color except white(0). Examples show orange(7), green(3), azure(8).
      - location: Must appear before the Separator. Is immediately followed by BlockB.
  - id: BlockB
    type: contiguous_block
    description: A contiguous sequence composed entirely of white(0) pixels.
    properties:
      - color: white(0).
      - location: Must immediately follow BlockA. Must immediately precede the Separator.
  - id: Separator
    type: marker_pixel
    description: The first occurrence of a maroon(9) pixel in the sequence.
    properties:
      - color: maroon(9).
      - location: Must immediately follow BlockB. Marks the boundary after which the sequence remains unchanged relative to the swap.
  - id: Prefix
    type: sequence_segment
    description: The (potentially empty) portion of the sequence before BlockA.
    properties:
      - content: Sequence of pixels. (Observed empty in examples).
      - location: Start of the sequence up to the index before BlockA starts.
  - id: Suffix
    type: sequence_segment
    description: The portion of the sequence including the Separator pixel and everything after it.
    properties:
      - content: Sequence starting with the Separator pixel.
      - location: From the Separator's index to the end of the sequence.
relationships:
  - type: structural_order
    description: The required pattern for the transformation is Prefix -> BlockA -> BlockB -> Separator -> Suffix.
  - type: adjacency
    description: BlockA must be immediately followed by BlockB (no gaps).
  - type: adjacency
    description: BlockB must be immediately followed by the Separator (no gaps).
action:
  - type: identify_pattern
    description: Locate the first occurrence of the pattern BlockA -> BlockB -> Separator in the sequence.
    operands: [sequence]
  - type: conditional_swap
    description: If the pattern is found, swap the positions of BlockA and BlockB.
    operands: [BlockA, BlockB]
  - type: reconstruct_sequence
    description: Form the output sequence by concatenating Prefix, BlockB (swapped), BlockA (swapped), and Suffix.
    operands: [Prefix, BlockB, BlockA, Suffix]
constraints:
  - Input must be a 1xN grid (list of list).
  - The specific pattern (non-white block -> white block -> maroon pixel, all adjacent) must be present for the transformation to occur.
  - If the pattern is not found, the input is returned unchanged.