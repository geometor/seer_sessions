task_description: Rearrange elements in a 1D array based on the properties of adjacent blocks before a specific marker.
grid_dimensionality: 1D (or 1xN 2D grid)
objects:
  - type: colored_block
    description: A contiguous sequence of identical non-white pixels. Only one such block appears before the marker in the examples.
    properties:
      - color: The specific non-white color (e.g., red, blue, gray).
      - length: The number of pixels in the block.
      - start_index: The index where the block begins.
  - type: white_block
    description: A contiguous sequence of white (0) pixels immediately following the 'colored_block'.
    properties:
      - length: The number of pixels in the block. Crucial for determining the shift amount.
      - start_index: The index where the block begins (immediately after colored_block ends).
  - type: marker
    description: A single maroon (9) pixel acting as a boundary.
    properties:
      - color: maroon (9)
      - location: Defines the end of the region to be transformed.
  - type: prefix_whites
    description: Optional contiguous sequence of white (0) pixels at the beginning of the array, before the 'colored_block'.
    properties:
      - length: Number of pixels.
  - type: suffix
    description: Any pixels including and after the 'marker'.
    properties:
      - content: Sequence of pixels including the marker.
      - location: End of the array.
actions:
  - identify_marker: Find the index of the first maroon (9) pixel.
  - partition_input: Divide the input array into three parts based on the marker: the part before the marker (transform_region), the marker itself, and the part after the marker.
  - identify_blocks: Within the 'transform_region':
      - Find the start and end of the 'colored_block'.
      - Find the start and end of the 'white_block' immediately following it.
      - Identify any 'prefix_whites'.
  - calculate_shift: Determine the shift distance, which equals the length of the 'white_block'.
  - rearrange: Construct the output's 'transform_region':
      - Place the 'prefix_whites' (if any) first.
      - Place the 'white_block' next.
      - Place the 'colored_block' last within this region.
  - reconstruct_output: Combine the rearranged 'transform_region', the 'marker', and the 'suffix' to form the final output array.
relationships:
  - adjacency: The 'white_block' must be immediately adjacent to (following) the 'colored_block'.
  - dependency: The amount of shift applied to the 'colored_block' depends directly on the length of the 'white_block'.
  - boundary: The 'marker' defines the right boundary for the rearrangement operation. Pixels at or after the marker are unchanged.
