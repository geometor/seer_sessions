task_type: object_manipulation
grid_dimensionality: Primarily 1D (single row), potentially represented as 1xN 2D grid.
input_format_handling: Input grid must be treated as a 1D sequence, flattening necessary if provided as 1xN.
objects:
  - type: background
    color: white (0)
    count: variable
    behavior: static (fills empty space)
  - type: anchor
    color: azure (8)
    count: 1
    shape: single_pixel
    behavior: static (position fixed)
  - type: movable_block
    color: non_white_non_azure (e.g., blue/1, red/2)
    count: 1
    shape: contiguous_horizontal_block
    properties:
      - length: variable
      - color: variable (consistent within block)
    behavior: shifts_horizontally
actions:
  - preprocess: Ensure the input grid is treated as a 1D array (flatten if necessary).
  - identify: locate the index of the single anchor pixel (azure/8) in the 1D input array.
  - identify: locate the contiguous movable_block (non-white/0, non-azure/8) in the 1D input array.
  - determine: record the color and length of the movable_block.
  - calculate: determine the target end index for the movable_block. Target end index = (anchor index) - 1.
  - calculate: determine the target start index for the movable_block. Target start index = (target end index) - (block length) + 1.
  - transform: create an output 1D array of the same size, filled with the background color (white/0).
  - transform: place the anchor pixel at its original index in the output array.
  - transform: place the movable_block (using its recorded color) into the output array spanning from the calculated target start index to the target end index (inclusive).
relationships:
  - adjacency: In the output, the rightmost pixel of the movable_block must be adjacent (to the left) of the anchor pixel.
  - reference_point: The anchor pixel's position dictates the final position of the movable_block.