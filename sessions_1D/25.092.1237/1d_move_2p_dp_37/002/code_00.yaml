task_context:
  grid_dimensionality: 2 # Input is technically 2D (list of lists)
  grid_size_input: fixed (1x9 in examples)
  grid_size_output: fixed (1x9 in examples)
  background_color: white (0)
objects:
  - object_type: pixel
    color: azure (8)
    role: anchor
    properties:
      position_input: variable column index within the single row
      position_output: fixed at the same column index as in input
      count: 1
  - object_type: block
    description: a contiguous horizontal sequence of pixels of a single color C, where C is not white (0) and not azure (8).
    role: movable_object
    properties:
      color: variable (green, magenta, blue in examples)
      length: variable (length of the sequence)
      count: 1 (only one such block exists per input example)
actions:
  - action: identify_row
    description: Extract the single row of data from the 1xN input grid.
  - action: find_anchor
    target: anchor pixel (azure 8) in the input row
    result: store its index (anchor_index)
  - action: find_movable_block
    target: the contiguous block of a single color C (where C != 0 and C != 8) in the input row.
    result: store its color (block_color) and length (block_length)
    constraints: assumes only one such block exists per input row based on examples.
  - action: create_output_grid
    properties:
      size: same as input grid (1xN)
      initial_fill: background_color (white 0)
  - action: place_anchor
    target: anchor pixel (azure 8)
    destination: output grid row at anchor_index
  - action: place_block
    target: the identified block (block_color, block_length)
    destination: output grid row
    details: position the block such that its last pixel is at index (anchor_index - 1). The first pixel of the block will be at index (anchor_index - block_length).
relationships:
  - type: adjacency
    object1: movable_object (block)
    object2: anchor pixel (azure 8)
    state_in_output: The rightmost pixel of object1 is immediately to the left of object2 in the output row.
