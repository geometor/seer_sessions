{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nShift a horizontal colored line within a 1D NumPy array (represented as a 1xN 2D array) \nso that its rightmost end is immediately adjacent (to the left) of a fixed gray pixel (5). \nThe background is white (0). The color and length of the line remain unchanged.\nThe position of the gray pixel remains unchanged.\n\"\"\"\n\ndef find_anchor(grid_row, anchor_color=5):\n    \"\"\"Finds the index of the anchor pixel.\"\"\"\n    anchor_indices = np.where(grid_row == anchor_color)[0]\n    if len(anchor_indices) > 0:\n        return anchor_indices[0] # Assume only one anchor\n    else:\n        # This case should not happen based on task constraints\n        raise ValueError(\"Anchor pixel not found in input grid row.\")\n\ndef find_line(grid_row, background_color=0, anchor_color=5):\n    \"\"\"Finds the start index, end index, color, and length of the colored line.\"\"\"\n    line_indices = np.where((grid_row != background_color) & (grid_row != anchor_color))[0]\n    if len(line_indices) > 0:\n        line_start_index = np.min(line_indices)\n        line_end_index = np.max(line_indices)\n        line_color = grid_row[line_start_index] # Assume line is monochromatic\n        line_length = len(line_indices) # Or line_end_index - line_start_index + 1\n        # Basic check for contiguity (not strictly necessary if input follows pattern)\n        if line_end_index - line_start_index + 1 != line_length:\n             print(f\"Warning: Detected line indices {line_indices} might not be contiguous.\")\n        return line_start_index, line_end_index, line_color, line_length\n    else:\n        # This case should not happen based on task constraints\n        raise ValueError(\"Colored line not found in input grid row.\")\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by shifting the colored line next to the gray anchor pixel.\n\n    Args:\n        input_grid (np.ndarray): A 2D NumPy array of shape (1, N) representing the input grid.\n\n    Returns:\n        np.ndarray: A 2D NumPy array of shape (1, N) representing the transformed grid.\n    \"\"\"\n    # Ensure input is a numpy array\n    if not isinstance(input_grid, np.ndarray):\n        input_grid = np.array(input_grid)\n\n    # Extract the relevant row (assuming 1xN shape)\n    input_row = input_grid[0]\n    grid_width = len(input_row)\n    background_color = 0\n    anchor_color = 5\n\n    # --- Identify elements ---\n    # Find the anchor pixel's index\n    anchor_index = find_anchor(input_row, anchor_color)\n\n    # Find the line's properties\n    line_start_index, line_end_index, line_color, line_length = find_line(input_row, background_color, anchor_color)\n\n    # --- Calculate new position ---\n    # Determine the target end index for the line (immediately left of anchor)\n    target_end_index = anchor_index - 1\n\n    # Determine the new start index for the line\n    new_start_index = target_end_index - line_length + 1\n\n    # --- Construct the output grid ---\n    # Initialize output grid with background color\n    output_row = np.full(grid_width, background_color, dtype=input_row.dtype)\n\n    # Place the anchor pixel at its original position\n    output_row[anchor_index] = anchor_color\n\n    # Place the colored line at its new calculated position\n    # Ensure indices are within bounds before slicing (although calculation should guarantee this if input is valid)\n    if 0 <= new_start_index < grid_width and 0 <= target_end_index < grid_width:\n         output_row[new_start_index : target_end_index + 1] = line_color\n    else:\n         # Handle potential edge case where the line might not fit (shouldn't happen in examples)\n         print(f\"Warning: Calculated line position [{new_start_index}, {target_end_index}] is out of bounds for grid width {grid_width}.\")\n         # Fallback or error handling could be added here if necessary\n\n    # Reshape the 1D row back into a 2D (1xN) grid format\n    output_grid = output_row.reshape(1, grid_width)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8663,
    "candidates_token_count": 1092,
    "total_token_count": 9755,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.793965,
  "retries": 1
}