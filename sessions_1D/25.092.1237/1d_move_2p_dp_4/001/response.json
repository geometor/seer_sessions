{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Tuple, Optional\n\n# Define colors for clarity, though only numeric values are used in the logic\nCOLOR_MAP = {\n    0: \"white\",\n    1: \"blue\",\n    2: \"red\",\n    3: \"green\",\n    4: \"yellow\",\n    5: \"gray\",\n    6: \"magenta\",\n    7: \"orange\",\n    8: \"azure\",\n    9: \"maroon\",\n}\nWHITE = 0\nAZURE = 8\n\ndef find_colored_block(grid: List[int]) -> Optional[Tuple[int, int, int]]:\n    \"\"\"\n    Finds the contiguous horizontal block of pixels that are not white (0) and not azure (8).\n\n    Args:\n        grid: A 1D list representing the input grid row.\n\n    Returns:\n        A tuple containing (start_index, end_index, color) of the block,\n        or None if no such block is found.\n    \"\"\"\n    start_index = -1\n    block_color = -1\n    for i, pixel in enumerate(grid):\n        if pixel != WHITE and pixel != AZURE:\n            if start_index == -1:\n                start_index = i\n                block_color = pixel\n            # Continue if the pixel matches the block color\n            elif pixel != block_color:\n                # Found the end of the block because the color changed\n                return start_index, i - 1, block_color\n        elif start_index != -1:\n            # Found the end of the block because we hit white or azure\n            return start_index, i - 1, block_color\n\n    # Check if the block extends to the end of the grid\n    if start_index != -1:\n        return start_index, len(grid) - 1, block_color\n\n    return None # No block found\n\ndef find_anchor_pixel(grid: List[int]) -> Optional[int]:\n    \"\"\"\n    Finds the index of the azure (8) pixel.\n\n    Args:\n        grid: A 1D list representing the input grid row.\n\n    Returns:\n        The index of the azure pixel, or None if not found.\n    \"\"\"\n    for i, pixel in enumerate(grid):\n        if pixel == AZURE:\n            return i\n    return None\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Transforms the input grid according to the following rules:\n    1. Identifies a contiguous horizontal block of a single color (not white 0 or azure 8).\n    2. Identifies a single azure (8) anchor pixel.\n    3. Shifts the colored block horizontally to the right so that its rightmost pixel\n       is immediately adjacent (left) to the azure anchor pixel.\n    4. Fills the original position of the block with white (0) pixels.\n    5. The anchor pixel and other background pixels remain in their positions unless\n       overwritten by the shifted block.\n    \"\"\"\n    # Ensure input is treated as a 1D list\n    if input_grid.ndim > 1 and input_grid.shape[0] != 1:\n        raise ValueError(\"Input grid must be 1D or have height 1\")\n    input_list = input_grid.flatten().tolist()\n    grid_len = len(input_list)\n\n    # 1. & 2. Identify the colored block and the anchor pixel\n    block_info = find_colored_block(input_list)\n    anchor_index = find_anchor_pixel(input_list)\n\n    # If block or anchor not found, return input unchanged\n    if block_info is None or anchor_index is None:\n        # print(\"Warning: Block or anchor not found. Returning original grid.\")\n        return input_grid # Return original numpy array\n\n    block_start, block_end, block_color = block_info\n    block_length = block_end - block_start + 1\n\n    # 3. Calculate the target position for the block\n    target_end_index = anchor_index - 1\n\n    # Check if the block is already in the target position\n    if block_end == target_end_index:\n        return input_grid # Return original numpy array, no shift needed\n\n    # Calculate new start and end indices\n    new_block_end = target_end_index\n    new_block_start = new_block_end - block_length + 1\n\n    # Check for boundary conditions (shouldn't happen with valid ARC inputs/rules)\n    if new_block_start < 0 or new_block_end >= grid_len:\n        # print(\"Warning: Calculated shift results in out-of-bounds position. Returning original grid.\")\n        return input_grid # Or handle error appropriately\n\n    # 4. & 5. Create the output grid\n    # Initialize output with white pixels\n    output_list = [WHITE] * grid_len\n\n    # Place the anchor pixel\n    output_list[anchor_index] = AZURE\n\n    # Place the shifted block\n    for i in range(block_length):\n        output_list[new_block_start + i] = block_color\n\n    # Convert back to numpy array with original shape\n    output_grid = np.array(output_list).reshape(input_grid.shape)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2555,
    "candidates_token_count": 1222,
    "total_token_count": 3777,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 19.104698,
  "retries": 1
}