{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid by filling horizontal spans between consecutive pairs of non-white pixels of the same color within each row.\nFor each row:\n1. Find all non-white pixels (color > 0).\n2. Sort these pixels by their column index.\n3. Iterate through the sorted pixels, considering adjacent pairs (pixel i and pixel i+1).\n4. If a pair has the same non-white color:\n   a. Get the column index of the left pixel (col1) and the right pixel (col2).\n   b. Fill the corresponding row in the output grid from col1 to col2 (inclusive) with that color.\nRows with fewer than two non-white pixels remain unchanged relative to this filling operation (but will retain their original non-white pixels).\n\"\"\"\n\nimport numpy as np\n\ndef find_and_sort_non_white(row):\n    \"\"\"\n    Finds non-white pixels in a row and returns them sorted by column index.\n    \n    Args:\n        row (np.array): A 1D numpy array representing a grid row.\n\n    Returns:\n        list: A list of tuples (column_index, color), sorted by column_index. \n              Returns an empty list if no non-white pixels are found.\n    \"\"\"\n    non_white_indices = np.where(row > 0)[0]\n    if len(non_white_indices) == 0:\n        return []\n    \n    pixels = []\n    for col in non_white_indices:\n        pixels.append((col, row[col]))\n        \n    # Sorting is implicitly handled by np.where returning sorted indices,\n    # but explicit sort ensures correctness if np.where behavior changes.\n    pixels.sort(key=lambda x: x[0]) \n    return pixels\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the described transformation to the input grid.\n\n    Args:\n        input_grid (np.array): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.array: A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n    num_rows, _ = input_grid.shape\n\n    # Iterate through each row\n    for r in range(num_rows):\n        current_row = input_grid[r, :]\n        \n        # Find and sort non-white pixels in the current row\n        sorted_pixels = find_and_sort_non_white(current_row)\n        \n        # Need at least two pixels to form a pair\n        if len(sorted_pixels) < 2:\n            continue\n            \n        # Iterate through consecutive pairs of sorted non-white pixels\n        for i in range(len(sorted_pixels) - 1):\n            col1, color1 = sorted_pixels[i]\n            col2, color2 = sorted_pixels[i+1]\n            \n            # Check if the pair has the same color\n            if color1 == color2:\n                # Fill the span between the pair (inclusive) in the output grid row\n                # Slicing end is exclusive, so use col2 + 1\n                output_grid[r, col1:col2 + 1] = color1\n                \n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8092,
    "candidates_token_count": 762,
    "total_token_count": 8854,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.606609,
  "retries": 1
}