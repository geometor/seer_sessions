{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid by performing a horizontal fill operation on each row independently.\nFor each row in the input grid:\n1. Find all non-white pixels (color > 0).\n2. If non-white pixels exist:\n   a. Identify the color of these pixels (assuming only one non-white color per relevant row).\n   b. Find the column index of the leftmost non-white pixel (`min_col`).\n   c. Find the column index of the rightmost non-white pixel (`max_col`).\n   d. In the corresponding row of the output grid, set all pixels from `min_col` to `max_col` (inclusive) to the identified non-white color.\n3. If no non-white pixels exist in a row, that row remains unchanged in the output.\n\"\"\"\n\nimport numpy as np\n\ndef find_row_span_properties(row):\n    \"\"\"\n    Finds the leftmost and rightmost non-white pixels and their color in a row.\n\n    Args:\n        row (np.array): A 1D numpy array representing a grid row.\n\n    Returns:\n        tuple: (min_col, max_col, fill_color) if non-white pixels are found,\n               otherwise (None, None, None).\n    \"\"\"\n    # Find indices of all non-white pixels (color > 0)\n    non_white_indices = np.where(row > 0)[0]\n    \n    # Check if any non-white pixels were found\n    if len(non_white_indices) == 0:\n        return None, None, None  # No non-white pixels in this row\n    \n    # Determine the fill color (assuming one non-white color per relevant row)\n    # Takes the color of the first non-white pixel found\n    fill_color = row[non_white_indices[0]] \n    \n    # Find the minimum (leftmost) column index\n    min_col = non_white_indices.min()\n    \n    # Find the maximum (rightmost) column index\n    max_col = non_white_indices.max()\n    \n    return min_col, max_col, fill_color\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the horizontal fill transformation to the input grid based on row spans.\n\n    Args:\n        input_grid (np.array): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.array: A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    # Initialize output_grid as a copy of the input grid\n    output_grid = np.copy(input_grid)\n    num_rows = input_grid.shape[0]\n\n    # Iterate through each row of the input grid\n    for r in range(num_rows):\n        # Get the current row from the input grid\n        current_row = input_grid[r, :]\n        \n        # Find the properties (min/max column, color) of the non-white span in this row\n        min_col, max_col, fill_color = find_row_span_properties(current_row)\n        \n        # Check if a non-white span was found (i.e., min_col is not None)\n        if min_col is not None:\n            # Fill the identified span in the corresponding row of the output grid\n            # Slicing end index (max_col + 1) is exclusive, correctly including max_col\n            output_grid[r, min_col : max_col + 1] = fill_color\n            \n    # Return the modified output grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 11553,
    "candidates_token_count": 824,
    "total_token_count": 12377,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.128822,
  "retries": 1
}