{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid by performing a horizontal fill operation on each row independently.\nFor each row in the input grid:\n1. Find all non-white pixels (color > 0).\n2. If non-white pixels exist:\n   a. Identify the color of these pixels (assuming only one non-white color per relevant row).\n   b. Find the column index of the leftmost non-white pixel (`min_col`).\n   c. Find the column index of the rightmost non-white pixel (`max_col`).\n   d. In the corresponding row of the output grid, set all pixels from `min_col` to `max_col` (inclusive) to the identified non-white color.\n3. If no non-white pixels exist in a row, that row remains unchanged in the output.\n\"\"\"\n\nimport numpy as np\n\ndef find_non_white_pixels(row):\n    \"\"\"Finds the indices and color of non-white pixels in a row.\"\"\"\n    non_white_indices = np.where(row > 0)[0]\n    if len(non_white_indices) == 0:\n        return None, None, None  # No non-white pixels\n    \n    # Assuming only one non-white color per relevant row based on examples\n    color = row[non_white_indices[0]] \n    min_col = non_white_indices.min()\n    max_col = non_white_indices.max()\n    \n    return min_col, max_col, color\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the horizontal fill transformation to the input grid.\n\n    Args:\n        input_grid (np.array): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.array: A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n    num_rows, _ = input_grid.shape\n\n    # Iterate through each row\n    for r in range(num_rows):\n        current_row = input_grid[r, :]\n        \n        # Find the boundaries and color of the non-white span in the current row\n        min_col, max_col, fill_color = find_non_white_pixels(current_row)\n        \n        # If non-white pixels were found in this row\n        if min_col is not None:\n            # Fill the span in the output grid row\n            # The range is inclusive of max_col, hence max_col + 1 for slicing\n            output_grid[r, min_col:max_col + 1] = fill_color\n            \n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2921,
    "candidates_token_count": 620,
    "total_token_count": 3541,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.074116,
  "retries": 1
}