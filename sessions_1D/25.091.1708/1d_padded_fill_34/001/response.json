{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nFill horizontal segments in each row defined by the first and last occurrence of the non-white pixel color.\n\nFor each row in the input grid:\n1. Identify the unique non-white color present in the entire input grid.\n2. Find the column index of the leftmost occurrence of this non-white color in the row.\n3. Find the column index of the rightmost occurrence of this non-white color in the row.\n4. If non-white pixels are found in the row, fill the corresponding row in the output grid \n   between the leftmost and rightmost indices (inclusive) with that non-white color.\n5. If a row contains only the background color (white, 0), leave the corresponding row in the \n   output grid as all white.\n\"\"\"\n\ndef find_non_white_color(grid):\n  \"\"\"Finds the first non-white (non-zero) color in the grid.\"\"\"\n  unique_colors = np.unique(grid)\n  for color in unique_colors:\n    if color != 0:\n      return color\n  return 0 # Should not happen based on task examples, but return background if no other color found\n\ndef transform(input_grid):\n  \"\"\"\n  Applies the horizontal segment filling transformation.\n  \"\"\"\n  # Convert input list of lists to numpy array for easier processing\n  input_grid_np = np.array(input_grid, dtype=int)\n  height, width = input_grid_np.shape\n\n  # Initialize output grid with the background color (white, 0)\n  output_grid = np.zeros_like(input_grid_np)\n\n  # Find the dominant non-white color in the input grid\n  fill_color = find_non_white_color(input_grid_np)\n\n  # If no non-white color is found (e.g., all white input), return the all-white grid\n  if fill_color == 0:\n      return output_grid.tolist() # Return as list of lists\n\n  # Process each row independently\n  for r in range(height):\n    row = input_grid_np[r, :]\n    \n    # Find the indices of the fill_color in the current row\n    indices = np.where(row == fill_color)[0]\n\n    # If the fill_color exists in this row\n    if len(indices) > 0:\n      # Find the first (leftmost) and last (rightmost) occurrences\n      start_col = np.min(indices)\n      end_col = np.max(indices)\n\n      # Fill the segment in the output grid's corresponding row\n      output_grid[r, start_col : end_col + 1] = fill_color\n\n  # Return the result as a list of lists, as required by the ARC format\n  return output_grid.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2581,
    "candidates_token_count": 645,
    "total_token_count": 3226,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 8.492961,
  "retries": 1
}