{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nFill horizontal segments in each row, bounded by the first (leftmost) and \nlast (rightmost) non-white pixels found in that row of the input grid. \nThe background color is assumed to be white (0). The single non-white \ncolor present in the input is used for filling the segments. Rows \ncontaining only the background color remain unchanged.\n\"\"\"\n\ndef find_non_white_color(grid_np):\n  \"\"\"\n  Identifies the single non-white color present in the grid.\n  Assumes exactly one non-white color exists besides the background (0).\n\n  Args:\n    grid_np: A NumPy array representing the input grid.\n\n  Returns:\n    The integer value of the non-white color, or 0 if only background \n    color is found (though this case is unlikely based on examples).\n  \"\"\"\n  unique_colors = np.unique(grid_np)\n  for color in unique_colors:\n    if color != 0:\n      return color\n  return 0 # Return background color if no other color is found\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the horizontal segment filling transformation to the input grid.\n\n    Args:\n      input_grid: A list of lists representing the input grid.\n\n    Returns:\n      A list of lists representing the transformed output grid.\n    \"\"\"\n    # Convert input list of lists to a NumPy array for efficient processing\n    input_grid_np = np.array(input_grid, dtype=int)\n    height, width = input_grid_np.shape\n\n    # Initialize the output grid with the background color (white, 0)\n    # It will have the same dimensions as the input grid.\n    output_grid_np = np.zeros_like(input_grid_np)\n\n    # Identify the single non-white color used in the input grid\n    fill_color = find_non_white_color(input_grid_np)\n\n    # If the input grid only contains the background color, return the all-white output grid\n    if fill_color == 0:\n        return output_grid_np.tolist()\n\n    # Process each row independently\n    for r in range(height):\n        # Get the current row from the input grid\n        row = input_grid_np[r, :]\n        \n        # Find the column indices where the non-white color appears in this row\n        indices = np.where(row == fill_color)[0]\n\n        # Check if the non-white color was found in the current row\n        if len(indices) > 0:\n            # Determine the start (leftmost) and end (rightmost) columns for the segment\n            start_col = np.min(indices)\n            end_col = np.max(indices)\n\n            # Fill the segment in the corresponding row of the output grid\n            # Slicing includes start_col but excludes end_col+1, so end_col+1 is needed.\n            output_grid_np[r, start_col : end_col + 1] = fill_color\n        \n        # If the non-white color is not found in the row, the output row remains \n        # initialized as all background color (0), so no action is needed.\n\n    # Convert the final NumPy array back to a list of lists for the required output format\n    return output_grid_np.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8460,
    "candidates_token_count": 771,
    "total_token_count": 9231,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.293534,
  "retries": 1
}