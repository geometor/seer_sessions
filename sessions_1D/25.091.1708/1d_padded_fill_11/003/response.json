{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import defaultdict\nfrom typing import List, Tuple, Optional\n\n\"\"\"\nProcesses the input grid row by row.\nFor each row:\n1. Identifies all non-white pixels and groups their column indices by color.\n2. Counts how many distinct colors appear exactly twice in the row.\n3. If exactly one color (C) appears exactly twice:\n    a. Finds the column indices (col1, col2, where col1 < col2) of these two pixels.\n    b. Fills the segment of the row strictly between col1 and col2 (columns col1 + 1 to col2 - 1) with color C.\n4. Otherwise (if no color appears exactly twice, or multiple colors do), the row remains unchanged.\nThe output grid is initially a copy of the input grid, and modifications are applied directly to the output grid's rows.\n\"\"\"\n\ndef analyze_row(row: np.ndarray) -> Optional[Tuple[int, int, int]]:\n    \"\"\"\n    Analyzes a single row to find if there is exactly one color\n    that appears exactly twice.\n\n    Args:\n        row (np.ndarray): A 1D numpy array representing a row of the grid.\n\n    Returns:\n        Optional[Tuple[int, int, int]]: A tuple (color, col1, col2) if the\n                                         condition is met, otherwise None.\n                                         col1 and col2 are the sorted indices.\n    \"\"\"\n    non_white_pixels = defaultdict(list)\n    for c, pixel_color in enumerate(row):\n        if pixel_color != 0:  # 0 is white/background\n            non_white_pixels[pixel_color].append(c)\n\n    # Find colors that appear exactly twice\n    colors_with_two_pixels = []\n    for color, indices in non_white_pixels.items():\n        if len(indices) == 2:\n            colors_with_two_pixels.append((color, sorted(indices))) # Store color and sorted indices\n\n    # Check if exactly one such color exists\n    if len(colors_with_two_pixels) == 1:\n        color, indices = colors_with_two_pixels[0]\n        return color, indices[0], indices[1]\n    else:\n        return None\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transforms the input grid based on filling between pairs of identical\n    non-white pixels in each row, if that pair is unique for its color count.\n\n    Args:\n        input_grid (List[List[int]]): The input grid.\n\n    Returns:\n        List[List[int]]: The transformed grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_grid_np = np.array(input_grid, dtype=int)\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid_np)\n    rows, cols = input_grid_np.shape\n\n    # Iterate through each row of the input grid\n    for r in range(rows):\n        current_row = input_grid_np[r, :]\n\n        # Analyze the row to find if the specific pair condition is met\n        analysis_result = analyze_row(current_row)\n\n        # If a unique pair satisfying the condition is found\n        if analysis_result is not None:\n            fill_color, col1, col2 = analysis_result\n\n            # Fill the segment in the output grid row\n            # range(col1 + 1, col2) covers indices strictly between col1 and col2\n            if col1 + 1 < col2: # Ensure there's actually space to fill\n                 output_grid[r, col1 + 1 : col2] = fill_color\n            # If col1 + 1 == col2, there are no pixels between them, so nothing to fill.\n\n        # Else (no unique pair condition met), the row in output_grid\n        # remains unchanged (as it was initially copied).\n\n    # Convert the result back to list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7263,
    "candidates_token_count": 941,
    "total_token_count": 8204,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 21.981946,
  "retries": 1
}