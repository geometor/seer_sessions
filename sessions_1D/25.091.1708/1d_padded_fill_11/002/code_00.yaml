task_context:
  grid_properties:
    - dimensions_preserved: True # Input and Output grids have the same shape.
    - background_color: white (0) # Background color is consistently white.
  transformation_type: conditional_row_segment_filling
objects:
  - type: pixel
    properties:
      - color: non-white (1-9) or white (0)
      - position: (row_index, column_index)
  - type: row
    properties:
      - content: sequence of pixels
      - features: counts of each non-white color present.
relationships:
  - type: horizontal_pair
    description: Two pixels within the same row having the same non-white color.
    properties:
      - color: The color of the pair.
      - indices: The column indices (col1, col2) of the pair, assuming col1 < col2.
  - type: horizontal_segment
    description: The sequence of pixels in a row strictly between col1 and col2 (i.e., indices from col1 + 1 to col2 - 1).
actions:
  - name: analyze_row_colors
    inputs: row
    outputs: map of {color -> list_of_column_indices} for non-white pixels.
  - name: identify_unique_pair
    inputs: color_map (output of analyze_row_colors)
    outputs: identified_pair [color, col1, col2] or None
    condition: The map must contain exactly one entry where the list_of_column_indices has length 2. No other colors should be present, nor should the single color appear more or less than twice. (Correction: Based on re-reading the code logic vs problem description, the condition should be: Exactly one color group has size 2. Other color groups of different sizes might exist but don't trigger the rule). Let's stick to the simpler interpretation fitting the examples: Only one color is present, and it appears exactly twice. (Revisiting again: The code *actually* checks `num_colors_with_pairs == 1`. This means a row like `[1,0,1,0,2,0,2,0,3]` would NOT be modified, but `[1,0,1,0,3,0,0]` *would* be modified. The examples only show the simplest case `[C,0,...,0,C]`. The code logic `num_colors_with_pairs == 1` seems the most robust generalization).
    condition_refined: There is exactly one color C for which the count of pixels with color C in the row is precisely 2.
  - name: fill_segment
    inputs: row, identified_pair [color, col1, col2]
    outputs: modified_row
    description: Change the color of all pixels in the row at column indices `c` where `col1 < c < col2` to `color`.
    target_pixels: Any pixel (including non-white ones, though examples only show white being overwritten).
  - name: copy_row
    inputs: row
    outputs: identical_row
    condition: The condition for identify_unique_pair is not met for the row.
transformation_flow:
  - step: Create an output grid identical to the input grid.
  - step: Iterate through each row of the input grid (let the row index be `r`).
  - step: Apply analyze_row_colors to the input row `r`.
  - step: Apply identify_unique_pair to the result.
  - step: If a unique pair [color, col1, col2] is identified:
    - Apply fill_segment to the corresponding row `r` in the *output* grid, using the identified pair's color and indices.
  - step: If no unique pair is identified, the corresponding row `r` in the output grid remains unchanged (as it was copied initially).
  - step: Return the final output grid.