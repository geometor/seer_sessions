{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import defaultdict\nfrom typing import List, Tuple, Optional\n\n\"\"\"\nProcesses the input grid row by row. For each row, it checks if there is \nexactly one non-white color that appears exactly twice. If this condition is met, \nit identifies the color (C) and the column indices (col1, col2) of the pair. \nIt then fills the segment of the row strictly between col1 and col2 \n(columns col1 + 1 to col2 - 1) with color C in the output grid. \nRows that do not meet this condition remain unchanged in the output grid.\n\"\"\"\n\ndef analyze_row(row: np.ndarray) -> Optional[Tuple[int, int, int]]:\n    \"\"\"\n    Analyzes a single row to find if there is exactly one color\n    that appears exactly twice.\n\n    Args:\n        row (np.ndarray): A 1D numpy array representing a row of the grid.\n\n    Returns:\n        Optional[Tuple[int, int, int]]: A tuple (color, col1, col2) if the\n                                         condition is met, otherwise None.\n                                         col1 and col2 are the sorted indices.\n    \"\"\"\n    non_white_pixels = defaultdict(list)\n    # Find all non-white pixels and group their column indices by color\n    for c, pixel_color in enumerate(row):\n        if pixel_color != 0:  # 0 is white/background\n            non_white_pixels[pixel_color].append(c)\n\n    # Find colors that appear exactly twice\n    colors_with_two_pixels = []\n    for color, indices in non_white_pixels.items():\n        if len(indices) == 2:\n            # Store the color and the sorted indices of the pair\n            colors_with_two_pixels.append((color, sorted(indices))) \n\n    # Check if exactly one such color exists\n    if len(colors_with_two_pixels) == 1:\n        color, (col1, col2) = colors_with_two_pixels[0]\n        return color, col1, col2\n    else:\n        # Return None if zero or more than one color appears exactly twice\n        return None\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transforms the input grid based on filling between unique pairs of identical\n    non-white pixels in each row.\n\n    Args:\n        input_grid (List[List[int]]): The input grid represented as a list of lists.\n\n    Returns:\n        List[List[int]]: The transformed grid as a list of lists.\n    \"\"\"\n    # Convert input to numpy array for efficient processing\n    input_grid_np = np.array(input_grid, dtype=int)\n    \n    # Initialize output_grid as a copy of the input grid. Modifications will be made to this copy.\n    output_grid = np.copy(input_grid_np)\n    rows, _ = input_grid_np.shape\n\n    # Iterate through each row of the input grid\n    for r in range(rows):\n        # Get the current row from the input grid\n        current_row = input_grid_np[r, :]\n\n        # Analyze the row to find if the specific pair condition is met\n        analysis_result = analyze_row(current_row)\n\n        # If exactly one color was found appearing exactly twice\n        if analysis_result is not None:\n            # Unpack the color and indices from the analysis result\n            fill_color, col1, col2 = analysis_result\n\n            # Fill the segment in the corresponding row of the output grid\n            # The slice col1 + 1 : col2 selects columns strictly between col1 and col2.\n            # If col1 and col2 are adjacent (col2 == col1 + 1), this slice is empty and no change occurs.\n            if col1 + 1 < col2: \n                 output_grid[r, col1 + 1 : col2] = fill_color\n        \n        # Else (the condition was not met for this row)\n        # No action is needed, as the output_grid row already holds the copied original row content.\n\n    # Convert the final numpy array back to a list of lists format for the expected output type\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 10557,
    "candidates_token_count": 985,
    "total_token_count": 11542,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.739644,
  "retries": 1
}