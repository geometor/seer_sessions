{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Processes a 2D grid row by row.\n    For each row containing non-white pixels:\n    1. Identify the color (C) and the leftmost (min_col) and rightmost (max_col)\n       indices of these non-white pixels.\n    2. Determine the end column (end_col) for filling:\n        - If C is green (3), end_col is the last column index of the grid.\n        - Otherwise, end_col is max_col.\n    3. In the output grid's corresponding row, fill the pixels from min_col to\n       end_col (inclusive) with color C.\n    Rows containing only white pixels remain unchanged.\n    \"\"\"\n\n    # Convert input list of lists to a NumPy array for easier manipulation\n    input_array = np.array(input_grid, dtype=int)\n    # Initialize the output grid as a copy of the input\n    output_array = np.copy(input_array)\n    height, width = input_array.shape\n\n    # Iterate through each row of the grid\n    for r in range(height):\n        # Get the current row\n        row = input_array[r, :]\n        \n        # Find the column indices of non-white (non-zero) pixels\n        non_white_cols = np.where(row != 0)[0]\n\n        # If there are no non-white pixels in this row, continue to the next row\n        if len(non_white_cols) == 0:\n            continue\n\n        # Identify the color (assuming all non-white pixels in a row are the same color)\n        # Get the color from the first non-white pixel found\n        pixel_color = row[non_white_cols[0]]\n        \n        # Find the minimum (leftmost) column index\n        min_col = np.min(non_white_cols)\n        # Find the maximum (rightmost) column index\n        max_col = np.max(non_white_cols)\n\n        # Determine the end column for filling based on the color\n        if pixel_color == 3:  # Green\n            end_col = width - 1\n        else: # Other colors (Red, Blue in examples)\n            end_col = max_col\n\n        # Fill the segment in the output grid's corresponding row\n        output_array[r, min_col:end_col + 1] = pixel_color\n\n    # Convert the output NumPy array back to a list of lists\n    output_grid = output_array.tolist()\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3241,
    "candidates_token_count": 597,
    "total_token_count": 3838,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.826129,
  "retries": 1
}