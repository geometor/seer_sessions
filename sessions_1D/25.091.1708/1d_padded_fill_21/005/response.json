{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nProcesses the input grid row by row. \nIf a row contains exactly two non-white pixels and both pixels have the same color, \nit fills the horizontal segment between these two pixels (inclusive) with that color. \nOtherwise, the row remains unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef find_non_white_pixels(row):\n    \"\"\"\n    Finds the indices and colors of non-white pixels in a given row.\n\n    Args:\n        row (np.array): A 1D numpy array representing a row of the grid.\n\n    Returns:\n        list: A list of tuples, where each tuple contains (column_index, color).\n              Returns an empty list if no non-white pixels are found.\n    \"\"\"\n    non_white = []\n    # Iterate through each pixel in the row along with its column index\n    for col_index, color in enumerate(row):\n        # Check if the pixel color is not white (0)\n        if color != 0: \n            # If not white, add its column index and color to the list\n            non_white.append((col_index, color))\n    return non_white\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on the rule: \n    Fill horizontal segments between pairs of identical non-white pixels in a row.\n\n    Args:\n        input_grid (list of lists): The input grid represented as a list of lists of integers.\n\n    Returns:\n        list of lists: The transformed grid.\n    \"\"\"\n    # Convert input list of lists to a numpy array for efficient row-wise operations\n    input_array = np.array(input_grid, dtype=int)\n    \n    # Initialize the output grid as a copy of the input grid. \n    # Rows will be modified in place if conditions are met.\n    output_array = np.copy(input_array)\n    \n    # Get the number of rows in the grid\n    num_rows = input_array.shape[0]\n\n    # Iterate through each row index\n    for r in range(num_rows):\n        # Get the current row from the input array\n        current_row = input_array[r, :]\n        \n        # Find all non-white pixels (their column index and color) in the current row\n        non_white_pixels = find_non_white_pixels(current_row)\n        \n        # Check if exactly two non-white pixels were found in this row\n        if len(non_white_pixels) == 2:\n            # Extract the column index and color for the first non-white pixel\n            (col1, color1) = non_white_pixels[0]\n            # Extract the column index and color for the second non-white pixel\n            (col2, color2) = non_white_pixels[1]\n            \n            # Check if the colors of the two non-white pixels are the same\n            if color1 == color2:\n                # Conditions met: exactly two non-white pixels of the same color.\n                # Determine the color to fill the segment with\n                fill_color = color1 \n                # Determine the start and end columns for filling, ensuring correct order\n                start_col = min(col1, col2)\n                end_col = max(col1, col2)\n                \n                # Modify the corresponding row in the output array:\n                # Fill the segment from start_col to end_col (inclusive) with the fill_color.\n                # Numpy slicing [start:end] includes start but excludes end, so use end_col + 1.\n                output_array[r, start_col : end_col + 1] = fill_color\n        \n        # If the conditions (exactly 2 non-white pixels of the same color) are not met,\n        # the corresponding row in output_array remains unchanged (as it was initially copied).\n        # No explicit 'else' block is required.\n\n    # Convert the final numpy array back to a standard list of lists format for the output\n    output_grid = output_array.tolist()\n    \n    # Return the transformed grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 10392,
    "candidates_token_count": 936,
    "total_token_count": 11328,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.263519,
  "retries": 1
}