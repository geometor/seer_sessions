{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms a single-row grid based on the arrangement of a non-white color 'C'.\nIf the pattern 'C 0 C' (non-white, white, non-white) exists anywhere in the row,\nit fills the middle 'white' (0) pixel with 'C' for all such occurrences.\nIf the 'C 0 C' pattern does not exist, it finds the first (leftmost) and\nlast (rightmost) occurrence of 'C' and fills the entire span of pixels\nbetween them (inclusive) with 'C'.\nAssumes input is List[List[int]] with exactly one row.\nAssumes at most one unique non-white color is present.\n\"\"\"\n\nimport numpy as np\nfrom typing import List, Tuple, Optional\n\ndef _find_unique_non_white_color(row: np.ndarray) -> Optional[int]:\n    \"\"\"Finds the unique non-white color in a row.\"\"\"\n    non_white_pixels = row[row != 0]\n    unique_non_white = np.unique(non_white_pixels)\n    if len(unique_non_white) == 1:\n        return unique_non_white[0]\n    return None # Return None if zero or more than one non-white colors are found\n\ndef _check_c0c_pattern(row: np.ndarray, color_c: int) -> bool:\n    \"\"\"Checks if the 'C 0 C' pattern exists anywhere in the row.\"\"\"\n    width = len(row)\n    if width < 3:\n        return False\n    for i in range(1, width - 1):\n        if row[i-1] == color_c and row[i] == 0 and row[i+1] == color_c:\n            return True\n    return False\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Applies the conditional transformation rule to the input grid row.\n    \"\"\"\n    # --- Input Validation and Setup ---\n    # Expecting a list containing exactly one list (the row)\n    if not isinstance(input_grid, list) or len(input_grid) != 1 or not isinstance(input_grid[0], list):\n        # print(\"Warning: Input grid does not conform to expected single-row format. Returning original.\")\n        return input_grid\n\n    # Extract the single row and convert to a numpy array\n    row = np.array(input_grid[0], dtype=int)\n    width = len(row)\n    \n    # Handle empty row case\n    if width == 0:\n        return input_grid \n        \n    # --- Identify Color C ---\n    color_c = _find_unique_non_white_color(row)\n\n    # If no single non-white color is found, return original\n    if color_c is None:\n        # This handles cases with only white pixels or multiple non-white colors\n        return input_grid\n\n    # --- Initialize Output ---\n    # Create a copy of the input row to modify\n    output_row = row.copy()\n\n    # --- Check for C 0 C Pattern ---\n    pattern_found = _check_c0c_pattern(row, color_c)\n\n    # --- Apply Conditional Transformation ---\n    if pattern_found:\n        # Rule 1: Fill only the '0' in 'C 0 C' patterns\n        for i in range(1, width - 1):\n            if row[i-1] == color_c and row[i] == 0 and row[i+1] == color_c:\n                # Change the middle '0' pixel to 'C' in the output row\n                output_row[i] = color_c\n    else:\n        # Rule 2: Fill the span between the first and last C\n        # Find indices of all occurrences of color C\n        indices = np.where(row == color_c)[0]\n        \n        # Check if color C was actually found (it should have been, as color_c is not None)\n        if len(indices) > 0:\n            # Find the minimum (first) and maximum (last) index\n            min_idx = np.min(indices)\n            max_idx = np.max(indices)\n            \n            # Fill all pixels from min_idx to max_idx (inclusive) with color C\n            output_row[min_idx : max_idx + 1] = color_c\n        # Else: If C wasn't found (unexpected), output_row remains the initial copy\n\n    # --- Format and Return Output ---\n    # Convert the modified numpy row back into the List[List[int]] format\n    output_grid = [output_row.tolist()]\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 9585,
    "candidates_token_count": 1081,
    "total_token_count": 10666,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.598963,
  "retries": 1
}