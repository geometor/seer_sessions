{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms a single-row grid by identifying a unique non-white color 'C', finding\nall its occurrences, pairing the indices sequentially (1st with 2nd, 3rd with 4th, etc.),\nand filling the segment between each pair (inclusive) with color 'C'. If there is no\nsingle unique non-white color, or fewer than two occurrences are found, the original\ngrid is returned.\n\"\"\"\n\nimport numpy as np\nfrom typing import List, Tuple, Optional\n\ndef _find_unique_non_white_color_and_indices(row: np.ndarray) -> Tuple[Optional[int], Optional[np.ndarray]]:\n    \"\"\"\n    Finds the unique non-white color and its indices in a row.\n\n    Args:\n        row: A numpy array representing the grid row.\n\n    Returns:\n        A tuple containing:\n        - The non-white color value (int) or None if zero or multiple non-white colors exist.\n        - A numpy array of sorted indices where the color occurs, or None if no single color.\n    \"\"\"\n    # Find all non-white pixels\n    non_white_pixels = row[row != 0]\n    \n    # Find the unique non-white colors\n    unique_non_white_colors = np.unique(non_white_pixels)\n\n    # Check if exactly one unique non-white color exists\n    if len(unique_non_white_colors) != 1:\n        return None, None \n        \n    # Get the single non-white color\n    color_c = unique_non_white_colors[0]\n    \n    # Find all indices where this color occurs\n    indices = np.where(row == color_c)[0]\n    \n    # Ensure indices are sorted (np.where usually returns sorted, but good practice)\n    indices.sort() \n    \n    return color_c, indices\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Applies the segment-filling transformation rule based on paired indices.\n\n    Args:\n        input_grid: A list containing a single list of integers representing the input row.\n\n    Returns:\n        A list containing a single list of integers representing the transformed row.\n    \"\"\"\n    \n    # --- Input Validation and Setup ---\n    # Expecting a list containing exactly one list (the row)\n    if not isinstance(input_grid, list) or len(input_grid) != 1 or not isinstance(input_grid[0], list):\n        # Return original if format is not a single row grid\n        return input_grid\n\n    # Extract the single row and convert to a numpy array\n    row = np.array(input_grid[0], dtype=int)\n    \n    # Handle empty row case\n    if row.size == 0:\n        return input_grid \n        \n    # --- Identify Color and Indices ---\n    # Find the unique non-white color and its positions\n    color_c, indices = _find_unique_non_white_color_and_indices(row)\n\n    # If no single non-white color is found, return the original grid\n    if color_c is None or indices is None:\n        return input_grid\n\n    # If fewer than two occurrences of the color exist, no pairs can be formed\n    if len(indices) < 2:\n        return input_grid\n\n    # --- Apply Transformation ---\n    # Initialize the output row as a copy of the input row\n    output_row = row.copy()\n\n    # Iterate through the indices, taking pairs (0, 1), (2, 3), etc.\n    # The range stops before the last index if the count is odd.\n    for i in range(0, len(indices) - 1, 2):\n        # Get the start and end index for the current pair\n        start_index = indices[i]\n        end_index = indices[i+1]\n        \n        # Fill the segment from start_index to end_index (inclusive) with color_c\n        # Note: Slicing in numpy is [start:end+1] for inclusive end\n        output_row[start_index : end_index + 1] = color_c\n\n    # --- Format and Return Output ---\n    # Convert the modified numpy row back into the List[List[int]] format\n    output_grid = [output_row.tolist()]\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 11352,
    "candidates_token_count": 1005,
    "total_token_count": 12357,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.166279,
  "retries": 1
}