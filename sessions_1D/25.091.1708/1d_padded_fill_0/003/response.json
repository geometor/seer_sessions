{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms a single-row grid by identifying a unique non-white color 'C' and filling \nthe segments between consecutive occurrences of 'C' with that color.\n\nAssumes the input grid contains exactly one row.\nAssumes there is exactly one non-white color present in the input row.\nAssumes there are at least two instances of the non-white color.\nIf these assumptions are not met, the original grid is returned.\n\"\"\"\n\nimport numpy as np\nfrom typing import List, Tuple, Optional\n\ndef find_non_white_color_and_indices(row: np.ndarray) -> Tuple[Optional[int], Optional[np.ndarray]]:\n    \"\"\"\n    Finds the unique non-white color and its indices in a row.\n\n    Args:\n        row: A numpy array representing the grid row.\n\n    Returns:\n        A tuple containing:\n        - The non-white color value (int) or None if none or multiple are found.\n        - A numpy array of indices where the color occurs, or None.\n    \"\"\"\n    non_white_pixels = row[row != 0]\n    unique_non_white = np.unique(non_white_pixels)\n\n    if len(unique_non_white) != 1:\n        # No non-white color or multiple different non-white colors found\n        return None, None \n        \n    color_c = unique_non_white[0]\n    indices = np.where(row == color_c)[0]\n    \n    # Ensure indices are sorted (np.where usually returns them sorted, but being explicit)\n    indices.sort() \n    \n    return color_c, indices\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid: A list containing a single list of integers representing the input row.\n\n    Returns:\n        A list containing a single list of integers representing the transformed row.\n    \"\"\"\n    \n    # --- Input Validation and Setup ---\n    # Expecting a list containing exactly one list (the row)\n    if not isinstance(input_grid, list) or len(input_grid) != 1 or not isinstance(input_grid[0], list):\n        print(\"Warning: Input grid does not conform to expected single-row format. Returning original.\")\n        return input_grid\n\n    # Extract the single row and convert to a numpy array\n    row = np.array(input_grid[0], dtype=int)\n    \n    # Handle empty row case\n    if row.size == 0:\n        return input_grid \n        \n    # --- Identify Color and Indices ---\n    color_c, indices = find_non_white_color_and_indices(row)\n\n    # If no single non-white color is found, or if indices are None, return original\n    if color_c is None or indices is None:\n        # This handles cases with only white pixels or multiple non-white colors\n        return input_grid\n\n    # If fewer than two anchor points exist, no segments can be filled\n    if len(indices) < 2:\n        return input_grid\n\n    # --- Apply Transformation ---\n    # Initialize the output row as a copy of the input row\n    output_row = row.copy()\n\n    # Iterate through consecutive pairs of indices\n    # Example: if indices are [3, 11, 19], pairs are (3, 11) and (11, 19)\n    for i in range(len(indices) - 1):\n        start_index = indices[i]\n        end_index = indices[i+1]\n        \n        # Fill the segment from start_index to end_index (inclusive) with color_c\n        output_row[start_index : end_index + 1] = color_c\n\n    # --- Format and Return Output ---\n    # Convert the modified numpy row back into the List[List[int]] format\n    output_grid = [output_row.tolist()]\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7305,
    "candidates_token_count": 927,
    "total_token_count": 8232,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.405879,
  "retries": 1
}