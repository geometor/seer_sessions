{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransforms the input grid based on row index parity.\n\nFor each row in the input grid:\n1. Find the column index (`first_col`) and color (`fill_color`) of the leftmost non-background pixel (color != 0).\n2. If no non-background pixel exists in the row, the row remains unchanged in the output.\n3. If the row index is even (0, 2, 4, ...):\n   Fill the corresponding row in the output grid from column `first_col` to the right edge (last column) with `fill_color`.\n4. If the row index is odd (1, 3, 5, ...):\n   Fill the corresponding row in the output grid from the left edge (column 0) up to and including column `first_col` with `fill_color`.\n\"\"\"\n\ndef find_leftmost_non_background(row):\n    \"\"\"\n    Finds the index and color of the leftmost non-background pixel in a row.\n\n    Args:\n        row (np.array): A 1D numpy array representing a row of the grid.\n\n    Returns:\n        tuple: (column_index, color) if found, otherwise (None, None).\n               Background color is assumed to be 0.\n    \"\"\"\n    for col_index, pixel_color in enumerate(row):\n        if pixel_color != 0:\n            return col_index, pixel_color\n    return None, None\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the alternating row fill transformation.\n    \"\"\"\n    # Convert input list of lists to a numpy array for efficient processing\n    input_np = np.array(input_grid, dtype=int)\n    \n    # Initialize output_grid as a copy of the input grid\n    output_grid = np.copy(input_np)\n    \n    # Get the dimensions of the grid\n    num_rows, num_cols = output_grid.shape\n\n    # Iterate through each row of the grid using its index\n    for r in range(num_rows):\n        # Get the current row from the *original* input grid\n        current_row_input = input_np[r, :]\n        \n        # Find the leftmost non-background pixel in the current input row\n        first_col, fill_color = find_leftmost_non_background(current_row_input)\n        \n        # Proceed only if a non-background pixel was found\n        if first_col is not None:\n            # Check if the row index is even\n            if r % 2 == 0:\n                # Even row: Fill from the first non-background pixel to the right edge\n                for c in range(first_col, num_cols):\n                    output_grid[r, c] = fill_color\n            else:\n                # Odd row: Fill from the left edge up to and including the first non-background pixel\n                for c in range(0, first_col + 1):\n                    output_grid[r, c] = fill_color\n                    \n    # Convert the resulting numpy array back to a list of lists for the expected output format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8203,
    "candidates_token_count": 718,
    "total_token_count": 8921,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.685955,
  "retries": 1
}