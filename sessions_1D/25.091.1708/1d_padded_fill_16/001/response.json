{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List\n\n\"\"\"\nProcesses a grid row by row. For each row, it identifies if there are any non-background (non-zero) pixels.\nIf non-background pixels exist, it finds the unique color of these pixels and determines the horizontal span\nthey occupy by finding the column index of the leftmost and rightmost pixel of that color.\nThe corresponding row in the output grid is then filled with this color between the leftmost and rightmost\ncolumn indices (inclusive). All other pixels in the output row are set to the background color (0).\nIf a row in the input grid contains only background pixels, the corresponding row in the output grid also\ncontains only background pixels.\n\"\"\"\n\ndef find_non_background_pixels(row: np.ndarray) -> (np.ndarray, int):\n    \"\"\"Finds non-background pixels and their unique color in a row.\"\"\"\n    non_bg_indices = np.where(row != 0)[0]\n    if non_bg_indices.size == 0:\n        return None, 0 # No non-background pixels found\n    \n    # Assuming only one non-background color per row based on examples\n    color = row[non_bg_indices[0]] \n    # Verify assumption (optional but good practice)\n    # if not np.all(row[non_bg_indices] == color):\n    #     raise ValueError(f\"Row contains multiple non-background colors: {row}\")\n        \n    return non_bg_indices, color\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transforms the input grid by filling the horizontal span between the \n    leftmost and rightmost non-background pixels in each row.\n    \n    Args:\n        input_grid: A list of lists representing the input grid.\n\n    Returns:\n        A list of lists representing the transformed output grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    num_rows, num_cols = input_np.shape\n    \n    # Initialize output grid with the same dimensions, filled with background color (0)\n    output_np = np.zeros_like(input_np)\n\n    # Iterate through each row of the input grid\n    for r in range(num_rows):\n        current_row = input_np[r, :]\n        \n        # Find non-background pixels and their color in the current row\n        non_bg_indices, color = find_non_background_pixels(current_row)\n        \n        # If non-background pixels exist in this row\n        if non_bg_indices is not None and non_bg_indices.size > 0:\n            # Find the minimum (leftmost) and maximum (rightmost) column indices\n            min_col = np.min(non_bg_indices)\n            max_col = np.max(non_bg_indices)\n            \n            # Fill the corresponding span in the output row with the determined color\n            output_np[r, min_col : max_col + 1] = color\n            \n        # Else (row is all background), the output row remains all background (already initialized)\n\n    # Convert the result back to a list of lists format if required by the environment\n    return output_np.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3053,
    "candidates_token_count": 759,
    "total_token_count": 3812,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.392579,
  "retries": 1
}