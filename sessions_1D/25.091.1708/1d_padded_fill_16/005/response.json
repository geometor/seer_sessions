{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Tuple, Optional\n\n\"\"\"\nProcesses a 2D grid row by row. For each row, it identifies if there are any \nnon-background (non-zero) pixels. If non-background pixels exist, it determines \nthe unique color of these pixels (assuming only one non-background color per row) \nand finds the horizontal span they occupy by locating the column index of the \nleftmost (minimum index) and rightmost (maximum index) pixel of that color. \nThe corresponding row in the output grid is then filled with this non-background \ncolor between the leftmost and rightmost column indices (inclusive). All other \npixels in that output row are set to the background color (0). If a row in the \ninput grid contains only background pixels, the corresponding row in the output \ngrid also contains only background pixels. The output grid has the same dimensions \nas the input grid.\n\"\"\"\n\ndef _find_row_span(row: np.ndarray) -> Optional[Tuple[int, int, int]]:\n    \"\"\"\n    Finds the color, min column index, and max column index of non-background pixels in a row.\n\n    Args:\n        row: A 1D numpy array representing a row of the grid.\n\n    Returns:\n        A tuple (color, min_col, max_col) if non-background pixels are found,\n        otherwise None. Returns the single non-background color present.\n        Assumes only one non-background color exists per relevant row.\n    \"\"\"\n    # Find indices of all non-background (non-zero) pixels\n    non_bg_indices = np.where(row != 0)[0]\n\n    # If no non-background pixels are found, return None\n    if non_bg_indices.size == 0:\n        return None\n\n    # Determine the color (assuming only one non-background color per row)\n    # Take the color of the first non-background pixel found\n    # This assumes homogeneity of non-background color within a row if multiple exist\n    color = row[non_bg_indices[0]] \n    \n    # Find the minimum (leftmost) and maximum (rightmost) column indices\n    min_col = np.min(non_bg_indices)\n    max_col = np.max(non_bg_indices)\n    \n    return color, min_col, max_col\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transforms the input grid by filling the horizontal span between the \n    leftmost and rightmost non-background pixels in each row.\n\n    Args:\n        input_grid: A list of lists representing the input grid.\n\n    Returns:\n        A list of lists representing the transformed output grid.\n    \"\"\"\n    # Convert input list of lists to a numpy array for efficient processing\n    input_np = np.array(input_grid, dtype=int)\n    \n    # Get the dimensions of the grid\n    num_rows, num_cols = input_np.shape\n    \n    # Initialize the output grid with the same dimensions as the input, \n    # filled entirely with the background color (0)\n    output_np = np.zeros_like(input_np)\n\n    # Iterate through each row of the input grid\n    for r in range(num_rows):\n        # Get the current row from the input grid\n        current_row = input_np[r, :]\n        \n        # Find the color and span (min/max columns) of non-background pixels in the row\n        span_info = _find_row_span(current_row)\n        \n        # If non-background pixels were found in this row (span_info is not None)\n        if span_info is not None:\n            # Unpack the color, minimum column, and maximum column\n            color, min_col, max_col = span_info\n            \n            # Fill the corresponding segment in the output row with the determined color\n            # Slicing output_np[r, min_col : max_col + 1] modifies the output grid in place\n            # It selects columns from min_col up to (but not including) max_col + 1,\n            # effectively filling the range [min_col, max_col] inclusive.\n            output_np[r, min_col : max_col + 1] = color\n            \n        # Else (row contained only background pixels), the corresponding output row \n        # remains all background (as initialized with zeros), so no action is needed.\n\n    # Convert the resulting numpy array back to a standard list of lists format for the output\n    return output_np.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 17302,
    "candidates_token_count": 1058,
    "total_token_count": 18360,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.695091,
  "retries": 1
}