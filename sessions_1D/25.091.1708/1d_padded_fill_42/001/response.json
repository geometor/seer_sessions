{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport itertools\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by filling horizontal gaps between pairs of identical non-white pixels.\n\n    For each row in the input grid:\n    1. Identify all unique non-white colors present in the row.\n    2. For each non-white color C:\n       a. Find all column indices where color C appears.\n       b. Consider all distinct pairs of these column indices (col1, col2) where col1 < col2.\n       c. For each pair, fill the pixels in the corresponding row of the output grid,\n          between columns col1 + 1 and col2 - 1 (inclusive), with color C.\n    \"\"\"\n    # Convert input to a NumPy array for easier manipulation and copying\n    grid = np.array(input_grid, dtype=int) \n    output_grid = grid.copy()\n    \n    # Get the dimensions of the grid (height = number of rows)\n    height = grid.shape[0]\n\n    # Iterate through each row of the grid\n    for r in range(height):\n        # Extract the current row from the original grid to find color locations\n        # We modify the output_grid, but base decisions on the original input row\n        row_data = grid[r, :] \n        \n        # Find unique non-white colors (anything other than 0) in this row\n        unique_colors = np.unique(row_data)\n        non_white_colors = unique_colors[unique_colors != 0]\n\n        # Process each unique non-white color found in the row\n        for color in non_white_colors:\n            # Find the column indices where this color appears in the original row\n            indices = np.where(row_data == color)[0]\n\n            # We need at least two points to form a line segment to fill\n            if len(indices) >= 2:\n                # Generate all unique pairs of indices (col1, col2) for the current color\n                # itertools.combinations ensures that col1 < col2 automatically\n                for col1, col2 in itertools.combinations(indices, 2):\n                    # Fill the segment in the output grid between col1 and col2 (exclusive) \n                    # with the current color. NumPy slicing [start:end] includes start \n                    # but excludes end, so [col1 + 1 : col2] correctly targets the pixels\n                    # strictly between col1 and col2.\n                    output_grid[r, col1 + 1 : col2] = color\n                    \n    # Convert the final NumPy array back to a standard Python list of lists\n    return output_grid.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2372,
    "candidates_token_count": 603,
    "total_token_count": 2975,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 27.954341,
  "retries": 1
}