{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nFor each row in the input grid, identify if it contains non-white pixels. \nIf non-white pixels exist in a row, find the leftmost and rightmost non-white \npixels. Fill the horizontal segment between these two pixels (inclusive) \nin the corresponding row of the output grid with the color of these \nnon-white pixels. Rows containing only white pixels remain unchanged.\n\"\"\"\n\ndef find_non_white_pixels(row):\n  \"\"\"\n  Finds the indices and the color of non-white pixels in a row.\n  Assumes all non-white pixels in a relevant row have the same color based on examples.\n  \"\"\"\n  indices = np.where(row != 0)[0]\n  if len(indices) > 0:\n    color = row[indices[0]] # Get color from the first non-white pixel found\n    return indices, color\n  else:\n    return [], None # Return empty list and None if no non-white pixels\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by filling horizontal segments between pairs of \n    non-white pixels in each row.\n    \"\"\"\n    # Convert input list of lists to a NumPy array for efficient operations\n    input_array = np.array(input_grid, dtype=int)\n    \n    # Initialize the output grid as a copy of the input grid\n    # We will modify this copy directly\n    output_array = np.copy(input_array)\n    \n    # Get the dimensions of the grid\n    height, width = input_array.shape\n    \n    # Iterate through each row of the input grid\n    for r in range(height):\n        current_row = input_array[r, :]\n        \n        # Find the column indices of non-white pixels in the current row\n        non_white_indices, pixel_color = find_non_white_pixels(current_row)\n        \n        # Check if any non-white pixels were found in this row\n        if len(non_white_indices) > 0:\n            # Find the minimum (leftmost) and maximum (rightmost) column index\n            min_col = np.min(non_white_indices)\n            max_col = np.max(non_white_indices)\n            \n            # Fill the segment in the output grid's corresponding row\n            # from min_col to max_col (inclusive) with the pixel_color\n            output_array[r, min_col : max_col + 1] = pixel_color\n            \n    # Convert the NumPy array back to a list of lists for the final output format\n    output_grid = output_array.tolist()\n    \n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3055,
    "candidates_token_count": 617,
    "total_token_count": 3672,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 8.957077,
  "retries": 1
}