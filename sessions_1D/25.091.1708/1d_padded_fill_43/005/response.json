{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransforms an input grid by processing each row independently. \nFor each row:\n1. Identifies the unique non-white color C (if any).\n2. Finds all column indices where color C appears.\n3. Groups these indices into consecutive pairs (1st & 2nd, 3rd & 4th, etc.). If there's an odd number of indices, the last one is ignored.\n4. For each pair (start_idx, end_idx), it fills the segment of the output grid's corresponding row from start_idx to end_idx (inclusive) with color C.\nRows containing only the background color (white=0) or fewer than two non-white pixels of the target color remain unchanged.\n\"\"\"\n\ndef find_color_indices_in_row(row):\n    \"\"\"\n    Finds the unique non-white color and all its indices in a single row.\n\n    Args:\n        row (np.array): A 1D numpy array representing a row of the grid.\n\n    Returns:\n        tuple: (non_white_color, indices)\n               - non_white_color: The integer value of the unique non-white color, or None if none found.\n               - indices: A numpy array of column indices where the non_white_color appears. Empty if no non-white color found.\n    \"\"\"\n    non_white_color = None\n    indices = np.array([], dtype=int)\n\n    # Find indices of all non-zero elements\n    non_zero_indices = np.where(row != 0)[0]\n\n    if len(non_zero_indices) > 0:\n        # Determine the non-white color (assuming only one per row based on examples)\n        non_white_color = row[non_zero_indices[0]]\n        # Find all indices specifically for this color\n        indices = np.where(row == non_white_color)[0]\n\n    return non_white_color, indices\n\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the row-wise segment filling transformation based on paired indices.\n\n    Args:\n        input_grid (np.array): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.array: The transformed 2D numpy array.\n    \"\"\"\n    # Initialize output_grid as a copy of the input grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Iterate through each row of the input grid\n    for r in range(rows):\n        current_row = input_grid[r, :]\n\n        # Find the non-white color and its indices in the current row\n        non_white_color, color_indices = find_color_indices_in_row(current_row)\n\n        # Proceed only if a non-white color exists and there are at least two indices\n        if non_white_color is not None and len(color_indices) >= 2:\n            \n            # Iterate through the indices in pairs (0, 1), (2, 3), ...\n            # The range ensures we only process pairs and safely access k and k+1.\n            # It effectively ignores the last index if the count is odd.\n            for k in range(0, len(color_indices) // 2 * 2, 2):\n                start_col = color_indices[k]\n                end_col = color_indices[k+1]\n\n                # Fill the corresponding segment in the output grid's row\n                # Slicing includes start_col but excludes end_col + 1, hence the +1\n                output_grid[r, start_col : end_col + 1] = non_white_color\n\n    # Return the modified output grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8256,
    "candidates_token_count": 860,
    "total_token_count": 9116,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.086303,
  "retries": 1
}