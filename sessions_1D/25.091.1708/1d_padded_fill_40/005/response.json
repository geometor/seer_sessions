{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransforms an input grid into an output grid of the same dimensions based on a row-wise rule.\nThe background color is white (0).\nFor each row in the input grid:\n1. If the row contains exactly two non-white pixels, and these two pixels are of the same color (C):\n    a. Identify the column index of the leftmost non-white pixel (start_col).\n    b. Identify the column index of the rightmost non-white pixel (end_col).\n    c. The corresponding output row is filled with white pixels (0) except for the segment between start_col and end_col (inclusive), which is filled with color C.\n2. If a row does not meet the condition in step 1 (i.e., it has 0, 1, or more than 2 non-white pixels, or 2 non-white pixels of different colors), the corresponding output row remains entirely white (0).\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by filling segments in rows based on pairs of identical non-white pixels.\n\n    Args:\n        input_grid (list of list of int): The input grid.\n\n    Returns:\n        list of list of int: The transformed output grid.\n    \"\"\"\n    # Convert input grid to a NumPy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    num_rows, num_cols = input_np.shape\n\n    # Initialize the output grid with the same shape, filled with the background color (white = 0)\n    output_np = np.zeros_like(input_np)\n\n    # Iterate through each row of the input grid\n    for r in range(num_rows):\n        # Get the current row\n        row = input_np[r, :]\n        \n        # Find the indices (columns) of all non-white pixels in the current row\n        non_white_indices = np.where(row != 0)[0]\n\n        # Check if exactly two non-white pixels were found in the row\n        if len(non_white_indices) == 2:\n            # Get the column indices of the two non-white pixels\n            col1 = non_white_indices[0]\n            col2 = non_white_indices[1]\n            \n            # Get the colors of these two pixels\n            color1 = row[col1]\n            color2 = row[col2]\n\n            # Check if the colors are the same\n            if color1 == color2:\n                # Identify the fill color\n                fill_color = color1\n                # Determine the start and end columns for filling (ensure correct order)\n                start_col = min(col1, col2)\n                end_col = max(col1, col2)\n                \n                # Fill the corresponding segment in the output row\n                # The slice includes start_col and end_col\n                output_np[r, start_col : end_col + 1] = fill_color\n                \n        # Else (if the row has 0, 1, or >2 non-white pixels, or 2 non-white pixels of different colors): \n            # The corresponding output row remains all white (0), \n            # which is its initialized state. No explicit action needed.\n\n    # Convert the NumPy array back to a list of lists for the final output format\n    return output_np.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7986,
    "candidates_token_count": 775,
    "total_token_count": 8761,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 7.873987,
  "retries": 1
}