{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransforms an input grid into an output grid of the same dimensions based on a row-wise rule.\nThe background color is assumed to be white (0).\n\nFor each row in the input grid:\n1. Identify all non-white pixels.\n2. If there are exactly two non-white pixels in the row, and they share the same color (let's call it C):\n    a. Find the column index of the leftmost non-white pixel (start_col).\n    b. Find the column index of the rightmost non-white pixel (end_col).\n    c. In the corresponding row of the output grid, fill the pixels from start_col to end_col (inclusive) with color C. All other pixels in this output row remain white (0).\n3. If a row does not meet the condition in step 2 (i.e., it has 0, 1, or more than 2 non-white pixels, or the two non-white pixels have different colors), the corresponding output row is entirely white (0).\n\nThe output grid has the same height and width as the input grid.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by filling segments in rows based on pairs of identical non-white pixels.\n\n    Args:\n        input_grid (list of list of int): The input grid represented as a list of lists.\n\n    Returns:\n        list of list of int: The transformed output grid, with the same dimensions as the input.\n    \"\"\"\n    # Convert input list of lists to a NumPy array for efficient processing\n    input_np = np.array(input_grid, dtype=int)\n    num_rows, num_cols = input_np.shape\n\n    # Initialize the output grid with the same shape as the input, filled with the background color (white = 0)\n    output_np = np.zeros_like(input_np)\n\n    # Iterate through each row index\n    for r in range(num_rows):\n        # Get the current row from the input NumPy array\n        row = input_np[r, :]\n        \n        # Find the column indices of all non-white pixels (pixels != 0) in the current row\n        non_white_indices = np.where(row != 0)[0]\n\n        # Check if exactly two non-white pixels were found in this row\n        if len(non_white_indices) == 2:\n            # Get the column indices of the two non-white pixels\n            col1 = non_white_indices[0]\n            col2 = non_white_indices[1]\n            \n            # Get the colors of these two pixels from the input row\n            color1 = row[col1]\n            color2 = row[col2]\n\n            # Check if the colors of the two non-white pixels are the same\n            if color1 == color2:\n                # Identify the color to use for filling\n                fill_color = color1\n                \n                # Determine the starting and ending columns for the segment to be filled.\n                # Ensure start_col is the minimum and end_col is the maximum index.\n                start_col = min(col1, col2)\n                end_col = max(col1, col2)\n                \n                # Fill the corresponding segment in the output row.\n                # NumPy slicing is [start:end+1] to include the end_col.\n                output_np[r, start_col : end_col + 1] = fill_color\n                \n        # Else (if the row does not have exactly two non-white pixels of the same color):\n            # The corresponding output row remains all white (0), \n            # as it was initialized. No action needed in this case.\n\n    # Convert the final NumPy array back to a list of lists format before returning\n    return output_np.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 9511,
    "candidates_token_count": 867,
    "total_token_count": 10378,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 21.52877,
  "retries": 1
}