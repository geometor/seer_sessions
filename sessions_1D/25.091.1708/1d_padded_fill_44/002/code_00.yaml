task_type: grid_transformation
scope: row_based # Transformation is applied independently to each row.
input_output_relation:
  grid_dimensions: preserved (Confirmed 3x10 for all examples)
elements:
  - type: background_pixel
    color: white (0)
  - type: marker_pixel
    color: non-white (2, 4, or 7 in examples)
    properties:
      - exists_as_a_pair_per_row # Exactly two markers per row.
      - pair_members_have_identical_color # Both markers in a row share the same color.
      - pair_members_are_horizontally_separated_by_one_or_more_background_pixels # Markers are not adjacent.
transformation:
  action: fill_segment # Changes background pixels to a marker color.
  target: background_pixels
  condition: located_strictly_horizontally_between_a_pair_of_marker_pixels_in_the_same_row # Only pixels *between* the markers are affected.
  fill_color: color_of_the_marker_pixel_pair_in_that_row # The filled color matches the markers in that row.
invariants:
  - grid_dimensions
  - position_and_color_of_marker_pixels # The original markers remain unchanged.
  - position_and_color_of_background_pixels_outside_the_horizontal_span_of_the_marker_pair # Pixels before the first marker or after the second marker are unchanged.
  - colors_present (no new colors introduced; background pixels change to the existing marker color)
metrics_summary:
  - example_1: dimensions=3x10, pixels_changed=6 (2 per row), colors=[0, 2] -> [0, 2]
  - example_2: dimensions=3x10, pixels_changed=3 (1 per row), colors=[0, 4] -> [0, 4]
  - example_3: dimensions=3x10, pixels_changed=3 (1 per row), colors=[0, 7] -> [0, 7]
execution_anomaly: The provided code implementation failed to replicate the observed transformation, returning the input grid instead. The logic described here is based on visual analysis of the input/output pairs, not the execution results.