{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransforms the input grid by processing each row independently. \nIf a row contains exactly two pixels of the same non-white color, \nit fills the horizontal segment between these two pixels (inclusive) \nwith that same color. Rows that do not meet this condition remain unchanged.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid (np.array): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.array: A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    # Initialize output_grid as a copy of the input grid\n    output_grid = np.copy(input_grid)\n    num_rows, num_cols = input_grid.shape\n\n    # Iterate through each row of the input grid\n    for r in range(num_rows):\n        row = input_grid[r, :]\n        \n        # Find non-white pixels in the current row: their indices and colors\n        non_white_indices = np.where(row != 0)[0]\n        non_white_colors = row[non_white_indices]\n\n        # Check if there are exactly two non-white pixels\n        if len(non_white_indices) == 2:\n            # Check if the two non-white pixels have the same color\n            color1 = non_white_colors[0]\n            color2 = non_white_colors[1]\n            \n            if color1 == color2:\n                # Determine the fill color\n                fill_color = color1\n                \n                # Find the minimum and maximum column indices\n                min_col = non_white_indices.min()\n                max_col = non_white_indices.max()\n                \n                # Fill the segment in the output grid's corresponding row\n                output_grid[r, min_col : max_col + 1] = fill_color\n                \n        # If the condition (exactly two non-white pixels of the same color) is not met,\n        # the row in the output_grid remains unchanged (as it started as a copy).\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2675,
    "candidates_token_count": 499,
    "total_token_count": 3174,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 6.843816,
  "retries": 1
}