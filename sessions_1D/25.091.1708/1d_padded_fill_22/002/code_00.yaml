task_description: Fill the horizontal gap between pairs of identical non-white pixels found within the same row using the color of the pair.

grid_properties:
  - background_color: 0 (white) is the predominant color.
  - dimensions_preserved: Yes, input and output grids consistently have the same dimensions (3x21 in all training examples).
  - color_palette_preserved: Yes, the set of colors used in the output is identical to the input for each example.

objects:
  - type: pixel_pair
    description: Two pixels of the same non-white color located within the same row, separated only by white pixels.
    properties:
      - color: non-white (value > 0).
      - same_color: Both pixels have the identical non-white color.
      - location: Reside in the same row.
      - separation: Separated horizontally by one or more white pixels (0).
      - uniqueness: For a given color in a given row, exactly two pixels of that color must exist for the pair to trigger the fill action.

actions:
  - name: find_horizontal_pairs
    inputs: grid_row
    outputs: list of identified pixel pairs (col1, col2, color) for that row.
    description: Scan a single row to find all non-white pixels. Group them by color. Identify colors that appear exactly twice in the row. Return the column indices and color for each such pair.

  - name: fill_horizontal_segment
    inputs:
      - grid: output_grid (initially a copy of input_grid)
      - row_index: The row where the pair exists.
      - col1: Column index of one pixel in the pair.
      - col2: Column index of the other pixel in the pair.
      - color: The color of the pixel pair.
    outputs: modified_output_grid
    description: In the target grid, for the specified row_index, set the color of all pixels between column min(col1, col2) + 1 and max(col1, col2) - 1 (inclusive) to the specified color.

relationships:
  - type: spatial
    description: The transformation relies on identifying horizontal alignment and separation within a row. The action modifies pixels based on this horizontal spatial relationship.

transformation_flow:
  - step: 1. Create an output grid that is an exact copy of the input grid.
  - step: 2. Iterate through each row of the input grid using its row index.
  - step: 3.  For the current row, find all non-white pixels and store their column index associated with their color.
  - step: 4.  Examine the collected pixel information for the current row. For each distinct non-white color found:
  - step: 5.   Check if exactly two pixels of this color exist in the row.
  - step: 6.   If yes, retrieve the two column indices (`col_A`, `col_B`) and the color (`pair_color`).
  - step: 7.    Determine the leftmost column index (`start_col = min(col_A, col_B)`) and the rightmost column index (`end_col = max(col_A, col_B)`).
  - step: 8.    Iterate through the columns from `start_col + 1` up to (but not including) `end_col`. For each column index in this range, set the pixel at the current row index and this column index in the *output grid* to `pair_color`.
  - step: 9. After processing all rows, return the modified output grid.