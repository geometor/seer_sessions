{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Dict\nfrom collections import defaultdict\n\n\"\"\"\nTransforms an input grid by identifying pairs of same-colored non-white pixels \nwithin each row and filling the horizontal space strictly between them with \nthat color.\n\n1. Create a copy of the input grid to serve as the output grid.\n2. Iterate through each row of the input grid.\n3. For each row, find all non-white pixels and store their column indices, \n   grouped by color.\n4. For each color group within the row:\n   a. If exactly two pixels of that color exist in the row, identify their \n      column indices.\n   b. Determine the minimum and maximum column index of the pair.\n   c. Fill the pixels in the output grid, in the same row, between the minimum \n      column index (exclusive) and the maximum column index (exclusive), with \n      the pair's color.\n5. Return the modified output grid.\n\"\"\"\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Identifies pairs of same-colored non-white pixels in each row and fills \n    the horizontal space between them with that color.\n    \n    Args:\n        input_grid: A list of lists representing the input grid.\n        \n    Returns:\n        A list of lists representing the transformed output grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation and copying\n    input_array = np.array(input_grid, dtype=int)\n    # Initialize output_grid as a copy of the input\n    output_array = np.copy(input_array)\n    height, width = input_array.shape\n\n    # Iterate through each row\n    for r in range(height):\n        # Use defaultdict to easily store lists of column indices for each color\n        # Format: {color: [col1, col2, ...]}\n        color_locations: Dict[int, List[int]] = defaultdict(list)\n\n        # Find non-white pixels and their locations in the current row\n        for c in range(width):\n            pixel_color = input_array[r, c]\n            if pixel_color != 0:  # non-white pixel\n                # Group column indices by color\n                color_locations[pixel_color].append(c)\n\n        # Process each color found in the row\n        for color, locations in color_locations.items():\n            # Check if there is exactly one pair (i.e., exactly 2 locations) \n            # of this color in the row\n            if len(locations) == 2:\n                # Get the column indices of the pair\n                col1, col2 = locations[0], locations[1]\n                # Determine the start (leftmost exclusive) and end (rightmost exclusive) \n                # columns for filling\n                start_fill_col = min(col1, col2) + 1\n                end_fill_col = max(col1, col2) # range end is exclusive\n                \n                # Fill the gap between the pair in the output grid\n                # Iterate from the column *after* the first pixel up to (but not including) \n                # the column of the second pixel\n                for c_fill in range(start_fill_col, end_fill_col):\n                    output_array[r, c_fill] = color\n\n    # Convert the numpy array back to a list of lists for the final output format\n    output_grid = output_array.tolist()\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 11879,
    "candidates_token_count": 799,
    "total_token_count": 12678,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.211286,
  "retries": 1
}