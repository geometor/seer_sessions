{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Dict\nfrom collections import defaultdict\n\n\"\"\"\nTransforms an input grid by identifying pairs of same-colored non-white pixels \nwithin each row and filling the horizontal space strictly between them with \nthat color.\n\n1.  Initialize the `output_grid` as an identical copy of the `input_grid`.\n2.  For each `row` in the `input_grid` (indexed from top to bottom):\n    a.  Create a temporary map to store the column locations of non-white pixels found in this `row`, keyed by their `color`.\n    b.  Scan across the current `row` (indexed by `col` from left to right):\n        i.  If the pixel at (`row`, `col`) is not white (color 0), record its `col` in the map under its `color`.\n    c.  After scanning the entire `row`, examine the map:\n        i.  For each `color` entry in the map:\n            *   If the list of column locations for this `color` contains exactly two columns, let them be `col_A` and `col_B`.\n            *   Find the leftmost column: `left_col = min(col_A, col_B)`.\n            *   Find the rightmost column: `right_col = max(col_A, col_B)`.\n            *   Fill the gap in the `output_grid`: For every column `c_fill` starting from `left_col + 1` up to (but not including) `right_col`, set the pixel in the `output_grid` at (`row`, `c_fill`) to this `color`.\n3.  After processing all rows, return the `output_grid`.\n\"\"\"\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Identifies pairs of same-colored non-white pixels in each row and fills \n    the horizontal space between them with that color.\n    \n    Args:\n        input_grid: A list of lists representing the input grid.\n        \n    Returns:\n        A list of lists representing the transformed output grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation and copying\n    input_array = np.array(input_grid, dtype=int)\n    \n    # 1. Initialize the output_grid as an identical copy of the input_grid.\n    output_array = np.copy(input_array)\n    height, width = input_array.shape\n\n    # 2. For each row in the input_grid:\n    for r in range(height):\n        # a. Create a temporary map to store column locations of non-white pixels.\n        #    Using defaultdict simplifies adding to lists.\n        color_locations: Dict[int, List[int]] = defaultdict(list)\n\n        # b. Scan across the current row:\n        for c in range(width):\n            pixel_color = input_array[r, c]\n            # i. If the pixel is not white, record its column index.\n            if pixel_color != 0:  \n                color_locations[pixel_color].append(c)\n\n        # c. After scanning the row, examine the map:\n        # i. For each color found in the row:\n        for color, locations in color_locations.items():\n            # Check if exactly two pixels of this color exist.\n            if len(locations) == 2:\n                # If yes, get the two column indices.\n                col_A, col_B = locations[0], locations[1]\n                \n                # Find the leftmost and rightmost column indices.\n                left_col = min(col_A, col_B)\n                right_col = max(col_A, col_B)\n                \n                # Fill the gap in the output_grid.\n                # Iterate from the column *after* the left pixel up to \n                # (but not including) the column of the right pixel.\n                for c_fill in range(left_col + 1, right_col):\n                    output_array[r, c_fill] = color\n\n    # 3. After processing all rows, convert numpy array back to list of lists.\n    output_grid = output_array.tolist()\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 10372,
    "candidates_token_count": 976,
    "total_token_count": 11348,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.998808,
  "retries": 1
}