{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentify the single non-white color (C) present in the input grid. Find the minimum (global_min_col) and maximum (global_max_col) column indices across all pixels of color C anywhere in the grid. Identify all rows (target_rows) that contain at least one pixel of color C. Initialize the output grid as a copy of the input. For each row index r, if r is in target_rows, fill the horizontal segment in the output grid's row r from global_min_col to global_max_col (inclusive) with color C. Rows not in target_rows remain unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef find_non_white_pixels(grid):\n    \"\"\"\n    Finds the coordinates and color of all non-white (value != 0) pixels.\n\n    Args:\n        grid (np.ndarray): The input grid.\n\n    Returns:\n        tuple: (color, row_indices, col_indices)\n               - color (int): The non-white color found (assumes only one). None if none found.\n               - row_indices (np.ndarray): Array of row indices of non-white pixels.\n               - col_indices (np.ndarray): Array of column indices of non-white pixels.\n               Returns (None, None, None) if no non-white pixels are found.\n    \"\"\"\n    row_indices, col_indices = np.where(grid != 0)\n    if len(row_indices) == 0:\n        return None, None, None  # No non-white pixels found\n\n    # Assume only one non-white color exists and get it from the first found pixel\n    color = grid[row_indices[0], col_indices[0]]\n    \n    return color, row_indices, col_indices\n\ndef get_global_bounds(col_indices):\n    \"\"\"\n    Calculates the minimum and maximum column indices from an array of indices.\n\n    Args:\n        col_indices (np.ndarray): Array of column indices.\n\n    Returns:\n        tuple: (min_col, max_col). Returns (None, None) if input is empty.\n    \"\"\"\n    if col_indices is None or not col_indices.size: # Check if the array is None or empty\n         return None, None\n    min_col = np.min(col_indices)\n    max_col = np.max(col_indices)\n    return min_col, max_col\n\ndef get_target_rows(row_indices):\n    \"\"\"\n    Finds the unique row indices from an array of indices.\n\n    Args:\n        row_indices (np.ndarray): Array of row indices.\n\n    Returns:\n        np.ndarray: Sorted array of unique row indices. Returns empty array if input is None.\n    \"\"\"\n    if row_indices is None:\n        return np.array([], dtype=int)\n    return np.unique(row_indices)\n\n\ndef transform(input_grid):\n    \"\"\"\n    Fills horizontal segments in specific rows based on the global horizontal\n    extent of a single non-white color.\n    \"\"\"\n    # Initialize output_grid as a copy of the input_grid\n    output_grid = np.copy(input_grid)\n    \n    # Find the non-white pixels, their color, and their row/column indices\n    primary_color, row_indices, col_indices = find_non_white_pixels(input_grid)\n    \n    # If no non-white pixels are found, return the original grid copy\n    if primary_color is None:\n        return output_grid\n        \n    # Calculate the global minimum and maximum column indices for the primary color\n    global_min_col, global_max_col = get_global_bounds(col_indices)\n    \n    # Check if bounds calculation was successful (handles case of no non-white pixels found, though already checked)\n    if global_min_col is None:\n         return output_grid # Should not happen if primary_color is not None, but safe check\n\n    # Identify the unique rows containing the primary color\n    target_rows = get_target_rows(row_indices)\n\n    # Iterate through the identified target rows\n    for r in target_rows:\n        # Fill the horizontal segment in the output grid for the current target row\n        # using the global column bounds and the primary color.\n        # The slice includes global_min_col and global_max_col.\n        output_grid[r, global_min_col : global_max_col + 1] = primary_color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8688,
    "candidates_token_count": 1033,
    "total_token_count": 9721,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.59107,
  "retries": 1
}