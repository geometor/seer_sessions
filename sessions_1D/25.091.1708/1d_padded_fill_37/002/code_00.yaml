task_description: Replace specific patterns involving pairs of identical non-white colors separated by two or three white pixels with a solid block of that non-white color.
grid_dimensionality: 1D (single row)
colors_used:
  - white (0) - background/separator
  - blue (1) - object color in example 1
  - gray (5) - object color in examples 2 & 3
objects:
  - type: pixel
    properties:
      - color: (white, blue, gray)
      - index: position in the 1D grid
  - type: pattern
    definition: A contiguous sequence of pixels.
    subtypes:
      - target_pattern_1: A sequence of 4 pixels C 0 0 C, where C is a non-white color (1 or 5 in examples) and 0 is white.
      - target_pattern_2: A sequence of 5 pixels C 0 0 0 C, where C is a non-white color (1 or 5 in examples) and 0 is white.
      - replacement_pattern_1: A sequence of 4 pixels C C C C, where C is the non-white color from the corresponding target_pattern_1.
      - replacement_pattern_2: A sequence of 5 pixels C C C C C, where C is the non-white color from the corresponding target_pattern_2.
relationships:
  - type: spatial
    description: Identifying consecutive pixels forming target_pattern_1 or target_pattern_2.
  - type: identity
    description: The non-white color C must be identical at the start and end of a target pattern.
actions:
  - name: replace_pattern
    input: An instance of target_pattern_1 or target_pattern_2 found in the input grid.
    output: The identified pattern in the grid is replaced by the corresponding replacement_pattern_1 or replacement_pattern_2.
    condition: The action is applied wherever target_pattern_1 or target_pattern_2 occurs.
invariance:
  - Pixels not part of a successfully identified target_pattern_1 or target_pattern_2 remain unchanged.
processing_order: Replacements can potentially overlap if patterns share a boundary pixel (e.g., C00C00C). A left-to-right scan and replacement approach should handle this implicitly by modifying the grid as patterns are found. Alternatively, identify all patterns first, then apply replacements. A simpler approach given the examples is to iterate and modify a copy of the grid.