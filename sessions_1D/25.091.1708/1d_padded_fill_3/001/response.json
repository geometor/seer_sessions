{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by processing each row independently. \nFor each row in the input grid:\n1. Find all non-white pixels (value > 0).\n2. If non-white pixels exist:\n   a. Identify their color (assuming only one non-white color per row).\n   b. Find the minimum column index (leftmost) and maximum column index (rightmost) of these non-white pixels.\n   c. In the corresponding row of the output grid, draw a horizontal line of that color from the minimum column index to the maximum column index (inclusive).\n3. If a row contains only white pixels (value = 0), the corresponding row in the output grid remains all white.\nThe output grid has the same dimensions as the input grid.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the row-based horizontal line drawing transformation.\n\n    Args:\n        input_grid (np.ndarray): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.ndarray: A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    # Initialize the output grid as a copy of the input grid. \n    # This handles rows that are entirely white correctly.\n    output_grid = np.copy(input_grid) \n    height, width = input_grid.shape\n\n    # Iterate through each row of the input grid\n    for r in range(height):\n        row = input_grid[r, :]\n        \n        # Find the column indices of non-white pixels in the current row\n        non_white_indices = np.where(row > 0)[0]\n\n        # Check if there are any non-white pixels in this row\n        if non_white_indices.size > 0:\n            # Determine the color (use the color of the first non-white pixel found)\n            color = row[non_white_indices[0]]\n            \n            # Find the minimum (leftmost) and maximum (rightmost) column index\n            min_col = np.min(non_white_indices)\n            max_col = np.max(non_white_indices)\n            \n            # Fill the corresponding row in the output grid with the color \n            # between min_col and max_col (inclusive)\n            output_grid[r, min_col : max_col + 1] = color\n        # else: \n            # If the row was all white, the output_grid row (copied from input) is already correct.\n\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3048,
    "candidates_token_count": 576,
    "total_token_count": 3624,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.001049,
  "retries": 1
}