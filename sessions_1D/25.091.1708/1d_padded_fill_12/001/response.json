{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nProcesses the input grid row by row. \nFor each row:\n1. Finds all non-white pixels (color > 0).\n2. If a row contains two or more non-white pixels:\n   a. Determines their color (assumes a single non-white color per row).\n   b. Finds the leftmost (minimum column index) and rightmost (maximum column index) non-white pixel.\n   c. Fills the segment between the leftmost and rightmost pixel (inclusive) with that color in the output grid.\n3. If a row contains fewer than two non-white pixels, it is copied directly to the output grid without modification.\nThe output grid has the same dimensions as the input grid.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the fill-horizontal-span transformation to the input grid.\n\n    Args:\n        input_grid (list of lists): A 2D list representing the input grid.\n\n    Returns:\n        list of lists: A 2D list representing the transformed output grid.\n    \"\"\"\n    # Convert input list of lists to a NumPy array for easier processing\n    input_array = np.array(input_grid, dtype=int)\n    # Initialize the output array as a copy of the input\n    output_array = np.copy(input_array)\n    \n    # Get the dimensions of the grid\n    height, width = input_array.shape\n\n    # Process each row independently\n    for r in range(height):\n        # Find the column indices of non-white pixels in the current row\n        non_white_cols = np.where(input_array[r, :] > 0)[0]\n\n        # Check if there are at least two non-white pixels\n        if len(non_white_cols) >= 2:\n            # Get the color of the non-white pixels (assuming they are all the same color in a row)\n            # We take the color of the first non-white pixel found\n            fill_color = input_array[r, non_white_cols[0]]\n            \n            # Find the minimum (leftmost) and maximum (rightmost) column index\n            min_col = np.min(non_white_cols)\n            max_col = np.max(non_white_cols)\n            \n            # Fill the span between min_col and max_col (inclusive) in the output row\n            output_array[r, min_col:max_col+1] = fill_color\n        # else: If fewer than 2 non-white pixels, the row remains unchanged (already copied)\n\n    # Convert the output NumPy array back to a list of lists\n    output_grid = output_array.tolist()\n    \n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2864,
    "candidates_token_count": 623,
    "total_token_count": 3487,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.132616,
  "retries": 1
}