{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nProcesses the input grid row by row. \nFor each row:\n1. Finds all non-white pixels (color > 0).\n2. If a row contains two or more non-white pixels:\n   a. Determines their color (assuming a single non-white color per row, uses the color of the first non-white pixel found).\n   b. Finds the leftmost (minimum column index) and rightmost (maximum column index) non-white pixel in that row.\n   c. Fills the horizontal segment between the leftmost and rightmost pixel (inclusive) with that color in the corresponding row of the output grid. Pixels outside this range retain their original color.\n3. If a row contains fewer than two non-white pixels (zero or one), the row is copied directly from the input to the output grid without modification.\nThe output grid has the same dimensions as the input grid.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the fill-horizontal-span transformation to the input grid.\n\n    Args:\n        input_grid (list of lists): A 2D list representing the input grid.\n\n    Returns:\n        list of lists: A 2D list representing the transformed output grid.\n    \"\"\"\n    # Convert input list of lists to a NumPy array for easier processing\n    input_array = np.array(input_grid, dtype=int)\n    # Initialize the output array as a copy of the input. This handles rows\n    # with < 2 non-white pixels automatically, as they won't be modified.\n    output_array = np.copy(input_array)\n    \n    # Get the dimensions of the grid\n    height, width = input_array.shape\n\n    # Process each row independently\n    for r in range(height):\n        # Find the column indices of non-white pixels (color > 0) in the current row\n        non_white_cols = np.where(input_array[r, :] > 0)[0]\n\n        # Check if there are at least two non-white pixels in this row\n        if len(non_white_cols) >= 2:\n            # Get the color to fill with. Assume all non-white pixels in a\n            # row needing filling have the same color, take the first one.\n            fill_color = input_array[r, non_white_cols[0]]\n            \n            # Find the minimum (leftmost) column index among non-white pixels\n            min_col = np.min(non_white_cols)\n            # Find the maximum (rightmost) column index among non-white pixels\n            max_col = np.max(non_white_cols)\n            \n            # Fill the horizontal span from min_col to max_col (inclusive) \n            # in the corresponding output row with the determined fill_color.\n            output_array[r, min_col:max_col+1] = fill_color\n        # No explicit 'else' needed: if len(non_white_cols) < 2, the row in \n        # output_array remains as it was copied from input_array.\n\n    # Convert the output NumPy array back to a standard Python list of lists\n    output_grid = output_array.tolist()\n    \n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 12802,
    "candidates_token_count": 740,
    "total_token_count": 13542,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.970992,
  "retries": 1
}