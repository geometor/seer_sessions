{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies the single non-white color and all its locations in the input grid.\nDetermines the overall minimum (global_min_col) and maximum (global_max_col) column indices occupied by any non-white pixel across the entire grid.\nInitializes the output grid as a copy of the input grid.\nIterates through each row of the input grid. If a row contains at least one non-white pixel, the corresponding row in the output grid is modified: the segment from global_min_col to global_max_col (inclusive) is filled with the non-white color. Rows without any non-white pixels remain unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef find_non_white_pixels(grid_np):\n    \"\"\"\n    Finds the non-white color and coordinates of all non-white pixels.\n\n    Args:\n        grid_np (np.ndarray): The input grid as a NumPy array.\n\n    Returns:\n        tuple: A tuple containing:\n            - int: The non-white color value (or 0 if none found).\n            - np.ndarray: A 2D NumPy array of shape (N, 2) containing the\n                          [row, col] coordinates of N non-white pixels.\n                          Returns an empty array if no non-white pixels exist.\n    \"\"\"\n    non_white_coords = np.argwhere(grid_np > 0)\n    if non_white_coords.size == 0:\n        return 0, non_white_coords # No non-white pixels\n\n    # Assuming only one non-white color exists in the grid based on examples\n    # Get the color from the first non-white pixel found\n    non_white_color = grid_np[non_white_coords[0, 0], non_white_coords[0, 1]]\n\n    return non_white_color, non_white_coords\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the global horizontal span fill transformation.\n\n    Args:\n        input_grid (list of lists): The input grid.\n\n    Returns:\n        list of lists: The transformed output grid.\n    \"\"\"\n    # Convert input list of lists to a NumPy array\n    input_array = np.array(input_grid, dtype=int)\n    \n    # Initialize the output array as a copy of the input\n    output_array = np.copy(input_array)\n    \n    # Find the non-white color and all non-white pixel coordinates\n    fill_color, non_white_coords = find_non_white_pixels(input_array)\n\n    # If there are no non-white pixels, return the unchanged grid\n    if non_white_coords.size == 0:\n        return output_array.tolist()\n\n    # Determine the global minimum and maximum column indices from non-white pixels\n    global_min_col = np.min(non_white_coords[:, 1])\n    global_max_col = np.max(non_white_coords[:, 1])\n\n    # Identify the unique rows that contain non-white pixels\n    rows_with_non_white = np.unique(non_white_coords[:, 0])\n\n    # Iterate through the rows identified as containing non-white pixels\n    for r in rows_with_non_white:\n        # Fill the segment from global_min_col to global_max_col (inclusive)\n        # in the corresponding row of the output array with the fill_color.\n        output_array[r, global_min_col:global_max_col + 1] = fill_color\n        \n    # Convert the output NumPy array back to a list of lists\n    return output_array.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 20210,
    "candidates_token_count": 832,
    "total_token_count": 21042,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.146415,
  "retries": 1
}