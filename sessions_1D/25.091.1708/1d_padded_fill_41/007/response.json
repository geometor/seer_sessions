{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransforms an input grid based on the non-white pixels within each row, considering both row-specific and global properties.\n\n1.  Determine the maximum column index (`max_col_overall`) containing any non-white pixel across the entire input grid. If the grid is all white, the output is also all white.\n2.  Process each row independently:\n    a. Find all non-white pixels within the current input row. Let their count be `count`.\n    b. If `count == 0`: The corresponding output row remains all white (0).\n    c. If `count == 1`:\n        i. Identify the single non-white pixel's column index (`col`) and color (`C`).\n        ii. Fill the corresponding output row with color `C` starting from column `col` up to and including the pre-calculated `max_col_overall`. Pixels to the left of `col` remain white.\n    d. If `count > 1`:\n        i. Find the leftmost non-white pixel in the row (at `min_col_row` with color `C`).\n        ii. Find the rightmost non-white pixel in the row (at `max_col_row`).\n        iii. Fill the corresponding output row with color `C` (the color of the leftmost pixel) from column `min_col_row` to `max_col_row` (inclusive). Pixels outside this range remain white. The `max_col_overall` is not used for filling in this case.\n\"\"\"\n\ndef find_non_white_pixel_data(row):\n    \"\"\"\n    Finds indices and colors of non-white pixels in a row.\n\n    Args:\n        row (np.array): A 1D numpy array representing a row.\n\n    Returns:\n        list: A list of tuples (column_index, color). Empty if none found.\n    \"\"\"\n    # Helper function to identify non-white pixels and their locations/colors in a single row\n    pixels = []\n    for col_idx, color in enumerate(row):\n        if color != 0: # 0 is the background/white color\n            pixels.append((col_idx, color))\n    return pixels\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rules to the input grid.\n\n    Args:\n        input_grid (list of lists): The input grid.\n\n    Returns:\n        list of lists: The transformed output grid.\n    \"\"\"\n    # Convert input grid (list of lists) to a numpy array for easier manipulation\n    input_array = np.array(input_grid, dtype=int)\n    num_rows, num_cols = input_array.shape\n\n    # Initialize the output grid with the same dimensions, filled with background color (0)\n    output_array = np.zeros_like(input_array)\n\n    # --- Global Analysis Step ---\n    # Find the coordinates (row, col) of all non-white pixels in the entire grid\n    non_white_coords = np.where(input_array != 0)\n\n    # Check if there are any non-white pixels at all\n    if non_white_coords[1].size == 0:\n        # If the grid is entirely white, return an all-white grid of the same size\n        return output_array.tolist()\n\n    # Determine the maximum column index reached by any non-white pixel\n    # non_white_coords[1] contains the column indices\n    max_col_overall = non_white_coords[1].max()\n\n    # --- Row-wise Processing Step ---\n    # Iterate through each row of the input grid\n    for r in range(num_rows):\n        # Get the current row from the input array\n        input_row = input_array[r, :]\n        # Get a reference to the corresponding row in the output array for modification\n        output_row = output_array[r, :]\n\n        # Find non-white pixel data (index, color) specifically for this row\n        non_white_pixels_in_row = find_non_white_pixel_data(input_row)\n        count = len(non_white_pixels_in_row)\n\n        # --- Apply Transformation Rules Based on Pixel Count in the Row ---\n        if count == 0:\n            # Rule 1: No non-white pixels in this row.\n            # Output row remains all zeros (as initialized).\n            pass # No action needed\n\n        elif count == 1:\n            # Rule 2: Exactly one non-white pixel in this row.\n            col, color = non_white_pixels_in_row[0]\n            # Calculate the end index for slicing (exclusive)\n            fill_end_col_global = max_col_overall + 1\n            # Fill the output row from this pixel's column up to the global max column index (inclusive).\n            output_row[col:fill_end_col_global] = color\n\n        else: # count > 1\n            # Rule 3: Two or more non-white pixels in this row.\n            # Extract just the column indices of non-white pixels in this row\n            cols_in_row = [p[0] for p in non_white_pixels_in_row]\n            # Find the minimum (leftmost) and maximum (rightmost) column index for this row\n            min_col_row = min(cols_in_row)\n            max_col_row = max(cols_in_row)\n            # Get the color of the leftmost pixel in this row\n            # We can access this directly from the input row using the calculated min_col_row\n            leftmost_color = input_row[min_col_row]\n            # Calculate the end index for slicing (exclusive) for the row-specific range\n            fill_end_col_row = max_col_row + 1\n            # Fill the output row between the row-specific min and max columns (inclusive).\n            output_row[min_col_row : fill_end_col_row] = leftmost_color\n\n    # Convert the final numpy array back to a list of lists format\n    return output_array.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 9097,
    "candidates_token_count": 1389,
    "total_token_count": 10486,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.584717,
  "retries": 1
}