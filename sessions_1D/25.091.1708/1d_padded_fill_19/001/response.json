{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIterate through each row of the input grid.\nFor each row, find the horizontal span between the leftmost and rightmost non-white pixels.\nIf non-white pixels exist in the row, fill the entire span (from the leftmost to the rightmost non-white pixel, inclusive) with the color of those non-white pixels.\nIf a row contains only white pixels, leave it unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the rule:\n    For each row, find the min and max column index of non-white pixels.\n    Fill the range between min_col and max_col (inclusive) with the color\n    of the non-white pixels in that row. Rows with only white pixels remain unchanged.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_grid_np = np.array(input_grid, dtype=int)\n    # Initialize output_grid as a copy of the input grid\n    output_grid = input_grid_np.copy()\n    \n    # Get grid dimensions\n    height, width = input_grid_np.shape\n\n    # Iterate through each row\n    for r in range(height):\n        # Get the current row\n        row = input_grid_np[r, :]\n        \n        # Find column indices of non-white pixels (value != 0)\n        non_white_indices = np.where(row != 0)[0]\n\n        # Check if there are any non-white pixels in the row\n        if non_white_indices.size > 0:\n            # Find the minimum column index (leftmost)\n            min_col = np.min(non_white_indices)\n            # Find the maximum column index (rightmost)\n            max_col = np.max(non_white_indices)\n            \n            # Determine the fill color (assume all non-white pixels in the row\n            # should resolve to a single color - use the color of the leftmost one)\n            fill_color = row[min_col] \n            \n            # Fill the segment in the output grid's corresponding row\n            output_grid[r, min_col : max_col + 1] = fill_color\n        # No need for an else block, as rows with only white pixels\n        # are already correctly represented in the copied output_grid.\n\n    # Convert back to list of lists if necessary, though numpy array is often preferred\n    return output_grid.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2255,
    "candidates_token_count": 565,
    "total_token_count": 2820,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 8.277245,
  "retries": 1
}