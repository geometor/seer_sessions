{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid by processing each row independently.\nFor each row, finds the horizontal span between the leftmost and rightmost non-white pixels.\nIf non-white pixels exist in the row, fills the entire span in the output grid's corresponding row \n(from the leftmost to the rightmost non-white pixel's column, inclusive) with the color of those \nnon-white pixels. Assumes all non-white pixels within a single row share the same color, based on the examples.\nIf a row contains only white pixels (value 0), copies it unchanged to the output grid.\n\"\"\"\n\nimport numpy as np\n\ndef find_row_bounds(row):\n    \"\"\"\n    Finds the indices of non-white pixels and their min/max column index in a single row.\n    \n    Args:\n        row (np.array): A 1D NumPy array representing a single row from the grid.\n        \n    Returns:\n        tuple: (min_col, max_col) if non-white pixels are found, otherwise (None, None).\n               min_col is the index of the leftmost non-white pixel.\n               max_col is the index of the rightmost non-white pixel.\n    \"\"\"\n    # Find column indices where the pixel value is not 0 (non-white)\n    non_white_indices = np.where(row != 0)[0]\n    \n    # Check if any non-white pixels were found\n    if non_white_indices.size > 0:\n        # Find the minimum (leftmost) and maximum (rightmost) indices\n        min_col = np.min(non_white_indices)\n        max_col = np.max(non_white_indices)\n        return min_col, max_col\n    else:\n        # Return None if the row is all white\n        return None, None\n\ndef transform(input_grid):\n    \"\"\"\n    Applies a row-wise transformation to fill horizontal segments between non-white pixels.\n\n    Args:\n        input_grid (list[list[int]]): The input 2D grid represented as a list of lists.\n\n    Returns:\n        list[list[int]]: The transformed 2D grid as a list of lists.\n    \"\"\"\n    # Convert input list of lists to a NumPy array for efficient operations\n    input_grid_np = np.array(input_grid, dtype=int)\n    \n    # Initialize the output grid as a copy of the input grid.\n    # This handles rows with only white pixels correctly by default, as they require no changes.\n    output_grid = input_grid_np.copy()\n    \n    # Get the number of rows (height) in the grid\n    height = input_grid_np.shape[0]\n\n    # Iterate through each row of the grid using its index 'r'\n    for r in range(height):\n        # Get the current row from the input grid\n        row = input_grid_np[r, :]\n        \n        # Find the bounds (min/max column indices) of non-white pixels in this row\n        min_col, max_col = find_row_bounds(row)\n\n        # Check if non-white pixels were found (i.e., min_col is not None)\n        if min_col is not None:\n            # Determine the fill color. Based on examples, we use the color\n            # of the leftmost non-white pixel found in the original row.\n            fill_color = row[min_col] \n            \n            # Fill the segment in the output grid's corresponding row.\n            # The slice `min_col : max_col + 1` includes columns from min_col up to max_col.\n            output_grid[r, min_col : max_col + 1] = fill_color\n            \n    # Convert the final NumPy array back to a list of lists for the return value\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 11360,
    "candidates_token_count": 889,
    "total_token_count": 12249,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.414487,
  "retries": 1
}