task_type: pattern_completion
grid_representation: 2D array (inferred shape 3x11 for examples)
scope: row-wise independent transformation
objects:
  - type: pixel
    properties:
      - color: (white: 0, green: 3, gray: 5) # Colors observed in examples
      - position: (row, column)
  - type: horizontal_line_segment
    defined_by: # Properties in the input that define the output segment
      - row_index: int
      - non_white_pixels_in_row: list[tuple(column_index, color)]
    properties_in_output:
      - start_column: int (min column index of non_white_pixels_in_row)
      - end_column: int (max column index of non_white_pixels_in_row)
      - fill_color: int (color of the non_white pixels)
actions:
  - name: find_non_white_pixels_in_row
    on: input_row
    returns: list of column indices
  - name: get_segment_bounds
    on: list of column indices (for a single row)
    returns: min_column, max_column
  - name: get_fill_color
    on: input_row, any non_white_column_index
    returns: color
  - name: draw_horizontal_segment
    target: output grid row
    at: row_index
    from: start_column
    to: end_column
    with: fill_color
constraints:
  - Transformation is applied independently to each row.
  - If a row contains non-white pixels, they all share the same color (as observed in examples).
  - Rows containing only white pixels (0) remain unchanged in the output.
transformation_logic:
  - Initialize the output grid as a copy of the input grid.
  - For each row `r` from 0 to height-1:
    - Find the set of column indices `C` where `input_grid[r][c]` is not 0.
    - If `C` is not empty:
      - Calculate `min_col = min(C)`.
      - Calculate `max_col = max(C)`.
      - Get `fill_color = input_grid[r][min_col]`.
      - For each column `c` from `min_col` to `max_col` (inclusive):
        - Set `output_grid[r][c] = fill_color`.