{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransforms the input grid by processing each row independently.\nIf a row contains exactly two non-white pixels of the same color,\nit fills the horizontal span between and including these two pixels with their color.\nOtherwise, the row remains unchanged.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid (list[list[int]]): A 2D list representing the input grid.\n\n    Returns:\n        list[list[int]]: A 2D list representing the transformed output grid.\n    \"\"\"\n    # Convert input to a numpy array for easier processing\n    input_np = np.array(input_grid, dtype=int)\n    # Create a copy of the input grid to modify and return as the output\n    # This ensures rows that don't meet the criteria remain unchanged.\n    output_np = np.copy(input_np)\n    # Get the dimensions of the grid\n    height, width = input_np.shape\n\n    # Iterate through each row of the grid by index\n    for r in range(height):\n        # Get the current row from the original input\n        row = input_np[r, :]\n\n        # Find the column indices of all non-white (non-zero) pixels in this row\n        non_white_indices = np.where(row != 0)[0]\n\n        # Check if there are exactly two non-white pixels in this row\n        if len(non_white_indices) == 2:\n            # Get the column indices of the two pixels\n            col1, col2 = non_white_indices[0], non_white_indices[1]\n            # Get the colors of the two non-white pixels from the input row\n            color1 = row[col1]\n            color2 = row[col2]\n\n            # Check if the two non-white pixels have the same color\n            if color1 == color2:\n                # The color to fill with is the color of the pair\n                fill_color = color1\n                \n                # Determine the start and end columns for filling (inclusive)\n                # Find the minimum and maximum column index of the pair\n                col_start = min(col1, col2)\n                col_end = max(col1, col2) \n\n                # Modify the corresponding row in the output grid\n                # Fill the pixels from col_start to col_end (inclusive) with the fill_color\n                # Note: numpy slicing is exclusive at the end index, so we use col_end + 1\n                output_np[r, col_start : col_end + 1] = fill_color\n        \n        # If the conditions (exactly two non-white pixels of the same color) are not met,\n        # the row in the output grid remains as it was initially copied from the input.\n\n    # Convert the final numpy array back to a list of lists before returning\n    return output_np.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7870,
    "candidates_token_count": 674,
    "total_token_count": 8544,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 8.748378,
  "retries": 1
}