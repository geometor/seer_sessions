{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransforms the input grid by processing each row independently.\nIf a row contains exactly two non-white pixels of the same color,\nit fills the horizontal span between and including these two pixels with their color.\nOtherwise, the row remains unchanged.\n\"\"\"\n\ndef find_non_white_pixels(row):\n    \"\"\"Finds the indices and colors of non-white pixels in a row.\"\"\"\n    indices = np.where(row != 0)[0]\n    colors = row[indices]\n    return indices, colors\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the row-based filling transformation to the input grid.\n\n    Args:\n        input_grid (list[list[int]]): A 2D list representing the input grid.\n\n    Returns:\n        list[list[int]]: A 2D list representing the transformed output grid.\n    \"\"\"\n    # Convert input to a numpy array for easier processing and row slicing\n    input_np = np.array(input_grid, dtype=int)\n    # Create a copy to modify, ensuring unchanged rows are preserved\n    output_np = np.copy(input_np)\n    # Get the number of rows (height)\n    height = input_np.shape[0]\n\n    # Iterate through each row of the grid by index\n    for r in range(height):\n        # Get the current row from the input\n        row = input_np[r, :]\n        \n        # Find non-white pixels in the current row\n        non_white_indices, non_white_colors = find_non_white_pixels(row)\n\n        # Check if the condition is met: exactly two non-white pixels\n        if len(non_white_indices) == 2:\n            # Get the two colors\n            color1 = non_white_colors[0]\n            color2 = non_white_colors[1]\n\n            # Check if the colors are the same\n            if color1 == color2:\n                # The condition is fully met, proceed with filling\n                fill_color = color1\n                \n                # Get the column indices of the two pixels\n                col1 = non_white_indices[0]\n                col2 = non_white_indices[1]\n                \n                # Determine the start and end columns for the fill (inclusive)\n                col_start = min(col1, col2)\n                col_end = max(col1, col2) \n\n                # Modify the corresponding row in the output numpy array\n                # Fill the segment from col_start to col_end (inclusive)\n                # Numpy slicing is exclusive at the end, so use col_end + 1\n                output_np[r, col_start : col_end + 1] = fill_color\n                \n        # If the conditions (exactly 2 non-white pixels AND same color) are not met,\n        # the corresponding row in output_np remains as the original input row (due to the initial copy).\n\n    # Convert the final numpy array back to a standard list of lists for the return value\n    return output_np.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 12186,
    "candidates_token_count": 700,
    "total_token_count": 12886,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.002981,
  "retries": 1
}