{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransforms the input grid by processing each row independently. \nFor each row:\n1. Identifies the non-background color (any color other than white/0).\n2. Finds the leftmost (minimum column index) and rightmost (maximum column index) occurrences of this non-background color within that row.\n3. If a non-background color exists in the row, it fills the segment between the leftmost and rightmost occurrences (inclusive) in the output grid's corresponding row with that non-background color.\n4. Rows containing only the background color (white/0) remain unchanged.\nThe output grid has the same dimensions as the input grid.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Fills the horizontal span between the first and last non-background pixel \n    in each row independently.\n\n    Args:\n        input_grid (list of list of int): The input grid represented as a 2D list.\n\n    Returns:\n        list of list of int: The transformed grid.\n    \"\"\"\n    # Convert input list of lists to a NumPy array for efficient processing\n    input_np = np.array(input_grid, dtype=int)\n    \n    # Create a copy of the input array to modify for the output.\n    # This handles rows with only background color correctly, as they won't be modified.\n    output_np = input_np.copy()\n    \n    # Get the number of rows in the grid\n    rows = input_np.shape[0]\n    \n    # Define the background color explicitly (although 0 is standard)\n    background_color = 0\n    \n    # Iterate through each row index\n    for r in range(rows):\n        # Get the current row from the input grid\n        row = input_np[r, :]\n        \n        # Find the column indices of all pixels that are NOT the background color\n        # np.where returns a tuple of arrays; for a 1D array, we need the first element\n        foreground_indices = np.where(row != background_color)[0]\n        \n        # Check if any non-background pixels were found in this row\n        if foreground_indices.size > 0:\n            # Determine the non-background color present in this row.\n            # Based on examples, assume only one non-background color per row.\n            # We can get the color from the first foreground pixel found.\n            foreground_color = row[foreground_indices[0]]\n            \n            # Find the minimum column index (leftmost occurrence)\n            min_col = np.min(foreground_indices)\n            \n            # Find the maximum column index (rightmost occurrence)\n            max_col = np.max(foreground_indices)\n            \n            # In the output grid's corresponding row, fill the pixels\n            # from min_col to max_col (inclusive) with the foreground color.\n            # Note: Python slicing is exclusive of the end index, so use max_col + 1.\n            output_np[r, min_col : max_col + 1] = foreground_color\n            \n        # else: If foreground_indices is empty, the row contains only background pixels.\n        # Since output_np started as a copy, this row is already correct and needs no changes.\n\n    # Convert the modified NumPy array back to a list of lists for the return value\n    return output_np.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 9815,
    "candidates_token_count": 766,
    "total_token_count": 10581,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.840581,
  "retries": 1
}