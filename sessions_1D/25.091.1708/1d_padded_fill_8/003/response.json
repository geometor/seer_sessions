{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nProcesses each row of an input grid independently. \nIf a row contains exactly two non-white pixels (pixels with color > 0) of the same color, it fills the horizontal segment between these two pixels (inclusive) with that color. \nOtherwise, the row remains unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Applies a row-wise segment filling transformation to the input grid.\n\n    For each row, it identifies non-white pixels. If exactly two such pixels\n    exist and share the same color, the horizontal span between them (inclusive)\n    in the output grid row is filled with that color. Otherwise, the row\n    is copied unchanged from the input to the output.\n\n    Args:\n        input_grid (list of lists): A 2D list representing the input grid where\n                                     each inner list is a row and values are integers 0-9.\n\n    Returns:\n        list of lists: A 2D list representing the transformed grid.\n    \"\"\"\n    \n    # Convert input list of lists to a NumPy array for efficient processing\n    input_array = np.array(input_grid, dtype=int)\n    \n    # Create a copy of the input array to store the output. This ensures that\n    # rows not meeting the transformation criteria remain unchanged.\n    output_array = np.copy(input_array)\n    \n    # Get the number of rows in the grid\n    num_rows = input_array.shape[0]\n\n    # Iterate through each row index\n    for r in range(num_rows):\n        # Extract the current row from the input array\n        row = input_array[r, :]\n        \n        # Find the column indices of all non-white pixels (color != 0) in the current row\n        # np.where returns a tuple of arrays, we need the first element for 1D arrays.\n        non_white_indices = np.where(row != 0)[0]\n        \n        # Check if the number of non-white pixels in this row is exactly two\n        if len(non_white_indices) == 2:\n            # Get the column indices of the two non-white pixels\n            col1_idx = non_white_indices[0]\n            col2_idx = non_white_indices[1]\n            \n            # Get the colors of these two pixels from the original input row\n            color1 = row[col1_idx]\n            color2 = row[col2_idx]\n            \n            # Check if the colors of the two identified pixels are the same\n            if color1 == color2:\n                # Determine the starting and ending column indices for the segment to be filled.\n                # We use min and max to handle cases where the pixels might appear in any order.\n                col_start = min(col1_idx, col2_idx)\n                col_end = max(col1_idx, col2_idx)\n                \n                # Fill the segment in the corresponding row of the output grid.\n                # NumPy slicing `start:end+1` includes the element at `end`.\n                # The color used for filling is the common color found (color1 or color2).\n                output_array[r, col_start : col_end + 1] = color1 \n                \n        # If the conditions (exactly two non-white pixels AND they are the same color) \n        # are not met for the current row, the corresponding row in `output_array` \n        # retains its original values copied from `input_array`. No explicit 'else' is needed.\n\n    # Convert the final NumPy array back to a list of lists format before returning\n    return output_array.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7889,
    "candidates_token_count": 835,
    "total_token_count": 8724,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 18.839835,
  "retries": 1
}