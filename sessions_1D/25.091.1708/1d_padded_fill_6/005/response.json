{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nHorizontally fill rows with color starting from the first non-background pixel.\nSpecifically, for each row, find the first (leftmost) pixel that is not white (0). \nIf such a pixel is found, change all white (0) pixels located strictly to its right within the same row \nto the color of that first non-white pixel. Rows containing only white pixels remain unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by filling white pixels to the right of the \n    first non-white pixel in each row with that non-white pixel's color.\n\n    Args:\n        input_grid (list[list[int]]): A 2D list representing the input grid.\n\n    Returns:\n        list[list[int]]: A 2D list representing the transformed output grid.\n    \"\"\"\n    # Convert input list of lists to a numpy array for easier manipulation and copying\n    # Create a copy to modify, leaving the original input unchanged\n    output_grid = np.array(input_grid, dtype=int)\n    \n    # Get the dimensions of the grid\n    height, width = output_grid.shape\n\n    # Iterate through each row of the grid\n    for r in range(height):\n        # Initialize variables for tracking the first non-white pixel (trigger) in the current row\n        fill_color = None\n        trigger_found = False\n\n        # Iterate through each column (pixel) in the current row from left to right\n        for c in range(width):\n            # Get the color of the current pixel from the grid we are modifying\n            current_color = output_grid[r, c]\n\n            # Phase 1: Search for the first non-white pixel (trigger) in the row\n            if not trigger_found:\n                # Check if the current pixel is not the background color (white, 0)\n                if current_color != 0:\n                    # Found the trigger pixel\n                    trigger_found = True\n                    # Store its color to be used for filling\n                    fill_color = current_color\n                    # No modification needed for the trigger pixel itself, continue to the next pixel\n                    continue \n            \n            # Phase 2: Fill white pixels to the right once the trigger is found\n            # This block executes only if trigger_found is True\n            if trigger_found:\n                # Check if the current pixel is white (0)\n                if current_color == 0:\n                    # Change this white pixel to the stored fill_color\n                    output_grid[r, c] = fill_color\n                # If the current pixel is non-white and to the right of the trigger, \n                # it remains unchanged (as per the problem description)\n\n    # Convert the modified numpy array back to a list of lists for the return value\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7255,
    "candidates_token_count": 641,
    "total_token_count": 7896,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.965991,
  "retries": 1
}