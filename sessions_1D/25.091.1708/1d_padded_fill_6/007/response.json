{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nHorizontally fills segments of white pixels (0) in each row based on bounding non-white pixels. \nFor each row, find all non-white pixels. Iterate through these non-white pixels. \nFor each non-white pixel at index `j` with color `C`, determine the index `k` of the next non-white pixel in the same row (or the end of the row if it's the last one). \nFill all original white pixels between column `j+1` and `k-1` (inclusive) with color `C`.\nPixels at the locations of the original non-white pixels remain unchanged. \nPixels before the first non-white pixel remain unchanged.\n\"\"\"\n\ndef transform(input_grid_list):\n    \"\"\"\n    Transforms the input grid according to the described horizontal fill rule.\n\n    Args:\n        input_grid_list (list[list[int]]): A 2D list representing the input grid.\n\n    Returns:\n        list[list[int]]: A 2D list representing the transformed output grid.\n    \"\"\"\n    # Convert input list of lists to a numpy array for easier processing\n    input_grid = np.array(input_grid_list, dtype=int)\n    # Create a copy to modify for the output\n    output_grid = np.copy(input_grid)\n    \n    # Get the dimensions of the grid\n    height, width = input_grid.shape\n\n    # Iterate through each row of the grid\n    for r in range(height):\n        # Find the column indices of all non-white pixels in the current row of the original input\n        non_white_indices = np.where(input_grid[r] != 0)[0]\n\n        # If there are no non-white pixels in this row, skip to the next row\n        if len(non_white_indices) == 0:\n            continue\n\n        # Iterate through the non-white pixels found in this row\n        # We need index 'i' to look ahead for the next non-white pixel\n        for i in range(len(non_white_indices)):\n            # Get the column index of the current non-white pixel (start of segment boundary)\n            current_idx = non_white_indices[i]\n            # Get the color of this non-white pixel, which will be used for filling\n            fill_color = input_grid[r, current_idx] \n\n            # Determine the starting column index for filling (exclusive of the current non-white pixel)\n            start_fill = current_idx + 1\n            \n            # Determine the ending column index for filling (exclusive of the next boundary)\n            if i == len(non_white_indices) - 1:\n                # If this is the last non-white pixel in the row, fill until the end of the row\n                end_fill = width\n            else:\n                # Otherwise, fill up to the index of the next non-white pixel\n                end_fill = non_white_indices[i + 1]\n\n            # Iterate through the columns within the identified segment\n            for c in range(start_fill, end_fill):\n                # Check if the pixel in the *original* input grid at this position is white\n                if input_grid[r, c] == 0:\n                    # If it's white, change the corresponding pixel in the *output* grid to the fill color\n                    output_grid[r, c] = fill_color\n            \n            # Note: Pixels that were originally non-white within the segment [start_fill, end_fill) \n            # are not overwritten because the condition `input_grid[r, c] == 0` prevents it.\n            # The boundary pixels (non_white_indices) themselves are also preserved \n            # because they are not included in the fill loop `range(start_fill, end_fill)`.\n\n    # Convert the modified numpy array back to a list of lists for the return value\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 16790,
    "candidates_token_count": 901,
    "total_token_count": 17691,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.426066,
  "retries": 1
}