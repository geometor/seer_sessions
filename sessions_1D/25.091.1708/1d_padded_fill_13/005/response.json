{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransforms an input grid by processing it row by row. \nFor each row, it identifies pairs of non-white pixels of the same color. \nIt assumes these pairs are formed by taking consecutive non-white pixels of the same color \nafter sorting their column indices. For each identified pair, it fills the horizontal \nsegment between the pair's column indices (inclusive) with their color in the output grid. \nPixels not part of such a filled segment retain their original color from the input grid.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the row-wise segment filling transformation.\n\n    Args:\n        input_grid: A list of lists representing the input grid.\n\n    Returns:\n        A list of lists representing the transformed output grid.\n    \"\"\"\n    # Convert input list of lists to a numpy array for efficient processing\n    input_array = np.array(input_grid, dtype=int)\n    # Initialize output_grid as a copy of the input_grid\n    output_array = np.copy(input_array)\n    \n    num_rows, _ = input_array.shape\n\n    # Iterate through each row of the input grid\n    for r in range(num_rows):\n        # Get the current row data\n        row_data = input_array[r, :]\n        \n        # Find column indices of non-white pixels in this row\n        non_white_indices = np.where(row_data != 0)[0]\n        \n        # If there are no non-white pixels or only one, skip to the next row\n        if len(non_white_indices) < 2:\n            continue\n            \n        # Group indices by the color of the pixel at that index\n        indices_by_color = {}\n        for idx in non_white_indices:\n            color = row_data[idx]\n            if color not in indices_by_color:\n                indices_by_color[color] = []\n            indices_by_color[color].append(idx)\n            \n        # Process each color group found in the row\n        for fill_color, indices in indices_by_color.items():\n            # Need at least two points of the same color to form a pair/segment\n            if len(indices) >= 2:\n                # Sort the indices for the current color to easily form pairs\n                sorted_indices = sorted(indices)\n                \n                # Iterate through the sorted indices, taking two at a time to form pairs\n                # Assumes pairs are consecutive in the sorted list (e.g., 1st & 2nd, 3rd & 4th, etc.)\n                for i in range(0, len(sorted_indices) -1 , 2): # Ensure we don't go out of bounds with i+1\n                    start_col = sorted_indices[i]\n                    end_col = sorted_indices[i+1]\n                    \n                    # Fill the segment in the output grid's corresponding row\n                    # Slicing [start:end+1] includes the end index\n                    output_array[r, start_col : end_col + 1] = fill_color\n                    \n    # Convert the final numpy array back to a list of lists before returning\n    return output_array.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 14183,
    "candidates_token_count": 743,
    "total_token_count": 14926,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.235738,
  "retries": 1
}