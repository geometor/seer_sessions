{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nProcesses a 1D grid (represented as a 1xN 2D array) row by row.\nFor each row:\n  Identifies unique non-white colors present.\n  For each unique non-white color C:\n    Finds all column indices where color C appears.\n    Sorts these indices.\n    If the number of occurrences is even and greater than zero:\n      Pairs the indices sequentially (1st with 2nd, 3rd with 4th, etc.).\n      For each pair (start_col, end_col):\n        Fills the segment of the row in the output grid from start_col to end_col (inclusive) with color C.\nThe background color (white, 0) is overwritten if it falls within a fill segment.\nReturns the modified grid.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the described transformation to the input grid.\n\n    Args:\n        input_grid (list of lists): The input grid represented as a list of lists of integers.\n\n    Returns:\n        list of lists: The transformed grid.\n    \"\"\"\n    # Convert input to a NumPy array for easier processing\n    input_np = np.array(input_grid, dtype=int)\n    # Create a copy to modify as the output grid\n    output_np = np.copy(input_np)\n    \n    # Get grid dimensions\n    height, width = input_np.shape\n\n    # Iterate through each row of the grid\n    for r in range(height):\n        row = input_np[r, :]\n        \n        # Find unique non-white colors in the current row\n        unique_colors = np.unique(row)\n        non_white_colors = unique_colors[unique_colors != 0] # Exclude background color 0\n\n        # Process each non-white color found in the row\n        for color in non_white_colors:\n            # Find the column indices where the current color appears\n            indices = np.where(row == color)[0]\n            \n            # Check if the number of occurrences is even and positive\n            if len(indices) > 0 and len(indices) % 2 == 0:\n                # Pair the indices sequentially\n                # Iterate through pairs: (indices[0], indices[1]), (indices[2], indices[3]), ...\n                for i in range(0, len(indices), 2):\n                    start_col = indices[i]\n                    end_col = indices[i+1]\n                    \n                    # Fill the segment in the output grid row with the current color\n                    # The range includes start_col and end_col\n                    output_np[r, start_col : end_col + 1] = color\n\n    # Convert the NumPy array back to a list of lists for the final output\n    return output_np.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2447,
    "candidates_token_count": 648,
    "total_token_count": 3095,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.516916,
  "retries": 1
}