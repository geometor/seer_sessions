{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nIdentify pairs of pixels of the same non-background color within each row of the input grid. \nFor each such pair found in a row, fill the horizontal segment between the pair's column indices (inclusive) with that color in the corresponding row of the output grid. \nRows without exactly two pixels of the same non-background color remain unchanged.\n\"\"\"\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Transforms the input grid by filling horizontal segments between pairs of same-colored pixels in each row.\n\n    Args:\n        input_grid: A 2D numpy array representing the input grid.\n\n    Returns:\n        A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    # Initialize output_grid as a copy of the input grid.\n    # Modifications will be made directly to this copy.\n    output_grid = np.copy(input_grid)\n    height, width = input_grid.shape\n\n    # Iterate through each row of the grid.\n    for r in range(height):\n        row = input_grid[r, :]\n        \n        # Find the column indices and colors of non-background pixels in the current row.\n        non_background_indices = np.where(row != 0)[0]\n        \n        # If there are no non-background pixels, continue to the next row.\n        if len(non_background_indices) == 0:\n            continue\n\n        # Group the column indices by their color.\n        color_indices_map = {}\n        for col_idx in non_background_indices:\n            color = row[col_idx]\n            if color not in color_indices_map:\n                color_indices_map[color] = []\n            color_indices_map[color].append(col_idx)\n\n        # Process each color group found in the row.\n        for color, indices in color_indices_map.items():\n            # Check if there are exactly two pixels of this specific color in the row.\n            if len(indices) == 2:\n                # Determine the minimum (leftmost) and maximum (rightmost) column index for the pair.\n                min_col = min(indices)\n                max_col = max(indices)\n                \n                # Fill the horizontal segment between min_col and max_col (inclusive) \n                # in the corresponding row of the output grid with the pair's color.\n                output_grid[r, min_col : max_col + 1] = color\n\n    # Return the modified grid.\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2836,
    "candidates_token_count": 586,
    "total_token_count": 3422,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.757682,
  "retries": 1
}