{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid based on the following rules applied row by row:\n1. Iterate through each row of the input grid independently.\n2. Identify all non-white (non-zero) pixels in the current row.\n3. If exactly one non-white pixel exists in the row:\n    - Let its color be C and its column index be c.\n    - Fill the row in the output grid from column c to the end (right edge) with color C.\n4. If two or more non-white pixels exist in the row AND they all have the same color C:\n    - Find the leftmost column index (c_left) and the rightmost column index (c_right) of these non-white pixels.\n    - Fill the row in the output grid from column c_left to c_right (inclusive) with color C.\n5. Otherwise (zero non-white pixels, or multiple non-white pixels of different colors):\n    - The row in the output grid remains unchanged from the input grid.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid (np.array): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.array: A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Iterate through each row\n    for r in range(rows):\n        # Find non-white pixels in the current row\n        non_white_indices = np.where(input_grid[r] != 0)[0]\n        num_non_white = len(non_white_indices)\n\n        # If there are non-white pixels\n        if num_non_white > 0:\n            # Get the colors of these pixels\n            non_white_colors = input_grid[r, non_white_indices]\n            unique_colors = np.unique(non_white_colors)\n\n            # Case 1: Exactly one non-white pixel\n            if num_non_white == 1:\n                color = unique_colors[0]\n                col_index = non_white_indices[0]\n                # Fill from this pixel to the right edge\n                output_grid[r, col_index:] = color\n\n            # Case 2: Multiple non-white pixels, all of the same color\n            elif num_non_white > 1 and len(unique_colors) == 1:\n                color = unique_colors[0]\n                col_left = non_white_indices[0] # np.where guarantees sorted indices\n                col_right = non_white_indices[-1]\n                # Fill between the leftmost and rightmost non-white pixels (inclusive)\n                output_grid[r, col_left:col_right + 1] = color\n            \n            # Case 3: Multiple non-white pixels of different colors (implicit 'else')\n            # No change needed as output_grid started as a copy\n\n        # Case 4: Row has only white pixels (implicit 'else')\n        # No change needed\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2619,
    "candidates_token_count": 740,
    "total_token_count": 3359,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.642408,
  "retries": 1
}