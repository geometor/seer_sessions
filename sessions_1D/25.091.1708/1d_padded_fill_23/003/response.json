{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid based on the following rules applied row by row:\n1. Initialize the output grid as an identical copy of the input grid.\n2. Process each row of the input grid independently.\n3. For the current row:\n    a. Identify all non-white pixels (value != 0) and their column indices.\n    b. Count the total number of non-white pixels (`count`).\n    c. Determine the set of unique non-white colors present.\n    d. If `count` is greater than 0:\n        i. Find the column index of the leftmost non-white pixel (`c_left`).\n        ii. Find the column index of the rightmost non-white pixel (`c_right`).\n    e. Check the conditions for modification:\n        i. If `count` is exactly 1:\n            - Get the single non-white color `C`.\n            - In the corresponding row of the *output* grid, set all pixels from column `c_left` to the last column (inclusive) to color `C`.\n        ii. If `count` is greater than 1 AND there is only *one* unique non-white color `C`:\n            - In the corresponding row of the *output* grid, set all pixels from column `c_left` to column `c_right` (inclusive) to color `C`.\n        iii. Otherwise (if `count` is 0, or if `count` > 1 but there are multiple unique non-white colors):\n            - Make no changes to this row in the output grid.\n4. After processing all rows, return the modified output grid.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the row-based filling transformation to the input grid.\n    \"\"\"\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Iterate through each row\n    for r in range(rows):\n        # Find indices of non-white pixels in the current row\n        non_white_indices = np.where(input_grid[r] != 0)[0]\n        num_non_white = len(non_white_indices)\n\n        # Skip rows with no non-white pixels\n        if num_non_white == 0:\n            continue\n\n        # Get the colors of these pixels and unique colors\n        non_white_colors = input_grid[r, non_white_indices]\n        unique_colors = np.unique(non_white_colors)\n\n        # Get the leftmost and rightmost column indices of non-white pixels\n        # np.where returns sorted indices, so min is first, max is last\n        col_left = non_white_indices[0]\n        col_right = non_white_indices[-1]\n\n        # Case 1: Exactly one non-white pixel\n        if num_non_white == 1:\n            # The color is the only unique color\n            color = unique_colors[0]\n            # Fill from this pixel's column to the right edge of the grid\n            output_grid[r, col_left:] = color\n\n        # Case 2: Multiple non-white pixels, BUT only one unique color\n        elif num_non_white > 1 and len(unique_colors) == 1:\n            # The color is the single unique color\n            color = unique_colors[0]\n            # Fill between the leftmost and rightmost non-white pixels (inclusive)\n            output_grid[r, col_left:col_right + 1] = color\n        \n        # Case 3: Multiple non-white pixels with different colors\n        # No action needed, the row remains as copied from the input\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7803,
    "candidates_token_count": 855,
    "total_token_count": 8658,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.375277,
  "retries": 1
}