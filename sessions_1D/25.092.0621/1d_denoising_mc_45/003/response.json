{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport collections\nimport numpy as np\n\n\"\"\"\nTransform the input grid by identifying the most frequent non-white (non-zero)\ncolor across the entire grid and replacing all non-white pixels with that \ndominant color. White (zero) pixels remain unchanged in their positions.\nThe output grid has the same dimensions as the input grid.\n\"\"\"\n\ndef find_dominant_color(grid):\n    \"\"\"\n    Finds the most frequent non-white color in the grid.\n\n    Args:\n        grid: A numpy array representing the input grid.\n\n    Returns:\n        The integer value of the most frequent non-white color, \n        or None if no non-white pixels exist.\n    \"\"\"\n    # Flatten the grid to easily process all pixels\n    flat_grid = grid.flatten()\n    \n    # 1 & 4. Collect all non-white pixel values\n    foreground_pixels = [pixel for pixel in flat_grid if pixel != 0]\n\n    # 5. Check if any non-white pixels exist\n    if not foreground_pixels:\n        return None # No dominant color if only white pixels\n\n    # 6. Calculate frequency of each non-white color\n    color_counts = collections.Counter(foreground_pixels)\n\n    # 7. Identify the dominant color (most frequent)\n    # most_common(1) returns a list like [(color, count)], so get [0][0]\n    dominant_color = color_counts.most_common(1)[0][0]\n    \n    return dominant_color\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the described rule.\n\n    Args:\n        input_grid: A list of lists or numpy array representing the input grid.\n\n    Returns:\n        A numpy array representing the transformed output grid.\n    \"\"\"\n    # Ensure input is a numpy array for efficient operations\n    grid_np = np.array(input_grid, dtype=int)\n    \n    # Find the dominant color in the input grid\n    dominant_color = find_dominant_color(grid_np)\n\n    # 5b. Handle the case where no non-white pixels exist\n    if dominant_color is None:\n        return grid_np # Return the original grid if only white pixels\n\n    # 8. Create a new output grid, initially a copy of the input\n    #    We modify this copy to produce the final output.\n    output_grid = np.copy(grid_np)\n    \n    # 9 - 12. Iterate through the grid and apply the transformation\n    # Get grid dimensions\n    height, width = grid_np.shape\n    \n    for r in range(height):\n        for c in range(width):\n            # 10. Get the input pixel value\n            pixel_value = grid_np[r, c]\n            \n            # 11. If white, it stays white (already copied)\n            # 12. If non-white, replace with the dominant color\n            if pixel_value != 0:\n                output_grid[r, c] = dominant_color\n                \n    # 13. Return the transformed grid\n    return output_grid.tolist() # Return as list of lists per ARC standard format\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5650,
    "candidates_token_count": 728,
    "total_token_count": 6378,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.515779,
  "retries": 1
}