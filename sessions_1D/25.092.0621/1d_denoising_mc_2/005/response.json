{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nHomogenize the non-white pixels of an input grid to the most frequent non-white color found within that grid, while preserving the positions and values of white (0) pixels.\n1. Receive the input grid.\n2. Create an output grid as a copy of the input grid.\n3. Identify all non-white pixels (values 1-9) in the input grid.\n4. If no non-white pixels exist, return the copied grid.\n5. Count the frequency of each non-white color.\n6. Determine the dominant non-white color (the one with the highest frequency).\n7. Identify the locations (indices) of all non-white pixels in the input grid.\n8. Update the values at these locations in the output grid to the dominant color.\n9. Return the modified output grid.\n\"\"\"\n\ndef find_dominant_non_white_color(arr):\n    \"\"\"\n    Finds the most frequent non-white color in a numpy array.\n\n    Args:\n        arr: A numpy array of integers (colors).\n\n    Returns:\n        The integer value of the dominant non-white color, or None if no\n        non-white colors are present.\n    \"\"\"\n    # Filter out white pixels (0) and flatten for counting\n    non_white_pixels = arr[arr > 0].flatten()\n\n    # Check if there are any non-white pixels\n    if non_white_pixels.size == 0:\n        return None\n\n    # Count occurrences of each non-white color\n    counts = Counter(non_white_pixels)\n\n    # Find the color with the maximum count\n    # .most_common(1) returns a list like [(color, count)], so access [0][0]\n    dominant_color = counts.most_common(1)[0][0]\n    return dominant_color\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by replacing all non-white pixels with the\n    single most frequent non-white color found in the input, preserving\n    white pixels.\n\n    Args:\n        input_grid: A list of lists representing the input grid.\n\n    Returns:\n        A list of lists representing the transformed grid.\n    \"\"\"\n    # Handle empty input case\n    if not input_grid or not input_grid[0]:\n        return []\n\n    # Convert input list of lists to a NumPy array\n    input_array = np.array(input_grid, dtype=int)\n\n    # Find the dominant non-white color in the input array\n    dominant_color = find_dominant_non_white_color(input_array)\n\n    # If no dominant non-white color exists (e.g., all pixels are white)\n    # return the original grid.\n    if dominant_color is None:\n        return input_grid\n\n    # Create the output array as a copy of the input\n    # This ensures white pixels (0) are preserved by default\n    output_array = np.copy(input_array)\n\n    # Identify the locations of all non-white pixels in the input array\n    non_white_indices = np.where(input_array > 0)\n\n    # Update the values at these locations in the output array to the dominant color\n    output_array[non_white_indices] = dominant_color\n\n    # Convert the NumPy array back to a list of lists\n    output_grid = output_array.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7271,
    "candidates_token_count": 778,
    "total_token_count": 8049,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.817772,
  "retries": 1
}