{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nHomogenize the non-white part of the array to its most frequent non-white color, leaving white pixels unchanged.\n1. Receive the input grid (a 1xN array).\n2. Identify all pixels with non-white colors (values 1 through 9).\n3. If no non-white pixels exist, return the input grid unchanged.\n4. Count the occurrences of each distinct non-white color found.\n5. Determine the single non-white color that has the highest count (the \"dominant color\").\n6. Create a new output grid of the same dimensions as the input grid.\n7. Iterate through each position in the input grid:\n    a. If the pixel at the current position in the input grid is white (0), place a white pixel (0) in the corresponding position in the output grid.\n    b. If the pixel at the current position in the input grid is non-white (1-9), place the determined dominant color in the corresponding position in the output grid.\n8. Return the completed output grid.\n\"\"\"\n\ndef find_dominant_non_white_color(arr_1d):\n    \"\"\"\n    Finds the most frequent non-white color in a 1D numpy array.\n\n    Args:\n        arr_1d: A 1D numpy array of integers (colors).\n\n    Returns:\n        The integer value of the dominant non-white color, or None if no\n        non-white colors are present.\n    \"\"\"\n    # Filter out white pixels (0)\n    non_white_pixels = arr_1d[arr_1d > 0]\n\n    # Check if there are any non-white pixels\n    if non_white_pixels.size == 0:\n        return None\n\n    # Count occurrences of each non-white color\n    counts = Counter(non_white_pixels)\n\n    # Find the color with the maximum count\n    # .most_common(1) returns a list like [(color, count)], so access [0][0]\n    dominant_color = counts.most_common(1)[0][0]\n    return dominant_color\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by replacing all non-white pixels with the\n    single most frequent non-white color found in the input, preserving\n    white pixels.\n\n    Args:\n        input_grid: A list of lists representing the input grid.\n\n    Returns:\n        A list of lists representing the transformed grid.\n    \"\"\"\n    # Handle empty input case\n    if not input_grid or not input_grid[0]:\n        return []\n\n    # Convert input list of lists to a NumPy array\n    input_array = np.array(input_grid)\n    original_shape = input_array.shape # Store original shape for output\n\n    # Flatten the array for easier processing of all pixels\n    input_array_1d = input_array.flatten()\n\n    # Find the dominant non-white color in the flattened input array\n    dominant_color = find_dominant_non_white_color(input_array_1d)\n\n    # If no dominant non-white color exists (e.g., all pixels are white or grid is empty)\n    # return the original grid.\n    if dominant_color is None:\n        return input_grid\n\n    # Initialize the output array as a copy of the input 1D array\n    # This ensures white pixels (0) are preserved by default\n    output_array_1d = np.copy(input_array_1d)\n\n    # Iterate through the flattened input array\n    for i in range(input_array_1d.size):\n        # If the pixel in the original input is non-white (value > 0)\n        if input_array_1d[i] > 0:\n            # Set the corresponding pixel in the output array to the dominant color\n            output_array_1d[i] = dominant_color\n\n    # Reshape the modified 1D array back to the original grid shape\n    output_grid = output_array_1d.reshape(original_shape).tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5168,
    "candidates_token_count": 932,
    "total_token_count": 6100,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.886191,
  "retries": 1
}