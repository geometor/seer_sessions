{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nTransformation Rule:\n\n1. Iterate through each non-background pixel (color != 0) in the input grid.\n2. For each such pixel, examine its 8 adjacent neighbors (Moore neighborhood).\n3. Filter these neighbors to include only those within the grid boundaries and whose color is not background (color != 0).\n4. If there are no valid, non-background neighbors, the pixel's color remains unchanged.\n5. If there are valid, non-background neighbors, count the frequency of each color among them.\n6. Determine the color(s) that appear most frequently (majority color(s)).\n7. If there is exactly one unique majority color and this majority color is different from the current pixel's color, change the pixel's color in the output grid to this majority color.\n8. Otherwise (if the pixel is background, has no valid non-background neighbors, has multiple majority colors, or its color already matches the single majority color), the pixel's color in the output grid remains the same as in the input grid.\n9. All changes are based on the state of the input grid; modifications to the output grid during the process do not affect subsequent neighbor calculations for other pixels.\n\"\"\"\n\ndef get_valid_neighbors(grid, r, c):\n    \"\"\"\n    Gets the colors of valid, non-background neighbors for a given cell.\n\n    Args:\n        grid (np.array): The input grid.\n        r (int): Row index of the cell.\n        c (int): Column index of the cell.\n\n    Returns:\n        list: A list of colors of valid, non-background neighbors.\n    \"\"\"\n    height, width = grid.shape\n    neighbor_colors = []\n    # Define offsets for Moore neighborhood (8 neighbors)\n    offsets = [(-1, -1), (-1, 0), (-1, 1),\n               (0, -1),           (0, 1),\n               (1, -1), (1, 0), (1, 1)]\n\n    for dr, dc in offsets:\n        nr, nc = r + dr, c + dc\n        # Check if neighbor is within grid boundaries\n        if 0 <= nr < height and 0 <= nc < width:\n            neighbor_color = grid[nr, nc]\n            # Check if neighbor is not background\n            if neighbor_color != 0:\n                neighbor_colors.append(neighbor_color)\n    return neighbor_colors\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the cellular automaton-like transformation based on neighbor majority color.\n\n    Args:\n        input_grid (list of lists): The input grid represented as a list of lists.\n\n    Returns:\n        list of lists: The transformed grid.\n    \"\"\"\n    # Convert input to numpy array for easier processing\n    input_np = np.array(input_grid, dtype=int)\n    height, width = input_np.shape\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_np)\n\n    # Iterate through each cell in the grid\n    for r in range(height):\n        for c in range(width):\n            # Get the color of the current pixel\n            pixel_color = input_np[r, c]\n\n            # Skip background pixels\n            if pixel_color == 0:\n                continue\n\n            # Get the colors of valid, non-background neighbors\n            neighbor_colors = get_valid_neighbors(input_np, r, c)\n\n            # If there are no valid neighbors, skip transformation for this pixel\n            if not neighbor_colors:\n                continue\n\n            # Count the frequency of each neighbor color\n            color_counts = Counter(neighbor_colors)\n            \n            # Find the maximum frequency\n            max_count = 0\n            if color_counts: # Ensure color_counts is not empty\n                 max_count = max(color_counts.values())\n\n            # Find all colors with the maximum frequency\n            majority_colors = [color for color, count in color_counts.items() if count == max_count]\n\n            # Apply the transformation rule\n            # Change only if there is exactly one majority color AND it's different from the current pixel color\n            if len(majority_colors) == 1:\n                majority_color = majority_colors[0]\n                if majority_color != pixel_color:\n                    output_grid[r, c] = majority_color\n            # Otherwise (tie or pixel already matches majority), the color remains unchanged (already copied)\n\n    # Convert the result back to a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2472,
    "candidates_token_count": 1045,
    "total_token_count": 3517,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.74234,
  "retries": 1
}