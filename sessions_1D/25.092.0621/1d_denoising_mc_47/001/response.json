{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef find_dominant_non_white_color(grid):\n    \"\"\"\n    Finds the most frequent non-white color in a grid.\n\n    Args:\n        grid (np.ndarray): The input grid.\n\n    Returns:\n        int or None: The most frequent non-white color, or None if no non-white colors exist.\n    \"\"\"\n    non_white_pixels = grid[grid != 0]\n    if non_white_pixels.size == 0:\n        return None  # No non-white pixels found\n    \n    color_counts = Counter(non_white_pixels)\n    dominant_color = color_counts.most_common(1)[0][0]\n    return dominant_color\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by performing the following steps:\n    1. Identifies all non-white pixels in the input grid.\n    2. Counts the occurrences of each distinct non-white color.\n    3. Determines the non-white color that occurs most frequently (the \"dominant color\").\n    4. Creates an output grid of the same dimensions as the input.\n    5. Populates the output grid:\n       - White pixels (0) from the input remain white (0) in the output.\n       - All non-white pixels from the input are replaced with the dominant color in the output.\n    \"\"\"\n    input_np = np.array(input_grid, dtype=int)\n    \n    # Find the dominant non-white color\n    dominant_color = find_dominant_non_white_color(input_np)\n    \n    # If there are no non-white pixels, return the input grid as is\n    if dominant_color is None:\n        return input_np.tolist()\n        \n    # Initialize the output grid with the same shape as the input, filled with 0s (white)\n    output_grid = np.zeros_like(input_np)\n    \n    # Iterate through each pixel of the input grid\n    for r in range(input_np.shape[0]):\n        for c in range(input_np.shape[1]):\n            # If the input pixel is white (0), keep it white in the output\n            if input_np[r, c] == 0:\n                output_grid[r, c] = 0\n            # If the input pixel is non-white, replace it with the dominant color\n            else:\n                output_grid[r, c] = dominant_color\n                \n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2078,
    "candidates_token_count": 585,
    "total_token_count": 2663,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 8.066182,
  "retries": 1
}