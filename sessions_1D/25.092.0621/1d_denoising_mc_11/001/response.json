{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport collections\n\ndef find_non_white_segment(row):\n    \"\"\"\n    Finds the start and end indices of the contiguous non-white segment.\n    \n    Args:\n        row (list): The input row (list of integers).\n        \n    Returns:\n        tuple: (start_index, end_index) or (None, None) if no non-white segment exists.\n    \"\"\"\n    start_index = None\n    end_index = None\n    \n    # Find the first non-white pixel index\n    for i, pixel in enumerate(row):\n        if pixel != 0:\n            start_index = i\n            break\n            \n    # If no non-white pixel found, return None\n    if start_index is None:\n        return None, None\n        \n    # Find the last non-white pixel index by searching backwards\n    for i in range(len(row) - 1, start_index - 1, -1):\n        if row[i] != 0:\n            end_index = i\n            break\n            \n    return start_index, end_index\n\ndef determine_dominant_color(segment):\n    \"\"\"\n    Determines the most frequent non-white color in a segment.\n    \n    Args:\n        segment (list): The segment of the row (list of integers).\n        \n    Returns:\n        int: The dominant color, or None if the segment is empty or all white.\n    \"\"\"\n    # Filter out white pixels (0)\n    non_white_pixels = [pixel for pixel in segment if pixel != 0]\n    \n    if not non_white_pixels:\n        return None\n        \n    # Count frequencies of non-white pixels\n    counts = collections.Counter(non_white_pixels)\n    \n    # Find the color with the highest frequency\n    # If there's a tie, most_common(1) returns one of them\n    dominant_color = counts.most_common(1)[0][0]\n    \n    return dominant_color\n\ndef transform(input_grid):\n    \"\"\"\n    Identifies a central segment of non-white pixels in a 1D input grid (row).\n    Determines the most frequent non-white color (dominant color) within that segment.\n    Replaces all other non-white pixels (noise) within the segment with the dominant color.\n    Leading/trailing white pixels remain unchanged.\n    \"\"\"\n    # The input is expected to be a single row, represented as a list\n    input_row = input_grid[0] # Assuming input_grid is a list containing one row list\n    \n    # Initialize output_row as a copy of the input_row\n    output_row = list(input_row)\n    \n    # 1. Identify the contiguous central segment of non-white pixels\n    start_index, end_index = find_non_white_segment(input_row)\n    \n    # If no non-white segment exists, return the original row\n    if start_index is None:\n        return [output_row] # Return as a grid (list of lists)\n\n    # Extract the segment\n    segment = input_row[start_index : end_index + 1]\n    \n    # 2. Determine the dominant color within this central segment\n    dominant_color = determine_dominant_color(segment)\n    \n    # If no dominant color could be determined (e.g., segment was all white, though \n    # find_non_white_segment should prevent this), return original\n    if dominant_color is None:\n         return [output_row]\n\n    # 3. Iterate through the pixels of the identified central segment in the output row\n    # 4. For each pixel, if it's not white and not the dominant color, change it.\n    for i in range(start_index, end_index + 1):\n        if output_row[i] != 0 and output_row[i] != dominant_color:\n            output_row[i] = dominant_color\n            \n    # Return the modified row wrapped in a list to match grid format\n    return [output_row]\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2249,
    "candidates_token_count": 938,
    "total_token_count": 3187,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.039644,
  "retries": 1
}