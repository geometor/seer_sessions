task_description: Replace minority non-white colors within contiguous non-white 1D segments with the segment's majority color. Input may be provided as a 2D NumPy array (1xN or Nx1) or a 1D list, requiring extraction of the 1D sequence.

definitions:
  - object: InputGrid
    description: The raw input, typically a 2D NumPy array (often 1xN or Nx1 for this task) or potentially a 1D list.
  - object: Sequence
    description: A 1D array/list of color values (pixels), extracted from the InputGrid if necessary. This is the primary structure for processing.
  - object: Segment
    description: A contiguous sub-sequence within the Sequence containing only non-white (non-zero) pixels, bounded by white (zero) pixels or the sequence ends.
  - object: Pixel
    description: An individual element in the Sequence representing a color.
    properties:
      - color_value: Integer from 0-9.
      - index: Position within the Sequence.
  - object: BorderPixel
    description: A pixel with color value 0 (white). Acts as a delimiter.
  - object: ContentPixel
    description: A pixel with a non-zero color value. Part of a Segment.
  - object: DominantColor
    description: The most frequent color value among ContentPixels within a specific Segment. In case of a tie, the numerically smallest color value is chosen.
  - object: IntruderPixel
    description: A ContentPixel within a Segment whose color is not the DominantColor of that Segment.

actions:
  - action: ExtractSequence
    description: Check the type and shape of the InputGrid. If it's a 2D NumPy array (1xN or Nx1), extract the data as a 1D NumPy array or list. If already 1D, use directly.
  - action: IdentifySegments
    description: Scan the extracted Sequence to find all contiguous Segments of ContentPixels. Record the start and end indices of each segment.
  - action: DetermineDominantColor
    description: For each identified Segment, count the frequency of each color value among its ContentPixels. Identify the color with the highest count as the DominantColor. Handle ties by selecting the smallest color value.
  - action: ReplaceIntruders
    description: Create a copy of the Sequence. Iterate through each identified Segment's indices in the copy. Change the color_value of every IntruderPixel to the Segment's DominantColor. BorderPixels (value 0) remain unchanged.
  - action: FormatOutput
    description: Ensure the final modified sequence is returned in the same format (e.g., NumPy array shape) as the original InputGrid, if required by the environment. (Often returning the modified 1D list/array is sufficient).


relationships:
  - relationship: Extraction
    subject: Sequence
    verb: is extracted from
    object: InputGrid
  - relationship: Delimitation
    subject: BorderPixel
    verb: delimits
    object: Segment
  - relationship: Composition
    subject: Segment
    verb: is composed of
    object: ContentPixel
  - relationship: Modification
    subject: IntruderPixel
    verb: is replaced by
    object: DominantColor

input_output_relationship:
  - description: The output is derived by applying the ExtractSequence, IdentifySegments, DetermineDominantColor, and ReplaceIntruders actions to the InputGrid. The final structure may need to match the input structure (FormatOutput).