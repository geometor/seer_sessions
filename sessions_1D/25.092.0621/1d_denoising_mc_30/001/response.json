{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nIdentify the most frequent non-white (non-zero) color in the input grid.\nThen, create an output grid where all non-white pixels from the input are \nreplaced with this most frequent non-white color. White (zero) pixels remain unchanged.\n\"\"\"\n\ndef find_dominant_color(grid):\n    \"\"\"Finds the most frequent non-white color in the grid.\"\"\"\n    non_white_pixels = grid[grid > 0]\n    if non_white_pixels.size == 0:\n        return None  # No non-white pixels found\n    \n    counts = Counter(non_white_pixels)\n    # Find the color with the maximum count\n    dominant_color = max(counts, key=counts.get)\n    return dominant_color\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by replacing all non-white pixels \n    with the single most frequent non-white color found in the input.\n    White pixels remain unchanged.\n    \"\"\"\n    # Convert input to a numpy array for easier manipulation\n    grid = np.array(input_grid, dtype=int)\n    \n    # Make a copy to modify for the output\n    output_grid = grid.copy()\n\n    # 1. Identify all pixels that are not white (color value is not 0).\n    # 2. Count the occurrences of each distinct non-white color.\n    # 3. Determine the non-white color that has the highest count (dominant color).\n    dominant_color = find_dominant_color(grid)\n\n    # If there are no non-white pixels, return the original grid copy\n    if dominant_color is None:\n        return output_grid.tolist() # Return as list of lists\n\n    # 4. Create a new grid (already done with output_grid = grid.copy()).\n    # 5. Iterate through each pixel of the new grid.\n    # 6. If a pixel's color is non-white (not 0) *and* it is *not* the dominant color,\n    #    change its color to the dominant color.\n    # 7. Leave all white pixels (color 0) and pixels already matching the dominant color unchanged.\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            if output_grid[r, c] > 0: # Check if pixel is non-white\n                 # Change non-white pixels to the dominant color\n                 # Note: The check 'and it is not the dominant color' is implicitly handled\n                 # because if it *is* the dominant color, setting it again doesn't change anything.\n                 # But explicitly writing it makes it clearer:\n                 # if output_grid[r, c] != dominant_color:\n                output_grid[r, c] = dominant_color\n\n    # 8. The resulting grid is the output. Convert back to list of lists format.\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2266,
    "candidates_token_count": 684,
    "total_token_count": 2950,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.999534,
  "retries": 1
}