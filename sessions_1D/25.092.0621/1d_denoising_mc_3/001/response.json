{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nTransforms the input grid based on the following rules:\n1. Identify the most frequent non-black (color value not 0) color in the input grid. Call this `dominant_color`.\n2. Create an output grid of the same dimensions as the input.\n3. Iterate through each pixel of the input grid:\n    a. If the pixel's color is black (0) or if its color is the `dominant_color`, keep the pixel's color the same in the output grid.\n    b. Otherwise (if the pixel's color is not black and not the `dominant_color`), change the pixel's color to the `dominant_color` in the output grid.\n\"\"\"\n\ndef find_dominant_color(grid_np):\n    \"\"\"\n    Finds the most frequent non-black color in a grid.\n\n    Args:\n        grid_np: A numpy array representing the grid.\n\n    Returns:\n        The integer value of the most frequent non-black color.\n        Returns None if there are no non-black colors.\n    \"\"\"\n    # Flatten the grid to easily count colors\n    flat_grid = grid_np.flatten()\n\n    # Filter out black pixels (color 0)\n    non_black_pixels = [pixel for pixel in flat_grid if pixel != 0]\n\n    # If there are no non-black pixels, return None or handle as appropriate\n    if not non_black_pixels:\n        return None\n\n    # Count the frequency of each non-black color\n    color_counts = Counter(non_black_pixels)\n\n    # Find the color with the highest frequency\n    dominant_color = color_counts.most_common(1)[0][0]\n    return dominant_color\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid: A list of lists representing the input grid.\n\n    Returns:\n        A list of lists representing the transformed output grid.\n    \"\"\"\n    # Convert input grid to a NumPy array for easier processing\n    input_np = np.array(input_grid, dtype=int)\n\n    # Find the dominant non-black color\n    dominant_color = find_dominant_color(input_np)\n\n    # If there's no dominant color (e.g., grid is all black), return the input as is\n    if dominant_color is None:\n        return input_grid # Or potentially an empty grid or specific handling\n\n    # Create a copy of the input grid to modify for the output\n    output_np = np.copy(input_np)\n\n    # Get grid dimensions\n    height, width = input_np.shape\n\n    # Iterate through each pixel of the input grid\n    for r in range(height):\n        for c in range(width):\n            pixel_color = input_np[r, c]\n            # Apply the transformation rule:\n            # If the color is not black (0) and not the dominant color,\n            # change it to the dominant color in the output grid.\n            if pixel_color != 0 and pixel_color != dominant_color:\n                output_np[r, c] = dominant_color\n            # Otherwise (pixel is black or is the dominant color), it remains unchanged\n            # (already copied correctly in output_np)\n\n    # Convert the NumPy array back to a list of lists for the final output\n    output_grid = output_np.tolist()\n\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2087,
    "candidates_token_count": 789,
    "total_token_count": 2876,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 24.129098,
  "retries": 1
}