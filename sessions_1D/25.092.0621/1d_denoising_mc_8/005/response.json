{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport collections\n\n\"\"\"\nTransformation Rule:\n\n1.  Receive the input grid, expected to be a 2D NumPy array.\n2.  Validate the input grid: If it's empty (size is 0), return an empty list `[]`.\n3.  Determine the grid dimensions (height `H`, width `W`) from the array's shape.\n4.  Check if the grid is a row vector (`H=1`, `W>0`) or a column vector (`H>0`, `W=1`).\n5.  If it is a row vector, extract the first row as a 1D Python list (`linear_sequence`).\n6.  If it is a column vector, extract the first column as a 1D Python list (`linear_sequence`).\n7.  If it is neither a row nor a column vector (e.g., a multi-dimensional grid, a 1x1 grid, or degenerate), convert the input NumPy array to a list of lists and return it unchanged.\n8.  Find the index of the first non-white (non-zero) pixel (`start_index`) and the last non-white pixel (`end_index`) in the `linear_sequence`.\n9.  If no non-white pixels are found (`start_index` is None), convert the input NumPy array to a list of lists and return it unchanged.\n10. Identify the `central_segment` of the `linear_sequence` (from `start_index` to `end_index` inclusive).\n11. Count the occurrences of each distinct non-white color within this `central_segment`.\n12. Determine the `dominant_color` (the color with the highest count).\n13. Create a `new_central_segment` list with the same length as the original `central_segment`, filled entirely with the `dominant_color`.\n14. Construct the `output_sequence` list by concatenating the portion of `linear_sequence` before `start_index`, the `new_central_segment`, and the portion of `linear_sequence` after `end_index`.\n15. Create the `output_grid` (as a list of lists):\n    *   If the input was a row vector, the `output_grid` is `[output_sequence]`.\n    *   If the input was a column vector, the `output_grid` is `[[pixel] for pixel in output_sequence]`.\n16. Return the `output_grid`.\n\"\"\"\n\ndef find_central_segment_indices(input_list):\n    \"\"\"\n    Finds the start and end indices of the first contiguous block of non-zero values.\n\n    Args:\n        input_list: A list of integers representing colors.\n\n    Returns:\n        A tuple (start_index, end_index).\n        Returns (None, None) if no non-zero elements are found.\n        start_index is the index of the first non-zero element.\n        end_index is the index of the last non-zero element.\n    \"\"\"\n    start_index = None\n    end_index = None\n    n = len(input_list)\n\n    # Find the first non-zero element\n    for i in range(n):\n        if input_list[i] != 0:\n            start_index = i\n            break\n\n    # If no non-zero element was found, return None, None\n    if start_index is None:\n        return None, None\n\n    # Find the last non-zero element by searching from the end\n    for i in range(n - 1, start_index - 1, -1):\n         if input_list[i] != 0:\n            end_index = i\n            break\n\n    # This check is mostly redundant if start_index is not None,\n    # but ensures end_index is assigned.\n    if end_index is None:\n        return None, None # Should technically not be reachable\n\n    return start_index, end_index\n\ndef get_dominant_color(segment):\n    \"\"\"\n    Finds the most frequent non-zero color in a list segment.\n\n    Args:\n        segment: A list of integers representing colors.\n\n    Returns:\n        The integer value of the most frequent non-zero color.\n        Returns None if the segment is empty or contains only zeros.\n    \"\"\"\n    if not segment:\n        return None\n\n    # Filter out zeros, though the central segment shouldn't contain them by definition\n    non_zero_segment = [color for color in segment if color != 0]\n\n    if not non_zero_segment:\n        # This should not happen if the segment comes from valid indices found by\n        # find_central_segment_indices, as those indices bound non-zero elements.\n        return None\n\n    counts = collections.Counter(non_zero_segment)\n    # Find the color with the maximum count. If ties, most_common returns one arbitrarily.\n    dominant_color = counts.most_common(1)[0][0]\n    return dominant_color\n\n\ndef transform(input_grid_np):\n    \"\"\"\n    Applies the transformation rule to the input grid (NumPy array).\n    \"\"\"\n    # Convert input grid to NumPy array if it isn't already (for robustness)\n    # input_grid_np = np.array(input_grid, dtype=int) # Removed - assume it's already np array\n\n    # 2. Validate the input grid: If it's empty (size is 0), return an empty list `[]`.\n    if input_grid_np.size == 0:\n        return [] # Return empty list for empty input\n\n    # 3. Determine the grid dimensions\n    try:\n        height = input_grid_np.shape[0]\n        width = input_grid_np.shape[1]\n    except IndexError:\n        # Handle cases like 0-dimensional arrays or other unexpected shapes\n        return input_grid_np.tolist() # Return as list of lists\n\n    # 4. Check if the grid is a row vector or a column vector\n    is_row_vector = height == 1 and width > 0\n    is_col_vector = width == 1 and height > 0\n\n    linear_sequence = []\n\n    # 5. Extract sequence if row vector\n    if is_row_vector:\n        linear_sequence = input_grid_np[0, :].tolist() # Use NumPy slicing and convert\n    # 6. Extract sequence if column vector\n    elif is_col_vector:\n        linear_sequence = input_grid_np[:, 0].tolist() # Use NumPy slicing and convert\n    # 7. If not a line, return original grid converted to list of lists\n    else:\n        return input_grid_np.tolist()\n\n    # 8. Find the boundaries of the central non-white segment\n    start_index, end_index = find_central_segment_indices(linear_sequence)\n\n    # 9. If no non-white pixels found, return original grid converted to list of lists\n    if start_index is None:\n        return input_grid_np.tolist()\n\n    # 10. Identify the central segment\n    central_segment_input = linear_sequence[start_index : end_index + 1]\n\n    # 11 & 12. Find the dominant color in the central segment\n    dominant_color = get_dominant_color(central_segment_input)\n\n    # Defensive check - should have a dominant color if start_index was found\n    if dominant_color is None:\n         # This indicates an unexpected state, likely an issue with segment finding logic\n         # if it ever happens. Return original grid as a safe fallback.\n         print(f\"Warning: Could not determine dominant color for segment: {central_segment_input}\")\n         return input_grid_np.tolist()\n\n    # 13. Create the new central segment filled with the dominant color\n    central_segment_output_len = len(central_segment_input)\n    new_central_segment = [dominant_color] * central_segment_output_len\n\n    # 14. Construct the output sequence\n    # Extract leading and trailing segments directly from linear_sequence\n    leading_white_segment = linear_sequence[:start_index]\n    trailing_white_segment = linear_sequence[end_index + 1:]\n    output_sequence = leading_white_segment + new_central_segment + trailing_white_segment\n\n    # 15. Reconstruct the output grid (list of lists) in the original format\n    output_grid = []\n    if is_row_vector:\n        output_grid = [output_sequence]\n    elif is_col_vector:\n        output_grid = [[pixel] for pixel in output_sequence]\n        \n    # 16. Return the transformed grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 10694,
    "candidates_token_count": 1996,
    "total_token_count": 12690,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 22.072828,
  "retries": 1
}