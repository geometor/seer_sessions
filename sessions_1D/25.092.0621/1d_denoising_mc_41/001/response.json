{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nIdentifies the most frequent non-background color (0) in the input 1D grid.\nDefines a modification span from the first to the last occurrence of this dominant color.\nWithin this span, replaces any pixel that is neither the dominant color nor the background color with the dominant color.\nPixels outside the span or pixels matching the dominant or background color remain unchanged.\n\"\"\"\n\ndef find_dominant_non_background_color(grid_1d):\n    \"\"\"Finds the most frequent color excluding the background color 0.\"\"\"\n    counts = Counter(c for c in grid_1d if c != 0)\n    if not counts:\n        return None  # No non-background colors found\n    # Find the color with the maximum count\n    dominant_color = counts.most_common(1)[0][0]\n    return dominant_color\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid (list or np.ndarray): A 1D array representing the input grid row.\n\n    Returns:\n        np.ndarray: The transformed 1D array.\n    \"\"\"\n    # Ensure input is a numpy array for efficient operations\n    grid_1d = np.array(input_grid)\n\n    # Handle edge case: empty input\n    if grid_1d.size == 0:\n        return grid_1d.copy()\n\n    # Initialize output_grid as a copy of the input\n    output_grid = grid_1d.copy()\n\n    # 1. Identify the background color (assumed to be 0)\n    background_color = 0\n\n    # 2. Find the dominant non-background color\n    dominant_color = find_dominant_non_background_color(grid_1d)\n\n    # If no non-background color exists, return the original grid\n    if dominant_color is None:\n        return output_grid\n\n    # 3. Find the first and last indices of the dominant color\n    indices = np.where(grid_1d == dominant_color)[0]\n\n    # If dominant color is not found (shouldn't happen if find_dominant_color returned a value, but defensive check)\n    if indices.size == 0:\n        return output_grid # Or potentially raise an error depending on expected behavior\n\n    first_index = indices[0]\n    last_index = indices[-1]\n\n    # 4. Define the modification span\n    start_span = first_index\n    end_span = last_index # Inclusive end index for iteration\n\n    # 5. Iterate through the modification span and apply changes\n    for i in range(start_span, end_span + 1):\n        current_color = output_grid[i]\n        # Check if the color is an 'impurity' (not dominant and not background)\n        if current_color != dominant_color and current_color != background_color:\n            # Replace impurity with the dominant color\n            output_grid[i] = dominant_color\n\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2422,
    "candidates_token_count": 699,
    "total_token_count": 3121,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.105882,
  "retries": 1
}