{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by identifying the most frequent non-white color ('main color') and replacing all non-white pixels in the grid with this main color. White pixels (color 0) remain unchanged. If the grid contains no non-white pixels, it is returned as is.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef find_main_color(grid):\n    \"\"\"\n    Finds the most frequent non-white color in the grid.\n\n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        int or None: The most frequent non-white color, or None if no\n                     non-white pixels exist.\n    \"\"\"\n    # 1. Identify all non-White pixels (values > 0)\n    non_white_pixels = grid[grid > 0]\n\n    # 2. If there are no non-white pixels, return None\n    if non_white_pixels.size == 0:\n        return None\n\n    # 3. Count occurrences of each distinct non-White color\n    color_counts = Counter(non_white_pixels)\n\n    # 4. Determine the non-White color with the highest count (the \"main color\")\n    # .most_common(1) returns a list of tuples [(element, count)],\n    # so we take the first element's first item\n    main_color = color_counts.most_common(1)[0][0]\n    return main_color\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input 2D grid by replacing all non-white pixels with the\n    most frequent non-white color found in the input.\n\n    Args:\n        input_grid (np.array): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.array: A 2D numpy array representing the transformed grid.\n    \"\"\"\n    # Find the most frequent non-white color\n    main_color = find_main_color(input_grid)\n\n    # If there are no non-white pixels (main_color is None), return the input as is\n    if main_color is None:\n        return input_grid.copy()\n\n    # Create a copy of the input grid to modify\n    output_grid = input_grid.copy()\n\n    # Create a boolean mask for non-white pixels\n    non_white_mask = input_grid > 0\n\n    # Replace the values in the output grid at non-white locations\n    # with the main color using the mask\n    output_grid[non_white_mask] = main_color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5915,
    "candidates_token_count": 588,
    "total_token_count": 6503,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 8.162431,
  "retries": 1
}