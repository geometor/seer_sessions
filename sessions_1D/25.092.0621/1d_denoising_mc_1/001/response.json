{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies a contiguous sequence of non-white pixels within a 1D input grid.\nDetermines the most frequent non-white color (dominant color) within that sequence.\nReplaces all other non-white colors within the sequence with the dominant color.\nPixels outside the sequence (leading/trailing white pixels) remain unchanged.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\nimport copy\n\ndef find_non_white_sequence(grid_1d):\n    \"\"\"\n    Finds the start and end indices of the first contiguous non-white sequence.\n\n    Args:\n        grid_1d: A 1D numpy array representing the grid row.\n\n    Returns:\n        A tuple (start_index, end_index) or None if no non-white sequence is found.\n        Indices are inclusive.\n    \"\"\"\n    non_white_indices = np.where(grid_1d != 0)[0]\n    if len(non_white_indices) == 0:\n        return None  # No non-white pixels\n\n    start_index = non_white_indices[0]\n    end_index = non_white_indices[-1]\n\n    # Verify contiguity (optional but good practice)\n    # In this specific task structure (bordered by zeros), the min and max\n    # index of non-zero elements define the sequence.\n    # If the task allowed multiple sequences separated by zeros, more logic would be needed.\n    # sequence_len = end_index - start_index + 1\n    # non_white_count_in_range = np.count_nonzero(grid_1d[start_index : end_index + 1])\n    # if non_white_count_in_range != sequence_len:\n    #     # This indicates zeros within the supposed sequence, which contradicts the task examples\n    #     # Handle error or adjust logic if needed\n    #     print(\"Warning: Zeros found within the identified non-white sequence range.\")\n        \n    return start_index, end_index\n\ndef get_dominant_color(sequence):\n    \"\"\"\n    Finds the most frequent non-white color in a sequence.\n\n    Args:\n        sequence: A 1D numpy array representing the non-white sequence.\n\n    Returns:\n        The most frequent non-white color value, or None if the sequence is empty or all white.\n    \"\"\"\n    non_white_pixels = sequence[sequence != 0]\n    if len(non_white_pixels) == 0:\n        return None\n\n    color_counts = Counter(non_white_pixels)\n    # most_common(1) returns a list of tuples [(color, count)]\n    dominant_color, _ = color_counts.most_common(1)[0]\n    return dominant_color\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by replacing minority non-white colors within\n    a contiguous non-white sequence with the majority non-white color.\n\n    Args:\n        input_grid: A list of lists representing the input grid (assumed 1xN).\n\n    Returns:\n        A list of lists representing the transformed output grid.\n    \"\"\"\n    # Ensure input is a numpy array for easier handling\n    # Assuming input is always 1xN as per examples\n    if not isinstance(input_grid, np.ndarray):\n        input_np = np.array(input_grid, dtype=int)\n    else:\n        input_np = input_grid.astype(int)\n\n    # Handle empty or non-1D grids if necessary, though examples are 1D\n    if input_np.ndim != 2 or input_np.shape[0] != 1:\n         # Or handle potential multi-row grids if the task scope expands\n        raise ValueError(\"Input grid must be 1xN\")\n\n    grid_1d = input_np[0] # Work with the single row\n\n    # Create a copy to modify\n    output_grid_1d = grid_1d.copy()\n\n    # 1. Identify the contiguous sequence of non-white pixels\n    sequence_indices = find_non_white_sequence(grid_1d)\n\n    if sequence_indices is None:\n        # No non-white sequence found, return the original grid\n        return input_np.tolist()\n\n    start_index, end_index = sequence_indices\n\n    # 2. Extract the sequence\n    sequence = grid_1d[start_index : end_index + 1]\n\n    # 3. Determine the dominant color within the sequence\n    dominant_color = get_dominant_color(sequence)\n\n    if dominant_color is None:\n         # Should not happen if sequence_indices were found, but good for safety\n         return input_np.tolist()\n\n    # 4. Iterate through the sequence in the output grid and replace noise pixels\n    for i in range(start_index, end_index + 1):\n        # Check if the pixel is non-white and not the dominant color\n        if output_grid_1d[i] != 0 and output_grid_1d[i] != dominant_color:\n            # Replace with the dominant color\n            output_grid_1d[i] = dominant_color\n\n    # Reshape back to list of lists format\n    output_grid = output_grid_1d.reshape(1, -1).tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2284,
    "candidates_token_count": 1217,
    "total_token_count": 3501,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 17.781797,
  "retries": 1
}