{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nIdentifies contiguous segments of non-background (non-zero) pixels in a 1D input grid.\nFor each segment, determines the most frequent color (majority color).\nConstructs the output grid by replacing all pixels within each segment with that segment's majority color.\nBackground (zero) pixels remain unchanged.\n\"\"\"\n\ndef find_non_background_segments(grid_1d):\n    \"\"\"\n    Finds contiguous segments of non-zero pixels.\n\n    Args:\n        grid_1d: A 1D numpy array representing the grid row.\n\n    Returns:\n        A list of tuples, where each tuple contains (start_index, end_index) \n        for a non-background segment. Returns empty list if no non-background \n        pixels are found.\n    \"\"\"\n    segments = []\n    in_segment = False\n    start_index = -1\n    for i, pixel in enumerate(grid_1d):\n        if pixel != 0 and not in_segment:\n            # Start of a new segment\n            in_segment = True\n            start_index = i\n        elif pixel == 0 and in_segment:\n            # End of the current segment\n            in_segment = False\n            segments.append((start_index, i)) # end_index is exclusive for slicing later\n            start_index = -1\n            \n    # Handle segment that runs to the end of the grid\n    if in_segment:\n        segments.append((start_index, len(grid_1d)))\n        \n    return segments\n\ndef get_majority_color(segment_pixels):\n    \"\"\"\n    Determines the most frequent color in a list/array of pixels.\n\n    Args:\n        segment_pixels: A list or numpy array of pixel values from a segment.\n\n    Returns:\n        The integer value of the most frequent color. Returns None if segment is empty.\n    \"\"\"\n    if not segment_pixels.size > 0:\n        return None\n    \n    color_counts = Counter(segment_pixels)\n    # most_common(1) returns a list containing a single tuple: [(color, count)]\n    majority_color, _ = color_counts.most_common(1)[0]\n    return majority_color\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by replacing minority colors within contiguous non-background \n    segments with the segment's majority color.\n\n    Args:\n        input_grid: A list of lists (or potentially just a list for 1D case) \n                    representing the input grid. Assumed to be 1D based on examples.\n\n    Returns:\n        A list representing the transformed 1D grid.\n    \"\"\"\n    # Ensure input is a numpy array for easier processing\n    # Assuming input might sometimes be list of lists for a single row\n    if isinstance(input_grid[0], list):\n       grid_1d = np.array(input_grid[0])\n    else: # Assuming input is already a flat list\n       grid_1d = np.array(input_grid)\n       \n    # Initialize output_grid as a copy of the input\n    output_grid = grid_1d.copy()\n\n    # Find all non-background (non-zero) segments\n    segments = find_non_background_segments(grid_1d)\n\n    # Process each segment\n    for start_idx, end_idx in segments:\n        # Extract the pixels belonging to the current segment\n        segment_pixels = grid_1d[start_idx:end_idx]\n        \n        # Determine the majority color for this segment\n        majority_color = get_majority_color(segment_pixels)\n        \n        # If a majority color is found (segment was not empty)\n        if majority_color is not None:\n            # Replace all pixels in this segment's range in the output grid\n            # with the majority color\n            output_grid[start_idx:end_idx] = majority_color\n            \n    # Return the transformed grid as a list (matching typical ARC output format if needed)\n    # If original input was list of lists, return list of lists\n    if isinstance(input_grid[0], list):\n        return [output_grid.tolist()] \n    else: # return flat list\n        return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2387,
    "candidates_token_count": 983,
    "total_token_count": 3370,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.200939,
  "retries": 1
}