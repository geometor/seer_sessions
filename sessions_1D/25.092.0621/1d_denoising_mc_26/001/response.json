{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nIdentify the background color (white, 0). \nFind the most frequent non-background color (dominant color).\nReplace all non-background, non-dominant colors with the dominant color.\nLeave background and dominant color pixels unchanged.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by replacing minority colors with the dominant color.\n\n    Args:\n        input_grid (list[list[int]]): A 2D list representing the input grid.\n\n    Returns:\n        list[list[int]]: A 2D list representing the transformed output grid.\n    \"\"\"\n    # Convert input to a numpy array for easier processing\n    grid = np.array(input_grid, dtype=int)\n    output_grid = grid.copy()\n    \n    # Define the background color\n    background_color = 0\n\n    # Find all non-background pixels\n    non_background_pixels = grid[grid != background_color]\n\n    # Check if there are any non-background pixels\n    if non_background_pixels.size == 0:\n        # If the grid is all background, return it as is\n        return output_grid.tolist()\n\n    # Count the frequency of each non-background color\n    color_counts = Counter(non_background_pixels)\n\n    # Determine the dominant color (most frequent non-background color)\n    # If there's a tie, most_common(1) picks one arbitrarily, which seems fine based on examples.\n    dominant_color = color_counts.most_common(1)[0][0]\n\n    # Iterate through each pixel of the grid\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            pixel_color = grid[r, c]\n            # If the pixel is not background and not the dominant color\n            if pixel_color != background_color and pixel_color != dominant_color:\n                # Replace it with the dominant color in the output grid\n                output_grid[r, c] = dominant_color\n                \n    # Return the transformed grid as a list of lists\n    return output_grid.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2282,
    "candidates_token_count": 495,
    "total_token_count": 2777,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 7.571146,
  "retries": 1
}