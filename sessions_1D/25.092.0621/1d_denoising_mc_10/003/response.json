{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport collections\n\n\"\"\"\nTransformation Rule:\n1. Accept the input grid (a 2D NumPy array of color values).\n2. Scan the entire grid to find all pixels with non-white colors (colors 1 through 9).\n3. If no non-white pixels are found, return the input grid unchanged.\n4. Count the occurrences of each distinct non-white color found in step 2.\n5. Identify the non-white color that has the highest count; this is the \"target color\".\n6. Create a new grid as a copy of the input grid.\n7. Identify all pixel locations in the *original* input grid that contain a non-white color.\n8. Set the color of these corresponding locations in the *new* grid to the \"target color\".\n9. White pixels (color 0) remain unchanged in their locations.\n10. Return the new grid.\n\"\"\"\n\ndef find_dominant_non_white_color_np(grid):\n    \"\"\"\n    Finds the most frequent non-white color in a NumPy grid.\n\n    Args:\n        grid: A NumPy array representing the grid.\n\n    Returns:\n        The integer value of the most frequent non-white color,\n        or None if no non-white colors are present.\n    \"\"\"\n    # Flatten the grid to easily iterate through all pixels\n    flat_grid = grid.flatten()\n\n    # Filter out white pixels (color 0) using boolean indexing\n    non_white_pixels = flat_grid[flat_grid != 0]\n\n    # If the resulting array is empty (no non-white pixels), return None\n    if non_white_pixels.size == 0:\n        return None\n\n    # Count the frequency of each non-white color\n    # collections.Counter works directly on NumPy arrays\n    color_counts = collections.Counter(non_white_pixels)\n\n    # Find the color with the highest count.\n    # most_common(1) returns a list like [(color, count)], so we access [0][0].\n    dominant_color = color_counts.most_common(1)[0][0]\n\n    return dominant_color\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Transforms the input grid by replacing all non-white pixels\n    with the single most frequent non-white color found in the grid.\n\n    Args:\n        input_grid: A NumPy array representing the input grid.\n\n    Returns:\n        A NumPy array representing the transformed grid.\n    \"\"\"\n    # Find the dominant non-white color in the input grid\n    target_color = find_dominant_non_white_color_np(input_grid)\n\n    # If no non-white pixels were found (target_color is None),\n    # return the original grid without modification.\n    if target_color is None:\n        return np.copy(input_grid) # Return a copy to maintain immutability expectation\n\n    # Create a copy of the input grid to modify and return\n    output_grid = np.copy(input_grid)\n\n    # Create a boolean mask identifying all non-white pixels in the original grid.\n    # This mask will be True where input_grid[row, col] != 0, and False otherwise.\n    non_white_mask = (input_grid != 0)\n\n    # Use the boolean mask to assign the target_color to all\n    # locations in the output_grid where the mask is True.\n    # Pixels where the mask is False (originally white) are not affected.\n    output_grid[non_white_mask] = target_color\n\n    # Return the modified grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6363,
    "candidates_token_count": 825,
    "total_token_count": 7188,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.914027,
  "retries": 1
}