{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\n1.  Examine the input grid (a single row).\n2.  Identify the contiguous segment of non-white pixels.\n3.  Determine the dominant color within this non-white segment (the color that appears most frequently).\n4.  Create the output grid by copying the input grid.\n5.  Iterate through each pixel within the identified non-white segment in the output grid.\n6.  If a pixel's color is *not* the dominant color and not white (0), change its color to the dominant color.\n7.  Leave all white pixels and pixels already matching the dominant color unchanged.\n8.  The resulting grid is the final output.\n\"\"\"\n\ndef find_non_white_segment(row):\n    \"\"\"Finds the start and end indices of the contiguous non-white segment.\"\"\"\n    non_white_indices = np.where(row != 0)[0]\n    if len(non_white_indices) == 0:\n        return None, None  # No non-white pixels\n    \n    start_index = non_white_indices[0]\n    end_index = non_white_indices[-1]\n    \n    # Verify contiguity (although examples imply it, let's be safe)\n    # This check assumes the segment is truly contiguous as per the description\n    # If there could be multiple segments, logic would need adjustment\n    return start_index, end_index\n\ndef find_dominant_color(segment):\n    \"\"\"Finds the most frequent color in a segment.\"\"\"\n    if len(segment) == 0:\n        return None\n    # Count occurrences of each color\n    color_counts = Counter(segment)\n    # Find the color with the maximum count (dominant color)\n    # The .most_common(1) method returns a list of tuples [(color, count)]\n    dominant_color = color_counts.most_common(1)[0][0]\n    return dominant_color\n\ndef transform(input_grid):\n    \"\"\"\n    Identifies the dominant color in the contiguous non-white segment of a single-row grid\n    and replaces all other non-white colors within that segment with the dominant color.\n    \"\"\"\n    # Convert input grid (list of lists) to a numpy array (first row)\n    input_row = np.array(input_grid[0], dtype=int)\n    \n    # Initialize output_grid as a copy of the input row\n    output_row = input_row.copy()\n\n    # Find the start and end indices of the non-white segment\n    start_idx, end_idx = find_non_white_segment(input_row)\n\n    # If no non-white segment exists, return the original grid\n    if start_idx is None:\n        return input_grid # Return original list of lists format\n\n    # Extract the non-white segment\n    segment = input_row[start_idx : end_idx + 1]\n\n    # Determine the dominant color within the segment\n    dominant_color = find_dominant_color(segment)\n\n    # If a dominant color was found (segment wasn't empty)\n    if dominant_color is not None:\n        # Iterate through the pixels within the identified segment in the output row\n        for i in range(start_idx, end_idx + 1):\n            # Check if the pixel is part of the non-white segment (i.e., not white)\n            # and if its color is different from the dominant color\n            if output_row[i] != 0 and output_row[i] != dominant_color:\n                # Replace the outlier pixel's color with the dominant color\n                output_row[i] = dominant_color\n\n    # Convert the modified numpy row back to a list of lists format\n    output_grid = [output_row.tolist()]\n    \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2041,
    "candidates_token_count": 873,
    "total_token_count": 2914,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.279945,
  "retries": 1
}