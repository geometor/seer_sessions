{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input 2D grid according to the following rule:\n1. Identify the minimal bounding box containing all non-background (non-zero) pixels.\n2. Determine the most frequent color (dominant color) among all pixels within this bounding box in the input grid.\n3. Create an output grid, initially a copy of the input.\n4. Replace the color of all pixels within the bounding box in the output grid with the determined dominant color.\n5. Pixels outside the bounding box remain unchanged.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef find_non_background_bounding_box(grid):\n    \"\"\"\n    Finds the minimum bounding box containing all non-zero pixels.\n\n    Args:\n        grid (np.ndarray): The input grid.\n\n    Returns:\n        tuple: (min_row, min_col, max_row, max_col) or None if no non-zero pixels.\n    \"\"\"\n    non_zero_coords = np.argwhere(grid != 0)\n    if non_zero_coords.size == 0:\n        return None\n    min_row, min_col = non_zero_coords.min(axis=0)\n    max_row, max_col = non_zero_coords.max(axis=0)\n    return min_row, min_col, max_row, max_col\n\ndef get_dominant_color_in_box(grid, bounds):\n    \"\"\"\n    Finds the most frequent color within a specified bounding box in the grid.\n\n    Args:\n        grid (np.ndarray): The input grid.\n        bounds (tuple): (min_row, min_col, max_row, max_col).\n\n    Returns:\n        int: The most frequent color value. Returns -1 if box is invalid or empty.\n    \"\"\"\n    if bounds is None:\n        return -1 # Or some indicator of no box\n\n    min_row, min_col, max_row, max_col = bounds\n    # Ensure indices are valid\n    if min_row > max_row or min_col > max_col:\n        return -1\n\n    # Extract the segment defined by the bounds\n    segment = grid[min_row : max_row + 1, min_col : max_col + 1]\n\n    # Flatten the segment to count colors easily\n    flat_segment = segment.flatten()\n\n    if flat_segment.size == 0:\n        return -1 # Segment is empty\n\n    # Count color occurrences\n    color_counts = Counter(flat_segment)\n\n    # Find the dominant color\n    dominant_color = color_counts.most_common(1)[0][0]\n    return dominant_color\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the dominant color fill transformation to the input grid.\n\n    Args:\n        input_grid (list of lists): The input grid represented as a list of lists.\n\n    Returns:\n        list of lists: The transformed grid.\n    \"\"\"\n    # Convert input list of lists to a NumPy array for efficient processing\n    input_array = np.array(input_grid, dtype=int)\n\n    # Initialize output_grid as a copy of the input\n    output_array = np.copy(input_array)\n\n    # Find the bounding box of non-background pixels\n    bounds = find_non_background_bounding_box(input_array)\n\n    # If no non-background pixels or bounding box found, return the original grid\n    if bounds is None:\n        return output_array.tolist()\n\n    # Determine the dominant color within the bounding box of the input grid\n    dominant_color = get_dominant_color_in_box(input_array, bounds)\n\n    # If dominant color calculation was valid (e.g., box wasn't empty)\n    if dominant_color != -1:\n        min_row, min_col, max_row, max_col = bounds\n        # Fill the corresponding area in the output grid with the dominant color\n        output_array[min_row : max_row + 1, min_col : max_col + 1] = dominant_color\n\n    # Convert the NumPy array back to a list of lists before returning\n    return output_array.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6346,
    "candidates_token_count": 957,
    "total_token_count": 7303,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.339038,
  "retries": 1
}