{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input 2D grid by identifying the most frequent non-white color (dominant color) across the entire grid. \nThen, creates an output grid where all pixels that were non-white and not the dominant color in the input are changed to the dominant color. \nWhite pixels (0) and pixels that already had the dominant color remain unchanged.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef find_dominant_color(grid):\n    \"\"\"\n    Finds the most frequent non-white color in the grid.\n\n    Args:\n        grid (np.array): The input 2D grid.\n\n    Returns:\n        int or None: The dominant color value, or None if no non-white pixels exist.\n    \"\"\"\n    # Flatten the grid to get all pixel values\n    pixels = grid.flatten()\n    \n    # Filter out white pixels (0)\n    non_white_pixels = [pixel for pixel in pixels if pixel != 0]\n\n    # Handle the case where there are no non-white pixels\n    if not non_white_pixels:\n        return None \n\n    # Count the frequency of each non-white color\n    color_counts = Counter(non_white_pixels)\n\n    # Find the color with the highest frequency\n    dominant_color = color_counts.most_common(1)[0][0]\n    \n    return dominant_color\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid (list of lists): The input 2D grid representing pixel colors.\n\n    Returns:\n        list of lists: The transformed 2D grid.\n    \"\"\"\n    # Convert input to numpy array for easier handling\n    input_array = np.array(input_grid, dtype=int)\n    \n    # Find the grid-wide dominant non-white color\n    dominant_color = find_dominant_color(input_array)\n\n    # If there's no dominant color (e.g., grid is all white), return the original grid\n    if dominant_color is None:\n        return input_grid # Return in original list of lists format\n\n    # Initialize the output grid as a copy of the input grid\n    output_array = np.copy(input_array)\n    \n    # Get grid dimensions\n    height, width = output_array.shape\n\n    # Iterate through each pixel of the grid\n    for r in range(height):\n        for c in range(width):\n            # Get the current pixel's color\n            current_color = output_array[r, c]\n            \n            # Apply the transformation rule:\n            # If the pixel is non-white (not 0) and not the dominant color,\n            # change it to the dominant color.\n            if current_color != 0 and current_color != dominant_color:\n                output_array[r, c] = dominant_color\n            # Otherwise (if it's white or already the dominant color), it remains unchanged\n\n    # Convert the numpy array back to a list of lists for the final output format\n    return output_array.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6060,
    "candidates_token_count": 704,
    "total_token_count": 6764,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.538543,
  "retries": 1
}