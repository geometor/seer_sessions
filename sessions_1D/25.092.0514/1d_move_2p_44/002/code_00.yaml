task_type: array_manipulation
grid_dimensionality: 1
input_data_type: numpy.ndarray
output_data_type: numpy.ndarray
input_properties:
  shape: (1, N) where N is consistent across examples (N=7 in samples)
  elements:
    - type: object
      description: A contiguous block of identical non-zero pixels starting at index 0.
      color: Variable (orange/7, green/3, azure/8 in examples)
      location: Starts at column index 0.
      length: Variable (3 in examples).
    - type: background
      description: Pixels with color 0 (white).
      location: Fills the rest of the array after the object.
output_properties:
  shape: (1, N), same as input
  elements:
    - type: object
      description: The same contiguous block of non-zero pixels from the input.
      color: Same as the input object's color.
      location: Starts at column index 2.
      length: Same as the input object's length.
    - type: background
      description: Pixels with color 0 (white).
      location: Fills array positions not occupied by the shifted object (indices 0, 1, and positions after the object).
transformation:
  action: horizontal_shift (or array rotation/roll)
  target: the initial non-zero block
  details:
    - Identify the contiguous block of non-zero pixels starting at index 0 in the input array's single row.
    - Shift this block 2 positions to the right within the row.
    - The pixels effectively wrap around, meaning the elements shifted "off" the start reappear at the end, or equivalently, the elements from the end wrap to the beginning. In this specific case, it manifests as the initial block starting at index 2, preceded by two zeros.
  distance: 2 positions
  direction: right
constraints:
  - Input array is 1xN.
  - Input array always starts with a block of a single non-zero color.
  - Array dimensions (shape) remain constant.
  - Object integrity (internal order, color, length) is preserved.
  - The shift amount is constant (2 positions).