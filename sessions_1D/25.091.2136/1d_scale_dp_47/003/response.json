{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms a 2D grid by finding a unique magenta marker (6), identifying the\ncontiguous horizontal block of white pixels (0) immediately to its left within\nthe same row, determining the color of the non-white pixel immediately to the\nleft of that white block, and then recoloring the entire white block with\nthis source color. If the marker is not found, not unique, has no white block\nimmediately left, the white block is at the left edge, or the pixel left of\nthe white block is also white, the grid is returned unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef find_unique_marker(grid, marker_color):\n    \"\"\"\n    Finds the row and column of a unique marker color in the grid.\n\n    Args:\n        grid (np.ndarray): The input grid.\n        marker_color (int): The color value of the marker to find.\n\n    Returns:\n        tuple: (row, col) of the marker, or None if not found or not unique.\n    \"\"\"\n    locations = np.where(grid == marker_color)\n    if len(locations[0]) == 1:\n        return locations[0][0], locations[1][0]\n    return None\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid (np.ndarray): A 2D NumPy array representing the input grid.\n\n    Returns:\n        np.ndarray: A 2D NumPy array representing the transformed grid.\n    \"\"\"\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n    marker_color = 6\n    target_color = 0 # white\n\n    # 1. Find the unique magenta marker\n    marker_pos = find_unique_marker(input_grid, marker_color)\n    if marker_pos is None:\n        # Return unchanged if marker not found or not unique\n        return output_grid \n    marker_row, marker_col = marker_pos\n\n    # 2. Identify the contiguous block of white pixels immediately to the left\n    target_start_col = -1\n    target_end_col = -1\n\n    # Check the pixel immediately to the left of the marker\n    current_col = marker_col - 1\n    if current_col < 0 or input_grid[marker_row, current_col] != target_color:\n        # No white block immediately left, return unchanged\n        return output_grid\n\n    # Found at least one white pixel, this is the end of the block\n    target_end_col = current_col\n\n    # Find the start of the block by moving left\n    target_start_col = current_col\n    current_col -= 1\n    while current_col >= 0 and input_grid[marker_row, current_col] == target_color:\n        target_start_col = current_col\n        current_col -= 1\n\n    # At this point, target_start_col and target_end_col define the white block\n\n    # 3. Determine the source color from the pixel left of the white block\n    source_col = target_start_col - 1\n    if source_col < 0:\n        # White block starts at the grid edge, no source pixel defined to the left\n        return output_grid\n\n    source_color = input_grid[marker_row, source_col]\n\n    # 4. Check if the source color is white (unexpected case based on examples)\n    if source_color == target_color:\n        # If the adjacent pixel is also white, return unchanged\n        return output_grid\n\n    # 5. Recolor the target white block with the source color\n    # Use slicing for efficient modification\n    output_grid[marker_row, target_start_col : target_end_col + 1] = source_color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7352,
    "candidates_token_count": 887,
    "total_token_count": 8239,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.070157,
  "retries": 1
}