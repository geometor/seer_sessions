{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms a 1D array (represented as a single-row grid) by moving a \nmarker pixel (maroon 9) and shifting an adjacent gap of white pixels. \nIt locates the single maroon (9) pixel and the rightmost non-white pixel \nto its left (the end of a colored block). The maroon pixel is moved to \nbe immediately adjacent to the right of this block-end pixel. The sequence \nof white pixels originally situated between the block-end and the maroon \npixel (the gap) is then placed immediately to the right of the moved \nmaroon pixel. All other pixels retain their original relative order.\n\"\"\"\n\nimport numpy as np\nfrom typing import List, Optional, Tuple\n\ndef find_first_occurrence(arr_1d: np.ndarray, color: int) -> Optional[int]:\n    \"\"\"Finds the index of the first occurrence of a specific color in a 1D array.\"\"\"\n    indices = np.where(arr_1d == color)[0]\n    if len(indices) > 0:\n        return indices[0]\n    return None\n\ndef find_last_non_white_before(arr_1d: np.ndarray, before_index: int) -> Optional[int]:\n    \"\"\"\n    Finds the index of the rightmost non-white (non-zero) pixel \n    at an index strictly less than 'before_index'.\n    \"\"\"\n    for i in range(before_index - 1, -1, -1):\n        if arr_1d[i] != 0:\n            return i\n    return None\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid: A NumPy array representing the input grid, expected to be 1xN.\n\n    Returns:\n        A NumPy array representing the transformed grid.\n    \"\"\"\n    \n    # Ensure input is a single row grid\n    if input_grid.shape[0] != 1:\n        # Invalid format, return input unchanged\n        return input_grid\n        \n    input_row = input_grid[0] # Extract the 1D array\n    \n    # 1. Locate the index of the single maroon (9) pixel (`marker_index`).\n    marker_index = find_first_occurrence(input_row, 9)\n    if marker_index is None:\n        # Maroon pixel not found, return input unchanged\n        return input_grid\n\n    # 2. Scan leftwards from the index immediately preceding the maroon pixel \n    #    to find the index of the rightmost non-white pixel (`block_end_index`).\n    block_end_index = find_last_non_white_before(input_row, marker_index)\n    if block_end_index is None:\n         # No non-white block found to the left, return input unchanged\n         return input_grid\n\n    # 3. Identify the segments for reconstruction:\n    #    a. Segment before and including the end of the non-white block.\n    segment_start = input_row[0 : block_end_index + 1]\n    \n    #    b. The marker pixel (maroon 9).\n    marker_pixel = np.array([9]) \n    \n    #    c. The gap segment (white pixels originally between block end and marker).\n    gap_segment = input_row[block_end_index + 1 : marker_index]\n    \n    #    d. The segment originally after the marker pixel.\n    segment_end = input_row[marker_index + 1 :]\n\n    # 4. Construct the output row by concatenating the segments in the new order.\n    output_row = np.concatenate((segment_start, marker_pixel, gap_segment, segment_end))\n\n    # 5. Return the constructed row reshaped into the required 1xN grid format.\n    return output_row.reshape(1, -1)\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8399,
    "candidates_token_count": 910,
    "total_token_count": 9309,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.925719,
  "retries": 1
}