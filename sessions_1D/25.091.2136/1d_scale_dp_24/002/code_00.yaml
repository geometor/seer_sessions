task_format: 1d_array_as_grid # Input/output are single-row grids
grid_properties:
  dimensionality: 1
  width: variable (26 in examples)
  height: 1
objects:
  - type: contiguous_block
    color: non-white (varies: red, orange, gray in examples)
    identifier: The rightmost contiguous sequence of identical non-white pixels located to the left of the target_pixel.
  - type: target_pixel
    color: maroon (9)
    count: 1
    identifier: The single pixel with value 9.
  - type: separator_pixels
    color: white (0)
    location: Between the contiguous_block and the target_pixel in the input.
    count: variable (can be zero or more)
    identifier: Sequence of zero or more white pixels at indices > block_end_index and < target_index.
  - type: background_pixels
    color: white (0)
    location: All other white pixels not classified as separator_pixels.
relationships:
  - type: spatial
    description: In the input grid row, the target_pixel is located somewhere to the right of the contiguous_block, potentially separated by separator_pixels.
transformation:
  - action: identify
    target: target_pixel (maroon 9)
    result: target_index
  - action: identify
    target: rightmost pixel of the contiguous_block (first non-white pixel scanning left from target_index - 1)
    result: block_end_index
  - action: construct_output_row
    description: Create a new row by concatenating segments from the input row in a specific order.
    segments:
      - segment_1: Input row from index 0 up to and including block_end_index.
      - segment_2: The target_pixel (maroon 9).
      - segment_3: Input row segment originally between block_end_index and target_index (separator_pixels). Indices from `block_end_index + 1` up to (but not including) `target_index`.
      - segment_4: Input row segment originally after the target_pixel. Indices from `target_index + 1` to the end of the row.
  - action: format_output
    description: Place the constructed output row into a list to form the final 1xN grid.
constraints:
  - The input grid always contains exactly one row.
  - The input row always contains exactly one maroon (9) pixel.
  - There is always at least one non-white pixel to the left of the maroon pixel.
  - The length of the output row is the same as the length of the input row.
  - The multiset of pixel colors remains the same between input and output.