{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransformation Rule:\n1. Identify the contiguous horizontal block of non-white (0), non-red (2) color (the main color block). Record its color and the column index of its rightmost pixel.\n2. Identify the column index of the single red pixel (color 2).\n3. Starting from the column immediately to the right of the main color block's rightmost pixel, change all pixels to the color of the main color block, up to (but not including) the column containing the red pixel.\n4. Leave all other pixels in the grid unchanged.\n\"\"\"\n\ndef find_main_block(row):\n    \"\"\"Finds the main color block's color and rightmost index.\"\"\"\n    main_color = -1\n    block_end_index = -1\n    for i, pixel in enumerate(row):\n        if pixel != 0 and pixel != 2:\n            # Found a potential start or continuation of the block\n            if main_color == -1:\n                main_color = pixel # Set the color on first encounter\n            elif pixel != main_color:\n                 # This shouldn't happen based on examples, but good to handle\n                 # If colors change, we stick with the first block found\n                 break \n            block_end_index = i # Update the end index\n        elif main_color != -1:\n            # If we were in a block and encountered 0 or 2, the block ended\n            break\n            \n    # Alternative using numpy - potentially cleaner if only one block guaranteed\n    # main_indices = np.where((row != 0) & (row != 2))[0]\n    # if len(main_indices) > 0:\n    #     main_color = row[main_indices[0]]\n    #     block_end_index = np.max(main_indices)\n    # else:\n    #     main_color = -1\n    #     block_end_index = -1\n        \n    return main_color, block_end_index\n\ndef find_boundary_pixel(row, boundary_color=2):\n    \"\"\"Finds the index of the first boundary pixel.\"\"\"\n    try:\n        # Find the first occurrence of the boundary color\n        boundary_index = np.where(row == boundary_color)[0][0]\n        return boundary_index\n    except IndexError:\n        # Boundary color not found\n        return -1\n\ndef transform(input_grid):\n    \"\"\"\n    Extends a horizontal block of color rightwards until it reaches a \n    boundary pixel (red, color 2).\n    \"\"\"\n    # Make a copy to modify\n    output_grid = input_grid.copy()\n    \n    # Assuming the grid is always 1 row high based on examples\n    if input_grid.shape[0] != 1:\n        # Handle unexpected input dimension if necessary\n        # For now, assume it's always 1 row\n        pass \n        \n    row = output_grid[0] # Work with the first (and only) row\n\n    # 1. Identify the main color block and its properties\n    main_color, block_end_index = find_main_block(row)\n\n    # 2. Identify the boundary pixel's location\n    boundary_index = find_boundary_pixel(row, 2) # 2 is red\n\n    # 3. Perform the extension if both block and boundary are found\n    #    and the block ends before the boundary\n    if main_color != -1 and boundary_index != -1 and block_end_index < boundary_index - 1:\n        # Define the start and end columns for filling\n        fill_start_col = block_end_index + 1\n        fill_end_col = boundary_index # Slice goes up to, but not including, this index\n        \n        # Change the pixels in the output grid\n        row[fill_start_col:fill_end_col] = main_color\n        \n    # 4. Return the modified grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2193,
    "candidates_token_count": 915,
    "total_token_count": 3108,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 17.279527,
  "retries": 1
}