{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nFor each row in the input grid:\n1. Identify all unique non-white colors present in the row.\n2. For each unique non-white color 'C':\n    a. Find the index of the first (leftmost) occurrence of 'C'.\n    b. Find the index of the last (rightmost) occurrence of 'C'.\n    c. If the first and last indices are different (meaning 'C' appears at least twice):\n        i. Check if all pixels strictly between the first and last occurrences are white (0).\n        ii. If they are all white, change the color of these intervening pixels to 'C' in the output grid.\n3. Return the modified grid.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Fills segments between the first and last occurrence of a non-white color \n    in a row with that color, if all pixels in between are white.\n\n    Args:\n        input_grid (list[list[int]]): A 2D list representing the input grid.\n\n    Returns:\n        list[list[int]]: A 2D list representing the transformed grid.\n    \"\"\"\n    # Convert input to a numpy array for easier processing\n    input_array = np.array(input_grid, dtype=int)\n    # Create a copy to modify, preserving the original input\n    output_array = input_array.copy()\n    \n    height, width = input_array.shape\n\n    # Iterate through each row of the grid\n    for r in range(height):\n        # Get the current row\n        row = input_array[r, :]\n        \n        # Find unique non-white colors (values > 0) in this row\n        # Using np.unique automatically sorts them, which doesn't matter here\n        unique_colors = np.unique(row[row > 0])\n\n        # Process each unique non-white color found\n        for color in unique_colors:\n            # Find all column indices where this color appears in the current row\n            indices = np.where(row == color)[0]\n\n            # Proceed only if the color appears at least twice\n            if len(indices) > 1:\n                # Find the index of the first (leftmost) occurrence\n                first_idx = np.min(indices)\n                # Find the index of the last (rightmost) occurrence\n                last_idx = np.max(indices)\n\n                # Check if there's actually a gap between the first and last occurrences\n                # (i.e., they are not adjacent)\n                if last_idx > first_idx + 1:\n                    # Extract the segment of pixels strictly between the first and last occurrences\n                    segment_to_check = row[first_idx + 1 : last_idx]\n\n                    # Check if all pixels within this segment are white (0)\n                    if np.all(segment_to_check == 0):\n                        # If all are white, fill this segment in the output grid's corresponding row with the current color\n                        output_array[r, first_idx + 1 : last_idx] = color\n\n    # Convert the result back to a list of lists format\n    return output_array.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2156,
    "candidates_token_count": 722,
    "total_token_count": 2878,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 19.834047,
  "retries": 1
}