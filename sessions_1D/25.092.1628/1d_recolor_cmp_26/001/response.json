{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nChange the color of specific horizontal blue segments (color 1) to yellow (color 4) based on their length relative to the longest horizontal blue segment(s) in the grid. Specifically, change segments whose length is equal to the maximum length found or one less than the maximum length.\n\"\"\"\n\nimport numpy as np\nfrom typing import List, Tuple\n\nGrid = List[List[int]]\nSegment = Tuple[int, int, int, int] # (row, start_col, end_col, length)\n\ndef find_horizontal_blue_segments(grid: Grid) -> List[Segment]:\n    \"\"\"\n    Identifies all contiguous horizontal segments of blue (1) pixels in the grid.\n\n    Args:\n        grid: The input grid (list of lists).\n\n    Returns:\n        A list of tuples, where each tuple represents a segment:\n        (row_index, start_column, end_column, length).\n    \"\"\"\n    segments = []\n    height = len(grid)\n    width = len(grid[0]) if height > 0 else 0\n    blue_color = 1\n\n    for r in range(height):\n        c = 0\n        while c < width:\n            if grid[r][c] == blue_color:\n                start_col = c\n                # Find the end of the segment\n                while c < width and grid[r][c] == blue_color:\n                    c += 1\n                end_col = c - 1\n                length = end_col - start_col + 1\n                segments.append((r, start_col, end_col, length))\n            else:\n                c += 1\n    return segments\n\ndef transform(input_grid: Grid) -> Grid:\n    \"\"\"\n    Transforms the input grid by changing the color of horizontal blue segments\n    that have a length equal to the maximum segment length or one less than\n    the maximum segment length to yellow (4).\n\n    Args:\n        input_grid: The 2D list representing the input grid.\n\n    Returns:\n        The 2D list representing the transformed output grid.\n    \"\"\"\n    # Convert to numpy array for easier manipulation and copying\n    np_grid = np.array(input_grid, dtype=int)\n    output_grid = np_grid.copy()\n    target_color = 1\n    change_to_color = 4\n\n    # Find all horizontal segments of the target color (blue=1)\n    segments = find_horizontal_blue_segments(output_grid.tolist())\n\n    # If no blue segments found, return the original grid copy\n    if not segments:\n        return output_grid.tolist()\n\n    # Determine the maximum length among these segments\n    max_len = 0\n    for _, _, _, length in segments:\n        if length > max_len:\n            max_len = length\n\n    # Identify segments whose length is max_len or max_len - 1\n    segments_to_change = []\n    for segment in segments:\n        length = segment[3]\n        if length == max_len or length == max_len - 1:\n            segments_to_change.append(segment)\n\n    # Modify the output grid: change selected segments to yellow (4)\n    for r, start_c, end_c, _ in segments_to_change:\n        for c in range(start_c, end_c + 1):\n            # Check if the pixel is still the target color (could have been overwritten\n            # by an overlapping segment, though unlikely in this specific problem logic)\n            # This check isn't strictly needed here based on analysis but good practice.\n            if output_grid[r, c] == target_color:\n                 output_grid[r, c] = change_to_color\n\n    # Convert back to list of lists for the standard ARC format\n    return output_grid.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2480,
    "candidates_token_count": 878,
    "total_token_count": 3358,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.933959,
  "retries": 1
}