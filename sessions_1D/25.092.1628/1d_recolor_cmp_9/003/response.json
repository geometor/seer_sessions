{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nIdentify all horizontal contiguous blocks of azure (8) pixels in the input row.\nDetermine the lengths of these blocks and their frequencies.\nFind the shortest block length present.\nExclude the shortest length from consideration. If only one length existed, or if excluding the shortest leaves no other lengths, make no changes.\nAmong the remaining lengths, find the length(s) that occur most frequently.\nIf there's a tie in frequency, choose the largest length among the most frequent ones.\nThis selected length is the 'target length'.\nChange all azure blocks that have the 'target length' to yellow (4).\nLeave all other pixels unchanged.\n\"\"\"\n\ndef find_horizontal_blocks(row, color):\n    \"\"\"\n    Finds contiguous horizontal blocks of a specific color in a 1D array (row).\n\n    Args:\n        row (np.array): A 1D numpy array representing a row of the grid.\n        color (int): The color value to search for blocks of.\n\n    Returns:\n        list: A list of dictionaries, where each dictionary contains \n              {'start': start_index, 'end': end_index, 'length': length}\n              for each block found. end_index is inclusive. Returns an empty\n              list if no blocks of the specified color are found.\n    \"\"\"\n    blocks = []\n    n = len(row)\n    i = 0\n    while i < n:\n        if row[i] == color:\n            # Start of a potential block\n            start_index = i\n            j = i\n            # Find the end of the contiguous block\n            while j < n and row[j] == color:\n                j += 1\n            # Block ends at index j-1 (inclusive)\n            end_index = j - 1\n            length = j - start_index\n            blocks.append({'start': start_index, 'end': end_index, 'length': length})\n            # Move past the current block\n            i = j\n        else:\n            # Not the target color, move to the next pixel\n            i += 1\n    return blocks\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule based on azure block length frequencies.\n    \"\"\"\n    # Convert input to NumPy array\n    input_grid_np = np.array(input_grid)\n    \n    # Ensure input is 1 row as per examples\n    if input_grid_np.shape[0] != 1:\n        # Task logic derived from single-row examples\n        # Return original if shape is different, as rule is undefined\n        return input_grid \n        \n    output_grid = np.copy(input_grid_np)\n    row = output_grid[0] # Work with the single row\n    azure_color = 8\n    target_color = 4\n\n    # 1. Find all azure blocks\n    azure_blocks = find_horizontal_blocks(row, azure_color)\n\n    # 2. If no azure blocks, return original\n    if not azure_blocks:\n        return output_grid.tolist()\n\n    # 3. Get list of lengths\n    lengths = [block['length'] for block in azure_blocks]\n    \n    # If only one block, or all blocks are same length, no change based on frequency logic\n    unique_lengths = sorted(list(set(lengths)))\n    if len(unique_lengths) <= 1:\n        return output_grid.tolist()\n\n    # 4. Determine frequencies\n    length_counts = Counter(lengths)\n\n    # 5. Find shortest length\n    shortest_length = min(unique_lengths)\n\n    # 6. Filter out shortest length\n    candidate_lengths = [l for l in unique_lengths if l != shortest_length]\n\n    # If filtering leaves no lengths, no change\n    if not candidate_lengths:\n        return output_grid.tolist()\n\n    # 7. Find max frequency among remaining lengths\n    candidate_frequencies = {l: length_counts[l] for l in candidate_lengths}\n    if not candidate_frequencies: # Should not happen if candidate_lengths is not empty, but safety check\n         return output_grid.tolist()\n         \n    max_freq = max(candidate_frequencies.values())\n\n    # 8. Identify lengths with max frequency\n    most_frequent_lengths = [l for l, freq in candidate_frequencies.items() if freq == max_freq]\n\n    # 9 & 10. Select target length (handle ties by choosing largest)\n    target_length = max(most_frequent_lengths)\n    \n    # 11-13. Change blocks with target length to yellow\n    for block in azure_blocks:\n        if block['length'] == target_length:\n            start = block['start']\n            end = block['end'] # inclusive index\n            # Modify the row in the output grid\n            row[start:end+1] = target_color\n\n    # 15. Return the modified grid as a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7774,
    "candidates_token_count": 1152,
    "total_token_count": 8926,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.249083,
  "retries": 1
}