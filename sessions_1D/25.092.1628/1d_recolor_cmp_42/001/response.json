{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nChange the color of the longest horizontal contiguous block(s) of green (3) pixels to maroon (9).\nAll other pixels retain their original color.\n\"\"\"\n\nimport numpy as np\n\ndef find_contiguous_blocks(grid_row, target_color, row_index):\n    \"\"\"\n    Finds contiguous horizontal blocks of a target color in a single grid row.\n\n    Args:\n        grid_row (np.array): A 1D numpy array representing a row of the grid.\n        target_color (int): The color value to search for.\n        row_index (int): The index of the row in the original grid.\n\n    Returns:\n        list: A list of tuples, where each tuple represents a block:\n              (start_index, end_index, length, row_index).\n              Returns an empty list if no blocks are found.\n    \"\"\"\n    blocks = []\n    start_index = -1\n    for i, pixel in enumerate(grid_row):\n        if pixel == target_color and start_index == -1:\n            # Start of a new block\n            start_index = i\n        elif pixel != target_color and start_index != -1:\n            # End of the current block\n            end_index = i - 1\n            length = end_index - start_index + 1\n            blocks.append((start_index, end_index, length, row_index))\n            start_index = -1 # Reset for the next block\n\n    # Check if the last block extends to the end of the row\n    if start_index != -1:\n        end_index = len(grid_row) - 1\n        length = end_index - start_index + 1\n        blocks.append((start_index, end_index, length, row_index))\n\n    return blocks\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by changing the color of the longest horizontal\n    contiguous block(s) of green (3) pixels to maroon (9).\n\n    Args:\n        input_grid (list of lists): The input grid represented as a list of lists.\n\n    Returns:\n        list of lists: The transformed grid.\n    \"\"\"\n    # Convert input grid to a numpy array for easier processing\n    input_np = np.array(input_grid, dtype=int)\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_np)\n\n    target_color = 3 # Green\n    change_color = 9 # Maroon\n    all_blocks = []\n\n    # Iterate through each row to find green blocks\n    for r_idx, row in enumerate(input_np):\n        row_blocks = find_contiguous_blocks(row, target_color, r_idx)\n        all_blocks.extend(row_blocks)\n\n    # If no green blocks were found, return the original grid\n    if not all_blocks:\n        return output_grid.tolist()\n\n    # Find the maximum length among all found green blocks\n    max_length = 0\n    for block in all_blocks:\n        if block[2] > max_length:\n            max_length = block[2]\n\n    # Identify all blocks that have the maximum length\n    longest_blocks = [block for block in all_blocks if block[2] == max_length]\n\n    # Change the color of the pixels in the longest blocks\n    for block in longest_blocks:\n        start_col, end_col, _, row_idx = block\n        # Modify the output grid in place\n        output_grid[row_idx, start_col:end_col+1] = change_color\n\n    # Convert the numpy array back to a list of lists for the final output\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1971,
    "candidates_token_count": 858,
    "total_token_count": 2829,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.880273,
  "retries": 1
}