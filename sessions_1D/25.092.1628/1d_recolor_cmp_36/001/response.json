{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\ndef find_contiguous_regions(grid, target_color):\n    \"\"\"\n    Finds all contiguous regions of a specific color in a grid.\n\n    Args:\n        grid (np.array): The input grid.\n        target_color (int): The color to find regions of.\n\n    Returns:\n        list: A list of regions, where each region is a list of \n              coordinate tuples (row, col).\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    regions = []\n\n    for r in range(rows):\n        for c in range(cols):\n            # If the cell is the target color and hasn't been visited yet,\n            # start a search (BFS) to find its connected region.\n            if grid[r, c] == target_color and not visited[r, c]:\n                current_region = []\n                q = deque([(r, c)])\n                visited[r, c] = True\n\n                while q:\n                    curr_r, curr_c = q.popleft()\n                    current_region.append((curr_r, curr_c))\n\n                    # Check neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = curr_r + dr, curr_c + dc\n\n                        # Check if neighbor is within bounds\n                        if 0 <= nr < rows and 0 <= nc < cols:\n                            # Check if neighbor is the target color and not visited\n                            if grid[nr, nc] == target_color and not visited[nr, nc]:\n                                visited[nr, nc] = True\n                                q.append((nr, nc))\n                \n                # Add the completed region to the list of all regions\n                regions.append(current_region)\n                \n    return regions\n\ndef transform(input_grid):\n    \"\"\"\n    Identifies all separate, contiguous regions of red (2) pixels. \n    Calculates the size of each region. Finds the region(s) with the \n    largest size. Changes the color of the pixels belonging to the \n    largest red region(s) to green (3) in the output grid. All other \n    pixels retain their original colors.\n    \"\"\"\n    # Convert input to numpy array for easier processing\n    input_arr = np.array(input_grid)\n    output_grid = np.copy(input_arr) # Start with a copy of the input\n\n    target_color = 2 # Red\n    replacement_color = 3 # Green\n\n    # Find all contiguous regions of the target color (red)\n    red_regions = find_contiguous_regions(input_arr, target_color)\n\n    # If no red regions are found, return the original grid\n    if not red_regions:\n        return output_grid.tolist() # Convert back to list of lists if needed\n\n    # Calculate the size of each region\n    region_sizes = [len(region) for region in red_regions]\n\n    # Find the maximum size\n    max_size = max(region_sizes)\n\n    # Identify all regions that have the maximum size\n    largest_regions = [region for region, size in zip(red_regions, region_sizes) if size == max_size]\n\n    # Change the color of pixels in the largest regions to green\n    for region in largest_regions:\n        for r, c in region:\n            output_grid[r, c] = replacement_color\n\n    # Convert the result back to a list of lists if the input was like that\n    # Assuming the test harness handles numpy arrays or list of lists appropriately.\n    # If strict list of lists output is required:\n    # return output_grid.tolist() \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2236,
    "candidates_token_count": 879,
    "total_token_count": 3115,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 17.938073,
  "retries": 1
}