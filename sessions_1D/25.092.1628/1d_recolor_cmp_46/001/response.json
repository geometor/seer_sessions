{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Dict, Tuple\n\n\"\"\"\nThis program identifies all horizontal rectangles composed of orange (7) pixels within the input grid. \nIt determines the width of each such rectangle and finds the maximum width among them. \nFinally, it creates an output grid where all orange rectangles that match this maximum width are changed to maroon (9), while all other pixels remain unchanged.\n\"\"\"\n\ndef find_horizontal_rectangles(grid: np.ndarray, color: int) -> List[Dict]:\n    \"\"\"\n    Finds all horizontal contiguous blocks (rectangles) of a specified color in the grid.\n\n    Args:\n        grid: A numpy array representing the input grid.\n        color: The integer color value to search for.\n\n    Returns:\n        A list of dictionaries, where each dictionary represents a rectangle\n        and contains its 'row', 'col_start', and 'width'.\n    \"\"\"\n    rectangles = []\n    height, width = grid.shape\n    for r in range(height):\n        c = 0\n        while c < width:\n            # Check if the current pixel has the target color\n            if grid[r, c] == color:\n                start_c = c\n                # Find the end of the contiguous block of the target color\n                while c < width and grid[r, c] == color:\n                    c += 1\n                # Calculate width and store rectangle info\n                rect_width = c - start_c\n                rectangles.append({'row': r, 'col_start': start_c, 'width': rect_width})\n            else:\n                # Move to the next pixel if it's not the target color\n                c += 1\n    return rectangles\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transforms the input grid by finding the widest horizontal orange rectangles\n    and changing their color to maroon.\n\n    Args:\n        input_grid: A list of lists representing the input grid.\n\n    Returns:\n        A list of lists representing the transformed output grid.\n    \"\"\"\n    # Convert input grid to a numpy array for efficient processing\n    input_np = np.array(input_grid, dtype=int)\n    # Initialize the output grid as a copy of the input grid\n    output_grid = np.copy(input_np)\n    \n    orange_color = 7\n    maroon_color = 9\n\n    # Find all horizontal rectangles made of the orange color\n    orange_rectangles = find_horizontal_rectangles(input_np, orange_color)\n\n    # If no orange rectangles are found, return the original grid unchanged\n    if not orange_rectangles:\n        return output_grid.tolist()\n\n    # Determine the maximum width among all found orange rectangles\n    max_width = 0\n    for rect in orange_rectangles:\n        if rect['width'] > max_width:\n            max_width = rect['width']\n    # Alternative using list comprehension and max() for conciseness:\n    # max_width = max(rect['width'] for rect in orange_rectangles)\n\n    # Iterate through the found rectangles again\n    for rect in orange_rectangles:\n        # Check if the current rectangle's width matches the maximum width\n        if rect['width'] == max_width:\n            # Get the rectangle's position and dimensions\n            r = rect['row']\n            col_start = rect['col_start']\n            width = rect['width']\n            # Change the color of the pixels corresponding to this rectangle\n            # in the output grid to maroon\n            output_grid[r, col_start : col_start + width] = maroon_color\n\n    # Convert the final numpy array back to a list of lists format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2094,
    "candidates_token_count": 854,
    "total_token_count": 2948,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 23.060573,
  "retries": 1
}