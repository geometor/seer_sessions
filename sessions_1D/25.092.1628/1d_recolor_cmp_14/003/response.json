{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nFor each row in the input grid, identify the longest horizontal segment(s) \nof maroon (9) pixels and change their color to yellow (4). If multiple \nsegments in a row share the maximum length for that row, change all of them.\nOther pixels remain unchanged.\n\"\"\"\n\nimport numpy as np\nfrom typing import List, Tuple\n\ndef find_maroon_segments_in_row(row: np.ndarray) -> List[Tuple[int, int, int]]:\n    \"\"\"\n    Identifies contiguous segments of maroon (9) pixels in a single row.\n\n    Args:\n        row: A 1D NumPy array representing a row of the grid.\n\n    Returns:\n        A list of tuples, where each tuple represents a maroon segment\n        and contains (start_col_index, end_col_index, length).\n    \"\"\"\n    segments = []\n    start_index = -1\n    current_length = 0\n    maroon_color = 9\n    row_length = len(row)\n\n    for i, pixel in enumerate(row):\n        if pixel == maroon_color:\n            # Start of a new segment or continuation of an existing one\n            if start_index == -1:\n                start_index = i\n            current_length += 1\n        else:\n            # End of a segment (if one was active)\n            if start_index != -1:\n                segments.append((start_index, i - 1, current_length))\n                # Reset segment tracking\n                start_index = -1\n                current_length = 0\n\n    # Handle segment ending at the very end of the row\n    if start_index != -1:\n        segments.append((start_index, row_length - 1, current_length))\n\n    return segments\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid: A 2D NumPy array representing the input grid.\n\n    Returns:\n        A 2D NumPy array representing the transformed grid.\n    \"\"\"\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n    num_rows, _ = input_grid.shape\n    yellow_color = 4\n\n    # Iterate through each row of the grid\n    for r in range(num_rows):\n        current_row = input_grid[r, :]\n\n        # Find all horizontal maroon segments in the current row\n        maroon_segments = find_maroon_segments_in_row(current_row)\n\n        # If no maroon segments found in this row, continue to the next row\n        if not maroon_segments:\n            continue\n\n        # Find the maximum length among the segments in this row\n        max_length_in_row = 0\n        for _, _, length in maroon_segments:\n            if length > max_length_in_row:\n                max_length_in_row = length\n        \n        # If max_length is 0 (shouldn't happen if segments exist, but safe check)\n        if max_length_in_row == 0:\n             continue\n\n        # Recolor the longest segments in the output grid for this row\n        for start_col, end_col, length in maroon_segments:\n            if length == max_length_in_row:\n                # Change the color of pixels in this segment to yellow in the output grid\n                output_grid[r, start_col : end_col + 1] = yellow_color\n\n    # Return the modified grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6850,
    "candidates_token_count": 825,
    "total_token_count": 7675,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.223295,
  "retries": 1
}