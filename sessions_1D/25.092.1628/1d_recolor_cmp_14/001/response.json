{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Tuple\n\n\"\"\"\nChange the color of the longest horizontal segment(s) of maroon (9) pixels \nin the input sequence to yellow (4). If multiple segments share the maximum \nlength, change all of them. Treat the input as a 1D sequence.\n\"\"\"\n\ndef find_maroon_segments(sequence: List[int]) -> List[Tuple[int, int, int]]:\n    \"\"\"\n    Identifies contiguous segments of maroon (9) pixels in a 1D sequence.\n\n    Args:\n        sequence: A list of integers representing pixel colors.\n\n    Returns:\n        A list of tuples, where each tuple represents a maroon segment\n        and contains (start_index, end_index, length).\n    \"\"\"\n    segments = []\n    start_index = -1\n    current_length = 0\n    maroon_color = 9\n\n    for i, pixel in enumerate(sequence):\n        if pixel == maroon_color:\n            if start_index == -1:\n                start_index = i\n            current_length += 1\n        else:\n            if start_index != -1:\n                # End of a segment\n                segments.append((start_index, i - 1, current_length))\n                start_index = -1\n                current_length = 0\n\n    # Handle segment ending at the very end of the sequence\n    if start_index != -1:\n        segments.append((start_index, len(sequence) - 1, current_length))\n\n    return segments\n\ndef transform(input_grid: List[int]) -> List[int]:\n    \"\"\"\n    Applies the transformation rule to a 1D input sequence.\n\n    Args:\n        input_grid: A list of integers representing the input pixel sequence.\n\n    Returns:\n        A list of integers representing the transformed pixel sequence.\n    \"\"\"\n    # Treat the input as a 1D sequence\n    sequence = input_grid\n\n    # Initialize output_grid as a copy of the input\n    output_grid = list(sequence)\n    \n    # --- Identify maroon segments ---\n    maroon_segments = find_maroon_segments(sequence)\n\n    # --- Handle case with no maroon segments ---\n    if not maroon_segments:\n        return output_grid # Return the original sequence if no maroon found\n\n    # --- Find the maximum length among the segments ---\n    max_length = 0\n    for _, _, length in maroon_segments:\n        if length > max_length:\n            max_length = length\n\n    # --- Recolor the longest segments ---\n    yellow_color = 4\n    for start, end, length in maroon_segments:\n        if length == max_length:\n            # Change the color of pixels in this segment to yellow in the output\n            for i in range(start, end + 1):\n                output_grid[i] = yellow_color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2677,
    "candidates_token_count": 665,
    "total_token_count": 3342,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.479977,
  "retries": 1
}