{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms a 2D grid by iterating through each row, finding the longest \ncontiguous horizontal segment of red (color 2) pixels within that row, \nand changing the color of the pixels within that specific segment to azure (color 8). \nAll other pixels remain unchanged. If multiple segments share the maximum \nlength in a row, the one encountered first (leftmost) is chosen.\n\"\"\"\n\nimport numpy as np\n\ndef find_longest_segment_in_row(row: np.ndarray, target_color: int) -> tuple[int, int]:\n    \"\"\"\n    Finds the start index and length of the longest contiguous segment \n    of target_color in a 1D NumPy array (row).\n\n    Args:\n        row: A 1D NumPy array representing a row of the grid.\n        target_color: The integer color value to search for.\n\n    Returns:\n        A tuple (start_index, length). Returns (-1, 0) if no segment is found.\n    \"\"\"\n    max_length = 0\n    longest_start_index = -1\n    \n    current_start_index = -1\n    current_length = 0\n    \n    n = len(row)\n    \n    for i in range(n):\n        if row[i] == target_color:\n            # Start or continue a segment\n            if current_start_index == -1:\n                current_start_index = i\n            current_length = i - current_start_index + 1 # Calculate length up to current index\n        else:\n            # End of a segment (or not in one)\n            if current_start_index != -1:\n                # Check if the just-ended segment is the new longest\n                if current_length > max_length:\n                    max_length = current_length\n                    longest_start_index = current_start_index\n                # Reset current segment tracking\n                current_start_index = -1\n                current_length = 0\n                \n    # Check if the row ended while inside a segment\n    if current_start_index != -1:\n        if current_length > max_length:\n            max_length = current_length\n            longest_start_index = current_start_index\n            \n    # If no segment was ever found, longest_start_index remains -1\n    # If segments were found, max_length will be > 0\n    if longest_start_index != -1:\n        return longest_start_index, max_length\n    else:\n        return -1, 0\n\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid: A 2D NumPy array representing the input grid.\n\n    Returns:\n        A 2D NumPy array representing the transformed grid.\n    \"\"\"\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n    \n    # Define target and replacement colors\n    target_color = 2  # red\n    replacement_color = 8 # azure\n\n    # Iterate through each row of the grid\n    num_rows = input_grid.shape[0]\n    for r in range(num_rows):\n        current_row = input_grid[r, :]\n        \n        # Find the longest contiguous segment of the target color in this row\n        start_index, length = find_longest_segment_in_row(current_row, target_color)\n        \n        # If a segment was found (length > 0)\n        if length > 0:\n            # Change the corresponding pixels in the output grid row\n            output_grid[r, start_index : start_index + length] = replacement_color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7061,
    "candidates_token_count": 870,
    "total_token_count": 7931,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.161655,
  "retries": 1
}