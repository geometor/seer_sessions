{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\n\ndef find_contiguous_blocks(row, color):\n    \"\"\"\n    Finds all contiguous blocks of a specified color within a single row.\n\n    Args:\n        row (list): A list of integers representing a row of the grid.\n        color (int): The color value to search for.\n\n    Returns:\n        list: A list of tuples, where each tuple represents a block\n              and contains (start_index, end_index, length).\n              'end_index' is the index *after* the last pixel of the block.\n    \"\"\"\n    blocks = []\n    start_index = -1\n    n = len(row)\n    for i, pixel in enumerate(row):\n        # Check if current pixel matches the target color\n        if pixel == color:\n            # If we are not already in a block, mark the start\n            if start_index == -1:\n                start_index = i\n        # If the pixel does not match the target color\n        else:\n            # If we were just in a block, it has now ended\n            if start_index != -1:\n                end_index = i # End index is exclusive\n                length = end_index - start_index\n                blocks.append((start_index, end_index, length))\n                start_index = -1 # Reset start index\n                \n    # After the loop, check if a block was ongoing until the end of the row\n    if start_index != -1:\n        end_index = n # End index is exclusive (index after the last element)\n        length = end_index - start_index\n        blocks.append((start_index, end_index, length))\n        \n    return blocks\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by finding the longest contiguous horizontal\n    block(s) of red (2) pixels in each row and changing their color to \n    magenta (6). Other pixels remain unchanged. If multiple blocks share the \n    maximum length in a row, all of them are changed.\n\n    Args:\n        input_grid (list of list of int): The input grid represented as a \n                                           list of rows.\n\n    Returns:\n        list of list of int: The transformed grid.\n    \"\"\"\n    # Initialize output_grid as a deep copy of the input grid\n    output_grid = copy.deepcopy(input_grid)\n    \n    # Define the colors\n    target_color = 2 # red\n    new_color = 6    # magenta\n\n    # Iterate through each row of the grid\n    for r, row in enumerate(input_grid):\n        # Find all contiguous blocks of the target color (red) in the current row\n        red_blocks = find_contiguous_blocks(row, target_color)\n\n        # If no red blocks are found in this row, continue to the next row\n        if not red_blocks:\n            continue\n\n        # Determine the maximum length among all red blocks found in this row\n        max_length = 0\n        for start, end, length in red_blocks:\n            if length > max_length:\n                max_length = length\n        \n        # Iterate through the found red blocks again\n        for start, end, length in red_blocks:\n            # If a block's length equals the maximum length for this row\n            if length == max_length:\n                # Change the color of the pixels within that block in the output grid row\n                for c in range(start, end):\n                    output_grid[r][c] = new_color\n\n    # Return the modified output grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2148,
    "candidates_token_count": 814,
    "total_token_count": 2962,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.179294,
  "retries": 1
}