{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentify the longest contiguous horizontal run(s) of green pixels (3) in the \ninput grid's single row. Change the color of the pixels in these longest \nrun(s) to red (2). All other pixels (white pixels and shorter green runs) \nremain unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef find_green_runs_and_max_len(input_row):\n    \"\"\"\n    Finds contiguous runs of green (3) in a 1D array (row) and identifies the \n    maximum run length.\n\n    Args:\n        input_row (np.array): A 1D NumPy array representing a row of the grid.\n\n    Returns:\n        tuple: A tuple containing:\n            - list: A list of dictionaries, where each dictionary represents a \n                    run and contains 'start', 'end' (exclusive), and 'length'.\n            - int: The maximum length found among all green runs. Returns 0 if \n                   no green runs are found.\n    \"\"\"\n    runs = []\n    max_len = 0\n    \n    # Find indices where the color is green (3)\n    green_indices = np.where(input_row == 3)[0]\n    \n    # If no green pixels are found, return empty list and max_len 0\n    if green_indices.size == 0:\n        return runs, max_len\n\n    # Find where the difference between consecutive indices is not 1, \n    # indicating the start of a new run. Prepend -1 to catch the first run.\n    start_indices = green_indices[np.where(np.diff(green_indices, prepend=-2) != 1)[0]] # Use -2 to avoid edge case with index 0\n    \n    # Find where the difference between consecutive indices is not 1, \n    # indicating the end of a run. Append a large number to catch the last run.\n    # The end index of the run is the index *after* the last element of the run.\n    end_indices_exclusive = green_indices[np.where(np.diff(green_indices, append=input_row.size + 1) != 1)[0]] + 1\n\n    # Create the list of runs and find the maximum length\n    for start, end in zip(start_indices, end_indices_exclusive):\n        length = end - start\n        runs.append({'start': start, 'end': end, 'length': length})\n        if length > max_len:\n            max_len = length\n            \n    return runs, max_len\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by changing the longest contiguous horizontal \n    runs of green pixels (3) to red pixels (2).\n\n    Args:\n        input_grid (np.array): A 2D NumPy array, expected to have shape (1, N).\n\n    Returns:\n        np.array: A 2D NumPy array with the transformation applied.\n    \"\"\"\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n    \n    # Define target and replacement colors\n    target_color = 3  # green\n    replacement_color = 2  # red\n\n    # Check if input is not empty and has at least one row\n    if input_grid.shape[0] == 0 or input_grid.shape[1] == 0:\n        return output_grid # Return copy if empty\n\n    # Extract the first (and only) row\n    row = input_grid[0, :]\n\n    # Find all green runs and the maximum length in the row\n    green_runs, max_length = find_green_runs_and_max_len(row)\n\n    # If green runs were found (max_length > 0)\n    if max_length > 0:\n        # Iterate through the found runs\n        for run in green_runs:\n            # Check if the run has the maximum length\n            if run['length'] == max_length:\n                # Change the pixels in the output grid for this run to red\n                start_index = run['start']\n                end_index = run['end']\n                output_grid[0, start_index:end_index] = replacement_color\n                \n    # Return the modified output grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6174,
    "candidates_token_count": 990,
    "total_token_count": 7164,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.261121,
  "retries": 1
}