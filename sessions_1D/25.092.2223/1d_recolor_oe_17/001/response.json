{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\nimport numpy as np # Although not strictly required by the description, ARC often uses numpy\n\n\"\"\"\nRecolors contiguous horizontal blocks of yellow (4) pixels based on the block's length parity (odd/even).\n- Blocks with odd length are changed to maroon (9).\n- Blocks with even length are changed to orange (7).\n- All other pixels, including the background white (0), remain unchanged.\n\"\"\"\n\ndef get_horizontal_block_length(row_data, start_col, target_color):\n    \"\"\"\n    Calculates the length of a contiguous horizontal block starting at start_col.\n\n    Args:\n        row_data (list or np.array): The row of the grid to search within.\n        start_col (int): The starting column index for the block.\n        target_color (int): The color of the pixels forming the block.\n\n    Returns:\n        int: The length of the contiguous block.\n    \"\"\"\n    length = 0\n    num_cols = len(row_data)\n    # Iterate from the starting column to the end of the row\n    for c in range(start_col, num_cols):\n        # If the pixel matches the target color, increment length\n        if row_data[c] == target_color:\n            length += 1\n        else:\n            # Stop counting when a different color or the end of the row is encountered\n            break\n    return length\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by recoloring horizontal blocks of yellow (4)\n    based on their length parity. Odd length -> maroon (9), Even length -> orange (7).\n\n    Args:\n        input_grid (list of lists or np.array): The input grid containing pixel values.\n\n    Returns:\n        list of lists or np.array: The transformed grid.\n    \"\"\"\n    # Ensure we are working with lists of lists for easier modification,\n    # or handle numpy arrays appropriately if needed.\n    # Using deepcopy ensures the original input_grid is not modified.\n    if isinstance(input_grid, np.ndarray):\n        output_grid = input_grid.copy() # Use numpy's copy for arrays\n        is_numpy = True\n    else:\n         # Assuming list of lists based on examples\n        output_grid = copy.deepcopy(input_grid)\n        is_numpy = False\n\n    # Get grid dimensions\n    if is_numpy:\n        rows, cols = output_grid.shape\n    else:\n        rows = len(output_grid)\n        if rows == 0:\n            return output_grid # Handle empty grid\n        cols = len(output_grid[0])\n        if cols == 0:\n             return output_grid # Handle empty rows\n\n    target_color = 4  # Yellow\n    odd_color = 9     # Maroon\n    even_color = 7    # Orange\n\n    # Iterate through each row\n    for r in range(rows):\n        c = 0 # Initialize column index for the current row\n        while c < cols:\n            # Check if the current pixel is the start of a target block\n            current_pixel = output_grid[r][c] if is_numpy else output_grid[r][c]\n\n            if current_pixel == target_color:\n                # Find the length of the contiguous horizontal block of target_color\n                if is_numpy:\n                    block_length = get_horizontal_block_length(output_grid[r,:], c, target_color)\n                else:\n                    block_length = get_horizontal_block_length(output_grid[r], c, target_color)\n\n\n                # Determine the output color based on block length parity\n                output_color = odd_color if block_length % 2 != 0 else even_color\n\n                # Recolor the block in the output grid\n                for i in range(block_length):\n                    if is_numpy:\n                        output_grid[r, c + i] = output_color\n                    else:\n                        output_grid[r][c + i] = output_color\n\n\n                # Skip the columns already processed as part of this block\n                c += block_length\n            else:\n                # If not the target color, move to the next column\n                c += 1\n\n    # Return the modified grid\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2194,
    "candidates_token_count": 980,
    "total_token_count": 3174,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 19.029055,
  "retries": 1
}