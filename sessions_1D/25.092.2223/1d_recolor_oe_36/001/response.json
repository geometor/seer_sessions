{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. Initialize the output grid as a copy of the input grid.\n2. Find all distinct groups (objects) of connected yellow (4) pixels in the input grid. \n   Pixels are considered connected if they share an edge (horizontally or vertically adjacent).\n3. For each distinct yellow object found:\n   a. Count the total number of pixels that make up the object (its size).\n   b. Determine if the object's size is an odd or even number.\n   c. If the size is odd, change the color of all pixels belonging to this object in the output grid to azure (8).\n   d. If the size is even, change the color of all pixels belonging to this object in the output grid to green (3).\n4. Leave all other pixels (originally white (0)) unchanged in the output grid.\n5. The final output grid reflects these color changes.\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef find_connected_object(grid, start_row, start_col, target_color, visited):\n    \"\"\"\n    Finds all connected pixels of a target color starting from a given point using BFS.\n    Marks visited pixels.\n    \"\"\"\n    rows, cols = grid.shape\n    q = deque([(start_row, start_col)])\n    object_pixels = []\n    \n    # Check if starting pixel is valid and not visited\n    if not (0 <= start_row < rows and 0 <= start_col < cols) or \\\n       visited[start_row, start_col] or \\\n       grid[start_row, start_col] != target_color:\n        return [] # Should not happen if called correctly, but good for safety\n\n    visited[start_row, start_col] = True\n    object_pixels.append((start_row, start_col))\n\n    while q:\n        r, c = q.popleft()\n        \n        # Check neighbors (up, down, left, right)\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n            \n            # Check bounds, color, and visited status\n            if 0 <= nr < rows and 0 <= nc < cols and \\\n               not visited[nr, nc] and \\\n               grid[nr, nc] == target_color:\n                \n                visited[nr, nc] = True\n                object_pixels.append((nr, nc))\n                q.append((nr, nc))\n                \n    return object_pixels\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on the size parity of connected yellow objects.\n    \"\"\"\n    input_grid_np = np.array(input_grid, dtype=int)\n    rows, cols = input_grid_np.shape\n    \n    # Initialize output_grid as a copy of the input\n    output_grid = input_grid_np.copy()\n    \n    # Keep track of visited pixels to avoid reprocessing parts of the same object\n    visited = np.zeros_like(input_grid_np, dtype=bool)\n    \n    target_color = 4 # yellow\n    even_color = 3 # green\n    odd_color = 8 # azure\n    \n    # Iterate through each pixel of the input grid\n    for r in range(rows):\n        for c in range(cols):\n            # If we find a yellow pixel that hasn't been visited yet, it's the start of a new object\n            if input_grid_np[r, c] == target_color and not visited[r, c]:\n                \n                # Find all pixels belonging to this connected object\n                object_pixels = find_connected_object(input_grid_np, r, c, target_color, visited)\n                \n                # Calculate the size of the object\n                object_size = len(object_pixels)\n                \n                # Determine the new color based on size parity\n                new_color = odd_color if object_size % 2 != 0 else even_color\n                \n                # Update the output grid with the new color for all pixels in this object\n                for obj_r, obj_c in object_pixels:\n                    output_grid[obj_r, obj_c] = new_color\n                    \n    # Return the modified grid as a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2281,
    "candidates_token_count": 1002,
    "total_token_count": 3283,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.570602,
  "retries": 1
}