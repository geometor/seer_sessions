{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nRecolor contiguous objects based on their size parity.\n\n1. Identify all connected components (objects) formed by pixels of color maroon (9) \n   in the input grid, using 4-connectivity (horizontal/vertical adjacency).\n2. For each identified maroon object:\n   a. Count the number of pixels constituting the object (determine its size).\n   b. Check if the size is even or odd.\n   c. If the size is even, change the color of all pixels belonging to this object \n      in the output grid to green (3).\n   d. If the size is odd, change the color of all pixels belonging to this object \n      in the output grid to magenta (6).\n3. Pixels that were originally white (0) remain unchanged.\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef find_connected_component(grid, start_row, start_col, visited):\n    \"\"\"\n    Finds a single connected component of the same color starting from a given cell\n    using Breadth-First Search (BFS).\n    \"\"\"\n    target_color = grid[start_row, start_col]\n    if target_color == 0: # Don't search for background components\n        return []\n        \n    rows, cols = grid.shape\n    component_coords = []\n    queue = deque([(start_row, start_col)])\n    visited[start_row, start_col] = True\n\n    while queue:\n        r, c = queue.popleft()\n        component_coords.append((r, c))\n\n        # Check 4 neighbors (up, down, left, right)\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n\n            # Check bounds, color, and visited status\n            if 0 <= nr < rows and 0 <= nc < cols and \\\n               grid[nr, nc] == target_color and not visited[nr, nc]:\n                visited[nr, nc] = True\n                queue.append((nr, nc))\n                \n    return component_coords\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by recoloring maroon (9) objects based on their size parity.\n    Even-sized objects become green (3), odd-sized objects become magenta (6).\n    White (0) pixels remain unchanged.\n    \"\"\"\n    # Convert input to numpy array for easier handling\n    input_array = np.array(input_grid, dtype=int)\n    rows, cols = input_array.shape\n    \n    # Initialize output_grid as a copy of the input\n    output_grid = input_array.copy()\n    \n    # Keep track of visited cells to avoid processing the same object multiple times\n    visited = np.zeros_like(input_array, dtype=bool)\n    \n    # Iterate through each cell of the grid\n    for r in range(rows):\n        for c in range(cols):\n            # If the cell is maroon (9) and hasn't been visited yet, find its component\n            if input_array[r, c] == 9 and not visited[r, c]:\n                # Find all connected pixels of this object\n                component_coords = find_connected_component(input_array, r, c, visited)\n                \n                # Calculate the size of the object\n                object_size = len(component_coords)\n                \n                # Determine the new color based on size parity\n                if object_size % 2 == 0:\n                    new_color = 3 # Green for even size\n                else:\n                    new_color = 6 # Magenta for odd size\n                    \n                # Recolor the pixels belonging to this object in the output grid\n                for obj_r, obj_c in component_coords:\n                    output_grid[obj_r, obj_c] = new_color\n                    \n    # Return the modified grid (as a numpy array or convert back to list of lists if needed)\n    return output_grid.tolist() # Convert back to list of lists format if required\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2098,
    "candidates_token_count": 933,
    "total_token_count": 3031,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.385614,
  "retries": 1
}