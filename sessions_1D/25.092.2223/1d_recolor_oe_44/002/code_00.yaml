Grid_Type: 1D array (row)
Input_Colors: [white(0), orange(7)]
Output_Colors: [white(0), maroon(9), magenta(6)]
Background_Color: white(0) # Remains unchanged
Objects:
  - type: contiguous_block
    input_color: orange(7)
    output_colors: [maroon(9), magenta(6)]
    properties:
      - length: integer # Number of pixels in the block
      - start_index: integer
      - end_index: integer
    derived_properties: # Properties derived from the set of all orange blocks in the input
      - lengths_list: list # List of lengths of all orange blocks
      - length_counts: map # Frequency of each length
      - unique_lengths: list # List of lengths that occur exactly once
      - number_of_unique_lengths: integer
      - median_length: integer # Median of lengths_list (using upper median for even count)
      - target_length: integer # The length used to determine the output color
Relationships:
  - white(0) pixels separate orange(7) blocks and are invariant.
  - All orange(7) blocks are considered together to determine the `target_length`.
Transformation_Rule:
  - Step 1: Identify all contiguous blocks of orange(7) pixels. Record their start index, end index, and length.
  - Step 2: Create a list of the lengths of all identified orange(7) blocks.
  - Step 3: Calculate the frequency of each length in the list.
  - Step 4: Identify lengths that occur exactly once (unique lengths).
  - Step 5: Determine the `target_length`:
      - If exactly one length is unique, the `target_length` is that unique length.
      - Otherwise (zero or multiple unique lengths), calculate the median of all block lengths. Sort the lengths; if the count is odd, the median is the middle value; if the count is even, the median is the value at the higher middle index (e.g., for [1, 2, 5, 6], the median is 5). The `target_length` is this median value.
  - Step 6: Create the output grid, initially identical to the input grid.
  - Step 7: For each identified orange(7) block:
      - If the block's length equals the `target_length`, replace its pixels in the output grid with maroon(9).
      - Otherwise, replace its pixels in the output grid with magenta(6).
  - Step 8: White(0) pixels remain unchanged throughout the process.