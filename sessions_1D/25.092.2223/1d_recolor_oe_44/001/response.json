{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport math\nfrom collections import Counter\n\n\"\"\"\nIdentify contiguous blocks of orange (7) pixels in the input 1D array.\nDetermine a 'target length' based on the distribution of the lengths of these blocks.\nIf exactly one block length occurs uniquely (only once), that length is the target length.\nOtherwise (if zero or multiple lengths are unique), the target length is the median length of all blocks. When calculating the median for an even number of blocks, use the larger of the two middle lengths after sorting.\nReplace orange blocks:\n- If a block's length equals the target length, replace its pixels with maroon (9).\n- Otherwise, replace its pixels with magenta (6).\nWhite (0) pixels remain unchanged.\n\"\"\"\n\ndef find_blocks_by_color(grid, color):\n    \"\"\"\n    Finds contiguous blocks of a specific color in a 1D grid.\n\n    Args:\n        grid (list): The input 1D array.\n        color (int): The color value to search for.\n\n    Returns:\n        list: A list of tuples, where each tuple represents a block\n              and contains (start_index, end_index, length).\n              Returns an empty list if no blocks are found.\n    \"\"\"\n    blocks = []\n    in_block = False\n    start_index = -1\n    for i, pixel in enumerate(grid):\n        if pixel == color and not in_block:\n            # Start of a new block\n            in_block = True\n            start_index = i\n        elif pixel != color and in_block:\n            # End of the current block\n            in_block = False\n            end_index = i - 1\n            length = end_index - start_index + 1\n            blocks.append((start_index, end_index, length))\n            start_index = -1 # Reset start_index\n        # Handle block ending at the very end of the grid\n        if in_block and i == len(grid) - 1:\n             end_index = i\n             length = end_index - start_index + 1\n             blocks.append((start_index, end_index, length))\n    return blocks\n\ndef calculate_target_length(lengths):\n    \"\"\"\n    Calculates the target length based on uniqueness or median.\n\n    Args:\n        lengths (list): A list of block lengths.\n\n    Returns:\n        int: The target length.\n    \"\"\"\n    if not lengths:\n        return None # Should not happen if called after finding blocks\n\n    # Calculate frequency of each length\n    length_counts = Counter(lengths)\n\n    # Find lengths that appear exactly once (unique lengths)\n    unique_lengths = [length for length, count in length_counts.items() if count == 1]\n\n    # Determine target length based on uniqueness\n    if len(unique_lengths) == 1:\n        target_length = unique_lengths[0]\n    else:\n        # Calculate median length (custom rule for even count)\n        sorted_lengths = sorted(lengths)\n        n = len(sorted_lengths)\n        mid_index = n // 2\n        if n % 2 == 1:\n            # Odd number of blocks, median is the middle element\n            target_length = sorted_lengths[mid_index]\n        else:\n            # Even number of blocks, median is the larger of the two middle elements\n            # Note: Python uses 0-based indexing, so middle elements are at mid_index-1 and mid_index\n            target_length = sorted_lengths[mid_index] # The larger one due to 0-indexing\n\n    return target_length\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on the rules derived from examples.\n    Identifies orange (7) blocks, determines a target length based on\n    length uniqueness or median, and replaces blocks with maroon (9) if\n    their length matches the target, or magenta (6) otherwise.\n\n    Args:\n        input_grid (list): A 1D list of integers representing pixel colors.\n\n    Returns:\n        list: The transformed 1D list of integers.\n    \"\"\"\n    # Initialize output_grid as a copy of the input\n    output_grid = list(input_grid)\n\n    # Find all contiguous blocks of orange (7) pixels\n    orange_blocks = find_blocks_by_color(input_grid, 7)\n\n    # If no orange blocks are found, return the original grid\n    if not orange_blocks:\n        return output_grid\n\n    # Extract the lengths of the found blocks\n    block_lengths = [block[2] for block in orange_blocks]\n\n    # Calculate the target length based on the rules\n    target_length = calculate_target_length(block_lengths)\n\n    # Iterate through the identified orange blocks and modify the output grid\n    for start, end, length in orange_blocks:\n        # Determine the replacement color\n        replacement_color = 9 if length == target_length else 6\n\n        # Apply the color change to the output grid slice\n        for i in range(start, end + 1):\n            output_grid[i] = replacement_color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2094,
    "candidates_token_count": 1171,
    "total_token_count": 3265,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.908877,
  "retries": 1
}