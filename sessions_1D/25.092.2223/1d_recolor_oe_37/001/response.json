{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentifies contiguous objects of maroon (9) pixels in the input grid.\nCalculates the size (number of pixels) of each maroon object.\nReplaces the maroon pixels in the output grid based on the parity of the object's size:\n- If the size is even, the object's pixels are changed to red (2).\n- If the size is odd, the object's pixels are changed to yellow (4).\nBackground white (0) pixels remain unchanged.\n\"\"\"\n\ndef find_connected_object(grid, start_row, start_col, target_color, visited):\n    \"\"\"\n    Finds a single connected object of target_color starting from (start_row, start_col) using BFS.\n\n    Args:\n        grid (np.array): The input grid.\n        start_row (int): The starting row index.\n        start_col (int): The starting column index.\n        target_color (int): The color of the object pixels to find.\n        visited (np.array): A boolean grid indicating visited pixels.\n\n    Returns:\n        list: A list of (row, col) tuples representing the coordinates of the object pixels.\n              Returns an empty list if the starting cell is not the target color or already visited.\n    \"\"\"\n    rows, cols = grid.shape\n    if not (0 <= start_row < rows and 0 <= start_col < cols) or \\\n       visited[start_row, start_col] or \\\n       grid[start_row, start_col] != target_color:\n        return []\n\n    object_coords = []\n    queue = deque([(start_row, start_col)])\n    visited[start_row, start_col] = True\n\n    while queue:\n        r, c = queue.popleft()\n        object_coords.append((r, c))\n\n        # Check neighbors (up, down, left, right)\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n\n            # Check bounds and if the neighbor is the target color and not visited\n            if 0 <= nr < rows and 0 <= nc < cols and \\\n               not visited[nr, nc] and \\\n               grid[nr, nc] == target_color:\n                visited[nr, nc] = True\n                queue.append((nr, nc))\n\n    return object_coords\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by finding maroon objects and recoloring them\n    based on the parity of their size (even -> red(2), odd -> yellow(4)).\n    \n    Args:\n        input_grid (list of lists): The input grid.\n\n    Returns:\n        list of lists: The transformed output grid.\n    \"\"\"\n    # Convert input to numpy array for easier processing\n    np_input = np.array(input_grid, dtype=int)\n    rows, cols = np_input.shape\n    \n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(np_input)\n    \n    # Keep track of visited pixels to avoid processing objects multiple times\n    visited = np.zeros_like(np_input, dtype=bool)\n    \n    maroon_color = 9\n    red_color = 2\n    yellow_color = 4\n\n    # Iterate through each pixel of the grid\n    for r in range(rows):\n        for c in range(cols):\n            # If we find a maroon pixel that hasn't been visited yet, start finding the object\n            if np_input[r, c] == maroon_color and not visited[r, c]:\n                # Find all connected pixels belonging to this object\n                object_pixels = find_connected_object(np_input, r, c, maroon_color, visited)\n                \n                # Calculate the size of the object\n                object_size = len(object_pixels)\n                \n                # Determine the replacement color based on size parity\n                if object_size % 2 == 0:\n                    replacement_color = red_color # Even size -> Red\n                else:\n                    replacement_color = yellow_color # Odd size -> Yellow\n                    \n                # Update the output grid with the replacement color for all pixels in the object\n                for obj_r, obj_c in object_pixels:\n                    output_grid[obj_r, obj_c] = replacement_color\n\n    # Convert the numpy array back to a list of lists for the final output\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2151,
    "candidates_token_count": 1050,
    "total_token_count": 3201,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 20.015407,
  "retries": 1
}