task_context:
  grid_dimensionality: 2D, specifically 1xN for all examples.
  input_colors: [white (0), gray (5)]
  output_colors: [white (0), blue (1), orange (7)]
  transformation_scope: Pixel-level, based on local horizontal context (contiguous blocks).
  execution_note: Runtime errors suggest the input grid might be passed as a NumPy array, requiring careful type handling in implementation.

objects:
  - type: background_pixel
    color: white (0)
    behavior: Static, remains white (0) in the output.
  - type: gray_block
    description: A contiguous horizontal sequence of one or more gray (5) pixels.
    properties:
      - length: integer (number of pixels in the sequence)
    behavior: All pixels within the block are transformed to a single new color based on the block's length.

transformation_rules:
  - rule: White pixel preservation
    condition: A pixel in the input grid is white (0).
    action: The corresponding pixel in the output grid is white (0).
  - rule: Gray block transformation
    condition: A pixel is gray (5) and part of a contiguous horizontal block of gray pixels.
    action:
      - Determine the total length of the contiguous gray block it belongs to.
      - If the block length is exactly 3, change this pixel to blue (1).
      - If the block length is *not* 3, change this pixel to orange (7).

relationships:
  - type: horizontal_adjacency
    description: Defines contiguous blocks of gray (5) pixels within the single row.
  - type: mapping
    description: Maps the length of a gray block to a specific output color.
    mapping_details:
      - length 3 -> blue (1)
      - length != 3 -> orange (7)