{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\n\n\"\"\"\nThe transformation rule operates on magenta (6) pixels within the input grid.\nFor each magenta pixel, it identifies the maximal contiguous horizontal segment of magenta pixels containing that pixel.\nThe length of this horizontal segment determines the output color for that specific pixel:\n- If the horizontal segment length is odd, the pixel becomes green (3).\n- If the horizontal segment length is even, the pixel becomes maroon (9).\nPixels that are not initially magenta (e.g., the white/0 background) remain unchanged.\n\"\"\"\n\ndef get_horizontal_segment_length(grid, r, c, target_color):\n    \"\"\"\n    Calculates the length of the maximal horizontal segment of target_color\n    containing the pixel at (r, c).\n\n    Args:\n        grid (list[list[int]]): The input grid.\n        r (int): Row index of the pixel.\n        c (int): Column index of the pixel.\n        target_color (int): The color to check for continuity.\n\n    Returns:\n        int: The length of the horizontal segment. Returns 0 if grid[r][c] is not target_color.\n    \"\"\"\n    if grid[r][c] != target_color:\n        return 0\n\n    rows, cols = len(grid), len(grid[0])\n    \n    # Find the start of the segment (scan left)\n    c_start = c\n    while c_start > 0 and grid[r][c_start - 1] == target_color:\n        c_start -= 1\n        \n    # Find the end of the segment (scan right)\n    c_end = c\n    while c_end < cols - 1 and grid[r][c_end + 1] == target_color:\n        c_end += 1\n        \n    # Length is inclusive difference + 1\n    length = c_end - c_start + 1\n    return length\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by recoloring magenta pixels based on the\n    parity of the length of the horizontal magenta segment they belong to.\n\n    Args:\n        input_grid (list[list[int]]): The input grid represented as a 2D list of integers.\n\n    Returns:\n        list[list[int]]: The transformed output grid.\n    \"\"\"\n    # Initialize output_grid as a deep copy of the input\n    output_grid = copy.deepcopy(input_grid)\n    rows = len(input_grid)\n    if rows == 0:\n        return output_grid\n    cols = len(input_grid[0])\n    if cols == 0:\n        return output_grid\n\n    magenta_color = 6\n    green_color = 3\n    maroon_color = 9\n\n    # Iterate through each pixel of the grid\n    for r in range(rows):\n        for c in range(cols):\n            # Check if the current pixel is magenta\n            if input_grid[r][c] == magenta_color:\n                # Find the length of the horizontal magenta segment containing this pixel\n                segment_length = get_horizontal_segment_length(input_grid, r, c, magenta_color)\n                \n                # Determine the output color based on the parity of the segment length\n                if segment_length % 2 != 0:  # Odd length\n                    output_color = green_color\n                else:  # Even length\n                    output_color = maroon_color\n                    \n                # Update the corresponding pixel in the output grid\n                output_grid[r][c] = output_color\n            # Else (if not magenta), the pixel color is already correct due to the initial copy\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 9604,
    "candidates_token_count": 838,
    "total_token_count": 10442,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 22.218684,
  "retries": 1
}