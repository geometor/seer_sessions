{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport collections\nimport copy\n\n\"\"\"\nIdentifies distinct, contiguous objects composed of magenta (6) pixels in the input grid using 8-way connectivity.\nFor each identified magenta object, it calculates its size (number of pixels).\nIf the object's size is odd, all its pixels in the output grid are changed to green (3).\nIf the object's size is even, all its pixels in the output grid are changed to maroon (9).\nAll non-magenta pixels (e.g., white/0 background) remain unchanged.\n\"\"\"\n\ndef find_connected_components(grid, target_color):\n    \"\"\"\n    Finds all connected components of a specific color in a grid.\n\n    Args:\n        grid (list[list[int]]): The input grid.\n        target_color (int): The color of the components to find.\n\n    Returns:\n        list[list[tuple[int, int]]]: A list where each element is a list\n                                     of (row, col) tuples representing a\n                                     single connected component.\n    \"\"\"\n    if not grid or not grid[0]:\n        return []\n\n    rows, cols = len(grid), len(grid[0])\n    visited = [[False for _ in range(cols)] for _ in range(rows)]\n    components = []\n\n    # Define 8 directions for connectivity (including diagonals)\n    directions = [\n        (-1, -1), (-1, 0), (-1, 1),\n        (0, -1),           (0, 1),\n        (1, -1), (1, 0), (1, 1)\n    ]\n\n    for r in range(rows):\n        for c in range(cols):\n            # If the cell is the target color and hasn't been visited yet,\n            # start a Breadth-First Search (BFS) to find its component\n            if grid[r][c] == target_color and not visited[r][c]:\n                component_pixels = []\n                queue = collections.deque([(r, c)])\n                visited[r][c] = True\n\n                while queue:\n                    curr_r, curr_c = queue.popleft()\n                    component_pixels.append((curr_r, curr_c))\n\n                    # Explore neighbors\n                    for dr, dc in directions:\n                        nr, nc = curr_r + dr, curr_c + dc\n\n                        # Check bounds\n                        if 0 <= nr < rows and 0 <= nc < cols:\n                            # Check if the neighbor is the target color and not visited\n                            if grid[nr][nc] == target_color and not visited[nr][nc]:\n                                visited[nr][nc] = True\n                                queue.append((nr, nc))\n\n                if component_pixels:\n                    components.append(component_pixels)\n\n    return components\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on the size of magenta (6) objects.\n    Odd-sized magenta objects become green (3).\n    Even-sized magenta objects become maroon (9).\n    Other pixels remain unchanged.\n\n    Args:\n        input_grid (list[list[int]]): The input grid represented as a 2D list of integers.\n\n    Returns:\n        list[list[int]]: The transformed output grid.\n    \"\"\"\n    # Initialize output_grid as a deep copy of the input to preserve background\n    output_grid = copy.deepcopy(input_grid)\n    magenta_color = 6\n    green_color = 3\n    maroon_color = 9\n\n    # Find all connected components (objects) of magenta pixels\n    magenta_objects = find_connected_components(input_grid, magenta_color)\n\n    # Process each magenta object\n    for obj_pixels in magenta_objects:\n        # Calculate the size of the object\n        object_size = len(obj_pixels)\n\n        # Determine the output color based on whether the size is odd or even\n        if object_size % 2 != 0:  # Odd size\n            output_color = green_color\n        else:  # Even size\n            output_color = maroon_color\n\n        # Change the color of all pixels belonging to this object in the output grid\n        for r, c in obj_pixels:\n            output_grid[r][c] = output_color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2194,
    "candidates_token_count": 980,
    "total_token_count": 3174,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.895559,
  "retries": 1
}