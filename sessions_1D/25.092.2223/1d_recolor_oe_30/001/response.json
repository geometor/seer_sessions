{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentify contiguous green (3) objects using 4-connectivity (pixels sharing an edge).\nCalculate the size (pixel count) of each identified green object.\nIf the object's size is even, change the color of all pixels belonging to that object to magenta (6).\nIf the object's size is odd, change the color of all pixels belonging to that object to gray (5).\nLeave all other pixels (specifically white background, 0) unchanged.\n\"\"\"\n\ndef find_objects(grid, target_color):\n    \"\"\"\n    Finds all distinct connected components (objects) of a specific color in a grid.\n\n    Args:\n        grid (np.array): The input 2D grid.\n        target_color (int): The color of the pixels forming the objects to find.\n\n    Returns:\n        list: A list of objects. Each object is represented as a list of\n              coordinate tuples (row, col).\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n\n    # Iterate through each cell of the grid\n    for r in range(rows):\n        for c in range(cols):\n            # If we find a pixel of the target color that hasn't been visited yet,\n            # start a Breadth-First Search (BFS) to find the connected component.\n            if grid[r, c] == target_color and not visited[r, c]:\n                current_object_coords = []\n                q = deque([(r, c)])\n                visited[r, c] = True # Mark the starting cell as visited\n\n                while q:\n                    row, col = q.popleft()\n                    current_object_coords.append((row, col)) # Add current cell to the object\n\n                    # Define the 4 neighbors (up, down, left, right)\n                    neighbors = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n                    for dr, dc in neighbors:\n                        nr, nc = row + dr, col + dc\n\n                        # Check if the neighbor is within grid bounds\n                        if 0 <= nr < rows and 0 <= nc < cols:\n                            # Check if the neighbor has the target color and hasn't been visited\n                            if grid[nr, nc] == target_color and not visited[nr, nc]:\n                                visited[nr, nc] = True # Mark neighbor as visited\n                                q.append((nr, nc)) # Add neighbor to the queue for processing\n\n                # After the BFS completes for one object, add its coordinates to the list\n                if current_object_coords:\n                    objects.append(current_object_coords)\n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by changing the color of green objects based on their size parity.\n\n    Args:\n        input_grid (np.array): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.array: A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    # Initialize output_grid as a copy of the input grid\n    output_grid = np.copy(input_grid)\n    \n    # Define the colors involved\n    target_color = 3 # green\n    odd_color = 5    # gray\n    even_color = 6   # magenta\n\n    # Find all green objects in the input grid\n    green_objects = find_objects(input_grid, target_color)\n\n    # Process each found green object\n    for obj_coords in green_objects:\n        # Calculate the size of the object\n        obj_size = len(obj_coords)\n\n        # Determine the output color based on size parity\n        if obj_size % 2 == 0:\n            output_color = even_color # Magenta for even size\n        else:\n            output_color = odd_color  # Gray for odd size\n\n        # Update the output grid by changing the color of all pixels in the current object\n        for r, c in obj_coords:\n            output_grid[r, c] = output_color\n\n    # Return the modified grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2353,
    "candidates_token_count": 951,
    "total_token_count": 3304,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 22.056823,
  "retries": 1
}