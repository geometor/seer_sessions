elements:
  - element: grid
    description: A 1-dimensional array (single row) of pixels.
    properties:
      - width: The number of pixels in the row (consistently 29 in examples).
      - height: 1
  - element: pixel
    properties:
      - color: Integer value (0, 1, 2, 3, 4, 5, 6, 7, 8, 9). In this task, input uses 0 (white), 3 (green); output uses 0 (white), 1 (blue), 5 (gray).
      - position: Index within the 1D grid row.
  - element: object
    description: A contiguous horizontal sequence of green (3) pixels in the input grid.
    identifier: A maximal sequence of adjacent pixels where each pixel's color is 3.
    properties:
      - length: The number of pixels in the sequence.
      - parity: Derived property, whether the length is 'odd' or 'even'.
      - pixels: The set of pixels (identified by their positions) constituting the object.
      - start_index: The position of the first pixel in the sequence.
      - end_index: The position of the last pixel in the sequence.
actions:
  - action: copy_grid
    description: Create an output grid initially identical to the input grid.
  - action: identify_green_blocks
    description: Scan the input grid row to find all contiguous sequences (blocks) of green (3) pixels. Record their start index, end index, and length. This action should read from the *original* input grid.
  - action: determine_block_parity
    description: For each identified green block, determine if its length is even or odd.
  - action: recolor_block
    description: Modify the pixels in the output grid corresponding to the positions of an identified green block from the input grid. The new color is determined by the block's length parity.
    conditions:
      - if: block length parity is even
        then: change color of corresponding output pixels to blue (1).
      - if: block length parity is odd
        then: change color of corresponding output pixels to gray (5).
relationships:
  - relationship: pixel_mapping
    description: Each pixel in the output grid corresponds to the pixel at the same position in the input grid, potentially with a changed color.
    rules:
      - if: input pixel is white (0)
        then: output pixel is white (0).
      - if: input pixel is green (3)
        then: output pixel color depends on the properties (length parity) of the contiguous green block it belongs to in the input grid.