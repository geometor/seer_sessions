InputDescription:
  type: 1D array (or 1xN grid)
  elements: integers 0-9 representing colors
  structure: contains a background color (0) and sequences of one other color (C)

OutputDescription:
  type: 1D array (or 1xN grid)
  elements: integers 0-9 representing colors
  structure: modified version of the input array

Objects:
  - name: background_pixel
    properties:
      color: 0 (white)
  - name: foreground_pixel
    properties:
      color: C (non-zero)
      is_isolated: boolean (true if neighbours are background_pixel)
  - name: foreground_block
    properties:
      color: C (non-zero)
      length: integer >= 1

Relationships:
  - type: adjacency
    description: Pixels are adjacent horizontally in the 1D array.
  - type: pattern
    description: A specific sequence of three adjacent pixels `(pixel[i-1], pixel[i], pixel[i+1])`.

Actions:
  - name: identify_pattern
    input: input array
    output: list of indices `i` where the pattern `(0, C, 0)` occurs (C != 0).
  - name: expand_pixel
    input: index `i` identified by identify_pattern
    output: modifies the array segment around `i` from `(0, C, 0)` to `(C, C, C)`.
  - name: copy_pixel
    input: pixel value and index
    output: places the pixel value at the same index in the output array if no expansion applies.

TransformationRule:
  - Iterate through the input array from the second element to the second-to-last element.
  - For each element at index `i`:
    - Check if its value `C` is non-zero (foreground_pixel).
    - Check if the element at `i-1` is zero (background_pixel).
    - Check if the element at `i+1` is zero (background_pixel).
    - If all conditions are true, this pixel is part of the pattern `0 C 0`. Mark indices `i-1`, `i`, and `i+1` to be changed to color `C` in the output.
  - Construct the output array by copying the input array initially.
  - Apply the marked changes to the output array. Pixels not marked for change retain their original input value.