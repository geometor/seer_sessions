{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\ndef find_non_white_blocks(grid_row):\n    \"\"\"\n    Identifies contiguous blocks of non-white pixels in a 1D grid row.\n\n    Args:\n        grid_row: A 1D numpy array representing the row.\n\n    Returns:\n        A list of tuples, where each tuple represents a block:\n        (color, start_index, end_index, size)\n    \"\"\"\n    blocks = []\n    width = len(grid_row)\n    col = 0\n    while col < width:\n        color = grid_row[col]\n        if color == 0:  # Background pixel\n            col += 1\n            continue\n\n        # Found the start of a non-white block\n        start_col = col\n        block_color = color\n        # Find the end of the block\n        while col < width and grid_row[col] == block_color:\n            col += 1\n        end_col = col - 1  # Inclusive end index\n        block_size = end_col - start_col + 1\n        blocks.append((block_color, start_col, end_col, block_size))\n        # 'col' is already advanced past the current block\n    return blocks\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on the size of contiguous non-white blocks.\n    Single-pixel blocks are expanded to three pixels (center, left, right).\n    Multi-pixel blocks are copied unchanged.\n\n    Args:\n        input_grid: A numpy array representing the input grid (expected to be 1 row).\n\n    Returns:\n        A numpy array representing the transformed output grid.\n    \"\"\"\n    # Ensure input is a 2D numpy array\n    input_grid = np.array(input_grid)\n    \n    # Get dimensions\n    height, width = input_grid.shape\n    \n    # Initialize output grid with background color (white, 0)\n    output_grid = np.zeros_like(input_grid)\n\n    # Process the single row (assuming height is always 1 for this task based on examples)\n    if height == 1:\n        input_row = input_grid[0]\n        output_row = output_grid[0]\n        \n        # Find all non-white blocks in the input row\n        blocks = find_non_white_blocks(input_row)\n\n        # Process each block based on its size\n        for color, start_idx, end_idx, size in blocks:\n            if size == 1:\n                # Expand single-pixel block to size 3\n                center_idx = start_idx\n                output_row[center_idx] = color  # Set center pixel\n                if center_idx > 0:\n                    output_row[center_idx - 1] = color  # Set left pixel if within bounds\n                if center_idx < width - 1:\n                    output_row[center_idx + 1] = color  # Set right pixel if within bounds\n            elif size > 1:\n                # Copy multi-pixel block directly\n                output_row[start_idx : end_idx + 1] = input_row[start_idx : end_idx + 1]\n                \n    # If the input grid had more than one row (unexpected based on examples),\n    # the output would just be zeros. The logic currently only handles the first row.\n    # For a robust solution handling multiple rows, the logic would need adjustment,\n    # potentially processing each row independently if the rule applies row-wise.\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2246,
    "candidates_token_count": 818,
    "total_token_count": 3064,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.482022,
  "retries": 1
}