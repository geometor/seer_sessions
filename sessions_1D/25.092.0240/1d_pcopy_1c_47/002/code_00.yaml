task_elements:
  - grid_type: 1D array (row vector)
  - colors:
      - white (0): background
      - primary_color (non-zero): varies per example (8, 9, 7)
  - objects:
      - type: contiguous_block
        color: primary_color
        location: input grid
        properties:
          - start_index: integer
          - length: variable integer >= 1
      - type: generated_block
        color: primary_color
        location: output grid
        properties:
          - length: fixed at 3
          - start_index: integer (derived from corresponding input block)
  - relationships:
      - mapping: Each input `contiguous_block` maps to exactly one output `generated_block`.
      - positional_dependency:
          - The `start_index` of the *first* output `generated_block` is identical to the `start_index` of the *first* input `contiguous_block`.
          - The `start_index` of any *subsequent* output `generated_block` is equal to the `start_index` of the corresponding input `contiguous_block` minus 1.
  - actions:
      - identify: Detect the primary_color in the input grid.
      - locate: Find the start_index of every contiguous_block of the primary_color in the input grid. Store these indices in order.
      - generate: Create an output grid initialized with white (0), matching the input dimensions.
      - place: Iterate through the located start_indices.
          - If it's the first index, place a 3-pixel block of the primary_color in the output grid starting at that same index.
          - If it's a subsequent index `s`, place a 3-pixel block of the primary_color in the output grid starting at index `s-1`. Overwrite existing values if necessary. Handle boundary conditions (ensure index >= 0 and placement does not exceed grid width).