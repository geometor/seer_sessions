{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms a 2D input grid (expected to be 1xN) by identifying isolated foreground pixels horizontally and expanding them. \nSpecifically, it finds horizontal sequences of [background, foreground, background] (where background is 0 and foreground is the unique non-zero color C) in the input grid and replaces them with [foreground, foreground, foreground] ([C, C, C]) in the output grid.\nPixels not part of such an identified pattern retain their original color.\nThe grid dimensions remain unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef find_foreground_color(grid_array):\n    \"\"\"\n    Finds the single non-white (non-zero) color in the grid array.\n    Assumes there is exactly one such color besides white (0).\n    Returns None if only white (0) is present or multiple non-zero colors exist.\n    \"\"\"\n    unique_colors = np.unique(grid_array)\n    foreground_colors = [color for color in unique_colors if color != 0]\n    if len(foreground_colors) == 1:\n        return foreground_colors[0]\n    else:\n        # Handle cases with no foreground or multiple foreground colors if necessary\n        # Based on examples, we expect exactly one.\n        return None\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the described transformation to the input grid.\n\n    Args:\n        input_grid (list of lists): The 2D input grid.\n\n    Returns:\n        list of lists: The transformed 2D grid.\n    \"\"\"\n    # Convert input list of lists to a NumPy array for efficient operations\n    input_array = np.array(input_grid, dtype=int)\n\n    # Check if the input is empty or invalid\n    if input_array.size == 0:\n        return input_grid # Return original empty list\n\n    # Initialize output_grid as a copy of the input array. Modifications will be made to this copy.\n    output_array = input_array.copy()\n\n    # Get the dimensions (rows, columns) of the grid\n    rows, cols = input_array.shape\n\n    # Identify the single foreground color (non-zero)\n    foreground_color = find_foreground_color(input_array)\n\n    # If no single foreground color exists, or grid is too narrow, return the original grid copy\n    if foreground_color is None or cols < 3:\n        return output_array.tolist()\n\n    # Iterate through each row of the input array\n    for r in range(rows):\n        # Iterate through the columns, checking for the horizontal '[0, C, 0]' pattern\n        # The loop range ensures we can safely access indices c-1 and c+1.\n        for c in range(1, cols - 1):\n            # Check if the pattern [0, foreground_color, 0] exists at [r, c-1], [r, c], [r, c+1]\n            # Crucially, check the pattern in the *original* input_array\n            if (input_array[r, c - 1] == 0 and\n                input_array[r, c] == foreground_color and\n                input_array[r, c + 1] == 0):\n\n                # If the pattern is found, modify the corresponding pixels in the *output* array\n                # Set [r, c-1], [r, c], [r, c+1] to the foreground color\n                output_array[r, c - 1] = foreground_color\n                output_array[r, c] = foreground_color\n                output_array[r, c + 1] = foreground_color\n\n    # Convert the modified NumPy array back to a list of lists before returning\n    return output_array.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8172,
    "candidates_token_count": 848,
    "total_token_count": 9020,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.443741,
  "retries": 1
}