Grid:
  dimensionality: 1
  background_color: 0 (white)
  max_size: 32 # Based on examples

Objects:
  - type: Pattern_Block
    definition: A sequence of exactly three identical adjacent non-zero pixels (C C C).
    properties:
      color: C (non-zero integer, varies by example, e.g., 5 or 8)
      length: 3
  - type: Isolated_Pixel
    definition: A single pixel of color C, located at index 'i', such that the pixel at 'i-1' has a color different from C, and the pixel at 'i+1' also has a color different from C. Requires 0 < i < grid_length - 1.
    properties:
      color: C (must match the color of a Pattern_Block in the same grid)
      location: index 'i'

Input_State:
  - Contains at least one Pattern_Block.
  - May contain one or more Isolated_Pixels of the same color C as the Pattern_Block.
  - Isolated_Pixels are typically surrounded by the background color (0).

Actions:
  - Identify: Scan the input grid to find the first Pattern_Block (C C C) and determine its color C. If none found, no action is taken.
  - Find_Targets: Iterate through the input grid (from index 1 to length-2) to locate all indices 'i' that hold an Isolated_Pixel of color C.
  - Prepare_Output: Create a copy of the input grid.
  - Transform: For each identified index 'i' of an Isolated_Pixel in the *input* grid:
      - Modify the *copied* grid: Set the pixel value at index i-1 to C.
      - Modify the *copied* grid: Set the pixel value at index i to C. (It might already be C).
      - Modify the *copied* grid: Set the pixel value at index i+1 to C.
  - Finalize: The modified copied grid becomes the output grid.

Result:
  - The output grid is identical to the input grid, except that every occurrence of the pattern [NonC, C, NonC] in the input grid (where C is the pattern color) is replaced by [C, C, C] in the output grid.