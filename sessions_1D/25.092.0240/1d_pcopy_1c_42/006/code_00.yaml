Grid:
  dimensionality: 1
  background_color: 0 (white) # Assumed, but not strictly required by the logic
  size: Variable length (e.g., 32 in examples)

Objects:
  - type: Trigger_Pattern
    definition: The first sequence of three identical adjacent non-zero pixels (C C C) found in the input grid.
    properties:
      color: C (non-zero)
      length: 3
    purpose: Determines the 'pattern_color' C for the transformation.
  - type: Isolated_Pixel
    definition: A single pixel of color C located at index 'i' in the input grid, where the pixels at index i-1 and i+1 are *not* color C.
    properties:
      color: C (must match the color of the Trigger_Pattern)
      index: i (where 1 <= i < grid_length - 1)
      context: Must have neighbors that are not color C.
    purpose: Identifies locations where the transformation should be applied.

Actions:
  - Step 1: Scan the input grid to find the first Trigger_Pattern (C C C) and identify its color C.
  - Step 2: If no Trigger_Pattern is found, return a copy of the input grid unchanged.
  - Step 3: Create a copy of the input grid (this will become the output grid).
  - Step 4: Iterate through the *input* grid from index 1 to length-2.
  - Step 5: At each index `i`, check if the pixel matches the criteria for an Isolated_Pixel (color is C, neighbors at i-1 and i+1 are not C).
  - Step 6: If an Isolated_Pixel is found at index `i` in the input grid, modify the *output* grid by setting the pixels at indices `i-1`, `i`, and `i+1` to color C.
  - Step 7: After checking all relevant indices, return the modified output grid.

Result:
  - The output grid mirrors the input grid, except that every occurrence of an Isolated_Pixel (and its immediate non-C neighbors) in the input is replaced by a C C C sequence in the output. Original Trigger_Patterns remain unmodified unless they happen to be adjacent to an Isolated_Pixel that gets expanded.