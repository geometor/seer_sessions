{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid (expected as a 1xN 2D list) based on a pattern replacement rule.\n1. Validates the input: Checks if the grid is [[row]], the row length is >= 4, \n   and the pattern [0, C, C, C] (where C != 0) exists at indices 0-3.\n2. If validation fails, returns an unmodified deep copy of the input.\n3. If valid, identifies the active_color C from index 1.\n4. Creates a mutable copy of the input row (output_row).\n5. Finds all \"target\" indices 'i' in the input row where i > 3 and the \n   sequence [0, C, 0] exists at indices [i-1, i, i+1].\n6. For each target index 'i', modifies the output_row by setting indices \n   i-1, i, and i+1 to the active_color C.\n7. Returns the modified output_row wrapped in a list: [output_row].\n\"\"\"\n\nimport copy\n\ndef transform(input_grid):\n    \"\"\"\n    Applies a pattern replacement transformation to a 1xN grid.\n    \"\"\"\n    # --- Step 1: Validate Input Structure ---\n    if not isinstance(input_grid, list) or len(input_grid) != 1 or not isinstance(input_grid[0], list):\n        # Return unchanged copy if structure is not List[List[int]] with one inner list\n        return copy.deepcopy(input_grid) \n\n    input_row = input_grid[0]\n    grid_width = len(input_row)\n    background_color = 0\n\n    # --- Step 2: Validate Input Pattern and Length ---\n    active_color = -1 # Default invalid color\n    is_valid_template = False\n    if grid_width >= 4 and \\\n       input_row[0] == background_color and \\\n       input_row[1] != background_color and \\\n       input_row[1] == input_row[2] == input_row[3]:\n        active_color = input_row[1]\n        is_valid_template = True\n\n    # --- Step 3: Handle Invalid Input ---\n    if not is_valid_template:\n        # Return unchanged copy if template pattern [0, C, C, C] is not found\n        return copy.deepcopy(input_grid) \n\n    # --- Step 4: Identify Active Color (already done in Step 2) ---\n    # active_color = input_row[1] \n\n    # --- Step 5: Create Output Copy ---\n    # Create a mutable copy of the input row. list() creates a shallow copy, sufficient here.\n    output_row = list(input_row) \n\n    # --- Step 6: Find Targets ---\n    # Iterate through the input row to find target signatures [0, C, 0] after the initial template\n    # Loop from index 1 up to width - 2 to allow checking neighbors i-1 and i+1 safely\n    for i in range(1, grid_width - 1):\n        # Check target conditions:\n        # a. Index must be after the initial template marker (i > 3)\n        # b. Center pixel must match the active_color\n        # c. Left neighbor must be background_color\n        # d. Right neighbor must be background_color\n        is_after_template = (i > 3)\n        is_target_color = (input_row[i] == active_color)\n        has_background_neighbors = (input_row[i-1] == background_color and \n                                    input_row[i+1] == background_color)\n\n        # --- Step 7: Apply Replacement ---\n        if is_after_template and is_target_color and has_background_neighbors:\n            # Modify the output_row: Replace [0, C, 0] segment with [C, C, C]\n            # Bounds are implicitly checked by the loop range (1 to width-2)\n            output_row[i-1] = active_color\n            output_row[i]   = active_color\n            output_row[i+1] = active_color\n\n    # --- Step 8 & 9: Format and Return Output ---\n    # Wrap the final output_row in a list to conform to the standard 2D grid format\n    output_grid = [output_row]\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8207,
    "candidates_token_count": 1024,
    "total_token_count": 9231,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.71574,
  "retries": 1
}