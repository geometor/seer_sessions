task_type: pattern_replacement
grid_dimensionality: Assumed 1D (single row) based on examples, standard ARC format requires 2D (1xN) list of lists for input/output.
grid_size:
  - width: 32 (consistent across examples)
  - height: 1

elements:
  - element: background
    color: white (0)
    role: fills most of the grid, surrounds target pixels

  - element: template_pattern
    description: A sequence of three identical non-white pixels (C C C) preceded by a background pixel (0 C C C).
    properties:
      - location: fixed, occupies indices 1, 2, 3 (relative to the start of the row).
      - size: 3 pixels wide (excluding the preceding background pixel).
      - color: consistent non-white color (C) within the pattern (e.g., all azure '8' or all magenta '6').
      - count: 1 per input grid.
    role: defines the pattern (C C C) to be copied.

  - element: target_pixel
    description: Isolated single pixels matching the color of the template_pattern.
    properties:
      - location: variable, occurs at index `i` > 3.
      - size: 1 pixel.
      - color: must match template_pattern color (C).
      - context: must be surrounded by background pixels (0) horizontally (input[i-1]==0 and input[i+1]==0).
      - count: one or more per input grid.
    role: marks center locations for pattern insertion.

actions:
  - action: identify_template
    input: input_row (1D list)
    output: template_color (C)
    condition: Check indices 1, 2, 3. If input[1]==input[2]==input[3] != 0 and input[0]==0, then C = input[1].

  - action: identify_targets
    input: input_row (1D list)
    template_color: C (from previous step)
    background_color: 0
    output: list of target_pixel indices `i`.
    condition: Scan `i` from index 1 up to `width - 2`. A target exists at `i` if `input_row[i] == C`, `input_row[i-1] == background_color`, `input_row[i+1] == background_color`, and `i` is not part of the original template location (i.e., `i > 3`).

  - action: copy_paste_pattern
    source_pattern: C C C (derived from template_color C)
    destination_row: output_row (initially a copy of input_row)
    targets: identified target_pixel indices `i`.
    process: For each target index `i`, overwrite the `output_row` at indices `[i-1, i, i+1]` with the template color `C`.
    centering: The middle pixel of the pasted pattern (C C C) aligns with the original target_pixel location `i`.

input_output_format:
  - input: Expected by function as a 2D list `[[...]]` containing one inner list (the row).
  - output: Must be returned as a 2D list `[[...]]` containing the transformed row.

relationships:
  - relationship: color_match
    between: [template_pattern, target_pixel]
    details: The color (C) of the target_pixels must be the same as the color of the pixels in the template_pattern.
  - relationship: positional
    between: [template_pattern, target_pixel]
    details: Target pixels always appear later (index > 3) in the row than the template pattern.
  - relationship: isolation
    element: target_pixel
    details: Target pixels are horizontally adjacent only to background (0) pixels in the input.

output_construction:
  - step: Assume the input is `input_grid = [[...]]`. Extract the first row `input_row = input_grid[0]`.
  - step: Create a copy of the `input_row` called `output_row`.
  - step: Check if the grid is wide enough (`len(input_row) >= 4`) and if the template `0 C C C` exists at indices 0-3. If yes, identify the `template_color = C = input_row[1]`. If not, return the original `input_grid`.
  - step: Define `background_color = 0`.
  - step: Iterate through indices `i` from 1 to `len(input_row) - 2`.
  - step: Inside the loop, check if the pixel at `i` is a target: `input_row[i] == C` AND `input_row[i-1] == background_color` AND `input_row[i+1] == background_color` AND `i > 3`.
  - step: If a target is found at index `i`, modify the `output_row`: set `output_row[i-1]=C`, `output_row[i]=C`, `output_row[i+1]=C`.
  - step: After checking all possible indices, wrap the `output_row` in a list: `output_grid = [output_row]`.
  - step: Return the `output_grid`.