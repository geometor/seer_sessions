{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid (expected as a 1xN 2D list) based on a pattern replacement rule.\n1. Validates the input: Checks if the grid is a list containing exactly one inner list (representing the row), \n   if the row length is at least 4, and if the pattern [0, C, C, C] (where C is a non-zero color) exists \n   at indices 0-3.\n2. If validation fails, returns an unmodified deep copy of the input grid.\n3. If validation succeeds, identifies the 'active_color' C from index 1 of the row.\n4. Creates a mutable copy of the input row (output_row).\n5. Iterates through the input row indices 'i' from 1 up to 'width - 2'.\n6. Finds all \"target\" indices 'i' that satisfy all of the following:\n   a) i > 3 (the index is beyond the initial template pattern)\n   b) The pixel at input_row[i] matches the active_color C.\n   c) The pixel at input_row[i-1] is the background color (0).\n   d) The pixel at input_row[i+1] is the background color (0).\n7. For each target index 'i' found, modifies the output_row by setting the pixels at indices \n   i-1, i, and i+1 to the active_color C.\n8. Returns the final modified output_row, wrapped in a list to conform to the \n   standard ARC grid format: [output_row].\n\"\"\"\n\nimport copy\n\ndef transform(input_grid):\n    \"\"\"\n    Applies a pattern replacement transformation to a 1xN grid.\n    \"\"\"\n    # --- Step 1: Validate Input Structure ---\n    # Check if input is a list containing exactly one list (the row)\n    if not isinstance(input_grid, list) or len(input_grid) != 1 or not isinstance(input_grid[0], list):\n        # Return unchanged copy if structure is not List[List[int]] with one inner list\n        # Use deepcopy to ensure the returned object is independent of the input\n        return copy.deepcopy(input_grid) \n\n    # Extract the row and get its width\n    input_row = input_grid[0]\n    grid_width = len(input_row)\n    background_color = 0\n\n    # --- Step 2: Validate Input Pattern and Length ---\n    active_color = -1 # Initialize with an invalid color\n    is_valid_template = False\n    # Check if long enough and if the pattern [0, C, C, C] exists at the start (C != 0)\n    if grid_width >= 4 and \\\n       input_row[0] == background_color and \\\n       input_row[1] != background_color and \\\n       input_row[1] == input_row[2] == input_row[3]:\n        # --- Step 3: Active Color Extraction ---\n        active_color = input_row[1] # Store the active color C\n        is_valid_template = True\n\n    # --- Step 4: Handle Invalid Input ---\n    if not is_valid_template:\n        # Return unchanged copy if the required template pattern is not found\n        return copy.deepcopy(input_grid) \n\n    # --- Step 5: Initialization ---\n    # Create a mutable copy of the input row to modify. list() creates a shallow copy, which is sufficient for a list of integers.\n    output_row = list(input_row) \n\n    # --- Step 6 & 7: Find Targets and Apply Replacement ---\n    # Iterate through the input row indices, allowing safe access to neighbors i-1 and i+1\n    for i in range(1, grid_width - 1):\n        # Check target conditions:\n        # a. Index must be after the initial template marker (i > 3)\n        is_after_template = (i > 3)\n        # b. Center pixel must match the active_color\n        is_target_color = (input_row[i] == active_color)\n        # c. Left neighbor must be background_color\n        # d. Right neighbor must be background_color\n        has_background_neighbors = (input_row[i-1] == background_color and \n                                    input_row[i+1] == background_color)\n\n        # If all target conditions are met for index i:\n        if is_after_template and is_target_color and has_background_neighbors:\n            # --- Step 8: Replacement ---\n            # Modify the output_row: Replace the [0, C, 0] segment found in input\n            # with [C, C, C] in the output. Bounds are guaranteed by the loop range.\n            output_row[i-1] = active_color\n            output_row[i]   = active_color\n            output_row[i+1] = active_color\n\n    # --- Step 9: Output Formatting ---\n    # Wrap the final output_row in a list to match the expected 2D grid format\n    output_grid = [output_row]\n    \n    # --- Step 10: Return Result ---\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 11068,
    "candidates_token_count": 1200,
    "total_token_count": 12268,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.747069,
  "retries": 1
}