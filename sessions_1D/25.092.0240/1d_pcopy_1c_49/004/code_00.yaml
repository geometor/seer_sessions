task_type: pattern_replacement
grid_dimensionality: 2D (specifically 1xN)

elements:
  - element: background
    color: white (0)
    role: Default fill color, used for isolating target pixels.

  - element: template_marker
    description: A specific 4-pixel sequence at the very beginning of the input row.
    properties:
      - location: fixed, indices [0, 1, 2, 3]
      - structure: [background_color(0), color_C, color_C, color_C] where color_C is non-background (not 0).
      - color: The non-background color (color_C) determines the active color for the task.
      - count: Exactly 1 per valid input grid.
    role: Defines the active color (C) and implies the replacement pattern ([C, C, C]).

  - element: target_signature
    description: A specific 3-pixel sequence occurring after the template_marker.
    properties:
      - location: variable, centered at index `i` where `i` must be > 3.
      - structure: [background_color(0), color_C, background_color(0)]
      - color: Must use the same color_C identified from the template_marker.
      - count: Zero or more per input grid.
    role: Identifies locations where the replacement should occur.

actions:
  - action: validate_input_and_identify_color
    input: input_grid (expected: [[row]])
    output: active_color (color_C) or failure indication.
    preconditions:
      - input_grid is a list containing exactly one list (the row).
      - The row has length >= 4.
      - row[0] is 0.
      - row[1] is not 0.
      - row[1], row[2], row[3] are identical.
    process: If preconditions met, return row[1] as color_C. Otherwise, indicate failure.

  - action: find_targets
    input: input_row, active_color (color_C)
    output: list of target center indices `i`.
    condition: Iterate `i` from index 1 to length-2. Target found if `i > 3` AND `input_row[i] == color_C` AND `input_row[i-1] == 0` AND `input_row[i+1] == 0`.

  - action: apply_replacement
    input: output_row (copy of input_row), target_indices, active_color (color_C)
    output: modified output_row
    process: For each target index `i` found, set `output_row[i-1]`, `output_row[i]`, and `output_row[i+1]` to color_C.

relationships:
  - relationship: color_dependency
    between: [template_marker, target_signature]
    details: The non-background color C identified in the template_marker must match the central color in any valid target_signature.
  - relationship: positional_separation
    between: [template_marker, target_signature]
    details: Target signatures must appear strictly after the template_marker (center index i > 3).

output_construction:
  - step: Validate the input grid structure ([[row]]) and the presence/structure of the template_marker [0, C, C, C] at indices 0-3 (where C != 0).
  - step: If validation fails, return an unmodified deep copy of the input_grid.
  - step: If validation passes, identify the active_color C from the template_marker.
  - step: Create a mutable copy of the input row, called output_row.
  - step: Find all target indices `i` such that `i > 3` and the sequence `[0, C, 0]` exists at indices `[i-1, i, i+1]` in the input row.
  - step: For each identified target index `i`, modify the output_row by setting the values at indices `i-1`, `i`, and `i+1` to C.
  - step: Package the final output_row into a list: `output_grid = [output_row]`.
  - step: Return the output_grid.