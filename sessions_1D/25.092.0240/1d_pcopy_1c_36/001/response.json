{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport collections\n\n\"\"\"\nTransforms an 11x3 grid based on the following rules:\n1. Identify the primary non-white color (foreground_color) in the input grid.\n2. Find the index (header_row_index) of the first row (scanning top-to-bottom) that contains more than one pixel of the foreground_color. If no such row exists, the output is identical to the input.\n3. Initialize the output grid as a copy of the input grid.\n4. Iterate through the rows below the header_row_index (i.e., from header_row_index + 1 to the last row).\n5. For each row in this range, if it contains exactly one pixel of the foreground_color, change all three pixels in that row of the output grid to the foreground_color.\n6. Rows at or above header_row_index, and rows below it that do not contain exactly one foreground_color pixel, remain unchanged.\n7. Return the modified grid.\n\"\"\"\n\ndef find_foreground_color(grid):\n  \"\"\"Finds the most frequent non-background (non-zero) color.\"\"\"\n  counts = collections.Counter(pixel for row in grid for pixel in row if pixel != 0)\n  if not counts:\n      return None # No foreground color found\n  # Assuming the most frequent non-zero color is the target foreground color\n  return counts.most_common(1)[0][0]\n\n\ndef find_header_row_index(grid, foreground_color):\n    \"\"\"Finds the index of the first row containing more than one foreground_color pixel.\"\"\"\n    for r_idx, row in enumerate(grid):\n        count = np.count_nonzero(row == foreground_color)\n        if count > 1:\n            return r_idx\n    return -1 # Indicate no header row found\n\n\ndef transform(input_grid_flat):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid_flat: A flattened list representing the input grid.\n\n    Returns:\n        A flattened list representing the transformed output grid.\n    \"\"\"\n    # --- Grid Setup ---\n    # Determine grid dimensions (assuming 11x3 based on examples)\n    height = 11\n    width = 3\n    input_grid = np.array(input_grid_flat).reshape((height, width))\n    output_grid = np.copy(input_grid)\n\n    # --- Identify Key Elements ---\n    # Find the main non-white color\n    foreground_color = find_foreground_color(input_grid)\n    if foreground_color is None:\n        # If no foreground color, return the input as is\n        return output_grid.flatten().tolist()\n\n    # Find the row index of the 'header' (first row with >1 foreground pixel)\n    header_row_index = find_header_row_index(input_grid, foreground_color)\n\n    # If no header row is found, the grid remains unchanged.\n    if header_row_index == -1:\n        return output_grid.flatten().tolist()\n\n    # --- Apply Transformation Logic ---\n    # Iterate through rows *below* the header row\n    for r_idx in range(header_row_index + 1, height):\n        row = input_grid[r_idx]\n        # Count foreground pixels in the current row\n        foreground_count = np.count_nonzero(row == foreground_color)\n\n        # If exactly one foreground pixel is found in this row\n        if foreground_count == 1:\n            # Fill the entire corresponding row in the output grid with the foreground color\n            output_grid[r_idx, :] = foreground_color\n\n    # --- Return Result ---\n    # Flatten the output grid back to a list\n    return output_grid.flatten().tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2550,
    "candidates_token_count": 864,
    "total_token_count": 3414,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.873745,
  "retries": 1
}