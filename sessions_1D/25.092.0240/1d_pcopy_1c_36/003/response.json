{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport collections\n\n\"\"\"\nTransforms an 11x3 grid by identifying a 'header' row and modifying subsequent rows.\n\n1.  Determine the grid dimensions (assumed 11x3).\n2.  Identify the single non-white color used in the input grid (the `foreground_color`). If only white (0) is present, the output is identical to the input.\n3.  Scan the input grid from top to bottom to find the index (`header_row_index`) of the first row containing more than one pixel of the `foreground_color`.\n4.  If no such header row is found, the output grid is identical to the input grid.\n5.  If a header row is found:\n    *   Create the output grid, initially as a copy of the input grid.\n    *   Iterate through each row of the input grid starting from the row *after* the header row (index `header_row_index + 1`) down to the last row.\n    *   For each row in this range, count the number of pixels matching the `foreground_color`.\n    *   If the count is exactly 1, replace the *entire corresponding row* in the output grid with the `foreground_color`.\n    *   Rows at or above the `header_row_index`, and rows below it where the count of `foreground_color` pixels is *not* exactly 1, remain unchanged from the input grid copy.\n6.  Return the final output grid, flattened into a list.\n\"\"\"\n\ndef _get_grid_properties(grid):\n    \"\"\"Finds the most frequent non-background (non-zero) color.\"\"\"\n    counts = collections.Counter(pixel for row in grid for pixel in row if pixel != 0)\n    if not counts:\n        return None # No foreground color found\n    # Assuming the most frequent non-zero color is the target foreground color\n    return counts.most_common(1)[0][0]\n\ndef _find_header_row_index(grid, foreground_color):\n    \"\"\"Finds the index of the first row containing more than one foreground_color pixel.\"\"\"\n    height, _ = grid.shape\n    for r_idx in range(height):\n        row = grid[r_idx]\n        count = np.count_nonzero(row == foreground_color)\n        if count > 1:\n            return r_idx\n    return -1 # Indicate no header row found\n\ndef transform(input_grid_flat):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid_flat: A flattened list representing the input grid.\n\n    Returns:\n        A flattened list representing the transformed output grid.\n    \"\"\"\n    # --- Grid Setup ---\n    # Determine grid dimensions (assuming 11x3 based on examples)\n    # A more robust solution might infer this, but for this specific task 11x3 is consistent.\n    height = 11\n    width = 3\n    if len(input_grid_flat) != height * width:\n         # Basic check if the input size is unexpected, might need better handling\n         # For now, try to reshape anyway or raise an error. Let's reshape.\n         # This assumes the total number of elements is correct for *some* grid.\n         # A safer approach would be error handling or dimension inference if variable sizes were expected.\n         # For ARC, dimensions are fixed per task, so 11x3 is a safe assumption here.\n         pass # Proceeding with assumed 11x3\n\n    input_grid = np.array(input_grid_flat).reshape((height, width))\n    # Initialize output grid as a copy of the input\n    output_grid = np.copy(input_grid)\n\n    # --- Identify Key Elements ---\n    # Find the main non-white color\n    foreground_color = _get_grid_properties(input_grid)\n\n    # If no foreground color exists (all white grid), return the input as is\n    if foreground_color is None:\n        return output_grid.flatten().tolist()\n\n    # Find the row index of the 'header' (first row with >1 foreground pixel)\n    header_row_index = _find_header_row_index(input_grid, foreground_color)\n\n    # If no header row is found, the grid remains unchanged.\n    if header_row_index == -1:\n        return output_grid.flatten().tolist()\n\n    # --- Apply Transformation Logic ---\n    # Iterate through rows *below* the header row\n    for r_idx in range(header_row_index + 1, height):\n        row = input_grid[r_idx]\n        # Count foreground pixels in the current input row\n        foreground_count = np.count_nonzero(row == foreground_color)\n\n        # Check the condition: row is below the header AND has exactly one foreground pixel\n        if foreground_count == 1:\n            # Modify the corresponding row in the output grid: fill it with the foreground color\n            output_grid[r_idx, :] = foreground_color\n        # else: the row remains as copied from the input (no change needed)\n\n    # --- Return Result ---\n    # Flatten the output grid back to a list\n    return output_grid.flatten().tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8102,
    "candidates_token_count": 1189,
    "total_token_count": 9291,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.055049,
  "retries": 1
}