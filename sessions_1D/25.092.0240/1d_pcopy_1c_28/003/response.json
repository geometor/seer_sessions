{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport copy\n\n\"\"\"\nTransforms a 2D grid based on the following rule:\n1. Identify the single non-white (non-zero) color present in the input grid ('active_color'). If none exists, return the input grid unchanged.\n2. Create a copy of the input grid to serve as the output grid.\n3. Iterate through each pixel of the *input* grid.\n4. If a pixel contains the 'active_color':\n    a. Check its immediate horizontal neighbor to the left. If this neighbor exists (is within grid bounds) and is white (0) in the *input* grid, mark this neighbor's coordinates for coloring.\n    b. Check its immediate horizontal neighbor to the right. If this neighbor exists (is within grid bounds) and is white (0) in the *input* grid, mark this neighbor's coordinates for coloring.\n5. After checking all active pixels, change the color of all marked white neighbors in the *output* grid to the 'active_color'.\n6. Return the modified output grid.\n\"\"\"\n\ndef find_active_color(grid):\n    \"\"\"\n    Finds the unique non-zero color in the grid.\n    Returns the color value or 0 if none is found or multiple are found (though examples suggest only one).\n    \"\"\"\n    unique_colors = np.unique(grid)\n    active_color = 0\n    non_zero_count = 0\n    for color in unique_colors:\n        if color != 0:\n            active_color = color\n            non_zero_count += 1\n\n    # Based on examples, we expect exactly one active color.\n    # If there's none or more than one, the rule might not apply as expected.\n    # Returning 0 handles the 'all white' case gracefully.\n    if non_zero_count != 1:\n         # Check if grid is all zeros\n        if np.all(grid == 0):\n            return 0 # No active color\n        else:\n            # If there are non-zero colors but not exactly one,\n            # return the first one found based on example structure,\n            # but acknowledge this might be an edge case.\n            for color in unique_colors:\n                 if color != 0:\n                     return color # Return first non-zero found\n            return 0 # Should not happen if unique_colors had non-zeros\n\n    return active_color\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid: A 2D numpy array representing the input grid.\n\n    Returns:\n        A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    # Find the active color\n    active_color = find_active_color(input_grid)\n\n    # If no active color (grid is all white or assumption violated), return copy\n    if active_color == 0:\n        return copy.deepcopy(input_grid)\n\n    # Get grid dimensions\n    rows, cols = input_grid.shape\n\n    # Initialize output_grid as a copy of the input\n    output_grid = copy.deepcopy(input_grid)\n\n    # Use a set to store coordinates of white neighbors to color (avoids duplicates)\n    pixels_to_color = set()\n\n    # Iterate through the input grid to find active pixels and identify neighbors\n    for r in range(rows):\n        for c in range(cols):\n            # Check if the current pixel has the active color\n            if input_grid[r, c] == active_color:\n                # Check left neighbor\n                if c > 0 and input_grid[r, c - 1] == 0:\n                    pixels_to_color.add((r, c - 1))\n\n                # Check right neighbor\n                if c < cols - 1 and input_grid[r, c + 1] == 0:\n                    pixels_to_color.add((r, c + 1))\n\n    # Apply the color changes to the output grid\n    for r_change, c_change in pixels_to_color:\n        output_grid[r_change, c_change] = active_color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 9423,
    "candidates_token_count": 958,
    "total_token_count": 10381,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.686216,
  "retries": 1
}