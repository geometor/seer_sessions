task_description: Resizes all contiguous horizontal blocks of a specific non-white color to match the length of the longest block of that same color found in the input sequence.
data_format:
  type: 1D sequence (or single row grid)
  cell_values: Integers 0-9 representing colors.
objects:
  - object: color_block
    description: A contiguous horizontal sequence of one or more identical non-white pixels.
    properties:
      - color: The color of the pixels in the block (e.g., Maroon, Gray, Orange).
      - start_index: The starting position (index) of the block in the sequence.
      - end_index: The ending position (index) of the block in the sequence.
      - length: The number of pixels in the block (end_index - start_index + 1).
relationships:
  - relationship: intra_color_comparison
    description: All blocks of the same non-white color are compared based on their length.
    operands:
      - color_block (same non-white color)
    purpose: To find the maximum length among them.
actions:
  - action: find_dominant_color
    description: Identify the single non-white color present in the input sequence.
    output: target_color
  - action: find_blocks
    description: Locate all contiguous blocks of the target_color in the input sequence.
    input: input_sequence, target_color
    output: list_of_blocks (each with start_index, end_index, length)
  - action: find_max_length
    description: Determine the maximum length among the identified blocks.
    input: list_of_blocks
    output: max_len
  - action: resize_blocks
    description: >
      Generate the output sequence by creating new blocks corresponding to each original block,
      but with the calculated max_len, centered at the original block's center position.
    input: input_sequence_length, list_of_blocks, target_color, max_len
    output: output_sequence
    details: >
      Initialize an output sequence (same length as input) with white (0).
      For each original block:
      1. Calculate its center index: center = floor((start + end) / 2).
      2. Calculate the new start/end indices based on max_len and center:
         new_start = center - floor((max_len - 1) / 2)
         new_end = center + ceil((max_len - 1) / 2)
      3. Fill the output sequence from new_start to new_end with target_color.