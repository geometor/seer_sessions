{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport copy\n\ndef find_reference_line(grid):\n    \"\"\"\n    Finds the topmost contiguous horizontal segment of non-white pixels.\n\n    Args:\n        grid (np.ndarray): The input grid.\n\n    Returns:\n        tuple: (color, row_index, min_col, max_col) or None if not found.\n    \"\"\"\n    rows, cols = grid.shape\n    for r in range(rows):\n        non_white_indices = np.where(grid[r] != 0)[0]\n        if len(non_white_indices) > 0:\n            # Check for contiguity (simple check: is the range of indices equal to the count?)\n            min_c = np.min(non_white_indices)\n            max_c = np.max(non_white_indices)\n            \n            # Extract the segment and check if all colors are the same and non-white\n            segment = grid[r, min_c : max_c + 1]\n            if np.all(segment != 0):\n                 # More robust contiguity check: ensure no zeros within the min/max bounds\n                if np.all(grid[r, min_c : max_c + 1] != 0):\n                     # Check if all elements in the segment are the same color\n                     if len(np.unique(segment)) == 1:\n                          color = segment[0]\n                          return color, r, min_c, max_c\n\n    return None # No reference line found\n\ndef transform(input_grid_list):\n    \"\"\"\n    Transforms the input grid based on the following rules:\n    1. Find the topmost contiguous horizontal line of a single non-white color (the \"reference line\").\n    2. Identify its color (C), row (R), start column (min_col), and end column (max_col).\n    3. For each row below R (r > R):\n       a. Check if any pixel in that row (in the input grid) has the color C.\n       b. If yes, fill the segment in the output grid from (r, min_col) to (r, max_col) with color C.\n       c. Otherwise, keep the row as it is.\n    4. Rows R and above, and pixels outside the min_col to max_col range in rows below R (if not filled), remain unchanged.\n    \"\"\"\n    input_grid = np.array(input_grid_list)\n    output_grid = copy.deepcopy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Find the reference line\n    reference_info = find_reference_line(input_grid)\n\n    if reference_info is None:\n        # No reference line found, return the original grid\n        return output_grid.tolist()\n\n    color_c, row_r, min_col, max_col = reference_info\n\n    # Iterate through rows below the reference line\n    for r in range(row_r + 1, rows):\n        # Check if any pixel in the current input row 'r' has color C\n        trigger_found = False\n        for c in range(cols):\n            if input_grid[r, c] == color_c:\n                trigger_found = True\n                break # Found one, no need to check further in this row\n\n        # If a trigger pixel was found, fill the corresponding segment in the output grid\n        if trigger_found:\n            for c_fill in range(min_col, max_col + 1):\n                 # Ensure we don't write out of bounds, although min/max_col should be valid\n                 if c_fill < cols:\n                     output_grid[r, c_fill] = color_c\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2646,
    "candidates_token_count": 861,
    "total_token_count": 3507,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.726299,
  "retries": 1
}