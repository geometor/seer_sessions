{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport copy\n\ndef find_first_contiguous_segment(grid):\n    \"\"\"\n    Finds the first contiguous horizontal segment of a single non-white color\n    encountered when scanning the grid top-to-bottom, left-to-right.\n\n    Args:\n        grid (np.ndarray): The input grid.\n\n    Returns:\n        tuple: (color, row_index, min_col, max_col) if found, otherwise None.\n    \"\"\"\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            color_c = grid[r, c]\n            if color_c != 0:  # Found the first non-white pixel\n                # Find the end of the contiguous segment of this color in this row\n                min_c = c\n                max_c = c\n                while max_c + 1 < cols and grid[r, max_c + 1] == color_c:\n                    max_c += 1\n                # Found the first segment, return its properties\n                return color_c, r, min_c, max_c\n    return None # No non-white pixels found\n\n\ndef transform(input_grid_list):\n    \"\"\"\n    Transforms the input grid based on a reference line and trigger pixels.\n    1. Find the first contiguous horizontal segment of a single non-white color\n       (the \"reference line\") by scanning top-down, left-right.\n    2. Identify its color (C), row (R), start column (min_col), and end column (max_col).\n    3. For each row below R (r > R):\n       a. Check if any pixel in that row *in the input grid* has the color C.\n       b. If yes (a \"trigger pixel\" exists), fill the segment in the *output grid*\n          from (r, min_col) to (r, max_col) with color C.\n       c. Otherwise, the row remains unchanged from the input.\n    4. Rows R and above remain unchanged.\n    \"\"\"\n    # Convert list of lists to numpy array for easier manipulation\n    input_grid = np.array(input_grid_list, dtype=int)\n    # Initialize output_grid as a deep copy of the input\n    output_grid = copy.deepcopy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Step 1 & 2: Find the reference line and its properties\n    reference_info = find_first_contiguous_segment(input_grid)\n\n    # If no reference line is found (e.g., all white grid), return the original grid\n    if reference_info is None:\n        return output_grid.tolist()\n\n    color_c, row_r, min_col, max_col = reference_info\n\n    # Step 3: Iterate through rows below the reference line\n    for r in range(row_r + 1, rows):\n        # Step 3a: Check if any pixel in the current *input* row 'r' has color C\n        trigger_found = False\n        # Use numpy's any() for efficient checking within the row\n        if np.any(input_grid[r] == color_c):\n             trigger_found = True\n\n        # Step 3b: If a trigger pixel was found, fill the corresponding segment in the output grid\n        if trigger_found:\n            # Ensure slicing stays within grid bounds (though min/max_col should be valid)\n            fill_start = max(0, min_col)\n            fill_end = min(cols, max_col + 1)\n            output_grid[r, fill_start:fill_end] = color_c\n            # Note: Step 3c (otherwise, do nothing) is implicitly handled by starting with a copy.\n\n    # Return the modified grid as a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8943,
    "candidates_token_count": 889,
    "total_token_count": 9832,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.759308,
  "retries": 1
}