{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransforms the input grid by identifying horizontally isolated, non-white pixels. \nEach identified isolated pixel becomes the center of a horizontal line of three \npixels of the same color in the output grid. The expansion occurs by changing \nthe pixel itself and its immediate left and right neighbors (if within bounds) \nto the color of the isolated pixel. Existing horizontal lines of three identical \nnon-white pixels and background pixels remain unchanged unless overwritten by \nthe expansion of an isolated pixel.\n\n1. Initialize the output grid as a copy of the input grid.\n2. Identify all horizontally isolated non-white pixels in the input grid. \n   A pixel at (r, c) with color C > 0 is isolated if:\n   - Its left neighbor (r, c-1) either doesn't exist (c=0) or has a color different from C.\n   - Its right neighbor (r, c+1) either doesn't exist (c=width-1) or has a color different from C.\n3. Store the coordinates (r, c) and color C of these isolated pixels.\n4. Iterate through the stored list of isolated pixels. For each isolated pixel (r, c) with color C:\n   a. Set the pixel at (r, c) in the output grid to color C.\n   b. If the left neighbor (r, c-1) exists (c > 0), set it to color C in the output grid.\n   c. If the right neighbor (r, c+1) exists (c < width - 1), set it to color C in the output grid.\n5. Return the modified output grid.\n\"\"\"\n\ndef is_horizontally_isolated(grid, r, c):\n    \"\"\"Checks if a non-white pixel at (r, c) is horizontally isolated.\"\"\"\n    height, width = grid.shape\n    pixel_color = grid[r, c]\n\n    if pixel_color == 0:\n        return False # Only check non-white pixels\n\n    # Check left neighbor\n    left_diff = True\n    if c > 0:\n        if grid[r, c - 1] == pixel_color:\n            left_diff = False\n\n    # Check right neighbor\n    right_diff = True\n    if c < width - 1:\n        if grid[r, c + 1] == pixel_color:\n            right_diff = False\n\n    return left_diff and right_diff\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid (np.ndarray): A 2D NumPy array representing the input grid.\n\n    Returns:\n        np.ndarray: A 2D NumPy array representing the transformed output grid.\n    \"\"\"\n    # Get grid dimensions\n    height, width = input_grid.shape\n\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n\n    # Find all isolated pixels in the *input* grid first\n    isolated_pixels = []\n    for r in range(height):\n        for c in range(width):\n            if is_horizontally_isolated(input_grid, r, c):\n                isolated_pixels.append((r, c, input_grid[r, c])) # Store row, col, color\n\n    # Apply the expansion transformation based on the identified isolated pixels\n    for r, c, pixel_color in isolated_pixels:\n        # Set the center pixel (already correct from copy, but explicit is fine)\n        output_grid[r, c] = pixel_color\n\n        # Set the left pixel if within bounds\n        if c > 0:\n            output_grid[r, c - 1] = pixel_color\n\n        # Set the right pixel if within bounds\n        if c < width - 1:\n            output_grid[r, c + 1] = pixel_color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8153,
    "candidates_token_count": 890,
    "total_token_count": 9043,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.510974,
  "retries": 1
}