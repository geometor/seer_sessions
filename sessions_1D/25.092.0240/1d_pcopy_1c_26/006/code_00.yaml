task_context:
  grid_representation: 2D array of integers (colors), likely 11x3.
  colors_present:
    - 0: white (background)
    - non-zero: foreground colors (maroon, azure, gray in examples)

objects:
  - type: pixel
    properties:
      color: integer 0-9
      position: (row, column)
      is_horizontally_isolated: boolean (true if left/right neighbors are white or boundary)
      is_trigger: boolean (true if horizontally isolated AND not in row 0)

actions:
  - type: identify_trigger_pixels
    input: input_grid
    output: list of trigger pixels [(r, c, color), ...]
  - type: determine_target_row
    input: trigger_pixel_row (r), trigger_pixel_column (c)
    output: target_row (r' = r if c<2 else r+1)
  - type: fill_row
    input: output_grid, target_row (r'), color (C)
    output: modified_output_grid (row r' filled with C)

transformation:
  type: conditional_row_fill_with_offset
  steps:
    - copy input grid to output grid.
    - find all non-white pixels P at (r, c) in the input grid where r > 0.
    - check if P is horizontally isolated (left neighbor is white/boundary AND right neighbor is white/boundary).
    - if P at (r, c) with color C is horizontally isolated:
        - calculate target_row r_target = r if c < 2 else r + 1.
        - if r_target is a valid row index for the grid:
            - fill row r_target of the output grid entirely with color C.
    - return the modified output grid.

relationships:
  - pixel_neighbor: horizontal adjacency (left, right) used for isolation check.
  - trigger_pixel_to_target_row: column index of a trigger pixel determines if the target row is the same row or the next row.