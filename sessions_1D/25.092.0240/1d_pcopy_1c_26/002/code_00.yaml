task_context:
  grid_representation: 2D array of integers (colors)
  grid_dimensions: 11x3 (height x width) - confirmed by structure and element count.
  colors_present:
    - 0: white (background)
    - non-zero: foreground colors (maroon, azure, gray in examples)

objects:
  - type: pixel
    properties:
      color: integer 0-9
      position: (row, column)
      is_horizontally_isolated: boolean (true if pixel is non-white and its horizontal neighbors within the row are white, false otherwise)
  - type: row
    properties:
      index: integer (0 to height-1)
      pixels: list of pixels in the row

transformation:
  type: conditional_row_fill_horizontal
  condition: applies to rows containing at least one "horizontally isolated" non-white pixel.
  action:
    - identify all "horizontally isolated" non-white pixels in the input grid. A pixel `input[r][c]` is horizontally isolated if `input[r][c] > 0` and its neighbors `input[r][c-1]` (if `c>0`) and `input[r][c+1]` (if `c<width-1`) are both 0 (white).
    - for each row `R` that contains at least one such horizontally isolated pixel:
        - determine the color `C` of one such pixel in that row (examples suggest only one color exists among such pixels per row).
        - in the output grid, set all pixels in row `R` to color `C`.
  unchanged_elements:
    - rows containing no horizontally isolated non-white pixels remain identical to the input rows.
    - note: other non-white pixels within a modified row are overwritten.

relationships:
  - pixel_neighbor: horizontal adjacency within the same row used to determine horizontal isolation.
  - pixel_to_row: a pixel belongs to a specific row.
  - horizontally_isolated_pixel_triggers_row_fill: a horizontally isolated pixel dictates the color fill for its entire row.