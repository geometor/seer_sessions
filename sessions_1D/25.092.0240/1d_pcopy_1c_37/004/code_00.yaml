task_description: Construct an output row by placing copies of an initial 3-pixel pattern based on locations identified in the input row.
elements:
  - object: grid
    property:
      - type: 1D array (single row)
      - background_color: white (0)
      - primary_color: varies (yellow, maroon, gray) - the single non-white color present.
  - object: initial_pattern_block
    property:
      - composition: sequence of three consecutive pixels of the primary_color.
      - location_rule: the first occurrence of such a sequence in the input row.
      - role: template pattern to be copied to the output.
  - object: target_marker_pixel
    property:
      - color: same as primary_color.
      - context: appears *after* the initial_pattern_block in the input row.
      - condition: must be horizontally isolated (immediate left and right neighbors are not the primary_color).
      - role: indicates a location for placing the pattern_block in the output.
  - object: output_grid
    property:
      - dimensions: same as input grid (1xN).
      - initial_state: all white (0) pixels.
      - final_state: constructed by placing pattern blocks.
actions:
  - name: identify_primary_color
    input: input_grid
    output: the non-white color `C`.
  - name: find_initial_pattern_block
    input: input_grid, primary_color `C`
    output:
      - pattern: the sequence `[C, C, C]`.
      - start_index: the starting index `idx_p` of this sequence in the input.
  - name: find_target_marker_indices
    input: input_grid, primary_color `C`, start_index_after_pattern (`idx_p + 3`)
    output: list of indices `T = [t1, t2, ...]` where single, isolated pixels of color `C` are found.
  - name: construct_output_grid
    based_on: input_grid_dimensions, initial_pattern_block, start_index `idx_p`, target_marker_indices `T`.
    steps:
      - Initialize output grid (1xN) with white (0).
      - Place the initial_pattern_block into the output grid starting at `idx_p`.
      - For each target marker index `t` in `T`:
        - Calculate the placement start index for the output: `output_idx = t - 1`.
        - Place a copy of the initial_pattern_block into the output grid starting at `output_idx`. (Handle boundary conditions if `output_idx` is less than 0 or placement exceeds grid length, though examples suggest this won't happen).
relationships:
  - type: spatial_mapping
    description: A target_marker_pixel at index `t` in the input row corresponds to the *center* pixel of a pattern_block placed in the output row. The output pattern block starts at index `t-1`.
  - type: origin
    description: The first instance of the pattern_block in the input dictates the pattern to be used for all subsequent placements. Its position is preserved directly in the output.
  - type: construction
    description: The output grid is built constructively by placing pattern blocks onto a blank canvas, not by modifying the input grid directly.