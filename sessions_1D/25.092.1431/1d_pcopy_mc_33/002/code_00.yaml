grid_properties:
  dimensionality: 2D
  input_dimensions: 1xN (single row, variable width N)
  output_dimensions: 1xN (same as input)
  input_output_size_relation: Identical dimensions.

pixel_colors:
  - background: 0 (white)
  - object_colors: 1-9 (non-white colors used in patterns)

objects:
  - object_name: isolated_pixel
    description: A single pixel of a non-white color C.
    pattern_context: Appears horizontally flanked by white pixels (0 C 0).
  - object_name: solid_triplet
    description: Three adjacent pixels of the same non-white color C (C C C).

transformations:
  - transformation_name: expand_isolated_pixel
    input_pattern: A triplet `(P1, P2, P3)` in the input grid's row where `P1=0`, `P2=C` (non-white), `P3=0`. Occurs at indices `(i-1, i, i+1)`.
    output_pattern: Replaces the corresponding triplet in the output grid's row with `(C, C, C)`.
    condition: Must identify the pattern in the original input grid.
  - transformation_name: preserve_pixels
    input_elements: Any pixel in the input grid's row that is *not* part of a detected `(0, C, 0)` input pattern (considering the central pixel C).
    output_elements: Copied directly to the same position in the output grid's row.
    effect: Preserves background pixels (unless overwritten by expansion) and existing solid_triplets.

processing_flow:
  - step: Define the input grid (a list containing one list/row of integers).
  - step: Create the output grid as a deep copy of the input grid.
  - step: Extract the single row from the input grid. Let its width be W.
  - step: Iterate through the input row using an index `i` from 1 to `W-2`.
  - step: At each index `i`, examine the input triplet `(input_row[i-1], input_row[i], input_row[i+1])`.
  - step: If the input triplet is `(0, C, 0)` where `C != 0`:
      - Modify the output grid's row at indices `i-1`, `i`, and `i+1` to be `C`, `C`, `C`.
  - step: After iterating through all possible indices `i`, the modified output grid is the result.