Grid:
  dimensionality: 1D (represented as 1xN, specifically 1x32 in examples)
  background_color: 0 (white)

Objects:
  - type: Pixel Block
    properties:
      color: non-zero integer (1-9)
      size: 
        - 1 pixel (single pixel object)
        - 3 pixels (3-pixel block object)
      shape: horizontal line segment
      position: starting index within the row

Transformation:
  action: Iterate and Conditionally Transform
  target: Non-background pixels encountered during iteration.
  condition_1: If the current pixel `input[i]` is background (0).
    effect_1: Append 0 to the output. Advance index `i` by 1.
  condition_2: If the current pixel `input[i]` is non-background (color `C`) AND the next two pixels are also `C` (i.e., `input[i+1]==C` and `input[i+2]==C`), provided `i+1` and `i+2` are within grid bounds.
    effect_2: Append `C, C, C` to the output. Advance index `i` by 3.
  condition_3: If the current pixel `input[i]` is non-background (color `C`) but condition_2 is false (it's not the start of a 3-block).
    effect_3: Append `C, C, C` to the output. Advance index `i` by 1.
  unchanged_elements: Background pixels (unless involved in the expansion from condition 3, which isn't the case here as expansion happens *into* the output structure). Existing 3-pixel blocks are effectively unchanged by passing through condition 2.

Relationships:
  - Spatial: Objects are positioned horizontally, potentially separated by background pixels.
  - Transformation Dependency: The transformation applied at index `i` depends on the color at `input[i]` and potentially `input[i+1]` and `input[i+2]`. Advancing the index `i` depends on whether a 3-block was found (advance by 3) or not (advance by 1).

Error Handling Notes:
  - Accessing `input[i+1]` or `input[i+2]` requires explicit boundary checks (`i+1 < width` and `i+2 < width`) BEFORE the access attempt.