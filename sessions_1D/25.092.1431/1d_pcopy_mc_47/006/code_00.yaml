Grid:
  dimensionality: 1D (represented as 1xN 2D grid)
  background_color: 0 (white)

Objects:
  - type: Pixel Block
    properties:
      color: non-zero integer (1-9)
      size_in_input:
        - 1 pixel (single pixel object)
        - 3 pixels (3-pixel block object)
      shape: horizontal line segment
      position: index within the row

Relationships:
  - Adjacency: Crucial for identifying 3-pixel blocks (C, C, C) and the left neighbor of single pixels.

Transformation:
  action: Sequential Processing and Conditional Modification
  target: Non-background pixels (color != 0)
  rules:
    - Rule 1 (Preservation):
        condition: A non-background pixel `C` at index `i` is followed by two more pixels of color `C` at `i+1` and `i+2` (within bounds).
        effect: Append `C, C, C` to the output. Advance input index by 3.
    - Rule 2 (Shift-Left Expansion):
        condition: A non-background pixel `C` at index `i` is *not* part of an existing 3-block (fails Rule 1 condition), AND index `i > 0`, AND the input pixel at `i-1` is background (0).
        effect: Remove the last appended pixel (which must be the '0' from `input[i-1]`) from the output. Append `C, C, C` to the output. Advance input index by 1.
    - Rule 3 (Copy Background):
        condition: The pixel at index `i` is background (0).
        effect: Append `0` to the output. Advance input index by 1.
    - Rule 4 (Default/Copy Single - Inferred):
        condition: A non-background pixel `C` at index `i` does not meet the conditions for Rule 1 or Rule 2 (e.g., single pixel at index 0, or single pixel whose left neighbor is not background). This case is not explicitly shown in examples. Based on minimal change principle, assume it's copied.
        effect (assumed): Append `C` to the output. Advance input index by 1. (Note: The chosen sequential algorithm implicitly handles this via the final append/increment step if other rules don't apply).

Output Construction:
  - The output row is built sequentially based on applying the rules while iterating through the input row.
  - The final output grid maintains the 1xN shape.