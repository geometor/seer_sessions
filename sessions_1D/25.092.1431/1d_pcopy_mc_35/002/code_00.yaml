Input_Data_Structure:
  Type: List of Lists (representing a 2D grid)
  Rows: 1 (based on examples)
  Columns: Variable (33 in examples)
  Pixel_Type: Integer (0-9)

Output_Data_Structure:
  Type: List of Lists
  Rows: 1
  Columns: Same as input
  Pixel_Type: Integer (0-9)

Objects:
  - Type: Background Pixel
    Identifier: Value == 0 (white)
  - Type: Isolated Non-White Pixel
    Identifier:
      - Value != 0
      - Left neighbor (index-1) is 0 OR index is 0
      - Right neighbor (index+1) is 0 OR index is last column
    Action: Causes expansion in the output grid.
  - Type: Non-Isolated Non-White Pixel
    Identifier:
      - Value != 0
      - Not Isolated (part of a block of >= 2 identical colors, or adjacent to a different non-white color)
    Action: Remains unchanged in the output grid (unless overwritten by an expansion from a *different* isolated pixel).

Transformation:
  Name: Horizontal Expansion of Isolated Pixels
  Input: Grid (list of lists)
  Output: Grid (list of lists)
  Rule:
    1. Create a deep copy of the input grid to serve as the output grid.
    2. Iterate through each pixel `(r, c)` of the *original input grid*. (Since examples have only r=0, we iterate through column `c`).
    3. Check if the pixel `input_grid[0][c]` is an "Isolated Non-White Pixel" using the definition above.
    4. If it is isolated and has color `C`:
       - Modify the *output grid copy* `output_grid[0]`:
         - Set `output_grid[0][c]` to `C`. (Already done by copy, but conceptually important).
         - If `c > 0`, set `output_grid[0][c-1]` to `C`.
         - If `c < width - 1`, set `output_grid[0][c+1]` to `C`.
    5. Pixels in the output grid copy that are not modified by an expansion retain their original value from the input grid copy.
  Concurrency: The identification of isolated pixels is based solely on the *original input grid*. All expansions are applied to the *output grid copy* based on this initial analysis.