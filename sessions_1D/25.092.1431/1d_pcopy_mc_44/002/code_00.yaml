task_type: sequence_transformation
representation: 1D_sequence (list of integers)
sequence_length: 32 (consistent across examples)
components:
  - type: background
    properties:
      color: white (0)
      role: separator, default_fill
  - type: object
    subtype: single_pixel
    properties:
      color: any non-white (C)
      size: 1 pixel
      context: located at index 'i' (where 0 < i < length-1), input[i-1] == 0 and input[i+1] == 0
    actions:
      - is_transformed
  - type: object
    subtype: horizontal_block
    properties:
      color: any non-white (C)
      size: 3 pixels
      context: located at index 'i', input[i] == C, input[i+1] == C, input[i+2] == C, and C != 0
    actions:
      - is_preserved
transformation:
  action: selective_replacement_and_copy
  rules:
    - rule: preserve_blocks
      target: horizontal_block
      detail: Copy the 3-pixel block directly to the same position in the output sequence.
    - rule: expand_single_pixels
      target: single_pixel
      detail: Replace the pixels at indices [i-1, i, i+1] in the output sequence with the color 'C' of the single pixel found at input index 'i'.
  priority: It appears necessary to first identify and place the preserved blocks, then perform the expansions to avoid potential overwrites if the order were reversed (though the examples don't strictly test this interaction). The provided code implements block copying first, then single-pixel expansion.
output_generation:
  method: create_new_sequence
  steps:
    - Initialize an output sequence of the same length as the input, filled with white (0).
    - Iterate through the input to find all horizontal_blocks. For each block found starting at index `i`, copy its three pixels to output indices `i`, `i+1`, `i+2`. Use a mechanism (like incrementing the loop counter by 3) to avoid re-checking pixels within an identified block.
    - Iterate through the input (from index 1 to length-2) to find all single_pixels. For each single_pixel with color `C` found at input index `i`, write the color `C` to output indices `i-1`, `i`, and `i+1`.