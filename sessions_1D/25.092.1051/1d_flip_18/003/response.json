{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Dict, Tuple\n\n\"\"\"\nIdentifies two adjacent, horizontally contiguous blocks of non-background \n(non-zero) colors within a single-row (1xN) input grid. One block is always a \nsingle pixel, and the other can be one or more pixels. The transformation swaps \nthe positions of these two blocks within the row, preserving the background pixels.\n\"\"\"\n\ndef find_contiguous_objects_1d(row: np.ndarray) -> List[Dict]:\n    \"\"\"\n    Finds all contiguous blocks of non-background (non-zero) pixels in a 1D row.\n\n    Args:\n        row: A 1D NumPy array representing a row of the grid.\n\n    Returns:\n        A list of dictionaries, where each dictionary represents an object\n        with keys 'color', 'start' (column index), 'end' (column index), \n        and 'len' (number of pixels).\n    \"\"\"\n    objects = []\n    current_object = None\n    for i, pixel in enumerate(row):\n        pixel_val = int(pixel) # Ensure comparison with int 0 works\n        if pixel_val != 0:\n            # Non-background pixel found\n            if current_object is None:\n                # Start of a new object\n                current_object = {'color': pixel_val, 'start': i, 'count': 1}\n            elif pixel_val == current_object['color']:\n                # Continuation of the current object\n                current_object['count'] += 1\n            else:\n                # Different color, end the previous object and start a new one\n                current_object['end'] = i - 1\n                current_object['len'] = current_object['count'] \n                objects.append(current_object)\n                current_object = {'color': pixel_val, 'start': i, 'count': 1}\n        else:\n            # Background pixel found\n            if current_object is not None:\n                # End of the current object\n                current_object['end'] = i - 1\n                current_object['len'] = current_object['count']\n                objects.append(current_object)\n                current_object = None # Reset\n\n    # If the row ended with an object, add it\n    if current_object is not None:\n        current_object['end'] = len(row) - 1\n        current_object['len'] = current_object['count']\n        objects.append(current_object)\n        \n    return objects\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Transforms the input grid by swapping two adjacent non-background objects in its single row.\n\n    Args:\n        input_grid: A 2D NumPy array of shape (1, N) representing the input grid.\n\n    Returns:\n        A 2D NumPy array of shape (1, N) representing the output grid with objects swapped.\n    \"\"\"\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n    \n    # Extract the single row\n    # Check if the input has at least one row before accessing it\n    if input_grid.shape[0] == 0:\n        print(\"Warning: Input grid is empty. Returning copy.\")\n        return output_grid\n        \n    input_row = input_grid[0]\n\n    # Find the non-background objects in the row\n    objects = find_contiguous_objects_1d(input_row)\n\n    # Expect exactly two adjacent objects based on training examples\n    if len(objects) != 2:\n        print(f\"Warning: Expected 2 objects, found {len(objects)}. Returning copy.\")\n        return output_grid \n        \n    obj1 = objects[0] # Left object\n    obj2 = objects[1] # Right object\n\n    # Check for adjacency (redundant if find_contiguous_objects_1d works correctly, but good safeguard)\n    if obj1['end'] + 1 != obj2['start']:\n         print(f\"Warning: Objects are not adjacent. Obj1 ends at {obj1['end']}, Obj2 starts at {obj2['start']}. Returning copy.\")\n         return output_grid\n\n    # Determine the starting column index for the swap operation\n    swap_start_index = obj1['start']\n\n    # Modify the output grid's row directly\n    # Place the second object (obj2) where the first object (obj1) was\n    for i in range(obj2['len']):\n        output_grid[0, swap_start_index + i] = obj2['color']\n\n    # Place the first object (obj1) immediately after the new position of obj2\n    for i in range(obj1['len']):\n        output_grid[0, swap_start_index + obj2['len'] + i] = obj1['color']\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6948,
    "candidates_token_count": 1122,
    "total_token_count": 8070,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.998294,
  "retries": 1
}