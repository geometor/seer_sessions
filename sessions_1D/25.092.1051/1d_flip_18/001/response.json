{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Dict, Tuple\n\n\"\"\"\nIdentifies two adjacent, non-background colored objects in a 1D grid. \nOne object is a single pixel, and the other is a contiguous block.\nThe transformation swaps the positions of these two objects while preserving \nthe background.\n\"\"\"\n\ndef find_contiguous_objects(grid: List[int]) -> List[Dict]:\n    \"\"\"\n    Finds all contiguous blocks of non-background (non-zero) pixels.\n\n    Args:\n        grid: A list of integers representing the 1D grid.\n\n    Returns:\n        A list of dictionaries, where each dictionary represents an object\n        with keys 'color', 'start' (index), 'end' (index), and 'len'.\n    \"\"\"\n    objects = []\n    current_object = None\n    for i, pixel in enumerate(grid):\n        if pixel != 0:\n            # Non-background pixel found\n            if current_object is None:\n                # Start of a new object\n                current_object = {'color': pixel, 'start': i, 'count': 1}\n            elif pixel == current_object['color']:\n                # Continuation of the current object\n                current_object['count'] += 1\n            else:\n                # Different color, end the previous object and start a new one\n                current_object['end'] = i - 1\n                current_object['len'] = current_object['end'] - current_object['start'] + 1\n                # sanity check count vs len\n                # assert current_object['len'] == current_object['count']\n                objects.append(current_object)\n                current_object = {'color': pixel, 'start': i, 'count': 1}\n        else:\n            # Background pixel found\n            if current_object is not None:\n                # End of the current object\n                current_object['end'] = i - 1\n                current_object['len'] = current_object['end'] - current_object['start'] + 1\n                # assert current_object['len'] == current_object['count']\n                objects.append(current_object)\n                current_object = None # Reset\n\n    # If the last pixel was part of an object, add it\n    if current_object is not None:\n        current_object['end'] = len(grid) - 1\n        current_object['len'] = current_object['end'] - current_object['start'] + 1\n        # assert current_object['len'] == current_object['count']\n        objects.append(current_object)\n        \n    return objects\n\ndef transform(input_grid: List[int]) -> List[int]:\n    \"\"\"\n    Transforms the input grid by swapping two adjacent non-background objects.\n\n    Args:\n        input_grid: A list of integers representing the 1D input grid.\n\n    Returns:\n        A list of integers representing the 1D output grid with objects swapped.\n    \"\"\"\n    # Initialize output_grid as a copy of the input\n    output_grid = list(input_grid)\n\n    # Find the non-background objects\n    objects = find_contiguous_objects(input_grid)\n\n    # Based on the examples, we expect exactly two adjacent objects\n    # Add basic validation, though ARC tasks usually guarantee valid inputs\n    if len(objects) != 2:\n        # Or raise an error, but returning input copy might be safer for ARC runner\n        print(f\"Warning: Expected 2 objects, found {len(objects)}. Returning copy.\")\n        return output_grid \n        \n    obj1 = objects[0]\n    obj2 = objects[1]\n\n    # Check for adjacency (optional but good practice)\n    if obj1['end'] + 1 != obj2['start']:\n         print(f\"Warning: Objects are not adjacent. Obj1 ends at {obj1['end']}, Obj2 starts at {obj2['start']}. Returning copy.\")\n         return output_grid\n\n    # Determine the starting position for the swap\n    swap_start_index = obj1['start']\n\n    # Place the second object (obj2) where the first object (obj1) was\n    for i in range(obj2['len']):\n        output_grid[swap_start_index + i] = obj2['color']\n\n    # Place the first object (obj1) immediately after the new position of obj2\n    for i in range(obj1['len']):\n        output_grid[swap_start_index + obj2['len'] + i] = obj1['color']\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2529,
    "candidates_token_count": 1044,
    "total_token_count": 3573,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 29.931257,
  "retries": 1
}