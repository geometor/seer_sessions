{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Identifies a pattern of a single 'mover' pixel followed by a contiguous 'block'\n    of pixels (both non-background) within a 1D row. Swaps the position of the\n    mover pixel and the entire block, placing the block first and the mover\n    immediately after it. Background pixels remain unchanged.\n    \"\"\"\n\n    # -- Input Handling --\n    # Determine if input is numpy array or list, and if it represents a 1xN grid or a 1D array/list\n    is_numpy = isinstance(input_grid, np.ndarray)\n    is_list = isinstance(input_grid, list)\n    is_2d_input = False\n    row = None\n\n    if is_numpy:\n        if input_grid.ndim == 2 and input_grid.shape[0] == 1:\n            row = input_grid[0].tolist()\n            is_2d_input = True\n        elif input_grid.ndim == 1:\n            row = input_grid.tolist()\n            is_2d_input = False\n        else:\n            # Handle invalid numpy dimensions - return unchanged for robustness\n            return input_grid\n    elif is_list:\n        if len(input_grid) == 1 and isinstance(input_grid[0], list):\n            # Check if the inner list contains only integers\n            if all(isinstance(x, int) for x in input_grid[0]):\n                 row = input_grid[0]\n                 is_2d_input = True\n            else:\n                 # Handle invalid inner list content - return unchanged\n                 return input_grid\n        elif all(isinstance(x, int) for x in input_grid):\n            row = input_grid\n            is_2d_input = False\n        else:\n            # Handle invalid list structure - return unchanged\n            return input_grid\n    else:\n        # Handle non-list/numpy input - return unchanged\n        return input_grid\n\n    # If row could not be determined (e.g., empty list input)\n    if row is None:\n        return input_grid # Return original input\n\n    # -- Core Logic --\n    # Initialize output as a copy of the input row\n    output_row = list(row)\n\n    # Find the mover and block\n    mover_index = -1\n    mover_color = -1\n    block_start_index = -1\n    block_end_index = -1 # exclusive index (one position after the last block pixel)\n    block_color = -1\n\n    for i in range(len(row)):\n        # Find the first non-background pixel (the mover)\n        if row[i] != 0 and mover_index == -1:\n            mover_index = i\n            mover_color = row[i]\n\n            # Look for the block starting immediately after the mover\n            if i + 1 < len(row) and row[i+1] != 0:\n                block_start_index = i + 1\n                block_color = row[block_start_index]\n                block_end_index = block_start_index + 1 # Initialize end index\n\n                # Extend the block end index as long as the color matches\n                for j in range(block_start_index + 1, len(row)):\n                    if row[j] == block_color:\n                        block_end_index = j + 1\n                    else:\n                        # Block ends either due to different color or background\n                        break\n                # Found the full pattern (mover + block), stop searching the row\n                break\n            else:\n                # Found a mover but no block follows (either end of row or background pixel)\n                # According to examples, a block always follows.\n                # If this happens, the pattern is not matched as expected.\n                # We break here; subsequent check will handle the non-match.\n                break\n\n    # Perform the transformation only if the expected pattern was found\n    if mover_index != -1 and block_start_index != -1 and block_color != -1:\n        block_length = block_end_index - block_start_index\n\n        # Check if the combined length exceeds the row boundary (shouldn't happen with valid ARC data)\n        if mover_index + block_length < len(output_row):\n\n            # Write the block into the output starting at the mover's original position\n            for i in range(block_length):\n                output_row[mover_index + i] = block_color\n\n            # Write the mover pixel into the output right after the newly placed block\n            output_row[mover_index + block_length] = mover_color\n        else:\n            # Pattern found but placement would exceed bounds - indicates unexpected input.\n            # Return unchanged row in this edge case.\n             pass # output_row remains a copy of row\n\n    # Else: pattern (mover immediately followed by block) was not found, output_row remains unchanged copy.\n\n    # -- Output Formatting --\n    # Return the result in the original format (list/numpy, 1D/2D)\n    if is_numpy:\n        if is_2d_input:\n            return np.array([output_row])\n        else: # 1D numpy input\n            return np.array(output_row)\n    elif is_list:\n        if is_2d_input:\n            return [output_row]\n        else: # flat list input\n            return output_row\n    else:\n        # Fallback, should not be reached if initial checks are correct\n        return output_row\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2061,
    "candidates_token_count": 1280,
    "total_token_count": 3341,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 43.867655,
  "retries": 1
}