task_type: object_manipulation
grid_dimensionality: 2D # Specifically 1xN shape for all examples
input_format: numpy.ndarray(shape=(1, N))
output_format: numpy.ndarray(shape=(1, N)) # Or list[list[int]] of shape 1xN
objects:
  - type: marker_pixel
    count: 1
    properties:
      - color: non-white (distinct from block color)
      - size: 1 pixel
      - initial_position: (0, marker_index) where grid[0, marker_index-1] is white (or index 0) and grid[0, marker_index+1] is the block color.
  - type: color_block
    count: 1
    properties:
      - color: non-white (distinct from marker color)
      - shape: contiguous horizontal line (1xM)
      - size: M >= 1 pixels
      - position: starts at (0, marker_index + 1) and ends at (0, block_end_index)
      - boundary_condition: followed by white pixel (0) or grid boundary at (0, block_end_index + 1)
relationships:
  - type: adjacency
    object1: marker_pixel
    object2: color_block
    details: marker is at grid[0, marker_index], block starts at grid[0, marker_index + 1].
actions:
  - action: identify
    target: marker_pixel and color_block based on color difference and adjacency, ensuring boundary conditions (surrounded by white or grid edges).
  - action: copy
    object: input grid
    result: output grid (initially identical to input)
  - action: move_marker
    details:
      - Step 1: Change the color of the original marker position in the output grid to white (0). (output[0, marker_index] = 0)
      - Step 2: Change the color of the pixel immediately following the block in the output grid to the marker's color. (output[0, block_end_index + 1] = marker_color)
background: white (0)