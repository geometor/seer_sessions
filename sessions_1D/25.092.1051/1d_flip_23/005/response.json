{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport copy\n\n\"\"\"\nSwap the colors of the first and last pixels of a specific contiguous horizontal segment \nwithin a single-row grid. The segment is defined as the first non-background pixel \n(marker) followed immediately by a sequence of one or more pixels of a single, \ndifferent, non-background color (sequence). All other pixels remain unchanged.\n\"\"\"\n\ndef find_pattern_segment_indices(row):\n    \"\"\"\n    Finds the indices of the marker pixel and the end of its adjacent sequence.\n\n    Args:\n        row (np.array): A 1D NumPy array representing a row of the grid.\n\n    Returns:\n        tuple: A tuple containing (marker_idx, sequence_end_idx), \n               or (None, None) if the required pattern is not found.\n    \"\"\"\n    marker_idx = -1\n    marker_color = -1\n    sequence_end_idx = -1\n    \n    # 1. Find the marker pixel (first non-zero element)\n    non_zero_indices = np.where(row != 0)[0]\n    if len(non_zero_indices) == 0:\n        # No non-background pixels found\n        return None, None\n        \n    marker_idx = non_zero_indices[0]\n    marker_color = row[marker_idx]\n        \n    # 2. Check the pixel immediately following the marker\n    seq_start_idx = marker_idx + 1\n    # Check bounds: sequence must start within the row\n    if seq_start_idx >= len(row): \n        return None, None\n        \n    sequence_color = row[seq_start_idx]\n    \n    # Check if the sequence start pixel is valid:\n    # - Must not be background (0)\n    # - Must have a different color than the marker\n    if sequence_color == 0 or sequence_color == marker_color:\n        return None, None\n        \n    # 3. Find the end of the contiguous sequence of sequence_color\n    # Initialize end index to the start of the sequence (the first sequence pixel)\n    sequence_end_idx = seq_start_idx \n    for i in range(seq_start_idx + 1, len(row)):\n        if row[i] == sequence_color:\n            # Extend the sequence if the color matches\n            sequence_end_idx = i\n        else:\n            # End of sequence found (or end of row reached)\n            break \n            \n    # Pattern is confirmed, return the start and end indices of the segment\n    return marker_idx, sequence_end_idx\n\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Transforms the input grid by swapping the colors of the first and last pixels\n    of an identified pattern segment.\n\n    Args:\n        input_grid (np.ndarray): A 2D NumPy array representing the input grid. \n                                 Expected to be 1xN based on examples.\n\n    Returns:\n        np.ndarray: A 2D NumPy array representing the transformed grid.\n    \"\"\"\n    # Ensure input is a NumPy array, create a copy to modify\n    if not isinstance(input_grid, np.ndarray):\n        input_grid = np.array(input_grid) # Convert if it's a list of lists\n        \n    output_grid = np.copy(input_grid)\n\n    # Check if it's a single-row grid as expected from examples\n    if output_grid.shape[0] == 1:\n        # Access the single row\n        row = output_grid[0] \n        # Also get the original row for reading colors before swap\n        original_row = input_grid[0] \n        \n        # Find the indices defining the pattern segment\n        marker_idx, sequence_end_idx = find_pattern_segment_indices(original_row)\n        \n        # If the pattern segment was successfully found\n        if marker_idx is not None and sequence_end_idx is not None:\n            # Retrieve the original colors to be swapped\n            # Read from original_row to avoid issues if row was modified prematurely\n            marker_color = original_row[marker_idx]\n            # The sequence color is determined by the pixel right after the marker\n            sequence_color = original_row[marker_idx + 1] \n            \n            # Perform the color swap on the output grid's row\n            row[marker_idx] = sequence_color\n            row[sequence_end_idx] = marker_color\n            \n    # Return the modified grid (or the original copy if no transformation occurred)\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8889,
    "candidates_token_count": 1062,
    "total_token_count": 9951,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.513322,
  "retries": 1
}