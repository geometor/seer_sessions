{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\n\n\"\"\"\nSwap the first and last pixels of a contiguous horizontal segment composed of a \nsingle 'marker' pixel followed by a sequence of identical pixels of a different color.\n\n1.  Accept the input grid (expected 1xN).\n2.  Create a deep copy for the output grid.\n3.  Access the row.\n4.  Find the index (`marker_idx`) and color (`marker_color`) of the first non-background pixel.\n5.  If no marker found, return copy.\n6.  Check the pixel immediately following the marker. If invalid (out of bounds, background, or same color as marker), return copy.\n7.  Identify the sequence color (`sequence_color`) and find the end index (`sequence_end_idx`) of the contiguous sequence starting after the marker.\n8.  If a valid sequence is found, swap the colors:\n    a.  Place `sequence_color` at `marker_idx` in the output row.\n    b.  Place `marker_color` at `sequence_end_idx` in the output row.\n9.  Return the modified output grid.\n\"\"\"\n\ndef find_pattern_indices(row):\n    \"\"\"\n    Finds the indices of the marker pixel and the end of its adjacent sequence.\n\n    Args:\n        row (list): A list of integers representing a row of the grid.\n\n    Returns:\n        tuple: A tuple containing (marker_idx, sequence_end_idx), \n               or (None, None) if the pattern is not found.\n    \"\"\"\n    marker_idx = -1\n    marker_color = -1\n    sequence_end_idx = -1\n    \n    # 1. Find the marker pixel (first non-zero)\n    for i, pixel in enumerate(row):\n        if pixel != 0:\n            marker_idx = i\n            marker_color = pixel\n            break\n            \n    # If no marker found, pattern doesn't exist\n    if marker_idx == -1:\n        return None, None\n        \n    # 2. Check the pixel immediately following the marker\n    seq_start_idx = marker_idx + 1\n    if seq_start_idx >= len(row): # Check bounds\n        return None, None\n        \n    sequence_color = row[seq_start_idx]\n    \n    # Check if the next pixel is background or same color as marker\n    if sequence_color == 0 or sequence_color == marker_color:\n        return None, None\n        \n    # 3. Find the end of the contiguous sequence\n    sequence_end_idx = seq_start_idx # Initialize end index to the start of the sequence\n    for i in range(seq_start_idx + 1, len(row)):\n        if row[i] == sequence_color:\n            sequence_end_idx = i\n        else:\n            # End of sequence (or end of row)\n            break \n            \n    # Pattern requires at least one sequence pixel, which is guaranteed by checks above\n    return marker_idx, sequence_end_idx\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by swapping the marker pixel color with the color \n    of the last pixel in its adjacent sequence.\n\n    Args:\n        input_grid (list[list[int]]): A 2D list representing the input grid. \n                                       Expected to be 1xN based on examples.\n\n    Returns:\n        list[list[int]]: A 2D list representing the transformed grid.\n    \"\"\"\n    # Basic input validation\n    if not input_grid or not isinstance(input_grid, list) or not input_grid[0] or not isinstance(input_grid[0], list):\n        return input_grid # Return input as is if format is unexpected\n\n    # Create a deep copy to modify\n    output_grid = copy.deepcopy(input_grid)\n\n    # Check if it's a single-row grid as expected from examples\n    if len(output_grid) == 1:\n        row = output_grid[0]\n        \n        # Find the indices defining the pattern\n        marker_idx, sequence_end_idx = find_pattern_indices(row)\n        \n        # If the pattern was found, perform the swap\n        if marker_idx is not None and sequence_end_idx is not None:\n            # Store original colors before modifying the row\n            marker_color = row[marker_idx]\n            # Sequence color is the color of the pixel *after* the marker\n            sequence_color = row[marker_idx + 1] \n            \n            # Perform the swap in the output grid's row\n            row[marker_idx] = sequence_color\n            row[sequence_end_idx] = marker_color\n            \n    # Return the modified grid (or the original copy if no transformation occurred)\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6669,
    "candidates_token_count": 1107,
    "total_token_count": 7776,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.35441,
  "retries": 1
}