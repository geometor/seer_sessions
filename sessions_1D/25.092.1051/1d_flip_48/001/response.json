{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\ndef find_non_white_block(grid_1d):\n    \"\"\"\n    Finds the start and end indices (exclusive) of the first contiguous \n    non-white (non-zero) block in a 1D numpy array.\n\n    Args:\n        grid_1d: A 1D numpy array representing a row of the grid.\n\n    Returns:\n        A tuple (start_index, end_index) if a block is found, \n        otherwise (None, None). end_index is exclusive.\n    \"\"\"\n    # Find indices of all non-zero elements\n    non_zeros_indices = np.where(grid_1d != 0)[0]\n    \n    # If no non-zero elements, return None\n    if len(non_zeros_indices) == 0:\n        return None, None \n        \n    start_index = non_zeros_indices[0]\n    end_index = start_index + 1 # Initialize end_index (exclusive)\n    \n    # Iterate through the rest of the non-zero indices to find the end \n    # of the *first* contiguous block\n    for i in range(1, len(non_zeros_indices)):\n        # Check if the current non-zero index is adjacent to the previous one\n        if non_zeros_indices[i] == non_zeros_indices[i-1] + 1:\n            end_index += 1 # Extend the block\n        else:\n            # Found a gap, the first block ends here\n            break\n            \n    return start_index, end_index\n\ndef transform(input_grid):\n    \"\"\"\n    Identifies a contiguous block of non-white pixels in a 1D input grid.\n    If the block starts with a single 'marker' pixel followed immediately \n    by a sequence of identical 'body' pixels (where marker color != body color),\n    the marker pixel is moved to the end of the body sequence. \n    Otherwise, the grid remains unchanged. Background (white/0) pixels are preserved.\n    Assumes input is a 1D list or numpy array.\n    \"\"\"\n    # Ensure input is a numpy array for efficient processing\n    grid_np = np.array(input_grid)\n\n    # Check if grid is essentially 1D (either 1D or Nx1 or 1xN)\n    if grid_np.ndim > 1:\n        if grid_np.shape[0] == 1:\n            grid_1d = grid_np[0] # Use the first row if it's 1xN\n        elif grid_np.shape[1] == 1:\n             grid_1d = grid_np[:, 0] # Use the first column if it's Nx1\n        else:\n             # If it's truly 2D with more than one row/col, this rule doesn't apply\n             # Return input unchanged in this case, or raise error? Returning unchanged seems safer.\n             return input_grid \n    else:\n        grid_1d = grid_np\n\n    # Find the first contiguous non-white block\n    start, end = find_non_white_block(grid_1d)\n\n    # If no block is found, return the original input grid\n    if start is None:\n        # Ensure output format matches input possibility (list or np.array)\n        return input_grid \n\n    # Extract the block\n    block = grid_1d[start:end]\n\n    # Check if the block has the required structure:\n    # 1. At least two pixels long.\n    # 2. First pixel (marker) has a different color than the second.\n    # 3. All pixels from the second onwards (body) have the same color.\n    if len(block) >= 2:\n        marker = block[0]\n        body_segment = block[1:]\n        body_color = body_segment[0] # Color of the first pixel in the body\n        \n        # Check conditions: marker color != body color AND all body pixels are the same color\n        if marker != body_color and np.all(body_segment == body_color):\n            # Structure matches, perform the transformation\n            \n            # Create the rearranged block: body first, then marker\n            rearranged_block = np.concatenate((body_segment, [marker]))\n            \n            # Create the output grid by modifying a copy of the input\n            output_grid_1d = grid_1d.copy()\n            output_grid_1d[start:end] = rearranged_block\n            \n            # Reshape back to original if necessary (e.g., if input was Nx1)\n            if grid_np.ndim > 1 and grid_np.shape[1] == 1: # Nx1 case\n                output_grid = output_grid_1d.reshape(-1, 1)\n            elif grid_np.ndim > 1 and grid_np.shape[0] == 1: # 1xN case\n                 output_grid = output_grid_1d.reshape(1, -1)\n            else: # 1D case\n                 output_grid = output_grid_1d\n\n            # Return result, potentially converting back to list if input was list\n            if isinstance(input_grid, list):\n                 # Check if original list was nested (like [[...]])\n                 if isinstance(input_grid[0], list):\n                     return output_grid.tolist()\n                 else:\n                     # Flatten if original was simple list\n                     return output_grid.flatten().tolist() \n            else:\n                return output_grid # Return numpy array if input was numpy array\n\n    # If the block structure doesn't match, return the original input grid\n    return input_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2140,
    "candidates_token_count": 1308,
    "total_token_count": 3448,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 32.875087,
  "retries": 1
}