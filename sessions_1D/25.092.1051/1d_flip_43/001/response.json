{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Tuple\n\n\"\"\"\nTransforms a 1D input grid (single row) by swapping the positions of an adjacent single non-white pixel and a contiguous block of non-white pixels of a different color.\n\nSpecifically:\n1. Finds the first non-white pixel (color_A at index_A).\n2. Finds the adjacent contiguous block of a different non-white color (color_B starting at index_B with length_B).\n3. In the output grid, places the block (color_B) starting at index_A.\n4. Places the single pixel (color_A) immediately after the block, at index_A + length_B.\n5. Keeps all other pixels (background white) unchanged.\n\"\"\"\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Swaps an adjacent single pixel and a block in a 1D grid.\n\n    Args:\n        input_grid: A list containing a single list of integers representing the input row.\n\n    Returns:\n        A list containing a single list of integers representing the transformed row.\n    \"\"\"\n    # Ensure input is a single row grid\n    if len(input_grid) != 1:\n        # Handle error or unexpected input format if necessary\n        # For now, assume valid input as per examples\n        return input_grid \n        \n    input_row = input_grid[0]\n    output_row = list(input_row) # Create a mutable copy\n    grid_width = len(input_row)\n\n    # Initialize variables to store properties of the elements\n    color_A = -1\n    index_A = -1\n    color_B = -1\n    index_B = -1\n    length_B = 0\n\n    # 1. Find the single pixel (color_A, index_A)\n    for i in range(grid_width):\n        if input_row[i] != 0:\n            color_A = input_row[i]\n            index_A = i\n            break # Found the first non-white pixel\n\n    # Check if a non-white pixel was found\n    if index_A == -1:\n        # No non-white pixels found, return original grid\n        return input_grid\n\n    # 2. Find the adjacent block (color_B, index_B, length_B)\n    # Block must start immediately after the single pixel\n    index_B = index_A + 1\n    if index_B < grid_width and input_row[index_B] != 0 and input_row[index_B] != color_A:\n        color_B = input_row[index_B]\n        # Calculate the length of the block\n        current_index = index_B\n        while current_index < grid_width and input_row[current_index] == color_B:\n            length_B += 1\n            current_index += 1\n    \n    # Check if a valid adjacent block was found\n    if length_B == 0:\n        # No valid adjacent block found, return original grid\n        # This scenario might indicate an edge case or invalid input structure according to the pattern\n        return input_grid\n\n    # 3. & 4. Modify the output grid: Place block at index_A, place single pixel at index_A + length_B\n    # Place the block\n    for j in range(length_B):\n        # Check bounds just in case, though based on logic it should fit\n        if index_A + j < grid_width:\n            output_row[index_A + j] = color_B\n        \n    # Place the single pixel\n    # Check bounds\n    if index_A + length_B < grid_width:\n       output_row[index_A + length_B] = color_A\n\n    # 5. Return the modified output grid (wrapped in a list)\n    return [output_row]\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2132,
    "candidates_token_count": 898,
    "total_token_count": 3030,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.318559,
  "retries": 1
}