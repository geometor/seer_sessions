{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport copy\n\n\"\"\"\nIdentifies a contiguous sequence of non-white (non-zero) pixels in a 1D input grid.\nPerforms a left cyclic shift on this sequence: the first pixel moves to the end, \nand all other pixels shift one position left. White (zero) pixels remain unchanged.\nIf no non-white sequence exists, the grid is returned unmodified.\n\"\"\"\n\ndef find_contiguous_non_white_block(grid_1d):\n    \"\"\"\n    Finds the start and end indices of the first contiguous block of non-zero values.\n\n    Args:\n        grid_1d (np.array): A 1D numpy array representing the grid row.\n\n    Returns:\n        tuple: A tuple containing (start_index, end_index) if a block is found,\n               otherwise returns (None, None).\n    \"\"\"\n    non_white_indices = np.where(grid_1d != 0)[0]\n    if len(non_white_indices) == 0:\n        return None, None # No non-white pixels\n\n    start_index = non_white_indices[0]\n    end_index = non_white_indices[0]\n\n    # Check for contiguity, assuming only one block as per examples\n    for i in range(1, len(non_white_indices)):\n        if non_white_indices[i] == non_white_indices[i-1] + 1:\n            end_index = non_white_indices[i]\n        else:\n            # Found a gap, implying multiple blocks or non-contiguity.\n            # Based on the task description/examples, we only expect one block.\n            # If multiple blocks were possible, we might need different logic.\n            # For now, we assume the first contiguous sequence is the target.\n            break \n            \n    # Verify the entire found segment is contiguous (though the loop above should ensure this for the first block)\n    if len(non_white_indices) > 0 and (end_index - start_index + 1) == len(np.where(grid_1d[start_index:end_index+1] != 0)[0]):\n         return start_index, end_index\n    elif len(non_white_indices) > 0: # Only a single non-white pixel\n        if start_index == end_index:\n             return start_index, end_index\n             \n    # Fallback if assumptions fail or only scattered non-white pixels exist\n    # (although examples suggest a single contiguous block)\n    if len(non_white_indices) > 0:\n        # Attempt to find the *first* contiguous block explicitly\n        current_start = non_white_indices[0]\n        current_end = non_white_indices[0]\n        for i in range(1, len(non_white_indices)):\n            if non_white_indices[i] == current_end + 1:\n                current_end = non_white_indices[i]\n            else:\n                # First block ends here\n                break\n        return current_start, current_end\n\n\n    return None, None\n\n\ndef transform(input_grid):\n    \"\"\"\n    Applies a left cyclic shift to the contiguous non-white block in a 1D grid.\n\n    Args:\n        input_grid (list or np.array): A 1D list or numpy array representing the input grid row.\n\n    Returns:\n        np.array: A 1D numpy array representing the transformed grid row.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    grid_1d = np.array(input_grid)\n    \n    # Initialize output_grid as a copy of the input\n    output_grid = grid_1d.copy()\n\n    # 1. Identify the contiguous sequence of non-white pixels\n    start_index, end_index = find_contiguous_non_white_block(grid_1d)\n\n    # 2. If no non-white sequence exists, return the original grid\n    if start_index is None:\n        return output_grid\n\n    # Check if the block has more than one element to shift\n    if start_index == end_index:\n        # Single element block, no shift needed\n        return output_grid\n        \n    # 3. If a non-white sequence exists:\n    #   a. Extract the sequence\n    block = grid_1d[start_index : end_index + 1]\n\n    #   b. Perform left cyclic shift on the extracted block\n    #      np.roll(array, shift) shifts elements. Negative shift is left.\n    shifted_block = np.roll(block, -1)\n\n    #   c. Place the shifted sequence back into the output grid\n    output_grid[start_index : end_index + 1] = shifted_block\n\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1851,
    "candidates_token_count": 1110,
    "total_token_count": 2961,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 21.78479,
  "retries": 1
}