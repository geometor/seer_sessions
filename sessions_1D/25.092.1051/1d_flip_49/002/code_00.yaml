task_description: Rearrange a specific two-part pattern within a 1D grid. The pattern consists of a single 'marker' pixel followed immediately by a 'sequence' of one or more identical pixels, where the marker color is different from the sequence color. The transformation swaps their order: the sequence is placed first, followed immediately by the marker, starting at the original marker's position. All other pixels remain unchanged.

elements:
  - element_type: background
    properties:
      color: white (0)
      role: occupies space not taken by the marker-sequence pattern.

  - element_type: marker
    properties:
      color: non-white (variable, e.g., red, azure)
      structure: single pixel
      role: identifies the start of the pattern to be transformed.

  - element_type: sequence
    properties:
      color: non-white (variable, e.g., magenta, orange), must be different from the marker color.
      structure: contiguous 1D block of one or more identical pixels.
      role: forms the second part of the pattern to be transformed.

pattern:
  - pattern_type: marker_sequence
    structure: marker pixel immediately followed by sequence block.
    location: anywhere within the 1D grid, surrounded by background pixels or grid boundaries.

relationship:
  - type: adjacency
    from: marker
    to: sequence
    details: marker is immediately to the left of the sequence's start in the input.

transformation:
  - action: rearrange
    target: marker_sequence pattern
    steps:
      1. Identify the marker pixel and the adjacent sequence block (marker color != sequence color, both non-zero).
      2. Note the starting index of the marker (`marker_idx`) and the sequence pixels.
      3. In the output grid (initialized as a copy of the input):
         a. Place the sequence pixels starting at `marker_idx`.
         b. Place the marker pixel immediately after the sequence (at index `marker_idx + length_of_sequence`).
    constraints:
      - All background (0) pixels remain in their original positions.
      - The relative order of pixels within the sequence remains unchanged.
      - The total number of pixels of each color remains the same, just rearranged.

examples_summary:
  - example: 1
    marker_color: red (2) at index 14
    sequence_color: magenta (6) from index 15 to 22 (length 8)
    output_pattern: magenta sequence (length 8) at indices 14-21, red marker (2) at index 22.
  - example: 2
    marker_color: red (2) at index 10
    sequence_color: orange (7) from index 11 to 22 (length 12)
    output_pattern: orange sequence (length 12) at indices 10-21, red marker (2) at index 22.
  - example: 3
    marker_color: azure (8) at index 21
    sequence_color: orange (7) from index 22 to 29 (length 8)
    output_pattern: orange sequence (length 8) at indices 21-28, azure marker (8) at index 29.