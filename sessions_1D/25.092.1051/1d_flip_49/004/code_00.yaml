task_description: Identify a specific adjacent pair of non-background elements in a 1D grid and swap their order.
grid_properties:
  - dimensionality: Assumed 1D based on input/output format and transformation.
  - content: Primarily background (white, 0) with one instance of a specific pattern.

elements:
  - element_type: background
    properties:
      color: white (0)
      role: occupies space outside the pattern

  - element_type: pattern_block
    properties:
      structure: A contiguous sequence of non-white pixels in the input.
      composition: Consists of two sub-elements: a 'marker' and a 'sequence'.
      location: The only non-background region in the grid.

  - element_type: marker (part of pattern_block)
    properties:
      color: non-white (e.g., red, azure)
      structure: single pixel
      input_position: The leftmost pixel of the pattern_block.

  - element_type: sequence (part of pattern_block)
    properties:
      color: non-white, different from marker color (e.g., magenta, orange)
      structure: contiguous 1D block of one or more identical pixels.
      input_position: Immediately to the right of the 'marker'.
      variable: color and length vary between examples.

relationship:
  - type: adjacency
    from: marker
    to: sequence
    details: In the input, the marker is immediately to the left of the sequence's start. The marker and sequence together form the complete 'pattern_block'.

transformation:
  - action: reorder_within_block
    target: pattern_block
    input_order: marker, sequence
    output_order: sequence, marker
    details: The pixels originally occupied by the 'pattern_block' (from marker's start index to sequence's end index) are overwritten in the output. The sequence's pixels are written first, starting at the original marker index, followed immediately by the marker's pixel.
    constraints:
      - The background pixels remain unchanged.
      - The total number of pixels occupied by the pattern_block remains the same.
      - The colors and length of the marker and sequence remain the same, only their relative order changes.

examples_summary:
  - example: 1
    marker_color: red (2)
    sequence_color: magenta (6)
    block_indices_input: 14-22
    block_indices_output: 14-22
    action: Rearrange block from [2, 6, 6, 6, 6, 6, 6, 6, 6] to [6, 6, 6, 6, 6, 6, 6, 6, 2].
  - example: 2
    marker_color: red (2)
    sequence_color: orange (7)
    block_indices_input: 10-22
    block_indices_output: 10-22
    action: Rearrange block from [2, 7, ..., 7] to [7, ..., 7, 2].
  - example: 3
    marker_color: azure (8)
    sequence_color: orange (7)
    block_indices_input: 21-29
    block_indices_output: 21-29
    action: Rearrange block from [8, 7, 7, 7, 7, 7, 7, 7, 7] to [7, 7, 7, 7, 7, 7, 7, 7, 8].
