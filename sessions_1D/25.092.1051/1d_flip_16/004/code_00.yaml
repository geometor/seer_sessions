task_type: list_manipulation # Specific to 1D list structure
grid_dimensionality: 1D # Input is 1xN grid, treated as a 1D list
background_color: 0 # white, treated as padding
active_segment:
  description: The contiguous sublist containing all non-zero elements.
  properties:
    - surrounded_by_background: True # Or starts/ends at list boundary
    - contains_exactly_two_distinct_non_zero_colors: True
objects_within_segment:
  - name: singleton
    description: The element (pixel color) appearing exactly once in the active segment.
    properties:
      - color: variable (non-zero)
      - count: 1
  - name: block
    description: The contiguous sequence of identical elements (pixel color) appearing multiple times in the active segment.
    properties:
      - color: variable (non-zero, different from singleton)
      - count: >1
      - contiguous: true
relationships:
  - type: adjacency
    objects: [singleton, block]
    description: The singleton element is always directly adjacent to the block sequence within the active segment. There are no other elements between them.
  - type: exclusive_composition
    objects: [singleton, block]
    parent: active_segment
    description: The active segment is composed entirely of the singleton element and the block sequence, placed adjacently.
actions:
  - name: identify_active_segment
    input: input_list (1D)
    output: start_index, end_index, segment_sublist
    description: Find the start and end indices bounding the first contiguous run of non-zero values. Extract this sublist.
  - name: identify_singleton_and_block
    input: segment_sublist
    output: singleton_color, block_color, block_length
    description: Count element occurrences within the segment to identify the color appearing once (singleton) and the color appearing multiple times (block), along with the block's length.
  - name: swap_elements
    input: singleton_color, block_color, block_length, original_segment_order (e.g., check segment[0])
    output: new_segment_sublist
    description: Construct a new sublist by reversing the order of the singleton element and the block sequence. If the original started with the singleton, the new starts with the block, and vice-versa.
  - name: reconstruct_output_list
    input: original_list, start_index, end_index, new_segment_sublist
    output: transformed_list (1D)
    description: Create a copy of the original list and replace the elements from start_index to end_index with the elements of the new_segment_sublist.