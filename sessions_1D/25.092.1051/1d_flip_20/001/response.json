{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nIdentifies a contiguous sequence of non-white pixels (the figure) in the single-row input grid. \nWithin this figure, there is one pixel of a unique color and a block of pixels of another color. \nThe transformation swaps the position of the unique pixel and the block of pixels within the figure's original location, leaving the background pixels unchanged.\n\"\"\"\n\ndef find_figure_bounds(grid_row):\n    \"\"\"Finds the start and end indices of the contiguous non-white figure.\"\"\"\n    non_white_indices = [i for i, pixel in enumerate(grid_row) if pixel != 0]\n    if not non_white_indices:\n        return None, None\n    return min(non_white_indices), max(non_white_indices)\n\ndef transform(input_grid):\n    \"\"\"\n    Swaps a single unique-colored pixel with an adjacent block of same-colored pixels\n    within a contiguous non-white sequence in a single-row grid.\n\n    Args:\n        input_grid (list): A list representing a single row grid.\n\n    Returns:\n        list: The transformed grid row.\n    \"\"\"\n    # Ensure input is a list (representing the single row)\n    if isinstance(input_grid, np.ndarray):\n        grid_row = input_grid.tolist()\n        if isinstance(grid_row[0], list): # Handle potential nested list from numpy array conversion\n             grid_row = grid_row[0]\n    elif isinstance(input_grid, list) and isinstance(input_grid[0], list):\n         grid_row = input_grid[0] # Extract the single row if passed as a list of lists\n    else:\n         grid_row = list(input_grid) # Assume it's already a flat list or convert tuple/etc.\n\n    # Initialize output_grid as a copy of the input row\n    output_grid_row = list(grid_row)\n\n    # Find the bounds of the non-white figure\n    start_index, end_index = find_figure_bounds(grid_row)\n\n    # If no figure is found, return the original grid\n    if start_index is None:\n        return [output_grid_row] # Return as list of lists for ARC standard\n\n    # Extract the figure sequence\n    figure = grid_row[start_index : end_index + 1]\n\n    # Count the colors within the figure\n    color_counts = Counter(figure)\n\n    # Identify the unique pixel color and the block color\n    unique_pixel_color = None\n    block_color = None\n    for color, count in color_counts.items():\n        if count == 1:\n            unique_pixel_color = color\n        else:\n            block_color = color # Assuming only two colors in the figure\n\n    if unique_pixel_color is None or block_color is None:\n        # This case shouldn't happen based on examples, but handle defensively\n        return [output_grid_row] # Return original if figure structure is unexpected\n\n    # Create the block sequence\n    block_sequence = [block_color] * color_counts[block_color]\n\n    # Determine the order in the original figure\n    if figure[0] == unique_pixel_color:\n        # Unique pixel is first\n        new_figure = block_sequence + [unique_pixel_color]\n    else:\n        # Block is first\n        new_figure = [unique_pixel_color] + block_sequence\n\n    # Replace the original figure portion in the output grid with the new figure\n    output_grid_row[start_index : end_index + 1] = new_figure\n\n    # Return the transformed row, wrapped in a list to represent a 2D grid\n    return [output_grid_row]\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2193,
    "candidates_token_count": 862,
    "total_token_count": 3055,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.407188,
  "retries": 1
}