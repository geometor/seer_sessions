{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport copy\n\n\"\"\"\nTransforms the input grid by identifying a single contiguous horizontal block of \nnon-zero pixels within the first row, performing a cyclic left shift on the \npixels within that block, and returning the modified grid. The background (zero pixels) \nand the grid dimensions remain unchanged. Assumes input is a NumPy array with shape (1, N).\n\"\"\"\n\ndef find_non_background_block(row):\n    \"\"\"\n    Finds the start and end indices of the first contiguous block of non-zero pixels \n    in a 1D NumPy array.\n\n    Args:\n        row (np.ndarray): A 1D NumPy array representing a row of the grid.\n\n    Returns:\n        tuple: A tuple containing the start index and end index (inclusive) of the block.\n               Returns (-1, -1) if no non-zero block is found.\n    \"\"\"\n    non_zero_indices = np.where(row != 0)[0] # Find indices of all non-zero elements\n    \n    if non_zero_indices.size == 0:\n        return -1, -1 # No non-zero elements found\n\n    start_index = non_zero_indices[0]\n    end_index = start_index\n    \n    # Iterate from the second potential element in the block\n    for i in range(1, non_zero_indices.size):\n        # Check if the current non-zero index is consecutive to the previous one\n        if non_zero_indices[i] == non_zero_indices[i-1] + 1:\n            end_index = non_zero_indices[i] # Extend the block\n        else:\n            # Found a gap, the first contiguous block ends here\n            break\n            \n    return start_index, end_index\n\ndef cyclic_left_shift(sequence):\n    \"\"\"\n    Performs a cyclic left shift on a list or 1D NumPy array. Moves the first element to the end.\n\n    Args:\n        sequence (list | np.ndarray): The sequence (list or 1D array) to be shifted.\n\n    Returns:\n        list: The cyclically left-shifted sequence as a list. Returns the original \n              sequence as a list if it has 0 or 1 elements.\n    \"\"\"\n    # Convert numpy array to list for easier manipulation\n    if isinstance(sequence, np.ndarray):\n        seq_list = sequence.tolist()\n    else:\n        seq_list = list(sequence) # Ensure it's a list if it wasn't an ndarray\n\n    if not seq_list or len(seq_list) <= 1:\n        return seq_list # Return as list\n        \n    # Perform the cyclic shift using list slicing and concatenation\n    shifted_list = seq_list[1:] + [seq_list[0]]\n    return shifted_list\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by finding a contiguous block of non-zero pixels\n    in the single row and performing a cyclic left shift on the pixels within that block.\n\n    Args:\n        input_grid (np.ndarray): A 1xN NumPy array grid.\n\n    Returns:\n        np.ndarray: The transformed 1xN grid.\n    \"\"\"\n    # Ensure input is a numpy array and has at least one row\n    if not isinstance(input_grid, np.ndarray) or input_grid.shape[0] == 0:\n        # Or handle error appropriately\n        return copy.deepcopy(input_grid) if isinstance(input_grid, np.ndarray) else np.array([]) \n\n    # Create a copy of the input grid to modify for the output\n    output_grid = np.copy(input_grid)\n    \n    # Extract the first (and only expected) row\n    # Need to handle potential empty row case if shape is (1,0)\n    if input_grid.shape[1] == 0:\n        return output_grid # Return copy of empty grid\n        \n    input_row = input_grid[0]\n\n    # Find the contiguous block of non-background (non-zero) pixels in the row\n    start_index, end_index = find_non_background_block(input_row)\n\n    # Check if a valid block was found\n    if start_index != -1:\n        # Extract the block sequence from the original row\n        # Slicing is [start:end+1] for inclusive end index\n        block_sequence = input_row[start_index : end_index + 1] \n\n        # Perform the cyclic left shift on the extracted sequence\n        # cyclic_left_shift returns a list\n        shifted_sequence = cyclic_left_shift(block_sequence) \n\n        # Replace the corresponding segment in the output grid's row \n        # NumPy slicing allows assignment from a list of the correct length\n        output_grid[0, start_index : end_index + 1] = shifted_sequence\n\n    # Return the modified output grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6596,
    "candidates_token_count": 1136,
    "total_token_count": 7732,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.533885,
  "retries": 1
}