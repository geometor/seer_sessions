{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\nimport copy\n\n\"\"\"\nTransforms a single-row grid by swapping the positions of a single non-white pixel (singleton) and an adjacent contiguous block of another non-white color.\n\nThe transformation identifies the singleton pixel and the block based on their colors and contiguity. \nIt then determines their relative positions (singleton left or right of the block).\nFinally, it reconstructs the row by placing the block where the singleton was and the singleton where the block was, effectively swapping their locations while maintaining the block's internal structure and the surrounding white pixels.\n\"\"\"\n\ndef find_objects(row):\n    \"\"\"\n    Identifies the singleton pixel and the contiguous block in the row.\n\n    Args:\n        row: A 1D numpy array representing the input row.\n\n    Returns:\n        A tuple containing:\n        s_idx (int): Index of the singleton pixel.\n        s_color (int): Color of the singleton pixel.\n        b_start (int): Start index of the block.\n        b_end (int): End index of the block (inclusive).\n        b_color (int): Color of the block.\n        b_len (int): Length of the block.\n        Returns None if objects cannot be identified as expected.\n    \"\"\"\n    non_white_indices = np.where(row != 0)[0]\n    if len(non_white_indices) < 2:\n        return None # Not enough non-white pixels\n\n    non_white_colors = row[non_white_indices]\n    color_counts = Counter(non_white_colors)\n\n    if len(color_counts) != 2:\n        return None # Expected exactly two non-white colors\n\n    s_color = -1\n    b_color = -1\n    for color, count in color_counts.items():\n        if count == 1:\n            s_color = color\n        else:\n            b_color = color\n\n    if s_color == -1 or b_color == -1:\n        return None # Failed to identify singleton and block colors\n\n    s_idx = np.where(row == s_color)[0][0]\n    block_indices = np.where(row == b_color)[0]\n\n    # Check for contiguity of the block\n    if not np.all(np.diff(block_indices) == 1):\n        return None # Block pixels are not contiguous\n\n    b_start = block_indices[0]\n    b_end = block_indices[-1]\n    b_len = len(block_indices)\n\n    # Check for adjacency\n    if s_idx != b_start - 1 and s_idx != b_end + 1:\n        return None # Singleton is not adjacent to the block\n\n    return s_idx, s_color, b_start, b_end, b_color, b_len\n\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the singleton-block swap transformation to the input grid.\n\n    Args:\n        input_grid: A 2D numpy array representing the input grid (expected 1xN).\n\n    Returns:\n        A 2D numpy array representing the transformed grid.\n    \"\"\"\n    # Ensure input is a 2D numpy array\n    if not isinstance(input_grid, np.ndarray):\n        input_grid = np.array(input_grid)\n\n    # Check if grid is single row\n    if input_grid.shape[0] != 1:\n        # Handle cases not matching the expected single row structure if necessary\n        # For this task, we assume it's always a single row based on examples\n        # If not, returning the original grid might be a safe default\n        return input_grid\n\n    # Make a copy to modify\n    output_grid = copy.deepcopy(input_grid)\n    row = output_grid[0]\n\n    # Find the singleton and the block\n    object_info = find_objects(row)\n\n    if object_info is None:\n        # If objects aren't found as expected, return the original grid\n        return output_grid\n\n    s_idx, s_color, b_start, b_end, b_color, b_len = object_info\n\n    # Clear the original positions (optional, as we overwrite)\n    # row[s_idx] = 0\n    # row[b_start : b_end + 1] = 0\n\n    # Perform the swap based on relative position\n    if s_idx < b_start:\n        # Singleton was to the left of the block\n        # Place the block starting at the original singleton position\n        row[s_idx : s_idx + b_len] = b_color\n        # Place the singleton immediately after the new block position\n        row[s_idx + b_len] = s_color\n    else: # s_idx > b_end\n        # Singleton was to the right of the block\n        # Place the singleton at the original block start position\n        row[b_start] = s_color\n        # Place the block immediately after the new singleton position\n        row[b_start + 1 : b_start + 1 + b_len] = b_color\n\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2200,
    "candidates_token_count": 1184,
    "total_token_count": 3384,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 30.982232,
  "retries": 1
}