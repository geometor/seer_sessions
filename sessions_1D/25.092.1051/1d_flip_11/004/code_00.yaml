task_type: object_manipulation_within_span
grid_properties:
  dimensionality: 1D (represented as single row)
  size_preservation: True
  background_color: 0 # white
objects:
  - name: singleton
    count: 1
    properties:
      - color: non-white
      - size: 1 pixel
      - unique_color_instance: True # Only one pixel of this color in the input row
  - name: block
    count: 1
    properties:
      - color: non-white, different from singleton
      - shape: contiguous horizontal line
      - size: 1 or more pixels
relationships:
  - type: adjacency
    subject: singleton
    object: block
    details: The singleton is immediately adjacent (left or right) to the block, forming a single contiguous span of non-white pixels.
  - type: location
    subject: singleton
    details: The singleton is located at one of the two ends (leftmost or rightmost position) of the combined non-white span.
actions:
  - name: rearrange_span
    target: the contiguous span formed by the singleton and the block
    details:
      - Identify the start and end indices of the combined non-white span.
      - Extract the sequence of pixels within this span.
      - Perform a circular shift (roll) on the extracted sequence.
      - If the singleton was originally at the left end of the span, roll the sequence left by one position (numpy.roll(sequence, -1)).
      - If the singleton was originally at the right end of the span, roll the sequence right by one position (numpy.roll(sequence, 1)).
      - Place the resulting rolled sequence back into the original span location (start to end indices) in the output grid.
invariants:
  - background_pixels: Unchanged position and color.
  - span_location: The start and end indices of the non-white span remain the same in the output grid.
  - object_colors: The colors of the singleton and block pixels are preserved, only their positions within the span change.
  - grid_dimensions: Unchanged.