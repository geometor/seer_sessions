{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nRecolors contiguous horizontal segments of green pixels (3) based on their length.\n- Green segments of length 1 become maroon (9).\n- Green segments of length 2 become blue (1).\n- Green segments of length 3 become magenta (6).\nOther pixels, including white (0), remain unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef find_horizontal_segments(row, target_color):\n    \"\"\"\n    Finds contiguous horizontal segments of a target color in a 1D array (row).\n\n    Args:\n        row (np.array): A 1D numpy array representing a row of the grid.\n        target_color (int): The color value to search for.\n\n    Returns:\n        list: A list of tuples, where each tuple represents a segment\n              in the format (start_index, end_index, length).\n              Indices are inclusive.\n    \"\"\"\n    segments = []\n    start_index = -1\n    for i, pixel in enumerate(row):\n        if pixel == target_color and start_index == -1:\n            # Start of a potential segment\n            start_index = i\n        elif pixel != target_color and start_index != -1:\n            # End of the current segment\n            end_index = i - 1\n            length = end_index - start_index + 1\n            segments.append((start_index, end_index, length))\n            start_index = -1 # Reset for the next segment\n    # Check if a segment extends to the end of the row\n    if start_index != -1:\n        end_index = len(row) - 1\n        length = end_index - start_index + 1\n        segments.append((start_index, end_index, length))\n    return segments\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by recoloring green segments based on their length.\n\n    Args:\n        input_grid (list of lists): The input grid represented as a 2D list.\n\n    Returns:\n        list of lists: The transformed grid.\n    \"\"\"\n    # Convert input grid to a numpy array for easier manipulation\n    input_array = np.array(input_grid, dtype=int)\n    # Initialize output_grid as a copy of the input\n    output_array = np.copy(input_array)\n\n    # Define the color mapping based on segment length\n    color_map = {\n        1: 9,  # Length 1 -> Maroon (9)\n        2: 1,  # Length 2 -> Blue (1)\n        3: 6   # Length 3 -> Magenta (6)\n    }\n    target_color = 3 # Green\n\n    # Iterate through each row of the grid\n    for r in range(output_array.shape[0]):\n        row = input_array[r, :]\n        # Find all horizontal segments of the target color (green) in the current row\n        green_segments = find_horizontal_segments(row, target_color)\n\n        # Process each found segment\n        for start_col, end_col, length in green_segments:\n            # Check if the length has a corresponding color in the map\n            if length in color_map:\n                output_color = color_map[length]\n                # Recolor the segment in the output grid\n                output_array[r, start_col : end_col + 1] = output_color\n            # If a green segment has a length not in the map (e.g., > 3),\n            # it will remain green in the output as per the current logic.\n\n    # Convert the numpy array back to a list of lists for the final output\n    return output_array.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2405,
    "candidates_token_count": 845,
    "total_token_count": 3250,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.246381,
  "retries": 1
}