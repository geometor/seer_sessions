{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nRecolors contiguous objects composed of azure (8) pixels based on their size.\n- Objects of size 1 become orange (7).\n- Objects of size 2 become green (3).\n- Objects of size 3 become blue (1).\nAll other pixels, including the white (0) background, remain unchanged.\nContiguity is defined by horizontal and vertical adjacency.\n\"\"\"\n\ndef find_objects(grid, target_color):\n    \"\"\"\n    Finds all contiguous objects of a specific color in the grid.\n\n    Args:\n        grid (np.ndarray): The input grid.\n        target_color (int): The color of the objects to find.\n\n    Returns:\n        list: A list of objects, where each object is a list of\n              pixel coordinates [(r1, c1), (r2, c2), ...].\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n\n    for r in range(rows):\n        for c in range(cols):\n            # If we find a pixel of the target color that hasn't been visited yet,\n            # start a search (BFS) to find the entire object it belongs to.\n            if grid[r, c] == target_color and not visited[r, c]:\n                current_object_coords = []\n                q = deque([(r, c)])\n                visited[r, c] = True\n\n                while q:\n                    curr_r, curr_c = q.popleft()\n                    current_object_coords.append((curr_r, curr_c))\n\n                    # Check neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = curr_r + dr, curr_c + dc\n\n                        # Check bounds, target color, and visited status\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] == target_color and not visited[nr, nc]:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n\n                # Add the found object (list of coordinates) to our list of objects\n                if current_object_coords:\n                    objects.append(current_object_coords)\n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by recoloring azure (8) objects based on size.\n\n    Args:\n        input_grid (list of lists): The input grid represented as a list of lists.\n\n    Returns:\n        list of lists: The transformed grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    # Initialize output_grid as a copy of the input\n    output_grid = input_np.copy()\n\n    # Define the target color (azure)\n    target_color = 8\n\n    # Find all azure objects in the input grid\n    azure_objects = find_objects(input_np, target_color)\n\n    # Define the size-to-color mapping\n    size_to_color_map = {\n        1: 7,  # orange\n        2: 3,  # green\n        3: 1   # blue\n    }\n\n    # Process each found object\n    for obj_coords in azure_objects:\n        # Calculate the size of the object\n        obj_size = len(obj_coords)\n\n        # Determine the new color based on size, default to original if size not in map\n        new_color = size_to_color_map.get(obj_size, target_color) # Defaults to 8 if size unknown\n\n        # Recolor the pixels belonging to this object in the output grid\n        for r, c in obj_coords:\n            output_grid[r, c] = new_color\n\n    # Convert the numpy array back to a list of lists for the final output\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2157,
    "candidates_token_count": 933,
    "total_token_count": 3090,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.760417,
  "retries": 1
}