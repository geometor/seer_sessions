{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentify all distinct contiguous objects composed of azure (8) pixels in the input grid.\nContiguous means sharing a side (horizontally or vertically).\nFor each azure object, count the number of pixels it contains (its size).\nRecolor the object in the output grid based on its size according to the following map:\n- Size 1: Change color to red (2).\n- Size 2: Change color to blue (1).\n- Size 3: Change color to magenta (6).\nObjects of other sizes, if any, remain azure (8).\nThe background (white, 0) and the shape/position of objects are preserved.\n\"\"\"\n\ndef find_connected_pixels(grid, start_row, start_col, target_color, visited):\n    \"\"\"\n    Finds all connected pixels of a target color starting from a given point using BFS.\n\n    Args:\n        grid (np.array): The input grid.\n        start_row (int): The starting row index.\n        start_col (int): The starting column index.\n        target_color (int): The color of the pixels to find.\n        visited (set): A set of (row, col) tuples already visited.\n\n    Returns:\n        list: A list of (row, col) tuples representing the connected component.\n              Returns an empty list if the start pixel is not the target color\n              or has already been visited.\n    \"\"\"\n    rows, cols = grid.shape\n    if not (0 <= start_row < rows and 0 <= start_col < cols) or \\\n       grid[start_row, start_col] != target_color or \\\n       (start_row, start_col) in visited:\n        return []\n\n    object_pixels = []\n    q = deque([(start_row, start_col)])\n    visited.add((start_row, start_col))\n\n    while q:\n        r, c = q.popleft()\n        object_pixels.append((r, c))\n\n        # Check orthogonal neighbors (up, down, left, right)\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n\n            # Check bounds, target color, and if visited\n            if 0 <= nr < rows and 0 <= nc < cols and \\\n               grid[nr, nc] == target_color and \\\n               (nr, nc) not in visited:\n                visited.add((nr, nc))\n                q.append((nr, nc))\n\n    return object_pixels\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by recoloring azure (8) objects based on their size.\n    Size 1 -> Red (2)\n    Size 2 -> Blue (1)\n    Size 3 -> Magenta (6)\n    Other sizes remain azure (8).\n\n    Args:\n        input_grid (list of list of int): The input grid.\n\n    Returns:\n        list of list of int: The transformed output grid.\n    \"\"\"\n    # Convert input to numpy array for easier handling\n    input_np = np.array(input_grid, dtype=int)\n    # Initialize output grid as a copy of the input\n    output_grid = input_np.copy()\n    rows, cols = input_np.shape\n    \n    # Keep track of pixels already processed as part of an object\n    visited = set()\n    \n    # Define the target color to find objects of\n    target_color = 8\n    \n    # Define the mapping from object size to output color\n    color_map = {\n        1: 2,  # Size 1 -> Red\n        2: 1,  # Size 2 -> Blue\n        3: 6   # Size 3 -> Magenta\n    }\n\n    # Iterate through each pixel of the input grid\n    for r in range(rows):\n        for c in range(cols):\n            # Check if the pixel is the target color and hasn't been visited yet\n            if input_np[r, c] == target_color and (r, c) not in visited:\n                # Find all connected pixels forming the object starting from (r, c)\n                current_object_pixels = find_connected_pixels(input_np, r, c, target_color, visited)\n                \n                # If an object was found (should always be true if we enter here)\n                if current_object_pixels:\n                    object_size = len(current_object_pixels)\n                    \n                    # Determine the output color based on the object's size\n                    # If the size is not in the map, default to the original target color\n                    output_color = color_map.get(object_size, target_color)\n                    \n                    # Recolor all pixels belonging to this object in the output grid\n                    for obj_r, obj_c in current_object_pixels:\n                        output_grid[obj_r, obj_c] = output_color\n\n    # Convert the final numpy array back to a list of lists\n    return output_grid.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2149,
    "candidates_token_count": 1169,
    "total_token_count": 3318,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 24.356922,
  "retries": 1
}