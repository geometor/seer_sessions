{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentifies connected components (objects) of magenta (6) pixels in the input grid,\nconsidering 8-way connectivity (horizontal, vertical, and diagonal).\nDetermines the size (number of pixels) of each magenta object.\nReplaces the pixels of each magenta object in the output grid with a new color \nbased on its size:\n- Size 1: Green (3)\n- Size 2: Azure (8)\n- Size 3: Maroon (9)\nLeaves all other pixels (background) unchanged.\n\"\"\"\n\ndef find_connected_objects(grid, target_color):\n    \"\"\"\n    Finds all connected objects of a specific color in the grid.\n\n    Args:\n        grid (np.ndarray): The input grid.\n        target_color (int): The color of the objects to find.\n\n    Returns:\n        list: A list where each element is a list of coordinates (tuples) \n              belonging to a single connected object.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n\n    # Define 8-way connectivity (including diagonals)\n    directions = [\n        (-1, -1), (-1, 0), (-1, 1),\n        (0, -1),           (0, 1),\n        (1, -1), (1, 0), (1, 1)\n    ]\n\n    for r in range(rows):\n        for c in range(cols):\n            # If the cell has the target color and hasn't been visited yet\n            if grid[r, c] == target_color and not visited[r, c]:\n                current_object_pixels = []\n                q = deque([(r, c)])\n                visited[r, c] = True\n\n                # Start Breadth-First Search (BFS)\n                while q:\n                    curr_r, curr_c = q.popleft()\n                    current_object_pixels.append((curr_r, curr_c))\n\n                    # Explore neighbors\n                    for dr, dc in directions:\n                        nr, nc = curr_r + dr, curr_c + dc\n\n                        # Check bounds\n                        if 0 <= nr < rows and 0 <= nc < cols:\n                            # Check if neighbor has the target color and hasn't been visited\n                            if grid[nr, nc] == target_color and not visited[nr, nc]:\n                                visited[nr, nc] = True\n                                q.append((nr, nc))\n                \n                # Add the found object to the list of objects\n                if current_object_pixels:\n                    objects.append(current_object_pixels)\n                    \n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by changing the color of magenta objects based on their size.\n\n    Args:\n        input_grid (np.ndarray): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.ndarray: A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    # Initialize output_grid as a copy of the input grid\n    output_grid = np.copy(input_grid)\n    \n    # Define the mapping from object size to output color\n    size_to_color = {\n        1: 3,  # Green\n        2: 8,  # Azure\n        3: 9   # Maroon\n    }\n    \n    # Find all magenta (6) objects\n    magenta_objects = find_connected_objects(input_grid, 6)\n\n    # Process each found magenta object\n    for obj_pixels in magenta_objects:\n        # Calculate the size of the object\n        obj_size = len(obj_pixels)\n        \n        # Determine the target color based on size, default to original if size not mapped\n        target_color = size_to_color.get(obj_size, 6) # Keep magenta if size unknown\n        \n        # Change the color of the object's pixels in the output grid\n        for r, c in obj_pixels:\n            output_grid[r, c] = target_color\n            \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2210,
    "candidates_token_count": 953,
    "total_token_count": 3163,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.689671,
  "retries": 1
}