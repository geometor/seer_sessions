{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nRecolors contiguous red (2) objects based on their size:\n- Objects of size 1 become orange (7).\n- Objects of size 2 become green (3).\n- Objects of size 3 become blue (1).\nOther pixels, including the white (0) background, remain unchanged.\nConnectivity is defined by horizontal and vertical adjacency (4-connectivity).\n\"\"\"\n\ndef find_objects(grid, target_color):\n    \"\"\"\n    Finds all contiguous objects of a specific color in a grid using BFS.\n\n    Args:\n        grid (np.array): The input grid.\n        target_color (int): The color of the objects to find.\n\n    Returns:\n        list: A list of objects, where each object is a list of (row, col) tuples.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = set()\n    objects = []\n\n    for r in range(rows):\n        for c in range(cols):\n            # If the cell is the target color and hasn't been visited yet, start a search\n            if grid[r, c] == target_color and (r, c) not in visited:\n                current_object = []\n                q = deque([(r, c)])\n                visited.add((r, c))\n\n                while q:\n                    row, col = q.popleft()\n                    current_object.append((row, col))\n\n                    # Check 4 neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n\n                        # Check boundaries\n                        if 0 <= nr < rows and 0 <= nc < cols:\n                            # Check if neighbor is the target color and not visited\n                            if grid[nr, nc] == target_color and (nr, nc) not in visited:\n                                visited.add((nr, nc))\n                                q.append((nr, nc))\n                \n                # Add the found object to the list\n                if current_object:\n                    objects.append(current_object)\n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by recoloring red objects based on their size.\n    \"\"\"\n    input_grid_np = np.array(input_grid)\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid_np)\n    \n    input_object_color = 2 # red\n\n    # Define the color mapping based on object size\n    color_map = {\n        1: 7, # orange\n        2: 3, # green\n        3: 1  # blue\n    }\n\n    # Find all red objects in the input grid\n    red_objects = find_objects(input_grid_np, input_object_color)\n\n    # Process each found red object\n    for obj in red_objects:\n        # Calculate the size of the object\n        obj_size = len(obj)\n\n        # Determine the output color based on size, default to original if size not in map\n        output_color = color_map.get(obj_size, input_object_color) \n\n        # Recolor the pixels belonging to this object in the output grid\n        for r, c in obj:\n            output_grid[r, c] = output_color\n\n    # Return the modified grid as a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2131,
    "candidates_token_count": 807,
    "total_token_count": 2938,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.646565,
  "retries": 1
}