{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentifies contiguous objects of orange (7) pixels in the input grid.\nDetermines the size (number of pixels) of each orange object.\nReplaces the orange pixels of each object in the output grid with a new color based on the object's size:\n- Size 1: Replace with green (3).\n- Size 3: Replace with magenta (6).\n- Size 4: Replace with red (2).\nAll other pixels (including white background) remain unchanged.\n\"\"\"\n\ndef find_objects(grid, color):\n    \"\"\"\n    Finds all connected components (objects) of a given color in the grid.\n\n    Args:\n        grid (np.array): The input grid.\n        color (int): The color of the objects to find.\n\n    Returns:\n        list: A list of objects, where each object is a list of (row, col) tuples.\n    \"\"\"\n    height, width = grid.shape\n    visited = np.zeros((height, width), dtype=bool)\n    objects = []\n\n    for r in range(height):\n        for c in range(width):\n            # If we find a pixel of the target color that hasn't been visited, start a search\n            if grid[r, c] == color and not visited[r, c]:\n                current_object_coords = []\n                q = deque([(r, c)])  # Use deque for efficient BFS queue\n                visited[r, c] = True\n\n                while q:\n                    row, col = q.popleft() # BFS\n                    current_object_coords.append((row, col))\n\n                    # Check neighbors (4-way adjacency: up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n\n                        # Check bounds and if the neighbor is the target color and not visited\n                        if 0 <= nr < height and 0 <= nc < width and \\\n                           grid[nr, nc] == color and not visited[nr, nc]:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n                \n                # Add the found object (list of coordinates) to our list of objects\n                if current_object_coords:\n                    objects.append(current_object_coords)\n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on the size of orange objects.\n    \"\"\"\n    # Initialize output_grid as a copy of the input grid\n    output_grid = np.copy(input_grid)\n\n    # Define colors\n    orange_color = 7\n    green_color = 3\n    magenta_color = 6\n    red_color = 2\n\n    # Find all distinct orange objects in the input grid\n    orange_objects = find_objects(input_grid, orange_color)\n\n    # Iterate through each found orange object\n    for obj_coords in orange_objects:\n        # Calculate the size of the current object\n        obj_size = len(obj_coords)\n\n        # Determine the target color based on the object's size\n        target_color = -1 # Initialize with a value indicating no rule matched\n        if obj_size == 1:\n            target_color = green_color\n        elif obj_size == 3:\n            target_color = magenta_color\n        elif obj_size == 4:\n            target_color = red_color\n\n        # If a size rule matched, change the pixels in the output grid\n        if target_color != -1:\n            for r, c in obj_coords:\n                output_grid[r, c] = target_color\n        # If no rule matched (e.g., size 2 or 5+), the pixels retain their original orange color\n        # because output_grid was initialized as a copy of input_grid.\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2205,
    "candidates_token_count": 904,
    "total_token_count": 3109,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 18.90432,
  "retries": 1
}