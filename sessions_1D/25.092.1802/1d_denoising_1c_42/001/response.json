{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nIdentifies the primary non-background color in the input grid.\nFinds all contiguous objects composed of this primary color (using horizontal/vertical adjacency).\nDetermines the object with the largest number of pixels.\nCreates an output grid containing only the pixels of this largest object, with all other pixels set to the background color (0).\n\"\"\"\n\ndef find_objects(grid, target_color):\n    \"\"\"\n    Finds all contiguous objects of a specific color in the grid.\n\n    Args:\n        grid (np.array): The input grid.\n        target_color (int): The color of the objects to find.\n\n    Returns:\n        list: A list of sets, where each set contains the (row, col) coordinates\n              of the pixels belonging to a single contiguous object.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n\n    for r in range(rows):\n        for c in range(cols):\n            # If we find a pixel of the target color that hasn't been visited yet,\n            # start a search (BFS) to find its connected component (object).\n            if grid[r, c] == target_color and not visited[r, c]:\n                obj_coords = set()\n                q = [(r, c)] # Queue for BFS\n                visited[r, c] = True\n\n                while q:\n                    row, col = q.pop(0)\n                    obj_coords.add((row, col))\n\n                    # Check neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n\n                        # Check if neighbor is within bounds\n                        if 0 <= nr < rows and 0 <= nc < cols:\n                            # Check if neighbor is the target color and not visited\n                            if grid[nr, nc] == target_color and not visited[nr, nc]:\n                                visited[nr, nc] = True\n                                q.append((nr, nc))\n                \n                if obj_coords: # Should always be true here, but good practice\n                    objects.append(obj_coords)\n                    \n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Filters the input grid to keep only the largest contiguous object of the\n    primary non-background color.\n\n    Args:\n        input_grid (np.array): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.array: A 2D numpy array representing the output grid.\n    \"\"\"\n    \n    # 1. Identify the primary non-background color\n    # Find unique non-zero colors and assume the most frequent one is primary\n    # Or simpler: find *any* non-zero color if examples guarantee only one.\n    unique_colors, counts = np.unique(input_grid, return_counts=True)\n    primary_color = 0 \n    for color in unique_colors:\n        if color != 0:\n            primary_color = color\n            break # Assume only one non-background color based on examples\n            \n    if primary_color == 0: # Handle case of all background pixels\n        return np.copy(input_grid)\n\n    # 2. Find all distinct contiguous objects of the primary color\n    objects = find_objects(input_grid, primary_color)\n\n    # 3. Calculate sizes and find the largest object\n    largest_object_coords = set()\n    max_size = 0\n    if objects: # Check if any objects were found\n        for obj in objects:\n            if len(obj) > max_size:\n                max_size = len(obj)\n                largest_object_coords = obj\n        \n    # 4. Create the output grid (initialized with background color)\n    output_grid = np.zeros_like(input_grid) # Fills with 0 (background)\n\n    # 5. Populate the output grid with the largest object\n    for r, c in largest_object_coords:\n        output_grid[r, c] = primary_color\n\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2157,
    "candidates_token_count": 959,
    "total_token_count": 3116,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.034276,
  "retries": 1
}