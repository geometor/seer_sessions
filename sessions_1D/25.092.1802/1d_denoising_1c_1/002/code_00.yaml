task_description: Identify the longest contiguous horizontal sequence (block) of non-white pixels within the input row. Construct an output row of the same dimensions where only the pixels corresponding to this longest block retain their original color and position, and all other pixels are set to white.
problem_type: object_selection # Selects an object based on a property max
grid_dimensionality: 1D # All examples show 1xN grids
input_elements:
  - element: row
    description: A single row of pixels (1xN grid).
    properties:
      width: Variable (32 in examples)
      background_color: white (0)
  - element: block
    description: A contiguous horizontal sequence of one or more non-white pixels within the row.
    properties:
      color: Any non-white color (red=2, orange=7 in examples)
      length: The number of pixels in the sequence.
      start_index: The 0-based index of the first pixel in the block.
      end_index: The 0-based index of the last pixel in the block.
output_elements:
  - element: row
    description: A single row of pixels with the same dimensions as the input.
    properties:
      content: Contains only the pixels from the single longest block found in the input row, preserved in their original positions. All other pixels are white (0).
relationships:
  - type: separation
    description: Blocks in the input row are separated by one or more white pixels.
  - type: comparison
    description: The lengths of all identified blocks in the input row are compared.
actions:
  - action: find_blocks
    input: input row
    output: list of all non-white contiguous blocks (with start, end, length).
  - action: measure_length
    input: block
    output: length (integer).
  - action: find_maximum_length
    input: list of block lengths
    output: maximum length value.
  - action: select_longest_block
    input: list of blocks, maximum length value
    output: the block matching the maximum length. (If ties, select the first one encountered).
  - action: construct_output
    input: input row dimensions, selected longest block
    output: output row.
    steps:
      - Create a row filled with white (0) pixels, matching input dimensions.
      - If a longest block was selected, copy the pixels from the input row corresponding to the start/end indices of the longest block into the output row.
uncertainties:
  - Tie-breaking: How to handle multiple blocks sharing the same maximum length. The examples do not cover this. The assumed rule (and implementation) is to select the *first* (leftmost) block encountered with the maximum length.