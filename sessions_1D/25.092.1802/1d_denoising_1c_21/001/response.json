{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentifies all connected components (objects) of non-white pixels in the input grid using orthogonal connectivity. \nDetermines the component with the largest number of pixels.\nCreates an output grid of the same dimensions as the input, initialized with the background color (white/0).\nPlaces only the pixels belonging to the largest component onto the output grid at their original positions and with their original color. \nIf multiple components share the largest size, the behavior based on the provided examples is to select one (implicitly the first one found during the search, though the problem description doesn't explicitly handle ties - assuming a single largest based on examples). If no non-white components exist, returns the background grid.\n\"\"\"\n\ndef find_connected_components(grid):\n    \"\"\"\n    Finds all connected components of non-background (non-zero) pixels.\n\n    Args:\n        grid (np.ndarray): The input grid.\n\n    Returns:\n        list: A list of components, where each component is a list of\n              (row, col, color) tuples.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n    components = []\n\n    for r in range(rows):\n        for c in range(cols):\n            # If it's a non-background pixel and not visited yet\n            if grid[r, c] != 0 and not visited[r, c]:\n                component_color = grid[r, c]\n                current_component = []\n                q = deque([(r, c)])\n                visited[r, c] = True\n\n                while q:\n                    row, col = q.popleft()\n                    # Add pixel to the current component\n                    current_component.append((row, col, component_color))\n\n                    # Check orthogonal neighbors\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n\n                        # Check bounds and if neighbor has the same color and not visited\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           not visited[nr, nc] and grid[nr, nc] == component_color:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n                \n                if current_component:\n                    components.append(current_component)\n                    \n    return components\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by isolating the largest connected component of non-white pixels.\n\n    Args:\n        input_grid (list of lists): The input grid represented as a list of lists.\n\n    Returns:\n        list of lists: The transformed grid containing only the largest component.\n    \"\"\"\n    # Convert input to numpy array for easier processing\n    input_array = np.array(input_grid, dtype=int)\n    rows, cols = input_array.shape\n    \n    # Initialize output grid with background color (0)\n    output_grid = np.zeros((rows, cols), dtype=int)\n\n    # Find all connected components of non-white pixels\n    components = find_connected_components(input_array)\n\n    # If no components are found, return the blank grid\n    if not components:\n        return output_grid.tolist()\n\n    # Find the largest component\n    largest_component = max(components, key=len) # Find component with max length (size)\n\n    # Populate the output grid with the pixels from the largest component\n    for r, c, color in largest_component:\n        output_grid[r, c] = color\n        \n    # Convert the numpy array back to a list of lists for the final output\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2216,
    "candidates_token_count": 855,
    "total_token_count": 3071,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.983113,
  "retries": 1
}