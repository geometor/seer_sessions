{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Dict, Tuple\n\n# Color mapping (for reference, not used in logic)\nCOLOR_MAP = {\n    0: (238, 238, 238),  # white\n    1: (30, 147, 255),  # blue\n    2: (220, 50, 40),  # red\n    3: (79, 204, 48),  # green\n    4: (230, 200, 0),  # yellow\n    5: (85, 85, 85),  # gray\n    6: (229, 58, 163),  # magenta\n    7: (230, 120, 20),  # orange\n    8: (135, 216, 241),  # azure\n    9: (146, 18, 49),  # maroon\n}\n\n\"\"\"\nTransforms the input grid by identifying the primary non-white color, finding the\nlongest continuous horizontal segment (run) of that color across all rows, and\ncreating an output grid containing only that longest segment against a white (0)\nbackground. If multiple segments share the maximum length, the one in the topmost\nrow is selected.\n\"\"\"\n\ndef find_segments_in_row(row: np.ndarray, color: int) -> List[Dict[str, int]]:\n    \"\"\"\n    Finds all continuous horizontal segments of a given color in a single row.\n\n    Args:\n        row: A 1D numpy array representing a row of the grid.\n        color: The target color integer to find segments of.\n\n    Returns:\n        A list of dictionaries, where each dictionary represents a segment\n        and contains 'start' (column index), 'end' (column index), and 'len' (length).\n        Returns an empty list if no segments of the specified color are found.\n    \"\"\"\n    segments = []\n    start_col = -1\n    row_len = len(row)\n    for c, pixel in enumerate(row):\n        # Start of a new segment\n        if pixel == color and start_col == -1:\n            start_col = c\n        # End of the current segment (pixel color changed or still same color but start_col is set)\n        elif pixel != color and start_col != -1:\n            segments.append({'start': start_col, 'end': c - 1, 'len': c - start_col})\n            start_col = -1 # Reset for next potential segment\n\n    # Handle a segment that extends to the very end of the row\n    if start_col != -1:\n        segments.append({'start': start_col, 'end': row_len - 1, 'len': row_len - start_col})\n\n    return segments\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Applies the transformation logic to find and isolate the longest horizontal\n    segment of the primary non-white color.\n\n    Args:\n        input_grid: A list of lists representing the input grid.\n\n    Returns:\n        A list of lists representing the output grid.\n    \"\"\"\n    # Convert input to numpy array for easier processing\n    input_np = np.array(input_grid, dtype=int)\n\n    # Initialize output grid with the same shape, filled with background color (0)\n    output_grid = np.zeros_like(input_np)\n    rows, cols = input_np.shape\n\n    # Identify the primary non-white color in the grid\n    # We assume there is at most one dominant non-white color based on examples\n    primary_color = 0\n    unique_colors = np.unique(input_np)\n    for color in unique_colors:\n        if color != 0:\n            primary_color = color\n            break\n\n    # If the grid is entirely white or no non-white color is found, return the empty grid\n    if primary_color == 0:\n        return output_grid.tolist()\n\n    # Variables to store information about the longest segment found so far\n    max_len = 0\n    # Stores {'row': r, 'start': start_col, 'end': end_col}\n    best_segment_info = None\n\n    # Iterate through each row to find all horizontal segments of the primary color\n    for r in range(rows):\n        # Find all segments of the primary color in the current row\n        row_segments = find_segments_in_row(input_np[r, :], primary_color)\n\n        # Check if any segment in this row is longer than the current max\n        for segment in row_segments:\n            # If current segment is strictly longer, it becomes the new best\n            if segment['len'] > max_len:\n                max_len = segment['len']\n                best_segment_info = {'row': r, 'start': segment['start'], 'end': segment['end']}\n            # Tie-breaking: if lengths are equal, we prefer the segment in the topmost row.\n            # Since we iterate row by row from top (r=0), an equal length segment found\n            # later (larger 'r') will not replace the existing 'best_segment_info'.\n\n    # If a longest segment was found, draw it onto the output grid\n    if best_segment_info is not None:\n        r = best_segment_info['row']\n        start_col = best_segment_info['start']\n        end_col = best_segment_info['end'] # end_col is inclusive\n\n        # Fill the pixels of the longest segment in the output grid\n        for c in range(start_col, end_col + 1):\n             output_grid[r, c] = primary_color\n\n    # Convert the numpy array back to a list of lists before returning\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2259,
    "candidates_token_count": 1363,
    "total_token_count": 3622,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 30.910186,
  "retries": 1
}