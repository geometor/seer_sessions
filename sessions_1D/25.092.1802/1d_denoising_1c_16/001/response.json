{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nIdentify the largest contiguous block of solid, non-white rows in the input grid. \nPreserve only this block in the output grid, setting all other pixels to white (0).\nA solid row consists entirely of a single non-white color.\nA block is a vertically contiguous sequence of solid rows of the same color.\nThe largest block is the one with the greatest number of rows (height).\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by identifying the largest block of solid, \n    non-white rows and preserving only that block.\n\n    Args:\n        input_grid (list of list of int): The input grid.\n\n    Returns:\n        list of list of int: The transformed grid.\n    \"\"\"\n    input_array = np.array(input_grid, dtype=int)\n    height, width = input_array.shape\n    \n    # Initialize output grid with white (0)\n    output_grid = np.zeros_like(input_array)\n\n    # --- Find solid rows ---\n    solid_rows = []  # Store tuples: (row_index, color)\n    for r in range(height):\n        row = input_array[r, :]\n        unique_colors = np.unique(row)\n        # Check if the row has exactly one unique color and it's not white (0)\n        if len(unique_colors) == 1 and unique_colors[0] != 0:\n            solid_rows.append((r, unique_colors[0]))\n\n    # If no solid rows found, return the all-white grid\n    if not solid_rows:\n        return output_grid.tolist()\n\n    # --- Group solid rows into contiguous blocks of the same color ---\n    blocks = []  # Store tuples: (start_row, end_row, color, height)\n    if not solid_rows: # Should be redundant due to above check, but safe\n         return output_grid.tolist()\n\n    current_block_start_index = 0\n    while current_block_start_index < len(solid_rows):\n        start_row, color = solid_rows[current_block_start_index]\n        current_height = 1\n        \n        # Look ahead to find contiguous rows of the same color\n        next_row_in_block_index = current_block_start_index + 1\n        while (next_row_in_block_index < len(solid_rows) and\n               solid_rows[next_row_in_block_index][0] == start_row + current_height and # Check contiguity\n               solid_rows[next_row_in_block_index][1] == color): # Check same color\n            current_height += 1\n            next_row_in_block_index += 1\n            \n        end_row = start_row + current_height - 1\n        blocks.append((start_row, end_row, color, current_height))\n        \n        # Move to the start of the next potential block\n        current_block_start_index = next_row_in_block_index\n\n    # --- Select the largest block (by height) ---\n    if not blocks: # If somehow no blocks were formed\n        return output_grid.tolist()\n        \n    # Find the block with the maximum height\n    # In case of ties in height, max() naturally takes the first one encountered in the list 'blocks'\n    largest_block = max(blocks, key=lambda item: item[3])\n    \n    # --- Construct the output grid ---\n    start_r, end_r, _, _ = largest_block\n    \n    # Copy the largest block from the input array to the output grid\n    output_grid[start_r : end_r + 1, :] = input_array[start_r : end_r + 1, :]\n\n    # Return the result as a list of lists\n    return output_grid.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2355,
    "candidates_token_count": 903,
    "total_token_count": 3258,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 22.204444,
  "retries": 1
}