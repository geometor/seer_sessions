{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentify all unique non-background colors present in the input grid.\nFor each unique non-background color:\n  Find all distinct connected components (objects) composed of pixels of this color (using horizontal/vertical adjacency).\n  Calculate the size (number of pixels) of each component.\n  Identify the component with the maximum size.\nInitialize an output grid of the same dimensions as the input, filled with the background color (white, 0).\nFor each non-background color, add the pixels of its largest component to the output grid, preserving their original color.\nThe resulting grid is the final output.\n\"\"\"\n\ndef find_connected_components(grid, color):\n    \"\"\"\n    Finds all connected components of a specific color in a grid.\n\n    Args:\n        grid (np.array): The input grid.\n        color (int): The color to find components for.\n\n    Returns:\n        list: A list of components, where each component is a list of (row, col) tuples.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = set()\n    components = []\n\n    for r in range(rows):\n        for c in range(cols):\n            # Check if the current cell is the target color and hasn't been visited\n            if grid[r, c] == color and (r, c) not in visited:\n                # Start a Breadth-First Search (BFS) to find the component\n                current_component = []\n                q = deque([(r, c)])\n                visited.add((r, c))\n\n                while q:\n                    row, col = q.popleft()\n                    current_component.append((row, col))\n\n                    # Check neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n\n                        # Check boundaries\n                        if 0 <= nr < rows and 0 <= nc < cols:\n                            # Check if neighbor is the target color and not visited\n                            if grid[nr, nc] == color and (nr, nc) not in visited:\n                                visited.add((nr, nc))\n                                q.append((nr, nc))\n                \n                # Add the found component to the list\n                if current_component:\n                    components.append(current_component)\n    return components\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by keeping only the largest connected component\n    for each non-background color.\n\n    Args:\n        input_grid (np.array): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.array: A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    input_grid = np.array(input_grid) # Ensure input is a numpy array\n    rows, cols = input_grid.shape\n    background_color = 0\n\n    # Initialize output_grid with the background color\n    output_grid = np.full((rows, cols), background_color, dtype=int)\n\n    # Find unique non-background colors\n    unique_colors = np.unique(input_grid)\n    non_background_colors = [color for color in unique_colors if color != background_color]\n\n    # Process each non-background color\n    for color in non_background_colors:\n        # Find all connected components of the current color\n        components = find_connected_components(input_grid, color)\n\n        # If no components found for this color, continue\n        if not components:\n            continue\n\n        # Find the largest component (by number of pixels)\n        largest_component = max(components, key=len)\n\n        # Add the pixels of the largest component to the output grid\n        for r, c in largest_component:\n            output_grid[r, c] = color\n\n    return output_grid.tolist() # Return as a list of lists\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2118,
    "candidates_token_count": 901,
    "total_token_count": 3019,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.923935,
  "retries": 1
}