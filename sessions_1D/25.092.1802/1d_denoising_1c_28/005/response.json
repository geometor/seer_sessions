{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies all contiguous objects for each non-background color in the input grid. \nFor each color, retains only the object(s) with the largest area (pixel count), \nchanging all pixels belonging to smaller objects of that same color to the \nbackground color (0). Contiguity is defined by cardinal adjacency (up, down, left, right).\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef _find_objects_of_color(grid, color):\n    \"\"\"\n    Finds all contiguous objects of a specific color in the grid using BFS.\n\n    Args:\n        grid (np.array): The 2D input grid.\n        color (int): The color of the objects to find.\n\n    Returns:\n        list[set]: A list where each element is a set of (row, col) tuples\n                   representing the coordinates of one object. Returns an empty\n                   list if no objects of the specified color are found.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects_coords = [] # Stores lists of coordinates for each found object\n\n    # Iterate through each cell in the grid\n    for r in range(rows):\n        for c in range(cols):\n            # If the cell has the target color and hasn't been visited yet,\n            # start a BFS to find the connected object.\n            if grid[r, c] == color and not visited[r, c]:\n                current_object_coords = set()\n                q = deque([(r, c)])\n                visited[r, c] = True\n                current_object_coords.add((r, c))\n\n                # Perform BFS\n                while q:\n                    row, col = q.popleft() # Current pixel being processed\n\n                    # Explore neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc # Neighbor coordinates\n\n                        # Check if the neighbor is within grid boundaries\n                        if 0 <= nr < rows and 0 <= nc < cols:\n                            # Check if the neighbor has the target color and hasn't been visited\n                            if grid[nr, nc] == color and not visited[nr, nc]:\n                                visited[nr, nc] = True\n                                q.append((nr, nc))\n                                # Correctly add the *neighbor's* coordinates\n                                current_object_coords.add((nr, nc)) \n\n                # Add the found object's coordinates to the list if it's not empty\n                if current_object_coords:\n                    objects_coords.append(current_object_coords)\n                    \n    return objects_coords\n\ndef transform(input_grid):\n    \"\"\"\n    Filters the input grid to keep only the largest object for each non-background color.\n\n    Args:\n        input_grid (np.array): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.array: A 2D numpy array representing the transformed grid.\n    \"\"\"\n    # initialize output_grid with the same shape as input, filled with background color 0\n    output_grid = np.zeros_like(input_grid)\n    rows, cols = input_grid.shape\n\n    # Find all unique non-background colors present in the input grid\n    unique_colors = np.unique(input_grid)\n    non_background_colors = unique_colors[unique_colors != 0]\n\n    # Create a set to store the coordinates of all pixels belonging to the largest objects\n    pixels_to_keep = set()\n\n    # Process each non-background color individually\n    for color in non_background_colors:\n        # Find all contiguous objects of the current color\n        objects = _find_objects_of_color(input_grid, color)\n\n        # If no objects of this color were found, skip to the next color\n        if not objects:\n            continue\n\n        # Determine the maximum size (number of pixels) among all objects of this color\n        max_size = 0\n        for obj_coords in objects:\n            max_size = max(max_size, len(obj_coords))\n\n        # Identify all objects that have this maximum size and add their pixels to the keep set\n        # This handles potential ties for the largest size.\n        for obj_coords in objects:\n            if len(obj_coords) == max_size:\n                pixels_to_keep.update(obj_coords) \n\n    # Construct the output grid by copying pixels from the input grid\n    # only if their coordinates are in the set of pixels to keep.\n    for r, c in pixels_to_keep:\n        # Check bounds just in case (though BFS should ensure they are valid)\n        if 0 <= r < rows and 0 <= c < cols:\n            # Assign the original color from the input grid to the output grid\n            output_grid[r, c] = input_grid[r, c]\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 11341,
    "candidates_token_count": 1144,
    "total_token_count": 12485,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.812378,
  "retries": 1
}