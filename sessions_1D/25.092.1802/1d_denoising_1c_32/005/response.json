{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport itertools\n\n\"\"\"\nFor each row in the input grid, identify the longest contiguous horizontal \nsegment of non-white pixels. Keep only that segment in the output grid, \nreplacing all other pixels in that row with the background color (white, 0). \nIf multiple segments share the maximum length in a row, keep the one \nthat appears earliest (leftmost). If a row contains no non-white pixels, \nor no segments of the primary non-white color, the corresponding output row \nwill be entirely white. It is assumed each row contains at most one \nnon-white color.\n\"\"\"\n\ndef find_segments(grid_row, target_color):\n    \"\"\"\n    Finds contiguous segments of a specific color in a 1D numpy array (grid row).\n\n    Args:\n        grid_row (np.array): The input 1D array representing a row of the grid.\n        target_color (int): The color of the segments to find.\n\n    Returns:\n        list: A list of tuples, where each tuple represents a segment\n              (start_index, end_index, length). end_index is exclusive.\n              Returns an empty list if no segments are found.\n    \"\"\"\n    segments = []\n    start_index = -1\n    for i, pixel in enumerate(grid_row):\n        if pixel == target_color and start_index == -1:\n            # Start of a potential segment\n            start_index = i\n        elif pixel != target_color and start_index != -1:\n            # End of the current segment (pixel at i is not part of it)\n            end_index = i\n            length = end_index - start_index\n            segments.append((start_index, end_index, length))\n            start_index = -1 # Reset for the next segment\n\n    # Check if the row ends with an active segment\n    if start_index != -1:\n        # The segment runs to the end of the row\n        end_index = len(grid_row)\n        length = end_index - start_index\n        segments.append((start_index, end_index, length))\n\n    return segments\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the rule described above.\n\n    Args:\n        input_grid (list): A list of lists representing the input grid.\n\n    Returns:\n        list: A list of lists representing the transformed output grid.\n    \"\"\"\n    # Convert input list of lists to a NumPy array for easier processing\n    input_array = np.array(input_grid, dtype=int)\n    \n    # Initialize output grid with the same dimensions, filled with background color (0)\n    output_array = np.zeros_like(input_array)\n    \n    # Get the number of rows in the grid\n    num_rows = input_array.shape[0]\n\n    # Iterate through each row of the input grid\n    for r in range(num_rows):\n        # Get the current row\n        input_row = input_array[r]\n        \n        # Identify the unique non-white color(s) present in the row\n        non_white_colors = np.unique(input_row[input_row != 0])\n        \n        # If no non-white colors exist in this row, the output row remains all zeros, so continue\n        if non_white_colors.size == 0:\n            continue\n            \n        # Assume only one non-white color per row based on examples and problem description\n        target_color = non_white_colors[0]\n        \n        # Find all contiguous segments of the target color in the current row\n        segments = find_segments(input_row, target_color)\n        \n        # If segments were found in this row\n        if segments:\n            # Select the segment with the maximum length.\n            # max() with a key naturally handles ties by selecting the first element encountered,\n            # which corresponds to the leftmost segment in case of length ties.\n            longest_segment = max(segments, key=lambda item: item[2]) # item[2] is the length\n            \n            # Extract the start and end indices of the longest segment\n            start, end, _ = longest_segment\n            \n            # Copy the pixels of the longest segment from the input row \n            # to the corresponding positions in the output row\n            output_array[r, start:end] = input_row[start:end]\n            \n    # Convert the final NumPy array back to a list of lists for the required output format\n    output_grid = output_array.tolist()\n    \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 9667,
    "candidates_token_count": 1051,
    "total_token_count": 10718,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.653148,
  "retries": 1
}