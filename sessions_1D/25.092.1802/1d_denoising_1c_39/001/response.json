{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Tuple\n\n\"\"\"\nIdentify the non-white foreground color present in the 1D input grid.\nScan the input grid horizontally to locate all contiguous segments composed \nsolely of the foreground color.\nCalculate the length of each identified segment.\nFind the segment with the greatest length. If there are multiple segments of \nthe same maximum length, select the first one encountered.\nCreate a new grid with the same dimensions as the input grid, initializing \nall cells to the background color (white, 0).\nCopy the pixels belonging to the identified longest foreground segment from \ntheir original positions in the input grid to the corresponding positions \nin the new output grid.\nThe resulting grid is the final output.\n\"\"\"\n\ndef find_foreground_color(grid_1d: np.ndarray) -> int:\n    \"\"\"\n    Finds the first non-zero color in the 1D grid.\n    Assumes there is exactly one foreground color besides 0.\n    \"\"\"\n    for pixel in grid_1d:\n        if pixel != 0:\n            return int(pixel)\n    # Should not happen based on task description, but return default if empty/all zero\n    return 0 \n\ndef find_contiguous_segments(grid_1d: np.ndarray, target_color: int) -> List[Tuple[int, int, int]]:\n    \"\"\"\n    Finds all contiguous segments of the target_color in the 1D grid.\n    Returns a list of tuples: (start_index, end_index_exclusive, length).\n    \"\"\"\n    segments = []\n    start_index = -1\n    for i, pixel in enumerate(grid_1d):\n        if pixel == target_color and start_index == -1:\n            # Start of a new segment\n            start_index = i\n        elif pixel != target_color and start_index != -1:\n            # End of the current segment\n            end_index = i\n            length = end_index - start_index\n            segments.append((start_index, end_index, length))\n            start_index = -1 # Reset for the next segment\n            \n    # Handle segment that extends to the end of the grid\n    if start_index != -1:\n        end_index = len(grid_1d)\n        length = end_index - start_index\n        segments.append((start_index, end_index, length))\n        \n    return segments\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Transforms the input grid by keeping only the longest contiguous \n    horizontal segment of the foreground color.\n    \"\"\"\n    # Ensure input is treated as a 1D array (single row)\n    if input_grid.ndim > 1:\n         # Assuming it's always 1 row based on examples\n        grid_1d = input_grid.flatten()\n    else:\n        grid_1d = input_grid \n        \n    grid_width = len(grid_1d)\n    \n    # 1. Identify the foreground color\n    foreground_color = find_foreground_color(grid_1d)\n    \n    # If no foreground color found (e.g., all white grid), return input or empty\n    if foreground_color == 0:\n        return np.zeros_like(input_grid) # Return all background\n\n    # 2. Find all contiguous horizontal segments of the foreground color\n    segments = find_contiguous_segments(grid_1d, foreground_color)\n    \n    # 3. Find the segment with the maximum length\n    longest_segment = None\n    max_length = 0\n    if segments:\n        # Sort segments primarily by length (descending), then by start index (ascending)\n        # This handles ties by selecting the first longest segment.\n        segments.sort(key=lambda x: (-x[2], x[0]))\n        longest_segment = segments[0]\n        # Alternatively, iterate to find max:\n        # for seg in segments:\n        #     if seg[2] > max_length:\n        #         max_length = seg[2]\n        #         longest_segment = seg\n        #     # Tie-breaking: keep the first one found with max_length\n    \n    # 4. Create output grid filled with background color (0)\n    output_grid_1d = np.zeros(grid_width, dtype=int)\n    \n    # 5. Copy the longest segment to the output grid at its original position\n    if longest_segment:\n        start, end, _ = longest_segment\n        output_grid_1d[start:end] = foreground_color\n        \n    # Reshape the output to match the original input shape (especially if it was 1xN)\n    output_grid = output_grid_1d.reshape(input_grid.shape)\n\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2071,
    "candidates_token_count": 1112,
    "total_token_count": 3183,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 20.043798,
  "retries": 1
}