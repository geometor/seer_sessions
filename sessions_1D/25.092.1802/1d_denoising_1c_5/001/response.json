{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nIdentify all contiguous horizontal segments of non-white pixels in the input grid.\nFind the maximum length among these segments.\nSelect the segment(s) with this maximum length.\nIf there is a tie in length, select the segment that is lowest in the grid (highest row index).\nCreate an output grid of the same dimensions as the input, initialized to white (0).\nCopy the pixels of the single selected segment from the input grid to the output grid at their original positions.\n\"\"\"\n\ndef find_horizontal_segments(grid):\n    \"\"\"\n    Identifies all contiguous horizontal segments of non-white pixels.\n\n    Args:\n        grid (np.ndarray): The input grid.\n\n    Returns:\n        list: A list of dictionaries, where each dictionary represents a segment\n              with keys 'color', 'length', 'row_index', 'start_col', 'end_col'.\n              Returns an empty list if no non-white pixels are found.\n    \"\"\"\n    segments = []\n    rows, cols = grid.shape\n    for r in range(rows):\n        current_segment = None\n        for c in range(cols):\n            color = grid[r, c]\n            if color != 0:  # Non-white pixel\n                if current_segment is None:\n                    # Start a new segment\n                    current_segment = {'color': color, 'length': 1, 'row_index': r, 'start_col': c}\n                elif color == current_segment['color']:\n                     # Continue the current segment\n                    current_segment['length'] += 1\n                else:\n                    # Different color found, end previous segment and start new one\n                    current_segment['end_col'] = c - 1\n                    segments.append(current_segment)\n                    current_segment = {'color': color, 'length': 1, 'row_index': r, 'start_col': c}\n\n            elif current_segment is not None:\n                 # White pixel found, end the current segment\n                current_segment['end_col'] = c - 1\n                segments.append(current_segment)\n                current_segment = None\n\n        # End of row, check if a segment was active\n        if current_segment is not None:\n            current_segment['end_col'] = cols - 1\n            segments.append(current_segment)\n\n    return segments\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by isolating the longest horizontal segment,\n    prioritizing the lowest segment in case of ties in length.\n\n    Args:\n        input_grid (np.ndarray): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.ndarray: A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    # Initialize output_grid with the same shape as input, filled with white (0)\n    output_grid = np.zeros_like(input_grid)\n    rows, cols = input_grid.shape\n\n    # Find all horizontal segments of non-white pixels\n    segments = find_horizontal_segments(input_grid)\n\n    # If no segments are found, return the all-white grid\n    if not segments:\n        return output_grid\n\n    # Find the maximum length among all segments\n    max_length = 0\n    for segment in segments:\n        if segment['length'] > max_length:\n            max_length = segment['length']\n\n    # Filter segments to keep only those with the maximum length\n    longest_segments = [s for s in segments if s['length'] == max_length]\n\n    # If there's only one longest segment, select it\n    if len(longest_segments) == 1:\n        selected_segment = longest_segments[0]\n    else:\n        # If there's a tie in length, find the one with the highest row index (lowest position)\n        max_row_index = -1\n        selected_segment = None\n        for segment in longest_segments:\n            if segment['row_index'] > max_row_index:\n                max_row_index = segment['row_index']\n                selected_segment = segment\n\n    # Copy the pixels of the selected segment to the output grid\n    if selected_segment:\n        r = selected_segment['row_index']\n        color = selected_segment['color']\n        start_c = selected_segment['start_col']\n        end_c = selected_segment['end_col']\n        output_grid[r, start_c : end_c + 1] = color # Use original color from input\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2373,
    "candidates_token_count": 1042,
    "total_token_count": 3415,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.023079,
  "retries": 1
}