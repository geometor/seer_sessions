{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\ndef find_connected_components(grid, target_color):\n    \"\"\"\n    Finds all connected components of a specific color in a grid using BFS.\n    Connectivity is defined as 4-directional (up, down, left, right).\n\n    Args:\n        grid (np.array): The input grid.\n        target_color (int): The color of the components to find.\n\n    Returns:\n        list: A list of lists, where each inner list contains the\n              (row, col) coordinates of the pixels in a connected component.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    components = []\n\n    for r in range(rows):\n        for c in range(cols):\n            # If this pixel is the target color and hasn't been visited yet,\n            # start a BFS to find its connected component.\n            if grid[r, c] == target_color and not visited[r, c]:\n                component = []\n                q = deque([(r, c)])\n                visited[r, c] = True\n\n                while q:\n                    curr_r, curr_c = q.popleft()\n                    component.append((curr_r, curr_c))\n\n                    # Check 4 neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = curr_r + dr, curr_c + dc\n\n                        # Check if the neighbor is within grid bounds\n                        if 0 <= nr < rows and 0 <= nc < cols:\n                            # Check if the neighbor has the target color and hasn't been visited\n                            if grid[nr, nc] == target_color and not visited[nr, nc]:\n                                visited[nr, nc] = True\n                                q.append((nr, nc))\n                \n                # Add the found component to the list of components\n                if component:\n                    components.append(component)\n\n    return components\n\ndef transform(input_grid):\n    \"\"\"\n    Identifies the primary non-background color in the input grid.\n    Finds all distinct connected components of this primary color.\n    Calculates the size of each component and selects the largest one.\n    Creates a new output grid containing only the pixels of the largest component,\n    setting all other pixels to the background color (0).\n    \"\"\"\n    input_np = np.array(input_grid)\n    rows, cols = input_np.shape\n    background_color = 0\n    \n    # 1. Identify the primary non-background color\n    primary_color = None\n    unique_colors = np.unique(input_np)\n    for color in unique_colors:\n        if color != background_color:\n            primary_color = color\n            break # Assume only one non-background color based on examples\n\n    # If no non-background color is found, return a grid of background color\n    if primary_color is None:\n        return np.zeros_like(input_np).tolist() # Return as list of lists if needed\n\n    # 2. Find all distinct connected components of the primary color\n    components = find_connected_components(input_np, primary_color)\n\n    # If no components are found, return a grid of background color\n    if not components:\n         return np.zeros_like(input_np).tolist()\n\n    # 3. Calculate the size of each component and find the largest one\n    largest_component = []\n    max_size = 0\n    for component in components:\n        if len(component) > max_size:\n            max_size = len(component)\n            largest_component = component\n        # Handle ties: the first largest component found is kept (consistent with description)\n\n    # 5. Create a new output grid initialized with the background color\n    output_grid = np.full((rows, cols), background_color, dtype=int)\n\n    # 6. Copy the pixels belonging to the largest component to the output grid\n    for r, c in largest_component:\n        output_grid[r, c] = primary_color\n\n    return output_grid.tolist() # Return as list of lists\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2130,
    "candidates_token_count": 971,
    "total_token_count": 3101,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.343552,
  "retries": 1
}