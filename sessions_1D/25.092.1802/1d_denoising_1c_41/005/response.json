{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentify the single non-white color (C) present in the 1D input sequence. \nFind all contiguous segments (blocks) composed only of color C.\nDetermine the maximum length among these segments.\nCreate an output sequence of the same length as the input, initialized to white (0).\nCopy only the segment(s) that have the maximum length into the output sequence at their original positions.\nIf the input is all white or contains no non-white segments, the output is all white.\n\"\"\"\n\nimport numpy as np\nfrom typing import List, Tuple, Any # Use Any for input_grid to be flexible\n\ndef find_segments(grid: np.ndarray, target_color: int) -> List[Tuple[int, int, int]]:\n    \"\"\"\n    Finds all contiguous segments of a specific color in a 1D numpy array.\n\n    Args:\n        grid: The input 1D numpy array.\n        target_color: The color of the segments to find (must be non-zero).\n\n    Returns:\n        A list of tuples, where each tuple represents a segment:\n        (start_index, end_index, length). Returns an empty list if\n        target_color is 0 or not found.\n    \"\"\"\n    if target_color == 0:\n        return [] # Background color cannot form segments of interest\n\n    segments = []\n    start_index = -1\n    n = len(grid)\n\n    for i, pixel in enumerate(grid):\n        if pixel == target_color and start_index == -1:\n            # Start of a new segment\n            start_index = i\n        elif pixel != target_color and start_index != -1:\n            # End of the current segment (index i-1)\n            end_index = i - 1\n            length = end_index - start_index + 1\n            segments.append((start_index, end_index, length))\n            start_index = -1 # Reset for the next potential segment\n\n    # Check if a segment was ongoing at the very end of the grid\n    if start_index != -1:\n        end_index = n - 1\n        length = end_index - start_index + 1\n        segments.append((start_index, end_index, length))\n\n    return segments\n\ndef transform(input_grid: Any) -> List[int]:\n    \"\"\"\n    Transforms the input grid by isolating the longest contiguous segment(s)\n    of the non-white color.\n\n    Args:\n        input_grid: A list or numpy array of integers representing the flattened input grid.\n\n    Returns:\n        A list of integers representing the flattened output grid.\n    \"\"\"\n    # Convert input to numpy array for easier processing\n    input_array = np.array(input_grid)\n    n = len(input_array)\n\n    # Initialize output grid with background color (0)\n    output_array = np.zeros(n, dtype=int)\n\n    # 1. Identify the unique non-white color (C)\n    unique_colors = np.unique(input_array)\n    non_white_color = 0\n    for color in unique_colors:\n        if color != 0:\n            non_white_color = color\n            break # Assuming only one non-white color as per examples\n\n    # Handle case where input is all white\n    if non_white_color == 0:\n        return output_array.tolist() # Return the all-zero grid as a list\n\n    # 2. Find all contiguous segments of color C\n    segments = find_segments(input_array, non_white_color)\n\n    # Handle case where no segments of the target color are found\n    if not segments:\n        return output_array.tolist() # Return the all-zero grid as a list\n\n    # 3. Find the maximum length among the segments\n    max_length = 0\n    # Iterate through segments to find the max length\n    for _, _, length in segments:\n        if length > max_length:\n            max_length = length\n\n    # 4. Identify all segments with the maximum length\n    longest_segments = []\n    # Filter segments to keep only those with max_length\n    for start, end, length in segments:\n        if length == max_length:\n            longest_segments.append((start, end))\n\n    # 5. Populate the output grid with the pixels from the longest segments\n    # Iterate through the identified longest segments\n    for start, end in longest_segments:\n        # Fill the corresponding indices in the output grid with the non_white_color\n        # Slicing is inclusive for start, exclusive for end+1 in numpy\n        output_array[start:end + 1] = non_white_color\n\n    # 6. Return the result as a list\n    return output_array.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8352,
    "candidates_token_count": 1089,
    "total_token_count": 9441,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.54418,
  "retries": 1
}