{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nAccepts a 2D NumPy array (input_grid).\nFlattens the grid into a 1D sequence.\nIdentifies the unique non-zero foreground color (C).\nFinds all contiguous blocks (runs) of color C in the flattened sequence.\nIdentifies the single longest contiguous block. If there's a tie in length, the block occurring earliest (smallest starting index) in the flattened sequence is chosen.\nCreates a new 2D grid of the same dimensions as the input, initialized with the background color (0).\nCopies the pixels corresponding to the identified longest block from their position in the flattened input sequence to the corresponding position in the new grid (after flattening and before reshaping).\nAll other pixels in the output grid remain the background color.\nReturns the resulting 2D grid.\n\"\"\"\n\nimport numpy as np\n\ndef find_contiguous_blocks_flat(flat_data, target_color):\n    \"\"\"\n    Finds all contiguous blocks of a target color in a 1D numpy array.\n    Returns a list of dictionaries, where each dictionary represents a block\n    with 'start' index, 'end' index (exclusive), and 'length'.\n    \"\"\"\n    blocks = []\n    start_index = -1\n    n = len(flat_data)\n    for i, pixel in enumerate(flat_data):\n        if pixel == target_color and start_index == -1:\n            # Start of a new block\n            start_index = i\n        elif pixel != target_color and start_index != -1:\n            # End of the current block (pixel at i is not part of it)\n            blocks.append({'start': start_index, 'end': i, 'length': i - start_index})\n            start_index = -1\n            \n    # Check if a block extends to the very end of the list\n    if start_index != -1:\n        blocks.append({'start': start_index, 'end': n, 'length': n - start_index})\n        \n    return blocks\n\ndef transform(input_grid):\n    # 1. Record the shape (height, width) of the input grid.\n    original_shape = input_grid.shape\n    \n    # 2. Flatten the input grid into a 1D sequence.\n    flat_input = input_grid.flatten()\n    grid_size = len(flat_input)\n    background_color = 0\n\n    # 3. Identify the unique foreground color C.\n    foreground_color = -1 # Default if no foreground color found\n    for pixel in flat_input:\n        if pixel != background_color:\n            foreground_color = pixel\n            break \n\n    # 4. Handle case where input is entirely background or no foreground color found\n    if foreground_color == -1:\n        return np.zeros(original_shape, dtype=int)\n\n    # 5 & 6. Find all contiguous blocks of color C in the 1D sequence.\n    blocks = find_contiguous_blocks_flat(flat_input, foreground_color)\n\n    # 7. Handle case where no blocks of the foreground color were found\n    if not blocks:\n        return np.zeros(original_shape, dtype=int)\n\n    # 8. Find the block with the maximum length (earliest start index for ties).\n    longest_block = None\n    max_length = -1 \n    # Find max length first\n    for block in blocks:\n         if block['length'] > max_length:\n              max_length = block['length']\n    \n    # Find the first block matching the max length\n    for block in blocks:\n        if block['length'] == max_length:\n            longest_block = block\n            break # Stop at the first longest block encountered\n\n    # 9. Create a new 1D array filled with the background color.\n    output_flat = np.full(grid_size, background_color, dtype=int)\n\n    # 10. Copy the longest block from flattened input to the new 1D array.\n    if longest_block: # Should always be true if blocks were found, but check for safety\n        start = longest_block['start']\n        end = longest_block['end']\n        output_flat[start:end] = flat_input[start:end] \n\n    # 11. Reshape the new 1D array back into the original 2D grid dimensions.\n    output_grid = output_flat.reshape(original_shape)\n\n    # 12. Return the resulting 2D grid.\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5970,
    "candidates_token_count": 1032,
    "total_token_count": 7002,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.62667,
  "retries": 1
}