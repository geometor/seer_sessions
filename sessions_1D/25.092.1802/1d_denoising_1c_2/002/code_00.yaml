Data:
  - type: 2D grid (NumPy array)
  - colors:
      - background: 0 (white)
      - foreground: one primary color C (varies per example: 2, 8, 7)

Objects:
  - type: contiguous blocks (runs) of the foreground color C within the *flattened* representation of the input grid
  - properties:
      - color: C
      - length: number of consecutive pixels in the flattened sequence
      - position: start and end indices in the flattened sequence

Relationships:
  - The flattened input sequence contains multiple blocks/pixels of color C.
  - One of these blocks has the maximum length compared to all other blocks of color C in the flattened sequence.
  - If multiple blocks share the maximum length, the one appearing earliest (minimum start index) in the flattened sequence is the target.

Actions:
  - Flatten the input 2D grid into a 1D sequence, preserving the original grid dimensions (height, width).
  - Identify the unique foreground color C (non-zero color).
  - If no foreground color exists, create an output grid of original dimensions filled with the background color (0).
  - Find all contiguous blocks of color C in the 1D sequence.
  - Determine the block with the maximum length (selecting the earliest one in case of ties).
  - Create an output 1D sequence of the same size as the flattened input, initialized with the background color (0).
  - If a longest block was found, copy the segment corresponding to this block from the flattened input sequence to the corresponding positions in the output sequence.
  - Reshape the output 1D sequence back into the original 2D grid dimensions.

Result:
  - An output grid with the same dimensions as the input grid.
  - The output grid contains only the single longest contiguous block of color C (as identified in the flattened sequence), located at the position corresponding to its location in the flattened sequence. All other pixels are the background color (0).