{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies all contiguous objects of the primary non-background color in the input grid using orthogonal adjacency.\nDetermines the largest object based on pixel count.\nGenerates an output grid of the same dimensions, initially filled with the background color (white-0).\nPlaces the pixels corresponding to the largest object onto the output grid, preserving their color and position. All other pixels remain background color.\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef _find_objects(grid, primary_color):\n    \"\"\"\n    Finds all connected components (objects) of a specific color in the grid.\n\n    Args:\n        grid (np.array): The input grid.\n        primary_color (int): The color of the objects to find.\n\n    Returns:\n        list: A list of sets, where each set contains the (row, col) coordinates\n              of the pixels belonging to a single connected object.\n    \"\"\"\n    height, width = grid.shape\n    visited = np.zeros((height, width), dtype=bool)\n    objects = []\n\n    for r in range(height):\n        for c in range(width):\n            # If this pixel is the primary color and hasn't been visited yet,\n            # start a search (BFS) to find the connected component.\n            if grid[r, c] == primary_color and not visited[r, c]:\n                current_object = set()\n                q = deque([(r, c)])\n                visited[r, c] = True\n\n                while q:\n                    row, col = q.popleft()\n                    current_object.add((row, col))\n\n                    # Check orthogonal neighbors\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        # Check bounds and if the neighbor is the same color and unvisited\n                        if 0 <= nr < height and 0 <= nc < width and \\\n                           grid[nr, nc] == primary_color and not visited[nr, nc]:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n\n                objects.append(current_object)\n    return objects\n\ndef transform(input_grid_list):\n    \"\"\"\n    Transforms the input grid by keeping only the largest object of the primary color.\n\n    Args:\n        input_grid_list (list): A list of lists representing the input grid.\n\n    Returns:\n        list: A list of lists representing the transformed output grid.\n    \"\"\"\n    input_grid = np.array(input_grid_list)\n    height, width = input_grid.shape\n    background_color = 0\n\n    # 1: Identify the primary non-background color.\n    # Find the first non-zero element or assume if only one non-zero exists.\n    unique_colors = np.unique(input_grid)\n    primary_color = None\n    for color in unique_colors:\n        if color != background_color:\n            primary_color = color\n            break\n\n    # If there's no primary color (grid is all background), return the input.\n    if primary_color is None:\n        return input_grid_list\n\n    # 2 & 3: Find all distinct contiguous objects and implicitly know their sizes.\n    objects = _find_objects(input_grid, primary_color)\n\n    # Handle case where no objects of primary color are found\n    if not objects:\n         return np.full((height, width), background_color, dtype=int).tolist()\n\n    # 4: Determine the object with the maximum size (pixel count).\n    largest_object = max(objects, key=len)\n\n    # 5: Create a new grid filled with the background color.\n    output_grid = np.full((height, width), background_color, dtype=int)\n\n    # 6: Place the pixels corresponding to the largest object onto the new grid.\n    for r, c in largest_object:\n        output_grid[r, c] = primary_color\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2241,
    "candidates_token_count": 928,
    "total_token_count": 3169,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.864245,
  "retries": 1
}