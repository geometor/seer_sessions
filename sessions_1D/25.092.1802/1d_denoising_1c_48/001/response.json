{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport collections\n\n\"\"\"\nIdentify the primary foreground color (non-white/0) in the input grid.\nIterate through each row of the input grid and count the occurrences of this foreground color.\nDetermine the row index that contains the maximum count of the foreground color. If multiple rows share the maximum count, select the topmost row (smallest row index).\nCreate an output grid of the same dimensions as the input, filled entirely with the background color (white/0).\nCopy the selected row from the input grid into the corresponding row of the output grid.\nReturn the modified output grid.\n\"\"\"\n\ndef find_foreground_color(grid):\n    \"\"\"Finds the first non-zero color in the grid.\"\"\"\n    for row in grid:\n        for pixel in row:\n            if pixel != 0:\n                return pixel\n    return 0 # Return background color if no foreground color is found\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by selecting the row with the most foreground pixels\n    and placing it in an otherwise background-filled grid.\n    \"\"\"\n    # Convert input to a numpy array for easier manipulation\n    input_array = np.array(input_grid, dtype=int)\n    height, width = input_array.shape\n\n    # Initialize output_grid with background color (0)\n    output_array = np.zeros_like(input_array)\n\n    # Identify the foreground color\n    # Assumes only one foreground color exists besides background (0)\n    foreground_color = find_foreground_color(input_array)\n\n    # If no foreground color exists (grid is all background), return the all-background grid\n    if foreground_color == 0:\n        return output_array.tolist()\n\n    # Initialize variables to track the row with the maximum count\n    max_count = -1\n    selected_row_index = -1\n\n    # Iterate through each row to find the one with the most foreground pixels\n    for r in range(height):\n        # Count occurrences of the foreground color in the current row\n        current_count = np.count_nonzero(input_array[r, :] == foreground_color)\n\n        # Update max_count and selected_row_index if current count is higher\n        # We only update if strictly greater, ensuring the first row is kept in case of ties\n        if current_count > max_count:\n            max_count = current_count\n            selected_row_index = r\n\n    # If a row with foreground pixels was found (max_count > 0 implies selected_row_index is valid)\n    if selected_row_index != -1:\n        # Copy the selected row from the input to the output grid\n        output_array[selected_row_index, :] = input_array[selected_row_index, :]\n\n    # Convert the numpy array back to a list of lists for the standard ARC format\n    return output_array.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2340,
    "candidates_token_count": 654,
    "total_token_count": 2994,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.788011,
  "retries": 1
}