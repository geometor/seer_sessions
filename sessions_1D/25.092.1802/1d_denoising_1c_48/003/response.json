{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport collections\n\n\"\"\"\nIdentify the primary foreground color (non-white/0) in the input grid.\nIterate through each row of the input grid and count the occurrences of this foreground color.\nDetermine the row index that contains the maximum count of the foreground color. \nIf multiple rows share the maximum count, select the topmost row (the one with the smallest row index).\nCreate an output grid of the same dimensions as the input, filled entirely with the background color (white/0).\nCopy the selected row (the topmost row with the maximum foreground pixel count) from the input grid into the corresponding row of the output grid.\nReturn the modified output grid.\n\"\"\"\n\ndef find_foreground_color(grid):\n    \"\"\"\n    Finds the first non-zero (non-background) color encountered in the grid.\n    Assumes there is at most one non-background color per grid based on examples.\n\n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        int: The foreground color value, or 0 if only background is present.\n    \"\"\"\n    for row in grid:\n        for pixel in row:\n            if pixel != 0:\n                return pixel\n    return 0 # Return background color (0) if no foreground color is found\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by selecting the topmost row with the maximum \n    count of the foreground color and placing it in an otherwise background-filled grid.\n\n    Args:\n        input_grid (list of lists): The input grid represented as a 2D list.\n\n    Returns:\n        list of lists: The transformed grid.\n    \"\"\"\n    # Convert input to a numpy array for easier manipulation\n    input_array = np.array(input_grid, dtype=int)\n    \n    # Handle empty input grid case\n    if input_array.size == 0:\n        return []\n        \n    height, width = input_array.shape\n\n    # Initialize output_grid with background color (0)\n    output_array = np.zeros_like(input_array)\n\n    # Identify the foreground color\n    # Assumes only one foreground color exists besides background (0) based on examples.\n    foreground_color = find_foreground_color(input_array)\n\n    # If no foreground color exists (grid is all background), \n    # return the already initialized all-background grid.\n    if foreground_color == 0:\n        return output_array.tolist()\n\n    # Initialize variables to track the row with the maximum count\n    max_count = -1  # Start with -1 to ensure any count >= 0 is initially larger\n    selected_row_index = -1 # Initialize to invalid index\n\n    # Iterate through each row to find the *first* one with the maximum foreground pixel count\n    for r in range(height):\n        # Count occurrences of the foreground color in the current row\n        current_count = np.count_nonzero(input_array[r, :] == foreground_color)\n\n        # Update max_count and selected_row_index if the current count is strictly greater\n        # than the current maximum. This automatically selects the topmost row in case of ties,\n        # as later rows with the same count won't overwrite the selected_row_index.\n        if current_count > max_count:\n            max_count = current_count\n            selected_row_index = r\n\n    # If a row with at least one foreground pixel was found (meaning selected_row_index is valid)\n    # The check `max_count > 0` ensures we don't copy an all-background row if that happened\n    # to be selected (e.g., if input had only background but find_foreground_color returned something else erroneously).\n    # The check selected_row_index != -1 is redundant if max_count > 0 but good for clarity.\n    if selected_row_index != -1 and max_count > 0:\n        # Copy the selected row from the input to the output grid at the same row index\n        output_array[selected_row_index, :] = input_array[selected_row_index, :]\n\n    # Convert the resulting numpy array back to a list of lists for the standard ARC format\n    return output_array.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 11849,
    "candidates_token_count": 963,
    "total_token_count": 12812,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 20.119019,
  "retries": 1
}