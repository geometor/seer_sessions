task_description: Retain only the largest contiguous block of pixels for each non-white color within a 2D grid. All pixels of a given color that are not part of its single largest contiguous block are changed to white (0).
grid_properties:
  dimensionality: 2D
  dimensions: Determined dynamically from the input grid's shape (observed as 4x8 in examples).
  pixel_values: Integers 0-9 representing colors (0 is white/background).
  connectivity: 4-way adjacency (Von Neumann neighborhood) defines contiguous blocks.
objects:
  definition: A set of connected pixels sharing the same non-white color.
  properties:
    - color: The integer value (1-9) of the pixels in the object.
    - size: The count of pixels constituting the object.
    - pixels: A collection of (row, column) coordinates belonging to the object.
actions:
  - input: Receive a 2D grid (numpy array or list of lists).
  - copy_grid: Create a mutable copy of the input grid for modification.
  - find_colors: Identify all unique non-white colors present in the grid.
  - analyze_color: For each identified non-white color:
      - find_components: Use a search algorithm (like BFS or DFS) with 4-way adjacency to identify all distinct connected components (objects) of that color.
      - measure_components: Calculate the size (pixel count) of each component.
      - identify_largest: Determine the component with the maximum size. (Tie-breaking: select any one of the largest).
      - filter_components: If multiple components exist for the color, identify all components *except* the largest one.
  - modify_output: For every pixel belonging to a filtered (non-largest) component, change its value to white (0) in the copied output grid.
  - output: Return the modified 2D grid in the same format as the input.
relationships:
  - pixel_connectivity: Pixels are connected if they share an edge (not just a corner).
  - component_membership: Each non-white pixel belongs to exactly one connected component of its color.
  - size_comparison: Components of the same color are compared based on the number of pixels they contain.
transformation_rule:
  iteration: Process each non-white color independently.
  condition: If a color exists as multiple disconnected components.
  operation: Preserve only the pixels of the largest component; set others of that color to white (0).
  default: If a color exists as only one component, preserve it.
uncertainty:
  - Explicit handling of ties in component size (examples do not show ties; assumption is preserving any one largest is acceptable).