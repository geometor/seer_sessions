{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by keeping only the largest contiguous object (based on 4-way adjacency) for each non-white color. \nAll pixels belonging to smaller objects of the same color are changed to white (0). \nThe input is assumed to be a list of integers representing a 4x8 grid.\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef _find_connected_components(grid, target_color):\n    \"\"\"\n    Finds all connected components of a specific color in the grid using 4-way adjacency.\n\n    Args:\n        grid (np.array): The 2D input grid.\n        target_color (int): The color to find components for.\n\n    Returns:\n        list[list[tuple[int, int]]]: A list where each inner list contains \n                                      the (row, col) coordinates of a single \n                                      connected component. Returns empty list\n                                      if no pixels of target_color exist.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    components = []\n\n    for r in range(rows):\n        for c in range(cols):\n            # If this cell is the target color and hasn't been visited yet\n            if grid[r, c] == target_color and not visited[r, c]:\n                # Start a Breadth-First Search (BFS) to find the component\n                component = []\n                q = deque([(r, c)])\n                visited[r, c] = True\n\n                while q:\n                    curr_r, curr_c = q.popleft()\n                    component.append((curr_r, curr_c))\n\n                    # Check 4 neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = curr_r + dr, curr_c + dc\n\n                        # Check bounds, color, and visited status\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] == target_color and not visited[nr, nc]:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n                \n                # Add the found component to the list if it's not empty\n                if component:\n                    components.append(component)\n                    \n    return components\n\ndef transform(input_array):\n    \"\"\"\n    Applies the transformation rule to the input grid represented by input_array.\n\n    Args:\n        input_array (list[int]): A 1D list representing the input grid pixels.\n                                 Assumed to represent a 4x8 grid.\n\n    Returns:\n        list[int]: A 1D list representing the transformed grid pixels.\n    \"\"\"\n    # --- Grid Initialization and Reshaping ---\n    # Assume dimensions 4x8 based on analysis (32 elements)\n    rows, cols = 4, 8\n    expected_length = rows * cols\n    if len(input_array) != expected_length:\n        # Basic validation, could raise error or try to infer dimensions\n        print(f\"Warning: Input array length {len(input_array)} does not match expected {expected_length}\")\n        # Attempt to infer if possible, otherwise error out. For now, assume 4x8.\n        if len(input_array) == 32: # proceed if length is correct\n             pass\n        else: # fail if length is not 32\n            raise ValueError(f\"Input array length {len(input_array)} does not match assumed dimensions {rows}x{cols}\")\n\n    input_grid = np.array(input_array).reshape(rows, cols)\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid) \n\n    # --- Identify Colors and Process Each ---\n    # Find unique non-white colors present in the grid\n    unique_colors = np.unique(input_grid)\n    non_white_colors = [color for color in unique_colors if color != 0]\n\n    # Process each non-white color independently\n    for color in non_white_colors:\n        # Find all connected components (objects) of the current color using the helper function\n        components = _find_connected_components(input_grid, color)\n\n        # If there's more than one component for this color, apply the filtering logic\n        if len(components) > 1:\n            # Find the largest component based on the number of pixels (size)\n            # The key=len tells max to compare the components based on their length (list of coordinates)\n            largest_component = max(components, key=len)\n            \n            # Create a set of coordinates for the largest component for efficient lookup\n            largest_component_coords = set(largest_component)\n\n            # Iterate through all components found for this color\n            for component in components:\n                # Check if the current component is NOT the largest one\n                # Comparing lists directly works here as component lists are unique\n                if component != largest_component: \n                    # If it's a smaller component, change its pixels to white (0) in the output grid\n                    for r, c in component:\n                        output_grid[r, c] = 0\n        \n        # If there's only one component (or zero), no changes are needed for this color, \n        # as the single largest component is kept by default (output_grid started as a copy)\n\n    # --- Final Output Formatting ---\n    # Flatten the 2D output grid back into a 1D list for the return value\n    return output_grid.flatten().tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7776,
    "candidates_token_count": 1295,
    "total_token_count": 9071,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.289112,
  "retries": 1
}