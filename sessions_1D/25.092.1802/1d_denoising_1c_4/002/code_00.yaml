task_description: Retain only the largest contiguous object for each color within the grid.
input_format:
  type: list of integers (derived from space-separated string)
  representing: 2D grid pixels
grid_properties:
  dimensionality: 2D
  dimensions: 4x8 (inferred from length 32 and visual patterns)
  connectivity: 4-way adjacency (up, down, left, right) defining contiguous objects.
objects:
  definition: A contiguous group of pixels of the same non-white color.
  properties:
    - color: The color shared by all pixels in the object.
    - size: The number of pixels in the object.
    - location: Coordinates of the pixels forming the object.
  identification: Via Breadth-First Search (BFS) or similar graph traversal on pixels of the same color.
actions:
  - parse_input: Convert the input representation into a 2D numpy array (4x8).
  - identify_colors: Find all unique non-white colors present.
  - for_each_color: Iterate through the identified non-white colors.
    - find_components: Identify all distinct contiguous objects (components) of the current color using 4-way adjacency.
    - check_component_count: Determine if more than one component exists for the color.
    - if_multiple_components:
      - calculate_sizes: Compute the size (pixel count) of each component.
      - find_largest: Identify the component(s) with the maximum size.
      - select_primary: Choose one component as the primary (if tie, any largest one).
      - identify_pixels_to_remove: Collect coordinates of all pixels belonging to components *other* than the primary one.
    - modify_grid: Change the color of the pixels identified for removal to white (0) in a copy of the grid.
  - format_output: Flatten the modified 2D grid back into a 1D list.
transformation_rule:
  primary_logic: For each non-white color present in the input grid, identify all separate contiguous objects (using 4-way adjacency). Keep only the object with the largest number of pixels. All other pixels of that same color (belonging to smaller objects) are changed to white (0).
  scope: Applies independently to each non-white color.
  edge_cases:
    - If only one object of a color exists, it is preserved entirely.
    - Behavior on tie for largest object size is assumed to keep any one of the largest (not explicitly tested).
uncertainty:
  - train_2_output_discrepancy: The provided output for training example 2 removes one pixel ((3,6) in 4x8 grid) that *is* part of the largest connected component (4-way). The implemented rule, consistent with examples 1 and 3, would keep this pixel. Proceeding with the simpler rule.