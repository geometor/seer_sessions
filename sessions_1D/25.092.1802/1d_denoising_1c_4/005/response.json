{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nRetains only the largest contiguous block of pixels (based on 4-way adjacency) \nfor each non-white color within the input 2D grid. All pixels of a given color \nthat are not part of its single largest contiguous block are changed to white (0).\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef _find_connected_components(grid, target_color):\n    \"\"\"\n    Finds all connected components of a specific color in the grid using 4-way adjacency.\n\n    Args:\n        grid (np.array): The 2D input grid.\n        target_color (int): The color to find components for.\n\n    Returns:\n        list[list[tuple[int, int]]]: A list where each inner list contains \n                                      the (row, col) coordinates of a single \n                                      connected component. Returns empty list\n                                      if no pixels of target_color exist.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    components = []\n\n    # Iterate through each pixel in the grid\n    for r in range(rows):\n        for c in range(cols):\n            # If this cell is the target color and hasn't been visited yet, start a search\n            if grid[r, c] == target_color and not visited[r, c]:\n                # Initialize structure for the current component and the BFS queue\n                component = []\n                q = deque([(r, c)])\n                visited[r, c] = True # Mark the starting pixel as visited\n\n                # Perform Breadth-First Search (BFS)\n                while q:\n                    curr_r, curr_c = q.popleft()\n                    component.append((curr_r, curr_c)) # Add current pixel to the component\n\n                    # Explore 4 adjacent neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = curr_r + dr, curr_c + dc\n\n                        # Check if the neighbor is within grid bounds\n                        if 0 <= nr < rows and 0 <= nc < cols:\n                            # Check if the neighbor has the target color and hasn't been visited\n                            if grid[nr, nc] == target_color and not visited[nr, nc]:\n                                visited[nr, nc] = True # Mark neighbor as visited\n                                q.append((nr, nc)) # Add neighbor to the queue to explore from later\n                \n                # Once BFS is complete for this starting pixel, add the found component\n                if component:\n                    components.append(component)\n                    \n    return components\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid (np.array): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.array: A 2D numpy array representing the transformed grid.\n    \"\"\"\n    # Ensure input is a numpy array\n    if not isinstance(input_grid, np.ndarray):\n        input_grid = np.array(input_grid)\n        \n    # initialize output_grid as a copy of the input grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Identify all unique non-white colors present in the grid\n    unique_colors = np.unique(input_grid)\n    non_white_colors = [color for color in unique_colors if color != 0]\n\n    # Process each non-white color independently\n    for color in non_white_colors:\n        # Find all connected components (objects) of the current color\n        components = _find_connected_components(input_grid, color)\n\n        # If there's more than one component for this color, filter out smaller ones\n        if len(components) > 1:\n            # Find the component with the maximum number of pixels (largest size)\n            # The key=len tells max to compare components based on the length of their coordinate lists\n            largest_component = max(components, key=len)\n            \n            # Create a set of coordinates for the largest component for efficient checking later\n            # (Optional optimization, direct list comparison works too but might be slower for huge components)\n            # largest_component_coords = set(largest_component) \n\n            # Iterate through all components found for this color\n            for component in components:\n                # Check if the current component is NOT the largest one \n                # (Direct list comparison is sufficient here as the coordinate lists are unique)\n                if component != largest_component: \n                    # If it's a smaller component, change its pixels to white (0) in the output grid\n                    for r, c in component:\n                        output_grid[r, c] = 0\n        \n        # If there's only one component (or zero components) of this color, \n        # no changes are needed, as the largest (only) component is implicitly kept \n        # because output_grid started as a copy of input_grid.\n\n    # Return the modified grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7991,
    "candidates_token_count": 1175,
    "total_token_count": 9166,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.921835,
  "retries": 1
}