{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Tuple\n\n\"\"\"\nIdentify all contiguous horizontal segments of non-white pixels in the input row. \nFind the segment with the maximum length. \nCreate an output row of the same size, initialized to the background color (white, 0). \nPlace only the single longest segment found into the output row at its original position. \nAll other pixels remain white.\n\"\"\"\n\ndef find_segments(input_row: np.ndarray) -> List[Tuple[int, int, int, int]]:\n    \"\"\"\n    Finds contiguous segments of non-white pixels in a 1D numpy array.\n\n    Args:\n        input_row: A 1D numpy array representing a row of pixels.\n\n    Returns:\n        A list of tuples, where each tuple represents a segment:\n        (start_index, end_index, length, color)\n    \"\"\"\n    segments = []\n    in_segment = False\n    start_index = -1\n    segment_color = -1\n    \n    # Add a padding of 0 at the end to handle segments ending at the last pixel\n    padded_row = np.append(input_row, 0) \n    \n    for i, pixel in enumerate(padded_row):\n        if not in_segment and pixel != 0:\n            # Start of a new segment\n            in_segment = True\n            start_index = i\n            segment_color = pixel\n        elif in_segment and (pixel == 0 or pixel != segment_color):\n            # End of the current segment\n            end_index = i - 1\n            length = end_index - start_index + 1\n            segments.append((start_index, end_index, length, segment_color))\n            in_segment = False\n            start_index = -1\n            segment_color = -1\n            # Check if the current pixel starts a new segment immediately\n            if pixel != 0:\n                in_segment = True\n                start_index = i\n                segment_color = pixel\n\n    return segments\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Transforms the input grid by keeping only the longest contiguous segment \n    of non-white pixels.\n\n    Args:\n        input_grid: A 1D numpy array representing the input row.\n\n    Returns:\n        A 1D numpy array representing the transformed output row.\n    \"\"\"\n    \n    # Ensure input is treated as a 1D array (even if passed as 1xN)\n    input_row = input_grid.flatten()\n    \n    # Initialize output_grid with the background color (0)\n    output_grid = np.zeros_like(input_row)\n    \n    # Find all non-white segments in the input row\n    segments = find_segments(input_row)\n    \n    # If no segments are found, return the blank grid\n    if not segments:\n        return output_grid.reshape(input_grid.shape) # Reshape back to original input shape\n        \n    # Find the segment with the maximum length\n    longest_segment = max(segments, key=lambda x: x[2])\n    \n    # Extract details of the longest segment\n    start_index, end_index, _, _ = longest_segment\n    \n    # Copy the longest segment from the input to the output grid\n    output_grid[start_index : end_index + 1] = input_row[start_index : end_index + 1]\n    \n    # Reshape the output to match the original input grid's shape (e.g., 1xN)\n    return output_grid.reshape(input_grid.shape)\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2044,
    "candidates_token_count": 840,
    "total_token_count": 2884,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.956858,
  "retries": 1
}