{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe program identifies connected components of non-zero colored pixels in the input grid, extracts them, and arranges them in a 2x2 block in the output grid in column major order. The relative 2D shape of each component is preserved. Background (zero-colored) pixels are discarded, and a new 2x2 block is created.\n\"\"\"\n\nimport numpy as np\n\ndef get_connected_components(grid):\n    \"\"\"\n    Finds connected components of non-zero pixels in a grid.\n    \"\"\"\n    visited = np.zeros_like(grid, dtype=bool)\n    components = []\n\n    def dfs(row, col, component):\n        if (row < 0 or row >= grid.shape[0] or col < 0 or col >= grid.shape[1] or\n                visited[row, col] or grid[row, col] == 0):\n            return\n        visited[row, col] = True\n        component.append((row, col))\n        dfs(row + 1, col, component)\n        dfs(row - 1, col, component)\n        dfs(row, col + 1, component)\n        dfs(row, col - 1, component)\n\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] != 0 and not visited[r, c]:\n                component = []\n                dfs(r, c, component)\n                components.append((grid[r,c],component)) # store color with component\n    return components\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the described rule.\n    \"\"\"\n    components = get_connected_components(input_grid)\n    \n    # Sort components based on their first appearance in column-major order.\n    sorted_components = sorted(components, key=lambda x: (x[1][0][1], x[1][0][0]))\n    \n    output_grid = np.zeros((4, 4), dtype=int)\n    \n    out_row = 0\n    out_col = 0\n    \n    for color, component in sorted_components:\n      \n        first_row = component[0][0]\n        first_col = component[0][1]\n      \n        \n        for r,c in component:\n          output_grid[out_row + (r - first_row)  , out_col + (c- first_col) ] = input_grid[r,c]\n          \n        out_col += 2\n        if out_col >= 4:\n            out_col = 0\n            out_row += 2\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 691,
            "end_index": 943,
            "uri": "https://github.com/28cy/Barcode_Detection",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2411,
    "candidates_token_count": 621,
    "total_token_count": 3032,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.02586
}