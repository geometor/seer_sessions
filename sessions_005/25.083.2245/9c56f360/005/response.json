{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nFor each row in the input grid:\n\n1.  Identify the leftmost azure (8) pixel. If no azure pixel exists in the row, skip the row.\n2.  Identify all green (3) pixels in the row. If no green exists, skip to the next row.\n3.  Identify all white/empty (0) pixels to the left of the leftmost azure (8) pixel.\n4.  Iterate through the green (3) pixels. For each green pixel:\n    *   Check if it's horizontally adjacent (immediately to the left or right) to *any* azure (8) pixel.\n    *   If it's *not* horizontally adjacent, move it to the *leftmost available* white/empty (0) space to the left of the leftmost azure (8).\n    *   If a green pixel is moved, replace it with an empty(0) in the original position.\n5. Repeat steps 3 and 4.\n\"\"\"\n\nimport numpy as np\n\ndef _is_horizontally_adjacent(grid, row, col, target_value):\n    \"\"\"Helper function to check horizontal adjacency.\"\"\"\n    _, cols = grid.shape\n    if col > 0 and grid[row, col - 1] == target_value:\n        return True\n    if col < cols - 1 and grid[row, col + 1] == target_value:\n        return True\n    return False\n\ndef _find_leftmost_value(row, value):\n    \"\"\"Finds the index of the leftmost occurrence of a value in a row.\"\"\"\n    indices = np.where(row == value)[0]\n    return indices[0] if indices.size > 0 else -1\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the specified rule.\"\"\"\n    output_grid = np.copy(input_grid)\n    rows, _ = output_grid.shape\n\n    for row_index in range(rows):\n        row = output_grid[row_index]\n\n        # 1. Find leftmost azure (8)\n        leftmost_azure_index = _find_leftmost_value(row, 8)\n        if leftmost_azure_index == -1:\n            continue  # Skip row if no azure\n\n        # 2. Find all green (3) pixels\n        green_indices = np.where(row == 3)[0]\n        if green_indices.size == 0:\n            continue  # Skip if no green\n\n        # 3. Find all empty (0) spaces to the left of leftmost azure\n        empty_indices = []\n        for i in range(leftmost_azure_index):\n            if row[i] == 0:\n                empty_indices.append(i)\n\n        # 4. Iterate through green pixels and move\n        empty_index_ptr = 0  # Pointer for the next available empty spot\n        for green_index in green_indices:\n            # Check horizontal adjacency to *any* azure\n            if not _is_horizontally_adjacent(output_grid, row_index, green_index, 8):\n                # Move to leftmost available empty space\n                if empty_index_ptr < len(empty_indices):\n                    output_grid[row_index, empty_indices[empty_index_ptr]] = 3\n                    if empty_indices[empty_index_ptr] != green_index:  #don't set to zero if already at destination\n                        output_grid[row_index, green_index] = 0\n                    empty_index_ptr += 1\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3884,
    "candidates_token_count": 808,
    "total_token_count": 4692,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 34.49206
}