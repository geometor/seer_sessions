{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms magenta (6) and orange (7) pixels in the input grid based on their\nneighborhood and contiguity, while leaving other colored pixels unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the observed rules.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    magenta_pixels = find_pixels(input_grid, 6)\n    orange_pixels = find_pixels(input_grid, 7)\n\n    # Transform magenta pixels.\n    for i, j in magenta_pixels:\n        output_grid[i, j] = transform_magenta(input_grid, i, j)\n\n    # Transform orange pixels.\n    for i, j in orange_pixels:\n        output_grid[i,j] = transform_orange(input_grid, i, j)\n\n    return output_grid\n\ndef find_pixels(grid, color):\n    \"\"\"\n    Finds the coordinates of all pixels of a given color.\n    \"\"\"\n    return list(zip(*np.where(grid == color)))\n\ndef transform_magenta(input_grid, i, j):\n    \"\"\"Determine transformation for magenta based on observations\"\"\"\n    # get the object that includes (i,j)\n    magenta_object = get_object(input_grid, i, j, 6)\n\n    # find the vertical/horizontal bounds\n    min_row = min([p[0] for p in magenta_object])\n    max_row = max([p[0] for p in magenta_object])\n    min_col = min([p[1] for p in magenta_object])\n    max_col = max([p[1] for p in magenta_object])\n\n    if (max_row - min_row) <= 1 and (max_col - min_col) <= 2: # small horizontal\n      if i == min_row: return 8 if j > (input_grid.shape[1] // 2) else 4\n      else: return 8 if j > (input_grid.shape[1] // 2) else 4\n\n    if i == max_row: return 5 # bottom of grid\n    \n    # transform differently by row\n    # this could be generalized to position within the object, but more data is\n    # required\n    if i == min_row : return 8 if j > (input_grid.shape[1]//2) else 4 #top row\n    if i == min_row+1 : return 9 if j > (input_grid.shape[1]//2) else 3 #top row+1\n    if i == min_row +2: return 9 if j > (input_grid.shape[1]//2) else 3\n    if i == min_row + 3: return 4 if j > (input_grid.shape[1]//2) else 2\n\n    \n    return 6\n\ndef transform_orange(input_grid, i, j):\n    \"\"\"Determine transformation for orange based on observations\"\"\"\n      \n    neighbors = get_neighbors(input_grid, i, j)\n    for x, y in neighbors:\n        if input_grid[x, y] == 6:\n            return 4\n    return 7\n\n\ndef get_neighbors(grid, i, j):\n    \"\"\"\n    Gets the coordinates of the neighbors of a pixel (including diagonals).\n    \"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    for x in range(max(0, i - 1), min(rows, i + 2)):\n        for y in range(max(0, j - 1), min(cols, j + 2)):\n            if (x, y) != (i, j):\n                neighbors.append((x, y))\n    return neighbors\n\ndef get_object(grid, row, col, color):\n  \"\"\"\n  Finds a contiguous object in the grid starting at the given row and column.\n  \"\"\"\n  rows, cols = grid.shape\n  visited = set()\n  to_visit = [(row, col)]\n  object_pixels = []\n\n  while to_visit:\n      current_row, current_col = to_visit.pop()\n\n      if (current_row, current_col) in visited:\n          continue\n      visited.add((current_row, current_col))\n\n      if 0 <= current_row < rows and 0 <= current_col < cols and grid[current_row, current_col] == color:\n        object_pixels.append((current_row, current_col))\n        # Add neighbors to the list of cells to visit\n        for dr in [-1, 0, 1]:\n            for dc in [-1, 0, 1]:\n                if dr == 0 and dc == 0:\n                    continue\n                to_visit.append((current_row + dr, current_col + dc))\n\n  return object_pixels\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6657,
    "candidates_token_count": 1129,
    "total_token_count": 7786,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 18.579473
}