{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an irregular yellow region in the input grid into a centered, expanded rectangle in the output grid.\nThe output width is twice the input bounding box width.\nThe output height is 6, unless the input height is greater than the input width, in which case the output height is also twice the input bounding box width.\nThe output is filled with a centered yellow rectangle where rows or columns are added as needed.\n\"\"\"\n\nimport numpy as np\n\ndef find_yellow_region(grid):\n    # Find coordinates of all yellow pixels\n    yellow_coords = np.argwhere(grid == 4)\n    return yellow_coords\n\ndef bounding_box(coords):\n    # Calculate the bounding box of a set of coordinates\n    if len(coords) == 0:\n      return None\n    \n    min_row, min_col = np.min(coords, axis=0)\n    max_row, max_col = np.max(coords, axis=0)\n    return (min_row, min_col, max_row, max_col)\n\ndef transform(input_grid):\n    input_grid = np.array(input_grid)\n\n    # 1. Identify the Yellow Region\n    yellow_coords = find_yellow_region(input_grid)\n\n    # If no yellow region, return a blank grid (arbitrary size, based on prompt examples)\n    if len(yellow_coords) == 0:\n        return np.zeros((6,6), dtype=int).tolist()\n\n    # 2. Bounding Box\n    bbox = bounding_box(yellow_coords)\n    min_row, min_col, max_row, max_col = bbox\n    input_width = max_col - min_col + 1\n    input_height = max_row - min_row + 1\n\n\n    # 3. Determine Output Dimensions\n    output_width = 2 * input_width\n    output_height = 6 if input_height <= input_width else 2 * input_width\n\n    # 4. Create Output Grid\n    output_grid = np.zeros((output_height, output_width), dtype=int)\n\n    # 5. Determine Inner Filled Rectangle Dimensions\n    fill_width = input_width * 2\n    fill_height = input_height\n\n    if fill_width > output_width:\n      fill_width = output_width\n    \n    if fill_height > output_height:\n      fill_height = output_height\n\n    if input_height <= input_width:\n      fill_height = output_width # add rows to make a square\n    else:\n       fill_width = output_height # add columns to make a square\n\n    # 6. Center and Fill\n    row_start = (output_height - fill_height) // 2\n    col_start = (output_width - fill_width) // 2\n\n    for row in range(row_start, row_start + fill_height):\n        for col in range(col_start, col_start + fill_width):\n            output_grid[row, col] = 4\n            \n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5773,
    "candidates_token_count": 712,
    "total_token_count": 6485,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.458902
}