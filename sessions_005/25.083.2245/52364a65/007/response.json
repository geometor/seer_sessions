{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Contiguous Blocks:** Find contiguous blocks of non-azure pixels. A contiguous block is a group of one or more pixels of the same color that are directly adjacent (up, down, left, or right, but *not* diagonally).\n2.  **Check for Azure Adjacency:** For each contiguous block, check if *any* of its pixels are adjacent to an azure (8) pixel. The direction towards that adjacent azure defines the \"shift direction\" for that block. If a block borders azure in more than one direction, pick an arbitrary direction.\n3.  **Shift the Block:** Shift the entire contiguous block one step in the shift direction.\n4.  **Fill with Azure:** The original positions of the shifted pixels are replaced with azure (8) pixels.\n5.  **Iterate**: repeat steps 1-4 on the changed grid. Continue iterating and shifting until no more contiguous blocks can be shifted (i.e. no blocks are directly adjacent to any azure pixels).\n6. **Color Invariance:** The only colors in the final output should have been those present in the initial grid.\n\"\"\"\n\nimport numpy as np\n\ndef find_contiguous_blocks(grid):\n    \"\"\"Finds all contiguous blocks of non-azure pixels.\"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n    blocks = []\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def dfs(r, c, color, block):\n        if not is_valid(r, c) or visited[r, c] or grid[r, c] != color:\n            return\n        visited[r, c] = True\n        block.append((r, c))\n        dfs(r + 1, c, color, block)\n        dfs(r - 1, c, color, block)\n        dfs(r, c + 1, color, block)\n        dfs(r, c - 1, color, block)\n\n    for r in range(rows):\n        for c in range(cols):\n            if not visited[r, c] and grid[r, c] != 8:\n                block = []\n                dfs(r, c, grid[r, c], block)\n                blocks.append(block)\n    return blocks\n\ndef get_shift_direction(grid, block):\n    \"\"\"Determines the shift direction for a block.\"\"\"\n    rows, cols = grid.shape\n    for r, c in block:\n        if r > 0 and grid[r - 1, c] == 8:\n            return \"up\"\n        if r < rows - 1 and grid[r + 1, c] == 8:\n            return \"down\"\n        if c > 0 and grid[r, c - 1] == 8:\n            return \"left\"\n        if c < cols - 1 and grid[r, c + 1] == 8:\n            return \"right\"\n    return None\n\ndef shift_block(grid, block, direction):\n    \"\"\"Shifts a block one step in the given direction.\"\"\"\n    new_grid = np.copy(grid)\n    if direction == \"up\":\n        for r, c in block:\n            new_grid[r - 1, c] = grid[r, c]\n            new_grid[r,c] = 8\n    elif direction == \"down\":\n        for r, c in block:\n            new_grid[r + 1, c] = grid[r, c]\n            new_grid[r,c] = 8\n\n    elif direction == \"left\":\n        for r, c in block:\n            new_grid[r, c - 1] = grid[r, c]\n            new_grid[r,c] = 8\n\n    elif direction == \"right\":\n        for r, c in block:\n            new_grid[r, c + 1] = grid[r, c]\n            new_grid[r,c] = 8\n    return new_grid\n\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n\n    # Iterate until no more shifts are possible\n    while True:\n        # Find contiguous blocks\n        blocks = find_contiguous_blocks(output_grid)\n\n        # Check for shifts and perform them\n        shifted = False\n        for block in blocks:\n            direction = get_shift_direction(output_grid, block)\n            if direction:\n                output_grid = shift_block(output_grid, block, direction)\n                shifted = True\n        if not shifted:\n             break\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5892,
    "candidates_token_count": 1075,
    "total_token_count": 6967,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 18.321001
}