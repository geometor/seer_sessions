{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid into an output grid based on the presence of the digit '2' in each column. Columns with '2' are replaced with all '1's. Columns without '2' are mapped to output, replacing non-zero values with 1 and 0 with 0, after truncating a number of elements from the bottom equal to the count of contiguous non-zero entries at the end of the input column.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    # Initialize output grid dimensions\n    input_rows = len(input_grid)\n    input_cols = len(input_grid[0])\n    output_cols = 0\n    output_rows = 0\n\n\n    # pre-calculate output_cols\n    for j in range(input_cols):\n      col = [input_grid[i][j] for i in range(input_rows)]\n      if 2 in col:\n        output_cols +=1\n      else:\n        output_cols += 1\n\n    # pre-calculate output_rows\n    output_rows = input_rows\n\n    output_grid = [[0] * output_cols for _ in range(output_rows)]\n\n    output_col_index = 0\n    for j in range(input_cols):\n        col = [input_grid[i][j] for i in range(input_rows)]\n        if 2 in col:\n            # Fill the entire output column with '1'\n            for i in range(output_rows):\n                output_grid[i][output_col_index] = 1\n            output_col_index += 1\n        else:\n            # count number of contiguous non-zero entries at the bottom of the column\n            n = 0\n            for i in reversed(range(input_rows)):\n              if col[i] != 0:\n                n += 1\n              else:\n                break\n\n            # Map the input column to the output column, considering '0' and other digits, skip last n\n            for i in range(output_rows - n):\n                output_grid[i][output_col_index] = 1 if col[i] != 0 else 0\n            output_col_index += 1\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6859,
    "candidates_token_count": 514,
    "total_token_count": 7373,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 5.610628
}