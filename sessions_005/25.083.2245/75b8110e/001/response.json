{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid into a 4x4 output grid by extracting specific\npixels from the four quadrants of the input grid and placing them in the\ncorners of the output grid. The remaining cells of the output grid are\nfilled with the value of their nearest corner neighbor.\n\"\"\"\n\nimport numpy as np\n\ndef manhattan_distance(x1, y1, x2, y2):\n    \"\"\"Calculates the Manhattan distance between two points.\"\"\"\n    return abs(x1 - x2) + abs(y1 - y2)\n\ndef find_closest_nonzero(grid, quadrant):\n    \"\"\"Finds the non-zero pixel closest to a corner within a quadrant.\"\"\"\n    height, width = grid.shape\n    center_x = width // 2\n    center_y = height // 2\n    min_dist = float('inf')\n    closest_val = 0\n\n    # Define corner coordinates based on quadrant\n    if quadrant == \"top_left\":\n        corner_x, corner_y = 0, 0\n    elif quadrant == \"top_right\":\n        corner_x, corner_y = width - 1, 0\n    elif quadrant == \"bottom_left\":\n        corner_x, corner_y = 0, height - 1\n    elif quadrant == \"bottom_right\":\n        corner_x, corner_y = width - 1, height - 1\n    else:\n        raise ValueError(\"Invalid quadrant specified.\")\n\n    for y in range(height):\n        for x in range(width):\n            # Check quadrant boundaries\n            if quadrant == \"top_left\" and (x >= center_x or y >= center_y):\n                continue\n            if quadrant == \"top_right\" and (x < center_x or y >= center_y):\n                continue\n            if quadrant == \"bottom_left\" and (x >= center_x or y < center_y):\n                continue\n            if quadrant == \"bottom_right\" and (x < center_x or y < center_y):\n                continue\n\n            if grid[y, x] != 0:\n                dist = manhattan_distance(x, y, corner_x, corner_y)\n                if dist < min_dist:\n                    min_dist = dist\n                    closest_val = grid[y, x]\n                elif dist == min_dist and grid[y,x] < closest_val:\n                    closest_val = grid[y,x]\n\n    return closest_val\n\ndef fill_remaining_cells(output_grid):\n    \"\"\"Fills in the remaining cells of the output grid.\"\"\"\n    filled_grid = output_grid.copy()\n    for y in range(4):\n        for x in range(4):\n            if filled_grid[y, x] == 0:\n                min_dist = float('inf')\n                closest_val = 0\n                # Check distances to corner values\n                distances = [\n                    (manhattan_distance(x, y, 0, 0), filled_grid[0, 0]),\n                    (manhattan_distance(x, y, 3, 0), filled_grid[0, 3]),\n                    (manhattan_distance(x, y, 0, 3), filled_grid[3, 0]),\n                    (manhattan_distance(x, y, 3, 3), filled_grid[3, 3])\n                ]\n\n                for dist, val in distances:\n                    if val != 0: #Consider distances only to initialized cells\n                        if dist < min_dist:\n                            min_dist = dist\n                            closest_val = val\n                        elif dist == min_dist: #tie breaker\n                           closest_val = val\n                filled_grid[y, x] = closest_val\n    return filled_grid\n\ndef transform(input_grid):\n    # Convert input grid to numpy array\n    input_grid = np.array(input_grid)\n\n    # Initialize output grid\n    output_grid = np.zeros((4, 4), dtype=int)\n\n    # Extract corner pixels from quadrants\n    output_grid[0, 0] = find_closest_nonzero(input_grid, \"top_left\")\n    output_grid[0, 3] = find_closest_nonzero(input_grid, \"top_right\")\n    output_grid[3, 0] = find_closest_nonzero(input_grid, \"bottom_left\")\n    output_grid[3, 3] = find_closest_nonzero(input_grid, \"bottom_right\")\n    \n    # Fill in the remaining cells\n    output_grid = fill_remaining_cells(output_grid)\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2716,
    "candidates_token_count": 1066,
    "total_token_count": 3782,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 13.268555
}