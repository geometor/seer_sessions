{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid into a 4x4 output grid. The input grid is divided\ninto four quadrants. The most frequent non-zero color in each quadrant is\nassigned to the corresponding corner of the output grid. Zeros are inserted\nbased on their position between identical non-zero colors in the input grid.\nThe remaining cells are filled based on adjacent neighbors.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef get_quadrant(input_grid, quadrant):\n    \"\"\"Divides the input grid into four quadrants and returns the specified quadrant.\"\"\"\n    grid = np.array(input_grid)\n    height, width = grid.shape\n    center_y = height // 2\n    center_x = width // 2\n\n    if quadrant == \"top_left\":\n        return grid[:center_y, :center_x]\n    elif quadrant == \"top_right\":\n        return grid[:center_y, center_x:]\n    elif quadrant == \"bottom_left\":\n        return grid[center_y:, :center_x]\n    elif quadrant == \"bottom_right\":\n        return grid[center_y:, center_x:]\n    else:\n        raise ValueError(\"Invalid quadrant specified.\")\n\ndef most_frequent_nonzero(quadrant):\n    \"\"\"\n    Finds the most frequent non-zero color in a quadrant, with a tie-breaker.\n    If a quadrant only consists of zeros, returns 0.\n    \"\"\"\n    colors = quadrant.flatten().tolist()\n    counts = Counter(colors)\n    \n    if 0 in counts:\n        del counts[0]\n    \n    if not counts: #If no colors other than zero\n      return 0\n\n    max_count = max(counts.values())\n    most_frequent = [color for color, count in counts.items() if count == max_count]\n    return min(most_frequent)\n  \ndef insert_zeros(input_grid, output_grid):\n    \"\"\"\n    Inserts zeros into the output grid based on the input grid.\n    If a zero exists between two identical non-zero colors,\n    horizontally or vertically, insert a zero in the output.\n    \"\"\"\n    input_grid = np.array(input_grid)\n    output_grid = np.array(output_grid)  # Make a copy to modify\n    height, width = input_grid.shape\n    output_height, output_width = output_grid.shape\n\n    for r in range(height):\n        for c in range(width):\n            if input_grid[r,c] == 0:\n              if c > 0 and c < width -1:\n                if input_grid[r,c-1] == input_grid[r, c+1] and input_grid[r,c-1] !=0:\n                    out_r = int(r / height * output_height)\n                    out_c = int(c / width * output_width)\n                    if 0<= out_r < output_height and 0 <= out_c < output_width:\n                      output_grid[out_r,out_c]=0\n              if r > 0 and r < height-1:\n                if input_grid[r-1,c] == input_grid[r+1,c] and input_grid[r-1,c] != 0:\n                    out_r = int(r / height * output_height)\n                    out_c = int(c / width * output_width)\n                    if 0<= out_r < output_height and 0 <= out_c < output_width:\n                      output_grid[out_r, out_c]=0\n    return output_grid.tolist()\n\ndef fill_remaining(output_grid):\n    \"\"\"Fills remaining cells based on adjacent cells (up, down, left, right).\"\"\"\n    output_grid = np.array(output_grid)\n    height, width = output_grid.shape\n    \n    # Iterate until no more changes are made\n    changed = True\n    while changed:\n        changed = False\n        for r in range(height):\n            for c in range(width):\n                if output_grid[r, c] == 0:  # Only fill empty cells\n                    neighbors = []\n                    if r > 0:\n                        neighbors.append(output_grid[r - 1, c])\n                    if r < height - 1:\n                        neighbors.append(output_grid[r + 1, c])\n                    if c > 0:\n                        neighbors.append(output_grid[r, c - 1])\n                    if c < width - 1:\n                        neighbors.append(output_grid[r, c + 1])\n\n                    # Filter out zeros from neighbors and find the most frequent\n                    non_zero_neighbors = [n for n in neighbors if n != 0]\n                    if non_zero_neighbors:\n                        most_common = Counter(non_zero_neighbors).most_common(1)[0][0]\n                        output_grid[r,c] = most_common\n                        changed = True #Mark that there was a change\n    return output_grid.tolist()\n\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the defined rules.\"\"\"\n\n    # Initialize output grid\n    output_grid = np.zeros((4, 4), dtype=int)\n\n    # Get most frequent colors for each quadrant\n    top_left_color = most_frequent_nonzero(get_quadrant(input_grid, \"top_left\"))\n    top_right_color = most_frequent_nonzero(get_quadrant(input_grid, \"top_right\"))\n    bottom_left_color = most_frequent_nonzero(get_quadrant(input_grid, \"bottom_left\"))\n    bottom_right_color = most_frequent_nonzero(get_quadrant(input_grid, \"bottom_right\"))\n\n    # Assign corner values based on most frequent colors in quadrants\n    output_grid[0, 0] = top_left_color\n    output_grid[0, 3] = top_right_color\n    output_grid[3, 0] = bottom_left_color\n    output_grid[3, 3] = bottom_right_color\n    \n    output_grid = insert_zeros(input_grid, output_grid)\n\n    output_grid = fill_remaining(output_grid)\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7497,
    "candidates_token_count": 1470,
    "total_token_count": 8967,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 19.212669
}