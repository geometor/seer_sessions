{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies gray (5) pixels in the input grid. If gray pixels are diagonally\nadjacent, they are connected by a single-pixel-wide blue (1) line.  If a gray\npixel is not part of a diagonal connection, it's expanded into a 3x3 square of\nblue (1) pixels. White (0) pixels remain unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef get_gray_pixels(grid):\n    # Find coordinates of all gray pixels (value 5).\n    return np.argwhere(grid == 5)\n\ndef are_diagonally_adjacent(pixel1, pixel2):\n    # Check if two pixels are diagonally adjacent.\n    return abs(pixel1[0] - pixel2[0]) == abs(pixel1[1] - pixel2[1]) and not np.array_equal(pixel1,pixel2)\n\ndef connect_with_blue_line(grid, pixel1, pixel2):\n    # Connect two diagonally adjacent pixels with a single-pixel-wide blue line.\n    output_grid = np.copy(grid)\n    row1, col1 = pixel1\n    row2, col2 = pixel2\n\n    row_step = 1 if row2 > row1 else -1\n    col_step = 1 if col2 > col1 else -1\n\n    current_row, current_col = row1, col1\n    while current_row != row2 + row_step or current_col != col2 + col_step:\n        output_grid[current_row, current_col] = 1\n        current_row += row_step\n        current_col += col_step\n\n    return output_grid\n\ndef expand_to_blue_square(grid, row, col):\n    # Create a 3x3 blue square centered at (row, col).\n    output_grid = np.copy(grid)\n    for i in range(max(0, row - 1), min(grid.shape[0], row + 2)):\n        for j in range(max(0, col - 1), min(grid.shape[1], col + 2)):\n            output_grid[i, j] = 1\n    return output_grid\n\ndef transform(input_grid):\n    # Initialize output grid with zeros and same dimensions as input.\n    output_grid = np.zeros_like(input_grid)\n\n    # Copy white pixels from input to output.\n    output_grid[input_grid == 0] = 0\n\n    # Find gray pixels in the input grid.\n    gray_pixels = get_gray_pixels(input_grid)\n\n    # Create a copy to track connections\n    connected = [False] * len(gray_pixels)\n\n    # Connect diagonally adjacent gray pixels.\n    for i in range(len(gray_pixels)):\n      for j in range(i + 1, len(gray_pixels)):\n        if are_diagonally_adjacent(gray_pixels[i], gray_pixels[j]):\n          output_grid = connect_with_blue_line(output_grid, gray_pixels[i], gray_pixels[j])\n          connected[i]=True\n          connected[j]=True\n\n    # Expand non-connected gray pixels.\n    for i in range(len(gray_pixels)):\n        if not connected[i]:\n           output_grid = expand_to_blue_square(output_grid,gray_pixels[i][0], gray_pixels[i][1] )\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5191,
    "candidates_token_count": 799,
    "total_token_count": 5990,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 12.794439
}