{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Regions:** Identify all contiguous regions of orange (7) pixels and red (2) pixels.  A region consists of pixels of the same color connected horizontally or vertically.\n2.  **Determine Relative Position and Adjacency:** Determine the relative positions of the orange and red regions based on a top-to-bottom, left-to-right reading order. For each orange region, check if it *is* adjacent to any red region.\n3.  **Transform Orange Regions:**\n    *   If an orange region *is* adjacent to any red region, change *all* pixels in the orange region to green (3).\n    *   If an orange region is *not* adjacent to any red region (based on top-bottom, left-right positioning), change *all* pixels in that orange region to gray (5).\n4.  **Preserve Red Regions:** Red (2) pixels are unchanged.\n\"\"\"\n\nimport numpy as np\nfrom scipy.ndimage import label\n\ndef get_regions(grid, color):\n    \"\"\"\n    Identifies contiguous regions of a specific color in the grid.\n    \"\"\"\n    colored_grid = (grid == color).astype(int)\n    labeled_grid, num_labels = label(colored_grid)\n    regions = []\n    for i in range(1, num_labels + 1):\n        regions.append(np.where(labeled_grid == i))\n    return regions\n\ndef is_adjacent(region, other_color_regions, grid):\n    \"\"\"\n    Checks if a given region is adjacent to any region of another color.\n    \"\"\"\n    rows, cols = region\n    for r, c in zip(rows, cols):\n        neighbors = []\n        if r > 0:\n            neighbors.append((r - 1, c))  # Up\n        if r < grid.shape[0] - 1:\n            neighbors.append((r + 1, c))  # Down\n        if c > 0:\n            neighbors.append((r, c - 1))  # Left\n        if c < grid.shape[1] - 1:\n            neighbors.append((r, c + 1))  # Right\n\n        for neighbor_row, neighbor_col in neighbors:\n            for other_region in other_color_regions:\n                other_rows, other_cols = other_region\n                if (neighbor_row, neighbor_col) in zip(other_rows, other_cols):\n                    return True\n    return False\n\ndef get_top_left(region):\n    \"\"\"Returns the top-left coordinate of a region.\"\"\"\n    rows, cols = region\n    min_row_index = np.argmin(rows)\n    min_col_index = np.argmin(cols)\n\n    #if multiple with the same min row, use the one with the lowest col.\n    min_row = rows[min_row_index]\n    min_cols_at_min_row = cols[rows == min_row]\n    min_col = np.min(min_cols_at_min_row)\n\n    return min_row, min_col\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of input_grid\n    output_grid = np.copy(input_grid)\n\n    # 1. Identify Regions\n    orange_regions = get_regions(input_grid, 7)\n    red_regions = get_regions(input_grid, 2)\n\n    # 2 & 3. Transform Orange Regions based on Adjacency and Position\n    for orange_region in orange_regions:\n        adjacent_to_red = is_adjacent(orange_region, red_regions, input_grid)\n        \n        if not adjacent_to_red:\n            output_grid[orange_region] = 5 # Change to gray\n            continue\n\n        # check position - any red must be \"before\" orange\n        orange_top_left = get_top_left(orange_region)\n        is_before = False\n        for red_region in red_regions:\n          red_top_left = get_top_left(red_region)\n          if (red_top_left[0] < orange_top_left[0] or\n              (red_top_left[0] == orange_top_left[0] and red_top_left[1] < orange_top_left[1])):\n            is_before = True\n            break\n\n        if adjacent_to_red:\n            output_grid[orange_region] = 3  # Change to green\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7287,
    "candidates_token_count": 1040,
    "total_token_count": 8327,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 14.1803
}