{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify the \"X\" Shape:** In the input grid, identify the color that forms a diagonally connected \"X\" shape. This \"X\" may be slightly distorted but maintains diagonal connectivity. Note, not all grids contain an X.\n\n2.  **Preserve the \"X\" Color:** If an \"X\" shape is present, keep all pixels of that color in the output grid, setting the remaining pixels to 0.\n\n3. **Handle \"+\" shape:** If no \"X\" exists: locate the \"+\" shape in the input, preserve it in the output.\nSet the remaining pixels to 0.\n\"\"\"\n\nimport numpy as np\n\ndef find_x_shape(grid):\n    \"\"\"\n    Finds the color forming an 'X' shape in the grid.\n    Returns the color if found, otherwise returns None.\n    \"\"\"\n    rows, cols = grid.shape\n    colors = np.unique(grid)\n\n    for color in colors:\n        if color == 0:  # Skip background\n            continue\n\n        # Check for diagonal connectivity\n        is_x = False\n        for r in range(rows):\n            for c in range(cols):\n                if grid[r, c] == color:\n                    # Check for diagonal neighbors\n                    if (r > 0 and c > 0 and grid[r-1, c-1] == color) or \\\n                       (r > 0 and c < cols - 1 and grid[r-1, c+1] == color) or \\\n                       (r < rows - 1 and c > 0 and grid[r+1, c-1] == color) or \\\n                       (r < rows - 1 and c < cols - 1 and grid[r+1, c+1] == color):\n                        is_x = True\n                        break\n            if is_x:\n                break\n        if is_x: return color\n\n    return None\n    \ndef find_plus_shape(grid):\n    \"\"\"\n    Identifies a '+' shape in the grid.\n    \"\"\"\n    rows, cols = grid.shape\n    colors = np.unique(grid)\n\n    for color in colors:\n      if color == 0: continue\n      \n      for r in range(1, rows - 1):\n          for c in range(1, cols - 1):\n            if grid[r,c] == color:\n              if (grid[r+1, c] == color and grid[r-1, c] == color and grid[r, c+1] == color and grid[r, c-1] == color):\n                return color\n    return None\n    \ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.zeros_like(input_grid)\n\n    # Find X shape color\n    x_color = find_x_shape(input_grid)\n\n    if x_color is not None:\n        # Preserve X shape color\n        for r in range(input_grid.shape[0]):\n            for c in range(input_grid.shape[1]):\n                if input_grid[r, c] == x_color:\n                    output_grid[r, c] = x_color\n    else:\n      #look for plus\n      plus_color = find_plus_shape(input_grid)\n      \n      if plus_color is not None:\n        for r in range(input_grid.shape[0]):\n          for c in range(input_grid.shape[1]):\n            if input_grid[r, c] == plus_color:\n              output_grid[r,c] = plus_color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4633,
    "candidates_token_count": 831,
    "total_token_count": 5464,
    "cached_content_token_count": 0
  },
  "response_time": 10.952729
}