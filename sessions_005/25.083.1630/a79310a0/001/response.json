{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe program identifies contiguous blocks of azure (8) pixels in the input grid,\ncreates corresponding blocks of the same shape using red (2) pixels, and\npositions these red blocks centered vertically and horizontally.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, color):\n    \"\"\"Finds contiguous blocks of a specified color.\"\"\"\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n\n    def dfs(row, col, current_object):\n        if (row < 0 or row >= grid.shape[0] or col < 0 or col >= grid.shape[1] or\n                visited[row, col] or grid[row, col] != color):\n            return\n        visited[row, col] = True\n        current_object.append((row, col))\n        dfs(row + 1, col, current_object)\n        dfs(row - 1, col, current_object)\n        dfs(row, col + 1, current_object)\n        dfs(row, col - 1, current_object)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if not visited[row, col] and grid[row, col] == color:\n                current_object = []\n                dfs(row, col, current_object)\n                objects.append(current_object)\n    return objects\n\ndef find_center(obj):\n    \"\"\"\n    Finds vertical and horizontal center based on original object shape y, x\n    \"\"\"\n    min_row = min(point[0] for point in obj)\n    max_row = max(point[0] for point in obj)\n    min_col = min(point[1] for point in obj)\n    max_col = max(point[1] for point in obj)\n\n    center_row = min_row\n    center_col = min_col\n\n    return center_row, center_col\n\ndef transform(input_grid):\n    # Initialize output_grid with zeros (white)\n    output_grid = np.zeros_like(input_grid)\n\n    # Find azure objects\n    azure_objects = find_objects(input_grid, 8)\n    \n    # Create and position red objects\n    for obj in azure_objects:\n        # Find object center\n        center_row, center_col = find_center(obj)\n\n        # Create red object and place\n        for row, col in obj:\n            output_grid[row, col] = 0 #remove original\n            output_grid[center_row, center_col] = 2\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1989,
    "candidates_token_count": 608,
    "total_token_count": 2597,
    "cached_content_token_count": 0
  },
  "response_time": 8.90688
}