{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe program identifies contiguous blocks of azure (8) pixels in the input grid,\ncreates corresponding blocks of the same shape using red (2) pixels, and\npositions these red blocks centered vertically and horizontally in the output grid,\nadjusting placement if necessary to ensure the entire object fits within the grid. The\noriginal azure objects are removed.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, color):\n    \"\"\"Finds contiguous blocks of a specified color.\"\"\"\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n\n    def dfs(row, col, current_object):\n        if (row < 0 or row >= grid.shape[0] or col < 0 or col >= grid.shape[1] or\n                visited[row, col] or grid[row, col] != color):\n            return\n        visited[row, col] = True\n        current_object.append((row, col))\n        dfs(row + 1, col, current_object)\n        dfs(row - 1, col, current_object)\n        dfs(row, col + 1, current_object)\n        dfs(row, col - 1, current_object)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if not visited[row, col] and grid[row, col] == color:\n                current_object = []\n                dfs(row, col, current_object)\n                objects.append(current_object)\n    return objects\n\ndef get_object_dimensions(obj):\n    \"\"\"Calculates the height and width of an object.\"\"\"\n    min_row = min(point[0] for point in obj)\n    max_row = max(point[0] for point in obj)\n    min_col = min(point[1] for point in obj)\n    max_col = max(point[1] for point in obj)\n    return max_row - min_row + 1, max_col - min_col + 1\n\ndef calculate_center_placement(output_grid_shape, object_height, object_width):\n    \"\"\"Calculates the top-left placement coordinates for centering, adjusting for bounds.\"\"\"\n    center_row = output_grid_shape[0] // 2\n    center_col = output_grid_shape[1] // 2\n    placement_row = center_row - (object_height // 2)\n    placement_col = center_col - (object_width // 2)\n\n    # Adjust placement to ensure the object fits within the grid boundaries\n    if placement_row < 0:\n        placement_row = 0\n    elif placement_row + object_height > output_grid_shape[0]:\n        placement_row = output_grid_shape[0] - object_height\n\n    if placement_col < 0:\n        placement_col = 0\n    elif placement_col + object_width > output_grid_shape[1]:\n        placement_col = output_grid_shape[1] - object_width\n    \n    return placement_row, placement_col\n\ndef transform(input_grid):\n    # Initialize output_grid with zeros (white)\n    output_grid = np.zeros_like(input_grid)\n\n    # Find azure objects\n    azure_objects = find_objects(input_grid, 8)\n    \n    # Create and position red objects\n    for obj in azure_objects:\n        # Get object dimensions\n        object_height, object_width = get_object_dimensions(obj)\n\n        # Calculate placement for centering\n        placement_row, placement_col = calculate_center_placement(output_grid.shape, object_height, object_width)\n\n        #remove original\n        for row, col in obj:\n          output_grid[row,col] = 0\n\n        # Create red object and place in center\n        for row, col in obj:\n            new_row = row - min(r for r, c in obj) + placement_row\n            new_col = col - min(c for r, c in obj) + placement_col\n\n            #check bounds\n            if 0 <= new_row < output_grid.shape[0] and 0 <= new_col < output_grid.shape[1]:\n              output_grid[new_row, new_col] = 2\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5046,
    "candidates_token_count": 1006,
    "total_token_count": 6052,
    "cached_content_token_count": 0
  },
  "response_time": 7.633137
}