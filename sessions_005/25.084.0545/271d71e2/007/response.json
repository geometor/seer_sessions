{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Object Identification:** Identify all contiguous objects in the input grid. An object is a group of adjacent pixels (up, down, left, right - no diagonals) with the same color.  Store the color and coordinates of each object.\n\n2.  **Maroon Movement:** Identify all maroon (color 9) objects. For each maroon object, move all of its pixels up by one row in the output grid.  If a maroon pixel is already at the top row (row 0), it stays in place.  Clear the original positions of moved maroon pixels (set to color white=0)\n\n3.  **Grey Object Interaction:** Identify all grey (color 5) objects. For each grey pixel, check if there is a maroon pixel directly above it *in the output grid*.\n\n4.  **Conditional Transformation:** If a grey pixel has a maroon pixel directly above it in the output grid, change the grey pixel's color to orange (color 7) in the output grid.\n\n5.  **Output Construction:** Create the output grid by applying the above steps. All pixels that are not part of moved maroon objects or transformed grey objects retain their original color.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"Finds contiguous objects of the same color in a grid.\"\"\"\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n    rows, cols = grid.shape\n\n    def dfs(row, col, color, obj):\n        if row < 0 or row >= rows or col < 0 or col >= cols or visited[row, col] or grid[row, col] != color:\n            return\n        visited[row, col] = True\n        obj.append((row, col))\n        dfs(row + 1, col, color, obj)\n        dfs(row - 1, col, color, obj)\n        dfs(row, col + 1, color, obj)\n        dfs(row, col - 1, color, obj)\n\n    for r in range(rows):\n        for c in range(cols):\n            if not visited[r, c]:\n                obj = []\n                dfs(r, c, grid[r, c], obj)\n                if obj:\n                    objects.append((grid[r, c], obj))  # Store color and object\n    return objects\n\ndef transform(input_grid):\n    # initialize output_grid\n    input_grid = np.array(input_grid)\n    output_grid = input_grid.copy()\n    rows, cols = input_grid.shape\n\n    # Identify objects\n    objects = find_objects(input_grid)\n\n    # Locate maroon (9) objects\n    maroon_objects = [(color, obj) for color, obj in objects if color == 9]\n\n    # Move maroon objects up one row and update output_grid\n    for color, obj_coords in maroon_objects:\n        for r, c in obj_coords:\n            if r > 0:\n                output_grid[r - 1, c] = 9\n                output_grid[r,c] = 0 #clear the old spot\n            else:\n                output_grid[r,c] = 9\n\n    # Locate grey(5) objects\n    grey_objects =  [(color, obj) for color, obj in objects if color == 5]\n\n    #check for grey and change to orange(7)\n    for color, obj_coords in grey_objects:\n        for r, c in obj_coords:\n            if r > 0 and output_grid[r-1,c] == 9:\n                output_grid[r,c] = 7\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3633,
    "candidates_token_count": 835,
    "total_token_count": 4468,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.133085
}