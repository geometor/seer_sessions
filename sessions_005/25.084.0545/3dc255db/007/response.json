{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Color 9 Removal:**\n    *   Iterate through each cell in the grid.\n    *   If a cell has color 9, check if *any* of its immediate neighbors (up, down, left, or right) has color 0.\n    *   If a cell with color 9 has 0 as a neighbor, change the cell's color to 0.\n\n2.  **Enclosed Object Color Transformation:**\n    *   Identify all contiguous objects (blocks of the same non-zero color).\n    *   For each object:\n        *   Find all colors adjacent to the object (excluding the object's own color and 0).\n        *   If there is *only one* such adjacent color, change all pixels in the object to that color.\n\n3.  **Vertical Line Modification:**\n    * Scan each column from left to right.\n    * For each column:\n        * Find the top-most non-zero pixel.\n        * If there is *any* other non-zero pixel *below* it in the same column, change the top-most pixel's color to 0.\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, r, c):\n    \"\"\"Gets the coordinates of the four neighbors (up, down, left, right).\"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n        nr, nc = r + dr, c + dc\n        if 0 <= nr < rows and 0 <= nc < cols:\n            neighbors.append((nr, nc))\n    return neighbors\n\ndef get_adjacent_colors(grid, r, c):\n    \"\"\"Gets the colors of the four neighbors (up, down, left, right).\"\"\"\n    rows, cols = grid.shape\n    adjacent_colors = set()\n    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n        nr, nc = r + dr, c + dc\n        if 0 <= nr < rows and 0 <= nc < cols:\n            adjacent_colors.add(grid[nr, nc])\n    return adjacent_colors\n\ndef find_contiguous_object(grid, start_row, start_col, color):\n    \"\"\"Finds a contiguous block of the given color starting from a given cell.\"\"\"\n    rows, cols = grid.shape\n    object_pixels = []\n    visited = set()\n    stack = [(start_row, start_col)]\n\n    while stack:\n        r, c = stack.pop()\n        if (r, c) in visited:\n            continue\n        visited.add((r, c))\n\n        if 0 <= r < rows and 0 <= c < cols and grid[r, c] == color:\n            object_pixels.append((r, c))\n            # Add adjacent cells to the stack\n            stack.extend(get_neighbors(grid, r, c))\n    return object_pixels\n\ndef transform(input_grid):\n    # initialize output_grid\n    input_grid = np.array(input_grid)\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # 1. Color 9 Removal\n    for r in range(rows):\n        for c in range(cols):\n            if input_grid[r, c] == 9:\n                if any(output_grid[nr, nc] == 0 for nr, nc in get_neighbors(output_grid, r, c)):\n                    output_grid[r, c] = 0\n\n    # 2. Enclosed Object Color Transformation\n    visited = set()\n    for r in range(rows):\n        for c in range(cols):\n            if (r, c) not in visited and output_grid[r, c] != 0:\n                color = output_grid[r, c]\n                object_pixels = find_contiguous_object(output_grid, r, c, color)\n                visited.update(object_pixels)\n\n                adjacent_colors = set()\n                for row, col in object_pixels:\n                    adjacent_colors.update(get_adjacent_colors(output_grid, row, col))\n                adjacent_colors.discard(color)\n                adjacent_colors.discard(0)\n\n                if len(adjacent_colors) == 1:\n                    new_color = adjacent_colors.pop()\n                    for row, col in object_pixels:\n                        output_grid[row, col] = new_color\n\n    # 3. Vertical Line Modification\n    for c in range(cols):\n        first_non_zero_row = -1\n        for r in range(rows):\n            if output_grid[r, c] != 0:\n                if first_non_zero_row == -1:\n                    first_non_zero_row = r\n                else:\n                    # Found a second non-zero pixel, change the first one.\n                    output_grid[first_non_zero_row, c] = 0\n                    break  # Stop searching in this column\n\n\n    return output_grid.tolist()\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6577,
    "candidates_token_count": 1189,
    "total_token_count": 7766,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 15.753671
}