{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Colored Regions:** Scan the input grid to find contiguous regions of non-white (non-0) pixels. Consider these regions as individual \"objects.\"\n2.  **Order by y-axis:** Order the regions from top to bottom. If they have the same top y coordinate, order by x axis, from left to right.\n3. **Select Regions:** Select a subset, up to 4 regions.\n4.  **Extract Sub-grids:** For each of the regions create a sub-grid, keeping only the minimum rectangle to contain the shape.\n5.  **Concatenate Sub-grids:**  Stack the extracted sub-grids horizontally, left to right, to form the output grid.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"Finds contiguous regions of non-zero pixels.\"\"\"\n    objects = []\n    visited = set()\n    rows, cols = grid.shape\n\n    def dfs(r, c, color, obj_coords):\n        if (r, c) in visited or r < 0 or r >= rows or c < 0 or c >= cols or grid[r, c] != color:\n            return\n        visited.add((r, c))\n        obj_coords.append((r, c))\n        dfs(r + 1, c, color, obj_coords)\n        dfs(r - 1, c, color, obj_coords)\n        dfs(r, c + 1, color, obj_coords)\n        dfs(r, c - 1, color, obj_coords)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and (r, c) not in visited:\n                obj_coords = []\n                dfs(r, c, grid[r, c], obj_coords)\n                if obj_coords:\n                    objects.append(obj_coords)\n    return objects\n\ndef order_objects(objects):\n    \"\"\"Orders objects by top-left corner (y then x).\"\"\"\n    def get_top_left(obj):\n        return min(obj, key=lambda x: (x[0], x[1]))\n    return sorted(objects, key=lambda obj: get_top_left(obj))\n\ndef extract_subgrids(grid, objects):\n    \"\"\"Extracts subgrids for each object.\"\"\"\n    subgrids = []\n    for obj in objects:\n        min_r = min(obj, key=lambda x: x[0])[0]\n        max_r = max(obj, key=lambda x: x[0])[0]\n        min_c = min(obj, key=lambda x: x[1])[1]\n        max_c = max(obj, key=lambda x: x[1])[1]\n        subgrids.append(grid[min_r:max_r + 1, min_c:max_c + 1])\n    return subgrids\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the described rules.\"\"\"\n    # Find contiguous non-zero regions (objects)\n    objects = find_objects(input_grid)\n\n    # Order objects by top-left corner (y then x)\n    ordered_objects = order_objects(objects)\n    \n    # Select the first 4 objects\n    selected_objects = ordered_objects[:4]\n    \n    # Extract subgrids for selected objects\n    subgrids = extract_subgrids(input_grid, selected_objects)\n\n    # Concatenate subgrids horizontally\n    if subgrids:\n      output_grid = np.concatenate(subgrids, axis=1)\n    else:\n      output_grid = np.array([])\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4460,
    "candidates_token_count": 844,
    "total_token_count": 5304,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.723694
}