{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation rule involves finding the bounding box for each distinct\nnon-zero color in the input grid, and then reconstructing an output that\nrepresents the layout of non-zero objects.\n\"\"\"\n\nimport numpy as np\n\ndef get_bounding_box_per_color(grid):\n    \"\"\"\n    Finds the bounding box of each distinct non-zero color in a grid.\n\n    Args:\n        grid: A 2D numpy array.\n\n    Returns:\n        A dictionary where keys are colors (integers) and values are tuples\n        (min_row, max_row, min_col, max_col) representing the bounding box.\n        Returns empty dict if no objects found.\n    \"\"\"\n    bounding_boxes = {}\n    unique_colors = np.unique(grid)\n\n    for color in unique_colors:\n        if color != 0:  # Ignore background color\n            rows, cols = np.where(grid == color)\n            if rows.size and cols.size:\n                min_row, max_row = np.min(rows), np.max(rows)\n                min_col, max_col = np.min(cols), np.max(cols)\n                bounding_boxes[color] = (min_row, max_row, min_col, max_col)\n    return bounding_boxes\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by finding bounding boxes for each distinct color,\n    and reconstruct the output grid.\n\n    Args:\n        input_grid: A 2D list representing the input grid.\n\n    Returns:\n        A 2D list representing the output grid.\n    \"\"\"\n    input_grid = np.array(input_grid)\n    color_bboxes = get_bounding_box_per_color(input_grid)\n\n    if not color_bboxes:\n        return []\n\n    # Find overall bounding box encompassing all color-specific boxes\n    all_min_row = min(bbox[0] for bbox in color_bboxes.values())\n    all_max_row = max(bbox[1] for bbox in color_bboxes.values())\n    all_min_col = min(bbox[2] for bbox in color_bboxes.values())\n    all_max_col = max(bbox[3] for bbox in color_bboxes.values())\n    \n    output_grid = np.zeros((all_max_row - all_min_row + 1, all_max_col - all_min_col + 1), dtype=int)\n\n    for color, (min_row, max_row, min_col, max_col) in color_bboxes.items():\n      # copy object into the output grid using the bounding box dimensions and\n      # location\n      object_rows, object_cols = np.where(input_grid == color)\n      \n      # compute relative position of each element\n      relative_rows = object_rows - all_min_row\n      relative_cols = object_cols - all_min_col\n      \n      # copy each element to the new grid\n      output_grid[relative_rows, relative_cols] = color\n    \n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6744,
    "candidates_token_count": 718,
    "total_token_count": 7462,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.578809
}