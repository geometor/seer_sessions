{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation rule is to find the smallest rectangular region (bounding box)\nthat contains all non-zero pixels in the input grid and extract that region as\nthe output grid.\n\"\"\"\n\nimport numpy as np\n\ndef get_bounding_box(grid):\n    \"\"\"\n    Finds the bounding box of non-zero elements in a grid.\n\n    Args:\n        grid: A 2D numpy array.\n\n    Returns:\n        A tuple (min_row, max_row, min_col, max_col) representing the bounding box.\n    \"\"\"\n    rows = np.any(grid != 0, axis=1)\n    cols = np.any(grid != 0, axis=0)\n    min_row, max_row = np.where(rows)[0][[0, -1]] if np.any(rows) else (0, 0)\n    min_col, max_col = np.where(cols)[0][[0, -1]] if np.any(cols) else (0, 0)\n    return min_row, max_row, min_col, max_col\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by extracting the smallest rectangular region\n    containing all non-zero pixels.\n\n    Args:\n        input_grid: A 2D list representing the input grid.\n\n    Returns:\n        A 2D list representing the output grid.\n    \"\"\"\n    # Convert to numpy array for easier manipulation\n    input_grid = np.array(input_grid)\n\n    # Find the bounding box\n    min_row, max_row, min_col, max_col = get_bounding_box(input_grid)\n\n    # Extract the subgrid defined by the bounding box\n    output_grid = input_grid[min_row:max_row+1, min_col:max_col+1]\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7507,
    "candidates_token_count": 434,
    "total_token_count": 7941,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.653055
}