{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by replacing '0' pixels with the color of adjacent non-zero pixels, stopping propagation at the boundaries of different colored regions.\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, r, c):\n    \"\"\"Gets the valid neighbors of a cell (up, down, left, right).\"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    if r > 0:\n        neighbors.append((r - 1, c))\n    if r < rows - 1:\n        neighbors.append((r + 1, c))\n    if c > 0:\n        neighbors.append((r, c - 1))\n    if c < cols - 1:\n        neighbors.append((r, c + 1))\n    return neighbors\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the described rule.\n\n    Args:\n        input_grid: A 2D numpy array representing the input grid.\n\n    Returns:\n        A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Iterate through each pixel\n    for r in range(rows):\n        for c in range(cols):\n            if output_grid[r, c] == 0:\n                neighbors = get_neighbors(input_grid, r, c)\n                neighboring_colors = set()\n                for nr, nc in neighbors:\n                    if input_grid[nr, nc] != 0:\n                        neighboring_colors.add(input_grid[nr, nc])\n\n                if len(neighboring_colors) == 1:\n                     output_grid[r,c] = neighboring_colors.pop()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 334,
            "end_index": 592,
            "uri": "https://github.com/Anuj-cs20/IIITDMK_CSE_Coursework",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5790,
    "candidates_token_count": 415,
    "total_token_count": 6205,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 5.93347
}