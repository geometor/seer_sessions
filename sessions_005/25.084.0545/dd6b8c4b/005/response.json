{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Locate the Red Pixel:** Find the single pixel of color 2 (red) within the input grid. If there isn't exactly one red pixel, do not modify the input.\n\n2.  **Identify Connected Green Pixels:** Identify all pixels of color 3 (green) that are directly connected (orthogonally or diagonally) to the red pixel.\n\n3.  **Determine Green Region:** From this set of initially connected Green pixels, identify Green pixels which form a contiguous region with each other. A pixel is considered connected if it shares an edge or a corner with another pixel in the region.\n\n4.  **Transform Green to Maroon:** Change the color of the green pixels, within this connected region identified in the previous step, to color 9 (maroon).\n\"\"\"\n\nimport numpy as np\n\ndef find_object(grid, color):\n    \"\"\"Finds coordinates of all pixels of a given color.\"\"\"\n    return np.argwhere(grid == color)\n\ndef get_neighbors(grid, coord):\n    \"\"\"Returns the neighbors of a coordinate, including diagonals.\"\"\"\n    rows, cols = grid.shape\n    r, c = coord\n    neighbors = []\n    for i in range(max(0, r - 1), min(rows, r + 2)):\n        for j in range(max(0, c - 1), min(cols, c + 2)):\n            if (i, j) != (r, c):\n                neighbors.append((i, j))\n    return neighbors\n\ndef get_connected_region(grid, start_coords, color):\n    \"\"\"\n    Finds a connected region of a specific color starting from given coordinates.\n    Includes diagonals\n    \"\"\"\n    if not start_coords:\n        return []\n\n    rows, cols = grid.shape\n    region = set()\n    queue = start_coords.copy()\n\n    while queue:\n        coord = queue.pop(0)\n        if coord in region:\n            continue\n        region.add(coord)\n        neighbors = get_neighbors(grid, coord)\n        for neighbor in neighbors:\n            if (grid[neighbor] == color) and (neighbor not in region):\n                queue.append(neighbor)\n    return list(region)\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the observed rule.\"\"\"\n    grid = np.copy(input_grid)\n    rows, cols = grid.shape\n\n    # 1. Locate the Red Pixel\n    twos = find_object(grid, 2)\n    if len(twos) != 1:\n        return input_grid  # Return original if not exactly one '2'\n\n    red_pixel = twos[0]\n\n    # 2. Identify Connected Green Pixels (to the red pixel)\n    initial_green_neighbors = []\n    for neighbor in get_neighbors(grid, red_pixel):\n        if grid[neighbor] == 3:\n            initial_green_neighbors.append(neighbor)\n\n    # 3. Determine Green Region (connected to each other and the initial greens)\n    connected_green_region = get_connected_region(grid, initial_green_neighbors, 3)\n\n    # 4. Transform Green to Maroon\n    for coord in connected_green_region:\n        grid[coord] = 9\n\n    return grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7628,
    "candidates_token_count": 748,
    "total_token_count": 8376,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.017712
}