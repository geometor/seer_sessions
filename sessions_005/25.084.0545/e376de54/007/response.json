{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Determine all contiguous regions (objects) of the same color in the input grid. Consider only horizontal and vertical neighbors when grouping pixels into objects.\n2.  **Identify Horizontal Segments:** Within each object and for each row, identify all contiguous horizontal segments, noting their starting column, ending column, and color.\n3.  **Conditional Segment Replacement:** For each row within each object:\n    *   If the row contains one or more *single-pixel* segments of colors *different* from the color of a *multi-pixel* segment in that row, replace the background pixels between the minimum `start_col` and the maximum `end_col` among all single pixels in that row and that object with the original color of the *multi-pixel* segment.\n4.  **Background:** Pixels not part of any identified and extended object retain their original input color (implicitly handled by only modifying specific segments).\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"\n    Finds contiguous objects in a grid.\n\n    Args:\n        grid: A 2D numpy array.\n\n    Returns:\n        A list of objects, where each object is a list of (row, col) tuples.\n    \"\"\"\n    objects = []\n    visited = set()\n    rows, cols = grid.shape\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def dfs(r, c, current_object, color):\n        visited.add((r, c))\n        current_object.append((r, c))\n\n        neighbors = [(r - 1, c), (r + 1, c), (r, c - 1), (r, c + 1)]\n        for nr, nc in neighbors:\n            if is_valid(nr, nc) and (nr, nc) not in visited and grid[nr, nc] == color:\n                dfs(nr, nc, current_object, color)\n\n    for r in range(rows):\n        for c in range(cols):\n            if (r, c) not in visited:\n                current_object = []\n                dfs(r, c, current_object, grid[r, c])\n                objects.append(current_object)\n    return objects\n\ndef get_horizontal_segments(grid):\n    \"\"\"\n    Identifies contiguous horizontal segments in a grid.\n\n    Args:\n        grid: A 2D numpy array.\n\n    Returns:\n        A list of dictionaries, each representing a segment.\n    \"\"\"\n    segments = []\n    rows, cols = grid.shape\n    for row_index in range(rows):\n        row = grid[row_index,:]\n        start_col = -1\n        for i, color in enumerate(row):\n            if start_col == -1:\n                start_col = i\n            elif color != row[start_col]:\n                segments.append({\n                    \"row\": row_index,\n                    \"start_col\": start_col,\n                    \"end_col\": i,\n                    \"color\": row[start_col]\n                })\n                start_col = i\n            # Handle last segment\n        if start_col != -1:\n            segments.append({\n              \"row\": row_index,\n              \"start_col\": start_col,\n              \"end_col\": len(row),\n              \"color\": row[start_col]\n            })\n    return segments\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = input_grid.copy()\n    objects = find_objects(input_grid)\n    segments = get_horizontal_segments(input_grid)\n\n    for obj in objects:\n      # Get all row indices in the object\n      obj_rows = sorted(list(set(r for r, _ in obj)))\n\n      for row_index in obj_rows:\n        #find single pixels in row and object\n        single_pixels = []\n        for c in range(input_grid.shape[1]):\n          if (row_index,c) in obj and any(s['row'] == row_index and s['start_col'] == c and s['end_col'] == c + 1 for s in segments):\n            single_pixels.append((row_index,c))\n\n        #find segments in row\n        row_segments = [s for s in segments if s['row'] == row_index]\n\n        for seg in row_segments:\n          # If row contains one or more *single-pixel* segments of colors *different* from the color of a *multi-pixel* segment in that row\n          if seg['end_col'] - seg['start_col'] > 1: #multi pixel\n            different_color_single_pixels = [p for p in single_pixels if input_grid[p] != seg['color']]\n            if different_color_single_pixels:\n               # replace the background pixels between the minimum `start_col` and the maximum `end_col` among all single pixels\n              min_col = min(c for _, c in different_color_single_pixels)\n              max_col = max(c for _, c in different_color_single_pixels)\n\n              for c in range(min_col+1, max_col):\n                output_grid[row_index,c] = seg['color']\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 36337,
    "candidates_token_count": 1226,
    "total_token_count": 37563,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 39.433484
}