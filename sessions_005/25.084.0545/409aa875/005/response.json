{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid based on rules involving colors 7, 9, 0, and 2. Color 7 acts as a boundary and remains unchanged. Color 9 changes to 1 at a specific location or remains unchanged. Color 0 changes to 9 based on adjacency to horizontal lines of 7 and to color 9 pixels. Color 2 changes to 9 based on being below horizontal lines of 7.\n\"\"\"\n\nimport numpy as np\n\ndef find_horizontal_lines(grid, color):\n    \"\"\"Finds complete horizontal lines of a specified color.\"\"\"\n    rows, cols = grid.shape\n    lines = []\n    for row in range(rows):\n        if np.all(grid[row, :] == color):\n            lines.append(row)\n    return lines\n\ndef find_color_objects(grid, color):\n     rows, cols = grid.shape\n     objects = []\n     visited = np.zeros((rows, cols), dtype=bool)\n\n     def dfs(row, col, current_object):\n        if (row < 0 or row >= rows or col < 0 or col >= cols or\n                visited[row, col] or grid[row, col] != color):\n            return\n\n        visited[row, col] = True\n        current_object.append((row, col))\n        dfs(row + 1, col, current_object)\n        dfs(row - 1, col, current_object)\n        dfs(row, col + 1, current_object)\n        dfs(row, col - 1, current_object)\n\n     for row in range(rows):\n        for col in range(cols):\n            if grid[row, col] == color and not visited[row, col]:\n                current_object = []\n                dfs(row, col, current_object)\n                objects.append(current_object)\n     return objects\n\ndef transform(input_grid):\n    # Initialize output_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # 1. Boundary Preservation (Color 7 remains unchanged)\n    # (Implicitly handled by copying the input grid)\n\n    # Find complete horizontal lines of 7\n    horizontal_lines_7 = find_horizontal_lines(input_grid, 7)\n    objects_9 = find_color_objects(input_grid, 9)\n\n    # 2. Object 9 Transformation (9 to 1)\n    for obj in objects_9:\n      if all(input_grid[p[0],:]==9 for p in obj ): # horizontal line of 9s\n        right_most = max(p[1] for p in obj)\n        for r,c in obj:\n            if c == right_most:\n              output_grid[r,c] = 1\n\n\n    # 3. Object 0 Transformation (0 to 9)\n    for row in range(rows):\n        for col in range(cols):\n            if input_grid[row, col] == 0:\n                # Check for adjacency to complete horizontal lines of 7\n                adjacent_to_7_line = False\n                for line_row in horizontal_lines_7:\n                  horizontal_segment = []\n                  for c in range(cols):\n                      if input_grid[line_row,c] == 7:\n                          horizontal_segment.append(c)\n                      elif len(horizontal_segment)>1:\n                          if row == line_row + 1 or row == line_row-1:\n                             if col in horizontal_segment:\n                               adjacent_to_7_line = True\n                               break;\n                      else:\n                          horizontal_segment = []\n                  if adjacent_to_7_line:\n                      break\n\n                #check for vertical adjacency with color 9\n                adjacent_to_9 = False\n                if row > 0 and input_grid[row - 1, col] == 9:\n                    adjacent_to_9 = True\n                if row < rows - 1 and input_grid[row + 1, col] == 9:\n                    adjacent_to_9 = True\n\n                if adjacent_to_7_line or adjacent_to_9:\n                    output_grid[row, col] = 9\n\n    # 4. Object 2 Transformation (2 to 9)\n    for row in range(rows):\n        for col in range(cols):\n            if input_grid[row, col] == 2:\n              for line_row in horizontal_lines_7:\n                  horizontal_segment = []\n                  for c in range(cols):\n                      if input_grid[line_row,c] == 7:\n                          horizontal_segment.append(c)\n                      elif len(horizontal_segment)>1:\n                          if row == line_row + 1:\n                             if col in horizontal_segment:\n                               output_grid[row,col] = 9\n                               break;\n                      else:\n                          horizontal_segment = []\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 15712,
    "candidates_token_count": 1142,
    "total_token_count": 16854,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 14.196119
}