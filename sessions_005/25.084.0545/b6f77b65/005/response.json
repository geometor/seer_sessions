{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Object Identification:** Identify all contiguous, non-zero colored regions (objects) in the input grid. Record their color, top-left corner position, and the pixels that define them.\n\n2.  **Row 5 Check:** Examine Row 5 (index 4) of the *input* grid.\n\n3.  **Conditional Action (Above Row 5):**\n    *   **If Row 5 has *any* non-zero pixels:** Remove all objects whose top-left corner is *strictly above* Row 5 (row index < 4) from the output.\n    * **If Row 5 has *only* zero pixels:** Duplicate the objects with their top-left pixels above row 5. Copy them from their original positions to row five and below until row 5 is filled.\n\n4.  **Reposition Objects (At or Below Row 5):** Iterate through the objects whose top-left corners were originally at or below Row 5 in the input grid. Maintain their original order (top-to-bottom, left-to-right).\n\n5.  **Placement:**\n    * Find empty spaces in the output grid, defined as runs of contiguous zeros.\n    * Place each of the remaining objects in the first available empty space in the output that fully accommodates the object, going from top left to right.\n    * Objects must fit without changing shape.\n\n6. **Output:** Return filled output grid.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"Finds contiguous objects in a grid.\"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n    objects = []\n\n    def dfs(row, col, color, obj_pixels):\n        if (row < 0 or row >= rows or col < 0 or col >= cols or\n                visited[row, col] or grid[row, col] != color):\n            return\n        visited[row, col] = True\n        obj_pixels.append((row, col))\n        dfs(row + 1, col, color, obj_pixels)\n        dfs(row - 1, col, color, obj_pixels)\n        dfs(row, col + 1, color, obj_pixels)\n        dfs(row, col - 1, color, obj_pixels)\n\n    for r in range(rows):\n        for c in range(cols):\n            if not visited[r, c] and grid[r, c] != 0:\n                obj_pixels = []\n                dfs(r, c, grid[r, c], obj_pixels)\n                # find top-left\n                min_row = min(p[0] for p in obj_pixels)\n                min_col = min(p[1] for p in obj_pixels)\n\n                objects.append({\n                    'color': grid[r, c],\n                    'initial_position': (min_row, min_col),\n                    'pixels': obj_pixels,\n                    'shape': 'contiguous'\n                })\n    return objects\n\ndef find_empty_spaces(grid):\n    \"\"\"Finds contiguous blocks of zeros (empty spaces).\"\"\"\n    rows, cols = grid.shape\n    empty_spaces = []\n    visited = np.zeros_like(grid, dtype=bool)\n\n    def dfs(r, c, current_space):\n        if (r < 0 or r >= rows or c < 0 or c >= cols or\n                visited[r, c] or grid[r, c] != 0):\n            return\n        visited[r, c] = True\n        current_space.append((r, c))\n        dfs(r + 1, c, current_space)\n        dfs(r - 1, c, current_space)\n        dfs(r, c + 1, current_space)\n        dfs(r, c - 1, current_space)\n\n    for r in range(rows):\n        for c in range(cols):\n            if not visited[r, c] and grid[r, c] == 0:\n                current_space = []\n                dfs(r, c, current_space)\n                if current_space:\n                    min_row = min(p[0] for p in current_space)\n                    min_col = min(p[1] for p in current_space)\n                    max_row = max(p[0] for p in current_space)\n                    max_col = max(p[1] for p in current_space)\n                    empty_spaces.append(((min_row, min_col), (max_row - min_row + 1, max_col - min_col + 1)))\n    return empty_spaces\n\ndef can_place(grid, obj_pixels, start_row, start_col):\n    \"\"\"Checks if an object can be placed.\"\"\"\n    rows, cols = grid.shape\n    for r, c in obj_pixels:\n        new_r, new_c = start_row + (r - obj_pixels[0][0]), start_col + (c - obj_pixels[0][1])\n        if (new_r < 0 or new_r >= rows or new_c < 0 or new_c >= cols or\n                grid[new_r, new_c] != 0):\n            return False\n    return True\n\ndef place_object(grid, obj_pixels, color, start_row, start_col):\n    \"\"\"Places an object onto the grid.\"\"\"\n    for r, c in obj_pixels:\n        new_r, new_c = start_row + (r - obj_pixels[0][0]), start_col + (c - obj_pixels[0][1])\n        grid[new_r, new_c] = color\n\n\ndef transform(input_grid):\n    # initialize output_grid\n    input_grid = np.array(input_grid)\n    rows, cols = input_grid.shape\n    output_grid = np.zeros_like(input_grid)\n\n    # 1. Object Identification\n    objects = find_objects(input_grid)\n\n    # 2. Row 5 Check\n    row_5_has_non_zero = np.any(input_grid[min(4, rows - 1), :] != 0)\n\n    # 3. Conditional Action (Above Row 5)\n    objects_above_row_5 = [obj for obj in objects if obj['initial_position'][0] < min(4, rows)]\n    objects_at_or_below_row_5 = [obj for obj in objects if obj['initial_position'][0] >= min(4, rows)]\n\n    if row_5_has_non_zero:\n        # Remove objects above Row 5\n        pass  # Don't add them to the output\n    else:\n        # Duplicate and shift objects above row 5\n        row_index = min(4, rows - 1)\n        for obj in objects_above_row_5:\n            obj_height = max(r for r, _ in obj['pixels']) - min(r for r, _ in obj['pixels']) + 1\n            if row_index + obj_height <= rows: # check if it fits\n              place_object(output_grid, obj['pixels'], obj['color'], row_index, obj['initial_position'][1])\n              row_index += obj_height\n\n    # 4. Reposition Objects (At or Below Row 5) & 5. Placement\n\n    empty_spaces = find_empty_spaces(output_grid)\n    empty_space_index = 0\n\n    for obj in objects_at_or_below_row_5:\n        placed = False\n        while empty_space_index < len(empty_spaces) and not placed:\n            (start_row, start_col), (space_rows, space_cols) = empty_spaces[empty_space_index]\n            if can_place(output_grid, obj['pixels'], start_row, start_col):\n                place_object(output_grid, obj['pixels'], obj['color'], start_row, start_col)\n                placed = True\n                # Recalculate empty spaces\n                empty_spaces = find_empty_spaces(output_grid)\n                empty_space_index = 0  # Reset to start from top-left\n            else:\n                empty_space_index += 1\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 17024,
    "candidates_token_count": 1918,
    "total_token_count": 18942,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 25.916246
}