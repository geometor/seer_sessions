{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies objects in the input grid, identifies relevant rows based on color changes, and constructs a new grid by combining and arranging these rows.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"\n    Finds all contiguous objects in a grid.\n    Returns a list of objects, where each object is a list of (row, col) coordinates.\n    \"\"\"\n    visited = set()\n    objects = []\n\n    def dfs(row, col, color, current_object):\n        if (row, col) in visited or not (0 <= row < grid.shape[0] and 0 <= col < grid.shape[1]) or grid[row, col] != color:\n            return\n        visited.add((row, col))\n        current_object.append((row, col))\n        dfs(row + 1, col, color, current_object)\n        dfs(row - 1, col, color, current_object)\n        dfs(row, col + 1, color, current_object)\n        dfs(row, col - 1, color, current_object)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if (row, col) not in visited:\n                current_object = []\n                dfs(row, col, grid[row, col], current_object)\n                if current_object:\n                    objects.append(current_object)\n    return objects\n\ndef get_background_colors(grid, objects):\n    \"\"\"\n    Get background color by finding largest objects\n    \"\"\"\n    objects_by_size = sorted(objects, key=len, reverse=True)\n    background_colors = []\n    for obj in objects_by_size:\n      if len(obj) > .10 * grid.size:\n        background_colors.append(grid[obj[0][0], obj[0][1]])\n    return background_colors\n\n\ndef get_object_bounding_box(objects):\n    \"\"\"Calculates the bounding box encompassing all given objects.\"\"\"\n    if not objects:\n        return (0, 0, 0, 0)  # Empty case\n\n    min_row = float('inf')\n    max_row = float('-inf')\n    min_col = float('inf')\n    max_col = float('-inf')\n\n    for obj in objects:\n        for row, col in obj:\n            min_row = min(min_row, row)\n            max_row = max(max_row, row)\n            min_col = min(min_col, col)\n            max_col = max(max_col, col)\n\n    return (min_row, max_row, min_col, max_col)\n\ndef transform(input_grid):\n    # Convert input to numpy array\n    input_grid = np.array(input_grid)\n\n    # Find objects\n    objects = find_objects(input_grid)\n\n    # Find background\n    background_colors = get_background_colors(input_grid, objects)\n\n    # Identify non-background objects\n    non_background_objects = [obj for obj in objects if input_grid[obj[0][0], obj[0][1]] not in background_colors]\n\n\n    # Get bounding box of the non-background objects\n    min_row, max_row, min_col, max_col = get_object_bounding_box(non_background_objects)\n    \n    # print(f\"bounding box min/max: {min_row, max_row, min_col, max_col}\")\n\n    # 1. First/Last Row: Topmost line of combined shape\n    first_row = []\n    for c in range(min_col, max_col + 1):\n        for r in range(min_row, max_row+1):\n            if (input_grid[r,c] not in background_colors):\n                first_row.append(input_grid[r,c])\n                break  # move to the next column\n        else: # no break, meaning all background\n           first_row.append(background_colors[0]) # Pick the first by default\n\n    # 2. Middle Rows: Rows with significant color changes within the bounding box\n    middle_rows = []\n\n    for r in range(min_row, max_row + 1):\n        row_colors = []\n        has_non_background = False\n\n        for c in range(min_col, max_col + 1):\n            \n            pixel = input_grid[r,c]\n            # print(f'{pixel=}')\n            if pixel not in background_colors:\n                has_non_background = True\n                row_colors.append(pixel)\n            elif has_non_background:\n               row_colors.append(background_colors[0])  # default background\n        if has_non_background:\n            middle_rows.append(row_colors)\n\n    # ensure exactly 3 middle rows\n    while len(middle_rows) < 3:\n      if middle_rows:\n        middle_rows.append(middle_rows[-1]) # Duplicate last if not enough\n      else:\n        middle_rows.append([background_colors[0]] * len(first_row))  # fill with background\n\n\n    if len(middle_rows) > 3:\n      middle_rows = middle_rows[:3]  # Truncate if there are more than 3\n\n    # 3. Last Row\n    last_row = first_row\n\n    # Combine all rows for output\n    output_grid_list = [first_row] + middle_rows + [last_row]\n\n    # Find max width\n    max_width = max(len(row) for row in output_grid_list) if output_grid_list else 0\n\n     # Create the output grid\n    output_grid = np.full((len(output_grid_list), max_width), background_colors[0],  dtype=int)\n\n\n    for row_idx, row_pixels in enumerate(output_grid_list):\n        for col_idx, pixel in enumerate(row_pixels):\n            # print(output_grid.shape, len(row_pixels))\n            if col_idx < output_grid.shape[1]:  # Prevent out-of-bounds\n                output_grid[row_idx, col_idx] = pixel\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 1889,
            "end_index": 2082,
            "uri": "https://github.com/comhendrik/adventofcode",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 11114,
    "candidates_token_count": 1470,
    "total_token_count": 12584,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 20.233867
}