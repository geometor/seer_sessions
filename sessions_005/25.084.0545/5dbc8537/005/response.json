{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify the Frame:** The frame is the largest contiguous object that includes all of the edges of the grid. Determine the colors and overall shape of the frame.\n2.  **Identify Inside Objects:** Identify all objects that are *not* part of the frame.\n3. **Determine Frame and Inside Object Arrangement:**\n    *   If input height > width, the frame and objects have a vertical arrangement (example 1).\n    *    If input height <= width, the frame and objects have a horizontal arrangement (example 2).\n4.  **Create Output Grid:**\n    *   **Vertical Arrangement:** The output grid has the same height as the input. The width is determined by the combined widths of the frame and all inside objects, placed side by side.\n    *   **Horizontal Arrangement:** The output grid has the same width as the input. The height is determined by the combined heights of the frame and all inside objects stacked vertically.\n5. **Reconstruct the Frame:**\n    *   **Vertical Arrangement**: Reconstruct the frame in the first *column* of the output grid.\n    * **Horizontal Arrangement**: Reconstruct the frame in the first *row* of the output grid.\n6.  **Place Inside Objects:**\n    *  **Vertical Arrangement:** Place each inside object in subsequent columns, preserving the top-to-bottom order of the objects as they appear in the input. Each object occupies its own column.\n    *   **Horizontal Arrangement:** Place each inside object in subsequent rows, preserving the left-to-right and top-to-bottom order of the objects as they appear in the input. Each object occupies its own row.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"\n    Finds contiguous objects (regions of the same color) in a grid.\n    Returns a list of objects, where each object is a list of (row, col) coordinates.\n    \"\"\"\n    objects = []\n    visited = set()\n    rows, cols = grid.shape\n\n    def dfs(row, col, color, current_object):\n        if (row, col) in visited or not (0 <= row < rows and 0 <= col < cols) or grid[row, col] != color:\n            return\n        visited.add((row, col))\n        current_object.append((row, col))\n        for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            dfs(row + dr, col + dc, color, current_object)\n\n    for r in range(rows):\n        for c in range(cols):\n            if (r, c) not in visited:\n                current_object = []\n                dfs(r, c, grid[r, c], current_object)\n                if current_object:\n                    objects.append(current_object)\n    return objects\n\ndef get_frame_coords(grid):\n    \"\"\"Returns a set of (row, col) tuples representing the frame.\"\"\"\n    rows, cols = grid.shape\n    frame = set()\n    for r in range(rows):\n        frame.add((r, 0))\n        frame.add((r, cols - 1))\n    for c in range(1, cols - 1):\n        frame.add((0, c))\n        frame.add((rows - 1, c))\n    return frame\n\ndef get_frame_object(grid):\n    \"\"\"Extracts the frame as a single object.\"\"\"\n    frame_coords = get_frame_coords(grid)\n    all_objects = find_objects(grid)\n    for obj in all_objects:\n        if any((r,c) in frame_coords for r, c in obj):\n            # Check if this object encompasses all frame coordinates.  This\n            # isn't strictly necessary given the way get_frame_coords\n            # and get_inside_objects work, but makes this function more robust.\n            if all((r,c) in obj for r,c in frame_coords):\n              return obj\n\n    return None  # Should not happen in correct tasks\n\ndef get_inside_objects(grid, frame_object):\n    \"\"\"Returns a list of objects that are *not* part of the frame object.\"\"\"\n    all_objects = find_objects(grid)\n    inside_objects = [obj for obj in all_objects if obj != frame_object]\n\n    # Sort inside objects by top-to-bottom, then left-to-right appearance.\n    inside_objects.sort(key=lambda obj: (min(r for r, _ in obj), min(c for _, c in obj)))\n    return inside_objects\n\ndef get_object_dimensions(object, grid):\n    \"\"\"Calculates the bounding box dimensions (width, height) of an object.\"\"\"\n    min_row = min(r for r, _ in object)\n    max_row = max(r for r, _ in object)\n    min_col = min(c for _, c in object)\n    max_col = max(c for _, c in object)\n    return max_col - min_col + 1, max_row - min_row + 1\n\ndef transform(input_grid):\n    input_grid = np.array(input_grid)\n    rows, cols = input_grid.shape\n\n    # 1. Identify the Frame\n    frame_object = get_frame_object(input_grid)\n\n    # 2. Identify Inside Objects\n    inside_objects = get_inside_objects(input_grid, frame_object)\n\n    # 3. Determine Arrangement\n    vertical_arrangement = rows > cols\n\n    # 4. Create Output Grid\n    if vertical_arrangement:\n        # Vertical Arrangement\n        output_width = 1  # For the frame\n        for obj in inside_objects:\n            obj_width, _ = get_object_dimensions(obj, input_grid)\n            output_width += obj_width\n        output_grid = np.full((rows, output_width), -1, dtype=int) # Fill with -1 for now\n    else:\n        # Horizontal Arrangement\n        output_height = 1 # For the frame\n        for obj in inside_objects:\n            _, obj_height = get_object_dimensions(obj, input_grid)\n            output_height += obj_height\n        output_grid = np.full((output_height, cols), -1, dtype=int) # Fill with -1\n\n    # 5. Reconstruct Frame\n    frame_color = input_grid[frame_object[0]] # All frame pixels are the same color\n    if vertical_arrangement:\n        for r in range(rows):\n          output_grid[r,0] = frame_color\n\n    else: # horizontal\n      for c in range(cols):\n          output_grid[0, c] = frame_color\n\n\n    # 6. Place Inside Objects\n    if vertical_arrangement:\n        col_offset = 1\n        for obj in inside_objects:\n            obj_width, obj_height = get_object_dimensions(obj, input_grid)\n            min_row = min(r for r, _ in obj)\n            min_col = min(c for _, c in obj)\n\n            for r, c in obj:\n                output_grid[r, col_offset + c - min_col] = input_grid[r, c]\n            col_offset += obj_width\n\n    else: # horizontal\n        row_offset = 1\n        for obj in inside_objects:\n            obj_width, obj_height = get_object_dimensions(obj, input_grid)\n            min_row = min(r for r, _ in obj)\n            for r, c in obj:\n                output_grid[row_offset + r - min_row, c] = input_grid[r, c]\n            row_offset += obj_height\n\n    output_grid = np.where(output_grid == -1, frame_color, output_grid) # fill in empty with frame\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 11126,
    "candidates_token_count": 1819,
    "total_token_count": 12945,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 23.627691
}