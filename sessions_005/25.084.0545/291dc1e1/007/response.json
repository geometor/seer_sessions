{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nExtracts and rearranges contiguous color regions (excluding 0, 1, and 2) from the input grid, forming a smaller output grid.\nThe first two rows of the input grid are ignored. The spatial relationship of the extracted color regions are maintained as they are arranged, top to bottom and left to right. For each region, two rows of the color are added to the output with a width equal to the horizontal width of the region.\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, r, c):\n    \"\"\"Gets the valid neighbors of a cell (including diagonals).\"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    for i in range(max(0, r - 1), min(rows, r + 2)):\n        for j in range(max(0, c - 1), min(cols, c + 2)):\n            if (i, j) != (r, c):\n                neighbors.append((i, j))\n    return neighbors\n\ndef extract_regions(grid):\n    \"\"\"Extracts contiguous color regions (excluding 0, 1, and 2), ordered by top-left corner.\"\"\"\n    rows, cols = grid.shape\n    visited = set()\n    regions = []\n\n    for r in range(2, rows):  # Start from the third row\n        for c in range(cols):\n            color = grid[r, c]\n            if (r, c) not in visited and color not in [0, 1, 2]:\n                region = []\n                queue = [(r, c)]\n                visited.add((r, c))\n\n                while queue:\n                    curr_r, curr_c = queue.pop(0)\n                    region.append((curr_r, curr_c))\n                    for nr, nc in get_neighbors(grid, curr_r, curr_c):\n                        if (nr, nc) not in visited and grid[nr, nc] == color:\n                            queue.append((nr, nc))\n                            visited.add((nr, nc))\n                if region:\n                    regions.append((color, region))\n\n    # Sort regions by top-left corner (row first, then column)\n    regions.sort(key=lambda x: (min(coord[0] for coord in x[1]), min(coord[1] for coord in x[1])))\n    return regions\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the described rule.\"\"\"\n    \n    input_grid = np.array(input_grid)\n    regions = extract_regions(input_grid)\n\n    # Calculate output grid dimensions - find max width, and 2 rows per region\n    max_width = 0\n    for _, region_coords in regions:\n      min_col = min(c for _, c in region_coords)\n      max_col = max(c for _, c in region_coords)\n      max_width = max(max_width, max_col - min_col + 1)\n\n    output_rows = len(regions) * 2\n    output_grid = np.zeros((output_rows, max_width), dtype=int)\n\n    # Fill output grid\n    current_row = 0\n    for color, region_coords in regions:\n        min_col = min(c for _, c in region_coords)\n        max_col = max(c for _, c in region_coords)\n        width = max_col - min_col + 1\n\n        # add two rows for this region\n        for i in range(width):\n            output_grid[current_row, i] = color\n            output_grid[current_row + 1, i] = color\n        current_row += 2\n\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7015,
    "candidates_token_count": 852,
    "total_token_count": 7867,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.273166
}