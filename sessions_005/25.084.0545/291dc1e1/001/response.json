{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nExtracts and rearranges contiguous color regions (excluding 0, 1, and 2) from the input grid, forming a smaller output grid.\nThe first two rows of the input grid are ignored. The spatial relationship\nof the extracted color regions are maintained as they are arranged into\nthe output grid. For each set of same-color pixels that touch either\nside-by-side or diagonally, two rows are added to the output with identical\ncolors.\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, r, c):\n    \"\"\"Gets the valid neighbors of a cell (including diagonals).\"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    for i in range(max(0, r - 1), min(rows, r + 2)):\n        for j in range(max(0, c - 1), min(cols, c + 2)):\n            if (i, j) != (r, c):\n                neighbors.append((i, j))\n    return neighbors\n\ndef extract_regions(grid):\n    \"\"\"Extracts contiguous color regions (excluding 0, 1, and 2).\"\"\"\n    rows, cols = grid.shape\n    visited = set()\n    regions = []\n\n    for r in range(2, rows):  # Start from the third row\n        for c in range(cols):\n            color = grid[r, c]\n            if (r, c) not in visited and color not in [0, 1, 2]:\n                region = []\n                queue = [(r, c)]\n                visited.add((r, c))\n\n                while queue:\n                    curr_r, curr_c = queue.pop(0)\n                    region.append((curr_r, curr_c))\n                    for nr, nc in get_neighbors(grid, curr_r, curr_c):\n                        if (nr, nc) not in visited and grid[nr, nc] == color:\n                            queue.append((nr, nc))\n                            visited.add((nr, nc))\n                if region:\n                    regions.append((color, region))\n\n    return regions\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the described rule.\"\"\"\n    \n    input_grid = np.array(input_grid)  # Ensure it's a NumPy array\n    regions = extract_regions(input_grid)\n\n    # Build a dictionary to store extracted pixel coordinates for each color.\n    color_data = {}\n    for color, region_coords in regions:\n        if color not in color_data:\n            color_data[color] = []\n        color_data[color].extend(region_coords)\n\n    # Determine the output grid size and initialize it with a default value.\n    output_rows = 0\n    output_cols = 0\n\n    for _, coords in color_data.items():\n      min_row = min(c[0] for c in coords)\n      max_row = max(c[0] for c in coords)\n      min_col = min(c[1] for c in coords)\n      max_col = max(c[1] for c in coords)\n            \n      output_rows +=  2 * (max_row - min_row + 1)  if len(coords) >0 else 0\n      output_cols = max(output_cols,max_col - min_col +1) if len(coords) > 0 else output_cols\n    \n    output_grid = np.zeros((output_rows, output_cols), dtype=int)\n\n    current_row = 0\n    for color in sorted(color_data.keys()): # sort the keys to impose a simple consistent ordering for the rows\n        coords = color_data[color]\n\n        if not coords: # handle edge case where empty list is provided\n          continue\n        # get the min and max cols, and offset the values to 0\n        min_col = min(c[1] for c in coords)\n        max_col = max(c[1] for c in coords)\n        width = max_col - min_col + 1\n        \n        min_input_row = min(c[0] for c in coords) # determine offset\n        max_input_row = max(c[0] for c in coords)\n      \n        rows_for_color = max_input_row - min_input_row + 1\n\n        for _ in range(rows_for_color): # duplicate rows\n\n          row_coords = [coord for coord in coords if coord[0] == min_input_row] # select next row\n\n          # Fill in a row pair in output grid\n          for col_offset in range(width):\n                output_grid[current_row, col_offset] = color\n                output_grid[current_row+1, col_offset] = color  # Duplicate row\n\n          current_row += 2  # Increment by two because of the duplication\n          min_input_row += 1\n            \n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3682,
    "candidates_token_count": 1144,
    "total_token_count": 4826,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 18.134018
}