{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation identifies connected regions of the same color within the input grid and represents them in a smaller output grid. Connectivity is defined along edges (not diagonals). The output grid's size and content reflect the arrangement and colors of these connected regions. The top-left cell of each detected region is used to place color in output grid, preserving relative positions, and condensing the overall size. Empty rows/columns are removed.\n\"\"\"\n\nimport numpy as np\n\ndef get_connected_component(grid, start_r, start_c, color, visited):\n    \"\"\"\n    Finds a connected component of the same color starting from a given cell.\n    \"\"\"\n    rows, cols = grid.shape\n    component = []\n    stack = [(start_r, start_c)]\n\n    while stack:\n        r, c = stack.pop()\n        if r < 0 or r >= rows or c < 0 or c >= cols or visited[r, c] or grid[r, c] != color:\n            continue\n\n        visited[r, c] = True\n        component.append((r, c))\n\n        # Check neighbors (up, down, left, right)\n        stack.append((r - 1, c))\n        stack.append((r + 1, c))\n        stack.append((r, c - 1))\n        stack.append((r, c + 1))\n\n    return component\n\ndef find_all_connected_regions(grid):\n    \"\"\"\n    Finds all connected regions in the grid.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n    connected_regions = []\n\n    for r in range(rows):\n        for c in range(cols):\n            if not visited[r, c]:\n                color = grid[r, c]\n                component = get_connected_component(grid, r, c, color, visited)\n                connected_regions.append(component)\n    return connected_regions\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by identifying and representing connected regions.\n    \"\"\"\n    grid = np.array(input_grid)\n\n    # 1. Identify Connected Regions\n    connected_regions = find_all_connected_regions(grid)\n\n    # 2. Determine Output Grid Size (Bounding Box)\n    if not connected_regions:\n        return []\n\n    min_r, min_c = float('inf'), float('inf')\n    max_r, max_c = float('-inf'), float('-inf')\n\n    for region in connected_regions:\n        for r, c in region:\n            min_r = min(min_r, r)\n            min_c = min(min_c, c)\n            max_r = max(max_r, r)\n            max_c = max(max_c, c)\n\n    output_height = max_r - min_r + 1\n    output_width = max_c - min_c + 1\n\n    # 3. Create Output Grid (initialized to -1 for empty cells)\n    output_grid = np.full((output_height, output_width), -1, dtype=int)\n\n    # 4. Populate Output Grid\n    for region in connected_regions:\n        if region:  # Ensure the region is not empty\n            top_left_r, top_left_c = region[0]  # Get top-left cell\n            color = grid[top_left_r, top_left_c]\n            output_r = top_left_r - min_r\n            output_c = top_left_c - min_c\n            output_grid[output_r, output_c] = color\n\n    # 5. Remove Empty Rows/Cols\n    non_empty_rows = np.any(output_grid != -1, axis=1)\n    non_empty_cols = np.any(output_grid != -1, axis=0)\n    output_grid = output_grid[non_empty_rows, :]\n    output_grid = output_grid[:, non_empty_cols]\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5021,
    "candidates_token_count": 944,
    "total_token_count": 5965,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 12.433874
}