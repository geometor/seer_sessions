{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation identifies \"interior blocks\" of color within the input grid and represents them in a smaller output grid. An interior block is a contiguous region of a single color completely surrounded by different colors, with connectivity extending along edges but not diagonals. The output grid's size and content reflect the arrangement and colors of these connected interior blocks, preserving their relative positions but condensing the overall size. The top-left cell of each detected interior block is used for color placement in the output.\n\"\"\"\n\nimport numpy as np\n\ndef find_interior_blocks(grid):\n    \"\"\"\n    Identifies and returns a list of interior blocks within the grid.\n    \"\"\"\n    rows, cols = grid.shape\n    interior_blocks = []\n    visited = np.zeros((rows, cols), dtype=bool)\n\n    def is_interior(r, c, color):\n        \"\"\"\n        Checks if a cell is part of an interior block.\n        \"\"\"\n        if r < 0 or r >= rows or c < 0 or c >= cols or visited[r, c] or grid[r, c] != color:\n            return False\n\n        visited[r, c] = True  # Mark as visited\n        \n        #check if surrounded on all sides\n        neighbors = []\n\n        if r > 0:\n           neighbors.append(grid[r-1,c])\n        if r < rows-1:\n           neighbors.append(grid[r+1,c])\n        if c > 0:\n           neighbors.append(grid[r,c-1])\n        if c < cols-1:\n           neighbors.append(grid[r,c+1])\n        \n        for neighbor_color in neighbors:\n           if neighbor_color == color:\n              return False # is not surrounderd\n        \n        return True\n\n    for r in range(rows):\n        for c in range(cols):\n            if not visited[r, c]:\n                if is_interior(r,c,grid[r,c]):\n                  interior_blocks.append((r, c, grid[r, c])) # add top left corner\n                \n    return interior_blocks\n\n\n\ndef get_connected_component(grid, start_r, start_c, color, visited):\n    rows, cols = grid.shape\n    component = []\n    stack = [(start_r, start_c)]\n\n    while stack:\n        r, c = stack.pop()\n        if r < 0 or r >= rows or c < 0 or c >= cols or visited[r, c] or grid[r, c] != color:\n            continue\n\n        visited[r, c] = True\n        component.append((r, c))\n\n        # Check neighbors (up, down, left, right)\n        stack.append((r - 1, c))\n        stack.append((r + 1, c))\n        stack.append((r, c - 1))\n        stack.append((r, c + 1))\n\n    return component\n    \n    \ndef find_connected_interior_blocks(grid, interior_blocks):\n\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n\n    connected_blocks = []\n    for r,c,color in interior_blocks:\n      component = get_connected_component(grid, r, c, color, visited)\n      if len(component) > 0:\n          connected_blocks.append(component)\n    return connected_blocks\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by identifying and representing interior blocks.\n    \"\"\"\n    grid = np.array(input_grid)  # Convert to NumPy array for easier manipulation\n\n    # 1. Identify Interior Blocks\n    interior_blocks = find_interior_blocks(grid)\n\n    # 2. find connections\n    connected_blocks = find_connected_interior_blocks(grid, interior_blocks)\n    \n    #find dimensions by bounding box\n    if len(connected_blocks) == 0:\n      return []\n\n    min_r, min_c = float('inf'), float('inf')\n    max_r, max_c = float('-inf'), float('-inf')\n    \n    for block_list in connected_blocks:\n        for r, c in block_list:\n            min_r = min(min_r, r)\n            min_c = min(min_c, c)\n            max_r = max(max_r, r)\n            max_c = max(max_c, c)\n\n    output_height = max_r - min_r + 1\n    output_width = max_c - min_c + 1\n\n    # 3. Create Output Grid initialized to -1, will ignore later\n    output_grid = np.full((output_height, output_width), -1, dtype=int)\n\n\n    # 4. Populate Output, get top left of blocks in order\n    for block_list in connected_blocks:\n       if len(block_list) > 0:\n          top_left_r, top_left_c = block_list[0]\n          color = grid[top_left_r,top_left_c]\n          \n          output_r = top_left_r-min_r\n          output_c = top_left_c-min_c\n          \n          output_grid[output_r, output_c] = color\n    \n    #remove empty rows and columns\n    # Find rows and columns that have non-default values\n    non_empty_rows = np.any(output_grid != -1, axis=1)\n    non_empty_cols = np.any(output_grid != -1, axis=0)\n\n    # Subset the array using boolean indexing\n    output_grid = output_grid[non_empty_rows, :]\n    output_grid = output_grid[:, non_empty_cols]\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2601,
    "candidates_token_count": 1348,
    "total_token_count": 3949,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 21.504458
}