{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Find Azure Line:** Locate the longest vertical line of azure (color 8) pixels. This line serves as a reference.\n\n2.  **Identify Objects:** Identify all contiguous regions (objects) of the same color (excluding azure) that are directly adjacent (horizontally or vertically) to the azure line.\n\n3.  **Process Each Object:** For each identified object:\n    *   Find the top and bottom rows, leftmost and rightmost columns.\n    *   Determine the color of that object\n    *   Change all pixel in the segment from leftmost to rightmost in the object's top row to the object's color.\n    *   Change all pixel in the segment from leftmost to rightmost in the object's bottom row to the object's color.\n\n4.  **Output:** Return the modified grid.\n\"\"\"\n\nimport numpy as np\n\ndef find_azure_line(grid):\n    \"\"\"Finds the longest vertical line of azure (8) pixels.\"\"\"\n    azure_lines = []\n    rows, cols = grid.shape\n    for c in range(cols):\n        current_line = []\n        for r in range(rows):\n            if grid[r, c] == 8:\n                current_line.append((r, c))\n            else:\n                if len(current_line) > 0:\n                    azure_lines.append(current_line)\n                current_line = []\n        if len(current_line) > 0:\n            azure_lines.append(current_line)\n\n    longest_line = max(azure_lines, key=len, default=[])\n    return longest_line\n\ndef find_objects(grid, azure_line):\n    \"\"\"Identifies contiguous colored objects adjacent to the azure line.\"\"\"\n    rows, cols = grid.shape\n    objects = []\n    visited = set()\n    azure_line_set = set(azure_line)\n\n    def is_adjacent_to_azure_line(r, c):\n        \"\"\"Checks if a cell is adjacent to the azure line.\"\"\"\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n            if (nr, nc) in azure_line_set:\n                return True\n        return False\n\n    def dfs(r, c, color, current_object):\n        \"\"\"Performs Depth-First Search to find connected components.\"\"\"\n        if (r, c) in visited or not (0 <= r < rows and 0 <= c < cols) or grid[r, c] != color:\n            return\n\n        visited.add((r, c))\n        current_object.append((r, c))\n\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            dfs(r + dr, c + dc, color, current_object)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 8 and (r, c) not in visited and is_adjacent_to_azure_line(r, c):\n                color = grid[r, c]\n                current_object = []\n                dfs(r, c, color, current_object)\n                if current_object:\n                    objects.append(current_object)\n    return objects\n\ndef get_object_color(grid, object):\n    \"\"\"get color of object\"\"\"\n    r,c = object[0]\n    return grid[r,c]\n\n\ndef transform(input_grid):\n    # initialize output_grid\n    grid = np.array(input_grid)\n    output_grid = grid.copy()\n    rows, cols = grid.shape\n\n    # Find the azure line\n    azure_line = find_azure_line(grid)\n\n    # Find objects adjacent to the azure line\n    objects = find_objects(grid, azure_line)\n\n    # Process each object\n    for obj in objects:\n        # Find top/bottom rows and leftmost/rightmost columns\n        top_row = min(pixel[0] for pixel in obj)\n        bottom_row = max(pixel[0] for pixel in obj)\n        leftmost_col = min(pixel[1] for pixel in obj)\n        rightmost_col = max(pixel[1] for pixel in obj)\n\n        # Determine object's color\n        object_color = get_object_color(grid, obj)\n\n        # Fill the top and bottom row segments\n        for c in range(leftmost_col, rightmost_col + 1):\n            output_grid[top_row, c] = object_color\n            output_grid[bottom_row, c] = object_color\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 13781,
    "candidates_token_count": 1095,
    "total_token_count": 14876,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 14.611977
}