{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid based on the following rules:\n1. Identify objects by color.\n2. Conditional Color Replacement:\n    - If red (2) exists, replace it with green (3).\n    - If yellow (4) exists and magenta (6) does *not* exist, replace yellow (4) with green (3).\n    - If magenta (6) exists, replace yellow (4) with magenta (6).\n3. Conditional Actions Based on Adjacency and Color:\n    - If any green (3) is adjacent to where red (2) *was*, change that green (3) to blue (1).\n    - If magenta (6) exists, flood fill the background (0) starting from each magenta pixel, replacing 0 with 6.\n4. No flood filling occurs if Magenta(6) is not present\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef find_objects(grid):\n    \"\"\"\n    Identifies contiguous regions of the same color as objects.\n    Returns a dictionary where keys are colors and values are lists of (row, col) tuples.\n    \"\"\"\n    objects = {}\n    visited = set()\n    rows, cols = grid.shape\n\n    def dfs(r, c, color, obj):\n        if (r, c) in visited or r < 0 or r >= rows or c < 0 or c >= cols or grid[r, c] != color:\n            return\n        visited.add((r, c))\n        obj.append((r, c))\n        dfs(r + 1, c, color, obj)\n        dfs(r - 1, c, color, obj)\n        dfs(r, c + 1, color, obj)\n        dfs(r, c - 1, color, obj)\n\n    for r in range(rows):\n        for c in range(cols):\n            if (r, c) not in visited:\n                color = grid[r, c]\n                if color not in objects:\n                    objects[color] = []\n                dfs(r, c, color, objects[color])\n    return objects\n\ndef get_neighbors(grid, r, c):\n    \"\"\"Returns the valid neighbors (including diagonals) of a cell.\"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    for dr in [-1, 0, 1]:\n        for dc in [-1, 0, 1]:\n            if dr == 0 and dc == 0:\n                continue\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < rows and 0 <= nc < cols:\n                neighbors.append((nr, nc))\n    return neighbors\n\ndef flood_fill(grid, start_r, start_c, target_color, replacement_color):\n    \"\"\"Performs a flood fill on the grid.\"\"\"\n    rows, cols = grid.shape\n    q = deque([(start_r, start_c)])\n    visited = set()\n\n    if grid[start_r, start_c] != target_color:\n      return #start at the correct color\n\n    while q:\n        r, c = q.popleft()\n        if (r,c) in visited:\n          continue\n        visited.add((r,c))\n\n        if grid[r, c] == target_color:\n            grid[r, c] = replacement_color\n            for nr, nc in get_neighbors(grid, r, c):\n                q.append((nr, nc))\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n    objects = find_objects(input_grid)\n    background_color = 0\n\n    # Store original red pixel locations\n    original_red_pixels = objects.get(2, []).copy()\n\n\n    # Conditional Color Replacements\n    if 2 in objects:  # Red exists\n        for r, c in objects[2]:\n            output_grid[r, c] = 3  # Replace red with green\n\n    if 4 in objects and 6 not in objects:  # Yellow exists, no magenta\n        for r, c in objects[4]:\n            output_grid[r, c] = 3  # Replace yellow with green\n\n    if 6 in objects:  # Magenta exists\n        if 4 in objects:\n          for r, c in objects[4]:\n              output_grid[r, c] = 6  # Replace yellow with magenta\n\n        # Flood fill from magenta pixels\n        for r, c in objects.get(6,[]):  # Iterate through *original* magenta locations\n            flood_fill(output_grid, r, c, background_color, 6)\n\n    # Conditional adjacency check (green to blue)\n    for r, c in original_red_pixels:\n      for nr,nc in get_neighbors(input_grid,r,c):\n        if output_grid[nr,nc] == 3:\n          output_grid[nr,nc] = 1\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 10317,
    "candidates_token_count": 1156,
    "total_token_count": 11473,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.25013
}