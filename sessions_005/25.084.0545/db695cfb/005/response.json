{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Background:** Determine the most frequent color in the input grid. This is the background color.\n2.  **Identify Objects:** Locate all contiguous regions of non-background color. These are the objects. Record initial positions of object pixels.\n3.  **Cross Expansion** From each non-background pixel, fill the background adjacent pixels (up, down, left and right) with the same color.\n4. **Interaction**: If two colors want to fill the same background pixel during the expansion, color 6 appears to overwrite color 1.\n5. **Boundaries**: expansion should stop at edges of the grid.\n6. **Single object shift**: For a single isolated object with only one starting location, perform a shift of each object pixel, rather than expansion:\n    - up to the top row\n    - if there are two start locations, shift each of them.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef get_background_color(grid):\n    flat_grid = grid.flatten()\n    color_counts = Counter(flat_grid)\n    return color_counts.most_common(1)[0][0]\n\ndef get_non_background_pixels(grid, background_color):\n    non_background_pixels = []\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != background_color:\n                non_background_pixels.append(((r, c), grid[r, c]))\n    return non_background_pixels\n\ndef expand_multi_color(grid, start_pos, color, bg_color):\n    # one unit cell expansion, colors interact\n    rows, cols = grid.shape\n    r, c = start_pos\n    new_pixels = []\n\n    if r - 1 >= 0 and grid[r-1,c] == bg_color:\n        new_pixels.append( ((r-1,c),color) )\n    if r + 1 < rows and grid[r+1, c] == bg_color:\n        new_pixels.append( ((r+1,c),color) )\n    if c - 1 >= 0 and grid[r,c-1] == bg_color:\n        new_pixels.append( ((r,c-1),color) )\n    if c + 1 < cols and grid[r,c+1] == bg_color:\n        new_pixels.append( ((r,c+1),color) )\n    \n    # color interaction when expanding to a pixel\n    for (new_r,new_c),new_color in new_pixels:\n        if grid[new_r,new_c] == bg_color:\n           grid[new_r,new_c] = new_color\n        elif grid[new_r, new_c] != new_color:\n            # if the pixel where we want to write, is not background\n            # color, and is different that the color we want to write\n            # it seems that color 6 \"wins\" over color 1\n            if new_color == 6:\n                grid[new_r,new_c] = 6\n            elif grid[new_r,new_c] == 6:\n                grid[new_r,new_c] = 6\n\ndef shift_object(grid, non_background_pixels, background_color):\n    # shift object up\n    new_grid = np.full(grid.shape, background_color, dtype=grid.dtype)\n    \n    for (r,c), color in non_background_pixels:\n        new_grid[0:r,c] = color\n    \n    return new_grid\n\n\ndef transform(input_grid):\n    # Convert input_grid to numpy array\n    input_grid = np.array(input_grid)\n\n    # 1. Identify the Background\n    background_color = get_background_color(input_grid)\n\n    # 2. Identify Objects and their colors\n    non_background_pixels = get_non_background_pixels(input_grid, background_color)\n    unique_colors = set([color for _, color in non_background_pixels])\n    object_locations = {}\n    for (r,c), color in non_background_pixels:\n        if color not in object_locations:\n            object_locations[color] = []\n        object_locations[color].append((r,c))\n\n    # 3. Construct Output Grid (initialize with background)\n    output_grid = np.full(input_grid.shape, background_color, dtype=input_grid.dtype)\n\n    # Check for single object and single location for shifting\n    if len(object_locations) == 1 and len(object_locations[list(object_locations.keys())[0]]) <= 2 :\n         output_grid = shift_object(input_grid, non_background_pixels, background_color)\n    else:\n        # Multiple colors: cross-spiral expansion with color interaction\n        # first copy initial object locations\n        output_grid = np.copy(input_grid)\n        \n        prev_grid = np.copy(output_grid)\n        current_grid = np.copy(output_grid)\n        while True: # expand iteratively\n            non_background_pixels = get_non_background_pixels(current_grid, background_color)\n            for (r, c), color in non_background_pixels:\n                expand_multi_color(current_grid, (r,c), color, background_color)\n            if np.array_equal(current_grid, prev_grid):\n                break;\n            else:\n                prev_grid = np.copy(current_grid)\n        output_grid = np.copy(current_grid)\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8080,
    "candidates_token_count": 1327,
    "total_token_count": 9407,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 16.663034
}