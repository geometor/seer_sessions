{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe input grid is summarized by identifying the colors that form large blocks that span the full width.\nFor each such color, create a row in output grid with that color repeated four times.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid into a summarized output grid.\n\n    Args:\n        input_grid: A 2D numpy array representing the input grid.\n\n    Returns:\n        A 2D numpy array representing the output grid.\n    \"\"\"\n    output_grid = []\n    rows_processed = []\n\n    # Iterate through each row of the input grid\n    for i, row in enumerate(input_grid):\n      # Check if the row has already been processed\n        if i in rows_processed:\n            continue\n\n        unique_colors = np.unique(row)\n        width = len(row)\n      \n        for color in unique_colors:\n            color_indices = np.where(row == color)[0]\n\n            # Identify full-width blocks\n            if len(color_indices) > 0:\n              # Check if there are runs of this color that span the entire width of the grid.\n              is_full_width = False\n              \n              if (np.max(color_indices) - np.min(color_indices) + 1) == width :\n                is_full_width = True\n\n              if is_full_width:\n                 # Construct the output row (color repeated four times)\n                  output_row = [color] * 4\n                  output_grid.append(output_row)\n\n                  # Find other rows that are exactly the same for this color\n                  for j in range(i + 1, len(input_grid)):\n                    next_row = input_grid[j]\n                    next_color_indices = np.where(next_row == color)[0]\n                    next_is_full_width = False\n                    if len(next_color_indices) > 0:\n                        if (np.max(next_color_indices) - np.min(next_color_indices) + 1) == width :\n                          next_is_full_width = True\n\n                    if next_is_full_width and np.array_equal(input_grid[i], input_grid[j]):\n                      rows_processed.append(j) # Mark as processed to skip next time\n                  break  # only need one line to represent all that are the same\n\n\n    return np.array(output_grid)\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5181,
    "candidates_token_count": 566,
    "total_token_count": 5747,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.766804
}