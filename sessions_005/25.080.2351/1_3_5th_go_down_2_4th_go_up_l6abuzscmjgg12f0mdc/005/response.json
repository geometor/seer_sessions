{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. Identify Row Segments: For each row in the input grid, identify contiguous segments of non-zero pixels. Treat each of these as distinct objects.\n2. Mirror and Expand: The non-zero section gets mirrored to include itself and the first zero, and the output is mirrored on the other side to reach a similar position to the original.\n3. Fill the center: fill in the center zeros with the nearest non-zero neighbor\n4. Zero Row Handling: If a row contains only zeros, the output row also contains only zeros.\n\"\"\"\n\nimport numpy as np\n\ndef get_row_segments(row):\n    \"\"\"Identifies contiguous segments of non-zero pixels in a row.\"\"\"\n    segments = []\n    start = -1\n    for i, val in enumerate(row):\n        if val != 0 and start == -1:\n            start = i\n        elif val == 0 and start != -1:\n            segments.append((start, i - 1))\n            start = -1\n    if start != -1:\n        segments.append((start, len(row) - 1))\n    return segments\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the mirroring and filling logic.\"\"\"\n    input_grid = np.array(input_grid)\n    output_grid = np.zeros_like(input_grid)\n    rows, cols = input_grid.shape\n\n    for r in range(rows):\n        segments = get_row_segments(input_grid[r])\n\n        if not segments:  # Zero Row Handling\n            continue\n\n        for start, end in segments:\n            # Mirror and Expand\n            segment_length = end - start + 1\n\n            for i in range(segment_length):\n              output_grid[r,start + i ] = input_grid[r, start + i]\n\n            if start > 0:\n              output_grid[r, start -1] = input_grid[r, start]\n\n            if end < cols -1:\n                for i in range(segment_length):\n                  if end + 1 + i < cols:\n                    output_grid[r, end + 1 + i] = input_grid[r, end -i]\n\n        #fill center with closest non zero\n        for c in range(cols):\n          if output_grid[r,c] == 0:\n             # Find nearest non-zero neighbors\n            closest_left = -1\n            closest_right = -1\n\n            for i in range(c - 1, -1, -1):\n                if output_grid[r, i] != 0:\n                    closest_left = i\n                    break\n            for i in range(c + 1, cols):\n                if output_grid[r, i] != 0:\n                    closest_right = i\n                    break\n\n            if closest_left != -1 and closest_right != -1:\n                if (c - closest_left) <= (closest_right - c):\n                    output_grid[r, c] = output_grid[r, closest_left]\n                else:\n                    output_grid[r, c] = output_grid[r, closest_right]\n            elif closest_left != -1:\n                output_grid[r, c] = output_grid[r, closest_left]\n            elif closest_right != -1:\n                output_grid[r, c] = output_grid[r, closest_right]\n\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3977,
    "candidates_token_count": 796,
    "total_token_count": 4773,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 15.502062
}