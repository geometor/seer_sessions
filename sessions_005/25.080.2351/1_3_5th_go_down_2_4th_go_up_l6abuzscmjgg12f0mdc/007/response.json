{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation rule involves these steps:\n1. Iterate through each row of the input grid.\n2. Identify the non-zero pixels within the current row.\n3. Construct a new row for the output grid.\n4. Find the bounding box of all non-zero pixels in input grid.\n5. Extend the size of bounding box to match the size of output grid.\n6. Copy all non-zero pixels from input grid to the output grid within the bounding box.\n\"\"\"\n\nimport numpy as np\n\ndef find_bounding_box(grid):\n    rows, cols = grid.shape\n    min_row, min_col = rows, cols\n    max_row, max_col = 0, 0\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0:\n                min_row = min(min_row, r)\n                min_col = min(min_col, c)\n                max_row = max(max_row, r)\n                max_col = max(max_col, c)\n    return min_row, min_col, max_row, max_col\n\ndef transform(input_grid):\n    input_grid = np.array(input_grid)\n    output_grid = np.zeros_like(input_grid)\n    rows, cols = input_grid.shape\n\n    # Find the bounding box of all non-zero pixels\n    min_row, min_col, max_row, max_col = find_bounding_box(input_grid)\n\n    # Extend Bounding Box and copy the non-zero pixels.\n    row_diff = rows - (max_row - min_row + 1)\n    col_diff = cols - (max_col - min_col + 1)\n\n    extended_min_row = max(0, min_row - row_diff//2)\n    extended_max_row = min(rows -1, max_row + (row_diff - row_diff//2))\n\n    extended_min_col = max(0, min_col - col_diff//2)\n    extended_max_col = min(cols - 1, max_col + (col_diff- col_diff//2))\n\n    for r in range(rows):\n      for c in range(cols):\n        if min_row <= r <= max_row and min_col <= c <= max_col:\n          if input_grid[r,c] != 0:\n            output_grid[r,c] = input_grid[r,c]\n\n    # Fill up output_grid according the extended bounding box\n    out_row_start = extended_min_row\n    for r in range(min_row, max_row+1):\n      out_col_start = extended_min_col\n      for c in range(min_col, max_col + 1):\n        if input_grid[r,c] != 0 and out_row_start < rows and out_col_start < cols :\n          output_grid[out_row_start, out_col_start] = input_grid[r,c]\n        out_col_start += 1\n      out_row_start += 1\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4765,
    "candidates_token_count": 750,
    "total_token_count": 5515,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 17.15274
}