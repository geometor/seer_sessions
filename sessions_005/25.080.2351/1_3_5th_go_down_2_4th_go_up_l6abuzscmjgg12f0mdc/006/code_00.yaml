example1:
  input_objects:
    - row1: [0, 0, 0, 0, 0]
    - row2: [1, 0, 0, 8, 0]
    - row3: [0, 0, 6, 0, 0]
    - row4: [0, 7, 0, 0, 5]
    - row5: [0, 0, 0, 0, 0]
  output_objects:
    - row1: [0, 7, 0, 8, 0]
    - row2: [1, 7, 0, 8, 0]
    - row3: [1, 7, 6, 0, 0]
    - row4: [1, 7, 6, 0, 5]
    - row5: [1, 0, 6, 0, 5]
  transformations:
    - description: >
        Each row in the output is created based on the corresponding row
        in the input, but with a complex rearrangement and filling logic. The
        transformation appears to involve identifying the non-zero pixels
        and then filling up zeros on their left.

example2:
  input_objects:
    - row1: [0, 0, 0, 0, 0]
    - row2: [0, 1, 0, 0, 3]
    - row3: [2, 0, 3, 0, 0]
    - row4: [0, 0, 0, 5, 0]
    - row5: [0, 0, 0, 0, 0]
  output_objects:
     - row1: [0, 1, 0, 5, 0]
     - row2: [0, 1, 0, 5, 3]
     - row3: [2, 0, 3, 5, 3]
     - row4: [2, 0, 3, 5, 3]
     - row5: [2, 0, 3, 0, 3]
  transformations:
    - description: Similar to example 1, but with different filling logic and rearrangement.

example3:
  input_objects:
    - row1: [0, 0, 0, 0, 0]
    - row2: [8, 8, 0, 0, 0]
    - row3: [0, 0, 3, 6, 6]
    - row4: [0, 0, 0, 0, 0]
    - row5: [0, 0, 0, 0, 0]
  output_objects:
    - row1: [0, 8, 0, 6, 0]
    - row2: [8, 8, 0, 6, 0]
    - row3: [8, 0, 3, 6, 6]
    - row4: [8, 0, 3, 0, 6]
    - row5: [8, 0, 3, 0, 6]
  transformations:
     - description: Similar pattern of rearrangement and filling.