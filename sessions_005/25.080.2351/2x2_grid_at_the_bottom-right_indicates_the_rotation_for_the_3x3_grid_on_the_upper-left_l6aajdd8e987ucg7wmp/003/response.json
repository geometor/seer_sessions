{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentify the 3x3 green (3) object in the top-left region of the input grid.\nIdentify the 2x2 object with blue and yellow pixels in the bottom-right corner.\nThe position of the non-zero pixel within this 2x2 object indicates the rotation for the 3x3 green object:\n- Top-left (0,0) -> 0 degrees\n- Top-right(0,1) -> 90 degrees clockwise\n- Bottom-right(1,1) -> 180 degrees clockwise\n- Bottom-left(1,0) -> 270 degrees clockwise.\nRotate the green object around its center accordingly. Clear all other pixels to white (0).\nThe output grid has the same dimensions as the input grid.\n\"\"\"\n\nimport numpy as np\n\ndef calculate_rotation_angle(input_grid):\n    \"\"\"Calculates the rotation angle based on the 2x2 block position.\"\"\"\n    rows, cols = input_grid.shape\n    bottom_right_quadrant = input_grid[rows-2:rows, cols-2:cols]\n\n    # Iterate in reverse to prioritize higher values in the 2x2 block.\n    for i in range(1, -1, -1):\n        for j in range(1, -1, -1):\n            if bottom_right_quadrant[i, j] != 0:\n                if i == 0 and j == 1:  # Top-right\n                    return 90\n                elif i == 1 and j == 1:  # Bottom-right\n                    return 180\n                elif i == 1 and j == 0:  # Bottom-left\n                    return 270\n                elif i == 0 and j == 0:  # Top-left\n                    return 0\n    return 0\n\ndef find_green_object(grid):\n    \"\"\"Finds the top-left 3x3 green object.\"\"\"\n    rows, cols = grid.shape\n    green_object = []\n    for i in range(min(3, rows)):\n        for j in range(min(3, cols)):\n            if grid[i,j] == 3:\n                green_object.append((i,j))\n    return green_object\n\ndef rotate_object(object_coords, angle, rows, cols):\n    \"\"\"Rotates the object coordinates around its center.\"\"\"\n     # Calculate the center of the object\n    if not object_coords:\n      return []\n\n    center_x = sum(x for x, _ in object_coords) // len(object_coords)\n    center_y = sum(y for _, y in object_coords) // len(object_coords)\n    rotated_coords = []\n    \n    for x, y in object_coords:\n        # Translate to origin\n        translated_x = x - center_x\n        translated_y = y - center_y\n\n        # Rotate\n        if angle == 90:\n            rotated_x = -translated_y\n            rotated_y = translated_x\n        elif angle == 180:\n            rotated_x = -translated_x\n            rotated_y = -translated_y\n        elif angle == 270:\n            rotated_x = translated_y\n            rotated_y = -translated_x\n        else:  # angle == 0\n            rotated_x = translated_x\n            rotated_y = translated_y\n\n        # Translate back to original position\n        final_x = rotated_x + center_x\n        final_y = rotated_y + center_y\n        \n        if 0 <= final_x < rows and 0<= final_y < cols:\n          rotated_coords.append((final_x, final_y))\n\n    return rotated_coords\n\ndef transform(input_grid):\n    # Initialize output_grid with the same dimensions as the input, filled with white (0).\n    output_grid = np.zeros_like(input_grid)\n    rows, cols = input_grid.shape\n\n    # Calculate rotation angle.\n    rotation_angle = calculate_rotation_angle(input_grid)\n\n    # Find the green object.\n    green_object = find_green_object(input_grid)\n\n    # Rotate the green object.\n    rotated_green_object = rotate_object(green_object, rotation_angle, rows, cols)\n\n    # Place the rotated object in the output grid.\n    for x, y in rotated_green_object:\n        output_grid[x, y] = 3\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6791,
    "candidates_token_count": 1037,
    "total_token_count": 7828,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 19.446832
}