task_context:
  problem_description: Propagate initial colored pixels downwards diagonally row by row to fill the grid below them, creating diamond-like patterns.
  grid_properties:
    - The output grid has the same dimensions as the input grid.
    - The background color is white (0).
    - The transformation only uses colors present in the non-white pixels of the input grid's initial state.
    - The area below the initial non-white pixels in the input is assumed to be white.
initial_objects:
  - type: set of non-white pixels
    location: Typically located near the top of the grid. The process depends on the row index of the lowest initial non-white pixel.
    properties: Each pixel has a color and a location (row, column).
actions:
  - action: find_last_initial_row
    description: Determine the row index (`max_r_init`) of the last row containing any non-white pixels in the input grid.
  - action: iterative_diagonal_propagation
    description: >
      Starting from the row immediately below `max_r_init`, process each subsequent row down to the bottom of the grid.
      For each cell in the current row being processed, determine its color based on the colors of the two cells diagonally above it in the previous row.
    rule: >
      For each row `r` from `max_r_init + 1` to `height - 1`:
        For each column `c` from `0` to `width - 1`:
          Let `cell_value = output_grid[r, c]`. If `cell_value` is not white (0), skip (or assume the target area starts white).
          Get `color_ul` from `output_grid[r-1, c-1]` (treat out-of-bounds as white/0).
          Get `color_ur` from `output_grid[r-1, c+1]` (treat out-of-bounds as white/0).
          If `color_ul != 0` and `color_ur == 0`: set `output_grid[r, c] = color_ul`.
          Else if `color_ul == 0` and `color_ur != 0`: set `output_grid[r, c] = color_ur`.
          Else if `color_ul != 0` and `color_ur != 0` and `color_ul == color_ur`: set `output_grid[r, c] = color_ul`.
          Else (both white or different non-white colors): `output_grid[r, c]` remains white (0).
    input: The `output_grid` (which starts as a copy of the input) and `max_r_init`.
    output: The `output_grid` is modified in place.
final_state:
  grid: The input grid modified by the continuous downward diagonal propagation, filling the area below the initial non-white pixels according to the rule.