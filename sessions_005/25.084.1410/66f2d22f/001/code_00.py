"""
Transforms a 4x14 input grid into a 4x7 output grid.
The input grid is conceptually split into two 4x7 halves: left (columns 0-6) and right (columns 7-13).
The output grid is generated by comparing corresponding pixels from the left and right halves of the input grid.
If a pixel in the left half (at input[r][c]) AND the corresponding pixel in the right half (at input[r][c + 7]) are both white (0), the output pixel at (r, c) becomes gray (5).
Otherwise, the output pixel at (r, c) is white (0).
"""

import numpy as np

def transform(input_grid):
    """
    Applies the transformation rule to the input grid.

    Args:
        input_grid (list of lists or numpy array): The input grid.

    Returns:
        numpy array: The transformed output grid.
    """
    # Convert input to numpy array for easier slicing and element access
    input_array = np.array(input_grid, dtype=int)
    
    # Get input dimensions
    height, input_width = input_array.shape
    
    # Calculate output width (half of input width)
    output_width = input_width // 2
    
    # Initialize output grid with white (0) pixels
    output_grid = np.zeros((height, output_width), dtype=int)
    
    # Iterate through each cell coordinate (r, c) of the output grid
    for r in range(height):
        for c in range(output_width):
            # Get the color of the pixel in the left half of the input
            left_pixel_color = input_array[r, c]
            
            # Get the color of the corresponding pixel in the right half of the input
            # The corresponding column index in the input is c + output_width
            right_pixel_color = input_array[r, c + output_width]
            
            # Check if both corresponding input pixels are white (0)
            if left_pixel_color == 0 and right_pixel_color == 0:
                # If both are white, set the output pixel to gray (5)
                output_grid[r, c] = 5
            # Else: the output pixel remains white (0) as initialized

    return output_grid
