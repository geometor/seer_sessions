{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\n1. Determine the dimensions (height `H_in`, width `W_in`) of the input grid.\n2. Identify the `background_color` by finding the most frequent color value.\n3. Find the first (`min_row`) and last (`max_row`) rows containing non-background colors.\n4. If no non-background pixels exist, return the input grid.\n5. Extract the \"pattern block\" (rows `min_row` to `max_row`). Let its height be `H_p`.\n6. If `H_p` is odd:\n   - The `source_sequence` is the pattern block itself.\n7. If `H_p` is even:\n   - Split the pattern block into top and bottom halves.\n   - The `source_sequence` is the bottom half followed by the top half.\n8. Create an output grid of the same dimensions as the input.\n9. Fill the output grid by repeating the `source_sequence` vertically, using modulo arithmetic on the row index.\n\"\"\"\n\ndef find_background_color(grid):\n    \"\"\"Finds the most frequent color in the grid.\"\"\"\n    colors, counts = np.unique(grid, return_counts=True)\n    return colors[np.argmax(counts)]\n\ndef find_pattern_rows(grid, background_color):\n    \"\"\"Finds the min and max row indices containing non-background colors.\"\"\"\n    non_background_rows = np.where(np.any(grid != background_color, axis=1))[0]\n    if len(non_background_rows) == 0:\n        return None, None # No pattern found\n    min_row = non_background_rows[0]\n    max_row = non_background_rows[-1]\n    return min_row, max_row\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by identifying a pattern block, potentially reordering\n    its halves based on height parity, and tiling this sequence vertically.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    H_in, W_in = input_np.shape\n\n    # Step 2: Identify the background color\n    background_color = find_background_color(input_np)\n\n    # Step 3: Find the row boundaries of the non-background pattern\n    min_row, max_row = find_pattern_rows(input_np, background_color)\n\n    # Step 4: Handle case where no pattern is found (grid is uniform)\n    if min_row is None:\n        return input_grid # Return original grid\n\n    # Step 5: Extract the pattern block and determine its height\n    pattern_block = input_np[min_row:max_row+1, :]\n    H_p = pattern_block.shape[0]\n\n    # Steps 6 & 7: Determine the source sequence based on pattern height parity\n    if H_p % 2 != 0:\n        # Odd height: Source sequence is the pattern block itself\n        source_sequence = pattern_block\n    else:\n        # Even height: Split into halves and swap\n        half_height = H_p // 2\n        top_half = pattern_block[:half_height, :]\n        bottom_half = pattern_block[half_height:, :]\n        # Concatenate bottom half followed by top half\n        source_sequence = np.vstack((bottom_half, top_half))\n\n    # Step 9: Get the length (number of rows) of the source sequence\n    L_s = source_sequence.shape[0]\n\n    # Step 10: Initialize the output grid\n    output_np = np.zeros((H_in, W_in), dtype=int)\n\n    # Step 11: Fill the output grid by tiling the source sequence\n    for i in range(H_in):\n        # Use modulo operator to cycle through the source sequence rows\n        source_row_index = i % L_s\n        output_np[i, :] = source_sequence[source_row_index, :]\n\n    # Step 12: Return the output grid (convert back to list of lists if necessary)\n    return output_np.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2962,
    "candidates_token_count": 974,
    "total_token_count": 3936,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.73759
}