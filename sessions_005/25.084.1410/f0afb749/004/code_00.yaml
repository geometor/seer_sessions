task_description: Scale the input grid by 2x and apply patterns based on input pixel color and neighborhood.
grid_properties:
  - input_grid: 2D array of integers (colors 0-9).
  - output_grid: 2D array of integers, dimensions are 2x the input grid dimensions.
objects:
  - type: pixel
    properties:
      - color: integer 0-9 (0=white, 1=blue, 2=red, 3=green, 5=gray).
      - position: (row, column) coordinates.
  - type: block_2x2
    properties:
      - derived_from: single input pixel.
      - position: top-left corner at (2*input_row, 2*input_col) in the output grid.
      - pattern: depends on the source input pixel's color and neighborhood.
transformation_rules:
  - rule: Grid Scaling
    description: The output grid dimensions are twice the height and twice the width of the input grid.
  - rule: Non-White Pixel Mapping
    condition: Input pixel color is not white (color != 0).
    action: Fill the corresponding 2x2 block in the output grid entirely with the input pixel's color.
  - rule: White Pixel Mapping (Conditional)
    condition: Input pixel color is white (color == 0).
    sub_rules:
      - condition: The white input pixel at (r, c) has at least one non-white (color != 0) diagonal neighbor in the input grid. Diagonal neighbors are at (r-1, c-1), (r-1, c+1), (r+1, c-1), (r+1, c+1), respecting grid boundaries.
        action: Fill the corresponding 2x2 block in the output grid with the pattern [[1, 0], [0, 1]] (blue anti-diagonal).
      - condition: The white input pixel has no non-white diagonal neighbors in the input grid.
        action: Fill the corresponding 2x2 block in the output grid with the pattern [[0, 0], [0, 0]] (all white).
constants:
  - white: 0
  - blue: 1
  - pattern_diagonal_blue: [[1, 0], [0, 1]]
  - pattern_all_white: [[0, 0], [0, 0]]