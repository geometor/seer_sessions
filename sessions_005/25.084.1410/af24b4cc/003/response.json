{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nTransforms a 9x10 input grid containing six 2x2 colored blocks into a 4x5 output grid.\n\n1. Initialize a 4x5 output grid filled with white (0).\n2. Identify six specific 2x2 blocks in the input grid based on their top-left coordinates:\n   (1,1), (1,4), (1,7), (5,1), (5,4), (5,7).\n3. For each input block, determine its representative color using the following rules:\n   a. Count the frequency of each non-white (non-zero) color within the 2x2 block.\n   b. Find the highest frequency.\n   c. If only one color has this highest frequency, choose that color.\n   d. If two distinct non-white colors share the highest frequency (which must be 2):\n      i. Let the block pixels be [[TL, TR], [BL, BR]].\n      ii. Check if the block matches the pattern: TL == TR == A and BL == BR == B, where A != B.\n      iii. If this pattern exists AND A > B, choose color A.\n      iv. Otherwise (if the pattern doesn't match, or if A <= B), choose the color of the bottom-right pixel (BR).\n   e. If there are no non-white colors, choose white (0).\n4. Map the representative color of each input block to a specific pixel in the output grid:\n   - Input block at (1,1) -> Output pixel at (1,1)\n   - Input block at (1,4) -> Output pixel at (1,2)\n   - Input block at (1,7) -> Output pixel at (1,3)\n   - Input block at (5,1) -> Output pixel at (2,1)\n   - Input block at (5,4) -> Output pixel at (2,2)\n   - Input block at (5,7) -> Output pixel at (2,3)\n5. Return the completed 4x5 output grid.\n\"\"\"\n\ndef determine_block_color(block):\n    \"\"\"\n    Determines the representative color for a 2x2 block based on frequency\n    and specific tie-breaking rules.\n\n    Args:\n        block (np.array): A 2x2 numpy array representing the block.\n\n    Returns:\n        int: The selected representative color.\n    \"\"\"\n    # Flatten the block and get pixel values\n    pixels = block.flatten().tolist()\n    tl, tr, bl, br = pixels[0], pixels[1], pixels[2], pixels[3]\n\n    # Count frequencies of non-white colors\n    counts = Counter(p for p in pixels if p != 0)\n\n    # Handle case with no non-white colors\n    if not counts:\n        return 0\n\n    # Find the maximum frequency\n    max_freq = 0\n    for color in counts:\n        if counts[color] > max_freq:\n            max_freq = counts[color]\n\n    # Get colors with the maximum frequency\n    most_frequent_colors = [color for color, freq in counts.items() if freq == max_freq]\n\n    # If only one color has the max frequency, return it\n    if len(most_frequent_colors) == 1:\n        return most_frequent_colors[0]\n    # Handle tie-breaking (exactly two colors, frequency 2)\n    elif len(most_frequent_colors) == 2 and max_freq == 2:\n        # Check for the [[A, A], [B, B]] pattern\n        is_AABB_pattern = (tl == tr and bl == br and tl != bl)\n        if is_AABB_pattern:\n            color_A = tl\n            color_B = bl\n            # Apply the special tie-breaker: if pattern is AABB and A > B, return A\n            if color_A > color_B:\n                return color_A\n            # Otherwise (A <= B), fall through to the default tie-breaker\n\n        # Default tie-breaker: return the bottom-right pixel's color\n        return br\n    else:\n         # This case should ideally not be reached given the problem constraints\n         # but as a fallback, return the bottom-right color.\n         return br\n\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n    \"\"\"\n    # Convert input list of lists to numpy array for easier slicing\n    input_np = np.array(input_grid, dtype=int)\n\n    # Initialize the 4x5 output grid with white (0)\n    output_grid = np.zeros((4, 5), dtype=int)\n\n    # Define the mapping from input block top-left corners to output pixel coordinates\n    mapping = {\n        (1, 1): (1, 1),\n        (1, 4): (1, 2),\n        (1, 7): (1, 3),\n        (5, 1): (2, 1),\n        (5, 4): (2, 2),\n        (5, 7): (2, 3),\n    }\n\n    # Process each block according to the mapping\n    for (r_in, c_in), (r_out, c_out) in mapping.items():\n        # Extract the 2x2 block from the input grid\n        block = input_np[r_in:r_in+2, c_in:c_in+2]\n\n        # Determine the representative color for the block\n        selected_color = determine_block_color(block)\n\n        # Place the selected color into the output grid at the mapped coordinates\n        output_grid[r_out, c_out] = selected_color\n\n    # Convert the final numpy array back to a list of lists for the expected output format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8295,
    "candidates_token_count": 1352,
    "total_token_count": 9647,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.281833
}