{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies distinct regions enclosed by azure (8) pixels and grid boundaries. \nFor each region, determines if it contains any initial green (3) pixels. \nIf a region contains at least one initial green pixel, all orange (7) pixels \nwithin that specific region are converted to green (3) in the output grid. \nPixels in regions without any initial green pixels, azure pixels, and other \nnon-orange pixels within source-containing regions remain unchanged.\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef transform(input_grid):\n    \"\"\"\n    Applies a region-based color transformation.\n\n    Args:\n        input_grid (list[list[int]]): A 2D list representing the input grid.\n\n    Returns:\n        list[list[int]]: A 2D list representing the transformed output grid.\n    \"\"\"\n    np_input = np.array(input_grid, dtype=int)\n    output_grid = np_input.copy()\n    height, width = np_input.shape\n\n    # Define colors\n    GREEN = 3\n    ORANGE = 7\n    AZURE = 8\n\n    # Keep track of visited cells during region identification\n    visited = np.zeros_like(np_input, dtype=bool)\n    regions = [] # Store info about each region: [{'coords': set(), 'has_green': bool}]\n\n    # Define 8 directions for neighbor checking (connectivity)\n    directions = [\n        (-1, -1), (-1, 0), (-1, 1),\n        (0, -1),          (0, 1),\n        (1, -1), (1, 0), (1, 1)\n    ]\n\n    # 1. Identify all distinct contiguous regions of non-azure pixels\n    for r in range(height):\n        for c in range(width):\n            # If this cell is not azure and hasn't been visited yet, start a new region search (BFS)\n            if np_input[r, c] != AZURE and not visited[r, c]:\n                current_region_coords = set()\n                current_region_has_green = False\n                q = deque([(r, c)])\n                visited[r, c] = True\n\n                while q:\n                    row, col = q.popleft()\n                    current_region_coords.add((row, col))\n\n                    # Check if this cell is initially green\n                    if np_input[row, col] == GREEN:\n                        current_region_has_green = True\n\n                    # Explore neighbors\n                    for dr, dc in directions:\n                        nr, nc = row + dr, col + dc\n\n                        # Check bounds\n                        if 0 <= nr < height and 0 <= nc < width:\n                            # If neighbor is not azure and not visited\n                            if np_input[nr, nc] != AZURE and not visited[nr, nc]:\n                                visited[nr, nc] = True\n                                q.append((nr, nc))\n\n                # Store the found region and its green status\n                regions.append({\n                    'coords': current_region_coords,\n                    'has_green': current_region_has_green\n                })\n\n    # 2. Transform orange pixels to green only in regions that initially contained green\n    for region_info in regions:\n        if region_info['has_green']:\n            for r, c in region_info['coords']:\n                # If the pixel in the *input* grid was orange\n                if np_input[r, c] == ORANGE:\n                    # Change it to green in the *output* grid\n                    output_grid[r, c] = GREEN\n\n    # Convert the final numpy array back to a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5411,
    "candidates_token_count": 851,
    "total_token_count": 6262,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.272363
}