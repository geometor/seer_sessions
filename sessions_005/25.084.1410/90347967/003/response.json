{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid based on the number of edges touched by the single connected object of non-white pixels.\n1. Identify the single connected group of non-white pixels (8-way connectivity).\n2. Count how many of the four grid edges (Top, Bottom, Left, Right) this group touches (E).\n3. Rotate the entire input grid by 180 degrees.\n4. If E is exactly 1, shift the rotated grid up by 2 rows (filling the bottom 2 rows with white).\n5. Otherwise, use the rotated grid directly as the output.\n\"\"\"\n\nimport numpy as np\nfrom scipy.ndimage import label\n\ndef count_edges_touched(grid):\n    \"\"\"\n    Counts the number of grid edges touched by non-white pixels.\n    Assumes a single connected component or handles empty grid.\n    \"\"\"\n    height, width = grid.shape\n    \n    # Find coordinates of non-white pixels\n    non_white_coords = np.argwhere(grid != 0) # Use != 0 for non-white\n    \n    # Handle empty grid case\n    if non_white_coords.shape[0] == 0:\n        return 0 \n        \n    r_min = non_white_coords[:, 0].min()\n    r_max = non_white_coords[:, 0].max()\n    c_min = non_white_coords[:, 1].min()\n    c_max = non_white_coords[:, 1].max()\n    \n    touches_top = (r_min == 0)\n    touches_bottom = (r_max == height - 1)\n    touches_left = (c_min == 0)\n    touches_right = (c_max == width - 1)\n    \n    num_edges_touched = sum([touches_top, touches_bottom, touches_left, touches_right])\n    \n    return num_edges_touched\n\ndef rotate_180(grid):\n    \"\"\"Rotates a 2D grid by 180 degrees.\"\"\"\n    height, width = grid.shape\n    rotated_grid = np.zeros_like(grid)\n    for r in range(height):\n        for c in range(width):\n            rotated_grid[height - 1 - r, width - 1 - c] = grid[r, c]\n    return rotated_grid\n\ndef shift_up(grid, rows):\n    \"\"\"Shifts a grid up by a specified number of rows, filling bottom with white (0).\"\"\"\n    height, width = grid.shape\n    shifted_grid = np.zeros_like(grid)\n    if rows >= height: # Shifting more than height results in empty grid\n        return shifted_grid \n    # Copy the relevant part of the original grid to the shifted position\n    shifted_grid[0:height-rows, :] = grid[rows:height, :]\n    return shifted_grid\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the conditional rotation and shift transformation.\n    \"\"\"\n    # Convert input to numpy array\n    grid = np.array(input_grid, dtype=int)\n    height, width = grid.shape\n\n    # Check for trivial case: all white grid\n    if np.all(grid == 0):\n        return grid # Return the input grid as is\n\n    # 1. & 2. Count edges touched by the non-white object(s)\n    # Note: We are assuming based on examples there's only one object if non-white pixels exist.\n    # The edge counting doesn't strictly need the single object assumption, just non-white pixels.\n    num_edges = count_edges_touched(grid)\n\n    # 3. Rotate the grid 180 degrees\n    rotated_grid = rotate_180(grid)\n\n    # 4. & 5. Apply conditional shift\n    if num_edges == 1:\n        # Shift the rotated grid up by 2 rows\n        output_grid = shift_up(rotated_grid, 2)\n    else:\n        # No shift needed\n        output_grid = rotated_grid\n\n    return output_grid.tolist() # Return as list of lists per ARC standard\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 12164,
    "candidates_token_count": 959,
    "total_token_count": 13123,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.877021
}