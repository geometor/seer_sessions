{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List\n\n# Define color constants (optional but good practice)\nBACKGROUND_COLOR = 0\n\ndef is_column_entirely_background(grid: np.ndarray, col_index: int, background_color: int) -> bool:\n    \"\"\"\n    Checks if a specific column in the grid contains only the background color.\n\n    Args:\n        grid: The input grid as a NumPy array.\n        col_index: The index of the column to check.\n        background_color: The integer value representing the background color.\n\n    Returns:\n        True if the column is entirely background color, False otherwise.\n    \"\"\"\n    return np.all(grid[:, col_index] == background_color)\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transforms the input grid by removing all columns that consist entirely\n    of the background color (white, 0). The remaining columns are kept\n    in their original relative order.\n\n    Args:\n        input_grid: A list of lists representing the input grid.\n\n    Returns:\n        A list of lists representing the transformed output grid.\n    \"\"\"\n    # Convert input list of lists to a NumPy array for efficient column operations\n    input_array = np.array(input_grid, dtype=int)\n    \n    # Get the dimensions of the input grid\n    height, width = input_array.shape\n    \n    # Identify the indices of columns that should be kept (i.e., not entirely background)\n    columns_to_keep = []\n    for j in range(width):\n        if not is_column_entirely_background(input_array, j, BACKGROUND_COLOR):\n            columns_to_keep.append(j)\n            \n    # Create the output grid by selecting only the columns to keep\n    # If no columns are kept (e.g., input is all background), handle this edge case\n    if not columns_to_keep:\n        # Return an empty grid of the same height or based on specific task requirements\n        # For this task, returning a grid with original height and 0 width seems plausible if input was non-empty\n        # Or, if input was empty, return empty. If input had rows, return rows with 0 columns.\n        output_array = np.empty((height, 0), dtype=int)\n    else:\n        output_array = input_array[:, columns_to_keep]\n        \n    # Convert the resulting NumPy array back to a list of lists\n    output_grid = output_array.tolist()\n    \n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1574,
    "candidates_token_count": 589,
    "total_token_count": 2163,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 147.972797
}