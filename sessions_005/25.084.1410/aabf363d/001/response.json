{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nIdentifies two non-background colors in the input grid. One color appears exactly once (the 'indicator color'), and the other forms a larger object (the 'original color'). The transformation recolors all pixels of the 'original color' to the 'indicator color' and changes the single pixel of the 'indicator color' to the background color (0).\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Recolors the main object based on the color of a single indicator pixel.\n\n    Args:\n        input_grid (list[list[int]]): A 2D list representing the input grid.\n\n    Returns:\n        list[list[int]]: A 2D list representing the transformed output grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    grid = np.array(input_grid, dtype=int)\n    height, width = grid.shape\n    \n    # Define background color\n    background_color = 0\n    \n    # Find all unique colors and their counts, excluding the background\n    colors, counts = np.unique(grid[grid != background_color], return_counts=True)\n    \n    indicator_color = -1\n    original_color = -1\n    indicator_location = None\n    \n    # Identify the indicator color (appears once) and the original object color\n    for color, count in zip(colors, counts):\n        if count == 1:\n            indicator_color = color\n            # Find the location of the indicator pixel\n            loc = np.where(grid == indicator_color)\n            # Ensure only one location is found, extract row and column\n            if len(loc[0]) == 1:\n                 indicator_location = (loc[0][0], loc[1][0])\n            else:\n                # Handle edge case/error: more than one pixel found, though count was 1 (should not happen with np.unique logic)\n                # Or potentially the indicator color wasn't found if counts were wrong.\n                # For now, assume input follows the observed pattern.\n                pass \n        else:\n            # Assume the other non-background color is the original object color\n            original_color = color\n            \n    # Check if both colors were successfully identified\n    if indicator_color == -1 or original_color == -1 or indicator_location is None:\n        # If the pattern isn't matched (e.g., not exactly two non-background colors, \n        # or no color appears exactly once), return the original grid or handle error.\n        # For this task, based on examples, we assume the pattern holds.\n        # If necessary, add more robust error handling here.\n        print(\"Warning: Could not identify indicator and/or original color based on expected pattern.\")\n        return input_grid # Return original grid if pattern fails\n\n    # Create the output grid as a copy of the input grid\n    output_grid = np.copy(grid)\n    \n    # Recolor the object: find all pixels with the original color and change them to the indicator color\n    output_grid[output_grid == original_color] = indicator_color\n    \n    # Change the original indicator pixel location to the background color\n    if indicator_location:\n        output_grid[indicator_location] = background_color\n        \n    # Convert the result back to a list of lists\n    return output_grid.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2786,
    "candidates_token_count": 767,
    "total_token_count": 3553,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.047708
}