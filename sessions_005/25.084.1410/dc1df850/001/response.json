{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport copy\n\n\"\"\"\nTransforms the input grid based on the following rule:\n1. Initialize the output grid as a copy of the input grid.\n2. Find all pixels in the input grid with the color Red (2).\n3. Iterate through each pixel in the input grid.\n4. If a pixel is White (0), check if it is adjacent (horizontally, vertically, or diagonally) to any of the Red pixels found in step 2.\n5. If a White pixel is adjacent to at least one Red pixel, change its color to Blue (1) in the output grid.\n6. All other pixels retain their original color from the input grid.\n\"\"\"\n\ndef find_pixels_by_color(grid, color_code):\n    \"\"\"\n    Finds the coordinates of all pixels with a specific color.\n\n    Args:\n        grid (np.array): The input grid.\n        color_code (int): The color code to search for.\n\n    Returns:\n        list: A list of tuples, where each tuple is the (row, col) coordinate\n              of a pixel with the specified color.\n    \"\"\"\n    locations = []\n    height, width = grid.shape\n    for r in range(height):\n        for c in range(width):\n            if grid[r, c] == color_code:\n                locations.append((r, c))\n    return locations\n\ndef is_adjacent(r, c, target_locations):\n    \"\"\"\n    Checks if a given coordinate (r, c) is adjacent (8-connectivity) to any\n    coordinate in the target_locations list.\n\n    Args:\n        r (int): Row of the current pixel.\n        c (int): Column of the current pixel.\n        target_locations (list): A list of (row, col) tuples to check adjacency against.\n\n    Returns:\n        bool: True if (r, c) is adjacent to any location in target_locations, False otherwise.\n    \"\"\"\n    for tr, tc in target_locations:\n        # Check horizontal, vertical, and diagonal adjacency\n        # max(abs(r - tr), abs(c - tc)) == 1 covers all 8 neighbours\n        if max(abs(r - tr), abs(c - tc)) == 1:\n            return True\n    return False\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid (list): A list of lists representing the input grid.\n\n    Returns:\n        list: A list of lists representing the transformed output grid.\n    \"\"\"\n    # Convert input to numpy array for easier processing\n    grid_np = np.array(input_grid, dtype=int)\n    \n    # Initialize output_grid as a deep copy of the input grid\n    output_grid = grid_np.copy()\n    \n    height, width = grid_np.shape\n    \n    # Define color codes\n    WHITE = 0\n    BLUE = 1\n    RED = 2\n    \n    # 1. Find the locations of all Red pixels in the input grid\n    red_pixel_locations = find_pixels_by_color(grid_np, RED)\n    \n    # 2. Iterate through each pixel of the input grid\n    for r in range(height):\n        for c in range(width):\n            # 3. Check if the current pixel is White\n            if grid_np[r, c] == WHITE:\n                # 4. Check if this White pixel is adjacent to any Red pixel\n                if is_adjacent(r, c, red_pixel_locations):\n                    # 5. If adjacent, change the corresponding pixel in the output grid to Blue\n                    output_grid[r, c] = BLUE\n                    \n    # Convert the numpy array back to a list of lists for the final output format\n    return output_grid.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2325,
    "candidates_token_count": 876,
    "total_token_count": 3201,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 17.537705
}