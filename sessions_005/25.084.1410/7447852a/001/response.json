{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by changing specific white pixels to yellow based on their red neighbors.\nA white pixel (0) changes to yellow (4) if and only if it has exactly two red (2) neighbors,\nand these two red neighbors are diagonally opposite each other relative to the white pixel.\nAll other pixels retain their original color. Red pixels (2) remain unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef _is_within_bounds(r, c, height, width):\n  \"\"\"Checks if coordinates (r, c) are within the grid boundaries.\"\"\"\n  return 0 <= r < height and 0 <= c < width\n\ndef _check_neighbors_for_diagonal_red_pair(input_grid, r, c):\n  \"\"\"\n  Checks if the pixel at (r, c) has exactly two red neighbors\n  that are diagonally opposite each other.\n  \"\"\"\n  height, width = input_grid.shape\n  red_neighbor_relative_coords = []\n  \n  # Define relative coordinates for all 8 neighbors\n  neighbor_deltas = [\n      (-1, -1), (-1, 0), (-1, 1),\n      ( 0, -1),          ( 0, 1),\n      ( 1, -1), ( 1, 0), ( 1, 1)\n  ]\n\n  # Iterate through potential neighbors\n  for dr, dc in neighbor_deltas:\n    nr, nc = r + dr, c + dc\n    # Check bounds\n    if _is_within_bounds(nr, nc, height, width):\n      # Check if neighbor is red\n      if input_grid[nr, nc] == 2:\n        red_neighbor_relative_coords.append((dr, dc))\n\n  # Check if exactly two red neighbors were found\n  if len(red_neighbor_relative_coords) != 2:\n    return False\n\n  # Check if the two red neighbors are a diagonal pair\n  # Use a set to ignore order\n  pair_set = set(red_neighbor_relative_coords)\n  is_diagonal_pair_1 = pair_set == {(-1, -1), (1, 1)}\n  is_diagonal_pair_2 = pair_set == {(-1, 1), (1, -1)}\n  \n  return is_diagonal_pair_1 or is_diagonal_pair_2\n\ndef transform(input_grid):\n  \"\"\"\n  Applies the transformation rule to the input grid.\n  Changes white pixels to yellow if they have exactly two diagonally opposite red neighbors.\n  \"\"\"\n  # Ensure input is a numpy array\n  input_grid_np = np.array(input_grid, dtype=int)\n  height, width = input_grid_np.shape\n  \n  # Initialize output_grid as a copy of the input\n  # Pixels that don't meet the condition will keep their original color\n  output_grid = np.copy(input_grid_np)\n\n  # Iterate through each pixel of the input grid\n  for r in range(height):\n    for c in range(width):\n      # Check if the current pixel is white (0)\n      if input_grid_np[r, c] == 0:\n        # Check the condition for changing to yellow\n        if _check_neighbors_for_diagonal_red_pair(input_grid_np, r, c):\n          # Change the corresponding pixel in the output grid to yellow (4)\n          output_grid[r, c] = 4\n          \n  # Return the modified grid\n  return output_grid.tolist() # Convert back to list of lists if needed for consistency\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2752,
    "candidates_token_count": 827,
    "total_token_count": 3579,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.690864
}