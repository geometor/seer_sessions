task_elements:
  - element: grid
    description: A 2D array of pixels with colors represented by integers 0-9.
    properties:
      - height
      - width
      - pixels (cells with color values)
  - element: background_pixel
    value: 0 (white)
    role: Separates objects/blocks. Never appears in the output.
  - element: foreground_pixels
    values: [1, 2, 8] (blue, red, azure in these examples)
    role: Form contiguous blocks.
  - element: block
    description: A contiguous region (connected component) of foreground pixels within the input grid. Adjacency is typically 4-way (up, down, left, right).
    properties:
      - pixels (list of coordinates and colors)
      - bounding_box (min_row, min_col, max_row, max_col)
      - color_counts (e.g., count of red pixels, count of blue pixels)
  - element: target_color
    value: 2 (red)
    role: Used as the primary criterion for selecting the output block.

actions:
  - action: identify_blocks
    description: Find all distinct contiguous blocks of foreground pixels in the input grid.
    inputs:
      - input_grid
    outputs:
      - list_of_blocks
  - action: analyze_blocks
    description: For each identified block, count the occurrences of the target color (red).
    inputs:
      - list_of_blocks
      - target_color
    outputs:
      - list_of_blocks_with_counts
  - action: select_block
    description: Choose the block with the maximum count of the target color. (Assume no ties or a default tie-breaking rule like top-leftmost if needed, though not observed in examples).
    inputs:
      - list_of_blocks_with_counts
    outputs:
      - selected_block
  - action: extract_subgrid
    description: Create the output grid by copying the pixels within the bounding box of the selected block from the input grid.
    inputs:
      - input_grid
      - selected_block
    outputs:
      - output_grid

relationships:
  - The output grid is a subgrid of the input grid.
  - The output grid corresponds exactly to one specific block of foreground pixels from the input.
  - The selection of the specific block is based on maximizing the count of red (2) pixels within the block.