{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentifies all separate contiguous blocks of non-white (0) pixels in the input grid using 4-way connectivity.\nCounts the number of red (2) pixels within each block.\nSelects the block containing the maximum number of red pixels.\nExtracts the rectangular subgrid corresponding to the bounding box of the selected block from the input grid.\nThe extracted subgrid becomes the output.\n\"\"\"\n\ndef find_blocks(grid):\n    \"\"\"\n    Finds all contiguous blocks of non-background pixels.\n\n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        list: A list of dictionaries, where each dictionary represents a block\n              and contains 'coords' (list of (row, col) tuples) and\n              'bbox' (min_row, min_col, max_row, max_col).\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    blocks = []\n    background_color = 0\n\n    for r in range(rows):\n        for c in range(cols):\n            # If pixel is not background and not visited, start BFS\n            if grid[r, c] != background_color and not visited[r, c]:\n                coords = []\n                q = deque([(r, c)])\n                visited[r, c] = True\n                min_r, min_c = r, c\n                max_r, max_c = r, c\n\n                while q:\n                    row, col = q.popleft()\n                    coords.append((row, col))\n                    min_r = min(min_r, row)\n                    min_c = min(min_c, col)\n                    max_r = max(max_r, row)\n                    max_c = max(max_c, col)\n\n                    # Check 4 neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        # Check bounds, background color, and visited status\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] != background_color and not visited[nr, nc]:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n\n                blocks.append({\n                    'coords': coords,\n                    'bbox': (min_r, min_c, max_r, max_c)\n                })\n    return blocks\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on the described rules.\n\n    Args:\n        input_grid (list of lists): The input grid.\n\n    Returns:\n        list of lists: The transformed output grid.\n    \"\"\"\n    grid_np = np.array(input_grid, dtype=int)\n    target_color = 2 # Red\n\n    # 1. Identify all separate contiguous blocks of non-white pixels\n    blocks = find_blocks(grid_np)\n\n    if not blocks:\n        return [] # Return empty grid if no blocks found\n\n    max_target_count = -1\n    selected_block = None\n\n    # 2. For each block, count the target color (red) pixels\n    # 3. Determine which block has the highest count\n    for block in blocks:\n        current_target_count = 0\n        for r, c in block['coords']:\n            if grid_np[r, c] == target_color:\n                current_target_count += 1\n\n        if current_target_count > max_target_count:\n            max_target_count = current_target_count\n            selected_block = block\n        # Simple tie-breaking: first block found with max count wins\n\n    if selected_block is None:\n         # This case implies all blocks had 0 red pixels, or no blocks.\n         # If there are blocks but none have red, the first block is implicitly selected by loop logic if max count remains -1\n         # Let's refine: if max_target_count is still -1 or 0 after checking all blocks, but blocks exist,\n         # maybe we need a different rule? The examples *always* have red.\n         # Assuming based on examples: there will be at least one red pixel in one block.\n         # If truly no red pixels exist, the logic would select the first block encountered. Let's stick with that for now.\n         if blocks:\n             selected_block = blocks[0] # Default to first block if no red found\n         else:\n             return [] # No blocks at all\n\n    # 4. Extract the rectangular subgrid (bounding box) of the selected block\n    min_r, min_c, max_r, max_c = selected_block['bbox']\n    output_grid_np = grid_np[min_r : max_r + 1, min_c : max_c + 1]\n\n    # Convert numpy array back to list of lists for the final output\n    output_grid = output_grid_np.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2898,
    "candidates_token_count": 1183,
    "total_token_count": 4081,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.933073
}