{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentify all distinct connected components (objects) of non-white (color > 0) pixels using 4-way adjacency.\nFind the minimum non-white color index (c_min) present in the grid.\nIdentify all objects containing c_min. Let this set be O_min.\n\nCase 1: If O_min contains exactly one object (obj):\n    - If obj contains multiple different colors: Output the subgrid corresponding to the bounding box of obj.\n    - If obj contains only one color (c_min): Output a single vertical column (width 1) with height equal to the number of pixels in obj, filled with c_min.\n\nCase 2: If O_min contains more than one object:\n    - Find the unique object among *all* objects in the grid that is a \"solid square\" (monochromatic, square bounding box, no background pixels within the bounding box).\n    - Output the subgrid corresponding to the bounding box of this solid square object.\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef find_objects(grid):\n    \"\"\"\n    Finds all connected components (objects) of non-background pixels.\n\n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        list: A list of objects. Each object is a dictionary containing:\n              'pixels': set of (row, col) tuples for the object's pixels.\n              'colors': set of colors present in the object.\n              'bbox': tuple (min_row, min_col, max_row, max_col).\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n    \n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and not visited[r, c]:\n                # Start BFS to find a new object\n                obj_pixels = set()\n                obj_colors = set()\n                q = deque([(r, c)])\n                visited[r, c] = True\n                min_r, min_c = r, c\n                max_r, max_c = r, c\n\n                while q:\n                    row, col = q.popleft()\n                    obj_pixels.add((row, col))\n                    obj_colors.add(grid[row, col])\n                    min_r = min(min_r, row)\n                    min_c = min(min_c, col)\n                    max_r = max(max_r, row)\n                    max_c = max(max_c, col)\n\n                    # Check neighbors (4-way adjacency)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] != 0 and not visited[nr, nc]:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n                \n                objects.append({\n                    'pixels': obj_pixels,\n                    'colors': obj_colors,\n                    'bbox': (min_r, min_c, max_r, max_c)\n                })\n                \n    return objects\n\ndef get_bounding_box(pixels):\n    \"\"\"Calculates the bounding box for a set of pixels.\"\"\"\n    if not pixels:\n        return None\n    min_r = min(r for r, c in pixels)\n    min_c = min(c for r, c in pixels)\n    max_r = max(r for r, c in pixels)\n    max_c = max(c for r, c in pixels)\n    return (min_r, min_c, max_r, max_c)\n\ndef crop_grid(grid, bbox):\n    \"\"\"Extracts a subgrid based on a bounding box.\"\"\"\n    min_r, min_c, max_r, max_c = bbox\n    return grid[min_r:max_r+1, min_c:max_c+1]\n\ndef is_solid_square(obj, grid):\n    \"\"\"Checks if an object is a solid square.\"\"\"\n    if len(obj['colors']) != 1:\n        return False # Must be monochromatic\n\n    color = list(obj['colors'])[0]\n    min_r, min_c, max_r, max_c = obj['bbox']\n    height = max_r - min_r + 1\n    width = max_c - min_c + 1\n\n    if height != width:\n        return False # Bounding box must be square\n\n    # Check if all pixels within the bounding box match the object's color\n    for r in range(min_r, max_r + 1):\n        for c in range(min_c, max_c + 1):\n            if grid[r, c] != color:\n                return False # Found background or different color within bbox\n            # We also implicitly check if all pixels in the bbox are part of the object\n            # because find_objects ensures connectivity. If a non-object pixel\n            # existed inside, it would either be 0 (checked above) or a different\n            # object's color (also checked above).\n            \n    # An alternative check: ensure the number of pixels matches the area of the bbox\n    if len(obj['pixels']) != height * width:\n         return False # Should not happen with the check above, but good validation\n\n    return True\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on the identified rules.\n    \"\"\"\n    input_grid = np.array(input_grid)\n    \n    # 1. Identify all objects\n    all_objects = find_objects(input_grid)\n    if not all_objects:\n        return np.array([[]]) # Handle empty input or input with only background\n\n    # 2. Find the minimum non-white color (c_min)\n    non_white_pixels = input_grid[input_grid != 0]\n    if non_white_pixels.size == 0:\n         return np.array([[]]) # No non-white pixels found\n    c_min = np.min(non_white_pixels)\n\n    # 3. Identify objects containing c_min (O_min)\n    O_min = [obj for obj in all_objects if c_min in obj['colors']]\n\n    # 4. Apply rules based on the number of objects in O_min\n    if len(O_min) == 1:\n        # Case 1: Exactly one object contains c_min\n        obj = O_min[0]\n        \n        if len(obj['colors']) > 1:\n            # Case 1.a: Multi-colored object -> Crop bounding box\n            output_grid = crop_grid(input_grid, obj['bbox'])\n        else:\n            # Case 1.b: Monochromatic object -> Vertical column\n            num_pixels = len(obj['pixels'])\n            output_grid = np.full((num_pixels, 1), c_min, dtype=input_grid.dtype)\n            \n    elif len(O_min) > 1:\n        # Case 2: More than one object contains c_min -> Find unique solid square\n        solid_squares = [obj for obj in all_objects if is_solid_square(obj, input_grid)]\n        \n        if len(solid_squares) == 1:\n            obj_sq = solid_squares[0]\n            output_grid = crop_grid(input_grid, obj_sq['bbox'])\n        else:\n            # This case shouldn't happen based on examples, but handle defensively\n            # Perhaps return the largest solid square, or the first one found?\n            # Or maybe default to the first object in O_min's bbox?\n            # Based on example 1, there is expected to be exactly one solid square.\n            # If not, we might have misinterpreted the rule or the examples.\n            # Let's raise an error for now or return empty if ambiguity is high.\n            # Returning empty seems safer for ARC tasks.\n            # print(f\"Warning: Expected 1 solid square, found {len(solid_squares)}. Input grid:\\n{input_grid}\")\n            if len(solid_squares) > 1:\n                 # Let's try returning the solid square with the highest color index as a tie-breaker?\n                 # Or the one appearing first (top-left corner)?\n                 # Let's stick to the assumption of uniqueness for now.\n                 # If uniqueness fails, return the first found as a guess.\n                 obj_sq = solid_squares[0]\n                 output_grid = crop_grid(input_grid, obj_sq['bbox'])\n            else: # len(solid_squares) == 0\n                 # print(f\"Warning: Expected 1 solid square, found 0. Input grid:\\n{input_grid}\")\n                 output_grid = np.array([[]]) # Return empty grid if no solid square found\n                 \n    else: # len(O_min) == 0\n        # This case means c_min was found, but no object contained it, which is impossible\n        # by definition if c_min came from the grid's pixels.\n        # This implies an error or edge case not covered (e.g., c_min calculation failed).\n        # Return empty grid.\n        output_grid = np.array([[]])\n\n    return output_grid.tolist() # Convert back to list of lists for ARC standard\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3505,
    "candidates_token_count": 2197,
    "total_token_count": 5702,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 20.918756
}