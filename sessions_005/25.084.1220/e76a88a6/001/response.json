{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentify the unique multi-colored (non-gray) object in the input grid as the 'pattern'.\nIdentify all objects composed solely of gray pixels as 'targets'.\nReplace each target object in the output grid with a copy of the pattern object, aligning the top-left corner of the pattern copy with the top-left corner of the target object's bounding box.\nThe original pattern object and background pixels remain unchanged unless overwritten by a pattern placement.\n\"\"\"\n\ndef find_objects(grid):\n    \"\"\"\n    Finds connected components (objects) of non-background (non-zero) pixels in the grid.\n\n    Args:\n        grid (np.ndarray): The input grid.\n\n    Returns:\n        list: A list of dictionaries, where each dictionary represents an object\n              and contains 'pixels' (set of (r, c) tuples), 'colors' (set of color values),\n              'min_row', 'min_col', 'max_row', 'max_col', and 'top_left' ((r, c) tuple).\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n    objects = []\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and not visited[r, c]:\n                # Start BFS to find a new object\n                obj_pixels = set()\n                obj_colors = set()\n                q = deque([(r, c)])\n                visited[r, c] = True\n                min_r, min_c = r, c\n                max_r, max_c = r, c\n\n                while q:\n                    curr_r, curr_c = q.popleft()\n                    obj_pixels.add((curr_r, curr_c))\n                    obj_colors.add(grid[curr_r, curr_c])\n                    min_r = min(min_r, curr_r)\n                    min_c = min(min_c, curr_c)\n                    max_r = max(max_r, curr_r)\n                    max_c = max(max_c, curr_c)\n\n                    # Explore neighbors (4-directional)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = curr_r + dr, curr_c + dc\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] != 0 and not visited[nr, nc]:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n                \n                objects.append({\n                    'pixels': obj_pixels,\n                    'colors': obj_colors,\n                    'min_row': min_r,\n                    'min_col': min_c,\n                    'max_row': max_r,\n                    'max_col': max_c,\n                    'top_left': (min_r, min_c)\n                })\n    return objects\n\ndef extract_pattern_data(grid, pattern_obj):\n    \"\"\"\n    Extracts the pixel data of the pattern object relative to its top-left corner.\n\n    Args:\n        grid (np.ndarray): The input grid.\n        pattern_obj (dict): The dictionary representing the pattern object.\n\n    Returns:\n        np.ndarray: A grid containing the pattern's pixel data.\n        int: The height of the pattern grid.\n        int: The width of the pattern grid.\n    \"\"\"\n    min_r, min_c = pattern_obj['top_left']\n    height = pattern_obj['max_row'] - min_r + 1\n    width = pattern_obj['max_col'] - min_c + 1\n    \n    pattern_grid = np.zeros((height, width), dtype=int)\n    \n    for r, c in pattern_obj['pixels']:\n        relative_r = r - min_r\n        relative_c = c - min_c\n        pattern_grid[relative_r, relative_c] = grid[r,c]\n        \n    return pattern_grid, height, width\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule: identifies a pattern object (non-gray)\n    and target objects (gray), then replaces targets with the pattern.\n\n    Args:\n        input_grid (np.ndarray): The input 2D array representing the grid.\n\n    Returns:\n        np.ndarray: The transformed 2D array.\n    \"\"\"\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n    grid_rows, grid_cols = output_grid.shape\n\n    # 1. & 2. Find all non-white objects\n    all_objects = find_objects(input_grid)\n\n    # 3. Identify the pattern object (non-gray) and target objects (gray)\n    pattern_object = None\n    target_objects = []\n    for obj in all_objects:\n        if 5 in obj['colors'] and len(obj['colors']) == 1: # Exclusively gray\n             target_objects.append(obj)\n        elif 5 not in obj['colors'] and obj['colors']: # Contains non-gray colors\n            if pattern_object is None: # Found the first (and should be only) pattern\n                pattern_object = obj\n            else:\n                # Error case: Multiple potential patterns found, which contradicts the assumption.\n                # For ARC, we usually assume the examples guide us to a single interpretation.\n                # We'll proceed with the first one found, but this might need refinement if tasks allow multiple patterns.\n                pass \n\n    # If no pattern object is found, return the original grid\n    if pattern_object is None:\n        return output_grid\n\n    # Extract the pattern's pixel data relative to its top-left corner\n    pattern_data, pattern_h, pattern_w = extract_pattern_data(input_grid, pattern_object)\n\n    # 5. For each target object, replace it with the pattern\n    for target in target_objects:\n        target_r, target_c = target['top_left']\n\n        # Iterate through the pattern's pixels\n        for r_offset in range(pattern_h):\n            for c_offset in range(pattern_w):\n                # Calculate the coordinates in the output grid\n                out_r = target_r + r_offset\n                out_c = target_c + c_offset\n\n                # Check if the coordinate is within the grid bounds\n                if 0 <= out_r < grid_rows and 0 <= out_c < grid_cols:\n                    # Get the color from the pattern data\n                    pattern_color = pattern_data[r_offset, c_offset]\n                    # Only overwrite if the pattern pixel is not background (0)\n                    # This preserves the shape of the pattern if it's not rectangular\n                    if pattern_color != 0:\n                         output_grid[out_r, out_c] = pattern_color\n                    # If the pattern pixel IS background (0), we need to consider\n                    # if the original pixel at the target location *within the target object's bounds*\n                    # should be cleared. Since we replace the *entire* target object conceptually,\n                    # pixels within the pattern's bounding box overlaid on the target location\n                    # should become 0 if the corresponding pattern pixel is 0.\n                    # However, the prompt implies stamping the non-zero part of the pattern.\n                    # Let's stick to only overwriting with non-zero pattern pixels for now.\n                    # Re-evaluating train_1 output: it seems the gray pixels under the pattern's zero pixels ARE cleared.\n                    # Let's adjust: overwrite with pattern color, even if it's 0, but only within the bounds.\n                    elif pattern_color == 0:\n                         # Check if the original pixel belonged to the target object being replaced.\n                         # This is complex. A simpler approach matching the examples:\n                         # Overwrite with the pattern pixel's value regardless, within bounds.\n                         # This implicitly clears pixels if the pattern has 0s.\n                         output_grid[out_r, out_c] = pattern_color\n\n\n    # 6. Return the modified grid (original pattern object is already preserved unless overwritten)\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2739,
    "candidates_token_count": 1927,
    "total_token_count": 4666,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 18.233156
}