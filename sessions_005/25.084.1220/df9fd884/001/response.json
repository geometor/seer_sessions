{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentify the background color (orange, 7). Identify the two static yellow (4) \nobjects and the single moving object (a color other than orange or yellow).\nDetermine the relative configuration of the two yellow objects (top-left/bottom-right \nor top-right/bottom-left). Based on this configuration, determine a movement \nvector (delta_row, delta_col): (3, -5) for top-left/bottom-right, and (4, 5) \nfor top-right/bottom-left. Create an output grid by copying the input. Erase \nthe moving object from its original position in the output grid by filling its \npixels with the background color. Calculate the new positions for the moving \nobject's pixels by adding the movement vector to their original coordinates. \nDraw the moving object at its new position in the output grid using its \noriginal color.\n\"\"\"\n\ndef find_objects(grid, color):\n    \"\"\"\n    Finds all connected objects of a specific color in the grid.\n    \n    Args:\n        grid (np.array): The input grid.\n        color (int): The target color.\n        \n    Returns:\n        list: A list of objects, where each object is a list of (row, col) coordinates.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n    objects = []\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == color and not visited[r, c]:\n                current_object = []\n                q = deque([(r, c)])\n                visited[r, c] = True\n                while q:\n                    row, col = q.popleft()\n                    current_object.append((row, col))\n                    # Check 8 neighbors (including diagonals)\n                    for dr in [-1, 0, 1]:\n                        for dc in [-1, 0, 1]:\n                            if dr == 0 and dc == 0:\n                                continue\n                            nr, nc = row + dr, col + dc\n                            if 0 <= nr < rows and 0 <= nc < cols and \\\n                               grid[nr, nc] == color and not visited[nr, nc]:\n                                visited[nr, nc] = True\n                                q.append((nr, nc))\n                if current_object:\n                    objects.append(current_object)\n    return objects\n\ndef get_object_centroid(obj):\n    \"\"\"\n    Calculates the centroid (average position) of an object.\n    \n    Args:\n        obj (list): A list of (row, col) coordinates representing the object.\n        \n    Returns:\n        tuple: (center_row, center_col)\n    \"\"\"\n    if not obj:\n        return (0, 0)\n    sum_r = sum(r for r, c in obj)\n    sum_c = sum(c for r, c in obj)\n    count = len(obj)\n    return (sum_r / count, sum_c / count)\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n    \"\"\"\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n    \n    # Define colors\n    background_color = 7\n    anchor_color = 4\n    \n    # Find the static anchor objects (yellow)\n    anchor_objects = find_objects(input_grid, anchor_color)\n    if len(anchor_objects) != 2:\n        # Should not happen based on examples, but handle defensively\n        return output_grid \n        \n    # Find the moving object and its color\n    moving_object = None\n    moving_object_color = -1\n    potential_colors = [c for c in range(10) if c != background_color and c != anchor_color]\n    \n    for color in potential_colors:\n        objects = find_objects(input_grid, color)\n        if len(objects) == 1:\n            moving_object = objects[0]\n            moving_object_color = color\n            break\n            \n    if moving_object is None:\n         # Should not happen based on examples\n        return output_grid\n\n    # Determine the configuration of anchor objects using centroids\n    centroid1 = get_object_centroid(anchor_objects[0])\n    centroid2 = get_object_centroid(anchor_objects[1])\n    \n    r1, c1 = centroid1\n    r2, c2 = centroid2\n    \n    movement_vector = (0, 0) # Default (should be overwritten)\n    \n    # Configuration 1: Top-left / Bottom-right (relative)\n    if (r1 < r2 and c1 < c2) or (r2 < r1 and c2 < c1):\n        movement_vector = (3, -5) # delta_row, delta_col\n    # Configuration 2: Top-right / Bottom-left (relative)\n    elif (r1 < r2 and c1 > c2) or (r2 < r1 and c2 > c1):\n         movement_vector = (4, 5) # delta_row, delta_col\n    else:\n        # Handle cases where centroids align perfectly vertically or horizontally\n        # Based on examples, the diagonal configurations are expected.\n        # If centroids are very close or aligned, default or error might be needed.\n        # For now, let's assume diagonal separation holds true.\n        # Fallback might be needed if test cases show otherwise.\n        pass # Use default (0,0) or raise error? Let's stick with default for now.\n\n\n    delta_row, delta_col = movement_vector\n\n    # Erase the moving object from its original position\n    for r, c in moving_object:\n        if 0 <= r < rows and 0 <= c < cols:\n             output_grid[r, c] = background_color\n\n    # Draw the moving object at its new position\n    for r, c in moving_object:\n        new_r, new_c = r + delta_row, c + delta_col\n        # Ensure the new position is within grid bounds\n        if 0 <= new_r < rows and 0 <= new_c < cols:\n            output_grid[new_r, new_c] = moving_object_color\n        else:\n            # Handle cases where object moves off-grid (optional, depends on task spec)\n            # For now, pixels moving off-grid are simply lost.\n            pass\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 4661,
            "end_index": 4996,
            "uri": "https://github.com/abhisheksol/competivity-programming",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3399,
    "candidates_token_count": 1541,
    "total_token_count": 4940,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.556894
}