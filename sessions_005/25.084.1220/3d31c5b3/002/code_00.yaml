task_structure:
  input_grid_size: 12x6
  output_grid_size: 3x6
  subgrids:
    count: 4
    size: 3x6
    arrangement: Stacked vertically
    colors_predominant:
      - Subgrid 1 (rows 0-2): Gray (5)
      - Subgrid 2 (rows 3-5): Yellow (4)
      - Subgrid 3 (rows 6-8): Red (2)
      - Subgrid 4 (rows 9-11): Azure (8)

transformation_rule:
  type: Pixel-wise combination of subgrids
  output_pixel_coords: (r, c) where r in [0, 2], c in [0, 5]
  input_pixel_stack:
    - p1: input[r, c]
    - p2: input[r+3, c]
    - p3: input[r+6, c]
    - p4: input[r+9, c]
  combination_logic:
    priority:
      - If p4 is Azure (8), the output is Azure (8).
      - Else, the output is the first non-white pixel found in the sequence [p1, p2, p3, p4].
    default: If all pixels in the stack [p1, p2, p3, p4] are white (0), the output is white (0).

colors:
  involved: [white(0), red(2), yellow(4), gray(5), azure(8)]
  priority_override: Azure (8) in p4 takes precedence over other colors in p1, p2, p3.

validation:
  rule_tested: "First non-white pixel top-down" -> Failed on Ex 1, 2, 3, 4, 6.
  failure_cause: Incorrectly selected Red (2) from p3 when Azure (8) was present in p4.
  revised_rule_hypothesis: Azure (8) from p4 overrides all pixels above it; otherwise, use first non-white from top-down [p1, p2, p3, p4].