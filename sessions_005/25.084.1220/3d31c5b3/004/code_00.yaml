task_structure:
  input_grid_size: 12x6
  output_grid_size: 3x6
  subdivision: Input grid is conceptually divided into four 3x6 subgrids stacked vertically.
  mapping: Each pixel (r, c) in the output grid corresponds to a stack of four pixels in the input grid: input[r, c], input[r+3, c], input[r+6, c], input[r+9, c].

objects:
  - type: pixel_stack
    description: A vertical stack of 4 pixels from the input grid corresponding to a single output pixel location.
    properties:
      p1: color of the pixel from the top subgrid.
      p2: color of the pixel from the second subgrid.
      p3: color of the pixel from the third subgrid.
      p4: color of the pixel from the bottom subgrid.
  - type: output_pixel
    description: A single pixel in the output grid.
    properties:
      color: determined by the transformation rule applied to the corresponding pixel_stack.

transformation_rule:
  - action: determine_visible_pixel
    description: Find the first non-white pixel scanning the stack from top to bottom (p1, p2, p3, p4).
    inputs: pixel_stack (p1, p2, p3, p4)
    outputs: first_non_white_pixel (P), its_color, its_layer_index (0-3)
    notes: If all pixels in the stack are white, the visible pixel is the bottom one (p4), which is white.
  - action: apply_override_rule
    description: Check for the specific Red/Azure interaction.
    condition: If the first_non_white_pixel (P) has color Red (2) AND the bottom pixel of the stack (p4) has color Azure (8).
    effect: The output_pixel color is set to Azure (8).
  - action: set_output_color
    description: If the override rule condition is not met, set the output_pixel color.
    effect: The output_pixel color is set to the color of the first_non_white_pixel (P).

constants:
  - white: 0
  - red: 2
  - azure: 8