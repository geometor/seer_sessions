{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Tuple, Dict\n\n\"\"\"\nProcesses a grid by identifying columns containing gray pixels (5).\nThese columns are ranked based first on the count of gray pixels (ascending)\nand secondarily by their column index (descending).\nThe gray pixels in each ranked column are then replaced with a specific color\nbased on their rank: Rank 1 -> Yellow (4), Rank 2 -> Blue (1),\nRank 3 -> Green (3), Rank 4 -> Red (2). All other pixels remain unchanged.\nAssumes exactly four such columns exist.\n\"\"\"\n\ndef _find_and_count_gray_columns(input_grid: np.ndarray) -> List[Dict]:\n    \"\"\"\n    Identifies columns containing gray pixels and counts them.\n\n    Args:\n        input_grid: A numpy array representing the input grid.\n\n    Returns:\n        A list of dictionaries, each containing 'index' (column index)\n        and 'count' (number of gray pixels) for relevant columns.\n    \"\"\"\n    gray_columns_info = []\n    height, width = input_grid.shape\n    gray_color = 5\n\n    for col_idx in range(width):\n        column = input_grid[:, col_idx]\n        gray_count = np.sum(column == gray_color)\n        if gray_count > 0:\n            gray_columns_info.append({'index': col_idx, 'count': gray_count})\n\n    return gray_columns_info\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid: A list of lists representing the input grid.\n\n    Returns:\n        A list of lists representing the transformed output grid.\n    \"\"\"\n    # Convert input to numpy array for easier processing\n    input_np = np.array(input_grid, dtype=int)\n    \n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_np)\n    height, width = input_np.shape\n    gray_color = 5\n\n    # 1. Identify columns with gray pixels and count them\n    gray_columns_data = _find_and_count_gray_columns(input_np)\n\n    # 2. Sort the columns: primary key = count (ascending), secondary key = index (descending)\n    #    The lambda function returns a tuple for sorting: (count, -index)\n    #    Using -index achieves descending order for the index tie-breaker.\n    sorted_columns = sorted(gray_columns_data, key=lambda x: (x['count'], -x['index']))\n\n    # 3. Define the rank-to-color mapping (using 0-based index from sorted list)\n    #    Rank 1 (index 0) -> Yellow (4)\n    #    Rank 2 (index 1) -> Blue (1)\n    #    Rank 3 (index 2) -> Green (3)\n    #    Rank 4 (index 3) -> Red (2)\n    #    We assume there will always be exactly 4 columns based on examples.\n    rank_to_color = {\n        0: 4, # Rank 1 -> Yellow\n        1: 1, # Rank 2 -> Blue\n        2: 3, # Rank 3 -> Green\n        3: 2  # Rank 4 -> Red\n    }\n\n    # 4. Iterate through sorted columns, determine replacement color, and update output grid\n    for rank_idx, col_info in enumerate(sorted_columns):\n        col_index = col_info['index']\n        replacement_color = rank_to_color.get(rank_idx)\n\n        if replacement_color is not None:\n            # Iterate through rows of this specific column\n            for row_idx in range(height):\n                # Check if the original pixel was gray\n                if input_np[row_idx, col_index] == gray_color:\n                    # Replace the gray pixel with the determined color in the output grid\n                    output_grid[row_idx, col_index] = replacement_color\n        # else: handle cases where rank_idx might be outside 0-3 if assumption is wrong (optional)\n\n    # Convert back to list of lists for the expected output format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2964,
    "candidates_token_count": 999,
    "total_token_count": 3963,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.517667
}