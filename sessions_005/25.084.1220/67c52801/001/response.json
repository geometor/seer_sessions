{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nSimulates gravity on a 2D grid of pixels. Non-white pixels fall downwards until they hit the bottom row, the bottom edge of the grid, or another non-white pixel. The bottom-most row of the grid acts as a stable floor and its pixels do not move. The process repeats until no more pixels can fall.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Applies gravity to non-white pixels in the input grid.\n\n    Args:\n        input_grid: A list of lists representing the input grid.\n\n    Returns:\n        A list of lists representing the output grid after gravity is applied.\n    \"\"\"\n    # Convert input grid to a NumPy array for easier manipulation\n    output_grid = np.array(input_grid, dtype=int)\n    height, width = output_grid.shape\n\n    # The bottom row (index height - 1) is the floor and does not move.\n    # We only need to simulate gravity for rows above the floor.\n\n    # Loop until no more pixels can move downwards in a full pass\n    while True:\n        moved = False  # Flag to track if any pixel moved in this iteration\n\n        # Iterate through the grid from bottom-up (excluding the floor row)\n        # Start from the second-to-last row (index height - 2) and go upwards\n        for r in range(height - 2, -1, -1):\n            # Iterate through each column\n            for c in range(width):\n                # Check if the current pixel is non-white (not 0)\n                if output_grid[r, c] != 0:\n                    # Check if the pixel directly below is white (0)\n                    if output_grid[r + 1, c] == 0:\n                        # Move the pixel down\n                        output_grid[r + 1, c] = output_grid[r, c]\n                        output_grid[r, c] = 0\n                        moved = True  # Mark that a move occurred\n\n        # If no pixels moved in this full pass, the grid is stable\n        if not moved:\n            break\n\n    # Convert the NumPy array back to a list of lists before returning\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3147,
    "candidates_token_count": 505,
    "total_token_count": 3652,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 6.75826
}