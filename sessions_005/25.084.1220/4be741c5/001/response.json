{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport math\n\n\"\"\"\nIdentify the dominant non-white colors in the input grid. \nCalculate the average position (centroid) for each color.\nDetermine if the primary arrangement of these colors is vertical or horizontal by comparing the spread (range) of the average row coordinates versus the average column coordinates.\nSort the colors based on their average coordinates according to the determined orientation (top-to-bottom for vertical, left-to-right for horizontal).\nConstruct the output grid as a single column (Nx1 for vertical) or a single row (1xN for horizontal) containing the sorted colors.\n\"\"\"\n\ndef get_unique_colors(grid):\n    \"\"\"Finds unique non-white colors in the grid.\"\"\"\n    unique_vals = np.unique(grid)\n    return [color for color in unique_vals if color != 0]\n\ndef calculate_centroids(grid, colors):\n    \"\"\"Calculates the centroid (average row, average column) for each color.\"\"\"\n    centroids = {}\n    for color in colors:\n        coords = np.argwhere(grid == color)\n        if coords.size > 0:\n            avg_row = np.mean(coords[:, 0])\n            avg_col = np.mean(coords[:, 1])\n            centroids[color] = (avg_row, avg_col)\n        else:\n             # Should not happen if colors are derived from the grid, but safe fallback\n             centroids[color] = (0, 0)\n    return centroids\n\ndef determine_orientation(centroids):\n    \"\"\"Determines if the layout is primarily vertical or horizontal based on centroid spread.\"\"\"\n    if len(centroids) <= 1:\n        # Default to vertical if only one color or no colors\n        return 'vertical'\n\n    rows = [centroid[0] for centroid in centroids.values()]\n    cols = [centroid[1] for centroid in centroids.values()]\n\n    row_range = np.ptp(rows) if len(rows) > 1 else 0 # Peak-to-peak (max - min)\n    col_range = np.ptp(cols) if len(cols) > 1 else 0\n\n    # If row spread is significantly larger than column spread, it's vertical.\n    # Use a small epsilon to handle cases where one range is zero or very small.\n    epsilon = 1e-6\n    if row_range > col_range + epsilon:\n        return 'vertical'\n    # Otherwise, it's horizontal (including cases where ranges are equal or col_range is larger).\n    else:\n        return 'horizontal'\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on the spatial arrangement of dominant colors.\n    \"\"\"\n    # Convert input to numpy array for easier processing\n    grid = np.array(input_grid, dtype=int)\n\n    # 1. Identify Unique Colors (excluding white/0)\n    unique_colors = get_unique_colors(grid)\n\n    # Handle edge cases: no non-white colors or only one\n    if not unique_colors:\n        # Or maybe return [[0]]? Task examples don't specify. Returning empty seems safer.\n        return [] \n    if len(unique_colors) == 1:\n        # Return a 1x1 grid with the single color\n        return [[unique_colors[0]]]\n\n    # 2. Calculate Centroids for each color\n    centroids = calculate_centroids(grid, unique_colors)\n\n    # 3. Determine Orientation (Vertical or Horizontal)\n    orientation = determine_orientation(centroids)\n\n    # 4. Sort Colors based on orientation\n    if orientation == 'vertical':\n        # Sort by average row index (top-to-bottom)\n        sorted_colors = sorted(centroids.keys(), key=lambda color: centroids[color][0])\n    else: # orientation == 'horizontal'\n        # Sort by average column index (left-to-right)\n        sorted_colors = sorted(centroids.keys(), key=lambda color: centroids[color][1])\n\n    # 5. Construct Output Grid\n    if orientation == 'vertical':\n        # Create an Nx1 column vector\n        output_grid_np = np.array(sorted_colors).reshape(-1, 1)\n    else: # orientation == 'horizontal'\n        # Create a 1xN row vector\n        output_grid_np = np.array(sorted_colors).reshape(1, -1)\n\n    # Convert back to list of lists for the required output format\n    output_grid = output_grid_np.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3455,
    "candidates_token_count": 1033,
    "total_token_count": 4488,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.839858
}