{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n# COLOR_MAP = {\n#     0: (238, 238, 238),  # white\n#     1: (30, 147, 255),  # blue\n#     2: (220, 50, 40),  # red\n#     3: (79, 204, 48),  # green\n#     4: (230, 200, 0),  # yellow\n#     5: (85, 85, 85),  # gray\n#     6: (229, 58, 163),  # magenta\n#     7: (230, 120, 20),  # orange\n#     8: (135, 216, 241),  # azure\n#     9: (146, 18, 49),  # maroon\n# }\nYELLOW = 4\nWHITE = 0\n\ndef find_source_pixel(grid):\n    \"\"\"\n    Finds the first non-white pixel in the grid.\n\n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        tuple: (row, col, color) of the source pixel, or (None, None, None) if not found.\n    \"\"\"\n    non_white_pixels = np.where(grid != WHITE)\n    if len(non_white_pixels[0]) > 0:\n        row_s = non_white_pixels[0][0]\n        col_s = non_white_pixels[1][0]\n        source_color = grid[row_s, col_s]\n        return row_s, col_s, source_color\n    return None, None, None\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on the position of a single non-white source pixel.\n    1. Identifies the source pixel (color, row_s, col_s).\n    2. Determines the parity (even/odd) of the source pixel's column (col_s).\n    3. Creates an output grid filled with white.\n    4. Fills the output grid with yellow (4) in rows 0 to row_s (inclusive)\n       at columns whose parity matches the source column parity.\n    5. Moves the source pixel one row down (to row_s + 1, col_s) in the output grid,\n       placing its original color there.\n    \"\"\"\n    # Convert input to numpy array for easier handling\n    input_np = np.array(input_grid, dtype=int)\n    height, width = input_np.shape\n\n    # 1. Identify Source\n    row_s, col_s, source_color = find_source_pixel(input_np)\n\n    # Handle case where no source pixel is found (though unlikely based on examples)\n    if row_s is None:\n        return input_grid # Or return an empty grid, depending on desired behavior\n\n    # 2. Determine Column Parity\n    source_col_parity = col_s % 2 # 0 for even, 1 for odd\n\n    # 3. Initialize Output grid with white background\n    output_grid = np.full((height, width), WHITE, dtype=int)\n\n    # 4. Generate Yellow Pattern\n    for r in range(row_s + 1): # Iterate rows from 0 up to and including row_s\n        for c in range(width): # Iterate through all columns\n            # Check if the current column's parity matches the source column's parity\n            if c % 2 == source_col_parity:\n                output_grid[r, c] = YELLOW\n\n    # 5. Place Moved Source Pixel\n    new_row_s = row_s + 1\n    # Check if the new row is within the grid bounds\n    if new_row_s < height:\n        output_grid[new_row_s, col_s] = source_color\n\n    # Return the output grid, converting back to list of lists if necessary\n    # Assuming numpy array output is acceptable based on common ARC practices\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3006,
    "candidates_token_count": 973,
    "total_token_count": 3979,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.97565
}