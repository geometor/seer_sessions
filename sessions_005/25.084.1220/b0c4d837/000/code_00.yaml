- task: Relative Position Encoding
  observations:
    - Input grids contain three main components:
        - background: white pixels (0)
        - frame: gray pixels (5) forming an enclosure
        - content: azure pixels (8) located inside the frame
    - Output grids are always 3x3, containing only azure (8) and white (0) pixels.
    - The transformation involves locating both the frame and the content.
  definitions:
    - bounding_box(color): The smallest rectangle enclosing all pixels of a given 'color'. Defined by its top-left (min_row, min_col) and bottom-right (max_row, max_col) coordinates.
    - gray_bb: bounding_box(gray)
    - azure_bb: bounding_box(azure)
  relationship:
    - If azure pixels exist:
        - Calculate the relative top-left corner offset:
            - rel_row = azure_bb.min_row - gray_bb.min_row
            - rel_col = azure_bb.min_col - gray_bb.min_col
        - This offset pair (rel_row, rel_col) maps to a specific 3x3 output grid pattern based on the training examples:
            - (1, 1) -> [[8, 0, 0], [0, 0, 0], [0, 0, 0]] (from train_4)
            - (2, 1) -> [[8, 8, 0], [0, 0, 0], [0, 0, 0]] (from train_1, train_6)
            - (3, 1) -> [[8, 8, 8], [0, 0, 0], [0, 0, 0]] (from train_3, train_5)
            - (4, 1) -> [[8, 8, 8], [0, 0, 8], [0, 0, 0]] (from train_2)
    - If no azure pixels exist in the input:
        - The output is assumed to be a 3x3 grid of all white (0) pixels (based on the need for a default case, though not explicitly shown).
  action:
    - Determine the (rel_row, rel_col) offset.
    - Produce the corresponding 3x3 output grid based on the observed mapping.
