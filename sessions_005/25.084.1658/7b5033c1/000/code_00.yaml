task_description: Extract pixels from foreground objects and list their colors vertically, ordered by object position.

definitions:
  background_color: The color that occupies the majority of pixels in the input grid.
  foreground_pixel: Any pixel whose color is not the background_color.
  object: A contiguous group of one or more foreground_pixels of the same color. Contiguity includes adjacent (up, down, left, right) pixels.

processing_steps:
  - step: Identify the background_color.
    details: Find the color code with the highest frequency in the input grid.
  - step: Identify all foreground_pixels.
    details: Locate all pixels not matching the background_color.
  - step: Group foreground_pixels into objects.
    details: Use a connected components algorithm (like flood fill or BFS/DFS) on foreground_pixels of the same color to identify distinct objects.
  - step: Determine object properties.
    properties:
      - color: The color of the pixels in the object.
      - pixel_count: The number of pixels in the object.
      - top_left_pixel: The pixel with the minimum row index, and among those, the minimum column index.
  - step: Sort objects.
    criteria: Primarily by the row index of top_left_pixel (ascending), secondarily by the column index of top_left_pixel (ascending).
  - step: Construct the output grid.
    details: Create a new grid with 1 column and N rows, where N is the total number of foreground_pixels across all objects. Populate the column by iterating through the sorted objects and appending the object's color repeated 'pixel_count' times for each object.

example_1_analysis:
  background_color: 8 (azure)
  objects:
    - { color: 1, pixel_count: 5, top_left_pixel: (1, 6) } # Blue
    - { color: 3, pixel_count: 4, top_left_pixel: (5, 5) } # Green
    - { color: 2, pixel_count: 5, top_left_pixel: (7, 7) } # Red
    - { color: 4, pixel_count: 5, top_left_pixel: (10, 6) } # Yellow
    - { color: 6, pixel_count: 3, top_left_pixel: (12, 6) } # Magenta
  sorted_order: [Blue, Green, Red, Yellow, Magenta] # Based on top_left_pixel row, then col
  output: Column vector containing [5x(1), 4x(3), 5x(2), 5x(4), 3x(6)]

example_2_analysis:
  background_color: 1 (blue)
  objects:
    - { color: 8, pixel_count: 7, top_left_pixel: (1, 1) } # Azure
    - { color: 2, pixel_count: 8, top_left_pixel: (5, 4) } # Red
    - { color: 3, pixel_count: 9, top_left_pixel: (10, 7) } # Green
  sorted_order: [Azure, Red, Green] # Based on top_left_pixel row, then col
  output: Column vector containing [7x(8), 8x(2), 9x(3)]