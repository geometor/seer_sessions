{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n# Color constants\nAZURE = 8\nWHITE = 0\nORANGE = 7 # Note: ORANGE was in the previous code but seems irrelevant now. Keeping for potential future debugging/comparison if needed.\n\n\ndef _find_horizontal_azure_pairs(input_array):\n    \"\"\"Finds all horizontally adjacent pairs of Azure pixels.\"\"\"\n    pairs = []\n    H, W = input_array.shape\n    for r in range(H):\n        for c in range(W - 1): # Iterate up to W-2 to check c+1\n            if input_array[r, c] == AZURE and input_array[r, c+1] == AZURE:\n                pairs.append(((r, c), (r, c+1)))\n    return pairs\n\ndef _find_vertical_azure_pairs(input_array):\n    \"\"\"Finds all vertically adjacent pairs of Azure pixels.\"\"\"\n    pairs = []\n    H, W = input_array.shape\n    for r in range(H - 1): # Iterate up to H-2 to check r+1\n        for c in range(W):\n            if input_array[r, c] == AZURE and input_array[r+1, c] == AZURE:\n                pairs.append(((r, c), (r+1, c)))\n    return pairs\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on adjacent pairs of Azure (8) pixels.\n\n    1. Finds all horizontally adjacent Azure pairs ((r, c), (r, c+1)).\n       - For each pair, places two White (0) markers at (r, W-2) and (r, W-1), if W >= 2.\n    2. Finds all vertically adjacent Azure pairs ((r, c), (r+1, c)).\n       - Stores the coordinates (r, c) of the top pixel of each vertical pair.\n       - For each pair:\n         - Places two White (0) markers at (H-2, c) and (H-1, c), if H >= 2.\n         - Copies Azure pixels from row 'r' to row 'r+1', *unless* the Azure pixel in row 'r'\n           is itself the top part of *any* vertical pair.\n    3. The original Azure pairs remain Azure.\n    4. Pixels not involved in marker placement or copying remain unchanged.\n    \"\"\"\n    # Convert input list of lists to a numpy array\n    input_array = np.array(input_grid, dtype=int)\n    \n    # Initialize output grid as a copy of the input\n    output_array = np.copy(input_array)\n    \n    # Get grid dimensions\n    H, W = input_array.shape\n\n    # --- Process Horizontal Pairs ---\n    horizontal_pairs = _find_horizontal_azure_pairs(input_array)\n    for pair in horizontal_pairs:\n        r, _ = pair[0] # Get the row index from the first pixel of the pair\n        # Place White markers at the right edge of the row\n        if W >= 2:\n            output_array[r, W-2] = WHITE\n            output_array[r, W-1] = WHITE\n        # Note: If W=1, a horizontal pair cannot exist, so no special case needed.\n\n\n    # --- Process Vertical Pairs ---\n    vertical_pairs = _find_vertical_azure_pairs(input_array)\n\n    # Create a set of coordinates for the top pixels of all vertical pairs\n    # This is used to prevent copying these specific pixels downwards\n    top_vertical_pair_pixels = set(pair[0] for pair in vertical_pairs)\n\n    for pair in vertical_pairs:\n        r, c = pair[0] # Top pixel coordinates (r, c)\n        r_below, _ = pair[1] # Bottom pixel coordinates (r+1, c) - used implicitly in copy logic\n\n        # Place White markers at the bottom edge of the column\n        if H >= 2:\n            output_array[H-2, c] = WHITE\n            output_array[H-1, c] = WHITE\n        # Note: If H=1, a vertical pair cannot exist.\n\n        # Copy qualifying Azure pixels from row 'r' down to row 'r_below' (r+1)\n        # Iterate through all columns in the *input* row 'r'\n        for col_idx in range(W):\n            # Check if the pixel in the input row 'r' is Azure\n            if input_array[r, col_idx] == AZURE:\n                # Check if this Azure pixel is NOT the top of any vertical pair\n                if (r, col_idx) not in top_vertical_pair_pixels:\n                    # Copy the Azure pixel down to the next row in the output\n                     # Ensure r_below (which is r+1) is within grid bounds\n                    if r_below < H:\n                         output_array[r_below, col_idx] = AZURE\n\n    # Convert the final numpy array back to a list of lists\n    output_grid = output_array.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 9171,
    "candidates_token_count": 1168,
    "total_token_count": 10339,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.841825
}