{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on the presence of vertical pairs of Azure (8) pixels.\n\n    1. Finds all vertically adjacent pairs of Azure (8) pixels.\n    2. For each pair found at (r, c) and (r+1, c):\n        a. Changes both pixels in the pair to Orange (7) in the output grid.\n        b. Modifies two other pixels to White (0) based on the grid's aspect ratio:\n            - If height >= width (Tall/Square): Changes pixels at (r, W-2) and (r, W-1) to White (0).\n            - If width > height (Wide): Changes pixels at (H-2, c) and (H-1, c) to White (0).\n        c. If width > height (Wide): Copies Azure (8) pixels from row 'r' of the *input* grid\n           (excluding the one at column 'c') to row 'r+1' in the *output* grid.\n    3. Pixels not involved in these transformations remain unchanged.\n    \"\"\"\n\n    # Color constants\n    AZURE = 8\n    ORANGE = 7\n    WHITE = 0\n\n    # Convert input list of lists to a numpy array for easier manipulation\n    input_array = np.array(input_grid, dtype=int)\n    \n    # Initialize output grid as a copy of the input\n    output_array = np.copy(input_array)\n    \n    # Get grid dimensions\n    H, W = input_array.shape\n\n    # --- Step 1: Find all vertical Azure pairs ---\n    pair_coords = []\n    # Iterate up to H-2 to avoid index out of bounds when checking r+1\n    for r in range(H - 1):\n        for c in range(W):\n            if input_array[r, c] == AZURE and input_array[r+1, c] == AZURE:\n                pair_coords.append((r, c)) # Store the coordinate of the upper pixel\n\n    # --- Step 2: Process each found pair ---\n    for r, c in pair_coords:\n        # Step 2a: Change the pair pixels to Orange\n        output_array[r, c] = ORANGE\n        output_array[r+1, c] = ORANGE\n\n        # Step 2b: Place White markers based on aspect ratio\n        if H >= W: # Tall or Square grid\n            # Check boundary conditions for placing white pixels\n            if W >= 2:\n                 output_array[r, W-2] = WHITE\n                 output_array[r, W-1] = WHITE\n            elif W == 1: # Only one column, place white marker in the only available spot\n                 output_array[r, W-1] = WHITE\n                 # No second marker possible\n        else: # W > H (Wide grid)\n             # Check boundary conditions for placing white pixels\n            if H >= 2:\n                output_array[H-2, c] = WHITE\n                output_array[H-1, c] = WHITE\n            elif H == 1: # Only one row, place white marker in the only available spot\n                output_array[H-1, c] = WHITE\n                # No second marker possible\n\n        # Step 2c: Copy Azure pixels in wide grids (W > H)\n        if W > H:\n             # Ensure we don't go out of bounds for r+1\n            if r + 1 < H:\n                # Iterate through the original row 'r' of the input array\n                for col_idx in range(W):\n                    # Check if the pixel in the input was Azure and it's not the column of the pair itself\n                    if input_array[r, col_idx] == AZURE and col_idx != c:\n                        # Copy the Azure pixel down one row in the output\n                        output_array[r+1, col_idx] = AZURE\n\n    # Convert the final numpy array back to a list of lists\n    output_grid = output_array.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3896,
    "candidates_token_count": 942,
    "total_token_count": 4838,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.305929
}