task_description: Draw horizontal alternating patterns extending rightwards from non-white pixels found in the input grid.
grid_properties:
  - The output grid has the same dimensions as the input grid.
  - The background color is white (0). Pixels not affected by a pattern retain their original color from the input.
objects:
  - type: pixel
    role: trigger_pixel
    source: input_grid
    condition: color is not white (0)
    properties:
      - coordinate: (row, column)
      - color: original_color (1-9)
  - type: pixel
    role: pattern_pixel
    target: output_grid
    properties:
      - coordinate: (row, column_new) where row is the trigger_pixel row and column_new > trigger_pixel column.
      - color: Determined by an alternating pattern based on distance from the trigger_pixel.
pattern_details:
  - color_1: gray (5)
  - color_2: original_color (from trigger_pixel)
  - sequence: Starts right of the trigger pixel. Alternates color_1, color_2, color_1, color_2, ... extending to the grid boundary.
  - rule: Pixel at (row, column_new) gets gray (5) if (column_new - trigger_pixel_column) is odd; gets original_color if (column_new - trigger_pixel_column) is even.
actions:
  - name: find_triggers
    input: input_grid
    output: list of trigger_pixels (coordinates and colors).
    description: Iterate through the input_grid. Identify all pixels where color is not 0.
  - name: draw_pattern
    input: output_grid, trigger_pixel (row, column, original_color)
    output: modified output_grid
    description: |
      For a given trigger_pixel:
      Iterate column_new from trigger_pixel.column + 1 to the grid width.
      Calculate distance = column_new - trigger_pixel.column.
      If distance is odd, set output_grid[trigger_pixel.row, column_new] = 5 (gray).
      If distance is even, set output_grid[trigger_pixel.row, column_new] = original_color.
process_flow:
  - Initialize output_grid as a copy of input_grid.
  - Execute find_triggers on input_grid to get a list of all trigger_pixels.
  - For each trigger_pixel in the list:
      Execute draw_pattern, updating the output_grid.
  - Return the final output_grid.