"""
Transforms the input grid based on the following rules:
1. Initialize an output grid of the same size as the input, filled with white (0).
2. Identify all non-white pixels in the input grid. Store their locations (r, c) and colors k. Let S be the set of these source pixels.
3. Create a temporary layer (e.g., a dictionary mapping coordinates to colors) to store the pixels generated by diagonal lines.
4. Iterate through the source pixels (r, c) in S, processing them in row-major order (top to bottom, left to right).
5. For each source pixel (r, c) with color k, check if it is not on the bottom edge (r < height - 1) and not on the right edge (c < width - 1).
6. If the condition in step 5 is met, generate a sequence of points (curr_r, curr_c) starting from (r+1, c+1) and moving diagonally down-right (incrementing both r and c) until either curr_r reaches the grid height or curr_c reaches the grid width.
7. For each point (curr_r, curr_c) generated in step 6, record its color k in the temporary layer. If a point is generated multiple times (by lines from different source pixels), the color from the source pixel processed later (due to row-major order) will overwrite previous colors for that point in the temporary layer.
8. Populate the output grid: First, copy all pixels from the temporary layer (the generated lines) into the output grid.
9. Finally, iterate through the original source pixels S again and place their colors k at their original locations (r, c) in the output grid, overwriting any line pixels that might be at those locations.
"""

import numpy as np

def transform(input_grid):
    """
    Applies the transformation rule to the input grid.

    Args:
        input_grid (list of lists): The input grid.

    Returns:
        list of lists: The transformed grid.
    """
    input_np = np.array(input_grid, dtype=int)
    height, width = input_np.shape
    
    # Initialize output grid with white (0)
    output_grid = np.zeros_like(input_np)
    
    # 1. Identify source pixels
    source_pixels = []
    for r in range(height):
        for c in range(width):
            color = input_np[r, c]
            if color != 0:
                source_pixels.append(((r, c), color))

    # 2. Create a layer for line pixels (dictionary for easy overwrite)
    line_pixels = {}

    # 3. Iterate through source pixels (row-major order is implicit)
    #    and generate lines
    for (r, c), color in source_pixels:
        # 4. Check edge condition
        if r < height - 1 and c < width - 1:
            # 5. Generate line points
            curr_r, curr_c = r + 1, c + 1
            while curr_r < height and curr_c < width:
                # 6. Record line pixel color, overwriting if necessary
                line_pixels[(curr_r, curr_c)] = color
                curr_r += 1
                curr_c += 1

    # 7. Populate output grid with line pixels
    for (r, c), color in line_pixels.items():
        output_grid[r, c] = color
        
    # 8. Populate output grid with original source pixels (overwriting lines)
    for (r, c), color in source_pixels:
        output_grid[r, c] = color

    return output_grid.tolist()