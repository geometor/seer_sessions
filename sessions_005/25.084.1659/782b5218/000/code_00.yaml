task_description: "Fill areas based on a red boundary, preserving the boundary itself."
elements:
  - type: grid
    properties: 
      - input_grid: 2D array of integers (colors)
      - output_grid: 2D array of integers (colors), same dimensions as input
  - type: color
    properties:
      - white: 0, used as default background and fill color above the boundary
      - red: 2, forms the boundary, is preserved in the output
      - fill_color: variable (1, 5, or 8 in examples), determined from input, used to fill below the boundary
  - type: boundary
    properties:
      - defined_by: pixels with red color (2)
      - function: separates grid vertically column by column
      - key_feature: the lowest red pixel in each column determines the separation point for that column
  - type: determination_rule
    properties:
      - name: fill_color_selection
      - rule: "Identify the most frequent color in the input grid, excluding white (0) and red (2)."
actions:
  - name: process_grid
    steps:
      - "Determine the fill_color based on the input grid frequencies."
      - "Initialize the output grid with white (0)."
      - "Iterate through each column of the input grid."
      - "Find the lowest row index containing a red (2) pixel in the current column."
      - "If a red pixel exists in the column:"
        - "Fill the output grid column from that lowest red row index to the bottom with the fill_color."
      - "Copy all red (2) pixels from the input grid to their original positions in the output grid."
relationships:
  - "The output grid's content depends on the position of red (2) pixels in the input grid."
  - "Pixels in the output grid above the lowest red pixel in a column become white (0)."
  - "Pixels in the output grid at or below the lowest red pixel in a column become the fill_color, unless they correspond to an input red pixel."
  - "Columns without any red pixels in the input become entirely white (0) in the output."