task_description: Upscale each pixel of the input grid into a larger block, applying a specific pattern based on the original pixel's color.
grid_properties:
  - input_grid: 2D array of integers (colors 0-9).
  - output_grid: 2D array of integers (colors 0-9), larger than the input grid.
  - background_color: white (0).
objects:
  - type: pixel
    properties:
      - color: integer 0-9
      - position: (row, column) in the grid
  - type: block
    properties:
      - size: S x S, where S is the input grid height
      - position: top-left corner corresponds to the scaled position of an input pixel
      - pattern: derived from the input pixel color
transformation_rule:
  - name: Scaling
    details: Each input pixel is mapped to an S x S block in the output grid.
    parameters:
      - scaling_factor_S: Equal to the height of the input grid.
      - output_height: input_height * S
      - output_width: input_width * S
  - name: Pattern Application
    input: Input pixel color (inp_color) at position (r, c)
    output: S x S block in the output grid starting at (r*S, c*S)
    steps:
      - Initialize the S x S output block with the background color (white, 0).
      - Determine the pattern_color:
          If inp_color is azure (8), pattern_color is white (0).
          Otherwise, pattern_color is inp_color.
      - Calculate the center index: center_idx = S // 2.
      - Apply pattern:
          Fill row center_idx of the block with pattern_color.
          Fill column center_idx of the block with pattern_color.