task_description: Upscale the input grid by a factor of 3x3, applying specific patterns based on the input pixel color.

input_grid:
  properties:
    - height: H
    - width: W
    - pixels: Each pixel has a color value (0-9).

output_grid:
  properties:
    - height: H * 3
    - width: W * 3
    - pixels: Derived from input pixels.

transformation:
  - type: scaling
    factor: 3x3 (output dimensions are 3 times input dimensions)
  - type: pixel_mapping
    description: Each pixel (r, c) in the input grid maps to a 3x3 block in the output grid, starting at (r*3, c*3).
    rules:
      - condition: Input pixel color is white (0)
        action: Fill the corresponding 3x3 output block with white (0).
      - condition: Input pixel color is azure (8)
        action: Fill the corresponding 3x3 output block with white (0).
      - condition: Input pixel color is non-white and not azure (1, 2, 3, 4, 5, 6, 7, 9)
        action:
          - Fill the corresponding 3x3 output block with white (0) initially.
          - Set the center pixel of the 3x3 block to the input pixel's color.
          - Set the pixels directly above, below, left, and right of the center pixel (within the 3x3 block) to the input pixel's color, forming a plus sign (+).

objects:
  - type: pixel
    properties:
      - color
      - position (row, column)
  - type: pattern
    properties:
      - shape: plus_sign (+)
      - size: 3x3
      - color: derived from input pixel
  - type: block
    properties:
      - size: 3x3
      - color: white (0)

actions:
  - name: scale_grid
    input: input_grid
    output: output_grid (initialized, dimensions 3x input)
  - name: map_pixel_to_block
    input: input_pixel (color, position)
    output: 3x3 block in output_grid
  - name: apply_pattern
    input: color, block_position
    output: modified output_grid (pixels set according to pattern)