task_type: grid_transformation
transformation: scaling

elements:
  - type: input_grid
    properties:
      - grid_data: 2D array of color values (pixels)
      - height: number of rows
      - width: number of columns
      - unique_colors: set of distinct color values present in the grid
      - num_unique_colors: count of unique color values

  - type: output_grid
    properties:
      - grid_data: 2D array of color values (pixels)
      - height: calculated based on input height and scaling factor
      - width: calculated based on input width and scaling factor

relationships_and_actions:
  - action: determine_scaling_factor
    inputs: input_grid.unique_colors
    outputs: scaling_factor
    logic: scaling_factor = num_unique_colors

  - action: construct_output_grid
    inputs:
      - input_grid
      - scaling_factor
    outputs: output_grid
    logic: |
      If scaling_factor == 1:
        output_grid = input_grid
      Else:
        Initialize output_grid with dimensions (input_height * scaling_factor) x (input_width * scaling_factor).
        For each pixel at (row, col) with color C in the input_grid:
          Fill the corresponding block of size scaling_factor x scaling_factor in the output_grid,
          starting at (row * scaling_factor, col * scaling_factor), with color C.

derived_properties:
  - property: scaling_factor
    calculation: Count the number of unique color values in the input_grid.
  - property: output_grid.height
    calculation: input_grid.height * scaling_factor
  - property: output_grid.width
    calculation: input_grid.width * scaling_factor