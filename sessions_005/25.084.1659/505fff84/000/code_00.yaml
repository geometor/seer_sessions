task_elements:
  - item: input_grid
    properties:
      - type: 2D array of integers (pixels)
      - colors: [white(0), blue(1), red(2), green(3), yellow(4), gray(5), magenta(6), orange(7), azure(8), maroon(9)] present
      - contains_markers: true
  - item: output_grid
    properties:
      - type: 2D array of integers (pixels)
      - colors: primarily white(0) and red(2) observed
      - derived_from: input_grid
  - item: blue_pixel
    properties:
      - color_value: 1
      - role: start/end marker for horizontal segment extraction (in conjunction with azure)
      - location: within input_grid rows
  - item: azure_pixel
    properties:
      - color_value: 8
      - role: start/end marker for horizontal segment extraction (in conjunction with blue)
      - location: within input_grid rows
  - item: row_segment
    properties:
      - type: 1D array (horizontal slice) of pixels
      - location: portion of an input_grid row
      - definition: pixels located strictly between a blue pixel and an azure pixel within the same row
      - content: pixels from input_grid (excluding the blue/azure markers)
relationships:
  - type: defines
    subject: blue_pixel
    object: row_segment boundaries (horizontal)
    condition: must be in the same row as an azure_pixel
  - type: defines
    subject: azure_pixel
    object: row_segment boundaries (horizontal)
    condition: must be in the same row as a blue_pixel
  - type: composed_of
    subject: output_grid
    object: row_segments
    condition: segments are stacked vertically in the order of their original rows
actions:
  - action: find_markers
    actor: system
    input: input_grid row
    output: coordinates of blue (1) and azure (8) pixels, if both exist in the row
  - action: extract_segment
    actor: system
    input: input_grid row, blue_pixel_column, azure_pixel_column
    output: 1D array of pixels between min(blue_col, azure_col)+1 and max(blue_col, azure_col)
    condition: blue and azure pixels are in the same row
  - action: assemble_output
    actor: system
    input: list of extracted row_segments (ordered by original row index)
    output: output_grid