{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nFill horizontally between the extreme points of each non-white color within each row.\n\n1.  Create a copy of the input grid to serve as the initial output grid.\n2.  Identify all unique colors present in the input grid, excluding white (color 0).\n3.  For each unique non-white color found:\n    a.  Iterate through each row index of the grid (from top to bottom).\n    b.  Scan the current row in the input grid to find all column indices where the current non-white color exists.\n    c.  If one or more pixels of the current color are found in this row:\n        i.  Determine the minimum (leftmost) column index (`min_col`) and the maximum (rightmost) column index (`max_col`) among these pixels.\n        ii. Iterate through the columns from `min_col` to `max_col` (inclusive) in the current row of the *output* grid.\n        iii. Set the color of each pixel within this range (`min_col` to `max_col`) in the current row of the *output* grid to the current non-white color.\n4.  After processing all unique non-white colors for all rows, return the final output grid.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Fills horizontally between the leftmost and rightmost occurrences of each \n    non-white color within each row of the input grid.\n    \"\"\"\n    # Convert input_grid to a NumPy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    \n    # 1. Create a copy of the input grid to serve as the initial output grid.\n    output_grid = np.copy(input_np)\n    \n    # Get grid dimensions\n    height, width = input_np.shape\n    \n    # 2. Identify all unique colors present in the input grid, excluding white (color 0).\n    unique_colors = np.unique(input_np)\n    non_white_colors = unique_colors[unique_colors != 0]\n    \n    # 3. For each unique non-white color found:\n    for color in non_white_colors:\n        # a. Iterate through each row index of the grid.\n        for r in range(height):\n            # b. Scan the current row in the input grid to find all column indices where the current non-white color exists.\n            row = input_np[r, :]\n            cols_with_color = np.where(row == color)[0]\n            \n            # c. If one or more pixels of the current color are found in this row:\n            if cols_with_color.size > 0:\n                # i. Determine the minimum (min_col) and maximum (max_col) column index.\n                min_col = np.min(cols_with_color)\n                max_col = np.max(cols_with_color)\n                \n                # ii & iii. Set the color of each pixel within this range in the output grid.\n                # Note: NumPy slicing is inclusive of the start index and exclusive of the end index,\n                # so we use max_col + 1 to include the rightmost column.\n                output_grid[r, min_col:max_col + 1] = color\n                \n    # 4. Return the final output grid.\n    # Convert back to list of lists if necessary for the environment, otherwise return the numpy array\n    return output_grid.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3211,
    "candidates_token_count": 798,
    "total_token_count": 4009,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 8.386359
}