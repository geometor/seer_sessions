{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nThe transformation identifies a region enclosed by gray (5) pixels. \nWithin this enclosed region, it finds the two most frequent non-gray, non-white colors present.\nIt then swaps all occurrences of the first color with the second color, and vice-versa, only within that enclosed region. \nPixels outside the region, the gray boundary pixels themselves, and any white (0) pixels within the region remain unchanged.\n\nThe enclosed region is identified by performing a flood fill (BFS) starting from all non-gray pixels on the border of the grid. \nAny non-gray pixel not reached by this flood fill is considered part of the enclosed \"inside\" region.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on the swapping rule within a gray boundary.\n\n    Args:\n        input_grid (list of list of int): The input grid.\n\n    Returns:\n        list of list of int: The transformed grid.\n    \"\"\"\n    # Convert input to numpy array for easier indexing and manipulation\n    input_array = np.array(input_grid, dtype=int)\n    # Initialize output array as a copy of the input\n    output_array = input_array.copy()\n    H, W = input_array.shape\n    gray_color = 5\n    white_color = 0\n\n    # --- 1. Identify \"outside\" cells using flood fill from borders ---\n    # visited array marks cells reachable from the border without crossing gray\n    visited = np.zeros_like(input_array, dtype=bool)\n    q = deque()\n\n    # Add all non-gray border cells to the initial queue for BFS\n    for c in range(W):\n        # Top border\n        if input_array[0, c] != gray_color and not visited[0, c]:\n            q.append((0, c))\n            visited[0, c] = True\n        # Bottom border\n        if input_array[H - 1, c] != gray_color and not visited[H - 1, c]:\n            q.append((H - 1, c))\n            visited[H - 1, c] = True\n    for r in range(1, H - 1): # Avoid double-checking corners\n        # Left border\n        if input_array[r, 0] != gray_color and not visited[r, 0]:\n            q.append((r, 0))\n            visited[r, 0] = True\n        # Right border\n        if input_array[r, W - 1] != gray_color and not visited[r, W - 1]:\n            q.append((r, W - 1))\n            visited[r, W - 1] = True\n\n    # Perform BFS flood fill to mark all \"outside\" cells\n    while q:\n        r, c = q.popleft()\n        \n        # Explore neighbors (4-directional connectivity)\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n            \n            # Check if the neighbor is within bounds\n            if 0 <= nr < H and 0 <= nc < W:\n                # If neighbor is not gray and hasn't been visited, mark and add to queue\n                if input_array[nr, nc] != gray_color and not visited[nr, nc]:\n                    visited[nr, nc] = True\n                    q.append((nr, nc))\n\n    # --- 2. Identify \"inside\" pixels and collect their colors ---\n    inside_pixels = []\n    present_colors = set()\n    for r in range(H):\n        for c in range(W):\n            # A pixel is \"inside\" if it's not gray and was not reached by the flood fill\n            if input_array[r, c] != gray_color and not visited[r, c]:\n                inside_pixels.append((r, c))\n                present_colors.add(input_array[r, c])\n\n    # --- 3. Determine the two colors to swap ---\n    # Filter out white and gray colors from the set of colors present inside\n    swap_candidates = {color for color in present_colors if color != white_color and color != gray_color}\n\n    # --- 4. Perform the swap if exactly two candidate colors were found ---\n    if len(swap_candidates) == 2:\n        # Assign the two colors to be swapped\n        color_a, color_b = list(swap_candidates)\n        \n        # Iterate through the identified \"inside\" pixels\n        for r, c in inside_pixels:\n            # Swap color_a with color_b\n            if input_array[r, c] == color_a:\n                output_array[r, c] = color_b\n            # Swap color_b with color_a\n            elif input_array[r, c] == color_b:\n                output_array[r, c] = color_a\n            # White pixels and any other unexpected colors inside remain unchanged\n\n    # Convert the final numpy array back to a list of lists for the expected output format\n    return output_array.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2306,
    "candidates_token_count": 1192,
    "total_token_count": 3498,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 42.506637
}