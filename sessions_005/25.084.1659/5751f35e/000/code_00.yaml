Task: Fill white pixels based on nearest non-white neighbors.

Input_Features:
  - Grid: A 2D array of pixels with integer values 0-9.
  - Pixels:
      - Non-white_Pixels: Pixels with values 1-9. Act as seeds or boundaries. Their positions and colors are preserved in the output.
      - White_Pixels: Pixels with value 0. These are the target pixels to be transformed.
  - Geometry: Manhattan distance between pixels is relevant.

Output_Features:
  - Grid: Same dimensions as the input grid.
  - Pixels:
      - Original non-white pixels remain unchanged.
      - Original white pixels are potentially recolored based on transformation rules.

Transformation_Rules:
  - Identify all white pixels (value 0) in the input grid.
  - For each white pixel (r, c):
      - Find all non-white pixels (nr, nc) in the input grid.
      - Calculate the Manhattan distance: d = |r - nr| + |c - nc|.
      - Determine the minimum distance (min_d) to any non-white pixel.
      - Identify the set 'N' of all non-white pixels (and their colors) located at min_d.
      - Apply coloring rule:
          - If 'N' contains only one pixel, color (r, c) with that pixel's color.
          - If 'N' contains multiple pixels (tie in distance):
              - Let 'Tied_Colors' be the set of unique colors of pixels in 'N'.
              - If green (3) is in 'Tied_Colors', color (r, c) green (3).
              - Else (green is not involved in the tie), color (r, c) with the color from 'Tied_Colors' that has the lowest numerical index value.
                # Note: This rule works for train_2 and most of train_1, but fails for pixel (2, 6) in train_1, suggesting a potential refinement or alternative rule might be needed for complete accuracy.

Relationships:
  - Adjacency: The transformation depends on the proximity (distance) of white pixels to non-white pixels.
  - Color_Priority (Tie-breaking): Green (3) has the highest priority in ties. Among other colors, the one with the lower index value has priority.