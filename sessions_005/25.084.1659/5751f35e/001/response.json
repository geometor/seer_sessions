{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nFill white pixels (0) based on the nearest non-white pixel(s) using Manhattan distance.\n\nRule:\n1. For each white pixel in the input grid:\n2. Find all non-white pixels in the input grid.\n3. Calculate the Manhattan distance from the white pixel to all non-white pixels.\n4. Identify the minimum distance found.\n5. Collect all non-white pixels that are at this minimum distance.\n6. If only one non-white pixel is at the minimum distance, the white pixel takes the color of that non-white pixel.\n7. If multiple non-white pixels are tied for the minimum distance:\n    a. Check if the color green (3) is among the colors of the tied pixels. If yes, the white pixel takes the color green (3).\n    b. If green (3) is not among the tied colors, the white pixel takes the color with the lowest numerical index among the tied colors.\n8. Non-white pixels in the input grid retain their original color and position in the output grid.\n\"\"\"\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the nearest non-white pixel filling rule with tie-breaking to the input grid.\n\n    Args:\n        input_grid: A 2D numpy array representing the input grid.\n\n    Returns:\n        A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n    height, width = input_grid.shape\n\n    # Find coordinates and colors of non-white pixels\n    non_white_pixels = []\n    for r in range(height):\n        for c in range(width):\n            if input_grid[r, c] != 0:\n                non_white_pixels.append(((r, c), input_grid[r, c]))\n\n    # If there are no non-white pixels, return the original grid\n    if not non_white_pixels:\n        return output_grid\n\n    # Find coordinates of white pixels\n    white_pixel_coords = []\n    for r in range(height):\n        for c in range(width):\n            if input_grid[r, c] == 0:\n                white_pixel_coords.append((r, c))\n\n    # Process each white pixel\n    for r_white, c_white in white_pixel_coords:\n        min_distance = float('inf')\n        nearest_pixels_info = [] # Stores (distance, color)\n\n        # Calculate distance to all non-white pixels\n        for (r_non_white, c_non_white), color in non_white_pixels:\n            distance = abs(r_white - r_non_white) + abs(c_white - c_non_white)\n\n            # Update minimum distance and nearest pixels list\n            if distance < min_distance:\n                min_distance = distance\n                nearest_pixels_info = [(distance, color)]\n            elif distance == min_distance:\n                nearest_pixels_info.append((distance, color))\n\n        # Determine the color based on nearest pixels and tie-breaking rules\n        final_color = 0 # Default just in case (shouldn't happen if non_white_pixels is not empty)\n        if len(nearest_pixels_info) == 1:\n            # No tie, use the color of the single nearest pixel\n            final_color = nearest_pixels_info[0][1]\n        elif len(nearest_pixels_info) > 1:\n            # Tie-breaking needed\n            tied_colors = {info[1] for info in nearest_pixels_info}\n            if 3 in tied_colors:\n                # Green (3) wins ties\n                final_color = 3\n            else:\n                # Otherwise, the color with the lowest index wins\n                final_color = min(tied_colors)\n        \n        # Update the output grid\n        output_grid[r_white, c_white] = final_color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7733,
    "candidates_token_count": 928,
    "total_token_count": 8661,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.25209
}