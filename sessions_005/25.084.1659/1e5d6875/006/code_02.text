natural_language_program:
1. Create an output grid as a copy of the input grid.
2. Iterate through each pixel (cell) of the input grid using its row and column index.
3. Check the color of the current pixel in the input grid.
4. If the current input pixel is orange (7):
    a. Initialize flags: `found_red_neighbor = false`, `found_gray_neighbor = false`.
    b. Examine all 8 neighbors (including diagonals) of the current pixel.
    c. For each valid neighbor within the grid boundaries:
        i. If the neighbor's color is red (2), set `found_red_neighbor = true` and break the neighbor check loop (since red has priority).
        ii. If the neighbor's color is gray (5), set `found_gray_neighbor = true`.
    d. Based on the flags:
        i. If `found_red_neighbor` is true, set the corresponding pixel in the output grid to green (3).
        ii. Else if `found_gray_neighbor` is true, set the corresponding pixel in the output grid to yellow (4).
        iii. Otherwise (neither red nor gray neighbor found), the corresponding pixel in the output grid remains orange (7) (no change needed as it was copied initially).
5. If the current input pixel is *not* orange (7), its value in the output grid remains unchanged (as initially copied).
6. After checking all pixels, return the completed output grid.