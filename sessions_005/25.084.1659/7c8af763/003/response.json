{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid by performing a flood fill operation within contiguous regions bounded by gray (5) pixels. \nThe fill color for each distinct region is determined by the presence of marker pixels (red=2 or blue=1) within that region in the input grid.\nRed (2) markers have higher priority than blue (1) markers.\nIf a region contains at least one red pixel, the entire region (excluding boundaries) is filled with red.\nIf a region contains no red pixels but contains at least one blue pixel, the entire region is filled with blue.\nIf a region contains neither red nor blue pixels (only white=0), it is filled with blue.\nGray (5) boundary pixels remain unchanged.\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef find_connected_regions(grid):\n    \"\"\"\n    Identifies contiguous regions of non-gray pixels using Breadth-First Search (BFS).\n\n    Args:\n        grid: A numpy array representing the input grid.\n\n    Returns:\n        A list of lists, where each inner list contains the (row, col) coordinates\n        of the pixels belonging to a single connected region of non-gray pixels.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    regions = []\n    gray_color = 5\n\n    for r in range(rows):\n        for c in range(cols):\n            # Start a BFS if the pixel is not gray and not yet visited\n            if grid[r, c] != gray_color and not visited[r, c]:\n                current_region = []\n                q = deque([(r, c)])\n                visited[r, c] = True\n\n                while q:\n                    row, col = q.popleft()\n                    current_region.append((row, col))\n\n                    # Check neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n\n                        # Check bounds and if neighbor is valid for the region (not gray, not visited)\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] != gray_color and not visited[nr, nc]:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n                \n                # Add the completed region to the list of regions\n                if current_region:\n                    regions.append(current_region)\n    return regions\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the flood fill transformation based on marker priorities within regions.\n\n    Args:\n        input_grid: A numpy array representing the input grid.\n\n    Returns:\n        A numpy array representing the transformed output grid.\n    \"\"\"\n    # Initialize output_grid as a copy of the input grid\n    output_grid = np.copy(input_grid)\n    \n    # Define marker colors and boundary color\n    red_color = 2\n    blue_color = 1\n    gray_color = 5 # Although not explicitly used for filling, it defines boundaries\n\n    # Find all connected regions of non-gray pixels\n    regions = find_connected_regions(input_grid)\n\n    # Process each identified region\n    for region_coords in regions:\n        region_contains_red = False\n        region_contains_blue = False\n\n        # Check for the presence of marker colors (red or blue) within the current region\n        # using the original input_grid values.\n        for r, c in region_coords:\n            pixel_value = input_grid[r, c]\n            if pixel_value == red_color:\n                region_contains_red = True\n                # Optimization: If red is found, no need to check for blue as red has priority.\n                break \n            elif pixel_value == blue_color:\n                region_contains_blue = True\n                # Continue checking in case a red pixel appears later in the region list\n\n        # Determine the fill color for this specific region based on marker priority\n        if region_contains_red:\n            fill_color = red_color\n        elif region_contains_blue:\n            fill_color = blue_color\n        else:\n            # If the region contains neither red nor blue (implicitly, only white=0),\n            # the rule derived from examples is to fill with blue.\n            fill_color = blue_color\n\n        # Apply the determined fill color to all pixels within this region in the output grid.\n        # Since region_coords only contains non-gray pixels, we don't need to check for gray here.\n        for r, c in region_coords:\n            output_grid[r, c] = fill_color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4119,
    "candidates_token_count": 1084,
    "total_token_count": 5203,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 138.559052
}