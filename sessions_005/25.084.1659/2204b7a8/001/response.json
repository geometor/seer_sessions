{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies whether the grid has uniform, non-white horizontal borders (top and bottom rows)\nor vertical borders (left and right columns). For each green pixel (color 3) located\nbetween these borders, its color is changed to the color of the nearest border.\nDistance is measured orthogonally (row distance for horizontal borders, column distance\nfor vertical borders). If a green pixel is equidistant, it takes the color of the\ntop border (for horizontal) or the left border (for vertical). Other pixels remain unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef _check_uniform_color(line):\n    \"\"\"Checks if a 1D numpy array (row or column) has a single, non-zero color.\"\"\"\n    if line.size == 0:\n        return None\n    first_color = line[0]\n    if first_color == 0:  # Check if the first color is white (background)\n        return None\n    if np.all(line == first_color):\n        return first_color\n    return None\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the border-proximity color transformation to green pixels.\n\n    Args:\n        input_grid (list[list[int]]): The input grid.\n\n    Returns:\n        list[list[int]]: The transformed grid.\n    \"\"\"\n    input_np = np.array(input_grid, dtype=int)\n    output_grid = np.copy(input_np)\n    height, width = input_np.shape\n\n    border_type = None\n    color1 = None\n    color2 = None\n    start_row, end_row = 0, height\n    start_col, end_col = 0, width\n\n    # 1. Identify Horizontal Borders\n    top_color = _check_uniform_color(input_np[0, :])\n    bottom_color = _check_uniform_color(input_np[height - 1, :])\n    if top_color is not None and bottom_color is not None:\n        border_type = \"horizontal\"\n        color1 = top_color\n        color2 = bottom_color\n        start_row, end_row = 1, height - 1 # Exclude border rows from iteration\n\n    # 2. Identify Vertical Borders (only if horizontal not found)\n    if border_type is None:\n        left_color = _check_uniform_color(input_np[:, 0])\n        right_color = _check_uniform_color(input_np[:, width - 1])\n        if left_color is not None and right_color is not None:\n            border_type = \"vertical\"\n            color1 = left_color\n            color2 = right_color\n            start_col, end_col = 1, width - 1 # Exclude border columns from iteration\n\n    # 3. Handle cases with no valid borders (return original grid)\n    if border_type is None:\n        return input_grid # Or raise an error, but examples imply borders exist\n\n    # 4. Iterate and Transform Green Pixels within the bounds\n    for r in range(start_row, end_row):\n        for c in range(start_col, end_col):\n            # Check if the current pixel is green\n            if input_np[r, c] == 3:\n                if border_type == \"horizontal\":\n                    # Calculate distance to top and bottom borders\n                    dist1 = r # Distance from top row (index 0)\n                    dist2 = height - 1 - r # Distance from bottom row (index height-1)\n                    # Assign color of the closer border (or top if equidistant)\n                    if dist1 <= dist2:\n                        output_grid[r, c] = color1\n                    else:\n                        output_grid[r, c] = color2\n                elif border_type == \"vertical\":\n                    # Calculate distance to left and right borders\n                    dist1 = c # Distance from left column (index 0)\n                    dist2 = width - 1 - c # Distance from right column (index width-1)\n                    # Assign color of the closer border (or left if equidistant)\n                    if dist1 <= dist2:\n                        output_grid[r, c] = color1\n                    else:\n                        output_grid[r, c] = color2\n\n    # Convert back to list of lists before returning\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3883,
    "candidates_token_count": 997,
    "total_token_count": 4880,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.562787
}