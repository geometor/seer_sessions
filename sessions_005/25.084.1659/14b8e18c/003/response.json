{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\n\n\"\"\"\nTransforms the input grid by changing specific orange (7) pixels to red (2).\nAn orange pixel at (r, c) is changed to red if it has exactly one non-orange neighbor \n(considering only the four cardinal neighbors: up, down, left, right). \nAll other pixels retain their original color.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid (list of list of int): The input grid representing colors.\n\n    Returns:\n        list of list of int: The transformed output grid.\n    \"\"\"\n    \n    # Get grid dimensions\n    height = len(input_grid)\n    width = len(input_grid[0])\n\n    # Initialize output_grid as a deep copy of input_grid\n    # This ensures that pixels not matching the condition retain their original color\n    output_grid = copy.deepcopy(input_grid)\n\n    # Define relevant colors\n    background_color = 7 # orange\n    target_color = 2     # red\n\n    # Define neighbor offsets for cardinal directions (up, down, left, right)\n    neighbor_offsets = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    # Iterate through each pixel of the input grid\n    for r in range(height):\n        for c in range(width):\n            # Check if the current pixel is the background color (orange)\n            if input_grid[r][c] == background_color:\n                \n                # Count non-background neighbors in cardinal directions\n                non_background_neighbor_count = 0\n                for dr, dc in neighbor_offsets:\n                    nr, nc = r + dr, c + dc\n                    \n                    # Check if the neighbor coordinates are within the grid bounds\n                    if 0 <= nr < height and 0 <= nc < width:\n                        # Check if the neighbor is NOT the background color\n                        if input_grid[nr][nc] != background_color:\n                            non_background_neighbor_count += 1\n                            \n                # If exactly one non-background neighbor was found, change the pixel color\n                if non_background_neighbor_count == 1:\n                    output_grid[r][c] = target_color\n\n    # Return the modified grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4028,
    "candidates_token_count": 536,
    "total_token_count": 4564,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 30.830823
}