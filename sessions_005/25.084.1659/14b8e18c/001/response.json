{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by changing specific background pixels (orange, 7) to red (2).\n    A background pixel at (r, c) is changed to red if it is part of any 2x2 square\n    (fully within the grid bounds) that contains exactly one non-background pixel\n    (i.e., one foreground pixel and three background pixels). The four potential 2x2 squares\n    checked are those for which the pixel (r, c) is one of the four cells.\n    All other pixels retain their original color.\n    \"\"\"\n\n    # --- Helper Functions ---\n    def is_valid(r, c, h, w):\n        \"\"\"Checks if coordinates (r, c) are within grid bounds (h, w).\"\"\"\n        return 0 <= r < h and 0 <= c < w\n\n    def check_square_condition(grid, tr, tc, h, w, bg_color):\n        \"\"\"\n        Checks if a 2x2 square starting at top-left (tr, tc) is fully within bounds\n        and contains exactly one foreground pixel.\n        \"\"\"\n        foreground_count = 0\n        pixel_count = 0\n        for r_offset in range(2):\n            for c_offset in range(2):\n                r, c = tr + r_offset, tc + c_offset\n                # Check if this cell of the 2x2 square is within grid bounds\n                if is_valid(r, c, h, w):\n                    pixel_count += 1\n                    # Count foreground pixels within the square\n                    if grid[r][c] != bg_color:\n                        foreground_count += 1\n                else:\n                    # If any part of the 2x2 square is out of bounds, it cannot meet the condition\n                    # which requires 4 pixels (1 foreground, 3 background).\n                    return False\n\n        # The condition is met if the square is fully within bounds (4 pixels)\n        # and has exactly 1 foreground pixel.\n        return pixel_count == 4 and foreground_count == 1\n\n    # --- Main Transformation Logic ---\n\n    # Get grid dimensions\n    height = len(input_grid)\n    width = len(input_grid[0])\n\n    # Initialize output_grid as a deep copy of input_grid\n    output_grid = copy.deepcopy(input_grid)\n\n    # Define relevant colors\n    background_color = 7 # orange\n    target_color = 2     # red\n\n    # Iterate through each pixel of the input grid\n    for r in range(height):\n        for c in range(width):\n            # We only potentially change background pixels\n            if input_grid[r][c] == background_color:\n                # Define the top-left corners (tr, tc) of the four 2x2 squares\n                # that would contain the current pixel (r, c).\n                # Square 1: (r, c) is bottom-right -> TL corner is (r-1, c-1)\n                # Square 2: (r, c) is bottom-left  -> TL corner is (r-1, c)\n                # Square 3: (r, c) is top-right    -> TL corner is (r, c-1)\n                # Square 4: (r, c) is top-left     -> TL corner is (r, c)\n                square_origins = [\n                    (r - 1, c - 1),\n                    (r - 1, c),\n                    (r, c - 1),\n                    (r, c)\n                ]\n\n                # Check if any of these squares meet the transformation condition\n                should_change_color = False\n                for tr, tc in square_origins:\n                    # Check the condition for the square starting at (tr, tc)\n                    if check_square_condition(input_grid, tr, tc, height, width, background_color):\n                        should_change_color = True\n                        break # Condition met by at least one square, no need to check further\n\n                # If the condition was met by any relevant square, change the pixel color\n                if should_change_color:\n                    output_grid[r][c] = target_color\n\n    # Return the modified grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3419,
    "candidates_token_count": 976,
    "total_token_count": 4395,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 31.027191
}