{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentifies distinct connected objects composed of non-white (non-zero) pixels, considering diagonal adjacency.\nIf an object is composed of exactly two distinct non-white colors (Color A and Color B), \nit swaps these colors within the object: all pixels of Color A become Color B, and all pixels of Color B become Color A. \nObjects with only one non-white color or more than two non-white colors remain unchanged. \nWhite (zero) background pixels remain unchanged.\n\"\"\"\n\ndef find_objects(grid, background_color=0):\n    \"\"\"\n    Finds connected components of non-background pixels using BFS.\n    Considers diagonal pixels as connected.\n\n    Args:\n        grid (np.array): Input grid.\n        background_color (int): The color value representing the background. Default is 0.\n\n    Returns:\n        list: A list of sets, where each set contains the (row, col) tuples \n              of pixels belonging to a single connected object.\n    \"\"\"\n    height, width = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n    \n    # Define 8 directions for neighbors (including diagonals)\n    directions = [\n        (-1, -1), (-1, 0), (-1, 1),\n        (0, -1),          (0, 1),\n        (1, -1), (1, 0), (1, 1)\n    ]\n\n    for r in range(height):\n        for c in range(width):\n            # Start BFS if we find a non-background pixel that hasn't been visited\n            if grid[r, c] != background_color and not visited[r, c]:\n                current_object_coords = set()\n                q = deque([(r, c)])\n                visited[r, c] = True\n                \n                while q:\n                    curr_r, curr_c = q.popleft()\n                    current_object_coords.add((curr_r, curr_c))\n                    \n                    # Explore neighbors\n                    for dr, dc in directions:\n                        nr, nc = curr_r + dr, curr_c + dc\n                        \n                        # Check boundaries\n                        if 0 <= nr < height and 0 <= nc < width:\n                            # Check if neighbor is part of the object and not visited\n                            if grid[nr, nc] != background_color and not visited[nr, nc]:\n                                visited[nr, nc] = True\n                                q.append((nr, nc))\n                                \n                # Add the found object's coordinates to the list\n                if current_object_coords:\n                    objects.append(current_object_coords)\n                    \n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by swapping the two constituent colors within each \n    distinct two-colored object.\n    \n    Args:\n        input_grid (list of lists): The input grid representing colors.\n        \n    Returns:\n        list of lists: The transformed grid.\n    \"\"\"\n    # Convert input to NumPy array for easier manipulation\n    grid = np.array(input_grid, dtype=int)\n    \n    # Initialize the output grid as a copy of the input grid\n    output_grid = grid.copy()\n    \n    # Find all distinct objects (connected components of non-white pixels)\n    # Each object is represented by a set of its coordinates\n    objects_coords_list = find_objects(grid, background_color=0)\n    \n    # Iterate through each identified object\n    for object_coords in objects_coords_list:\n        # Get the pixel values corresponding to the current object's coordinates\n        object_pixels = [grid[r, c] for r, c in object_coords]\n        \n        # Find the unique non-white colors within this object\n        unique_colors = np.unique(object_pixels)\n        # Filter out the background color (0) - although find_objects ensures this shouldn't be needed\n        non_white_colors = unique_colors[unique_colors != 0] \n        \n        # Check if the object is composed of exactly two non-white colors\n        if len(non_white_colors) == 2:\n            color1, color2 = non_white_colors[0], non_white_colors[1]\n            \n            # Iterate through the coordinates of this object again to perform the swap\n            for r, c in object_coords:\n                if grid[r, c] == color1:\n                    output_grid[r, c] = color2\n                elif grid[r, c] == color2:\n                    output_grid[r, c] = color1\n            # Pixels that were background (0) within the bounding box but not part \n            # of the object remain unchanged (as they are not in object_coords).\n            # Objects with 1 or >2 colors also remain unchanged as per the copy initialization.\n\n    # Return the modified grid converted back to list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 9405,
    "candidates_token_count": 1154,
    "total_token_count": 10559,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.715307
}