{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies distinct connected objects composed of non-white pixels. \nIf an object is composed of exactly two distinct non-white colors (Color A and Color B), \nit swaps these colors within the object: all pixels of Color A become Color B, and all pixels of Color B become Color A. \nObjects with only one non-white color or more than two non-white colors remain unchanged. \nWhite background pixels remain unchanged.\n\"\"\"\n\nimport numpy as np\nfrom scipy.ndimage import label\n\ndef find_objects(grid):\n    \"\"\"\n    Finds connected components of non-background pixels.\n    Args:\n        grid (np.array): Input grid.\n        background_color (int): The color value representing the background. Default is 0 (white).\n    Returns:\n        tuple: (labeled_array, num_labels)\n               labeled_array: A grid where each object is marked with a unique integer ID.\n               num_labels: The total number of objects found (excluding background).\n    \"\"\"\n    # Create a boolean mask where True indicates a non-background pixel\n    mask = grid != 0 \n    # Label connected components in the mask. \n    # structure=np.ones((3,3)) ensures diagonal connectivity is considered part of the same object.\n    labeled_array, num_labels = label(mask, structure=np.ones((3,3), dtype=bool))\n    return labeled_array, num_labels\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by swapping the two constituent colors within each \n    distinct two-colored object.\n    \n    Args:\n        input_grid (list of lists or np.array): The input grid representing colors.\n        \n    Returns:\n        np.array: The transformed grid.\n    \"\"\"\n    # Convert input to NumPy array for efficient processing\n    grid = np.array(input_grid, dtype=int)\n    \n    # Initialize the output grid as a copy of the input grid\n    output_grid = grid.copy()\n    \n    # Find all distinct objects (connected components of non-white pixels)\n    labeled_grid, num_labels = find_objects(grid)\n    \n    # Iterate through each identified object\n    for i in range(1, num_labels + 1):\n        # Create a mask for the current object\n        object_mask = (labeled_grid == i)\n        \n        # Get the pixels corresponding to the current object\n        object_pixels = grid[object_mask]\n        \n        # Find the unique non-white colors within this object\n        unique_colors = np.unique(object_pixels)\n        # Filter out the background color (0) if it's present (shouldn't be due to find_objects logic, but good practice)\n        non_white_colors = unique_colors[unique_colors != 0] \n        \n        # Check if the object is composed of exactly two non-white colors\n        if len(non_white_colors) == 2:\n            color1, color2 = non_white_colors[0], non_white_colors[1]\n            \n            # Identify locations of color1 and color2 within the current object\n            color1_mask = object_mask & (grid == color1)\n            color2_mask = object_mask & (grid == color2)\n            \n            # Swap the colors in the output grid\n            output_grid[color1_mask] = color2\n            output_grid[color2_mask] = color1\n            \n    # Return the modified grid as a NumPy array\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2953,
    "candidates_token_count": 815,
    "total_token_count": 3768,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.804213
}