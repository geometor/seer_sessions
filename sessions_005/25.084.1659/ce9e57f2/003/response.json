{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport math\n\n\"\"\"\nTransforms the input grid by identifying the bottom-most vertical contiguous block \nof red (2) pixels in each column. For each such identified block, it calculates \nits height 'H'. Then, it changes the color of the bottom floor(H / 2) pixels \nof that block to azure (8). If a column contains no red blocks, it remains unchanged.\n\"\"\"\n\ndef _find_vertical_red_blocks(column_data):\n    \"\"\"\n    Identifies contiguous vertical blocks of red (2) pixels in a column.\n\n    Args:\n        column_data (np.array): A 1D numpy array representing a single column.\n\n    Returns:\n        list: A list of tuples, where each tuple represents a block\n              as (start_row, end_row). Returns an empty list if no red blocks are found.\n    \"\"\"\n    blocks = []\n    in_block = False\n    start_row = -1\n    red_color = 2\n\n    for r, pixel in enumerate(column_data):\n        if pixel == red_color and not in_block:\n            # Start of a new block\n            in_block = True\n            start_row = r\n        elif pixel != red_color and in_block:\n            # End of the current block\n            in_block = False\n            blocks.append((start_row, r - 1))\n            start_row = -1\n\n    # Handle block ending at the last row\n    if in_block:\n        blocks.append((start_row, len(column_data) - 1))\n\n    return blocks\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on vertical red blocks.\n\n    Args:\n        input_grid (list[list[int]]): The input grid.\n\n    Returns:\n        list[list[int]]: The transformed grid.\n    \"\"\"\n    # Convert input_grid list of lists to numpy array for easier slicing\n    input_array = np.array(input_grid, dtype=int)\n    # Initialize output_grid as a copy of the input\n    output_array = np.copy(input_array)\n    height, width = input_array.shape\n    red_color = 2\n    azure_color = 8\n\n    # Iterate through each column\n    for c in range(width):\n        column_data = input_array[:, c]\n\n        # Find all vertical contiguous blocks of red pixels in this column\n        red_blocks = _find_vertical_red_blocks(column_data)\n\n        # If no red blocks found in this column, continue to the next column\n        if not red_blocks:\n            continue\n\n        # Select the red block that extends furthest down (highest end_row)\n        bottom_most_block = max(red_blocks, key=lambda block: block[1])\n        start_row, end_row = bottom_most_block\n\n        # Calculate the height 'H' of this bottom-most block\n        block_height = end_row - start_row + 1\n\n        # Calculate the number of pixels 'C' to change: C = floor(H / 2)\n        pixels_to_change = math.floor(block_height / 2)\n\n        # Change the color of the bottom 'C' pixels of this block to azure\n        # Iterate from i = 0 up to C - 1\n        for i in range(pixels_to_change):\n            # Calculate the row index of the pixel to change\n            # Start from the bottom (end_row) and go up\n            row_index = end_row - i\n            # Ensure the row index is valid (should always be, but good practice)\n            if 0 <= row_index < height:\n                 # Change the pixel in the output grid\n                output_array[row_index, c] = azure_color\n\n    # Convert the output numpy array back to a list of lists\n    return output_array.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5115,
    "candidates_token_count": 901,
    "total_token_count": 6016,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.358348
}