{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Green Pixels:** Locate all green (3) pixels in the input grid.\n\n2.  **Pixel Evaluation:** For each Green Pixel\n    *   If a green pixel has *at least one* adjacent white pixel (up, down, left, or right), replace it with azure (8).\n    *   If a green pixel does *not* have at least one adjacent white pixel (up, down, left or right) then, if the pixel is part of a horizontal or vertical line of 2 or more, and it is a *line end* (first or last pixel) replace with an azure pixel.\n\n3.  **Copy Unmodified Pixels:** Any pixel that is not green, or does not meet the above replacement criteria, is copied directly from the input grid to the output grid.\n\"\"\"\n\nimport numpy as np\n\ndef count_adjacent_white_pixels(grid, row, col):\n    \"\"\"Counts the number of white (0) pixels adjacent to a given cell.\"\"\"\n    count = 0\n    rows, cols = grid.shape\n    # Check up\n    if row > 0 and grid[row - 1, col] == 0:\n        count += 1\n    # Check down\n    if row < rows - 1 and grid[row + 1, col] == 0:\n        count += 1\n    # Check left\n    if col > 0 and grid[row, col - 1] == 0:\n        count += 1\n    # Check right\n    if col < cols - 1 and grid[row, col + 1] == 0:\n        count += 1\n    return count\n\ndef get_green_lines(grid):\n    \"\"\"Identifies horizontal and vertical lines of green pixels.\"\"\"\n    rows, cols = grid.shape\n    green_lines = []\n\n    # Check for horizontal lines\n    for r in range(rows):\n        current_line = []\n        for c in range(cols):\n            if grid[r, c] == 3:\n                current_line.append((r, c))\n            else:\n                if len(current_line) > 1:\n                    green_lines.append(current_line)\n                current_line = []\n        if len(current_line) > 1:\n            green_lines.append(current_line)\n\n    # Check for vertical lines\n    for c in range(cols):\n        current_line = []\n        for r in range(rows):\n            if grid[r, c] == 3:\n                current_line.append((r, c))\n            else:\n                if len(current_line) > 1:\n                    green_lines.append(current_line)\n                current_line = []\n        if len(current_line) > 1:\n            green_lines.append(current_line)\n\n    return green_lines\n\ndef is_line_end(line, r, c):\n    \"\"\"Checks if a pixel is at the end of a green line.\"\"\"\n    return (r, c) == line[0] or (r, c) == line[-1]\n    \n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of input_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Get green lines\n    green_lines = get_green_lines(input_grid)\n    all_green_pixels = []\n    for line in green_lines:\n        all_green_pixels.extend(line)\n\n\n    # Iterate over all green pixels\n    for r in range(rows):\n        for c in range(cols):\n            if input_grid[r,c] == 3:\n                # If the green pixel has at least one white neighbor change to azure\n                if count_adjacent_white_pixels(input_grid, r, c) >= 1:\n                    output_grid[r,c] = 8\n                # if not, check if its a line-end\n                else:\n                    is_end = False\n                    for line in green_lines:\n                         if is_line_end(line, r, c):\n                            is_end = True\n                            break\n                    if is_end:\n                        output_grid[r,c] = 8\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6270,
    "candidates_token_count": 985,
    "total_token_count": 7255,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.955038
}