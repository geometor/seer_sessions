{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe program identifies \"source\" rows as those having any non-zero elements.\nFor each source row, it copies it to the output, then modifies subsequent \"target\" rows.\nIt replaces zeros in the target row with corresponding non-zero values from the source row.\nThe last element of the source row is always copied to the last element of the target row.\nThis continues for consecutive target rows until the next source row or the end of the grid.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    # Initialize output_grid\n    input_grid = np.array(input_grid)\n    output_grid = []\n\n    # Identify source rows (rows where any element is not zero)\n    source_rows_indices = [i for i, row in enumerate(input_grid) if np.any(row != 0)]\n\n    row_index = 0\n    while row_index < len(input_grid):\n        row = input_grid[row_index]\n\n        if row_index in source_rows_indices:\n            # Copy the source row to output\n            output_grid.append(row.tolist())\n\n            next_row_index = row_index + 1\n            #check if we have subsequent rows\n            while next_row_index < len(input_grid) and next_row_index not in source_rows_indices :\n                modified_row = input_grid[next_row_index].copy()\n\n                # Merge: Replace 0s in target with corresponding non-0s from source\n                for j in range(len(modified_row) - 1):\n                    if modified_row[j] == 0 and row[j] != 0:\n                        modified_row[j] = row[j]\n\n                #copy last element from source to target\n                modified_row[-1] = row[-1]\n                output_grid.append(modified_row.tolist())\n                next_row_index += 1\n\n            row_index = next_row_index\n\n        #if not source row, just append\n        else:\n             output_grid.append(row.tolist())\n             row_index+= 1\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3447,
    "candidates_token_count": 496,
    "total_token_count": 3943,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.021351
}