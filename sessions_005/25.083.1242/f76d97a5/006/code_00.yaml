examples:
  - example_id: 1
    input_colors: [4, 5]
    output_colors: [0, 4]
    objects:
      - color: 4
        shape: "cross-like"
        adjacent_to: [5]
        changes: "Corners and edges become 0, no internal color changes"
      - color: 5
        shape: "fills spaces between 4"
        adjacent_to: [4]
        changes: "Becomes 4 where adjacent to 4. Becomes 0 where on boundary"
    transformations:
      - from: 5
        to: 4
        condition: "adjacent to 4"
      - from: 5
        to: 0
        condition: "on boundary"
      - from: 4
        to: 0
        condition: 'on boundary'

  - example_id: 2
    input_colors: [5, 6]
    output_colors: [0, 6]
    objects:
      - color: 5
        shape: "interlocking"
        adjacent_to: [6,0]
        changes: "becomes 6 if next to 6 AND not adjacent to another 5. Becomes 0 if adjacent to 0."
      - color: 6
        shape: "interlocking"
        adjacent_to: [5,0]
        changes: "becomes 0 if adjacent to 0 (the boundary)"
    transformations:
      - from: 5
        to: 6
        condition: "adjacent to 6 and not adjacent to 5"
      - from: 6
        to: 0
        condition: "adjacent to boundary (0)"
      - from: 5
        to: 0
        condition: "adjacent to boundary (0)"
  - example_id: 3
    input_colors: [5, 9]
    output_colors: [0, 9]
    objects:
      - color: 5
        shape: "spots"
        adjacent_to: [9]
        changes: "becomes 9 if adjacent to 9"
      - color: 9
        shape: "background/frame"
        adjacent_to: [5, 0]
        changes: "becomes 0 if on main or anti-diagonal"
    transformations:
      - from: 5
        to: 9
        condition: "adjacent to 9"
      - from: 9
        to: 0
        condition: "on main or anti-diagonal"
