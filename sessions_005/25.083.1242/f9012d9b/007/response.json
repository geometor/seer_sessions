{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Determine all contiguous regions (objects) of the same color in the input grid.\n2.  **Case: Single Dominant Color:** If the input grid consists of mostly one color (with at most one other color of only 1 pixel), the output is a 1x1 grid containing the top-left pixel of the input grid.\n3.  **Case: Colors 1 and 2:** If the input grid contains both colors 1 and 2:\n    *   Locate the largest contiguous region of color 1.\n    *   Extract a 2x2 subgrid from the top-left corner of this region.\n    *   If the extracted subgrid contains color 2, this is the output.\n    *    If color 2 is not present, search for a 2x2 area where colors 1 and 2 exists, return if found.\n\n4.  **Case: Colors 2 and 5 (and no color 1):** If the input grid contains both colors 2 and 5 (and no color 1):\n    *    Find the objects with color 2 and 5\n    *    Extract the 2x2 subgrid that includes 2 and 5 if exists.\n5.  **Default:** In all other cases, or if no suitable subgrid can be found based on the above rules, the transformation is considered invalid and outputs -1.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"\n    Finds contiguous objects (regions of same color) in a grid.\n    Returns a dictionary where keys are colors and values are lists of object coordinates.\n    \"\"\"\n    objects = {}\n    visited = set()\n    rows, cols = len(grid), len(grid[0])\n\n    def dfs(r, c, color, obj_coords):\n        if (r, c) in visited or r < 0 or r >= rows or c < 0 or c >= cols or grid[r][c] != color:\n            return\n        visited.add((r, c))\n        obj_coords.append((r, c))\n        dfs(r + 1, c, color, obj_coords)\n        dfs(r - 1, c, color, obj_coords)\n        dfs(r, c + 1, color, obj_coords)\n        dfs(r, c - 1, color, obj_coords)\n\n    for r in range(rows):\n        for c in range(cols):\n            if (r, c) not in visited:\n                color = grid[r][c]\n                obj_coords = []\n                dfs(r, c, color, obj_coords)\n                if color not in objects:\n                    objects[color] = []\n                objects[color].append(obj_coords)\n    return objects\n\ndef get_object_bounding_box(obj_coords):\n    \"\"\"\n    Returns the bounding box (min_row, min_col, max_row, max_col) for an object.\n    \"\"\"\n    if not obj_coords:\n        return None\n    min_row = min(coord[0] for coord in obj_coords)\n    min_col = min(coord[1] for coord in obj_coords)\n    max_row = max(coord[0] for coord in obj_coords)\n    max_col = max(coord[1] for coord in obj_coords)\n    return min_row, min_col, max_row, max_col\n\ndef get_largest_object_by_color(objects, color):\n    \"\"\"\n    Finds and returns the largest object of a specific color.\n    \"\"\"\n    largest_obj_size = 0\n    largest_obj_coords = []\n\n    if color in objects:\n        for obj_coords in objects[color]:\n            size = len(obj_coords)\n            if size > largest_obj_size:\n                largest_obj_size = size\n                largest_obj_coords = obj_coords\n\n    return largest_obj_coords\n\ndef extract_2x2_subgrid(grid, r, c):\n  \"\"\"Extracts a 2x2 subgrid from the input grid, returns None if out of bounds\"\"\"\n  rows, cols = len(grid), len(grid[0])\n  if r + 1 >= rows or c + 1 >= cols:\n      return None  # Out of bounds\n\n  subgrid = [\n      [grid[r][c], grid[r][c + 1]],\n      [grid[r + 1][c], grid[r + 1][c + 1]]\n  ]\n  return subgrid\n\ndef transform(input_grid):\n    input_grid_np = np.array(input_grid)\n    objects = find_objects(input_grid_np)\n\n    # Case: Single Dominant Color\n    color_counts = {}\n    for color in objects:\n      for obj in objects[color]:\n        if color not in color_counts:\n          color_counts[color] = 0\n        color_counts[color] += len(obj)\n\n    sorted_colors = sorted(color_counts.items(), key=lambda item: item[1], reverse=True)\n\n    if len(sorted_colors) == 1 or (len(sorted_colors) == 2 and sorted_colors[1][1] == 1 ):\n        return [[input_grid_np[0][0]]]\n\n    # Case: Colors 1 and 2\n    if 1 in objects and 2 in objects:\n        largest_1_coords = get_largest_object_by_color(objects, 1)\n        bbox_1 = get_object_bounding_box(largest_1_coords)\n        subgrid = extract_2x2_subgrid(input_grid_np, bbox_1[0], bbox_1[1])\n\n        if subgrid:\n          subgrid_np = np.array(subgrid)\n          if 2 in subgrid_np:\n            return subgrid\n\n        # Search for any 2x2 containing 1 and 2:\n        for r in range(input_grid_np.shape[0]):\n          for c in range(input_grid_np.shape[1]):\n            subgrid = extract_2x2_subgrid(input_grid_np, r,c)\n            if subgrid:\n              subgrid_np = np.array(subgrid)\n              if 1 in subgrid_np and 2 in subgrid_np:\n                return subgrid\n\n    # Case: Colors 2 and 5 (and no color 1)\n    if 2 in objects and 5 in objects and 1 not in objects:\n\n        # Search for any 2x2 containing 2 and 5\n        for r in range(input_grid_np.shape[0]):\n            for c in range(input_grid_np.shape[1]):\n                subgrid = extract_2x2_subgrid(input_grid_np, r, c)\n                if subgrid:\n                  subgrid_np = np.array(subgrid)\n                  if 2 in subgrid_np and 5 in subgrid_np:\n                    return subgrid\n\n\n    # Default\n    return [[-1]]\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5662,
    "candidates_token_count": 1648,
    "total_token_count": 7310,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 20.883215
}