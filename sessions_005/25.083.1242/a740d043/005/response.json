{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Find all contiguous regions (objects) of non-blue (non-1) pixels in the input grid. Consider pixels adjacent horizontally or vertically as part of the same object.\n2.  **Remove Background:** Conceptually remove all blue pixels (value 1). These act as separators.\n3.  **Create Bounding Boxes:** Determine the bounding box for each object. The bounding box is the smallest rectangle that fully encloses the object.\n4.  **Vertical Stacking:** Stack the objects vertically. Maintain alignment of the object as if within its original bounding box. The height of the output grid is the sum of the heights of the bounding box of all objects, and its width is the maximum width of all bounding boxes.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"\n    Finds contiguous objects of non-blue pixels in the grid.\n    Returns a list of objects, where each object is a list of (row, col, value) coordinates.\n    \"\"\"\n    objects = []\n    visited = set()\n    rows, cols = grid.shape\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def dfs(r, c, current_object):\n        if (r, c) in visited or not is_valid(r, c) or grid[r, c] == 1:\n            return\n        visited.add((r, c))\n        current_object.append((r, c, grid[r, c]))\n        # Check adjacent cells (up, down, left, right)\n        dfs(r + 1, c, current_object)\n        dfs(r - 1, c, current_object)\n        dfs(r, c + 1, current_object)\n        dfs(r, c - 1, current_object)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 1 and (r, c) not in visited:\n                current_object = []\n                dfs(r, c, current_object)\n                objects.append(current_object)\n\n    return objects\n\ndef get_bounding_box(obj):\n    \"\"\"\n    Calculates the bounding box of an object.\n    Returns (min_row, min_col, max_row, max_col).\n    \"\"\"\n    min_row = min(r for r, c, _ in obj)\n    min_col = min(c for r, c, _ in obj)\n    max_row = max(r for r, c, _ in obj)\n    max_col = max(c for r, c, _ in obj)\n    return (min_row, min_col, max_row, max_col)\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by extracting non-blue shapes and arranging them vertically,\n    maintaining their relative horizontal positions.\n    \"\"\"\n    input_grid = np.array(input_grid)\n\n    # Find non-blue objects\n    objects = find_objects(input_grid)\n\n    # Calculate output grid dimensions based on bounding boxes\n    max_width = 0\n    total_height = 0\n    for obj in objects:\n        min_row, min_col, max_row, max_col = get_bounding_box(obj)\n        width = max_col - min_col + 1\n        height = max_row - min_row + 1\n        max_width = max(max_width, width)\n        total_height += height\n\n    # Initialize output grid\n    output_grid = np.zeros((total_height, max_width), dtype=int)\n\n    # Populate the output grid, maintaining relative horizontal positions\n    current_row = 0\n    for obj in objects:\n        min_row, min_col, max_row, max_col = get_bounding_box(obj)\n        \n        for r, c, val in obj:\n            # Calculate relative position within the bounding box\n            output_grid[r - min_row + current_row, c - min_col] = val\n\n        current_row += (max_row - min_row + 1)\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4000,
    "candidates_token_count": 971,
    "total_token_count": 4971,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.044953
}