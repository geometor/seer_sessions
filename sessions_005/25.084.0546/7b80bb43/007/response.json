{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by expanding connected regions of foreground pixels horizontally to the right, until a background color or the edge of the grid is encountered. Overwrites any foreground color with the starting pixel of the current run\n\"\"\"\n\nimport numpy as np\n\ndef get_foreground_colors(grid):\n    \"\"\"\n    Determines the foreground colors by excluding the most frequent (background) color.\n    \"\"\"\n    unique_colors, counts = np.unique(grid, return_counts=True)\n    background_color = unique_colors[np.argmax(counts)]\n    foreground_colors = [color for color in unique_colors if color != background_color]\n    return foreground_colors\n\ndef transform(input_grid):\n    \"\"\"\n    Expands connected regions of foreground colors horizontally to the right within a grid,\n    until a background color or the edge is reached.\n    \"\"\"\n    grid = np.array(input_grid)\n    output_grid = np.copy(grid)\n    rows, cols = grid.shape\n    \n    foreground_colors = get_foreground_colors(grid)\n\n    # Iterate through each row.\n    for r in range(rows):\n        in_run = False\n        start_run_col = -1\n        start_run_color = -1\n\n        for c in range(cols):\n            # Check if the current pixel is a foreground color.\n            if grid[r, c] in foreground_colors:\n                if not in_run:\n                    # Start a new run.\n                    in_run = True\n                    start_run_col = c\n                    start_run_color = grid[r, c]\n            else:\n                # Background color or edge encountered.  End the run if any.\n                if in_run:\n                    for i in range(start_run_col + 1, c):\n                        output_grid[r, i] = start_run_color\n                    in_run = False\n                    start_run_col = -1\n\n        # Handle the case where a run extends to the end of the row.\n        if in_run:\n            for i in range(start_run_col + 1, cols):\n                output_grid[r, i] = start_run_color\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 9934,
    "candidates_token_count": 515,
    "total_token_count": 10449,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.168154
}