{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe input grid is transformed into a smaller, densely packed output grid.  Colored regions in the input are identified, their bounding boxes are determined, their colors are transformed according to a specific mapping, and then they are arranged as rectangles in the output grid, maintaining their relative spatial order. The output grid is condensed, removing any background space between the colored rectangles.\n\"\"\"\n\nimport numpy as np\n\ndef get_objects(grid):\n    \"\"\"Find contiguous regions of non-zero pixels.\"\"\"\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n    rows, cols = grid.shape\n\n    def dfs(r, c, color, obj_pixels):\n        if (r < 0 or r >= rows or c < 0 or c >= cols or\n                visited[r, c] or grid[r, c] != color):\n            return\n        visited[r, c] = True\n        obj_pixels.append((r, c))\n        dfs(r + 1, c, color, obj_pixels)\n        dfs(r - 1, c, color, obj_pixels)\n        dfs(r, c + 1, color, obj_pixels)\n        dfs(r, c - 1, color, obj_pixels)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and not visited[r, c]:\n                obj_pixels = []\n                dfs(r, c, grid[r, c], obj_pixels)\n                objects.append(obj_pixels)\n    return objects\n\ndef bounding_box(obj_pixels):\n    \"\"\"Calculate the bounding box of a set of pixels.\"\"\"\n    min_r = min(p[0] for p in obj_pixels)\n    max_r = max(p[0] for p in obj_pixels)\n    min_c = min(p[1] for p in obj_pixels)\n    max_c = max(p[1] for p in obj_pixels)\n    return min_r, min_c, max_r, max_c\n\ndef color_map(input_color):\n    \"\"\"Maps input colors to output colors.\"\"\"\n    mapping = {\n        2: 1,\n        5: 5,\n        8: 1,\n        9: 9,\n        4: 9,\n        7: 5,\n        1: 1,\n        6: 2,\n        3: 3\n    }\n    return mapping.get(input_color, input_color) # Default to input color if not in map\n\ndef transform(input_grid):\n    # Convert to numpy array\n    input_grid = np.array(input_grid)\n\n    # 1. Identify Colored Regions\n    objects = get_objects(input_grid)\n\n    # 2. & 3. Bounding Boxes and Color Mapping, and Sort.  Sort objects based on top-left corner\n    # The objects returned are already in a raster scan order\n    bbox_list = []\n    for obj in objects:\n        min_r, min_c, max_r, max_c = bounding_box(obj)\n        input_color = input_grid[obj[0]]  # Get color from first pixel of object\n        output_color = color_map(input_color)\n        bbox_list.append((min_r, min_c, max_r - min_r + 1, max_c - min_c + 1, output_color))\n\n    # 4. Condense and arrange\n    # determine output grid size\n    output_rows = 0\n    output_cols = 0\n\n    row_heights = []\n    current_row_height = 0\n    current_row_width = 0\n    for min_r, min_c, height, width, _ in bbox_list:\n      if current_row_width + width > 20:\n        row_heights.append(current_row_height)\n        output_cols = max(output_cols, current_row_width)\n        current_row_width = width\n        current_row_height = height\n      else:\n        current_row_width += width\n        current_row_height = max(current_row_height, height)\n\n    row_heights.append(current_row_height)\n    output_cols = max(output_cols, current_row_width)\n    output_rows = sum(row_heights)\n\n\n    # 5. Output Grid Construction\n    output_grid = np.zeros((output_rows, output_cols), dtype=int)\n    current_row = 0\n    current_col = 0\n    row_index = 0\n\n    for min_r, min_c, height, width, output_color in bbox_list:\n        if current_col + width > output_cols:\n            current_row += row_heights[row_index]\n            row_index +=1\n            current_col = 0\n        output_grid[current_row:current_row + height, current_col:current_col + width] = output_color\n        current_col += width\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4123,
    "candidates_token_count": 1193,
    "total_token_count": 5316,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 19.400966
}