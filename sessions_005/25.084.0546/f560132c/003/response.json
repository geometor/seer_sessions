{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe input grid is transformed into a smaller output grid by identifying contiguous colored regions, determining their bounding boxes, mapping their colors, sorting them by area (descending) and then top-left corner coordinates, and finally arranging them compactly in the output grid.\n\"\"\"\n\nimport numpy as np\n\ndef get_objects(grid):\n    \"\"\"Find contiguous regions of non-zero pixels.\"\"\"\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n    rows, cols = grid.shape\n\n    def dfs(r, c, color, obj_pixels):\n        if (r < 0 or r >= rows or c < 0 or c >= cols or\n                visited[r, c] or grid[r, c] != color):\n            return\n        visited[r, c] = True\n        obj_pixels.append((r, c))\n        dfs(r + 1, c, color, obj_pixels)\n        dfs(r - 1, c, color, obj_pixels)\n        dfs(r, c + 1, color, obj_pixels)\n        dfs(r, c - 1, color, obj_pixels)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and not visited[r, c]:\n                obj_pixels = []\n                dfs(r, c, grid[r, c], obj_pixels)\n                objects.append(obj_pixels)\n    return objects\n\ndef bounding_box(obj_pixels):\n    \"\"\"Calculate the bounding box of a set of pixels.\"\"\"\n    min_r = min(p[0] for p in obj_pixels)\n    max_r = max(p[0] for p in obj_pixels)\n    min_c = min(p[1] for p in obj_pixels)\n    max_c = max(p[1] for p in obj_pixels)\n    return min_r, min_c, max_r, max_c\n\ndef color_map(input_color):\n    \"\"\"Maps input colors to output colors.\"\"\"\n    mapping = {\n        2: 1,\n        1: 1,\n        5: 5,\n        7: 5,\n        8: 8,\n        9: 9,\n        4: 9,\n        3: 8  # Corrected mapping for 3\n    }\n    return mapping.get(input_color, input_color)\n\ndef transform(input_grid):\n    # Convert to numpy array\n    input_grid = np.array(input_grid)\n\n    # 1. Identify Colored Regions\n    objects = get_objects(input_grid)\n\n    # 2. & 3. Bounding Boxes and Color Mapping, and Sort.\n    bbox_list = []\n    for obj in objects:\n        min_r, min_c, max_r, max_c = bounding_box(obj)\n        height = max_r - min_r + 1\n        width = max_c - min_c + 1\n        area = len(obj)\n        input_color = input_grid[obj[0]]  # Get color from first pixel of object\n        output_color = color_map(input_color)\n        bbox_list.append((min_r, min_c, height, width, output_color, area))\n\n    # 4. Sort Objects by area (descending) then top-left corner\n    bbox_list.sort(key=lambda x: (-x[5], x[0], x[1]))\n\n    # 5. Arrange Objects in Output Grid\n    output_grid = []\n    current_row = []\n    current_row_width = 0\n\n    for min_r, min_c, height, width, output_color, _ in bbox_list:\n        if current_row and current_row_width + width > 8: # Limiting to width of largest example\n            output_grid.append(current_row)\n            current_row = []\n            current_row_width = 0\n\n        if not current_row:\n          row_height = height\n        else:\n          row_height = max(height, len(current_row))\n\n        new_row = np.zeros((row_height, width), dtype=int)\n        new_row[:] = output_color\n        if not current_row:\n            current_row = new_row\n        else:\n            # concatenate\n            padding_rows = row_height - len(current_row)\n            if padding_rows > 0:\n              current_row = np.concatenate([current_row, np.zeros((padding_rows, current_row.shape[1]))], axis=0)\n\n            padding_rows = row_height - len(new_row)\n            if padding_rows > 0:\n              new_row = np.concatenate([new_row, np.zeros((padding_rows, new_row.shape[1]))], axis=0)\n\n            current_row = np.concatenate([current_row, new_row], axis=1)\n        current_row_width += width\n\n    if current_row.size: # any remaining\n      output_grid.append(current_row)\n\n    # stack rows to get the final result\n    output_grid = np.vstack(output_grid).tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 11276,
    "candidates_token_count": 1229,
    "total_token_count": 12505,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 15.196965
}