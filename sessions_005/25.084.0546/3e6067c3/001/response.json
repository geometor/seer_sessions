{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Treat contiguous regions of the same non-background color (non-8) as distinct objects.\n2.  **Background Fill:**\n    *   Scan the input grid.\n    *   When a non-8 pixel is adjacent (horizontally or vertically, not diagonally) to an 8 (background) pixel, and it is part of a multi-pixel object of that color within its row :\n        * Duplicate that object color in all adjacent locations\n    * If a single color region exists on a previous row, check if that extends on to the current row. If not, then create a new object with the same pixels as background.\n\n3.  **Preserve Special Row:** The row containing single instances of colors 2-9 (usually the last row) is copied to the output without modification.\n4.  **Preserve Background:** Rows that are all background (all 8s) are copied without change, except in cases intersecting objects identified in step 2.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"Finds contiguous objects of the same color in a grid.\"\"\"\n    objects = []\n    visited = set()\n    rows, cols = grid.shape\n\n    def dfs(row, col, color, obj):\n        if (row, col) in visited or not (0 <= row < rows and 0 <= col < cols) or grid[row, col] != color:\n            return\n        visited.add((row, col))\n        obj.append((row, col))\n        dfs(row + 1, col, color, obj)\n        dfs(row - 1, col, color, obj)\n        dfs(row, col + 1, color, obj)\n        dfs(row, col - 1, color, obj)\n\n    for row in range(rows):\n        for col in range(cols):\n            if (row, col) not in visited and grid[row, col] != 8:\n                obj = []\n                dfs(row, col, grid[row, col], obj)\n                objects.append((grid[row, col], obj))  # Store color and object pixels\n    return objects\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the observed rules.\"\"\"\n    input_grid = np.array(input_grid)  # Ensure we're working with a NumPy array\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    objects = find_objects(input_grid)\n\n    # Background Fill and Object Replication\n    for r in range(rows):\n        for c in range(cols):\n            if output_grid[r,c] == 8:\n                for color, obj_pixels in objects:\n                    for pixel_r, pixel_c in obj_pixels:                       \n                        if (abs(r - pixel_r) + abs(c - pixel_c) == 1) and len([(pr,pc) for pr,pc in obj_pixels if pr == pixel_r]) > 1:\n                            output_grid[r,c] = color\n                            break\n\n    # Handle expansion from previous rows.\n    for r in range(1, rows):\n      for c in range(cols):\n        if output_grid[r,c] == 8:\n            \n          above_color = output_grid[r-1,c]\n          if above_color != 8:\n            # Check if there are any objects on current row with same color\n            found = False\n            for color, obj_pixels in objects:\n                for pixel_r, pixel_c in obj_pixels:\n                  if pixel_r == r and color == above_color:\n                    found=True\n                    break\n\n            if not found: # if not found extend the above color to the background\n                output_grid[r,c] = above_color\n    \n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7395,
    "candidates_token_count": 886,
    "total_token_count": 8281,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.438333
}