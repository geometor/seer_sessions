{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation rule involves identifying all distinct, contiguous regions of non-background\npixels, each considered an \"object.\" The background is the most frequent color. These objects are then stacked row-wise\nin the output grid, starting from the top row (row 0). The order of stacking is determined by\nreading the input grid in *reverse* row order (bottom to top). Within each object,\nthe objects' original horizontal (column) positions are preserved.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef find_objects(grid, background_color):\n    \"\"\"\n    Finds contiguous objects (same color pixels) in a grid, excluding the background color.\n\n    Args:\n        grid (np.array): The input grid.\n        background_color: The color of the background\n\n    Returns:\n        list: A list of objects, where each object is a list of (row, col) tuples.\n    \"\"\"\n    visited = set()\n    objects = []\n\n    def dfs(row, col, color, current_object):\n        if (row, col) in visited or not (0 <= row < grid.shape[0] and 0 <= col < grid.shape[1]) or grid[row, col] != color:\n            return\n        visited.add((row, col))\n        current_object.append((row, col))\n        dfs(row + 1, col, color, current_object)\n        dfs(row - 1, col, color, current_object)\n        dfs(row, col + 1, color, current_object)\n        dfs(row, col - 1, color, current_object)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if (row, col) not in visited and grid[row,col] != background_color:\n                current_object = []\n                dfs(row, col, grid[row, col], current_object)\n                objects.append(current_object)\n    return objects\n\ndef get_background_color(grid):\n    \"\"\"\n    Determine the background color based on the most frequent color in the grid\n    \"\"\"\n    # Flatten the grid and count color occurrences\n    color_counts = Counter(grid.flatten())\n    # Get the most common color (background color)\n    background_color = color_counts.most_common(1)[0][0]\n    return background_color\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by stacking objects row-wise from bottom to top.\n    \"\"\"\n    input_grid = np.array(input_grid)\n\n    # Determine the background color\n    background_color = get_background_color(input_grid)\n\n    output_grid = np.full(input_grid.shape, background_color)  # Initialize with background color\n\n    # Find objects, excluding background\n    objects = find_objects(input_grid, background_color)\n\n    # Sort objects by their *maximum* row index in *descending* order (bottom to top)\n    # and then by minimum row index. This ensures that objects lower in the\n    # grid are processed first, and among objects on the same row,\n    # the order is still maintained\n    objects.sort(key=lambda obj: (max(row for row, _ in obj), -min(row for row, _ in obj)), reverse=True)\n\n    current_row = 0\n    for obj in objects:\n        # Find min and max rows for this object\n        min_obj_row = min(row for row, _ in obj)\n        max_obj_row = max(row for row, _ in obj)\n        obj_height = max_obj_row - min_obj_row + 1\n\n        # Place the object in the output grid, preserving original column positions.\n        for row, col in obj:\n           output_grid[current_row + row - min_obj_row, col] = input_grid[row, col]\n        \n        current_row += obj_height\n        \n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 11167,
    "candidates_token_count": 926,
    "total_token_count": 12093,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.177355
}