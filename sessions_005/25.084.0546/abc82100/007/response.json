{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid into an output grid based on a combination of color swaps and\npositional/neighbor-based rules. The rules include:\n\n1.  **Color Swaps:**\n    *   If a pixel is color 2, it becomes color 1.\n    *   If a pixel is color 6, it becomes color 7.\n    *   If a pixel is color 7, it becomes color 6.\n\n2.  **Conditional Transformations:**\n    *   If a pixel is color 1 AND is adjacent to a pixel of color 2, it becomes color 2.\n        *   If a pixel is color 1 and is not adjacent to a pixel of color 2, it becomes color 0.\n    *   If a pixel is color 4:\n        *   If the pixel is on the top, bottom, left, or right edge of the *entire grid*, it becomes 2.\n        *   If a pixel of color '4' is not located on the outer edge of the grid, it will retain its color.\n    *   If a pixel is color 8, it becomes color 0.\n\n3.  **Object Removal**\n    *    Objects of color 8 are removed.\n\n4.  **Default:**\n    *   If a pixel is color 0, it remains color 0.\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, row, col):\n    \"\"\"Gets the neighbors of a cell, including diagonals.\"\"\"\n    neighbors = []\n    rows, cols = grid.shape\n    for i in range(max(0, row - 1), min(rows, row + 2)):\n        for j in range(max(0, col - 1), min(cols, col + 2)):\n            if (i, j) != (row, col):\n                neighbors.append(grid[i][j])\n    return neighbors\n\ndef is_adjacent_to(grid, row, col, target_color):\n    \"\"\"Checks if a cell is adjacent to a cell of a specific color.\"\"\"\n    neighbors = get_neighbors(grid, row, col)\n    return target_color in neighbors\n\ndef is_on_edge(grid, row, col):\n    \"\"\"Checks if a cell is on the edge of the grid.\"\"\"\n    rows, cols = grid.shape\n    return row == 0 or row == rows - 1 or col == 0 or col == cols - 1\n\ndef transform(input_grid):\n    # initialize output_grid with zeros, same dimensions as input.\n    output_grid = np.zeros_like(input_grid)\n    rows, cols = input_grid.shape\n\n    # iterate through each cell of input_grid\n    for i in range(rows):\n        for j in range(cols):\n            # Apply color mapping rules\n            if input_grid[i][j] == 0:\n                output_grid[i][j] = 0  # Keep 0 as 0\n            elif input_grid[i][j] == 1:\n                if is_adjacent_to(input_grid, i, j, 2):\n                    output_grid[i][j] = 2  # 1 becomes 2 if adjacent to 2\n                else:\n                    output_grid[i][j] = 0 # 1 becomes 0 otherwise\n            elif input_grid[i][j] == 2:\n                output_grid[i][j] = 1  # 2 becomes 1\n            elif input_grid[i][j] == 6:\n                output_grid[i][j] = 7  # 6 becomes 7\n            elif input_grid[i][j] == 7:\n                output_grid[i][j] = 6  # 7 becomes 6\n            elif input_grid[i][j] == 4:\n                if is_on_edge(input_grid, i, j):\n                    output_grid[i][j] = 2 # 4 becomes 2 if on edge\n                else:\n                    output_grid[i][j] = 4 # Otherwise, 4 remains unchanged\n            elif input_grid[i][j] == 8:\n                output_grid[i][j] = 0  # 8 becomes 0\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7924,
    "candidates_token_count": 975,
    "total_token_count": 8899,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.663586
}