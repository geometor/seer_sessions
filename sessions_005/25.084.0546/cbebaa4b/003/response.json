{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nRearrange colored objects within the grid, combining objects of the same color and placing them in the output grid from top to bottom, left to right.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"Finds all contiguous blocks of non-zero pixels.\"\"\"\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n\n    def dfs(r, c, color, obj):\n        if (r < 0 or r >= grid.shape[0] or c < 0 or c >= grid.shape[1] or\n                visited[r, c] or grid[r, c] != color):\n            return\n        visited[r, c] = True\n        obj.append((r, c))\n        dfs(r + 1, c, color, obj)\n        dfs(r - 1, c, color, obj)\n        dfs(r, c + 1, color, obj)\n        dfs(r, c - 1, color, obj)\n\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if not visited[r, c] and grid[r, c] != 0:\n                obj = []\n                dfs(r, c, grid[r, c], obj)\n                objects.append((grid[r, c], obj))  # Store color and object pixels\n    return objects\n\ndef transform(input_grid):\n    # Initialize output_grid as all zeros\n    output_grid = np.zeros_like(input_grid)\n    rows, cols = input_grid.shape\n\n    # Find objects in the input grid\n    objects = find_objects(input_grid)\n\n    # Create a dictionary to store the count of each color\n    color_counts = {}\n    for color, _ in objects:\n        color_counts[color] = color_counts.get(color, 0) + 1\n\n    #consolidate by size\n    color_counts_by_size = {}\n    for color, obj in objects:\n      color_counts_by_size[color] = color_counts_by_size.get(color,0) + len(obj)\n    \n\n    # Get the list of colors present\n    colors_present = sorted(list(color_counts_by_size.keys()))\n    \n    row_idx = 0\n    col_idx = 0\n    # Iterate through output grid cells\n    \n    while True:\n      placed = False\n      for color in colors_present:\n        if color_counts_by_size[color] > 0:\n              output_grid[row_idx,col_idx] = color\n              color_counts_by_size[color] -= 1\n              placed = True\n      \n      if not placed:\n         break\n\n      col_idx += 1\n      if col_idx >= cols:\n        col_idx = 0\n        row_idx += 1\n        if row_idx >= rows:\n            break\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 21117,
    "candidates_token_count": 696,
    "total_token_count": 21813,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.820961
}