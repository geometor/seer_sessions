{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by preserving only the largest vertically and horizontally connected component of each non-background color.\nThe background color is assumed to be the most frequent color in the grid.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef find_background_color(grid):\n    \"\"\"\n    Finds the most frequent color in the grid, assumed to be the background.\n    \"\"\"\n    flat_grid = grid.flatten()\n    color_counts = Counter(flat_grid)\n    return color_counts.most_common(1)[0][0]\n\ndef get_connected_component(grid, r, c, color, visited):\n    \"\"\"\n    Performs a depth-first search to find a connected component.\n    Returns a set of (row, col) tuples representing the component.\n    \"\"\"\n    rows, cols = grid.shape\n    if (r, c) in visited or grid[r, c] != color:\n        return set()\n\n    visited.add((r, c))\n    component = {(r, c)}\n\n    # Explore adjacent cells\n    if r > 0:\n        component.update(get_connected_component(grid, r - 1, c, color, visited))\n    if r < rows - 1:\n        component.update(get_connected_component(grid, r + 1, c, color, visited))\n    if c > 0:\n        component.update(get_connected_component(grid, r, c - 1, color, visited))\n    if c < cols - 1:\n        component.update(get_connected_component(grid, r, c + 1, color, visited))\n\n    return component\n\ndef find_largest_component(grid, color):\n    \"\"\"\n    Finds the largest connected component of a given color in the grid.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = set()\n    largest_component = set()\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == color and (r, c) not in visited:\n                component = get_connected_component(grid, r, c, color, visited)\n                if len(component) > len(largest_component):\n                    largest_component = component\n\n    return largest_component\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by eroding non-background shapes to their largest connected component.\n    \"\"\"\n    # Convert input to numpy array\n    input_grid = np.array(input_grid)\n    output_grid = np.copy(input_grid)\n    background_color = find_background_color(input_grid)\n\n    rows, cols = input_grid.shape\n\n    # Create a set of all colors present in the grid\n    all_colors = set(input_grid.flatten())\n\n    # For each non-background color, find the largest component\n    for color in all_colors:\n      if color != background_color:\n        largest_component = find_largest_component(input_grid, color)\n\n        #set all pixels of that color to background\n        for r in range(rows):\n            for c in range(cols):\n                if input_grid[r,c] == color:\n                    output_grid[r,c] = background_color\n\n        #set largest component pixels back to correct color\n        for r, c in largest_component:\n            output_grid[r,c] = color\n\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 11407,
    "candidates_token_count": 798,
    "total_token_count": 12205,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 14.608887
}