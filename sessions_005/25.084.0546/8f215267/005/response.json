{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by eroding shapes to their vertically and horizontally connected cores, removing isolated pixels and stray lines.\nThe background color is assumed to be the most frequent color in the grid.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef find_background_color(grid):\n    \"\"\"\n    Finds the most frequent color in the grid, assumed to be the background.\n    \"\"\"\n    flat_grid = grid.flatten()\n    color_counts = Counter(flat_grid)\n    return color_counts.most_common(1)[0][0]\n\ndef is_connected(grid, r, c, color):\n    \"\"\"\n    Checks if a pixel at (r, c) is connected (horizontally or vertically) to another pixel of the same color.\n    \"\"\"\n    rows, cols = grid.shape\n    # Check above\n    if r > 0 and grid[r-1, c] == color:\n        return True\n    # Check below\n    if r < rows - 1 and grid[r+1, c] == color:\n        return True\n    # Check left\n    if c > 0 and grid[r, c-1] == color:\n        return True\n    # Check right\n    if c < cols - 1 and grid[r, c+1] == color:\n        return True\n    return False\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by eroding non-background shapes.\n    \"\"\"\n    # Convert input to numpy array\n    input_grid = np.array(input_grid)\n    output_grid = np.copy(input_grid)\n    background_color = find_background_color(input_grid)\n\n    rows, cols = input_grid.shape\n\n    # Iterate through all pixels\n    for r in range(rows):\n        for c in range(cols):\n            color = input_grid[r, c]\n            if color != background_color:\n                # Check if the pixel is connected to any neighbors of the same color\n                if not is_connected(input_grid, r, c, color):\n                    output_grid[r, c] = background_color #remove isolated pixels\n                else: #check for horizontal lines\n                    line_start = c\n                    while c < cols and input_grid[r,c] == color:\n                      c += 1\n                    line_end = c\n                    if line_end - line_start > 1:\n                      #if any in line is not vertically connected, then set entire line to background\n                      remove = False\n                      for i in range(line_start, line_end):\n                        if not (r > 0 and input_grid[r-1,i] == color) and not (r < rows-1 and input_grid[r+1, i] == color):\n                          remove = True\n                          break\n                      if remove:\n                        output_grid[r,line_start:line_end] = background_color\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 11558,
    "candidates_token_count": 681,
    "total_token_count": 12239,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.264874
}