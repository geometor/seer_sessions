{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. **Divide into Patterns:** Split the input grid into patterns separated by rows of all white (0) pixels.\n2. **Identify Central Bands:** For each pattern, find the central three rows. If a pattern has fewer than 3 rows, consider the entire pattern as the central band.\n3. **Conditional Band Swapping/Retention:**\n   - If there are 3 or more patterns:\n     - The central band of pattern 1 is replaced by the central band of pattern 2.\n     - The central band of pattern 2 is replaced by the central band of pattern 3.\n     - The central band of the last pattern is swapped with first.\n   - If there are fewer than 3 patterns, retain the central bands of all patterns.\n4. **Reconstruct Output:** Form the output grid by combining the modified central bands and separator rows.\n\"\"\"\n\nimport numpy as np\n\ndef find_patterns(grid):\n    \"\"\"Splits the grid into patterns separated by white rows.\"\"\"\n    white_rows = [i for i, row in enumerate(grid) if np.all(row == 0)]\n    patterns = []\n    start = 0\n    for i in white_rows:\n        patterns.append((start, i))\n        start = i + 1\n    patterns.append((start, len(grid)))  # Last pattern\n    return patterns\n\ndef get_central_band(grid, pattern):\n    \"\"\"Extracts the central three rows of a pattern.\"\"\"\n    start, end = pattern\n    num_rows = end - start\n    if num_rows <= 3:\n        return grid[start:end]  # Return entire pattern if it's 3 rows or less\n    \n    central_start = start + (num_rows - 3) // 2\n    central_end = central_start + 3\n    return grid[central_start:central_end]\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the pattern-based band swapping rules.\"\"\"\n    output_grid = np.copy(input_grid)\n    patterns = find_patterns(input_grid)\n    num_patterns = len(patterns)\n    central_bands = [get_central_band(input_grid, p) for p in patterns]\n\n    if num_patterns >= 3:\n        # Swap bands \n        new_central_bands = central_bands.copy()\n        for i in range(num_patterns - 1):\n            new_central_bands[i] = central_bands[i+1]\n        new_central_bands[num_patterns-1] = central_bands[0]\n\n        for i in range(num_patterns):  # Ensure we don't go out of bounds\n            start, end = patterns[i]\n            num_rows = end-start\n            if num_rows <=3:\n              continue\n            central_start = start + (num_rows - 3) // 2\n            central_end = central_start + 3\n            \n            output_grid[central_start:central_end] = new_central_bands[i]\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 17355,
    "candidates_token_count": 708,
    "total_token_count": 18063,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.532205
}