{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid based on contextual color changes and object manipulations.\n\nThe transformation rules are as follows:\n\n1. All background pixels (color 0) are changed to color 1.\n2. Objects of color 2 enclosed by color 3 are split vertically. The top half becomes color 8, and the bottom half becomes color 0.\n3. Objects of color 1 and 4, enclosed by color 8, are treated as a single unit and reflected. The combined shape is flipped horizontally and vertically,\n    with color 1 becoming 4 and color 4 becoming 1 during the flip.\n4. Color 4 objects enclosed by colors 1, 2, or 3 remain unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"\n    Identifies distinct objects within the grid.\n\n    Args:\n        grid: A 2D numpy array representing the grid.\n\n    Returns:\n        A list of objects, where each object is a set of (row, col) tuples.\n    \"\"\"\n    objects = []\n    visited = set()\n    rows, cols = grid.shape\n\n    def dfs(row, col, current_object, color):\n        if (row, col) in visited or not (0 <= row < rows and 0 <= col < cols) or grid[row, col] != color:\n            return\n        visited.add((row, col))\n        current_object.add((row, col))\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            dfs(row + dr, col + dc, current_object, color)\n\n    for row in range(rows):\n        for col in range(cols):\n            if (row, col) not in visited:\n                current_object = set()\n                dfs(row, col, current_object, grid[row, col])\n                if len(current_object) > 0:\n                    objects.append(current_object)\n    return objects\n\ndef is_enclosed(object_coords, grid):\n    \"\"\"\n    Checks if an object is fully enclosed by another single color.\n\n    Returns:\n      The enclosing color if enclosed, otherwise None.\n    \"\"\"\n    rows, cols = grid.shape\n    neighbor_colors = set()\n\n    for row, col in object_coords:\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = row + dr, col + dc\n            if not (0 <= nr < rows and 0 <= nc < cols):\n                return None  # Touching edge\n            if (nr, nc) not in object_coords:\n                neighbor_colors.add(grid[nr, nc])\n\n    if len(neighbor_colors) == 1:\n        return neighbor_colors.pop()\n    else:\n        return None\n\ndef get_bounding_box(coords):\n    \"\"\"\n    Returns the bounding box of a set of coordinates as (min_row, min_col, max_row, max_col).\n    \"\"\"\n    if not coords:\n        return None\n    min_row = min(r for r, _ in coords)\n    min_col = min(c for _, c in coords)\n    max_row = max(r for r, _ in coords)\n    max_col = max(c for _, c in coords)\n    return (min_row, min_col, max_row, max_col)\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation to the input grid.\n    \"\"\"\n    output_grid = input_grid.copy()\n    rows, cols = output_grid.shape\n    objects = find_objects(input_grid)\n\n    # Apply contextual color changes based on enclosure\n    for obj in objects:\n        enclosing_color = is_enclosed(obj, input_grid)\n        if enclosing_color is not None:\n            first_coord = list(obj)[0]\n            obj_color = input_grid[first_coord]\n\n            # Example 1: Color 2 regions within color 3 regions become color 8 or color 0 based on relative location\n            if obj_color == 2 and enclosing_color == 3:\n                min_row, min_col, max_row, max_col = get_bounding_box(obj)\n                center_row = (min_row + max_row) // 2\n\n                for row, col in obj:\n                    if row < center_row:\n                        output_grid[row, col] = 8\n                    else:\n                        output_grid[row, col] = 0\n\n            # Example 2: Color 4 and 1 inside 8.  Flipping and color changes.\n            elif obj_color in (1, 4) and enclosing_color == 8:\n                # Get bounding box\n                min_row, min_col, max_row, max_col = get_bounding_box(obj)\n\n                # Create a copy of the object coordinates to avoid modifying during iteration\n                coords = list(obj)\n\n                for r, c in coords:\n                    # Reflect across the horizontal center\n                    new_row = (max_row - (r - min_row))\n\n                    # Reflect across vertical center\n                    new_col = (max_col - (c - min_col))\n\n                    #Check if reflected location is in original object\n                    if (new_row, new_col) not in obj:\n                        continue\n                    \n                    # only do this to objects of color 1 or 4 within 8\n                    if (r,c) in obj:\n\n                        # Apply color changes based on original color\n                        if input_grid[r, c] == 1:\n                            output_grid[new_row, new_col] = 4\n                        elif input_grid[r, c] == 4:\n                            output_grid[new_row, new_col] = 1\n\n\n            # Example 3: \"Color 4 surrounded by 1, 2, or 3 remains 4\"\n            elif obj_color == 4 and enclosing_color in [1, 2, 3]:\n                for row, col in obj:\n                    output_grid[row, col] = 4  # Keep as 4\n\n    # Apply background color change (observed in example 3) - ALL 0 become 1\n    for r in range(rows):\n        for c in range(cols):\n            if output_grid[r,c] == 0:\n                output_grid[r,c] = 1\n                \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 12959,
    "candidates_token_count": 1517,
    "total_token_count": 14476,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 15.254227
}