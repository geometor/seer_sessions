{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Regions:** Find all contiguous regions of non-azure pixels in the input grid. Each region is defined by a list of `(row, column)` coordinates and its color.\n\n2.  **Check for Top Empty Rows:** For each region, determine if its topmost row in the *original* input grid consisted *only* of azure pixels.\n\n3.  **Stack Regions:** Stack the regions in the output grid. The regions will retain their original shapes.\n    *   Regions should appear from top to bottom, based on the order of their topmost row in the input grid. Regions with lower row numbers are stacked higher.\n    *   Regions where the top row was all azure in the *original* input grid should *not* be moved; they remain in their original positions.\n    *   Regions will stack starting at the top and moving down\n\n4.  **Output:** Create the output grid with azure as the background. Place the regions according to the stacking rules, overriding the background color where regions are placed.\n\"\"\"\n\nimport numpy as np\n\ndef get_colored_regions(grid):\n    \"\"\"\n    Identifies and returns a list of colored regions (non-azure pixels).\n    Each region is a tuple: (list of (row, col) tuples, color).\n    \"\"\"\n    regions = []\n    visited = set()\n    rows, cols = grid.shape\n\n    def _dfs(row, col, current_region, color):\n        if (row, col) in visited or not (0 <= row < rows and 0 <= col < cols) or grid[row, col] != color:\n            return\n        visited.add((row, col))\n        current_region.append((row, col))\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            _dfs(row + dr, col + dc, current_region, color)\n\n    for row in range(rows):\n        for col in range(cols):\n            if grid[row, col] != 8 and (row, col) not in visited:\n                current_region = []\n                _dfs(row, col, current_region, grid[row, col])\n                regions.append((current_region, grid[row, col]))  # Store color with region\n    return regions\n\ndef is_top_row_empty(grid, region_coords):\n    \"\"\"Checks if the topmost row of a region contains only azure pixels.\"\"\"\n    top_row = min(r for r, _ in region_coords)\n    for col in range(grid.shape[1]):\n        if (top_row, col) in region_coords: # important to check if in region\n          if grid[top_row,col] != 8:\n              return False\n    return True\n\ndef stack_regions(regions, grid_shape, input_grid):\n    \"\"\"Stacks regions, preserving shape, based on original vertical order.\"\"\"\n    output_grid = np.full(grid_shape, 8, dtype=int)  # Initialize with azure\n    current_row = 0\n\n    # Sort regions by their topmost row in the original grid\n    sorted_regions = sorted(regions, key=lambda item: min(row for row, _ in item[0]))\n\n    for region_coords, color in sorted_regions:\n        top_row = min(r for r, _ in region_coords)\n        region_height = max(r for r, _ in region_coords) - top_row + 1\n\n        if not is_top_row_empty(input_grid, region_coords):\n            # Calculate the row offset for stacking\n            row_offset = current_row - top_row\n\n            # Place the region in the output grid\n            for row, col in region_coords:\n                new_row = row + row_offset\n                if 0 <= new_row < grid_shape[0]: # boundary check\n                  output_grid[new_row, col] = color\n\n            current_row += region_height  # Update current_row for the next region\n        else:\n          # Keep in original position\n          for row, col in region_coords:\n            output_grid[row,col] = color\n    return output_grid\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the observed rules.\n    \"\"\"\n    grid = np.array(input_grid)\n    rows, cols = grid.shape\n\n    # 1. Identify colored regions\n    regions = get_colored_regions(grid)\n\n    # 2 & 3. Stack regions, handling the top-empty condition\n    output_grid = stack_regions(regions, grid.shape, grid)\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4456,
    "candidates_token_count": 1069,
    "total_token_count": 5525,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 13.689559
}