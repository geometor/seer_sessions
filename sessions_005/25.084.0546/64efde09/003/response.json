{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify the Top Row Pattern:** Examine the first row (the top row) of the input grid. Note the colors and their order, excluding any azure (8) pixels. This forms the \"top row pattern\".\n2.  **Row Matching:** Iterate through each row of the input grid (excluding the top row itself).\n3.  **Conditional Row Transformation**: For each row:\n    - Compare the colors of the current row (excluding azure pixels), with the \"top row pattern\" (also excluding azure).\n    - If the non-azure colors of the current row exactly match the top row non-azure pattern, the row is eligible for transformation.\n\n4.  **Segment-Based Propagation:** Within each *transformed* row:\n    - Identify segments. A segment is defined as consecutive pixels of same value.\n    - Iterate over the segments. For segments that are *not* azure:\n       - For each non-azure pixel in the segment, copy its value downwards through all subsequent rows in the output grid, within the same column. If the pixel in same column is transformed later, it overwrites the previous value.\n5.  **Preserve Unmatched Rows**: If a row in the input grid does *not* match the top row pattern (excluding azure pixels), it is copied to the output grid *unchanged*.\n\"\"\"\n\nimport numpy as np\n\ndef get_non_azure_pattern(row):\n    \"\"\"Extracts the non-azure pattern from a row.\"\"\"\n    return row[row != 8]\n\ndef get_segments(row):\n    \"\"\"Identifies segments in row\"\"\"\n    segments = []\n    if not row.size:  # Handle empty rows\n        return segments\n\n    current_segment = [row[0]]\n    for i in range(1, len(row)):\n        if row[i] == current_segment[-1]:\n            current_segment.append(row[i])\n        else:\n            segments.append((current_segment[-1], len(current_segment))) # value, length\n            current_segment = [row[i]]\n    segments.append((current_segment[-1], len(current_segment))) # Append the last segment\n\n    # Return segment starting positions\n    segment_positions = []\n    current_pos = 0\n    for value, length in segments:\n        segment_positions.append( (value, current_pos, length) )\n        current_pos += length\n    return segment_positions\n\ndef transform(input_grid):\n    input_grid = np.array(input_grid)\n    output_grid = np.copy(input_grid)\n    height, width = input_grid.shape\n\n    # 1. Identify Top Row Pattern\n    top_row_pattern = get_non_azure_pattern(input_grid[0])\n\n    # 2. & 3. Row Matching and Conditional Transformation\n    for y in range(height):\n        current_row_pattern = get_non_azure_pattern(input_grid[y])\n        if np.array_equal(current_row_pattern, top_row_pattern):\n            # Transform the row to match top row (including azures).\n            transformed_row = np.copy(input_grid[0])\n\n            # 4. Segment-Based Propagation\n            segments = get_segments(transformed_row)\n            for value, start_x, length in segments:\n                if value != 8:  # Non-azure segment\n                    for x in range(start_x,start_x + length):\n                        for row_below in range(y + 1, height):\n                            output_grid[row_below, x] = value\n            output_grid[y] = transformed_row # set transformed row\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 14556,
    "candidates_token_count": 841,
    "total_token_count": 15397,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 13.871855
}