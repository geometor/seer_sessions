{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Divide the input grid into distinct rectangular objects based on contiguous regions of the same color, excluding white (0).\n2.  **Categorize by Initial Position:** Divide these objects into four positional groups: Top-Left (azure, grey, green), Top-Right (red, blue, maroon), Middle-Left (magenta, yellow), and other groups as applicable\n3.  **Apply Transformations:**\n    *   Objects starting in the \"Top-Left\" move to \"Middle-Left\" keeping the original size and the same nesting with the relative nesting.\n    *    Objects starting in the \"Top-Right\" move to the \"Middle-Right\", keeping the original size and the same nesting with the relative nesting.\n    *   Objects starting in \"Middle-Left\" move to \"Bottom-Middle\", keeping the original size and the same nesting with the relative nesting.\n4. **Reconstruct Grid:** Combine the transformed objects, filling any remaining space with white (0), to create the output grid.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"\n    Finds distinct objects in the grid.\n    \"\"\"\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n\n    def dfs(r, c, color, object_pixels):\n        if (r < 0 or r >= grid.shape[0] or c < 0 or c >= grid.shape[1] or\n                visited[r, c] or grid[r, c] != color):\n            return\n        visited[r, c] = True\n        object_pixels.append((r, c))\n        dfs(r + 1, c, color, object_pixels)\n        dfs(r - 1, c, color, object_pixels)\n        dfs(r, c + 1, color, object_pixels)\n        dfs(r, c - 1, color, object_pixels)\n\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if not visited[r, c] and grid[r, c] != 0:\n                object_pixels = []\n                dfs(r, c, grid[r, c], object_pixels)\n                if object_pixels:\n                    objects.append({\n                        'color': grid[r, c],\n                        'pixels': object_pixels\n                    })\n    return objects\n\ndef categorize_objects(objects, grid_shape):\n    \"\"\"\n    Categorizes objects based on their initial position.\n    \"\"\"\n    top_left = []\n    top_right = []\n    middle_left = []\n    other = []\n\n    for obj in objects:\n        min_r, min_c = float('inf'), float('inf')\n        for r, c in obj['pixels']:\n            min_r = min(min_r, r)\n            min_c = min(min_c, c)\n\n        if min_r < grid_shape[0] // 3 and min_c < grid_shape[1] // 2:\n            top_left.append(obj)\n        elif min_r < grid_shape[0] / 3 and min_c >= grid_shape[1] // 2:\n            top_right.append(obj)\n        elif min_r < grid_shape[0] * (2/3) and min_c < grid_shape[1] /2 and min_r >= grid_shape[0] / 3:\n            middle_left.append(obj)\n        \n        else:\n            other.append(obj) #Consider other cases for generalization.\n    return top_left, top_right, middle_left, other\n\ndef move_objects(objects, grid_shape, category):\n   \n    moved_objects = []\n\n    for obj in objects:\n        new_pixels = []\n        if category == \"top_left\":  # move_down_left\n              # Calculate the offset needed to shift the object\n            min_row = min([r for r, c in obj['pixels']])\n            min_col = min([c for r, c in obj['pixels']])\n            max_row = max([r for r,c in obj['pixels']])\n\n            row_offset =  (grid_shape[0] // 3) - min_row\n            \n            #Calculate new pixel coordinates.            \n            for r, c in obj['pixels']:                \n                new_pixels.append((r + row_offset , c))\n\n        elif category == \"top_right\": #move down right\n              # Calculate the offset needed to shift the object\n            min_row = min([r for r, c in obj['pixels']])\n            min_col = min([c for r, c in obj['pixels']])\n            max_row = max([r for r,c in obj['pixels']])\n            max_col = max([c for r, c in obj['pixels']])\n\n            row_offset = (grid_shape[0]//3) - min_row\n            col_offset = 0\n            \n            #Calculate new pixel coordinates.            \n            for r, c in obj['pixels']:                \n                new_pixels.append((r + row_offset, c))\n        elif category == \"middle_left\": #bottom middle\n            min_row = min([r for r, c in obj['pixels']])\n            min_col = min([c for r, c in obj['pixels']])\n            row_offset =  grid_shape[0] * (2/3) - min_row\n            for r, c in obj['pixels']:\n                new_pixels.append((r + row_offset,c ))\n        else:\n             new_pixels = obj['pixels']\n\n        moved_objects.append({\n            'color': obj['color'],\n            'pixels': new_pixels\n        })\n    return moved_objects\n\ndef reconstruct_grid(moved_objects, original_grid_shape):\n    \"\"\"Reconstructs the grid from the transformed objects.\"\"\"\n    new_grid = np.zeros(original_grid_shape, dtype=int)\n    for obj in moved_objects:\n        for r, c in obj['pixels']:\n            if 0 <= r < original_grid_shape[0] and 0 <= c < original_grid_shape[1]: #Boundary check\n                new_grid[r, c] = obj['color']\n    return new_grid\n    \n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.zeros_like(input_grid)\n    original_grid_shape = input_grid.shape\n\n    # Find objects\n    objects = find_objects(input_grid)\n\n    # catagorize objects\n    top_left, top_right, middle_left, other = categorize_objects(objects, original_grid_shape)\n\n     # Move objects based on category.\n    moved_top_left = move_objects(top_left, original_grid_shape, \"top_left\")\n    moved_top_right = move_objects(top_right, original_grid_shape, \"top_right\")\n    moved_middle_left = move_objects(middle_left, original_grid_shape, \"middle_left\")\n    moved_other = move_objects(other, original_grid_shape, \"other\")\n\n    # Combine moved objects\n    all_moved_objects = moved_top_left + moved_top_right + moved_middle_left + moved_other\n\n     # Reconstruct the grid\n    output_grid = reconstruct_grid(all_moved_objects, original_grid_shape)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7787,
    "candidates_token_count": 1731,
    "total_token_count": 9518,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 24.411696
}