{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Object Identification:** Identify distinct objects (contiguous same-color pixels, excluding white).\n2.  **Object Categorization:** Categorize objects based on their initial position (top_left, top_right, middle_left, other).\n3.  **Object Transformation (Movement):** Move objects based on their category:\n    *   `top_left` objects move down to the middle_left area.\n    *   `top_right` objects move down to the middle_right area.\n    *   `middle_left` objects move to the bottom_middle area.\n    *   `other` objects remain in their original positions.\n4.  **Grid Reconstruction:** Create a new grid and place transformed objects, filling the rest with white (0).\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"Finds distinct objects in the grid.\"\"\"\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n\n    def dfs(r, c, color, object_pixels):\n        if (r < 0 or r >= grid.shape[0] or c < 0 or c >= grid.shape[1] or\n                visited[r, c] or grid[r, c] != color):\n            return\n        visited[r, c] = True\n        object_pixels.append((r, c))\n        dfs(r + 1, c, color, object_pixels)\n        dfs(r - 1, c, color, object_pixels)\n        dfs(r, c + 1, color, object_pixels)\n        dfs(r, c - 1, color, object_pixels)\n\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if not visited[r, c] and grid[r, c] != 0:\n                object_pixels = []\n                dfs(r, c, grid[r, c], object_pixels)\n                if object_pixels:\n                    objects.append({\n                        'color': grid[r, c],\n                        'pixels': object_pixels\n                    })\n    return objects\n\ndef categorize_objects(objects, grid_shape):\n    \"\"\"Categorizes objects based on their initial position.\"\"\"\n    top_left = []\n    top_right = []\n    middle_left = []\n    other = []\n\n    for obj in objects:\n        min_r, min_c = float('inf'), float('inf')\n        for r, c in obj['pixels']:\n            min_r = min(min_r, r)\n            min_c = min(min_c, c)\n\n        if min_r < grid_shape[0] // 3 and min_c < grid_shape[1] // 2:\n            top_left.append(obj)\n        elif min_r < grid_shape[0] // 3 and min_c >= grid_shape[1] // 2:\n            top_right.append(obj)\n        elif min_r < grid_shape[0] * (2 / 3) and min_c < grid_shape[1] // 2 and min_r >= grid_shape[0] // 3:\n            middle_left.append(obj)\n        else:\n            other.append(obj)\n    return top_left, top_right, middle_left, other\n\ndef move_objects(objects, grid_shape, category):\n    \"\"\"Moves objects based on their category.\"\"\"\n    moved_objects = []\n\n    for obj in objects:\n        new_pixels = []\n        if category == \"top_left\":\n            min_row = min([r for r, c in obj['pixels']])\n            row_offset = (grid_shape[0] // 3) - min_row\n            for r, c in obj['pixels']:\n                new_pixels.append((r + row_offset, c))  # Integer addition\n\n        elif category == \"top_right\":\n            min_row = min([r for r, c in obj['pixels']])\n            row_offset = (grid_shape[0] // 3) - min_row\n            for r, c in obj['pixels']:\n                new_pixels.append((r + row_offset, c))  # Integer addition\n\n        elif category == \"middle_left\":\n            min_row = min([r for r, c in obj['pixels']])\n            row_offset = (grid_shape[0] * 2 // 3) - min_row  # Integer division\n            for r, c in obj['pixels']:\n                new_pixels.append((r + row_offset, c))\n\n        else:\n            new_pixels = obj['pixels']  # No movement for 'other'\n\n        moved_objects.append({\n            'color': obj['color'],\n            'pixels': new_pixels\n        })\n    return moved_objects\n\ndef reconstruct_grid(moved_objects, original_grid_shape):\n    \"\"\"Reconstructs the grid from the transformed objects.\"\"\"\n    new_grid = np.zeros(original_grid_shape, dtype=int)\n    for obj in moved_objects:\n        for r, c in obj['pixels']:\n            if 0 <= r < original_grid_shape[0] and 0 <= c < original_grid_shape[1]:\n                new_grid[r, c] = obj['color']\n    return new_grid\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the defined rules.\"\"\"\n    original_grid_shape = input_grid.shape\n    objects = find_objects(input_grid)\n    top_left, top_right, middle_left, other = categorize_objects(objects, original_grid_shape)\n    moved_top_left = move_objects(top_left, original_grid_shape, \"top_left\")\n    moved_top_right = move_objects(top_right, original_grid_shape, \"top_right\")\n    moved_middle_left = move_objects(middle_left, original_grid_shape, \"middle_left\")\n    moved_other = move_objects(other, original_grid_shape, \"other\")\n    all_moved_objects = moved_top_left + moved_top_right + moved_middle_left + moved_other\n    output_grid = reconstruct_grid(all_moved_objects, original_grid_shape)\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 9144,
    "candidates_token_count": 1468,
    "total_token_count": 10612,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 16.707887
}