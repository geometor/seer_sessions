{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid by selectively changing the color of certain objects based on their position and connectivity. The transformation identifies one instance of each color (excluding the background colors 7, 8, and 9) and preserves it, while changing the color of other connected objects of the same color. The color changes follow specific rules: 1 becomes 3, and 0, 4, or 6 become 5. Colors 2, 3, and 7 remain unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"\n    Finds all distinct objects in the grid.  Includes diagonal connections.\n    \"\"\"\n    objects = {}\n    visited = set()\n    rows, cols = len(grid), len(grid[0])\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def dfs(r, c, color, obj):\n        if (r, c) in visited or not is_valid(r, c) or grid[r][c] != color:\n            return\n        visited.add((r, c))\n        obj.append((r, c))\n        # Include diagonal neighbors\n        for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0), (1, 1), (-1, -1), (1, -1), (-1, 1)]:\n            dfs(r + dr, c + dc, color, obj)\n\n    for r in range(rows):\n        for c in range(cols):\n            color = grid[r][c]\n            if (r, c) not in visited and color not in [7, 8, 9]:\n                obj = []\n                dfs(r, c, color, obj)\n                if color not in objects:\n                    objects[color] = []\n                objects[color].append(obj)\n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation to the input grid.\n    \"\"\"\n    grid = np.array(input_grid)  # Convert to numpy array for easier manipulation\n    output_grid = np.copy(grid)  # Initialize output_grid as a copy of input_grid\n    objects = find_objects(grid)\n\n    for color, obj_list in objects.items():\n      if not obj_list:\n        continue\n\n      # Select the *first* object in the list as the one to preserve\n      preserved_obj = obj_list[0]\n\n      # iterate through other objects to change color\n      for obj in obj_list:\n        if obj != preserved_obj: # do not recolor the preserved object\n          for r,c in obj:\n            if color == 1:\n              output_grid[r][c] = 3\n            elif color in [0,4,6]:\n              output_grid[r][c] = 5\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8012,
    "candidates_token_count": 673,
    "total_token_count": 8685,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.031467
}