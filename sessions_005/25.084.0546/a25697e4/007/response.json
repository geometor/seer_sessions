{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid based on the presence of a top-most 2x2 red block. If present, objects below it are mirrored above it, and objects above are copied. If not present, all objects are mirrored across the vertical center of all non-blue pixels. Lower objects have priority in case of overlap.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"\n    Finds contiguous objects in the grid, excluding blue pixels.\n    Returns a list of tuples: (color, bounding_box, object_pixels).\n    bounding_box is a tuple: (min_row, min_col, max_row, max_col)\n    \"\"\"\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n\n    def dfs(row, col, color, current_object):\n        if (row < 0 or row >= grid.shape[0] or col < 0 or col >= grid.shape[1] or\n                visited[row, col] or grid[row, col] != color):\n            return\n        visited[row, col] = True\n        current_object.append((row, col))\n        dfs(row + 1, col, color, current_object)\n        dfs(row - 1, col, color, current_object)\n        dfs(row, col + 1, color, current_object)\n        dfs(row, col - 1, color, current_object)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if not visited[row, col] and grid[row, col] != 1:\n                current_object = []\n                dfs(row, col, grid[row, col], current_object)\n                if current_object: #make sure the object is not empty\n                    min_row = min(r for r, _ in current_object)\n                    max_row = max(r for r, _ in current_object)\n                    min_col = min(c for _, c in current_object)\n                    max_col = max(c for _, c in current_object)\n                    bounding_box = (min_row, min_col, max_row, max_col)\n                    objects.append((grid[row, col], bounding_box, current_object))\n    return objects\n\ndef find_topmost_red_block(grid):\n    \"\"\"Finds the topmost 2x2 red block's top-left coordinates.\"\"\"\n    for r in range(grid.shape[0] - 1):\n        for c in range(grid.shape[1] - 1):\n            if (grid[r, c] == 2 and grid[r + 1, c] == 2 and\n                grid[r, c + 1] == 2 and grid[r + 1, c + 1] == 2):\n                return r, c\n    return None\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the mirroring rule.\n    \"\"\"\n    input_grid = np.array(input_grid)\n    output_grid = np.ones_like(input_grid)  # Initialize with blue (1)\n\n    objects = find_objects(input_grid)\n    red_block_coords = find_topmost_red_block(input_grid)\n\n    if red_block_coords is not None:\n        red_row, red_col = red_block_coords\n        reference_row = red_row - 1 #mirror above red block\n\n        # Sort objects by their maximum row (lowest object first).\n        objects.sort(key=lambda x: x[1][2], reverse=False)\n\n        for color, bbox, obj in objects:\n            min_r, _, max_r, _ = bbox\n            if min_r <= reference_row:  # Object is above or at the red block, just copy\n                for r, c in obj:\n                    output_grid[r, c] = color\n            else:  # Object is below the red block: mirror\n                for r, c in obj:\n                    dist_to_ref = r - reference_row\n                    new_row = reference_row - dist_to_ref\n                    if 0 <= new_row < output_grid.shape[0]:\n                        output_grid[new_row, c] = color\n    else:\n        # No red block: Mirror all objects relative to grid's vertical center.\n        object_rows = []\n        for _, bbox, _ in objects:\n            object_rows.extend(list(range(bbox[0],bbox[2]+1)))\n\n\n        if len(object_rows) > 0:\n\n            min_row = min(object_rows)\n            max_row = max(object_rows)\n            center_row = (min_row + max_row) / 2\n\n        else:\n            return input_grid.tolist() #return if no objects found\n\n        # Sort objects by their maximum row (lowest object first)\n        objects.sort(key=lambda x: x[1][2], reverse = False)\n        for color, _, obj in objects: #no need to use bbox\n            for r, c in obj:\n                dist_to_center = r - center_row\n                new_row = int(round(center_row - dist_to_center))\n                if 0 <= new_row < output_grid.shape[0]:\n                    output_grid[new_row, c] = color\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 12225,
    "candidates_token_count": 1268,
    "total_token_count": 13493,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 19.067859
}