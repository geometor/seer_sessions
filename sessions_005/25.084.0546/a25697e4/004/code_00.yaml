task_id: example_set_analysis
observations:
  example_1:
    input:
      objects:
        - color: 3  # Green
          bounding_box: [1, 18, 4, 19]  # [min_row, min_col, max_row, max_col]
          shape: irregular
          relation_to_red_block: above
        - color: 4  # Yellow
          bounding_box: [5, 18, 10, 20]
          shape: irregular
          relation_to_red_block: below
        - color: 2  # Red (2x2 block)
          bounding_box: [6, 0, 7, 3]
          shape: rectangle
          relation_to_red_block: self
        - color: 2 # Red (2x2 block)
          bounding_box: [9, 0, 9, 3]
          shape: rectangle
          relation_to_red_block: below
      red_block_coords: [6, 0] #top-left
    expected_output:
      objects:
        - color: 2  # Red (2x2 block)
          bounding_box: [6, 0, 7, 3]
          shape: rectangle
        - color: 4
          bounding_box: [7,0,8,3] #estimated
          shape: irregular
        - color: 3
          bounding_box: [8,4,10,9] #estimated
          shape: irregular
        - color: 2  # Red (2x2 block)
          bounding_box: [9, 0, 9, 3]
          shape: rectangle
        - color: 4 #yellow
          bounding_box: [10, 20, 10, 20]
          shape: single
    transformation:
      type: conditional_mirror
      condition: presence_of_2x2_red_block
      action_if_true:
        mirror_objects: below_red_block
        reference: top_of_red_block
        overlap_handling: lower_objects_priority
        copy_objects: above_red_block
      action_if_false:
         mirror_objects: all
         reference: center_of_all_objects # (min_y + max_y) / 2 of all non-blue, non-red pixels
         overlap_handling: lower_objects_priority
  example_2:
      input:
        objects:
          - color: 3
            bounding_box: [1, 18, 4, 19]
            relation_to_red_block: above
          - color: 4
            bounding_box: [5, 18, 10, 20]
            relation_to_red_block: below
          - color: 2  # Red Block 1
            bounding_box: [6, 0, 7, 3]
            relation_to_red_block: self
          - color: 2 #red block 2
            bounding_box: [8, 0, 9, 3]
            relation_to_red_block: below

        red_block_coords: [6,0]
      expected_output:
        objects:
          - color: 2
            bounding_box: [ 6, 0, 7, 3 ]
          - color: 3
            bounding_box: [ 7, 0, 8, 9 ] #estimated
          - color: 4
            bounding_box: [ 8, 2, 8, 9 ]#estimated
          - color: 2
            bounding_box: [9,0,9,3]
      transformation:
        type: conditional_mirror
        condition: presence_of_2x2_red_block
        action_if_true:
          mirror_objects: below_or_at_red_block
          reference: top_of_red_block
          overlap_handling: lower_objects_priority
          copy_objects: above_red_block

        action_if_false:
           mirror_objects: all
           reference: center_of_all_objects # (min_y + max_y) / 2 of all non-blue, non-red pixels
           overlap_handling: lower_objects_priority
  example_3:
      input:
        objects:
          - color: 5
            bounding_box: [11,3,13,5]
            relation_to_red_block: none
          - color: 7
            bounding_box: [14,5,16,7]
            relation_to_red_block: none
          - color: 6
            bounding_box: [15,11,17,15]
            relation_to_red_block: none
        red_block_coords: null
      expected_output:
        objects:
          - color: 6
            bounding_box: [11, 11, 13, 15]
          - color: 7
            bounding_box: [ 12, 5, 14, 7]
          - color: 5
            bounding_box: [ 13, 3, 15, 5]
      transformation:
        type: conditional_mirror
        condition: presence_of_2x2_red_block
        action_if_true:
          mirror_objects: below_or_at_red_block
          reference: top_of_red_block
          overlap_handling: lower_objects_priority
          copy_objects: above_red_block
        action_if_false:
           mirror_objects: all
           reference: center_of_all_objects # (min_row + max_row) / 2 of all non-blue pixels.
           overlap_handling: lower_objects_priority
