{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nReplaces gray (5) colored rectangular regions in the input grid with rectangular regions of other colors, \nmaintaining the size and position of the original gray regions. The replacement color is determined by the most\nfrequent color adjacent to the grey shape.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef find_objects(grid):\n    \"\"\"\n    Finds connected regions (objects) of the same color in the grid.\n\n    Args:\n        grid: A 2D numpy array representing the grid.\n\n    Returns:\n        A list of objects, where each object is a dictionary containing:\n        - color: The color of the object.\n        - pixels: A list of (row, col) tuples representing the pixels belonging to the object.\n    \"\"\"\n    objects = []\n    visited = set()\n\n    def dfs(row, col, color, pixels):\n        if (row, col) in visited or not (0 <= row < grid.shape[0] and 0 <= col < grid.shape[1]) or grid[row, col] != color:\n            return\n        visited.add((row, col))\n        pixels.append((row, col))\n        dfs(row + 1, col, color, pixels)\n        dfs(row - 1, col, color, pixels)\n        dfs(row, col + 1, color, pixels)\n        dfs(row, col - 1, color, pixels)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if (row, col) not in visited:\n                color = grid[row, col]\n                pixels = []\n                dfs(row, col, color, pixels)\n                if pixels:\n                    objects.append({\"color\": color, \"pixels\": pixels})\n    return objects\n\ndef get_object_bounds(pixels):\n    \"\"\"\n    Finds min and max bounds\n\n    Args:\n      pixels: list of pixels\n    \"\"\"\n    min_row = min(p[0] for p in pixels)\n    max_row = max(p[0] for p in pixels)\n    min_col = min(p[1] for p in pixels)\n    max_col = max(p[1] for p in pixels)\n\n    return min_row, max_row, min_col, max_col\n\ndef get_adjacent_colors(grid, pixels):\n    \"\"\"\n    Gets the colors adjacent to the given pixels.\n    \"\"\"\n    adjacent_colors = []\n    rows, cols = grid.shape\n    for r, c in pixels:\n        # Check above\n        if r > 0:\n            adjacent_colors.append(grid[r-1, c])\n        # Check below\n        if r < rows - 1:\n            adjacent_colors.append(grid[r+1, c])\n        # Check left\n        if c > 0:\n            adjacent_colors.append(grid[r, c-1])\n        # Check right\n        if c < cols - 1:\n            adjacent_colors.append(grid[r, c+1])\n\n    return adjacent_colors\n\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the specified rule.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    objects = find_objects(input_grid)\n\n    for obj in objects:\n        if obj[\"color\"] == 5:\n            # Get gray object boundaries.\n            min_row, max_row, min_col, max_col = get_object_bounds(obj[\"pixels\"])\n\n            # Find replacement color using adjacent colors.\n            adjacent_colors = get_adjacent_colors(input_grid, obj[\"pixels\"])\n            \n            # count and get most frequent color, excluding grey\n            color_counts = Counter(adjacent_colors)\n            if 5 in color_counts:\n                del color_counts[5] # don't copy grey\n            \n            if color_counts:\n                replacement_color = color_counts.most_common(1)[0][0]\n            else:\n                replacement_color = 0  # default\n\n            # replace the gray area with the replacement color\n            for row in range(min_row, max_row + 1):\n              for col in range(min_col, max_col + 1):\n                output_grid[row,col] = replacement_color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 13194,
    "candidates_token_count": 1012,
    "total_token_count": 14206,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.018496
}