{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nCopy non-zero pixels from input to output. Fill zero-valued pixels in the output\nbased on the values of their nearest non-zero neighbors in the four cardinal\ndirections (up, down, left, right). If at least two neighbors have the same\nnon-zero value, set the output pixel to that value; otherwise, leave it\nunchanged (which should apply only if the input was zero).\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the described rule.\n    \"\"\"\n    input_grid = np.array(input_grid)\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Iterate through the input grid\n    for r in range(rows):\n        for c in range(cols):\n            if input_grid[r, c] == 0:  # Process only zero-valued pixels in input\n                \n                neighbors = []\n\n                # Check up\n                if r > 0:\n                    neighbors.append(input_grid[r - 1, c])\n                # Check down\n                if r < rows - 1:\n                    neighbors.append(input_grid[r + 1, c])\n                # Check left\n                if c > 0:\n                    neighbors.append(input_grid[r, c - 1])\n                # Check right\n                if c < cols - 1:\n                    neighbors.append(input_grid[r, c + 1])\n\n                #remove zeros\n                neighbors = [n for n in neighbors if n!=0]\n\n                counts = {}\n                for n in neighbors:\n                    if n != 0: #consider only non-zero neighbors\n                        counts[n] = counts.get(n, 0) + 1\n\n                # Find neighbors with count >= 2\n                for val, count in counts.items():\n                    if count >= 2:\n                        output_grid[r, c] = val\n                        break # found a match, move to next pixel\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7901,
    "candidates_token_count": 474,
    "total_token_count": 8375,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.136595
}