{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nCopies the input grid to the output grid, then moves each orange (4) pixel to a \nlocation where an orange pixel was present in any of the training input examples. \nPrioritize moves to adjacent cells, then same row, then same column. If there are no\nother options, it stays where it started.  The output is the same size as the\ninput.\n\"\"\"\n\nimport numpy as np\n\ndef find_orange_positions(grid):\n    # Find all positions of orange (4) pixels in a single grid\n    return np.argwhere(grid == 4)\n\ndef find_all_orange_positions(grids):\n    # Find all positions where orange pixels were present across all input grids\n    orange_positions = set()\n    for grid in grids:\n      coords = find_orange_positions(grid)\n      for coord in coords:\n        orange_positions.add((coord[0],coord[1]))\n    return orange_positions\n\ndef is_adjacent(pos1, pos2):\n    # Check if two positions are adjacent (including diagonals)\n    if abs(pos1[0] - pos2[0]) <= 1 and abs(pos1[1]-pos2[1]) <=1:\n        return True\n    return False\n\ndef transform(input_grid, training_inputs):\n    # Initialize output_grid as a copy of input_grid\n    output_grid = np.copy(input_grid)\n\n    # Find original orange positions in the input grid\n    original_orange_positions = find_orange_positions(input_grid)\n\n    # Find all historical orange positions from training data\n    all_orange_positions = find_all_orange_positions(training_inputs)\n\n    # Iterate through original orange positions and move them\n    for pos in original_orange_positions:\n        # Remove the original orange pixel\n        \n        output_grid[pos[0], pos[1]] = 0\n\n        # Find potential new positions\n        potential_positions = []\n        for historical_pos in all_orange_positions:\n            if historical_pos != tuple(pos):\n                potential_positions.append(historical_pos)\n        \n        #sort potential positions\n        adjacent_positions = []\n        same_row_positions = []\n        same_col_positions = []\n        other_positions = []\n\n        for potential_pos in potential_positions:\n            if is_adjacent(pos, potential_pos):\n               adjacent_positions.append(potential_pos)\n            elif pos[0] == potential_pos[0]:\n               same_row_positions.append(potential_pos)\n            elif pos[1] == potential_pos[1]:\n              same_col_positions.append(potential_pos)\n            else:\n              other_positions.append(potential_pos)\n\n        #prioritize\n        if len(adjacent_positions) > 0:\n          best_pos = adjacent_positions[0]\n        elif len(same_row_positions) > 0:\n          best_pos = same_row_positions[0]\n        elif len(same_col_positions) > 0:\n          best_pos = same_col_positions[0]\n        elif len(other_positions) > 0:\n            best_pos = other_positions[0]\n        else:\n          best_pos = tuple(pos)\n\n        output_grid[best_pos]=4\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4279,
    "candidates_token_count": 774,
    "total_token_count": 5053,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.540998
}