{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by identifying non-background colors, detecting shapes and their adjacencies, and applying mirroring or extension transformations based on these adjacencies.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef get_background_color(grid):\n    \"\"\"Determines the most frequent (background) color in the grid.\"\"\"\n    flattened = grid.flatten()\n    count = Counter(flattened)\n    return count.most_common(1)[0][0]\n\ndef find_objects(grid, background_color):\n    \"\"\"Identifies connected components (objects) of non-background colors.\"\"\"\n    visited = set()\n    objects = []\n\n    def dfs(row, col, current_object):\n        if (row, col) in visited or not (0 <= row < grid.shape[0] and 0 <= col < grid.shape[1]) or grid[row, col] == background_color:\n            return\n        visited.add((row, col))\n        current_object.append((row, col))\n        dfs(row + 1, col, current_object)\n        dfs(row - 1, col, current_object)\n        dfs(row, col + 1, current_object)\n        dfs(row, col - 1, current_object)\n        dfs(row + 1, col + 1, current_object)\n        dfs(row - 1, col - 1, current_object)\n        dfs(row + 1, col -1, current_object)\n        dfs(row -1, col + 1, current_object)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] != background_color and (row, col) not in visited:\n                current_object = []\n                dfs(row, col, current_object)\n                objects.append((grid[row,col], current_object))  # Store color and object\n    return objects\n\ndef get_neighbors(grid, pixel):\n    \"\"\"Get the neighbors, including diagonals\"\"\"\n    row,col = pixel\n    neighbors = []\n    for i in range(-1,2):\n        for j in range(-1,2):\n            if i==0 and j == 0:\n                continue\n            neighbor_row, neighbor_col = row+i, col+j\n            if 0 <= neighbor_row < grid.shape[0] and 0 <= neighbor_col < grid.shape[1]:\n                neighbors.append((neighbor_row, neighbor_col))\n    return neighbors\n    \n\ndef transform(input_grid):\n    \"\"\"Applies the transformation rules to the input grid.\"\"\"\n    grid = np.array(input_grid)  # Convert to NumPy array\n    output_grid = np.copy(grid)\n    background_color = get_background_color(grid)\n    objects = find_objects(grid, background_color)\n\n    for color, object_pixels in objects:\n        for row, col in object_pixels:\n            neighbors = get_neighbors(grid, (row,col))\n            neighbor_colors = [grid[r,c] for r, c in neighbors]\n            \n            # Horizontal Extension\n            \n            left_neighbors = [c for r, c in neighbors if c < col and grid[r,c] != background_color]\n            right_neighbors = [c for r, c in neighbors if c > col and grid[r,c] != background_color]\n            \n            if left_neighbors:\n                min_col = min(left_neighbors)\n                neighbor_color = grid[row, min_col]\n                if neighbor_color != background_color and neighbor_color != color:\n                    for i in range(col + 1, min(grid.shape[1], col + (col-min_col) + 1)):\n                        output_grid[row, i] = neighbor_color\n                        for n_r, n_c in get_neighbors(output_grid, (row,i)):\n                            if grid[n_r,n_c] == color:\n                                output_grid[n_r, n_c] = neighbor_color\n            if right_neighbors:\n                max_col = max(right_neighbors)\n                neighbor_color = grid[row,max_col]\n                if neighbor_color != background_color and neighbor_color != color:\n                    for i in range(max(0, col - (max_col - col)), col):\n                        output_grid[row, i] = neighbor_color\n                        for n_r, n_c in get_neighbors(output_grid, (row,i)):\n                            if grid[n_r,n_c] == color:\n                                output_grid[n_r, n_c] = neighbor_color\n            \n\n            # Vertical Extension\n            up_neighbors = [r for r, c in neighbors if r < row and grid[r,c] != background_color]\n            down_neighbors =  [r for r, c in neighbors if r > row and grid[r,c] != background_color]\n\n            if up_neighbors:\n                min_row = min(up_neighbors)\n                neighbor_color = grid[min_row,col]\n                if neighbor_color != background_color and neighbor_color != color:\n                    for i in range(row+1, min(grid.shape[0], row+(row-min_row)+1)):\n                         output_grid[i, col] = neighbor_color\n                         for n_r, n_c in get_neighbors(output_grid, (i,col)):\n                            if grid[n_r,n_c] == color:\n                                output_grid[n_r, n_c] = neighbor_color\n            if down_neighbors:\n                max_row = max(down_neighbors)\n                neighbor_color = grid[max_row, col]\n                if neighbor_color != background_color and neighbor_color != color:\n                    for i in range(max(0, row-(max_row-row)), row):\n                        output_grid[i,col] = neighbor_color\n                        for n_r, n_c in get_neighbors(output_grid, (i,col)):\n                            if grid[n_r,n_c] == color:\n                                output_grid[n_r, n_c] = neighbor_color\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4378,
    "candidates_token_count": 1471,
    "total_token_count": 5849,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 16.862918
}