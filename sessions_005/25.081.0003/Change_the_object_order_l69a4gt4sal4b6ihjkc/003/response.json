{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by first filling colors to the left within each row based on their leftmost occurrence and original order, then filling downwards within each column, and then filling right.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    # Initialize output grid as a copy of the input grid\n    output_grid = np.copy(input_grid).tolist()\n    rows = len(input_grid)\n    cols = len(input_grid[0])\n\n    # Iterate through each row (Left Fill)\n    for r in range(rows):\n        #find non-zero colors present in current row, preserve order\n        colors = []\n        for x in input_grid[r]:\n            if x != 0 and x not in colors:\n                colors.append(x)\n\n        #iterate through found colors\n        for color in colors:\n            #find leftmost occurance of colour\n            indices = [i for i, x in enumerate(input_grid[r]) if x == color]\n            if len(indices)>0:\n                leftmost_index = min(indices)\n                #fill left\n                for i in range(0,leftmost_index):\n                    output_grid[r][i] = color\n\n    # Iterate through each column (Down Fill)\n    for c in range(cols):\n        #find non-zero colors in current column, preserve order\n        colors = []\n        for r in range(rows):\n            if input_grid[r][c] !=0 and input_grid[r][c] not in colors:\n                colors.append(input_grid[r][c])\n\n        #Iterate through colors\n        for color in colors:\n            #find topmost occurance of color\n            indices = [r for r in range(rows) if input_grid[r][c] == color]\n            if len(indices) > 0:\n                topmost_index = min(indices)\n                #fill down\n                for i in range(topmost_index + 1, rows):\n                     if output_grid[i][c] == 0: # only fill if currently 0\n                        output_grid[i][c] = color\n\n    # Iterate through each row (Right Fill)\n    for r in range(rows):\n        #find non-zero colors present in current row, preserve order\n        colors = []\n        for x in input_grid[r]:\n            if x != 0 and x not in colors:\n                colors.append(x)\n        colors.reverse()\n        #iterate through found colors\n        for color in colors:\n            #find rightmost occurance of colour\n            indices = [i for i, x in enumerate(input_grid[r]) if x == color]\n\n            if len(indices)>0:\n                rightmost_index = max(indices)\n                #fill right\n                for i in range(rightmost_index+1,cols):\n                    output_grid[r][i] = color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3369,
    "candidates_token_count": 677,
    "total_token_count": 4046,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 12.555545
}