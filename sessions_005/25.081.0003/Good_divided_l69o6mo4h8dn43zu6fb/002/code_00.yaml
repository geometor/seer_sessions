example_1:
  input_grid:
    - [6, 6, 4, 7, 0]
    - [0, 6, 4, 7, 7]
    - [4, 4, 4, 4, 4]
    - [8, 8, 4, 0, 9]
    - [0, 0, 4, 9, 9]
  expected_output_grid:
    - [6, 6, 7, 0, 0]
    - [0, 6, 7, 7, 0]
    - [0, 0, 0, 9, 0]
    - [0, 0, 9, 9, 0]
    - [0, 0, 0, 0, 0]
  objects:
    - color: 6  # white
      instances: [[0,0], [0,1], [1,1]]
    - color: 4  # yellow
      instances: [[0,2], [1,2], [2,0], [2,1], [2,2], [2,3], [2,4], [3,2], [4,2]]
    - color: 7 # orange
      instances: [[0,3], [1,3], [1,4]]
    - color: 0  # black
      instances: [[0,4], [1,0], [3,3], [4,0], [4,1]]
    - color: 8  # azure
      instances: [[3, 0], [3, 1]]
    - color: 9 # maroon
      instances: [[3,4], [4,3], [4,4]]
  actions:
    - remove: [4, 2] # Remove yellow and red pixels
    - fill_down:
        description: "Remaining pixels 'drop down' or shift to fill the empty spaces, prioritizing lower indices"
example_2:
  input_grid:
    - [7, 7, 2, 6, 6]
    - [0, 7, 2, 6, 6]
    - [2, 2, 2, 2, 2]
    - [0, 9, 2, 8, 0]
    - [9, 9, 2, 0, 0]
  expected_output_grid:
    - [7, 7, 0, 0, 0]
    - [0, 7, 0, 0, 0]
    - [0, 9, 0, 0, 0]
    - [9, 9, 0, 0, 0]
    - [0, 0, 0, 0, 0]
  objects:
      # ... (Similar object listing as example_1, but for colors in this example)
      # skipping here for brevity but it should be filled similarly to example_1
  actions:
    - remove: [2, 4]
    - fill_down:
       description: "Remaining pixels 'drop down' to fill empty spaces"