{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nReplaces white pixels in columns with azure pixels based on the position of a horizontal line of red and azure pixels.\n\"\"\"\n\nimport numpy as np\n\ndef find_control_row(grid):\n    # Find the row that is all red except for possibly the last element.\n    rows, cols = grid.shape\n    for r in range(rows):\n        if np.all(grid[r, :-1] == 2) and grid[r,-1] !=0 and len(np.unique(grid[r,:]))==2:\n            return r\n    return -1\n\ndef find_all_white_columns(grid):\n    #find columns that are all white\n    rows, cols = grid.shape\n    white_cols = []\n    for c in range(cols):\n        if np.all(grid[:,c] == 0):\n            white_cols.append(c)\n\n    return white_cols\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the observed rule.\n    \"\"\"\n    grid = np.array(input_grid)  # Convert to NumPy array for easier manipulation\n    rows, cols = grid.shape\n    output_grid = np.copy(grid)  # Initialize output_grid as a copy of input_grid\n\n    control_row_index = find_control_row(grid)\n    \n    if control_row_index != -1:\n        white_cols = find_all_white_columns(grid)\n        # Apply the replacement rule\n        for c in range(cols):\n            if c in white_cols:\n                for r in range(control_row_index):\n                    if output_grid[r,c] == 0:\n                        \n                        for c2 in range(cols):\n                            if grid[control_row_index,c2] == 2 and grid[control_row_index:,c] == 8: #find azure in same column as white and red\n                                output_grid[r,c]=0 #set intersection of red and white to white\n                            elif  grid[control_row_index:,c] != 8: #otherwise put azure if no azure below\n                                output_grid[r,c] = 8\n                            \n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1727,
    "candidates_token_count": 515,
    "total_token_count": 2242,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 12.669151
}