{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentify the non-white pixels in the last row of the input grid. Move these\npixels to the row directly above their current position, overlaying them onto\nany existing pixels in that row.\n\"\"\"\n\nimport numpy as np\n\ndef get_object(grid):\n    \"\"\"\n    Finds the bounding box of an object comprised of horizontal lines.\n    Returns (min_row, max_row, min_col, max_col) or (None, None, None, None)\n    if no such object is found.\n    \"\"\"\n    rows, cols = np.where(grid != 0)\n    if len(rows) == 0:\n        return None, None, None, None\n\n    min_row, max_row = np.min(rows), np.max(rows)\n    min_col, max_col = np.min(cols), np.max(cols)\n\n    # Check for horizontal line property.\n    for row in range(min_row, max_row + 1):\n      color = None\n      for col in range(min_col, max_col+1):\n        if grid[row,col] != 0:\n          if color is None:\n            color = grid[row,col]\n          elif color != grid[row, col]:\n            return None, None, None, None #not one object\n\n    return min_row, max_row, min_col, max_col\n\ndef get_bottom_row_pixels(grid, max_row):\n    \"\"\"\n    Gets the non-zero pixels from the specified row (max_row).\n    Returns a list of (row, col, value) tuples.\n    \"\"\"\n    bottom_row_pixels = []\n    for col_index, pixel_value in enumerate(grid[max_row]):\n        if pixel_value != 0:\n            bottom_row_pixels.append((max_row, col_index, pixel_value))\n    return bottom_row_pixels\n\ndef transform(input_grid):\n    # Convert to numpy array for easier manipulation\n    grid = np.array(input_grid)\n\n    # Get object bounding box.\n    min_row, max_row, min_col, max_col = get_object(grid)\n\n    if min_row is None:  # No Object Found, Identity Transform\n        return input_grid\n\n    # Get the non-zero pixels on the last row of the object\n    bottom_row_pixels = get_bottom_row_pixels(grid, max_row)\n\n    # Initialize output grid as a copy of the input grid\n    output_grid = np.copy(grid)\n\n    # Move and overlay pixels\n    for row, col, value in bottom_row_pixels:\n        target_row = row - 1\n        if 0 <= target_row < output_grid.shape[0]: #bounds check\n            output_grid[target_row, col] = value\n\n    #remove the last row\n    output_grid = output_grid[:-1, :]\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5191,
    "candidates_token_count": 690,
    "total_token_count": 5881,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 22.225185
}