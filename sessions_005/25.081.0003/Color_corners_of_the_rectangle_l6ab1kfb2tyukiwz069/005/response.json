{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify** the *start row* and *end row* of a contiguous block of rows containing green (3) pixels. A contiguous block is defined as one or more consecutive rows, each containing at least one green pixel.\n2.  **For the start row**:\n    *   Insert an orange (7) pixel to the immediate left of the leftmost green (3) pixel.\n    *   Insert an orange (7) pixel to the immediate right of the rightmost green (3) pixel.\n3.  **For the end row**:\n    *   Insert an orange (7) pixel to the immediate left of the leftmost green (3) pixel.\n    *   Insert an orange (7) pixel to the immediate right of the rightmost green (3) pixel.\n4.  **All other rows** in the output grid remain identical to the input grid.\n\"\"\"\n\nimport numpy as np\n\ndef get_green_rows(grid):\n    # returns rows containing green pixels\n    green_rows = []\n    for i, row in enumerate(grid):\n        if 3 in row:\n            green_rows.append(i)\n    return green_rows\n\ndef get_start_end_rows(green_rows):\n     # gets the start and end rows\n    if not green_rows:\n        return None, None\n    return green_rows[0], green_rows[-1]\n            \ndef transform(input_grid):\n    \"\"\"Transforms the input grid by wrapping green blocks with orange pixels.\"\"\"\n\n    input_grid = np.array(input_grid)\n    output_grid = np.copy(input_grid)\n    rows_with_green = get_green_rows(input_grid)\n    start_row, end_row = get_start_end_rows(rows_with_green)\n    \n    if start_row is None:\n        return output_grid.tolist()\n\n    # Iterate through rows that have green pixels\n    for row_index in [start_row, end_row]:\n      if 0 <= row_index < input_grid.shape[0]:\n        row = input_grid[row_index]\n        \n        # Find the indices of the green pixels\n        green_indices = np.where(row == 3)[0]\n\n        # find the leftmost and rightmost\n        leftmost_green_index = green_indices[0]\n        rightmost_green_index = green_indices[-1]\n        \n        # bounds check and set left pixel to orange (7)\n        if leftmost_green_index > 0:\n            output_grid[row_index, leftmost_green_index - 1] = 7\n        # bounds check and set right pixel to orange (7)\n        if rightmost_green_index < len(row) - 1:\n            output_grid[row_index, rightmost_green_index + 1] = 7\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4578,
    "candidates_token_count": 666,
    "total_token_count": 5244,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.23751
}