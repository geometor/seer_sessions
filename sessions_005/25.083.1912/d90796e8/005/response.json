{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIf a green (3) pixel is adjacent (orthogonally or diagonally) to a red (2) pixel,\nthe green pixel is changed to azure (8) and the red pixel is changed to black (0).\nAll other pixels remain unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, row, col):\n    \"\"\"\n    Gets the neighbors of cell.\n    \"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i == 0 and j == 0:\n                continue\n            neighbor_row = row + i\n            neighbor_col = col + j\n            if 0 <= neighbor_row < rows and 0 <= neighbor_col < cols:\n                neighbors.append((neighbor_row, neighbor_col))\n    return neighbors\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid: If a green (3) pixel is adjacent to a red (2) pixel,\n    change the green pixel to azure (8) and the adjacent red pixel to black(0).\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n    red_pixels_to_change = []\n\n    for row in range(rows):\n        for col in range(cols):\n            # Only proceed if the current pixel is green (3)\n            if input_grid[row, col] == 3:\n                neighbors = get_neighbors(input_grid, row, col)\n                for neighbor_row, neighbor_col in neighbors:\n                    # If a neighbor is red (2), change the current (green) pixel to azure (8)\n                    if input_grid[neighbor_row, neighbor_col] == 2:\n                        output_grid[row, col] = 8\n                        red_pixels_to_change.append((neighbor_row, neighbor_col))\n                        break  # Once changed, no need to check other neighbors\n\n    # Change the identified red pixels to black (0)\n    for row, col in red_pixels_to_change:\n        output_grid[row, col] = 0\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4790,
    "candidates_token_count": 511,
    "total_token_count": 5301,
    "cached_content_token_count": 0
  },
  "response_time": 4.42197
}