facts:
  - object: input_grid
    properties:
      type: 2D array
      values: integers (0-9, representing colors)
      dimensions: variable (rows x columns)
    relationships:
      contains: yellow_pixels, other_pixels
  - object: yellow_pixels
    properties:
      color: 4 (yellow)
      role: anchor_point
      location: varies per row, but always present
    relationships:
      defines: subgrid_extraction_point
  - object: output_grid
    properties:
      type: 2D array
      dimensions: fixed_columns (4), rows equal to input_grid rows
      values: integers (0-9)
    relationships:
      receives: rotated_subgrids
  - object: subgrid
    properties:
      type: 2D array, extracted from input
      dimensions: ideal (2x2), but can be (1x2), (2,0) near edges.
    relationships:
       extracted_from: input_grid
       based_on: yellow_pixel_location
       transformed_by: rotation
       placed_in: output_grid
  - action: subgrid_extraction
    input: input_grid, yellow_pixel_location
    output: subgrid
    rule: "Extract a region around the yellow pixel. Ideally 2x2, with the yellow pixel conceptually marking a corner (or edge, for non 2x2 cases).  The column of the yellow pixel determines how many columns to take to the left."
  - action: subgrid_rotation
    input: subgrid
    output: rotated_subgrid
    rule: Rotate the subgrid by 180 degrees (if it's a valid 2x2 grid, if not rotate as best as possible).
  - action: subgrid_placement
    input: rotated_subgrid, row_index
    output: output_grid
    rule: Place the rotated subgrid into the output grid, aligning to row index, columns always starting at 0.
