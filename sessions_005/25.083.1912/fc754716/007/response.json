{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by identifying a \"seed\" pixel (the first non-zero pixel), drawing a frame of the seed's color around the output grid, and setting the seed and its immediate neighbors in the *input* grid to 0, then copying the input grid to the output, leaving the frame intact.\n\"\"\"\n\nimport numpy as np\n\ndef get_seed_pixel(grid):\n    # Find the coordinates and value of the first non-zero pixel (seed).\n    non_zero_indices = np.nonzero(grid)\n    if len(non_zero_indices[0]) > 0:\n       x = non_zero_indices[0][0]\n       y = non_zero_indices[1][0]\n       color = grid[x, y]\n       return x, y, color\n    return None, None, None\n\ndef clear_neighbors(grid, x, y):\n    # Set the value of the seed pixel and its orthogonal neighbors to 0 *in place*.\n    rows, cols = grid.shape\n    if x > 0:\n        grid[x - 1, y] = 0  # Above\n    if x < rows - 1:\n        grid[x + 1, y] = 0  # Below\n    if y > 0:\n        grid[x, y - 1] = 0  # Left\n    if y < cols - 1:\n        grid[x, y + 1] = 0  # Right\n    grid[x,y] = 0\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the observed rule.\n    \"\"\"\n    # Convert to numpy array for easier manipulation\n    input_grid = np.array(input_grid)\n    rows, cols = input_grid.shape\n    output_grid = np.zeros((rows, cols), dtype=int)\n\n    # Get the seed pixel information\n    seed_x, seed_y, seed_color = get_seed_pixel(input_grid)\n\n    if seed_x is None:  # No seed pixel, return original grid\n        return input_grid.tolist()\n\n    # Create the frame with the seed color\n    output_grid[0, :] = seed_color          # Top row\n    output_grid[-1, :] = seed_color         # Bottom row\n    output_grid[:, 0] = seed_color          # Left column\n    output_grid[:, -1] = seed_color         # Right column\n    \n    #clear neighbors *in the input grid*\n    clear_neighbors(input_grid, seed_x, seed_y)\n\n    # Copy the modified input grid to the output grid, *except* where the frame was set\n    for i in range(rows):\n        for j in range(cols):\n            if not (i == 0 or i == rows - 1 or j == 0 or j == cols-1):\n                output_grid[i,j] = input_grid[i,j]\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5024,
    "candidates_token_count": 691,
    "total_token_count": 5715,
    "cached_content_token_count": 0
  },
  "response_time": 9.212687
}