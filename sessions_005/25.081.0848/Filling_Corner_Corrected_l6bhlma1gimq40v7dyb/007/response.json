{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation rule involves identifying yellow objects and extending lines of red pixels from the ends of lines formed by yellow pixels. The extension continues in the direction of the line until the edge of the grid is reached. Objects are treated independently.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, color):\n    \"\"\"Finds contiguous objects of a specified color in the grid.\"\"\"\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n\n    def dfs(row, col, current_object):\n        \"\"\"Depth-First Search to find contiguous pixels.\"\"\"\n        if (row < 0 or row >= grid.shape[0] or col < 0 or col >= grid.shape[1] or\n                visited[row, col] or grid[row, col] != color):\n            return\n\n        visited[row, col] = True\n        current_object.append((row, col))\n        dfs(row + 1, col, current_object)\n        dfs(row - 1, col, current_object)\n        dfs(row, col + 1, current_object)\n        dfs(row, col - 1, current_object)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] == color and not visited[row, col]:\n                current_object = []\n                dfs(row, col, current_object)\n                objects.append(current_object)\n\n    return objects\n\ndef extend_lines(grid, yellow_object):\n    \"\"\"\n    Extends lines from the endpoints of lines within the yellow object.\n    \"\"\"\n    red_extensions = []\n\n    # Check for horizontal and vertical lines\n    rows = {}\n    cols = {}\n    for y, x in yellow_object:\n        if y not in rows:\n            rows[y] = []\n        rows[y].append(x)\n        if x not in cols:\n            cols[x] = []\n        cols[x].append(y)\n    \n    # Extend horizontal lines\n    for row, col_list in rows.items():\n        col_list.sort()\n        if len(col_list) > 0:\n          #extend left\n          for c in range(col_list[0]-1, -1, -1):\n            red_extensions.append((row,c))\n          #extend right\n          for c in range(col_list[-1]+1, grid.shape[1]):\n            red_extensions.append((row,c))\n            \n    # Extend vertical lines\n    for col, row_list in cols.items():\n      row_list.sort()\n      if len(row_list) > 0:\n          # Extend up\n          for r in range(row_list[0] - 1, -1, -1):\n              red_extensions.append((r, col))\n          # Extend down\n          for r in range(row_list[-1] + 1, grid.shape[0]):\n              red_extensions.append((r, col))\n    \n    return red_extensions\n\n\ndef transform(input_grid):\n    \"\"\"\n    Identifies yellow objects and extends lines of red pixels from endpoints\n    of any lines formed by the yellow objects. Extends until a boundary.\n    \"\"\"\n    # Initialize output_grid as a copy of the input_grid\n    output_grid = np.copy(input_grid)\n\n    # Find yellow objects\n    yellow_objects = find_objects(input_grid, 4)\n\n    # For each yellow object, extend lines from endpoints\n    for yellow_object in yellow_objects:\n        red_coords = extend_lines(input_grid, yellow_object)\n        for r, c in red_coords:\n            if 0 <= r < output_grid.shape[0] and 0 <= c < output_grid.shape[1]:  # Boundary check\n                output_grid[r, c] = 2\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5596,
    "candidates_token_count": 916,
    "total_token_count": 6512,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 17.395796
}