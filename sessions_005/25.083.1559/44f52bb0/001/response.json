{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms a 3x3 grid of 0s and 2s into a single-digit integer based on \nthe arrangement of the 2s (red pixels). If the red pixels form a vertical\nor diagonal line of three, the output is 1. If they form an L-shape \n(rotated in any direction) with three pixels, the output is 7.  \nOther patterns are undefined by the given examples.\n\"\"\"\n\nimport numpy as np\n\ndef _is_line_of_three(grid):\n    \"\"\"Checks if there's a line of three 2s (red) in the grid.\"\"\"\n    grid = np.array(grid)\n    # Check rows and columns\n    for i in range(3):\n        if np.all(grid[i, :] == 2) or np.all(grid[:, i] == 2):\n            return True\n    # Check diagonals\n    if np.all(np.diag(grid) == 2) or np.all(np.diag(np.fliplr(grid)) == 2):\n        return True\n    return False\n\ndef _is_l_shape_of_three(grid):\n    \"\"\"Checks if there's an L-shape of three 2s in the grid.\"\"\"\n    grid = np.array(grid)\n    count = np.count_nonzero(grid == 2)\n    if count != 3:\n        return False\n\n    # Find the coordinates of red pixels\n    red_coords = np.argwhere(grid == 2)\n\n    # Check for L-shape by examining distances between red pixels\n    for i in range(3):\n      for j in range(i + 1, 3):\n        dist = np.abs(red_coords[i] - red_coords[j])\n        if np.sum(dist) == 1:  # adjacent\n            for k in range(j+1, 3):\n                dist1 = np.abs(red_coords[i] - red_coords[k])\n                dist2 = np.abs(red_coords[j] - red_coords[k])\n                \n                if (np.sum(dist1) == 2 and np.sum(dist2) == 1) or \\\n                   (np.sum(dist1) == 1 and np.sum(dist2) == 2):\n                  return True\n    return False\n    \n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the rules.\"\"\"\n\n    # Check for line of three\n    if _is_line_of_three(input_grid):\n        return 1\n\n    # Check for L-shape of three\n    if _is_l_shape_of_three(input_grid):\n        return 7\n\n    # Undefined case\n    return None\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1755,
    "candidates_token_count": 638,
    "total_token_count": 2393,
    "cached_content_token_count": 0
  },
  "response_time": 8.699859
}