{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Initialization:** Create a copy of the input grid to serve as the output grid.\n2.  **Identify Seeds:** Locate all green (3) pixels in the input grid. These are the \"seeds\".\n3.  **Propagation:** For *each* green seed pixel:\n    *   Perform a breadth-first search (or depth-first search) starting from the green seed.\n    *  Add the seed location to visited.\n    *   Expand outwards, checking all 8 neighboring pixels (horizontal, vertical, and diagonal).\n    *   If a neighboring pixel is orange (7), add its coordinates to a set of `connected_orange` pixels, and change the corresponding pixel in the *output* grid to green (3).\n    *   Continue expanding from any found orange pixels.\n4.  **Return:** The modified output grid.\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef get_connected_orange(grid, start_row, start_col):\n    \"\"\"\n    Finds all orange (7) pixels connected to a starting pixel (horizontally, vertically, or diagonally) using BFS, and updates the output grid.\n    Returns a set of (row, col) tuples representing connected orange pixels.\n    \"\"\"\n    rows, cols = grid.shape\n    connected_orange = set()\n    queue = deque([(start_row, start_col)])\n    visited = set()\n\n    while queue:\n        row, col = queue.popleft()\n        if (row, col) in visited:\n            continue\n        visited.add((row, col))\n\n        # Check if current pixel is orange\n        if grid[row, col] == 7:\n            connected_orange.add((row, col))\n\n        # Check all 8 neighbors (including diagonals)\n        for dr in [-1, 0, 1]:\n            for dc in [-1, 0, 1]:\n                if dr == 0 and dc == 0:\n                    continue  # Skip the current cell\n                nr, nc = row + dr, col + dc\n                if 0 <= nr < rows and 0 <= nc < cols:\n                    # Enqueue regardless, but track only orange\n                    queue.append((nr, nc))\n    return connected_orange\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by propagating green color from green seeds to connected orange pixels.\n    \"\"\"\n    # Initialize output_grid as a copy of input_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n    green_seeds = []\n\n    # Identify Green Seeds\n    for row in range(rows):\n        for col in range(cols):\n            if input_grid[row, col] == 3:\n                green_seeds.append((row, col))\n\n    # Propagate Green for each seed\n    for seed_row, seed_col in green_seeds:\n        # Find connected orange pixels\n        connected_orange = get_connected_orange(input_grid, seed_row, seed_col)\n\n        # Change connected orange pixels to green in the output grid\n        for orange_row, orange_col in connected_orange:\n            output_grid[orange_row, orange_col] = 3\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5404,
    "candidates_token_count": 741,
    "total_token_count": 6145,
    "cached_content_token_count": 0
  },
  "response_time": 8.709474
}