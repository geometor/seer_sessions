{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIterate through each cell of the input grid. If a cell is orange (7), check its immediate horizontal and vertical neighbors *in the input grid*. If any of those neighbors are green (3), change the corresponding cell in the *output* grid to green (3). If a cell is not orange, copy its value to the output grid. Finally return the output grid.\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, row, col):\n    \"\"\"\n    Gets the immediate horizontal and vertical neighbors of a cell.\n    Returns a list of (row, col) tuples.\n    \"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    if row > 0:\n        neighbors.append((row - 1, col))\n    if row < rows - 1:\n        neighbors.append((row + 1, col))\n    if col > 0:\n        neighbors.append((row, col - 1))\n    if col < cols - 1:\n        neighbors.append((row, col + 1))\n    return neighbors\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # iterate through each cell of the input_grid\n    for row in range(rows):\n        for col in range(cols):\n            # check if it's orange (7) in the input grid\n            if input_grid[row, col] == 7:\n                # check neighbors in the input grid\n                neighbors = get_neighbors(input_grid, row, col)\n                neighbor_values = [input_grid[r, c] for (r, c) in neighbors]\n                # If any neighbor is green (3), replace with green (3) in the output grid\n                if 3 in neighbor_values:\n                    output_grid[row, col] = 3\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 574,
            "end_index": 827,
            "uri": "https://github.com/MaksymilianLosinski/minesweeper-solver",
            "license_": ""
          },
          {
            "start_index": 650,
            "end_index": 851,
            "uri": "https://github.com/SantikMaster/Maze-solver",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7924,
    "candidates_token_count": 441,
    "total_token_count": 8365,
    "cached_content_token_count": 0
  },
  "response_time": 5.249292
}