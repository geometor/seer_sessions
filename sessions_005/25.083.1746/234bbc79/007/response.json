{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid based on vertical and horizontal color propagation rules,\ntriggered by the interaction of red, gray, and other colored pixels. The grid\nis then shrunk to fit the remaining non-white pixels.\n\"\"\"\n\nimport numpy as np\n\ndef get_vertical_groups(grid):\n    \"\"\"\n    Groups vertically adjacent pixels of non-white colors.\n    \"\"\"\n    groups = []\n    for j in range(grid.shape[1]):\n        current_group = []\n        for i in range(grid.shape[0]):\n            if grid[i, j] != 0:  # Non-white pixel\n                current_group.append((i, j, grid[i, j]))\n            else:\n                if current_group:\n                    groups.append(current_group)\n                    current_group = []\n        if current_group:  # Add any remaining group in the column\n            groups.append(current_group)\n    return groups\n\ndef get_neighbors(grid, row, col):\n    \"\"\"\n    Gets the immediate neighbors (up, down, left, right) of a pixel.\n    \"\"\"\n    neighbors = []\n    if row > 0:\n        neighbors.append((row - 1, col, grid[row - 1, col]))  # Up\n    if row < grid.shape[0] - 1:\n        neighbors.append((row + 1, col, grid[row + 1, col]))  # Down\n    if col > 0:\n        neighbors.append((row, col - 1, grid[row, col - 1]))  # Left\n    if col < grid.shape[1] - 1:\n        neighbors.append((row, col + 1, grid[row, col + 1]))  # Right\n    return neighbors\n\ndef shrink_grid(grid):\n    \"\"\"\n    Shrinks the grid to the smallest bounding box containing all non-white pixels.\n    \"\"\"\n    rows = np.any(grid != 0, axis=1)\n    cols = np.any(grid != 0, axis=0)\n    min_row, max_row = np.where(rows)[0][[0, -1]] if np.any(rows) else (0,0)\n    min_col, max_col = np.where(cols)[0][[0, -1]] if np.any(cols) else (0,0)\n    return grid[min_row : max_row + 1, min_col : max_col + 1]\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n\n    # 1. Vertical Propagation\n    vertical_groups = get_vertical_groups(input_grid)\n    for group in vertical_groups:\n        for i, (row, col, color) in enumerate(group):\n            if color == 2:  # Red pixel\n                gray_above = False\n                trigger_pixel = None\n\n                for i_above in range(i):\n                    row_above, col_above, color_above = group[i_above]\n                    if color_above == 5:  # Gray pixel above\n                        gray_above = True\n                        for i_trigger in range(i_above):\n                            row_trigger, col_trigger, color_trigger = group[i_trigger]\n                            if color_trigger not in [0, 2, 5]:  # Trigger pixel found\n                                trigger_pixel = (row_trigger, col_trigger, color_trigger)\n                                break\n                        if trigger_pixel:\n                          break #found trigger, don't check for other grey\n\n                if gray_above and trigger_pixel:\n                    output_grid[row, col] = trigger_pixel[2]  # Propagate color down\n                    output_grid[trigger_pixel[0], trigger_pixel[1]] = 0 #clear trigger\n                    #clear grey pixels\n                    for i_clear in range(i):\n                      row_clear, col_clear, color_clear = group[i_clear]\n                      if(color_clear == 5):\n                        output_grid[row_clear, col_clear] = 0\n\n    # 2. Horizontal Replacement\n    for i in range(output_grid.shape[0]):\n        for j in range(output_grid.shape[1]):\n            if output_grid[i, j] == 2:  # Remaining red pixel\n                neighbors = get_neighbors(output_grid, i, j)\n                for neighbor_row, neighbor_col, neighbor_color in neighbors:\n                    if neighbor_color not in [0, 2, 5]:\n                        output_grid[i, j] = neighbor_color\n                        break  # Replace with the first valid neighbor\n\n    # 3. Grid Shrinking\n    output_grid = shrink_grid(output_grid)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5960,
    "candidates_token_count": 1127,
    "total_token_count": 7087,
    "cached_content_token_count": 0
  },
  "response_time": 14.341263
}