{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid based on vertical and horizontal color propagation rules,\ntriggered by the interaction of red, gray, and other colored pixels.\n\"\"\"\n\nimport numpy as np\n\ndef get_vertical_groups(grid):\n    \"\"\"\n    Groups vertically adjacent pixels of non-white colors.\n    \"\"\"\n    groups = []\n    for j in range(grid.shape[1]):\n        current_group = []\n        for i in range(grid.shape[0]):\n            if grid[i, j] != 0:  # Non-white pixel\n                current_group.append((i, j, grid[i, j]))\n            else:\n                if current_group:\n                    groups.append(current_group)\n                    current_group = []\n        if current_group:  # Add any remaining group in the column\n            groups.append(current_group)\n    return groups\n\ndef get_horizontal_groups(grid):\n    \"\"\"\n    Groups horizontally adjacent pixels of non-white colors.\n    \"\"\"\n    groups = []\n    for i in range(grid.shape[0]):\n        current_group = []\n        for j in range(grid.shape[1]):\n            if grid[i,j] != 0:\n                current_group.append((i,j, grid[i,j]))\n            else:\n                if current_group:\n                    groups.append(current_group)\n                    current_group = []\n        if current_group:\n            groups.append(current_group)\n\n    return groups\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    height = input_grid.shape[0]\n    width = input_grid.shape[1]\n\n    # 1. Vertical Propagation\n    vertical_groups = get_vertical_groups(input_grid)\n    for group in vertical_groups:\n        for i, (row, col, color) in enumerate(group):\n            if color == 2:  # Red pixel\n                gray_above = False\n                trigger_pixel = None\n\n                for i_above in range(i):\n                    row_above, col_above, color_above = group[i_above]\n                    if color_above == 5:  # Gray pixel above\n                        gray_above = True\n                        for i_trigger in range(i_above):\n                            row_trigger, col_trigger, color_trigger = group[i_trigger]\n                            if color_trigger not in [0, 2, 5]:  # Trigger pixel found\n                                trigger_pixel = (row_trigger, col_trigger, color_trigger)\n                                break\n                        if trigger_pixel:\n                          break #found trigger, don't check for other grey\n\n                if gray_above and trigger_pixel:\n                    output_grid[row, col] = trigger_pixel[2]  # Propagate color down\n                    output_grid[trigger_pixel[0], trigger_pixel[1]] = 0 #clear trigger\n                    #clear grey pixels\n                    for i_clear in range(i):\n                      row_clear, col_clear, color_clear = group[i_clear]\n                      if(color_clear == 5):\n                        output_grid[row_clear, col_clear] = 0\n    \n    #horizontal propagation\n    horizontal_groups = get_horizontal_groups(output_grid)\n    grey_group_indices = []\n    color_group_indices = []\n\n    for i, group in enumerate(horizontal_groups):\n      has_grey = False\n      has_color = False\n      for row, col, color in group:\n        if color == 5:\n          has_grey = True\n        elif color != 0 and color != 2:\n          has_color = True\n\n      if has_grey and not has_color:\n        grey_group_indices.append(i)\n      if has_color:\n        color_group_indices.append(i)\n      \n    if len(grey_group_indices) > 0 and len(color_group_indices) > 0:\n      for color_index in color_group_indices:\n        colored_pixels = horizontal_groups[color_index]\n        for row, col, color in colored_pixels:\n            output_grid[row,col] = color #copy color pixels\n        for i in range(output_grid.shape[0]):\n          for j in range(output_grid.shape[1]):\n            if output_grid[i,j] == 2:\n              output_grid[i,j] = colored_pixels[0][2] # use first color\n    \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 1114,
            "end_index": 1331,
            "uri": "https://github.com/colesimmons/py_ogsl",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5406,
    "candidates_token_count": 1081,
    "total_token_count": 6487,
    "cached_content_token_count": 0
  },
  "response_time": 10.747204
}