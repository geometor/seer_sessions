{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Examine** each row in the input grid.\n2.  **Identify** rows that contain only black pixels (black rows) and rows that contain at least one non-black pixel (non-black rows).\n3.  **Store** the non-black rows in a separate list.\n4.  **Reverse** the order of the list of non-black rows.\n5.  **Construct** the output grid as follows.\n6.  **Iterate** through the *indices* of the input grid's rows.\n    - Add to the output, rows of all black pixels at the same index where they occur in the input.\n    - After placing all the original black lines, append the reversed non-black rows to the *end* of the output.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    input_grid = np.array(input_grid)\n    non_black_rows = []\n    black_rows_indices = []\n\n    # 1. & 2. Identify and separate row types\n    for i, row in enumerate(input_grid):\n        if np.all(row == 0):\n            black_rows_indices.append(i)\n        else:\n            non_black_rows.append(row)\n\n    # 3. Reverse Non-Black Rows\n    non_black_rows.reverse()\n\n    # 4. Construct Output\n    output_grid = []\n\n    # 5. Add original black rows using index\n    for i in black_rows_indices:\n        output_grid.append(input_grid[i])\n\n    # 6. Append reversed non-black rows\n    output_grid.extend(non_black_rows)\n\n    return np.array(output_grid).tolist()\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3041,
    "candidates_token_count": 402,
    "total_token_count": 3443,
    "cached_content_token_count": 0
  },
  "response_time": 27.534223
}