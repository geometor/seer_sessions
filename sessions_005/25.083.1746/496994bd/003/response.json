{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Non-Black Rows:** Scan the entire input grid and identify all rows that contain at least one pixel that is *not* black (value not equal to 0).\n2.  **Keep Track of Black Rows and Their Original Order:** Make not of the rows that contain only black (value equal to 0), and keep their top-down ordering.\n3.  **Reverse Non-Black Rows:** Reverse the order of the identified non-black rows.\n4.  **Construct Output:** Create the output grid by first placing the all-black rows in their original order, and stacking the reversed non-black rows at the bottom.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    # Convert to numpy array for easier manipulation\n    input_grid = np.array(input_grid)\n\n    # 1. Identify Non-Black Rows\n    non_black_rows = []\n    black_rows = []\n    for i, row in enumerate(input_grid):\n        if np.any(row != 0):\n            non_black_rows.append(row)\n        else:\n          black_rows.append(row)\n\n    # 2. Reverse Non-Black Rows\n    non_black_rows.reverse()\n\n    # 3. Construct Output\n    output_grid = np.vstack(black_rows + non_black_rows) if len(black_rows) + len(non_black_rows) > 0 else input_grid\n\n    return output_grid.tolist()\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3243,
    "candidates_token_count": 342,
    "total_token_count": 3585,
    "cached_content_token_count": 0
  },
  "response_time": 4.679741
}