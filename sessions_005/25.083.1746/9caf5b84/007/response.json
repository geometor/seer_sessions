{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Contiguous Regions:** For each pixel in the input grid, determine the contiguous region of pixels with the same color. A contiguous region is defined as a group of one or more pixels of the same color that are directly adjacent to each other (horizontally or vertically, but not diagonally).\n2.  **Identify Border Pixels:** For each contiguous region, identify its border pixels. A border pixel is one that either:\n    *   Is on the edge of the entire grid.\n    *   Has at least one directly adjacent pixel (horizontally or vertically) that has a *different* color.\n3.  **Transform Border Pixels:** In the output grid (initialized as a copy of the input grid), change the color of all identified border pixels to orange (7).\n4. **Leave Non-Border Pixels Unchanged:** Pixels that are not part of any border should retain their original color from the input grid in the output grid.\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, row, col):\n    \"\"\"Gets the valid neighbors of a cell in the grid.\"\"\"\n    rows, cols = len(grid), len(grid[0])\n    neighbors = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i == 0 and j == 0:\n                continue\n            new_row, new_col = row + i, col + j\n            if 0 <= new_row < rows and 0 <= new_col < cols:\n                neighbors.append((new_row, new_col))\n    return neighbors\n\ndef is_outer_border(grid, row, col):\n    \"\"\"Checks if a pixel is on the outer border of a contiguous region.\"\"\"\n    rows, cols = len(grid), len(grid[0])\n    current_color = grid[row][col]\n    neighbors = get_neighbors(grid, row, col)\n\n    # Check if the pixel is on the edge of the grid\n    if row == 0 or row == rows - 1 or col == 0 or col == cols - 1:\n        return True\n\n    # Check if any neighbor has a different color, only consider adjacent (not diagonal)\n    for neighbor_row, neighbor_col in neighbors:\n        if abs(neighbor_row - row) + abs(neighbor_col - col) == 1:  # Check for direct adjacency\n            if grid[neighbor_row][neighbor_col] != current_color:\n                return True\n\n    return False\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of the input_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = len(input_grid), len(input_grid[0])\n\n    # Iterate through each cell and check if it's on the border\n    for row in range(rows):\n        for col in range(cols):\n            if is_outer_border(input_grid, row, col):\n                output_grid[row][col] = 7\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 1101,
            "end_index": 1331,
            "uri": "https://github.com/jamesthomson99/A-star-search",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3279,
    "candidates_token_count": 691,
    "total_token_count": 3970,
    "cached_content_token_count": 0
  },
  "response_time": 8.698242
}