{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation rule identifies continuous, straight, un-branching lines of red pixels (value 2) within the input grid. These can be either horizontal or vertical. If such a line exists, *and it's the only such line*, it is expanded to fill the entire row (if horizontal) or the entire column (if vertical) it occupies. If there are isolated red pixels, or more than one line of red pixels, or any L shapes, no change occurs.\n\"\"\"\n\nimport numpy as np\n\ndef get_red_lines(grid):\n    \"\"\"Finds all connected horizontal and vertical lines of red pixels.\"\"\"\n    red_lines = []\n    rows, cols = grid.shape\n\n    # Check for horizontal lines\n    for r in range(rows):\n        line = []\n        for c in range(cols):\n            if grid[r, c] == 2:\n                line.append((r, c))\n            else:\n                if len(line) > 1:\n                    red_lines.append(line)\n                line = []\n        if len(line) > 1:\n            red_lines.append(line)\n\n    # Check for vertical lines\n    for c in range(cols):\n        line = []\n        for r in range(rows):\n            if grid[r, c] == 2:\n                line.append((r, c))\n            else:\n                if len(line) > 1:\n                    red_lines.append(line)\n                line = []\n        if len(line) > 1:\n            red_lines.append(line)\n    return red_lines\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n    grid = np.array(input_grid)\n    red_lines = get_red_lines(grid)\n\n    # If there's exactly one red line, expand it\n    if len(red_lines) == 1:\n        line = red_lines[0]\n        rows = [r for r, _ in line]\n        cols = [c for _, c in line]\n\n        if len(set(rows)) == 1:  # Horizontal\n            output_grid[rows[0], :] = 2\n        elif len(set(cols)) == 1:  # Vertical\n            output_grid[:, cols[0]] = 2\n\n    return output_grid.tolist()\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3485,
    "candidates_token_count": 552,
    "total_token_count": 4037,
    "cached_content_token_count": 0
  },
  "response_time": 7.574516
}