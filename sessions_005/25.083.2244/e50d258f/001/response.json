{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nFinds the largest rectangle of non-zero pixels within the input grid that is not adjacent to any zero pixels and returns it as the output grid.\n\"\"\"\n\nimport numpy as np\n\ndef find_non_zero_bounding_box(grid):\n    \"\"\"Finds the bounding box of the non-zero region, excluding borders adjacent to zeros.\"\"\"\n    rows, cols = grid.shape\n    min_row, max_row = rows, -1\n    min_col, max_col = cols, -1\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0:\n                min_row = min(min_row, r)\n                max_row = max(max_row, r)\n                min_col = min(min_col, c)\n                max_col = max(max_col, c)\n\n    # Check for adjacency to zeros and shrink the bounding box if necessary\n    while True:\n        shrink = False\n        # Check top\n        if min_row > 0:\n           if 0 in grid[min_row-1,max(0,min_col-1):min(cols, max_col+2)]:\n                min_row += 1\n                shrink = True\n        # Check bottom\n        if max_row < rows -1:\n            if 0 in grid[max_row+1, max(0, min_col-1):min(cols, max_col+2)]:\n                max_row -=1\n                shrink = True\n        # Check left\n        if min_col > 0:\n           if 0 in grid[max(0, min_row-1):min(rows, max_row+2), min_col-1]:\n               min_col += 1\n               shrink = True\n\n        # Check Right\n        if max_col < cols - 1:\n            if 0 in grid[max(0, min_row-1):min(rows, max_row + 2), max_col+1]:\n                max_col -=1\n                shrink = True\n        if not shrink:\n          break\n\n    return min_row, max_row, min_col, max_col\n\ndef transform(input_grid):\n    \"\"\"\n    Extracts the subgrid defined by the largest contiguous block of non-zero pixels,\n    excluding any borders that are directly adjacent to zero pixels.\n    \"\"\"\n    grid = np.array(input_grid)\n\n    # Find the bounding box of non-zero pixels, excluding those next to zeros.\n    min_row, max_row, min_col, max_col = find_non_zero_bounding_box(grid)\n\n    # Extract the subgrid.\n    output_grid = grid[min_row:max_row+1, min_col:max_col+1].tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2333,
    "candidates_token_count": 656,
    "total_token_count": 2989,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.951393
}