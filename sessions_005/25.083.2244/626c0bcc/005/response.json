{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Input:** A 2D grid of integer values (0-9) representing colors.\n2.  **Azure Cluster Identification:** Identify connected regions (clusters) of azure (8) colored pixels.  Pixels are connected if they are adjacent horizontally or vertically, but *not* diagonally.\n3.  **Extrema Determination:** Within each identified azure cluster, locate four \"extrema\" pixels:\n    *   **Top-Left:** The azure pixel with the smallest row and smallest column index.\n    *   **Top-Right:** The azure pixel with the smallest row and largest column index.\n    *   **Bottom-Left:** The azure pixel with the largest row and smallest column index.\n    *   **Bottom-Right:** The azure pixel with the largest row and largest column index.\n4.  **Color Transformation:**  Change the color of the identified extrema pixels as follows:\n    *   Top-Left pixel becomes blue (1).\n    *   Top-Right pixel becomes yellow (4).\n    *   Bottom-Left pixel becomes green (3).\n    *   Bottom-Right pixel becomes red (2).\n5. **Preservation of other colors.** All non-azure pixels must retain their original color.\n6.  **Output:** The modified 2D grid with the color transformations applied.\n\"\"\"\n\nimport numpy as np\n\ndef find_clusters(grid, color):\n    \"\"\"\n    Finds clusters of a specific color in the grid.\n    \n    Args:\n        grid: A 2D numpy array representing the grid.\n        color: The color to find clusters of.\n\n    Returns:\n        A list of clusters, where each cluster is a list of (row, col) coordinates.\n    \"\"\"\n    visited = set()\n    clusters = []\n\n    def is_valid(row, col):\n        return 0 <= row < grid.shape[0] and 0 <= col < grid.shape[1]\n\n    def dfs(row, col, current_cluster):\n        if (row, col) in visited or not is_valid(row, col) or grid[row, col] != color:\n            return\n\n        visited.add((row, col))\n        current_cluster.append((row, col))\n\n        # Explore adjacent cells (up, down, left, right)\n        dfs(row + 1, col, current_cluster)\n        dfs(row - 1, col, current_cluster)\n        dfs(row, col + 1, current_cluster)\n        dfs(row, col - 1, current_cluster)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] == color and (row, col) not in visited:\n                current_cluster = []\n                dfs(row, col, current_cluster)\n                clusters.append(current_cluster)\n\n    return clusters\n\ndef get_cluster_extrema(cluster):\n    \"\"\"\n    Find the top-left, top-right, bottom-left, and bottom-right pixel coordinates of a cluster.\n    \"\"\"\n    if not cluster:\n        return None, None, None, None\n\n    rows, cols = zip(*cluster)\n    min_row, max_row = min(rows), max(rows)\n    min_col, max_col = min(cols), max(cols)\n\n    top_left = (min_row, min_col)\n    top_right = (min_row, max_col)\n    bottom_left = (max_row, min_col)\n    bottom_right = (max_row, max_col)\n    \n    return top_left, top_right, bottom_left, bottom_right\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the identified rule.\n    \"\"\"\n    input_grid = np.array(input_grid)\n    output_grid = input_grid.copy()\n    \n    # Find azure clusters\n    azure_clusters = find_clusters(input_grid, 8)\n    \n    # Iterate through each cluster\n    for cluster in azure_clusters:\n        # Determine extrema within cluster\n        top_left, top_right, bottom_left, bottom_right = get_cluster_extrema(cluster)\n\n        # Transform based on relative position\n        output_grid[top_left] = 1      # Top-left -> Blue\n        output_grid[top_right] = 4     # Top-right -> Yellow\n        output_grid[bottom_left] = 3   # Bottom-left -> Green\n        output_grid[bottom_right] = 2  # Bottom-right -> Red\n    \n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3072,
    "candidates_token_count": 1065,
    "total_token_count": 4137,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 12.468023
}