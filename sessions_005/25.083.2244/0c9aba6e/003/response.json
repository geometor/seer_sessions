{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies \"L\" shapes (groups of three connected magenta pixels) in the section of the input grid below a horizontal line of orange (7) pixels.\nReplaces these \"L\" shapes with azure (8) pixels in the output grid, maintaining their original relative positions.\nIf no separator line is found, the entire input grid is considered.\n\"\"\"\n\nimport numpy as np\n\ndef find_separator_row(grid):\n    \"\"\"Finds the row index of the separator line (all 7s).\"\"\"\n    for i, row in enumerate(grid):\n        if all(pixel == 7 for pixel in row):\n            return i\n    return -1  # Separator not found\n\ndef extract_bottom_section(grid, separator_row_index):\n    \"\"\"Extracts the section of the grid below the separator row.\"\"\"\n    if separator_row_index != -1:\n        return grid[separator_row_index + 1:]\n    return grid # Return entire grid if separator not found\n\ndef is_valid_coordinate(row, col, rows, cols):\n    \"\"\"Checks if a coordinate is within the grid bounds.\"\"\"\n    return 0 <= row < rows and 0 <= col < cols\n\ndef find_l_shapes(grid):\n    \"\"\"Identifies \"L\" shapes in the given grid.\"\"\"\n    l_shapes = []\n    rows, cols = grid.shape\n    visited = set()\n\n    def is_l_shape(pixels):\n        \"\"\"Checks if a set of three pixels forms an L shape.\"\"\"\n        if len(pixels) != 3:\n            return False\n\n        # Convert pixel list to a set of tuples for easier comparison\n        pixel_set = set(pixels)\n\n        # Check for connectivity:  All pixels should be neighbors of at least one other pixel in the set\n        for r1, c1 in pixel_set:\n            neighbors = 0\n            for r2, c2 in pixel_set:\n                if (r1, c1) != (r2, c2):\n                    if abs(r1 - r2) <= 1 and abs(c1 - c2) <= 1:\n                        neighbors += 1\n            if neighbors < 1:  # At least one neighbor required\n                return False\n        \n        # check for 3 pixels that are connected and form a L\n        # find a corner and two adjacent pixels.\n        for r1, c1 in pixel_set:\n            adj = []\n            for r2, c2 in pixel_set:\n                if (r1,c1) != (r2,c2) and abs(r1-r2) <= 1 and abs(c1-c2) <= 1:\n                    adj.append((r2,c2))\n            if len(adj) == 2:\n                # check for straight line\n                if adj[0][0] == adj[1][0] or adj[0][1] == adj[1][1]:\n                    return True\n        return False\n\n\n    def explore_neighbors(row, col, current_l_shape):\n        \"\"\"Recursively explores neighbors to find connected magenta pixels.\"\"\"\n        if (row, col) in visited or not is_valid_coordinate(row, col, rows, cols) or grid[row, col] != 6:\n            return\n\n        visited.add((row, col))\n        current_l_shape.append((row, col))\n\n        # Explore adjacent cells\n        explore_neighbors(row + 1, col, current_l_shape)\n        explore_neighbors(row - 1, col, current_l_shape)\n        explore_neighbors(row, col + 1, current_l_shape)\n        explore_neighbors(row, col - 1, current_l_shape)\n\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == 6 and (r, c) not in visited:\n                current_l_shape = []\n                explore_neighbors(r, c, current_l_shape)\n                if is_l_shape(current_l_shape):\n                    l_shapes.append(current_l_shape)\n\n    return l_shapes\n\ndef transform(input_grid):\n    # Convert input grid to a NumPy array\n    input_grid = np.array(input_grid)\n\n    # Find the separator row index\n    separator_row_index = find_separator_row(input_grid)\n\n    # Extract the bottom section of the grid (or the whole grid if no separator)\n    bottom_section = extract_bottom_section(input_grid, separator_row_index)\n\n    # Calculate offset for correct positioning in output\n    row_offset = separator_row_index + 1 if separator_row_index != -1 else 0\n    \n    # initialize output grid as all zeros, same size as *bottom section*\n    output_grid = np.zeros(bottom_section.shape, dtype=int)\n\n\n    # Find \"L\" shapes in the bottom section\n    l_shapes = find_l_shapes(bottom_section)\n\n    # Replace \"L\" shape pixels with azure (8) in the output grid\n    for l_shape in l_shapes:\n        for r, c in l_shape:\n            # Adjust row index based on offset\n            output_grid[r, c] = 8  \n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6339,
    "candidates_token_count": 1224,
    "total_token_count": 7563,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 17.906238
}