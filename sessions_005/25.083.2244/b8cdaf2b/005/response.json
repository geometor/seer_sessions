{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:**\n    *   Object 1: The lowest row of the input grid containing non-zero values.\n    *   Object 2: The contiguous block of pixels *above* Object 1, that contains at least one pixel of a different color than any colors in object 1.\n\n2.  **Select Source Pixels:**\n    *   Iterate through each pixel in Object 2.\n    *   For each pixel in Object 2, check if there is a pixel directly *below* it (in Object 1).\n    *   If a pixel exists directly below, and that lower pixel has any color from the set of object 1 colors, then: the position of the object 2 pixel is where object 1's color should be copied.\n\n3.  **Copy and Shift:** For each of the located Object 2 pixels, replace with the color of the Object 1 pixel directly below.\n\n4.  **Preserve Other Pixels:** All other pixels in the grid retain their original values.\n\n5.  **Output:** Return the modified grid.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    # Find the lowest row with non-zero values\n    non_zero_rows = np.where(np.any(grid != 0, axis=1))[0]\n    if not non_zero_rows.size:\n        return [], []\n\n    last_row_index = non_zero_rows[-1]\n    last_row = grid[last_row_index]\n    object1_coords = [(last_row_index, c) for c, value in enumerate(last_row) if value != 0]\n    if not object1_coords:\n        return [],[]\n    object1_colors = set([grid[r,c] for r,c in object1_coords])\n\n    object2_coords = []\n    for r in range(last_row_index):\n        for c in range(grid.shape[1]):\n          if grid[r,c] != 0 and grid[r,c] not in object1_colors:\n            object2_coords.append((r,c))\n    \n    #remove object 2 coordinates not connected\n    if len(object2_coords) > 0:\n        object2_color = grid[object2_coords[0]]\n        connected_object2 = []\n        \n        def is_connected(coord, color):\n          r,c = coord\n          neighbors = [(r-1,c),(r+1,c),(r,c-1),(r,c+1)]\n          for nr, nc in neighbors:\n              if 0 <= nr < grid.shape[0] and 0 <= nc < grid.shape[1]:\n                  if (nr,nc) in object2_coords and grid[nr,nc] == color:\n                    return True\n          return False\n        \n        for r,c in object2_coords:\n            if grid[r,c] == object2_color and is_connected((r,c), object2_color):\n                connected_object2.append((r,c))\n        object2_coords = connected_object2\n\n    return object1_coords, object2_coords\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n    input_grid_np = np.array(input_grid)\n\n    # Find objects\n    object1_coords, object2_coords = find_objects(input_grid_np)\n    object1_colors = set([input_grid_np[r,c] for r,c in object1_coords])\n\n    # Iterate through object 2 pixels\n    for r2, c2 in object2_coords:\n      #check for object 1 pixel below\n      if (r2+1,c2) in object1_coords:\n        output_grid[r2,c2] = input_grid_np[r2+1,c2]\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5632,
    "candidates_token_count": 918,
    "total_token_count": 6550,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.523693
}