{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by swapping the border color with the most frequent inner color.\nThe border color of the input becomes the inner color of the output, and the most\nfrequent inner color of the input becomes the border color of the output. All instances\nof these colors are swapped throughout the grid.\n\"\"\"\n\nimport numpy as np\n\ndef get_border_color(grid):\n    \"\"\"Gets the border color of the grid (top-left pixel).\"\"\"\n    return grid[0, 0]\n\ndef get_inner_colors(grid):\n    \"\"\"Gets the unique inner colors of the grid.\"\"\"\n    grid = np.array(grid)\n    border_color = get_border_color(grid)\n    inner_colors = np.unique(grid[1:-1, 1:-1])\n    inner_colors = inner_colors[inner_colors != border_color]\n    return inner_colors\n\ndef get_most_frequent_inner_color(grid):\n    \"\"\"Gets most frequent inner color\"\"\"\n    inner_colors = get_inner_colors(grid)\n    if len(inner_colors) == 0:\n        return None\n    \n    counts = []\n    for color in inner_colors:\n        counts.append(np.sum(np.array(grid) == color))\n\n    most_frequent_index = np.argmax(counts)\n    return inner_colors[most_frequent_index]\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid by swapping border and the most frequent inner color.\"\"\"\n    input_grid = np.array(input_grid)\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Get the border color of the input grid.\n    input_border_color = get_border_color(input_grid)\n\n    # Find the most frequent inner color\n    most_frequent_inner_color = get_most_frequent_inner_color(input_grid)\n    \n    if most_frequent_inner_color is None:\n      return output_grid.tolist()\n\n    # Swap the colors\n    output_grid[input_grid == input_border_color] = most_frequent_inner_color\n    output_grid[input_grid == most_frequent_inner_color] = input_border_color\n    \n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5638,
    "candidates_token_count": 544,
    "total_token_count": 6182,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 50.563394
}