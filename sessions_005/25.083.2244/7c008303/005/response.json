{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid into an output grid by extracting colored regions above and below a horizontal azure line, and then stacking these regions, considering only the bounding box of colored pixels in each section.\n\"\"\"\n\nimport numpy as np\n\ndef get_azure_line_row(grid):\n    \"\"\"Finds the row index of the horizontal azure line.\"\"\"\n    for i, row in enumerate(grid):\n        if all(pixel == 8 for pixel in row):\n            return i\n    return -1  # Should not happen given the task description\n\ndef get_colored_rows_cols(grid_section):\n    \"\"\"\n    Identifies rows and columns with colored (non-white, non-azure) pixels.\n    Returns a tuple of (rows, cols), where each is a set of indices.\n    \"\"\"\n    rows = set()\n    cols = set()\n    for i, row in enumerate(grid_section):\n        for j, pixel in enumerate(row):\n            if pixel != 0 and pixel != 8:\n                rows.add(i)\n                cols.add(j)\n    return rows, cols\n\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the described rules.\"\"\"\n\n    input_grid = np.array(input_grid)\n    azure_line_row = get_azure_line_row(input_grid)\n\n    # Separate the grid into sections above and below the azure line\n    top_section = input_grid[:azure_line_row]\n    bottom_section = input_grid[azure_line_row + 1:]\n\n    # Determine rows and columns with colored pixels for each section\n    top_rows, top_cols = get_colored_rows_cols(top_section)\n    bottom_rows, bottom_cols = get_colored_rows_cols(bottom_section)\n\n    # Determine output grid dimensions\n    output_height = len(top_rows) + len(bottom_rows)\n    output_width = max(len(top_cols) if top_cols else 0, len(bottom_cols) if bottom_cols else 0)\n\n    # Create output grid\n    if output_height > 0 and output_width > 0:\n        output_grid = np.zeros((output_height, output_width), dtype=int)\n    else:\n        return []\n\n    # Map original column indices to new indices in output\n    top_col_map = {old_col: new_col for new_col, old_col in enumerate(sorted(top_cols))}\n    bottom_col_map = {old_col: new_col for new_col, old_col in enumerate(sorted(bottom_cols))}\n\n    # Copy top section\n    for new_row, old_row in enumerate(sorted(top_rows)):\n        for old_col in top_cols:\n          if top_section[old_row,old_col] != 0 and top_section[old_row, old_col] != 8:\n            output_grid[new_row, top_col_map[old_col]] = top_section[old_row, old_col]\n\n    # Copy bottom section\n    for new_row, old_row in enumerate(sorted(bottom_rows)):\n        for old_col in bottom_cols:\n          if bottom_section[old_row,old_col] != 0 and bottom_section[old_row, old_col] != 8:\n            output_grid[new_row + len(top_rows), bottom_col_map[old_col]] = bottom_section[old_row, old_col]\n\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7874,
    "candidates_token_count": 828,
    "total_token_count": 8702,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 12.785937
}