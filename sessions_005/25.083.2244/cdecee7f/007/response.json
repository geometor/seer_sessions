{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nExtracts non-zero pixels from the input grid, sorts them based on their original\npositions (first by column, then by row), and arranges them into a new,\nsmaller output grid in row-major order.\n\"\"\"\n\nimport numpy as np\n\ndef get_non_zero_pixels(grid):\n    \"\"\"Extracts non-zero pixels with their coordinates.\"\"\"\n    non_zero_pixels = []\n    for row_index, row in enumerate(grid):\n        for col_index, value in enumerate(row):\n            if value != 0:\n                non_zero_pixels.append(((row_index, col_index), value))\n    return non_zero_pixels\n\ndef sort_pixels(pixels):\n    \"\"\"Sorts pixels first by column (ascending), then by row (ascending).\"\"\"\n    return sorted(pixels, key=lambda item: (item[0][1], item[0][0]))\n\ndef transform(input_grid):\n    # Extract non-zero pixels and their original locations.\n    non_zero_pixels = get_non_zero_pixels(input_grid)\n\n    # Sort the extracted pixels based on their original column and row.\n    sorted_pixels = sort_pixels(non_zero_pixels)\n\n    # if no pixels, return empty array\n    if not sorted_pixels:\n      return np.array([[0]])\n\n    # Determine output grid dimensions and create an empty output grid.\n    values = [p[1] for p in sorted_pixels]\n\n    # calculate the size and shape of the output\n    n = len(values)\n    cols = int(np.ceil(np.sqrt(n)))\n    rows = int(np.ceil(n / cols))\n\n    output_grid = np.zeros((rows, cols), dtype=int)\n\n    # Arrange the sorted pixel values into the output grid in row-major order.\n    for i in range(rows):\n        for j in range(cols):\n            idx = i * cols + j\n            if idx < n:\n                output_grid[i,j] = values[idx]\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6776,
    "candidates_token_count": 476,
    "total_token_count": 7252,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.527819
}