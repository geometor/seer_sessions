{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nYellow pixels remain in their original positions. Azure pixels move based on their connectivity and initial location.\nIsolated azure pixels are duplicated within its row. If it starts at column 0, it adds a copy to its right. If not, it moves to column 0.\nHorizontally connected azure pixels expands to the nearest edge of the grid, keeping the relative position (left, right)\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, row, col):\n    \"\"\"Get the valid neighbors of a cell in a grid.\"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    for dr in [-1, 0, 1]:\n        for dc in [-1, 0, 1]:\n            if dr == 0 and dc == 0:\n                continue\n            r, c = row + dr, col + dc\n            if 0 <= r < rows and 0 <= c < cols:\n                neighbors.append((r, c))\n    return neighbors\n\ndef is_horizontally_connected(grid, row, col):\n    \"\"\"Checks if an azure pixel is horizontally connected.\"\"\"\n    if grid[row, col] != 8:\n        return False\n\n    rows, cols = grid.shape\n    if col > 0 and grid[row, col - 1] == 8:\n        return True\n    if col < cols - 1 and grid[row, col + 1] == 8:\n        return True\n    return False\n\ndef count_same_color_in_row(grid, row, col):\n    \"\"\"Counts the number of pixels of the same color in a row.\"\"\"\n    count = 0\n    rows, cols = grid.shape\n    for c in range(cols):\n        if grid[row,c] == grid[row,col]:\n            count = count + 1\n    return count\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of the input_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Iterate through each cell of the input grid\n    for r in range(rows):\n        for c in range(cols):\n            # Yellow pixels remain unchanged\n            if input_grid[r, c] == 4:\n                continue  # Yellow pixels are already in place\n\n            # Handle azure pixels\n            if input_grid[r, c] == 8:\n                if not is_horizontally_connected(input_grid, r, c):\n                    # Isolated azure pixel\n                    if c == 0:\n                        # Duplicate to the right\n                        output_grid[r, c+1] = 8\n                    elif count_same_color_in_row(input_grid,r,c) > 1:\n                        first_c = -1\n                        for current_c in range(cols):\n                            if input_grid[r,current_c] == 8:\n                                if first_c == -1:\n                                    first_c = current_c\n                                output_grid[r,current_c] = 0\n\n                        output_grid[r,0] = 8\n                        output_grid[r,1] = 8\n\n                    else:\n                        # Move to the leftmost position\n                        output_grid[r, 0] = 8\n                        output_grid[r,c] = 0 #clear original\n\n                else:\n                    # Horizontally connected azure pixels: expand to border.\n                    azure_group = []\n                    current_c = c\n                    \n                    while current_c < cols and input_grid[r,current_c] == 8:\n                        azure_group.append(current_c)\n                        current_c += 1\n                    if(len(azure_group) == 0):\n                       current_c = c-1\n                       while current_c >= 0 and input_grid[r,current_c] == 8:\n                            azure_group.append(current_c)\n                            current_c -= 1\n\n                    first = min(azure_group)\n                    last  = max(azure_group)\n                    for i in range(first,last+1):\n                            output_grid[r,i]=0\n\n                    if first == 0:\n\n                        #expand right\n                         for i in range(len(azure_group)):\n                            output_grid[r,i]=8\n\n                    else:\n                        #expand left\n                         for i in range(first,last+1):\n                            output_grid[r,i-first]=8\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 9240,
    "candidates_token_count": 1032,
    "total_token_count": 10272,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.66241
}