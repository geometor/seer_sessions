{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  Yellow Pixels (4): Remain unchanged in their original positions.\n\n2.  Azure Pixels (8): Their behavior depends on whether they are horizontally connected to other azure pixels.\n\n    *   Isolated Azure Pixels: An azure pixel is considered \"isolated\" if it has no immediate horizontal neighbors (left or right) of the same color (8).\n        *   Leftmost Isolated Azure Pixel: If an isolated azure pixel is at the leftmost edge (column 0) of the grid, it duplicates itself to the immediate right.\n        *   Other Isolated Azure Pixel: If an isolated azure pixel is *not* at the leftmost edge, and is the *only* azure pixel on its row, it moves to the leftmost position (column 0) of its row.\n        *  Multiple Azure Pixels: If an isolate azure pixel is on a row with another azure pixel, all azure pixels are cleared on the row, and two azure pixels are added to the leftmost edge.\n\n    *   Horizontally Connected Azure Pixels: Two or more azure pixels are \"horizontally connected\" if they are adjacent in the same row.\n         *  Duplicate the connected azure pixels to *both* edges, filling from the edges with connected azure pixels.\n\"\"\"\n\nimport numpy as np\n\ndef is_horizontally_connected(grid, row, col):\n    \"\"\"Checks if an azure pixel is horizontally connected.\"\"\"\n    if grid[row, col] != 8:\n        return False\n\n    rows, cols = grid.shape\n    if col > 0 and grid[row, col - 1] == 8:\n        return True\n    if col < cols - 1 and grid[row, col + 1] == 8:\n        return True\n    return False\n\ndef count_azure_in_row(grid, row):\n    \"\"\"Counts azure pixels in a row\"\"\"\n    count = 0\n    rows, cols = grid.shape\n    for c in range(cols):\n        if grid[row,c] == 8:\n            count += 1\n    return count\n\ndef transform(input_grid):\n    # initialize output_grid as a copy of the input_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Iterate through each cell of the input grid\n    for r in range(rows):\n        for c in range(cols):\n            # Yellow pixels remain unchanged\n            if input_grid[r, c] == 4:\n                continue\n\n            # Handle azure pixels\n            if input_grid[r, c] == 8:\n                if not is_horizontally_connected(input_grid, r, c):\n                    # Isolated azure pixel\n                    if c == 0:\n                        # Leftmost Isolated Azure Pixel: duplicate to the right\n                        output_grid[r, c+1] = 8\n                    elif count_azure_in_row(input_grid,r) > 1:\n                        #Multiple Isolated Azure Pixels:\n                        for current_c in range(cols):\n                            if input_grid[r,current_c] == 8:\n                                output_grid[r,current_c] = 0\n                        output_grid[r,0] = 8\n                        output_grid[r,1] = 8\n\n                    else:\n                        # Other Isolated Azure Pixel -  move to the leftmost position\n                        output_grid[r, 0] = 8\n                        output_grid[r,c] = 0 #clear original\n\n                else:\n                    # Horizontally connected azure pixels.\n                    azure_group = []\n                    #find the connected pixels\n\n                    current_c = c\n                    while current_c >= 0 and input_grid[r,current_c] == 8 :\n                        azure_group.append(current_c)\n                        current_c = current_c - 1\n                    current_c = c + 1\n                    while current_c < cols and input_grid[r,current_c] == 8:\n                        azure_group.append(current_c)\n                        current_c = current_c + 1\n                    \n                    #clear existing\n                    for i in azure_group:\n                        output_grid[r,i] = 0\n\n                    #fill from left\n                    left_count = len(azure_group)\n                    for i in range(left_count):\n                        output_grid[r,i] = 8\n\n                    #fill from right\n                    right_start = cols - len(azure_group)\n                    for i in range(right_start,cols):\n                        output_grid[r,i] = 8\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 9357,
    "candidates_token_count": 1048,
    "total_token_count": 10405,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 14.133293
}