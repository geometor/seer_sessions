Task: Extract a subgrid from the input based on the location of a white block and nearby red pixels.

Input_Features:
  - Grid: 2D array of pixels (colors 0-9).
  - Objects:
    - White_Block: A contiguous rectangular block of white (0) pixels.
        Properties:
          - Top-left corner: (wr, wc)
          - Dimensions: (wh, ww)
    - Red_Pixels: Individual red (2) pixels.
        Properties:
          - Location: (r, c)
          - Relevance: Considered relevant if their row `r` falls within the row span of the White_Block (wr <= r < wr + wh).

Output_Features:
  - Grid: A subgrid extracted from the input grid.
    Properties:
      - Dimensions: Same as the White_Block (wh, ww).
      - Content: Pixels copied from a specific region of the input grid.

Transformation:
  - Action: Extract a subgrid.
  - Parameters_Determined_By_Input:
    - Output_Dimensions: `wh`, `ww` (from White_Block).
    - Extraction_Start_Row (`otr`):
        - If no relevant Red_Pixels exist: `otr = wr + 2`.
        - If relevant Red_Pixels exist: `otr = wr`.
    - Extraction_Start_Column (`otc`):
        - If no relevant Red_Pixels exist: `otc = wc`.
        - If relevant Red_Pixels exist:
            - Find the minimum column index (`min_rc`) among all relevant Red_Pixels.
            - If `min_rc >= wc` (leftmost relevant red is right of or aligned with white block): `otc = wc + 2`.
            - If `min_rc < wc` (leftmost relevant red is left of white block):
                - Find all relevant Red_Pixels with column `c < wc`.
                - Calculate the minimum horizontal distance from the white block's left edge (`wc`) to these pixels: `min_dist = min(wc - c)`.
                - Set `otc = wc - (min_dist + 2)`.
  - Extraction_Process: Copy the subgrid of size `wh` x `ww` from the input grid, starting at the calculated coordinates (`otr`, `otc`). Handle boundary conditions if the calculated region extends beyond the input grid (though examples suggest extraction occurs within bounds).

Examples_Summary:
  - Example 1: No relevant red pixels. `otr = wr + 2`, `otc = wc`. Match.
  - Example 2: Relevant red pixels exist. `min_rc >= wc`. `otr = wr`, `otc = wc + 2`. Match.
  - Example 3: Relevant red pixels exist. `min_rc < wc`. `otr = wr`. Correct `otc` is `wc - (min_dist + 2)`. Original code used `wc - 1`, resulting in a mismatch. Revised logic yields correct `otc`.