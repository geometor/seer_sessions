{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThis function transforms an input grid based on the positions of a white block (color 0) and an optional red pixel (color 2).\n\n1. Find the bounding box (top-left corner and dimensions) of the contiguous white block (color 0).\n2. Find the location of the single red pixel (color 2), if it exists.\n3. The output grid dimensions are determined by the dimensions of the white block.\n4. Calculate the top-left corner (otr, otc) of the target subgrid in the input grid based on the following rules:\n    - If no red pixel exists: otr = wr + 2, otc = wc (where wr, wc are the top-left of the white block).\n    - If a red pixel exists at (rr, rc):\n        - otr = wr\n        - If rc < wc: otc = wc + 2 * (rc - wc)\n        - If rc >= wc: otc = rc\n5. Extract the subgrid from the input grid starting at (otr, otc) with the dimensions of the white block.\n6. Return the extracted subgrid.\n\"\"\"\n\nimport numpy as np\n\ndef find_pixels(grid, color):\n    \"\"\"Finds all coordinates (row, col) of pixels with a specific color.\"\"\"\n    rows, cols = np.where(grid == color)\n    return list(zip(rows, cols))\n\ndef find_bounding_box(coords):\n    \"\"\"\n    Finds the top-left corner (min_row, min_col) and dimensions (height, width)\n    of a bounding box containing all given coordinates.\n    Returns None if coords is empty.\n    \"\"\"\n    if not coords:\n        return None, None, None, None\n    min_row = min(r for r, c in coords)\n    min_col = min(c for r, c in coords)\n    max_row = max(r for r, c in coords)\n    max_col = max(c for r, c in coords)\n    height = max_row - min_row + 1\n    width = max_col - min_col + 1\n    return min_row, min_col, height, width\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n    \"\"\"\n    input_np = np.array(input_grid, dtype=int)\n\n    # 1. Find the white block\n    white_pixels = find_pixels(input_np, 0)\n    if not white_pixels:\n        # Handle case where no white pixels are found, though based on examples this shouldn't happen.\n        # Returning an empty grid or raising an error might be appropriate depending on requirements.\n        return np.array([[]], dtype=int) # Return empty grid for now\n\n    wr, wc, wh, ww = find_bounding_box(white_pixels)\n\n    # 2. Find the red pixel\n    red_pixels = find_pixels(input_np, 2)\n    red_pixel_coord = red_pixels[0] if red_pixels else None\n\n    # 3. Output grid dimensions are determined by the white block\n    # (wh, ww) are already calculated.\n\n    # 4. Calculate the top-left coordinate (otr, otc) of the target subgrid\n    if red_pixel_coord is None:\n        # Rule a: No red pixel found\n        otr = wr + 2\n        otc = wc\n    else:\n        # Rule b: Red pixel found at (rr, rc)\n        rr, rc = red_pixel_coord\n        otr = wr\n        if rc < wc:\n            # Rule b.ii: Red pixel is to the left\n            otc = wc + 2 * (rc - wc)\n        else:\n            # Rule b.iii: Red pixel is in the same column or to the right\n            otc = rc\n\n    # 5. Extract the subgrid\n    # Ensure calculated coordinates and dimensions are within the bounds of the input grid\n    input_h, input_w = input_np.shape\n    \n    # Adjust if coordinates go out of bounds (though rules might imply they won't if input is valid)\n    if otr < 0 or otc < 0 or otr + wh > input_h or otc + ww > input_w:\n         # Handle invalid target subgrid location - return empty or specific error grid?\n         # Based on the examples, the target seems always within bounds. Let's assume valid inputs.\n         # If this assumption fails, error handling or clipping logic would be needed here.\n         print(f\"Warning: Calculated target subgrid out of bounds. Input: {input_h}x{input_w}, Target: ({otr},{otc}) size {wh}x{ww}\")\n         # Let slicing handle potential errors, or return a default value\n         # For safety, clip the coordinates/dimensions if needed, although this might deviate from intended logic\n         # otr = max(0, otr)\n         # otc = max(0, otc)\n         # end_row = min(input_h, otr + wh)\n         # end_col = min(input_w, otc + ww)\n         # output_grid = input_np[otr:end_row, otc:end_col]\n         # But let's stick to the derived logic first.\n         pass\n\n\n    output_grid = input_np[otr:otr+wh, otc:otc+ww]\n\n    # 6. Return the extracted subgrid\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2219,
    "candidates_token_count": 1265,
    "total_token_count": 3484,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.973581
}