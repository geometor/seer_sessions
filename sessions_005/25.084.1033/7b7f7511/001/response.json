{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies if an input grid is composed of two identical halves, either horizontally or vertically.\nIf horizontal duplication (left half equals right half) exists, the output is the left half.\nIf vertical duplication (top half equals bottom half) exists, the output is the top half.\nIt is assumed that only one type of duplication exists for valid inputs.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by extracting either the left or top half,\n    depending on whether the grid is duplicated horizontally or vertically.\n\n    Args:\n        input_grid (list[list[int]]): A 2D list of integers representing the input grid.\n\n    Returns:\n        list[list[int]]: The extracted half of the grid (left or top).\n    \"\"\"\n    # Convert input list of lists to a NumPy array for easier slicing and comparison\n    grid = np.array(input_grid, dtype=int)\n    H, W = grid.shape # Get height and width\n\n    # Initialize output_grid (although we'll directly return the slice)\n    output_grid = None\n\n    # 1. Check for horizontal duplication\n    # Check if the width is even\n    if W % 2 == 0:\n        # Calculate the midpoint width\n        mid_w = W // 2\n        # Extract the left half (columns 0 to mid_w - 1)\n        left_half = grid[:, :mid_w]\n        # Extract the right half (columns mid_w to W - 1)\n        right_half = grid[:, mid_w:]\n\n        # Compare the left and right halves\n        if np.array_equal(left_half, right_half):\n            # If identical, the output is the left half\n            output_grid = left_half\n            # Convert back to list of lists before returning\n            return output_grid.tolist()\n\n    # 2. Check for vertical duplication (only if horizontal wasn't found or wasn't applicable)\n    # Check if the height is even\n    if H % 2 == 0:\n        # Calculate the midpoint height\n        mid_h = H // 2\n        # Extract the top half (rows 0 to mid_h - 1)\n        top_half = grid[:mid_h, :]\n        # Extract the bottom half (rows mid_h to H - 1)\n        bottom_half = grid[mid_h:, :]\n\n        # Compare the top and bottom halves\n        if np.array_equal(top_half, bottom_half):\n            # If identical, the output is the top half\n            output_grid = top_half\n            # Convert back to list of lists before returning\n            return output_grid.tolist()\n\n    # According to the task description and examples, one of the above conditions\n    # should always be met. If not, returning the original grid might be a fallback,\n    # but based on the analysis, it's expected to find a duplication.\n    # If output_grid is still None here, it indicates an unexpected input pattern.\n    # For this task, we assume a valid duplication is always present.\n    # However, adding a safeguard might be prudent in a general case.\n    # If no duplication is found (which shouldn't happen based on examples):\n    if output_grid is None:\n         # This case should not occur based on the provided examples and description.\n         # Depending on requirements, could raise an error or return input.\n         # Let's return the input grid as a fallback, though unlikely needed.\n         print(\"Warning: No horizontal or vertical duplication found. Returning original grid.\")\n         return input_grid # Or raise ValueError(\"No duplication found\")\n\n    # Should have returned within the if blocks\n    return output_grid.tolist() # Should ideally not be reached if logic inside loops is correct\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2118,
    "candidates_token_count": 863,
    "total_token_count": 2981,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 27.756941
}