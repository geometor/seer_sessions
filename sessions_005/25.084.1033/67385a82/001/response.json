{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentify all connected components of green pixels (value 3) in the input grid, \nconsidering 8-way connectivity (horizontal, vertical, and diagonal). \nFind the component with the largest number of pixels. Change the color of all \npixels belonging to this largest component from green (3) to azure (8). \nLeave all other pixels (white pixels and green pixels not in the largest component) \nunchanged.\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef find_connected_components(grid, target_color):\n    \"\"\"\n    Finds all connected components of a specific color in a grid using 8-way connectivity.\n\n    Args:\n        grid (np.ndarray): The input grid.\n        target_color (int): The color of the pixels to form components.\n\n    Returns:\n        list: A list of components, where each component is a list of (row, col) tuples.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    components = []\n\n    # Define 8 directions for neighbors (including diagonals)\n    directions = [\n        (-1, -1), (-1, 0), (-1, 1),\n        (0, -1),          (0, 1),\n        (1, -1), (1, 0), (1, 1)\n    ]\n\n    for r in range(rows):\n        for c in range(cols):\n            # If we find a pixel of the target color that hasn't been visited\n            if grid[r, c] == target_color and not visited[r, c]:\n                current_component = []\n                q = deque([(r, c)])\n                visited[r, c] = True\n\n                # Start Breadth-First Search (BFS)\n                while q:\n                    curr_r, curr_c = q.popleft()\n                    current_component.append((curr_r, curr_c))\n\n                    # Check all 8 neighbors\n                    for dr, dc in directions:\n                        nr, nc = curr_r + dr, curr_c + dc\n\n                        # Check if neighbor is within bounds\n                        if 0 <= nr < rows and 0 <= nc < cols:\n                            # Check if neighbor is the target color and not visited\n                            if grid[nr, nc] == target_color and not visited[nr, nc]:\n                                visited[nr, nc] = True\n                                q.append((nr, nc))\n                \n                # Add the found component to the list\n                components.append(current_component)\n\n    return components\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by changing the color of the largest connected \n    component of green (3) pixels to azure (8).\n\n    Args:\n        input_grid (np.ndarray): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.ndarray: A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    # Initialize output_grid as a copy of the input grid\n    output_grid = np.copy(input_grid)\n    \n    # Define the target color (green)\n    target_color = 3\n    # Define the replacement color (azure)\n    replacement_color = 8\n\n    # Find all connected components of the target color (green)\n    components = find_connected_components(output_grid, target_color)\n\n    # If no green components are found, return the original grid copy\n    if not components:\n        return output_grid\n\n    # Find the largest component\n    largest_component = []\n    max_size = 0\n    for component in components:\n        if len(component) > max_size:\n            max_size = len(component)\n            largest_component = component\n        # Note: If there's a tie for the largest size, this implementation \n        # will pick the first one encountered. Based on the problem description \n        # assuming a unique largest component.\n\n    # Change the color of pixels in the largest component\n    if largest_component: # Ensure a largest component was actually found\n        for r, c in largest_component:\n            output_grid[r, c] = replacement_color\n\n    # Return the modified grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2183,
    "candidates_token_count": 971,
    "total_token_count": 3154,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.231705
}