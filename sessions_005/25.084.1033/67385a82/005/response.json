{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid based on the following rules:\n1. Identify all connected components of green pixels (value 3) using 4-way (von Neumann) adjacency.\n2. Select components with a size (number of pixels) of 3 or more.\n3. For each selected component, change the color of all pixels within that component from green (3) to azure (8).\n4. Leave all other pixels unchanged.\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef find_connected_components_4way(grid, target_color):\n    \"\"\"\n    Finds all connected components of a specific color in a grid using 4-way connectivity.\n\n    Args:\n        grid (np.ndarray): The input grid.\n        target_color (int): The color of the pixels to form components.\n\n    Returns:\n        list: A list of components, where each component is a list of (row, col) tuples.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    components = []\n\n    # Define 4 directions for neighbors (up, down, left, right)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    for r in range(rows):\n        for c in range(cols):\n            # If we find a pixel of the target color that hasn't been visited\n            if grid[r, c] == target_color and not visited[r, c]:\n                current_component = []\n                q = deque([(r, c)])\n                visited[r, c] = True\n\n                # Start Breadth-First Search (BFS)\n                while q:\n                    curr_r, curr_c = q.popleft()\n                    current_component.append((curr_r, curr_c))\n\n                    # Check all 4 neighbors\n                    for dr, dc in directions:\n                        nr, nc = curr_r + dr, curr_c + dc\n\n                        # Check if neighbor is within bounds\n                        if 0 <= nr < rows and 0 <= nc < cols:\n                            # Check if neighbor is the target color and not visited\n                            if grid[nr, nc] == target_color and not visited[nr, nc]:\n                                visited[nr, nc] = True\n                                q.append((nr, nc))\n                \n                # Add the found component to the list\n                components.append(current_component)\n\n    return components\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule based on 4-way green components of size 3 or more.\n    \"\"\"\n    # initialize output_grid as a copy of the input grid\n    output_grid = np.copy(input_grid)\n    \n    # Define constants\n    target_color = 3  # green\n    replacement_color = 8  # azure\n    size_threshold = 3\n\n    # 1. Identify all 4-way connected components of green pixels\n    components = find_connected_components_4way(output_grid, target_color)\n\n    # Process each component\n    for component in components:\n        # 2. Check if the component size is 3 or more\n        if len(component) >= size_threshold:\n            # 3. Change the color of all pixels in the selected component\n            for r, c in component:\n                # Ensure the pixel is actually green before changing (safety check)\n                if output_grid[r, c] == target_color:\n                    output_grid[r, c] = replacement_color\n\n    # 4. Return the modified grid (unchanged pixels are implicitly handled by the initial copy)\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5135,
    "candidates_token_count": 841,
    "total_token_count": 5976,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 8.365413
}