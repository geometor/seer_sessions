{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\ndef find_foreground_color(grid):\n    \"\"\"Finds the first non-zero color in the grid.\"\"\"\n    unique_colors = np.unique(grid)\n    for color in unique_colors:\n        if color != 0:\n            return color\n    # Should not happen based on task examples, but handle just in case\n    return 0 \n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by inverting colors based on a specific mapping.\n    Pixels with the background color (0) are replaced by a target foreground color,\n    and pixels with the input foreground color are replaced by the background color (0).\n    The target foreground color depends on the input foreground color:\n    - green (3) maps to blue (1)\n    - gray (5) maps to yellow (4)\n    - azure (8) maps to red (2)\n    \"\"\"\n    # Convert input list of lists to numpy array for easier processing\n    input_grid_np = np.array(input_grid, dtype=int)\n    \n    # Get grid dimensions\n    height, width = input_grid_np.shape\n    \n    # Initialize the output grid with zeros (background color)\n    # We will fill in the correct colors during iteration\n    output_grid_np = np.zeros_like(input_grid_np)\n\n    # Define the color mapping from input foreground to output foreground\n    color_map = {\n        3: 1,  # green -> blue\n        5: 4,  # gray -> yellow\n        8: 2   # azure -> red\n    }\n\n    # Identify the input foreground color (assuming only one non-zero color besides background)\n    input_fg_color = find_foreground_color(input_grid_np)\n    \n    # Determine the output foreground color based on the mapping\n    # Handle case where input might be all background (though not in examples)\n    if input_fg_color in color_map:\n        output_fg_color = color_map[input_fg_color]\n    else:\n        # Default behavior if input foreground color is not in the map or is 0\n        # Based on the examples, this path shouldn't be taken.\n        # If the input is all 0, the output should arguably be all the corresponding output_fg_color.\n        # Let's assume if input is all 0, output is all 0 for now, or handle based on a default map entry if needed.\n        # For this problem, input_fg_color will always be 3, 5, or 8.\n        output_fg_color = 0 # Or raise an error, depending on desired robustness\n\n    # Iterate through each pixel of the input grid\n    for r in range(height):\n        for c in range(width):\n            # Apply the transformation rule\n            if input_grid_np[r, c] == 0:\n                # If input pixel is background, set output pixel to output foreground color\n                output_grid_np[r, c] = output_fg_color\n            else: # Implies input_grid_np[r, c] == input_fg_color\n                # If input pixel is input foreground, set output pixel to background (0)\n                output_grid_np[r, c] = 0\n                \n    # Convert numpy array back to list of lists for the expected output format\n    output_grid = output_grid_np.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2311,
    "candidates_token_count": 791,
    "total_token_count": 3102,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 8.7025
}