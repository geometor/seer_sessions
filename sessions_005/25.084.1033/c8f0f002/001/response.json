{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIterate through each pixel of the input grid. If a pixel's color is orange (7), check its 8 neighbors (orthogonal and diagonal). If any neighbor is blue (1), change the color of that pixel to gray (5) in the output grid. Otherwise, keep the original color. All non-orange pixels retain their original color.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on the rule: orange pixels adjacent to blue pixels become gray.\n\n    Args:\n        input_grid (list of lists of int): The input grid representing pixel colors.\n\n    Returns:\n        list of lists of int: The transformed output grid.\n    \"\"\"\n    # Convert input list of lists to a NumPy array for easier manipulation\n    input_array = np.array(input_grid, dtype=int)\n    # Get grid dimensions\n    height, width = input_array.shape\n    # Initialize output_grid as a copy of the input_grid\n    output_array = np.copy(input_array)\n\n    # Define the offsets for the 8 neighbors (horizontal, vertical, diagonal)\n    neighbor_offsets = [\n        (-1, -1), (-1, 0), (-1, 1),\n        ( 0, -1),          ( 0, 1),\n        ( 1, -1), ( 1, 0), ( 1, 1)\n    ]\n\n    # Iterate through each pixel in the input grid\n    for r in range(height):\n        for c in range(width):\n            # Check if the current pixel is orange (7)\n            if input_array[r, c] == 7:\n                # Assume initially that no blue neighbor is found\n                found_blue_neighbor = False\n                # Check all 8 neighbors\n                for dr, dc in neighbor_offsets:\n                    nr, nc = r + dr, c + dc\n                    # Check if the neighbor coordinates are within the grid boundaries\n                    if 0 <= nr < height and 0 <= nc < width:\n                        # Check if the neighbor is blue (1)\n                        if input_array[nr, nc] == 1:\n                            found_blue_neighbor = True\n                            # No need to check other neighbors once one is found\n                            break \n                \n                # If at least one blue neighbor was found, change the pixel in the output grid to gray (5)\n                if found_blue_neighbor:\n                    output_array[r, c] = 5\n            \n            # If the pixel is not orange (7), or if it is orange but has no blue neighbors,\n            # its value in the output_array remains unchanged (as it was copied initially).\n\n    # Convert the output NumPy array back to a list of lists\n    output_grid = output_array.tolist()\n    \n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2128,
    "candidates_token_count": 645,
    "total_token_count": 2773,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.518347
}