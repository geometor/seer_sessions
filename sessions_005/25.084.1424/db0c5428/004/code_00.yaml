task_context:
  problem_description: "Transform an input grid containing a single central pattern on a uniform background by placing four transformed versions of the pattern into the corners of an output grid, leaving the original pattern location filled with the background color."
  grid_properties:
    - background_color: Uniform, determined by corner pixels (consistently 'azure' / 8 in examples).
    - output_grid_size: Same as input grid size.
objects:
  - object_type: background
    description: A single solid color filling most of the grid.
    properties:
      color: 8 (azure) in examples.
  - object_type: pattern
    description: A single contiguous block of non-background pixels, roughly centered.
    properties:
      shape: Rectangular bounding box.
      size: 9x9 in all examples.
      color: Multi-colored.
      location: Variable, near the center.
actions:
  - action: identify_background_color
    inputs: [input_grid]
    outputs: [background_color]
  - action: identify_pattern_bounding_box
    inputs: [input_grid, background_color]
    outputs: [pattern_bbox]
  - action: extract_pattern
    inputs: [input_grid, pattern_bbox]
    outputs: [pattern_P]
  - action: create_output_grid
    inputs: [input_grid_shape, background_color]
    outputs: [output_grid]
    description: Initialize output grid with background color.
  - action: transform_and_place
    inputs: [output_grid, pattern_P]
    outputs: [modified_output_grid]
    description: >
      Calculate four versions of pattern_P and place them:
      1. Rotate 90 degrees clockwise, place at top-left (0, 0).
      2. Rotate 90 degrees counter-clockwise, place at top-right (0, W-pW).
      3. Rotate 180 degrees, place at bottom-left (H-pH, 0).
      4. Original pattern_P, place at bottom-right (H-pH, W-pW).
      (where H, W are output grid dimensions, pH, pW are pattern dimensions).