{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nReads the value N of the control pixel at (0, 0).\nDetermines a downward shift amount S based on N using the mapping: {Yellow(4): 3, Magenta(6): 2, Orange(7): 5, Maroon(9): 0}. Defaults to S=0 if N is not in the map.\nCreates a new output grid initialized with white (0) of the same dimensions as the input.\nCopies the control pixel N to the output grid at (0, 0).\nShifts the content of the input grid from rows 1 downwards by S rows.\nSpecifically, for each input row r (from 1 to height-1), its content is copied to the output grid at row r + S, if r + S is within the grid's height boundary.\nRows in the output grid from 1 to S remain white (as they were initialized). Content shifted beyond the bottom boundary is lost.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Applies a vertical shift to the grid content (excluding the top-left pixel)\n    based on the value of the top-left pixel.\n    \"\"\"\n    # Get grid dimensions\n    height, width = input_grid.shape\n\n    # Initialize output grid with the background color (white, 0)\n    output_grid = np.zeros_like(input_grid)\n\n    # Get the value of the control pixel at (0, 0)\n    control_value = input_grid[0, 0]\n\n    # Define the mapping from control pixel value to downward shift amount\n    # Based on observed examples: Yellow(4)->3, Magenta(6)->2, Orange(7)->5, Maroon(9)->0\n    shift_map = {\n        4: 3,\n        6: 2,\n        7: 5,\n        9: 0\n    }\n    # Determine the shift amount using the map, default to 0 if the value is not found\n    shift_amount = shift_map.get(control_value, 0)\n\n    # Place the original control pixel value back into the output grid at (0, 0)\n    output_grid[0, 0] = control_value\n\n    # Iterate through the rows of the input grid, starting from the second row (index 1)\n    # These are the rows that contain the content to be shifted.\n    for r in range(1, height):\n        # Calculate the target row index in the output grid after applying the shift\n        target_r = r + shift_amount\n\n        # Check if the target row is within the bounds of the grid height\n        if target_r < height:\n            # If within bounds, copy the entire content of the current input row 'r'\n            # to the calculated target row 'target_r' in the output grid.\n            # We copy all columns (:) in the row.\n            output_grid[target_r, :] = input_grid[r, :]\n            # Pixels from input row 'r' that would be shifted beyond the grid height\n            # (i.e., if target_r >= height) are effectively discarded, as they are not copied.\n            # Rows in the output grid from index 1 up to 'shift_amount' will remain\n            # filled with the initial background color (0), as no content is copied there.\n\n    # Return the completed output grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5243,
    "candidates_token_count": 765,
    "total_token_count": 6008,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 18.542355
}