{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Azure Pixels:** Iterate through each pixel in the input grid, looking for azure (8) pixels.\n\n2.  **Check for Horizontal or Vertical Adjacency:**\n    *   If an azure (8) pixel is found, check if it's *horizontally or vertically* adjacent to *another* azure (8) pixel.\n    *   If two or more azure pixels are adjacent, replace *all* connected azure pixels in the group with gray (5).\n\n3.  **Lone Azure Pixel Checks (if not part of an adjacent group):**\n    *   If an azure (8) pixel is *not* adjacent to any other azure pixels (horizontally or vertically):\n        *   **Row Check:** If there's a blue (1) or green (3) pixel *anywhere in the same row* as the lone azure pixel, change the azure pixel to gray (5).\n        *   **Column Check:** If there's a blue (1) or a green (3) pixel *anywhere in the same column* as the lone azure pixel, the azure pixel does *not* change.\n        *   **Otherwise**: If none of the above conditions are met, replace the lonely azure (8) pixel with a gray (5).\n\n4.  **Output:** Create a new output grid with all the modifications, keeping all other pixels the same as the input.\n\"\"\"\n\nimport numpy as np\n\ndef get_adjacent_pixels(grid, row, col):\n    \"\"\"Gets the values of horizontally and vertically adjacent pixels.\"\"\"\n    adjacent = []\n    rows, cols = grid.shape\n    if row > 0:\n        adjacent.append((row - 1, col))  # Up\n    if row < rows - 1:\n        adjacent.append((row + 1, col))  # Down\n    if col > 0:\n        adjacent.append((row, col - 1))  # Left\n    if col < cols - 1:\n        adjacent.append((row, col + 1))  # Right\n    return adjacent\n\ndef flood_fill(grid, row, col, target_color, replacement_color):\n    \"\"\"Recursively replaces connected pixels of target_color with replacement_color.\"\"\"\n    rows, cols = grid.shape\n    if (\n        row < 0\n        or row >= rows\n        or col < 0\n        or col >= cols\n        or grid[row, col] != target_color\n    ):\n        return\n    grid[row, col] = replacement_color\n    for adj_row, adj_col in get_adjacent_pixels(grid, row, col):\n        flood_fill(grid, adj_row, adj_col, target_color, replacement_color)\n        \ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n\n    # Iterate through each pixel\n    for row in range(rows):\n        for col in range(cols):\n            # Check for 8s\n            if input_grid[row, col] == 8 and not visited[row,col]:\n                adjacent_pixels = get_adjacent_pixels(input_grid, row, col)\n                adjacent_8s = [(r,c) for r, c in adjacent_pixels if input_grid[r, c] == 8]\n                \n                # Conditional Replacement - flood fill for adjacent 8s\n                if adjacent_8s:\n                    flood_fill(output_grid, row, col, 8, 5)\n                    for r,c in adjacent_8s:\n                      visited[r,c] = True\n                    visited[row,col] = True #mark as visited\n                else:\n                    # Check other conditions for lone 8s\n                    row_values = input_grid[row, :]\n                    col_values = input_grid[:, col]\n                    visited[row,col] = True\n                    if 1 in row_values or 3 in row_values:\n                         output_grid[row, col] = 5\n                    elif not(1 in col_values or 3 in col_values):\n                         output_grid[row,col] = 5\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3361,
    "candidates_token_count": 974,
    "total_token_count": 4335,
    "cached_content_token_count": 0
  },
  "response_time": 8.900863
}