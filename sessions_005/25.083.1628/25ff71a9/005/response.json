{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. Iterate through each row of the input grid.\n2. For each row, identify contiguous horizontal line segments of non-white pixels.\n   Record the color, starting column, ending column, and row index of each segment.\n3. For each identified line segment, shift it down by one row.\n4. After shifting a line segment, set the cells directly above its *original*\n   position (same columns, previous row) to white (0).\n5. If a line is at the bottom of the grid, after setting the original position to 0, do not shift.\n\"\"\"\n\nimport numpy as np\n\ndef find_horizontal_lines(grid):\n    \"\"\"Finds all horizontal lines in a grid.\"\"\"\n    lines = []\n    rows, cols = grid.shape\n    for r in range(rows):\n        start_col = -1\n        current_color = -1\n        for c in range(cols):\n            if grid[r, c] != 0:  # Non-white pixel\n                if start_col == -1:\n                    # Start of a new line\n                    start_col = c\n                    current_color = grid[r, c]\n                elif grid[r, c] != current_color:\n                    # End of the current line, start of a new one\n                    lines.append((r, start_col, c - 1, current_color))\n                    start_col = c\n                    current_color = grid[r, c]\n            elif start_col != -1:\n                # End of the current line\n                lines.append((r, start_col, c - 1, current_color))\n                start_col = -1\n                current_color = -1\n        # Check for line at the end of the row\n        if start_col != -1:\n            lines.append((r, start_col, cols - 1, current_color))\n    return lines\n\ndef transform(input_grid):\n    # Initialize output grid as a copy of the input\n    output_grid = input_grid.copy()\n    rows, _ = input_grid.shape\n\n    # Find horizontal lines\n    lines = find_horizontal_lines(input_grid)\n\n    # Shift lines down and fill above with white\n    for row_index, start_col, end_col, color in lines:\n        new_row_index = row_index + 1\n\n        # Clear original line location before shifting\n        output_grid[row_index, start_col:end_col+1] = 0\n\n        if new_row_index < rows:\n            # Shift the line contents one row down\n            output_grid[new_row_index, start_col:end_col+1] = color\n            # Clear only cells directly above the original line segment\n            output_grid[row_index, start_col:end_col+1] = 0\n        \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3225,
    "candidates_token_count": 661,
    "total_token_count": 3886,
    "cached_content_token_count": 0
  },
  "response_time": 50.551383
}