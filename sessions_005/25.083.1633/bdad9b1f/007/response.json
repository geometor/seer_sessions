{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Azure Rows:** Find all rows containing azure (8) pixels.\n2.  **Identify Red Rows:** Find all rows containing red (2) pixels.\n3.  **Iterate Through Rows:** Process the input grid row by row.\n4.  **Copy Non-Red/Azure Rows:** If the current row is *not* a red row and not an azure row, append it directly to the output grid.\n5.  **Process Red Rows:** If a row contains red pixels:\n      *   Create a copy of the row.\n      *   Change *all* red (2) pixels in this copied row to yellow (4).\n      * Append this modified row to the output grid\n6. **Insert Azure rows:**\n      * For each red row, after inserting it (or its modified version) into the output grid, insert copies of the azure rows immediately after it.\n      * If no red rows exist, append azure rows to the end.\n7. **Output:** The result is the built output grid.\n\"\"\"\n\nimport numpy as np\n\ndef find_rows_by_color(grid, color):\n    \"\"\"Finds the indices of rows containing at least one pixel of the specified color.\"\"\"\n    return [i for i, row in enumerate(grid) if np.any(row == color)]\n\ndef transform(input_grid):\n    input_grid = np.array(input_grid)\n    output_grid = []\n\n    # Identify azure and red rows (Steps 1 & 2)\n    azure_rows = find_rows_by_color(input_grid, 8)\n    red_rows = find_rows_by_color(input_grid, 2)\n\n    # Iterate through rows (Step 3)\n    for row_index, row in enumerate(input_grid):\n        if row_index not in red_rows and row_index not in azure_rows:\n            # Copy non-red/azure rows (Step 4)\n            output_grid.append(row.copy())\n        elif row_index in red_rows:\n            # Process red rows (Step 5)\n            transformed_row = row.copy()\n            transformed_row[transformed_row == 2] = 4  # Change all red to yellow\n            output_grid.append(transformed_row)\n\n            # Insert azure rows after red row (Step 6)\n            for azure_row_index in azure_rows:\n                output_grid.append(input_grid[azure_row_index].copy())\n\n    # Handle cases with no red rows (append azure rows)\n    if not red_rows:\n         for azure_row_index in azure_rows:\n            output_grid.append(input_grid[azure_row_index].copy())\n\n    return np.array(output_grid)\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5284,
    "candidates_token_count": 634,
    "total_token_count": 5918,
    "cached_content_token_count": 0
  },
  "response_time": 6.855644
}