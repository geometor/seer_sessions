{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Key Rows:** Find all rows containing at least one red (2) pixel (called \"red_rows\") and all rows containing at least one azure (8) pixel (\"azure_rows\").\n\n2.  **Duplicate Azure Rows:** For each \"red_row\" in the input grid, duplicate all \"azure_rows\" immediately below the \"red_row\" in the output grid. The order of the azure rows should be maintained.\n\n3.  **Transform Red Row:** In the original \"red_row\" position within the output grid, modify the \"red_row\" as follows:\n    *   Find the leftmost red pixel and the rightmost azure pixel in the grid.\n    *   Change all pixels from the leftmost red pixel *on the red row* to yellow (4) up to, and including, the column containing the rightmost azure.\n    *   Any red pixels to the right of the rightmost azure's column position remain red.\n\n4.  All other rows remain unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef find_rows_by_color(grid, color):\n    \"\"\"Finds the indices of rows containing at least one pixel of the specified color.\"\"\"\n    rows_with_color = []\n    for i, row in enumerate(grid):\n        if np.any(row == color):\n            rows_with_color.append(i)\n    return rows_with_color\n\ndef find_leftmost_pixel(row, color):\n    \"\"\"Finds the column index of the leftmost pixel of a specified color in a row.\"\"\"\n    for i, pixel in enumerate(row):\n        if pixel == color:\n            return i\n    return -1  # Should not happen if the row is known to contain the color\n\ndef find_rightmost_pixel_in_grid(grid, color):\n    \"\"\"Finds the column index of the rightmost pixel of specified color in grid\"\"\"\n    rightmost_col = -1\n    for row in grid:\n        for i in range(len(row)-1, -1, -1): # reverse\n            if row[i] == color:\n                rightmost_col = max(rightmost_col, i)\n                break # next row\n    return rightmost_col\n\ndef transform(input_grid):\n    input_grid = np.array(input_grid)\n    rows, cols = input_grid.shape\n    output_grid = []\n\n    # Identify key rows\n    red_rows = find_rows_by_color(input_grid, 2)\n    azure_rows = find_rows_by_color(input_grid, 8)\n\n    # Build the output grid row by row\n    for row_index in range(rows):\n        if row_index not in red_rows:\n            # Keep non-red rows unchanged\n            output_grid.append(input_grid[row_index].copy())\n        else:\n            # Transform the red row\n            transformed_row = input_grid[row_index].copy()\n            leftmost_red_col = find_leftmost_pixel(transformed_row, 2)\n            rightmost_azure_col = find_rightmost_pixel_in_grid(input_grid, 8)\n\n            if leftmost_red_col != -1 and rightmost_azure_col != -1:\n                for col_index in range(leftmost_red_col, min(rightmost_azure_col + 1, cols)):\n                  transformed_row[col_index] = 4\n\n            output_grid.append(transformed_row)\n\n\n            # Duplicate azure rows below the transformed red row\n            for azure_row_index in azure_rows:\n                output_grid.append(input_grid[azure_row_index].copy())\n\n    return np.array(output_grid)\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5492,
    "candidates_token_count": 857,
    "total_token_count": 6349,
    "cached_content_token_count": 0
  },
  "response_time": 10.0465
}