{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nDetermine the connectivity of red (2) pixels in a 3x3 input grid.\nIf all red pixels form a single connected component (considering horizontal, vertical, and diagonal adjacency), the output is a 1x1 grid with orange (7).\nOtherwise (if there are no red pixels or multiple disconnected components of red pixels), the output is a 1x1 grid with blue (1).\n\"\"\"\n\ndef find_pixels(grid, color):\n    \"\"\"Finds all coordinates of pixels with a specific color.\"\"\"\n    coords = np.argwhere(grid == color)\n    # Convert to list of tuples for easier handling\n    return [tuple(coord) for coord in coords]\n\ndef get_neighbors(coord, grid_shape):\n    \"\"\"Gets all 8 neighboring coordinates (including diagonals) within grid bounds.\"\"\"\n    row, col = coord\n    neighbors = []\n    for dr in [-1, 0, 1]:\n        for dc in [-1, 0, 1]:\n            if dr == 0 and dc == 0:\n                continue # Skip self\n            nr, nc = row + dr, col + dc\n            # Check bounds\n            if 0 <= nr < grid_shape[0] and 0 <= nc < grid_shape[1]:\n                neighbors.append((nr, nc))\n    return neighbors\n\ndef find_connected_components(grid, color):\n    \"\"\"Finds the number of connected components for a given color, considering diagonal adjacency.\"\"\"\n    pixels = find_pixels(grid, color)\n    if not pixels:\n        return 0 # No pixels of the given color\n\n    visited = set()\n    num_components = 0\n    grid_shape = grid.shape\n\n    for pixel in pixels:\n        if pixel not in visited:\n            num_components += 1\n            # Start a search (BFS or DFS) from this pixel\n            queue = [pixel]\n            visited.add(pixel)\n            while queue:\n                current_pixel = queue.pop(0)\n                for neighbor in get_neighbors(current_pixel, grid_shape):\n                    # Check if neighbor is the target color and not visited\n                    if grid[neighbor] == color and neighbor not in visited:\n                        visited.add(neighbor)\n                        queue.append(neighbor)\n                        \n    return num_components\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on the connectivity of red pixels.\n    \"\"\"\n    # Convert input list of lists to numpy array for easier processing\n    grid = np.array(input_grid)\n\n    # Define the target color (red)\n    target_color = 2\n\n    # Find the number of connected components of the target color\n    num_components = find_connected_components(grid, target_color)\n\n    # Determine the output color based on the number of components\n    if num_components == 1:\n        output_color = 7 # orange\n    else: # Handles 0 components or > 1 component\n        output_color = 1 # blue\n\n    # Initialize the output grid as a 1x1 numpy array\n    output_grid = np.array([[output_color]])\n\n    return output_grid.tolist() # Convert back to list of lists as required by the framework\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1870,
    "candidates_token_count": 736,
    "total_token_count": 2606,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 8.078902
}