{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by applying a fixed, position-independent color mapping to each pixel. The mapping swaps specific pairs of colors: Blue (1) <-> Gray (5), Red (2) <-> Magenta (6), Green (3) <-> Yellow (4), and Azure (8) <-> Maroon (9). Colors not involved in these pairs (White (0) and Orange (7)) remain unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Applies a pixel-wise color substitution based on a predefined mapping.\n\n    Args:\n        input_grid (np.ndarray): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.ndarray: A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    # Define the color mapping rules\n    color_map = {\n        1: 5,  # Blue -> Gray\n        5: 1,  # Gray -> Blue\n        2: 6,  # Red -> Magenta\n        6: 2,  # Magenta -> Red\n        3: 4,  # Green -> Yellow\n        4: 3,  # Yellow -> Green\n        8: 9,  # Azure -> Maroon\n        9: 8   # Maroon -> Azure\n        # 0 (White) and 7 (Orange) map to themselves by default\n    }\n\n    # Get the dimensions of the input grid\n    height, width = input_grid.shape\n\n    # Initialize the output grid as a copy of the input grid\n    # This handles the default case where colors map to themselves\n    output_grid = np.copy(input_grid)\n\n    # Iterate through each pixel in the grid\n    for r in range(height):\n        for c in range(width):\n            # Get the input color value\n            input_color = input_grid[r, c]\n            # Apply the mapping if the color is in the map\n            if input_color in color_map:\n                output_grid[r, c] = color_map[input_color]\n            # Otherwise, the color remains unchanged (already handled by copying)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2251,
    "candidates_token_count": 485,
    "total_token_count": 2736,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 5.628225
}