{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nThis program transforms an input grid based on specific neighborhood conditions.\nIt identifies white pixels (0) that are horizontally adjacent to exactly one azure pixel (8). \nIf that adjacent azure pixel is part of a vertical segment (i.e., has another azure pixel directly above or below it), \nthe white pixel is changed to blue (1) in the output grid. All other pixels retain their original color.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the rule:\n    A white pixel (0) becomes blue (1) if it's horizontally adjacent to exactly one \n    azure pixel (8), and that azure pixel has at least one vertical azure neighbor.\n    \n    Args:\n        input_grid (np.ndarray): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.ndarray: A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    \n    # Get grid dimensions\n    height, width = input_grid.shape\n    \n    # Initialize output_grid as a copy of the input_grid\n    output_grid = np.copy(input_grid)\n\n    # Iterate through each cell of the input grid\n    for r in range(height):\n        for c in range(width):\n            # Check if the current cell is white (0)\n            if input_grid[r, c] == 0:\n                \n                azure_h_neighbors = [] # Store coordinates of azure horizontal neighbors\n                \n                # Check left neighbor\n                if c > 0 and input_grid[r, c-1] == 8:\n                    azure_h_neighbors.append((r, c-1))\n                    \n                # Check right neighbor\n                if c < width - 1 and input_grid[r, c+1] == 8:\n                    azure_h_neighbors.append((r, c+1))\n                    \n                # Check if there is exactly one horizontal azure neighbor\n                if len(azure_h_neighbors) == 1:\n                    # Get the coordinates of the single azure neighbor\n                    nr, nc = azure_h_neighbors[0]\n                    \n                    has_vertical_azure_neighbor = False\n                    \n                    # Check neighbor above\n                    if nr > 0 and input_grid[nr-1, nc] == 8:\n                        has_vertical_azure_neighbor = True\n                        \n                    # Check neighbor below (only if above check failed)\n                    if not has_vertical_azure_neighbor and nr < height - 1 and input_grid[nr+1, nc] == 8:\n                        has_vertical_azure_neighbor = True\n                        \n                    # If the azure neighbor has a vertical azure neighbor, change the white cell to blue\n                    if has_vertical_azure_neighbor:\n                        output_grid[r, c] = 1\n\n    # Return the modified grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2592,
    "candidates_token_count": 659,
    "total_token_count": 3251,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 8.793783
}