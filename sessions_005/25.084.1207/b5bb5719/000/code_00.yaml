elements:
  - type: grid
    properties:
      - background_color: orange (7)
      - dimensions: variable height and width
  - type: row
    properties:
      - index: integer >= 0
      - content: sequence of pixels
  - type: pixel
    properties:
      - color: integer (0-9), specifically orange (7), gray (5), red (2) used
      - position: (row, column)
  - type: neighborhood
    properties:
      - size: 3 horizontal pixels in the row above
      - composition: (left_neighbor_color, center_color, right_neighbor_color)
      - boundary_handling: assume orange (7) for neighbors outside grid bounds

transformations:
  - type: conditional_color_change
    scope: pixels from the second row downwards
    trigger: specific 3-pixel neighborhood pattern in the row directly above
    rules:
      # (Left, Center, Right) -> New Color Below Center
      - if_neighborhood: [2, 5, 2] then_color: 5
      - if_neighborhood: [5, 2, 5] then_color: 2
      - if_neighborhood: [5, 7, 2] then_color: 2
      - if_neighborhood: [2, 7, 2] then_color: 5
      - if_neighborhood: [2, 7, 5] then_color: 5
      - if_neighborhood: [5, 7, 5] then_color: 2
      - if_neighborhood: [5, 5, 2] then_color: 2
      - if_neighborhood: [2, 2, 5] then_color: 5
      - if_neighborhood: [2, 5, 5] then_color: 2
      - if_neighborhood: [5, 5, 5] then_color: 2
      - if_neighborhood: [7, 2, 2] then_color: 5
      - if_neighborhood: [7, 5, 5] then_color: 2
      - if_neighborhood: [5, 2, 2] then_color: 5
      - if_neighborhood: [7, 2, 5] then_color: 5
      - if_neighborhood: [7, 5, 2] then_color: 2
      - if_neighborhood: [2, 2, 2] then_color: 5
    default_outcome: orange (7) # If no rule matches

process:
  - step: Initialize the output grid as a copy of the input grid.
  - step: Iterate through rows `r` from 1 to the bottom row.
  - step: For each cell at column `c` in row `r`:
      - Determine the 3-pixel neighborhood from row `r-1` centered at column `c`.
      - Apply boundary condition (color 7) for neighbors outside the grid.
      - Check if the neighborhood matches any defined transformation rule.
      - If a rule matches, update the color of the cell at `(r, c)` in the output grid.
      - If no rule matches, ensure the color of the cell at `(r, c)` in the output grid is orange (7).
  - step: The final state of the output grid is the result.

relationships:
  - dependency: The color of a cell `(r, c)` (for r > 0) depends on the colors of cells `(r-1, c-1)`, `(r-1, c)`, and `(r-1, c+1)`.
  - invariance: The first row (row 0) remains unchanged from input to output.