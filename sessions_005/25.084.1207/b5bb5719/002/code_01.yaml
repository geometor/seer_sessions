task_description: "Apply a 1D cellular automaton rule vertically down the grid."
grid_properties:
  - dimensions: dynamic height and width (observed up to 9 width, 5 height)
  - value_range: 0-9 (colors)
  - background_color: Not explicitly defined, but orange (7) acts as a default/boundary/inactive state.
objects:
  - type: Pixel
    properties:
      - color: integer 0-9
      - position: (row, column)
transformation:
  - type: Cellular Automaton (1D vertical)
  - scope: Applies to all pixels except the first row.
  - rule:
      input: 3 pixels in the row above (r-1) at columns (c-1, c, c+1)
      output: color of the pixel at (r, c)
  - boundary_condition: Pixels outside the grid (left/right edges) are treated as having the color orange (7).
  - specific_mappings:
      - description: 12 specific neighborhood patterns result in red (2) or gray (5).
      - rules:
          (2, 2, 2): 5
          (2, 2, 5): 5
          (2, 5, 2): 5
          (2, 5, 5): 5
          (2, 7, 2): 5
          (2, 7, 5): 5
          (5, 2, 2): 2
          (5, 2, 5): 2
          (5, 5, 2): 2
          (5, 5, 5): 2
          (5, 7, 2): 2
          (5, 7, 5): 2
  - default_mapping:
      - description: All other neighborhood patterns result in the color orange (7).
      - includes: Any pattern not listed in specific_mappings. The analysis found 14 such patterns in the examples, all resulting in 7.
initial_state: The first row of the input grid remains unchanged in the output grid.