{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\nimport math\n\n\"\"\"\nTransforms an input grid into a larger output grid based on the location of the most frequent non-white color in the input.\n\n1.  Determine the dimensions (H, W) of the input grid.\n2.  Find the most frequent non-white color ('key color') in the input grid.\n3.  Create an output grid of size (3*H) x (3*W), initialized with white (0).\n4.  Iterate through each cell (r, c) of the input grid.\n5.  If the color at input_grid[r, c] matches the 'key color', copy the entire input grid into the corresponding H x W subgrid block in the output grid, starting at position (r*H, c*W).\n6.  Return the resulting output grid.\n\"\"\"\n\ndef get_most_frequent_non_white_color(grid):\n    \"\"\"\n    Finds the most frequent non-white color in the grid.\n\n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        int or None: The most frequent non-white color, or None if only white is present.\n                     If there's a tie, returns the color with the lower numerical value.\n    \"\"\"\n    # Flatten the grid and filter out white pixels (0)\n    non_white_pixels = grid[grid != 0].flatten()\n\n    if non_white_pixels.size == 0:\n        return None  # No non-white pixels\n\n    # Count frequencies\n    color_counts = Counter(non_white_pixels)\n\n    # Find the maximum frequency\n    max_freq = 0\n    if color_counts:\n         max_freq = max(color_counts.values())\n\n    # Find all colors with the maximum frequency\n    most_frequent_colors = [color for color, count in color_counts.items() if count == max_freq]\n\n    # If there's a tie, return the color with the smallest numerical value\n    if not most_frequent_colors:\n        return None # Should not happen if non_white_pixels.size > 0 but added for safety\n        \n    return min(most_frequent_colors)\n\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    H, W = input_np.shape\n\n    # Calculate the dimensions of the output grid\n    output_H = H * 3\n    output_W = W * 3\n\n    # Initialize the output grid with white (0)\n    output_grid = np.zeros((output_H, output_W), dtype=int)\n\n    # Find the 'key color' - the most frequent non-white color\n    key_color = get_most_frequent_non_white_color(input_np)\n\n    # If no key color is found (e.g., input is all white), return the blank output grid\n    if key_color is None:\n        return output_grid.tolist() # Convert back to list of lists if needed\n\n    # Iterate through each cell of the input grid\n    for r in range(H):\n        for c in range(W):\n            # Check if the current input cell color matches the key color\n            if input_np[r, c] == key_color:\n                # Calculate the top-left corner for placing the input grid copy\n                start_row = r * H\n                start_col = c * W\n                end_row = start_row + H\n                end_col = start_col + W\n\n                # Copy the entire input grid into the corresponding block in the output grid\n                output_grid[start_row:end_row, start_col:end_col] = input_np\n\n    # Convert the final numpy array back to a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3140,
    "candidates_token_count": 908,
    "total_token_count": 4048,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.11485
}