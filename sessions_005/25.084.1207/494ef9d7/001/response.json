{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nProcesses a 2D grid representing colored pixels. For each row independently:\n1. Identifies if a specific pair of colors exists: Yellow(4)/Orange(7) or Blue(1)/Azure(8).\n2. If a pair exists, it determines the leftmost ('target') and rightmost ('mover') pixel of the pair.\n3. It checks if the path between the 'target' and 'mover' (exclusive of endpoints) consists entirely of White(0) pixels.\n4. If the path is clear, the 'mover' pixel is moved horizontally leftwards until it is adjacent to the right of the 'target' pixel. The original position of the 'mover' pixel is set to White(0).\n5. Pixels not involved in these specific pair interactions remain unchanged.\n\"\"\"\n\ndef find_color_index(row_data, color):\n    \"\"\"Finds the first index of a specific color in a row array. Returns -1 if not found.\"\"\"\n    indices = np.where(row_data == color)[0]\n    return indices[0] if len(indices) > 0 else -1\n\ndef is_path_clear(row_data, start_col_exclusive, end_col_exclusive):\n    \"\"\"Checks if all pixels between start_col_exclusive and end_col_exclusive are White(0).\"\"\"\n    # If the range is empty (adjacent pixels), the path is clear.\n    if start_col_exclusive >= end_col_exclusive:\n        return True\n    # Check if all values in the slice are 0\n    return np.all(row_data[start_col_exclusive:end_col_exclusive] == 0)\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n    Moves specific color pairs (4/7, 1/8) closer horizontally if the path is clear.\n    \"\"\"\n    # Convert input list of lists to a numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    # Initialize output_grid as a copy of the input grid\n    output_grid = np.copy(input_np)\n    height, width = output_grid.shape\n\n    # Iterate through each row\n    for r in range(height):\n        current_row = output_grid[r, :]\n\n        # --- Process Yellow(4)/Orange(7) pair ---\n        yellow_col = find_color_index(current_row, 4)\n        orange_col = find_color_index(current_row, 7)\n\n        # Check if both colors exist in the row\n        if yellow_col != -1 and orange_col != -1:\n            # Determine target (left) and mover (right)\n            target_col = min(yellow_col, orange_col)\n            mover_col = max(yellow_col, orange_col)\n            mover_color = output_grid[r, mover_col] # Get the color of the mover (4 or 7)\n\n            # Check if the path between target and mover is clear (all White(0))\n            # Path check range is from target_col + 1 up to (but not including) mover_col\n            if is_path_clear(current_row, target_col + 1, mover_col):\n                # Execute the move if path is clear\n                # Ensure we don't overwrite the target if they are already adjacent\n                if mover_col > target_col + 1:\n                    output_grid[r, mover_col] = 0          # Clear original mover position\n                    output_grid[r, target_col + 1] = mover_color # Place mover next to target\n\n        # --- Process Blue(1)/Azure(8) pair ---\n        # Important: Re-read the current state of the row in case the 4/7 move changed it\n        current_row_after_47 = output_grid[r, :]\n        blue_col = find_color_index(current_row_after_47, 1)\n        azure_col = find_color_index(current_row_after_47, 8)\n\n        # Check if both colors exist in the row\n        if blue_col != -1 and azure_col != -1:\n            # Determine target (left) and mover (right)\n            target_col = min(blue_col, azure_col)\n            mover_col = max(blue_col, azure_col)\n            mover_color = output_grid[r, mover_col] # Get the color of the mover (1 or 8)\n\n            # Check if the path between target and mover is clear (all White(0))\n            # Path check range is from target_col + 1 up to (but not including) mover_col\n            # Use the potentially updated row for path checking\n            if is_path_clear(current_row_after_47, target_col + 1, mover_col):\n                 # Execute the move if path is clear\n                 # Ensure we don't overwrite the target if they are already adjacent\n                if mover_col > target_col + 1:\n                    output_grid[r, mover_col] = 0          # Clear original mover position\n                    output_grid[r, target_col + 1] = mover_color # Place mover next to target\n\n    # Convert the final numpy array back to a list of lists if necessary for the environment\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3228,
    "candidates_token_count": 1240,
    "total_token_count": 4468,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.732587
}