{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentifies all distinct connected objects of non-background (non-0) colors in the input grid.\nCalculates the size (pixel count) of each object.\nSelects the object with the largest size. If there's a tie, the first one found is selected.\nDetermines the minimum bounding box enclosing the selected object.\nCreates the output grid by cropping the input grid to this bounding box.\n\"\"\"\n\ndef find_objects(grid):\n    \"\"\"\n    Finds all connected objects of the same non-background color in the grid.\n\n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        list: A list of dictionaries, where each dictionary represents an object\n              with keys 'coords' (a set of (row, col) tuples), 'color' (int),\n              and 'size' (int). Returns an empty list if no objects are found.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n    background_color = 0\n\n    for r in range(rows):\n        for c in range(cols):\n            # If it's a non-background pixel and hasn't been visited yet\n            if grid[r, c] != background_color and not visited[r, c]:\n                color = grid[r, c]\n                obj_coords = set()\n                q = deque([(r, c)])\n                visited[r, c] = True\n                \n                # Start Breadth-First Search (BFS) to find connected pixels of the same color\n                while q:\n                    row, col = q.popleft()\n                    obj_coords.add((row, col))\n                    \n                    # Check 4 neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        # Check bounds and if neighbor is same color and not visited\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           not visited[nr, nc] and grid[nr, nc] == color:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n                            \n                # Store the found object's details\n                objects.append({'coords': obj_coords, 'color': color, 'size': len(obj_coords)})\n    return objects\n\ndef get_bounding_box(coords):\n    \"\"\"\n    Calculates the minimum bounding box for a set of coordinates.\n\n    Args:\n        coords (set): A set of (row, col) tuples representing an object.\n\n    Returns:\n        tuple: (min_row, min_col, max_row, max_col) or None if coords is empty.\n    \"\"\"\n    if not coords:\n        return None \n    \n    min_r = min(r for r, c in coords)\n    min_c = min(c for r, c in coords)\n    max_r = max(r for r, c in coords)\n    max_c = max(c for r, c in coords)\n    return min_r, min_c, max_r, max_c\n\ndef transform(input_grid_list):\n    \"\"\"\n    Transforms the input grid by finding the largest object and cropping the grid\n    to its bounding box.\n\n    Args:\n        input_grid_list (list of lists): The input grid represented as a list of lists.\n\n    Returns:\n        list of lists: The cropped output grid containing the largest object.\n                       Returns an empty list of lists if no objects are found.\n    \"\"\"\n    # Convert input list of lists to numpy array for easier processing\n    input_grid = np.array(input_grid_list, dtype=int)\n    \n    # 1. Identify all objects and their properties (coordinates, color, size)\n    objects = find_objects(input_grid)\n\n    # Handle case where no objects are found in the input grid\n    if not objects:\n        # Return an empty grid representation\n        return [[]] \n        \n    # 2. Find the object with the largest size.\n    #    In case of ties, max() returns the first one encountered.\n    largest_object = max(objects, key=lambda obj: obj['size'])\n    \n    # 3. Determine the bounding box of the largest object\n    bounding_box = get_bounding_box(largest_object['coords'])\n    if bounding_box is None: # Should not happen if objects list is not empty\n         return [[]] \n    min_r, min_c, max_r, max_c = bounding_box\n    \n    # 4. Crop the input grid using the bounding box coordinates.\n    #    Numpy slicing includes the start index but excludes the end index,\n    #    so we add 1 to max_r and max_c.\n    output_grid_np = input_grid[min_r : max_r + 1, min_c : max_c + 1]\n    \n    # Convert the resulting numpy array back to a list of lists for the standard output format\n    output_grid = output_grid_np.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2689,
    "candidates_token_count": 1213,
    "total_token_count": 3902,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 21.877792
}