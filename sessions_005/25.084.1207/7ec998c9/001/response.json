{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nFind the shortest Manhattan path from the top-left corner (0, 0) to the \nbottom-right corner (H-1, W-1) of the input grid, avoiding a single \nnon-background colored pixel (the obstacle). Then, color the cells of this \npath blue (1), except for the obstacle cell itself, which retains its original \ncolor. All other cells retain their original colors.\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef find_obstacle(grid):\n    \"\"\"\n    Finds the coordinates and color of the single non-background pixel.\n    Assumes the background color is the most frequent one.\n    \"\"\"\n    unique, counts = np.unique(grid, return_counts=True)\n    background_color = unique[np.argmax(counts)]\n    \n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != background_color:\n                return (r, c), grid[r, c]\n    return None, None # Should not happen based on task description\n\ndef find_shortest_path_bfs(grid, start, end, obstacle_pos):\n    \"\"\"\n    Finds the shortest path using Breadth-First Search (BFS) avoiding the obstacle.\n    Returns the path as a list of coordinates, or None if no path exists.\n    \"\"\"\n    rows, cols = grid.shape\n    queue = deque([(start, [start])]) # Store (current_pos, path_so_far)\n    visited = {start}\n    \n    while queue:\n        (r, c), path = queue.popleft()\n        \n        if (r, c) == end:\n            return path\n            \n        # Explore neighbors (up, down, left, right)\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n            \n            # Check bounds\n            if 0 <= nr < rows and 0 <= nc < cols:\n                neighbor_pos = (nr, nc)\n                # Check if obstacle or already visited\n                if neighbor_pos != obstacle_pos and neighbor_pos not in visited:\n                    visited.add(neighbor_pos)\n                    new_path = path + [neighbor_pos]\n                    queue.append((neighbor_pos, new_path))\n                    \n    return None # No path found\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the pathfinding transformation to the input grid.\n\n    Args:\n        input_grid (list of lists): The input grid represented as a 2D list.\n\n    Returns:\n        list of lists: The transformed grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    grid_np = np.array(input_grid, dtype=int)\n    rows, cols = grid_np.shape\n    \n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(grid_np)\n    \n    # Identify the obstacle's position and color\n    obstacle_pos, obstacle_color = find_obstacle(grid_np)\n    \n    # Define start and end points for the path\n    start_pos = (0, 0)\n    end_pos = (rows - 1, cols - 1)\n    \n    # Find the shortest path using BFS, avoiding the obstacle\n    shortest_path = find_shortest_path_bfs(grid_np, start_pos, end_pos, obstacle_pos)\n    \n    # If a path is found, color the path cells blue (1) in the output grid,\n    # except for the obstacle cell itself.\n    if shortest_path:\n        for r, c in shortest_path:\n            # Check if the current cell in the path is not the obstacle\n            if (r, c) != obstacle_pos:\n                output_grid[r, c] = 1 # Set to blue\n            # If it is the obstacle, it retains its original color (already copied)\n                \n    # Convert the final numpy array back to a list of lists\n    return output_grid.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2656,
    "candidates_token_count": 960,
    "total_token_count": 3616,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.956877
}