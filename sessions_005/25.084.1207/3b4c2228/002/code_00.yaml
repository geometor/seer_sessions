task_description: >
  Determine the number of blue pixels (N) to place on the main diagonal of a 3x3 white grid.
  N depends on the count of distinct contiguous green (3) objects and red (2) objects in the input grid.
  Object connectivity is based on side-by-side adjacency (4-connectivity).

examples:
  - example: 1
    input_grid_size: [7, 5]
    objects:
      - color: green
        count: 1
      - color: red
        count: 3
    output_grid_size: [3, 3]
    output_description: 1 blue pixel at (0,0).
    derived_N: 1

  - example: 2
    input_grid_size: [5, 7]
    objects:
      - color: green
        count: 5
      - color: red
        count: 1
    output_grid_size: [3, 3]
    output_description: 2 blue pixels at (0,0), (1,1).
    derived_N: 2

  - example: 3
    input_grid_size: [5, 5]
    objects:
      - color: green
        count: 2
      - color: red
        count: 2
    output_grid_size: [3, 3]
    output_description: 1 blue pixel at (0,0).
    derived_N: 1

  - example: 4
    input_grid_size: [7, 7]
    objects:
      - color: green
        count: 4
      - color: red
        count: 2
    output_grid_size: [3, 3]
    output_description: 3 blue pixels at (0,0), (1,1), (2,2).
    derived_N: 3

  - example: 5
    input_grid_size: [7, 7]
    objects:
      - color: green
        count: 5
      - color: red
        count: 5
    output_grid_size: [3, 3]
    output_description: 2 blue pixels at (0,0), (1,1).
    derived_N: 2

transformation_rule:
  input: Input grid containing green (3) and red (2) objects amidst a white (0) background.
  output: 3x3 grid, initially white (0).
  logic:
    - Count distinct contiguous green objects (`num_green`) using 4-connectivity.
    - Count distinct contiguous red objects (`num_red`) using 4-connectivity.
    - Determine the number of blue pixels (`N`) based on the counts:
        - If `num_green < num_red`, then `N = 1`.
        - If `num_green == num_red`:
            - If `num_green >= 3`, then `N = 2`.
            - Else (`num_green < 3`), then `N = 1`.
        - If `num_green > num_red`:
            - Let `diff = num_green - num_red`.
            - If `diff == 1`, then `N = 2`.
            - If `diff >= 2`:
                - If `num_red == 1`, then `N = 2`.
                - Else (`num_red >= 2`), then `N = 3`.
    - Place `N` blue (1) pixels on the main diagonal of the output grid, starting from (0,0) up to (N-1, N-1). Fill the rest with white (0).