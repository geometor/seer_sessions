{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies a single gray marker pixel and the most frequent non-white, non-gray 'pattern color'. Finds all connected components (8-way adjacency) of the pattern color. Calculates the minimum Manhattan distance from each component to the marker. Selects the component with the smallest minimum distance (tie-breaking by top-left corner of bounding box). Determines the top-left corner of the bounding box of this selected component. Extracts a 3x3 subgrid from the input, starting at this corner, padding with white (0) if the extraction goes out of bounds.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter, deque\n\n# Helper function to find the first pixel of a specific color\ndef _find_pixel(grid, color):\n    \"\"\"Finds the coordinates (row, col) of the first pixel with the specified color.\"\"\"\n    coords = np.argwhere(grid == color)\n    if len(coords) > 0:\n        return tuple(coords[0])\n    return None\n\n# Helper function to find the most frequent pattern color\ndef _find_pattern_color(grid):\n    \"\"\"Finds the most frequent color excluding white (0) and gray (5).\"\"\"\n    counts = Counter(grid.flatten())\n    counts.pop(0, None)  # Remove white\n    counts.pop(5, None)  # Remove gray\n    if not counts:\n        return None # No pattern color found\n    # Tie-breaking for most frequent color: lower color index wins (inherent in most_common)\n    return counts.most_common(1)[0][0]\n\n# Helper function for Manhattan distance\ndef _manhattan_distance(p1, p2):\n    \"\"\"Calculates the Manhattan distance between two points (row, col tuples).\"\"\"\n    return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\n# Helper function to find connected components using BFS (replaces scipy.label)\ndef _find_connected_components(grid, target_color):\n    \"\"\"\n    Finds all connected components of target_color using 8-way adjacency (BFS).\n    Returns a list of components, where each component is a set of (row, col) tuples.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = set()\n    components = []\n    \n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == target_color and (r, c) not in visited:\n                # Start BFS for a new component\n                component = set()\n                q = deque([(r, c)])\n                visited.add((r, c))\n                \n                while q:\n                    row, col = q.popleft()\n                    component.add((row, col))\n                    \n                    # Check 8 neighbors\n                    for dr in [-1, 0, 1]:\n                        for dc in [-1, 0, 1]:\n                            if dr == 0 and dc == 0:\n                                continue # Skip self\n                            \n                            nr, nc = row + dr, col + dc\n                            \n                            # Check bounds and target color\n                            if 0 <= nr < rows and 0 <= nc < cols and \\\n                               grid[nr, nc] == target_color and (nr, nc) not in visited:\n                                visited.add((nr, nc))\n                                q.append((nr, nc))\n                                \n                if component:\n                    components.append(component)\n                    \n    return components\n\n# Helper function to calculate bounding box (replaces scipy.find_objects concept)\ndef _get_bounding_box(component_pixels):\n    \"\"\"\n    Calculates the bounding box for a component.\n    Returns (min_row, min_col, max_row, max_col).\n    Returns None if component_pixels is empty.\n    \"\"\"\n    if not component_pixels:\n        return None\n        \n    min_row = min(r for r, c in component_pixels)\n    min_col = min(c for r, c in component_pixels)\n    max_row = max(r for r, c in component_pixels)\n    max_col = max(c for r, c in component_pixels)\n    \n    return (min_row, min_col, max_row, max_col)\n\n# Helper function to calculate min distance from component to marker\ndef _calculate_min_distance_to_marker(component_pixels, marker_coords):\n    \"\"\"Calculates the minimum Manhattan distance from component pixels to the marker.\"\"\"\n    min_dist = float('inf')\n    if not component_pixels:\n        return min_dist\n        \n    for pixel_coords in component_pixels:\n        dist = _manhattan_distance(pixel_coords, marker_coords)\n        if dist < min_dist:\n            min_dist = dist\n            \n    return min_dist\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the specified rules.\n    \"\"\"\n    input_np = np.array(input_grid, dtype=int)\n    rows, cols = input_np.shape\n\n    # 1. Identify Marker\n    marker_coords = _find_pixel(input_np, 5)\n    if marker_coords is None:\n        # If no marker, return default 3x3 white grid\n        return np.zeros((3, 3), dtype=int).tolist()\n\n    # 2. Determine Pattern Color\n    pattern_color = _find_pattern_color(input_np)\n    if pattern_color is None:\n        # If no pattern color, return default 3x3 white grid\n        return np.zeros((3, 3), dtype=int).tolist()\n\n    # 3. Find Pattern Components\n    components = _find_connected_components(input_np, pattern_color)\n    if not components:\n        # If no components found, return default 3x3 white grid\n        return np.zeros((3, 3), dtype=int).tolist()\n\n    # 4 & 5. Calculate Distances, Find BBoxes, and Select Target Component\n    target_component_info = None # Will store (min_dist, top_left_corner, component_pixels)\n    min_overall_distance = float('inf')\n\n    for component_pixels in components:\n        if not component_pixels: continue # Should not happen with _find_connected_components logic\n\n        # Calculate min distance for this component\n        min_dist_for_component = _calculate_min_distance_to_marker(component_pixels, marker_coords)\n        \n        # Calculate bounding box and get top-left corner\n        bbox = _get_bounding_box(component_pixels)\n        component_origin = (bbox[0], bbox[1]) # top-left corner\n\n        # Compare with the current best\n        update_target = False\n        if min_dist_for_component < min_overall_distance:\n            update_target = True\n        elif min_dist_for_component == min_overall_distance:\n            # Tie-breaking: compare top-left corners (row first, then column)\n            current_target_origin = target_component_info[1]\n            if component_origin[0] < current_target_origin[0]:\n                update_target = True\n            elif component_origin[0] == current_target_origin[0] and component_origin[1] < current_target_origin[1]:\n                update_target = True\n\n        if update_target:\n            min_overall_distance = min_dist_for_component\n            target_component_info = (min_dist_for_component, component_origin, component_pixels)\n\n    if target_component_info is None:\n        # Should not happen if components were found, but handle defensively\n        return np.zeros((3, 3), dtype=int).tolist()\n\n    # 6. Determine Extraction Origin\n    extraction_origin = target_component_info[1] # Top-left corner of the target component's bbox\n\n    # 7. Extract 3x3 Output\n    output_grid = np.zeros((3, 3), dtype=int) # Initialize with white (0)\n    start_row, start_col = extraction_origin\n\n    for r_out in range(3):\n        for c_out in range(3):\n            # Calculate corresponding input coordinates\n            r_in = start_row + r_out\n            c_in = start_col + c_out\n\n            # Check if input coordinates are within bounds\n            if 0 <= r_in < rows and 0 <= c_in < cols:\n                output_grid[r_out, c_out] = input_np[r_in, c_in]\n            # else: leave as 0 (white padding) - already initialized\n\n    return output_grid.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 3758,
            "end_index": 3930,
            "uri": "https://github.com/waltman/advent-of-code-2022",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4549,
    "candidates_token_count": 2014,
    "total_token_count": 6563,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 26.10569
}