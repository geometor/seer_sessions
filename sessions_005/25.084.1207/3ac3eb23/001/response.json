{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\ndef find_source_pixels(grid):\n  \"\"\"\n  Identifies the coordinates and colors of all non-background (non-zero) pixels.\n\n  Args:\n    grid: A numpy array representing the input grid.\n\n  Returns:\n    A list of tuples, where each tuple is (row, column, color) for a non-zero pixel.\n  \"\"\"\n  source_pixels = []\n  height, width = grid.shape\n  for r in range(height):\n    for c in range(width):\n      color = grid[r, c]\n      if color != 0:\n        source_pixels.append((r, c, color))\n  return source_pixels\n\ndef transform(input_grid):\n  \"\"\"\n  Transforms the input grid by generating a vertical pattern downwards from each\n  non-white source pixel.\n\n  The pattern generation rules are:\n  1. For a source pixel at (r, c) with color C, the pixel at (r, c) in the output has color C.\n  2. For rows i > r:\n     - If the row difference (i - r) is odd, pixels at (i, c-1) and (i, c+1) get color C (if within bounds).\n     - If the row difference (i - r) is even, the pixel at (i, c) gets color C.\n  \"\"\"\n  input_np = np.array(input_grid, dtype=int)\n  height, width = input_np.shape\n\n  # Initialize output_grid with background color (0)\n  output_grid = np.zeros_like(input_np)\n\n  # Find all non-white source pixels in the input\n  source_pixels = find_source_pixels(input_np)\n\n  # For each source pixel, generate its corresponding pattern in the output grid\n  for r, c, color in source_pixels:\n    # Iterate through rows from the source pixel's row down to the bottom\n    for i in range(r, height):\n      diff = i - r # Calculate row difference\n\n      # Apply pattern rules based on row difference parity\n      if diff == 0:\n        # The source pixel itself\n        output_grid[i, c] = color\n      elif diff % 2 != 0: # Odd difference\n        # Place color diagonally left and right\n        if c - 1 >= 0:\n          output_grid[i, c - 1] = color\n        if c + 1 < width:\n          output_grid[i, c + 1] = color\n      else: # Even difference (and diff > 0)\n        # Place color directly below the column\n        output_grid[i, c] = color\n\n  # Convert the numpy array back to a list of lists for the expected output format\n  return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2840,
    "candidates_token_count": 645,
    "total_token_count": 3485,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.886797
}