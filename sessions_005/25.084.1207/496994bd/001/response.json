{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nIdentifies a block of non-white rows at the top of the input grid, \ncreates a vertically flipped copy of this block, and places this flipped \ncopy at the bottom of the grid, preserving the original top block and \nthe white rows in between.\n\"\"\"\n\ndef find_top_block_height(grid):\n    \"\"\"\n    Finds the height of the contiguous block of non-white rows starting from the top.\n    A row is considered non-white if it contains at least one non-white pixel.\n    \"\"\"\n    height, width = grid.shape\n    block_height = 0\n    for r in range(height):\n        # Check if all pixels in the row are white (0)\n        if np.all(grid[r] == 0):\n            break\n        block_height += 1\n    return block_height\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n    \"\"\"\n    # Convert input list of lists to numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    height, width = input_np.shape\n\n    # Initialize output_grid as a copy of the input_grid\n    output_grid = np.copy(input_np)\n\n    # 1. Identify the block of contiguous rows starting from the top (row 0)\n    #    that contain at least one non-white pixel. Let its height be N.\n    n = find_top_block_height(input_np)\n\n    # If no non-white block is found at the top (n=0), return the original grid\n    if n == 0:\n        return output_grid.tolist()\n\n    # 2. Extract the identified top block of N rows (from row 0 to row N-1).\n    top_block = input_np[0:n, :]\n\n    # 3. Create a vertically flipped version of this extracted block.\n    flipped_block = np.flipud(top_block) # flipud reverses row order\n\n    # 4. Place this flipped block into the output grid, starting at row H-N\n    #    and ending at row H-1 (the bottom N rows).\n    output_grid[height-n : height, :] = flipped_block\n\n    # Return the modified output grid as a list of lists\n    return output_grid.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2154,
    "candidates_token_count": 550,
    "total_token_count": 2704,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 7.231459
}