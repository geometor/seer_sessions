task_description: Extract a specific 3x3 subgrid from the input grid.
grid_properties:
  background_color: 0 (White)
  pattern_colors: [1 (Blue), 8 (Azure)]
  output_size: [3, 3]

objects:
  - type: input_grid
    properties:
      - variable size (e.g., 9x9 in examples)
      - contains background color (White)
      - contains multiple distinct patterns made of Blue and Azure pixels

  - type: candidate_subgrid
    properties:
      - size: [3, 3]
      - composition: contains only non-background colors (Blue or Azure)
      - location: defined by top-left corner (row, col) within input_grid
      - internal_properties:
        - blue_pixel_count: count of Blue (1) pixels within the subgrid
      - derived_properties:
        - is_isolated: boolean, true if 1-pixel border in input_grid is only White or off-grid

  - type: output_grid
    properties:
      - size: [3, 3]
      - derivation: It is one specific candidate_subgrid selected from the input_grid.

actions:
  - action: identify_candidates
    description: Find all 3x3 subgrids within the input_grid that consist solely of non-background colors (Blue or Azure).
    inputs: input_grid
    outputs: list of candidate_subgrids

  - action: count_blue_pixels
    description: For each candidate_subgrid, count the number of Blue (1) pixels.
    inputs: candidate_subgrid
    outputs: blue_pixel_count

  - action: select_target
    description: >
      From the list of candidate_subgrids, select the one that has the
      maximum blue_pixel_count.
      (Based on training data, this maximum is unique).
    inputs: list of candidate_subgrids with their blue_pixel_counts
    outputs: the single candidate_subgrid designated as the output_grid

transformation_rule:
  input: input_grid
  steps:
    - Perform identify_candidates action.
    - Perform count_blue_pixels action for each candidate.
    - Perform select_target action.
  output: the selected output_grid