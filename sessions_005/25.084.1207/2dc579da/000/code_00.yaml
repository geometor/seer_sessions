task_description: Extracts a subgrid from the input based on the position of a unique pixel relative to intersecting lines.

definitions:
  - &grid
    type: 2D array of integers (0-9)
    constraints: 1x1 to 30x30 dimensions

  - &background_color
    property: Most frequent color in the input grid.

  - &line_color
    property: Second most frequent color in the input grid.
    structure: Forms a single complete horizontal line and a single complete vertical line.

  - &intersection_point
    property: The coordinates (row, col) where the horizontal and vertical lines intersect.

  - &unique_pixel
    property: The pixel with the color that appears exactly once in the input grid.
    location: Its coordinates (row, col).

input_grid:
  <<: *grid
  contains:
    - background: *background_color
    - lines: *line_color
    - intersection: *intersection_point
    - unique_item: *unique_pixel

output_grid:
  <<: *grid
  derivation_rule:
    condition: If the unique_pixel location is top-left relative to the intersection_point (unique_row < intersection_row AND unique_col < intersection_col).
    action_if_true: Extract the subgrid from the input_grid starting at (0, 0) up to (intersection_row - 1, intersection_col - 1).
    action_if_false: Extract the 3x3 neighborhood centered around the unique_pixel location, ensuring coordinates stay within the input_grid boundaries.

examples:
  - example: 1
    unique_pixel_location: (1, 5)
    intersection_point: (3, 3)
    quadrant: Top-Right
    rule_applied: action_if_false (3x3 neighborhood)
    output_dimensions: 3x3
  - example: 2
    unique_pixel_location: (4, 0)
    intersection_point: (2, 2)
    quadrant: Bottom-Left
    rule_applied: action_if_false (3x3 neighborhood, clipped)
    output_dimensions: 2x2
  - example: 3
    unique_pixel_location: (2, 1)
    intersection_point: (5, 5)
    quadrant: Top-Left
    rule_applied: action_if_true (top-left subgrid)
    output_dimensions: 5x5