{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation mirrors the colors of non-zero pixels in each row outwards, replacing zero-valued pixels.\n\"\"\"\n\nimport numpy as np\n\ndef get_non_zero_sequence(row):\n    \"\"\"\n    Extracts the non-zero sequence and its start/end indices from a row.\n    \"\"\"\n    non_zero_indices = np.nonzero(row)[0]\n    if non_zero_indices.size > 0:\n        start = non_zero_indices[0]\n        end = non_zero_indices[-1]\n        sequence = row[start:end+1]\n        return start, end, sequence\n    else:\n        return None, None, None  # Handle empty rows\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by mirroring non-zero pixel sequences in each row.\n    \"\"\"\n    output_grid = np.zeros_like(input_grid)\n    rows, cols = input_grid.shape\n\n    for i in range(rows):\n        start, end, sequence = get_non_zero_sequence(input_grid[i, :])\n\n        if sequence is not None:  # If the row is not all zeros\n            output_grid[i,:] = mirror_sequence(sequence, cols)\n\n    return output_grid\n\ndef mirror_sequence(sequence, cols):\n    \"\"\"Mirrors and fills to make sequence of length = cols\"\"\"\n    \n    mirrored_row = np.zeros(cols, dtype=int)\n    \n    # single element sequence\n    if len(sequence) == 1:\n        mirrored_row[:] = sequence[0]\n        return mirrored_row\n\n    # place original sequence\n    start_index = (cols - len(sequence)) // 2\n    mirrored_row[start_index:start_index + len(sequence)] = sequence\n\n    # Fill to the left.\n    left_index = start_index - 1\n    seq_index = 1  # start with second value\n    \n    while left_index >= 0:\n        mirrored_row[left_index] = sequence[seq_index]\n        left_index -= 1\n        seq_index = (seq_index + 1) % len(sequence)\n\n    # Fill to the right.\n    right_index = start_index + len(sequence)\n    seq_index = len(sequence) - 2  # start with second to last\n    while right_index < cols:\n        mirrored_row[right_index] = sequence[seq_index]\n        right_index += 1\n        seq_index = (seq_index - 1) % len(sequence)\n\n\n    return mirrored_row\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7109,
    "candidates_token_count": 612,
    "total_token_count": 7721,
    "cached_content_token_count": 0
  },
  "response_time": 6.91129
}