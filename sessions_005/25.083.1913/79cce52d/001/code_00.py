"""
The input grid is conceptually divided into vertical stripes of uniform color. 
These stripes are then processed in reverse order (right to left). The output
grid is generated by combining information from the input stripes, creating a mirrored and
potentially altered arrangement. The process involves combining every two rows
of the input grid to construct a new row in the output. Rows at the top or
bottom of input grid that can't be paired are discarded.

"""

import numpy as np

def get_vertical_stripes(grid):
    """Divides the grid into vertical stripes of the same color."""
    stripes = []
    current_stripe = []
    current_color = None

    for col_idx in range(grid.shape[1]):
        column = grid[:, col_idx]
        new_stripe = []
        for row_idx, pixel in enumerate(column):
            if row_idx == 0:  # first cell in column
                current_color = pixel
                new_stripe.append((row_idx, pixel))
            elif pixel == current_color:
                new_stripe.append((row_idx, pixel)) # part of same stripe
            else:
                if len(new_stripe) > 0 :
                  stripes.append( (col_idx, new_stripe) )
                new_stripe = [(row_idx, pixel)]
                current_color = pixel
        if len(new_stripe) > 0:
          stripes.append( (col_idx, new_stripe) )
    return stripes

def combine_rows(grid):
  """ Combine every 2 rows """
  new_grid = []
  for i in range(1, grid.shape[0]-1, 2):
    new_row = []
    for j in range(grid.shape[1]):
      new_row.append(grid[i,j])
    new_grid.append(new_row)
  return np.array(new_grid)

def transform(input_grid):
    # Initialize output grid (will adjust dimensions later)
    input_grid = np.array(input_grid)

    # Divide the grid into vertical stripes, recording original col index
    stripes = get_vertical_stripes(input_grid)

    # combine the input grid rows first
    combined_input = combine_rows(input_grid)
    if combined_input.shape[0] == 0:
      return []

    # re-stripe
    combined_stripes = get_vertical_stripes(combined_input)
    
    # reverse the combined stripes
    combined_stripes.reverse()

    # new output grid, sized by combined
    output_grid = np.zeros_like(combined_input)
    
    # map stripes onto output grid
    new_col = 0
    for col_idx, stripe in combined_stripes:
        for row_idx, pixel in stripe:
            output_grid[row_idx, new_col] = pixel
        new_col += 1

    return output_grid.tolist()