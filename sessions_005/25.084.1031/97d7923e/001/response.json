{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies all vertical, contiguous blocks of a single color (non-white) that have a pixel of a different non-white color directly above them (a 'trigger' pixel). Among these candidate blocks, it selects the one with the greatest height. If there's a tie in height, it selects the leftmost one (smallest column index). Finally, it recolors all pixels within the selected block to match the color of its corresponding trigger pixel. If no such candidate blocks are found, the grid remains unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef _find_candidate_blocks(grid):\n    \"\"\"\n    Finds all potential candidate blocks based on the trigger condition.\n\n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        list: A list of dictionaries, each representing a candidate block with keys:\n              'col', 'start_row', 'end_row', 'height', 'trigger_color'.\n              Returns an empty list if no candidates are found.\n    \"\"\"\n    candidates = []\n    rows, cols = grid.shape\n\n    for c in range(cols):\n        for r in range(rows - 1):\n            trigger_pixel_color = grid[r, c]\n            block_start_pixel_color = grid[r + 1, c]\n\n            # Check for trigger condition:\n            # 1. Trigger is non-white\n            # 2. Pixel below trigger is non-white\n            # 3. Trigger color is different from pixel below\n            if trigger_pixel_color != 0 and \\\n               block_start_pixel_color != 0 and \\\n               trigger_pixel_color != block_start_pixel_color:\n\n                # Found a potential start of a block. Now find its full height.\n                block_color = block_start_pixel_color\n                start_row = r + 1\n                end_row = start_row\n                # Extend downwards as long as the color matches and within bounds\n                for current_r in range(start_row + 1, rows):\n                    if grid[current_r, c] == block_color:\n                        end_row = current_r\n                    else:\n                        break # Block ends\n\n                height = end_row - start_row + 1\n                candidates.append({\n                    'col': c,\n                    'start_row': start_row,\n                    'end_row': end_row,\n                    'height': height,\n                    'trigger_color': trigger_pixel_color\n                })\n                # Optimization: Since we found the full block starting at r+1,\n                # we can skip checking rows within this block as potential triggers\n                # for blocks *in the same column*. However, the outer loop structure\n                # handles this implicitly as it moves to the next row 'r'.\n                # But we *don't* want to restart the block search from within the found block.\n                # The outer loop `for r in range(rows - 1)` continues correctly.\n\n    return candidates\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid (np.array): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.array: A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    # Convert input list of lists to numpy array for easier slicing if needed\n    grid = np.array(input_grid, dtype=int)\n    output_grid = grid.copy() # Start with a copy of the input\n\n    # 1. Find all candidate blocks\n    candidates = _find_candidate_blocks(grid)\n\n    # 2. If no candidates, return the original grid copy\n    if not candidates:\n        return output_grid.tolist() # Convert back to list of lists for ARC format\n\n    # 3. Find the maximum height among candidates\n    max_height = 0\n    for candidate in candidates:\n        if candidate['height'] > max_height:\n            max_height = candidate['height']\n\n    # 4. Filter candidates to keep only those with maximum height\n    max_height_candidates = [c for c in candidates if c['height'] == max_height]\n\n    # 5. Select the target block (leftmost if tie in height)\n    selected_candidate = min(max_height_candidates, key=lambda c: c['col'])\n\n    # 6. Recolor the selected block in the output grid\n    col = selected_candidate['col']\n    start_row = selected_candidate['start_row']\n    end_row = selected_candidate['end_row']\n    trigger_color = selected_candidate['trigger_color']\n\n    for r in range(start_row, end_row + 1):\n        output_grid[r, col] = trigger_color\n\n    # Return the modified grid as list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3994,
    "candidates_token_count": 1108,
    "total_token_count": 5102,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.219164
}