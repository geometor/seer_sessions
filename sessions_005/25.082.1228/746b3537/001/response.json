{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nFor each row in the input grid, extract the distinct values, preserving their original order. Construct the output grid by stacking these extracted rows vertically.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by extracting unique values in order from each row.\n    \"\"\"\n    output_grid = []\n\n    # Iterate through each row of the input grid\n    for row in input_grid:\n        # Find distinct values in the current row, preserving order\n        distinct_values = []\n        for value in row:\n            if value not in distinct_values:\n                distinct_values.append(value)\n\n        # Append the distinct values as a new row in the output grid\n        output_grid.append(distinct_values)\n\n    # Convert the list of lists to a NumPy array.  Handle cases where rows have varying lengths\n    max_len = max(len(row) for row in output_grid) if output_grid else 0\n    \n    # Pad shorter rows\n    padded_output_grid = []\n    for row in output_grid:\n        if(len(row) < max_len):\n          padding = [0] * (max_len - len(row))\n          padded_row = row + padding\n          padded_output_grid.append(padded_row)\n        else:\n          padded_output_grid.append(row)\n\n\n    return np.array(padded_output_grid)\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1697,
    "candidates_token_count": 329,
    "total_token_count": 2026,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 5.628877
}