{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies and extracts the unique rows from the input grid, preserving their original order, and constructs the output grid by stacking these unique rows vertically.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by extracting unique rows.\n    \"\"\"\n    unique_rows = []\n\n    # Iterate through each row of the input grid\n    for row in input_grid:\n        # Convert the row to a tuple to make it hashable for comparison\n        row_tuple = tuple(row)\n\n        # Check if this row is already in the unique_rows list\n        is_unique = True\n        for unique_row in unique_rows:\n            if row_tuple == tuple(unique_row):\n                is_unique = False\n                break\n\n        # If the row is unique, add it to the list\n        if is_unique:\n            unique_rows.append(list(row)) # store as list\n\n    # Convert the list of unique rows to a NumPy array\n    return np.array(unique_rows)\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3410,
    "candidates_token_count": 238,
    "total_token_count": 3648,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 3.974995
}