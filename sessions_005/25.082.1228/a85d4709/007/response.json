{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid to an output grid based on the following rules:\n\n1.  White (0) in the input becomes Green (3) in the output.\n2.  Gray (5) in the input becomes:\n    a. Red (2) if vertically adjacent to White (0).\n    b. Yellow (4) if horizontally adjacent to White (0), but *not* vertically adjacent.\n    c. Green (3) if diagonally adjacent to White (0), but *not* vertically or horizontally adjacent.\n    d. Green (3) if not adjacent to White (0).\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, r, c):\n    rows, cols = len(grid), len(grid[0])\n    neighbors = []\n    for i in range(max(0, r - 1), min(rows, r + 2)):\n        for j in range(max(0, c - 1), min(cols, c + 2)):\n            if (i, j) != (r, c):  # Exclude the cell itself\n                neighbors.append((i, j, grid[i][j]))\n    return neighbors\n\ndef get_vertical_neighbors(grid, r, c):\n    rows, cols = len(grid), len(grid[0])\n    neighbors = []\n    if r > 0:\n        neighbors.append((r - 1, c, grid[r - 1][c]))  # Up\n    if r < rows - 1:\n        neighbors.append((r + 1, c, grid[r + 1][c]))  # Down\n    return neighbors\n\ndef get_horizontal_neighbors(grid, r, c):\n    rows, cols = len(grid), len(grid[0])\n    neighbors = []\n    if c > 0:\n        neighbors.append((r, c - 1, grid[r][c - 1]))  # Left\n    if c < cols - 1:\n        neighbors.append((r, c + 1, grid[r][c + 1]))  # Right\n    return neighbors\n\ndef get_diagonal_neighbors(grid, r, c):\n    rows, cols = len(grid), len(grid[0])\n    neighbors = []\n    if r > 0 and c > 0:\n        neighbors.append((r - 1, c - 1, grid[r - 1][c - 1])) # Up-Left\n    if r > 0 and c < cols - 1:\n        neighbors.append((r - 1, c + 1, grid[r - 1][c + 1])) # Up-Right\n    if r < rows - 1 and c > 0:\n        neighbors.append((r + 1, c - 1, grid[r + 1][c - 1])) # Down-Left\n    if r < rows - 1 and c < cols - 1:\n        neighbors.append((r + 1, c + 1, grid[r + 1][c + 1])) # Down-Right\n    return neighbors\n\ndef transform(input_grid):\n    # initialize output_grid\n    rows, cols = len(input_grid), len(input_grid[0])\n    output_grid = np.zeros((rows, cols), dtype=int)\n\n    # change output pixels\n    for i in range(rows):\n        for j in range(cols):\n            if input_grid[i][j] == 0:\n                output_grid[i][j] = 3\n            elif input_grid[i][j] == 5:\n                is_vertically_adjacent_to_0 = False\n                is_horizontally_adjacent_to_0 = False\n                is_diagonally_adjacent_to_0 = False\n\n                for x, y, val in get_vertical_neighbors(input_grid, i, j):\n                    if val == 0:\n                        is_vertically_adjacent_to_0 = True\n                        break  # Vertical adjacency takes precedence\n\n                if not is_vertically_adjacent_to_0:\n                    for x, y, val in get_horizontal_neighbors(input_grid, i, j):\n                        if val == 0:\n                            is_horizontally_adjacent_to_0 = True\n                            break  # Horizontal adjacency takes precedence over diagonal\n\n                if not is_vertically_adjacent_to_0 and not is_horizontally_adjacent_to_0:\n                    for x, y, val in get_diagonal_neighbors(input_grid, i, j):\n                        if val == 0:\n                            is_diagonally_adjacent_to_0 = True\n                            break\n\n                if is_vertically_adjacent_to_0:\n                    output_grid[i][j] = 2\n                elif is_horizontally_adjacent_to_0:\n                    output_grid[i][j] = 4\n                elif is_diagonally_adjacent_to_0:\n                    output_grid[i][j] = 3\n                else:\n                    output_grid[i][j] = 3  # Not adjacent to 0\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4141,
    "candidates_token_count": 1182,
    "total_token_count": 5323,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 13.32829
}