{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nReplicates objects based on shape, dimensions, and color, aligning replicated\nobjects with existing instances. Single-color, non-rectangular objects adjacent\nto multi-color objects are replicated below.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"\n    Finds all contiguous objects in a grid.\n    Returns a list of objects, where each object is a list of (row, col) tuples.\n    \"\"\"\n    objects = []\n    visited = set()\n    rows, cols = grid.shape\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def dfs(r, c, color, current_object):\n        if (r, c) in visited or not is_valid(r, c) or grid[r, c] != color:\n            return\n        visited.add((r, c))\n        current_object.append((r, c))\n        for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            dfs(r + dr, c + dc, color, current_object)\n\n    for r in range(rows):\n        for c in range(cols):\n            if (r, c) not in visited and grid[r,c] != 0:\n                current_object = []\n                dfs(r, c, grid[r, c], current_object)\n                objects.append(current_object)\n    return objects\n\ndef get_object_color(grid, object_coords):\n    \"\"\"\n    Gets color of object\n    \"\"\"\n    if not object_coords:\n        return 0\n    r,c = object_coords[0]\n    return grid[r,c]\n\ndef get_object_bounds(object_coords):\n    \"\"\"\n    Gets boundaries of the object\n    \"\"\"\n\n    min_row = min(r for r, _ in object_coords)\n    max_row = max(r for r, _ in object_coords)\n    min_col = min(c for _, c in object_coords)\n    max_col = max(c for _, c in object_coords)\n\n    return min_row, max_row, min_col, max_col\n\ndef get_object_shape(object_coords):\n    \"\"\"\n    Determine if an object is a rectangle, or mixed.\n    \"\"\"\n    min_row, max_row, min_col, max_col = get_object_bounds(object_coords)\n    if len(object_coords) == (max_row - min_row + 1) * (max_col - min_col + 1):\n        return \"rectangle\"\n    else:\n        return \"mixed\"\n\ndef replicate_to_existing(input_grid, output_grid, objects):\n\n    rows, cols = input_grid.shape\n    color_counts = {}\n    for obj in objects:\n      color = get_object_color(input_grid, obj)\n      if color not in color_counts:\n        color_counts[color] = []\n      color_counts[color].append(obj)\n\n    for color in color_counts:\n      if len(color_counts[color])>1:\n        first = color_counts[color][0]\n        min_row, max_row, min_col, max_col = get_object_bounds(first)\n        shape = get_object_shape(first)\n        if shape == \"rectangle\":\n          width = max_col - min_col + 1\n          height = max_row - min_row + 1\n\n          for o in color_counts[color]:\n            min_r, max_r, min_c, max_c = get_object_bounds(o)\n            if max_c + width < cols:\n              is_clear = True\n              for r_check in range(min_r, max_r + 1):\n                for c_check in range(max_c + 1, max_c + 1 + width):\n                  if input_grid[r_check, c_check]!=0:\n                    is_clear = False\n              if is_clear:\n                for r in range(height):\n                  for c in range(width):\n                    output_grid[min_r + r, max_c + 1 + c] = color\n\n\ndef replicate_beside(input_grid, output_grid, objects):\n  rows, cols = input_grid.shape\n  for i in range(len(objects)):\n    obj1 = objects[i]\n    if len(obj1) == 1:\n      for j in range(len(objects)):\n        obj2 = objects[j]\n        if len(obj2) > 1:\n          min_row, max_row, min_col, max_col = get_object_bounds(obj2)\n          r,c = obj1[0]\n          color = input_grid[r,c]\n\n          #check beside\n          if r > max_row and c >= min_col and c <= max_col:\n            if r+1 < rows and input_grid[r+1,c] == 0:\n              output_grid[r+1,c] = color\n\n          if c > max_col:\n            if r >= min_row and r <= max_row and input_grid[r,c] !=0:\n              output_grid[r,c] = color\n\n\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of the input grid\n    input_grid = np.array(input_grid)\n    output_grid = np.copy(input_grid)\n\n    objects = find_objects(input_grid)\n\n    replicate_to_existing(input_grid, output_grid, objects)\n    replicate_beside(input_grid, output_grid, objects)\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 12270,
    "candidates_token_count": 1360,
    "total_token_count": 13630,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 22.470523
}