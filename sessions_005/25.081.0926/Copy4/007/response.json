{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nReplicates objects based on color and containment relationships. Objects of color 3\ncontaining color 4 objects are replicated horizontally. Single-cell objects of color 3 are expanded\ninto 4x4 squares. Other objects are not replicated.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"\n    Finds all contiguous objects in a grid.\n    Returns a list of objects, where each object is a list of (row, col) tuples.\n    \"\"\"\n    objects = []\n    visited = set()\n    rows, cols = grid.shape\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def dfs(r, c, color, current_object):\n        if (r, c) in visited or not is_valid(r, c) or grid[r, c] != color:\n            return\n        visited.add((r, c))\n        current_object.append((r, c))\n        for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            dfs(r + dr, c + dc, color, current_object)\n\n    for r in range(rows):\n        for c in range(cols):\n            if (r, c) not in visited and grid[r,c] != 0:\n                current_object = []\n                dfs(r, c, grid[r, c], current_object)\n                objects.append(current_object)\n    return objects\n\ndef get_object_color(grid, object_coords):\n    \"\"\"Gets the color of an object.\"\"\"\n    if not object_coords:\n        return 0\n    r, c = object_coords[0]\n    return grid[r, c]\n\ndef get_object_bounds(object_coords):\n    \"\"\"Gets the bounding box of an object.\"\"\"\n    min_row = min(r for r, _ in object_coords)\n    max_row = max(r for r, _ in object_coords)\n    min_col = min(c for _, c in object_coords)\n    max_col = max(c for _, c in object_coords)\n    return min_row, max_row, min_col, max_col\n\ndef object_contains(grid, outer_obj, inner_obj):\n    \"\"\"Checks if outer_obj contains inner_obj.\"\"\"\n    outer_min_row, outer_max_row, outer_min_col, outer_max_col = get_object_bounds(outer_obj)\n    for r, c in inner_obj:\n        if not (outer_min_row <= r <= outer_max_row and outer_min_col <= c <= outer_max_col):\n            return False\n    return True\n\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of the input\n    input_grid = np.array(input_grid)\n    output_grid = np.copy(input_grid)\n    rows, cols = output_grid.shape\n\n    objects = find_objects(input_grid)\n\n    # Replicate objects based on rules\n    for obj in objects:\n        color = get_object_color(input_grid, obj)\n        min_row, max_row, min_col, max_col = get_object_bounds(obj)\n\n        # Rule 2: Color 3 object containing color 4 object\n        if color == 3:\n          for other_obj in objects:\n            other_color = get_object_color(input_grid, other_obj)\n            if other_color == 4 and object_contains(input_grid, obj, other_obj):\n                object_width = max_col - min_col + 1\n                object_height = max_row - min_row + 1\n                #check if clear to right\n                if max_col + object_width < output_grid.shape[1]:\n                    is_right_clear = True\n                    for r in range(min_row, max_row + 1):\n                        for c in range(max_col + 1, max_col + 1 + object_width):\n                          if r < rows and c < cols:\n                            if output_grid[r,c] != 0:\n                              is_right_clear = False\n\n                    if is_right_clear:\n                      # Copy the color 3 object\n                      for r_offset in range(object_height):\n                        for c_offset in range(object_width):\n                          if min_row + r_offset < rows and max_col + 1 + c_offset < cols:\n                            output_grid[min_row + r_offset, max_col + 1 + c_offset] = color\n\n                      # Copy color 4 object\n                      inner_min_row, inner_max_row, inner_min_col, inner_max_col = get_object_bounds(other_obj)\n                      inner_object_width = inner_max_col - inner_min_col + 1\n                      inner_object_height = inner_max_row - inner_min_row + 1\n                      for r_offset in range(inner_object_height):\n                        for c_offset in range(inner_object_width):\n                          if inner_min_row + r_offset < rows and inner_max_col + 1 + c_offset < cols:\n                            new_r = inner_min_row + r_offset + (min_row - inner_min_row)  #Relative pos\n                            new_c = inner_min_col + c_offset + object_width #Relative pos\n                            if new_r < rows and new_c < cols: # Check\n                              output_grid[new_r, new_c] = other_color\n\n\n        # Rule 3: Single-cell object of color 3\n        if color == 3 and len(obj) == 1:\n            r, c = obj[0]\n            # Expand to 4x4\n            for r_offset in range(4):\n                for c_offset in range(4):\n                  if r + r_offset < rows and c + c_offset < cols:\n                    output_grid[r + r_offset, c + c_offset] = 3\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 11588,
    "candidates_token_count": 1448,
    "total_token_count": 13036,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 21.292471
}