{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Find two rectangular objects in the input grid. `shape1` is the rectangle located in the upper portion of the grid. `shape2` is the rectangle located in the lower portion of the grid.\n2.  **Extract Inner Shape:** From `shape1`, extract the contiguous inner region. The inner region may contain pixels of a different color than the border of `shape1`, or be empty (color 0).\n3.  **Create Output:** Create an output grid of the same dimensions as the input grid, initially empty (filled with color 0).\n4.  **Copy Shape2:** Copy `shape2` to the output grid in the same position it was in the input grid.\n5.  **Overlay Inner Shape:** Copy the extracted inner shape (from step 2) onto the output grid. Center the inner shape within the boundaries of `shape2`, based on their respective widths and heights.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects_by_position(grid):\n    \"\"\"Finds rectangular objects in the grid and identifies them by position.\"\"\"\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n\n    def is_valid(r, c):\n        return 0 <= r < grid.shape[0] and 0 <= c < grid.shape[1]\n\n    def dfs(r, c, color, object_coords):\n        if not is_valid(r, c) or visited[r, c] or grid[r, c] != color:\n            return\n        visited[r, c] = True\n        object_coords.append((r, c))\n        for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            dfs(r + dr, c + dc, color, object_coords)\n\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if not visited[r, c] and grid[r, c] != 0:\n                object_coords = []\n                dfs(r, c, grid[r, c], object_coords)\n                if object_coords:\n                    min_r = min(coord[0] for coord in object_coords)\n                    max_r = max(coord[0] for coord in object_coords)\n                    min_c = min(coord[1] for coord in object_coords)\n                    max_c = max(coord[1] for coord in object_coords)\n\n                    # check if rectangle\n                    is_rectangle = True\n                    for r_i in range(min_r, max_r + 1):\n                        for c_i in range(min_c, max_c+1):\n                            if (r_i,c_i) not in object_coords:\n                                is_rectangle = False\n                                break\n                        if not is_rectangle:\n                            break\n                    if is_rectangle:\n                        objects.append({\n                            \"color\": grid[r, c],\n                            \"coords\": object_coords,\n                            \"min_r\": min_r,\n                            \"max_r\": max_r,\n                            \"min_c\": min_c,\n                            \"max_c\": max_c\n                        })\n\n    # Identify shape1 and shape2 by position (top and bottom)\n    if len(objects) >= 2:  # Ensure at least two objects for comparison\n        # Sort by top-left row (min_r), then top-left col (min_c)\n        objects.sort(key=lambda obj: (obj['min_r'], obj['min_c']))\n        shape1 = objects[0]  # Topmost object\n        shape2 = objects[-1]  # Bottommost object\n        return shape1, shape2\n    elif len(objects) == 1:\n        return objects[0],None #only one shape found\n    else:\n        return None, None  # No objects found\n\ndef extract_inner_shape(grid, outer_shape):\n    \"\"\"Extracts the inner shape from a given outer shape.\"\"\"\n    if not outer_shape:\n        return None\n    outer_color = outer_shape['color']\n    inner_coords = []\n    for r in range(outer_shape['min_r'] + 1, outer_shape['max_r']):\n        for c in range(outer_shape['min_c'] + 1, outer_shape['max_c']):\n            inner_coords.append((r, c))\n\n    if not inner_coords:\n        return None\n\n    min_r = min(coord[0] for coord in inner_coords)\n    max_r = max(coord[0] for coord in inner_coords)\n    min_c = min(coord[1] for coord in inner_coords)\n    max_c = max(coord[1] for coord in inner_coords)\n\n    inner_shape = {\n        'coords': inner_coords,\n        'min_r': min_r,\n        'max_r': max_r,\n        'min_c': min_c,\n        'max_c': max_c\n    }\n\n     # get the colors from the input grid\n    inner_colors = []\n    for r,c in inner_coords:\n        inner_colors.append(grid[r,c])\n    inner_shape['colors'] = inner_colors\n    return inner_shape\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the identified rule.\"\"\"\n    # initialize output_grid\n    input_grid = np.array(input_grid)\n    output_grid = np.zeros_like(input_grid)\n\n    # Find objects\n    shape1, shape2 = find_objects_by_position(input_grid)\n\n    # Extract inner shape\n    inner_shape = extract_inner_shape(input_grid, shape1)\n\n    # Copy shape2 to output\n    if shape2:\n        for r in range(shape2['min_r'], shape2['max_r'] + 1):\n            for c in range(shape2['min_c'], shape2['max_c'] + 1):\n                output_grid[r, c] = input_grid[r, c]\n\n    # Overlay inner shape onto shape2\n    if inner_shape and shape2:\n        height_inner = inner_shape['max_r'] - inner_shape['min_r'] + 1\n        width_inner = inner_shape['max_c'] - inner_shape['min_c'] + 1\n\n        height_outer = shape2['max_r'] - shape2['min_r'] + 1\n        width_outer = shape2['max_c'] - shape2['min_c'] + 1\n\n        #find center start row\n        center_r = shape2['min_r'] + (height_outer - height_inner) // 2\n        #find center start column\n        center_c = shape2['min_c'] + (width_outer - width_inner) // 2\n\n        for i, (r,c) in enumerate(inner_shape['coords']):\n            output_grid[center_r + (r - inner_shape['min_r']), center_c + (c - inner_shape['min_c'])] = inner_shape['colors'][i]\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8736,
    "candidates_token_count": 1681,
    "total_token_count": 10417,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 26.710148
}