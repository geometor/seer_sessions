{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe input grid is duplicated. A row or column of zeros is inserted/extended. If the input has \nan existing row of zeros, then that row is extended by one row in the vertical stacking. \nIf no row of zeros exists, a column of zeros is inserted between two copies of the input grid.\n\"\"\"\n\nimport numpy as np\n\ndef find_zero_rows(grid):\n    zero_rows = []\n    for i, row in enumerate(grid):\n        if np.all(row == 0):\n            zero_rows.append(i)\n    return zero_rows\n\ndef transform(input_grid):\n    # Convert input grid to numpy array\n    input_np = np.array(input_grid)\n    rows, cols = input_np.shape\n\n    # Check for existing zero rows\n    zero_rows = find_zero_rows(input_np)\n\n    if zero_rows:  # train_1 style: existing zero row\n        # Duplicate the input grid vertically\n        duplicated_grid = np.vstack([input_np, input_np])\n\n        # Create a zero row\n        zero_row = np.zeros((1, cols), dtype=int)\n        \n        # determine where to insert a band of zeros based on where it was in original image.\n        insert_position = zero_rows[0] + rows # add to end of original array\n        \n        # Insert the zero row\n        output_grid = np.insert(duplicated_grid, insert_position, zero_row, axis=0)\n\n    else: # train_2 style: no zero rows. Insert a band of zeros.\n        # Duplicate the input grid horizontally\n        duplicated_grid = np.hstack([input_np, input_np])\n        \n        # create a zero column\n        zero_col = np.zeros((rows,1), dtype=int)\n        \n        # insert the zero col\n        output_grid = np.insert(duplicated_grid, cols, zero_col, axis=1)\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2049,
    "candidates_token_count": 462,
    "total_token_count": 2511,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 19.622223
}