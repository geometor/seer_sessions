{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. Identify Objects: Find all contiguous regions of non-zero (non-white) pixels.\n2. Conditional Duplication:\n    *  Example 1: If an object spans multiple rows and its shape is not simply vertical, then it may be targeted for action. The object with color 2 is targeted. Duplicate the entire targeted object, and position the copy so its left-most edge aligns with the left most edge of any other object in the input grid. The duplicated object will overlap any existing object.\n    *  Example 2: Single pixel objects are duplicated *horizontally* to fill available empty (0-colored) spaces that are adjacent to an existing object. The duplicated pixels of an object are of the same color and always adjacent.\n\n3. Preservation:  The original objects are mostly preserved (though they can be overlapped). Only in Example 2 are new objects created through expansion into blank spaces.\n\"\"\"\n\nimport numpy as np\n\ndef get_objects(grid):\n    \"\"\"\n    Identifies and returns a list of objects in the grid.\n    Each object is represented by a list of (row, col) coordinates.\n    \"\"\"\n    objects = []\n    visited = set()\n    rows, cols = grid.shape\n    \n    def dfs(row, col, current_object):\n        if (row, col) in visited or not (0 <= row < rows and 0 <= col < cols) or grid[row, col] == 0:\n            return\n        visited.add((row, col))\n        current_object.append((row, col))\n        dfs(row + 1, col, current_object)\n        dfs(row - 1, col, current_object)\n        dfs(row, col + 1, current_object)\n        dfs(row, col - 1, current_object)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and (r, c) not in visited:\n                current_object = []\n                dfs(r, c, current_object)\n                objects.append((grid[r,c],current_object)) # save value with the object\n    return objects\n\ndef is_single_pixel_object(obj):\n    \"\"\"Checks if an object is a single pixel.\"\"\"\n    return len(obj) == 1\n\ndef get_object_bounds(obj):\n    \"\"\"Gets the bounding box of an object.\"\"\"\n    rows, cols = zip(*obj)\n    return min(rows), max(rows), min(cols), max(cols)\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on the observed rules.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    objects = get_objects(input_grid)\n    rows, cols = input_grid.shape\n\n    # Example 1 style duplication\n    for color, obj in objects:\n        min_row, max_row, min_col, max_col = get_object_bounds(obj)\n        if (max_row - min_row + 1) > 1 and (max_col - min_col + 1) >1 :  # Not a single row or single pixel object\n            # Find leftmost column of any object\n            target_col = min(o_min_col for _, other_obj in objects for _, _, o_min_col, _ in [get_object_bounds(other_obj)] )\n\n            #Duplicate and shift\n            col_offset = target_col - min_col\n            if col_offset != 0:\n                for row, col in obj:\n                    new_col = col + col_offset\n                    if 0 <= new_col < cols: #check new col is in bounds\n                       output_grid[row,new_col] = color\n\n    # Example 2 style duplication (single-pixel horizontal expansion)\n    for color, obj in objects:\n      if is_single_pixel_object(obj):\n          row, col = obj[0]\n\n          # Check right neighbor\n          if col + 1 < cols and output_grid[row, col + 1] == 0:\n              # find nearest non-zero object horizontally\n              found_neighbor = False\n              for other_color, other_obj in objects:\n                if other_color != 0:\n                  for o_row, o_col in other_obj:\n                    if o_row == row and o_col > col:\n                      found_neighbor = True\n                      break\n                if found_neighbor: break\n\n              if found_neighbor:\n                output_grid[row, col + 1] = color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 9256,
    "candidates_token_count": 1053,
    "total_token_count": 10309,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 21.498568
}