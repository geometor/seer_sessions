task_description: "Replace gray pixels with white, then draw a new diagonal line based on the relative positions of the original top-leftmost gray and main color pixels."

objects:
  - object: grid
    description: A 2D array of pixels with colors 0-9.
  - object: main_color_pixels
    description: Pixels whose color is unique and not white (0) or gray (5).
    properties:
      - color: C (the unique non-white, non-gray color)
      - top_leftmost_coordinate: (mr, mc) - minimum row, then minimum column.
  - object: gray_pixels
    description: Pixels with color gray (5).
    properties:
      - color: 5
      - top_leftmost_coordinate: (gr, gc) - minimum row, then minimum column.
  - object: background_pixels
    description: Pixels with color white (0).
  - object: output_diagonal_line
    description: A line of pixels added to the output grid.
    properties:
      - color: C (main color)
      - orientation: Diagonal, extending down and right.
      - start_coordinate: (sr, sc), determined by rules below.

actions:
  - action: identify_main_color
    input: input_grid
    output: color C
  - action: find_top_leftmost_gray
    input: input_grid
    output: coordinate (gr, gc)
  - action: find_top_leftmost_main
    input: input_grid
    output: coordinate (mr, mc)
  - action: initialize_output_grid
    input: input_grid
    output: output_grid (copy of input)
  - action: remove_gray_pixels
    input: output_grid
    output: modified output_grid (all gray pixels changed to white)
  - action: determine_diagonal_start
    input: (gr, gc), (mr, mc)
    output: coordinate (sr, sc)
    logic: |
      IF gc <= mc THEN
        (sr, sc) = (gr, 0)
      ELSE (gc > mc)
        IF gr < gc THEN
          (sr, sc) = (0, gc)
        ELSE (gr >= gc)
          (sr, sc) = (gr, 0)
      END IF
  - action: draw_diagonal_line
    input: output_grid, start_coordinate (sr, sc), main_color C
    output: modified output_grid with the diagonal line added.
    logic: |
      Starting from (r, c) = (sr, sc):
      WHILE r and c are within grid bounds:
        Set output_grid[r, c] = C
        Increment r by 1
        Increment c by 1
      END WHILE