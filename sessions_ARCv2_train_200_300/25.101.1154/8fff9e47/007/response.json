{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport math\n\n\"\"\"\nTransforms an input grid to a fixed 12x12 output grid by scaling and sampling neighbors \nbased on empirically derived mappings specific to the scaling factor.\n\n1.  The input grid (H_in x W_in) must have dimensions that are positive integer divisors of 12.\n2.  Integer scaling factors are calculated: scale_h = 12 // H_in, scale_w = 12 // W_in.\n3.  A specific neighbor offset map is chosen based on the block shape (scale_h, scale_w). \n    These maps define, for each relative position (rel_r, rel_c) within a scaled block, \n    which neighbor offset (dr, dc) relative to the source input pixel (i, j) should be sampled.\n    - Map for 2x3 blocks (scale_h=2, scale_w=3):\n        (0,0)->(1,1), (0,1)->(-1,0), (0,2)->(1,-1)\n        (1,0)->(-1,1), (1,1)->(0,-1), (1,2)->(0,1)\n    - Map for 3x2 blocks (scale_h=3, scale_w=2):\n        (0,0)->(-1,1), (0,1)->(1,-1)\n        (1,0)->(-1,-1), (1,1)->(1,1)\n        (2,0)->(0,-1), (2,1)->(0,1)\n4.  The output grid (12x12) is generated pixel by pixel. For each output pixel Output[r, c]:\n    a.  The corresponding source input pixel (i, j) and relative position (rel_r, rel_c) are calculated.\n    b.  The neighbor offset (dr, dc) is retrieved from the chosen map using (rel_r, rel_c).\n    c.  The target neighbor coordinate (ni, nj) = (i+dr, j+dc) is calculated.\n    d.  If (ni, nj) is within the bounds of the input grid, its color Input[ni, nj] is used.\n    e.  If (ni, nj) is out of bounds, the color of the central source pixel Input[i, j] is used instead.\n    f.  This color is assigned to Output[r, c].\n5.  The completed 12x12 grid is returned.\n\"\"\"\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies the scaling and mapped neighbor sampling transformation.\n\n    Args:\n        input_grid: The input grid as a list of lists.\n\n    Returns:\n        The transformed 12x12 grid as a list of lists.\n    \"\"\"\n    # Convert input list of lists to a numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    H_in, W_in = input_np.shape\n    \n    # Define fixed output dimensions\n    H_out, W_out = 12, 12\n    \n    # Define the empirically derived neighbor offset maps\n    offset_map_2x3 = {\n        (0,0): (1,1), (0,1): (-1,0), (0,2): (1,-1),\n        (1,0): (-1,1), (1,1): (0,-1), (1,2): (0,1)\n    }\n    offset_map_3x2 = {\n        (0,0): (-1,1), (0,1): (1,-1),\n        (1,0): (-1,-1), (1,1): (1,1),\n        (2,0): (0,-1), (2,1): (0,1)\n    }\n\n    # Validate input dimensions: must be non-zero and divisors of 12\n    if H_in <= 0 or W_in <= 0 or H_out % H_in != 0 or W_out % W_in != 0:\n        # Return a default 12x12 black grid if dimensions are invalid\n        return [[0 for _ in range(W_out)] for _ in range(H_out)]\n\n    # Calculate integer scaling factors\n    scale_h = H_out // H_in\n    scale_w = W_out // W_in\n\n    # Select the appropriate offset map based on the calculated block shape\n    if scale_h == 2 and scale_w == 3:\n        offset_map = offset_map_2x3\n    elif scale_h == 3 and scale_w == 2:\n        offset_map = offset_map_3x2\n    else:\n        # Handle unexpected block shapes (e.g., return default grid)\n        # This case shouldn't occur based on the training examples.\n        print(f\"Warning: Unsupported block shape ({scale_h}x{scale_w}). Returning default grid.\")\n        return [[0 for _ in range(W_out)] for _ in range(H_out)]\n\n    # Initialize the output grid with zeros (black)\n    output_np = np.zeros((H_out, W_out), dtype=int)\n\n    # Iterate through each pixel coordinate (r, c) of the output grid\n    for r in range(H_out):\n        for c in range(W_out):\n            # Calculate the corresponding source pixel coordinates (i, j) in the input grid\n            i = r // scale_h\n            j = c // scale_w\n\n            # Calculate the relative coordinates (rel_r, rel_c) within the scaled block\n            rel_r = r % scale_h\n            rel_c = c % scale_w\n\n            # Look up the neighbor offset (dr, dc) from the selected map\n            dr, dc = offset_map.get((rel_r, rel_c), (0, 0)) # Default to (0,0) if key missing, though shouldn't happen\n\n            # Calculate the target neighbor coordinates\n            ni = i + dr\n            nj = j + dc\n\n            # Determine the color based on boundary checks\n            if 0 <= ni < H_in and 0 <= nj < W_in:\n                # Neighbor is within bounds: use neighbor's color\n                color = input_np[ni, nj]\n            else:\n                # Neighbor is out of bounds: use the central source pixel's color\n                color = input_np[i, j]\n\n            # Assign the determined color to the current output grid pixel\n            output_np[r, c] = color\n\n    # Convert the resulting numpy array back to a list of lists and return\n    return output_np.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 32327,
    "candidates_token_count": 2017,
    "total_token_count": 34344,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-preview-03-25",
  "response_time": 14.597339,
  "retries": 1
}