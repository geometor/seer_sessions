{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport math\n\n\"\"\"\nTransforms an input grid based on identifying a central feature and drawing a diagonal line segment.\n\n1. Assume the background color is orange (7).\n2. Determine the dimensions (height H, width W) of the input grid.\n3. Calculate the coordinates of the geometric center of the grid: center_r = (H - 1) / 2, center_c = (W - 1) / 2.\n4. Find the non-background pixel (r_c, c_c) closest to the geometric center using Manhattan distance. Ties are broken by smallest row index, then smallest column index.\n5. Let C be the color of the identified pixel input[r_c][c_c].\n6. Create an output grid of the same dimensions, filled with the background color (orange=7).\n7. Calculate the anti-diagonal sum S = r_c + c_c.\n8. Iterate through each cell (r, c) of the grid.\n9. If r + c == S (i.e., the cell is on the anti-diagonal passing through (r_c, c_c)):\n    a. If C is even: Check if r <= r_c AND c >= c_c. If true, set output[r][c] = C.\n    b. If C is odd: Check if r >= r_c AND c <= c_c. If true, set output[r][c] = C.\n10. Return the modified output grid.\n\"\"\"\n\ndef calculate_manhattan_distance(r1, c1, r2, c2):\n    \"\"\"Calculates the Manhattan distance between two points.\"\"\"\n    return abs(r1 - r2) + abs(c1 - c2)\n\ndef find_central_pixel(input_grid: list[list[int]], background_color: int) -> tuple[int, int, int]:\n    \"\"\"\n    Finds the non-background pixel closest to the geometric center.\n\n    Args:\n        input_grid: The input grid.\n        background_color: The color considered background.\n\n    Returns:\n        A tuple containing (row, column, color) of the central pixel.\n        Returns (-1, -1, -1) if no non-background pixel is found.\n    \"\"\"\n    height = len(input_grid)\n    width = len(input_grid[0])\n    center_r = (height - 1) / 2\n    center_c = (width - 1) / 2\n\n    min_dist = float('inf')\n    central_pixel_r = -1\n    central_pixel_c = -1\n    central_pixel_color = -1\n\n    for r in range(height):\n        for c in range(width):\n            color = input_grid[r][c]\n            if color != background_color:\n                dist = calculate_manhattan_distance(r, c, center_r, center_c)\n                # Check if this pixel is closer, or same distance but better tie-break\n                if dist < min_dist:\n                    min_dist = dist\n                    central_pixel_r = r\n                    central_pixel_c = c\n                    central_pixel_color = color\n                elif dist == min_dist:\n                    if r < central_pixel_r:\n                        central_pixel_r = r\n                        central_pixel_c = c\n                        central_pixel_color = color\n                    elif r == central_pixel_r and c < central_pixel_c:\n                        central_pixel_c = c\n                        central_pixel_color = color\n\n    return central_pixel_r, central_pixel_c, central_pixel_color\n\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies the transformation rules to the input grid.\n    \"\"\"\n    height = len(input_grid)\n    width = len(input_grid[0])\n    background_color = 7\n\n    # Find the central non-background pixel\n    r_c, c_c, central_color = find_central_pixel(input_grid, background_color)\n\n    # Initialize output_grid with background color\n    output_grid = [[background_color for _ in range(width)] for _ in range(height)]\n\n    # If no non-background pixel found, return the background grid (edge case)\n    if r_c == -1:\n        return output_grid\n\n    # Calculate the anti-diagonal sum\n    anti_diagonal_sum = r_c + c_c\n\n    # Iterate through the grid to draw the line segment\n    for r in range(height):\n        for c in range(width):\n            # Check if the current cell is on the target anti-diagonal\n            if r + c == anti_diagonal_sum:\n                # Check parity of the central color and apply direction rule\n                is_even = central_color % 2 == 0\n                if is_even:\n                    # Even color: line goes up-right from central pixel\n                    if r <= r_c and c >= c_c:\n                        output_grid[r][c] = central_color\n                else:\n                    # Odd color: line goes down-left from central pixel\n                    if r >= r_c and c <= c_c:\n                        output_grid[r][c] = central_color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3235,
    "candidates_token_count": 1836,
    "total_token_count": 5071,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-preview-03-25",
  "response_time": 12.545645,
  "retries": 1
}