{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentify the non-zero digit (color) that appears least frequently in the input grid.\nReplace all instances of this least frequent digit with the background digit (0).\nIf there are fewer than two distinct non-zero digits, make no changes.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef find_unique_non_zero_values(grid: np.ndarray) -> list[int]:\n    \"\"\"Finds all unique non-zero integer values in the grid.\"\"\"\n    return np.unique(grid[grid != 0]).tolist()\n\ndef count_value_frequencies(grid: np.ndarray, values: list[int]) -> dict[int, int]:\n    \"\"\"Counts the frequency of specified values in the grid.\"\"\"\n    counts = Counter(grid.flatten())\n    return {value: counts.get(value, 0) for value in values}\n\ndef find_min_frequency_value(frequencies: dict[int, int]) -> int | None:\n    \"\"\"Finds the value with the minimum frequency.\"\"\"\n    if not frequencies:\n        return None\n    # Find the minimum frequency\n    min_freq = min(frequencies.values())\n    # Find all values with that minimum frequency\n    min_freq_values = [value for value, freq in frequencies.items() if freq == min_freq]\n    # Return the numerically smallest value among those with the minimum frequency (handles ties)\n    return min(min_freq_values)\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Filters the input grid by removing the least frequent non-zero digit.\n\n    Args:\n        input_grid: A 2D list of integers representing the input grid.\n\n    Returns:\n        A 2D list of integers representing the transformed grid.\n    \"\"\"\n    # Convert input list of lists to a NumPy array for efficient processing\n    grid_np = np.array(input_grid, dtype=int)\n\n    # Find all unique non-zero digits (colors) in the grid\n    unique_values = find_unique_non_zero_values(grid_np)\n\n    # If there are less than two unique non-zero colors, no change is needed\n    if len(unique_values) < 2:\n        return input_grid # Return the original list of lists\n\n    # Count the frequency of each unique non-zero color\n    frequencies = count_value_frequencies(grid_np, unique_values)\n\n    # Find the color with the minimum frequency\n    value_to_remove = find_min_frequency_value(frequencies)\n\n    # If for some reason no value is found (e.g., empty frequencies), return original\n    if value_to_remove is None:\n         return input_grid\n\n    # Create the output grid by copying the input array\n    output_grid_np = grid_np.copy()\n\n    # Replace all occurrences of the least frequent color with 0 (background)\n    output_grid_np[output_grid_np == value_to_remove] = 0\n\n    # Convert the resulting NumPy array back to a list of lists\n    output_grid = output_grid_np.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3430,
    "candidates_token_count": 1023,
    "total_token_count": 4453,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.248595,
  "retries": 1
}