{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by identifying a background color, pattern colors, a trigger color (max of pattern colors), and a fill color (min of pattern colors). \nIt then iterates through the grid. If a cell has the background color and is adjacent (including diagonals) to a cell with the trigger color in the original input grid, its color in the output grid is changed to the fill color. Otherwise, the cell retains its original color.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\nimport itertools\n\ndef _find_colors(grid: np.ndarray) -> tuple[int, set[int]]:\n    \"\"\"\n    Identifies the background color (most frequent) and pattern colors (others).\n    \n    Args:\n        grid: The input grid as a numpy array.\n        \n    Returns:\n        A tuple containing the background color and a set of pattern colors.\n    \"\"\"\n    flat_grid = grid.flatten()\n    counts = Counter(flat_grid)\n    \n    # Assume background color is the most frequent one\n    background_color = counts.most_common(1)[0][0]\n    \n    # Pattern colors are all colors except the background\n    pattern_colors = set(counts.keys()) - {background_color}\n    \n    return background_color, pattern_colors\n\ndef _has_trigger_neighbor(grid: np.ndarray, r: int, c: int, trigger_color: int) -> bool:\n    \"\"\"\n    Checks if any of the 8 neighbors of cell (r, c) has the trigger_color.\n    \n    Args:\n        grid: The input grid (numpy array).\n        r: Row index of the cell.\n        c: Column index of the cell.\n        trigger_color: The color that triggers the change.\n        \n    Returns:\n        True if a neighbor has the trigger_color, False otherwise.\n    \"\"\"\n    rows, cols = grid.shape\n    # Iterate through all 8 neighbors (Moore neighborhood) including diagonals\n    for dr, dc in itertools.product([-1, 0, 1], repeat=2):\n        if dr == 0 and dc == 0:  # Skip the cell itself\n            continue\n            \n        nr, nc = r + dr, c + dc\n        \n        # Check boundary conditions\n        if 0 <= nr < rows and 0 <= nc < cols:\n            if grid[nr, nc] == trigger_color:\n                return True\n                \n    return False\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:  \n    \"\"\"\n    Applies the transformation rule to the input grid.\n    \n    Args:\n        input_grid: A 2D list representing the input grid.\n        \n    Returns:\n        A 2D list representing the transformed output grid.\n    \"\"\"\n    # Convert input to numpy array for easier processing\n    input_array = np.array(input_grid, dtype=int)\n    output_array = np.copy(input_array) # Initialize output_grid as a copy\n    rows, cols = input_array.shape\n\n    # Identify background and pattern colors\n    background_color, pattern_colors = _find_colors(input_array)\n\n    # Handle cases where there might be no pattern (only background)\n    if not pattern_colors:\n        return input_grid # Return original grid if no pattern found\n\n    # Determine trigger and fill colors\n    trigger_color = max(pattern_colors)\n    fill_color = min(pattern_colors)\n\n    # Iterate through each cell of the input grid\n    for r in range(rows):\n        for c in range(cols):\n            # Check if the current cell has the background color\n            if input_array[r, c] == background_color:\n                # Check if any neighbor in the *original* input grid has the trigger color\n                if _has_trigger_neighbor(input_array, r, c, trigger_color):\n                    # If yes, change the corresponding cell in the output grid to the fill color\n                    output_array[r, c] = fill_color\n\n    # Convert the result back to a list of lists\n    output_grid = output_array.tolist()\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3467,
    "candidates_token_count": 1504,
    "total_token_count": 4971,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.973402,
  "retries": 1
}