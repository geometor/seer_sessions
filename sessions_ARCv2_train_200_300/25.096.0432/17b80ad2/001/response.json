{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Transforms the input grid based on the following rule:\n    1. Initialize the output grid as a copy of the input grid.\n    2. Iterate through each column index `c` from 0 to the number of columns minus 1.\n    3. Initialize a variable `fill_value` to 0. This variable will store the last non-zero number encountered in the current column.\n    4. Iterate through each row index `r` from 0 to the number of rows minus 1 for the current column `c`.\n    5. Read the value of the cell at `(r, c)` in the *input* grid. Let this be `current_value`.\n    6. If `current_value` is not 0:\n        *   Update `fill_value` to `current_value`.\n    7. Else (if `current_value` is 0):\n        *   If `fill_value` is not 0:\n            *   Set the value of the cell at `(r, c)` in the *output* grid to `fill_value`.\n    8. After processing all columns, return the modified output grid.\n    \"\"\"\n\n    # Get grid dimensions\n    if not input_grid:\n        return []\n    num_rows = len(input_grid)\n    if num_rows == 0 or not input_grid[0]:\n         return [[] for _ in range(num_rows)] # Handle empty rows or grid\n    num_cols = len(input_grid[0])\n\n    # Initialize output_grid as a deep copy of the input grid\n    output_grid = copy.deepcopy(input_grid)\n\n    # Iterate through each column\n    for c in range(num_cols):\n        # Initialize the fill value for the current column\n        fill_value = 0\n        # Iterate through each row in the current column\n        for r in range(num_rows):\n            # Get the value from the original input grid\n            current_value = input_grid[r][c]\n\n            # If the current input value is non-zero, update the fill value\n            if current_value != 0:\n                fill_value = current_value\n            # If the current input value is zero and we have a fill value\n            elif fill_value != 0:\n                # Update the corresponding cell in the output grid\n                output_grid[r][c] = fill_value\n\n    # Return the transformed grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3818,
    "candidates_token_count": 966,
    "total_token_count": 4784,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.189339,
  "retries": 1
}