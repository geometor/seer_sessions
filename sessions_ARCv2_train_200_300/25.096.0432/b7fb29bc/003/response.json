{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\nfrom collections import deque\n\n\"\"\"\nTransforms an input grid based on the following rules:\n1.  Identifies '0' cells connected to the grid border via paths of only '0's (\"external zeros\"). These remain '0'.\n2.  Identifies '0' cells not connected to the border (\"internal zeros\").\n3.  Transforms internal zeros:\n    a.  To '4' if adjacent (up, down, left, right) to any '3' in the input grid.\n    b.  To '2' otherwise.\n4.  Cells containing '3's in the input remain '3'.\n\"\"\"\n\ndef find_external_zeros(grid: list[list[int]]) -> set[tuple[int, int]]:\n    \"\"\"\n    Finds all '0' cells reachable from the border via paths of only '0's.\n\n    Args:\n        grid: The input 2D list of integers.\n\n    Returns:\n        A set of tuples representing the coordinates (row, col) of external zeros.\n    \"\"\"\n    rows = len(grid)\n    if rows == 0:\n        return set()\n    cols = len(grid[0])\n    if cols == 0:\n        return set()\n\n    external_zeros = set()\n    visited = set()\n    queue = deque()\n\n    # Add all border '0's to the queue and mark as visited\n    for r in range(rows):\n        if grid[r][0] == 0 and (r, 0) not in visited:\n            queue.append((r, 0))\n            visited.add((r, 0))\n        if grid[r][cols - 1] == 0 and (r, cols - 1) not in visited:\n            queue.append((r, cols - 1))\n            visited.add((r, cols - 1))\n    for c in range(cols):\n        if grid[0][c] == 0 and (0, c) not in visited:\n            queue.append((0, c))\n            visited.add((0, c))\n        if grid[rows - 1][c] == 0 and (rows - 1, c) not in visited:\n            queue.append((rows - 1, c))\n            visited.add((rows - 1, c))\n\n    # Perform BFS\n    while queue:\n        r, c = queue.popleft()\n        external_zeros.add((r, c)) # Mark this cell as external\n\n        # Check neighbors\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n            # Check bounds, if it's a '0', and if not visited\n            if 0 <= nr < rows and 0 <= nc < cols and \\\n               grid[nr][nc] == 0 and (nr, nc) not in visited:\n                visited.add((nr, nc))\n                queue.append((nr, nc))\n\n    return external_zeros\n\ndef has_neighbor_value(grid: list[list[int]], r: int, c: int, value: int) -> bool:\n    \"\"\"\n    Checks if any adjacent neighbor (up, down, left, right) of cell (r, c) has the specified value.\n\n    Args:\n        grid: The input 2D list of integers to check against.\n        r: Row index of the cell.\n        c: Column index of the cell.\n        value: The value to check for in neighbors.\n\n    Returns:\n        True if a neighbor has the specified value, False otherwise.\n    \"\"\"\n    rows = len(grid)\n    cols = len(grid[0])\n    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n        nr, nc = r + dr, c + dc\n        if 0 <= nr < rows and 0 <= nc < cols and grid[nr][nc] == value:\n            return True\n    return False\n\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid: A 2D list of integers representing the input state.\n\n    Returns:\n        A 2D list of integers representing the transformed state.\n    \"\"\"\n    # initialize output_grid as a deep copy\n    output_grid = copy.deepcopy(input_grid)\n    rows = len(input_grid)\n    if rows == 0:\n        return output_grid\n    cols = len(input_grid[0])\n    if cols == 0:\n        return output_grid\n\n    # Step 1: Identify all '0' cells connected to the border\n    external_zeros = find_external_zeros(input_grid)\n\n    # Step 2: Iterate through the grid and apply transformation to internal zeros\n    for r in range(rows):\n        for c in range(cols):\n            # Check if the cell is an 'internal zero'\n            if input_grid[r][c] == 0 and (r, c) not in external_zeros:\n                # Check if it has a neighbor with value 3 in the *input* grid\n                if has_neighbor_value(input_grid, r, c, 3):\n                    # Set to 4 if adjacent to a 3\n                    output_grid[r][c] = 4\n                else:\n                    # Set to 2 otherwise\n                    output_grid[r][c] = 2\n            # Otherwise (it's a 3, or an external 0), the value remains as copied initially\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 20145,
    "candidates_token_count": 1781,
    "total_token_count": 21926,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 17.161638,
  "retries": 1
}