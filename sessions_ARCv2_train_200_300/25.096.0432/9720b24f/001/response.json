{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms a 2D grid of integers based on neighborhood interactions.\nA non-zero cell's value is reset to zero if it has at least one neighbor \n(in the 8-cell Moore neighborhood) with a different, non-zero value that is\nstrictly smaller than the cell's own value. Otherwise, the cell retains \nits original value. Zero-valued cells (background) remain unchanged.\n\"\"\"\n\nimport copy\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid: A list of lists representing the 2D input grid.\n\n    Returns:\n        A list of lists representing the transformed 2D output grid.\n    \"\"\"\n    \n    # Get grid dimensions\n    if not input_grid:\n        return []\n    height = len(input_grid)\n    if height == 0:\n        return [[]]\n    width = len(input_grid[0])\n    if width == 0:\n        return [[] for _ in range(height)]\n\n    # Initialize output_grid as a deep copy of the input_grid\n    # This ensures we check neighbors based on the original state\n    output_grid = copy.deepcopy(input_grid)\n\n    # Define the 8 neighbor offsets (Moore neighborhood)\n    neighbor_offsets = [\n        (-1, -1), (-1, 0), (-1, 1),\n        ( 0, -1),          ( 0, 1),\n        ( 1, -1), ( 1, 0), ( 1, 1)\n    ]\n\n    # Iterate through each cell in the input grid\n    for r in range(height):\n        for c in range(width):\n            cell_value = input_grid[r][c]\n\n            # Skip background cells\n            if cell_value == 0:\n                continue\n\n            # Flag to determine if the cell should be reset to 0\n            reset_cell = False\n\n            # Check all 8 neighbors\n            for dr, dc in neighbor_offsets:\n                nr, nc = r + dr, c + dc\n\n                # Check if the neighbor coordinates are within the grid bounds\n                if 0 <= nr < height and 0 <= nc < width:\n                    neighbor_value = input_grid[nr][nc]\n\n                    # Check the conditions for resetting the cell\n                    # 1. Neighbor is not background (non-zero)\n                    # 2. Neighbor value is different from the current cell value\n                    # 3. Neighbor value is smaller than the current cell value\n                    if neighbor_value != 0 and neighbor_value != cell_value and neighbor_value < cell_value:\n                        reset_cell = True\n                        break # Found a neighbor that triggers the reset, no need to check others\n\n            # If the reset flag is true, update the cell in the output grid to 0\n            if reset_cell:\n                output_grid[r][c] = 0\n            # Otherwise, the output_grid already holds the original correct value due to the initial deep copy\n\n    # Return the modified grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3333,
    "candidates_token_count": 1303,
    "total_token_count": 4636,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.181196,
  "retries": 1
}