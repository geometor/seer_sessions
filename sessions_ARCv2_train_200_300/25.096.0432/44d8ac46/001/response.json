{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies enclosed regions of 0s (holes) within shapes formed by 5s in a 2D grid. \nA hole is filled with 2s if and only if every 5-cell forming its immediate boundary \nis adjacent to at least one 0-cell that is *not* part of that hole (i.e., an external 0 or a 0 from a different hole). \nIf any boundary 5-cell of a hole is only adjacent to other 5s or 0s belonging exclusively \nto that specific hole, the hole remains unfilled (keeps its 0s).\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\nimport copy\n\ndef _get_neighbors(r, c, rows, cols):\n    \"\"\" Get valid 4-directional neighbors for a cell. \"\"\"\n    neighbors = []\n    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n        nr, nc = r + dr, c + dc\n        if 0 <= nr < rows and 0 <= nc < cols:\n            neighbors.append((nr, nc))\n    return neighbors\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Transforms the grid by filling certain enclosed regions of 0s with 2s.\n\n    Args:\n        input_grid: A 2D list of integers representing the input grid.\n\n    Returns:\n        A 2D list of integers representing the transformed grid.\n    \"\"\"\n    # Convert to numpy array for easier manipulation\n    grid = np.array(input_grid, dtype=int)\n    output_grid = np.array(input_grid, dtype=int)\n    rows, cols = grid.shape\n    \n    # Visited array to keep track of cells processed during BFS\n    visited = np.zeros_like(grid, dtype=bool)\n    \n    # --- Step 1: Identify all 0s connected to the border ---\n    border_connected_zeros = set()\n    q = deque()\n\n    # Initialize queue with all border 0s\n    for r in range(rows):\n        for c in [0, cols - 1]:\n            if grid[r, c] == 0 and not visited[r, c]:\n                q.append((r, c))\n                visited[r, c] = True\n                border_connected_zeros.add((r, c))\n    for c in range(cols):\n        for r in [0, rows - 1]:\n             if grid[r, c] == 0 and not visited[r, c]:\n                q.append((r, c))\n                visited[r, c] = True\n                border_connected_zeros.add((r, c))\n\n    # Perform BFS from border 0s\n    while q:\n        r, c = q.popleft()\n        for nr, nc in _get_neighbors(r, c, rows, cols):\n            if grid[nr, nc] == 0 and not visited[nr, nc]:\n                visited[nr, nc] = True\n                q.append((nr, nc))\n                border_connected_zeros.add((nr, nc))\n\n    # --- Step 2: Identify holes and check fill condition ---\n    hole_candidates = []\n    # Reset visited for hole finding, but keep track of border zeros\n    visited_holes = np.zeros_like(grid, dtype=bool) # Track visited cells during hole search\n    \n    for r in range(rows):\n        for c in range(cols):\n            # If it's a 0, not connected to the border, and not yet visited as part of a hole\n            if grid[r, c] == 0 and (r, c) not in border_connected_zeros and not visited_holes[r, c]:\n                current_hole_zeros = set()\n                boundary_fives = set()\n                hole_q = deque([(r, c)])\n                visited_holes[r, c] = True\n                is_valid_hole = True # Assume it's a hole unless proven otherwise\n\n                # Find all connected 0s for this potential hole region using BFS\n                while hole_q:\n                    hr, hc = hole_q.popleft()\n                    current_hole_zeros.add((hr, hc))\n\n                    # Check neighbors\n                    for nr, nc in _get_neighbors(hr, hc, rows, cols):\n                        neighbor_val = grid[nr, nc]\n                        # If neighbor is 0 and not visited/part of border region\n                        if neighbor_val == 0 and (nr, nc) not in border_connected_zeros and not visited_holes[nr, nc]:\n                             visited_holes[nr, nc] = True\n                             hole_q.append((nr, nc))\n                        # If neighbor is 5, add it to potential boundary\n                        elif neighbor_val == 5:\n                            boundary_fives.add((nr, nc))\n                        # If it reaches a border-connected 0, it's not an enclosed hole\n                        elif neighbor_val == 0 and (nr, nc) in border_connected_zeros:\n                           is_valid_hole = False # Should not happen based on initial check, but safeguard\n                           # We can potentially break early here if performance needed\n                           # break # Break inner neighbor loop\n                    # if not is_valid_hole: # Break outer hole_q loop\n                    #    break\n                        \n                if not is_valid_hole:\n                    continue # Skip to the next potential starting cell\n\n                # If we found a valid hole region, check its boundary condition\n                fill_this_hole = True\n                if not boundary_fives: # Hole with no boundary? Should not happen in valid grids.\n                    fill_this_hole = False\n                    \n                for br, bc in boundary_fives:\n                    has_external_zero_neighbor = False\n                    for nr, nc in _get_neighbors(br, bc, rows, cols):\n                        # Check if the neighbor is a 0 that is NOT part of the current hole\n                        if grid[nr, nc] == 0 and (nr, nc) not in current_hole_zeros:\n                            has_external_zero_neighbor = True\n                            break # Found an external 0 neighbor, this 5 is fine\n\n                    # If this boundary 5 *only* has neighbors that are 5s or internal 0s\n                    if not has_external_zero_neighbor:\n                        fill_this_hole = False # Found a 'thick' boundary point, do not fill\n                        break # No need to check other boundary 5s for this hole\n\n                # --- Step 3: Fill the hole if condition met ---\n                if fill_this_hole:\n                    for hr, hc in current_hole_zeros:\n                        output_grid[hr, hc] = 2\n\n    # Convert back to list of lists for the required output format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3944,
    "candidates_token_count": 2921,
    "total_token_count": 6865,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 26.004637,
  "retries": 1
}