{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport math\n\n\"\"\"\nTransforms an input grid based on the nearest non-zero input cell, with a column parity constraint.\n\n1.  Find all non-zero cells in the input grid, storing their value, row, and column.\n2.  Initialize an output grid of the same dimensions as the input, filled with zeros.\n3.  For each cell (r_out, c_out) in the output grid:\n    a. Calculate the Manhattan distance to every non-zero input cell (v, r_in, c_in).\n    b. Find the minimum Manhattan distance.\n    c. Identify all input cells that have this minimum distance.\n    d. Apply tie-breaking: Among the closest input cells, select the one with the smallest row index (r_in). If there's still a tie, select the one with the smallest column index (c_in). Let this winning input cell be (v*, r*_in, c*_in).\n    e. Check if the output cell's column index (c_out) has the same parity (even/odd) as the winning input cell's column index (c*_in).\n    f. If the parities match (c_out % 2 == c*_in % 2), set the output cell's value to v*. Otherwise, leave it as 0.\n4. Return the completed output grid.\n\"\"\"\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies the nearest neighbor transformation with column parity check.\n\n    Args:\n        input_grid: A 2D list of integers representing the input grid.\n\n    Returns:\n        A 2D list of integers representing the transformed output grid.\n    \"\"\"\n    rows = len(input_grid)\n    if rows == 0:\n        return []\n    cols = len(input_grid[0])\n    if cols == 0:\n        return [[] for _ in range(rows)]\n\n    # 1. Find all non-zero cells in the input grid\n    non_zero_cells = []\n    for r in range(rows):\n        for c in range(cols):\n            if input_grid[r][c] != 0:\n                non_zero_cells.append({'value': input_grid[r][c], 'row': r, 'col': c})\n\n    # Handle case with no non-zero input cells\n    if not non_zero_cells:\n        return [[0 for _ in range(cols)] for _ in range(rows)]\n\n    # 2. Initialize an output grid\n    output_grid = [[0 for _ in range(cols)] for _ in range(rows)]\n\n    # 3. Iterate through each cell in the output grid\n    for r_out in range(rows):\n        for c_out in range(cols):\n            min_dist = float('inf')\n            closest_cells = []\n\n            # 3a. Calculate Manhattan distance to every non-zero input cell\n            for cell in non_zero_cells:\n                r_in, c_in = cell['row'], cell['col']\n                dist = abs(r_out - r_in) + abs(c_out - c_in)\n\n                # 3b & 3c. Find minimum distance and identify closest cells\n                if dist < min_dist:\n                    min_dist = dist\n                    closest_cells = [cell]\n                elif dist == min_dist:\n                    closest_cells.append(cell)\n\n            # 3d. Apply tie-breaking (sort by row, then column)\n            # Sorting key uses a tuple: (row, column)\n            closest_cells.sort(key=lambda x: (x['row'], x['col']))\n            winning_cell = closest_cells[0]\n            v_win, r_win, c_win = winning_cell['value'], winning_cell['row'], winning_cell['col']\n\n            # 3e. Check column parity\n            if c_out % 2 == c_win % 2:\n                 # 3f. If parities match, assign value\n                 output_grid[r_out][c_out] = v_win\n            # else: leave as 0 (already initialized)\n\n\n    # 4. Return the completed output grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3666,
    "candidates_token_count": 1667,
    "total_token_count": 5333,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.517814,
  "retries": 1
}