{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\n\n\"\"\"\nTransforms a 2D grid based on the location of a '5' and adjacent '2's.\n\n1. Finds the location of the number 5 (anchor).\n2. Identifies all numbers 2 directly adjacent (horizontally or vertically) to the 5.\n3. Changes these adjacent 2s to 3s.\n4. Determines a projection direction based on the relative position of the adjacent 2s to the 5:\n    - 2s Left of 5 -> Project Up\n    - 2s Right of 5 -> Project Down\n    - 2s Above 5 -> Project Right\n    - 2s Below 5 -> Project Left\n5. Determines a projection anchor point based on the relative position:\n    - Left: Rightmost adjacent 2.\n    - Right: Leftmost adjacent 2.\n    - Above: The 5 itself.\n    - Below: Topmost adjacent 2.\n6. Projects a line of 2s, with length equal to the number of original adjacent 2s,\n   starting one step from the anchor point in the projection direction.\n\"\"\"\n\ndef find_value(grid: list[list[int]], value: int) -> tuple[int | None, int | None]:\n    \"\"\"Finds the first occurrence of a value in the grid.\"\"\"\n    num_rows = len(grid)\n    if num_rows == 0:\n        return None, None\n    num_cols = len(grid[0])\n    for r in range(num_rows):\n        for c in range(num_cols):\n            if grid[r][c] == value:\n                return r, c\n    return None, None\n\ndef find_adjacent_target_coords(grid: list[list[int]], r: int, c: int, target_value: int) -> list[tuple[int, int]]:\n    \"\"\"Finds coordinates of adjacent cells with the target value.\"\"\"\n    num_rows = len(grid)\n    num_cols = len(grid[0])\n    adjacent_coords = []\n    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]: # Right, Left, Down, Up\n        nr, nc = r + dr, c + dc\n        if 0 <= nr < num_rows and 0 <= nc < num_cols and grid[nr][nc] == target_value:\n            adjacent_coords.append((nr, nc))\n    return adjacent_coords\n\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies the transformation rule to the input grid.\n    \"\"\"\n    # Initialize output_grid as a deep copy of the input\n    output_grid = copy.deepcopy(input_grid)\n    num_rows = len(output_grid)\n    if num_rows == 0:\n        return output_grid\n    num_cols = len(output_grid[0])\n    if num_cols == 0:\n        return output_grid\n\n    # 1. Locate the anchor (5)\n    r5, c5 = find_value(input_grid, 5)\n    if r5 is None:\n        # No anchor found, return the original grid\n        return output_grid\n\n    # 2. Find adjacent targets (2s)\n    adjacent_2s = find_adjacent_target_coords(input_grid, r5, c5, 2)\n\n    # 3. If no adjacent 2s, return the grid unchanged\n    if not adjacent_2s:\n        return output_grid\n\n    # 4. Change adjacent 2s to 3s in the output grid\n    for r2, c2 in adjacent_2s:\n        output_grid[r2][c2] = 3\n\n    # 5. Determine relative direction and projection parameters\n    proj_anchor_r, proj_anchor_c = -1, -1\n    proj_dr, proj_dc = 0, 0\n    \n    # Check if adjacent 2s are horizontal or vertical relative to 5\n    first_r2, first_c2 = adjacent_2s[0]\n\n    if first_r2 == r5: # Horizontal adjacency\n        if first_c2 < c5: # 2s are LEFT of 5\n            proj_anchor_r, proj_anchor_c = r5, max(c for r, c in adjacent_2s) # Rightmost 2\n            proj_dr, proj_dc = -1, 0 # Project UP\n        else: # 2s are RIGHT of 5\n            proj_anchor_r, proj_anchor_c = r5, min(c for r, c in adjacent_2s) # Leftmost 2\n            proj_dr, proj_dc = 1, 0 # Project DOWN\n            \n    elif first_c2 == c5: # Vertical adjacency\n        if first_r2 < r5: # 2s are ABOVE 5\n            proj_anchor_r, proj_anchor_c = r5, c5 # Anchor is 5 itself\n            proj_dr, proj_dc = 0, 1 # Project RIGHT\n        else: # 2s are BELOW 5\n            proj_anchor_r, proj_anchor_c = min(r for r, c in adjacent_2s), c5 # Topmost 2\n            proj_dr, proj_dc = 0, -1 # Project LEFT\n\n    # 6. Execute projection\n    N = len(adjacent_2s)\n    for i in range(1, N + 1):\n        proj_r = proj_anchor_r + i * proj_dr\n        proj_c = proj_anchor_c + i * proj_dc\n\n        # Check boundaries before placing the 2\n        if 0 <= proj_r < num_rows and 0 <= proj_c < num_cols:\n            # Check if the target cell is currently 0 (based on examples, projection doesn't overwrite non-zero)\n            # Although not explicitly stated, let's assume projection only happens onto 0s\n            if output_grid[proj_r][proj_c] == 0:\n                 output_grid[proj_r][proj_c] = 2\n            # If we need to stop projection if it hits non-zero, uncomment below\n            # else:\n            #    break # Stop projection if the path is blocked by non-zero\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2551,
    "candidates_token_count": 2454,
    "total_token_count": 5005,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 21.108316,
  "retries": 1
}