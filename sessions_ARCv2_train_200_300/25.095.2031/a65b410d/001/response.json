{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\n\ndef find_segment(grid: list[list[int]]) -> tuple[int, int, int, int] | None:\n    \"\"\"\n    Finds the horizontal segment of '2's in the grid.\n\n    Args:\n        grid: The input grid.\n\n    Returns:\n        A tuple (row_index, start_col, end_col, length) if found, else None.\n    \"\"\"\n    rows = len(grid)\n    if rows == 0:\n        return None\n    cols = len(grid[0])\n    if cols == 0:\n        return None\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r][c] == 2:\n                # Found the start of a potential segment\n                start_col = c\n                end_col = c\n                # Scan right to find the end of the segment\n                while end_col + 1 < cols and grid[r][end_col + 1] == 2:\n                    end_col += 1\n                \n                # Check if the cell immediately to the left was not a 2 (ensures it's the start)\n                # This check prevents partial detection if the loop started mid-segment, \n                # though the outer loop structure makes this less critical.\n                if c == 0 or grid[r][c-1] != 2:\n                    length = end_col - start_col + 1\n                    return r, start_col, end_col, length\n    return None # No segment found\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Transforms the input grid based on the following rules:\n    1. Find the horizontal segment of 2s.\n    2. Keep the segment of 2s unchanged.\n    3. Fill cells below the segment with 1s in a decreasing triangular pattern starting from the segment's left edge. The number of 1s in row `r+k` is `L-k`, where `L` is the segment length and `k` is the distance below the segment row `r`.\n    4. Fill cells above the segment with 3s in an increasing triangular pattern starting from the segment's left edge. The number of 3s in row `r-k` is `L+k`, where `L` is the segment length and `k` is the distance above the segment row `r`.\n    \"\"\"\n    # Initialize output_grid as a deep copy of the input\n    output_grid = copy.deepcopy(input_grid)\n    rows = len(output_grid)\n    if rows == 0:\n        return output_grid\n    cols = len(output_grid[0])\n    if cols == 0:\n        return output_grid\n\n    # 1. Find the segment of 2s\n    segment_info = find_segment(input_grid)\n\n    if segment_info:\n        r, c_start, c_end, length = segment_info\n\n        # 3. Fill Below\n        # Iterate downwards from the row immediately below the segment\n        for row_idx in range(r + 1, rows):\n            dist_below = row_idx - r\n            num_fill = length - dist_below\n            if num_fill > 0:\n                # Iterate through columns from c_start up to c_start + num_fill - 1\n                for col_idx in range(c_start, c_start + num_fill):\n                    # Check column bounds\n                    if 0 <= col_idx < cols:\n                        output_grid[row_idx][col_idx] = 1\n            else:\n                # No more filling needed in subsequent rows below\n                break \n\n        # 4. Fill Above\n        # Iterate upwards from the row immediately above the segment\n        for row_idx in range(r - 1, -1, -1):\n            dist_above = r - row_idx\n            num_fill = length + dist_above\n            if num_fill > 0:\n                # Iterate through columns from c_start up to c_start + num_fill - 1\n                for col_idx in range(c_start, c_start + num_fill):\n                     # Check column bounds\n                    if 0 <= col_idx < cols:\n                         output_grid[row_idx][col_idx] = 3\n            # Continue checking rows above, as the fill area grows\n\n    # 2. The segment of 2s is already preserved due to the initial copy.\n    # 6. Return the modified output grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2593,
    "candidates_token_count": 1658,
    "total_token_count": 4251,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.366845,
  "retries": 1
}