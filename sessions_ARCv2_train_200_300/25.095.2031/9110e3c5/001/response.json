{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms a 7x7 digit grid into a predefined 3x3 grid (containing only 0s and 8s) based on the input grid's most frequent non-zero digit.\n\n1. Counts the frequency of each non-zero digit (1-9) in the 7x7 input grid.\n2. Identifies the non-zero digit with the highest frequency. In case of a tie, the smallest digit among the tied ones is chosen.\n3. Selects a specific 3x3 output pattern based on this dominant digit:\n   - If the dominant digit is 1, the pattern is [[0,0,8],[8,8,0],[0,8,0]].\n   - If the dominant digit is 3, the pattern is [[0,8,8],[0,8,0],[0,8,0]].\n   - If the dominant digit is 2, the pattern is [[0,0,0],[8,8,8],[0,0,0]].\n4. If no non-zero digits are found, or if the dominant digit is not 1, 2, or 3, a default 3x3 grid of all zeros is returned.\n\"\"\"\n\nfrom collections import Counter\nimport itertools\n\n# --- Helper Functions ---\n\ndef count_non_zero_frequencies(grid: list[list[int]]) -> Counter:\n    \"\"\"Counts the frequency of each non-zero digit in the grid.\"\"\"\n    # Flatten the grid into a single list of numbers\n    flat_list = list(itertools.chain.from_iterable(grid))\n    # Count all numbers\n    counts = Counter(flat_list)\n    # Remove the count for zero, if it exists\n    if 0 in counts:\n        del counts[0]\n    return counts\n\ndef find_dominant_digit(counts: Counter) -> int | None:\n    \"\"\"Finds the most frequent digit, breaking ties by choosing the smallest digit.\"\"\"\n    if not counts:\n        return None # No non-zero digits found\n\n    # Find the maximum frequency\n    max_freq = 0\n    for digit in counts:\n        if counts[digit] > max_freq:\n            max_freq = counts[digit]\n\n    # Find all digits with the maximum frequency\n    dominant_candidates = []\n    for digit in counts:\n        if counts[digit] == max_freq:\n            dominant_candidates.append(digit)\n\n    # Return the smallest digit among the candidates\n    return min(dominant_candidates)\n\n\n# --- Main Transformation Function ---\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies the transformation rule based on the most frequent non-zero digit.\n    \"\"\"\n\n    # Define the predefined output patterns\n    pattern_map = {\n        1: [[0, 0, 8], [8, 8, 0], [0, 8, 0]],\n        3: [[0, 8, 8], [0, 8, 0], [0, 8, 0]],\n        2: [[0, 0, 0], [8, 8, 8], [0, 0, 0]],\n    }\n    default_output = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]\n\n    # Calculate frequencies of non-zero digits\n    frequencies = count_non_zero_frequencies(input_grid)\n\n    # Find the dominant non-zero digit\n    dominant_digit = find_dominant_digit(frequencies)\n\n    # Select the output pattern based on the dominant digit\n    # If dominant_digit is None (no non-zeros) or not in the map, use default\n    output_grid = pattern_map.get(dominant_digit, default_output)\n\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2790,
    "candidates_token_count": 1044,
    "total_token_count": 3834,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.72302,
  "retries": 1
}