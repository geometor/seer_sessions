{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by splitting it vertically into two halves. The left half serves as a mask or frame, \nand the right half provides content keys. The unique non-zero values from the right half (content keys) are mapped \nto new values based on a rule determined by their relationship to all unique non-zero values in the input grid. \nSpecifically, if the index 0 is present among the indices of the right-half values within the sorted list of all \nnon-zero values, a 'Reverse' mapping is used. Otherwise, a 'Cyclic Shift' mapping is applied. The output grid is \ninitialized with the left half, and its zero cells are filled with the mapped values corresponding to the content keys \nfrom the right half.\n\"\"\"\n\nimport copy\n\ndef _find_unique_non_zeros(grid: list[list[int]]) -> list[int]:\n    \"\"\"Finds and sorts unique non-zero values in a grid.\"\"\"\n    non_zeros = set()\n    for row in grid:\n        for cell in row:\n            if cell != 0:\n                non_zeros.add(cell)\n    return sorted(list(non_zeros))\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies the described transformation rule to the input grid.\n    \"\"\"\n    # Handle empty input\n    if not input_grid or not input_grid[0]:\n        return []\n\n    num_rows = len(input_grid)\n    num_cols = len(input_grid[0])\n    mid_col = num_cols // 2\n\n    # Split the grid into left and right halves\n    left_grid = [row[:mid_col] for row in input_grid]\n    right_grid = [row[mid_col:] for row in input_grid]\n\n    # Find all unique non-zero values in the entire input grid\n    all_non_zeros_sorted = _find_unique_non_zeros(input_grid)\n\n    # Find unique non-zero values (content keys) in the right grid\n    content_keys_sorted = _find_unique_non_zeros(right_grid)\n\n    # If there are no content keys, the output is just the left grid\n    if not content_keys_sorted:\n        # Need a deep copy to avoid modifying the original input structure if it were passed directly\n        return copy.deepcopy(left_grid)\n\n    # Determine the indices of content keys within the list of all non-zeros\n    # Create a lookup map for faster index finding\n    all_non_zeros_map = {val: idx for idx, val in enumerate(all_non_zeros_sorted)}\n    indices = []\n    for key in content_keys_sorted:\n        if key in all_non_zeros_map:\n             indices.append(all_non_zeros_map[key])\n        # This case shouldn't happen if logic is correct, but added for robustness\n        # else: handle error or unexpected value\n\n    # Determine the mapping rule based on the presence of index 0\n    use_reverse_mapping = 0 in indices\n\n    # Create the value map based on the rule\n    value_map = {}\n    n_keys = len(content_keys_sorted)\n    if use_reverse_mapping:\n        # Reverse mapping\n        for i in range(n_keys):\n            value_map[content_keys_sorted[i]] = content_keys_sorted[n_keys - 1 - i]\n    else:\n        # Cyclic shift mapping\n        for i in range(n_keys):\n            value_map[content_keys_sorted[i]] = content_keys_sorted[(i + 1) % n_keys]\n\n    # Initialize the output grid as a deep copy of the left grid\n    output_grid = copy.deepcopy(left_grid)\n\n    # Iterate through the output grid and apply the mapping\n    for r in range(num_rows):\n        for c in range(mid_col):\n            # Check if the cell in the output grid (from left_grid) is 0\n            if output_grid[r][c] == 0:\n                # Get the corresponding content key from the right grid\n                content_key = right_grid[r][c]\n                # If the content key is non-zero (and thus in our map)\n                if content_key in value_map:\n                    # Replace the 0 in the output grid with the mapped value\n                    output_grid[r][c] = value_map[content_key]\n            # Otherwise (if output_grid[r][c] is not 0), leave it as part of the frame\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7243,
    "candidates_token_count": 1441,
    "total_token_count": 8684,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.30138,
  "retries": 1
}