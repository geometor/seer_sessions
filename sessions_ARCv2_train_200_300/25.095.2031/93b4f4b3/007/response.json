{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by splitting it vertically into two halves. The left half serves as a mask or frame, \nand the right half provides content keys. The unique non-zero values from the right half (content keys) are mapped \nto new values based on a rule determined by their relationship to all unique non-zero values in the input grid. \nSpecifically, if the smallest content key is also the smallest non-zero value in the entire input grid, \na 'Reverse' mapping (within the sorted content keys) is used. Otherwise, a 'Cyclic Shift' mapping (within the \nsorted content keys) is applied. The output grid is initialized with the left half, and its zero cells are filled \nwith the mapped values corresponding to the non-zero content keys from the right half. If a cell in the right half \ncorresponding to a zero cell in the left half is zero, the output cell remains zero.\n\"\"\"\n\nimport copy\n\n# Helper function to find unique non-zero values in a grid\ndef _find_unique_non_zeros(grid: list[list[int]]) -> list[int]:\n    \"\"\"Finds and sorts unique non-zero values in a grid.\"\"\"\n    non_zeros = set()\n    for row in grid:\n        for cell in row:\n            if cell != 0:\n                non_zeros.add(cell)\n    return sorted(list(non_zeros))\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies the described transformation rule to the input grid.\n    \"\"\"\n    # Handle empty input case\n    if not input_grid or not input_grid[0]:\n        return []\n\n    # Get dimensions\n    num_rows = len(input_grid)\n    num_cols = len(input_grid[0])\n    \n    # Ensure columns are even for splitting\n    if num_cols % 2 != 0:\n        # Or handle this error condition as appropriate for the task constraints\n        raise ValueError(\"Input grid must have an even number of columns.\")\n        \n    mid_col = num_cols // 2\n\n    # 1. Split the grid into left (mask) and right (content key) halves\n    left_grid = [row[:mid_col] for row in input_grid]\n    right_grid = [row[mid_col:] for row in input_grid]\n\n    # 2. Analyze: Find unique non-zero values globally and in the right grid\n    all_non_zeros_sorted = _find_unique_non_zeros(input_grid)\n    content_keys_sorted = _find_unique_non_zeros(right_grid)\n\n    # If there are no content keys in the right grid, the output is just the left grid\n    if not content_keys_sorted:\n        # Return a deep copy to avoid modifying potential external references to input_grid\n        return copy.deepcopy(left_grid)\n\n    # 3. Determine Map Rule: Check if the smallest content key matches the smallest overall non-zero\n    use_reverse_mapping = False\n    # Check only if both lists are non-empty\n    if content_keys_sorted and all_non_zeros_sorted:\n        if content_keys_sorted[0] == all_non_zeros_sorted[0]:\n            use_reverse_mapping = True\n\n    # 4. Build Map: Create the value map based on the determined rule\n    value_map = {}\n    n_keys = len(content_keys_sorted)\n    if use_reverse_mapping:\n        # Reverse mapping: key[i] maps to key[n-1-i]\n        for i in range(n_keys):\n            value_map[content_keys_sorted[i]] = content_keys_sorted[n_keys - 1 - i]\n    else:\n        # Cyclic Shift mapping: key[i] maps to key[(i+1) % n]\n        for i in range(n_keys):\n            value_map[content_keys_sorted[i]] = content_keys_sorted[(i + 1) % n_keys]\n\n    # 5. Apply: Initialize output grid and fill based on the map\n    # Initialize the output grid as a deep copy of the left grid\n    output_grid = copy.deepcopy(left_grid)\n\n    # Iterate through the output grid (which has the dimensions of the left grid)\n    for r in range(num_rows):\n        for c in range(mid_col):\n            # Check if the cell in the output grid (originally from left_grid) is 0 (needs filling)\n            if output_grid[r][c] == 0:\n                # Get the corresponding content key from the right grid\n                content_key = right_grid[r][c]\n                # If the content key is non-zero and exists in our map\n                if content_key in value_map:\n                     # Replace the 0 in the output grid with the mapped value\n                     output_grid[r][c] = value_map[content_key]\n                # Else if content_key is 0, output_grid[r][c] remains 0 (already initialized)\n\n            # Else (if output_grid[r][c] is not 0), it's part of the frame, leave it unchanged.\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 12351,
    "candidates_token_count": 1681,
    "total_token_count": 14032,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.842116,
  "retries": 1
}