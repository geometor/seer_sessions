{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport math\n\n\"\"\"\nScales a shape defined by non-zero elements (specifically value 4) within an input grid by a factor of 2, and crops the output to the scaled shape's bounding box.\n\n1.  Identify all cells containing the value 4 in the input grid.\n2.  Determine the minimum bounding box enclosing these cells.\n3.  Create an output grid whose dimensions are twice the height and width of the input bounding box, initialized with zeros.\n4.  For each input cell containing 4 within the bounding box, map it to a 2x2 block of 4s in the output grid, based on its relative position within the input bounding box.\n5.  Return the resulting output grid.\n\"\"\"\n\ndef find_shape_coords(grid: list[list[int]], target_value: int) -> list[tuple[int, int]]:\n    \"\"\"Finds the coordinates of all cells with the target value.\"\"\"\n    coords = []\n    for r, row in enumerate(grid):\n        for c, val in enumerate(row):\n            if val == target_value:\n                coords.append((r, c))\n    return coords\n\ndef calculate_bounding_box(coords: list[tuple[int, int]]) -> tuple[int, int, int, int]:\n    \"\"\"\n    Calculates the bounding box of the given coordinates.\n    Returns (min_row, min_col, height, width).\n    Returns (0, 0, 0, 0) if coords is empty.\n    \"\"\"\n    if not coords:\n        return 0, 0, 0, 0 # Or raise an error, depending on desired behavior for empty shapes\n\n    min_row = min(r for r, c in coords)\n    max_row = max(r for r, c in coords)\n    min_col = min(c for r, c in coords)\n    max_col = max(c for r, c in coords)\n\n    height = max_row - min_row + 1\n    width = max_col - min_col + 1\n\n    return min_row, min_col, height, width\n\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies the 2x scaling and cropping transformation to the input grid.\n    \"\"\"\n    shape_value = 4\n    background_value = 0\n    scale_factor = 2\n\n    # 1. Identify all cells containing the shape value (4).\n    shape_coords = find_shape_coords(input_grid, shape_value)\n\n    # Handle case where no shape is found\n    if not shape_coords:\n        return [] # Return an empty grid as per examples potentially implying this\n\n    # 2. Determine the minimum bounding box for the shape cells.\n    min_row, min_col, bb_height, bb_width = calculate_bounding_box(shape_coords)\n\n    # 3. Calculate output grid dimensions and initialize it with the background value.\n    out_height = bb_height * scale_factor\n    out_width = bb_width * scale_factor\n    output_grid = [[background_value for _ in range(out_width)] for _ in range(out_height)]\n\n    # 4. Iterate through the shape coordinates and place the scaled 2x2 blocks.\n    for r, c in shape_coords:\n        # Calculate relative coordinates within the input bounding box\n        rel_r = r - min_row\n        rel_c = c - min_col\n\n        # Calculate the top-left corner for the 2x2 block in the output grid\n        out_r_start = rel_r * scale_factor\n        out_c_start = rel_c * scale_factor\n\n        # 5. Fill the 2x2 block in the output grid with the shape value.\n        for i in range(scale_factor):\n            for j in range(scale_factor):\n                # Check bounds just in case, although logic should prevent out-of-bounds\n                if 0 <= out_r_start + i < out_height and 0 <= out_c_start + j < out_width:\n                     output_grid[out_r_start + i][out_c_start + j] = shape_value\n\n    # 6. Return the generated output grid.\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2434,
    "candidates_token_count": 1540,
    "total_token_count": 3974,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.90257,
  "retries": 1
}