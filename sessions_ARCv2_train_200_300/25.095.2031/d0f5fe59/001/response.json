{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom scipy.ndimage import label\n\n\"\"\"\nIdentifies connected components of the digit '8' in the input grid using 8-way connectivity. \nCounts the number of components (N).\nGenerates an NxN output grid where the main diagonal consists of '8's and all other elements are '0's.\n\"\"\"\n\ndef find_connected_components(grid: np.ndarray, target_value: int) -> int:\n    \"\"\"\n    Finds connected components of a specific value in a grid.\n\n    Args:\n        grid: The input NumPy array.\n        target_value: The value whose components are to be found.\n\n    Returns:\n        The number of distinct connected components found.\n    \"\"\"\n    # Create a binary mask where target_value is True (1) and others are False (0)\n    binary_mask = (grid == target_value)\n    \n    # Define the structure for 8-way connectivity (including diagonals)\n    # [[1,1,1],\n    #  [1,1,1],\n    #  [1,1,1]] allows connections horizontally, vertically, and diagonally.\n    structure = np.ones((3, 3), dtype=int) \n    \n    # Label the connected components in the binary mask\n    # labeled_array contains the grid with each component marked by a unique integer\n    # num_features is the total number of connected components found\n    labeled_array, num_features = label(binary_mask, structure=structure)\n    \n    return num_features\n\ndef generate_diagonal_matrix(size: int, diagonal_value: int, off_diagonal_value: int) -> list[list[int]]:\n    \"\"\"\n    Generates a square matrix with a specific value on the diagonal and another value elsewhere.\n\n    Args:\n        size: The dimension (N) of the square matrix (NxN).\n        diagonal_value: The value to place on the main diagonal.\n        off_diagonal_value: The value to place in off-diagonal positions.\n\n    Returns:\n        A list of lists representing the generated matrix.\n    \"\"\"\n    if size == 0:\n        return []\n    # Create an NxN array filled with the off-diagonal value\n    output_np = np.full((size, size), off_diagonal_value, dtype=int)\n    # Fill the main diagonal with the diagonal value\n    np.fill_diagonal(output_np, diagonal_value)\n    # Convert the NumPy array to a list of lists\n    return output_np.tolist()\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Transforms the input grid by finding connected components of '8's and \n    generating a diagonal matrix based on the component count.\n\n    Args:\n        input_grid: A list of lists representing the input 2D grid.\n\n    Returns:\n        A list of lists representing the output diagonal matrix.\n    \"\"\"\n    # Convert the input list of lists to a NumPy array for efficient processing\n    input_np = np.array(input_grid, dtype=int)\n\n    # Define the target value we are looking for\n    target_value = 8\n\n    # Find the number of connected components of the target value\n    num_components = find_connected_components(input_np, target_value)\n\n    # Define the values for the output matrix\n    diagonal_value = 8\n    off_diagonal_value = 0\n\n    # Generate the output grid based on the number of components\n    output_grid = generate_diagonal_matrix(num_components, diagonal_value, off_diagonal_value)\n\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1962,
    "candidates_token_count": 1373,
    "total_token_count": 3335,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.334983,
  "retries": 1
}