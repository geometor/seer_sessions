task_name: conditional_grid_transformation
data_type: grid_of_integers
dimensionality: conditional (1D row-wise or 2D column-wise)
objects:
  - name: input_grid
    properties:
      - elements: matrix_of_integers
      - dimensions: [rows, columns]
      - first_column: list_of_integers
      - last_column: list_of_integers
  - name: grid_row
    properties:
      - elements: list_of_integers
      - length: integer
      - first_element: integer
      - last_element: integer
  - name: grid_column
    properties:
      - elements: list_of_integers
      - length: integer
  - name: element
    properties:
      - value: integer
      - position: [row_index, col_index]
      - is_zero: boolean
relationships:
  - type: spatial
    between: elements
    details: arranged in rows and columns
conditions_for_action:
  - condition: first_column_is_constant_and_non_zero
    action: apply_left_shift_rule
  - condition: last_column_is_constant_and_non_zero
    action: apply_right_shift_rule
  - condition: otherwise
    action: apply_gravity_rule
actions:
  - name: apply_left_shift_rule # Rule 1
    inputs: input_grid
    outputs: output_grid
    process: For each row, preserve the first element, collect all other non-zero elements in their relative order, place them immediately after the first element, and pad the remaining positions with zeros to match original row length.
  - name: apply_right_shift_rule # Rule 3
    inputs: input_grid
    outputs: output_grid
    process: For each row, preserve the last element, collect all other non-zero elements (from index 0 to N-2) in their relative order, place them immediately before the last element, and pad the starting positions with zeros to match original row length.
  - name: apply_gravity_rule # Rule 2
    inputs: input_grid
    outputs: output_grid
    process: Initialize an output grid of the same dimensions with zeros. For each column index 'j', collect all non-zero elements from the input grid's column 'j' (top to bottom). Place these collected non-zero elements at the bottom of the output grid's column 'j', preserving their relative order, above the necessary zero padding.
constraints:
  - Output grid dimensions must match input grid dimensions.
  - Relative order of non-zero elements is preserved within the scope of the applied rule (within rows for shift rules, within columns for gravity).