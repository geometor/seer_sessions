{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\n\n\"\"\"\nTransforms an input grid based on the neighborhood of cells with value 5.\nA cell with value 5 changes to 2 if it has more than 5 non-zero neighbors (including diagonals).\nCells with value 0 remain 0.\n\"\"\"\n\ndef _is_valid(r, c, num_rows, num_cols):\n    \"\"\"Check if coordinates are within grid boundaries.\"\"\"\n    return 0 <= r < num_rows and 0 <= c < num_cols\n\ndef _count_nonzero_neighbors(grid: list[list[int]], r: int, c: int) -> int:\n    \"\"\"Counts the non-zero neighbors (including diagonals) for a given cell.\"\"\"\n    num_rows = len(grid)\n    num_cols = len(grid[0])\n    count = 0\n    # Define the 8 relative neighbor coordinates (dr, dc)\n    neighbor_offsets = [\n        (-1, -1), (-1, 0), (-1, 1),\n        ( 0, -1),          ( 0, 1),\n        ( 1, -1), ( 1, 0), ( 1, 1)\n    ]\n\n    # Iterate through all 8 neighbors\n    for dr, dc in neighbor_offsets:\n        nr, nc = r + dr, c + dc\n        # Check if the neighbor is within grid bounds\n        if _is_valid(nr, nc, num_rows, num_cols):\n            # Check if the neighbor's value is non-zero\n            if grid[nr][nc] != 0:\n                count += 1\n    return count\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies the transformation rule: change 5 to 2 if it has > 5 non-zero neighbors.\n    \"\"\"\n    # Get grid dimensions\n    num_rows = len(input_grid)\n    if num_rows == 0:\n        return []\n    num_cols = len(input_grid[0])\n    if num_cols == 0:\n        return [[] for _ in range(num_rows)]\n\n    # Initialize output_grid as a deep copy of the input to preserve original values\n    # during neighbor counting and only modify the necessary cells.\n    output_grid = copy.deepcopy(input_grid)\n\n    # Iterate through each cell of the input grid\n    for r in range(num_rows):\n        for c in range(num_cols):\n            # Get the value of the current cell in the *original* input grid\n            cell_value = input_grid[r][c]\n\n            # Only process cells with value 5\n            if cell_value == 5:\n                # Count non-zero neighbors in the *original* input grid\n                neighbor_count = _count_nonzero_neighbors(input_grid, r, c)\n\n                # Apply the transformation rule\n                if neighbor_count > 5:\n                    # Update the corresponding cell in the output grid\n                    output_grid[r][c] = 2\n            # If cell_value is 0, it remains 0 (already handled by deepcopy)\n            # If cell_value is 5 and neighbor_count <= 5, it remains 5 (already handled by deepcopy)\n\n    # Return the modified grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2120,
    "candidates_token_count": 1307,
    "total_token_count": 3427,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.609565,
  "retries": 1
}