{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nUpscales an input 2D integer grid. The scaling factor (S) is determined by the\ncount of non-zero elements in the input grid. Each cell (r, c) in the input\ngrid with value V is expanded into an S x S block in the output grid, starting\nat row r*S and column c*S, where all cells within that block are assigned the\nvalue V. If the scaling factor S is 0 (input grid contains only zeros), an\nempty grid ([]) is returned.\n\"\"\"\n\n# No external imports needed for this implementation\n\ndef _calculate_scaling_factor(grid: list[list[int]]) -> int:\n    \"\"\"\n    Helper function to count non-zero elements in the grid.\n    Args:\n        grid: The input 2D list of integers.\n    Returns:\n        The count of non-zero elements.\n    \"\"\"\n    count = 0\n    # Iterate through each row in the grid\n    for row in grid:\n        # Iterate through each cell value in the row\n        for cell in row:\n            # Increment count if the cell value is not zero\n            if cell != 0:\n                count += 1\n    return count\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Performs the grid upscaling transformation based on the count of non-zero\n    elements.\n\n    Args:\n        input_grid: A list of lists representing the input 2D integer grid.\n\n    Returns:\n        A list of lists representing the transformed (upscaled) 2D integer grid,\n        or an empty list if the scaling factor is 0.\n    \"\"\"\n    # --- Input Validation ---\n    # Handle empty input grid case gracefully. If the grid is empty or rows are empty, return empty list.\n    if not input_grid or not input_grid[0]:\n        return []\n\n    # --- Determine Scaling Factor ---\n    # Count the number of non-zero cells in the input grid. This determines\n    # the side length (S) of the square blocks in the output grid.\n    scaling_factor = _calculate_scaling_factor(input_grid)\n\n    # --- Handle Zero Scaling Factor ---\n    # If scaling factor is 0 (meaning the input grid contains only zeros),\n    # the conceptual output grid has dimensions (rows*0) x (cols*0) = 0x0.\n    # We represent this as an empty list.\n    if scaling_factor == 0:\n        return []\n\n    # --- Calculate Dimensions ---\n    # Get the dimensions (number of rows and columns) of the input grid.\n    input_rows = len(input_grid)\n    input_cols = len(input_grid[0])\n\n    # Calculate the dimensions of the output grid by multiplying input dimensions\n    # by the scaling factor.\n    output_rows = input_rows * scaling_factor\n    output_cols = input_cols * scaling_factor\n\n    # --- Initialize Output Grid ---\n    # Create the output grid structure with the calculated dimensions.\n    # Initialize all cells to 0. This is a default value; cells will be\n    # overwritten with values from the input grid during the transformation.\n    # Using nested list comprehensions for efficient initialization.\n    output_grid = [[0 for _ in range(output_cols)] for _ in range(output_rows)]\n\n    # --- Perform Transformation ---\n    # Iterate through each cell of the input grid using its row (r) and column (c) index.\n    for r in range(input_rows):\n        for c in range(input_cols):\n            # Get the value V from the current input cell (r, c).\n            value = input_grid[r][c]\n\n            # Calculate the starting row and column index in the output grid\n            # for the top-left corner of the block corresponding to input cell (r, c).\n            start_row = r * scaling_factor\n            start_col = c * scaling_factor\n\n            # Fill the S x S block in the output grid with the value V.\n            # Iterate through the rows of the target block in the output grid.\n            for out_r in range(start_row, start_row + scaling_factor):\n                # Iterate through the columns of the target block in the output grid.\n                for out_c in range(start_col, start_col + scaling_factor):\n                    # Assign the value V to the current cell (out_r, out_c) in the output block.\n                    output_grid[out_r][out_c] = value\n\n    # --- Return Result ---\n    # Return the fully populated and transformed output grid.\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2342,
    "candidates_token_count": 3526,
    "total_token_count": 5868,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 30.629688,
  "retries": 1
}