{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport collections\n\n\"\"\"\nTransforms a 2D grid containing blocks of 5s against a background of 0s.\nEach block of 5s is replaced by a pattern of 1s, 2s, and 4s based on cell position:\n- 1 for corners of the block.\n- 4 for edges of the block (excluding corners).\n- 2 for the interior of the block.\n- 0s remain unchanged.\nThe transformation identifies each distinct rectangular block of 5s and applies the pattern locally.\n\"\"\"\n\ndef find_blocks(grid: list[list[int]]) -> list[tuple[int, int, int, int]]:\n    \"\"\"\n    Identifies rectangular blocks of 5s in the input grid.\n\n    Args:\n        grid: The input 2D list of integers.\n\n    Returns:\n        A list of tuples, where each tuple represents a block's boundaries\n        as (min_row, max_row, min_col, max_col).\n    \"\"\"\n    rows = len(grid)\n    cols = len(grid[0])\n    visited = set()\n    blocks = []\n\n    for r in range(rows):\n        for c in range(cols):\n            # If we find a '5' that hasn't been visited, start a search for its block\n            if grid[r][c] == 5 and (r, c) not in visited:\n                current_block_cells = set()\n                q = collections.deque([(r, c)])\n                visited.add((r, c))\n                min_r, max_r = r, r\n                min_c, max_c = c, c\n\n                # Use Breadth-First Search (BFS) to find all connected '5's\n                while q:\n                    curr_r, curr_c = q.popleft()\n                    current_block_cells.add((curr_r, curr_c))\n                    min_r = min(min_r, curr_r)\n                    max_r = max(max_r, curr_r)\n                    min_c = min(min_c, curr_c)\n                    max_c = max(max_c, curr_c)\n\n                    # Check neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = curr_r + dr, curr_c + dc\n                        # Check bounds, if it's a '5', and if not visited\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr][nc] == 5 and (nr, nc) not in visited:\n                            visited.add((nr, nc))\n                            q.append((nr, nc))\n                \n                # Assuming blocks are perfectly rectangular as per examples,\n                # store the calculated boundaries.\n                blocks.append((min_r, max_r, min_c, max_c))\n                \n                # Optimization: Mark all cells within the determined boundary as visited\n                # This handles cases where BFS might finish before exploring all cells \n                # *if* we didn't assume perfect rectangles, but is good practice anyway.\n                # However, the initial BFS *should* find all connected cells. Let's ensure\n                # the visited set correctly covers the block found by BFS.\n                # The BFS naturally handles connectivity. No extra marking needed here if\n                # the blocks are truly contiguous '5's.\n\n    return blocks\n\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid: The 2D list representing the input grid.\n\n    Returns:\n        A 2D list representing the transformed output grid.\n    \"\"\"\n    rows = len(input_grid)\n    cols = len(input_grid[0])\n\n    # Initialize output_grid with zeros\n    output_grid = [[0 for _ in range(cols)] for _ in range(rows)]\n\n    # Find all the rectangular blocks of 5s\n    blocks = find_blocks(input_grid)\n\n    # Process each identified block\n    for min_r, max_r, min_c, max_c in blocks:\n        # Iterate through each cell within the block's boundaries\n        for r in range(min_r, max_r + 1):\n            for c in range(min_c, max_c + 1):\n                 # Ensure we only modify cells that were originally '5'\n                 # (This check might be redundant if find_blocks is perfect,\n                 # but adds robustness)\n                if input_grid[r][c] == 5:\n                    # Check if the cell is a corner\n                    is_corner = (r == min_r or r == max_r) and \\\n                                (c == min_c or c == max_c)\n                    # Check if the cell is on an edge\n                    is_edge = (r == min_r or r == max_r or\n                               c == min_c or c == max_c)\n\n                    # Assign the output value based on position\n                    if is_corner:\n                        output_grid[r][c] = 1\n                    elif is_edge: # It's an edge but not a corner\n                        output_grid[r][c] = 4\n                    else: # It must be an interior cell\n                        output_grid[r][c] = 2\n\n    # Background zeros are already in place from initialization\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1975,
    "candidates_token_count": 2582,
    "total_token_count": 4557,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 23.851215,
  "retries": 1
}