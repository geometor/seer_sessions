{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\n\n\"\"\"\nProcesses a 2D grid of integers (0, 3, 8). \nFor each row independently, it identifies contiguous blocks of the number 3.\nEach block of 3s is moved as far left as possible within its row.\nThe movement stops if the block hits the beginning of the row (column 0) or if the cell immediately to the left of the block's intended new position contains a non-zero value (specifically 8, acting as a barrier).\nWhen a block moves, its original position is filled with 0s, and the destination cells (which must have been 0s) are filled with 3s.\nThe processing of blocks within a row occurs from right to left.\n\"\"\"\n\ndef find_block_start(row: list[int], end_index: int) -> int:\n    \"\"\"Finds the starting index of a contiguous block of 3s ending at end_index.\"\"\"\n    start_index = end_index\n    while start_index > 0 and row[start_index - 1] == 3:\n        start_index -= 1\n    return start_index\n\ndef find_destination(row: list[int], block_start_index: int) -> int:\n    \"\"\"Finds the leftmost possible starting column for the block.\"\"\"\n    dest_index = block_start_index\n    check_index = block_start_index - 1\n    while check_index >= 0:\n        # If the cell to the left is not 0, the block stops just after it.\n        if row[check_index] != 0:\n            dest_index = check_index + 1\n            break\n        # If the cell to the left is 0, the block can potentially move there.\n        dest_index = check_index\n        check_index -= 1\n    # If the loop finishes without finding a barrier, the destination is column 0.\n    return dest_index\n\ndef process_row(row: list[int]) -> list[int]:\n    \"\"\"Applies the block moving transformation to a single row.\"\"\"\n    output_row = list(row) # Work on a copy\n    width = len(output_row)\n    j = width - 1 # Start scanning from the right\n\n    while j >= 0:\n        # Check if the current cell is the end of a block of 3s\n        if output_row[j] == 3:\n            # Find the start of this block\n            start_col = find_block_start(output_row, j)\n            block_length = j - start_col + 1\n\n            # Determine where this block should move to\n            dest_col = find_destination(output_row, start_col)\n\n            # If the block needs to move\n            if dest_col != start_col:\n                # Clear the original position\n                for i in range(start_col, start_col + block_length):\n                    output_row[i] = 0\n                # Place the block at the new destination\n                for i in range(dest_col, dest_col + block_length):\n                    output_row[i] = 3\n\n            # Move the scan index to the left of the processed block\n            j = start_col - 1\n        else:\n            # Move to the next cell to the left\n            j -= 1\n            \n    return output_row\n\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Transforms the input grid by moving blocks of 3s leftwards in each row\n    until they hit a barrier (8) or the start of the row.\n    \"\"\"\n    # Initialize output_grid as a deep copy to avoid modifying the input directly\n    # Although process_row works on copies, this ensures rows not needing processing are still new objects.\n    output_grid = []\n\n    # Iterate through each row of the input grid\n    for row in input_grid:\n        # Process the row to move the blocks of 3s\n        processed_row = process_row(row)\n        # Add the processed row to the output grid\n        output_grid.append(processed_row)\n\n    # Return the completely transformed grid\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2433,
    "candidates_token_count": 2236,
    "total_token_count": 4669,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 21.133529,
  "retries": 1
}