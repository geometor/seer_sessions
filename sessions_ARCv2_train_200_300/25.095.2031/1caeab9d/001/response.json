{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport math\nimport statistics\nfrom collections import defaultdict\n\n\"\"\"\nIdentifies contiguous rectangular blocks of height 2 with the same non-zero color in the input grid.\nDetermines the horizontal placement (minimum column index of any block) and vertical placement (based on grid height and median starting row of blocks) for the output.\nRearranges the identified blocks horizontally adjacent to each other in the output grid at the determined location, sorted by their original horizontal position (leftmost column).\nThe output grid has the same dimensions as the input grid, with all other cells set to 0.\n\nDetailed Vertical Placement Logic:\n1. Find the starting row index (top row) for each distinct color block (height 2) in the input.\n2. Let H be the grid height.\n3. If H >= 10, the target top row (r_target) for the output strip is floor(H/2).\n4. If H < 10:\n    a. Get the list of starting row indices of all blocks.\n    b. Find the median value of these starting row indices. Use median_low (the lower of the two middle values if the count is even) to ensure the median corresponds to an actual starting row.\n    c. The target top row (r_target) is this median starting row value.\n5. The output strip occupies rows r_target and r_target + 1.\n\"\"\"\n\ndef find_blocks(grid: np.ndarray) -> list[dict]:\n    \"\"\"\n    Finds all contiguous rectangular blocks of height 2 with the same non-zero color.\n\n    Args:\n        grid: A numpy array representing the input grid.\n\n    Returns:\n        A list of dictionaries, where each dictionary represents a block\n        with keys: 'color', 'r', 'c', 'w', 'h'.\n    \"\"\"\n    H, W = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    blocks = []\n\n    for r in range(H - 1): # Iterate rows up to H-2 (inclusive) for blocks of height 2\n        for c in range(W): # Iterate columns\n            # Check for the start of a potential block: non-zero, not visited, and cell below has same color\n            if grid[r, c] > 0 and not visited[r, c] and grid[r + 1, c] == grid[r, c]:\n                color = grid[r, c]\n                \n                # Found the top-left corner (r, c) of a block. Determine its width.\n                width = 0\n                for c_offset in range(W - c):\n                    current_c = c + c_offset\n                    # Check if the block continues horizontally in both rows\n                    if (grid[r, current_c] == color and not visited[r, current_c] and\n                        grid[r + 1, current_c] == color and not visited[r+1, current_c]):\n                        width += 1\n                        # Mark cells as visited\n                        visited[r, current_c] = True\n                        visited[r + 1, current_c] = True\n                    else:\n                        break # End of the block horizontally\n\n                # If a valid block was found (width > 0), add it to the list\n                if width > 0:\n                    blocks.append({'color': color, 'r': r, 'c': c, 'w': width, 'h': 2})\n            \n            # Mark the cell as visited even if it wasn't the start of a 2-high block\n            # This prevents recounting or partial block detection later\n            # Note: This might mark cells that are part of a block found starting from a previous column,\n            # but the visited check at the start of the loop handles this correctly.\n            # We only need to ensure single non-zero cells not part of any block are eventually marked.\n            elif grid[r,c] > 0 and not visited[r,c]:\n                 visited[r, c] = True\n\n\n    # Ensure any remaining unvisited non-zero cells in the last row are marked.\n    # This is mostly for completeness, as valid blocks are height 2 and detected above.\n    for c in range(W):\n        if grid[H - 1, c] > 0 and not visited[H - 1, c]:\n             visited[H - 1, c] = True\n\n    return blocks\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Transforms the input grid by finding 2-row high blocks of color,\n    and rearranging them horizontally in the middle of the grid.\n\n    Args:\n        input_grid: A list of lists representing the input grid.\n\n    Returns:\n        A list of lists representing the transformed output grid.\n    \"\"\"\n    # Convert input list of lists to a numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    H, W = input_np.shape\n\n    # Initialize output grid with zeros (background color)\n    output_grid = np.zeros_like(input_np)\n\n    # --- Identify Blocks ---\n    # Find all the 2-row high blocks of color in the input grid\n    blocks = find_blocks(input_np)\n\n    # If no blocks are found, return the empty output grid\n    if not blocks:\n        return output_grid.tolist()\n\n    # --- Determine Horizontal Order and Start Position ---\n    # Sort the blocks based on their starting column index (left-to-right)\n    blocks.sort(key=lambda b: b['c'])\n    # The target starting column is the minimum column index of the first block\n    c_min = blocks[0]['c']\n\n    # --- Determine Vertical Position ---\n    # Get the starting row indices of all found blocks\n    start_rows = [b['r'] for b in blocks]\n\n    # Determine the target top row (r_target) based on grid height\n    if H >= 10:\n        # For taller grids, place the combined block starting at the middle row (floor division)\n        r_target = H // 2\n    else:\n        # For shorter grids, find the median starting row value among the blocks\n        # Use median_low to handle cases with an even number of blocks correctly,\n        # ensuring the result is one of the actual starting rows.\n        sorted_start_rows = sorted(start_rows)\n        median_row_value = statistics.median_low(sorted_start_rows)\n        r_target = median_row_value\n\n    # --- Place Blocks in Output Grid ---\n    # Initialize the current column position for placing blocks\n    current_c = c_min\n    # Iterate through the sorted blocks\n    for block in blocks:\n        color = block['color']\n        w = block['w']\n        # Define the horizontal slice for the current block\n        col_slice = slice(current_c, current_c + w)\n        \n        # Copy the block's color into the output grid at the target rows\n        # The block height is always 2\n        output_grid[r_target, col_slice] = color\n        output_grid[r_target + 1, col_slice] = color\n        \n        # Update the current column position for the next block\n        current_c += w\n\n    # Convert the final numpy array back to a list of lists before returning\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2368,
    "candidates_token_count": 4432,
    "total_token_count": 6800,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 41.231381,
  "retries": 1
}