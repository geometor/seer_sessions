task_description: Combine three 4x4 blocks from a 4x14 input grid into a single 4x4 output grid based on a priority rule.
grid_dimensions:
  input:
    rows: 4
    columns: 14
  output:
    rows: 4
    columns: 4
input_elements:
  - type: grid
    data_type: integer
    range: 0-9
output_elements:
  - type: grid
    data_type: integer
    range: 0-9
input_structure:
  - name: Block A
    location: columns 0-3
    dimensions: 4x4
  - name: Delimiter 1
    location: column 4
    value: constant(2)
  - name: Block B
    location: columns 5-8
    dimensions: 4x4
  - name: Delimiter 2
    location: column 9
    value: constant(2)
  - name: Block C
    location: columns 10-13
    dimensions: 4x4
transformation_logic:
  - action: partitioning
    input: input grid
    delimiters: columns 4 and 9
    outputs: Block A, Block B, Block C
  - action: combination
    inputs: Block A, Block B, Block C
    output: output grid
    rule: For each cell (r, c):
            output[r, c] = BlockA[r, c] if BlockA[r, c] != 0
                           else BlockB[r, c] if BlockB[r, c] != 0
                           else BlockC[r, c]
    priority: Block A > Block B > Block C (for non-zero values)
relationships:
  - The output grid's dimensions match the dimensions of the identified input blocks (A, B, C).
  - Each cell in the output grid corresponds directly to cells at the same row/column index within input blocks A, B, and C.
  - Delimiter columns (4 and 9) are ignored in the final output generation.