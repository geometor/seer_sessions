{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\n\n\"\"\"\nSimulates gravity on elements marked '4' within a grid.\nThe grid contains 0s (empty space), 4s (movable objects), and a single horizontal row of 2s (impassable boundary).\nObjects (4s) fall downwards within their respective columns until they land on the row immediately above the boundary (2s) or immediately above another settled 4 in the same column.\nThe boundary row remains static. The process happens independently for each column.\n\"\"\"\n\ndef find_boundary_row(grid: list[list[int]]) -> int:\n    \"\"\"Finds the index of the row consisting entirely of 2s.\"\"\"\n    num_rows = len(grid)\n    num_cols = len(grid[0]) if num_rows > 0 else 0\n    for r in range(num_rows):\n        if all(grid[r][c] == 2 for c in range(num_cols)):\n            return r\n    return -1 # Should not happen based on problem description, but good practice\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies gravity to '4' elements in the grid, making them fall\n    towards a boundary row of '2's.\n\n    Args:\n        input_grid: A list of lists representing the input grid.\n\n    Returns:\n        A list of lists representing the transformed grid with '4's settled.\n    \"\"\"\n    # Handle empty grid case\n    if not input_grid or not input_grid[0]:\n        return []\n\n    num_rows = len(input_grid)\n    num_cols = len(input_grid[0])\n\n    # Initialize output_grid as a deep copy of the input\n    output_grid = copy.deepcopy(input_grid)\n\n    # Find the boundary row (row of 2s)\n    boundary_row_idx = find_boundary_row(output_grid)\n\n    # If no boundary row is found, return the original grid (or handle as error)\n    if boundary_row_idx == -1:\n        # This case implies invalid input according to the examples\n        print(\"Warning: Boundary row (all 2s) not found.\")\n        return output_grid \n        \n    # Iterate through each column independently\n    for c in range(num_cols):\n        # Count the number of '4's in this column above the boundary\n        fours_count = 0\n        for r in range(boundary_row_idx): # Iterate rows above the boundary\n            if output_grid[r][c] == 4:\n                fours_count += 1\n                # Clear the original position of the 4 in the output grid\n                output_grid[r][c] = 0\n\n        # Place the counted '4's starting from the row just above the boundary\n        # and moving upwards\n        landing_row = boundary_row_idx - 1\n        for _ in range(fours_count):\n            # Ensure we don't try to place a 4 outside the grid bounds (above row 0)\n            # or overwrite the boundary itself (though the loop range prevents this)\n            if landing_row >= 0:\n                output_grid[landing_row][c] = 4\n                landing_row -= 1 # Move the next landing spot one row up\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2388,
    "candidates_token_count": 1467,
    "total_token_count": 3855,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.456008,
  "retries": 1
}