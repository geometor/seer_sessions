{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\n\n\"\"\"\nProcesses a 2D grid of digits row by row. \nIf a row contains exactly two non-zero digits, and these digits form the pair {1, 8} or {4, 7}, \nthe rightmost of these two digits is moved to the position immediately to the right of the leftmost digit. \nThe original position of the moved digit becomes 0. \nRows not meeting these conditions remain unchanged.\n\"\"\"\n\ndef find_non_zeros(row: list[int]) -> list[tuple[int, int]]:\n    \"\"\"\n    Finds non-zero digits and their indices in a row.\n    \n    Args:\n        row: A list of integers representing a grid row.\n        \n    Returns:\n        A list of tuples, where each tuple is (value, index) for a non-zero digit.\n    \"\"\"\n    non_zeros = []\n    for index, value in enumerate(row):\n        if value != 0:\n            non_zeros.append((value, index))\n    return non_zeros\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid: A list of lists of integers representing the input grid.\n\n    Returns:\n        A list of lists of integers representing the transformed grid.\n    \"\"\"\n    # Initialize output_grid as a deep copy to avoid modifying the input directly\n    output_grid = copy.deepcopy(input_grid)\n\n    # Iterate through each row of the grid\n    for r_idx, row in enumerate(output_grid):\n        \n        # Find all non-zero digits and their original column indices in the current row\n        non_zero_elements = find_non_zeros(row)\n        \n        # Check if the row contains exactly two non-zero digits\n        if len(non_zero_elements) == 2:\n            # Extract the values and indices\n            val1, idx1 = non_zero_elements[0]\n            val2, idx2 = non_zero_elements[1]\n            \n            # Determine the set of values\n            value_set = {val1, val2}\n            \n            # Check if the set of values matches the required pairs {1, 8} or {4, 7}\n            if value_set == {1, 8} or value_set == {4, 7}:\n                # Identify the leftmost and rightmost non-zero elements\n                # Indices are already sorted as find_non_zeros iterates left-to-right\n                left_val, c_left = non_zero_elements[0]\n                right_val, c_right = non_zero_elements[1]\n\n                # Perform the move:\n                # 1. Place the rightmost value immediately to the right of the leftmost value's original position\n                output_grid[r_idx][c_left + 1] = right_val\n                # 2. Set the original position of the rightmost value to 0\n                output_grid[r_idx][c_right] = 0\n                \n        # If conditions (count != 2 or pair not matched) are not met, the row remains unchanged (already copied)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2557,
    "candidates_token_count": 1259,
    "total_token_count": 3816,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.646297,
  "retries": 1
}