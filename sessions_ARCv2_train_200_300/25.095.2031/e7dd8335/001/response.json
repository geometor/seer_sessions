{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by changing the value of cells from 1 to 2 if they belong to the lower half of the vertical extent of the shape formed by all 1s.\n\n1.  Initialize the output grid as a copy of the input grid.\n2.  Identify all row indices in the input grid that contain at least one cell with the value `1`.\n3.  If no rows contain `1`, return the copied grid.\n4.  Determine the minimum (`min_row`) and maximum (`max_row`) row indices of the shape.\n5.  Calculate the vertical height of the shape: `height = max_row - min_row + 1`.\n6.  Calculate the midpoint row index: `midpoint_row = min_row + (height // 2)`. Note: Integer division ensures the lower half includes the middle row if the height is odd.\n7.  Iterate through each cell of the input grid.\n8.  If a cell's value is `1` and its row index is greater than or equal to `midpoint_row`, change the corresponding cell's value in the output grid to `2`.\n9.  Return the modified output grid.\n\"\"\"\n\nimport copy\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies the transformation rule to the input grid.\n    \"\"\"\n    # Ensure the input is not empty\n    if not input_grid or not input_grid[0]:\n        return []\n\n    rows = len(input_grid)\n    cols = len(input_grid[0])\n\n    # 1. Initialize the output grid as a deep copy of the input grid.\n    output_grid = copy.deepcopy(input_grid)\n\n    # 2. Identify all row indices containing at least one '1'.\n    shape_rows = []\n    for r in range(rows):\n        if 1 in input_grid[r]:\n            shape_rows.append(r)\n\n    # 3. If no '1's are found, return the original grid copy.\n    if not shape_rows:\n        return output_grid\n\n    # 4. Determine the minimum and maximum row indices of the shape.\n    min_row = min(shape_rows)\n    max_row = max(shape_rows)\n\n    # 5. Calculate the vertical height of the shape.\n    height = max_row - min_row + 1\n\n    # 6. Calculate the midpoint row index.\n    # Cells at or below this row index are considered in the lower half.\n    midpoint_row = min_row + (height // 2)\n\n    # 7. Iterate through each cell of the input grid.\n    for r in range(rows):\n        for c in range(cols):\n            # 8. Check if the cell value is 1 and its row is in the lower half.\n            if input_grid[r][c] == 1 and r >= midpoint_row:\n                # 9. Update the value in the output grid to 2.\n                output_grid[r][c] = 2\n\n    # 10. Return the final output grid.\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2273,
    "candidates_token_count": 967,
    "total_token_count": 3240,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 8.912471,
  "retries": 1
}