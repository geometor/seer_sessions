{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nScan the input grid to find the row and column indices of all cells containing the digit '5'.\nFind the minimum and maximum row index among all '5' cells found (min_row_5, max_row_5).\nFind the minimum and maximum column index among all '5' cells found (min_col_5, max_col_5).\nDetermine the row range for the output grid by taking the rows from min_row_5 - 1 up to and including max_row_5 + 1.\nDetermine the column range for the output grid by taking the columns from min_col_5 up to and including max_col_5.\nCreate the output grid by extracting the portion of the input grid defined by the calculated row and column ranges.\n\"\"\"\n\nimport numpy as np\n\ndef find_value_indices(grid: np.ndarray, value: int) -> tuple[np.ndarray, np.ndarray]:\n    \"\"\"Finds the row and column indices of all occurrences of a specific value in the grid.\"\"\"\n    rows, cols = np.where(grid == value)\n    return rows, cols\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Extracts a subgrid from the input grid based on the bounding box of '5' digits,\n    extended by one row above and one row below.\n    \"\"\"\n    # Convert input list of lists to a numpy array for efficient processing\n    input_np = np.array(input_grid, dtype=int)\n\n    # Find the locations of all '5's\n    rows_5, cols_5 = find_value_indices(input_np, 5)\n\n    # Handle the case where no '5's are found (though unlikely based on examples)\n    if rows_5.size == 0:\n        return [] # Or perhaps return the original grid or raise an error\n\n    # Determine the bounding box of the '5's\n    min_row_5 = np.min(rows_5)\n    max_row_5 = np.max(rows_5)\n    min_col_5 = np.min(cols_5)\n    max_col_5 = np.max(cols_5)\n\n    # Define the output grid boundaries\n    # Extend rows by 1 above and 1 below the '5's bounding box\n    # Ensure row indices stay within the grid bounds (0 to num_rows - 1)\n    num_rows, num_cols = input_np.shape\n    output_start_row = max(0, min_row_5 - 1)\n    output_end_row = min(num_rows - 1, max_row_5 + 1)\n\n    # Columns range from the min column of '5's to the max column of '5's\n    output_start_col = min_col_5\n    output_end_col = max_col_5\n\n    # Extract the subgrid using numpy slicing\n    # Note: Slicing indices are exclusive for the end index, so add 1\n    output_subgrid_np = input_np[output_start_row : output_end_row + 1, output_start_col : output_end_col + 1]\n\n    # Convert the resulting numpy array back to a list of lists\n    output_grid = output_subgrid_np.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2142,
    "candidates_token_count": 1147,
    "total_token_count": 3289,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.746392,
  "retries": 1
}