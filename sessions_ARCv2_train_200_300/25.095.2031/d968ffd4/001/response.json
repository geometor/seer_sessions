{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport collections\nimport math\nfrom copy import deepcopy\n\ndef find_background(grid: list[list[int]]) -> int:\n    \"\"\"Finds the most frequent color in the grid, assuming it's the background.\"\"\"\n    counts = collections.Counter()\n    for r in range(len(grid)):\n        for c in range(len(grid[0])):\n            counts[grid[r][c]] += 1\n    if not counts:\n        return -1 # Or raise error for empty grid\n    # Return the most common element\n    return counts.most_common(1)[0][0]\n\ndef find_objects(grid: list[list[int]], background_color: int) -> list[tuple[int, set[tuple[int, int]]]]:\n    \"\"\"Finds connected regions of non-background colors using BFS.\"\"\"\n    rows, cols = len(grid), len(grid[0])\n    visited = set()\n    objects = []\n    \n    for r in range(rows):\n        for c in range(cols):\n            if grid[r][c] != background_color and (r, c) not in visited:\n                obj_color = grid[r][c]\n                obj_coords = set()\n                queue = collections.deque([(r, c)])\n                visited.add((r, c))\n                \n                while queue:\n                    row, col = queue.popleft()\n                    obj_coords.add((row, col))\n                    \n                    # Check neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           (nr, nc) not in visited and \\\n                           grid[nr][nc] == obj_color:\n                            visited.add((nr, nc))\n                            queue.append((nr, nc))\n                            \n                objects.append((obj_color, obj_coords))\n                \n    return objects\n\ndef get_bounding_box(coordinates: set[tuple[int, int]]) -> tuple[int, int, int, int]:\n    \"\"\"Calculates the bounding box (min_row, max_row, min_col, max_col) for a set of coordinates.\"\"\"\n    if not coordinates:\n        return (-1, -1, -1, -1)\n    min_r = min(r for r, c in coordinates)\n    max_r = max(r for r, c in coordinates)\n    min_c = min(c for r, c in coordinates)\n    max_c = max(c for r, c in coordinates)\n    return min_r, max_r, min_c, max_c\n\n\"\"\"\nTransforms a 2D grid by identifying two distinct non-background objects separated by the background color.\nIt then fills the background area between these objects, within their overlapping range on the non-separation axis.\nThe filling uses the colors of the respective objects, extending towards the middle point between them.\nIf the gap between objects is even, the space is divided equally; if odd, the middle row/column is assigned based on rounding.\nThe original objects and the rest of the background remain unchanged.\n\"\"\"\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid: A list of lists representing the input 2D grid of integers.\n\n    Returns:\n        A list of lists representing the transformed 2D grid.\n    \"\"\"\n    \n    # Handle empty or invalid input\n    if not input_grid or not input_grid[0]:\n        return []\n\n    rows = len(input_grid)\n    cols = len(input_grid[0])\n    \n    # Initialize output_grid as a deep copy of the input\n    output_grid = deepcopy(input_grid)\n\n    # 1. Find background color\n    background_color = find_background(input_grid)\n    \n    # 2. Find non-background objects\n    objects = find_objects(input_grid, background_color)\n    \n    # Expect exactly two objects based on examples\n    if len(objects) != 2:\n        # If not exactly two objects, return the original grid (or handle as error)\n        # print(f\"Warning: Expected 2 objects, found {len(objects)}. Returning original grid.\")\n        return output_grid\n        \n    obj1_color, obj1_coords = objects[0]\n    obj2_color, obj2_coords = objects[1]\n    \n    # 3. Get bounding boxes\n    obj1_bbox = get_bounding_box(obj1_coords)\n    obj2_bbox = get_bounding_box(obj2_coords)\n    min_r1, max_r1, min_c1, max_c1 = obj1_bbox\n    min_r2, max_r2, min_c2, max_c2 = obj2_bbox\n\n    # 4. Determine separation axis and overlapping range\n    \n    # Check for horizontal separation (gap in columns, overlap in rows)\n    if max_c1 < min_c2 or max_c2 < min_c1:\n        separation_axis = 'horizontal'\n        # Ensure obj1 is left, obj2 is right\n        if min_c1 > min_c2:\n            obj1_color, obj2_color = obj2_color, obj1_color\n            obj1_coords, obj2_coords = obj2_coords, obj1_coords\n            min_r1, max_r1, min_c1, max_c1 = obj2_bbox\n            min_r2, max_r2, min_c2, max_c2 = obj1_bbox\n            \n        # Determine overlapping rows\n        overlap_min_r = max(min_r1, min_r2)\n        overlap_max_r = min(max_r1, max_r2)\n        \n        # Determine gap columns\n        gap_start_c = max_c1 + 1\n        gap_end_c = min_c2 - 1\n        \n        # Calculate midpoint (handle potential floating point carefully for splitting)\n        # Midpoint represents the boundary; columns < mid fill with obj1, >= mid fill with obj2\n        mid_col_boundary = (gap_start_c + gap_end_c + 1) / 2 \n        \n        # 5. Perform fill\n        for r in range(overlap_min_r, overlap_max_r + 1):\n            for c in range(gap_start_c, gap_end_c + 1):\n                 # Only fill if the cell is currently background\n                if output_grid[r][c] == background_color:\n                    if c < mid_col_boundary:\n                        output_grid[r][c] = obj1_color\n                    else:\n                        output_grid[r][c] = obj2_color\n                        \n    # Check for vertical separation (gap in rows, overlap in columns)\n    elif max_r1 < min_r2 or max_r2 < min_r1:\n        separation_axis = 'vertical'\n        # Ensure obj1 is top, obj2 is bottom\n        if min_r1 > min_r2:\n            obj1_color, obj2_color = obj2_color, obj1_color\n            obj1_coords, obj2_coords = obj2_coords, obj1_coords\n            min_r1, max_r1, min_c1, max_c1 = obj2_bbox\n            min_r2, max_r2, min_c2, max_c2 = obj1_bbox\n\n        # Determine overlapping columns\n        overlap_min_c = max(min_c1, min_c2)\n        overlap_max_c = min(max_c1, max_c2)\n\n        # Determine gap rows\n        gap_start_r = max_r1 + 1\n        gap_end_r = min_r2 - 1\n\n        # Calculate midpoint boundary\n        mid_row_boundary = (gap_start_r + gap_end_r + 1) / 2\n\n        # 5. Perform fill\n        for c in range(overlap_min_c, overlap_max_c + 1):\n             for r in range(gap_start_r, gap_end_r + 1):\n                 # Only fill if the cell is currently background\n                if output_grid[r][c] == background_color:\n                    if r < mid_row_boundary:\n                        output_grid[r][c] = obj1_color\n                    else:\n                         output_grid[r][c] = obj2_color\n    else:\n        # Objects might be overlapping or touching in a way not covered by examples\n        # print(\"Warning: Objects are not clearly separated horizontally or vertically. Returning original grid.\")\n        return output_grid # Or handle differently\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1597,
    "candidates_token_count": 3402,
    "total_token_count": 4999,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 27.644008,
  "retries": 1
}