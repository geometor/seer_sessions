{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\n\n\"\"\"\nTransform a 10x10 grid based on the locations and values of two non-zero numbers.\n\n1. Identify the two non-zero cells in the 10x10 input grid. Let the cell with the\n   smaller row index have value `C1` and row index `R1`. Let the cell with the\n   larger row index have value `C2` and row index `R2`.\n2. Create a new 10x10 output grid, initially filled with zeros.\n3. Define the top region as rows 0 through `R1 + 2`.\n4. Define the bottom region as rows `R1 + 3` through 9.\n5. Process the top region (rows `r` from 0 to `R1 + 2`):\n   - If the current row `r` is equal to `R1` or `R1 - 2`, fill the entire row `r`\n     of the output grid with the value `C1`.\n   - Otherwise (for other rows in the top region), set the cell at `(r, 0)` and\n     the cell at `(r, 9)` of the output grid to the value `C1`.\n6. Process the bottom region (rows `r` from `R1 + 3` to 9):\n   - If the current row `r` is equal to `R2` or `R2 + 2`, fill the entire row `r`\n     of the output grid with the value `C2`.\n   - Otherwise (for other rows in the bottom region), set the cell at `(r, 0)` and\n     the cell at `(r, 9)` of the output grid to the value `C2`.\n7. Return the completed output grid.\n\"\"\"\n\ndef find_non_zero_cells(grid: list[list[int]]) -> list[tuple[int, int, int]]:\n    \"\"\"Finds all non-zero cells and returns their row, column, and value.\"\"\"\n    non_zero = []\n    rows = len(grid)\n    cols = len(grid[0]) if rows > 0 else 0\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r][c] != 0:\n                non_zero.append((r, c, grid[r][c]))\n    return non_zero\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies the described transformation rule to the input grid.\n    \"\"\"\n    rows = len(input_grid)\n    cols = len(input_grid[0]) if rows > 0 else 0\n\n    # Ensure grid is 10x10 as per observed examples\n    if rows != 10 or cols != 10:\n        # Or handle differently, maybe raise ValueError?\n        # For now, return input if size is unexpected.\n        print(f\"Warning: Input grid size is {rows}x{cols}, expected 10x10.\")\n        return copy.deepcopy(input_grid)\n\n    # 1. Identify the two non-zero cells\n    non_zero_cells = find_non_zero_cells(input_grid)\n\n    # Expect exactly two non-zero cells based on examples\n    if len(non_zero_cells) != 2:\n         print(f\"Warning: Found {len(non_zero_cells)} non-zero cells, expected 2.\")\n         return copy.deepcopy(input_grid) # Return original if assumption fails\n\n    # Sort by row index to find C1/R1 (upper) and C2/R2 (lower)\n    non_zero_cells.sort(key=lambda x: x[0])\n    r1, _, c1_val = non_zero_cells[0]\n    r2, _, c2_val = non_zero_cells[1]\n\n    # 2. Create a new 10x10 output grid, initially filled with zeros.\n    output_grid = [[0 for _ in range(cols)] for _ in range(rows)]\n\n    # 3. Define the top region boundary (implicit in the loop below)\n    # 4. Define the bottom region boundary (implicit in the loop below)\n\n    # 5. Process the top region (rows r from 0 to R1 + 2)\n    # Ensure R1 + 2 does not exceed grid bounds\n    top_region_end_row = min(r1 + 2, rows - 1)\n    for r in range(top_region_end_row + 1):\n        # Check boundary conditions for filled rows (R1-2)\n        if r == r1 or (r1 >= 2 and r == r1 - 2):\n             # Fill the entire row with C1\n            output_grid[r] = [c1_val] * cols\n        else:\n            # Set only the border columns to C1\n            output_grid[r][0] = c1_val\n            output_grid[r][cols - 1] = c1_val\n\n    # 6. Process the bottom region (rows r from R1 + 3 to 9)\n    bottom_region_start_row = r1 + 3\n    # Check boundary conditions for filled rows (R2+2)\n    fill_row_r2_plus_2 = -1 # Initialize to invalid row\n    if r2 <= rows - 3: # Ensure R2+2 is within bounds\n        fill_row_r2_plus_2 = r2 + 2\n\n    for r in range(bottom_region_start_row, rows):\n        if r == r2 or r == fill_row_r2_plus_2:\n             # Fill the entire row with C2\n            output_grid[r] = [c2_val] * cols\n        else:\n            # Set only the border columns to C2\n            output_grid[r][0] = c2_val\n            output_grid[r][cols - 1] = c2_val\n\n    # 7. Return the completed output grid.\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2480,
    "candidates_token_count": 2004,
    "total_token_count": 4484,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 17.403362,
  "retries": 1
}