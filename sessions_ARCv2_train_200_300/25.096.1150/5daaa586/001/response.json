{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport collections\n\n\"\"\"\nExtracts a subgrid from the input grid based on boundary columns and rows.\n\n1.  **Identify Boundary Columns:** Finds the leftmost (col1) and rightmost (col2) \n    columns where all non-zero elements consist of a single, repeating digit.\n2.  **Identify Boundary Rows:** Finds the topmost (row1) and bottommost (row2) \n    rows where all elements between col1 and col2 (inclusive) are non-zero.\n3.  **Extract Subgrid:** Returns the portion of the input grid defined by the \n    rectangle from (row1, col1) to (row2, col2).\n\"\"\"\n\ndef _find_boundary_columns(grid: np.ndarray) -> tuple[int, int]:\n    \"\"\"\n    Finds the indices of the leftmost and rightmost boundary columns.\n    A boundary column is defined as a column where all non-zero elements\n    are the same single digit.\n    \"\"\"\n    num_rows, num_cols = grid.shape\n    boundary_col_indices = []\n\n    for j in range(num_cols):\n        col = grid[:, j]\n        non_zeros = col[col != 0]\n        if len(non_zeros) > 1: # Need at least two non-zeros to establish pattern\n             unique_non_zeros = np.unique(non_zeros)\n             if len(unique_non_zeros) == 1:\n                 # Check if all non-zero elements are this single unique value\n                 if np.all(non_zeros == unique_non_zeros[0]):\n                     boundary_col_indices.append(j)\n\n    if len(boundary_col_indices) < 2:\n        # Fallback or error handling needed if less than 2 boundaries found\n        # For now, let's assume based on examples, at least 2 will be found.\n        # A simpler heuristic might be needed if this fails.\n        # Maybe find columns with the *most* instances of a single non-zero number?\n         potential_cols = {}\n         for j in range(num_cols):\n            col = grid[:, j]\n            non_zeros = col[col != 0]\n            if len(non_zeros) > 0:\n                counts = collections.Counter(non_zeros)\n                most_common_val, most_common_count = counts.most_common(1)[0]\n                # Store column index and the count/value as potential boundary markers\n                potential_cols[j] = {'count': most_common_count, 'value': most_common_val}\n\n         # Sort potential columns by count (desc) and pick first/last as a guess\n         if len(potential_cols) >= 2:\n             sorted_indices = sorted(potential_cols.keys())\n             col1 = sorted_indices[0]\n             col2 = sorted_indices[-1]\n             # Refine: maybe select based on counts rather than just first/last index?\n             # For the given examples, the strict definition works, let's stick to it for now.\n             # If the strict check fails, this part needs improvement.\n             raise ValueError(\"Could not reliably identify exactly two boundary columns with the strict definition.\")\n         elif len(potential_cols) == 1:\n              # Handle cases with only one potential boundary? Unlikely based on examples.\n              raise ValueError(\"Only one potential boundary column identified.\")\n         else:\n             raise ValueError(\"No potential boundary columns identified.\")\n\n\n    col1 = min(boundary_col_indices)\n    col2 = max(boundary_col_indices)\n    return col1, col2\n\n\ndef _find_boundary_rows(grid: np.ndarray, col1: int, col2: int) -> tuple[int, int]:\n    \"\"\"\n    Finds the indices of the first and last rows where all elements\n    between col1 and col2 (inclusive) are non-zero.\n    \"\"\"\n    num_rows = grid.shape[0]\n    boundary_row_indices = []\n\n    for i in range(num_rows):\n        sub_row = grid[i, col1 : col2 + 1]\n        if np.all(sub_row != 0):\n            boundary_row_indices.append(i)\n\n    if not boundary_row_indices:\n         raise ValueError(\"Could not find any rows where all elements between boundary columns are non-zero.\")\n\n    row1 = min(boundary_row_indices)\n    row2 = max(boundary_row_indices)\n    return row1, row2\n\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Transforms the input grid by extracting a subgrid based on identified boundaries.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    grid_np = np.array(input_grid, dtype=int)\n\n    if grid_np.size == 0:\n        return []\n    if grid_np.ndim != 2 or grid_np.shape[0] == 0 or grid_np.shape[1] == 0:\n         # Handle empty or non-2D grids if necessary\n         return [] # Or raise error\n\n\n    # Find the boundary columns (leftmost and rightmost)\n    col1, col2 = _find_boundary_columns(grid_np)\n\n    # Find the boundary rows (topmost and bottommost) based on the columns\n    row1, row2 = _find_boundary_rows(grid_np, col1, col2)\n\n    # Extract the subgrid defined by these boundaries\n    output_grid_np = grid_np[row1 : row2 + 1, col1 : col2 + 1]\n\n    # Convert the resulting numpy array back to a list of lists\n    output_grid = output_grid_np.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3797,
    "candidates_token_count": 2727,
    "total_token_count": 6524,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 25.397405,
  "retries": 1
}