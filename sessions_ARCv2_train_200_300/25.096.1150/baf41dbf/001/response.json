{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\nfrom collections import deque\n\n\"\"\"\nTransforms an input grid based on the following rules:\n1. Finds all cells with the value 6 (marker cells).\n2. For each marker cell, initiates a flood fill process starting from its adjacent cells.\n3. The flood fill uses the color 3 and fills only cells with the value 0 (background cells).\n4. The fill propagates in 4 directions (up, down, left, right).\n5. The fill stops when it encounters a cell with value 3 (boundary cell) or the grid edges.\n6. The original positions of marker cells (6) and boundary cells (3) are preserved.\n7. The transformation modifies a copy of the input grid.\n\"\"\"\n\ndef _flood_fill(grid: list[list[int]], start_row: int, start_col: int, fill_color: int, target_color: int, boundary_color: int):\n    \"\"\"\n    Performs a flood fill on the grid starting from (start_row, start_col).\n\n    Args:\n        grid: The grid to modify (list of lists of ints).\n        start_row: The starting row index for the fill.\n        start_col: The starting column index for the fill.\n        fill_color: The color to fill with.\n        target_color: The color of cells to be filled.\n        boundary_color: The color that stops the fill.\n    \"\"\"\n    rows = len(grid)\n    if rows == 0:\n        return\n    cols = len(grid[0])\n    if cols == 0:\n        return\n\n    # Check if the starting point is valid and is the target color\n    if not (0 <= start_row < rows and 0 <= start_col < cols and grid[start_row][start_col] == target_color):\n        return\n\n    q = deque([(start_row, start_col)])\n    grid[start_row][start_col] = fill_color # Mark starting cell as filled\n\n    while q:\n        r, c = q.popleft()\n\n        # Explore neighbors (up, down, left, right)\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n\n            # Check bounds\n            if 0 <= nr < rows and 0 <= nc < cols:\n                # Check if the neighbor is the target color (and not implicitly a boundary)\n                if grid[nr][nc] == target_color:\n                    # Change color to fill_color\n                    grid[nr][nc] = fill_color\n                    # Add neighbor to the queue to process its neighbors\n                    q.append((nr, nc))\n                # Note: The fill naturally stops at boundary_color cells because they are not target_color.\n\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies a flood fill originating from neighbors of marker cells (value 6)\n    to fill background cells (value 0) with color 3, stopping at boundary cells (value 3).\n\n    Args:\n        input_grid: A 2D list of integers representing the input grid.\n\n    Returns:\n        A 2D list of integers representing the transformed grid.\n    \"\"\"\n    # Initialize output_grid as a deep copy of the input\n    output_grid = copy.deepcopy(input_grid)\n    \n    rows = len(output_grid)\n    if rows == 0:\n        return output_grid\n    cols = len(output_grid[0])\n    if cols == 0:\n        return output_grid\n\n    # Define colors\n    marker_color = 6\n    fill_color = 3\n    target_color = 0\n    boundary_color = 3 # Implicit boundary, also the fill color\n\n    # 1. Find all marker cell locations\n    marker_locations = []\n    for r in range(rows):\n        for c in range(cols):\n            if output_grid[r][c] == marker_color:\n                marker_locations.append((r, c))\n\n    # 2. For each marker, initiate flood fill from adjacent target cells\n    for r_marker, c_marker in marker_locations:\n        # Check neighbors of the marker\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r_marker + dr, c_marker + dc\n            # Check if neighbor is within bounds\n            if 0 <= nr < rows and 0 <= nc < cols:\n                 # If the neighbor is a target cell (0), start flood fill from there\n                 if output_grid[nr][nc] == target_color:\n                     _flood_fill(output_grid, nr, nc, fill_color, target_color, boundary_color)\n\n    # 3. Return the modified grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3445,
    "candidates_token_count": 2623,
    "total_token_count": 6068,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 23.941989,
  "retries": 1
}