{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\n\n\"\"\"\nTransforms a grid of integers based on neighborhood influence.\nAssumes '7' is the background value. \nA background cell ('7') changes to a specific foreground value if and only if all of its neighboring foreground cells (up, down, left, right, and diagonals) share that same single foreground value. \nIf a background cell has no foreground neighbors, or neighbors with multiple different foreground values, it remains unchanged.\nCells that are not background values ('7') also remain unchanged.\n\"\"\"\n\ndef get_neighbors(grid: list[list[int]], r: int, c: int) -> list[int]:\n    \"\"\"\n    Gets the values of the 8 neighboring cells for a given cell (r, c).\n    Handles grid boundaries.\n    \"\"\"\n    neighbors = []\n    rows = len(grid)\n    cols = len(grid[0])\n    for dr in [-1, 0, 1]:\n        for dc in [-1, 0, 1]:\n            # Skip the cell itself\n            if dr == 0 and dc == 0:\n                continue\n            \n            nr, nc = r + dr, c + dc\n            \n            # Check boundaries\n            if 0 <= nr < rows and 0 <= nc < cols:\n                neighbors.append(grid[nr][nc])\n    return neighbors\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:  \n    \"\"\"\n    Applies the neighborhood influence transformation rule to the input grid.\n    \"\"\"\n    # Initialize output_grid as a deep copy of the input grid\n    output_grid = copy.deepcopy(input_grid)\n    rows = len(input_grid)\n    if rows == 0:\n        return []\n    cols = len(input_grid[0])\n    if cols == 0:\n        return [[] for _ in range(rows)] # Return grid of empty rows if cols is 0\n\n    background_value = 7 # Assuming 7 is the background based on examples\n\n    # Iterate through each cell of the input grid\n    for r in range(rows):\n        for c in range(cols):\n            # Check if the current cell in the input grid is a background cell\n            if input_grid[r][c] == background_value:\n                \n                # Get the values of its neighbors from the *input* grid\n                neighbor_values = get_neighbors(input_grid, r, c)\n                \n                # Filter out background values to find foreground neighbors\n                foreground_neighbors = [val for val in neighbor_values if val != background_value]\n                \n                # Find the set of unique foreground neighbor values\n                unique_foreground_neighbors = set(foreground_neighbors)\n                \n                # Apply the transformation rule:\n                # If there is exactly one unique type of foreground value among neighbors\n                if len(unique_foreground_neighbors) == 1:\n                    # Update the corresponding cell in the output grid\n                    # The single value is obtained using next(iter(set))\n                    output_grid[r][c] = next(iter(unique_foreground_neighbors))\n            # Else (if input_grid[r][c] is not background_value), \n            # the output_grid[r][c] already holds the correct (copied) foreground value.\n\n    # Return the transformed grid\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3374,
    "candidates_token_count": 1334,
    "total_token_count": 4708,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.897988,
  "retries": 1
}