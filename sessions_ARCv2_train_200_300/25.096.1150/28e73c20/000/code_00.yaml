task_name: maze_generation
description: Generates a perfect maze within a grid, represented by '0' for paths and '3' for walls.

input_features:
  - object: grid
    properties:
      - type: 2D array
      - dimensions: N x N (square)
      - cell_value: always 0
      - data_type: integer

output_features:
  - object: grid
    properties:
      - type: 2D array
      - dimensions: N x N (same as input)
      - cell_values: 0 or 3
      - data_type: integer
    structure:
      - element: maze
        properties:
          - path_char: 0
          - wall_char: 3
          - algorithm: likely Randomized Depth-First Search (DFS)
      - element: boundary_walls
        location: top row (row 0), bottom row (N-1), right column (N-1)
        value: 3
      - element: left_boundary
        location: left column (column 0)
        value: 3, except for entrance and exit
      - element: entrance
        location: (row 1, column 0)
        value: 0
      - element: exit
        location: (row N-2, column 0)
        value: 0
      - element: inner_maze
        location: rows 1 to N-2, columns 1 to N-2
        content: maze path (0) and wall (3) structure generated by the algorithm

transformation:
  - action: initialize_output
    description: Create an N x N grid filled with the wall character '3'.
  - action: generate_maze
    description: Apply a maze generation algorithm (e.g., Randomized DFS) to the inner grid area (rows 1 to N-2, columns 1 to N-2).
    details:
      - Start carving paths (changing '3' to '0') from an initial cell (e.g., (1,1)).
      - Ensure all cells within the inner maze area are potentially reachable via the path ('0').
      - The algorithm carves paths by removing 'wall' cells ('3') between adjacent path cells ('0').
  - action: create_openings
    description: Set the entrance and exit cells on the left boundary to the path character '0'.
    locations:
      - entrance: (1, 0)
      - exit: (N-2, 0)

examples_dimensionality:
  - train_1: 13x13
  - train_2: 8x8
  - train_3: 15x15
  - train_4: 10x10
  - train_5: 6x6