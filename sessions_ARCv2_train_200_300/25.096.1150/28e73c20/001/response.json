{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport random\n\n\"\"\"\nTransforms an N x N grid of zeros into a maze represented by 0s (paths) and 3s (walls).\n\nThe transformation follows these steps:\n1.  Initialize an N x N output grid filled entirely with 3s (walls).\n2.  Use a Randomized Depth-First Search (DFS) algorithm to carve paths (0s) within the inner part of the grid (rows 1 to N-2, columns 1 to N-2).\n    a. Start at cell (1, 1).\n    b. Maintain a stack for the DFS traversal.\n    c. While the stack is not empty:\n        i.   Get the current cell (r, c).\n        ii.  Find unvisited neighbors (cells 2 steps away horizontally or vertically, still marked as 3) within the inner grid bounds [1..N-2, 1..N-2].\n        iii. If unvisited neighbors exist:\n             - Randomly choose one neighbor (nr, nc).\n             - Push the current cell back onto the stack.\n             - Calculate the wall cell ((r+nr)//2, (c+nc)//2) between the current cell and the neighbor.\n             - Mark the wall cell and the neighbor cell as paths (0) in the output grid.\n             - Push the neighbor cell onto the stack.\n        iv.  If no unvisited neighbors exist, pop the current cell (backtrack).\n3.  Create an entrance at (1, 0) and an exit at (N-2, 0) by setting these cells to 0.\n4.  The final grid contains the maze structure. The outer border (top, bottom, right) remains mostly walls (3), the left border has the entrance/exit, and the interior contains the carved maze.\n\"\"\"\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Generates a maze within the grid using Randomized DFS.\n\n    Args:\n        input_grid: An N x N list of lists containing only 0s.\n\n    Returns:\n        An N x N list of lists representing the maze, with 0s for paths\n        and 3s for walls.\n    \"\"\"\n    n = len(input_grid)\n    if n == 0:\n        return []\n    m = len(input_grid[0])\n    if n != m:\n         raise ValueError(\"Input grid must be square\") # Although examples are square, let's keep N for rows, M for cols if needed. Sticking to N for square.\n\n    # 1. Initialize output_grid with walls (3)\n    output_grid = [[3 for _ in range(n)] for _ in range(n)]\n\n    # Ensure grid is large enough for the standard algorithm structure\n    if n < 5: \n        # Handle very small grids - maybe just return the wall grid?\n        # The examples start at 6x6. A 5x5 would have entrance/exit adjacent.\n        # For simplicity based on examples, assume n >= 5 or return simple boundary.\n        # Let's implement the entrance/exit creation anyway.\n        if n >= 3: # Need at least 3 rows for distinct entrance/exit\n             if 1 < n: output_grid[1][0] = 0\n             if n-2 >= 1 and n-2 != 1 : output_grid[n-2][0] = 0 # Ensure exit is valid and different from entrance\n        return output_grid # Return basic boundary for tiny grids where maze carving is tricky/ill-defined by the pattern\n\n\n    # 2. Maze Carving (Randomized DFS) in the inner grid [1..n-2, 1..n-2]\n    \n    # Define inner grid boundaries (inclusive)\n    inner_r_min, inner_r_max = 1, n - 2\n    inner_c_min, inner_c_max = 1, n - 2\n\n    # Stack for DFS: stores (row, col) tuples\n    stack = []\n    \n    # Start DFS from (1, 1)\n    start_r, start_c = 1, 1\n    output_grid[start_r][start_c] = 0  # Mark starting cell as path\n    stack.append((start_r, start_c))\n\n    while stack:\n        current_r, current_c = stack[-1] # Peek at the top cell\n\n        # Find potential neighbors (2 steps away)\n        neighbors = []\n        for dr, dc in [(0, 2), (0, -2), (2, 0), (-2, 0)]:\n            nr, nc = current_r + dr, current_c + dc\n\n            # Check if neighbor is within the inner grid and is still a wall (unvisited)\n            if (inner_r_min <= nr <= inner_r_max and\n                inner_c_min <= nc <= inner_c_max and\n                output_grid[nr][nc] == 3):\n                neighbors.append((nr, nc))\n\n        if neighbors:\n            # Randomly choose one neighbor\n            next_r, next_c = random.choice(neighbors)\n\n            # Calculate wall cell coordinates between current and next cell\n            wall_r, wall_c = (current_r + next_r) // 2, (current_c + next_c) // 2\n\n            # Carve path: Mark wall and neighbor as path (0)\n            output_grid[wall_r][wall_c] = 0\n            output_grid[next_r][next_c] = 0\n\n            # Move to the neighbor\n            stack.append((next_r, next_c))\n        else:\n            # Backtrack if no unvisited neighbors\n            stack.pop()\n\n    # 3. Create Entrance and Exit on the left boundary\n    if n > 1: # Ensure grid has at least 2 rows\n        output_grid[1][0] = 0  # Entrance at (1, 0)\n    if n > 2: # Ensure grid has at least 3 rows for a distinct exit row\n         output_grid[n - 2][0] = 0 # Exit at (n-2, 0)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4413,
    "candidates_token_count": 2544,
    "total_token_count": 6957,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 24.880425,
  "retries": 1
}