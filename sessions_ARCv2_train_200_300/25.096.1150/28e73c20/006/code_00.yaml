task_name: deterministic_maze_generation
description: Generates a specific, deterministic perfect maze pattern within a grid for a given size N, represented by '0' for paths and '3' for walls.

input_features:
  - object: grid
    properties:
      - type: 2D array
      - dimensions: N x N (square)
      - cell_value: always 0
      - data_type: integer

output_features:
  - object: grid
    properties:
      - type: 2D array
      - dimensions: N x N (same as input)
      - cell_values: 0 or 3
      - data_type: integer
    structure:
      - element: maze
        properties:
          - path_char: 0
          - wall_char: 3
          - type: perfect maze (no loops, fully connected)
          - generation: deterministic (produces the exact same pattern for a given N)
            # hypothesis: uses a standard algorithm like DFS or Prim's with a fixed random seed (e.g., seed=0 or seed=N)
      - element: boundary_walls
        location: top row (row 0), bottom row (N-1), right column (N-1)
        value: 3
      - element: left_boundary
        location: left column (column 0)
        value: 3, except for entrance and exit
      - element: entrance
        location: (row 1, column 0)
        value: 0
      - element: exit
        location: (row N-2, column 0)
        value: 0
      - element: inner_maze_area
        location: rows 1 to N-2, columns 1 to N-2
        content: maze path (0) and wall (3) structure generated deterministically

transformation:
  - action: initialize_output
    description: Create an N x N grid filled with the wall character '3'.
  - action: generate_deterministic_maze
    description: Apply a specific, deterministic maze generation algorithm to the inner grid area (rows 1 to N-2, columns 1 to N-2) to produce the exact pattern required for size N.
    details:
      - The algorithm carves '0' paths, starting from an initial inner cell (e.g., (1,1)).
      - The exact sequence of path carving is fixed for a given N.
      - (Hypothesis): This might be achieved by using a standard maze algorithm like Randomized DFS or Prim's, but initializing the pseudo-random number generator with a fixed seed before starting the generation process (e.g., `random.seed(0)`).
  - action: create_openings
    description: Set the entrance and exit cells on the left boundary to the path character '0'.
    locations:
      - entrance: (1, 0)
      - exit: (N-2, 0)

examples_dimensionality_and_counts:
  - N: 6, path_cells: 12, wall_cells: 24
  - N: 8, path_cells: 24, wall_cells: 40
  - N: 10, path_cells: 40, wall_cells: 60
  - N: 13, path_cells: 72, wall_cells: 97
  - N: 15, path_cells: 98, wall_cells: 127
