{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nIdentify the background digit (most frequent) in the input grid. Then, identify \n'signal' digits, which are non-background digits where at least one instance \nis adjacent (horizontally, vertically, or diagonally) to another instance of \nthe same digit. Sort these signal digits numerically. For each sorted signal \ndigit, construct a standard 6x6 pattern using the signal digit as foreground \nand the identified background digit. The pattern has a fixed frame structure \nwith 8 foreground cells. Finally, stack these generated 6x6 patterns vertically \nin the sorted order to create the output grid.\n\"\"\"\n\ndef _get_background_digit(grid: np.ndarray) -> int:\n    \"\"\"Finds the most frequent digit in the grid.\"\"\"\n    if grid.size == 0:\n        # Handle empty input grid case if necessary, though constraints likely prevent this.\n        # Returning a default or raising an error might be appropriate.\n        # For now, assuming non-empty grids based on examples.\n        raise ValueError(\"Input grid cannot be empty\")\n    counts = Counter(grid.flatten())\n    # Find the digit with the highest count\n    background_digit = counts.most_common(1)[0][0]\n    return int(background_digit) # Ensure it's a standard int\n\ndef _find_signal_digits(grid: np.ndarray, background_digit: int) -> list[int]:\n    \"\"\"Identifies signal digits based on self-adjacency.\"\"\"\n    rows, cols = grid.shape\n    unique_digits = np.unique(grid)\n    candidate_digits = [d for d in unique_digits if d != background_digit]\n    signal_digits = set()\n\n    # Define offsets for 8 neighbors (including diagonals)\n    neighbors = [(-1, -1), (-1, 0), (-1, 1),\n                 ( 0, -1),          ( 0, 1),\n                 ( 1, -1), ( 1, 0), ( 1, 1)]\n\n    # Iterate through each candidate digit\n    for digit in candidate_digits:\n        # Find all locations of the current candidate digit\n        locations = np.argwhere(grid == digit)\n        is_signal = False\n        # Check neighbors for each location\n        for r, c in locations:\n            for dr, dc in neighbors:\n                nr, nc = r + dr, c + dc\n                # Check if neighbor is within bounds\n                if 0 <= nr < rows and 0 <= nc < cols:\n                    # Check if neighbor has the same digit\n                    if grid[nr, nc] == digit:\n                        signal_digits.add(digit)\n                        is_signal = True\n                        break # Found adjacency for this location, move to next location\n            if is_signal:\n                break # Found adjacency for this digit, move to next digit\n\n    return sorted(list(signal_digits))\n\n\ndef _create_pattern_grid(foreground_digit: int, background_digit: int) -> np.ndarray:\n    \"\"\"Creates a standard 6x6 grid with the specified foreground/background pattern.\"\"\"\n    pattern = np.full((6, 6), background_digit, dtype=int)\n    # Set foreground digits based on the defined pattern structure\n    # Rows 0 & 5: F B F F B F --> indices 0, 2, 3, 5\n    pattern[[0, 5], [0, 2, 3, 5]] = foreground_digit\n    # Rows 1 & 4: F F B B F F --> indices 0, 1, 4, 5\n    pattern[[1, 4], [0, 1, 4, 5]] = foreground_digit\n    # Rows 2 & 3: F B B B B F --> indices 0, 5\n    pattern[[2, 3], [0, 5]] = foreground_digit\n    return pattern\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Transforms the input grid by identifying signal digits based on adjacency,\n    generating standard 6x6 patterns for them, and stacking these patterns.\n    \"\"\"\n    # Convert input to numpy array for efficient processing\n    input_array = np.array(input_grid, dtype=int)\n\n    if input_array.size == 0:\n        return [] # Handle empty input\n\n    # Step 1: Identify the background digit\n    background_digit = _get_background_digit(input_array)\n\n    # Step 2 & 3: Identify Candidate Digits and Filter for Signal Digits\n    signal_digits = _find_signal_digits(input_array, background_digit)\n\n    # Step 4: Sort Signal Digits (already sorted by _find_signal_digits)\n    # signal_digits are sorted\n\n    # Step 5 & 6: Construct Output Patterns and Stack\n    output_patterns = []\n    if not signal_digits:\n        return [] # Return empty list if no signal digits found\n\n    for fg_digit in signal_digits:\n        # Create the standard 6x6 pattern for the current signal digit\n        pattern_grid = _create_pattern_grid(fg_digit, background_digit)\n        output_patterns.append(pattern_grid)\n\n    # Stack the found patterns vertically\n    output_grid_np = np.vstack(output_patterns)\n\n    # Step 7: Return Result as list of lists\n    return output_grid_np.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 10372,
    "candidates_token_count": 1682,
    "total_token_count": 12054,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.947056,
  "retries": 1
}