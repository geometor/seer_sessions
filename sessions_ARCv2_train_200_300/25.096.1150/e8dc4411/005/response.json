{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter, deque\n\n\"\"\"\nTransforms the input grid by identifying a source cell, a background color, and a zero cell. \nIt determines a primary diagonal propagation direction (D1) based on the relative position of the source and zero cells.\nIt determines a secondary axis-aligned propagation direction (D2) based on D1 using patterns observed in training data (D1=(1,-1) or (1,1) -> D2=(1,0); D1=(-1,1) -> D2=(0,1)).\nStarting from the source cell, it performs a fill operation using steps D1 and D2. \nCells are colored with the source color if and only if they are within bounds and their original color in the input grid was the background color.\nThe fill expands like a breadth-first search restricted to D1 and D2 steps. The original source cell itself is not recolored, but acts as the origin for the fill.\n\"\"\"\n\ndef find_background_color(grid: np.ndarray) -> int:\n    \"\"\"Identifies the most frequent color in the grid, assumed to be the background.\"\"\"\n    counts = Counter(grid.flatten())\n    # Assuming the background color is the most frequent one\n    if not counts:\n        raise ValueError(\"Grid is empty, cannot determine background color.\")\n    background_color = counts.most_common(1)[0][0]\n    return int(background_color) # Ensure it's a standard int\n\ndef find_source_cell(grid: np.ndarray, background_color: int) -> tuple[int, int, int]:\n    \"\"\"Finds the unique cell that is not the background color and not zero.\"\"\"\n    source_candidates = []\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            color = grid[r, c]\n            if color != background_color and color != 0:\n                source_candidates.append((r, c, int(color))) # Store as int\n    \n    if len(source_candidates) == 0:\n         raise ValueError(\"No source cell found (non-background, non-zero).\")\n    if len(source_candidates) > 1:\n         # Based on examples, uniqueness is expected. If not unique, using the first found.\n         print(f\"Warning: Expected 1 source cell, found {len(source_candidates)}. Using the first one: {source_candidates[0]}\")\n\n    return source_candidates[0] # (row, col, color)\n\ndef find_any_zero_cell(grid: np.ndarray) -> tuple[int, int]:\n    \"\"\"Finds the location of any cell containing zero.\"\"\"\n    zero_locations = np.where(grid == 0)\n    if len(zero_locations[0]) == 0:\n         raise ValueError(\"No zero cell found.\")\n    \n    # Return the coordinates of the first zero cell found (numpy returns row indices then col indices)\n    return int(zero_locations[0][0]), int(zero_locations[1][0]) # (row, col), ensure standard ints\n\ndef determine_d2(ddr: int, ddc: int) -> tuple[int, int]:\n    \"\"\"\n    Determines the secondary, axis-aligned propagation direction (D2)\n    based on the primary diagonal direction D1 = (ddr, ddc).\n    This rule is derived from observed patterns in the training examples.\n    \"\"\"\n    if (ddr, ddc) == (1, -1): return (1, 0) # Train 1: Down-Left -> D2 is Down\n    if (ddr, ddc) == (1, 1): return (1, 0)  # Train 2: Down-Right -> D2 is Down\n    if (ddr, ddc) == (-1, 1): return (0, 1) # Train 3: Up-Right -> D2 is Right\n    \n    # Hypothesis for the remaining diagonal:\n    if (ddr, ddc) == (-1, -1): return (0, -1) # Up-Left -> Left (Hypothesized)\n\n    # Fallback/Default for non-diagonal or unseen D1 combinations\n    print(f\"Warning: Unhandled D1 ({ddr},{ddc}). Defaulting D2 based on non-zero component.\")\n    if ddr != 0:\n        return (abs(ddr), 0) # Prioritize vertical if both non-zero? Arbitrary choice.\n    elif ddc != 0:\n         return (0, abs(ddc))\n    else:\n        # Should not happen if source != zero and sign handled correctly\n        return (1,0) # Arbitrary fallback\n\n\ndef transform(input_grid_list: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies the two-direction fill transformation based on source, zero, and background cells.\n    \"\"\"\n    # Convert input list to numpy array for efficient operations\n    grid = np.array(input_grid_list, dtype=int)\n    # Create a copy to modify, preserving the original for checks\n    output_grid = np.copy(grid)\n    rows, cols = grid.shape\n\n    # Handle empty grid edge case\n    if rows == 0 or cols == 0:\n        return [] \n\n    try:\n        # 1. Identify key elements: background color, source cell (location & color), and a zero cell location\n        background_color = find_background_color(grid)\n        source_row, source_col, source_color = find_source_cell(grid, background_color)\n        zero_row, zero_col = find_any_zero_cell(grid)\n\n        # 2. Determine primary diagonal direction (D1) = vector pointing away from zero towards source\n        dr = source_row - zero_row\n        dc = source_col - zero_col\n        \n        # np.sign handles 0 correctly, but examples imply non-alignment\n        ddr = np.sign(dr) \n        ddc = np.sign(dc)\n        \n        # Ensure results are standard ints for indexing and comparisons\n        d1 = (int(ddr), int(ddc))\n\n        # Check if D1 is non-diagonal (not expected based on examples)\n        if d1[0] == 0 or d1[1] == 0:\n             print(f\"Warning: Calculated D1 ({d1[0]},{d1[1]}) is not strictly diagonal. Results might be unexpected.\")\n             # Proceeding anyway, the logic might handle it or fail gracefully\n\n        # 3. Determine secondary axis-aligned direction (D2) based on D1\n        d2 = determine_d2(d1[0], d1[1])\n\n        # 4. Perform the fill using a BFS-like approach with directions D1 and D2\n        # Queue stores cells (row, col) to visit\n        queue = deque()\n        # Visited set stores (row, col) tuples already processed or queued to prevent cycles/redundancy\n        visited = set()\n\n        # Mark the source cell itself as visited; it's the origin but isn't recolored\n        visited.add((source_row, source_col))\n\n        # Seed the BFS: Check immediate neighbors of the source cell using D1 and D2\n        for step_dr, step_dc in [d1, d2]:\n            nr, nc = source_row + step_dr, source_col + step_dc\n            \n            # Check bounds and if already visited\n            if 0 <= nr < rows and 0 <= nc < cols and (nr, nc) not in visited:\n                # IMPORTANT: Check the color in the *original* input grid\n                if grid[nr, nc] == background_color:\n                    # If it was background, color it in the output grid\n                    output_grid[nr, nc] = source_color\n                    # Mark as visited and add to the queue for further expansion\n                    visited.add((nr, nc))\n                    queue.append((nr, nc))\n                else:\n                    # If not background (or already source/zero), mark visited but don't color or queue\n                    visited.add((nr, nc)) \n\n        # Continue the BFS expansion\n        while queue:\n            cr, cc = queue.popleft() # Get the next cell to expand from\n\n            # Explore neighbors using D1 and D2 steps from the current cell\n            for step_dr, step_dc in [d1, d2]:\n                nr, nc = cr + step_dr, cc + step_dc\n\n                # Check if the potential next cell is valid to color and explore further\n                if 0 <= nr < rows and 0 <= nc < cols and (nr, nc) not in visited:\n                    # Check the color in the *original* input grid\n                    if grid[nr, nc] == background_color:\n                         # If it was background, color it in the output grid\n                        output_grid[nr, nc] = source_color\n                        # Mark as visited and add to the queue\n                        visited.add((nr, nc))\n                        queue.append((nr, nc))\n                    else:\n                        # If not background, mark visited to prevent re-checking from other paths\n                        visited.add((nr, nc))\n\n    except ValueError as e:\n        # Handle cases where key elements (background, source, zero) can't be found as expected\n        print(f\"Error during transformation setup: {e}. Returning original grid.\")\n        # Return the original grid if setup fails\n        return input_grid_list\n\n    # Convert the final numpy array back to a list of lists for the required output format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 20184,
    "candidates_token_count": 2726,
    "total_token_count": 22910,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 23.528429,
  "retries": 1
}