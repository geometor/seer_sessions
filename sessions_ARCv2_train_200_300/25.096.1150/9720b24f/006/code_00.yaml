task_type: grid_transformation
grid_elements:
  - type: integer
    value_range: 0-9 (based on examples)
    role: background (0), object_color/type (non-zero)
objects:
  - id: cell
    properties:
      - value: integer
      - row_index: integer
      - column_index: integer
      - neighbors: list of adjacent cells (orthogonal: up, down, left, right)
relationships:
  - type: adjacency
    between: [cell, cell]
    definition: Two cells are adjacent if they share an edge (orthogonally).
  - type: conflict
    between: [cell, cell]
    definition: A conflict exists between two adjacent cells if both have non-zero values and their values are different.
actions:
  - name: process_grid
    input: input_grid
    output: output_grid
    steps:
      - Create output_grid as a copy of input_grid.
      - Iterate through each cell (r, c) of input_grid.
      - If input_grid[r][c] is non-zero:
        - Check for conflict: For each orthogonal neighbor (nr, nc) of (r, c):
          - If neighbor exists within grid bounds:
            - Let neighbor_value = input_grid[nr][nc].
            - If neighbor_value != 0 AND neighbor_value != input_grid[r][c]:
              - Mark cell (r, c) for erasure (set output_grid[r][c] = 0).
              - Stop checking neighbors for cell (r, c).
      - If input_grid[r][c] is zero, output_grid[r][c] remains 0.
transformation_goal: Create an output grid where non-zero cells from the input grid are set to 0 if they have any orthogonal neighbor with a *different* non-zero value. Otherwise, the cell's value is copied to the output grid. Zero-value cells are always copied as zero.