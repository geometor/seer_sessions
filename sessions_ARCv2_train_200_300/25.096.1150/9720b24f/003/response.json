{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\n\n\"\"\"\nCreates an output grid where non-zero cells from the input are set to 0 \nif they have any orthogonal neighbor (up, down, left, right) with a \ndifferent non-zero value. Cells with value 0 remain 0. Non-zero cells \nthat are only adjacent to cells with the same non-zero value or 0 remain \nunchanged.\n\"\"\"\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Transforms the input grid based on neighbor values.\n\n    Args:\n        input_grid: A list of lists representing the 2D grid of integers.\n\n    Returns:\n        A new list of lists representing the transformed grid.\n    \"\"\"\n    # Get grid dimensions\n    rows = len(input_grid)\n    if rows == 0:\n        return []\n    cols = len(input_grid[0])\n    if cols == 0:\n        # Handle empty rows case\n        return [[] for _ in range(rows)]\n\n    # 1. Create a new grid (output_grid) with the same dimensions as the input_grid.\n    # We initialize it as a deep copy, then modify it.\n    output_grid = copy.deepcopy(input_grid)\n\n    # Define orthogonal neighbor offsets\n    neighbor_offsets = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right\n\n    # 2. Iterate through each cell of the input_grid using its row index r and column index c.\n    for r in range(rows):\n        for c in range(cols):\n            # 3. Get the value of the current cell in the input_grid.\n            input_value = input_grid[r][c]\n\n            # 4. If input_value is 0, the corresponding cell in output_grid is already 0 (from copy), so skip.\n            if input_value == 0:\n                continue\n\n            # 5. If input_value is not 0, assume initially that the value should be kept.\n            should_erase = False\n\n            # 6. Define the coordinates of the orthogonal neighbors (done via offsets).\n            # 7. For each neighbor coordinate (nr, nc):\n            for dr, dc in neighbor_offsets:\n                nr, nc = r + dr, c + dc\n\n                # 7a. Check if the neighbor coordinate is within the bounds of the input_grid.\n                if 0 <= nr < rows and 0 <= nc < cols:\n                    # 7b. If it is within bounds, get the neighbor's value from the original input grid.\n                    neighbor_value = input_grid[nr][nc]\n\n                    # 7c. Check if the neighbor_value is different from 0 AND different from the input_value.\n                    if neighbor_value != 0 and neighbor_value != input_value:\n                        # 7d. If both conditions are true, set should_erase = True and break.\n                        should_erase = True\n                        break # No need to check other neighbors for this cell\n\n            # 8. After checking all neighbors (or breaking early), if should_erase is True, set output cell to 0.\n            if should_erase:\n                output_grid[r][c] = 0\n            # 9. If should_erase is False, the output cell retains the input_value (already set by deepcopy).\n\n    # 10. After iterating through all cells, return the output_grid.\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8207,
    "candidates_token_count": 1009,
    "total_token_count": 9216,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.72506,
  "retries": 1
}