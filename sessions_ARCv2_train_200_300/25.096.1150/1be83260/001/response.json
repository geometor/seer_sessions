{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nThe transformation identifies distinct rectangular blocks of non-zero numbers in the input grid, separated by rows and columns of zeros.\nIt identifies one 'special' block containing foreground colors (colors different from the most frequent non-zero color within that block, which is the background color).\nAll blocks share the same original background color.\nThe transformation modifies the background color of each block based on a mapping determined by the set of foreground colors found in the special block and the block's position in the output grid layout.\nForeground colors within each block are preserved.\nThe output grid reassembles the transformed blocks in their original relative layout (e.g., 2x2), inserting single rows/columns of the original background color as separators between them.\n\nThe specific mapping observed from output grid position (Top-Left, Top-Right, Bottom-Left, Bottom-Right) to the new background color, based on the foreground colors (FG) found in the special block, is:\n- If FG = {1, 3, 4}: TL->3, TR->1, BL->4, BR->1\n- If FG = {2, 4, 8}: TL->2, TR->8, BL->4, BR->8\n\nThe separator color used in the output is the original background color common to all input blocks.\n\"\"\"\n\ndef find_blocks(grid: np.ndarray) -> tuple[list[tuple[int, int, int, int, np.ndarray]], tuple[int, int], dict[tuple[int, int], tuple[int, int]]]:\n    \"\"\"\n    Finds non-zero blocks separated by all-zero rows/columns.\n    Returns:\n        - A list of tuples: (r1, c1, r2, c2, block_array) for each block.\n        - The grid dimensions (max_row_idx, max_col_idx) of the blocks.\n        - A dictionary mapping block grid coordinates (row_idx, col_idx) to block array index.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    blocks = []\n    block_coords = {}\n    \n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and not visited[r, c]:\n                # Found the start of a potential block\n                q = [(r, c)]\n                visited[r, c] = True\n                block_pixels = set([(r, c)])\n                min_r, max_r = r, r\n                min_c, max_c = c, c\n\n                # Flood fill to find all connected non-zero cells\n                head = 0\n                while head < len(q):\n                    cr, cc = q[head]\n                    head += 1\n                    min_r = min(min_r, cr)\n                    max_r = max(max_r, cr)\n                    min_c = min(min_c, cc)\n                    max_c = max(max_c, cc)\n                    \n                    # Check 4 neighbors\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = cr + dr, cc + dc\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] != 0 and not visited[nr, nc]:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n                            block_pixels.add((nr, nc))\n                \n                # Check if it's separated by zeros (bounding box check is sufficient here)\n                # Extract block\n                block_array = grid[min_r:max_r+1, min_c:max_c+1]"
          }
        ],
        "role": "model"
      },
      "finish_reason": 2,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3151,
    "candidates_token_count": 8190,
    "total_token_count": 11341,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 76.759135,
  "retries": 1
}