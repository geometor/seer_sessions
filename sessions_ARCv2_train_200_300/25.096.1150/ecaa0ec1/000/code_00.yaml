elements:
  - object: grid
    description: A 2D array of integers representing pixels.
  - object: pixel
    properties:
      - color: An integer value (0, 1, 4, 8 observed).
      - position: (row, column) coordinates.
  - object: background
    description: Pixels with color 0.
  - object: main_block
    description: A connected 3x3 component composed entirely of pixels with colors 1 and 8. There is exactly one such block in each input.
    properties:
      - top_left_corner: (row, column) of the top-left pixel of the block.
      - pattern: The specific 3x3 array of 1s and 8s.
  - object: signal_pixels
    description: Pixels with color 4. They appear isolated.
    properties:
      - position: (row, column) coordinates.

relationships:
  - relation: relative_position
    object1: determining_signal_pixel
    object2: main_block
    description: The row and column difference between the determining signal pixel (topmost, then leftmost '4') and the top-left corner of the main_block. This relative position dictates the transformation rules applied.

actions:
  - action: identify_main_block
    input: input_grid
    output: main_block object (pattern and position)
  - action: identify_signal_pixels
    input: input_grid
    output: list of signal_pixel objects (positions)
  - action: select_determining_signal
    input: list of signal_pixels
    output: one signal_pixel object (the one with the minimum row index, breaking ties with the minimum column index)
  - action: determine_rule_set
    input: relative_position (determining_signal to main_block)
    output: rule_identifier ('Rule A' or 'Rule B')
    logic: |
      If relative_row = -1, use Rule A.
      If relative_row = -2, use Rule B.
  - action: transform_main_block
    input: main_block pattern, rule_identifier
    output: transformed_main_block pattern
    logic: |
      Applies a specific, fixed 3x3 transformation based on the rule_identifier (T_A or T_B, derived from examples). The transformation swaps an equal number of 1s and 8s within the block. The block remains in its original position in the grid.
      - T_A (Rule A): Observed in examples 1 and 3.
      - T_B (Rule B): Observed in examples 2 and 4.
  - action: move_determining_signal
    input: determining_signal position, rule_identifier
    output: new_signal_position
    logic: |
      Calculates the output position for the determining signal pixel based on the rule_identifier.
      - Rule A: new_position = (input_row + 4, input_col)
      - Rule B: new_position = (input_row + 1, input_col + 1)
  - action: construct_output_grid
    input: input_grid_dimensions, transformed_main_block (pattern and position), new_signal_position
    output: output_grid
    logic: |
      Create a new grid filled with 0s.
      Place the transformed_main_block pattern at its original position.
      Place a '4' at the new_signal_position.