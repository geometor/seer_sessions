{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\n\n\"\"\"\nTransforms an input grid by finding two cells marked with '8', drawing a digital \nstraight line (using Bresenham's algorithm) between them, and marking the \nintermediate cells of this line with '3'. The original '8' markers remain unchanged.\n\"\"\"\n\ndef bresenham_line(r1: int, c1: int, r2: int, c2: int) -> list[tuple[int, int]]:\n    \"\"\"\n    Calculates the grid coordinates for a line between (r1, c1) and (r2, c2) \n    using Bresenham's line algorithm.\n\n    Args:\n        r1: Row coordinate of the starting point.\n        c1: Column coordinate of the starting point.\n        r2: Row coordinate of the ending point.\n        c2: Column coordinate of the ending point.\n\n    Returns:\n        A list of (row, col) tuples representing the cells on the line, \n        including the start and end points.\n    \"\"\"\n    points = []\n    dr = abs(r2 - r1)\n    dc = abs(c2 - c1)\n    r, c = r1, c1\n    step_r = 1 if r1 < r2 else -1\n    step_c = 1 if c1 < c2 else -1\n\n    points.append((r, c))\n\n    if dr > dc: # Steep line (more change in row)\n        error = dr // 2\n        while r != r2:\n            error -= dc\n            if error < 0:\n                c += step_c\n                error += dr\n            r += step_r\n            points.append((r, c))\n    else: # Shallow line (more change in column) or diagonal\n        error = dc // 2\n        while c != c2:\n            error -= dr\n            if error < 0:\n                r += step_r\n                error += dc\n            c += step_c\n            points.append((r, c))\n            \n    # Ensure the last point is included if the loop condition stopped it\n    # (This handles cases where the loop terminates exactly on the target,\n    # but Bresenham often calculates one step at a time).\n    # Re-checking the core logic, the standard algorithm usually ensures\n    # the endpoint is reached correctly by the loop condition or the final point add.\n    # Let's stick to the standard structure first. If the endpoint is missed, we'll adjust.\n    # After testing the logic, the standard loop covers the endpoint correctly.\n\n    return points\n\ndef find_markers(grid: list[list[int]], marker_value: int) -> list[tuple[int, int]]:\n    \"\"\"\n    Finds all occurrences of a specific marker value in the grid.\n\n    Args:\n        grid: The 2D list representing the grid.\n        marker_value: The integer value to search for.\n\n    Returns:\n        A list of (row, col) tuples where the marker value was found.\n    \"\"\"\n    locations = []\n    num_rows = len(grid)\n    if num_rows == 0:\n        return []\n    num_cols = len(grid[0])\n    for r in range(num_rows):\n        for c in range(num_cols):\n            if grid[r][c] == marker_value:\n                locations.append((r, c))\n    return locations\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    # initialize output_grid as a deep copy of the input to avoid modifying the original\n    output_grid = copy.deepcopy(input_grid)\n\n    # Find the locations of the two '8' markers\n    marker_locations = find_markers(input_grid, 8)\n\n    # Ensure exactly two markers were found\n    if len(marker_locations) != 2:\n        # Handle error case or return input/output grid as is, depending on requirements.\n        # For this problem, we assume exactly two '8's exist based on examples.\n        # Returning the current output grid (copy of input) if assumption fails.\n        print(f\"Warning: Expected 2 markers (8), but found {len(marker_locations)}. Returning input copy.\")\n        return output_grid \n\n    p1, p2 = marker_locations\n    r1, c1 = p1\n    r2, c2 = p2\n\n    # Calculate the points on the line between the two markers\n    line_points = bresenham_line(r1, c1, r2, c2)\n\n    # Draw the line on the output grid using '3'\n    for r, c in line_points:\n        # Check grid bounds just in case, though Bresenham should stay within reasonable limits\n        # if start/end points are valid.\n        if 0 <= r < len(output_grid) and 0 <= c < len(output_grid[0]):\n             # Only change the cell to '3' if it's not one of the original '8' markers\n            if output_grid[r][c] != 8:\n                 output_grid[r][c] = 3\n        # else:\n            # Optional: Handle or log points falling outside grid bounds if that's possible/a concern\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3215,
    "candidates_token_count": 2134,
    "total_token_count": 5349,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 103.726354,
  "retries": 2
}