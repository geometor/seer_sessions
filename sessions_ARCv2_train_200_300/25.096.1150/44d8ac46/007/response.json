{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\nimport collections\n\n\"\"\"\nTransforms the input grid by identifying connected regions of '0' cells. \nIf a region of '0's is not connected to the grid boundary (i.e., it's fully enclosed \nby '5's or other grid contents), all '0's within that specific region are changed to '2's. \nConnection to the boundary is determined by a path of adjacent (4-directionally) '0' cells \nleading to any cell on the grid's edge. Cells with value '5' act as barriers and remain \nunchanged. '0' regions that touch or can reach the boundary remain '0'.\n\"\"\"\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Identifies '0' cells reachable from the boundary and fills the unreachable '0's with '2'.\n\n    Args:\n        input_grid: A 2D list of integers representing the input grid.\n\n    Returns:\n        A 2D list of integers representing the transformed grid.\n    \"\"\"\n    # Get grid dimensions, handle empty grids\n    rows = len(input_grid)\n    if rows == 0:\n        return []\n    cols = len(input_grid[0])\n    if cols == 0:\n        return [[] for _ in range(rows)]\n\n    # Initialize output_grid as a deep copy of the input\n    output_grid = copy.deepcopy(input_grid)\n    \n    # Keep track of visited '0' cells reachable from the boundary\n    visited_from_boundary = [[False for _ in range(cols)] for _ in range(rows)]\n    \n    # Queue for Breadth-First Search (BFS) starting from boundary '0's\n    q = collections.deque()\n\n    # Initialize the queue with all '0' cells on the boundary and mark them visited\n    # Top and Bottom rows\n    for c in range(cols):\n        if input_grid[0][c] == 0 and not visited_from_boundary[0][c]:\n            q.append((0, c))\n            visited_from_boundary[0][c] = True\n        if input_grid[rows-1][c] == 0 and not visited_from_boundary[rows-1][c]:\n             q.append((rows-1, c))\n             visited_from_boundary[rows-1][c] = True\n    # Left and Right columns (avoid double-adding corners)\n    for r in range(1, rows - 1): \n        if input_grid[r][0] == 0 and not visited_from_boundary[r][0]:\n            q.append((r, 0))\n            visited_from_boundary[r][0] = True\n        if input_grid[r][cols-1] == 0 and not visited_from_boundary[r][cols-1]:\n            q.append((r, cols-1))\n            visited_from_boundary[r][cols-1] = True\n            \n    # Define possible moves (4-directional: up, down, left, right)\n    moves = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    # Perform BFS from boundary '0's to find all reachable '0's\n    while q:\n        r, c = q.popleft()\n        \n        # Explore neighbors\n        for dr, dc in moves:\n            nr, nc = r + dr, c + dc\n\n            # Check if the neighbor is within grid bounds\n            if 0 <= nr < rows and 0 <= nc < cols:\n                # Check if the neighbor is a '0' and hasn't been visited yet from the boundary\n                if input_grid[nr][nc] == 0 and not visited_from_boundary[nr][nc]:\n                    # Mark as visited and add to the queue for further exploration\n                    visited_from_boundary[nr][nc] = True\n                    q.append((nr, nc))\n\n    # Iterate through the entire grid to fill enclosed '0's\n    for r in range(rows):\n        for c in range(cols):\n            # If a cell is '0' in the input grid BUT was NOT visited by the boundary BFS,\n            # it means it's enclosed (cannot reach the boundary via a path of 0s).\n            if input_grid[r][c] == 0 and not visited_from_boundary[r][c]:\n                # Change this enclosed '0' cell to '2' in the output grid.\n                output_grid[r][c] = 2\n                \n    # Return the modified grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 18529,
    "candidates_token_count": 1381,
    "total_token_count": 19910,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.071245,
  "retries": 1
}