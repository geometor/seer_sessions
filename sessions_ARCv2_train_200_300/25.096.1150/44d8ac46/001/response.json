{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\nimport collections\n\n\"\"\"\nIdentifies connected regions of '0' cells within a 2D grid. \nIf a region of '0's is not connected to the grid boundary (i.e., it's fully enclosed by '5's or other grid contents), \nall '0's within that specific region are changed to '2's. \nCells with value '5' remain unchanged. '0' regions that touch the boundary remain '0'.\n\"\"\"\n\ndef find_region_and_check_boundary(start_r: int, start_c: int, grid: list[list[int]], visited: list[list[bool]]) -> tuple[set[tuple[int, int]], bool]:\n    \"\"\"\n    Performs a Breadth-First Search (BFS) starting from (start_r, start_c) \n    to find a connected region of 0s.\n\n    Args:\n        start_r: The starting row index.\n        start_c: The starting column index.\n        grid: The input grid.\n        visited: A grid of booleans to track visited cells.\n\n    Returns:\n        A tuple containing:\n        - region_cells: A set of (row, col) tuples belonging to the found region.\n        - touches_boundary: A boolean indicating if any cell in the region touches the grid boundary.\n    \"\"\"\n    rows = len(grid)\n    cols = len(grid[0])\n    region_cells = set()\n    touches_boundary = False\n    q = collections.deque([(start_r, start_c)])\n\n    # Mark the starting cell as visited and add it to the region\n    visited[start_r][start_c] = True\n    region_cells.add((start_r, start_c))\n\n    # Define possible moves (up, down, left, right)\n    moves = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    while q:\n        r, c = q.popleft()\n\n        # Check if the current cell is on the boundary\n        if r == 0 or r == rows - 1 or c == 0 or c == cols - 1:\n            touches_boundary = True  # Mark if the region reaches the edge\n\n        # Explore neighbors\n        for dr, dc in moves:\n            nr, nc = r + dr, c + dc\n\n            # Check if the neighbor is within grid bounds\n            if 0 <= nr < rows and 0 <= nc < cols:\n                # Check if the neighbor is a '0' and hasn't been visited yet\n                if grid[nr][nc] == 0 and not visited[nr][nc]:\n                    visited[nr][nc] = True\n                    region_cells.add((nr, nc))\n                    q.append((nr, nc))\n\n    return region_cells, touches_boundary\n\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:  \n    \"\"\"\n    Transforms the input grid by filling enclosed regions of '0's with '2's.\n\n    Args:\n        input_grid: A 2D list of integers representing the input grid.\n\n    Returns:\n        A 2D list of integers representing the transformed grid.\n    \"\"\"\n    # Get grid dimensions\n    rows = len(input_grid)\n    if rows == 0:\n        return []\n    cols = len(input_grid[0])\n    if cols == 0:\n        return [[] for _ in range(rows)]\n\n    # Initialize output_grid as a deep copy of the input\n    output_grid = copy.deepcopy(input_grid)\n    \n    # Initialize visited grid to keep track of explored cells\n    visited = [[False for _ in range(cols)] for _ in range(rows)]\n\n    # Iterate through each cell of the grid\n    for r in range(rows):\n        for c in range(cols):\n            # If we find an unvisited '0', start exploring its region\n            if input_grid[r][c] == 0 and not visited[r][c]:\n                # Find the connected region of 0s and check if it touches the boundary\n                region_cells, touches_boundary = find_region_and_check_boundary(r, c, input_grid, visited)\n                \n                # If the region does NOT touch the boundary, it's enclosed\n                if not touches_boundary:\n                    # Fill the enclosed region with '2's in the output grid\n                    for rr, cc in region_cells:\n                        output_grid[rr][cc] = 2\n                        \n    # Return the modified grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3602,
    "candidates_token_count": 3746,
    "total_token_count": 7348,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 31.683539,
  "retries": 1
}