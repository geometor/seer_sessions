{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  Initialize the output grid as a copy of the input grid.\n2.  Identify the background color, which is the most frequent color in the input grid.\n3.  Identify the non-background colors present in the input grid.\n4.  Determine the \"structure\" color by finding the most frequent non-background color.\n5.  Determine the \"frame\" color by identifying the other non-background color(s).\n6.  Iterate through each cell (at row `r`, column `c`) of the input grid.\n7.  If the color of the input cell `input[r][c]` is the background color:\n    a.  Examine the 8 neighboring cells of `input[r][c]`.\n    b.  If any of these neighbors contain the \"structure\" color:\n        i.  Change the color of the corresponding output cell `output[r][c]` to the \"frame\" color.\n8.  Return the modified output grid.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies a transformation to a grid based on neighbor colors.\n\n    Background cells adjacent (including diagonals) to the most frequent\n    non-background color ('structure' color) are changed to the less frequent\n    non-background color ('frame' color).\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    output_np = np.copy(input_np)\n    rows, cols = input_np.shape\n\n    # --- Identify Colors ---\n\n    # Flatten the grid to count all colors\n    all_colors = input_np.flatten()\n    color_counts = Counter(all_colors)\n\n    # Find the background color (most frequent)\n    background_color = color_counts.most_common(1)[0][0]\n\n    # Find non-background colors and their counts\n    non_background_colors = [color for color in all_colors if color != background_color]\n    if not non_background_colors:\n        # No pattern, return the original grid\n        return input_grid\n        \n    non_background_counts = Counter(non_background_colors)\n\n    # Determine structure and frame colors based on frequency\n    # Assumes there are exactly two non-background colors as per examples\n    sorted_non_background = non_background_counts.most_common()\n    if len(sorted_non_background) < 2:\n         # Handle cases with only one non-background color if needed,\n         # based on examples, we expect two. If only one, maybe it frames itself?\n         # For now, let's assume the task implies two distinct non-bg colors.\n         # If only one non-bg color exists, no framing happens based on the logic derived.\n         return input_grid # or raise an error, or define behavior\n\n    structure_color = sorted_non_background[0][0]\n    frame_color = sorted_non_background[1][0]\n\n    # --- Perform Transformations ---\n\n    # Iterate through each cell of the input grid\n    for r in range(rows):\n        for c in range(cols):\n            # Check if the current cell is a background cell\n            if input_np[r, c] == background_color:\n                # Examine the 8 neighbors\n                found_structure_neighbor = False\n                for dr in [-1, 0, 1]:\n                    for dc in [-1, 0, 1]:\n                        if dr == 0 and dc == 0:\n                            continue  # Skip the cell itself\n\n                        nr, nc = r + dr, c + dc\n\n                        # Check bounds\n                        if 0 <= nr < rows and 0 <= nc < cols:\n                            # Check if neighbor has the structure color\n                            if input_np[nr, nc] == structure_color:\n                                found_structure_neighbor = True\n                                break  # Found one, no need to check other neighbors\n                    if found_structure_neighbor:\n                        break # Exit outer neighbor loop too\n\n                # If a structure color neighbor was found, change the output cell\n                if found_structure_neighbor:\n                    output_np[r, c] = frame_color\n\n    # Convert the result back to a list of lists\n    output_grid = output_np.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3300,
    "candidates_token_count": 1436,
    "total_token_count": 4736,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.713892,
  "retries": 1
}