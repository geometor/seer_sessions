{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Tuple, Set\n\n\"\"\"\nTransforms an input grid by finding all cells with the value 6. \nThese '6' cells, along with any adjacent (up, down, left, right) cells containing the value 9, \nare then set to 0 in the output grid. All other cell values are copied directly from the input to the output.\n\"\"\"\n\ndef _find_value_locations(grid: np.ndarray, value: int) -> List[Tuple[int, int]]:\n    \"\"\"Finds all locations (row, col) of a specific value in the grid.\"\"\"\n    rows, cols = np.where(grid == value)\n    return list(zip(rows, cols))\n\ndef _get_neighbors(r: int, c: int, height: int, width: int) -> List[Tuple[int, int]]:\n    \"\"\"Gets valid neighbor coordinates (up, down, left, right) for a given cell.\"\"\"\n    neighbors = []\n    for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n        nr, nc = r + dr, c + dc\n        if 0 <= nr < height and 0 <= nc < width:\n            neighbors.append((nr, nc))\n    return neighbors\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Applies the transformation rule: zeros out cells with value 6 and \n    any adjacent 9s.\n\n    Args:\n        input_grid: A 2D list of integers representing the input grid.\n\n    Returns:\n        A 2D list of integers representing the transformed output grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_array = np.array(input_grid, dtype=int)\n    height, width = input_array.shape\n    \n    # Initialize output_grid as a copy of the input\n    output_array = input_array.copy()\n\n    # Find locations of all '6' markers\n    marker_locations = _find_value_locations(input_array, 6)\n\n    # Create a set to store coordinates of cells to be changed to 0\n    # Using a set automatically handles duplicates\n    coords_to_zero: Set[Tuple[int, int]] = set()\n\n    # Add all marker locations to the set\n    for r, c in marker_locations:\n        coords_to_zero.add((r, c))\n\n    # Iterate through each marker location\n    for r, c in marker_locations:\n        # Examine its neighbors\n        neighbors = _get_neighbors(r, c, height, width)\n        for nr, nc in neighbors:\n            # If a neighbor is a '9' in the original input grid, add it to the set\n            if input_array[nr, nc] == 9:\n                coords_to_zero.add((nr, nc))\n\n    # Iterate through the collected coordinates and set the corresponding cells in the output grid to 0\n    for r_change, c_change in coords_to_zero:\n        output_array[r_change, c_change] = 0\n\n    # Convert the output numpy array back to a list of lists\n    output_grid = output_array.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3103,
    "candidates_token_count": 1306,
    "total_token_count": 4409,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.771599,
  "retries": 1
}