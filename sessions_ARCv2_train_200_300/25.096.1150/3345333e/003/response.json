{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentify two non-zero shapes in the input grid. One shape is a solid rectangle, \nthe other is not. Find the bounding box of the non-rectangular shape. \nCreate an output grid filled with the background color (0), then fill the \nbounding box of the non-rectangular shape with its original color.\n\"\"\"\n\nimport numpy as np\nimport copy\n\ndef find_colored_cells(grid: np.ndarray, color: int) -> list[tuple[int, int]]:\n    \"\"\"Finds all coordinates (row, col) of cells with the specified color.\"\"\"\n    rows, cols = np.where(grid == color)\n    return list(zip(rows, cols))\n\ndef calculate_bounding_box(coords: list[tuple[int, int]]) -> tuple[int, int, int, int] | None:\n    \"\"\"Calculates the bounding box (min_r, min_c, max_r, max_c) for a list of coordinates.\"\"\"\n    if not coords:\n        return None\n    min_r = min(r for r, c in coords)\n    min_c = min(c for r, c in coords)\n    max_r = max(r for r, c in coords)\n    max_c = max(c for r, c in coords)\n    return min_r, min_c, max_r, max_c\n\ndef is_solid_rectangle(coords: list[tuple[int, int]], bbox: tuple[int, int, int, int]) -> bool:\n    \"\"\"Checks if the coordinates form a solid rectangle within the bounding box.\"\"\"\n    if not coords or bbox is None:\n        return False\n    min_r, min_c, max_r, max_c = bbox\n    expected_area = (max_r - min_r + 1) * (max_c - min_c + 1)\n    actual_cell_count = len(coords)\n    # Also check if all cells within the bounding box *actually have* the color.\n    # This check is implicitly covered by the area comparison if the shape is contiguous.\n    # The area check is sufficient given the problem description.\n    return actual_cell_count == expected_area\n\ndef fill_bounding_box(grid: np.ndarray, bbox: tuple[int, int, int, int], color: int) -> np.ndarray:\n    \"\"\"Fills the specified bounding box in the grid with the given color.\"\"\"\n    min_r, min_c, max_r, max_c = bbox\n    grid[min_r:max_r+1, min_c:max_c+1] = color\n    return grid\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Identifies solid rectangular and non-rectangular shapes. \n    Returns a grid containing only the filled bounding box of the \n    non-rectangular shape, using its original color.\n    \"\"\"\n    # Convert input to numpy array\n    grid_np = np.array(input_grid, dtype=int)\n    height, width = grid_np.shape\n    \n    # Initialize output grid with background color (0)\n    output_grid_np = np.zeros_like(grid_np)\n\n    # Find unique non-zero colors\n    unique_colors = np.unique(grid_np)\n    non_zero_colors = unique_colors[unique_colors != 0]\n\n    non_rect_color = -1 # Initialize with invalid color\n    non_rect_bbox = None\n\n    # Iterate through each unique non-zero color to identify shapes\n    for color in non_zero_colors:\n        # Find all cells with this color\n        coords = find_colored_cells(grid_np, color)\n        \n        if not coords:\n            continue \n\n        # Calculate the bounding box for these cells\n        bbox = calculate_bounding_box(coords)\n        \n        if bbox is None:\n             continue\n\n        # Check if the shape is NOT a solid rectangle\n        if not is_solid_rectangle(coords, bbox):\n            non_rect_color = color\n            non_rect_bbox = bbox\n            # Assuming only one non-rectangular shape based on examples\n            break \n            \n    # If a non-rectangular shape and its bounding box were found\n    if non_rect_color != -1 and non_rect_bbox is not None:\n        # Fill the bounding box of the non-rectangular shape in the output grid\n        output_grid_np = fill_bounding_box(output_grid_np, non_rect_bbox, non_rect_color)\n\n    # Convert the result back to a list of lists\n    return output_grid_np.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8640,
    "candidates_token_count": 1529,
    "total_token_count": 10169,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.160549,
  "retries": 1
}