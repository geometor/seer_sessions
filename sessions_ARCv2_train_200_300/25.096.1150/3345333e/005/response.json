{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentify and remove solid rectangular shapes of a single color from the input grid, \nleaving other shapes and the background intact. The background color is assumed to be 0.\nA shape is considered a solid rectangle if the count of its cells equals the area \nof its bounding box.\n\"\"\"\n\nimport numpy as np\nimport copy\n\ndef find_colored_cells(grid: np.ndarray, color: int) -> list[tuple[int, int]]:\n    \"\"\"Finds all coordinates (row, col) of cells with the specified color.\"\"\"\n    rows, cols = np.where(grid == color)\n    return list(zip(rows.tolist(), cols.tolist())) # Convert numpy indices to standard int tuples\n\ndef calculate_bounding_box(coords: list[tuple[int, int]]) -> tuple[int, int, int, int] | None:\n    \"\"\"Calculates the bounding box (min_r, min_c, max_r, max_c) for a list of coordinates.\"\"\"\n    if not coords:\n        return None\n    min_r = min(r for r, c in coords)\n    min_c = min(c for r, c in coords)\n    max_r = max(r for r, c in coords)\n    max_c = max(c for r, c in coords)\n    return min_r, min_c, max_r, max_c\n\ndef is_solid_rectangle(coords: list[tuple[int, int]], bbox: tuple[int, int, int, int]) -> bool:\n    \"\"\"Checks if the coordinates form a solid rectangle within the bounding box.\"\"\"\n    if not coords or bbox is None:\n        return False\n    min_r, min_c, max_r, max_c = bbox\n    # Calculate the area based on bounding box dimensions\n    expected_area = (max_r - min_r + 1) * (max_c - min_c + 1)\n    # Count the actual number of cells provided\n    actual_cell_count = len(coords)\n    # If the count matches the area, it's a solid rectangle\n    return actual_cell_count == expected_area\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Transforms the input grid by identifying solid rectangular shapes of a single \n    non-zero color and replacing them with the background color (0).\n    \"\"\"\n    # Convert input list of lists to a NumPy array for efficient processing\n    grid_np = np.array(input_grid, dtype=int)\n    \n    # Initialize output_grid as a deep copy of the input NumPy array\n    # We modify this array directly.\n    output_grid_np = copy.deepcopy(grid_np)\n    \n    # Find unique non-zero colors present in the grid\n    unique_colors = np.unique(grid_np)\n    non_zero_colors = unique_colors[unique_colors != 0]\n\n    # Iterate through each unique non-zero color found\n    for color in non_zero_colors:\n        # Find all cell coordinates (r, c) containing this color in the original grid\n        coords = find_colored_cells(grid_np, color)\n        \n        # If no cells are found for this color, continue to the next color\n        if not coords:\n            continue \n\n        # Calculate the bounding box of these cells\n        bbox = calculate_bounding_box(coords)\n        \n        # Safety check, should not happen if coords is not empty\n        if bbox is None:\n             continue \n\n        # Check if the shape formed by these cells is a solid rectangle\n        if is_solid_rectangle(coords, bbox):\n            # If it is a solid rectangle:\n            # Iterate through all the cell coordinates originally found for this color\n            for r, c in coords:\n                # Set the color of the corresponding cell (r, c) in the *output* grid to 0\n                output_grid_np[r, c] = 0\n                \n    # Convert the modified NumPy array back to a list of lists for the final output\n    return output_grid_np.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 14551,
    "candidates_token_count": 1213,
    "total_token_count": 15764,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.568212,
  "retries": 1
}