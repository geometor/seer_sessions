{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentify and remove solid rectangular shapes of a single color from the input grid, \nleaving other shapes and the background intact.\n\"\"\"\n\nimport numpy as np\nimport copy\n\ndef find_colored_cells(grid: np.ndarray, color: int) -> list[tuple[int, int]]:\n    \"\"\"Finds all coordinates (row, col) of cells with the specified color.\"\"\"\n    rows, cols = np.where(grid == color)\n    return list(zip(rows, cols))\n\ndef calculate_bounding_box(coords: list[tuple[int, int]]) -> tuple[int, int, int, int] | None:\n    \"\"\"Calculates the bounding box (min_r, min_c, max_r, max_c) for a list of coordinates.\"\"\"\n    if not coords:\n        return None\n    min_r = min(r for r, c in coords)\n    min_c = min(c for r, c in coords)\n    max_r = max(r for r, c in coords)\n    max_c = max(c for r, c in coords)\n    return min_r, min_c, max_r, max_c\n\ndef is_solid_rectangle(coords: list[tuple[int, int]], bbox: tuple[int, int, int, int]) -> bool:\n    \"\"\"Checks if the coordinates form a solid rectangle within the bounding box.\"\"\"\n    if not coords or bbox is None:\n        return False\n    min_r, min_c, max_r, max_c = bbox\n    expected_area = (max_r - min_r + 1) * (max_c - min_c + 1)\n    actual_cell_count = len(coords)\n    return actual_cell_count == expected_area\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Transforms the input grid by identifying solid rectangular shapes of a single \n    non-zero color and replacing them with the background color (0).\n    \"\"\"\n    # Initialize output_grid as a deep copy of the input\n    output_grid = copy.deepcopy(input_grid)\n    \n    # Convert to numpy array for easier processing\n    grid_np = np.array(input_grid, dtype=int)\n    \n    # Find unique non-zero colors present in the grid\n    unique_colors = np.unique(grid_np)\n    non_zero_colors = unique_colors[unique_colors != 0]\n\n    # Iterate through each unique non-zero color\n    for color in non_zero_colors:\n        # Find all cells with this color\n        coords = find_colored_cells(grid_np, color)\n        \n        if not coords:\n            continue # Skip if no cells found for this color\n\n        # Calculate the bounding box for these cells\n        bbox = calculate_bounding_box(coords)\n        \n        if bbox is None:\n             continue # Should not happen if coords is not empty, but safety check\n\n        # Check if the shape formed by these cells is a solid rectangle\n        if is_solid_rectangle(coords, bbox):\n            # If it is a solid rectangle, change its cells to 0 in the output grid\n            for r, c in coords:\n                # Modify the list-based output_grid\n                output_grid[r][c] = 0\n                \n    # Return the modified output grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3605,
    "candidates_token_count": 1165,
    "total_token_count": 4770,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.949862,
  "retries": 1
}