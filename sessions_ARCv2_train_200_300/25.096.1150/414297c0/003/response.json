{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport collections\n\n\"\"\"\nExtracts a subgrid defined by the bounding box of the single largest monochromatic\nconnected component from the input grid. Within this subgrid, original non-zero\ncolors are preserved, and background cells (0) are filled with the color of the\nlargest monochromatic component.\n\"\"\"\n\n# Helper function for Breadth-First Search (BFS) to find a single monochromatic connected component\ndef _bfs_mono(grid: list[list[int]], start_row: int, start_col: int, visited_component: set[tuple[int, int]], target_color: int) -> set[tuple[int, int]]:\n    \"\"\"\n    Performs BFS to find a connected component of cells matching a specific target_color.\n    Marks cells visited *within this specific component search*.\n    \"\"\"\n    rows, cols = len(grid), len(grid[0])\n    component = set()\n    queue = collections.deque([(start_row, start_col)])\n    # Mark start cell as visited *for this component* to avoid adding it multiple times\n    visited_component.add((start_row, start_col)) \n    component.add((start_row, start_col))\n\n    while queue:\n        r, c = queue.popleft()\n        # Explore neighbors (4-directional)\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n            # Check bounds\n            if 0 <= nr < rows and 0 <= nc < cols:\n                # Check if neighbor has the target color and hasn't been visited *for this component* yet\n                if grid[nr][nc] == target_color and (nr, nc) not in visited_component:\n                    visited_component.add((nr, nc))\n                    component.add((nr, nc))\n                    queue.append((nr, nc))\n    return component\n\n# Helper function to find the largest monochromatic component\ndef _find_largest_mono_component(grid: list[list[int]]) -> tuple[set[tuple[int, int]], int]:\n    \"\"\"\n    Finds the largest monochromatic component in the grid.\n    Returns the set of coordinates of the largest component and its color.\n    Returns an empty set and color 0 if no non-zero cells exist.\n    \"\"\"\n    if not grid or not grid[0]:\n        return set(), 0\n        \n    rows, cols = len(grid), len(grid[0])\n    # visited_overall tracks cells that are already part of *any* found component\n    visited_overall = set() \n    largest_component_coords = set()\n    largest_size = 0\n    largest_component_color = 0\n\n    for r in range(rows):\n        for c in range(cols):\n            color = grid[r][c]\n            # If it's a non-zero cell and not yet part of any found component\n            if color != 0 and (r, c) not in visited_overall:\n                # Use a temporary visited set for the current BFS search\n                visited_component_search = set()\n                current_component = _bfs_mono(grid, r, c, visited_component_search, color)\n                current_size = len(current_component)\n                \n                # Mark all cells of the found component as visited overall\n                visited_overall.update(current_component) \n\n                # Check if this component is the largest found so far\n                if current_size > largest_size:\n                    largest_size = current_size\n                    largest_component_coords = current_component\n                    largest_component_color = color\n                    \n    return largest_component_coords, largest_component_color\n\n# Helper function to calculate the bounding box of a component\ndef _get_bounding_box(component_coords: set[tuple[int, int]]) -> tuple[int, int, int, int]:\n    \"\"\"Calculates the minimum bounding box (min_r, max_r, min_c, max_c) for a component.\"\"\"\n    if not component_coords:\n        # Represents an invalid/empty box\n        return 0, -1, 0, -1 \n\n    min_r = min(r for r, c in component_coords)\n    max_r = max(r for r, c in component_coords)\n    min_c = min(c for r, c in component_coords)\n    max_c = max(c for r, c in component_coords)\n    return min_r, max_r, min_c, max_c\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \n    # 1. Find the largest monochromatic component and its color\n    largest_component_coords, target_color = _find_largest_mono_component(input_grid)\n\n    # Handle edge case: no non-zero components found\n    if not largest_component_coords:\n        return [] # Or potentially return an empty grid of appropriate size? Task implies output based on a component.\n\n    # 2. Calculate the bounding box of the largest component\n    min_r, max_r, min_c, max_c = _get_bounding_box(largest_component_coords)\n    \n    # Handle edge case: invalid bounding box (shouldn't happen if component found)\n    if max_r < min_r or max_c < min_c:\n         return []\n\n    # 3. Calculate output grid dimensions\n    out_rows = max_r - min_r + 1\n    out_cols = max_c - min_c + 1\n\n    # 4. Create and populate the output grid\n    output_grid = [[0 for _ in range(out_cols)] for _ in range(out_rows)] # Initialize with placeholder\n\n    # Iterate through the input grid cells within the bounding box\n    for r in range(min_r, max_r + 1):\n        for c in range(min_c, max_c + 1):\n            # Get the color from the input grid\n            input_color = input_grid[r][c]\n            \n            # Calculate the corresponding coordinates in the output grid\n            out_r = r - min_r\n            out_c = c - min_c\n            \n            # Apply the filling rule:\n            # If the input cell is background (0), fill with the target color.\n            # Otherwise, copy the input cell's color.\n            if input_color == 0:\n                output_grid[out_r][out_c] = target_color\n            else:\n                output_grid[out_r][out_c] = input_color\n                \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 17069,
    "candidates_token_count": 2109,
    "total_token_count": 19178,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 18.105894,
  "retries": 1
}