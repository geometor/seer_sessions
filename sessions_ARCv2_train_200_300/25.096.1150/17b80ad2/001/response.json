{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nProcesses each column of the input grid independently. Within each column, iterates from top to bottom. When a non-zero number is encountered, it becomes the 'current fill value'. Subsequent zero cells below it in the same column are filled with this 'current fill value' until another non-zero number is found, which then becomes the new 'current fill value'. Zeros above the first non-zero number in a column remain zero.\n\"\"\"\n\nimport copy\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Fills zero cells downwards in each column with the value of the nearest non-zero cell above it.\n\n    Args:\n        input_grid: A list of lists representing the 2D grid of integers.\n\n    Returns:\n        A new list of lists representing the transformed grid.\n    \"\"\"\n    # Handle empty input grid case\n    if not input_grid or not input_grid[0]:\n        return []\n\n    # Get grid dimensions\n    num_rows = len(input_grid)\n    num_cols = len(input_grid[0])\n\n    # Initialize output_grid as a deep copy to avoid modifying the original input\n    output_grid = copy.deepcopy(input_grid)\n\n    # Iterate through each column\n    for j in range(num_cols):\n        # Initialize the value to fill downwards for the current column\n        current_fill_value = 0\n\n        # Iterate through each row in the current column\n        for i in range(num_rows):\n            # Check the value in the original input grid\n            if input_grid[i][j] != 0:\n                # Update the fill value if a non-zero number is found\n                current_fill_value = input_grid[i][j]\n                # The output grid already has this non-zero value from the deepcopy\n            else:\n                # If the current cell is zero and we have a fill value\n                if current_fill_value != 0:\n                    # Fill the corresponding cell in the output grid\n                    output_grid[i][j] = current_fill_value\n\n    # Return the transformed grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3928,
    "candidates_token_count": 772,
    "total_token_count": 4700,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 7.371613,
  "retries": 1
}