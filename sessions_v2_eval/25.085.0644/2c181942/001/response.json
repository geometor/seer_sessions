{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nApply gravity to non-background pixels within each column independently.\n\nThe transformation simulates gravity acting on pixels that are not the background color (azure - 8). \nFor each column of the input grid, all non-background pixels \"fall\" downwards until they either reach the bottom of the grid or land on top of another non-background pixel already settled in that column. The relative vertical order of non-background pixels within a column is preserved. The background color fills the remaining spaces.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Applies gravity independently to each column of the input grid.\n\n    Args:\n        input_grid (np.ndarray): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.ndarray: A 2D numpy array representing the transformed grid.\n    \"\"\"\n    # Define the background color\n    background_color = 8\n\n    # Get the dimensions of the input grid\n    height, width = input_grid.shape\n\n    # Initialize the output grid with the background color\n    output_grid = np.full((height, width), background_color, dtype=int)\n\n    # Iterate through each column\n    for c in range(width):\n        # Initialize the target row index for placing the next non-background pixel\n        # Start from the bottom row\n        target_r = height - 1\n\n        # Iterate through the rows of the current column from bottom to top\n        for r in range(height - 1, -1, -1):\n            # Get the color of the pixel in the input grid\n            pixel_color = input_grid[r, c]\n\n            # Check if the pixel is not the background color\n            if pixel_color != background_color:\n                # Place the non-background pixel in the output grid at the current target row\n                output_grid[target_r, c] = pixel_color\n                # Move the target row index up by one for the next non-background pixel\n                target_r -= 1\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7384,
    "candidates_token_count": 455,
    "total_token_count": 7839,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 6.651375
}