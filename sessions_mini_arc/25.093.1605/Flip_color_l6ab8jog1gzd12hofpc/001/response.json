{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransforms the input grid by swapping the two unique non-zero color values found within it.\nAll instances of the first non-zero color are changed to the second, and vice-versa.\nThe background color (0) remains unchanged.\n\"\"\"\n\ndef find_unique_non_zero_colors(grid):\n    \"\"\"Finds the unique non-zero values in a grid.\"\"\"\n    flat_grid = grid.flatten()\n    unique_values = np.unique(flat_grid)\n    non_zero_values = unique_values[unique_values != 0]\n    if len(non_zero_values) != 2:\n        # According to the examples, we expect exactly two non-zero colors.\n        # Handle potential errors or unexpected inputs if needed,\n        # but for this specific task, we assume 2.\n        # You might raise an error or return None/empty list depending on requirements.\n        # For now, let's assume the constraint holds based on the examples.\n        # If there are fewer or more than 2, the behavior might be undefined by the examples.\n        # Let's return the found ones, the calling function should handle the count.\n        pass \n    return non_zero_values\n\ndef transform(input_grid):\n    \"\"\"\n    Applies a color swap transformation to the input grid.\n\n    Args:\n        input_grid (list of lists or numpy array): The input grid of numbers.\n\n    Returns:\n        numpy array: The transformed grid with colors swapped.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n\n    # Find the two unique non-zero colors to be swapped\n    swap_colors = find_unique_non_zero_colors(input_np)\n\n    # Check if exactly two colors were found for swapping\n    if len(swap_colors) != 2:\n        # If not exactly two non-zero colors are found, return the original grid\n        # or handle as an error case. Based on examples, we expect two.\n        # Returning the original grid might be a safe default if the rule cannot be applied.\n        print(f\"Warning: Expected 2 unique non-zero colors, found {len(swap_colors)}. Returning original grid.\")\n        return input_np \n\n    color_1, color_2 = swap_colors[0], swap_colors[1]\n\n    # Create a copy of the input grid to modify\n    # This ensures the original grid is not changed and handles background (0) correctly\n    output_grid = np.copy(input_np)\n\n    # Iterate through the grid and apply the swap rule\n    rows, cols = input_np.shape\n    for r in range(rows):\n        for c in range(cols):\n            # Read the input color\n            input_color = input_np[r, c]\n\n            # Apply the swap logic\n            if input_color == color_1:\n                output_grid[r, c] = color_2\n            elif input_color == color_2:\n                output_grid[r, c] = color_1\n            # Else (input_color is 0 or another value), it remains unchanged\n            # as output_grid was initialized as a copy.\n\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1476,
    "candidates_token_count": 749,
    "total_token_count": 2225,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.255541,
  "retries": 1
}