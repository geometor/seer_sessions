{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\n\ndef find_dominant_digit(grid):\n  \"\"\"\n  Finds the first non-zero digit encountered in the grid.\n  Assumes based on examples that only one type of non-zero digit exists per grid.\n  \"\"\"\n  for r in range(len(grid)):\n    for c in range(len(grid[0])):\n      if grid[r][c] != 0:\n        return grid[r][c]\n  return 0 # Return 0 if only zeros are found\n\ndef reflect_horizontally(grid):\n  \"\"\"\n  Reflects the grid horizontally (across the vertical center line).\n  \"\"\"\n  rows = len(grid)\n  cols = len(grid[0])\n  output_grid = [[0 for _ in range(cols)] for _ in range(rows)]\n  for r in range(rows):\n    for c in range(cols):\n      output_grid[r][cols - 1 - c] = grid[r][c]\n  return output_grid\n\ndef reflect_vertically(grid):\n  \"\"\"\n  Reflects the grid vertically (across the horizontal center line).\n  \"\"\"\n  rows = len(grid)\n  cols = len(grid[0])\n  output_grid = [[0 for _ in range(cols)] for _ in range(rows)]\n  for r in range(rows):\n    for c in range(cols):\n      output_grid[rows - 1 - r][c] = grid[r][c]\n  return output_grid\n\ndef transform(input_grid):\n  \"\"\"\n  Transforms the input grid based on the dominant non-zero digit.\n  - If the dominant digit is 4, performs a horizontal reflection.\n  - If the dominant digit is 3, performs a vertical reflection.\n  - If the grid contains only 0s, returns the grid unchanged.\n  \"\"\"\n  # Find the non-zero digit that determines the transformation type\n  dominant_digit = find_dominant_digit(input_grid)\n\n  # Initialize output_grid as a copy initially (useful if no transformation needed)\n  # We will overwrite it if reflection occurs. Deep copy to avoid modifying input.\n  output_grid = copy.deepcopy(input_grid) \n\n  # Apply reflection based on the dominant digit\n  if dominant_digit == 4:\n    # Perform horizontal reflection\n    output_grid = reflect_horizontally(input_grid)\n  elif dominant_digit == 3:\n    # Perform vertical reflection\n    output_grid = reflect_vertically(input_grid)\n  # If dominant_digit is 0, no non-zero elements were found, \n  # and the initial copy is returned implicitly.\n\n  return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1577,
    "candidates_token_count": 1124,
    "total_token_count": 2701,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.424635,
  "retries": 1
}