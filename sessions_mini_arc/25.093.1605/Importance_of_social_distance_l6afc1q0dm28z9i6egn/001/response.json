{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n# Helper function to find connected components using Breadth-First Search (BFS)\ndef _find_connected_island(grid, start_row, start_col, visited):\n    \"\"\"\n    Performs BFS starting from (start_row, start_col) to find a connected island of 5s.\n    Marks visited cells within the island.\n\n    Args:\n        grid (np.array): The input grid.\n        start_row (int): The starting row index.\n        start_col (int): The starting column index.\n        visited (np.array): A boolean array tracking visited cells.\n\n    Returns:\n        tuple: A tuple containing:\n            - list: A list of (row, col) tuples representing the cells in the found island.\n            - int: The number of cells in the island (island size).\n    \"\"\"\n    rows, cols = grid.shape\n    # Check if starting point is valid for starting a search\n    if not (0 <= start_row < rows and 0 <= start_col < cols) or \\\n       visited[start_row, start_col] or \\\n       grid[start_row, start_col] != 5:\n        return [], 0 # Return empty if start is invalid, visited, or not a 5\n\n    q = deque([(start_row, start_col)]) # Initialize queue with the starting cell\n    island_cells = [] # To store coordinates of cells in this island\n    visited[start_row, start_col] = True # Mark the starting cell as visited\n\n    # Standard BFS loop\n    while q:\n        r, c = q.popleft() # Get the next cell to process\n        island_cells.append((r, c)) # Add it to the current island\n\n        # Explore 4-directional neighbors (up, down, left, right)\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n\n            # Check if the neighbor is within grid bounds\n            if 0 <= nr < rows and 0 <= nc < cols:\n                # Check if the neighbor is a '5' and has not been visited yet\n                if not visited[nr, nc] and grid[nr, nc] == 5:\n                    visited[nr, nc] = True # Mark neighbor as visited\n                    q.append((nr, nc)) # Add neighbor to the queue\n\n    return island_cells, len(island_cells)\n\n\ndef transform(input_grid_list):\n    \"\"\"\n    Transforms the input grid based on connected components of '5's.\n    Finds all connected components (islands) of cells containing '5', using 4-way adjacency.\n    If a connected component contains 2 or more cells, all '5's within that component are changed to '2's.\n    Components with only one '5' remain unchanged. Cells containing '0' remain unchanged.\n\n    Args:\n        input_grid_list (list): A list of lists representing the input grid.\n\n    Returns:\n        list: A list of lists representing the transformed output grid.\n    \"\"\"\n    # Convert input list of lists to a NumPy array for easier manipulation\n    input_grid = np.array(input_grid_list, dtype=int)\n    rows, cols = input_grid.shape\n\n    # Create a copy of the input grid to modify as the output grid\n    output_grid = np.copy(input_grid)\n\n    # Create a boolean grid to keep track of visited cells during island finding\n    visited = np.zeros_like(input_grid, dtype=bool)\n\n    # Iterate through each cell of the grid\n    for r in range(rows):\n        for c in range(cols):\n            # Check if the current cell contains a '5' and has not been visited yet\n            if input_grid[r, c] == 5 and not visited[r, c]:\n                # If an unvisited '5' is found, start BFS to find the island it belongs to\n                island_cells, island_size = _find_connected_island(input_grid, r, c, visited)\n\n                # Check if the found island has a size of 2 or more\n                if island_size >= 2:\n                    # If the island size is >= 2, change all '5's in this island to '2's in the output grid\n                    for ir, ic in island_cells:\n                        output_grid[ir, ic] = 2\n            # If cell is 0 or already visited, continue to the next cell\n\n    # Convert the final NumPy array back to a list of lists for the required output format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 877,
    "candidates_token_count": 1075,
    "total_token_count": 1952,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 58.559795,
  "retries": 1
}