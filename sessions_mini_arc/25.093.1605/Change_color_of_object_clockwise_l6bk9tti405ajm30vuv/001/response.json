{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by remapping its non-zero values based on their frequency.\n1. Count the frequency of each unique non-zero value in the input grid.\n2. Create two ranked lists of these unique non-zero values:\n   - InputRank: Sorted primarily by frequency descending, secondarily by value ascending.\n   - TargetRank: Sorted primarily by frequency ascending, secondarily by value descending.\n3. Establish a mapping where the i-th value in InputRank maps to the i-th value in TargetRank.\n4. Create the output grid by replacing each non-zero value in the input grid with its corresponding mapped value, while keeping zero values unchanged.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef _get_value_frequencies(grid):\n    \"\"\"Counts the frequency of each non-zero value in the grid.\"\"\"\n    flat_grid = grid.flatten()\n    # Filter out zeros before counting\n    non_zero_values = flat_grid[flat_grid != 0]\n    frequencies = Counter(non_zero_values)\n    return dict(frequencies)\n\ndef _create_mapping(frequencies):\n    \"\"\"Creates the value mapping based on frequency rankings.\"\"\"\n    if not frequencies: # Handle cases with no non-zero numbers\n        return {}\n\n    # Get unique non-zero values\n    unique_values = list(frequencies.keys())\n\n    # Sort for InputRank: frequency descending, value ascending\n    ranked_input_values = sorted(\n        unique_values,\n        key=lambda val: (-frequencies[val], val)\n    )\n\n    # Sort for TargetRank: frequency ascending, value descending\n    ranked_target_values = sorted(\n        unique_values,\n        key=lambda val: (frequencies[val], -val)\n    )\n\n    # Create the mapping dictionary\n    mapping = {\n        input_val: target_val\n        for input_val, target_val in zip(ranked_input_values, ranked_target_values)\n    }\n    return mapping\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the frequency-based value remapping transformation to the input grid.\n    \"\"\"\n    # Convert input list of lists to a numpy array for easier processing\n    input_array = np.array(input_grid, dtype=int)\n\n    # Step 1: Count frequencies of non-zero values\n    frequencies = _get_value_frequencies(input_array)\n\n    # Step 2 & 3: Determine the value mapping based on frequency rankings\n    value_map = _create_mapping(frequencies)\n\n    # Step 4: Create the output grid by applying the mapping\n    # Initialize output grid as a copy of the input to preserve dimensions and zeros\n    output_array = np.copy(input_array)\n\n    # Iterate through the cells and apply the mapping\n    rows, cols = input_array.shape\n    for r in range(rows):\n        for c in range(cols):\n            input_val = input_array[r, c]\n            # Only map non-zero values\n            if input_val != 0 and input_val in value_map:\n                output_array[r, c] = value_map[input_val]\n\n    # Convert the result back to a list of lists\n    output_grid = output_array.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1733,
    "candidates_token_count": 751,
    "total_token_count": 2484,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.949252,
  "retries": 1
}