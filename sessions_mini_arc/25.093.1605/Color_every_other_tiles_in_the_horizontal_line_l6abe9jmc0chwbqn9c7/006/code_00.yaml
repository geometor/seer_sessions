Data_Structure:
  Type: 2D Grid (List of Lists or NumPy Array)
  Dimensions: 5x5 (consistent across examples)
  Cell_Values: Integers [0, 4, 5] in input and output.

Input_Objects:
  - Name: Grid_Cell
    Properties:
      - Value: Integer (0 or 5)
      - Position: (row_index, column_index)
  - Name: Horizontal_Run_of_5s
    Properties:
      - Cells: Contiguous sequence of Grid_Cells in a single row with Value = 5.
      - Start_Column: column_index of the first cell in the run.
      - End_Column: column_index of the last cell in the run.
      - Length: Number of cells in the run.

Output_Objects:
  - Name: Grid_Cell
    Properties:
      - Value: Integer (0, 4, or 5)
      - Position: (row_index, column_index)

Relationships:
  - Grid_Cells belong to a specific row.
  - Grid_Cells can form Horizontal_Runs_of_5s within a row.

Transformation_Rule:
  Scope: Operates independently on each row of the input grid.
  Condition: Targets Horizontal_Runs_of_5s where Length > 1.
  Action:
    - Iterate through cells within a qualifying Horizontal_Run_of_5s.
    - Determine the 1-based position of the cell *within that run*.
    - If the position is odd (1st, 3rd, 5th, ...): Change the cell's Value to 4 in the output grid.
    - If the position is even (2nd, 4th, ...): Keep the cell's Value as 5 in the output grid.
  Default_Behavior:
    - Grid_Cells with Value 0 remain unchanged.
    - Grid_Cells with Value 5 that are part of a Horizontal_Run_of_5s with Length = 1 remain unchanged.

Anomaly_Note:
  - The expected output for `train_3` shows a cell at `[0, 2]` changing from `0` (input) to `5` (output).
  - This specific change contradicts the general transformation rule derived from all other examples.
  - It is assumed to be an error in the provided `train_3` expected output data.