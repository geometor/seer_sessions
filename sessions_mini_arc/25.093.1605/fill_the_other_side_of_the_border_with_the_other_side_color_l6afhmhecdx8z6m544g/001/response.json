{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque, Counter\n\n\"\"\"\nTransforms an input grid based on a unique 'trigger' number.\n\n1. Identifies a unique non-zero integer ('trigger number', T) in the input grid and its location (r_t, c_t).\n2. Determines a starting corner (r_s, c_s) for a fill process based on the quadrant of the trigger number's location.\n   - Top-Left quadrant -> Bottom-Right corner\n   - Bottom-Right quadrant -> Top-Left corner\n   - Bottom-Left quadrant -> Top-Right corner\n   - Top-Right quadrant -> Bottom-Left corner\n3. Initializes the output grid as a copy of the input grid.\n4. Sets the cell at the original trigger location (r_t, c_t) in the output grid to 0.\n5. Performs a flood fill (BFS) starting from the determined corner (r_s, c_s):\n   - The fill uses the trigger number T as the fill value.\n   - The fill propagates only through cells that were originally 0 in the input grid.\n   - The fill stops when it encounters a non-zero cell from the input grid.\n6. Returns the modified output grid.\n\"\"\"\n\ndef _find_trigger(grid_np):\n    \"\"\"Finds the unique non-zero number and its location in the grid.\"\"\"\n    counts = Counter(grid_np.flatten())\n    trigger_num = -1\n    for num, count in counts.items():\n        if num != 0 and count == 1:\n            trigger_num = num\n            break\n    \n    if trigger_num == -1:\n        # Fallback: In case the 'unique' logic needs adjustment (e.g., based on examples like train_4 where 8 appears many times)\n        # Let's find any non-zero number that isn't the most frequent non-zero number.\n        # This handles cases where there might be a background number like 8.\n        non_zero_counts = {k: v for k, v in counts.items() if k != 0}\n        if not non_zero_counts:\n             raise ValueError(\"No non-zero numbers found in the input grid.\")\n        # Find the number with the minimum count among non-zero numbers\n        trigger_num = min(non_zero_counts, key=non_zero_counts.get)\n        if non_zero_counts[trigger_num] != 1:\n             print(f\"Warning: No strictly unique non-zero number found. Using {trigger_num} as trigger.\")\n\n\n    locations = np.where(grid_np == trigger_num)\n    if len(locations[0]) == 0:\n         raise ValueError(f\"Trigger number {trigger_num} not found in the grid, something went wrong.\")\n         \n    trigger_loc = (locations[0][0], locations[1][0])\n    return trigger_num, trigger_loc\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n    \"\"\"\n    # Convert input to numpy array for easier processing\n    grid_np = np.array(input_grid, dtype=int)\n    H, W = grid_np.shape\n\n    # Initialize output_grid as a copy of the input\n    output_grid = grid_np.copy()\n\n    # 1. Find the trigger number and its location\n    try:\n        trigger_num, (r_t, c_t) = _find_trigger(grid_np)\n    except ValueError as e:\n        print(f\"Error finding trigger: {e}\")\n        return input_grid # Return original grid if trigger identification fails\n\n    # 2. Determine the starting corner based on trigger location quadrant\n    if r_t < H / 2 and c_t < W / 2: # Top-Left quadrant\n        start_corner = (H - 1, W - 1) # Bottom-Right corner\n    elif r_t >= H / 2 and c_t >= W / 2: # Bottom-Right quadrant\n        start_corner = (0, 0) # Top-Left corner\n    elif r_t >= H / 2 and c_t < W / 2: # Bottom-Left quadrant\n        start_corner = (0, W - 1) # Top-Right corner\n    else: # Top-Right quadrant (r_t < H/2 and c_t >= W/2)\n        start_corner = (H - 1, 0) # Bottom-Left corner\n\n    # 4. Set the original trigger location in the output grid to 0\n    output_grid[r_t, c_t] = 0\n\n    # 5. Perform BFS flood fill from the start corner\n    queue = deque([start_corner])\n    visited = set()\n\n    while queue:\n        r, c = queue.popleft()\n\n        # Check bounds\n        if not (0 <= r < H and 0 <= c < W):\n            continue\n\n        # Check if visited\n        if (r, c) in visited:\n            continue\n        visited.add((r, c))\n\n        # Check the value in the *original* input grid\n        if grid_np[r, c] == 0:\n            # Fill the cell in the output grid\n            output_grid[r, c] = trigger_num\n            \n            # Add neighbors to the queue for propagation\n            for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                nr, nc = r + dr, c + dc\n                if (nr, nc) not in visited: # Add only if not visited yet\n                     queue.append((nr, nc))\n        # If the original cell was non-zero, the fill stops here for this path\n\n    # Convert back to list of lists if needed (often desired format)\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2336,
    "candidates_token_count": 1908,
    "total_token_count": 4244,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 17.289656,
  "retries": 1
}