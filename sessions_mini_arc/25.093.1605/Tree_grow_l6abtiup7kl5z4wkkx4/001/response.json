{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport copy\n\n\"\"\"\nTransforms an input grid based on the following rule:\n1. Cells with value 9 remain unchanged.\n2. Cells with value 0 are transformed to 3 if they are adjacent (horizontally, vertically, or diagonally) to a cell with value 9 in the input grid.\n3. Cells with value 0 that are not adjacent to any 9 remain 0.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid: A list of lists representing the input 2D grid.\n\n    Returns:\n        A list of lists representing the transformed output grid.\n    \"\"\"\n    # Convert input list of lists to a NumPy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    # Get grid dimensions\n    height, width = input_np.shape\n    # Initialize the output grid as a deep copy of the input grid\n    # This handles preserving the 9s and the initial state of 0s\n    output_np = input_np.copy()\n\n    # Define the relative coordinates for the 8 neighbors (Moore neighborhood)\n    neighbors = [\n        (-1, -1), (-1, 0), (-1, 1),\n        ( 0, -1),          ( 0, 1),\n        ( 1, -1), ( 1, 0), ( 1, 1),\n    ]\n\n    # Iterate through each cell of the input grid\n    for r in range(height):\n        for c in range(width):\n            # Check if the current cell in the *input* grid is 0\n            if input_np[r, c] == 0:\n                # Assume initially that no neighbor is 9\n                is_neighbor_9 = False\n                # Check all 8 neighbors\n                for dr, dc in neighbors:\n                    nr, nc = r + dr, c + dc\n                    # Check if the neighbor coordinates are within the grid bounds\n                    if 0 <= nr < height and 0 <= nc < width:\n                        # Check if the neighbor in the *input* grid is 9\n                        if input_np[nr, nc] == 9:\n                            is_neighbor_9 = True\n                            # Found a 9 neighbor, no need to check others for this cell\n                            break\n                \n                # If a neighbor was 9, change the corresponding cell in the *output* grid to 3\n                if is_neighbor_9:\n                    output_np[r, c] = 3\n            # If the input cell was 9, it's already copied to output_np\n            # If the input cell was 0 and had no 9 neighbors, it remains 0 in output_np\n\n    # Convert the NumPy array back to a list of lists for the return value\n    output_grid = output_np.tolist()\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1672,
    "candidates_token_count": 667,
    "total_token_count": 2339,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.703132,
  "retries": 1
}