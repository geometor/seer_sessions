task_context:
  domain: 2D grid manipulation
  grid_size: constant 5x5
  cell_content: integers (0 indicating background, non-zero indicating objects)
  object_count: exactly 2 distinct non-zero objects per input grid

input_analysis:
  objects:
    - id: object_1
      attributes:
        color_value: C1 (first non-zero integer found)
        pixels: set of (row, col) where input grid value is C1
        bounding_box: computed (min_row1, min_col1, max_row1, max_col1) from pixels
        dimensions: (height1, width1) calculated from bounding_box
        centroid: (avg_row1, avg_col1) calculated from pixels
    - id: object_2
      attributes:
        color_value: C2 (second non-zero integer found, C2 != C1)
        pixels: set of (row, col) where input grid value is C2
        bounding_box: computed (min_row2, min_col2, max_row2, max_col2) from pixels
        dimensions: (height2, width2) calculated from bounding_box
        centroid: (avg_row2, avg_col2) calculated from pixels

transformation_logic:
  - step: Identify C1 and C2 and their corresponding pixel sets, bounding boxes, dimensions, and centroids.
  - step: Compare centroids (avg_row1, avg_col1) and (avg_row2, avg_col2).
  - step: Determine relative positioning based on centroid comparison:
      - vertical_relation: object_1 is 'higher' (smaller avg_row) or 'lower' than object_2.
      - horizontal_relation: object_1 is 'lefter' (smaller avg_col) or 'righter' than object_2.
  - step: Assign output placement corners based on relative positioning:
      - If object_1 is higher and lefter, it gets TopLeft, object_2 gets BottomRight.
      - If object_1 is higher and righter, it gets TopRight, object_2 gets BottomLeft.
      - If object_1 is lower and lefter, it gets BottomLeft, object_2 gets TopRight.
      - If object_1 is lower and righter, it gets BottomRight, object_2 gets TopLeft.
  - step: Generate output grid (initially all background).
  - step: Draw object_1 as a solid rectangle using C1, dimensions (height1, width1), anchored at its assigned corner.
  - step: Draw object_2 as a solid rectangle using C2, dimensions (height2, width2), anchored at its assigned (opposite) corner.

output_specification:
  grid: same dimensions as input (5x5)
  content: background color (0) plus two solid rectangular blocks corresponding to the two input objects, placed in opposite corners.
  rectangle_1:
    color: C1
    size: (height1, width1) from input bounding box
    position: determined by corner assignment rule
  rectangle_2:
    color: C2
    size: (height2, width2) from input bounding box
    position: diagonally opposite to rectangle_1's corner