{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by identifying the most frequent non-zero number within it \nand replacing all other non-zero numbers with this most frequent number. \nZeroes remain unchanged.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef _count_non_zero_frequencies(grid):\n    \"\"\"Counts the frequency of each non-zero number in the grid.\"\"\"\n    # Flatten the grid to easily iterate through all elements\n    flat_grid = grid.flatten()\n    # Filter out zeros\n    non_zeros = [num for num in flat_grid if num != 0]\n    # Count frequencies using Counter\n    if not non_zeros:\n        return None # Return None if there are no non-zero numbers\n    return Counter(non_zeros)\n\ndef _find_most_frequent_number(freq_map):\n    \"\"\"Finds the number with the highest frequency in the frequency map.\"\"\"\n    if not freq_map:\n        return None # No non-zero numbers found\n    # Find the element with the highest count\n    # most_common(1) returns a list of tuples [(element, count)]\n    most_common_item = freq_map.most_common(1)\n    if not most_common_item:\n         return None # Should not happen if freq_map is not empty, but safe check\n    return most_common_item[0][0]\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule: replaces all non-zero elements with the\n    most frequent non-zero element found in the input grid.\n    \"\"\"\n    # Convert input to a NumPy array for easier manipulation\n    input_np = np.array(input_grid)\n    \n    # 1. Count the frequency of each unique non-zero number\n    freq_map = _count_non_zero_frequencies(input_np)\n\n    # Handle the case where there are no non-zero numbers\n    if freq_map is None:\n        return input_grid # Return the original grid if no non-zeros\n\n    # 2. Determine the most frequent non-zero number (target number)\n    target_number = _find_most_frequent_number(freq_map)\n\n    # Handle edge case again (shouldn't be needed if freq_map check is done)\n    if target_number is None:\n         return input_grid\n\n    # 3. Create the output grid, initialized as a copy of the input\n    #    Or initialize with zeros and fill non-zeros\n    output_grid = np.zeros_like(input_np) # Initialize with zeros\n\n    # 4. Iterate through the input grid and apply the replacement rule\n    rows, cols = input_np.shape\n    for r in range(rows):\n        for c in range(cols):\n            # If the input cell is non-zero, replace it with the target number\n            if input_np[r, c] != 0:\n                output_grid[r, c] = target_number\n            # Else: leave it as zero (already handled by initialization)\n\n    # Convert back to list of lists if necessary for the environment\n    return output_grid.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1681,
    "candidates_token_count": 1000,
    "total_token_count": 2681,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.941567,
  "retries": 1
}