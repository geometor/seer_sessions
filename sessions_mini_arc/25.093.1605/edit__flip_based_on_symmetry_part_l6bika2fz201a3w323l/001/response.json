{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\n\n\"\"\"\n1.  **Analyze the Input Grid:** Examine the input grid to identify all cells with non-zero values (foreground cells).\n2.  **Determine Global Column Boundaries:** Find the minimum column index (`min_nz_col`) and the maximum column index (`max_nz_col`) among all foreground cells identified in step 1.\n3.  **Locate the Moving Cell:** Scan the input grid row by row to find the unique foreground cell `(r_move, c_move)` with value `v_move` that has background cells (0) or grid boundaries immediately to its left and right within the same row `r_move`.\n4.  **Calculate the Destination Column:** Compute the target column index `c_new` for the moving cell using the formula: `c_new = min_nz_col + max_nz_col - c_move`.\n5.  **Construct the Output Grid:**\n    a. Create a new grid identical to the input grid.\n    b. Change the value of the cell at the original position `(r_move, c_move)` in the new grid to 0.\n    c. Change the value of the cell at the destination position `(r_move, c_new)` in the new grid to `v_move`.\n6.  **Output:** The modified grid is the final output.\n\"\"\"\n\ndef find_non_zero_cells(grid):\n    \"\"\"Finds all cells with non-zero values.\"\"\"\n    non_zero_cells = []\n    height = len(grid)\n    if height == 0:\n        return non_zero_cells\n    width = len(grid[0])\n    for r in range(height):\n        for c in range(width):\n            if grid[r][c] != 0:\n                non_zero_cells.append({'r': r, 'c': c, 'v': grid[r][c]})\n    return non_zero_cells\n\ndef get_global_column_range(non_zero_cells):\n    \"\"\"Calculates the min and max column index containing non-zero cells.\"\"\"\n    if not non_zero_cells:\n        return None, None # Or handle as appropriate for the task context\n    min_c = min(cell['c'] for cell in non_zero_cells)\n    max_c = max(cell['c'] for cell in non_zero_cells)\n    return min_c, max_c\n\ndef find_horizontally_isolated_cell(grid):\n    \"\"\"Finds the unique non-zero cell horizontally isolated by zeros or boundaries.\"\"\"\n    height = len(grid)\n    if height == 0:\n        return None\n    width = len(grid[0])\n    if width == 0:\n        return None\n\n    for r in range(height):\n        for c in range(width):\n            value = grid[r][c]\n            if value != 0:\n                # Check left neighbor\n                is_left_bg = (c == 0) or (grid[r][c - 1] == 0)\n                # Check right neighbor\n                is_right_bg = (c == width - 1) or (grid[r][c + 1] == 0)\n\n                if is_left_bg and is_right_bg:\n                    return {'r': r, 'c': c, 'v': value}\n    return None # Should not happen based on problem description\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by finding a horizontally isolated non-zero cell\n    and moving it horizontally based on the global column range of all non-zero cells.\n    The destination column is calculated by reflecting the original column across\n    the center of the global non-zero column range.\n    \"\"\"\n    # Ensure input is not modified\n    output_grid = copy.deepcopy(input_grid)\n    height = len(output_grid)\n    if height == 0:\n        return output_grid\n    width = len(output_grid[0])\n    if width == 0:\n        return output_grid\n\n    # 1. Analyze the Input Grid & 2. Determine Global Column Boundaries\n    non_zero_cells = find_non_zero_cells(output_grid)\n    if not non_zero_cells:\n        return output_grid # No non-zero cells to move\n\n    min_nz_col, max_nz_col = get_global_column_range(non_zero_cells)\n\n    # 3. Locate the Moving Cell\n    moving_cell = find_horizontally_isolated_cell(output_grid)\n    if not moving_cell:\n         # If no isolated cell found (shouldn't happen based on examples), return original\n        return output_grid\n\n    r_move = moving_cell['r']\n    c_move = moving_cell['c']\n    v_move = moving_cell['v']\n\n    # 4. Calculate the Destination Column\n    # Reflect c_move across the center point (min_nz_col + max_nz_col) / 2\n    # The formula is: new_pos = min + max - old_pos\n    c_new = min_nz_col + max_nz_col - c_move\n\n    # Ensure destination column is within grid bounds (although logic implies it should be if min/max are correct)\n    # This check might be redundant if the logic is always sound for the ARC context,\n    # but good practice for general robustness.\n    if 0 <= c_new < width:\n        # 5. Construct the Output Grid (modify the copy)\n        # a. Clear the original position\n        output_grid[r_move][c_move] = 0\n        # b. Place the value at the new position\n        output_grid[r_move][c_new] = v_move\n    # else: handle error or unexpected case? For now, assume c_new is valid.\n\n    # 6. Output\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1962,
    "candidates_token_count": 2207,
    "total_token_count": 4169,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 19.180694,
  "retries": 1
}