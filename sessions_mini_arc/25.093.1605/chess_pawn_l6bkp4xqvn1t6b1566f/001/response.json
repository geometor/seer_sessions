{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\n\ndef find_value(grid, value):\n  \"\"\"Finds the (row, col) coordinates of the first occurrence of a value in the grid.\"\"\"\n  for r, row in enumerate(grid):\n    for c, cell in enumerate(row):\n      if cell == value:\n        return r, c\n  return None # Should not happen based on problem description\n\ndef transform(input_grid):\n  \"\"\"\n  Transforms the input grid based on the relative positions of the cells containing '1' and '2'.\n\n  1. Finds the coordinates of the cells containing '1' (pos_1) and '2' (pos_2).\n  2. Checks if these cells are diagonally adjacent (absolute row difference is 1 AND absolute column difference is 1).\n  3. If they are diagonally adjacent:\n     - Creates a copy of the input grid.\n     - Changes the value at pos_2 to '1'.\n     - Changes the value at pos_1 to '0'.\n     - Returns the modified grid.\n  4. If they are not diagonally adjacent:\n     - Returns an identical copy of the input grid.\n  \"\"\"\n\n  # Find the coordinates of the cells containing 1 and 2\n  pos_1 = find_value(input_grid, 1)\n  pos_2 = find_value(input_grid, 2)\n\n  if pos_1 is None or pos_2 is None:\n      # This case should ideally not happen based on the problem description\n      # If it does, return a copy as a safe default\n      return copy.deepcopy(input_grid)\n\n  row_1, col_1 = pos_1\n  row_2, col_2 = pos_2\n\n  # Check for diagonal adjacency\n  is_diagonal = abs(row_1 - row_2) == 1 and abs(col_1 - col_2) == 1\n\n  # Create the output grid (start with a copy)\n  output_grid = copy.deepcopy(input_grid)\n\n  # Apply transformation if cells are diagonally adjacent\n  if is_diagonal:\n    output_grid[row_2][col_2] = 1 # Change '2' to '1'\n    output_grid[row_1][col_1] = 0 # Change '1' to '0'\n  # Else: output_grid remains an identical copy (already handled by deepcopy)\n\n  return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2139,
    "candidates_token_count": 940,
    "total_token_count": 3079,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 8.59114,
  "retries": 1
}