{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nProcesses a 2D grid of integers (0s and 3s) row by row.\nFor each row:\n1. If the row contains only 0s, it remains unchanged.\n2. If the row contains one or more 3s:\n   a. Find the index of the first (leftmost) '3' (first_idx).\n   b. Find the index of the last (rightmost) '3' (last_idx).\n   c. Determine the effective start index for the output: start_idx = max(0, first_idx - 1).\n   d. Determine the effective end index for the output: end_idx = min(grid_width - 1, last_idx + 1).\n   e. Initialize the output row with all 0s.\n   f. Check if the segment of the input row from first_idx to last_idx (inclusive) consists entirely of 3s (contiguous).\n      i. If first_idx == last_idx (only a single '3' in the input row): Set the output element at start_idx to 3.\n      ii. If contiguous and first_idx != last_idx: Fill the output row with 3s from start_idx to end_idx (inclusive).\n      iii. If not contiguous: Set the output element at start_idx to 3 and the output element at end_idx to 3.\n\"\"\"\n\ndef find_indices(row, value):\n    \"\"\"Finds all indices of a specific value in a list or 1D numpy array.\"\"\"\n    return [i for i, x in enumerate(row) if x == value]\n\ndef is_contiguous(row, start, end, value):\n    \"\"\"Checks if all elements between start and end indices (inclusive) equal the given value.\"\"\"\n    if start > end: # Handles the case of a single element\n        return True\n    return all(x == value for x in row[start:end+1])\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n    \"\"\"\n    input_np = np.array(input_grid, dtype=int)\n    n_rows, n_cols = input_np.shape\n    output_grid = np.zeros_like(input_np) # Initialize output grid with zeros\n\n    # Process each row\n    for r in range(n_rows):\n        input_row = input_np[r]\n        indices_of_3 = find_indices(input_row, 3)\n\n        # If no 3s are found, the row remains all 0s (already initialized)\n        if not indices_of_3:\n            continue # Skip to the next row\n\n        # Find first and last index of 3\n        first_idx = indices_of_3[0]\n        last_idx = indices_of_3[-1]\n\n        # Calculate effective start and end indices for the output modification\n        start_fill_idx = max(0, first_idx - 1)\n        end_fill_idx = min(n_cols - 1, last_idx + 1)\n\n        # Check for single '3' case\n        if first_idx == last_idx:\n             output_grid[r, start_fill_idx] = 3\n        # Check for contiguity between first and last '3' in the input row\n        elif is_contiguous(input_row, first_idx, last_idx, 3):\n            # Fill the output row from start_fill_idx to end_fill_idx\n            output_grid[r, start_fill_idx : end_fill_idx + 1] = 3\n        else: # Not contiguous\n            # Set the start and end fill indices in the output row\n            output_grid[r, start_fill_idx] = 3\n            output_grid[r, end_fill_idx] = 3\n\n    # Convert back to list of lists if necessary, or return numpy array\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1139,
    "candidates_token_count": 911,
    "total_token_count": 2050,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 31.719581,
  "retries": 1
}