{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by swapping two specific colors: \n1. The color that appears exactly once (excluding 0).\n2. The non-zero color that appears most frequently.\nAll other colors remain unchanged.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef _get_color_frequencies(grid):\n    \"\"\"Calculates the frequency of each non-zero color in the grid.\"\"\"\n    # Flatten the grid to easily count elements\n    flat_grid = grid.flatten()\n    # Count frequencies, excluding the background color 0\n    counts = Counter(cell for cell in flat_grid if cell != 0)\n    return counts\n\ndef _find_swap_colors(counts):\n    \"\"\"Identifies the unique color (count=1) and the most frequent color.\"\"\"\n    if not counts: # Handle empty grid or grid with only zeros\n        return None, None\n\n    color_1 = None\n    color_2 = None\n    max_freq = 0\n\n    # Find the unique color (frequency 1)\n    for color, freq in counts.items():\n        if freq == 1:\n            color_1 = color\n            break # Assume only one such color based on examples\n\n    # Find the most frequent color\n    # If multiple colors have the same max frequency, the one encountered first (arbitrary) is chosen\n    # Or, if the unique color (color_1) is also the most frequent (e.g., only one non-zero element), handle appropriately\n    temp_counts = counts.copy()\n    if color_1 is not None and color_1 in temp_counts:\n         # Exclude color_1 when searching for color_2 if they are distinct\n         # If color_1 *is* the most frequent, it will be picked below\n         pass # No action needed here, logic below handles it\n\n    max_freq = 0\n    most_frequent_colors = []\n    for color, freq in temp_counts.items():\n        if freq > max_freq:\n            max_freq = freq\n            most_frequent_colors = [color]\n        elif freq == max_freq:\n             most_frequent_colors.append(color)\n\n    # Select color_2. If color_1 is among the most frequent, pick another if possible.\n    # If color_1 is the *only* most frequent color, it becomes color_2.\n    if len(most_frequent_colors) == 1:\n        color_2 = most_frequent_colors[0]\n    else: # Tie in frequencies\n        # Prioritize picking a color different from color_1 if possible\n        found_other = False\n        for c in most_frequent_colors:\n            if c != color_1:\n                color_2 = c\n                found_other = True\n                break\n        if not found_other: # If color_1 is one of the tied most frequent, and no others exist\n             color_2 = color_1 # Or could pick any, examples suggest they are distinct\n\n    # Correction if color_1 wasn't found (e.g., no unique color)\n    # Or if color_2 wasn't found (e.g., only zeros or all unique counts)\n    # Based on examples, we expect both to be found and distinct.\n    if color_1 is None or color_2 is None:\n         # Handle edge cases not present in examples if needed.\n         # For now, assume valid inputs based on examples.\n         # A more robust implementation might raise an error or have default behavior.\n         pass\n\n\n    # Handle the case where the unique color is also the most frequent (e.g., only one non-zero element)\n    # In this specific problem based on examples, color_1 and color_2 seem guaranteed to exist and be distinct.\n    # If the grid had only one '8', counts = {8: 1}. color_1=8, color_2=8. Swap is a no-op.\n    if len(counts) == 1:\n        single_color = list(counts.keys())[0]\n        if counts[single_color] == 1: # Only one non-zero element\n             color_1 = single_color\n             color_2 = single_color\n\n    return color_1, color_2\n\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the color swapping transformation to the input grid.\n    \"\"\"\n    # Convert input list of lists to numpy array for easier handling\n    grid_np = np.array(input_grid, dtype=int)\n\n    # Calculate frequencies of non-zero colors\n    frequencies = _get_color_frequencies(grid_np)\n\n    # Identify the two colors to be swapped\n    color_1, color_2 = _find_swap_colors(frequencies)\n\n    # Initialize output_grid as a copy of the input\n    output_grid = grid_np.copy()\n\n    # If colors to swap weren't found or are the same, return the original grid copy\n    if color_1 is None or color_2 is None or color_1 == color_2:\n        return output_grid.tolist() # Return as list of lists\n\n    # Perform the swap\n    # Iterate through each cell and apply the swap logic\n    rows, cols = grid_np.shape\n    for r in range(rows):\n        for c in range(cols):\n            if grid_np[r, c] == color_1:\n                output_grid[r, c] = color_2\n            elif grid_np[r, c] == color_2:\n                output_grid[r, c] = color_1\n            # else: the value remains the same (already copied)\n\n    # Return the transformed grid as a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1764,
    "candidates_token_count": 1307,
    "total_token_count": 3071,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.125846,
  "retries": 1
}