{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by rearranging non-zero digits ('colors'). \nEach unique non-zero color from the input is counted. Then, based on a fixed \nmapping (3->row 0, 2->row 1, 6->row 2, 8->row 3), the total count of each \ncolor determines how many cells it occupies, right-aligned, in its assigned \noutput row. All other cells in the output grid are set to 0.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef get_unique_colors(grid):\n  \"\"\"Finds unique non-zero values in the grid.\"\"\"\n  unique_vals = set(grid.flatten())\n  unique_vals.discard(0) # Remove background color\n  return unique_vals\n\ndef count_color(grid, color):\n  \"\"\"Counts occurrences of a specific color in the grid.\"\"\"\n  return np.count_nonzero(grid == color)\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid (list of lists or numpy array): The input grid.\n\n    Returns:\n        numpy array: The transformed output grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    height, width = input_np.shape\n\n    # Initialize output_grid with background color (0)\n    output_grid = np.zeros_like(input_np)\n\n    # Define the mapping from color to target output row\n    color_to_row_map = {\n        3: 0,\n        2: 1,\n        6: 2,\n        8: 3,\n        # Add other mappings here if needed based on more examples\n    }\n\n    # Find all unique non-zero colors present in the input\n    unique_colors = get_unique_colors(input_np)\n\n    # Process each unique color\n    for color in unique_colors:\n        # Count how many times this color appears in the input\n        color_count = count_color(input_np, color)\n\n        # Determine the target row for this color using the map\n        if color in color_to_row_map:\n            target_row = color_to_row_map[color]\n\n            # Ensure the target row is within the grid bounds (optional, good practice)\n            if 0 <= target_row < height:\n                # Calculate the starting column for right-alignment\n                # Ensure count doesn't exceed width\n                actual_count = min(color_count, width)\n                start_col = width - actual_count\n\n                # Fill the cells in the output grid\n                if start_col >= 0: # Check if there's space to place the color\n                   output_grid[target_row, start_col:width] = color\n\n    return output_grid.tolist() # Return as list of lists if required by context\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1815,
    "candidates_token_count": 673,
    "total_token_count": 2488,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.110103,
  "retries": 1
}