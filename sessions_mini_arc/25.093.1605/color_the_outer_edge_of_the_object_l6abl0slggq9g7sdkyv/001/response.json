{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransforms an input grid by identifying background cells (value 0) that are adjacent \n(horizontally, vertically, or diagonally - Moore neighborhood) to object cells (value 4) \nand changing the value of these adjacent background cells to 6 in the output grid. \nOriginal object cells (4) and background cells (0) not adjacent to any object cell \nremain unchanged.\n\"\"\"\n\ndef _is_valid(r, c, rows, cols):\n    \"\"\"Check if coordinates are within the grid boundaries.\"\"\"\n    return 0 <= r < rows and 0 <= c < cols\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid: A 2D list or numpy array representing the input grid.\n\n    Returns:\n        A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_np = np.array(input_grid)\n    rows, cols = input_np.shape\n\n    # Initialize output_grid as a copy of the input grid\n    output_grid = np.copy(input_np)\n\n    # Define the 8 directions for the Moore neighborhood (relative coordinates)\n    neighbor_deltas = [\n        (-1, -1), (-1, 0), (-1, 1),\n        (0, -1),          (0, 1),\n        (1, -1), (1, 0), (1, 1)\n    ]\n\n    # Iterate through each cell of the input grid\n    for r in range(rows):\n        for c in range(cols):\n            # Check if the current cell in the input grid is a background cell (0)\n            if input_np[r, c] == 0:\n                # Assume initially that it's not adjacent to an object cell (4)\n                is_adjacent_to_4 = False\n                # Check all 8 neighbors\n                for dr, dc in neighbor_deltas:\n                    nr, nc = r + dr, c + dc\n                    # Check if the neighbor coordinates are valid (within grid bounds)\n                    if _is_valid(nr, nc, rows, cols):\n                        # Check if the neighbor in the input grid is an object cell (4)\n                        if input_np[nr, nc] == 4:\n                            is_adjacent_to_4 = True\n                            break # Found a '4' neighbor, no need to check further\n\n                # If any neighbor was a '4', change the corresponding cell in the output grid to 6\n                if is_adjacent_to_4:\n                    output_grid[r, c] = 6\n            # If the cell was not 0 (i.e., it was 4), or if it was 0 but not adjacent to 4,\n            # its value in output_grid remains the same as it was copied from input_np.\n\n    return output_grid.tolist() # Return as a list of lists if required, or keep as numpy array\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1842,
    "candidates_token_count": 1004,
    "total_token_count": 2846,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.405071,
  "retries": 1
}