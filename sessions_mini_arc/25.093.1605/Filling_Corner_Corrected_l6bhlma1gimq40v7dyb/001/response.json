{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\n\n\"\"\"\nTransforms a 2D grid by changing the value of cells containing 0 to 2 if they are orthogonally adjacent (up, down, left, or right) to a cell containing 4. Cells containing 4 and 0s not adjacent to any 4 remain unchanged.\n\"\"\"\n\ndef is_within_bounds(r, c, height, width):\n  \"\"\"Checks if the given row and column are within the grid boundaries.\"\"\"\n  return 0 <= r < height and 0 <= c < width\n\ndef transform(input_grid):\n  \"\"\"\n  Applies the transformation rule to the input grid.\n\n  Args:\n    input_grid: A list of lists representing the input 2D grid.\n\n  Returns:\n    A list of lists representing the transformed output 2D grid.\n  \"\"\"\n  # Get grid dimensions\n  height = len(input_grid)\n  if height == 0:\n    return []\n  width = len(input_grid[0])\n  if width == 0:\n    return [[] for _ in range(height)]\n\n  # Initialize output_grid as a deep copy of the input grid\n  # This ensures that original 4s and non-adjacent 0s are preserved,\n  # and we check conditions based on the original input state.\n  output_grid = copy.deepcopy(input_grid)\n\n  # Iterate through each cell of the input grid\n  for r in range(height):\n    for c in range(width):\n      # Check if the current cell in the *input* grid contains a 4\n      if input_grid[r][c] == 4:\n        # Define potential orthogonal neighbors (dr, dc offsets)\n        neighbors = [(r - 1, c), (r + 1, c), (r, c - 1), (r, c + 1)]\n\n        # Check each neighbor\n        for nr, nc in neighbors:\n          # Check if the neighbor is within grid bounds\n          if is_within_bounds(nr, nc, height, width):\n            # Check if the neighbor cell in the *input* grid is 0\n            if input_grid[nr][nc] == 0:\n              # If conditions met, update the corresponding cell in the *output* grid to 2\n              output_grid[nr][nc] = 2\n\n  # Return the final transformed grid\n  return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1572,
    "candidates_token_count": 541,
    "total_token_count": 2113,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 7.911566,
  "retries": 1
}