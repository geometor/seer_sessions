{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\n\n\"\"\"\nTransforms a 2D grid based on the following rule: For each cell containing a 4 in the input grid, project outwards orthogonally (up, down, left, right). Change any 0 encountered along these projection paths to 2 in the output grid. The projection stops in a given direction if it hits the grid boundary or encounters a non-zero cell (e.g., another 4) in the input grid. Original 4s and 0s not reached by any projection remain unchanged.\n\"\"\"\n\ndef is_within_bounds(r, c, height, width):\n  \"\"\"Checks if the given row and column are within the grid boundaries.\"\"\"\n  return 0 <= r < height and 0 <= c < width\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the projection transformation rule to the input grid.\n\n    Args:\n      input_grid: A list of lists representing the input 2D grid.\n\n    Returns:\n      A list of lists representing the transformed output 2D grid.\n    \"\"\"\n    # Handle empty grid cases\n    if not input_grid:\n        return []\n    height = len(input_grid)\n    if height == 0 or not input_grid[0]:\n         return [[] for _ in range(height)] # Return grid of empty rows if rows exist but are empty\n    width = len(input_grid[0])\n\n    # Initialize output_grid as a deep copy of the input grid\n    # This preserves original 4s and 0s that won't be changed.\n    # Importantly, projection checks are based on the *original* input_grid state.\n    output_grid = copy.deepcopy(input_grid)\n\n    # Iterate through each cell of the input grid to find the '4's (sources)\n    for r in range(height):\n        for c in range(width):\n            # If the current cell in the input grid is a source (value 4)\n            if input_grid[r][c] == 4:\n\n                # --- Project Upwards ---\n                nr = r - 1 # Start one cell above\n                nc = c\n                # Continue as long as within bounds and hitting 0s in the *input* grid\n                while is_within_bounds(nr, nc, height, width) and input_grid[nr][nc] == 0:\n                    output_grid[nr][nc] = 2 # Change the cell in the *output* grid\n                    nr -= 1 # Move to the next cell upwards\n\n                # --- Project Downwards ---\n                nr = r + 1 # Start one cell below\n                nc = c\n                # Continue as long as within bounds and hitting 0s in the *input* grid\n                while is_within_bounds(nr, nc, height, width) and input_grid[nr][nc] == 0:\n                    output_grid[nr][nc] = 2 # Change the cell in the *output* grid\n                    nr += 1 # Move to the next cell downwards\n\n                # --- Project Leftwards ---\n                nr = r\n                nc = c - 1 # Start one cell left\n                # Continue as long as within bounds and hitting 0s in the *input* grid\n                while is_within_bounds(nr, nc, height, width) and input_grid[nr][nc] == 0:\n                    output_grid[nr][nc] = 2 # Change the cell in the *output* grid\n                    nc -= 1 # Move to the next cell leftwards\n\n                # --- Project Rightwards ---\n                nr = r\n                nc = c + 1 # Start one cell right\n                # Continue as long as within bounds and hitting 0s in the *input* grid\n                while is_within_bounds(nr, nc, height, width) and input_grid[nr][nc] == 0:\n                    output_grid[nr][nc] = 2 # Change the cell in the *output* grid\n                    nc += 1 # Move to the next cell rightwards\n\n    # Return the modified output grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7159,
    "candidates_token_count": 917,
    "total_token_count": 8076,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.187034,
  "retries": 1
}