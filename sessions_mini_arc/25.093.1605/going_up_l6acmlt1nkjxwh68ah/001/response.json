{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransformation Rule:\n1. Identify all rows in the input grid that contain at least one non-zero element (\"pattern rows\"). Maintain their original relative order.\n2. If no pattern rows exist, return a grid of zeros with the same dimensions as the input.\n3. Otherwise, create a new output grid with the same dimensions as the input.\n4. Place the identified pattern rows sequentially into the output grid, starting from the top row.\n5. If the number of pattern rows is less than the total height of the grid, fill the remaining rows of the output grid by repeating the *last* identified pattern row.\n\"\"\"\n\nimport numpy as np\n\ndef find_pattern_rows(grid):\n    \"\"\"\n    Identifies rows containing non-zero elements.\n    \n    Args:\n        grid (np.ndarray): The input grid.\n\n    Returns:\n        list: A list of rows (as np.ndarrays) that contain non-zero elements,\n              preserving their original relative order.\n    \"\"\"\n    pattern_rows = []\n    for row in grid:\n        if np.any(row != 0):  # Check if any element in the row is non-zero\n            pattern_rows.append(row)\n    return pattern_rows\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid (list of lists or np.ndarray): The input grid.\n\n    Returns:\n        np.ndarray: The transformed output grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_array = np.array(input_grid)\n    grid_height, grid_width = input_array.shape\n\n    # 1. Identify Pattern Rows\n    pattern_rows = find_pattern_rows(input_array)\n\n    # 2. Handle Empty Case\n    if not pattern_rows:\n        # If no pattern rows found, return a grid of zeros\n        return np.zeros_like(input_array)\n\n    # 3. Determine Last Pattern Row\n    last_pattern_row = pattern_rows[-1]\n    num_pattern_rows = len(pattern_rows)\n\n    # 4. Construct Output Grid (initialize with zeros)\n    output_grid = np.zeros_like(input_array)\n\n    # 5. Fill with Pattern Rows\n    # Copy the identified pattern rows into the top of the output grid\n    rows_to_copy = min(num_pattern_rows, grid_height) # Ensure we don't exceed output height\n    output_grid[:rows_to_copy, :] = np.array(pattern_rows[:rows_to_copy])\n\n    # 6. Fill Remaining Rows\n    # If pattern rows don't fill the grid, repeat the last pattern row\n    if num_pattern_rows < grid_height:\n        for i in range(num_pattern_rows, grid_height):\n            output_grid[i, :] = last_pattern_row\n\n    # 7. Return the constructed output grid\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1768,
    "candidates_token_count": 1034,
    "total_token_count": 2802,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.398892,
  "retries": 1
}