{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nTransforms a 2D grid of digits based on frequency analysis of non-zero digits.\n\n1.  Count the frequency of each non-zero digit (1-9) in the input grid.\n2.  Identify unique non-zero digits and sort them: primary key frequency (descending), secondary key digit value (ascending). Let the sorted digits be M1, M2, M3, M4...\n3.  Initialize a mapping dictionary where each digit (0-9) maps to itself.\n4.  Update the mapping based on the sorted digits:\n    a.  0 always maps to 0.\n    b.  If M1 and M2 exist, update the map: M1 maps to M2, and M2 maps to M1.\n    c.  If M3 and M4 exist, update the map: M3 maps to M4, and M4 maps to M3.\n    d.  All other digits (including M3 if only 3 unique non-zeros exist, or any beyond M4) map to themselves.\n5.  Apply the final mapping to each cell of the input grid to produce the output grid.\n\"\"\"\n\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the frequency-based digit swapping transformation to the input grid.\n\n    Args:\n        input_grid (list of list of int): A 2D list representing the input grid of digits.\n\n    Returns:\n        list of list of int: A 2D list representing the transformed grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    grid = np.array(input_grid, dtype=int)\n    \n    # Step 1: Analyze Frequency\n    # Flatten the grid to easily count all elements\n    flat_grid = grid.flatten()\n    # Filter out zeros and count frequencies of the remaining digits\n    non_zero_digits = [d for d in flat_grid if d != 0]\n    \n    # Initialize the transformation map with identity mapping (each digit maps to itself)\n    # This handles digits not involved in swaps and the digit 0.\n    swap_map = {i: i for i in range(10)}\n\n    # If there are no non-zero digits, the identity map is correct, proceed to apply it\n    if non_zero_digits:\n        # Count frequency of each non-zero digit\n        digit_counts = Counter(non_zero_digits)\n\n        # Step 2: Sort Digits\n        # Sort distinct non-zero digits: primary key frequency (desc), secondary key digit value (asc)\n        # Items are (digit, count)\n        sorted_digits_with_counts = sorted(digit_counts.items(), key=lambda item: (-item[1], item[0]))\n        # Extract just the digits in sorted order\n        sorted_digits = [item[0] for item in sorted_digits_with_counts] \n\n        # Step 3 & 4: Determine Swaps and Update Mapping\n        num_distinct_digits = len(sorted_digits)\n\n        # Define M1, M2 if they exist\n        if num_distinct_digits >= 2:\n            M1 = sorted_digits[0]\n            M2 = sorted_digits[1]\n            # Update map for the first pair swap\n            swap_map[M1] = M2\n            swap_map[M2] = M1\n\n        # Define M3, M4 if they exist\n        if num_distinct_digits >= 4:\n            M3 = sorted_digits[2]\n            M4 = sorted_digits[3]\n            # Update map for the second pair swap\n            swap_map[M3] = M4\n            swap_map[M4] = M3\n            \n    # Step 5: Apply Transformation\n    # Use the final swap_map to transform each element in the original grid.\n    # np.vectorize allows applying the dictionary lookup element-wise.\n    output_grid_np = np.vectorize(swap_map.get)(grid)\n\n    # Convert the result back to a standard Python list of lists\n    output_grid = output_grid_np.tolist()\n    \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8143,
    "candidates_token_count": 1343,
    "total_token_count": 9486,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.974377,
  "retries": 1
}