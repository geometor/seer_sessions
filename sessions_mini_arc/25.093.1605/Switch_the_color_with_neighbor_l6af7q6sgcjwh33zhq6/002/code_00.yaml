Facts:
  Task: Digit Grid Transformation
  Input:
    Type: 2D Grid
    Element_Type: Integer (0-9)
    Objects:
      - Grid: Represents the entire input structure.
      - Cells: Individual locations within the grid containing digits.
      - Digits: Integers 0-9 found within cells. Non-zero digits have frequencies.
  Output:
    Type: 2D Grid
    Properties: Same dimensions as input. Contains transformed digits.
  Transformation:
    Type: Global Value Mapping
    Scope: Applies to all cells independently based on the input digit's value.
    Mapping_Logic: Based on frequency analysis of non-zero digits in the *entire* input grid.
    Objects_for_Mapping:
      - Non_Zero_Digits: Digits 1-9 present in the input.
      - Frequencies: Count of each non-zero digit.
      - Sorted_Digits: Distinct non-zero digits sorted by frequency (desc) then value (asc). Let these be M1, M2, M3, M4...
    Actions_to_Derive_Map:
      1. Count frequency of each non-zero digit.
      2. Sort distinct non-zero digits to get the ordered list M1, M2, M3, M4...
      3. Define base map: map[0]=0, map[d]=d for d in 1-9.
      4. If M1, M2 exist: Update map[M1]=M2, map[M2]=M1.
      5. If M3, M4 exist: Update map[M3]=M4, map[M4]=M3. (Digits M5+ map to themselves).
      6. If only M1, M2, M3 exist: Apply a specific rule for M3 based on observed cases:
         - map[9] = 5 (when M1=4, M2=8)
         - map[8] = 1 (when M1=5, M2=1)
         - map[3] = 8 (when M1=8, M2=7)
         (A general rule for M3 is not confidently determined).
    Action_to_Generate_Output:
      - Apply the derived mapping to each cell of the input grid: output[r][c] = map[input[r][c]].