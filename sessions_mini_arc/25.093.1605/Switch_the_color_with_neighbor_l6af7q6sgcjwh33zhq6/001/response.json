{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nTransforms a 2D grid of digits by swapping pairs of non-zero digits based on their frequency.\n\nThe transformation logic identifies the four most frequent non-zero digits in the input grid.\nThe most frequent digit is swapped with the second most frequent digit.\nThe third most frequent digit is swapped with the fourth most frequent digit.\nIf there are fewer than four distinct non-zero digits, swaps are performed only for existing pairs (e.g., if only two non-zero digits exist, they swap; if three exist, only the top two swap).\nThe digit '0' always remains unchanged.\nDigits that are not part of the determined swap pairs also remain unchanged.\nTies in frequency are broken by the numerical value of the digit (lower value first).\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Applies a frequency-based digit swapping transformation to the input grid.\n\n    Args:\n        input_grid (list of list of int): A 2D list representing the input grid of digits.\n\n    Returns:\n        list of list of int: A 2D list representing the transformed grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    grid = np.array(input_grid, dtype=int)\n    rows, cols = grid.shape\n\n    # Flatten the grid and count frequencies of non-zero digits\n    flat_grid = grid.flatten()\n    non_zero_digits = [d for d in flat_grid if d != 0]\n    \n    if not non_zero_digits:\n        # If no non-zero digits, return the original grid\n        return input_grid\n\n    # Count frequency of each non-zero digit\n    digit_counts = Counter(non_zero_digits)\n\n    # Sort distinct non-zero digits by frequency (descending) and then by digit value (ascending for ties)\n    # Items are (digit, count)\n    sorted_digits = sorted(digit_counts.items(), key=lambda item: (-item[1], item[0]))\n\n    # Initialize the swap map with 0 mapping to 0\n    swap_map = {0: 0}\n    # Add all unique non-zero digits initially mapping to themselves\n    for digit in digit_counts.keys():\n        swap_map[digit] = digit\n\n    # Determine swap pairs based on sorted frequency\n    num_distinct_digits = len(sorted_digits)\n\n    # Pair 1: Swap the top two most frequent digits (if at least two exist)\n    if num_distinct_digits >= 2:\n        digit1 = sorted_digits[0][0]\n        digit2 = sorted_digits[1][0]\n        swap_map[digit1] = digit2\n        swap_map[digit2] = digit1\n\n    # Pair 2: Swap the third and fourth most frequent digits (if at least four exist)\n    if num_distinct_digits >= 4:\n        digit3 = sorted_digits[2][0]\n        digit4 = sorted_digits[3][0]\n        swap_map[digit3] = digit4\n        swap_map[digit4] = digit3\n\n    # Initialize the output grid with the same shape as the input\n    output_grid_np = np.zeros_like(grid)\n\n    # Apply the transformation using the swap map\n    for r in range(rows):\n        for c in range(cols):\n            input_digit = grid[r, c]\n            # Use the swap map to find the output digit. \n            # If a digit wasn't in the non_zero counts (e.g., appeared 0 times)\n            # or wasn't part of a swap pair, it defaults to itself via the initial map setup.\n            output_grid_np[r, c] = swap_map.get(input_digit, input_digit) \n\n    # Convert the result back to a list of lists\n    output_grid = output_grid_np.tolist()\n    \n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1752,
    "candidates_token_count": 906,
    "total_token_count": 2658,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 25.280818,
  "retries": 1
}