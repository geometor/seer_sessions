{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by identifying a shape (a connected group of identical \nnon-zero numbers), calculating the center of its bounding box, and translating \nthe shape so its bounding box center aligns with the center of the grid. \nThe background is assumed to be 0.\n\"\"\"\n\nimport numpy as np\n\ndef _find_shape_and_color(grid):\n    \"\"\"\n    Finds the coordinates of all non-zero cells and determines their common value (color).\n    Assumes there's only one non-zero value present.\n    \"\"\"\n    shape_cells = []\n    shape_color = 0\n    for r, row in enumerate(grid):\n        for c, value in enumerate(row):\n            if value != 0:\n                shape_cells.append((r, c))\n                if shape_color == 0:\n                    shape_color = value\n                elif value != shape_color:\n                    # This case shouldn't happen based on examples, but good to handle\n                    raise ValueError(\"Input grid contains multiple non-zero values.\")\n    return shape_cells, shape_color\n\ndef _get_bounding_box(shape_cells):\n    \"\"\"Calculates the min/max row/col for the shape.\"\"\"\n    if not shape_cells:\n        return None # Or raise error, depending on desired behavior for empty shapes\n    \n    rows = [r for r, c in shape_cells]\n    cols = [c for r, c in shape_cells]\n    \n    min_row = min(rows)\n    max_row = max(rows)\n    min_col = min(cols)\n    max_col = max(cols)\n    \n    return min_row, max_row, min_col, max_col\n\ndef _calculate_center(min_val, max_val):\n    \"\"\"Calculates the center index using floor division.\"\"\"\n    # Using floor division to match the described logic\n    return (min_val + max_val) // 2\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the shape centering transformation.\n    \n    Args:\n        input_grid: A list of lists representing the input grid.\n\n    Returns:\n        A list of lists representing the transformed grid.\n    \"\"\"\n    # Convert to numpy array for easier handling\n    input_array = np.array(input_grid)\n    height, width = input_array.shape\n    \n    # Initialize output grid with zeros\n    output_array = np.zeros_like(input_array)\n\n    # 1. Identify Shape and its color\n    shape_cells, shape_color = _find_shape_and_color(input_array)\n    \n    # If no shape found, return the empty grid\n    if not shape_cells:\n        return output_array.tolist()\n\n    # 2. Find Bounding Box\n    min_row, max_row, min_col, max_col = _get_bounding_box(shape_cells)\n\n    # 3. Calculate Input Center (center of the bounding box)\n    center_row_input = _calculate_center(min_row, max_row)\n    center_col_input = _calculate_center(min_col, max_col)\n\n    # 4. Determine Grid Center\n    center_row_grid = (height - 1) // 2 # Use floor division for center index\n    center_col_grid = (width - 1) // 2  # Use floor division for center index\n\n    # 5. Calculate Shift required\n    delta_row = center_row_grid - center_row_input\n    delta_col = center_col_grid - center_col_input\n\n    # 6. Translate Shape\n    for r, c in shape_cells:\n        new_r = r + delta_row\n        new_c = c + delta_col\n        \n        # Ensure the new coordinates are within the grid bounds\n        if 0 <= new_r < height and 0 <= new_c < width:\n            output_array[new_r, new_c] = shape_color\n            \n    # Convert back to list of lists before returning\n    return output_array.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1707,
    "candidates_token_count": 950,
    "total_token_count": 2657,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.87611,
  "retries": 1
}