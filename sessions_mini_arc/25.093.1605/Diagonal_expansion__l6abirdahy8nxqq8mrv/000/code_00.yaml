task_context:
  grid_size: 5x5
  value_range: non-negative integers (single digits observed in examples)
  background_value: 0

input_elements:
  - object: grid
    properties:
      - dimensions: [5, 5]
  - object: cell
    properties:
      - row_index: integer (0-4)
      - col_index: integer (0-4)
      - value: integer
  - object: non_zero_digit
    properties:
      - value: integer > 0
      - position: [row, col]

output_elements:
  - object: grid
    properties:
      - dimensions: [5, 5]
  - object: cell
    properties:
      - row_index: integer (0-4)
      - col_index: integer (0-4)
      - value: integer

transformation_rules:
  - rule: identify_inputs
    description: Find all cells in the input grid with non-zero values.
  - rule: calculate_segment_length
    description: For each non-zero input digit `d` at `(r_in, c_in)`, calculate the length `L` of its corresponding output segment using the formula `L = 5 - 2 * abs(r_in - 2)`.
  - rule: determine_diagonal
    description: For each non-zero input digit `d` at `(r_in, c_in)`, determine the target diagonal `D = (c_in - r_in) mod 5`.
  - rule: generate_segment_coords
    description: >
      For each non-zero input digit `d` at `(r_in, c_in)` with length `L` and diagonal `D`,
      determine the set of output coordinates `(r_out, c_out)` for the segment.
      The segment spans `L` rows centered vertically at `r_in`.
      For each row `r_out` in the segment's row range, the column `c_out` is calculated as `(D + r_out) mod 5`.
  - rule: populate_output
    description: >
      Initialize the output grid with zeros.
      For each output cell `(r_out, c_out)`, determine all input digits `d` whose generated segments include this coordinate.
      Set the value of the output cell `(r_out, c_out)` to the maximum value among these input digits `d`. If no segments cover the cell, its value remains 0.

relationships:
  - type: mapping
    from: input non_zero_digit position `(r_in, c_in)`
    to: output diagonal segment
    properties:
      - diagonal_index: `(c_in - r_in) mod 5`
      - segment_length: `5 - 2 * abs(r_in - 2)`
      - vertical_centering: segment rows centered around `r_in`
  - type: merging
    description: Output cell value is the maximum of values from all input digits whose segments cover that cell.