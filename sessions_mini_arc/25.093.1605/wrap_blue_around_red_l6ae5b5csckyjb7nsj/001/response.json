{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransforms an input grid based on the following rule:\n1. Initialize the output grid as a copy of the input grid.\n2. Iterate through each cell of the input grid.\n3. If a cell in the input grid has a value of '0':\n    a. Check its eight neighbors (orthogonal and diagonal) in the input grid.\n    b. If at least one neighbor has a non-zero value, set the corresponding cell in the output grid to '1'.\n4. Cells that were non-zero in the input grid remain unchanged in the output grid.\n\"\"\"\n\ndef has_non_zero_neighbor(grid, r, c):\n    \"\"\"\n    Checks if the cell at (r, c) in the grid has at least one non-zero neighbor \n    (orthogonal or diagonal).\n\n    Args:\n        grid: The input numpy array representing the grid.\n        r: The row index of the cell.\n        c: The column index of the cell.\n\n    Returns:\n        True if at least one neighbor is non-zero, False otherwise.\n    \"\"\"\n    height, width = grid.shape\n    # Define the 8 neighbor offsets (dr, dc)\n    neighbor_offsets = [\n        (-1, -1), (-1, 0), (-1, 1),\n        ( 0, -1),          ( 0, 1),\n        ( 1, -1), ( 1, 0), ( 1, 1)\n    ]\n\n    for dr, dc in neighbor_offsets:\n        nr, nc = r + dr, c + dc\n        # Check if the neighbor coordinates are within the grid boundaries\n        if 0 <= nr < height and 0 <= nc < width:\n            # Check if the neighbor cell has a non-zero value\n            if grid[nr, nc] != 0:\n                return True\n    return False\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by changing '0' cells to '1' if they have \n    at least one non-zero neighbor (including diagonals) in the original input grid.\n    Non-zero cells remain unchanged.\n\n    Args:\n        input_grid: A list of lists representing the input grid.\n\n    Returns:\n        A numpy array representing the transformed grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_array = np.array(input_grid, dtype=int)\n    height, width = input_array.shape\n    \n    # Initialize output_grid as a copy of the input grid\n    # We modify this copy based on checks against the original input_array\n    output_grid = np.copy(input_array)\n\n    # Iterate through each cell of the input grid\n    for r in range(height):\n        for c in range(width):\n            # Check if the current cell in the *input* grid is 0\n            if input_array[r, c] == 0:\n                # Check if this cell has any non-zero neighbors in the *input* grid\n                if has_non_zero_neighbor(input_array, r, c):\n                    # If yes, set the corresponding cell in the *output* grid to 1\n                    output_grid[r, c] = 1\n            # If the input cell was non-zero, it remains unchanged in the output_grid (due to the copy)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1355,
    "candidates_token_count": 771,
    "total_token_count": 2126,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.477093,
  "retries": 1
}