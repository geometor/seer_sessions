{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\ndef _find_nearest_5_left(grid_row, c):\n    \"\"\"Find the column index of the nearest 5 to the left in a row.\"\"\"\n    for c_left in range(c - 1, -1, -1):\n        if grid_row[c_left] == 5:\n            return c_left\n    return None\n\ndef _find_nearest_5_right(grid_row, c, cols):\n    \"\"\"Find the column index of the nearest 5 to the right in a row.\"\"\"\n    for c_right in range(c + 1, cols):\n        if grid_row[c_right] == 5:\n            return c_right\n    return None\n\ndef _find_nearest_5_up(grid_col, r):\n    \"\"\"Find the row index of the nearest 5 above in a column.\"\"\"\n    for r_up in range(r - 1, -1, -1):\n        if grid_col[r_up] == 5:\n            return r_up\n    return None\n\ndef _find_nearest_5_down(grid_col, r, rows):\n    \"\"\"Find the row index of the nearest 5 below in a column.\"\"\"\n    for r_down in range(r + 1, rows):\n        if grid_col[r_down] == 5:\n            return r_down\n    return None\n\ndef _is_path_clear_horizontal(grid_row, c_left, c_right):\n    \"\"\"Check if the horizontal path between c_left and c_right contains only 0s.\"\"\"\n    return np.all(grid_row[c_left + 1 : c_right] == 0)\n\ndef _is_path_clear_vertical(grid_col, r_up, r_down):\n    \"\"\"Check if the vertical path between r_up and r_down contains only 0s.\"\"\"\n    return np.all(grid_col[r_up + 1 : r_down] == 0)\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid. A cell with value 0 is changed to 1 if it lies on\n    a straight horizontal or vertical line segment between two cells with value 5,\n    and all cells on that segment (excluding the endpoints) are 0s in the input.\n    Cells with value 5 remain unchanged. Cells with value 0 not meeting the\n    path criteria remain 0.\n    \"\"\"\n    # Convert input to numpy array for efficient operations\n    input_arr = np.array(input_grid, dtype=int)\n    rows, cols = input_arr.shape\n\n    # Initialize output_grid as a copy of the input grid\n    # We will modify this grid based on the rules\n    output_arr = np.copy(input_arr)\n\n    # Iterate through each cell of the input grid\n    for r in range(rows):\n        for c in range(cols):\n            # Only consider cells that are 0 in the input\n            if input_arr[r, c] == 0:\n                \n                # --- Check Horizontally ---\n                c_left = _find_nearest_5_left(input_arr[r, :], c)\n                c_right = _find_nearest_5_right(input_arr[r, :], c, cols)\n\n                # Check if 5s were found on both sides and the path between them is clear\n                if c_left is not None and c_right is not None:\n                    if _is_path_clear_horizontal(input_arr[r, :], c_left, c_right):\n                        output_arr[r, c] = 1\n                        continue # Cell changed, move to the next cell\n\n                # --- Check Vertically (only if horizontal check didn't change the cell) ---\n                r_up = _find_nearest_5_up(input_arr[:, c], r)\n                r_down = _find_nearest_5_down(input_arr[:, c], r, rows)\n\n                # Check if 5s were found above and below and the path between them is clear\n                if r_up is not None and r_down is not None:\n                     if _is_path_clear_vertical(input_arr[:, c], r_up, r_down):\n                        output_arr[r, c] = 1\n                        # No need for continue here as it's the last check for this cell\n\n    # Return the modified grid, converted back to list of lists\n    return output_arr.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5814,
    "candidates_token_count": 1470,
    "total_token_count": 7284,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.863809,
  "retries": 1
}