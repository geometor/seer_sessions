{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid by swapping adjacent columns. The pattern of swapping (starting at index 0 or 1) depends on the parity of the index of the first column containing a non-zero value.\n1. Find the index of the first column (leftmost) containing any non-zero value. If all columns are zero, consider the index to be 0 (even).\n2. If this index is odd, swap adjacent column pairs starting from index 1 (i.e., swap (1,2), (3,4), ...).\n3. If this index is even (or all zeros), swap adjacent column pairs starting from index 0 (i.e., swap (0,1), (2,3), ...).\n\"\"\"\n\nimport copy\n\ndef find_first_non_zero_col(grid):\n    \"\"\"\n    Finds the index of the first column containing a non-zero value.\n    Returns -1 if the grid is empty or all values are zero.\n    \"\"\"\n    # Check for empty grid or grid with no columns\n    if not grid or not grid[0]:\n        return -1 \n\n    num_rows = len(grid)\n    num_cols = len(grid[0])\n\n    # Iterate through columns to find the first non-zero element\n    for j in range(num_cols):\n        for i in range(num_rows):\n            if grid[i][j] != 0:\n                return j  # Found the first non-zero column index\n    \n    # If no non-zero element is found after checking all columns\n    return -1 \n\ndef transform(input_grid):\n    \"\"\"\n    Applies the conditional column swapping transformation to the input grid.\n\n    Args:\n        input_grid: A list of lists representing the input 2D grid.\n\n    Returns:\n        A list of lists representing the transformed 2D grid.\n    \"\"\"\n    # Handle empty grid case immediately\n    if not input_grid or not input_grid[0]:\n        return []\n\n    num_rows = len(input_grid)\n    num_cols = len(input_grid[0])\n    \n    # Initialize output_grid as a deep copy to avoid modifying the input\n    output_grid = copy.deepcopy(input_grid)\n\n    # 1. Inspect Input Grid: Find the index of the first non-zero column\n    first_nz_col_index = find_first_non_zero_col(input_grid)\n\n    # 2. Determine Swap Pattern: Set the starting index for swapping\n    # If no non-zero found (first_nz_col_index == -1), treat as even (start at 0)\n    if first_nz_col_index != -1 and first_nz_col_index % 2 != 0:\n        # Odd index means start swapping from pair (1, 2)\n        start_index = 1 \n    else:\n        # Even index or all zeros means start swapping from pair (0, 1)\n        start_index = 0 \n\n    # 3. Perform Swaps: Iterate through column pairs and swap if needed\n    # Iterate through the columns with a step of 2, starting from the determined index\n    for j in range(start_index, num_cols - 1, 2):\n        # The loop condition 'num_cols - 1' ensures j+1 is always a valid column index\n        \n        # Swap the entire contents of column j with column j+1\n        for i in range(num_rows):\n            # Swap elements in each row for the current pair of columns\n            output_grid[i][j], output_grid[i][j+1] = output_grid[i][j+1], output_grid[i][j]\n\n    # 4. Output: Return the modified grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5688,
    "candidates_token_count": 1261,
    "total_token_count": 6949,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.640942,
  "retries": 1
}