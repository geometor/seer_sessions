task_elements:
  - object: grid
    properties:
      - type: 2D array (list of lists) of integers
      - dimensions: M rows, N columns (variable, e.g., 5x5 in examples)
      - cells: contain non-negative integers
  - property: first_non_zero_column_index
    description: The smallest column index `j` such that at least one cell `grid[i][j]` is non-zero. If all cells are zero, this property is considered to have an effective index of 0 (even parity).
    value_range: 0 to N-1, or conceptually 0 if all zeros.
  - property: column_index_parity
    based_on: first_non_zero_column_index
    values:
      - even: If the first non-zero column index is 0, 2, 4, ... or if the grid is all zeros.
      - odd: If the first non-zero column index is 1, 3, 5, ...
  - action: swap_adjacent_columns
    target: Pairs of columns `(j, j+1)` in the grid.
    condition: The selection of pairs to swap depends on the `column_index_parity`.
    effect: The entire content of column `j` is exchanged with the entire content of column `j+1`.
transformation_goal:
  - Modify the input grid by conditionally swapping adjacent column pairs based on the parity of the first non-zero column's index.
transformation_logic:
  - step_1: Determine the `first_non_zero_column_index`.
  - step_2: Determine the `column_index_parity`.
  - step_3: If parity is `even`, set `start_swap_index` to 0.
  - step_4: If parity is `odd`, set `start_swap_index` to 1.
  - step_5: Perform `swap_adjacent_columns` action for pairs `(j, j+1)` where `j` starts at `start_swap_index` and increments by 2 (`j = start_swap_index, start_swap_index + 2, ...`), ensuring `j+1` is within grid bounds.