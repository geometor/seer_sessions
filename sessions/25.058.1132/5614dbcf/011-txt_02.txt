import numpy as np

def transform(input_grid):
    # Determine input dimensions
    input_height = input_grid.shape[0]
    input_width = input_grid.shape[1]

    # Calculate subgrid dimensions
    subgrid_height = input_height // 3
    subgrid_width = input_width // 3

    # Create output grid
    output_grid = np.zeros((3, 3), dtype=int)

    # Iterate through subgrids
    for i in range(3):
        for j in range(3):
            # Calculate starting indices of the subgrid
            start_row = i * subgrid_height
            start_col = j * subgrid_width

            # Extract top-left pixel value
            selected_value = input_grid[start_row][start_col]

            # Place value in output grid
            output_grid[i][j] = selected_value

    return output_grid

# Example Usage (replace with your actual data loading)
#this is simply placeholder data
train_data = [
        (np.array([[1, 1, 1, 2, 2, 2, 3, 3, 3],
                  [1, 1, 1, 2, 2, 2, 3, 3, 3],
                  [1, 1, 1, 2, 2, 2, 3, 3, 3],
                  [4, 4, 4, 5, 5, 5, 6, 6, 6],
                  [4, 4, 4, 5, 5, 5, 6, 6, 6],
                  [4, 4, 4, 5, 5, 5, 6, 6, 6],
                  [7, 7, 7, 8, 8, 8, 9, 9, 9],
                  [7, 7, 7, 8, 8, 8, 9, 9, 9],
                  [7, 7, 7, 8, 8, 8, 9, 9, 9]]),
         np.array([[1, 2, 3],
                  [4, 5, 6],
                  [7, 8, 9]])),
        (np.array([[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
                   [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
                   [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
                   [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0],
                   [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0],
                   [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0],
                   [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                   [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                   [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                   [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                   [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                   [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]]),
         np.array([[3, 3, 3],
                   [3, 3, 0],
                   [5, 5, 5]])),
        (np.array([[1, 0, 0, 0, 1, 0, 0, 0, 1],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 1, 0, 0, 0, 1, 0],
                    [1, 0, 0, 0, 1, 0, 0, 0, 1],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 1, 0, 0, 0, 1, 0],
                    [1, 0, 0, 0, 1, 0, 0, 0, 1]]),
         np.array([[1,0,1],
                   [1,1,1],
                   [1,1,1]])
        )
    ]
for i, (input_grid, expected_output) in enumerate(train_data):
    output = transform(input_grid.copy())
    print(f"Example {i + 1}:")
    print(f"Input:\n{input_grid}")
    print(f"Expected Output:\n{expected_output}")
    print(f"Actual Output:\n{output}")
    print(f"Correct: {np.array_equal(output, expected_output)}")
    print("-" * 20)
