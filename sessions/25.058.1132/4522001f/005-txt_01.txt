import numpy as np

def analyze_grid(grid):
    dimensions = grid.shape
    unique, counts = np.unique(grid, return_counts=True)
    color_counts = dict(zip(unique, counts))
    red_positions = np.argwhere(grid == 2)
    green_positions = np.argwhere(grid == 3)

    return {
        'dimensions': dimensions,
        'color_counts': color_counts,
        'red_positions': red_positions.tolist(),
        'green_positions': green_positions.tolist(),
    }

examples = [
    {'input': np.array([[7, 7, 7, 7, 7, 7, 7, 7, 7],
       [7, 7, 7, 7, 7, 7, 7, 2, 7],
       [7, 7, 7, 7, 7, 7, 7, 7, 7],
       [7, 7, 7, 7, 7, 7, 7, 7, 7],
       [7, 7, 7, 7, 7, 7, 7, 7, 7],
       [7, 7, 7, 7, 7, 7, 7, 7, 7],
       [7, 7, 7, 7, 7, 7, 7, 7, 7],
       [7, 7, 7, 7, 7, 7, 7, 7, 7],
       [7, 7, 7, 7, 7, 7, 7, 7, 7]]),
    'output': np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 3, 3, 3, 3, 0, 0, 0, 0],
       [0, 3, 3, 3, 3, 0, 0, 0, 0],
       [0, 3, 3, 3, 3, 0, 0, 0, 0],
       [0, 3, 3, 3, 3, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 3, 3, 3, 3],
       [0, 0, 0, 0, 0, 3, 3, 3, 3],
       [0, 0, 0, 0, 0, 3, 3, 3, 3],
       [0, 0, 0, 0, 0, 3, 3, 3, 3]])},
    {'input': np.array([[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],
                       [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],
                       [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],
                       [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 7],
                       [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],
                       [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],
                       [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]]),
    'output': np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])},
       {'input': np.array([[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],
                       [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],
                       [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],
                       [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],
                       [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],
                       [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 7, 7],
                       [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],
                       [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],
                       [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]]),
       'output': np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])}
]

for i, example in enumerate(examples):
    print(f"Example {i+1}:")
    print("Input Analysis:", analyze_grid(example['input']))
    print("Output Analysis:", analyze_grid(example['output']))
    print("-" * 30)