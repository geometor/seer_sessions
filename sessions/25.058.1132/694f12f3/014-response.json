{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies yellow outlines in the input grid and fills their inner area with a different color, maintaining a one-pixel yellow border.\nIf there's only one outline, it's filled with red. If there are two, the one positioned more towards the top or right is filled with red, and the other with blue. The shape does not have to be rectangular.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, color):\n    # Find all objects of a specific color\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n\n    def dfs(row, col, current_object):\n        if (\n            row < 0\n            or row >= grid.shape[0]\n            or col < 0\n            or col >= grid.shape[1]\n            or visited[row, col]\n            or grid[row, col] != color\n        ):\n            return\n\n        visited[row, col] = True\n        current_object.append((row, col))\n        dfs(row + 1, col, current_object)\n        dfs(row - 1, col, current_object)\n        dfs(row, col + 1, current_object)\n        dfs(row, col - 1, current_object)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] == color and not visited[row, col]:\n                current_object = []\n                dfs(row, col, current_object)\n                objects.append(current_object)\n    return objects\n\ndef get_bounding_box(object_pixels):\n    # get bounding box\n    min_row = min(pixel[0] for pixel in object_pixels)\n    max_row = max(pixel[0] for pixel in object_pixels)\n    min_col = min(pixel[1] for pixel in object_pixels)\n    max_col = max(pixel[1] for pixel in object_pixels)\n\n    return min_row, max_row, min_col, max_col\n\ndef flood_fill(grid, start_row, start_col, fill_color):\n    # flood fill within a yellow border\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    stack = [(start_row, start_col)]\n\n    while stack:\n        row, col = stack.pop()\n\n        if (row < 0 or row >= rows or col < 0 or col >= cols or\n                visited[row, col] or grid[row, col] == 4):\n            continue\n\n        visited[row, col] = True\n        grid[row, col] = fill_color\n\n        stack.append((row + 1, col))\n        stack.append((row - 1, col))\n        stack.append((row, col + 1))\n        stack.append((row, col - 1))\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of the input_grid\n    output_grid = np.copy(input_grid)\n\n    # Find yellow objects\n    yellow_objects = find_objects(input_grid, 4)\n    num_yellow_objects = len(yellow_objects)\n    \n    if num_yellow_objects == 0:\n        return output_grid\n\n    # Handle the cases based on the number of yellow outlines\n    if num_yellow_objects == 1:\n        # Fill the single outline with red\n        min_row, max_row, min_col, max_col = get_bounding_box(yellow_objects[0])\n        #find a start point within the outline\n        start_row = min_row + 1\n        start_col = min_col + 1\n        flood_fill(output_grid, start_row, start_col, 2) #fill with red\n\n    elif num_yellow_objects == 2:\n        # Determine which outline is more top-right\n        min_row1, max_row1, min_col1, max_col1 = get_bounding_box(yellow_objects[0])\n        min_row2, max_row2, min_col2, max_col2 = get_bounding_box(yellow_objects[1])\n\n        # Calculate a score for \"top-rightness\" (lower row and higher col is better)\n        score1 = -min_row1 + max_col1\n        score2 = -min_row2 + max_col2\n\n        if score1 > score2:\n            fill_color1 = 2 #red\n            fill_color2 = 1 #blue\n        elif score2 > score1:\n            fill_color1 = 1 #blue\n            fill_color2 = 2 #red\n        else:  # same score\n            if min_row1 < min_row2:  # object 1 is higher, so fill red\n                fill_color1 = 2 #red\n                fill_color2 = 1 #blue\n            else:\n                fill_color1 = 1 #blue\n                fill_color2 = 2 #red\n        #fill object 1\n        start_row1 = min_row1+1\n        start_col1 = min_col1+1\n        flood_fill(output_grid, start_row1, start_col1, fill_color1)\n        \n        #fill object 2\n        start_row2 = min_row2 + 1\n        start_col2 = min_col2 + 1\n        flood_fill(output_grid, start_row2, start_col2, fill_color2)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5746,
    "candidates_token_count": 1309,
    "total_token_count": 7055,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.492019,
  "response_file": "014-response.json"
}