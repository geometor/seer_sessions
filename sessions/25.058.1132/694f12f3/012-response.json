{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies yellow rectangles in the input grid and fills their inner area with a different color, maintaining a one-pixel yellow border.\nIf there's only one rectangle, it's filled with red. If there are two, the one positioned more towards the top or right is filled with red, and the other with blue.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, color):\n    # Find all objects of a specific color\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n\n    def dfs(row, col, current_object):\n        if (\n            row < 0\n            or row >= grid.shape[0]\n            or col < 0\n            or col >= grid.shape[1]\n            or visited[row, col]\n            or grid[row, col] != color\n        ):\n            return\n\n        visited[row, col] = True\n        current_object.append((row, col))\n        dfs(row + 1, col, current_object)\n        dfs(row - 1, col, current_object)\n        dfs(row, col + 1, current_object)\n        dfs(row, col - 1, current_object)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] == color and not visited[row, col]:\n                current_object = []\n                dfs(row, col, current_object)\n                objects.append(current_object)\n    return objects\n\ndef get_rectangle_bounds(object_pixels):\n    # get bounding box\n    min_row = min(pixel[0] for pixel in object_pixels)\n    max_row = max(pixel[0] for pixel in object_pixels)\n    min_col = min(pixel[1] for pixel in object_pixels)\n    max_col = max(pixel[1] for pixel in object_pixels)\n\n    return min_row, max_row, min_col, max_col\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of the input_grid\n    output_grid = np.copy(input_grid)\n\n    # Find yellow objects\n    yellow_objects = find_objects(input_grid, 4)\n\n    # Handle the cases based on the number of yellow rectangles\n    if len(yellow_objects) == 1:\n        # Fill the single rectangle with red\n        min_row, max_row, min_col, max_col = get_rectangle_bounds(yellow_objects[0])\n        for row in range(min_row + 1, max_row):\n            for col in range(min_col + 1, max_col):\n                output_grid[row, col] = 2  # Red\n\n    elif len(yellow_objects) == 2:\n        # Determine which rectangle is more top-right\n        min_row1, max_row1, min_col1, max_col1 = get_rectangle_bounds(yellow_objects[0])\n        min_row2, max_row2, min_col2, max_col2 = get_rectangle_bounds(yellow_objects[1])\n\n        # Calculate a score for \"top-rightness\" (lower row and higher col is better)\n        score1 = -min_row1 + max_col1\n        score2 = -min_row2+ max_col2\n        \n        if score1 > score2:\n            fill_color1 = 2\n            fill_color2 = 1\n        elif score2 > score1:\n            fill_color1 = 1\n            fill_color2 = 2\n        else: #same score\n            if min_row1 < min_row2: # object 1 is higher, so fill red\n                fill_color1 = 2\n                fill_color2 = 1\n            else:\n                fill_color1 = 1\n                fill_color2 = 2\n\n\n        # Fill the rectangles accordingly\n        for row in range(min_row1 + 1, max_row1):\n            for col in range(min_col1 + 1, max_col1):\n                output_grid[row, col] = fill_color1\n        for row in range(min_row2 + 1, max_row2):\n            for col in range(min_col2 + 1, max_col2):\n                output_grid[row, col] = fill_color2\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2719,
    "candidates_token_count": 1042,
    "total_token_count": 3761,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.75689,
  "response_file": "012-response.json"
}