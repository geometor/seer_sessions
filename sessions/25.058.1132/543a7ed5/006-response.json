{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Magenta Rectangles:** Find all rectangular shapes composed of contiguous magenta (6) pixels.\n\n2.  **Check for Enclosed Azure:** For each magenta rectangle, determine if it *completely* encloses one or more azure (8) pixels.  A pixel is considered \"enclosed\" if it is inside the rectangle and *not* part of the rectangle's border.\n\n3.  **Conditional Outline Modification:**\n    *   If a magenta rectangle *does not* completely enclose any azure (8) pixels, change *all* its magenta (6) pixels to green (3).\n    *   If a magenta rectangle *does* enclose azure pixels and those azure are not part of the border, proceed to step 4.\n\n4.  **Conditional Center Filling:** If a magenta rectangle completely encloses azure (8) pixels (and the enclosed pixels are not part of the border), replace the largest possible square of those \"inner\" azure pixels with yellow (4). The yellow square should be as large as possible while maintaining equal distance to all edges. If all azure pixels are part of the magenta border, this step is skipped.\n\n5.  **Adjacent Color Change:** Any azure (8) pixel that is directly adjacent (horizontally or vertically, *not* diagonally) to a green (3) or yellow (4) pixel is changed to green (3).\n\n6. **Preserve Unchanged:** Pixels that do not meet the above condition, remain unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, color):\n    objects = []\n    visited = set()\n\n    def is_valid(r, c):\n        return 0 <= r < grid.shape[0] and 0 <= c < grid.shape[1]\n\n    def dfs(r, c, current_object):\n        if (r, c) in visited or not is_valid(r, c) or grid[r, c] != color:\n            return\n        visited.add((r, c))\n        current_object.append((r, c))\n        for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            dfs(r + dr, c + dc, current_object)\n\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] == color and (r, c) not in visited:\n                current_object = []\n                dfs(r, c, current_object)\n                if current_object:\n                    objects.append(current_object)\n    return objects\n\ndef is_rectangle(obj):\n    rows, cols = zip(*obj)\n    min_row, max_row = min(rows), max(rows)\n    min_col, max_col = min(cols), max(cols)\n    return len(obj) == (max_row - min_row + 1) * (max_col - min_col + 1)\n\ndef get_rectangle_bounds(obj):\n    rows, cols = zip(*obj)\n    min_row, max_row = min(rows), max(rows)\n    min_col, max_col = min(cols), max(cols)\n    return min_row, max_row, min_col, max_col\n\ndef encloses_color(grid, obj, color):\n    min_row, max_row, min_col, max_col = get_rectangle_bounds(obj)\n    # Check only the inner pixels, not the border\n    for r in range(min_row + 1, max_row):\n        for c in range(min_col + 1, max_col):\n            if grid[r,c] == color:\n                return True\n    return False\n\ndef get_center_square(obj, grid):\n    min_row, max_row, min_col, max_col = get_rectangle_bounds(obj)\n    \n    height = max_row - min_row + 1\n    width = max_col - min_col + 1\n\n    if height < 3 or width < 3:\n        return []  # No center if smaller than 3x3\n\n    # Define interior boundaries (excluding the border)\n    center_min_row = min_row + 1\n    center_max_row = max_row - 1\n    center_min_col = min_col + 1\n    center_max_col = max_col - 1\n    \n\n    # Shrink from all sides to find largest azure center.\n    while (center_max_row > center_min_row and center_max_col > center_min_col):\n          temp = grid[center_min_row:center_max_row+1, center_min_col:center_max_col+1]\n          if not np.all(temp == 8):\n             break\n          else:\n            center_min_row += 1\n            center_max_row -= 1\n            center_min_col += 1\n            center_max_col -= 1\n\n    center_square = []\n    for r in range(center_min_row, center_max_row + 1):\n        for c in range(center_min_col, center_max_col + 1):\n                center_square.append((r,c))\n\n    return center_square\n    \n\ndef is_adjacent(grid, r, c, colors):\n    for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n        nr, nc = r + dr, c + dc\n        if 0 <= nr < grid.shape[0] and 0 <= nc < grid.shape[1] and grid[nr, nc] in colors:\n            return True\n    return False\n    \n\ndef transform(input_grid):\n    output_grid = np.copy(input_grid)\n    magenta_objects = find_objects(input_grid, 6)\n    rectangles = [obj for obj in magenta_objects if is_rectangle(obj)]\n    \n    for rect in rectangles:\n        #Outline Modification\n        if not encloses_color(input_grid, rect, 8):\n             for r, c in rect:\n                output_grid[r, c] = 3  # Change to green\n        #Fill Interior\n        elif encloses_color(input_grid,rect, 8):\n            center_square = get_center_square(rect, input_grid)\n            for r, c in center_square:\n                output_grid[r,c] = 4\n\n    #Background Modification\n    for r in range(output_grid.shape[0]):\n        for c in range(output_grid.shape[1]):\n            if output_grid[r,c] == 8:\n                if is_adjacent(output_grid, r, c, [3, 4]):\n                  output_grid[r,c] = 3\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4375,
    "candidates_token_count": 1601,
    "total_token_count": 5976,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 13.038429,
  "response_file": "006-response.json"
}