import numpy as np

def describe_grid(grid, grid_name):
    rows, cols = grid.shape
    unique_colors = np.unique(grid)
    description = f"{grid_name}: {rows}x{cols}\n"
    description += f"  Colors: {list(unique_colors)}\n"

    # find red diagonal, if it exists
    red_positions = np.where(grid == 2)
    if len(red_positions[0]) > 0:
        # check for diagonal
        is_diagonal = True
        for i in range(1, len(red_positions[0])):
            if (red_positions[0][i] != red_positions[0][i-1] + 1) or \
               (red_positions[1][i] != red_positions[1][i-1] -1):
                is_diagonal = False
                break
        if is_diagonal:
            description += f"  Red Diagonal: Length {len(red_positions[0])}, starts at ({red_positions[0][0]}, {red_positions[1][0]})\n"
        else:
            description += "Red is present, but not a diagonal\n"

    # check the yellow
    yellow_positions = np.where(grid == 4)
    if len(yellow_positions[0]) > 0:
      description += f"  Yellow: present\n"

    return description

task_data = [
    {
        "input": [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 6],
            [0, 0, 0, 0, 0, 0, 0, 0, 6, 6],
            [0, 0, 0, 0, 0, 0, 0, 6, 6, 6],
            [0, 0, 0, 0, 0, 0, 6, 6, 6, 6],
            [0, 0, 0, 0, 0, 6, 6, 6, 6, 6]
        ],
        "output": [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 2],
            [0, 0, 0, 0, 0, 0, 0, 0, 2, 4],
            [0, 0, 0, 0, 0, 0, 0, 2, 4, 4],
            [0, 0, 0, 0, 0, 0, 2, 4, 4, 4],
            [0, 0, 0, 0, 0, 2, 4, 4, 4, 4],
            [0, 0, 0, 0, 2, 4, 4, 4, 4, 4]
        ]
    },
    {
        "input": [
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        "output": [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 2],
            [0, 0, 0, 0, 0, 0, 0, 0, 2, 4],
            [0, 0, 0, 0, 0, 0, 0, 2, 4, 4],
            [0, 0, 0, 0, 0, 0, 2, 4, 4, 4],
            [0, 0, 0, 0, 0, 2, 4, 4, 4, 4],
            [0, 0, 0, 0, 2, 4, 4, 4, 4, 4]
        ]
    },
        {
        "input": [
            [6, 0, 6, 0, 6, 0, 6, 0, 6, 0, 6],
            [0, 6, 0, 6, 0, 6, 0, 6, 0, 6, 0],
            [6, 0, 6, 0, 6, 0, 6, 0, 6, 0, 6],
            [0, 6, 0, 6, 0, 6, 0, 6, 0, 6, 0],
            [6, 0, 6, 0, 6, 0, 6, 0, 6, 0, 6],
            [0, 6, 0, 6, 0, 6, 0, 6, 0, 6, 0],
            [6, 0, 6, 0, 6, 0, 6, 0, 6, 0, 6]
        ],
        "output": [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 4],
            [0, 0, 0, 0, 0, 0, 0, 0, 2, 4, 4],
            [0, 0, 0, 0, 0, 0, 0, 2, 4, 4, 4],
            [0, 0, 0, 0, 0, 0, 2, 4, 4, 4, 4],
            [0, 0, 0, 0, 0, 2, 4, 4, 4, 4, 4],
            [0, 0, 0, 0, 2, 4, 4, 4, 4, 4, 4]
        ]
    }
]

for i, example in enumerate(task_data):
    input_grid = np.array(example["input"])
    output_grid = np.array(example["output"])
    predicted_grid = transform(input_grid)

    print(f"Example {i+1}:")
    print(describe_grid(input_grid, "Input"))
    print(describe_grid(output_grid, "Expected Output"))
    print(describe_grid(predicted_grid, "Predicted Output"))
    print("-" * 20)