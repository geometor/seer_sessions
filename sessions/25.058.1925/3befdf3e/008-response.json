{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify the Magenta Object:** Locate the contiguous region of magenta (color 6) pixels.\n\n2.  **Expand Magenta:** Expand the magenta object by one pixel in all four cardinal directions (up, down, left, and right).\n\n3. **Identify adjacent objects:** locate all objects adjacent to the magenta object, before and after expansion.\n\n4.  **Move Combined Object:** Shift the expanded magenta object, and any objects that were adjacent to the *original* magenta object, upwards by one row. Pixels of the objects retain their original color.\n\n5.  **Preserve Unmoved:** Any pixels not part of the moved objects should retain their original color and position in the output grid.\n\"\"\"\n\nimport numpy as np\n\ndef find_object(grid, color):\n    \"\"\"Finds coordinates of pixels with the specified color.\"\"\"\n    return np.argwhere(grid == color)\n\ndef expand_object(grid, object_coords):\n    \"\"\"Expands the object by one pixel in all directions.\"\"\"\n    expanded_coords = set()\n    for r, c in object_coords:\n        expanded_coords.add((r, c))\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            expanded_coords.add((r + dr, c + dc))\n    return list(expanded_coords)\n\ndef find_adjacent_pixels(grid, object_coords):\n    \"\"\"Finds all pixels adjacent to the given object coordinates.\"\"\"\n    adjacent_pixels = set()\n    for r, c in object_coords:\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < grid.shape[0] and 0 <= nc < grid.shape[1]:\n                adjacent_pixels.add((nr, nc))\n    return adjacent_pixels\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n\n    # 1. Identify the Magenta Object\n    magenta_coords = find_object(input_grid, 6)\n    if magenta_coords.size == 0:\n        return output_grid\n\n    # 2. Expand Magenta\n    expanded_magenta_coords = expand_object(input_grid, magenta_coords)\n\n    # 3. Identify adjacent objects (before expansion)\n    adjacent_to_original = find_adjacent_pixels(input_grid, magenta_coords)\n    adjacent_colors_original = set()\n    for r, c in adjacent_to_original:\n        if (r,c) not in magenta_coords:\n            adjacent_colors_original.add((input_grid[r,c],(r,c))) # store the color\n\n    # Create a mask for moving objects (expanded magenta + original adjacent)\n    move_mask = np.zeros_like(input_grid, dtype=bool)\n    # expanded magenta\n    for r, c in expanded_magenta_coords:\n        if 0 <= r < input_grid.shape[0] and 0 <= c < input_grid.shape[1]:\n            move_mask[r, c] = True\n    # originally adjacent pixels, but not magenta\n    for color, (r,c) in adjacent_colors_original:\n        move_mask[r,c] = True\n\n    # 4. Move Combined Object Upwards\n    moved_grid = np.zeros_like(input_grid)\n    for r in range(input_grid.shape[0]):\n        for c in range(input_grid.shape[1]):\n            if move_mask[r, c]:\n                if 0 <= r - 1 < input_grid.shape[0]:\n                    if (r,c) in expanded_magenta_coords:\n                        moved_grid[r-1,c] = 6  # magenta\n                    else:\n                        for color, (orow, ocol) in adjacent_colors_original:\n                            if r == orow and c == ocol:\n                              moved_grid[r-1,c] = color\n\n\n    # 5. Preserve Unmoved and Combine\n    output_grid = np.where(moved_grid != 0, moved_grid, output_grid)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2843,
    "candidates_token_count": 993,
    "total_token_count": 3836,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.757866,
  "response_file": "008-response.json"
}