{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Find the contiguous magenta (color 6) object and the surrounding yellow (color 4) object. Consider these as a single combined object.\n2.  **Expand Magenta:** Expand the magenta object by one pixel in all four cardinal directions (up, down, left, and right). The expanded magenta pixels will occupy positions previously held by yellow.\n3.  **Move Up:** Shift the resulting combined object (expanded magenta and remaining yellow) upwards by one row. The rest of the grid remains unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef find_object(grid, color):\n    \"\"\"Finds coordinates of pixels with the specified color.\"\"\"\n    coords = np.argwhere(grid == color)\n    if coords.size == 0:\n        return None\n    return coords\n\ndef expand_magenta(grid, magenta_coords):\n    \"\"\"Expands the magenta object by one pixel in all directions.\"\"\"\n    expanded_coords = set()\n    for r, c in magenta_coords:\n        expanded_coords.add((r, c))\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            expanded_coords.add((r + dr, c + dc))\n    return list(expanded_coords)\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the defined rules.\"\"\"\n\n    output_grid = np.copy(input_grid)\n\n    # Find magenta object coordinates\n    magenta_coords = find_object(input_grid, 6)\n    if magenta_coords is None:\n        return output_grid\n\n    # Expand magenta object\n    expanded_magenta_coords = expand_magenta(input_grid, magenta_coords)\n\n    # Create a mask for the combined object (magenta + adjacent yellow)\n    combined_object_mask = np.zeros_like(input_grid, dtype=bool)\n\n    # Add expanded magenta coords to mask\n    for r, c in expanded_magenta_coords:\n        if 0 <= r < input_grid.shape[0] and 0 <= c < input_grid.shape[1]:\n          combined_object_mask[r,c] = True\n\n    yellow_coords = find_object(input_grid, 4)\n    for r, c in yellow_coords:\n        if 0 <= r < input_grid.shape[0] and 0 <= c < input_grid.shape[1]:\n            if (r+1,c) in expanded_magenta_coords or (r-1,c) in expanded_magenta_coords or (r,c+1) in expanded_magenta_coords or (r, c-1) in expanded_magenta_coords:\n                combined_object_mask[r,c] = True\n\n\n    # create blank output grid and apply object mask shifted by -1\n    moved_grid = np.zeros_like(input_grid)\n\n    for r in range(input_grid.shape[0]):\n      for c in range(input_grid.shape[1]):\n        if combined_object_mask[r,c]:\n            if 0 <= r - 1 < input_grid.shape[0]:\n                if (r,c) in expanded_magenta_coords:\n                  moved_grid[r-1,c] = 6\n                elif input_grid[r,c] == 4:\n                  moved_grid[r-1,c] = 4\n\n    # copy unmoved parts and overlay moved grid\n    output_grid = np.copy(input_grid) #copy all\n\n    output_grid = np.where(moved_grid != 0, moved_grid, output_grid)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3951,
    "candidates_token_count": 840,
    "total_token_count": 4791,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.833323,
  "response_file": "006-response.json"
}