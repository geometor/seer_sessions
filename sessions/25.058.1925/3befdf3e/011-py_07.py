import numpy as np

def code_execution(input_grid, output_grid, expected_grid):

    def find_object(grid, color):
        coords = np.argwhere(grid == color)
        if coords.size == 0:
            return None, None, None, None  # Handle cases with no object of given color
        min_row = np.min(coords[:, 0])
        max_row = np.max(coords[:, 0])
        min_col = np.min(coords[:, 1])
        max_col = np.max(coords[:, 1])

        return min_row, max_row, min_col, max_col
    
    def bounding_box_dimensions(grid, color):
        min_row, max_row, min_col, max_col = find_object(grid,color)
        if min_row is None:
            return 0,0
        height = max_row - min_row + 1
        width = max_col - min_col + 1
        return height, width

    output_red_h, output_red_w = bounding_box_dimensions(output_grid, 2)
    expected_red_h, expected_red_w = bounding_box_dimensions(expected_grid, 2)
    output_orange_h, output_orange_w = bounding_box_dimensions(output_grid, 7)
    expected_orange_h, expected_orange_w = bounding_box_dimensions(expected_grid, 7)

    return {
        'output_red_height': output_red_h,
        'output_red_width': output_red_w,
        'expected_red_height': expected_red_h,
        'expected_red_width': expected_red_w,
        'output_orange_height': output_orange_h,
        'output_orange_width': output_orange_w,
        'expected_orange_height': expected_orange_h,
        'expected_orange_width': expected_orange_w,
        
    }

# Example grids (replace with actual data)
example_data = [
    {
        "input": np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 2, 2, 2, 0, 0],
                           [0, 0, 0, 0, 2, 7, 2, 0, 0],
                           [0, 0, 0, 0, 2, 2, 2, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
        "output": np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 2, 2, 2, 0, 0],
       [0, 0, 0, 2, 2, 2, 2, 0, 0],
       [0, 0, 0, 2, 2, 2, 2, 0, 0],
       [0, 0, 0, 2, 7, 2, 7, 0, 0],
       [0, 0, 0, 2, 2, 2, 2, 0, 0],
       [0, 0, 0, 2, 2, 2, 2, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
        "expected": np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 2, 2, 2, 0, 0],
                           [0, 0, 0, 2, 2, 2, 2, 0, 0],
                           [0, 0, 0, 2, 2, 2, 2, 0, 0],
                           [0, 0, 0, 2, 7, 2, 7, 0, 0],
                           [0, 0, 0, 2, 2, 2, 2, 0, 0],
                           [0, 0, 0, 2, 2, 2, 2, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
    },
     {
        "input": np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0],
       [0, 0, 0, 0, 2, 7, 2, 0, 0, 0, 0],
       [0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
        "output": np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0],
       [0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0],
       [0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0],
       [0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0],
       [0, 0, 0, 2, 7, 2, 7, 0, 0, 0, 0],
       [0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0],
       [0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
        "expected": np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0],
       [0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0],
       [0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0],
       [0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0],
       [0, 0, 0, 2, 7, 2, 7, 0, 0, 0, 0],
       [0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0],
       [0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
    },
    {
        "input": np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 2, 7, 2, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
        "output": np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0],
       [0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0],
       [0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0],
       [0, 0, 0, 0, 2, 7, 2, 7, 2, 0, 0, 0, 0],
       [0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0],
       [0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
        "expected": np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0],
       [0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0],
       [0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0],
       [0, 0, 0, 0, 2, 7, 2, 7, 2, 0, 0, 0, 0],
       [0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0],
       [0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
    },
]

results = [code_execution(data["input"], data["output"], data["expected"]) for data in example_data]
print(results)