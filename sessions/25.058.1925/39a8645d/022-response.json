{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies the smallest object in the input grid, and copies it to an output grid of the same size, setting all other pixels to background (0/white).\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"\n    Finds all distinct objects in a grid.  An object is a contiguous set of\n    pixels with same value.\n\n    Returns a dictionary of objects, keyed by color,\n    with each entry containing a list of (row, col) coordinates.\n    \"\"\"\n    objects = {}\n    visited = set()\n\n    def dfs(row, col, color, coords):\n        if (row, col) in visited or not (0 <= row < grid.shape[0] and 0 <= col < grid.shape[1]) or grid[row, col] != color:\n            return\n        visited.add((row, col))\n        coords.append((row, col))\n        dfs(row + 1, col, color, coords)\n        dfs(row - 1, col, color, coords)\n        dfs(row, col + 1, color, coords)\n        dfs(row, col - 1, color, coords)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            color = grid[row, col]\n            if color != 0 and (row, col) not in visited:\n                if color not in objects:\n                    objects[color] = []\n                coords = []\n                dfs(row, col, color, coords)\n                objects[color].append(coords)\n    return objects\n\ndef find_smallest_object(objects):\n    \"\"\"\n    Finds the smallest object among all colors.  If there are multiple objects\n    of the same smallest size, select the one whose top-left corner is\n    furthest to the top and then furthest to the left in the grid.\n    \"\"\"\n    min_size = float('inf')\n    target_object = None\n    \n    for color, obj_list in objects.items():\n        for obj_coords in obj_list:\n            size = len(obj_coords)\n            if size < min_size:\n                min_size = size\n                target_object = obj_coords\n            elif size == min_size:\n                # Tie-breaker: Top-most, then left-most\n                min_row_current = min(r for r, _ in target_object)\n                min_col_current = min(c for _, c in target_object)\n                min_row_new = min(r for r, _ in obj_coords)\n                min_col_new = min(c for _, c in obj_coords)\n\n                if min_row_new < min_row_current or (min_row_new == min_row_current and min_col_new < min_col_current):\n                    target_object = obj_coords\n    return target_object\n\ndef transform(input_grid):\n    # initialize output_grid to the same dimensions as the input, and filled with 0 (white)\n    output_grid = np.zeros_like(input_grid)\n\n    # Find all objects in the input grid.\n    objects = find_objects(input_grid)\n\n    # Find the smallest object.\n    target_object = find_smallest_object(objects)\n\n    # Copy the smallest object to the output grid at same position.\n    if target_object:\n        for r, c in target_object:\n            output_grid[r, c] = input_grid[r, c]\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3299,
    "candidates_token_count": 819,
    "total_token_count": 4118,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.804098,
  "response_file": "022-response.json"
}