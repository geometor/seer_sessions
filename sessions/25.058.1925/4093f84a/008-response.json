{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Check for All-Gray Row:** Examine the input grid to determine if there's a row where all pixels are gray (color value 5).\n\n2.  **Case 1: All-Gray Row Exists:**\n    *   If an all-gray row exists, create a new grid with a height of 3 and the same width as the input grid.\n    *   Copy the all-gray row and the row immediately above and below it from the input grid to the new output grid.\n    * All copied rows should remain gray.\n\n3.  **Case 2: No All-Gray Row:**\n    *   If no all-gray row exists, create a new grid that has same width as the input grid, and the input grid's height minus 2 (remove top and bottom row).\n    *   Fill all cells in the new grid with gray (color value 5).\n\"\"\"\n\nimport numpy as np\n\ndef find_gray_row(grid):\n    \"\"\"Finds the index of the first all-gray row in a grid.\"\"\"\n    for i, row in enumerate(grid):\n        if np.all(row == 5):\n            return i\n    return -1\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the defined rules.\"\"\"\n    gray_row_index = find_gray_row(input_grid)\n    input_grid_height = input_grid.shape[0]\n    input_grid_width = input_grid.shape[1]\n\n    if gray_row_index != -1:\n        # Case 1: All-Gray Row Exists\n        output_grid = np.full((3, input_grid_width), 5, dtype=int)\n        start_row = max(0, gray_row_index - 1)\n        end_row = min(input_grid_height, gray_row_index + 2)\n\n        # Adjust for boundary conditions\n        if(gray_row_index == 0):\n            output_grid[1,:] = input_grid[gray_row_index,:]\n            output_grid[2,:] = input_grid[gray_row_index+1,:]\n        elif(gray_row_index == input_grid_height-1):\n            output_grid[0,:] = input_grid[gray_row_index-1,:]\n            output_grid[1,:] = input_grid[gray_row_index,:]\n        else: # Copy rows, ensure all gray\n            output_grid[0, :] = input_grid[gray_row_index - 1, :]\n            output_grid[1,:] = input_grid[gray_row_index,:]\n            output_grid[2, :] = input_grid[gray_row_index + 1, :]\n\n        return output_grid\n\n    else:\n        # Case 2: No All-Gray Row\n        output_grid = np.full((input_grid_height - 2, input_grid_width), 5, dtype=int)\n        return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2598,
    "candidates_token_count": 698,
    "total_token_count": 3296,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.997098,
  "response_file": "008-response.json"
}