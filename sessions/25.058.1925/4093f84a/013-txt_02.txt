import numpy as np

def get_neighbor_colors(grid, r, c):
    """Gets the colors of the immediate neighbors of a pixel."""
    rows, cols = grid.shape
    neighbor_colors = []
    for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
        nr, nc = r + dr, c + dc
        if 0 <= nr < rows and 0 <= nc < cols:
            neighbor_colors.append(grid[nr, nc])
    return neighbor_colors

def transform(input_grid):
    """
    Transforms the input grid by removing green pixels based on their neighbors.
    """
    output_grid = np.copy(input_grid)
    rows, cols = input_grid.shape
    green_pixels = np.where(input_grid == 3)
    green_coords = list(zip(green_pixels[0], green_pixels[1]))

    for r, c in green_coords:
        neighbor_colors = get_neighbor_colors(input_grid, r, c)
        non_green_neighbors = [color for color in neighbor_colors if color != 3]

        if non_green_neighbors:
            # Prioritize gray, then blue, then red.
            if 5 in non_green_neighbors:
                output_grid[r, c] = 5
            elif 1 in non_green_neighbors:
                output_grid[r, c] = 1
            elif 2 in non_green_neighbors:
                output_grid[r,c] = 2
            else:
                 output_grid[r,c] = 0 # should never happen, based on observation

        else:
            # If no non-green neighbors, change to white.
            output_grid[r, c] = 0

    return output_grid

def compare_grids(grid1, grid2):
    """Compares two grids and returns a report."""
    if grid1.shape != grid2.shape:
        return "Grids have different shapes."
    diff = grid1 != grid2
    if not np.any(diff):
        return "Grids are identical."
    diff_indices = np.where(diff)
    diff_coords = list(zip(diff_indices[0], diff_indices[1]))
    report = f"Grids differ at {len(diff_coords)} locations:\n"
    for r, c in diff_coords:
        report += f"  ({r}, {c}): Expected {grid2[r, c]}, Got {grid1[r, c]}\n"
    return report

#Example grids - replace with example grids from problem

examples = [
    (np.array([[5, 5, 5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5, 5, 5]]),
     np.array([[5, 5, 5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5, 5, 5]])),
    (np.array([[5, 5, 5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 3, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 3, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5, 5, 5]]),
     np.array([[5, 5, 5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5, 5, 5]])),
    (np.array([[3, 3, 3, 3, 3, 3, 3, 3, 3],
               [3, 3, 3, 3, 3, 3, 3, 3, 3],
               [3, 3, 3, 3, 3, 3, 3, 3, 3],
               [3, 3, 3, 3, 3, 3, 3, 3, 3],
               [3, 3, 3, 3, 3, 3, 3, 3, 3],
               [3, 3, 3, 3, 3, 3, 3, 3, 3],
               [3, 3, 3, 3, 3, 3, 3, 3, 3],
               [3, 3, 3, 3, 3, 3, 3, 3, 3],
               [3, 3, 3, 3, 3, 3, 3, 3, 3]]),
     np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0]])),
    (np.array([[1, 1, 1, 1, 1, 1, 1, 1, 1],
               [1, 1, 1, 1, 1, 1, 1, 1, 1],
               [1, 1, 1, 1, 1, 1, 1, 1, 1],
               [1, 1, 1, 1, 1, 3, 1, 1, 1],
               [1, 1, 1, 1, 1, 1, 1, 1, 1],
               [1, 1, 1, 1, 1, 1, 1, 1, 1],
               [1, 1, 1, 1, 1, 1, 1, 1, 1],
               [1, 1, 1, 1, 1, 1, 1, 1, 1],
               [1, 1, 1, 1, 1, 1, 1, 1, 1]]),
     np.array([[1, 1, 1, 1, 1, 1, 1, 1, 1],
               [1, 1, 1, 1, 1, 1, 1, 1, 1],
               [1, 1, 1, 1, 1, 1, 1, 1, 1],
               [1, 1, 1, 1, 1, 1, 1, 1, 1],
               [1, 1, 1, 1, 1, 1, 1, 1, 1],
               [1, 1, 1, 1, 1, 1, 1, 1, 1],
               [1, 1, 1, 1, 1, 1, 1, 1, 1],
               [1, 1, 1, 1, 1, 1, 1, 1, 1],
               [1, 1, 1, 1, 1, 1, 1, 1, 1]])),
    (np.array([[2, 2, 2, 2, 2, 2, 2, 2, 2],
               [2, 2, 2, 2, 2, 2, 2, 2, 2],
               [2, 2, 2, 2, 2, 2, 2, 2, 2],
               [2, 2, 2, 2, 2, 2, 2, 2, 2],
               [2, 2, 2, 2, 2, 2, 2, 2, 2],
               [2, 2, 2, 2, 2, 3, 2, 2, 2],
               [2, 2, 2, 2, 2, 2, 2, 2, 2],
               [2, 2, 2, 2, 2, 2, 2, 2, 2],
               [2, 2, 2, 2, 2, 2, 2, 2, 2]]),
     np.array([[2, 2, 2, 2, 2, 2, 2, 2, 2],
               [2, 2, 2, 2, 2, 2, 2, 2, 2],
               [2, 2, 2, 2, 2, 2, 2, 2, 2],
               [2, 2, 2, 2, 2, 2, 2, 2, 2],
               [2, 2, 2, 2, 2, 2, 2, 2, 2],
               [2, 2, 2, 2, 2, 2, 2, 2, 2],
               [2, 2, 2, 2, 2, 2, 2, 2, 2],
               [2, 2, 2, 2, 2, 2, 2, 2, 2],
               [2, 2, 2, 2, 2, 2, 2, 2, 2]]))
]

for i, (input_grid, expected_output) in enumerate(examples):
    transformed_grid = transform(input_grid)
    report = compare_grids(transformed_grid, expected_output)
    print(f"Example {i + 1}:\n{report}\n")