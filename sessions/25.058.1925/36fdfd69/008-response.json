{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. Identify Red Objects: Locate all contiguous regions of red (2) pixels.\n2. Identify Adjacent Blue Pixels: For each red object, find all blue (1) pixels that are directly adjacent (sharing a side) to any part of the red object.\n3. Transform Adjacent Blue Pixels: If a blue pixel is adjacent to any red pixel, change the blue pixel to yellow (4). It does not need to be fully enclosed.\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, row, col):\n    \"\"\"\n    Returns a list of neighboring pixel coordinates for a given cell (only orthogonal).\n    \"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n        nr, nc = row + dr, col + dc\n        if 0 <= nr < rows and 0 <= nc < cols:\n            neighbors.append((nr, nc))\n    return neighbors\n\ndef find_objects(grid, color):\n    \"\"\"\n    Finds contiguous regions (objects) of a specific color in the grid.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n    objects = []\n\n    def dfs(row, col, current_object):\n        if (\n            row < 0\n            or row >= rows\n            or col < 0\n            or col >= cols\n            or visited[row, col]\n            or grid[row, col] != color\n        ):\n            return\n        visited[row, col] = True\n        current_object.append((row, col))\n        for neighbor_row, neighbor_col in get_neighbors(grid, row, col):\n            dfs(neighbor_row, neighbor_col, current_object)\n\n    for row in range(rows):\n        for col in range(cols):\n            if grid[row, col] == color and not visited[row, col]:\n                current_object = []\n                dfs(row, col, current_object)\n                objects.append(current_object)\n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the adjacency rule.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    red_objects = find_objects(input_grid, 2)\n\n    # Create a set of all red pixel coordinates for efficient adjacency checking\n    red_pixels = set()\n    for obj in red_objects:\n      red_pixels.update(obj)\n\n    # Iterate through all cells, checking for blue pixels adjacent to red\n    rows, cols = input_grid.shape\n    for row in range(rows):\n        for col in range(cols):\n            if input_grid[row, col] == 1:  # If it's a blue pixel\n                is_adjacent = False\n                for neighbor_row, neighbor_col in get_neighbors(input_grid, row, col):\n                    if (neighbor_row, neighbor_col) in red_pixels:\n                        is_adjacent = True\n                        break  # No need to check other neighbors\n                if is_adjacent:\n                    output_grid[row, col] = 4  # Change to yellow\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3649,
    "candidates_token_count": 754,
    "total_token_count": 4403,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.348897,
  "response_file": "008-response.json"
}