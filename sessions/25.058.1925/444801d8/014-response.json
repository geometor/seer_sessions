{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Background:** Determine the most frequent color in the input grid and designate it as the background color.\n\n2.  **Identify Blue Objects:** Find all distinct, contiguous regions of blue (1) pixels.  A contiguous region is defined as a group of blue pixels connected horizontally or vertically.\n\n3.  **Sort by Vertical Position:** Order the identified blue objects from top to bottom based on the row index of their topmost pixel.\n\n4.  **Topmost Object Outline:** For the topmost blue object, change the color of any pixels that are directly adjacent (horizontally or vertically) to the blue object, *and not* blue (1) or background colored to red (2).\n\n5.  **Bottommost Object Outline:** For the bottommost blue object, change the color of any pixels that are directly adjacent (horizontally or vertically) to the blue object, *and not* blue (1) or background colored to green (3).\n\n6.  **Overlap Resolution:** If a pixel would be changed by *both* the topmost and bottommost outline operations, do *not* modify its color (leave it as it was in the input).\n\"\"\"\n\nimport numpy as np\n\ndef get_objects(grid, color):\n    \"\"\"\n    Find connected regions of a specific color.\n    \"\"\"\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n\n    def dfs(row, col):\n        if (row < 0 or row >= grid.shape[0] or col < 0 or col >= grid.shape[1] or\n                visited[row, col] or grid[row, col] != color):\n            return []\n\n        visited[row, col] = True\n        region = [(row, col)]\n\n        region.extend(dfs(row + 1, col))\n        region.extend(dfs(row - 1, col))\n        region.extend(dfs(row, col + 1))\n        region.extend(dfs(row, col - 1))\n\n        return region\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] == color and not visited[row, col]:\n                objects.append(dfs(row, col))\n    return objects\n\ndef get_outline(grid, object_pixels, background_color):\n    \"\"\"\n    Find the outline pixels of an object, excluding background.\n    \"\"\"\n    outline = set()\n    for row, col in object_pixels:\n        neighbors = [(row + 1, col), (row - 1, col), (row, col + 1), (row, col - 1)]\n        for n_row, n_col in neighbors:\n            if (0 <= n_row < grid.shape[0] and 0 <= n_col < grid.shape[1] and\n                    grid[n_row, n_col] != 1 and grid[n_row, n_col] != background_color):\n                outline.add((n_row, n_col))\n    return list(outline)\n\ndef transform(input_grid):\n    # Initialize output grid\n    output_grid = np.copy(input_grid)\n\n    # Find the most frequent color (background)\n    colors, counts = np.unique(input_grid, return_counts=True)\n    background_color_index = np.argmax(counts)\n    background_color = colors[background_color_index]\n\n    # Find blue objects\n    blue_objects = get_objects(input_grid, 1)\n\n    # Sort blue objects by topmost row\n    blue_objects.sort(key=lambda obj: min(pixel[0] for pixel in obj))\n\n    # Get outlines, excluding background pixels\n    outlines = []\n    for obj in blue_objects:\n        outlines.append(get_outline(input_grid, obj, background_color))\n\n    # Topmost object outline\n    if len(blue_objects) > 0:\n        top_outline = outlines[0]\n        for row, col in top_outline:\n            output_grid[row, col] = 2\n\n    # Bottommost object outline, handle overlap\n    if len(blue_objects) > 1:\n        bottom_outline = outlines[-1]\n        for row, col in bottom_outline:\n            if (row, col) not in (top_outline if len(blue_objects)>0 else []):  # Check for overlap\n                output_grid[row, col] = 3\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6056,
    "candidates_token_count": 1029,
    "total_token_count": 7085,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.008774,
  "response_file": "014-response.json"
}