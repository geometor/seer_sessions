{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation identifies shapes created by blue objects. White cells\ndiagonally adjacent to blue pixels are changed to red.  Additionally, white pixels\nabove a line formed by connecting the two lowest blue pixels within an object are\nalso changed to red.\n\"\"\"\n\nimport numpy as np\n\ndef find_blue_objects(grid):\n    \"\"\"Finds contiguous regions of blue (1) pixels.\"\"\"\n    rows, cols = len(grid), len(grid[0])\n    visited = set()\n    objects = []\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def dfs(r, c, current_object):\n        if (r, c) in visited or not is_valid(r, c) or grid[r][c] != 1:\n            return\n        visited.add((r, c))\n        current_object.append((r, c))\n        for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            dfs(r + dr, c + dc, current_object)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r][c] == 1 and (r, c) not in visited:\n                current_object = []\n                dfs(r, c, current_object)\n                objects.append(current_object)\n    return objects\n\ndef is_diagonally_adjacent(r, c, object_coords):\n    \"\"\"Checks if a cell (r, c) is diagonally adjacent to any cell in object_coords.\"\"\"\n    for obj_r, obj_c in object_coords:\n        if abs(r - obj_r) == 1 and abs(c - obj_c) == 1:\n            return True\n    return False\n\ndef find_lowest_blue_pixels(object_coords):\n    \"\"\"Finds the two lowest blue pixels within a single object.\"\"\"\n    # Sort by row index (descending) then by column index.\n    sorted_coords = sorted(object_coords, key=lambda x: (x[0], x[1]), reverse=True)\n    # If only one pixel, return it twice (line will have zero length)\n    if len(sorted_coords) == 1:\n        return sorted_coords[0], sorted_coords[0]\n\n    # Get the two lowest distinct pixels\n    lowest1 = sorted_coords[0]\n    for pixel in sorted_coords[1:]:\n        if pixel != lowest1:\n            lowest2 = pixel\n            break\n        \n    else:\n        lowest2 = lowest1\n\n    # lowest1 is guaranteed to be larger or equal, swap so that lowest1.r <= lowest2.r\n    if lowest1[0] < lowest2[0] or (lowest1[0] == lowest2[0] and lowest1[1] > lowest2[1]):\n        lowest1, lowest2 = lowest2, lowest1\n\n\n    return lowest1, lowest2\n\ndef is_above_line(r, c, lowest1, lowest2):\n    \"\"\"Checks if a point (r, c) is above the line segment defined by p1 and p2.\n    Handles edge cases for vertical and horizontal lines.\n    \"\"\"\n    r1, c1 = lowest1\n    r2, c2 = lowest2\n\n    if r1 == r2: # Horizontal line\n        return r < r1\n\n    if c1 == c2: # vertical line\n       return r < r1 and (c >= min(c1,c2) and c <= max(c1,c2)) # Check\n\n    # Calculate the slope and y-intercept\n    m = (r2 - r1) / (c2 - c1)\n    b = r1 - m * c1\n\n    # Check if the point is above the line\n    line_y_at_c = m * c + b\n    return r < line_y_at_c\n\ndef transform(input_grid):\n    # Initialize output_grid with a copy of the input_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = len(input_grid), len(input_grid[0])\n\n    # Find blue objects\n    blue_objects = find_blue_objects(input_grid)\n\n    # Iterate through all cells\n    for r in range(rows):\n        for c in range(cols):\n            if input_grid[r][c] == 0:  # Consider only white cells\n                for obj_coords in blue_objects:\n                    # Check diagonal adjacency first.\n                    if is_diagonally_adjacent(r, c, obj_coords):\n                        output_grid[r][c] = 2\n                        continue # move to next cell\n\n                    # Check if inside using the \"above the lowest line\" definition.\n                    lowest1, lowest2 = find_lowest_blue_pixels(obj_coords)\n\n                    if is_above_line(r, c, lowest1, lowest2):\n                         output_grid[r][c] = 2 # set to red\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7969,
    "candidates_token_count": 1170,
    "total_token_count": 9139,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 12.685299,
  "response_file": "008-response.json"
}