{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe program identifies each 2x1 azure rectangle. For the topmost rectangle, add a blue cell to the immediate right. For the bottommost rectangle, add a blue cell to the immediate left.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, color):\n    # Find all objects of a specific color in the grid.\n    objects = []\n    visited = set()\n\n    def is_valid(pos):\n        return 0 <= pos[0] < grid.shape[0] and 0 <= pos[1] < grid.shape[1]\n\n    def dfs(pos, current_object):\n        if not is_valid(pos) or grid[pos] != color or pos in visited:\n            return\n        visited.add(pos)\n        current_object.append(pos)\n        neighbors = [(pos[0] + 1, pos[1]), (pos[0] - 1, pos[1]),\n                     (pos[0], pos[1] + 1), (pos[0], pos[1] - 1)]\n        for neighbor in neighbors:\n            dfs(neighbor, current_object)\n\n    for i in range(grid.shape[0]):\n        for j in range(grid.shape[1]):\n            if grid[i, j] == color and (i, j) not in visited:\n                current_object = []\n                dfs((i, j), current_object)\n                objects.append(current_object)\n    return objects\n\ndef is_2x1_rectangle(obj, grid):\n   # checks that shape is a 2x1 rectangle\n    if len(obj) != 2:\n        return False\n    coords = np.array(obj)\n    min_row, min_col = np.min(coords, axis=0)\n    max_row, max_col = np.max(coords, axis=0)\n\n    return (max_row - min_row == 1 and max_col - min_col == 0) or \\\n           (max_row - min_row == 0 and max_col - min_col == 1)\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of input_grid\n    output_grid = np.copy(input_grid)\n    \n    # Find all azure (color 8) objects\n    azure_objects = find_objects(input_grid, 8)\n\n    # Filter for 2x1 rectangles\n    rectangles_2x1 = [obj for obj in azure_objects if is_2x1_rectangle(obj, input_grid)]\n    \n    # Sort rectangles based on their top-left corner's row, then column\n    rectangles_2x1.sort(key=lambda obj: (min(r for r, _ in obj), min(c for _, c in obj)))\n    \n    # Process the rectangles\n    if len(rectangles_2x1) >= 1:\n        # Top rectangle: Add a blue cell to the immediate right\n        top_rect = rectangles_2x1[0]\n        top_rect_coords = np.array(top_rect)\n        top_right_coord = (top_rect_coords[0,0], np.max(top_rect_coords[:, 1]) + 1)\n\n        \n        if 0 <= top_right_coord[0] < output_grid.shape[0] and 0 <= top_right_coord[1] < output_grid.shape[1]:\n            output_grid[top_right_coord] = 1\n\n    if len(rectangles_2x1) >= 2:\n\n        # Bottom rectangle, add a blue cell immediately to the left.\n        bottom_rect = rectangles_2x1[1]\n        bottom_rect_coords = np.array(bottom_rect)\n\n        bottom_left_coord = (bottom_rect_coords[0,0], np.min(bottom_rect_coords[:, 1]) - 1)\n\n        if 0 <= bottom_left_coord[0] < output_grid.shape[0] and 0<= bottom_left_coord[1] < output_grid.shape[1]:\n            output_grid[bottom_left_coord] = 1\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1779,
    "candidates_token_count": 976,
    "total_token_count": 2755,
    "cached_content_token_count": 0
  },
  "timing": {
    "response_time": 10.092889
  },
  "response_file": "002-response.json"
}