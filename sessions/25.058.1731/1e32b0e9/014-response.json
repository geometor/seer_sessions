{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation rule involves expanding blue lines from existing blue and green pixels, stopping at edges or non-zero pixels.\nBlue pixels expand both horizontally and vertically. \nGreen pixels initiate a vertical expansion of blue *if* there's a blue pixel *anywhere* below it in the same column.\nGreen pixels initiate horizontal expansion of blue if there's a blue pixel *anywhere* to its right on the same row.\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, row, col):\n    \"\"\"\n    Returns a list of valid (within bounds) neighbors' coordinates (row, col) \n    for a given cell in the grid.  Includes only horizontal and vertical \n    neighbors, not diagonal.\n    \"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    if row > 0:\n        neighbors.append((row - 1, col))  # Up\n    if row < rows - 1:\n        neighbors.append((row + 1, col))  # Down\n    if col > 0:\n        neighbors.append((row, col - 1))  # Left\n    if col < cols - 1:\n        neighbors.append((row, col + 1))  # Right\n    return neighbors\n\ndef expand_blue(grid, row, col):\n    \"\"\"Expands blue horizontally and vertically from the given cell.\"\"\"\n    rows, cols = grid.shape\n    \n    # Expand Up\n    for r in range(row - 1, -1, -1):\n        if grid[r, col] == 0:\n            grid[r, col] = 1\n        else:\n            break  # Stop at non-zero\n\n    # Expand Down\n    for r in range(row + 1, rows):\n        if grid[r, col] == 0:\n            grid[r, col] = 1\n        else:\n            break\n\n    # Expand Left\n    for c in range(col - 1, -1, -1):\n        if grid[row, c] == 0:\n            grid[row, c] = 1\n        else:\n            break\n\n    # Expand Right\n    for c in range(col + 1, cols):\n        if grid[row, c] == 0:\n            grid[row, c] = 1\n        else:\n            break\n\ndef vertical_expansion(grid, row, col):\n    rows, cols = grid.shape\n    has_blue_below = False\n    for r in range(row + 1, rows):\n      if grid[r,col] == 1:\n        has_blue_below = True\n        break\n\n    if has_blue_below:\n      # Expand Up\n      for r in range(row - 1, -1, -1):\n          if grid[r, col] == 0:\n              grid[r, col] = 1\n          else:\n              break  # Stop at non-zero\n\n      # Expand Down\n      for r in range(row + 1, rows):\n          if grid[r, col] == 0:\n              grid[r, col] = 1\n          else:\n              break\n\ndef horizontal_expansion(grid, row, col):\n  rows, cols = grid.shape\n  has_blue_right = False\n  for c in range(col+1, cols):\n    if grid[row,c] == 1:\n      has_blue_right = True\n      break\n\n  if has_blue_right:\n      # Expand Left\n      for c in range(col - 1, -1, -1):\n          if grid[row, c] == 0:\n              grid[row, c] = 1\n          else:\n              break\n\n      # Expand Right\n      for c in range(col + 1, cols):\n          if grid[row, c] == 0:\n              grid[row, c] = 1\n          else:\n              break\n\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the described rule.\"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = output_grid.shape\n\n    # 1. Identify Seeds: Find all blue (1) and green (3) pixels.\n    blue_seeds = np.argwhere(output_grid == 1)\n    green_seeds = np.argwhere(output_grid == 3)\n\n    # 2.  Blue Expansion\n    for row, col in blue_seeds:\n        expand_blue(output_grid, row, col)\n\n    # 3. Green Expansion\n    for row, col in green_seeds:\n        vertical_expansion(output_grid, row, col)\n        horizontal_expansion(output_grid, row, col)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 720,
            "end_index": 1012,
            "uri": "https://github.com/Kaeltherol/Minesweeper",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3667,
    "candidates_token_count": 1096,
    "total_token_count": 4763,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.647872,
  "response_file": "014-response.json"
}