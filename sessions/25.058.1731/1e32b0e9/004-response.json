{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nExtends blue pixels horizontally and/or vertically to adjacent azure pixels.\n\"\"\"\n\nimport numpy as np\n\ndef find_lines(grid, color):\n    lines = []\n    rows, cols = grid.shape\n\n    # Find horizontal lines\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == color:\n                line_start = c\n                while c < cols and grid[r, c] == color:\n                    c += 1\n                line_end = c - 1\n                if line_end > line_start:\n                    lines.append(((r, line_start), (r, line_end), 'horizontal'))\n                c -=1 #important!\n\n    # Find vertical lines\n    for c in range(cols):\n        for r in range(rows):\n            if grid[r, c] == color:\n                line_start = r\n                while r < rows and grid[r, c] == color:\n                    r += 1\n                line_end = r - 1\n                if line_end > line_start:\n                     lines.append(((line_start, c), (line_end, c), 'vertical'))\n                r -= 1 #important\n\n    return lines\n\ndef extend_lines(grid, lines):\n    \n    output_grid = np.copy(grid)\n    \n    extended = True\n    while extended:\n      extended = False\n      for line in lines:\n          start, end, direction = line\n          \n          if direction == 'horizontal':\n              r, c_start = start\n              r_end, c_end = end\n  \n              # Extend left\n              if c_start > 0 and output_grid[r, c_start - 1] == 0:\n                  output_grid[r, c_start - 1] = 8\n                  lines.append(  ((r,c_start - 1), (r,c_start - 1), 'horizontal' ) )\n                  extended = True\n\n              \n              # Extend right\n              if c_end < output_grid.shape[1] - 1 and output_grid[r, c_end + 1] == 0:\n                  output_grid[r, c_end + 1] = 8\n                  lines.append(  ((r,c_end+1), (r,c_end+1), 'horizontal' ) )\n                  extended = True\n  \n          elif direction == 'vertical':\n              r_start, c = start\n              r_end, c_end = end\n  \n              # Extend up\n              if r_start > 0 and output_grid[r_start - 1, c] == 0:\n                  output_grid[r_start - 1, c] = 8\n                  lines.append( ((r_start-1, c), (r_start-1,c), 'vertical') )\n                  extended = True\n              \n              # Extend down\n              if r_end < output_grid.shape[0] - 1 and output_grid[r_end + 1, c] == 0:\n                  output_grid[r_end + 1, c] = 8\n                  lines.append(  ((r_end+1,c), (r_end+1,c), 'vertical' ) )\n                  \n                  extended = True\n\n    return output_grid\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = output_grid.shape\n\n    # find blue lines\n    blue_lines = find_lines(output_grid, 8)\n    \n    #extend the lines\n    output_grid = extend_lines(output_grid, blue_lines)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3070,
    "candidates_token_count": 874,
    "total_token_count": 3944,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.473799,
  "response_file": "004-response.json"
}