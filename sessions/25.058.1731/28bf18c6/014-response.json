{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid based on the objects it contains. The transformation rules include:\n\n1. Single pixels are copied and stacked vertically.\n2. Rectangular objects are copied to the top-left or transformed based on color and size.\n3. Red (color 2) objects are transformed into an alternating pattern.\n4. Other colored rectangular objects have their width adjusted and filled with an alternating pattern.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"Identifies distinct objects (contiguous regions of same color) in a grid.\"\"\"\n    grid = np.array(grid)\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n    rows, cols = grid.shape\n\n    def dfs(row, col, color):\n        \"\"\"Depth-first search to find all pixels of a contiguous object.\"\"\"\n        if (row < 0 or row >= rows or col < 0 or col >= cols or\n                visited[row, col] or grid[row, col] != color):\n            return []\n        visited[row, col] = True\n        object_pixels = [(row, col)]\n        object_pixels.extend(dfs(row + 1, col, color))\n        object_pixels.extend(dfs(row - 1, col, color))\n        object_pixels.extend(dfs(row, col + 1, color))\n        object_pixels.extend(dfs(row, col - 1, color))\n        return object_pixels\n\n    for row in range(rows):\n        for col in range(cols):\n            if not visited[row, col]:\n                color = grid[row, col]\n                object_pixels = dfs(row, col, color)\n                if object_pixels:\n                    objects.append((color, object_pixels))\n    return objects\n\ndef get_object_shape(pixels):\n    \"\"\"Calculates the bounding box dimensions (height, width) of an object.\"\"\"\n    rows = [p[0] for p in pixels]\n    cols = [p[1] for p in pixels]\n    height = max(rows) - min(rows) + 1\n    width = max(cols) - min(cols) + 1\n    return height, width\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the identified rules.\"\"\"\n    input_grid = np.array(input_grid)\n    objects = find_objects(input_grid)\n\n    if not objects:  # If no objects, return input\n        return input_grid.tolist()\n\n    single_pixel_objects = []\n    other_objects = []\n\n    for color, pixels in objects:\n        height, width = get_object_shape(pixels)\n        if height == 1 and width == 1:\n            single_pixel_objects.append((color, pixels))\n        else:\n            other_objects.append((color, pixels))\n\n    # Handle single pixel objects: stack vertically\n    if single_pixel_objects:\n        output_grid = np.zeros((len(single_pixel_objects), 1), dtype=int)\n        for i, (color, _) in enumerate(single_pixel_objects):\n            output_grid[i, 0] = color\n        if not other_objects: # if there are *only* single pixel objects\n            return output_grid.tolist()\n\n    # Handle other objects (rectangles)\n    output_grid = None\n    for color, pixels in other_objects:\n        height, width = get_object_shape(pixels)\n        min_row = min(p[0] for p in pixels)\n        min_col = min(p[1] for p in pixels)\n\n        if color == 2:  # Red object: alternating pattern\n            output_grid = np.zeros((3, width * 2), dtype=int)\n            for i in range(width):\n                output_grid[0, 2 * i + 1] = 2\n            output_grid[1, :] = 2\n            for i in range(width):\n                output_grid[2, 2 * i + 1] = 2\n\n        elif height == 3 and width == 5:  # 3x5 object, copy\n            output_grid = np.zeros((height, width), dtype=int)\n            for r in range(height):\n                for c in range(width):\n                    if (min_row + r, min_col + c) in pixels:\n                        output_grid[r, c] = color\n\n        else:  # Other colored objects\n            output_width = 2 * width - 1\n            output_grid = np.zeros((1, output_width), dtype=int)\n            for i in range(output_width):\n                output_grid[0, i] = color if i % 2 == 0 else 0\n    \n    if len(other_objects) == 0: # single pixel case\n        return output_grid.tolist()\n\n    if other_objects and single_pixel_objects: # if we have already created stacked objects\n        # Find dimensions\n        num_rows = len(single_pixel_objects)\n        _, num_cols = output_grid.shape\n        stacked_grid = np.zeros((num_rows,1),dtype=int)\n        for i, (color,_) in enumerate(single_pixel_objects):\n            stacked_grid[i,0] = color\n\n        #Combine with other objects output\n        combined_height = max(num_rows, output_grid.shape[0])\n        combined_width = max(1, output_grid.shape[1])\n        combined_grid = np.zeros((combined_height, combined_width), dtype=int)\n        combined_grid[:num_rows, :1] = stacked_grid\n        combined_grid[:output_grid.shape[0], :output_grid.shape[1]] = output_grid\n\n        return combined_grid.tolist()\n    \n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6970,
    "candidates_token_count": 1367,
    "total_token_count": 8337,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 12.962131,
  "response_file": "014-response.json"
}