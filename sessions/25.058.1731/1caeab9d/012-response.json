{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Find all contiguous blocks of pixels with the same color.\n2. **Move Objects in Top Row**: Objects with any part of them in the top row (row 0) will move down by one row.\n3. **Preserve Other Objects**: All other objects that are not in the top row will remain in their original position.\n4.  **Background:** The background is color 0 (white). Fill any vacated cells with the background color.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"Finds contiguous blocks of the same color.\"\"\"\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n\n    def is_valid(r, c):\n        return 0 <= r < grid.shape[0] and 0 <= c < grid.shape[1]\n\n    def dfs(r, c, color, object_coords):\n        if not is_valid(r, c) or visited[r, c] or grid[r, c] != color:\n            return\n        visited[r, c] = True\n        object_coords.append((r, c))\n        dfs(r + 1, c, color, object_coords)\n        dfs(r - 1, c, color, object_coords)\n        dfs(r, c + 1, color, object_coords)\n        dfs(r, c - 1, color, object_coords)\n\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if not visited[r, c] and grid[r, c] != 0:\n                object_coords = []\n                dfs(r, c, grid[r, c], object_coords)\n                objects.append({\n                    'color': grid[r, c],\n                    'coords': object_coords\n                })\n    return objects\n\ndef is_top_row(object_coords):\n    \"\"\"Checks if an object is in the top row.\"\"\"\n    for r, _ in object_coords:\n        if r == 0:\n            return True\n    return False\n\ndef move_object_down(object_coords, grid_height):\n    \"\"\"Moves object coordinates down by one row if possible.\"\"\"\n    new_coords = []\n    for r, c in object_coords:\n        if r + 1 < grid_height:\n          new_coords.append((r + 1, c))\n        else:\n          return None # can't move down\n    return new_coords\n\ndef transform(input_grid):\n    # initialize output_grid with white (0)\n    output_grid = np.zeros_like(input_grid)\n\n    # Find all objects in the grid\n    objects = find_objects(input_grid)\n\n    # Process each object\n    for obj in objects:\n        # Check if the object is in the top row\n        if is_top_row(obj['coords']):\n            # Move the object down by one row\n            new_coords = move_object_down(obj['coords'], input_grid.shape[0])\n            if new_coords != None:\n              for r, c in new_coords:\n                  output_grid[r, c] = obj['color']\n            else:\n              for r,c in obj['coords']:\n                output_grid[r,c] = obj['color']\n        else:\n            # Keep the object in its original position\n            for r, c in obj['coords']:\n                output_grid[r, c] = obj['color']\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7513,
    "candidates_token_count": 820,
    "total_token_count": 8333,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.612705,
  "response_file": "012-response.json"
}