{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nPreserves azure and red pixels, and changes some white pixels to green based on a recursive propagation rule.\nThe transformation starts on the row immediately below any azure pixel if the pixel below is white.\nOr, it starts on the row immediately above a red pixel if the pixel above is white.\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, row, col):\n    \"\"\"\n    Returns a list of valid neighbor coordinates for a given cell in the grid,\n    including diagonals.\n    \"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    for dr in [-1, 0, 1]:\n        for dc in [-1, 0, 1]:\n            if dr == 0 and dc == 0:\n                continue\n            nr, nc = row + dr, col + dc\n            if 0 <= nr < rows and 0 <= nc < cols:\n                neighbors.append((nr, nc))\n    return neighbors\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the described rule.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = output_grid.shape\n\n    # Create a set to track visited white pixels to avoid infinite loops\n    visited = set()\n\n    # Recursive function to change white pixels to green\n    def propagate_green(row, col):\n        if (row, col) in visited or output_grid[row, col] != 0:\n            return\n        visited.add((row, col))\n        output_grid[row, col] = 3\n        for nr, nc in get_neighbors(output_grid, row, col):\n            propagate_green(nr, nc)\n\n    # Iterate through the grid to find starting points for propagation\n    for row in range(rows):\n        for col in range(cols):\n            # Check for azure pixels and propagation below\n            if output_grid[row, col] == 8:  # Found an azure pixel\n                if row + 1 < rows and output_grid[row + 1, col] == 0:\n                    propagate_green(row + 1, col)\n            #check for red pixels and propagation above\n            elif output_grid[row,col] == 2: # Found a red pixel\n                if row - 1 >= 0 and output_grid[row-1, col] == 0:\n                    propagate_green(row -1, col)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2775,
    "candidates_token_count": 564,
    "total_token_count": 3339,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 5.248084,
  "response_file": "020-response.json"
}