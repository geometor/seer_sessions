def get_report(grid_in, grid_out):
    """
    Generates a report comparing input and output grids, focusing on changes and gray pixel positions.
    """
    report = {}

    # Convert to numpy arrays for easier processing
    grid_in = np.array(grid_in)
    grid_out = np.array(grid_out)

    # Dimensions
    report['input_shape'] = grid_in.shape
    report['output_shape'] = grid_out.shape

    # Find gray pixel positions in the input
    gray_pixels_in = np.argwhere(grid_in == 5)
    report['gray_pixels_input'] = gray_pixels_in.tolist()

    # Changes from white (0) to red (2)
    changes = np.argwhere((grid_in == 0) & (grid_out == 2))
    report['white_to_red_changes'] = changes.tolist()
    
    report['num_white_pixels_input'] = np.sum(grid_in == 0)
    report['num_red_pixels_output'] = np.sum(grid_out == 2)

    return report

# Example usage for each training pair
reports = []
for i in range(len(task_data['train'])):
  input_grid = task_data['train'][i]['input']
  output_grid = task_data['train'][i]['output']
  reports.append(get_report(input_grid, output_grid))

for i, report in enumerate(reports):
    print(f"--- Example {i+1} ---")
    for key, value in report.items():
        print(f"{key}: {value}")