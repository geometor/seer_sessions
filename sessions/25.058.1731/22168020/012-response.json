{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Regions:** Locate all contiguous regions of blue (color 1) and yellow (color 4) pixels within the input grid. Consider each of these regions as separate objects.\n2.  **Horizontal Expansion:** For each blue and yellow region:\n    *   Expand the region horizontally to the left and right.\n    *   Expansion continues until a pixel of any color other than white (0) is encountered. The expansion will include all white pixels (0) but will stop immediately before the non-white pixel.\n3. If expansion from step 2 would cause the height of the region to be greater than one, expand the full height of the grid.\n\"\"\"\n\nimport numpy as np\n\ndef get_regions(grid, colors):\n    # find regions of specific colors in a grid\n    regions = {}\n    for color in colors:\n        regions[color] = []\n        visited = np.zeros_like(grid, dtype=bool)\n        rows, cols = grid.shape\n        for r in range(rows):\n            for c in range(cols):\n                if grid[r, c] == color and not visited[r, c]:\n                    region = []\n                    stack = [(r, c)]\n                    while stack:\n                        row, col = stack.pop()\n                        if 0 <= row < rows and 0 <= col < cols and grid[row, col] == color and not visited[row, col]:\n                            visited[row, col] = True\n                            region.append((row, col))\n                            stack.extend([(row - 1, col), (row + 1, col), (row, col - 1), (row, col + 1)])\n                    regions[color].append(region)\n    return regions\n\ndef expand_region_horizontally_with_boundary(grid, region, color):\n    # expand each region horizontally until any non-white boundary, consider height\n    min_y = min(r[0] for r in region)\n    max_y = max(r[0] for r in region)\n    min_x = min(r[1] for r in region)\n    max_x = max(r[1] for r in region)\n\n    # Find leftmost expansion limit (any non-white pixel)\n    left_limit = 0\n    for x in range(min_x - 1, -1, -1):\n        if any(grid[y,x] != 0 for y in range(grid.shape[0])): #check entire column\n            left_limit = x+1\n            break\n\n    # Find rightmost expansion limit (any non-white pixel)\n    right_limit = grid.shape[1] - 1\n    for x in range(max_x + 1, grid.shape[1]):\n        if any(grid[y,x] != 0 for y in range(grid.shape[0])):  # Check entire column\n           right_limit = x-1\n           break\n    \n    # Check if expansion would make region height >1, if yes, expand entire height\n    expand_full_height = False\n    if (max_y - min_y +1) > 0:  # original had height = 1\n          # check if any pixel in the expanded region has an occupied pixel above or below\n          for x in range(left_limit, right_limit + 1):\n              for y in range(grid.shape[0]):\n                  if y < min_y or y > max_y:\n                      if any(grid[y, x_check] !=0 for x_check in range(left_limit, right_limit+1)):\n                          expand_full_height = True\n                          break\n              if expand_full_height:\n                  break\n\n    # Expand, either full height or the region's original y-coordinates\n    for y in range(0 if expand_full_height else min_y, grid.shape[0] if expand_full_height else max_y + 1):  # Iterate through rows\n        for x in range(left_limit, right_limit + 1):\n             grid[y,x] = color\n    return grid\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the described rule.\"\"\"\n\n    # Convert input_grid to a NumPy array\n    input_grid = np.array(input_grid)\n    output_grid = np.copy(input_grid)\n\n\n    # Identify Regions of blue and yellow.\n    regions = get_regions(input_grid, [1, 4])\n\n\n    # expand blue regions\n    for region in regions[1]:\n        output_grid = expand_region_horizontally_with_boundary(output_grid, region, 1)\n\n    # expand yellow regions\n    for region in regions[4]:\n        output_grid = expand_region_horizontally_with_boundary(output_grid, region, 4)\n\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7524,
    "candidates_token_count": 1117,
    "total_token_count": 8641,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.661319,
  "response_file": "012-response.json"
}