{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation takes each colored shape (blue or yellow) and stretches it\nout sideways as far as it can go within the bounds of the grid, overwriting any\nwhite pixels (0) in its path, while preserving original y coordinates.\n\"\"\"\n\nimport numpy as np\n\ndef get_regions(grid, colors):\n    # find regions of specific colors in a grid\n    regions = {}\n    for color in colors:\n        regions[color] = []\n        visited = np.zeros_like(grid, dtype=bool)\n        rows, cols = grid.shape\n        for r in range(rows):\n            for c in range(cols):\n                if grid[r, c] == color and not visited[r, c]:\n                    region = []\n                    stack = [(r, c)]\n                    while stack:\n                        row, col = stack.pop()\n                        if 0 <= row < rows and 0 <= col < cols and grid[row, col] == color and not visited[row, col]:\n                            visited[row, col] = True\n                            region.append((row, col))\n                            stack.extend([(row - 1, col), (row + 1, col), (row, col - 1), (row, col + 1)])\n                    regions[color].append(region)\n    return regions\n\ndef expand_region_horizontally(grid, region, color):\n    # expand each region horizontally to grid edges or non-white cell\n    min_y = min(r[0] for r in region)\n    max_y = max(r[0] for r in region)\n    min_x = min(r[1] for r in region)\n    max_x = max(r[1] for r in region)\n\n    # Find leftmost expansion limit\n    left_limit = 0\n    for x in range(min_x - 1, -1, -1):\n        if any(grid[y,x] != 0 for y in range(min_y, max_y+1)):\n            left_limit = x+1\n            break\n\n    # Find rightmost expansion limit\n    right_limit = grid.shape[1] - 1\n    for x in range(max_x + 1, grid.shape[1]):\n        if any(grid[y,x] != 0 for y in range(min_y, max_y + 1)):\n           right_limit = x-1\n           break\n\n    # expand by iterating each y coordinate to fill\n    for y in range(min_y, max_y + 1):\n        for x in range(left_limit, right_limit + 1):\n             grid[y,x] = color\n    return grid\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the described rule.\"\"\"\n\n    # Convert input_grid to a NumPy array\n    input_grid = np.array(input_grid)\n    output_grid = np.copy(input_grid)\n\n\n    # Identify Regions of blue and yellow.\n    regions = get_regions(input_grid, [1, 4])\n\n\n    # expand blue regions\n    for region in regions[1]:\n        output_grid = expand_region_horizontally(output_grid, region, 1)\n\n    # expand yellow regions\n    for region in regions[4]:\n        output_grid = expand_region_horizontally(output_grid, region, 4)\n\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2522,
    "candidates_token_count": 790,
    "total_token_count": 3312,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.155887,
  "response_file": "010-response.json"
}