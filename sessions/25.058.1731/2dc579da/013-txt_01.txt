import numpy as np

def analyze_example(input_grid, expected_output, actual_output):
    input_grid = np.array(input_grid)
    expected_output = np.array(expected_output)
    actual_output = np.array(actual_output)

    blue_pixel_coords = np.where(input_grid == 1)
    blue_pixel_present = len(blue_pixel_coords[0]) > 0
    blue_pixel_row, blue_pixel_col = -1, -1
    if blue_pixel_present:
        blue_pixel_row, blue_pixel_col = blue_pixel_coords[0][0], blue_pixel_coords[1][0]

    # Check if a 3x3 subgrid can be extracted
    row_start = blue_pixel_row - 1
    row_end = blue_pixel_row + 2
    col_start = blue_pixel_col - 1
    col_end = blue_pixel_col + 2
    subgrid_extractable = (
        blue_pixel_present and
        row_start >= 0 and
        row_end <= input_grid.shape[0] and
        col_start >= 0 and
        col_end <= input_grid.shape[1]
    )

    # Extract the 3x3 subgrid if possible
    subgrid_colors = []
    if subgrid_extractable:
        subgrid = input_grid[row_start:row_end, col_start:col_end]
        unique_colors = np.unique(subgrid)
        subgrid_colors = unique_colors.tolist()

    # Determine if output is a copy of input
    output_is_copy = np.array_equal(input_grid, actual_output)

    report = {
        "blue_pixel_present": blue_pixel_present,
        "blue_pixel_location": (blue_pixel_row, blue_pixel_col) if blue_pixel_present else None,
        "3x3_subgrid_extractable": subgrid_extractable,
        "3x3_subgrid_colors": subgrid_colors,
        "output_is_copy": output_is_copy,
        "output_matches_expected": np.array_equal(expected_output,actual_output)
    }
    return report

# Example data (replace with actual data from the task)
examples = [
    (train_input_0, train_output_0, transform(train_input_0)), # example 0
    (train_input_1, train_output_1, transform(train_input_1)), # example 1
    (train_input_2, train_output_2, transform(train_input_2)), # example 2
    (train_input_3, train_output_3, transform(train_input_3)), # example 3
    (train_input_4, train_output_4, transform(train_input_4)), # example 4

]

reports = []
for i, example in enumerate(examples):
  report = analyze_example(*example)
  reports.append( f"Example {i}: {report}")
print("\n".join(reports))