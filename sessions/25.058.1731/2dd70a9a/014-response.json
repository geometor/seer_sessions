{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nFind a connected set of azure pixels in the input grid, and change its value (color) to green.\nIf no azure pixels are present, return the original grid.\n\"\"\"\n\nimport numpy as np\n\ndef find_connected_region(grid, start_row, start_col, color):\n    # Find a connected region of a given color, starting from a given cell.\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n    region = []\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def dfs(r, c):\n        if not is_valid(r, c) or visited[r, c] or grid[r, c] != color:\n            return\n        visited[r, c] = True\n        region.append((r, c))\n\n        # Explore adjacent cells\n        dfs(r + 1, c)\n        dfs(r - 1, c)\n        dfs(r, c + 1)\n        dfs(r, c - 1)\n\n    dfs(start_row, start_col)\n    return region\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of the input_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Find the first azure pixel.\n    start_row, start_col = None, None\n    for r in range(rows):\n        for c in range(cols):\n            if input_grid[r, c] == 8:\n                start_row, start_col = r, c\n                break  # Only find the first azure region\n        if start_row is not None:\n            break\n\n    if start_row is None:  # No azure found\n        return output_grid\n\n    connected_region = find_connected_region(input_grid, start_row, start_col, 8)\n\n    # Flood fill the connected region with green (3)\n    for r, c in connected_region:\n        output_grid[r, c] = 3\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2709,
    "candidates_token_count": 501,
    "total_token_count": 3210,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 4.838449,
  "response_file": "014-response.json"
}