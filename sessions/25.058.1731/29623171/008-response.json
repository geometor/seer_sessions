{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nPreserve all gray lines. Remove blue pixels that are not connected to any gray\npixel (directly or indirectly). Create a 3x3 blue square at the bottom-right,\naligned with the rightmost edge of the bottom-most gray line, and the bottom\nedge of the gray line.\n\"\"\"\n\nimport numpy as np\n\ndef get_gray_lines(grid, gray_color=5):\n    \"\"\"Finds all gray lines and returns their pixels.\"\"\"\n    rows, cols = grid.shape\n    gray_lines = []\n    for r in range(rows):\n        gray_pixels_in_row = []\n        for c in range(cols):\n            if grid[r, c] == gray_color:\n                gray_pixels_in_row.append((r, c))\n        if gray_pixels_in_row:  # Found a line\n            gray_lines.append(gray_pixels_in_row)\n    return gray_lines\n\ndef is_adjacent(pixel1, pixel2):\n    \"\"\"Checks if two pixels are adjacent (up, down, left, or right).\"\"\"\n    r1, c1 = pixel1\n    r2, c2 = pixel2\n    return (abs(r1 - r2) == 1 and c1 == c2) or (r1 == r2 and abs(c1 - c2) == 1)\n\ndef get_connected_component(grid, start_pixel, color):\n    \"\"\"Gets the connected component of a given color starting from a pixel.\"\"\"\n    rows, cols = grid.shape\n    queue = [start_pixel]\n    visited = {start_pixel}\n    component = [start_pixel]\n\n    while queue:\n        r, c = queue.pop(0)\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n            if (0 <= nr < rows and 0 <= nc < cols and\n                grid[nr, nc] == color and (nr, nc) not in visited):\n                queue.append((nr, nc))\n                visited.add((nr, nc))\n                component.append((nr, nc))\n    return component\n\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = output_grid.shape\n\n    # Preserve Gray Lines (and find bottom-most for square placement)\n    gray_lines = get_gray_lines(input_grid)\n    bottom_gray_line = []\n    if gray_lines:\n        bottom_gray_line = gray_lines[-1] # for placement of the blue square\n\n    # Identify and Remove Unconnected Blue Pixels\n    all_gray_pixels = [pixel for line in gray_lines for pixel in line]\n    connected_blue_pixels = set()\n    for gray_pixel in all_gray_pixels:\n        connected_blue_pixels.update(get_connected_component(input_grid, gray_pixel, 1))\n\n    for r in range(rows):\n        for c in range(cols):\n            if output_grid[r,c] == 1 and (r,c) not in connected_blue_pixels:\n                output_grid[r,c] = 0 # clear unconnected\n\n    # Create 3x3 Blue Square (Conditional on gray line existing)\n    if bottom_gray_line:\n        rightmost_gray_pixel = bottom_gray_line[-1]  # Get right-most pixel\n        bottom_row = rightmost_gray_pixel[0] # get the row\n        start_col = rightmost_gray_pixel[1] - 2  # start col for blue square\n\n        for r in range(bottom_row, min(bottom_row + 3, rows)):\n            for c in range(max(0, start_col), min(start_col + 3, cols)):\n                output_grid[r, c] = 1\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6986,
    "candidates_token_count": 926,
    "total_token_count": 7912,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.313387,
  "response_file": "008-response.json"
}