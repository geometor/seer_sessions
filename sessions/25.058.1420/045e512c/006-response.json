{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Locate the distinct azure, green, and red objects within the input grid. An object is a contiguous block of pixels of the same color.\n2.  **Red Object Transformation:** The red object is extended vertically. The red object's pattern is extended to cover the full height of the output grid.\n3.  **Preserve Other Objects:** The azure and green objects retain their original shapes, positions, and colors. The final positions and shapes are present in both the input and output grids.\n\"\"\"\n\nimport numpy as np\n\ndef find_object(grid, color):\n    \"\"\"\n    Finds the top-left corner and dimensions of a contiguous block of the given color.\n    Returns None if no such object is found.\n    \"\"\"\n    rows, cols = np.where(grid == color)\n    if len(rows) == 0:\n        return None\n\n    min_row, min_col = np.min(rows), np.min(cols)\n    max_row, max_col = np.max(rows), np.max(cols)\n    height = max_row - min_row + 1\n    width = max_col - min_col + 1\n\n    return (min_row, min_col), height, width\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the observed rules.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n\n    # Find objects\n    azure_obj = find_object(input_grid, 8)\n    green_obj = find_object(input_grid, 3)\n    red_obj = find_object(input_grid, 2)\n\n    # Red Object Transformation: extend vertically, preserving pattern\n    if red_obj:\n        red_pos, red_height, red_width = red_obj\n        for row in range(output_grid.shape[0]):\n            for col_offset in range(red_width):\n                if (red_pos[1] + col_offset < input_grid.shape[1] and\n                    red_pos[0] + row < input_grid.shape[0] ) :\n\n                    output_grid[row, red_pos[1] + col_offset] = input_grid[(red_pos[0] + (row % red_height)), red_pos[1] + col_offset]\n    \n    # Preserve green and azure\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5372,
    "candidates_token_count": 555,
    "total_token_count": 5927,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 5.820238,
  "response_file": "006-response.json"
}