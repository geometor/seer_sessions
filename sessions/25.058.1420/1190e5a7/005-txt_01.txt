import numpy as np

def find_border(grid, border_color):
    border_coords = np.argwhere(grid == border_color)
    return border_coords

def find_upper_right_corner(grid, border_coords):
    min_row = np.min(border_coords[:, 0])
    max_row = np.max(border_coords[:, 0])
    min_col = np.min(border_coords[:, 1])
    max_col = np.max(border_coords[:, 1])

    for r, c in border_coords:
      if r > min_row and c < max_col:
        if grid[r-1,c] != 7 and grid[r, c+1] != 7:
          return r,c

    return None

def get_object_location(grid, object_value):
    object_coords = np.argwhere(grid == object_value)
    if object_coords.size == 0:
        return None, None, None, None
    min_row = np.min(object_coords[:, 0])
    max_row = np.max(object_coords[:, 0])
    min_col = np.min(object_coords[:, 1])
    max_col = np.max(object_coords[:, 1])
    return min_row, max_row, min_col, max_col

def analyze_example(input_grid, expected_output, actual_output):

    border_coords = find_border(input_grid, 7)
    internal_corner = find_upper_right_corner(input_grid, border_coords)
    object_min_row, object_max_row, object_min_col, object_max_col = get_object_location(input_grid, 3)

    print(f"  Border Pixels: {len(border_coords)}")
    if internal_corner:
      print(f" internal corner: {internal_corner}")
    else:
      print("  Internal Corner: Not found")
    if object_min_row is not None:
        print(f"  Object '3' Bounding Box: ({object_min_row}, {object_min_col}) - ({object_max_row}, {object_max_col})")
    else:
        print("  Object '3': Not found")

    print(f" expected_output: {expected_output.tolist()}")
    print(f" actual_output: {actual_output.tolist()}")
    diff = expected_output != actual_output
    if diff.any():
      print("  Differences between Expected and Actual Output")
      print(np.argwhere(diff))
    else:
      print("  Expected and Actual are the same.")


example_data = [
    (np.array([[7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 0, 0, 0, 0, 0, 0, 0, 0, 7], [7, 0, 0, 0, 0, 0, 0, 3, 3, 7], [7, 0, 0, 0, 0, 0, 0, 3, 3, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7]]), np.array([[3, 3], [3, 3]])),
    (np.array([[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7], [7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7], [7, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 7], [7, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]]), np.array([[3, 3], [3, 3]])),
    (np.array([[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7], [7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7], [7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7], [7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 7], [7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]]), np.array([[3, 3], [3, 3]])),
]

for i, (input_grid, expected_output) in enumerate(example_data):
  print(f"Example {i+1}:")
  actual_output = transform(input_grid)
  analyze_example(input_grid, expected_output, actual_output)
  print("-" * 20)