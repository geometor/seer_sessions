import numpy as np

def analyze_results(task_data):
    results = []
    for example in task_data['train']:
        input_grid = np.array(example['input'])
        expected_output = np.array(example['output'])
        predicted_output = transform(input_grid)
        is_correct = np.array_equal(predicted_output, expected_output)
        results.append({
            'input_shape': input_grid.shape,
            'output_shape': expected_output.shape,
            'predicted_output_shape': predicted_output.shape,
            'correct': is_correct,
            'output_pixels': np.unique(expected_output, return_counts=True),
            'predicted_output_pixels': np.unique(predicted_output, return_counts=True),

        })
    return results

# Assuming 'task' is your dictionary containing the ARC task data
task = {
 "train": [
  {
   "input": [
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 3, 3, 3, 1, 3, 3, 3, 1, 3, 3, 1],
    [1, 3, 3, 3, 1, 3, 3, 3, 1, 3, 3, 1],
    [1, 3, 3, 3, 1, 3, 3, 3, 1, 3, 3, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 3, 3, 3, 1, 3, 3, 3, 1, 3, 3, 1],
    [1, 3, 3, 3, 1, 3, 3, 3, 1, 3, 3, 1],
    [1, 3, 3, 3, 1, 3, 3, 3, 1, 3, 3, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 3, 3, 3, 1, 3, 3, 3, 1, 3, 3, 1],
    [1, 3, 3, 3, 1, 3, 3, 3, 1, 3, 3, 1],
    [1, 3, 3, 3, 1, 3, 3, 3, 1, 3, 3, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
   ],
   "output": [
    [3, 3, 3],
    [3, 3, 3],
    [3, 3, 3]
   ]
  },
  {
   "input": [
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 3, 3, 3, 1, 3, 3, 1, 3, 1],
    [1, 3, 3, 3, 1, 3, 3, 1, 3, 1],
    [1, 3, 3, 3, 1, 3, 3, 1, 3, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 3, 3, 1, 3, 3, 3, 1, 3, 1],
    [1, 3, 3, 1, 3, 3, 3, 1, 3, 1],
    [1, 3, 3, 1, 3, 3, 3, 1, 3, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
   ],
   "output": [
    [3, 3, 3],
    [3, 3, 3],
    [3, 3, 3]
   ]
  },
  {
   "input": [
    [1, 1, 1, 1, 1, 1, 1, 1],
    [1, 3, 3, 1, 3, 3, 3, 1],
    [1, 3, 3, 1, 3, 3, 3, 1],
    [1, 3, 3, 1, 3, 3, 3, 1],
    [1, 1, 1, 1, 1, 1, 1, 1]
   ],
   "output": [
    [3, 3, 3],
    [3, 3, 3],
    [3, 3, 3]
   ]
  },
    {
        "input": [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1], [1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1], [1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1], [1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1], [1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1], [1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1], [1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1], [1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1], [1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]],
        "output": [[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]]
    }
 ],
}
print(analyze_results(task))