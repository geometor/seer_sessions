{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation rule identifies 2x2 blocks of uniform color within the input grid. If a 2x2 block is red or green, it's horizontally expanded by duplicating it once to its right. Blue 2x2 blocks and the background (white) remain unchanged. The output grid is dynamically sized to accommodate the expansions.\n\"\"\"\n\nimport numpy as np\n\ndef find_2x2_blocks(grid):\n    \"\"\"Finds all 2x2 blocks of the same color and returns their top-left coordinates and color.\"\"\"\n    blocks = []\n    rows, cols = grid.shape\n    for r in range(rows - 1):\n        for c in range(cols - 1):\n            color = grid[r, c]\n            if (grid[r:r+2, c:c+2] == color).all():\n                blocks.append((r, c, color))\n    return blocks\n\ndef calculate_output_size(input_grid):\n    \"\"\"Calculates the output grid size based on the number of red/green 2x2 blocks.\"\"\"\n    blocks = find_2x2_blocks(input_grid)\n    rows, cols = input_grid.shape\n    additional_cols = 0\n    for r, c, color in blocks:\n        if color == 2 or color == 3:  # Red or Green\n            additional_cols += 2\n    return rows, cols + additional_cols\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the rule.\"\"\"\n    rows, cols = input_grid.shape\n    out_rows, out_cols = calculate_output_size(input_grid)\n    output_grid = np.zeros((out_rows, out_cols), dtype=int)\n\n    # Find 2x2 blocks\n    blocks = find_2x2_blocks(input_grid)\n\n    # Create a mapping from original column index to output column index\n    col_map = {}\n    output_col = 0\n    for input_col in range(cols):\n        col_map[input_col] = output_col\n        output_col += 1\n\n    # Adjust column mapping for expansions\n    for r, c, color in blocks:\n      if color == 2 or color == 3:\n        for i in range(c + 1, cols):\n          col_map[i] += 2\n\n    # Copy and expand\n    for r in range(rows):\n        for c in range(cols):\n            output_grid[r, col_map[c]] = input_grid[r, c]\n            \n    for r, c, color in blocks:\n        if color == 2 or color == 3:  # Red or Green\n          output_grid[r:r+2, col_map[c]+2:col_map[c]+4] = input_grid[r:r+2,c:c+2]\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2495,
    "candidates_token_count": 669,
    "total_token_count": 3164,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 5.693368,
  "response_file": "008-response.json"
}