import numpy as np

def analyze_example(example):
    input_grid = np.array(example['input'])
    output_grid = np.array(example['output'])

    # Find the red rectangle
    rectangle_bounds = find_rectangle(input_grid)
    if rectangle_bounds is None:
        print("No red rectangle found.")
        interior_shape = (0, 0)
        interior_pixels = 0
        output_shape = output_grid.shape
        output_pixels = output_grid.size
        print(f"Output shape: {output_shape}, Output pixels: {output_pixels}")

    else:
        top_left, bottom_right = rectangle_bounds
        # Extract the interior region
        interior_region = extract_interior(input_grid, top_left, bottom_right)
        interior_shape = interior_region.shape
        interior_pixels = interior_region.size
        print(f"Interior shape: {interior_shape}, Interior pixels: {interior_pixels}")

        output_shape = output_grid.shape
        output_pixels = output_grid.size
        print(f"Output shape: {output_shape}, Output pixels: {output_pixels}")
    return interior_shape, interior_pixels, output_shape, output_pixels

task = {
  "train": [
    {
      "input": [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 8, 0, 3, 3, 2, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 3, 0, 2, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 0, 3, 3, 0, 2, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 5, 1, 0, 3, 2, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 2, 5, 1, 3, 0, 1, 3, 2, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 2, 5, 0, 8, 0, 3, 0, 2, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      ],
      "output": [
        [0, 0, 8, 0, 3, 3, 3, 3],
        [1, 0, 0, 0, 3, 0, 3, 1],
        [3, 3, 0, 3, 3, 0, 8, 1],
        [3, 3, 5, 1, 0, 3, 0, 0],
        [5, 1, 3, 0, 1, 3, 1, 1],
        [5, 0, 8, 0, 3, 0, 8, 8]
      ]
    },
    {
      "input": [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0],
        [0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0],
        [0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0],
        [0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      ],
      "output": [
        [0, 0],
        [0, 0]
      ]
    },
    {
      "input": [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0],
        [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0],
        [0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 2, 0],
        [0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      ],
      "output": [
        [0, 0, 0],
        [0, 4, 0]
      ]
    },
    {
      "input": [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 2, 2, 2, 0, 0],
        [0, 0, 0, 0, 0, 2, 1, 2, 0, 0],
        [0, 0, 0, 0, 0, 2, 2, 2, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      ],
      "output": [
        [1]
      ]
    },
     {
      "input": [
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 2, 2, 2, 2, 0, 0],
        [0, 0, 0, 2, 0, 0, 2, 0, 0],
        [0, 0, 0, 2, 1, 4, 2, 0, 0],
        [0, 0, 0, 2, 2, 2, 2, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0]
      ],
      "output": [
        [0,0],
        [1,4]
      ]
    }
  ],
  "test": [
    {
      "input": [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0],
        [0, 0, 0, 0, 0, 0, 2, 0, 0, 7, 7, 2, 0, 0],
        [0, 0, 0, 0, 0, 0, 2, 7, 0, 0, 0, 2, 0, 0],
        [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 8, 2, 0, 0],
        [0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      ],
      "output": [
        [0, 0, 7, 7],
        [7, 0, 0, 0],
        [0, 0, 0, 8]
      ]
    }
  ]
}

results = []
for example in task["train"]:
  print(f"Analyzing example:")
  results.append(analyze_example(example))
  print("-" * 20)
print(results)