{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nFind the region of interest below a horizontal black dividing line, identify the most frequent non-black color within that region (the \"shape\"), crop the region to the bounding box of that shape, and finally, recolor the cropped grid, setting all pixels that are not the shape's color to black (0).\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef get_region_below_black_line(grid):\n    \"\"\"Finds the region below the horizontal line of 0s.\"\"\"\n    rows, cols = grid.shape\n    for r in range(rows):\n        if np.all(grid[r, :] == 0):\n            return grid[r+1:, :]\n    return None  # No black line found\n\ndef find_prominent_color(grid):\n    \"\"\"Finds the most frequent non-black color in a grid.\"\"\"\n    counts = Counter(grid.flatten())\n    if 0 in counts:\n        del counts[0]  # Ignore black\n    if not counts:\n        return 0 # handle if region is all black\n    return counts.most_common(1)[0][0]\n\ndef get_bounding_box(grid, color):\n    \"\"\"Finds the bounding box of a color in a grid.\"\"\"\n    rows, cols = grid.shape\n    rows_with_color = []\n    cols_with_color = []\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r,c] == color:\n                rows_with_color.append(r)\n                cols_with_color.append(c)\n    if not rows_with_color: # no bounding box\n        return 0,0,0,0\n\n    min_row = min(rows_with_color)\n    max_row = max(rows_with_color)\n    min_col = min(cols_with_color)\n    max_col = max(cols_with_color)\n    return min_row, max_row, min_col, max_col\n\ndef crop_and_recolor(region, prominent_color):\n    \"\"\"Crops the region to the shape's bounding box and recolors.\"\"\"\n    min_row, max_row, min_col, max_col = get_bounding_box(region, prominent_color)\n\n    if min_row > max_row or min_col > max_col: # handle edge cases\n        return np.array([[0]])\n\n    cropped_grid = region[min_row:max_row+1, min_col:max_col+1].copy()\n\n    # Recolor\n    rows, cols = cropped_grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            if cropped_grid[r, c] != prominent_color:\n                cropped_grid[r, c] = 0\n    return cropped_grid\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the described rule.\n    \"\"\"\n    input_grid = np.array(input_grid)\n\n    # 1. Identify Region\n    region = get_region_below_black_line(input_grid)\n    if region is None:\n        return np.array([[0]])\n\n    # 2. Identify Shape (Prominent Color)\n    prominent_color = find_prominent_color(region)\n\n    # 3 & 4. Crop and Recolor\n    output_grid = crop_and_recolor(region, prominent_color)\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6239,
    "candidates_token_count": 809,
    "total_token_count": 7048,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.532082,
  "response_file": "002-response.json"
}