import numpy as np

def find_object(grid, color):
    coords = np.argwhere(grid == color)
    if coords.size == 0:
        return None, None, None, None
    min_row, min_col = coords.min(axis=0)
    max_row, max_col = coords.max(axis=0)
    return min_row, min_col, max_row, max_col

def analyze_example(input_grid, output_grid):
    azure_in_min_row, azure_in_min_col, azure_in_max_row, azure_in_max_col = find_object(input_grid, 8)
    red_in_min_row, red_in_min_col, red_in_max_row, red_in_max_col = find_object(input_grid, 2)

    azure_out_min_row, azure_out_min_col, azure_out_max_row, azure_out_max_col = find_object(output_grid, 8)
    red_out_min_row, red_out_min_col, red_out_max_row, red_out_max_col = find_object(output_grid, 2)

    print(f"  Azure Input: Top-Left: ({azure_in_min_row}, {azure_in_min_col}), Bottom-Right: ({azure_in_max_row}, {azure_in_max_col})")
    print(f"  Red Input:   Top-Left: ({red_in_min_row}, {red_in_min_col}), Bottom-Right: ({red_in_max_row}, {red_in_max_col})")
    print(f"  Azure Output: Top-Left: ({azure_out_min_row}, {azure_out_min_col}), Bottom-Right: ({azure_out_max_row}, {azure_out_max_col})")
    print(f"  Red Output:   Top-Left: ({red_out_min_row}, {red_out_min_col}), Bottom-Right: ({red_out_max_row}, {red_out_max_col})")
    

#Example grids
input_grids = [
    np.array([[5, 5, 5, 5, 5, 5, 5, 5],
              [5, 5, 5, 5, 5, 5, 5, 5],
              [5, 5, 8, 8, 5, 5, 5, 5],
              [5, 5, 8, 8, 5, 5, 5, 5],
              [5, 5, 5, 5, 5, 5, 2, 2],
              [5, 5, 5, 5, 5, 5, 2, 2]]),
    np.array([[5, 5, 5, 5, 5, 5, 5, 5, 5],
              [5, 5, 5, 5, 5, 5, 5, 5, 5],
              [5, 5, 5, 5, 8, 8, 5, 5, 5],
              [5, 5, 5, 5, 8, 8, 5, 5, 5],
              [5, 5, 5, 5, 5, 5, 5, 5, 5],
              [5, 5, 5, 5, 5, 5, 5, 5, 5],
              [5, 5, 5, 5, 5, 5, 5, 2, 2],
              [5, 5, 5, 5, 5, 5, 5, 2, 2]]),
    np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 8, 8, 8, 0, 0, 0],
              [0, 0, 0, 8, 8, 8, 0, 0, 0],
              [0, 0, 0, 8, 8, 8, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 2, 2, 2],
              [0, 0, 0, 0, 0, 0, 2, 2, 2],
              [0, 0, 0, 0, 0, 0, 2, 2, 2]]),
]

output_grids = [
    np.array([[5, 5, 5, 5, 5, 5, 5, 5],
              [5, 5, 5, 5, 5, 5, 5, 5],
              [5, 5, 8, 8, 5, 5, 5, 5],
              [5, 5, 8, 8, 5, 5, 5, 5],
              [5, 5, 5, 5, 5, 5, 2, 2],
              [5, 5, 5, 5, 5, 5, 2, 2]]),
    np.array([[5, 5, 5, 5, 5, 5, 5, 5, 5],
              [5, 5, 5, 5, 5, 5, 5, 5, 5],
              [5, 5, 5, 5, 8, 8, 5, 5, 5],
              [5, 5, 5, 5, 8, 8, 5, 5, 5],
              [5, 5, 5, 5, 5, 5, 5, 2, 2],
              [5, 5, 5, 5, 5, 5, 5, 2, 2],
              [5, 5, 5, 5, 5, 5, 5, 0, 0],
              [5, 5, 5, 5, 5, 5, 5, 0, 0]]),
    np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 8, 8, 8, 0, 0, 0],
              [0, 0, 0, 8, 8, 8, 0, 0, 0],
              [0, 0, 0, 8, 8, 8, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 2, 2, 2],
              [0, 0, 0, 0, 0, 0, 2, 2, 2],
              [0, 0, 0, 0, 0, 0, 2, 2, 2],
              [0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
]

for i in range(len(input_grids)):
  print(f"Example {i+1}:")
  analyze_example(input_grids[i], output_grids[i])
  print("-" * 20)