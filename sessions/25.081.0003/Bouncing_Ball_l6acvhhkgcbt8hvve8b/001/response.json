{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify:** Find all non-black pixels (yellow and red) within the input grid.\n2.  **Conditional Logic:**\n    *   If there's only a single vertical line of yellow above red, there will be no transformation.\n    *   Otherwise, swap the vertical positions of the red and yellow pixels.\n    *   Conceptually: swap the *y*-coordinates of the highest yellow pixel with the *y*-coordinate of the lowest red pixel, *without* regard for their x-coordinates.\n\"\"\"\n\nimport numpy as np\n\ndef find_colored_pixels(grid):\n    \"\"\"Finds the coordinates of non-black pixels (yellow and red).\"\"\"\n    yellow_pixels = []\n    red_pixels = []\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] == 4:\n                yellow_pixels.append((r, c))\n            elif grid[r, c] == 2:\n                red_pixels.append((r, c))\n    return yellow_pixels, red_pixels\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the swapping rule.\"\"\"\n    input_grid = np.array(input_grid)\n    output_grid = np.copy(input_grid)\n    yellow_pixels, red_pixels = find_colored_pixels(input_grid)\n\n    # Conditional Logic: Check for single vertical line of yellow above red\n    if len(yellow_pixels) > 0 and len(red_pixels) > 0:\n        is_single_column = all(p[1] == yellow_pixels[0][1] for p in yellow_pixels) and all(p[1] == red_pixels[0][1] for p in red_pixels) and yellow_pixels[0][1] == red_pixels[0][1]\n\n        all_yellow_above_red = all(y[0] < r[0] for y in yellow_pixels for r in red_pixels)\n        \n        if is_single_column and all_yellow_above_red:\n          return output_grid # no swap\n        \n\n    # Swap vertical positions (y-coordinates)\n        highest_yellow_y = min(y[0] for y in yellow_pixels) if yellow_pixels else -1\n        lowest_red_y = max(r[0] for r in red_pixels) if red_pixels else -1\n\n        if highest_yellow_y != -1 and lowest_red_y != -1:\n            for y_r, y_c in yellow_pixels:\n                output_grid[y_r,y_c] = 0 # clear original spot\n            for r_r, r_c in red_pixels:\n                output_grid[r_r,r_c] = 0\n\n            for y_r, y_c in yellow_pixels:\n\n                output_grid[lowest_red_y - (y_r - highest_yellow_y) ,y_c] = 4 #move yellow to lowest_red spot\n\n            for r_r, r_c in red_pixels:\n                output_grid[highest_yellow_y + (lowest_red_y- r_r),r_c] = 2 #move red to highest yellow spot\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2105,
    "candidates_token_count": 763,
    "total_token_count": 2868,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.954482
}