{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Key Pixels:** Find all yellow (4) and red (2) pixels in the input grid. Black pixels are considered background and do not change.\n\n2.  **Yellow Pixel Pairs:** Consider pairs of yellow pixels.\n\n3.  **Path Creation:**  For each yellow pixel (or pair, if clearly related by being the only yellows in a row or column, or by being at the \"ends\" of a diagonal):\n    *   Find Red pixels (2) that lie on direct horizontal or vertical paths, which are obstructed only by other red pixels.\n    *   Change those red pixels to azure (8).\n\n4. Result: The output is the original grid with red pixels that connect the yellows changed to azure.\n\"\"\"\n\nimport numpy as np\n\ndef get_positions(grid, color):\n    \"\"\"Finds positions of pixels of a specific color.\"\"\"\n    positions = []\n    for r_idx, row in enumerate(grid):\n        for c_idx, pixel in enumerate(row):\n            if pixel == color:\n                positions.append((r_idx, c_idx))\n    return positions\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the maze-solving rules.\"\"\"\n\n    # initialize output_grid\n    output_grid = np.copy(input_grid).astype(int)\n    yellow_positions = get_positions(input_grid, 4)\n    red_positions = get_positions(input_grid, 2)\n\n\n    # Iterate through rows and columns to find paths\n    for r_idx, row in enumerate(input_grid):\n      yellow_in_row = [c_idx for r_idx2, c_idx in yellow_positions if r_idx2 == r_idx]\n      if len(yellow_in_row) > 1 :\n        min_yellow = min(yellow_in_row)\n        max_yellow = max(yellow_in_row)\n        for c_idx in range(min_yellow + 1, max_yellow):\n            if input_grid[r_idx, c_idx] == 2:\n              output_grid[r_idx, c_idx] = 8\n\n    for c_idx in range(len(input_grid[0])):\n        yellow_in_col = [r_idx for r_idx, c_idx2 in yellow_positions if c_idx2 == c_idx]\n        if len(yellow_in_col) > 1:\n            min_yellow = min(yellow_in_col)\n            max_yellow = max(yellow_in_col)\n            for r_idx in range(min_yellow + 1, max_yellow):\n                if input_grid[r_idx, c_idx] == 2:\n                    output_grid[r_idx, c_idx] = 8\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3664,
    "candidates_token_count": 649,
    "total_token_count": 4313,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 16.00747
}