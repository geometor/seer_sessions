{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by propagating colors based on their original position, with the highest color filling horizontally right and the next highest filling other positions in the column.\n\"\"\"\n\nimport numpy as np\n\ndef get_objects(grid):\n    \"\"\"\n    Finds all contiguous blocks of the same color in the grid.\n    \"\"\"\n    objects = {}\n    visited = set()\n    rows, cols = len(grid), len(grid[0])\n\n    def dfs(row, col, color, obj):\n        if (row, col) in visited or row < 0 or row >= rows or col < 0 or col >= cols or grid[row][col] != color:\n            return\n        visited.add((row, col))\n        obj.append((row, col))\n        dfs(row + 1, col, color, obj)\n        dfs(row - 1, col, color, obj)\n        dfs(row, col + 1, color, obj)\n        dfs(row, col - 1, color, obj)\n\n    for r in range(rows):\n        for c in range(cols):\n            if (r, c) not in visited and grid[r][c]!=0:\n                color = grid[r][c]\n                obj = []\n                dfs(r, c, color, obj)\n                if color not in objects:\n                    objects[color] = []\n                objects[color].append(obj)\n    return objects\ndef transform(input_grid):\n    # Initialize output grid as a copy of the input grid\n    output_grid = np.copy(input_grid).tolist()\n    rows = len(input_grid)\n    cols = len(input_grid[0])\n\n    # Iterate through each row\n    for r in range(rows):\n        #find non-zero colors present in current row, sort desc\n        colors = sorted(list(set(input_grid[r])), reverse=True)\n        colors = [c for c in colors if c!=0]\n\n        #iterate through found colors\n        for color in colors:\n            #find leftmost occurance of colour\n            indices = [i for i, x in enumerate(input_grid[r]) if x == color]\n            if len(indices)>0:\n                leftmost_index = min(indices)\n                #fill left\n                for i in range(0,leftmost_index):\n                    output_grid[r][i] = color\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1956,
    "candidates_token_count": 559,
    "total_token_count": 2515,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 12.102749
}