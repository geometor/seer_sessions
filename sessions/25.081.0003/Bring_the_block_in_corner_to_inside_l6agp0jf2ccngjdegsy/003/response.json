{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Find all contiguous blocks of non-white (non-zero) pixels. Consider each of these a separate object, regardless of shape.\n2.  **Identify Corner/Edge Pixels of Interest:** Find single pixels, that are not part of another object, on the top or bottom row.\n3.  **Find target object**: Locate the object with the largest bounding box.\n4.  **Reposition:** For each identified pixel from step two, move it to the row directly above target object. Maintain the pixel's original column position. If there are multiple objects, place all other objects above.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"Finds all contiguous objects in a grid.\"\"\"\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and not visited[r, c]:\n                obj_pixels = []\n                stack = [(r, c)]\n                visited[r, c] = True\n\n                while stack:\n                    curr_r, curr_c = stack.pop()\n                    obj_pixels.append((curr_r, curr_c, grid[curr_r, curr_c]))\n\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        new_r, new_c = curr_r + dr, curr_c + dc\n                        if 0 <= new_r < rows and 0 <= new_c < cols and \\\n                           grid[new_r, new_c] != 0 and not visited[new_r, new_c]:\n                            stack.append((new_r, new_c))\n                            visited[new_r, new_c] = True\n                objects.append(obj_pixels)\n    return objects\n\ndef find_single_pixels(objects):\n    \"\"\"Finds single-pixel objects.\"\"\"\n    return [obj for obj in objects if len(obj) == 1]\n\ndef find_target_object(objects):\n    \"\"\"Finds the object with the largest bounding box.\"\"\"\n    if not objects:\n        return None\n\n    largest_object = None\n    max_area = -1\n\n    for obj in objects:\n        rows, cols = zip(*[(r, c) for r, c, _ in obj])\n        min_row, max_row = min(rows), max(rows)\n        min_col, max_col = min(cols), max(cols)\n        area = (max_row - min_row + 1) * (max_col - min_col + 1)\n        if area > max_area:\n            max_area = area\n            largest_object = obj\n\n    return largest_object\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the described rules.\"\"\"\n    grid = np.array(input_grid)\n    objects = find_objects(grid)\n    single_pixels = find_single_pixels(objects)\n    other_objects = [obj for obj in objects if len(obj) > 1]\n    target_object = find_target_object(other_objects)\n    \n    #initialize output grid with zeros and same dimensions\n    output_grid = np.zeros_like(grid)\n\n    if target_object is None: #handles cases without a target\n        return input_grid\n\n    # Get target object top row\n    target_rows = [r for r, _, _ in target_object]\n    target_top_row = min(target_rows)\n    \n    #copy target_object into position\n    for r, c, val in target_object:\n        output_grid[r,c] = val\n\n\n    # Move single pixels\n    for pixel_list in single_pixels:\n        for r, c, val in pixel_list:\n            new_row = target_top_row -1\n            if 0 <= new_row < output_grid.shape[0]: #ensure in grid\n              output_grid[new_row, c] = val\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4898,
    "candidates_token_count": 963,
    "total_token_count": 5861,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 17.810602
}