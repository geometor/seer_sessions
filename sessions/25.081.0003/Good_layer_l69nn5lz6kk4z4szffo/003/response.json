{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentify two primary adjacent objects. Shift the boundary between them such that one object\nexpands downwards or rightwards by one unit along the boundary, and the other object correspondingly shrinks.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    # Find distinct objects (contiguous blocks of same color)\n    objects = {}\n    visited = np.zeros_like(grid, dtype=bool)\n\n    def dfs(row, col, color, obj_id):\n        if (row < 0 or row >= grid.shape[0] or col < 0 or col >= grid.shape[1] or\n                visited[row, col] or grid[row, col] != color):\n            return\n        visited[row, col] = True\n        objects[obj_id]['coords'].append((row, col))\n        dfs(row + 1, col, color, obj_id)\n        dfs(row - 1, col, color, obj_id)\n        dfs(row, col + 1, color, obj_id)\n        dfs(row, col - 1, color, obj_id)\n\n    obj_id = 0\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if not visited[row, col]:\n                objects[obj_id] = {'color': grid[row, col], 'coords': []}\n                dfs(row, col, grid[row, col], obj_id)\n                obj_id += 1\n\n    return objects\n\ndef find_moving_objects(objects, grid):\n    # Find the two objects that are involved in the boundary shift\n    # Prioritize non-background colors for movement\n    \n    moving_objects = []\n    for obj_id, obj_data in objects.items():\n      if obj_data['color'] != 0:\n        moving_objects.append(obj_data)\n    \n    # if we only have one object, and background, no moves\n    if len(moving_objects) < 2:\n      return None, None\n\n    # Find the object pair with the longest shared boundary.\n    max_shared_boundary = -1\n    obj1 = None\n    obj2 = None\n    \n    for i in range(len(moving_objects)):\n        for j in range(i + 1, len(moving_objects)):\n            shared_boundary = 0\n            for r1, c1 in moving_objects[i]['coords']:\n                for r2, c2 in moving_objects[j]['coords']:\n                    if abs(r1 - r2) + abs(c1 - c2) == 1:\n                        shared_boundary += 1\n\n            if shared_boundary > max_shared_boundary:\n                max_shared_boundary = shared_boundary\n                obj1 = moving_objects[i]\n                obj2 = moving_objects[j]\n    if obj1['color'] > obj2['color']:\n      obj1,obj2 = obj2,obj1\n\n    return obj1, obj2\n  \n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n    grid = np.array(input_grid)\n\n    # Find objects\n    objects = find_objects(grid)\n   \n    # find the two objects\n    obj1, obj2 = find_moving_objects(objects, grid)\n    if obj1 is None or obj2 is None:\n       return output_grid\n\n    # Determine transformation: boundary shift.\n    # obj1 expands down or right, obj2 contracts up or left\n    \n    obj1_coords = obj1['coords']\n    obj2_coords = obj2['coords']\n\n    # find boundary and move\n    for r1, c1 in obj1_coords:\n        for r2, c2 in obj2_coords:\n            if abs(r1 - r2) + abs(c1 - c2) == 1:  # Adjacent\n                if r1 < r2 : # obj1 above obj2, move down\n                  output_grid[r2,c2] = obj1['color']\n                elif r1 > r2: # obj2 above obj 1, move up into obj1\n                  output_grid[r1,c1] = obj2['color']\n                elif c1 < c2: # obj1 is left, move right\n                  output_grid[r2,c2] = obj1['color']\n                elif c1 > c2: #obj2 is left, move left\n                  output_grid[r1, c1] = obj2['color']\n\n    \n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4102,
    "candidates_token_count": 1070,
    "total_token_count": 5172,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 21.811745
}