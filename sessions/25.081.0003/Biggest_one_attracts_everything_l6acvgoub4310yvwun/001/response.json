{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation rule works as follows:\n1. Identify Non-Empty Rows: Examine each row in the input grid. A row is considered \"non-empty\" if it contains any digit other than 0.\n2. Shift Non-Empty Rows Upwards: Arrange all non-empty rows sequentially at the top of the output grid, maintaining their relative order from the input.\n3. Fill Remaining with empty rows: insert empty (all 0) rows to bottom of the grid until the input and output grid have the same height.\n\"\"\"\n\nimport numpy as np\n\ndef is_empty_row(row):\n    \"\"\"Checks if a row is empty (all zeros).\"\"\"\n    return all(pixel == 0 for pixel in row)\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the rule.\"\"\"\n    input_grid_np = np.array(input_grid)\n    rows, cols = input_grid_np.shape\n    output_grid = []\n\n    # Identify and shift non-empty rows\n    non_empty_rows = []\n    for row in input_grid_np:\n        if not is_empty_row(row):\n            non_empty_rows.append(list(row))\n\n    # Add non-empty rows to output\n    for row in non_empty_rows:\n        output_grid.append(row)\n\n    # Pad with empty rows at top and bottom\n    num_empty_rows = rows - len(output_grid)\n    \n    while len(output_grid) < rows :\n       output_grid.append([0] * cols)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1783,
    "candidates_token_count": 365,
    "total_token_count": 2148,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.12339
}