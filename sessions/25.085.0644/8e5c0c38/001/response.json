{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentify the background color (most frequent color). Iterate through each pixel.\nIf a pixel is not the background color, check its four cardinal neighbors (up, down, left, right).\nIf none of the cardinal neighbors have the same color as the pixel, change the pixel's color to the background color in the output grid.\nOtherwise, keep the pixel's original color.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef _get_background_color(grid):\n    \"\"\"Finds the most frequent color in the grid, assumed to be the background.\"\"\"\n    counts = Counter(grid.flatten())\n    # Find the color with the highest count\n    background_color = counts.most_common(1)[0][0]\n    return background_color\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by removing pixels from colored objects that\n    lack cardinal neighbors of the same color.\n    \"\"\"\n    # Convert input list of lists to numpy array for easier manipulation\n    grid = np.array(input_grid, dtype=int)\n    height, width = grid.shape\n\n    # Initialize output_grid as a copy of the input grid\n    output_grid = np.copy(grid)\n\n    # Determine the background color\n    background_color = _get_background_color(grid)\n\n    # Define cardinal neighbor offsets (row, col)\n    cardinal_neighbors = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right\n\n    # Iterate through each pixel of the input grid\n    for r in range(height):\n        for c in range(width):\n            current_color = grid[r, c]\n\n            # Skip if the current pixel is already the background color\n            if current_color == background_color:\n                continue\n\n            # Count cardinal neighbors with the same color\n            same_color_neighbor_count = 0\n            for dr, dc in cardinal_neighbors:\n                nr, nc = r + dr, c + dc\n\n                # Check if neighbor is within grid boundaries\n                if 0 <= nr < height and 0 <= nc < width:\n                    # Check if neighbor has the same color\n                    if grid[nr, nc] == current_color:\n                        same_color_neighbor_count += 1\n                        # Optimization: If we find one, we know it won't be removed\n                        break \n\n            # If no cardinal neighbors have the same color, change pixel to background color in output\n            if same_color_neighbor_count == 0:\n                output_grid[r, c] = background_color\n\n    # Convert back to list of lists if necessary, though numpy array is often preferred\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5562,
    "candidates_token_count": 621,
    "total_token_count": 6183,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 7.67141
}