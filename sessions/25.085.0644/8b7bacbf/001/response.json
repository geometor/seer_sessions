{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque, Counter\n\n\"\"\"\nTransformation Rule:\n1. Identify the color (1-9) that appears exactly once in the input grid. This is the 'fill_color'.\n2. Find all contiguous regions of white (0) pixels that are completely enclosed by non-white pixels (i.e., they cannot reach the grid boundary by moving only through white pixels orthogonally).\n3. Change the color of all pixels within these enclosed white regions to the 'fill_color'.\n\"\"\"\n\ndef find_fill_color(grid):\n    \"\"\"\n    Finds the color (1-9) that occurs exactly once in the grid.\n    Returns None if no such color exists or if multiple colors occur exactly once.\n    \"\"\"\n    counts = Counter()\n    # Flatten the grid and count non-zero colors\n    for row in grid:\n        for pixel in row:\n            if pixel != 0:\n                counts[pixel] += 1\n\n    fill_color = None\n    found_unique = False\n    for color, count in counts.items():\n        if count == 1:\n            if found_unique: # Found more than one color that appears once\n                return None \n            fill_color = color\n            found_unique = True\n            \n    return fill_color\n\ndef find_enclosed_pixels(grid):\n    \"\"\"\n    Identifies white pixels (0) that are enclosed by non-white pixels.\n    Uses a Breadth-First Search (BFS) starting from border white pixels\n    to find all white pixels reachable from the outside.\n    Any white pixel not reachable is considered enclosed.\n    \"\"\"\n    input_grid_np = np.array(grid)\n    height, width = input_grid_np.shape\n    reachable = np.full((height, width), False, dtype=bool)\n    queue = deque()\n\n    # Initialize queue with all white border pixels\n    for r in range(height):\n        for c in [0, width - 1]:\n            if input_grid_np[r, c] == 0 and not reachable[r, c]:\n                reachable[r, c] = True\n                queue.append((r, c))\n    for c in range(width):\n         for r in [0, height - 1]:\n            if input_grid_np[r, c] == 0 and not reachable[r, c]:\n                reachable[r, c] = True\n                queue.append((r, c))\n\n    # Perform BFS to find all reachable white pixels\n    while queue:\n        r, c = queue.popleft()\n\n        # Check orthogonal neighbors\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n\n            # Check if neighbor is within bounds\n            if 0 <= nr < height and 0 <= nc < width:\n                # Check if neighbor is white and not yet marked as reachable\n                if input_grid_np[nr, nc] == 0 and not reachable[nr, nc]:\n                    reachable[nr, nc] = True\n                    queue.append((nr, nc))\n\n    # Identify enclosed pixels (white pixels that are not reachable)\n    enclosed_coords = []\n    for r in range(height):\n        for c in range(width):\n            if input_grid_np[r, c] == 0 and not reachable[r, c]:\n                enclosed_coords.append((r, c))\n\n    return enclosed_coords\n\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n    1. Finds the unique 'fill_color'.\n    2. Finds enclosed white pixels.\n    3. Fills the enclosed areas with the 'fill_color'.\n    \"\"\"\n    # Convert input list of lists to numpy array for easier processing\n    input_grid_np = np.array(input_grid, dtype=int)\n    # Create a copy to modify, which will be the output\n    output_grid_np = input_grid_np.copy()\n\n    # 1. Find the unique fill color\n    fill_color = find_fill_color(input_grid)\n    if fill_color is None:\n        # Handle cases where there isn't exactly one unique color (though examples suggest there always is)\n        # For now, just return the original grid if no unique color found.\n        # Consider raising an error or adopting a default behavior if needed.\n        print(\"Warning: No unique fill color found or multiple unique colors found.\")\n        return input_grid # Return original if rule prerequisite isn't met\n\n    # 2. Find coordinates of enclosed white pixels\n    enclosed_coords = find_enclosed_pixels(input_grid)\n\n    # 3. Change the color of enclosed pixels in the output grid\n    for r, c in enclosed_coords:\n        output_grid_np[r, c] = fill_color\n\n    # Convert the numpy array back to a list of lists for the required output format\n    output_grid = output_grid_np.tolist()\n\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6481,
    "candidates_token_count": 1165,
    "total_token_count": 7646,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.411473
}