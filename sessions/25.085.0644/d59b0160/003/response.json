{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentifies contiguous objects (using 8-directional connectivity) of non-background colors (not orange/7). \nAn object is removed (replaced with the background color orange/7) if it meets two conditions:\n1. It contains at least one white (0) pixel.\n2. It does not touch any of the four borders of the grid.\nObjects that do not meet both conditions remain unchanged.\n\"\"\"\n\ndef find_objects(grid, background_color):\n    \"\"\"\n    Finds all contiguous objects of non-background colors in the grid using 8-directional connectivity.\n\n    Args:\n        grid (np.ndarray): The input grid.\n        background_color (int): The color considered as background.\n\n    Returns:\n        list: A list of sets, where each set contains the (row, col) tuples\n              of pixels belonging to a single object.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n    # Define 8 directions (including diagonals)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]\n\n    for r in range(rows):\n        for c in range(cols):\n            # If the pixel is not background and not visited yet\n            if grid[r, c] != background_color and not visited[r, c]:\n                # Start a Breadth-First Search (BFS) to find the object\n                current_object = set()\n                q = deque([(r, c)])\n                visited[r, c] = True\n                current_object.add((r, c))\n\n                while q:\n                    row, col = q.popleft()\n\n                    # Check all 8 neighbors\n                    for dr, dc in directions:\n                        nr, nc = row + dr, col + dc\n\n                        # Check grid bounds\n                        if 0 <= nr < rows and 0 <= nc < cols:\n                            # If neighbor is part of the object (not background) and not visited\n                            if grid[nr, nc] != background_color and not visited[nr, nc]:\n                                visited[nr, nc] = True\n                                q.append((nr, nc))\n                                current_object.add((nr, nc))\n\n                if current_object:\n                    objects.append(current_object)\n    return objects\n\ndef contains_color(grid, obj_coords, color_to_check):\n    \"\"\"Checks if any pixel in the object has the specified color.\"\"\"\n    for r, c in obj_coords:\n        # Check bounds just in case, though obj_coords should be valid\n        if 0 <= r < grid.shape[0] and 0 <= c < grid.shape[1]:\n            if grid[r, c] == color_to_check:\n                return True\n    return False\n\ndef touches_border(obj_coords, grid_shape):\n    \"\"\"Checks if any pixel in the object touches the grid border.\"\"\"\n    rows, cols = grid_shape\n    for r, c in obj_coords:\n        if r == 0 or r == rows - 1 or c == 0 or c == cols - 1:\n            return True\n    return False\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule: removes non-border-touching objects \n    containing white pixels by replacing them with the background color.\n    \"\"\"\n    # Convert input list of lists to numpy array\n    grid = np.array(input_grid, dtype=int)\n    \n    # Initialize output_grid as a copy of the input\n    output_grid = grid.copy()\n    rows, cols = grid.shape\n    background_color = 7 # Orange\n    white_color = 0      # White\n\n    # Find all distinct objects (contiguous non-background pixels using 8-connectivity)\n    objects = find_objects(grid, background_color)\n\n    # Iterate through each found object\n    for obj_coords in objects:\n        # Check condition 1: Does the object contain white?\n        has_white = contains_color(grid, obj_coords, white_color)\n\n        # Check condition 2: Does the object touch the border?\n        touches = touches_border(obj_coords, (rows, cols))\n\n        # Apply the rule: If object contains white AND does NOT touch the border, remove it\n        if has_white and not touches:\n            # Replace object pixels with background color in the output grid\n            for r, c in obj_coords:\n                # Ensure coordinates are valid before writing (safety check)\n                 if 0 <= r < rows and 0 <= c < cols:\n                    output_grid[r, c] = background_color\n\n    # Return the modified grid as a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7091,
    "candidates_token_count": 1126,
    "total_token_count": 8217,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 95.186654
}