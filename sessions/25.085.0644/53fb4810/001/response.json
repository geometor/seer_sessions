{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nThis program transforms an input grid based on the locations of unique Red (2) and Yellow (4) pixels, relative to each other and the position of Blue (1) pixels.\n\n1.  Locate the unique Red (2) pixel at (R_r, C_r) and the unique Yellow (4) pixel at (R_y, C_y).\n2.  Determine the upper boundary for modification in the target column(s). This boundary is the row index of the highest Blue (1) pixel found within that specific column. If no Blue pixel exists in the column, the boundary is the top of the grid (row 0). The modification extends from row 0 down to *just before* this boundary row.\n3.  Check if the Red and Yellow markers are in the same column (C_r == C_y).\n    a.  If YES (Same Column):\n        - The target column C is C_r (or C_y).\n        - Find the boundary row `R_boundary` for column C (the minimum row index of any Blue pixel in column C, or grid height if none).\n        - Fill the output grid's column C from row 0 up to (but not including) `R_boundary` with an alternating pattern of Red (2) and Yellow (4), starting with Red (2) at row 0.\n        - After applying the pattern, check the *input* grid: for any row `r` in the modified range [0, R_boundary), if `input_grid[r, C]` was Green (3), set `output_grid[r, C]` to Yellow (4), potentially overwriting the pattern.\n    b.  If NO (Different Columns):\n        - For the Yellow column C_y:\n            - Find the boundary row `R_boundary_y` for column C_y.\n            - Fill the output grid's column C_y from row 0 up to (but not including) `R_boundary_y` with solid Yellow (4).\n        - For the Red column C_r:\n            - Find the boundary row `R_boundary_r` for column C_r.\n            - Fill the output grid's column C_r from row 0 up to (but not including) `R_boundary_r` with solid Red (2).\n4.  All other pixels retain their original color from the input grid.\n\"\"\"\n\ndef find_color_coords(grid, color):\n    \"\"\"Finds all coordinates (row, col) of pixels with a specific color.\"\"\"\n    coords = np.argwhere(grid == color)\n    # np.argwhere returns [row, col] pairs\n    return [tuple(coord) for coord in coords]\n\ndef find_blue_boundary_row(grid, target_col):\n    \"\"\"\n    Finds the minimum row index of a Blue (1) pixel in the target column.\n    Returns grid height if no Blue pixel is found in the column.\n    \"\"\"\n    height, width = grid.shape\n    blue_coords_in_col = [r for r, c in find_color_coords(grid, 1) if c == target_col]\n\n    if not blue_coords_in_col:\n        # If no blue pixel in this column, the modification conceptually\n        # extends to the 'bottom', but since our loop goes up to boundary-1,\n        # returning height means the loop covers the whole column [0, height-1].\n        return height\n    else:\n        # Return the row index of the highest blue pixel in this column\n        return min(blue_coords_in_col)\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule based on Red/Yellow marker positions\n    and Blue pixel boundaries.\n    \"\"\"\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n    height, width = input_grid.shape\n\n    # --- Find Markers ---\n    red_coords = find_color_coords(input_grid, 2)\n    yellow_coords = find_color_coords(input_grid, 4)\n\n    # Expect exactly one red and one yellow marker\n    if len(red_coords) != 1 or len(yellow_coords) != 1:\n        # Handle error or unexpected input, maybe return input unchanged\n        # For this task, assume valid input based on examples\n        return output_grid\n\n    r_r, c_r = red_coords[0]\n    r_y, c_y = yellow_coords[0]\n\n    # --- Apply Transformation Logic ---\n    if c_r == c_y:\n        # Case 1: Markers in the same column\n        target_col = c_r\n        boundary_row = find_blue_boundary_row(input_grid, target_col)\n\n        # Fill with alternating pattern\n        for r in range(boundary_row):\n            color = 2 if r % 2 == 0 else 4 # Red for even rows, Yellow for odd\n            output_grid[r, target_col] = color\n\n        # Override with Yellow where input was Green\n        for r in range(boundary_row):\n            if input_grid[r, target_col] == 3:\n                output_grid[r, target_col] = 4\n\n    else:\n        # Case 2: Markers in different columns\n        # Process Yellow column\n        boundary_row_y = find_blue_boundary_row(input_grid, c_y)\n        for r in range(boundary_row_y):\n            output_grid[r, c_y] = 4 # Fill with Yellow\n\n        # Process Red column\n        boundary_row_r = find_blue_boundary_row(input_grid, c_r)\n        for r in range(boundary_row_r):\n            output_grid[r, c_r] = 2 # Fill with Red\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5501,
    "candidates_token_count": 1345,
    "total_token_count": 6846,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 25.06614
}