{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter, defaultdict\nimport copy\n\ndef find_objects(grid, color):\n    \"\"\"\n    Finds all contiguous objects of a specific color in the grid.\n\n    Args:\n        grid (np.array): The input grid.\n        color (int): The color of the objects to find.\n\n    Returns:\n        list: A list of objects, where each object is represented by a set \n              of (row, col) tuples. Returns an empty list if the color \n              is not found.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == color and not visited[r, c]:\n                current_object = set()\n                q = [(r, c)]\n                visited[r, c] = True\n                while q:\n                    row, col = q.pop(0)\n                    current_object.add((row, col))\n                    # Check 4 neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] == color and not visited[nr, nc]:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n                if current_object:\n                    objects.append(current_object)\n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Identifies the two non-background colors that form the fewest distinct \n    contiguous objects. Swaps all occurrences of these two colors in the grid. \n    The background color is assumed to be the most frequent color. If there \n    are fewer than two non-background colors, no changes are made.\n\n    Args:\n        input_grid (list of lists of int): The input grid.\n\n    Returns:\n        list of lists of int: The transformed grid.\n    \"\"\"\n    \n    # Convert input grid to a numpy array for easier manipulation\n    input_array = np.array(input_grid, dtype=int)\n    output_array = np.copy(input_array)\n    \n    # Flatten the array to count color frequencies\n    flat_array = input_array.flatten()\n    \n    # Count the occurrences of each color\n    color_counts = Counter(flat_array)\n    \n    # If there are fewer than 3 unique colors (background + 2 others), \n    # no swap is possible/needed\n    if len(color_counts) < 3:\n        return output_array.tolist()\n        \n    # Find the most frequent color (background)\n    background_color = color_counts.most_common(1)[0][0]\n    \n    # Identify non-background colors\n    non_background_colors = [color for color in color_counts if color != background_color]\n\n    # If there are fewer than 2 non-background colors after removing background,\n    # no swap is possible/needed\n    if len(non_background_colors) < 2:\n         return output_array.tolist()\n\n    # Count the number of distinct objects for each non-background color\n    object_counts = {}\n    for color in non_background_colors:\n        objects = find_objects(input_array, color)\n        object_counts[color] = len(objects)\n\n    # Sort the non-background colors by their object count (ascending)\n    # If object counts are tied, the original order (which depends on dict iteration order, \n    # roughly insertion order in modern Python) might influence the result, \n    # but it shouldn't affect the final swap as it's symmetrical.\n    # A more robust tie-breaker could be added if needed, e.g., sorting by color value.\n    sorted_colors_by_objects = sorted(object_counts.items(), key=lambda item: item[1])\n    \n    # Identify the two colors with the fewest objects\n    color1, _ = sorted_colors_by_objects[0]\n    color2, _ = sorted_colors_by_objects[1]\n    \n    # Iterate through the grid and swap the colors\n    rows, cols = input_array.shape\n    for r in range(rows):\n        for c in range(cols):\n            if input_array[r, c] == color1:\n                output_array[r, c] = color2\n            elif input_array[r, c] == color2:\n                output_array[r, c] = color1\n                \n    # Return the transformed grid as a list of lists\n    return output_array.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5954,
    "candidates_token_count": 1117,
    "total_token_count": 7071,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 17.77399
}