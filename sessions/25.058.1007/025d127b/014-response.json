{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentify a connected shape of azure (8) pixels within the input grid.  Preserve a specific part of the outer edge of the shape. Clear all other azure pixels to white (0).\n\"\"\"\n\nimport numpy as np\n\ndef get_azure_shape(grid):\n    \"\"\"Finds the connected azure shape and returns its coordinates.\"\"\"\n    azure_pixels = np.argwhere(grid == 8)\n    if azure_pixels.size == 0:\n        return []\n\n    # Create a set for easier membership checking and to avoid duplicates\n    shape_coords = set()\n\n    # Start with the first azure pixel found\n    stack = [tuple(azure_pixels[0])]\n\n    while stack:\n        current_pixel = stack.pop()\n        shape_coords.add(current_pixel)\n\n        # Check neighbors (up, down, left, right)\n        row, col = current_pixel\n        neighbors = [(row - 1, col), (row + 1, col), (row, col - 1), (row, col + 1)]\n\n        for neighbor_row, neighbor_col in neighbors:\n            if (0 <= neighbor_row < grid.shape[0] and\n                0 <= neighbor_col < grid.shape[1] and\n                grid[neighbor_row, neighbor_col] == 8 and\n                (neighbor_row, neighbor_col) not in shape_coords):\n                stack.append((neighbor_row, neighbor_col))\n    return list(shape_coords)\n\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the described rule.\"\"\"\n\n    output_grid = np.copy(input_grid)\n    azure_shape_coords = get_azure_shape(output_grid)\n    \n    # If there's no azure shape, return the input grid as is\n    if not azure_shape_coords:\n      return output_grid\n\n    # Create a set for quick lookup\n    azure_set = set(azure_shape_coords)\n\n    # Iterate through the azure pixels and apply the \"preserve edge\" rule.\n    for r in range(output_grid.shape[0]):\n        for c in range(output_grid.shape[1]):\n          if (r,c) not in azure_set:\n              continue\n          #keep one, remove one approach          \n          if (r >=1 and c>=1 and c < output_grid.shape[1]-2):\n              if(output_grid[r,c] ==8):\n                  output_grid[r-1,1] = 8  \n\n    for r in range(output_grid.shape[0]):\n        for c in range(output_grid.shape[1]):\n          if (r,c) not in azure_set:\n            continue\n          if (r >=1 and c>=1):\n              if output_grid[r,c] == 8 and (r,c) != (r-1,1):\n                  output_grid[r,c] = 0\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2223,
    "candidates_token_count": 687,
    "total_token_count": 2910,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.731239,
  "response_file": "014-response.json"
}