{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid based on identified shapes and patterns. The program prioritizes copying complete shapes (like rectangles or crosses) of a single color. If only partial shapes are present, it extends them to form complete shapes in the output.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"\n    Identifies contiguous objects in the grid.  Returns a list of objects, where each object\n    is a dictionary containing: 'color', 'shape' (initially 'unknown'), 'pixels' (list of (row, col) tuples),\n    and potentially 'dimensions' once the shape is determined.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n    objects = []\n\n    def dfs(row, col, color, pixels):\n        if (row < 0 or row >= rows or col < 0 or col >= cols or\n                visited[row, col] or grid[row, col] != color):\n            return\n        visited[row, col] = True\n        pixels.append((row, col))\n        dfs(row + 1, col, color, pixels)\n        dfs(row - 1, col, color, pixels)\n        dfs(row, col + 1, color, pixels)\n        dfs(row, col - 1, color, pixels)\n\n    for row in range(rows):\n        for col in range(cols):\n            if not visited[row, col]:\n                color = grid[row, col]\n                pixels = []\n                dfs(row, col, color, pixels)\n                if pixels:\n                    objects.append({'color': color, 'shape': 'unknown', 'pixels': pixels})\n    return objects\n\ndef determine_shape(obj):\n    \"\"\"\n    Analyzes an object's pixels to determine if it forms a rectangle or a cross.\n    Updates the 'shape' and 'dimensions' attributes of the object.\n    \"\"\"\n    pixels = obj['pixels']\n    rows, cols = zip(*pixels)\n    min_row, max_row = min(rows), max(rows)\n    min_col, max_col = min(cols), max(cols)\n    width = max_col - min_col + 1\n    height = max_row - min_row + 1\n\n    # Check for rectangle\n    if len(pixels) == width * height:\n        obj['shape'] = 'rectangle'\n        obj['dimensions'] = (height, width)\n        return\n    \n    #check for cross\n    if len(pixels) == width + height -1:\n       #find the center pixel\n       center_row = sum(rows)/len(pixels)\n       center_col = sum(cols)/len(pixels)\n       is_cross = True\n\n       #must be integers\n       if center_row%1 !=0 or center_col%1 != 0:\n           is_cross = False\n       #must all be either on center row or center col\n       if is_cross:\n           for row,col in pixels:\n               if row != int(center_row) and col != int(center_col):\n                   is_cross = False\n                   break\n       if is_cross:\n            obj['shape'] = 'cross'\n            obj['dimensions'] = (height, width)\n            return\n\n    obj['shape'] = 'partial' #if not rectangle or cross\n    obj['dimensions'] = (height,width)\n\ndef extend_partial_shape(obj, input_grid):\n    \"\"\"\n    Extends a partial shape to a complete shape.\n    Currently handles partial rectangles by filling them.\n    \"\"\"\n    if obj['shape'] == 'partial':\n      pixels = obj['pixels']\n      rows, cols = zip(*pixels)\n      min_row, max_row = min(rows), max(rows)\n      min_col, max_col = min(cols), max(cols)\n      \n      #Simple approach for extending, we may need more sophisticated methods later.\n      new_pixels = []\n      for r in range(min_row,max_row + 1):\n          for c in range(min_col, max_col + 1):\n              new_pixels.append((r,c))\n      obj['pixels'] = new_pixels\n      obj['shape'] = 'rectangle' #assume it extends to rectangle\n      obj['dimensions'] = (max_row - min_row + 1,max_col-min_col + 1)\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by identifying and potentially copying or extending shapes.\n    \"\"\"\n    input_grid = np.array(input_grid)\n    objects = find_objects(input_grid)\n\n    # Determine shapes and dimensions\n    for obj in objects:\n        determine_shape(obj)\n\n    # Find a complete shape to copy\n    for obj in objects:\n        if obj['shape'] in ('rectangle', 'cross') and obj['color'] != 0:\n            # Create output grid and copy pixels\n            height, width = obj['dimensions']\n            output_grid = np.full((height, width), obj['color'], dtype=int)\n            #we already checked it was the correct number of pixels\n            #for row, col in obj['pixels']:\n            #    output_grid[row - min(r for r, _ in obj['pixels'])][col - min(c for _, c in obj['pixels'])] = obj['color']\n            return output_grid.tolist()\n\n    # Handle partial shapes if no complete shapes found\n    for obj in objects:\n        if obj['shape'] == 'partial' and obj['color'] != 0:\n            extend_partial_shape(obj,input_grid)\n            height, width = obj['dimensions']\n            output_grid = np.full((height,width), obj['color'], dtype=int)\n            return output_grid.tolist()\n    \n    #default\n    return [[]]\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5698,
    "candidates_token_count": 1355,
    "total_token_count": 7053,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 15.073993,
  "response_file": "012-response.json"
}