{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Unique Color Cells:** Find all cells that are the sole representative of their color within the input grid.\n\n2.  **Create Plus Shapes Conditionally:** For each identified unique-color cell:\n    *   If the unique color is red (2), create a \"plus\" shape of yellow (4) cells around it.\n    *   If the unique color is blue (1), create a \"plus\" shape of orange (7) cells around it.\n    *   If it is any other color, do nothing.\n\n3.  **Plus Shape Definition:** The \"plus\" shape is formed by placing the new color (yellow or orange) in the four immediate adjacent cells (up, down, left, and right) *one cell away* from the unique-color cell. The unique color cell itself remains unchanged.\n\n4. **Leave other cells unchanged**\n\"\"\"\n\nimport numpy as np\n\ndef find_unique_color_cells(grid):\n    \"\"\"Finds cells that are the only instance of their color.\"\"\"\n    color_counts = np.bincount(grid.flatten(), minlength=10)\n    unique_colors = np.where(color_counts == 1)[0]\n    unique_cells = []\n    for color in unique_colors:\n        coords = np.where(grid == color)\n        unique_cells.append((color, (coords[0][0], coords[1][0])))\n    return unique_cells\n\ndef create_plus_shape(grid, center, color):\n    \"\"\"Creates a plus shape around a center cell, skipping one cell.\"\"\"\n    rows, cols = grid.shape\n    offsets = [(-2, 0), (2, 0), (0, -2), (0, 2)]  # Offsets for plus shape, skipping one cell\n\n    for offset in offsets:\n        new_row = center[0] + offset[0]\n        new_col = center[1] + offset[1]\n\n        if 0 <= new_row < rows and 0 <= new_col < cols:\n            grid[new_row, new_col] = color\n    return grid\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the rules.\"\"\"\n    output_grid = np.copy(input_grid)\n    unique_cells = find_unique_color_cells(input_grid)\n\n    for unique_color, center in unique_cells:\n        if unique_color == 2:  # Red\n            output_grid = create_plus_shape(output_grid, center, 4)  # Yellow plus\n        elif unique_color == 1:  # Blue\n            output_grid = create_plus_shape(output_grid, center, 7)  # Orange plus\n        #  Do nothing for other unique colors\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4387,
    "candidates_token_count": 636,
    "total_token_count": 5023,
    "cached_content_token_count": 0
  },
  "timing": {
    "response_time": 5.733323
  },
  "response_file": "004-response.json"
}