import numpy as np

def analyze_results(task_examples, transform_function):
    results = []
    for example in task_examples:
        input_grid = np.array(example['input'])
        expected_output = np.array(example['output'])
        actual_output = transform_function(input_grid)

        correct_pixels = np.sum(actual_output == expected_output)
        incorrect_pixels = np.sum(actual_output != expected_output)
        total_pixels = input_grid.size

        input_values, input_counts = np.unique(input_grid, return_counts=True)
        expected_values, expected_counts = np.unique(expected_output, return_counts=True)
        actual_values, actual_counts = np.unique(actual_output, return_counts=True)

        results.append({
            'example_id': example.get('id', 'N/A'),
            'correct_pixels': int(correct_pixels),
            'incorrect_pixels': int(incorrect_pixels),
            'total_pixels': int(total_pixels),
            'accuracy': float(correct_pixels / total_pixels),
            'input_value_counts': dict(zip(map(int, input_values), map(int, input_counts))),
            'expected_value_counts': dict(zip(map(int, expected_values), map(int, expected_counts))),
            'actual_value_counts': dict(zip(map(int, actual_values), map(int, actual_counts))),
            'input_grid': input_grid.tolist(),
            'expected_output': expected_output.tolist(),
            'actual_output': actual_output.tolist()
        })
    return results


task_examples = [
    {'input': [[9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 1, 9, 9, 1, 9, 9, 1, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9]], 'output': [[9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 8, 9, 9, 8, 9, 9, 8, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9]]},
    {'input': [[9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9, 1, 9, 9, 1, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9, 1, 9, 9, 1, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]], 'output': [[9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9, 8, 9, 9, 8, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 8, 9, 9, 9, 9, 9, 9, 9, 9, 8, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9, 8, 9, 9, 8, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]]},
    {'input': [[9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 1, 9, 9, 9, 9, 1, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 1, 9, 9, 9, 9, 9, 1, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 1, 9, 9, 1, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]], 'output': [[9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 8, 9, 9, 9, 9, 8, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 8, 9, 9, 9, 9, 9, 8, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 8, 9, 9, 8, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]]}
]

analysis = analyze_results(task_examples, transform)
for result in analysis:
    print(f"Example ID: {result['example_id']}")
    print(f"  Accuracy: {result['accuracy']:.2f}")
    print(f"  Correct Pixels: {result['correct_pixels']} / {result['total_pixels']}")
    print(f"  Incorrect Pixels: {result['incorrect_pixels']}")
    print(f"  Input Value Counts: {result['input_value_counts']}")
    print(f"  Expected Value Counts: {result['expected_value_counts']}")
    print(f"  Actual Value Counts: {result['actual_value_counts']}")
    print(f"Input:\n{np.array(result['input_grid'])}")
    print(f"Expected:\n{np.array(result['expected_output'])}")
    print(f"Actual:\n{np.array(result['actual_output'])}")
    print("-" * 20)
