{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by changing the color of grey (5) pixels based on their arrangement into connected components, specifically vertical and horizontal segments. Grey pixels in a vertical segment are changed to blue (1).  Horizontal segments connected to the left of the vertical segment are changed to yellow (4), and those to the right are changed to red (2).\n\"\"\"\n\nimport numpy as np\n\ndef get_connected_components(grid, color):\n    \"\"\"\n    Finds connected components of a specific color in the grid.\n    \"\"\"\n    visited = np.zeros_like(grid, dtype=bool)\n    components = []\n\n    def dfs(row, col, current_component):\n        if (\n            row < 0\n            or row >= grid.shape[0]\n            or col < 0\n            or col >= grid.shape[1]\n            or visited[row, col]\n            or grid[row, col] != color\n        ):\n            return\n        visited[row, col] = True\n        current_component.append((row, col))\n        dfs(row + 1, col, current_component)\n        dfs(row - 1, col, current_component)\n        dfs(row, col + 1, current_component)\n        dfs(row, col - 1, current_component)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] == color and not visited[row, col]:\n                current_component = []\n                dfs(row, col, current_component)\n                components.append(current_component)\n    return components\n\ndef classify_segments(component):\n    \"\"\"\n    Classifies segments within a connected component as vertical or horizontal.\n    \"\"\"\n    rows, cols = zip(*component)\n    min_col, max_col = min(cols), max(cols)\n    min_row, max_row = min(rows), max(rows)\n\n    vertical_segment = []\n    horizontal_segments = []\n    \n    is_vertical = (max_row - min_row +1 ) == len(component) and (max_col == min_col)\n\n    if is_vertical:\n      vertical_segment = component\n    else:\n      # extract vertical segment - look for the longest connected line in a\n      # single column\n      col_counts = {}\n      for r,c in component:\n        if c not in col_counts:\n          col_counts[c] = []\n        col_counts[c].append(r)\n    \n      longest_col = -1\n      longest_col_len = -1\n\n      for col, row_list in col_counts.items():\n        row_list.sort()\n        \n        local_max_len = 0\n        max_len = 0\n        for i in range(len(row_list)):\n          if i == 0:\n            local_max_len = 1\n          elif row_list[i] == row_list[i-1] + 1:\n            local_max_len += 1\n          else:\n            local_max_len = 1\n          max_len = max(max_len, local_max_len)\n\n        if max_len > longest_col_len:\n          longest_col_len = max_len\n          longest_col = col\n      \n      # build vertical segment\n      for r,c in component:\n        if c == longest_col:\n          vertical_segment.append( (r,c))\n      vertical_segment.sort() # top to bottom\n\n      # horizontal components are the other parts\n      for r,c in component:\n        if (r,c) not in vertical_segment:\n          horizontal_segments.append( (r,c))\n\n    return vertical_segment, horizontal_segments\n\ndef transform(input_grid):\n    # Initialize output grid with the same values as the input grid\n    output_grid = np.copy(input_grid)\n\n    # Find connected components of grey pixels\n    grey_components = get_connected_components(input_grid, 5)\n\n    # Process each grey component\n    for component in grey_components:\n        # Classify segments\n        vertical_segment, horizontal_segments = classify_segments(component)\n\n        # Change color of vertical segment to blue\n        for row, col in vertical_segment:\n            output_grid[row, col] = 1\n\n        # Change color of horizontal segments based on their position relative to the vertical segment\n        for row, col in horizontal_segments:\n          if len(vertical_segment) > 0:\n            vertical_col = vertical_segment[0][1]  # Column of the vertical segment\n            if col < vertical_col:\n                output_grid[row, col] = 4  # Yellow for left segments\n            elif col > vertical_col:\n                output_grid[row, col] = 2  # Red for right segments\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2557,
    "candidates_token_count": 1139,
    "total_token_count": 3696,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 12.236718,
  "response_file": "010-response.json"
}