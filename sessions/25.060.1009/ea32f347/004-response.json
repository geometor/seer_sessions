{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentify vertical lines of grey (5) pixels in the input grid. Replace these\ngrey lines with different colors based on their adjacency to other grey lines:\n- Isolated lines become blue (1).\n- If a line has adjacent line, use yellow(4), for the first and red(2) for\n  second of pair.\nLeave other pixels (0) unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef find_vertical_lines(grid, color=5):\n    \"\"\"Finds vertical lines of a specified color in the grid.\"\"\"\n    lines = []\n    rows, cols = grid.shape\n    for c in range(cols):\n        start = -1\n        for r in range(rows):\n            if grid[r, c] == color:\n                if start == -1:\n                    start = r\n            elif start != -1:\n                lines.append((start, r - 1, c))\n                start = -1\n        if start != -1:\n            lines.append((start, rows - 1, c))\n    return lines\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the defined rules.\"\"\"\n    output_grid = np.copy(input_grid)\n    lines = find_vertical_lines(input_grid)\n    \n    # Create a dictionary to track line columns\n    line_cols = {}\n    for start_row, end_row, col in lines:\n        line_cols.setdefault(col, []).append((start_row, end_row))\n\n    # Determine the output color for each line based on adjacency\n    for col in sorted(line_cols.keys()):\n        lines_in_col = line_cols[col]\n        \n        is_first = (col == sorted(line_cols.keys())[0])\n        has_right_neighbor = (col + 1) in line_cols\n        \n        \n        if not has_right_neighbor :\n              output_color = 1 #blue\n        elif is_first:\n              output_color = 4  # yellow\n\n        else:\n              output_color = 2 #red\n\n\n        for start_row, end_row in lines_in_col:\n            for r in range(start_row, end_row + 1):\n                output_grid[r, col] = output_color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2529,
    "candidates_token_count": 536,
    "total_token_count": 3065,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.106498,
  "response_file": "004-response.json"
}