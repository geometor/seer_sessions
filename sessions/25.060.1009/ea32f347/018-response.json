{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Gray Areas:** Find all contiguous blocks of gray (5) pixels.\n2.  **Classify Orientation:** For each gray block, determine if it's horizontal (wider than tall) or vertical (taller than wide).\n3.  **Recolor Vertical Blocks:** Change all pixels in vertical gray blocks to yellow (4).\n4.  **Recolor Horizontal Blocks:**\n    *   Within a set of *vertically stacked* horizontal gray blocks, color the topmost block(s) blue (1)\n    *   Within a set of *vertically stacked* horizontal gray blocks, color the bottommost block(s) red (2).\n5.  **Preserve Other Colors:** Leave all non-gray pixels unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef find_contiguous_blocks(grid, color):\n    # Find contiguous blocks of a given color in the grid.\n    visited = np.zeros_like(grid, dtype=bool)\n    blocks = []\n\n    def dfs(r, c, current_block):\n        if (r < 0 or r >= grid.shape[0] or c < 0 or c >= grid.shape[1] or\n                visited[r, c] or grid[r, c] != color):\n            return\n        visited[r, c] = True\n        current_block.append((r, c))\n        dfs(r + 1, c, current_block)\n        dfs(r - 1, c, current_block)\n        dfs(r, c + 1, current_block)\n        dfs(r, c - 1, current_block)\n\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] == color and not visited[r, c]:\n                current_block = []\n                dfs(r, c, current_block)\n                blocks.append(current_block)\n    return blocks\n\ndef classify_orientation(block):\n    # Classify the orientation of a block as horizontal or vertical.\n    rows, cols = zip(*block)\n    height = max(rows) - min(rows) + 1\n    width = max(cols) - min(cols) + 1\n    return \"horizontal\" if width > height else \"vertical\"\n\ndef get_horizontal_blocks_by_column(blocks):\n    # Group horizontal blocks by their starting column.  This helps determine\n    # \"vertically stacked\".\n    horizontal_blocks = {}\n    for block in blocks:\n        orientation = classify_orientation(block)\n        if orientation == \"horizontal\":\n            # use the first column where gray starts as the key\n            rows, cols = zip(*block)\n            min_col = min(cols)\n            if min_col not in horizontal_blocks:\n              horizontal_blocks[min_col] = []\n            horizontal_blocks[min_col].append(block)\n\n    return horizontal_blocks\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n    gray_blocks = find_contiguous_blocks(output_grid, 5)\n\n    # get horizontal blocks\n    horizontal_blocks_by_col = get_horizontal_blocks_by_column(gray_blocks)\n\n    # recolor vertical blocks\n    for block in gray_blocks:\n        if classify_orientation(block) == \"vertical\":\n            for r, c in block:\n                output_grid[r,c] = 4\n\n    # recolor horizontal blocks based on vertical stacking\n    for col in horizontal_blocks_by_col:\n      # for each set of blocks\n      blocks = horizontal_blocks_by_col[col]\n\n      # find min and max row index - to find \"top\" and \"bottom\"\n      min_row = min([min(list(zip(*block))[0]) for block in blocks])\n      max_row = max([max(list(zip(*block))[0]) for block in blocks])\n        \n      # apply top = blue, bottom = red recoloring\n      for block in blocks:\n        block_min_row = min(list(zip(*block))[0])\n        if block_min_row == min_row:\n          new_color = 1  # Topmost\n        elif block_min_row == max_row:\n          new_color = 2\n        else:\n          new_color = 1 # make it all blue by default, in between\n        for r, c in block:\n          output_grid[r, c] = new_color          \n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3807,
    "candidates_token_count": 1049,
    "total_token_count": 4856,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.4373,
  "response_file": "018-response.json"
}