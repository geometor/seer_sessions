{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Target Colors:** Find the presence of yellow (4), red (2), and green (3) within the input grid.\n2.  **Determine Output Height:** The output grid's height is equal to the number of target colors found in the input grid.\n3.  **Determine Output Width:** If *any* row in the input grid contains only one non-zero color and any of the target colors, then the width is the same with the input. Otherwise the output width is 1.\n4. **Populate Output:** create rows of the target color and size based on the determined output shape.\n\n\"\"\"\n\nimport numpy as np\n\ndef get_target_colors(grid):\n    \"\"\"\n    Finds the unique target colors present in the grid.\n    \"\"\"\n    target_colors = [4, 2, 3]  # Yellow, Red, Green\n    found_colors = set()\n    for row in grid:\n        for cell in row:\n            if cell in target_colors:\n                found_colors.add(cell)\n    return sorted(list(found_colors))\n\ndef determine_output_width(grid, target_colors):\n   rows, cols = len(grid), len(grid[0])\n   for r in range(rows):\n       row_colors = set()\n       for cell in grid[r]:\n           if cell != 0:\n               row_colors.add(cell)\n       if len(row_colors) == 1 and len(row_colors.intersection(target_colors)) > 0:\n           return cols\n   return 1\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the defined rules.\n    \"\"\"\n    input_grid_np = np.array(input_grid)\n    target_colors = get_target_colors(input_grid_np)\n    output_height = len(target_colors)\n    output_width = determine_output_width(input_grid_np, target_colors)\n\n    output_grid = np.zeros((output_height, output_width), dtype=int)\n   \n    for i, color in enumerate(target_colors):\n      output_grid[i, :] = color\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3218,
    "candidates_token_count": 512,
    "total_token_count": 3730,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 5.350357,
  "response_file": "008-response.json"
}