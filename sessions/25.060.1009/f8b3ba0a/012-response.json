{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. **Identify Colored Regions:** Examine the input grid and identify all contiguous regions of the same color (excluding the background color 0).\n2.  **Select Columnar Colors**. Select the colors that appear in a single vertical column within the input.\n3. **Order colors:** Preserve the vertical order in the input.\n4.  **Output:** Create a vertical Nx1 grid, where N is the number of selected, ordered colors. List the selected colors in individual cells.\n\"\"\"\n\nimport numpy as np\n\ndef get_colored_regions(grid):\n    \"\"\"\n    Identifies contiguous regions of the same color (excluding 0) in the grid.\n    Returns a dictionary of colors and coordinates.\n    \"\"\"\n    visited = set()\n    regions = {}\n\n    rows, cols = grid.shape\n\n    def _explore_region(row, col, color, current_region):\n      if (row, col) in visited or not (0 <= row < rows and 0 <= col < cols) or grid[row, col] != color:\n        return\n      \n      visited.add((row, col))\n      current_region.append( (row, col) )\n      \n      _explore_region(row+1, col, color, current_region) # down\n      _explore_region(row-1, col, color, current_region) # up\n      _explore_region(row, col+1, color, current_region) # right\n      _explore_region(row, col-1, color, current_region) # left\n\n    for r in range(rows):\n        for c in range(cols):\n            color = grid[r, c]\n            if color != 0 and (r, c) not in visited:\n                current_region = []\n                _explore_region(r, c, color, current_region)\n                if color not in regions:\n                  regions[color] = []\n                regions[color].append(current_region)\n\n    return regions\n\ndef get_columnar_colors(grid):\n    \"\"\"Selects colors that form a single vertical column.\"\"\"\n    rows, cols = grid.shape\n    for col in range(cols):\n        column_colors = []\n        for row in range(rows):\n            color = grid[row, col]\n            if color != 0:\n                column_colors.append(color)\n        if column_colors: # only uses first non-empty column\n            return column_colors\n    return []\n\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid to output a vertical grid of unique colors.\n    \"\"\"\n    # Find colored regions (not strictly needed, but kept for potential future use)\n    # regions = get_colored_regions(input_grid) # keeping in case future need\n\n    # Get the order of colors from a single vertical column\n    ordered_colors = get_columnar_colors(input_grid)\n\n    # Create output grid\n    output_grid = np.array(ordered_colors).reshape(-1, 1)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4263,
    "candidates_token_count": 689,
    "total_token_count": 4952,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.778941,
  "response_file": "012-response.json"
}