{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Colored Regions:** Examine the input grid to find all distinct, contiguous regions of non-zero pixels (objects). Pixels connected only diagonally are *not* considered part of the same region.\n\n2.  **Locate Target Colors**: Within the identified objects, locate instances of yellow (4), red (2), and green (3). Note the color and the coordinates of the topmost, leftmost pixel of each of these colored objects.\n\n3. **Determine Output Size and Content**:\n    *   If the input grid contains a vertical line of yellow (4), red (2), and green (3) pixels in that order from top to bottom, create an output grid that has height equal to the number of colors, and width equal to the input. Fill each row of the output with the color and pad the rest with 0.\n    *   Otherwise, create a grid with height equal to the number of colors and 1 column. Fill each cell with the color.\n\n4.  **Order and Populate Output:** Arrange the found colors based on the row number of their topmost-leftmost pixel (ascending order). Populate the output grid based on derived logic.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"\n    Finds distinct colored regions (objects) in the grid.\n    \"\"\"\n    objects = []\n    visited = set()\n    rows, cols = grid.shape\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def dfs(r, c, color, current_object):\n        if (r, c) in visited or not is_valid(r, c) or grid[r, c] != color:\n            return\n        visited.add((r, c))\n        current_object.append((r, c))\n        # Explore adjacent cells (not diagonally)\n        dfs(r + 1, c, color, current_object)\n        dfs(r - 1, c, color, current_object)\n        dfs(r, c + 1, color, current_object)\n        dfs(r, c - 1, color, current_object)\n\n    for r in range(rows):\n        for c in range(cols):\n            if (r, c) not in visited and grid[r, c] != 0:\n                current_object = []\n                dfs(r, c, grid[r, c], current_object)\n                objects.append((grid[r,c],current_object)) # Store color and the object\n    return objects\n\ndef check_vertical_stack(grid, target_colors):\n    \"\"\"\n    Checks if the grid contains a vertical stack of the target colors.\n    \"\"\"\n    rows, cols = grid.shape\n    for c in range(cols):\n        stack_colors = []\n        for r in range(rows):\n            if grid[r,c] in target_colors:\n                stack_colors.append(grid[r,c])\n        if len(stack_colors) >= len(target_colors):\n             # check order\n             match = True\n             for i in range(len(target_colors)):\n                if len(stack_colors) > i and stack_colors[i] != target_colors[i]:\n                    match = False\n             if match: return True\n    return False\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the defined rules.\n    \"\"\"\n    input_grid_np = np.array(input_grid)\n    # Find distinct colored regions\n    objects = find_objects(input_grid_np)\n\n    # Extract specific colors and their row order\n    target_colors = [4, 2, 3]  # Yellow, Red, Green\n    found_colors = []\n\n    for color, obj_pixels in objects:\n        if color in target_colors:\n            topmost_row = min(pixel[0] for pixel in obj_pixels)\n            found_colors.append((topmost_row, color))\n\n    # sort the colors by row\n    found_colors.sort()\n    ordered_colors = [color for row, color in found_colors]\n\n    # Determine output size\n    if check_vertical_stack(input_grid_np, target_colors):\n        output_grid = np.zeros((len(ordered_colors), input_grid_np.shape[1]), dtype=int)\n        for i, color in enumerate(ordered_colors):\n            output_grid[i, :] = color  # Fill entire row\n    else:\n      output_grid = np.zeros((len(ordered_colors), 1), dtype=int)\n      for i in range(len(ordered_colors)):\n          output_grid[i,0] = ordered_colors[i]\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3915,
    "candidates_token_count": 1089,
    "total_token_count": 5004,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.904671,
  "response_file": "006-response.json"
}