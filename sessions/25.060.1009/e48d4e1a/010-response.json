{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Remove Gray:** Eliminate all gray (color 5) pixels from the input grid, replacing them with black (color 0) pixels.\n\n2.  **Identify Red Segments:** Identify all contiguous red (color 2) segments. A segment is a set of one or more adjacent red pixels in either a horizontal or vertical line.\n\n3.  **Calculate Shifts:** For each red segment:\n    *   Determine the segment's orientation (horizontal or vertical).\n    *   Determine the presence and position of gray pixels relative to each red segment.\n        *   If the segment is horizontal, calculate how many rows of gray pixels were *above* it in the input grid. This is the vertical shift amount.\n        *   If the segment is vertical, calculate how many columns of gray pixels were to the *left* of it in the input grid. This is the horizontal shift amount.\n\n4.  **Apply Shifts:** Create a copy of the grid *after* gray removal. For each red segment in this new grid, apply the calculated shift.\n    * Move horizontal segments *up* by their vertical shift amount.\n    * Move vertical segments *left* by their horizontal shift amount.\n5. **Preserve**: If a pixel is not grey and not a moved red segment, its value from the input is preserved in the output.\n\"\"\"\n\nimport numpy as np\n\ndef remove_color(grid, color):\n    \"\"\"Removes all pixels of a specified color from the grid.\"\"\"\n    return np.where(grid == color, 0, grid)\n\ndef find_red_segments(grid):\n    \"\"\"Identifies all contiguous red segments (horizontal or vertical).\"\"\"\n    rows, cols = grid.shape\n    segments = []\n    visited = np.zeros((rows, cols), dtype=bool)\n\n    def is_red(r, c):\n        return 0 <= r < rows and 0 <= c < cols and grid[r, c] == 2\n\n    def dfs(r, c, segment, orientation):\n        if not is_red(r, c) or visited[r, c]:\n            return\n        visited[r, c] = True\n        segment.append((r, c))\n\n        if orientation == 'horizontal':\n            dfs(r, c + 1, segment, orientation)  # Check right\n        elif orientation == 'vertical':\n            dfs(r + 1, c, segment, orientation)  # Check down\n\n    for r in range(rows):\n        for c in range(cols):\n            if is_red(r, c) and not visited[r, c]:\n                # Check horizontal first\n                if is_red(r, c + 1):\n                    segment = []\n                    dfs(r, c, segment, 'horizontal')\n                    segments.append({'coords': segment, 'orientation': 'horizontal'})\n                # Then check vertical\n                elif is_red(r + 1, c):\n                    segment = []\n                    dfs(r, c, segment, 'vertical')\n                    segments.append({'coords': segment, 'orientation': 'vertical'})\n                # if one pixel segment, add it.\n                else:\n                    segments.append({'coords': [(r,c)], 'orientation': 'single'})\n\n    return segments\n\ndef calculate_shift(grid, segment):\n    \"\"\"Calculates the shift amount for a red segment based on gray pixels.\"\"\"\n    rows, cols = grid.shape\n    coords = segment['coords']\n    orientation = segment['orientation']\n\n    if orientation == 'horizontal':\n        min_row = min(r for r, _ in coords)\n        shift_amount = 0\n        for r in range(min_row):\n            for c in range(cols):  # check full row, since grey can be anywhere\n               if grid[r,c] == 5:\n                    shift_amount +=1\n                    break # only count once per row\n\n        return shift_amount\n\n    elif orientation == 'vertical':\n        min_col = min(c for _, c in coords)\n        shift_amount = 0\n        for c in range(min_col):\n             for r in range(rows):   #check full column\n                if grid[r,c] == 5:\n                    shift_amount+=1\n                    break # only count once per col\n        return shift_amount\n    else: # single pixel segment\n        return 0\n\n\ndef transform(input_grid):\n    # Remove gray pixels\n    grid_no_gray = remove_color(input_grid, 5)\n\n    # initialize output_grid, preserving all non-grey pixels from input\n    output_grid = np.copy(input_grid)\n    rows, cols = output_grid.shape\n    for r in range(rows):\n      for c in range(cols):\n        if output_grid[r,c] != 5:\n          output_grid[r,c] = input_grid[r,c]\n        else:\n            output_grid[r,c] = 0 # remove grey\n\n\n    # Identify red segments\n    red_segments = find_red_segments(input_grid)\n\n    # Calculate and apply shifts\n    for segment in red_segments:\n        shift_amount = calculate_shift(input_grid, segment)\n        coords = segment['coords']\n        orientation = segment['orientation']\n\n\n        #clear old positions in output\n        for r, c in coords:\n            output_grid[r,c] = 0\n\n\n        if orientation == 'horizontal':\n            for r, c in coords:\n                new_r = r - shift_amount\n                if 0 <= new_r < rows: # Check new position\n                    output_grid[new_r, c] = 2\n\n        elif orientation == 'vertical':\n            for r, c in coords:\n                new_c = c - shift_amount\n                if 0 <= new_c < cols:  #check new position\n                    output_grid[r, new_c] = 2\n        else:  #single pixel\n            for r, c in coords:\n              output_grid[r,c] = 2 # no shift.\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4503,
    "candidates_token_count": 1383,
    "total_token_count": 5886,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 12.590679,
  "response_file": "010-response.json"
}