{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Green Shapes:** Locate all contiguous regions of green (3) pixels. These form the \"green shapes.\"\n\n2.  **Identify Red Pixels:** Locate all red (2) pixels that either inside a green object or adjacent to the green shapes.\n\n3.  **Extend Red Vertically:** For each identified red pixel, copy and extend the red color, but limited within the green shape, in the following way:\n      * If the red pixel is inside the green object, then we copy the entire column of green to red\n      * If the red pixel is outside the green object, then we copy the red color until a 2-pixel vertical segment of color 3 is encountered. If the current red color is in a column, we need to copy and extend the color horizontally, until a 2-pixel horizontal segment of color 3.\n\n4. The background pixels remains the same.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, color):\n    \"\"\"Finds contiguous regions of a specific color.\"\"\"\n    objects = []\n    visited = set()\n    rows, cols = grid.shape\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def dfs(r, c, current_object):\n        if (r, c) in visited or not is_valid(r, c) or grid[r, c] != color:\n            return\n        visited.add((r, c))\n        current_object.append((r, c))\n        for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            dfs(r + dr, c + dc, current_object)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == color and (r, c) not in visited:\n                current_object = []\n                dfs(r, c, current_object)\n                objects.append(current_object)\n    return objects\n\ndef is_adjacent(pixel, green_shape):\n    \"\"\"Checks if a pixel is adjacent to a green shape.\"\"\"\n    r, c = pixel\n    for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n        nr, nc = r + dr, c + dc\n        if (nr, nc) in green_shape:\n            return True\n    return False\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = output_grid.shape\n\n    # find green objects\n    green_objects = find_objects(input_grid, 3)\n    \n    # flatten list of green objects to one list of green pixels\n    green_pixels = []\n    for obj in green_objects:\n        green_pixels.extend(obj)\n\n\n    # find red pixels\n    red_pixels = [(r, c) for r in range(rows) for c in range(cols) if input_grid[r, c] == 2]\n\n    # extend red according to the rules.\n    for r, c in red_pixels:\n      if (r,c) in green_pixels:\n        # find the green object the pixel belongs to\n        current_green_object = None\n        for obj in green_objects:\n          if (r,c) in obj:\n            current_green_object = obj\n            break\n        # convert entire object to red\n        if current_green_object is not None:\n            for gr, gc in current_green_object:\n                output_grid[gr,gc] = 2\n      else:\n        # check whether pixel is adjacent\n        is_adj = False\n        for obj in green_objects:\n          if is_adjacent((r,c), obj):\n              is_adj = True\n              current_green_object = obj\n              break\n        \n        if is_adj:\n          # we extend vertically\n            for gr, gc in current_green_object:\n              if gc == c:\n                output_grid[gr, gc] = 2\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 9223,
    "candidates_token_count": 954,
    "total_token_count": 10177,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.176146,
  "response_file": "002-response.json"
}