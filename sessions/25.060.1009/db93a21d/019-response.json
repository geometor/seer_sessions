{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Find Maroon Rectangles:** Locate all rectangular shapes of maroon (9) color within the input grid.\n2.  **Outline Maroon Rectangles:** Draw a green (3) border around each of the maroon rectangles found in the previous step. The outline should extend one pixel beyond the edges of the original rectangle on all sides.\n3.  **Add Blue Rectangle:** Create a new blue (1) rectangle with a fixed height of 4 and width of 7, The top-left corner is located at row 3, column 2 (using 0-based indexing).\n4.  **Outline Blue Rectangle**: Draw a green border around the blue rectangle.\n5.  **Fill Adjacent White:** Change the color of any white (0) pixels that are directly adjacent (up, down, left, or right) to a green (3) pixel to green (3).\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, color):\n    \"\"\"Finds rectangular objects of a specific color in the grid.\"\"\"\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n\n    def is_valid(x, y):\n        return 0 <= x < grid.shape[0] and 0 <= y < grid.shape[1]\n\n    def dfs(x, y, obj):\n        if not is_valid(x, y) or visited[x, y] or grid[x, y] != color:\n            return\n        visited[x, y] = True\n        obj.append((x, y))\n        dfs(x + 1, y, obj)\n        dfs(x - 1, y, obj)\n        dfs(x, y + 1, obj)\n        dfs(x, y - 1, obj)\n\n    for x in range(grid.shape[0]):\n        for y in range(grid.shape[1]):\n            if grid[x, y] == color and not visited[x, y]:\n                obj = []\n                dfs(x, y, obj)\n                # Determine if the found object is a rectangle, and get its boundaries.\n                if obj:\n                    xs, ys = zip(*obj)\n                    min_x, max_x = min(xs), max(xs)\n                    min_y, max_y = min(ys), max(ys)\n                    # Check if it is really a rectangle\n                    if all(grid[i,j] == color for i in range(min_x, max_x + 1) for j in range(min_y, max_y+1)):\n                        objects.append(((min_x, min_y), (max_x, max_y))) # Store as top-left and bottom-right corners\n    return objects\n\ndef outline_rectangle(grid, top_left, bottom_right, color):\n    \"\"\"Outlines a rectangle defined by top_left and bottom_right with the specified color.\"\"\"\n    min_x, min_y = top_left\n    max_x, max_y = bottom_right\n\n    # Top and bottom borders\n    for y in range(min_y - 1, max_y + 2):\n        if 0 <= min_x - 1 < grid.shape[0] and 0 <= y < grid.shape[1]:\n            grid[min_x - 1, y] = color\n        if 0 <= max_x + 1 < grid.shape[0] and 0 <= y < grid.shape[1]:\n            grid[max_x + 1, y] = color\n\n    # Left and right borders\n    for x in range(min_x, max_x + 1):\n        if 0 <= x < grid.shape[0] and 0 <= min_y - 1 < grid.shape[1]:\n            grid[x, min_y - 1] = color\n        if 0 <= x < grid.shape[0] and 0 <= max_y + 1 < grid.shape[1]:\n            grid[x, max_y + 1] = color\n\ndef add_new_rectangle(grid, top_left, size, color):\n   \"\"\"Adds a new rectangle to the grid.\"\"\"\n   width, height = size\n   start_x, start_y = top_left\n   for x in range(start_x, start_x + height):\n        for y in range(start_y, start_y + width):\n            if 0 <= x < grid.shape[0] and 0 <= y < grid.shape[1]:\n                grid[x,y] = color\n\ndef fill_adjacent(grid, color, target_color):\n    \"\"\"Fills pixels of target_color adjacent to 'color' with 'color'.\"\"\"\n    new_grid = grid.copy()  # Work on a copy to avoid modifying during iteration\n    for x in range(grid.shape[0]):\n        for y in range(grid.shape[1]):\n            if grid[x,y] == target_color:\n                # Check neighbors\n                for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                    nx, ny = x + dx, y + dy\n                    if 0 <= nx < grid.shape[0] and 0 <= ny < grid.shape[1] and grid[nx, ny] == color:\n                        new_grid[x, y] = color\n                        break  # Only fill once per cell\n    return new_grid\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = input_grid.copy()\n\n    # 1. Find Maroon Rectangles\n    maroon_rectangles = find_objects(output_grid, 9)\n\n    # 2. Outline Maroon Rectangles\n    for top_left, bottom_right in maroon_rectangles:\n        outline_rectangle(output_grid, top_left, bottom_right, 3)\n\n    # 3. Add Blue Rectangle\n    add_new_rectangle(output_grid, (2, 1), (4, 7), 1)\n\n    # 4. Outline Blue Rectangle\n    blue_rectangles = find_objects(output_grid, 1)\n    for top_left, bottom_right in blue_rectangles:\n        outline_rectangle(output_grid, top_left, bottom_right, 3)\n\n\n    # 5. Fill Adjacent White\n    output_grid = fill_adjacent(output_grid, 3, 0)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7819,
    "candidates_token_count": 1485,
    "total_token_count": 9304,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.762423,
  "response_file": "019-response.json"
}