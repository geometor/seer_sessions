import numpy as np

def describe_grid(grid):
    """Provides a concise description of a grid."""
    unique, counts = np.unique(grid, return_counts=True)
    color_counts = dict(zip(unique, counts))
    description = ", ".join(f"{count} {color}" for color, count in color_counts.items())
    return f"Grid ({grid.shape[0]}x{grid.shape[1]}): {description}"
    
def compare_grids(grid1, grid2):
    """Compares two grids and highlights differences."""

    if grid1.shape != grid2.shape:
        return "Different Shapes"
    
    diff = grid1 != grid2
    if np.any(diff):
        diff_coords = np.transpose(np.nonzero(diff))
        return f"Differences at: {diff_coords}"
    return "Identical"

examples = [
    {
        "input": np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 9, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
        "output": np.array([[3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
                           [3, 1, 1, 1, 1, 1, 1, 1, 1, 3],
                           [3, 1, 1, 1, 1, 1, 1, 1, 1, 3],
                           [3, 1, 1, 3, 1, 1, 1, 1, 1, 3],
                           [3, 1, 1, 1, 1, 1, 1, 1, 1, 3],
                           [3, 1, 1, 1, 1, 1, 1, 1, 1, 3],
                           [3, 1, 1, 1, 1, 1, 1, 1, 1, 3],
                           [3, 1, 1, 1, 1, 1, 1, 1, 1, 3],
                           [3, 1, 1, 1, 1, 1, 1, 1, 1, 3],
                           [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]]),
    },
     {
        "input": np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 9, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
        "output": np.array([[3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
                            [3, 1, 1, 1, 1, 1, 1, 1, 1, 3],
                            [3, 1, 1, 1, 1, 1, 1, 1, 1, 3],
                            [3, 1, 1, 1, 1, 1, 1, 1, 1, 3],
                            [3, 1, 1, 1, 3, 1, 1, 1, 1, 3],
                            [3, 1, 1, 1, 1, 1, 1, 1, 1, 3],
                            [3, 1, 1, 1, 1, 1, 1, 1, 1, 3],
                            [3, 1, 1, 1, 1, 1, 1, 1, 1, 3],
                            [3, 1, 1, 1, 1, 1, 1, 1, 1, 3],
                            [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]]),
    },
    {
        "input": np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 9, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
        "output": np.array([[3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
                            [3, 1, 1, 1, 1, 1, 1, 1, 1, 3],
                            [3, 1, 1, 1, 1, 1, 1, 1, 1, 3],
                            [3, 1, 1, 1, 1, 1, 1, 1, 1, 3],
                            [3, 1, 1, 1, 1, 1, 1, 1, 1, 3],
                            [3, 1, 1, 1, 1, 3, 1, 1, 1, 3],
                            [3, 1, 1, 1, 1, 1, 1, 1, 1, 3],
                            [3, 1, 1, 1, 1, 1, 1, 1, 1, 3],
                            [3, 1, 1, 1, 1, 1, 1, 1, 1, 3],
                            [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]]),
    },
   
]

from previous_code import transform

for i, example in enumerate(examples):
  input_grid = example["input"]
  expected_output = example["output"]
  actual_output = transform(input_grid)
  print(f"Example {i+1}:")
  print(f"  Input: {describe_grid(input_grid)}")
  print(f"  Expected Output: {describe_grid(expected_output)}")
  print(f"  Actual Output: {describe_grid(actual_output)}")
  print(f"  Comparison: {compare_grids(expected_output, actual_output)}")
  print("-" * 40)