{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. Expand White Edge: Find all white (0) pixels on the edge of the grid and change them to green (3).\n2. Identify Maroon Objects: Locate all objects (contiguous regions) of color 9 (maroon) in the input grid.\n3. Expand Maroon Objects: Expand each maroon object by one layer, adding a green (3) outline to any adjacent white (0) pixels.\n4. Flood Fill Enclosed Area: Find any area completely enclosed by green (3) and flood fill that area with blue (1).\n\"\"\"\n\nimport numpy as np\n\ndef expand_white_edge(grid):\n    # Expand white cells adjacent to any edge and convert them to green\n    output_grid = np.copy(grid)\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == 0:\n                if r == 0 or r == rows - 1 or c == 0 or c == cols - 1:\n                    output_grid[r, c] = 3\n    return output_grid\n\ndef find_objects(grid, color):\n    # Find contiguous regions of the specified color.\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n\n    def dfs(row, col):\n        if (row < 0 or row >= grid.shape[0] or col < 0 or col >= grid.shape[1] or\n                visited[row, col] or grid[row, col] != color):\n            return []\n\n        visited[row, col] = True\n        region = [(row, col)]\n\n        region.extend(dfs(row + 1, col))\n        region.extend(dfs(row - 1, col))\n        region.extend(dfs(row, col + 1))\n        region.extend(dfs(row, col - 1))\n        return region\n\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] == color and not visited[r, c]:\n                objects.append(dfs(r, c))\n    return objects\n\ndef expand_region(grid, region, expansion_color):\n    # Expand the region by one layer, adding an outline on white pixels with expansion color\n    expanded_region = set(region)\n    output_grid = np.copy(grid)\n\n    for r, c in region:\n        neighbors = [(r + 1, c), (r - 1, c), (r, c + 1), (r, c - 1)]\n        for nr, nc in neighbors:\n            if (0 <= nr < grid.shape[0] and 0 <= nc < grid.shape[1] and\n                    grid[nr, nc] == 0):\n                expanded_region.add((nr, nc))\n                output_grid[nr, nc] = expansion_color\n    return list(expanded_region), output_grid\n\ndef flood_fill(grid, start_row, start_col, fill_color):\n    \"\"\"Fills a bounded region with the specified color.\"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    stack = [(start_row, start_col)]\n    original_color = grid[start_row, start_col]\n    \n    if original_color == fill_color:\n        return grid\n\n    output_grid = np.copy(grid)\n\n    while stack:\n        r, c = stack.pop()\n        if r < 0 or r >= rows or c < 0 or c >= cols or visited[r, c] or output_grid[r,c] != original_color:\n            continue\n        \n        visited[r, c] = True\n        output_grid[r,c] = fill_color\n        \n        stack.append((r + 1, c))\n        stack.append((r - 1, c))\n        stack.append((r, c + 1))\n        stack.append((r, c - 1))\n    return output_grid\n    \ndef find_enclosed_area_and_fill(grid, boundary_color, fill_color):\n    rows, cols = grid.shape\n    output_grid = np.copy(grid)\n\n    def is_enclosed(r, c, visited):\n      # check if the cell can reach edge\n        if (r <= 0 or r >= rows - 1 or c <= 0 or c >= cols - 1):\n            return False\n\n        visited.add((r,c))\n        neighbors = [(r+1, c), (r-1, c), (r, c+1), (r, c-1)]\n        for nr, nc in neighbors:\n            if (nr, nc) not in visited:\n                if output_grid[nr, nc] != boundary_color:\n                    if not is_enclosed(nr, nc, visited):\n                       return False\n\n        return True\n\n\n    for r in range(1, rows-1):\n        for c in range(1, cols-1):\n            if grid[r,c] != boundary_color and grid[r,c] != fill_color:\n                visited = set()\n                if is_enclosed(r, c, visited):\n                   output_grid = flood_fill(output_grid, r, c, fill_color)\n\n    return output_grid\n\ndef transform(input_grid):\n    # 1. Expand White Edge\n    output_grid = expand_white_edge(input_grid)\n\n    # 2. Identify Maroon Regions\n    maroon_regions = find_objects(output_grid, 9)  # Find maroon objects *after* edge expansion\n\n    # 3. Expand Maroon Regions\n    for region in maroon_regions:\n        _, output_grid = expand_region(output_grid, region, 3) # Expand using the modified grid\n\n    # 4. Flood fill enclosed area\n    output_grid = find_enclosed_area_and_fill(output_grid, 3, 1)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5220,
    "candidates_token_count": 1407,
    "total_token_count": 6627,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 12.007885,
  "response_file": "014-response.json"
}