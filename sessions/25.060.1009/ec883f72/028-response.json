{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. Identify all objects in the input grid. An object is a contiguous region of non-zero pixels of the same color.\n2. For each object in the input grid:\n    - If the object's color is 2, move it to the top of the output grid, aligning its leftmost column with its original position.\n    - If the object's color is not 2, keep it in the same place.\n3. All other pixels in the output grid should be 0.\n\"\"\"\n\nimport numpy as np\nfrom typing import List, Dict\n\ndef get_objects(grid: np.ndarray) -> List[Dict]:\n    \"\"\"Identifies distinct objects within a grid.\"\"\"\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n\n    def get_neighbors(r, c):\n        neighbors = []\n        for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < grid.shape[0] and 0 <= nc < grid.shape[1]:\n                neighbors.append((nr, nc))\n        return neighbors\n    \n    def bfs(start_row, start_col, color):\n        queue = [(start_row, start_col)]\n        visited[start_row, start_col] = True\n        min_row, min_col = start_row, start_col\n        max_row, max_col = start_row, start_col\n        coords = []\n\n        while queue:\n            row, col = queue.pop(0)\n            coords.append((row,col))\n            min_row = min(min_row, row)\n            min_col = min(min_col, col)\n            max_row = max(max_row, row)\n            max_col = max(max_col, col)\n\n            for nr, nc in get_neighbors(row, col):\n                if not visited[nr, nc] and grid[nr, nc] == color:\n                    visited[nr, nc] = True\n                    queue.append((nr, nc))\n        return {\n            \"color\": int(color),\n            \"min_row\": int(min_row),\n            \"min_col\": int(min_col),\n            \"max_row\": int(max_row),\n            \"max_col\": int(max_col),\n            \"coords\": coords,\n        }\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if not visited[row, col] and grid[row, col] != 0:\n                objects.append(bfs(row, col, grid[row, col]))\n    return objects\n\ndef transform(input_grid):\n    # Initialize output grid.\n    output_grid = np.zeros_like(input_grid)\n\n    # Get all objects in input\n    input_objects = get_objects(input_grid)\n\n    # Iterate over input objects\n    for obj in input_objects:\n      if obj[\"color\"] == 2:\n        # move to top\n        height = obj[\"max_row\"] - obj[\"min_row\"] + 1\n        width = obj[\"max_col\"] - obj[\"min_col\"] + 1\n        output_grid[0:height, obj[\"min_col\"]:obj[\"min_col\"]+width] = obj[\"color\"]\n      else:\n        # keep at same place\n        output_grid[obj[\"min_row\"]:obj[\"max_row\"]+1, obj[\"min_col\"]:obj[\"max_col\"]+1] = obj[\"color\"]\n        \n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 9953,
    "candidates_token_count": 857,
    "total_token_count": 10810,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.215776,
  "response_file": "028-response.json"
}