{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Find each contiguous region of non-background (non-zero) colored pixels. Consider each of these an \"object\".\n2.  **Find Boundary Pixels:** For the all objects combined, consider only the pixels that are adjacent to the background (value 0).\n3.  **Expansion:** Replace all background pixels (value 0) that are adjacent to any object with the color of the object it is adjacent to.\n4. The output grid will be the same size as the input grid.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"Finds contiguous regions of non-background pixels.\"\"\"\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n\n    def dfs(row, col, color, obj_pixels):\n        if (row < 0 or row >= grid.shape[0] or col < 0 or col >= grid.shape[1] or\n                visited[row, col] or grid[row, col] != color):\n            return\n        visited[row, col] = True\n        obj_pixels.append((row, col))\n        dfs(row + 1, col, color, obj_pixels)\n        dfs(row - 1, col, color, obj_pixels)\n        dfs(row, col + 1, color, obj_pixels)\n        dfs(row, col - 1, color, obj_pixels)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] != 0 and not visited[row, col]:\n                obj_pixels = []\n                dfs(row, col, grid[row, col], obj_pixels)\n                objects.append(obj_pixels)\n    return objects\n\ndef find_boundary_pixels(grid, objects):\n    \"\"\"Finds pixels adjacent to the background for all objects.\"\"\"\n    boundary_pixels = []\n    for obj in objects:\n        for row, col in obj:\n            neighbors = [(row + 1, col), (row - 1, col), (row, col + 1), (row, col - 1)]\n            for nr, nc in neighbors:\n                if 0 <= nr < grid.shape[0] and 0 <= nc < grid.shape[1] and grid[nr, nc] == 0:\n                    boundary_pixels.append( (row,col) ) #append the object pixel\n                    break  # Move to the next pixel in the object\n    return boundary_pixels\n\ndef transform(input_grid):\n    # initialize output_grid\n    grid = np.array(input_grid)\n    output_grid = grid.copy()\n\n    # Find objects\n    objects = find_objects(grid)\n\n    # Find boundary pixels\n    boundary_pixels = find_boundary_pixels(grid, objects)\n    \n    #change output pixels - expansion\n    for r, c in boundary_pixels:\n        neighbors = [(r + 1, c), (r - 1, c), (r, c + 1), (r, c - 1)]\n        for nr, nc in neighbors:\n            if 0 <= nr < grid.shape[0] and 0 <= nc < grid.shape[1] and grid[nr,nc] == 0:\n                output_grid[nr,nc] = grid[r,c]\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3195,
    "candidates_token_count": 782,
    "total_token_count": 3977,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.273031,
  "response_file": "004-response.json"
}