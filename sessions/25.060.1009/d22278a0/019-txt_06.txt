import numpy as np

def calculate_accuracy(predicted_grid, output_grid):
    """Calculates pixel-wise accuracy between two grids."""
    if predicted_grid.shape != output_grid.shape:
        return 0  # Return 0 if shapes are different
    correct_pixels = np.sum(predicted_grid == output_grid)
    total_pixels = predicted_grid.size
    return correct_pixels / total_pixels if total_pixels > 0 else 0

def calculate_difference_metrics(predicted_grid, output_grid):
    """Calculates metrics on the differences between two grids."""
    if predicted_grid.shape != output_grid.shape:
        return {
            "added_pixels": -1,
            "removed_pixels": -1,
            "changed_pixels": -1
        }

    added_pixels = np.sum((predicted_grid != 0) & (output_grid == 0))
    removed_pixels = np.sum((predicted_grid == 0) & (output_grid != 0))
    changed_pixels = np.sum((predicted_grid != output_grid) & (output_grid !=0) & (predicted_grid != 0))

    return {
        "added_pixels": added_pixels,
        "removed_pixels": removed_pixels,
        "changed_pixels": changed_pixels,
    }

def compare_results(predicted_outputs, train_pairs):
    results = []
    for i, ((input_grid, output_grid), predicted_output) in enumerate(zip(train_pairs, predicted_outputs)):

        accuracy = calculate_accuracy(predicted_output, output_grid)
        difference_metrics = calculate_difference_metrics(predicted_output, output_grid)

        results.append({
            "example": i,
            "accuracy": accuracy,
            "added_pixels": difference_metrics["added_pixels"],
            "removed_pixels": difference_metrics["removed_pixels"],
            "changed_pixels": difference_metrics["changed_pixels"],
        })
    return results
train = task.train
predicted_outputs = [transform(np.array(pair[0])) for pair in train]
comparison_results = compare_results(predicted_outputs, train)
print(comparison_results)