import numpy as np

def compare_outputs(example_inputs, example_outputs, transform_function):
    results = []
    for i, (input_grid, expected_output) in enumerate(zip(example_inputs, example_outputs)):
        actual_output = transform_function(input_grid)
        input_grid = np.array(input_grid)
        expected_output = np.array(expected_output)
        
        #check if type is the same
        if(type(actual_output) != type(expected_output)):
            print("Type mismatch")
            continue

        dims_match = actual_output.shape == expected_output.shape
        pixel_diffs = []
        if dims_match:
            for r in range(expected_output.shape[0]):
                for c in range(expected_output.shape[1]):
                    if actual_output[r, c] != expected_output[r, c]:
                        pixel_diffs.append(((r, c), actual_output[r, c], expected_output[r, c]))
        
        row_colors = []        
        if actual_output.shape[0] > 0: #check that there are rows.
            for r in range(input_grid.shape[0]):
                row_colors.append(list(np.unique(input_grid[r])))


        results.append({
            "example_index": i,
            "input_dims": input_grid.shape,
            "expected_dims": expected_output.shape,
            "actual_dims": actual_output.shape,
            "dims_match": dims_match,
            "pixel_diffs": pixel_diffs,
            "input_row_colors": row_colors
        })
    return results

# Example Usage (replace with actual task data):
task_data = task["train"]
example_inputs = [example["input"] for example in task_data]
example_outputs = [example["output"] for example in task_data]

comparison_results = compare_outputs(example_inputs, example_outputs, transform)
print(comparison_results)