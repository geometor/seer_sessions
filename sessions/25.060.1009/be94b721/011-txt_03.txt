import numpy as np

# Provided code (slightly modified for easier use in this context)
def find_object(grid, color):
    coords = np.argwhere(grid == color)
    return coords

def bounding_box(coords):
    min_row = np.min(coords[:, 0])
    max_row = np.max(coords[:, 0])
    min_col = np.min(coords[:, 1])
    max_col = np.max(coords[:, 1])
    return (min_row, max_row, min_col, max_col)

def transform(input_grid):
    input_grid = np.array(input_grid)
    yellow_coords = find_object(input_grid, 4)
    if len(yellow_coords) == 0:
        return [[]]
    min_row, max_row, min_col, max_col = bounding_box(yellow_coords)
    height = max_row - min_row + 1
    width = max_col - min_col + 1
    output_grid = np.full((height, width), 4)
    return output_grid.tolist()

# Example data (replace with actual task data)
train_examples = [
    {
        "input": [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 0], [0, 0, 4, 4, 4, 0], [0, 0, 0, 0, 0, 0]],
        "output": [[4, 4, 4], [4, 4, 4]]
    },
    {
        "input": [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]],
        "output": [[4], [4], [4]]
    },
    {
        "input": [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]],
        "output": [[4, 4, 4, 4]]
    },
     {
        "input": [[0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 4, 4, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0]],
        "output": [[4, 4, 4, 4, 4, 4]]
    },
]

for i, example in enumerate(train_examples):
    input_grid = example['input']
    expected_output = example['output']
    predicted_output = transform(input_grid)
    correct = predicted_output == expected_output
    print(f"Example {i+1}:")
    print(f"  Input:\n{np.array(input_grid)}")
    print(f"  Expected Output:\n{np.array(expected_output)}")
    print(f"  Predicted Output:\n{np.array(predicted_output)}")
    print(f"  Correct: {correct}")
    if not correct:
        yellow_coords = find_object(np.array(input_grid), 4)
        print(f"  Yellow Object Bounding Box: {bounding_box(yellow_coords) if len(yellow_coords) > 0 else 'No yellow object'}")
