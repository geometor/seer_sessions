import numpy as np

def analyze_blue_region(grid):
    blue_pixels = np.argwhere(grid == 1)
    if blue_pixels.size == 0:
        return (0, 0)
    min_row, min_col = np.min(blue_pixels, axis=0)
    max_row, max_col = np.max(blue_pixels, axis=0)
    height = max_row - min_row + 1
    width = max_col - min_col + 1
    return (height, width)

# Hypothetical training data (replace with actual data)
train_pairs = [
    {
        "input": np.array([[0, 0, 0], [0, 1, 0], [0, 0, 0]]),
        "output": np.array([[1]])
    },
    {
        "input": np.array([[0, 0, 0], [0, 1, 1], [0, 0, 0]]),
        "output": np.array([[1, 1]])
    },
    {
        "input": np.array([[0, 0, 0], [0, 1, 1], [0, 1, 1]]),
        "output": np.array([[1, 1], [1, 1]])
    },
     {
        "input": np.array([[0, 1, 0], [0, 1, 0], [0, 1, 0]]),
        "output": np.array([[1], [1], [1]])
    },
    {
        "input": np.array([[0, 0, 0, 0], [0, 1, 1, 0], [0, 1, 1, 0], [0, 0, 0, 0]]),
        "output": np.array([[1, 1], [1, 1]])
    }
]

results = []
for i, pair in enumerate(train_pairs):
    input_dims = analyze_blue_region(pair["input"])
    output_dims = analyze_blue_region(pair["output"])
    results.append({
        "example": i + 1,
        "input_blue_dims": input_dims,
        "output_blue_dims": output_dims
    })

print(results)