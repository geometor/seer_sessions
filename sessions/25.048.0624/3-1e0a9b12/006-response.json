{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "*text:*\n```python\n\"\"\"\nTransformation Rule:\n\n1. Identify all non-zero colored cells in the input grid.\n2. Move these cells to the last available row of the output grid, except those in row 2.\n3. Maintain the original column index of each cell during the move.\n4. Copy row 2 from input to output.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by moving all non-zero colored cells\n    to the last available row, preserving their original column positions,\n    and copying row 2 from the input grid to the output grid.\n    \"\"\"\n    input_grid = np.array(input_grid)\n    output_grid = np.zeros_like(input_grid)\n    rows, cols = input_grid.shape\n\n    # Find all non-zero cells and their column indices\n    non_zero_cells = []\n    for c in range(cols):\n        for r in range(rows):\n            if input_grid[r, c] != 0:\n                non_zero_cells.append((r, c, input_grid[r, c]))\n\n    # Create a dictionary to track the next available row for each column\n    next_available_row = {col: rows - 1 for col in range(cols)}\n\n    # Iterate through non-zero cells and place them in the output grid\n    for r, c, value in non_zero_cells:\n      if r != 2:\n        output_grid[next_available_row[c], c] = value\n        next_available_row[c] -= 1\n      \n    # Copy row 2\n    output_grid[2,:] = input_grid[2,:]\n\n    return output_grid.tolist()\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5514,
    "candidates_token_count": 404,
    "total_token_count": 5918,
    "cached_content_token_count": 0
  },
  "token_totals": {
    "prompt": 60421,
    "candidates": 10224,
    "total": 70645,
    "cached": 0
  },
  "timing": {
    "response_time": 0.000118,
    "total_elapsed": 123.4215,
    "response_times": [
      0.000484,
      0.000118,
      0.000285,
      0.000122,
      0.000316,
      0.000119,
      0.000384,
      0.000115,
      0.00028,
      0.000117,
      0.000344,
      0.000121,
      0.000314,
      0.000119,
      0.000288,
      0.000118
    ]
  }
}