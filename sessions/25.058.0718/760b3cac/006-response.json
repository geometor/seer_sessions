{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Locate all contiguous regions (objects) of yellow (color 4) and azure (color 8) pixels in the input grid.\n2.  **Preserve Yellow:** Maintain the position and shape of the yellow object(s) in the output grid.\n3.  **Stack Azure Above:** Stack the azure-colored objects *at the top of the output grid*. Maintain the original horizontal (column) position of each azure object. Stack them from top to bottom, with the objects that were originally highest being placed at the very top. If two azure objects were on the same row of the input, place the left-most object on top of the other.\n4.  **Empty Remainder:** Fill all remaining cells in the grid with black (color 0).\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, color):\n    \"\"\"Finds contiguous blocks of a specified color in the grid.\"\"\"\n    visited = set()\n    objects = []\n\n    def dfs(r, c, current_object):\n        \"\"\"Depth-First Search to find contiguous pixels.\"\"\"\n        if (r, c) in visited or not (0 <= r < grid.shape[0] and 0 <= c < grid.shape[1]) or grid[r, c] != color:\n            return\n        visited.add((r, c))\n        current_object.append((r, c))\n        dfs(r + 1, c, current_object)\n        dfs(r - 1, c, current_object)\n        dfs(r, c + 1, current_object)\n        dfs(r, c - 1, current_object)\n\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] == color and (r, c) not in visited:\n                current_object = []\n                dfs(r, c, current_object)\n                objects.append(current_object)\n    return objects\n\ndef get_object_properties(obj):\n    \"\"\"Calculates properties of an object.\"\"\"\n    min_row = min(r for r, c in obj)\n    max_row = max(r for r, c in obj)\n    min_col = min(c for r, c in obj)\n    max_col = max(c for r, c in obj)\n    width = max_col - min_col + 1\n    height = max_row - min_row + 1\n    return (min_row, min_col), (max_row, max_col), width, height\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the described rule.\"\"\"\n    # Initialize output_grid as all black\n    output_grid = np.zeros_like(input_grid)\n\n    # Find yellow and azure objects\n    yellow_objects = find_objects(input_grid, 4)\n    azure_objects = find_objects(input_grid, 8)\n\n    # Preserve yellow objects\n    for obj in yellow_objects:\n        for r, c in obj:\n            output_grid[r, c] = 4\n\n    # get properties for the azure objects and sort by row, then by column\n    azure_object_props = []\n    for obj in azure_objects:\n      azure_object_props.append(get_object_properties(obj))\n    \n    azure_object_props.sort(key=lambda x: (x[0][0], x[0][1])) # Sort by row, then column\n\n    # Stack azure objects at the top, maintaining original column and stacking order\n    current_row = 0\n    \n    for top_left, bottom_right, width, height in azure_object_props:\n        for r in range(height):\n            for c in range(width):\n                output_grid[current_row + r, top_left[1] + c] = 8  # Use original column (top_left[1])\n        current_row += height\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3062,
    "candidates_token_count": 917,
    "total_token_count": 3979,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.917782,
  "response_file": "006-response.json"
}