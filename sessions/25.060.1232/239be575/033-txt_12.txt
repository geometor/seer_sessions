import numpy as np

def analyze_example(input_grid, expected_output, actual_output):
    """
    Analyzes a single example and returns relevant information.
    """
    input_grid = np.array(input_grid)
    expected_output = np.array(expected_output)
    actual_output = np.array(actual_output)

    analysis = {
        "input_shape": input_grid.shape,
        "red_pixel_location": None,
        "azure_frame_present": False,
        "expected_output": expected_output.tolist(),
        "actual_output": actual_output.tolist(),
        "correct": np.array_equal(expected_output, actual_output)
    }

    # Find red pixel location
    red_pixel_indices = np.where(input_grid == 2)
    if len(red_pixel_indices[0]) > 0:
        analysis["red_pixel_location"] = list(zip(red_pixel_indices[0].tolist(), red_pixel_indices[1].tolist()))

    # Check for azure frame (assuming it's a border of 8s)
    if input_grid.ndim == 2: # avoid error on 1x1 grid
      if (np.all(input_grid[0, :] == 8) and np.all(input_grid[-1, :] == 8) and
            np.all(input_grid[:, 0] == 8) and np.all(input_grid[:, -1] == 8)):
          analysis["azure_frame_present"] = True

    return analysis

examples = [
    ([[8, 8, 8, 8, 8, 8, 8, 8], [8, 0, 0, 0, 0, 0, 0, 8], [8, 0, 0, 0, 2, 0, 0, 8], [8, 0, 0, 0, 0, 0, 0, 8], [8, 8, 8, 8, 8, 8, 8, 8]], [[8]]),
    ([[8, 8, 8, 8, 8, 8, 8, 8], [8, 0, 0, 0, 0, 0, 0, 8], [8, 0, 0, 2, 0, 0, 0, 8], [8, 0, 0, 0, 0, 0, 0, 8], [8, 8, 8, 8, 8, 8, 8, 8]], [[6]]),
    ([[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 0]], [[2]]),
    ([[8, 8, 8, 8, 8], [8, 0, 0, 8, 8], [8, 0, 2, 8, 8], [8, 0, 0, 0, 8], [8, 8, 8, 8, 8]], [[4]]),
]

results = []
for input_grid, expected_output in examples:
  actual_output = transform(input_grid)
  results.append(analyze_example(input_grid, expected_output, actual_output))

for i, result in enumerate(results):
    print(f"Example {i+1}:")
    print(result)