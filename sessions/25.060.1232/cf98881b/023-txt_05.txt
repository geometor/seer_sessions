import numpy as np

def find_upper_right_corner(grid):
    # Iterate through rows from top to bottom
    for r_idx, row in enumerate(grid):
        # Iterate through columns from right to left
        for c_idx in range(len(row) - 1, -1, -1):
            if row[c_idx] != 0:
                return (r_idx, c_idx)
    return None  # Should not happen in valid cases, but handle for safety

def transform(input_grid):
    """
    Extracts a 4x4 subgrid.
    """
    input_grid = np.array(input_grid)
    rows, cols = input_grid.shape

    # Find the upper-right corner of the subgrid
    corner = find_upper_right_corner(input_grid)

    if corner is None:
        return [[]] # Return Empty grid.

    r_start, c_start = corner
    
    # Calculate subgrid boundaries.
    r_end = r_start + 4
    c_end = c_start + 1 # we identified this is incorrect

    # Ensure we don't exceed the original grid boundaries.
    if r_end > rows or c_end > cols:
          return [[]]

    # Extract Subgrid
    # offset the columns by 3 - making subgrid size 4x4
    output_grid = input_grid[r_start:r_end, c_start - 3:c_end]
    
    return output_grid.tolist()

task = {
    "train": [
        {
            "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9], [0, 0, 0, 0, 0, 0, 0, 9, 9], [0, 0, 0, 0, 0, 0, 0, 9, 9], [0, 0, 0, 0, 0, 0, 0, 0, 0]],
            "output": [[0, 0, 0, 0], [0, 0, 0, 9], [0, 0, 9, 9], [0, 0, 9, 9]],
        },
        {
            "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 5], [0, 0, 0, 0, 0, 0, 0, 5, 5], [0, 0, 0, 0, 0, 0, 0, 5, 5]],
            "output": [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 5], [0, 0, 5, 5]],
        },
        {
            "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 2, 2], [0, 0, 0, 0, 0, 0, 0, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0]],
            "output": [[0, 0, 0, 0], [0, 0, 0, 2], [0, 0, 2, 2], [0, 0, 2, 2]],
        },
    ],
    "test": [
        {
            "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 8], [0, 0, 0, 0, 0, 0, 0, 8, 8], [0, 0, 0, 0, 0, 0, 0, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0]],
            "output": [[0, 0, 0, 0], [0, 0, 0, 8], [0, 0, 8, 8], [0, 0, 8, 8]],
        }
    ],
}

results = []
for example in task["train"]:
    input_grid = example["input"]
    expected_output = example["output"]
    actual_output = transform(input_grid)
    results.append(
        {
            "input": input_grid,
            "expected": expected_output,
            "actual": actual_output,
            "correct": actual_output == expected_output,
        }
    )

for result in results:
    print(f"Input: {result['input']}")
    print(f"Expected Output: {result['expected']}")
    print(f"Actual Output: {result['actual']}")
    print(f"Correct: {result['correct']}")
    print("-" * 20)

def find_upper_left_corner(grid):
    grid = np.array(grid)
    rows, cols = grid.shape
    for r in range(rows):
        for c in range(cols):
            if grid[r, c] != 0:
                return (r, c)
    return None
upper_left_results = []
for example in task["train"]:
    input_grid = example["input"]
    corner = find_upper_left_corner(input_grid)
    upper_left_results.append(corner)
print(f"upper_left_results: {upper_left_results}")