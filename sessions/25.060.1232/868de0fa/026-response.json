{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Blue Regions:** Find all distinct connected regions of blue (1) pixels in the input grid. Two blue pixels are considered connected if they are adjacent horizontally or vertically.\n\n2.  **Classify and Recolor Blue Regions:**\n    *   For each blue region:\n        *   Calculate the region's bounding box (the smallest rectangle enclosing the region).\n        *   Count the number of pixels within the region.\n        *   **L-Shaped Regions:** A blue region is considered \"L-shaped\" if the total number of blue pixels is strictly less than the product of the width and height of its bounding box, and it contains more than one pixel. Recolor these regions to orange (7).\n        *   **Rectangular Regions:** A blue region is considered \"rectangular\" if the total number of blue pixels is equal to the product of the width and height of its bounding box. Recolor these to red (2).\n        *  **Other Regions** Any region not meeting the definition of L-Shaped or Rectangular remains blue.\n\n3.  **Preserve Background:** All white (0) pixels in the input grid remain unchanged in the output grid.\n\"\"\"\n\nimport numpy as np\n\ndef find_connected_regions(grid, color):\n    \"\"\"Finds connected regions of a specific color in a grid.\"\"\"\n    visited = np.zeros_like(grid, dtype=bool)\n    regions = []\n\n    def dfs(row, col, current_region):\n        \"\"\"Depth-first search to explore a connected region.\"\"\"\n        if (\n            row < 0\n            or row >= grid.shape[0]\n            or col < 0\n            or col >= grid.shape[1]\n            or visited[row, col]\n            or grid[row, col] != color\n        ):\n            return\n\n        visited[row, col] = True\n        current_region.append((row, col))\n\n        # Explore adjacent cells\n        dfs(row + 1, col, current_region)\n        dfs(row - 1, col, current_region)\n        dfs(row, col + 1, current_region)\n        dfs(row, col - 1, current_region)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] == color and not visited[row, col]:\n                current_region = []\n                dfs(row, col, current_region)\n                regions.append(current_region)\n\n    return regions\n\ndef get_bounding_box(region):\n    \"\"\"Calculates the bounding box of a region.\"\"\"\n    min_row = min(r for r, _ in region)\n    max_row = max(r for r, _ in region)\n    min_col = min(c for _, c in region)\n    max_col = max(c for _, c in region)\n    return min_row, max_row, min_col, max_col\n\ndef is_l_shaped(region, grid):\n    \"\"\"Checks if a region is L-shaped (refined).\"\"\"\n    if len(region) <= 1:  # Exclude single-pixel regions\n        return False\n\n    min_row, max_row, min_col, max_col = get_bounding_box(region)\n    width = max_col - min_col + 1\n    height = max_row - min_row + 1\n    return len(region) < width * height\n\ndef is_rectangular(region, grid):\n    \"\"\"Checks if region is rectangular\"\"\"\n    min_row, max_row, min_col, max_col = get_bounding_box(region)\n    width = max_col - min_col + 1\n    height = max_row - min_row + 1\n    return len(region) == width * height\n\n\ndef transform(input_grid):\n    # Initialize output grid as a copy of the input grid\n    output_grid = np.copy(input_grid)\n\n    # Find connected regions of blue (color 1)\n    blue_regions = find_connected_regions(input_grid, 1)\n\n    # Recolor regions based on shape\n    for region in blue_regions:\n        if is_l_shaped(region, input_grid):\n            # Recolor L-shaped regions to orange (7)\n            for row, col in region:\n                output_grid[row, col] = 7\n        elif is_rectangular(region, input_grid):\n            # Recolor rectangular regions to red\n            for row, col in region:\n                output_grid[row,col] = 2\n        # else, keep the region blue.\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2992,
    "candidates_token_count": 1067,
    "total_token_count": 4059,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.662856,
  "response_file": "026-response.json"
}