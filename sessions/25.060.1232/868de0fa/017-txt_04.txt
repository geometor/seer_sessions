import numpy as np
from collections import deque

# Existing functions (get_neighbors, find_regions, fill_regions, transform) remain unchanged.
def get_neighbors(grid, r, c):
    """Gets the valid neighbors of a cell."""
    rows, cols = grid.shape
    neighbors = []
    for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:
        nr, nc = r + dr, c + dc
        if 0 <= nr < rows and 0 <= nc < cols:
            neighbors.append((nr, nc))
    return neighbors

def find_regions(grid):
    """Finds contiguous regions of 0s surrounded by 1s."""
    rows, cols = grid.shape
    visited = np.zeros((rows, cols), dtype=bool)
    regions = []

    def bfs(r, c, current_region):
        queue = deque([(r, c)])
        visited[r, c] = True
        is_enclosed = True

        while queue:
            cr, cc = queue.popleft()
            current_region.append((cr, cc))

            for nr, nc in get_neighbors(grid, cr, cc):
                if grid[nr, nc] == 0 and not visited[nr, nc]:
                    visited[nr, nc] = True
                    queue.append((nr, nc))
                elif grid[nr, nc] != 0 and grid[nr, nc] != 1: # Added: Check for invalid surrounding
                    is_enclosed = False
                elif grid[nr, nc] == 0:
                    continue # already in queue or visited

                #check that the border is only color 1
                elif grid[nr, nc] != 1:
                     is_enclosed = False

        return is_enclosed

    for r in range(rows):
        for c in range(cols):
            if grid[r, c] == 0 and not visited[r, c]:
                current_region = []
                is_enclosed = bfs(r, c, current_region)
                if is_enclosed:
                    regions.append(current_region)

    return regions
def analyze_results(task):
    print(f"Task: {task['name']}")
    num_examples = len(task['train'])

    for i in range(num_examples):
        input_grid = np.array(task['train'][i]['input'])
        expected_output = np.array(task['train'][i]['output'])
        predicted_output = transform(input_grid.copy())

        regions = find_regions(input_grid.copy())
        num_regions = len(regions)

        #check if the input contains any white not surrounded by blue
        open_white = False
        rows, cols = input_grid.shape
        for r in range(rows):
           for c in range(cols):
              if input_grid[r,c] == 0:
                 is_open = False
                 for neighbor in get_neighbors(input_grid, r, c):
                    if input_grid[neighbor] != 1:
                       is_open = True
                       break
                 if is_open:
                    open_white = True
                    break
           if open_white:
              break


        print(f"  Example {i+1}:")
        print(f"    Number of enclosed regions found: {num_regions}")
        print(f"    Open white pixels present: {open_white}")
        print(f"    Prediction matches expected: {np.array_equal(predicted_output, expected_output)}")

task1 = {
    "name": "Task 1",
    "train": [
        {"input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 1, 7, 7, 1, 0, 0, 0], [0, 0, 0, 1, 7, 7, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]},
        {"input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 1, 7, 7, 7, 7, 1, 0, 0], [0, 0, 1, 7, 7, 7, 7, 1, 0, 0], [0, 0, 1, 7, 7, 7, 7, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]},
        {"input": [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]], "output": [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 0, 0], [0, 0, 1, 7, 7, 7, 1, 0, 0], [0, 0, 1, 7, 7, 7, 1, 0, 0], [0, 0, 1, 7, 7, 7, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]},
        {"input": [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 1, 1, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], "output": [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 7, 7, 7, 1, 0], [0, 0, 1, 7, 7, 7, 1, 0], [0, 0, 1, 7, 7, 7, 1, 0], [0, 0, 1, 1, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]},
        {"input": [[0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 1, 0, 0, 0, 1, 0], [0, 1, 0, 0, 0, 1, 0], [0, 1, 0, 0, 0, 1, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0]], "output": [[0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 1, 7, 7, 7, 1, 0], [0, 1, 7, 7, 7, 1, 0], [0, 1, 7, 7, 7, 1, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0]]},
        {"input": [[1, 1, 1, 1, 1], [1, 0, 0, 0, 1], [1, 0, 1, 0, 1], [1, 0, 0, 0, 1], [1, 1, 1, 1, 1]], "output": [[1, 1, 1, 1, 1], [1, 7, 7, 7, 1], [1, 7, 1, 7, 1], [1, 7, 7, 7, 1], [1, 1, 1, 1, 1]]},
        {"input": [[1, 1, 1, 1], [1, 0, 0, 1], [1, 0, 1, 1], [1, 1, 1, 1]], "output": [[1, 1, 1, 1], [1, 7, 7, 1], [1, 7, 1, 1], [1, 1, 1, 1]]}

    ]
}

analyze_results(task1)