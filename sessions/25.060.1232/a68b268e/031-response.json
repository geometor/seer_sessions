{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe input grid is divided by a horizontal blue line. The colors above and below this line are extracted and placed into a new grid. The output grid's first row is populated by colors found above the blue line, and its last row by colors found below the blue line. Intermediate rows are filled with black (0). The output grid size is determined by whether there are colors above or below the blue line.\n\"\"\"\n\nimport numpy as np\n\ndef get_colors_relative_to_blue_line(grid):\n    \"\"\"\n    Extracts non-blue (1) and non-white (0) colors above and below the horizontal blue line.\n    \"\"\"\n    height, width = grid.shape\n    blue_line_row = -1\n\n    # Find the row index of the horizontal blue line\n    for y in range(height):\n        if all(grid[y, x] == 1 for x in range(width)):\n            blue_line_row = y\n            break\n\n    colors = {\n      'above_left': [],\n      'above_right': [],\n      'below_left': [],\n      'below_right': []\n    }\n    \n    if blue_line_row == -1:\n        return colors\n\n    # Extract colors above the blue line\n    for y in range(blue_line_row):\n        for x in range(width):\n            if grid[y, x] != 1 and grid[y, x] != 0:\n                if x < width // 2:\n                    colors['above_left'].append(grid[y,x])\n                else:\n                    colors['above_right'].append(grid[y,x])\n    \n    # Extract colors below the blue line\n    for y in range(blue_line_row + 1, height):\n        for x in range(width):\n            if grid[y, x] != 1 and grid[y,x] != 0:\n                if x < width // 2:\n                    colors['below_left'].append(grid[y,x])\n                else:\n                    colors['below_right'].append(grid[y,x])\n    return colors\n\ndef transform(input_grid):\n    # Convert input grid to numpy array\n    grid = np.array(input_grid)\n\n    # Extract colors relative to the blue line\n    colors = get_colors_relative_to_blue_line(grid)\n\n    # Determine output grid size and initialize\n    above_exists = bool(colors['above_left'] or colors['above_right'])\n    below_exists = bool(colors['below_left'] or colors['below_right'])\n    \n    num_rows = 0\n    if above_exists:\n        num_rows += 1\n    if below_exists:\n        num_rows += 1\n    if above_exists and below_exists:\n        num_rows = 4 # fixed size when both exist.\n\n    output_grid = np.zeros((num_rows, 4), dtype=int)\n\n    # Populate the first row if colors exist above the blue line\n    if above_exists:\n        output_grid[0, 0] = colors['above_left'][0] if colors['above_left'] else 0\n        output_grid[0, 1] = colors['above_left'][-1] if len(colors['above_left']) > 1 else (colors['above_left'][0] if colors['above_left'] else 0)\n        output_grid[0, 2] = colors['above_right'][0] if colors['above_right'] else 0\n        output_grid[0, 3] = colors['above_right'][-1] if len(colors['above_right']) > 1 else (colors['above_right'][0] if colors['above_right'] else 0)\n\n    # Populate the last row if colors exist below the blue line\n    if below_exists:\n        last_row = num_rows -1\n        output_grid[last_row, 0] = colors['below_left'][0] if colors['below_left'] else 0\n        output_grid[last_row, 1] = colors['below_left'][-1] if len(colors['below_left']) > 1 else (colors['below_left'][0] if colors['below_left'] else 0)\n        output_grid[last_row, 2] = colors['below_right'][0] if colors['below_right'] else 0\n        output_grid[last_row, 3] = colors['below_right'][-1] if len(colors['below_right']) > 1 else (colors['below_right'][0] if colors['below_right'] else 0)\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5565,
    "candidates_token_count": 1088,
    "total_token_count": 6653,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.280847,
  "response_file": "031-response.json"
}