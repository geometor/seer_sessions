import numpy as np
from typing import List, Tuple, Dict

def find_uniform_regions(grid: np.ndarray, size: int = 3) -> List[Tuple[Tuple[int, int], int]]:
    """
    Finds all square regions of the specified size in the grid that have a uniform color.
    Returns a list of tuples, where each tuple contains:
        - The top-left coordinate of the region (row, col).
        - The color value of the region.
    """
    regions = []
    for i in range(grid.shape[0] - size + 1):
        for j in range(grid.shape[1] - size + 1):
            subgrid = grid[i:i+size, j:j+size]
            if np.all(subgrid == subgrid[0, 0]):
                regions.append(((i, j), subgrid[0, 0]))
    return regions

def grid_report(task:Dict):
    report = {}
    for sample in task:
        input_grid = np.array(sample['input'])
        output_grid = np.array(sample['output'])
        input_regions = find_uniform_regions(input_grid)
        output_regions = find_uniform_regions(output_grid)
        report[f"{sample['sample_id']}-input"] = {'grid':input_grid.tolist(),'regions':input_regions}
        report[f"{sample['sample_id']}-output"] = {'grid':output_grid.tolist(),'regions':output_regions}
    return report
        

examples = task['train']
report = grid_report(examples)

for sample_id in report:
    print(f"--- {sample_id} ---")
    print(f"Grid:\n{np.array(report[sample_id]['grid'])}")
    print(f"Regions of uniform color: {report[sample_id]['regions']}")