import numpy as np

def transform(input_grid):
    input_grid = np.array(input_grid)
    height, width = input_grid.shape
    output_grid = np.zeros((height // 2, width), dtype=int)

    # Iterate through each 2x1 section
    for i in range(0, height, 2):
        for j in range(width):
            section = input_grid[i:i+2, j:j+1]

            # Map colors based on section content
            if 9 in section:
                output_grid[i//2, j] = 2
            elif 1 in section:
              output_grid[i//2,j] = 0 #explicit null
            else:
                output_grid[i//2, j] = 0

    return output_grid.tolist()

task = {
  "train": [
    {
      "input": [[0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 9, 0, 9, 0, 9, 0, 9, 0, 9], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 9, 0, 9, 0, 9, 0, 9, 0, 9], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 9, 0, 9, 0, 9, 0, 9, 0, 9]],
      "output": [[0, 2, 0, 2, 0, 2, 0, 2, 0, 2], [0, 2, 0, 2, 0, 2, 0, 2, 0, 2], [0, 2, 0, 2, 0, 2, 0, 2, 0, 2]]
    },
    {
      "input": [[0, 4, 1, 1, 1, 1, 4, 0], [1, 1, 1, 9, 9, 1, 1, 1], [1, 4, 1, 1, 1, 1, 4, 1]],
      "output": [[0, 0, 0, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]
    },
    {
      "input": [[6, 1, 6, 1, 6, 1], [6, 9, 6, 9, 6, 9], [6, 1, 6, 1, 6, 1], [6, 9, 6, 9, 6, 9]],
      "output": [[0, 2, 0, 2, 0, 2], [0, 2, 0, 2, 0, 2]]
    },
      {
      "input": [[6, 1, 6, 1, 6, 1, 6, 6, 1, 1], [6, 9, 6, 9, 6, 9, 6, 6, 6, 6], [1, 6, 1, 6, 1, 6, 1, 1, 6, 6]],
      "output": [[0, 2, 0, 2, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
    }
  ],
  "test": [
    {
      "input": [[4, 1, 4, 4, 1, 4], [9, 4, 9, 9, 4, 9], [4, 4, 4, 4, 4, 4]],
      "output": [[2, 0, 2, 2, 0, 2]]
    }
  ]
}

for example_index, example in enumerate(task["train"]):
    input_grid = example['input']
    expected_output = example['output']
    predicted_output = transform(input_grid)
    print(f"Example {example_index + 1}:")
    print(f"  Input: {input_grid}")
    print(f"  Expected Output: {expected_output}")
    print(f"  Predicted Output: {predicted_output}")
    if expected_output != predicted_output:
      print(f"  Differences: {np.array(expected_output) - np.array(predicted_output)}")
    else:
       print("  Outputs Match")
    print("-" * 20)