import numpy as np

def get_first_nonzero(grid):
    # return first non zero element of grid and its row index
    rows, cols = grid.shape
    for r in range(rows):
        for c in range(cols):
             if grid[r,c] != 0: return grid[r,c], r
    return 0, -1

def transform(input_grid):
    # initialize output_grid
    first_nonzero, seed_row = get_first_nonzero(input_grid)
    output_height = input_grid.shape[0]
    output_width = input_grid.shape[1]
    output_grid = np.zeros((output_height, output_width), dtype=int)

    # change output pixels
    if first_nonzero != 0:
        triangle_height = seed_row + 1
        for i in range(triangle_height):
            for j in range(i + 1):
                output_grid[i, j] = first_nonzero

    return output_grid

task = task_data
examples = task["train"]
results = []

for example in examples:
    input_grid = np.array(example['input'])
    expected_output = np.array(example['output'])
    predicted_output = transform(input_grid)    
    results.append({
        "input": input_grid.tolist(),
        "expected_output": expected_output.tolist(),
        "predicted_output": predicted_output.tolist(),
        "match": np.array_equal(expected_output, predicted_output)
    })

print(results)