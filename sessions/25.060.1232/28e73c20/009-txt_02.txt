import numpy as np

def analyze_grid(grid, name):
    """Analyzes a single grid and returns relevant metrics."""
    rows, cols = grid.shape
    unique_values = np.unique(grid)
    value_counts = {val: np.count_nonzero(grid == val) for val in unique_values}
    print(f"  {name}:")
    print(f"    Dimensions: {rows}x{cols}")
    print(f"    Unique Values: {unique_values}")
    print(f"    Value Counts: {value_counts}")
    adjacent_diffs = 0
    for r in range(rows):
      for c in range(cols-1):
        if grid[r,c] != grid[r,c+1]:
          adjacent_diffs += 1
    for r in range(rows-1):
      for c in range(cols):
        if grid[r,c] != grid[r+1,c]:
          adjacent_diffs += 1

    print(f'    Adjacent Diffs: {adjacent_diffs}')

def analyze_example(example):
    """Analyzes an input-output pair and the transformed output."""
    input_grid = np.array(example['input'])
    output_grid = np.array(example['output'])
    transformed_grid = transform(input_grid)  # Assuming 'transform' is your function
    analyze_grid(input_grid, "Input")
    analyze_grid(output_grid, "Expected Output")
    analyze_grid(transformed_grid, "Transformed Output")
    print(f"    Match: {np.array_equal(output_grid, transformed_grid)}")
    print("---")
    
def transform(input_grid):
    # Initialize output_grid as a copy of the input_grid
    output_grid = np.copy(input_grid)
    
    # Get the dimensions of the grid
    rows, cols = output_grid.shape
    
    # Change all pixels on the outer border to green (3)
    for i in range(rows):
        for j in range(cols):
            if i == 0 or i == rows - 1 or j == 0 or j == cols - 1:
                output_grid[i, j] = 3
            
    # Create a plus pattern of white pixels inside the frame.
    # Iterate, excluding the border to create white pixels.
    for i in range(1, rows -1):
        output_grid[1,i] = 0
        output_grid[i,1] = 0

    return output_grid

examples = [
    {'input': [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], 'output': [[3, 3, 3, 3, 3, 3], [3, 0, 0, 0, 0, 3], [3, 0, 3, 3, 0, 3], [3, 0, 3, 3, 0, 3], [3, 0, 0, 0, 0, 3], [3, 3, 3, 3, 3, 3]]},
    {'input': [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 'output': [[3, 3, 3, 3, 3], [3, 0, 0, 0, 3], [3, 0, 3, 0, 3], [3, 0, 0, 0, 3], [3, 3, 3, 3, 3]]},
    {'input': [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], 'output': [[3, 3, 3, 3], [3, 0, 0, 3], [3, 0, 0, 3], [3, 3, 3, 3]]}
]

for example in examples:
    analyze_example(example)