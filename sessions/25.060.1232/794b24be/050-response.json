{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  Iterate through each pixel of the input grid.\n2.  If a pixel is white (0), it remains white (0) in the output grid.\n3.  If a pixel is blue (1), then:\n    - If any blue pixel on the top row, that forms a contiguous group of 2 or more changes that whole group to red\n    - change any single blue cell in the second or third row to white\n    - change any other blue cell to red\n4. Output will be created with changes to cells with corresponding coordinates.\n\"\"\"\n\nimport numpy as np\n\ndef get_contiguous_blocks(grid, color):\n    \"\"\"\n    Finds contiguous blocks of the specified color in the grid.\n    Returns a list of sets, where each set contains the coordinates of a contiguous block.\n    \"\"\"\n    visited = set()\n    blocks = []\n\n    def dfs(row, col, current_block):\n        if (row, col) in visited or not (0 <= row < grid.shape[0] and 0 <= col < grid.shape[1]) or grid[row, col] != color:\n            return\n        visited.add((row, col))\n        current_block.add((row, col))\n        dfs(row + 1, col, current_block)\n        dfs(row - 1, col, current_block)\n        dfs(row, col + 1, current_block)\n        dfs(row, col - 1, current_block)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] == color and (row, col) not in visited:\n                current_block = set()\n                dfs(row, col, current_block)\n                blocks.append(current_block)\n    return blocks\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n\n    # Find contiguous blue blocks\n    blue_blocks = get_contiguous_blocks(input_grid, 1)\n\n    for r in range(input_grid.shape[0]):\n        for c in range(input_grid.shape[1]):\n            if input_grid[r,c] == 0:\n                output_grid[r,c] = 0\n            elif input_grid[r,c] == 1:\n                if r == 0: # Top Row\n                    for block in blue_blocks:\n                        if len(block) >=2 and (r,c) in block:\n                                for cell in block:\n                                    output_grid[cell]=2\n                elif r >0: # Not top Row\n                    output_grid[r,c]=2\n                    is_single=True\n                    for block in blue_blocks:\n                            if len(block) >1 and (r,c) in block:\n                                 is_single=False\n                    if is_single:\n                         output_grid[r,c] = 0\n\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2117,
    "candidates_token_count": 692,
    "total_token_count": 2809,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.494507,
  "response_file": "050-response.json"
}