examples:
  - example_id: 1
    input_objects:
      - color: 4
        shape_type: "3x3 block with missing corners"
        valid: true
      - color: 6
        shape_type: "3x3 block with missing corners"
        valid: true
      - color: 8
        shape_type: "3x3 block with missing corners"
        valid: true
    output_objects:
      - color: 4
      - color: 6
      - color: 8
    output_grid_height: 5
    output_grid_width: 3
    rule: "Create columns of height 5, repeating the valid colors."

  - example_id: 2
    input_objects:
      - color: 3
        shape_type: "3x3 block with missing corners"
        valid: true
      - color: 2
        shape_type: "3x3 block with missing corners"
        valid: true
    output_objects:
      - color: 3
      - color: 2
    output_grid_height: 5
    output_grid_width: 2
    rule: "Create columns of height 5, repeating the valid colors."

  - example_id: 3
    input_objects:
      - color: 5
        shape_type: "3x3 block with missing corners"
        valid: true
    output_objects:
      - color: 5
    output_grid_height: 5
    output_grid_width: 1
    rule: "Create columns of height 5, repeating the valid colors."
  - example_id: 4
    input_objects:
      - color: 6
        valid: false
      - color: 7
        valid: false
      - color: 8
        valid: false
    output_objects: []
    output_grid_height: 5
    output_grid_width: 0
    rule: "Create columns of height 5, repeating the valid colors."

general_rule: |
  Identify "valid" colored objects in the input grid.  A valid object is a contiguous region of the same color that forms a "3x3 block with missing corners", and does not only have neighbors of color 0, or only neighbors on the edges. 
  Create an output grid with a height of 5 and a width equal to the number of valid colors found.
  Each column of the output grid is filled with one of the valid colors, repeated five times. The order of the colors in the columns should match the order they were identified. If no valid colors, the output is a 5x0 grid.