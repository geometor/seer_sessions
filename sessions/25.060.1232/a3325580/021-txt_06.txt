import numpy as np

def find_objects(grid):
    """
    Finds contiguous regions of the same color in a grid.
    Returns a list of objects, where each object is a list of (row, col) coordinates.
    """
    visited = set()
    objects = []

    def dfs(row, col, color, current_object):
        if (row, col) in visited or not (0 <= row < grid.shape[0] and 0 <= col < grid.shape[1]) or grid[row, col] != color:
            return
        visited.add((row, col))
        current_object.append((row, col))
        dfs(row + 1, col, color, current_object)
        dfs(row - 1, col, color, current_object)
        dfs(row, col + 1, color, current_object)
        dfs(row, col - 1, color, current_object)

    for row in range(grid.shape[0]):
        for col in range(grid.shape[1]):
            if (row, col) not in visited:
                current_object = []
                dfs(row, col, grid[row, col], current_object)
                if current_object:
                    objects.append(current_object)
    return objects

def get_object_height(obj):
     """
     calculate the greatest vertical length of a single object
     """
     rows = [r for r, c in obj]
     return max(rows) - min(rows) + 1

def analyze_examples(task_data):
    results = []
    for example in task_data['train']:
        input_grid = np.array(example['input'])
        output_grid = np.array(example['output'])
        objects = find_objects(input_grid)
        red_objects = [obj for obj in objects if input_grid[obj[0][0]][obj[0][1]] == 2]
        tallest_red_height = max([get_object_height(obj) for obj in red_objects]) if red_objects else 0

        results.append({
            'input_shape': input_grid.shape,
            'output_shape': output_grid.shape,
            'num_objects': len(objects),
            'red_objects': len(red_objects),
            'tallest_red_height': tallest_red_height,
            'output_values_equal_2': np.all(output_grid == 2) if output_grid.size else 'N/A',  #check if all are 2
            'output_height_eq_red': output_grid.shape[0] == tallest_red_height if red_objects else 'N/A'

        })
    return results

# This is placeholder task data. Replace this with actual task data loaded from JSON
task_data = {
  "train": [
    {
      "input": [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 2, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 2, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 2, 0, 0, 0, 0]
      ],
      "output": [
        [2],
        [2],
        [2]
      ]
    },
    {
      "input": [
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 2, 2, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0]
      ],
      "output": [
        [2]
      ]
    },
      {
      "input": [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 2, 2, 2, 0, 0]
      ],
      "output": [
        [2]
      ]
    },
    {
      "input": [
        [2, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 2]
      ],
      "output": [
        [2]
      ]
    }
  ]
}

analysis = analyze_examples(task_data)
print(analysis)