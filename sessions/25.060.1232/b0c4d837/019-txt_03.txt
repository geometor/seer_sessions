def grid_to_np(grid_str):
    return np.array([list(map(int, row)) for row in grid_str.split()])

example_data = [
    {
        'input': "1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 8 1 1 8 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1",
        'expected_output': "8 8 8\n8 8 8\n8 8 8",
        'result': "8 8 8\n0 0 0\n0 0 0"
    },
    {
      'input': "6 6 6 6 6\n6 6 6 6 6\n6 6 8 6 6\n6 6 6 6 6",
      'expected_output' : "8 8\n8 8",
      'result': "8 8 8\n0 0 0\n0 0 0"
    },
    {
        'input': "5 5 5 5 5 5\n5 5 5 5 5 5\n5 5 5 5 5 5\n5 5 5 8 5 5\n5 5 5 5 5 5",
        'expected_output': "8\n8\n8\n8",
        'result': "8 8 8\n0 0 0\n0 0 0"
    },
     {
        'input': "0 0 0 0 0 0 0\n0 0 8 0 0 0 0\n0 0 0 0 0 0 0",
        'expected_output': "8\n8",
        'result': "8 8 8\n0 0 0\n0 0 0"
    }
]

for i, example in enumerate(example_data):
    input_grid = grid_to_np(example['input'])
    expected_output_grid = grid_to_np(example['expected_output'])
    result_grid = grid_to_np(example['result'])

    print(f"Example {i+1}:")
    print(f"Input grid shape: {input_grid.shape}")
    print(f"Expected output grid shape: {expected_output_grid.shape}")
    print(f"Result grid shape: {result_grid.shape}")
    print(f"Number of azure pixels in Input: {np.sum(input_grid == 8)}")
    print(f"Expected output azure pixels: {np.sum(expected_output_grid==8)}")

    if input_grid.shape == expected_output_grid.shape:
      diff = (input_grid == expected_output_grid)
      print(f"Input and expected output are same shape. Matching = {diff.all()}")
    else:
      print("Input and expected output are different shapes.")

    print("------")