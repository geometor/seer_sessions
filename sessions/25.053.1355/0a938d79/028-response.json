{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Colored Rows:** Find all rows in the input grid that contain non-zero pixels. Note the color and the row index of each.\n2.  **Expand Rows:** For each colored row found, create a new row where every cell containing 0 is set to the color of the original row.\n3.  **Create Repeating Pattern:** The expanded rows form a repeating pattern in the output. The pattern appears as alternating rows of the expanded color.\n4. **Output Size**: Output size is input size.\n\"\"\"\n\nimport numpy as np\n\ndef find_colored_rows(grid):\n    \"\"\"Finds rows with non-zero pixels and returns a dictionary of row_index: color.\"\"\"\n    colored_rows = {}\n    for i, row in enumerate(grid):\n        for pixel in row:\n            if pixel != 0:\n                colored_rows[i] = pixel\n                break  # Only need the first color in the row\n    return colored_rows\n\ndef expand_row(grid, row_index, color):\n    \"\"\"Expands a row by replacing all 0s with the specified color.\"\"\"\n    rows, cols = grid.shape\n    new_row = np.zeros(cols, dtype=int)\n    for i in range(cols):\n      if grid[row_index, i] != 0:\n        new_row[i] = grid[row_index,i]\n      else:\n        new_row[i] = color if grid[row_index,i]==0 else grid[row_index,i]\n    return new_row\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the defined rules.\"\"\"\n    # initialize output_grid\n    output_grid = np.zeros_like(input_grid)\n    rows, _ = output_grid.shape\n\n    # Find colored rows\n    colored_rows = find_colored_rows(input_grid)\n    \n    # Create expanded rows\n    expanded_rows = {}\n    for row_index, color in colored_rows.items():\n        expanded_rows[row_index] = expand_row(input_grid, row_index, color)\n\n    # Build the repeating pattern\n    row_indices = sorted(expanded_rows.keys())\n    \n    output_row_index = 0\n    \n    while output_row_index < rows:\n      for i in row_indices:\n          if output_row_index < rows:\n              output_grid[output_row_index] = expanded_rows[i]\n              output_row_index +=1\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7708,
    "candidates_token_count": 587,
    "total_token_count": 8295,
    "cached_content_token_count": 0
  },
  "response_time": 5.776733,
  "response_file": "028-response.json"
}