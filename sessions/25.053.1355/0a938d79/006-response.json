{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Key Colors:** Examine the input grid. Identify \"key colors\" as any non-zero color.\n2.  **Detect Horizontal Pattern**: Look for repeating patterns of colors and blank spaces horizontally.\n3. **Detect Vertical Pattern:** If there is a consisten horizontal pattern, look for repeating pattern of colors and blank rows in a vertical stacking.\n4.  **Build Output:**\n    *   If a horizontal pattern is found, fill the output grid rows by repeating the pattern starting at the column of the first colored pixel, until the end of the row.\n    * If a vertical pattern is found, use the horizontal pattern from the first set of colored rows. Repeat the combination of colored and blank rows, starting from the first colored row index.\n5.  **Default:** If no key colors are found, return an output grid of the same size, filled with 0.\n\"\"\"\n\nimport numpy as np\n\ndef find_key_colors(grid):\n    \"\"\"Finds unique non-zero colors in the grid.\"\"\"\n    return np.unique(grid[grid != 0])\n\ndef detect_horizontal_pattern(row):\n    \"\"\"Detects a repeating horizontal pattern in a row.\"\"\"\n    non_zero_indices = np.where(row != 0)[0]\n    if len(non_zero_indices) == 0:\n        return None\n\n    first_color_index = non_zero_indices[0]\n    pattern = []\n    for i in range(first_color_index, len(row)):\n        pattern.append(row[i])\n\n    # Check if the pattern repeats\n    pattern_length = len(pattern)\n    \n    # Find the shortest repeating pattern\n    for length in range(1, pattern_length + 1):\n      if pattern_length % length == 0:\n        sub_pattern = pattern[:length]\n        if pattern == sub_pattern * (pattern_length // length):\n          return sub_pattern\n\n    return None\n    \n\ndef detect_vertical_pattern(grid, key_colors):\n    \"\"\"Detects a repeating vertical pattern of colored and blank rows.\"\"\"\n    \n    # find first colored row\n    first_colored_row_index = -1\n    for i, row in enumerate(grid):\n      if np.any(row != 0):\n        first_colored_row_index = i\n        break\n\n    if first_colored_row_index == -1:\n        return None, None\n        \n    # determine horizontal pattern for first colored row\n    horizontal_pattern = detect_horizontal_pattern(grid[first_colored_row_index])\n\n    if horizontal_pattern is None:\n      return None, None\n\n    # determine repeating row pattern\n    vertical_pattern = []\n    \n    rows, cols = grid.shape\n\n    \n    current_row_index = first_colored_row_index\n    while current_row_index < rows:\n      row = grid[current_row_index]\n      if np.any(row != 0):\n        vertical_pattern.append(horizontal_pattern)\n      else:\n         vertical_pattern.append([0] * len(horizontal_pattern))\n      current_row_index += 1\n\n    for length in range(1, len(vertical_pattern) + 1):\n      if len(vertical_pattern) % length == 0:\n        sub_pattern = vertical_pattern[:length]\n        \n        if vertical_pattern == sub_pattern * (len(vertical_pattern) // length):\n           return sub_pattern, first_colored_row_index\n\n    return None, None\n      \n\ndef transform(input_grid):\n    # initialize output_grid\n    rows, cols = input_grid.shape\n    output_grid = np.zeros((rows, cols), dtype=int)\n\n    # find key colors\n    key_colors = find_key_colors(input_grid)\n    \n    if len(key_colors) == 0:\n        return output_grid\n\n    # detect vertical pattern, and the starting row\n    vertical_pattern, first_colored_row_index = detect_vertical_pattern(input_grid, key_colors)\n\n    # build output\n    if vertical_pattern:\n      pattern_length = len(vertical_pattern)\n      \n      for row_index in range(rows):\n        pattern_row = vertical_pattern[(row_index-first_colored_row_index) % pattern_length]\n        \n        output_grid[row_index, :len(pattern_row)] = pattern_row\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8395,
    "candidates_token_count": 1029,
    "total_token_count": 9424,
    "cached_content_token_count": 0
  },
  "response_time": 9.879891,
  "response_file": "006-response.json"
}