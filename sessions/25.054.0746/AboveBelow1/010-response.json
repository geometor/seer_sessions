{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Preserve Top Rows:** Copy the first three rows (rows 0, 1, and 2) of the input grid directly to the output grid without changes.\n2.  **Blanking Subsequent Rows:** For all rows below the top three (starting from row 3), change all pixel values to 0 (white).\n3.  **Exception:** If a horizontal line exists below the first three rows, preserve the first horizontal line, changing all rows below this horizontal line to 0 (white).\n\"\"\"\n\nimport numpy as np\n\ndef is_horizontal_line(grid, row):\n    \"\"\"Checks if a given row in the grid forms a horizontal line (all pixels have the same non-zero color).\"\"\"\n    if row < 0 or row >= grid.shape[0]:\n        return False\n    first_color = grid[row, 0]\n    if first_color == 0:  # Consider 0 as background, not a line\n       return False\n    for col in range(1, grid.shape[1]):\n        if grid[row, col] != first_color:\n            return False\n    return True\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the described rule.\"\"\"\n    output_grid = np.zeros_like(input_grid)\n\n    # 1. Preserve Top Rows\n    for row in range(min(3, input_grid.shape[0])):\n        output_grid[row, :] = input_grid[row, :]\n\n    # 2 & 3. Blanking Subsequent Rows with Exception\n    found_horizontal_line = False\n    for row in range(3, input_grid.shape[0]):\n        if not found_horizontal_line and is_horizontal_line(input_grid, row):\n            output_grid[row, :] = input_grid[row, :]\n            found_horizontal_line = True\n        #else all 0, which is already set during initialization\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5323,
    "candidates_token_count": 448,
    "total_token_count": 5771,
    "cached_content_token_count": 0
  },
  "response_time": 5.376412,
  "response_file": "010-response.json"
}