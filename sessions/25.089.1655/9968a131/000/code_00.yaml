task_type: grid_transformation
dimensionality: 2D
grid_properties:
  - Both input and output grids have the same dimensions.
  - Transformation is applied row by row.
row_processing:
  - Iterate through each row of the input grid.
  - The transformation applied depends on the value of the second pixel (index 1) in the row.
  - Rows must have at least 3 pixels for transformations to apply (based on observed rules needing up to the 3rd pixel). Shorter rows likely remain unchanged.
transformation_rules:
  - rule:
      condition: Second pixel value is 8 (azure). Minimum row length 3.
      action:
        - Keep the first pixel (index 0) the same.
        - Set the second pixel (index 1) to the value of the input first pixel (index 0).
        - Set the third pixel (index 2) to the value of the input second pixel (index 1).
        - If row length is 4 or more, set the fourth pixel (index 3) to the value of the input third pixel (index 2).
        - Keep all subsequent pixels (index 4 onwards) the same as the input.
      example: Input `[7, 8, 3, 7]` -> Output `[7, 7, 8, 3]`
  - rule:
      condition: Second pixel value is 0 (white). Minimum row length 3.
      action:
        - Set the first pixel (index 0) to the value of the input third pixel (index 2).
        - Set the second pixel (index 1) to the value of the input first pixel (index 0).
        - Set the third pixel (index 2) to the value of the input second pixel (index 1).
        - Keep all subsequent pixels (index 3 onwards) the same as the input.
      example: Input `[5, 0, 7, 7, 7, 7]` -> Output `[7, 5, 0, 7, 7, 7]`
  - rule:
      condition: Default (second pixel is not 8 or 0, or row length is less than 3).
      action: Copy the input row directly to the output row.
      example_1: Input `[7, 3, 8, 7]` -> Output `[7, 3, 8, 7]` (Second pixel is 3)
      example_2: Input `[0, 5, 7, 7, 7, 7]` -> Output `[0, 5, 7, 7, 7, 7]` (Second pixel is 5)
