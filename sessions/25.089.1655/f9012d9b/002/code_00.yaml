Facts:
  - id: common_properties
    description: Properties common to all examples.
    input_type: grid (varying dimensions)
    output_type: grid (1x1 or 2x2)
    background_color: white (0), ignored in frequency counts.
    relevant_colors: Non-white colors present in the input.
    key_objects:
      - object: color_frequencies
        description: Counts of each non-white color in the input grid.
        properties:
          - most_frequent_color (C1)
          - second_most_frequent_color (C2)
          - count_difference (diff = count(C1) - count(C2))
          - count_parity (odd/even status of count(C1) and count(C2))

  - id: train_1
    input_grid_size: 4x4
    non_white_colors:
      - color: magenta (6)
        count: 8 (C1)
        parity: even
      - color: azure (8)
        count: 7 (C2)
        parity: odd
    count_difference: 1
    output_grid_size: 1x1
    output_grid_content: [[azure (8)]]  # [[C2]]
    transformation_rule_applied: diff == 1

  - id: train_2
    input_grid_size: 5x5
    non_white_colors:
      - color: blue (1)
        count: 13 (C1)
        parity: odd
      - color: red (2)
        count: 8 (C2)
        parity: even
    count_difference: 5
    output_grid_size: 2x2
    output_grid_content: [[blue (1), blue (1)], [red (2), blue (1)]] # [[C1, C1], [C2, C1]]
    transformation_rule_applied: diff > 1
    majority_color: blue (1) # C1 (odd count)
    minority_color: red (2)  # C2 (even count)
    minority_position: (1, 0) # Rule: position (1,0) when minC == C2

  - id: train_3
    input_grid_size: 7x7
    non_white_colors:
      - color: red (2)
        count: 24 (C1)
        parity: even
      - color: gray (5)
        count: 21 (C2)
        parity: odd
    count_difference: 3
    output_grid_size: 2x2
    output_grid_content: [[gray (5), gray (5)], [gray (5), red (2)]] # [[C2, C2], [C2, C1]]
    transformation_rule_applied: diff > 1
    majority_color: gray (5) # C2 (odd count)
    minority_color: red (2)  # C1 (even count)
    minority_position: (1, 1) # Rule: position (1,1) when minC == C1
