{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nReplace orange (7) pixels with green (3) pixels, but only for those original orange pixels that are directly beside a green pixel.\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, row, col):\n    \"\"\"\n    Gets the immediate horizontal and vertical neighbors of a cell.\n    \"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    if row > 0:\n        neighbors.append(grid[row-1, col])\n    if row < rows - 1:\n        neighbors.append(grid[row+1, col])\n    if col > 0:\n        neighbors.append(grid[row, col-1])\n    if col < cols - 1:\n        neighbors.append(grid[row, col+1])\n    return neighbors\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # iterate through each cell of the input_grid\n    for row in range(rows):\n        for col in range(cols):\n            # check if it's orange (7)\n            if input_grid[row, col] == 7:\n                # check neighbors\n                neighbors = get_neighbors(input_grid, row, col)\n                # If any neighbor is green (3), replace with green (3)\n                if 3 in neighbors:\n                    output_grid[row, col] = 3\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1774,
    "candidates_token_count": 345,
    "total_token_count": 2119,
    "cached_content_token_count": 0
  },
  "response_time": 4.592617
}