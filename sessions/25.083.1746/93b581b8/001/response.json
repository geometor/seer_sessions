{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nReflects and duplicates non-zero pixels in a grid across the main diagonal (top-left to bottom-right).\nThe reflection swaps row and column indices. Duplication happens horizontally or vertically based on the original column's parity.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by reflecting and duplicating non-zero pixels.\n    \"\"\"\n    input_grid = np.array(input_grid)  # Ensure numpy array\n    rows, cols = input_grid.shape\n    output_grid = np.zeros_like(input_grid)\n\n    # Iterate through the input grid\n    for r in range(rows):\n        for c in range(cols):\n            if input_grid[r, c] != 0:\n                # Reflect: Swap row and column indices\n                reflected_r, reflected_c = c, r\n                output_grid[reflected_r, reflected_c] = input_grid[r, c]\n\n                # Duplicate based on original column parity\n                if r <= c: # top left triangle including diagonal\n                    if c % 2 == 0:  # Even column: duplicate horizontally to the left\n                        if reflected_c > 0:\n                            output_grid[reflected_r, reflected_c - 1] = input_grid[r, c]\n                    else:  # Odd column: duplicate vertically down\n                        if reflected_r < rows - 1:\n                            output_grid[reflected_r + 1, reflected_c] = input_grid[r, c]\n                else: # bottom right triangle\n                    if c % 2 == 1: # Odd column: duplicate horizontally to the right\n                        if reflected_c  < cols - 1:\n                            output_grid[reflected_r, reflected_c + 1] = input_grid[r,c]\n                    else: # Even column: duplicate vertically up\n                        if reflected_r > 0:\n                            output_grid[reflected_r - 1, reflected_c] = input_grid[r,c]\n\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2142,
    "candidates_token_count": 477,
    "total_token_count": 2619,
    "cached_content_token_count": 0
  },
  "response_time": 7.06203
}