{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Iterate** through the input grid's rows, top to bottom.\n2.  **Identify** if each row contains only black pixels or contains at least one non-black pixel.\n3.  **Store** the non-black rows in a list.\n4.  **Reverse** the order of the stored list of non-black rows.\n5.  Create a new empty result grid.\n6.  **Iterate** through the original grid's row *indices*.\n7.  For current index `i`:\n    - If row `i` of original grid was black, add it to result grid.\n    - If row `i` of original grid was non-black, add the next element of the reversed non-black-row list to result grid.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    input_grid = np.array(input_grid)\n    non_black_rows = []\n    original_row_types = []  # True for black row, False for non-black row\n\n    # 1. Iterate and Identify row types\n    for row in input_grid:\n        if np.all(row == 0):\n            original_row_types.append(True)\n        else:\n            original_row_types.append(False)\n            non_black_rows.append(row)\n\n    # 2. Reverse Non-Black Rows\n    non_black_rows.reverse()\n\n    # 3. Construct Output with original black row positions\n    output_grid = []\n    non_black_row_index = 0\n    for is_black_row in original_row_types:\n        if is_black_row:\n            output_grid.append(input_grid[len(output_grid)]) #get the original black row\n        else:\n            output_grid.append(non_black_rows[non_black_row_index])\n            non_black_row_index += 1\n\n    return np.array(output_grid).tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2747,
    "candidates_token_count": 461,
    "total_token_count": 3208,
    "cached_content_token_count": 0
  },
  "response_time": 6.39475
}