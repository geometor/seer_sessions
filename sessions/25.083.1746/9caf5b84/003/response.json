{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentify contiguous regions of the same color. Determine the outer border of each region.\nChange the color of pixels on the outer border to orange (7).\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, row, col):\n    \"\"\"Gets the valid neighbors of a cell in the grid.\"\"\"\n    rows, cols = len(grid), len(grid[0])\n    neighbors = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i == 0 and j == 0:\n                continue\n            new_row, new_col = row + i, col + j\n            if 0 <= new_row < rows and 0 <= new_col < cols:\n                neighbors.append((new_row, new_col))\n    return neighbors\n\ndef is_outer_border(grid, row, col, region_color):\n    \"\"\"Checks if a pixel is on the outer border of a contiguous region.\"\"\"\n    neighbors = get_neighbors(grid, row, col)\n    same_color_neighbors = 0\n    for neighbor_row, neighbor_col in neighbors:\n        if grid[neighbor_row][neighbor_col] == region_color:\n            same_color_neighbors += 1\n\n    # Check if the cell has fewer than 2 same-color neighbors, making it a border\n    if same_color_neighbors < 2 and same_color_neighbors > 0:\n          return True\n    \n    if same_color_neighbors == 0:\n          return False\n\n    # Additional check to determine real borders and not parts of a big component\n    if len(neighbors) < 8:\n      return True\n\n    #If has two or more neighbors and is not on the border\n    return False\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of the input_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = len(input_grid), len(input_grid[0])\n    visited = set()\n\n    # Iterate through each cell\n    for row in range(rows):\n        for col in range(cols):\n            current_color = input_grid[row][col]\n            if (row, col) not in visited:\n                if is_outer_border(input_grid, row, col, current_color):\n                      output_grid[row][col] = 7\n                visited.add((row,col))\n            \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 357,
            "end_index": 587,
            "uri": "https://github.com/jamesthomson99/A-star-search",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4935,
    "candidates_token_count": 568,
    "total_token_count": 5503,
    "cached_content_token_count": 0
  },
  "response_time": 8.508007
}