{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation rule identifies connected components of red pixels (value 2) in the input grid. These components can be horizontal lines, vertical lines, L-shapes, T-shapes, or +-shapes.  If a component is a simple horizontal or vertical line (and more than one pixel), it is expanded to fill the entire row or column it occupies. L, T, and + shaped components are not expanded.\n\"\"\"\n\nimport numpy as np\n\ndef get_connected_components(grid):\n    \"\"\"Finds all connected components of red pixels.\"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n    components = []\n\n    def dfs(r, c, current_component):\n        if (r < 0 or r >= rows or c < 0 or c >= cols or\n                visited[r, c] or grid[r, c] != 2):\n            return\n        visited[r, c] = True\n        current_component.append((r, c))\n        dfs(r + 1, c, current_component)\n        dfs(r - 1, c, current_component)\n        dfs(r, c + 1, current_component)\n        dfs(r, c - 1, current_component)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == 2 and not visited[r, c]:\n                current_component = []\n                dfs(r, c, current_component)\n                if current_component: #add non-empty components\n                    components.append(current_component)\n    return components\n\ndef classify_component(component):\n    \"\"\"Classifies a connected component as Horizontal, Vertical, L, T, or +.\"\"\"\n    rows = [r for r, _ in component]\n    cols = [c for _, c in component]\n\n    if len(set(rows)) == 1 and len(component) > 1:\n        return \"Horizontal\"\n    elif len(set(cols)) == 1 and len(component) > 1:\n        return \"Vertical\"\n    elif len(component) > 1:  # Could be L, T, or +;  distinguish later if needed.\n        return \"Other\" # other shapes are not expanded\n    else:\n        return \"Other\"\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n    grid = np.array(input_grid)\n    components = get_connected_components(grid)\n\n    # Expand qualifying components\n    for component in components:\n        component_type = classify_component(component)\n\n        if component_type == \"Horizontal\":\n            row = component[0][0]\n            output_grid[row, :] = 2\n        elif component_type == \"Vertical\":\n            col = component[0][1]\n            output_grid[:, col] = 2\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5141,
    "candidates_token_count": 681,
    "total_token_count": 5822,
    "cached_content_token_count": 0
  },
  "response_time": 10.440031
}