{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify the Active Row:** Find the row in the input grid that contains non-zero digits.\n2.  **Locate Non-Zero Digits:** Within the active row, identify the positions and values of all non-zero digits.\n3. **Expansion**: For each non-zero digit, expand the pixel to the left and to the right, using the same value/color, such that the original colored pixel is in the center and there is a block of 5 of the same color.\n4.  **Insert Separator:** Place a single '5' (grey pixel) in the grid at the mid-point between the end of one colour expansion and the beginning of the adjacent one.\n5.  **Preserve Other Rows:** All other rows in the input grid remain unchanged in the output grid.\n6. **Output** output the final grid.\n\"\"\"\n\nimport numpy as np\n\ndef find_active_row(grid):\n    # Iterate through rows and check for non-zero elements\n    for i, row in enumerate(grid):\n        if np.any(row != 0):\n            return i\n    return -1  # No active row found\n\ndef expand_pixels(row, active_row_index, input_grid):\n    # Create a copy of the row to modify\n    new_row = np.copy(row)\n    # Find the indices of non-zero elements\n    non_zero_indices = np.where(row != 0)[0]\n    \n    # Calculate the midpoint between non-zero colors\n    if len(non_zero_indices)>1:\n      midpoint = (non_zero_indices[-1] + non_zero_indices[0]) // 2 \n      new_row[midpoint] = 5\n\n    # Expand each non-zero element\n    for i in range(len(non_zero_indices)):\n      idx=non_zero_indices[i]\n\n      if len(non_zero_indices)==1:\n        new_row[idx-2:idx+3]=input_grid[active_row_index, idx]\n      elif i==0:\n        new_row[non_zero_indices[0]:midpoint]=input_grid[active_row_index, idx]\n      else:\n        new_row[midpoint+1:non_zero_indices[-1]+1]=input_grid[active_row_index, idx]\n\n    return new_row\n\ndef transform(input_grid):\n    # Convert input grid to a NumPy array for easier manipulation\n    input_grid = np.array(input_grid)\n    output_grid = np.copy(input_grid)\n\n    # Find the active row index\n    active_row_index = find_active_row(input_grid)\n\n    # If no active row, return the original grid\n    if active_row_index == -1:\n        return output_grid\n\n    # Get the active row\n    active_row = input_grid[active_row_index]\n\n    # Expand pixels in the active row\n    output_grid[active_row_index] = expand_pixels(active_row, active_row_index, input_grid)\n    \n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2407,
    "candidates_token_count": 728,
    "total_token_count": 3135,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.124603,
  "response_file": "008-response.json"
}