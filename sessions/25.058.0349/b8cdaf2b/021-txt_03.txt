import numpy as np

# Provided examples (replace with actual data from the task)
examples = [
    {
        "input": np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 4]]),
        "output": np.array([[0, 0, 0, 0, 0, 0, 0, 0, 4],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
    },
    {
        "input": np.array([[0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 4, 0, 0, 0],
                           [0, 0, 4, 4, 4, 0, 0],
                           [0, 4, 4, 4, 4, 4, 0]]),
        "output": np.array([[0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 4, 4, 4, 0, 0],
                            [0, 4, 4, 4, 4, 4, 0],
                            [0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0]]),
    },
    {
        "input": np.array([[0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 4, 4, 4, 0, 0],
                           [0, 0, 4, 4, 4, 4, 4, 0]]),
        "output": np.array([[0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 4, 4, 4, 4, 4, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0]]),
    },
]

def transform(input_grid):
    """Transforms the input grid according to the described rule."""
    output_grid = np.copy(input_grid)
    rows, cols = input_grid.shape
    yellow_pixels = get_yellow_pixels(input_grid)

    for row, col in yellow_pixels:
        if is_corner_with_two_white(input_grid, row, col):
            if col == 0 : output_grid[row - 2, col + 1] = 4 # move up diagonally right
            else: output_grid[row-2, col - 1] = 4
            output_grid[row, col] = input_grid[row, col]

        elif is_surrounded_by_white(input_grid, row, col):
            # Move two rows up
            output_grid[row - 2, col] = 4
            output_grid[row,col] = input_grid[row,col] # keep original


    return output_grid

def get_yellow_pixels(grid):
    """Finds the coordinates of yellow (4) pixels in the bottom row."""
    yellow_pixels = []
    rows, cols = grid.shape
    for x in range(cols):
        if grid[rows - 1, x] == 4:
            yellow_pixels.append((rows - 1, x))
    return yellow_pixels

def is_surrounded_by_white(grid, row, col):
    """Checks if a pixel is surrounded by white (0) above and to the sides."""
    rows, cols = grid.shape
    
    if row - 1 < 0 :
        return False

    # Check left, and right
    if col > 0 and grid[row, col - 1] != 0:
        return False
    if col < cols - 1 and grid[row, col + 1] != 0:
        return False

    if row-1 > 0 and grid[row-1, col] != 0:
        return False

    return True

def is_corner_with_two_white(grid, row, col):
    rows, cols = grid.shape

    if row - 1 < 0 : return False

    adjacent_whites = 0
    if col > 0 and grid[row, col - 1] == 0:
        adjacent_whites +=1
    if col < cols - 1 and grid[row, col + 1] == 0:
        adjacent_whites +=1
    if row > 0 and grid[row -1, col] == 0:
        adjacent_whites += 1
    
    is_edge = (col == 0) or (col == cols-1)

    return is_edge and adjacent_whites >=2
results = []
for i, example in enumerate(examples):
    input_grid = example["input"]
    expected_output = example["output"]
    predicted_output = transform(input_grid)
    comparison = np.array_equal(predicted_output, expected_output)
    results.append(
        {
            "example": i + 1,
            "input_shape": input_grid.shape,
            "expected_output_shape": expected_output.shape,
            "predicted_output_shape": predicted_output.shape,
            "match": comparison,
        }
    )

for result in results:
    print(result)
