import numpy as np

def report(grid):
    grid = np.array(grid)
    print(f"Shape: {grid.shape}")
    print(f"Unique values: {np.unique(grid)}")
    print(f"Value counts:\n{np.array(np.unique(grid, return_counts=True)).T}")

def transform(input_grid):
    """
    Transforms the input grid according to the observed rule.
    """
    input_grid = np.array(input_grid)
    output_grid = np.zeros_like(input_grid)
    rows, cols = input_grid.shape

    # Iterate through the first row to find source cells (2 and 8)
    for j in range(cols):
        if input_grid[0, j] == 2 or input_grid[0, j] == 8:
            source_value = input_grid[0, j]
            # Replicate the source value downward in alternating rows
            for i in range(rows):
                output_grid[0,j] = input_grid[0,j] # same as input
                if i % 2 == 1 :
                    output_grid[i, j] = source_value

    return output_grid

task = {
    "train": [
        {
            "input": [[2, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0]],
            "output": [[2, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        },
        {
            "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 8, 0]],
            "output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        },
        {
            "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 8, 0, 0, 0, 0, 0, 0, 0, 0]],
            "output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        },
    ],
    "test": [
        {
            "input": [[0, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 0]],
            "output": [[0, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        }
    ],
}

for i, example in enumerate(task["train"]):
    input_grid = example["input"]
    expected_output = example["output"]
    actual_output = transform(input_grid)
    print(f"Example {i+1}:")
    print("Input:")
    report(input_grid)
    print("Expected Output:")
    report(expected_output)
    print("Actual Output:")
    report(actual_output)
    print("Match:", np.array_equal(actual_output, expected_output))
    print("-" * 20)