{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIterate through the input grid, identifying gray (5) pixels. For each gray pixel,\ndetermine if it's part of a continuous, unbroken horizontal or vertical line of\ngray pixels.  If it is, change the color of all pixels in that line to green (3).\nAll other pixels remain unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef is_part_of_line(grid, row, col, visited):\n    \"\"\"\n    Checks if a gray pixel is part of a horizontal or vertical line.\n\n    Args:\n        grid: The input grid.\n        row: Row index of the pixel.\n        col: Column index of the pixel.\n        visited: set of visited pixels\n\n    Returns:\n        A tuple: (is_part_of_line, line_pixels) where is_part_of_line is a boolean\n        indicating if the pixel is part of a line, and line_pixels is a set\n        containing the coordinates of all pixels in the line (or an empty set\n        if it's not part of a line).\n    \"\"\"\n    rows, cols = grid.shape\n    if grid[row, col] != 5:\n        return False, set()\n\n    # Check horizontal line\n    horizontal_line = set()\n    c = col\n    while c >= 0 and grid[row, c] == 5:\n        horizontal_line.add((row, c))\n        c -= 1\n    c = col + 1\n    while c < cols and grid[row, c] == 5:\n        horizontal_line.add((row, c))\n        c += 1\n\n    # Check if the horizontal line pixels have only two neighbors,\n    # except end points\n    if len(horizontal_line) > 1:\n        valid_horizontal = True\n        h_list = sorted(list(horizontal_line), key=lambda x:x[1]) # sort by col\n        for r,c in h_list:\n          neighbors = 0\n          if (r,c-1) in horizontal_line:\n            neighbors += 1\n          if (r,c+1) in horizontal_line:\n            neighbors += 1\n          if neighbors > 2 or (neighbors == 1 and c != h_list[0][1] and c != h_list[-1][1]):\n            valid_horizontal = False\n            break\n        if valid_horizontal:\n            # Check if pixels already in a vertical line\n            for r, c in horizontal_line:\n                if (r,c) in visited:\n                  return False, set()\n            return True, horizontal_line\n\n    # Check vertical line\n    vertical_line = set()\n    r = row\n    while r >= 0 and grid[r, col] == 5:\n        vertical_line.add((r, col))\n        r -= 1\n    r = row + 1\n    while r < rows and grid[r, col] == 5:\n        vertical_line.add((r, col))\n        r += 1\n\n    # Check if the horizontal line pixels have only two neighbors,\n    # except end points\n    if len(vertical_line) > 1:\n        valid_vertical = True\n        v_list = sorted(list(vertical_line),key=lambda x: x[0]) # sort by row\n        for r,c in v_list:\n            neighbors = 0\n            if (r-1,c) in vertical_line:\n                neighbors+=1\n            if (r+1,c) in vertical_line:\n                neighbors+=1\n            if neighbors > 2 or (neighbors == 1 and r != v_list[0][0] and r != v_list[-1][0]):\n                valid_vertical = False\n                break\n        if valid_vertical:\n          # Check if pixels are already in a horizontal line\n          for r, c in vertical_line:\n            if (r,c) in visited:\n              return False, set()\n          return True, vertical_line\n\n    return False, set()\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = output_grid.shape\n    visited = set()\n\n    # Iterate and change output pixels\n    for r in range(rows):\n        for c in range(cols):\n            if output_grid[r, c] == 5:\n                is_line, line_pixels = is_part_of_line(output_grid, r, c, visited)\n                if is_line:\n                    for line_row, line_col in line_pixels:\n                        output_grid[line_row, line_col] = 3  # Change to green\n                        visited.add((line_row, line_col))\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2785,
    "candidates_token_count": 1102,
    "total_token_count": 3887,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 18.969256,
  "response_file": "024-response.json"
}