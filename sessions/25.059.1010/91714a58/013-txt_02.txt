import numpy as np

def find_magenta_rectangles(grid):
    """Finds all rectangular blocks of magenta (6) pixels."""
    magenta_rectangles = []
    rows, cols = len(grid), len(grid[0])
    visited = set()

    def is_valid(r, c):
        return 0 <= r < rows and 0 <= c < cols

    def dfs(r, c, current_rectangle):
        if (r, c) in visited or not is_valid(r, c) or grid[r][c] != 6:
            return

        visited.add((r, c))
        current_rectangle.append((r, c))

        # Explore adjacent cells
        dfs(r + 1, c, current_rectangle)
        dfs(r - 1, c, current_rectangle)
        dfs(r, c + 1, current_rectangle)
        dfs(r, c - 1, current_rectangle)


    for r in range(rows):
        for c in range(cols):
            if grid[r][c] == 6 and (r, c) not in visited:
                current_rectangle = []
                dfs(r, c, current_rectangle)

                # Check if the found region is a rectangle
                if current_rectangle:
                    min_row = min(p[0] for p in current_rectangle)
                    max_row = max(p[0] for p in current_rectangle)
                    min_col = min(p[1] for p in current_rectangle)
                    max_col = max(p[1] for p in current_rectangle)

                    # Verify rectangle property:
                    is_rectangle = True
                    for row in range(min_row, max_row + 1):
                        for col in range(min_col, max_col + 1):
                            if (row, col) not in current_rectangle:
                                is_rectangle = False
                                break
                        if not is_rectangle:
                            break
                    
                    if is_rectangle:
                      magenta_rectangles.append({
                          "row_start": min_row,
                          "row_end": max_row,
                          "col_start": min_col,
                          "col_end": max_col,
                          "height": max_row - min_row + 1,
                          "width": max_col - min_col + 1
                      })
    return magenta_rectangles

def analyze_examples(task):
    results = []
    for example in task['train']:
        input_grid = np.array(example['input'])
        output_grid = np.array(example['output'])
        
        input_rects = find_magenta_rectangles(input_grid)
        output_rects = find_magenta_rectangles(output_grid)

        results.append({
            'input_rectangles': input_rects,
            'output_rectangles': output_rects,
        })
    return results

task = {
    "train": [
        {
            "input": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 6, 6, 0, 0, 0, 0],
                [0, 0, 0, 0, 6, 6, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 6, 6, 6, 6, 0, 0],
                [0, 0, 0, 0, 6, 6, 6, 6, 0, 0],
                [0, 0, 0, 0, 6, 6, 6, 6, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            ],
            "output": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 6, 6, 0, 0, 0, 0],
                [0, 0, 0, 0, 6, 6, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            ],
        },
        {
            "input": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 6, 6, 6, 0, 0, 0],
                [0, 0, 0, 0, 6, 6, 6, 0, 0, 0],
                [0, 0, 0, 0, 6, 6, 6, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 6, 6, 0, 0, 0, 0],
                [0, 0, 0, 0, 6, 6, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            ],
            "output": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 6, 6, 6, 0, 0, 0],
                [0, 0, 0, 0, 6, 6, 6, 0, 0, 0],
                [0, 0, 0, 0, 6, 6, 6, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            ],
        },
        {
            "input": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 6, 6, 0, 0, 0, 0],
                [0, 0, 0, 0, 6, 6, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 6, 6, 6, 6, 6, 0],
                [0, 0, 0, 0, 6, 6, 6, 6, 6, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            ],
            "output": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 6, 6, 0, 0, 0, 0],
                [0, 0, 0, 0, 6, 6, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            ],
        },
    ],
    "test": [
        {
            "input": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 6, 6, 6, 6, 0, 0],
                [0, 0, 0, 0, 6, 6, 6, 6, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 6, 6, 0, 0, 0, 0],
                [0, 0, 0, 0, 6, 6, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            ],
            "output": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 6, 6, 6, 6, 0, 0],
                [0, 0, 0, 0, 6, 6, 6, 6, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            ],
        }
    ]
}
results = analyze_examples(task)
print(results)