{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation identifies all solid magenta rectangles in the input grid. It then copies *each* of these magenta rectangles to the output grid. All pixels in the output grid that are *not* part of a copied magenta rectangle are set to white (0). The rule isn't about only the \"largest\" rectangle; all such rectangles are copied.\n\"\"\"\n\nimport numpy as np\n\ndef find_magenta_rectangles(grid):\n    \"\"\"Finds all rectangular blocks of magenta (6) pixels.\"\"\"\n    magenta_rectangles = []\n    rows, cols = len(grid), len(grid[0])\n    visited = set()\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def dfs(r, c, current_rectangle):\n        if (r, c) in visited or not is_valid(r, c) or grid[r][c] != 6:\n            return\n\n        visited.add((r, c))\n        current_rectangle.append((r, c))\n\n        # Explore adjacent cells\n        dfs(r + 1, c, current_rectangle)\n        dfs(r - 1, c, current_rectangle)\n        dfs(r, c + 1, current_rectangle)\n        dfs(r, c - 1, current_rectangle)\n\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r][c] == 6 and (r, c) not in visited:\n                current_rectangle = []\n                dfs(r, c, current_rectangle)\n\n                # Check if the found region is a rectangle\n                if current_rectangle:\n                    min_row = min(p[0] for p in current_rectangle)\n                    max_row = max(p[0] for p in current_rectangle)\n                    min_col = min(p[1] for p in current_rectangle)\n                    max_col = max(p[1] for p in current_rectangle)\n\n                    # Verify rectangle property:\n                    is_rectangle = True\n                    for row in range(min_row, max_row + 1):\n                        for col in range(min_col, max_col + 1):\n                            if (row, col) not in current_rectangle:\n                                is_rectangle = False\n                                break\n                        if not is_rectangle:\n                            break\n                    \n                    if is_rectangle:\n                      magenta_rectangles.append({\n                          \"row_start\": min_row,\n                          \"row_end\": max_row,\n                          \"col_start\": min_col,\n                          \"col_end\": max_col\n                      })\n    return magenta_rectangles\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid by copying all magenta rectangles.\"\"\"\n    # initialize output_grid\n    output_grid = np.zeros_like(input_grid)\n\n    # Find all magenta rectangles\n    magenta_rectangles = find_magenta_rectangles(input_grid)\n    \n\n    # Preserve all magenta rectangles\n    for rect in magenta_rectangles:\n        for r in range(rect[\"row_start\"], rect[\"row_end\"] + 1):\n            for c in range(rect[\"col_start\"], rect[\"col_end\"] + 1):\n                output_grid[r][c] = 6\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3660,
    "candidates_token_count": 764,
    "total_token_count": 4424,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.20187,
  "response_file": "012-response.json"
}