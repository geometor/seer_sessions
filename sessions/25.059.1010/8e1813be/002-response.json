{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Target Colors:** Examine the input grid and identify the colors that *completely fill one or more rows, and where the remaining pixels on that row are all 0*. Also the colors should be unique. For example, if color 2 appears twice as complete rows, ignore them.\n2.  **Extract Rows:** For each target color identified, extract *one* full row of that color from the input grid. The width of the extracted row should be the same as the number of non-zero pixels in the original row.\n3.  **Compose Output:** Stack the extracted rows vertically, in the order they appear top-to-bottom in the input, to create the output grid.\n\"\"\"\n\nimport numpy as np\n\ndef get_unique_complete_rows(grid):\n    \"\"\"\n    Identifies and returns unique complete rows of non-zero colors, along with their non-zero lengths\n    \"\"\"\n    rows = []\n    unique_colors = set()\n    for row in grid:\n        # Get unique non-zero elements\n        non_zero_elements = np.unique(row[row != 0])\n\n        #check non_zero_elements for uniqueness\n        if len(non_zero_elements) == 1:\n          color = non_zero_elements[0]\n          if color not in unique_colors:\n            unique_colors.add(color)\n            non_zero_length = np.count_nonzero(row)\n            rows.append( (row, non_zero_length) )    \n\n    return rows\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the defined rules.\n    \"\"\"\n    # Convert input to numpy array\n    input_grid = np.array(input_grid)\n    \n    # Find complete rows and extract relevant portion\n    rows_data = get_unique_complete_rows(input_grid)\n\n    extracted_rows = []\n    for row_data in rows_data:\n        row, length = row_data\n        extracted_rows.append(row[row != 0])\n\n    # Compose output_grid\n    if extracted_rows:\n      output_grid = np.stack(extracted_rows)\n    else:\n      output_grid = np.array([])\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4606,
    "candidates_token_count": 514,
    "total_token_count": 5120,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.11005,
  "response_file": "002-response.json"
}