{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Single Yellow Pixels:** Locate all single yellow (color 4) pixels within the input grid.\n2.  **Move to Corners:** Move these single yellow pixels to the corners of the grid, filling the corners in the following order: top-left, top-right, bottom-left, bottom-right.  If a corner already contains a non-background pixel, skip that corner and proceed to the next available corner in the sequence. If there are more single yellow pixels than available corners, place only as many as will fit in available corners and do not move the remainder.\n3. **Fill to Right-most Non-Zero:** For any given row, fill all 0's to the left of the right-most non-zero color with that color.\n\n\"\"\"\n\nimport numpy as np\n\ndef find_single_pixels(grid, color):\n    \"\"\"Finds single pixels of the specified color.\"\"\"\n    single_pixels = []\n    rows, cols = grid.shape\n    visited = set()\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def is_single(r, c, color):\n      if not is_valid(r,c) or grid[r,c] != color:\n        return False\n\n      neighbors = [(r-1,c),(r+1,c),(r,c-1),(r,c+1)]\n      for nr, nc in neighbors:\n        if is_valid(nr, nc) and grid[nr, nc] == color:\n          return False\n\n      return True\n\n    for r in range(rows):\n      for c in range(cols):\n        if is_single(r,c, color):\n          single_pixels.append((r,c))\n\n    return single_pixels\n\ndef fill_rows_to_rightmost(grid):\n    \"\"\"Fills each row with the right-most non-zero color.\"\"\"\n    output_grid = np.copy(grid)\n    rows, cols = output_grid.shape\n    for r in range(rows):\n        rightmost_color = 0\n        for c in range(cols - 1, -1, -1):\n            if output_grid[r, c] != 0:\n                rightmost_color = output_grid[r, c]\n            elif rightmost_color != 0:\n                output_grid[r, c] = rightmost_color\n    return output_grid\n\ndef move_pixels_to_corners(grid, pixels, color):\n    \"\"\"\n    Moves specified pixels to the corners, filling them in order:\n    top-left, top-right, bottom-left, bottom-right.\n    Skips occupied corners.\n    \"\"\"\n    output_grid = np.copy(grid)\n    rows, cols = output_grid.shape\n    corners = [(0, 0), (0, cols - 1), (rows - 1, 0), (rows - 1, cols - 1)]\n    pixel_idx = 0\n\n    for cr, cc in corners:\n        if pixel_idx < len(pixels):\n           if output_grid[cr,cc] == 0:\n                #Remove the pixel at old location, set to background\n                output_grid[pixels[pixel_idx][0], pixels[pixel_idx][1]] = 0\n                #Set new corner location to color\n                output_grid[cr, cc] = color\n                pixel_idx +=1\n        else:\n            break #no more pixels to move\n\n    return output_grid\n\ndef transform(input_grid):\n    # Initialize output_grid\n    output_grid = np.copy(input_grid)\n\n    # 1. Find single yellow pixels\n    yellow_pixels = find_single_pixels(output_grid, 4)\n\n    # 2. Move yellow pixels to corners\n    output_grid = move_pixels_to_corners(output_grid, yellow_pixels, 4)\n    \n    # 3. Fill to rightmost\n    output_grid = fill_rows_to_rightmost(output_grid)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4959,
    "candidates_token_count": 938,
    "total_token_count": 5897,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.940628,
  "response_file": "024-response.json"
}