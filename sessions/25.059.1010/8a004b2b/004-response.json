{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Frame Identification:**\n    *   Examine the input grid to identify the presence of an outer rectangular frame composed primarily of yellow (color 4) pixels, but possibly containing other colors, embedded in a consistent pattern.\n    *   The frame must define a clear rectangular inner region.\n\n2.  **Inner Region Determination:**\n    *   Once a frame is identified, determine the boundaries (top-left and bottom-right) of the inner rectangular region enclosed by the frame.\n\n3.  **Output Grid Creation:**\n    *   Calculate the dimensions of the output grid. The output grid's height and width are each half the height and width of the inner region, respectively (integer division by 2).\n\n4.  **Region Condensation and Color Mapping:**\n    *   Iterate through 2x2 pixel blocks within the inner region of the input grid.\n    *   For each 2x2 block, map it to a single pixel in the corresponding position of the output grid.\n    *   **Color Selection Logic:** Within each 2x2 block:\n        *   If all pixels are the same color, the output pixel takes that color.\n        *   If the pixels are a mix of colors apply this rule: The colors in the 2x2 region in the input are evaluated, and the most prevalent color is used in the output, excluding black(0). If there is a tie, the color that appears the most number of times in the bottom right of the input region is used.\n\n5.  **No Frame Handling:**\n    * If step one does not find a valid border, do not modify the grid.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef get_inner_region_bounds(grid):\n    # Find coordinates of yellow (4) pixels\n    yellow_coords = np.argwhere(grid == 4)\n    \n    if len(yellow_coords) < 2: # Not enough borders\n        return None, None, None, None\n    \n    # Find top-left and bottom-right yellow pixels\n    min_row = min(yellow_coords[:, 0])\n    max_row = max(yellow_coords[:, 0])\n    min_col = min(yellow_coords[:, 1])\n    max_col = max(yellow_coords[:, 1])\n\n    return min_row + 1, max_row, min_col + 1, max_col\n\ndef most_prevalent_color(region):\n    \"\"\"\n    Finds the most prevalent color in a region, excluding black (0).\n    If there's a tie, prioritizes colors found more in the bottom-right.\n    \"\"\"\n    colors = []\n    for row in region:\n        for pixel in row:\n           if pixel != 0:\n               colors.append(pixel)\n\n    if not colors:\n        return 0\n    \n    color_counts = Counter(colors)\n    max_count = max(color_counts.values())\n    \n    # Get colors with the maximum count\n    most_common_colors = [color for color, count in color_counts.items() if count == max_count]\n    \n    if len(most_common_colors) == 1:\n        return most_common_colors[0]\n    else:\n        # Prioritize bottom-right colors\n      \n        bottom_right_counts = Counter()\n        for r in range(region.shape[0]-1, -1, -1):\n            for c in range(region.shape[1]-1, -1, -1):\n                if region[r,c] in most_common_colors:\n                    bottom_right_counts[region[r,c]] +=1\n\n        if bottom_right_counts:\n           return bottom_right_counts.most_common(1)[0][0]\n        else: # if we didn't find anything, return any of the most_common\n            return most_common_colors[0]\n\n\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the described rule.\"\"\"\n\n    input_grid = np.array(input_grid)  # Ensure numpy array\n\n    # 1. & 2. Identify the Frame and Inner Region\n    min_row, max_row, min_col, max_col = get_inner_region_bounds(input_grid)\n\n    if min_row is None:\n        return input_grid\n\n    # 3. Create Output Grid\n    output_height = (max_row - min_row) // 2\n    output_width = (max_col - min_col) // 2\n    output_grid = np.zeros((output_height, output_width), dtype=int)\n    \n    # 4. & 5. Merge Regions and Combine Colors\n    for i in range(output_height):\n        for j in range(output_width):\n            row_start = min_row + i * 2\n            col_start = min_col + j * 2\n            region = input_grid[row_start:row_start+2, col_start:col_start+2]\n\n            # Determine the most prevalent color, excluding 0, with tie-breaker\n            output_grid[i, j] = most_prevalent_color(region)\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2935,
    "candidates_token_count": 1193,
    "total_token_count": 4128,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.38464,
  "response_file": "004-response.json"
}