import numpy as np

def find_horizontal_blocks(grid, color):
    blocks = []
    rows, cols = grid.shape
    for r in range(rows):
        start_col = None
        for c in range(cols):
            if grid[r, c] == color:
                if start_col is None:
                    start_col = c
            elif start_col is not None:
                blocks.append(((r, start_col), (r, c - 1)))
                start_col = None
        if start_col is not None:
            blocks.append(((r, start_col), (r, cols - 1)))
    return blocks

def analyze_example(input_grid, output_grid):
    input_rows, input_cols = input_grid.shape
    output_rows, output_cols = output_grid.shape

    azure_blocks = find_horizontal_blocks(input_grid, 8)
    blue_blocks = find_horizontal_blocks(output_grid, 1)
    
    print(f"Input Grid: {input_rows}x{input_cols}, Output Grid: {output_rows}x{output_cols}")
    print(f"Azure Blocks: {azure_blocks}")
    print(f"Blue Blocks: {blue_blocks}")
    
    # Analyze relationship
    for a_start, a_end in azure_blocks:
      a_row = a_start[0]
      
      for b_start, b_end in blue_blocks:
        b_row = b_start[0]          
        if a_start[1] == b_start[1] and a_end[1] == b_end[1]: #check for matching horizontal position and size
           print(f"Azure row: {a_row}, Blue row: {b_row}, Row Difference: {b_row - a_row}")

example_grids = [
    (np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 8, 8, 8, 8, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]), np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 8, 8, 8, 8, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 1, 1, 1, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])),
    (np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 8, 8, 8, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]), np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 8, 8, 8, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 1, 1, 1, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])),
    (np.array([[8, 8, 0, 0, 0, 0, 0, 0, 0, 0],
              [8, 8, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
    np.array([[8, 8, 0, 0, 0, 0, 0, 0, 0, 0],
              [8, 8, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]))
]

for i, (input_grid, output_grid) in enumerate(example_grids):
    print(f"--- Example {i+1} ---")
    analyze_example(input_grid, output_grid)