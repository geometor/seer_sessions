{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation preserves all azure (color 8) objects from the input grid to the output grid.\nFor each azure object, it identifies the top-most pixel. If there is a pixel to the left of this top-most pixel, it changes that pixel to blue (color 1). If there isn't a pixel to the left and there's a pixel to the right of this top-most pixel it changes the right pixel to blue (color 1).\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, color):\n    \"\"\"Finds objects of a specific color in the grid.\"\"\"\n    objects = []\n    visited = set()\n\n    def dfs(r, c, current_object):\n        \"\"\"Depth-first search to find contiguous regions.\"\"\"\n        if (r, c) in visited or not (0 <= r < grid.shape[0] and 0 <= c < grid.shape[1]) or grid[r, c] != color:\n            return\n        visited.add((r, c))\n        current_object.append((r, c))\n        dfs(r + 1, c, current_object)\n        dfs(r - 1, c, current_object)\n        dfs(r, c + 1, current_object)\n        dfs(r, c - 1, current_object)\n\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] == color and (r, c) not in visited:\n                current_object = []\n                dfs(r, c, current_object)\n                objects.append(current_object)\n    return objects\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the specified rule.\"\"\"\n    output_grid = np.copy(input_grid)\n    azure_objects = find_objects(input_grid, 8)\n\n    # Sort objects based on their topmost and then leftmost coordinate\n    azure_objects.sort(key=lambda obj: (min(r for r, c in obj), min(c for r, c in obj)))\n\n    # Process each azure object\n    for obj in azure_objects:\n        topmost_pixel = min(obj, key=lambda p: p[0])\n        # Check if a pixel exists to the left\n        if topmost_pixel[1] > 0:\n            output_grid[topmost_pixel[0], topmost_pixel[1] - 1] = 1\n        # If no pixel to the left, check for right\n        elif topmost_pixel[1] < output_grid.shape[1] - 1:\n             output_grid[topmost_pixel[0], topmost_pixel[1] + 1] = 1\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4650,
    "candidates_token_count": 633,
    "total_token_count": 5283,
    "cached_content_token_count": 0
  },
  "timing": {
    "response_time": 6.665372
  },
  "response_file": "004-response.json"
}