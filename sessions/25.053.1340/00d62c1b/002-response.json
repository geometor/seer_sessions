{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify** all pixels with the value 3 (green).\n2.  **Locate** the green pixels that have exactly two green neighbors, where neighbors may be above, below, to the left, or to the right - no diagonals.\n3. **Change** the value/color for only the identified pixels in the previous step to 4 (yellow).\n4.  All other pixels remain **unchanged**.\n\"\"\"\n\nimport numpy as np\n\ndef count_neighbors(grid, r, c, target_color):\n    \"\"\"Counts the number of neighbors with the target color around a pixel.\"\"\"\n    rows, cols = grid.shape\n    count = 0\n    # Check above\n    if r > 0 and grid[r-1, c] == target_color:\n        count += 1\n    # Check below\n    if r < rows - 1 and grid[r+1, c] == target_color:\n        count += 1\n    # Check left\n    if c > 0 and grid[r, c-1] == target_color:\n        count += 1\n    # Check right\n    if c < cols - 1 and grid[r, c+1] == target_color:\n        count += 1\n    return count\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the defined rule.\"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Iterate through each pixel\n    for r in range(rows):\n        for c in range(cols):\n            # Check if the pixel is green\n            if input_grid[r, c] == 3:\n                # Count green neighbors\n                neighbor_count = count_neighbors(input_grid, r, c, 3)\n                # Change color to yellow if exactly two green neighbors\n                if neighbor_count == 2:\n                    output_grid[r, c] = 4\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2126,
    "candidates_token_count": 451,
    "total_token_count": 2577,
    "cached_content_token_count": 0
  },
  "response_time": 4.723511,
  "response_file": "002-response.json"
}