{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentify the background color (azure, 8). Find all pixels in the input grid \nthat are not the background color. Determine their common color. Based on this \ncolor, apply a specific translation (movement) to each non-background pixel.\nThe translation rules are:\n- Blue (1) moves 1 pixel right (0, 1).\n- Red (2) moves 2 pixels left (0, -2).\n- Orange (7) moves 2 pixels up (-2, 0).\n- Maroon (9) moves 2 pixels down (2, 0).\nThe original positions of the moved pixels are replaced with the background color.\n\"\"\"\n\nimport numpy as np\n\n# Define the mapping from color to movement vector (delta_row, delta_col)\nCOLOR_TO_VECTOR = {\n    1: (0, 1),   # Blue: Right 1\n    2: (0, -2),  # Red: Left 2\n    7: (-2, 0),  # Orange: Up 2\n    9: (2, 0)    # Maroon: Down 2\n}\n\n# Define the assumed background color\nBACKGROUND_COLOR = 8\n\ndef find_foreground_pixels(grid, background_color):\n    \"\"\"Finds all pixels that are not the background color.\"\"\"\n    foreground_pixels = []\n    foreground_color = None\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] != background_color:\n                foreground_pixels.append(((r, c), grid[r, c]))\n                if foreground_color is None:\n                    foreground_color = grid[r, c]\n                elif foreground_color != grid[r, c]:\n                    # This case should ideally not happen based on examples, \n                    # but good to handle potential inconsistencies.\n                    # For now, we assume all foreground pixels have the same color.\n                    pass \n    return foreground_pixels, foreground_color\n\ndef transform(input_grid):\n    \"\"\"\n    Applies a color-dependent translation to non-background pixels.\n    \"\"\"\n    # Convert input list of lists to numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    \n    # Initialize the output grid as a copy of the input grid\n    output_grid = np.copy(input_np)\n    \n    # Find the foreground pixels and their color\n    foreground_pixels, color = find_foreground_pixels(input_np, BACKGROUND_COLOR)\n    \n    # If no foreground pixels are found, or the color is not in our map, return the original grid\n    if not foreground_pixels or color not in COLOR_TO_VECTOR:\n        return output_grid.tolist() # Return as list of lists\n        \n    # Get the movement vector based on the color\n    delta_r, delta_c = COLOR_TO_VECTOR[color]\n    \n    # First, clear the original positions of foreground pixels\n    for (r, c), _ in foreground_pixels:\n        # Check bounds just in case, although original positions are always valid\n        if 0 <= r < output_grid.shape[0] and 0 <= c < output_grid.shape[1]:\n            output_grid[r, c] = BACKGROUND_COLOR\n            \n    # Then, apply the transformation and set the new positions\n    for (r, c), pixel_color in foreground_pixels:\n        new_r, new_c = r + delta_r, c + delta_c\n        \n        # Check if the new position is within the grid boundaries\n        if 0 <= new_r < output_grid.shape[0] and 0 <= new_c < output_grid.shape[1]:\n            output_grid[new_r, new_c] = pixel_color\n            \n    # Convert back to list of lists for the expected output format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3590,
    "candidates_token_count": 898,
    "total_token_count": 4488,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.209672,
  "retries": null
}