{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom scipy.ndimage import label, generate_binary_structure\nimport collections\n\n\"\"\"\nTransformation rule:\n1. Initialize: Create the output grid as a copy of the input grid.\n2. Identify Separator: Find the first row index (`sep_row`) where all pixels have the same non-white color. Let this color be the `separator_color` (S). If no such row exists, return the initial copy.\n3. Define Sections: The 'control section' comprises rows 0 to `sep_row - 1`. The 'data section' comprises rows `sep_row` to the bottom.\n4. Identify Key Colors: Create a set `key_colors` (K) containing all unique non-white colors found in the first column (`column 0`) of the input grid's control section.\n5. Clean Data Section: Iterate through each pixel `(r, c)` in the output grid's data section (where `r >= sep_row`). Let the pixel's color be `C`. If `C` is not the `separator_color` (S) AND `C` is not in the set `key_colors` (K), change the color of the pixel `output_grid[r, c]` to `separator_color` (S).\n6. Process Control Section: Iterate through each row `r` in the control section (where `r < sep_row`):\n    a. Get the `key_color` from the input grid at `input_grid[r, 0]`.\n    b. If `key_color` is not white (0):\n        i. Count the number `N` of distinct connected objects (using 8-way adjacency) of `key_color` within the *modified* data section of the output grid.\n        ii. If `N > 0`:\n            1. Calculate the line length, ensuring it doesn't exceed the grid width: `line_length = min(N, grid_width)`.\n            2. In the output grid, set the pixels in row `r` from column 0 up to (but not including) `line_length` to `key_color`.\n            3. Set the remaining pixels in row `r` (from column `line_length` to the end) to white (0).\n        iii. If `N == 0`:\n            1. Set all pixels in row `r` of the output grid to white (0).\n    c. If `key_color` is white (0), leave the row `r` in the output grid unchanged from the initial copy (it's already mostly white, or will be overwritten if its key pixel was non-white).\n7. Return: Return the modified output grid.\n\"\"\"\n\ndef find_objects_count(grid_section, color):\n    \"\"\"\n    Counts the number of distinct connected objects of a given color\n    in a grid section using 8-way connectivity.\n    \"\"\"\n    # Create a binary mask where 1 represents the target color, 0 otherwise\n    binary_mask = (grid_section == color)\n\n    # Define the connectivity structure (8-way)\n    structure = generate_binary_structure(2, 2) # 2 means connectivity includes diagonals\n\n    # Label connected components\n    labeled_array, num_features = label(binary_mask, structure=structure)\n\n    return num_features\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule based on object counts in the data section,\n    after cleaning the data section based on control keys.\n    \"\"\"\n    input_np = np.array(input_grid, dtype=int)\n    height, width = input_np.shape\n    \n    # 1. Initialize output grid\n    output_grid = np.copy(input_np)\n\n    # 2. Identify Separator row and color\n    sep_row = -1\n    separator_color = -1\n    for r in range(height):\n        row = input_np[r, :]\n        # Check if all elements are the same and not white (0)\n        first_val = row[0]\n        if first_val != 0 and np.all(row == first_val):\n            sep_row = r\n            separator_color = first_val\n            break\n\n    # If no separator found\n    if sep_row == -1:\n        #print(\"Warning: Separator row not found. Returning input grid copy.\")\n        return output_grid.tolist() \n\n    # 3. Define Sections (implicit in loops below)\n    control_section_rows = range(sep_row)\n    data_section_rows = range(sep_row, height)\n\n    # 4. Identify Key Colors (K) from control section column 0\n    key_colors = set()\n    for r in control_section_rows:\n        key = input_np[r, 0]\n        if key != 0: # Exclude white\n            key_colors.add(key)\n\n    # 5. Clean Data Section (in the output_grid)\n    for r in data_section_rows:\n        for c in range(width):\n            pixel_color = output_grid[r, c]\n            # Replace if color is not Separator (S) AND not a Key Color (K)\n            if pixel_color != separator_color and pixel_color not in key_colors:\n                output_grid[r, c] = separator_color\n\n    # Define the cleaned data section for counting\n    cleaned_data_section = output_grid[sep_row:, :]\n\n    # 6. Process Control Section\n    for r in control_section_rows:\n        # a. Get the key color C from the *original* input\n        key_color = input_np[r, 0]\n\n        # b. If C is non-white\n        if key_color != 0:\n            # i. Count objects N of key_color in the *cleaned* data section\n            object_count = find_objects_count(cleaned_data_section, key_color)\n\n            # ii. If N > 0\n            if object_count > 0:\n                # 1. Calculate line length\n                line_length = min(object_count, width) # Ensure not exceeding width\n                # 2. Draw line\n                output_grid[r, 0:line_length] = key_color\n                # 3. Set remaining pixels in the row to white\n                if line_length < width:\n                    output_grid[r, line_length:] = 0\n            # iii. If N == 0\n            else:\n                # 1. Set entire row to white\n                output_grid[r, :] = 0\n        \n        # c. If key_color is white(0), do nothing - row remains as copied initially,\n        #    unless a previous step modified it (which shouldn't happen for rows starting with white).\n        #    Making sure rows starting with white are cleared just in case:\n        # else: # key_color == 0\n        #    This might clear potentially useful info if input rows start with 0 but have other colors.\n        #    The examples show rows starting with 0 remain 0, so the original 'do nothing' is best.\n        #    output_grid[r, :] = 0 # Reverted this potential change.\n\n    # 7. Return the modified output grid\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 15779,
    "candidates_token_count": 1677,
    "total_token_count": 17456,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.242619,
  "retries": null
}