task_elements:
  - element: grid
    description: A 2D array of pixels representing colors (0-9).
  - element: background_color
    value: 0 (white)
    role: Default empty space.
  - element: boundary_color
    value: 2 (red)
    role: Acts as a boundary or starting point for horizontal fills. Forms vertical segments, usually at edges. Persists in the output.
  - element: seed_color
    value: 8 (azure)
    role: Input pixels that act as targets for horizontal fills initiated by red pixels in the same row.
  - element: fill_color
    value: 8 (azure)
    role: Color used to fill horizontal segments in the output grid based on rules.
  - element: marker_color
    value: 4 (yellow)
    role: Output color that replaces the original position of a seed_color (azure) when a fill operation reaches it.

transformation_rules:
  - rule: process_by_row
    description: The transformation logic is applied independently to each row of the grid.
  - rule: red_and_azure_present
    condition: A row contains at least one red (2) pixel and at least one azure (8) pixel.
    action:
      - For each azure pixel (seed) in the row:
        - Find the closest red pixel (boundary) in the same row.
        - Fill the pixels between the boundary and the seed (exclusive of boundary, inclusive of pixels up to seed) with azure (8).
        - Change the pixel at the original seed location to yellow (4).
  - rule: red_only_present
    condition: A row contains at least one red (2) pixel and no azure (8) pixels.
    action:
      - Fill all pixels in the row with azure (8), except for the pixels that were originally red (2).
  - rule: no_red_present
    condition: A row contains no red (2) pixels.
    action:
      - The row remains unchanged in the output.

relationships:
  - relationship: horizontal_adjacency
    description: The fill process connects red and azure pixels horizontally within the same row.
  - relationship: closest_boundary
    description: When both red and azure pixels are present, the fill originates from the red pixel closest to the azure pixel in that row.

assumptions:
  - If multiple red pixels exist in a row with no azure pixels, all non-red pixels in that row are filled with azure (based on single-red examples).
  - If multiple azure pixels exist in a row with red pixels, the rule applies independently for each azure pixel relative to its closest red pixel.
  - Rows with only azure pixels (no red) are unchanged (not explicitly shown, but follows from observed rules).