{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport math\n\n\"\"\"\nProcesses the input grid row by row to produce the output grid.\n\n1.  Initialize the output grid as a copy of the input grid.\n2.  Iterate through each row of the input grid.\n3.  For the current row, find the column indices of all red pixels (color 2) and all azure pixels (color 8).\n4.  Check Conditions:\n    *   If the row contains at least one red pixel and at least one azure pixel:\n        *   For each azure pixel at column `c_azure`:\n            *   Find the red pixel column `c_red` in the same row that has the minimum horizontal distance to `c_azure`.\n            *   Determine the fill range:\n                *   If `c_red < c_azure`, fill columns from `c_red + 1` up to (but not including) `c_azure`.\n                *   If `c_red > c_azure`, fill columns from `c_azure + 1` up to (but not including) `c_red`.\n            *   In the output grid's current row, set the color of the pixels in the determined fill range to azure (8).\n            *   In the output grid's current row, set the color of the pixel at column `c_azure` to yellow (4).\n    *   Else if the row contains at least one red pixel and no azure pixels:\n        *   For every column `c` in the row:\n            *   If the input pixel at `(row, c)` is not red (2), set the output pixel at `(row, c)` to azure (8).\n    *   Else (the row contains no red pixels):\n        *   The row remains unchanged.\n5.  Return the modified output grid.\n\"\"\"\n\ndef find_indices(row_array, color):\n  \"\"\"Finds the indices of a specific color in a 1D numpy array.\"\"\"\n  return np.where(row_array == color)[0]\n\ndef find_closest(target_index, indices_list):\n  \"\"\"Finds the index in indices_list closest to target_index.\"\"\"\n  if not len(indices_list):\n    return -1 # Should not happen if called correctly based on logic\n  \n  min_dist = float('inf')\n  closest_idx = -1\n  \n  for idx in indices_list:\n    dist = abs(idx - target_index)\n    if dist < min_dist:\n      min_dist = dist\n      closest_idx = idx\n    # Tie-breaking: if distances are equal, prefer the one already found (no change needed)\n    # Alternative tie-breaking could be implemented if needed (e.g., prefer left/right)\n      \n  return closest_idx\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rules based on red and azure pixels in each row.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_np)\n    height, width = input_np.shape\n\n    # Define colors\n    red = 2\n    azure = 8\n    yellow = 4\n\n    # Iterate through each row\n    for r in range(height):\n        current_row = input_np[r, :]\n        \n        # Find indices of red and azure pixels in the current row\n        red_indices = find_indices(current_row, red)\n        azure_indices = find_indices(current_row, azure)\n\n        # Condition 1: Row contains both red and azure pixels\n        if len(red_indices) > 0 and len(azure_indices) > 0:\n            for c_azure in azure_indices:\n                # Find the closest red pixel to this azure pixel\n                c_red = find_closest(c_azure, red_indices)\n\n                # Determine fill range and fill with azure\n                if c_red < c_azure:\n                    # Fill from red+1 up to azure\n                    start_col = c_red + 1\n                    end_col = c_azure\n                    if start_col < end_col:\n                       output_grid[r, start_col:end_col] = azure\n                elif c_red > c_azure:\n                    # Fill from azure+1 up to red\n                    start_col = c_azure + 1\n                    end_col = c_red\n                    if start_col < end_col:\n                        output_grid[r, start_col:end_col] = azure\n                \n                # Change the original azure pixel position to yellow\n                output_grid[r, c_azure] = yellow\n\n        # Condition 2: Row contains red pixels but no azure pixels\n        elif len(red_indices) > 0 and len(azure_indices) == 0:\n            # Fill all non-red pixels with azure\n            for c in range(width):\n                if input_np[r, c] != red:\n                    output_grid[r, c] = azure\n\n        # Condition 3: Row contains no red pixels (no action needed as output is a copy)\n        # else:\n        #     pass # Row remains unchanged\n\n    # Convert back to list of lists if necessary, though numpy array is often fine\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4884,
    "candidates_token_count": 1232,
    "total_token_count": 6116,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 19.719176,
  "retries": null
}