{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nIdentifies horizontal and vertical lines of a single uniform color (L_color) that span the entire grid width or height, respectively.\nThese lines partition the grid into sections.\nThe output grid's dimensions are determined by the number of sections created by these lines (height = number of horizontal sections, width = number of vertical sections).\nThe output grid is filled entirely with the background color (B_color) from the input grid, which is the most frequent color excluding the line color.\n\n1. Identify the color (L_color) forming complete horizontal and/or vertical lines.\n2. Record the indices of these horizontal lines (H_lines) and vertical lines (V_lines).\n3. Determine the background color (B_color) - the most frequent non-L_color pixel.\n4. Calculate output height: Count intervals between horizontal boundaries (including edges and H_lines) that are wider than 1 pixel.\n5. Calculate output width: Count intervals between vertical boundaries (including edges and V_lines) that are wider than 1 pixel.\n6. Create the output grid of the calculated dimensions, filled with B_color.\n\"\"\"\n\ndef _find_lines(grid):\n    \"\"\"Identifies the line color and indices of horizontal/vertical lines.\"\"\"\n    height, width = grid.shape\n    h_lines_candidates = {}\n    v_lines_candidates = {}\n    potential_line_colors = []\n\n    # Find potential horizontal lines and their colors\n    for r in range(height):\n        unique_colors = np.unique(grid[r, :])\n        if len(unique_colors) == 1:\n            color = unique_colors[0]\n            h_lines_candidates[r] = color\n            potential_line_colors.append(color)\n\n    # Find potential vertical lines and their colors\n    for c in range(width):\n        unique_colors = np.unique(grid[:, c])\n        if len(unique_colors) == 1:\n            color = unique_colors[0]\n            v_lines_candidates[c] = color\n            potential_line_colors.append(color)\n\n    if not potential_line_colors:\n        return None, set(), set()\n\n    # Determine the most likely line color\n    line_color = Counter(potential_line_colors).most_common(1)[0][0]\n\n    # Filter actual lines based on the determined line color\n    h_lines = {r for r, color in h_lines_candidates.items() if color == line_color}\n    v_lines = {c for c, color in v_lines_candidates.items() if color == line_color}\n\n    return line_color, h_lines, v_lines\n\ndef _find_background_color(grid, line_color):\n    \"\"\"Finds the most frequent color excluding the line color.\"\"\"\n    pixels = grid.flatten()\n    if line_color is not None:\n        background_pixels = [p for p in pixels if p != line_color]\n    else:\n        background_pixels = list(pixels)\n\n    if not background_pixels:\n        # Default if only line color exists or grid is empty (edge case)\n        return 0 \n        \n    return Counter(background_pixels).most_common(1)[0][0]\n\ndef _calculate_dimension(grid_dim, line_indices):\n    \"\"\"Calculates the output dimension based on line indices.\"\"\"\n    boundaries = sorted(list(set([-1] + list(line_indices) + [grid_dim])))\n    count = 0\n    for i in range(len(boundaries) - 1):\n        if boundaries[i+1] - boundaries[i] > 1:\n            count += 1\n    # If no lines were found, the count will be 1 (the whole grid is one section)\n    # Ensure minimum dimension is 1 if lines perfectly tile without gaps > 1\n    return max(1, count) \n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Transforms the input grid based on grid lines partitioning it.\n\n    Args:\n        input_grid: A numpy array representing the input grid.\n\n    Returns:\n        A numpy array representing the output grid.\n    \"\"\"\n    # Convert input to numpy array if it's not already\n    if not isinstance(input_grid, np.ndarray):\n        input_grid = np.array(input_grid, dtype=int)\n        \n    height, width = input_grid.shape\n\n    # 1. & 2. Identify line color and indices\n    line_color, h_lines, v_lines = _find_lines(input_grid)\n\n    # 3. Determine background color\n    background_color = _find_background_color(input_grid, line_color)\n\n    # 4. Calculate output height (number of horizontal sections)\n    output_height = _calculate_dimension(height, h_lines)\n\n    # 5. Calculate output width (number of vertical sections)\n    output_width = _calculate_dimension(width, v_lines)\n    \n    # 6. Create and fill the output grid\n    output_grid = np.full((output_height, output_width), background_color, dtype=int)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4875,
    "candidates_token_count": 1203,
    "total_token_count": 6078,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 31.734676,
  "retries": null
}