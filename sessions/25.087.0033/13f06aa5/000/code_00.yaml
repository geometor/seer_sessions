task_context:
  grid_properties:
    - size_preservation: Input and output grids have the same dimensions.
    - background_color: Each input has a dominant background color, which mostly persists in the output.
  objects:
    - trigger_pixel:
        - definition: A single pixel in the input grid whose color is unique (excluding the background color). This pixel's properties drive the transformation.
        - properties:
            - color: The specific color of the trigger pixel (e.g., Azure-8, Red-2, Magenta-6).
            - location: The row and column index (r, c) of the trigger pixel.
        - identification_rule: (Tentative) Find the color C that appears exactly once in the input grid (excluding the background color). If multiple such colors exist, select the one whose location (r, c), when used in the modification rule, produces the observed output pattern.
  actions:
    - copy_grid: The output grid is initialized as a copy of the input grid.
    - modify_row_pattern:
        - target_row: The row 'r' corresponding to the trigger pixel's location.
        - pattern: Apply changes to pixels at column indices `c, c-2, c+2, c-4, c+4, ...` within the row's bounds.
        - color_change: The affected pixels in the target row are changed to the trigger pixel's color 'C'.
    - modify_borders:
        - condition: Based on the trigger pixel's color 'C'.
        - rules:
            - if C == Azure (8):
                - set_right_column: Azure (8)
                - set_top_row: Blue (1)
                - set_pixel(0, last_col): White (0)
            - if C == Red (2):
                - set_left_column: Red (2)
                - set_top_row: Green (3)
                - set_pixel(0, 0): White (0)
            - if C == Magenta (6):
                - set_bottom_row: Magenta (6)
        - priority: Border modifications overwrite any previous changes in the border cells.