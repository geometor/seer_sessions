{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid based on the following rules:\n\n1. Identify all white (0) objects (contiguous groups of pixels).\n2. Check if any green (3) pixels exist in the input grid.\n3. **If green pixels exist:**\n   a. Determine the set of row indices occupied by any green pixel.\n   b. For each white object that shares at least one row index with the green pixels:\n      i. Find the maximum column index within that white object.\n      ii. Change all pixels in that white object located at the maximum column index to magenta (6).\n4. **If no green pixels exist, check if any gray (5) objects exist:**\n   a. Determine the set of row indices occupied by any gray pixel (from any gray object).\n   b. For each white object that:\n      i. Shares at least one row index with the gray pixels, AND\n      ii. Has a width of 2 or more columns (max_col - min_col + 1 >= 2):\n         1. Find the minimum column index within that white object.\n         2. Calculate the target column index as minimum column index + 1.\n         3. Change all pixels in that white object located at the target column index to magenta (6).\n5. If neither green pixels nor applicable gray objects (triggering a change in a white object) are found, the grid remains unchanged.\nThe output grid is initialized as a copy of the input grid, and modifications are applied directly to it.\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef find_objects(grid, target_color):\n    \"\"\"\n    Finds all contiguous objects of a specific color in the grid.\n\n    Args:\n        grid (np.array): The input grid.\n        target_color (int): The color of the objects to find.\n\n    Returns:\n        list[set]: A list where each element is a set of (row, col) tuples\n                   representing the coordinates of pixels in a single object.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = set()\n    objects = []\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == target_color and (r, c) not in visited:\n                current_object = set()\n                q = deque([(r, c)])\n                visited.add((r, c))\n\n                while q:\n                    curr_r, curr_c = q.popleft()\n                    current_object.add((curr_r, curr_c))\n\n                    # Check 8 neighbors (including diagonals)\n                    for dr in [-1, 0, 1]:\n                        for dc in [-1, 0, 1]:\n                            if dr == 0 and dc == 0:\n                                continue\n                            nr, nc = curr_r + dr, curr_c + dc\n\n                            if 0 <= nr < rows and 0 <= nc < cols and \\\n                               grid[nr, nc] == target_color and (nr, nc) not in visited:\n                                visited.add((nr, nc))\n                                q.append((nr, nc))\n                \n                if current_object: # Ensure we only add non-empty objects\n                    objects.append(current_object)\n                    \n    return objects\n\ndef get_pixel_locations(grid, target_color):\n    \"\"\"Finds all locations of a specific color.\"\"\"\n    return set(zip(*np.where(grid == target_color)))\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation logic to the input grid.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # 1. Identify white objects\n    white_objects = find_objects(input_grid, 0)\n\n    # 2. Identify green pixel locations\n    green_pixels = get_pixel_locations(input_grid, 3)\n\n    # 3. Check for Green Trigger\n    if green_pixels:\n        green_rows = {r for r, c in green_pixels}\n        \n        # 3.b. Iterate through white objects\n        for white_obj in white_objects:\n            white_rows = {r for r, c in white_obj}\n            \n            # 3.b.ii. Check row intersection\n            if white_rows.intersection(green_rows):\n                # 3.b.iii.1 Find max column index\n                if not white_obj: continue # Skip empty object sets if any occurred\n                max_col = -1\n                for r, c in white_obj:\n                    if c > max_col:\n                        max_col = c\n                \n                # 3.b.iii.2 Change pixels at max_col to magenta\n                for r, c in white_obj:\n                    if c == max_col:\n                        output_grid[r, c] = 6\n        return output_grid # Return after processing green trigger\n\n    # 4. Check for Gray Trigger (if no green found)\n    gray_objects = find_objects(input_grid, 5)\n    if gray_objects:\n        all_gray_pixels = set().union(*gray_objects) # Combine pixels from all gray objects\n        gray_rows = {r for r, c in all_gray_pixels}\n\n        # 4.b. Iterate through white objects\n        for white_obj in white_objects:\n            if not white_obj: continue # Skip empty object sets\n\n            white_rows = {r for r, c in white_obj}\n            white_cols = {c for r, c in white_obj}\n            min_col = min(white_cols)\n            max_col = max(white_cols)\n            width = max_col - min_col + 1\n\n            # 4.b.i & 4.b.ii Check row intersection and width\n            if white_rows.intersection(gray_rows) and width >= 2:\n                # 4.b.ii.1 & 4.b.ii.2 Calculate target column\n                target_col = min_col + 1\n\n                # 4.b.ii.3 Change pixels at target_col to magenta\n                for r, c in white_obj:\n                    if c == target_col:\n                        output_grid[r, c] = 6\n                        \n    # 5. Return the final grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4503,
    "candidates_token_count": 1457,
    "total_token_count": 5960,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 20.074028,
  "retries": null
}