{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque, Counter\n\n\"\"\"\nIdentifies all contiguous non-background objects in the input grid. \nCounts the number of distinct objects for each color.\nDetermines if each object is a 'solid rectangle' (its shape perfectly fills its bounding box).\nFinds if there is exactly one object that is both a solid rectangle AND the only object of its color.\nIf such an object exists, it is removed by changing its pixels to the background color (white, 0).\nOtherwise, the grid remains unchanged.\n\"\"\"\n\n# === Helper Functions ===\n\ndef find_objects(grid):\n    \"\"\"\n    Finds all contiguous objects of the same non-background color in the grid.\n\n    Args:\n        grid (np.ndarray): The input grid.\n\n    Returns:\n        list: A list of dictionaries, where each dictionary contains:\n              {'color': int, 'coords': set_of_coordinates (set of (row, col) tuples)}.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n    \n    for r in range(rows):\n        for c in range(cols):\n            color = grid[r, c]\n            # If pixel is non-background (not 0) and not visited yet\n            if color != 0 and not visited[r, c]:\n                obj_coords = set()\n                q = deque([(r, c)])\n                visited[r, c] = True\n                obj_color = color # Store the color of the current object being built\n                \n                # Breadth-First Search (BFS) to find connected pixels of the same color\n                while q:\n                    row, col = q.popleft()\n                    obj_coords.add((row, col))\n                    \n                    # Check 4 neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        # Check bounds, color match, and visited status\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] == obj_color and not visited[nr, nc]:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n                            \n                if obj_coords:\n                    # Store color as standard int for consistency\n                    objects.append({'color': int(obj_color), 'coords': obj_coords}) \n                    \n    return objects\n\ndef is_solid_rectangle(coords):\n    \"\"\"\n    Checks if a set of coordinates forms a solid rectangle.\n\n    Args:\n        coords (set): A set of (row, col) tuples representing the object's pixels.\n\n    Returns:\n        bool: True if the object is a solid rectangle, False otherwise.\n    \"\"\"\n    if not coords:\n        return False\n        \n    rows = [r for r, c in coords]\n    cols = [c for r, c in coords]\n    \n    min_r, max_r = min(rows), max(rows)\n    min_c, max_c = min(cols), max(cols)\n    \n    height = max_r - min_r + 1\n    width = max_c - min_c + 1\n    \n    # Check if the number of pixels in the object equals the area of its bounding box\n    return len(coords) == height * width\n\n# === Main Transformation Function ===\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule: remove the object that is both a solid\n    rectangle and the unique object of its color.\n    \"\"\"\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n    \n    # 1. Find all objects\n    objects = find_objects(input_grid)\n    if not objects:\n        return output_grid # No objects, nothing to remove\n\n    # 2. Check for solid rectangles (add property to each object)\n    for obj in objects:\n        obj['is_solid'] = is_solid_rectangle(obj['coords'])\n\n    # 3. Count objects by color\n    color_counts = Counter(obj['color'] for obj in objects)\n    # Ensure keys are standard ints if needed (Counter usually handles this)\n    python_color_counts = {int(k): int(v) for k, v in color_counts.items()}\n\n    # 4. Identify the target object\n    target_coords = None\n    target_found = False # Flag to ensure only one target is considered\n    for obj in objects:\n        color = obj['color']\n        is_solid = obj['is_solid']\n        is_unique_color_obj = (python_color_counts[color] == 1)\n        \n        # Check if this object meets both conditions\n        if is_solid and is_unique_color_obj:\n             # This assumes the ARC task constraints mean there will be at most one such object.\n             # If multiple could exist, the logic might need adjustment based on tie-breaking rules.\n            if not target_found:\n                target_coords = obj['coords']\n                target_found = True\n            else:\n                # If a second object matches, the rule is ambiguous or needs refinement.\n                # For now, we proceed assuming only zero or one target exists per ARC principles.\n                # Depending on strict interpretation, could raise error or return original grid.\n                # Let's stick to removing the first one found for now.\n                pass \n\n    # 5. Generate the output\n    if target_coords:\n        # Change the pixels of the target object to background color (0)\n        for r, c in target_coords:\n            # Basic bounds check (should be redundant given coords come from grid)\n            if 0 <= r < output_grid.shape[0] and 0 <= c < output_grid.shape[1]:\n                 output_grid[r, c] = 0\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 16606,
    "candidates_token_count": 1387,
    "total_token_count": 17993,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.344357,
  "retries": null
}