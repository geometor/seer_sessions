{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport copy\n\n# Color mapping for reference (not used directly in code)\n# COLOR_MAP = {\n#     0: 'white', 1: 'blue', 2: 'red', 3: 'green',\n#     4: 'yellow', 5: 'gray', 6: 'magenta', 7: 'orange',\n#     8: 'azure', 9: 'maroon'\n# }\nBLUE = 1\nMAGENTA = 6\nORANGE = 7\nAZURE = 8\n\ndef find_pixels(grid, color):\n    \"\"\"Finds all coordinates of pixels with a specific color.\"\"\"\n    coords = []\n    height, width = grid.shape\n    for r in range(height):\n        for c in range(width):\n            if grid[r, c] == color:\n                coords.append((r, c))\n    return coords\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on the relative positions of blue (1)\n    and magenta (6) pixels.\n\n    For each blue pixel, find a unique corresponding magenta pixel located\n    in the same row or column. Calculate the vector from the blue pixel\n    to the magenta pixel (dr, dc). Rotate this vector -90 degrees to get\n    (-dc, dr). Place an orange (7) pixel at the location determined by\n    adding this rotated vector to the blue pixel's coordinates, if the\n    location is within the grid bounds. The original magenta pixel is\n    replaced with the background color azure (8). Blue pixels remain\n    unchanged.\n    \"\"\"\n    # Convert input list of lists to a numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    output_grid = np.copy(input_np)\n    height, width = output_grid.shape\n\n    # Find coordinates of all blue and magenta pixels\n    blue_coords = find_pixels(input_np, BLUE)\n    magenta_coords = find_pixels(input_np, MAGENTA)\n\n    # Keep track of magenta pixels that have been paired and processed\n    processed_magenta = set()\n\n    # Iterate through each blue pixel to find its corresponding magenta partner\n    for r_b, c_b in blue_coords:\n        found_match = None\n        # Search for a magenta pixel in the same row or column\n        for r_m, c_m in magenta_coords:\n            # Skip if this magenta pixel has already been processed\n            if (r_m, c_m) in processed_magenta:\n                continue\n\n            # Check for row or column alignment\n            if r_m == r_b or c_m == c_b:\n                # Assuming a unique match exists for each blue pixel based on examples\n                found_match = (r_m, c_m)\n                break # Found the partner for this blue pixel\n\n        # If a unique, unprocessed partner was found\n        if found_match:\n            r_m, c_m = found_match\n            # Mark this magenta pixel as processed\n            processed_magenta.add(found_match)\n\n            # Calculate the delta vector from blue to magenta\n            dr = r_m - r_b\n            dc = c_m - c_b\n\n            # Calculate the target coordinates for the orange pixel (-90 degree rotation)\n            # New vector is (-dc, dr) relative to blue\n            r_o = r_b - dc\n            c_o = c_b + dr\n\n            # Remove the original magenta pixel by setting it to azure\n            output_grid[r_m, c_m] = AZURE\n\n            # Place the orange pixel if the target coordinates are within grid bounds\n            if 0 <= r_o < height and 0 <= c_o < width:\n                output_grid[r_o, c_o] = ORANGE\n\n    # Return the modified grid as a list of lists (standard ARC format)\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4233,
    "candidates_token_count": 901,
    "total_token_count": 5134,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 25.678922,
  "retries": null
}