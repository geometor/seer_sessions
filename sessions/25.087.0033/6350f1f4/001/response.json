{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef find_most_frequent_color(grid_np):\n    \"\"\"\n    Finds the most frequent non-white color in the grid.\n    If there's a tie in frequency, returns the color with the highest numerical value.\n    \"\"\"\n    # Flatten the grid and filter out white (0) pixels\n    non_white_pixels = grid_np[grid_np != 0]\n\n    if non_white_pixels.size == 0:\n        # Handle cases where the grid is all white or empty\n        return None \n\n    # Count frequencies of non-white colors\n    color_counts = Counter(non_white_pixels)\n\n    if not color_counts:\n        # Should not happen if non_white_pixels is not empty, but for safety\n        return None\n\n    # Find the maximum frequency\n    max_freq = 0\n    for color in color_counts:\n        if color_counts[color] > max_freq:\n            max_freq = color_counts[color]\n\n    # Find all colors with the maximum frequency\n    most_frequent_colors = []\n    for color in color_counts:\n        if color_counts[color] == max_freq:\n            most_frequent_colors.append(color)\n            \n    # If there's a tie, choose the color with the highest numerical value\n    target_color = max(most_frequent_colors)\n    \n    return target_color\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on the following rule:\n    1. Find the most frequent non-white color in the input grid. If there is a tie in frequency, \n       select the color with the highest numerical value among the tied colors. This is the 'target_color'.\n    2. Create the output grid by copying the input grid.\n    3. Iterate through each pixel of the output grid.\n    4. If a pixel's color is not white (0) and not the 'target_color', change its color to the 'target_color'.\n    5. White (0) pixels and pixels already having the 'target_color' remain unchanged.\n    \"\"\"\n    \n    # Convert input list of lists to numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    \n    # Determine the target color based on frequency and value\n    target_color = find_most_frequent_color(input_np)\n    \n    # If no non-white pixels were found, return the original grid\n    if target_color is None:\n        return input_grid\n\n    # Create a copy of the input grid to modify\n    output_np = np.copy(input_np)\n    \n    # Get grid dimensions\n    height, width = output_np.shape\n    \n    # Iterate through each cell in the grid\n    for r in range(height):\n        for c in range(width):\n            current_color = output_np[r, c]\n            # Check if the color is not white and not the target color\n            if current_color != 0 and current_color != target_color:\n                # Change the color to the target color\n                output_np[r, c] = target_color\n                \n    # Convert the result back to a list of lists\n    output_grid = output_np.tolist()\n    \n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2298,
    "candidates_token_count": 777,
    "total_token_count": 3075,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 18.570655,
  "retries": null
}