task_context:
  background_color: 7 # orange
  pattern_colors: [2, 4] # [red, yellow]
  pattern_height: 5
  minimum_output_height: 16

input_grid:
  properties:
    - height: H
    - width: W
    - pixels: 2D array of integers (colors)
  contains_foreground: boolean # True if any pixel is not the background_color

output_grid:
  properties:
    - height: H_out
    - width: W_out
    - pixels: 2D array of integers (colors)

transformation_logic:
  - description: Determine if the input grid contains any foreground pixels (pixels != background_color).
  - conditional:
      - if: input_grid.contains_foreground is False
        action: Return the input_grid unchanged.
      - if: input_grid.contains_foreground is True
        actions:
          - determine_output_dimensions:
              - W_out = input_grid.width (W)
              - H_out = max(minimum_output_height, input_grid.height) # max(16, H)
          - create_output_grid:
              - Initialize a grid of size H_out x W_out.
              - Fill with background_color.
          - calculate_pattern_width:
              - if W_out is even: PW = W_out - 6
              - if W_out is odd: PW = W_out - 8
              - PW = max(1, PW)
          - define_pattern_region:
              - rows: H_out - pattern_height to H_out - 1
              - columns: 0 to PW - 1
          - draw_pattern:
              - Within the pattern_region:
                - Iterate through relative coordinates (pr, pc) from (0, 0) to (pattern_height-1, PW-1).
                - Determine color for cell (pr, pc):
                  - yellow (4) if pc == (pattern_height - 1) - pr OR pc == (PW - 1) - ((pattern_height - 1) - pr)
                  - red (2) otherwise
                - Place color at absolute coordinates (H_out - pattern_height + pr, pc) in the output_grid.
          - return: The generated output_grid.