Task: Grid Upscaling with Pattern Insertion

Input_Grid:
  Properties:
    - Type: 2D array of integers (0-9 representing colors)
    - Size: Variable height and width (H_in, W_in)
    - Contains: Pixels with specific colors.

Output_Grid:
  Properties:
    - Type: 2D array of integers (0-9 representing colors)
    - Size: Scaled dimensions (H_out, W_out)
    - Derived_From: Input_Grid

Parameters:
  - Name: Scaling Factor (N)
    Value: Count of unique non-white (non-zero) colors in the Input_Grid.
    Calculation: `N = len(unique(Input_Grid[Input_Grid != 0]))`
  - Name: Output Dimensions
    Calculation:
      - `H_out = N * H_in`
      - `W_out = N * W_in`

Transformation_Rule:
  - For each pixel `P_in` at `(r, c)` in Input_Grid with color `C`:
      - Identify the corresponding `N x N` block `B_out` in Output_Grid, starting at `(N*r, N*c)`.
      - If `C` is non-white (`C > 0`):
          - Action: Fill `B_out` entirely with color `C`.
      - If `C` is white (`C == 0`):
          - Action 1: Fill `B_out` entirely with white (0).
          - Action 2: Set pixels on the anti-diagonal within `B_out` to red (2).
            - Anti-diagonal coordinates within the block (local coordinates `i, j` where `0 <= i < N`, `0 <= j < N`) satisfy `j = N - 1 - i`.
            - Corresponding Output_Grid coordinates: `(N*r + i, N*c + N - 1 - i)` for `i` from 0 to `N-1`.