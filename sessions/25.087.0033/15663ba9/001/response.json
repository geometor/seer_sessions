{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Tuple\n\n\"\"\"\nIdentifies different types of corners within non-white shapes based on the \nconfiguration of adjacent white (background) pixels and recolors them.\n\nRule 1: A non-white pixel is changed to red (2) if it has exactly two white \n        neighbors, and these neighbors are diagonally adjacent relative to the \n        pixel (e.g., North and East neighbors are white, or South and West are \n        white).\nRule 2: A non-white pixel is changed to yellow (4) if it has three or more \n        white neighbors.\nRule 3: Otherwise, the pixel retains its original color.\n\"\"\"\n\ndef get_neighbors_info(grid: np.ndarray, r: int, c: int) -> Tuple[int, List[Tuple[int, int]]]:\n    \"\"\"\n    Gets the count and relative positions of white neighbors for a given pixel.\n\n    Args:\n        grid: The input grid (numpy array).\n        r: Row index of the pixel.\n        c: Column index of the pixel.\n\n    Returns:\n        A tuple containing:\n        - white_neighbor_count: The number of white neighbors.\n        - white_neighbor_coords: A list of relative coordinates (dr, dc) for \n                                 each white neighbor.\n    \"\"\"\n    height, width = grid.shape\n    white_neighbor_count = 0\n    white_neighbor_coords = []\n    \n    # Define relative coordinates for 8 neighbors\n    neighbor_deltas = [\n        (-1, 0), (-1, 1), (0, 1), (1, 1), # N, NE, E, SE\n        (1, 0), (1, -1), (0, -1), (-1, -1) # S, SW, W, NW\n    ]\n\n    for dr, dc in neighbor_deltas:\n        nr, nc = r + dr, c + dc\n        # Check if neighbor is within grid bounds\n        if 0 <= nr < height and 0 <= nc < width:\n            if grid[nr, nc] == 0: # Check if neighbor is white\n                white_neighbor_count += 1\n                white_neighbor_coords.append((dr, dc))\n        else: # Treat out-of-bounds as white neighbors\n            white_neighbor_count += 1\n            white_neighbor_coords.append((dr, dc))\n            \n    return white_neighbor_count, white_neighbor_coords\n\ndef is_red_corner(white_neighbor_coords: List[Tuple[int, int]]) -> bool:\n    \"\"\"\n    Checks if the white neighbors form a configuration for a red corner.\n    \n    Red corner configurations (relative coordinates):\n    - N and E: (-1, 0) and (0, 1)\n    - S and E: (1, 0) and (0, 1)\n    - S and W: (1, 0) and (0, -1)\n    - N and W: (-1, 0) and (0, -1)\n\n    Args:\n        white_neighbor_coords: List of relative coordinates of white neighbors.\n\n    Returns:\n        True if the configuration matches a red corner, False otherwise.\n    \"\"\"\n    if len(white_neighbor_coords) != 2:\n        return False\n        \n    # Convert list of tuples to set of tuples for easier comparison\n    coord_set = set(white_neighbor_coords)\n\n    red_configs = [\n        {(-1, 0), (0, 1)}, # N, E\n        {(1, 0), (0, 1)},  # S, E\n        {(1, 0), (0, -1)}, # S, W\n        {(-1, 0), (0, -1)}  # N, W\n    ]\n\n    for config in red_configs:\n        if coord_set == config:\n            return True\n            \n    return False\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transforms the input grid by recoloring corner pixels based on neighbors.\n\n    Args:\n        input_grid: A list of lists representing the input grid.\n\n    Returns:\n        A list of lists representing the transformed output grid.\n    \"\"\"\n    # Convert input to numpy array for easier processing\n    input_array = np.array(input_grid, dtype=int)\n    height, width = input_array.shape\n    \n    # Initialize output_grid as a copy of the input\n    output_array = np.copy(input_array)\n\n    # Iterate through each pixel in the grid\n    for r in range(height):\n        for c in range(width):\n            # Skip white pixels\n            if input_array[r, c] == 0:\n                continue\n\n            # Analyze non-white pixels\n            original_color = input_array[r, c]\n            \n            # Get information about white neighbors\n            white_neighbor_count, white_neighbor_coords = get_neighbors_info(input_array, r, c)\n\n            # Apply coloring rules\n            # Rule 1: Check for red corners (exactly 2 specific diagonal white neighbors)\n            if white_neighbor_count == 2 and is_red_corner(white_neighbor_coords):\n                output_array[r, c] = 2 # Red\n            # Rule 2: Check for yellow corners (3 or more white neighbors)\n            elif white_neighbor_count >= 3:\n                output_array[r, c] = 4 # Yellow\n            # Rule 3: Otherwise, keep the original color (already handled by copy)\n            # else:\n            #     output_array[r, c] = original_color \n\n    # Convert the output numpy array back to a list of lists\n    output_grid = output_array.tolist()\n    \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4520,
    "candidates_token_count": 1349,
    "total_token_count": 5869,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.926817,
  "retries": null
}