{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransforms a grid by applying a shear transformation to the single non-white \nobject. The object is shifted left, with the amount of horizontal shift \ndecreasing for rows further down the object, relative to the object's top row.\n\nRule:\n1. Find the single non-white object and its bounding box (min_row, min_col, max_row, max_col).\n2. Calculate the horizontal gap before the object (`gap_before` = min_col).\n3. Calculate the horizontal gap after the object (`gap_after` = grid_width - 1 - max_col).\n4. Determine the maximum horizontal shift applied to the top row of the object: `max_shift = min(gap_before, gap_after * 2)`.\n5. For each object pixel at input position (r, c) with color 'color':\n    a. Calculate the row offset: `row_offset = r - min_row`.\n    b. Calculate the horizontal shift for this row: `h_shift = max(0, max_shift - row_offset)`.\n    c. Calculate the new column: `new_c = c - h_shift`.\n    d. The new row is `new_r = r`.\n    e. Place the `color` at `(new_r, new_c)` in the output grid.\n\"\"\"\n\ndef find_object_pixels_and_bbox(grid):\n    \"\"\"\n    Identifies all non-background (non-zero) pixels and their bounding box.\n\n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        tuple: A tuple containing:\n            - list: A list of tuples (row, column, color) for non-background pixels.\n            - dict: Bounding box {'min_row', 'min_col', 'max_row', 'max_col'}, \n                    or None if no object found.\n            Returns ([], None) if no object is found.\n    \"\"\"\n    object_pixels = []\n    min_row, min_col = float('inf'), float('inf')\n    max_row, max_col = float('-inf'), float('-inf')\n    has_object = False\n    height, width = grid.shape\n\n    for r in range(height):\n        for c in range(width):\n            color = grid[r, c]\n            if color != 0: # Assuming 0 is the background color (white)\n                object_pixels.append((r, c, color))\n                min_row = min(min_row, r)\n                min_col = min(min_col, c)\n                max_row = max(max_row, r)\n                max_col = max(max_col, c)\n                has_object = True\n\n    if not has_object:\n        return [], None\n        \n    bbox = {\n        'min_row': min_row,\n        'min_col': min_col,\n        'max_row': max_row,\n        'max_col': max_col\n    }\n    return object_pixels, bbox\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the shear transformation to the input grid.\n\n    Args:\n        input_grid (list or np.array): The input grid.\n\n    Returns:\n        np.array: The transformed output grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_grid_np = np.array(input_grid, dtype=int)\n    height, width = input_grid_np.shape\n\n    # Initialize the output grid with the background color (white, 0).\n    output_grid = np.zeros_like(input_grid_np)\n\n    # 1. Find the single non-white object and its bounding box.\n    object_pixels, bbox = find_object_pixels_and_bbox(input_grid_np)\n\n    # If no object is found, return the empty grid\n    if not bbox:\n        return output_grid\n\n    # Extract bounding box properties\n    min_row = bbox['min_row']\n    min_col = bbox['min_col']\n    max_col = bbox['max_col']\n    \n    # 2. Calculate the horizontal gap before the object.\n    gap_before = min_col\n\n    # 3. Calculate the horizontal gap after the object.\n    gap_after = width - 1 - max_col\n    \n    # 4. Determine the maximum horizontal shift amount for the top row.\n    max_shift = min(gap_before, gap_after * 2)\n\n    # 5. Iterate through each object pixel and apply the shear transformation.\n    for r, c, color in object_pixels:\n        # 5a. Calculate the row offset from the top of the object.\n        row_offset = r - min_row\n        \n        # 5b. Calculate the horizontal shift for this specific pixel's row.\n        # Ensure shift is non-negative.\n        h_shift = max(0, max_shift - row_offset)\n        \n        # 5c. Calculate the pixel's new column in the output grid.\n        new_c = c - h_shift\n        \n        # 5d. The pixel's row remains unchanged.\n        new_r = r\n        \n        # 5e. Place the color at the new coordinates in the output grid, \n        # ensuring it's within bounds.\n        if 0 <= new_r < height and 0 <= new_c < width:\n            output_grid[new_r, new_c] = color\n\n    # Return the completed output grid.\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 19467,
    "candidates_token_count": 1296,
    "total_token_count": 20763,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.779938,
  "retries": null
}