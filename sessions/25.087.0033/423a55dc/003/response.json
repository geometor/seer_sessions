{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTranslate a single non-white object horizontally based on its position relative \nto the side edges, keeping its vertical position unchanged.\n\nThe transformation identifies the single contiguous non-white object in the input grid. \nIt calculates the empty horizontal space (gap) before and after the object's \nbounding box. If the gap before is less than or equal to the gap after, \nthe object is shifted left to align its left edge with the grid's left edge. \nIf the gap before is greater than the gap after, the object is shifted left \nby half the size of the gap before (rounded down for the gap before + 1). \nThe object's vertical position remains the same. The output grid has the same \ndimensions as the input grid and is initially filled with the background color (white, 0).\n\"\"\"\n\nimport numpy as np\nimport math\n\ndef find_object_pixels(grid):\n    \"\"\"\n    Identifies all non-background (non-zero) pixels in the grid.\n\n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        list: A list of tuples, where each tuple contains (row, column, color) \n              for a non-background pixel. Returns an empty list if no object is found.\n    \"\"\"\n    object_pixels = []\n    height, width = grid.shape\n    for r in range(height):\n        for c in range(width):\n            color = grid[r, c]\n            if color != 0: # Assuming 0 is the background color\n                object_pixels.append((r, c, color))\n    return object_pixels\n\ndef calculate_bounding_box(object_pixels):\n    \"\"\"\n    Calculates the minimum and maximum row and column indices \n    of the bounding box containing the object pixels.\n\n    Args:\n        object_pixels (list): A list of (row, column, color) tuples.\n\n    Returns:\n        dict: A dictionary containing 'min_row', 'min_col', 'max_row', 'max_col', \n              or None if object_pixels is empty.\n    \"\"\"\n    if not object_pixels:\n        return None\n    \n    rows = [r for r, c, color in object_pixels]\n    cols = [c for r, c, color in object_pixels]\n    \n    return {\n        'min_row': min(rows),\n        'min_col': min(cols),\n        'max_row': max(rows),\n        'max_col': max(cols)\n    }\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by translating the single non-white object \n    horizontally based on its position relative to the side edges, \n    keeping its vertical position unchanged.\n\n    Args:\n        input_grid (list or np.array): The input grid represented as a list of lists or numpy array.\n\n    Returns:\n        np.array: The transformed output grid as a numpy array.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_grid_np = np.array(input_grid)\n    height, width = input_grid_np.shape\n\n    # 1. Initialize the output grid with the background color (white, 0).\n    output_grid = np.zeros_like(input_grid_np)\n\n    # 2. Identify all non-white pixels forming the object.\n    object_pixels = find_object_pixels(input_grid_np)\n\n    # If no object is found, return the empty grid\n    if not object_pixels:\n        return output_grid\n\n    # 3. Determine the bounding box of the object.\n    bbox = calculate_bounding_box(object_pixels)\n    min_col = bbox['min_col']\n    max_col = bbox['max_col']\n    \n    # 4. Calculate the horizontal gap before the object.\n    gap_before = min_col\n\n    # 5. Calculate the horizontal gap after the object.\n    gap_after = width - 1 - max_col\n\n    # 6. Determine the horizontal shift amount (shift_left_amount).\n    shift_left_amount = 0\n    if gap_before <= gap_after:\n        # a. If gap before is less than or equal to gap after, shift to left edge.\n        shift_left_amount = min_col \n    else:\n        # b. If gap before is greater than gap after, shift left by floor((gap_before + 1) / 2).\n        shift_left_amount = (gap_before + 1) // 2 # Integer division provides floor\n\n    # 7. For each non-background pixel in the input:\n    for r, c, color in object_pixels:\n        # a. Calculate its new column index.\n        new_c = c - shift_left_amount\n        # b. The row index remains unchanged.\n        new_r = r\n        \n        # c. Ensure the new coordinates are within the grid bounds\n        #    (This check is technically redundant if logic is perfect but safe)\n        if 0 <= new_r < height and 0 <= new_c < width:\n             # d. Set the pixel at the new coordinates in the output grid.\n            output_grid[new_r, new_c] = color\n\n    # 8. Return the completed output grid.\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7180,
    "candidates_token_count": 1229,
    "total_token_count": 8409,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.093592,
  "retries": null
}