{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nRecolor blue pixels (color 1) based on their minimum Manhattan distance 'd' to the nearest non-blue pixel. The new color is determined by a repeating sequence [1, 2, 3, 2] (blue, red, green, red), indexed by (d - 1) % 4. Non-blue pixels remain unchanged. This effectively creates distance-based color layers within blue shapes, starting with blue (color 1) at the border (distance 1).\n\"\"\"\n\nimport numpy as np\n\ndef calculate_min_manhattan_distance(r, c, target_coords):\n    \"\"\"\n    Calculates the minimum Manhattan distance from a point (r, c) to any point\n    in the target_coords list.\n\n    Args:\n        r (int): Row coordinate of the source point.\n        c (int): Column coordinate of the source point.\n        target_coords (list of tuples): A list of (row, col) coordinates of target points.\n\n    Returns:\n        int: The minimum Manhattan distance. Returns float('inf') if target_coords is empty.\n    \"\"\"\n    min_dist = float('inf')\n    # Optimization: if target_coords is very large, more advanced spatial indexing\n    # (like KD-trees) could be faster, but for typical ARC grid sizes, brute force is fine.\n    for tr, tc in target_coords:\n        dist = abs(r - tr) + abs(c - tc)\n        min_dist = min(min_dist, dist)\n        # Optimization: if distance is 1, it can't be smaller for d > 0 case\n        if min_dist == 1:\n             break\n    return min_dist\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by recoloring blue pixels based on their\n    Manhattan distance to the nearest non-blue pixel using a cyclic color map.\n\n    Args:\n        input_grid (list of lists): The input grid representing pixel colors.\n\n    Returns:\n        list of lists: The transformed output grid.\n    \"\"\"\n    # Convert input to numpy array for efficient operations\n    input_np = np.array(input_grid, dtype=int)\n    # Initialize output grid as a copy of the input\n    output_np = np.copy(input_np)\n    height, width = input_np.shape\n\n    # Define the color sequence based on distance (d)\n    # d=1 -> index (1-1)%4=0 -> color 1 (blue)\n    # d=2 -> index (2-1)%4=1 -> color 2 (red)\n    # d=3 -> index (3-1)%4=2 -> color 3 (green)\n    # d=4 -> index (4-1)%4=3 -> color 2 (red)\n    # d=5 -> index (5-1)%4=0 -> color 1 (blue) ...\n    color_sequence = [1, 2, 3, 2] \n\n    # Find coordinates of all non-blue pixels (color != 1)\n    # These are the \"target\" pixels to measure distance from.\n    non_blue_coords = list(zip(*np.where(input_np != 1)))\n\n    # If there are no non-blue pixels, the entire grid must be blue.\n    # In this scenario, the distance is undefined or infinite. Based on the\n    # problem structure, non-blue background pixels are expected. If not,\n    # returning the original grid might be a reasonable fallback.\n    if not non_blue_coords:\n        # This case is unlikely given the examples but handled for robustness.\n        return input_grid # Return original grid if no non-blue pixels exist\n\n    # Iterate through each pixel in the grid\n    for r in range(height):\n        for c in range(width):\n            # Check if the current pixel is blue\n            if input_np[r, c] == 1:\n                # Calculate the minimum Manhattan distance to the nearest non-blue pixel\n                min_dist = calculate_min_manhattan_distance(r, c, non_blue_coords)\n                \n                # Distance 'd' must be >= 1 for a blue pixel if non-blue exist.\n                if min_dist > 0:\n                    # Calculate the index into the color sequence using (d - 1) % 4\n                    sequence_index = (min_dist - 1) % 4\n                    \n                    # Assign the new color based on the calculated distance index\n                    output_np[r, c] = color_sequence[sequence_index]\n                # else: min_dist == 0 case is impossible for a blue pixel when non-blue exist.\n            # else: Non-blue pixels remain unchanged (already handled by np.copy)\n\n    # Convert the result back to a list of lists\n    output_grid = output_np.tolist()\n    \n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8114,
    "candidates_token_count": 1116,
    "total_token_count": 9230,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.889769,
  "retries": null
}