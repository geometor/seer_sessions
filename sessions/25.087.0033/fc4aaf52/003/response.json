{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nIdentifies a single non-background object (assuming background is Azure/8).\nChecks if the object contains both Blue (1) and Red (2) pixels.\nCreates two copies of this object. \nIf the object contains both Blue and Red, swaps these two colors in both copies.\nDetermines two shift vectors based on the color swap condition:\n- Shift A: Always (4 rows down, 0 columns right).\n- Shift B: (0 rows down, 5 columns right) if swap occurred, otherwise (0 rows down, 3 columns right).\nPlaces the first copy (Copy A) shifted by Shift A from the original object's top-left position.\nPlaces the second copy (Copy B) shifted by Shift B from the original object's top-left position.\nThe output grid has the same dimensions as the input, initialized with the background color, \nand then populated with the two potentially color-swapped and shifted copies.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by duplicating, shifting, and potentially \n    color-swapping a single non-background object based on specific rules.\n\n    Args:\n        input_grid (list[list[int]]): The input grid.\n\n    Returns:\n        list[list[int]]: The transformed output grid.\n    \"\"\"\n    input_np = np.array(input_grid, dtype=int)\n    rows, cols = input_np.shape\n    background_color = 8  # Azure is the background color\n\n    # Initialize the output grid with the background color\n    output_grid = np.full((rows, cols), background_color, dtype=int)\n\n    # --- Step 1: Find the single non-background object ---\n    object_pixels = []\n    object_colors = set()\n    min_row, min_col = rows, cols # Initialize to max possible values\n    \n    for r in range(rows):\n        for c in range(cols):\n            color = input_np[r, c]\n            if color != background_color:\n                object_pixels.append((r, c))\n                object_colors.add(color)\n                min_row = min(min_row, r)\n                min_col = min(min_col, c)\n\n    # If there's no object (only background), return the empty output grid\n    if not object_pixels:\n        return output_grid.tolist()\n\n    # Extract the object's pattern relative to its top-left corner\n    relative_pattern = []\n    for r, c in object_pixels:\n        color = input_np[r, c]\n        # Store relative coordinates and original color\n        relative_pattern.append(((r - min_row, c - min_col), color)) \n\n    # --- Step 2: Check if color swapping is needed ---\n    # Condition: Both Blue (1) and Red (2) must be present in the object\n    needs_swap = (1 in object_colors and 2 in object_colors)\n\n    # --- Step 3: Determine the shift vectors ---\n    shift_A = (4, 0)  # Always (delta_row=4, delta_col=0)\n    if needs_swap:\n        shift_B = (0, 5)  # (delta_row=0, delta_col=5) if swap occurred\n    else:\n        shift_B = (0, 3)  # (delta_row=0, delta_col=3) if no swap occurred\n\n    # --- Step 4: Place the two copies onto the output grid ---\n    for (rel_r, rel_c), original_color in relative_pattern:\n        \n        # Determine the output color (apply swap if needed)\n        output_color = original_color\n        if needs_swap:\n            if original_color == 1:\n                output_color = 2\n            elif original_color == 2:\n                output_color = 1\n        \n        # Calculate target position for Copy A and place pixel\n        target_r_A = min_row + rel_r + shift_A[0]\n        target_c_A = min_col + rel_c + shift_A[1]\n        if 0 <= target_r_A < rows and 0 <= target_c_A < cols:\n            output_grid[target_r_A, target_c_A] = output_color\n\n        # Calculate target position for Copy B and place pixel\n        target_r_B = min_row + rel_r + shift_B[0]\n        target_c_B = min_col + rel_c + shift_B[1]\n        if 0 <= target_r_B < rows and 0 <= target_c_B < cols:\n            output_grid[target_r_B, target_c_B] = output_color\n\n    # --- Step 5: Return the final grid ---\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 12716,
    "candidates_token_count": 1134,
    "total_token_count": 13850,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 17.123089,
  "retries": null
}