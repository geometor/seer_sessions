{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Tuple\n\n\"\"\"\nIdentifies the largest solid rectangle composed of a single non-white color in the input grid. \nThis rectangle is considered the 'frame'. The function then extracts the content \n(the subgrid) located strictly inside this frame, excluding the frame pixels themselves.\nThe extracted subgrid is returned as the output.\n\"\"\"\n\ndef _is_solid_rectangle(grid: np.ndarray, color: int, r1: int, c1: int, r2: int, c2: int) -> bool:\n    \"\"\"\n    Checks if the specified rectangular region in the grid is solidly filled with the given color.\n\n    Args:\n        grid: The input grid as a numpy array.\n        color: The color value to check for.\n        r1: Minimum row index (inclusive).\n        c1: Minimum column index (inclusive).\n        r2: Maximum row index (inclusive).\n        c2: Maximum column index (inclusive).\n\n    Returns:\n        True if the region is a solid rectangle of the specified color, False otherwise.\n    \"\"\"\n    if r1 < 0 or r1 >= grid.shape[0] or r2 < 0 or r2 >= grid.shape[0] or \\\n       c1 < 0 or c1 >= grid.shape[1] or c2 < 0 or c2 >= grid.shape[1] or \\\n       r1 > r2 or c1 > c2:\n        return False # Invalid coordinates\n\n    # Check if all cells within the bounds match the color\n    return np.all(grid[r1:r2+1, c1:c2+1] == color)\n\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Extracts the content inside the largest solid non-white rectangular frame in the grid.\n\n    Args:\n        input_grid: A list of lists representing the input grid.\n\n    Returns:\n        A list of lists representing the extracted content subgrid, or an empty list if no suitable frame is found.\n    \"\"\"\n    grid = np.array(input_grid, dtype=int)\n    height, width = grid.shape\n\n    # Find unique non-white colors present in the grid\n    # White (0) cannot be the frame color\n    potential_frame_colors = np.unique(grid[grid != 0])\n\n    max_area = -1\n    best_frame_coords = None # Store as (min_row, min_col, max_row, max_col)\n\n    # Iterate through each potential frame color\n    for color in potential_frame_colors:\n        # Find all coordinates where this color appears\n        rows, cols = np.where(grid == color)\n\n        if rows.size == 0:  # No pixels of this color found\n            continue\n\n        # Determine the bounding box of this color\n        min_r, max_r = rows.min(), rows.max()\n        min_c, max_c = cols.min(), cols.max()\n\n        # Check if this bounding box forms a solid rectangle of the current color\n        if _is_solid_rectangle(grid, color, min_r, min_c, max_r, max_c):\n            # Calculate the area of this solid rectangle\n            area = (max_r - min_r + 1) * (max_c - min_c + 1)\n\n            # Update if this is the largest solid rectangle found so far\n            if area > max_area:\n                max_area = area\n                best_frame_coords = (min_r, min_c, max_r, max_c)\n\n    # If a frame was found\n    if best_frame_coords:\n        min_r, min_c, max_r, max_c = best_frame_coords\n\n        # Check if the frame has inner content (i.e., it's at least 3x3)\n        if max_r > min_r + 1 and max_c > min_c + 1:\n            # Extract the content inside the frame\n            # The slice end indices are exclusive, so max_r and max_c work directly\n            content_grid = grid[min_r + 1 : max_r, min_c + 1 : max_c]\n            # Convert the numpy array back to a list of lists\n            output_grid = content_grid.tolist()\n            return output_grid\n        else:\n            # Frame exists but is too small to contain anything (e.g., a line or 2xN rect)\n            # Return empty grid according to ARC convention for this case\n             return [] \n    else:\n        # No suitable solid rectangular frame found\n        # Return empty grid according to ARC convention for failure/no applicable transformation\n        return []\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4012,
    "candidates_token_count": 1090,
    "total_token_count": 5102,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 17.599964,
  "retries": null
}