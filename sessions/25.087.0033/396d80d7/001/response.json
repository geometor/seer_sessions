{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef transform(input_grid):\n    \"\"\"\n    Identifies the background color (most frequent color) and two non-background colors.\n    Determines the 'frame color' (most frequent non-background color) and the 'inner color' (least frequent non-background color).\n    Initializes the output grid as a copy of the input grid.\n    Iterates through each pixel of the input grid. If a pixel is the background color and has at least one neighbor (orthogonal or diagonal) that is the 'frame color', that pixel's color in the output grid is changed to the 'inner color'.\n    Otherwise, the pixel retains its original color.\n    \"\"\"\n    input_np = np.array(input_grid, dtype=int)\n    height, width = input_np.shape\n    output_np = input_np.copy()\n\n    # 1. Identify background color (most frequent)\n    colors, counts = np.unique(input_np, return_counts=True)\n    background_color = colors[np.argmax(counts)]\n\n    # 2. Identify non-background colors and their counts\n    non_background_colors = {}\n    for r in range(height):\n        for c in range(width):\n            color = input_np[r, c]\n            if color != background_color:\n                non_background_colors[color] = non_background_colors.get(color, 0) + 1\n\n    # Check if we have exactly two non-background colors as expected\n    if len(non_background_colors) != 2:\n        # Handle error or unexpected input - for now, return input copy\n        # In a real scenario, might raise an error or have a default behavior\n        # Based on the examples, we expect exactly two.\n        print(f\"Warning: Expected 2 non-background colors, found {len(non_background_colors)}. Returning copy.\")\n        return output_np.tolist() \n        \n    # 3. Determine frame_color (most frequent non-bg) and inner_color (least frequent non-bg)\n    sorted_non_bg = sorted(non_background_colors.items(), key=lambda item: item[1])\n    inner_color = sorted_non_bg[0][0]\n    frame_color = sorted_non_bg[1][0]\n\n    # 4. Iterate through grid and apply transformation\n    for r in range(height):\n        for c in range(width):\n            # 5. Check if the current pixel is background color\n            if input_np[r, c] == background_color:\n                found_frame_neighbor = False\n                # 6. Check all 8 neighbors\n                for dr in [-1, 0, 1]:\n                    for dc in [-1, 0, 1]:\n                        if dr == 0 and dc == 0:\n                            continue  # Skip self\n\n                        nr, nc = r + dr, c + dc\n\n                        # 7. Check boundaries\n                        if 0 <= nr < height and 0 <= nc < width:\n                            # 8. Check if neighbor has the frame color\n                            if input_np[nr, nc] == frame_color:\n                                # 9. Change output pixel to inner color and break neighbor check\n                                output_np[r, c] = inner_color\n                                found_frame_neighbor = True\n                                break  # Found one, no need to check more neighbors\n                    if found_frame_neighbor:\n                        break # Break outer neighbor loop as well\n\n    # 10. Return the modified grid as a list of lists\n    return output_np.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4184,
    "candidates_token_count": 830,
    "total_token_count": 5014,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.478601,
  "retries": null
}