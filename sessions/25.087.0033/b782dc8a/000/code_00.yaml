task_description: Replace white pixels with a checkerboard pattern derived from two other colors present in the input, using azure pixels as static barriers.

elements:
  - element: grid
    description: A 2D array of pixels representing colors.
  - element: pixel
    properties:
      - color: Integer from 0-9.
      - position: (row, column) coordinates.
      - type:
          - background: white (0) pixels that are subject to change.
          - barrier: azure (8) pixels that remain static.
          - fill_source: Non-white, non-barrier pixels present in the input (e.g., blue(1)/yellow(4) or green(3)/red(2)). These also remain static but define the fill colors.
          - fill_target: Pixels in the output that were originally white but are now one of the fill colors.
  - element: checkerboard_pattern
    properties:
      - based_on: Parity of the sum of pixel coordinates (row + col).
      - colors: Determined by the two fill_source colors found in the input grid.

relationships:
  - relationship: parity_to_color_assignment
    description: >
      The parity of (row + col) determines which of the two fill colors
      replaces a white pixel. The numerically lower fill color corresponds
      to even parity (0), and the numerically higher fill color corresponds
      to odd parity (1).
  - relationship: static_elements
    description: >
      Barrier pixels (azure/8) and the original fill_source pixels
      maintain their color and position from input to output.

actions:
  - action: identify_colors
    description: >
      Scan the input grid to find the barrier color (azure/8) and the two
      unique fill_source colors (excluding white/0 and azure/8).
  - action: sort_fill_colors
    description: >
      Determine which fill_source color is numerically lower (`color_low`)
      and which is numerically higher (`color_high`).
  - action: apply_pattern
    description: >
      Iterate through each pixel of the input grid. If a pixel is white (0),
      calculate `(row + col) % 2`. If the result is 0, set the output pixel
      to `color_low`. If the result is 1, set the output pixel to `color_high`.
      Otherwise, copy the input pixel color to the output.