{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by performing a constrained flood fill initiated by red pixels in the bottom row.\n\n    1. Identify red pixels (value 2) in the bottom row (\"triggers\").\n    2. Find all white pixels (value 0) located strictly above the bottom row that are 8-way adjacent to any trigger pixel. These are the starting points for the flood fill.\n    3. Perform a breadth-first search (BFS) flood fill starting simultaneously from all these identified starting points.\n    4. The fill propagates 4-directionally (up, down, left, right) only into other white pixels within the input grid.\n    5. The fill propagation is constrained:\n        - It cannot enter the bottom row (row index must be less than height - 1).\n        - It is blocked by any non-white pixel (value != 0).\n    6. All white pixels visited by this constrained flood fill (including the starting points) are changed to red (value 2) in the output grid.\n    7. Pixels not visited by the fill, and pixels in the bottom row, retain their original colors from the input grid.\n    \"\"\"\n    input_np = np.array(input_grid, dtype=int)\n    output_grid = np.copy(input_np) # Initialize output as a copy of input\n    height, width = input_np.shape\n\n    # Handle grids too small for the operation\n    if height <= 1:\n        return output_grid.tolist()\n\n    # --- Step 1: Identify trigger coordinates ---\n    trigger_coords = []\n    last_row_idx = height - 1\n    for c in range(width):\n        if input_np[last_row_idx, c] == 2: # Check for red color (2)\n            trigger_coords.append((last_row_idx, c))\n\n    # If no triggers found, return the original grid copy\n    if not trigger_coords:\n        return output_grid.tolist()\n\n    # --- Step 2: Find initial white fill cells ---\n    # These are white cells (0) above the bottom row (r < last_row_idx)\n    # that are 8-way adjacent to any trigger cell.\n    start_cells = set()\n    for tr, tc in trigger_coords:\n        # Check 8 neighbors (relative coordinates)\n        for dr in [-1, 0, 1]:\n            for dc in [-1, 0, 1]:\n                if dr == 0 and dc == 0:\n                    continue # Skip the trigger cell itself\n\n                nr, nc = tr + dr, tc + dc # Calculate neighbor coordinates\n\n                # Check if neighbor is within grid bounds AND strictly above the bottom row\n                if 0 <= nr < last_row_idx and 0 <= nc < width:\n                    # Check if the neighbor cell in the INPUT grid is white (0)\n                    if input_np[nr, nc] == 0:\n                        start_cells.add((nr, nc)) # Add valid starting cell to the set\n\n    # If no valid starting cells found adjacent to triggers, return original grid copy\n    if not start_cells:\n        return output_grid.tolist()\n\n    # --- Step 3, 4, 5, 6: Perform BFS flood fill ---\n    queue = deque(list(start_cells)) # Initialize queue with unique starting cells\n    visited = set(start_cells) # Track all cells added to queue to prevent cycles/reprocessing\n\n    while queue:\n        r, c = queue.popleft() # Get the next cell to process\n\n        # Change the color of the current cell to red (2) in the OUTPUT grid\n        output_grid[r, c] = 2\n\n        # Explore 4-directional neighbors for further filling\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]: # Right, Left, Down, Up\n            nr, nc = r + dr, c + dc\n\n            # Check neighbor validity for fill propagation:\n            # 1. Within grid bounds\n            # 2. Strictly above the bottom row (nr < last_row_idx)\n            # 3. Is white in the INPUT grid (input_np[nr, nc] == 0)\n            # 4. Has not been visited/added to queue before\n            if 0 <= nr < last_row_idx and 0 <= nc < width:\n                neighbor = (nr, nc)\n                if input_np[nr, nc] == 0 and neighbor not in visited:\n                    visited.add(neighbor) # Mark as visited\n                    queue.append(neighbor) # Add to queue for processing\n\n    # --- Step 7: Return the modified grid ---\n    # Pixels not visited remain as they were copied from the input initially.\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 32160,
    "candidates_token_count": 1114,
    "total_token_count": 33274,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 95.022474,
  "retries": null
}