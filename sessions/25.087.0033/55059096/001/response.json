{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\ndef find_objects(grid, color):\n    \"\"\"\n    Finds connected components (objects) of a specific color in a grid.\n\n    Args:\n        grid (np.array): The input grid.\n        color (int): The color of the objects to find.\n\n    Returns:\n        tuple: A tuple containing:\n            - object_map (np.array): A grid where each cell contains the ID\n              of the object it belongs to (-1 if none).\n            - objects (dict): A dictionary mapping object ID to a set of\n              (row, col) coordinates belonging to that object.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n    object_map = np.full((rows, cols), -1, dtype=int)\n    objects = {}\n    current_object_id = 0\n\n    for r in range(rows):\n        for c in range(cols):\n            # Start BFS if we find a pixel of the target color that hasn't been visited\n            if grid[r, c] == color and not visited[r, c]:\n                obj_coords = set()\n                q = deque([(r, c)])\n                visited[r, c] = True\n                object_map[r, c] = current_object_id\n                obj_coords.add((r, c))\n\n                while q:\n                    curr_r, curr_c = q.popleft()\n                    # Check 4 orthogonal neighbors for connectivity within the object\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = curr_r + dr, curr_c + dc\n                        # Check bounds and if the neighbor is the same color and unvisited\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] == color and not visited[nr, nc]:\n                            visited[nr, nc] = True\n                            object_map[nr, nc] = current_object_id\n                            obj_coords.add((nr, nc))\n                            q.append((nr, nc))\n                \n                # Store the found object and increment the ID for the next one\n                if obj_coords:\n                    objects[current_object_id] = obj_coords\n                    current_object_id += 1\n\n    return object_map, objects\n\ndef transform(input_grid):\n    \"\"\"\n    Identifies green (3) plus-shaped objects in the input grid.\n    Places a red (2) pixel in any white (0) cell that is adjacent (orthogonally\n    or diagonally) to pixels belonging to at least two different green objects.\n    Keeps the original green objects intact.\n    \"\"\"\n    # Convert input list of lists to numpy array for efficient processing\n    grid = np.array(input_grid, dtype=int)\n    rows, cols = grid.shape\n    # Initialize the output grid as a copy of the input\n    output_grid = grid.copy()\n\n    # Define the target color (green) and the fill color (red)\n    target_color = 3\n    fill_color = 2\n    background_color = 0\n\n    # Find all connected green objects and create a map of pixel coordinates to object IDs\n    object_map, objects = find_objects(grid, target_color)\n    num_objects = len(objects)\n\n    # If there are fewer than two green objects, no red pixels can be placed based on the rule\n    if num_objects < 2:\n        return output_grid.tolist()\n\n    # Iterate through each cell in the grid\n    for r in range(rows):\n        for c in range(cols):\n            # Consider only background (white) cells for potential modification\n            if grid[r, c] == background_color:\n                neighbor_object_ids = set()\n                # Check all 8 neighbors (orthogonal and diagonal)\n                for dr in [-1, 0, 1]:\n                    for dc in [-1, 0, 1]:\n                        # Skip the cell itself\n                        if dr == 0 and dc == 0:\n                            continue\n                        \n                        nr, nc = r + dr, c + dc\n                        \n                        # Check if neighbor is within grid bounds\n                        if 0 <= nr < rows and 0 <= nc < cols:\n                            # Check if the neighbor is part of a green object\n                            neighbor_obj_id = object_map[nr, nc]\n                            if neighbor_obj_id != -1: # -1 means not part of any found object\n                                neighbor_object_ids.add(neighbor_obj_id)\n\n                # If the white cell is adjacent to two or more distinct green objects, change its color to red\n                if len(neighbor_object_ids) >= 2:\n                    output_grid[r, c] = fill_color\n\n    # Convert the final numpy array back to a list of lists before returning\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3186,
    "candidates_token_count": 1147,
    "total_token_count": 4333,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 24.375997,
  "retries": null
}