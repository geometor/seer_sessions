task_description: Reflect a yellow object based on properties and position of a magenta object.
objects:
  - color: 4
    name: yellow_object
    description: The primary object to be transformed (reflected).
  - color: 6
    name: magenta_object
    description: The control object determining the transformation type and axis.
  - color: 0
    name: background
    description: The background color.

transformations:
  - step: 1
    action: find_objects
    inputs: [input_grid]
    outputs: [yellow_object_pixels, magenta_object_pixels]
    description: Identify all pixels belonging to the yellow (4) and magenta (6) objects.
  - step: 2
    action: calculate_bounding_boxes
    inputs: [yellow_object_pixels, magenta_object_pixels]
    outputs: [yellow_bbox, magenta_bbox]
    description: Determine the minimum bounding box for each object (min_row, max_row, min_col, max_col).
  - step: 3
    action: check_objects_exist
    inputs: [yellow_bbox, magenta_bbox]
    outputs: [proceed_flag]
    description: If either yellow or magenta object is missing, skip reflection.
  - step: 4
    action: determine_reflection_type
    inputs: [magenta_bbox]
    outputs: [reflection_type] # 'Horizontal' or 'Vertical'
    condition: proceed_flag is true
    description: Calculate magenta bbox height (H) and width (W). If H >= W, type is Horizontal. If H < W, type is Vertical.
  - step: 5
    action: determine_reflection_axis
    inputs: [reflection_type, yellow_bbox, magenta_bbox]
    outputs: [axis_type, axis_value] # e.g., axis_type='vertical', axis_value=6.5 or axis_type='horizontal', axis_value=3.5
    condition: proceed_flag is true
    description: >
      If Horizontal: Axis is vertical, right of yellow_bbox (x = max_c_y + 0.5).
      If Vertical: Compare horizontal centers (yc = (min_c_y+max_c_y)/2, mc = (min_c_m+max_c_m)/2).
      If mc > yc: Axis is horizontal, above yellow_bbox (y = min_r_y - 0.5).
      If mc <= yc: Axis is horizontal, below yellow_bbox (y = max_r_y + 0.5).
  - step: 6
    action: prepare_output_grid
    inputs: [input_grid]
    outputs: [output_grid]
    description: Create a copy of the input grid and remove the magenta object (set magenta pixels to 0).
  - step: 7
    action: apply_reflection
    inputs: [output_grid, yellow_object_pixels, reflection_type, axis_type, axis_value, yellow_bbox]
    outputs: [output_grid]
    condition: proceed_flag is true
    description: >
      For each pixel (r, c) in yellow_object_pixels:
      Calculate the reflected coordinate (r', c') based on axis_type and axis_value.
        - Horizontal Reflection (axis x = X): r' = r, c' = X + (X - c) = 2*X - c = (max_c_y + 0.5) + ((max_c_y + 0.5) - c) -> simplified: c' = max_c_y + (max_c_y - c + 1)
        - Vertical Reflection Above (axis y = Y): r' = Y - (r - Y) = 2*Y - r = (min_r_y - 0.5) - (r - (min_r_y - 0.5)) -> simplified: r' = min_r_y - (r - min_r_y + 1)
        - Vertical Reflection Below (axis y = Y): r' = Y + (Y - r) = 2*Y - r = (max_r_y + 0.5) + ((max_r_y + 0.5) - r) -> simplified: r' = max_r_y + (max_r_y - r + 1)
      If (r', c') is within grid bounds, set output_grid[r', c'] = 4 (yellow).
  - step: 8
    action: finalize_output
    inputs: [output_grid]
    outputs: [final_output_grid]
    description: Return the modified output_grid.
