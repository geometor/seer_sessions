{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nDraws vertical and horizontal lines extending from each non-white pixel \nto the nearest corresponding grid edge. The lines take the color of the \nsource pixel. If a pixel is equidistant between two opposing edges, \nthe line extends towards the top or left edge.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by drawing lines from non-white pixels.\n\n    Args:\n        input_grid (list[list[int]]): The input grid represented as a 2D list.\n\n    Returns:\n        list[list[int]]: The transformed grid as a 2D list.\n    \"\"\"\n    # Convert input to a numpy array for easier manipulation\n    grid = np.array(input_grid, dtype=int)\n    # Initialize output_grid as a copy of the input grid\n    output_grid = grid.copy()\n    \n    # Get grid dimensions\n    height, width = grid.shape\n\n    # Find the locations and colors of all non-white source pixels\n    source_pixels = []\n    for r in range(height):\n        for c in range(width):\n            color = grid[r, c]\n            if color != 0:\n                source_pixels.append({'row': r, 'col': c, 'color': color})\n\n    # Process each source pixel\n    for pixel_info in source_pixels:\n        r, c, color = pixel_info['row'], pixel_info['col'], pixel_info['color']\n\n        # --- Vertical Line Drawing ---\n        # Calculate distances to top and bottom edges\n        dist_top = r\n        dist_bottom = height - 1 - r\n\n        # Determine vertical direction and draw line\n        if dist_top <= dist_bottom:\n            # Draw line upwards from row 0 to the pixel's row (inclusive)\n            output_grid[0 : r + 1, c] = color\n        else:\n            # Draw line downwards from the pixel's row to the bottom row (inclusive)\n            output_grid[r : height, c] = color\n\n        # --- Horizontal Line Drawing ---\n        # Calculate distances to left and right edges\n        dist_left = c\n        dist_right = width - 1 - c\n\n        # Determine horizontal direction and draw line\n        if dist_left <= dist_right:\n            # Draw line leftwards from column 0 to the pixel's column (inclusive)\n            output_grid[r, 0 : c + 1] = color\n        else:\n            # Draw line rightwards from the pixel's column to the rightmost column (inclusive)\n            output_grid[r, c : width] = color\n\n    # Convert the final numpy array back to a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4918,
    "candidates_token_count": 629,
    "total_token_count": 5547,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 8.591138,
  "retries": null
}