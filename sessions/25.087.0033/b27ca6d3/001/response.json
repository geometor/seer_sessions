{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid by applying the following rule:\n1. Identify all red pixels (color 2).\n2. Determine which red pixels have at least one adjacent red neighbor (including diagonals). Call these 'paired' red pixels.\n3. Initialize an output grid as a copy of the input grid.\n4. For every white pixel (color 0) in the input grid, check its 8 neighbors (including diagonals).\n5. If any neighbor of a white pixel is a 'paired' red pixel, change that white pixel to green (color 3) in the output grid.\n6. Red pixels from the input remain red in the output.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the aura transformation rule to the input grid.\n\n    Args:\n        input_grid (np.ndarray): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.ndarray: A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    # Initialize output_grid as a copy of the input grid\n    output_grid = input_grid.copy()\n    height, width = input_grid.shape\n\n    # Find all red pixel coordinates\n    red_coords = set(tuple(coord) for coord in np.argwhere(input_grid == 2))\n\n    # Identify 'paired' red pixels (red pixels with at least one red neighbor)\n    paired_red_coords = set()\n    for r, c in red_coords:\n        has_red_neighbor = False\n        # Check 8 neighbors\n        for dr in [-1, 0, 1]:\n            for dc in [-1, 0, 1]:\n                if dr == 0 and dc == 0:\n                    continue  # Skip self\n\n                nr, nc = r + dr, c + dc\n\n                # Check bounds\n                if 0 <= nr < height and 0 <= nc < width:\n                    # Check if neighbor is red\n                    if (nr, nc) in red_coords:\n                        has_red_neighbor = True\n                        break  # Found a red neighbor, no need to check more for this pixel\n            if has_red_neighbor:\n                break # Exit outer loop too\n        \n        if has_red_neighbor:\n            paired_red_coords.add((r, c))\n\n    # Iterate through the grid to find white pixels adjacent to 'paired' red pixels\n    for r in range(height):\n        for c in range(width):\n            # Check if the current pixel is white\n            if input_grid[r, c] == 0:\n                should_turn_green = False\n                # Check 8 neighbors\n                for dr in [-1, 0, 1]:\n                    for dc in [-1, 0, 1]:\n                        if dr == 0 and dc == 0:\n                            continue # Skip self\n\n                        nr, nc = r + dr, c + dc\n\n                        # Check bounds\n                        if 0 <= nr < height and 0 <= nc < width:\n                            # Check if neighbor is a 'paired' red pixel\n                            if (nr, nc) in paired_red_coords:\n                                should_turn_green = True\n                                break # Found a paired red neighbor, no need to check more\n                    if should_turn_green:\n                        break # Exit outer loop too\n                \n                # If a paired red neighbor was found, change the white pixel to green\n                if should_turn_green:\n                    output_grid[r, c] = 3\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4292,
    "candidates_token_count": 801,
    "total_token_count": 5093,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.118741,
  "retries": null
}