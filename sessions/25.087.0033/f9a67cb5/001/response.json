{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nPerform a flood fill operation starting from all initial red pixels (color 2).\nThe fill color is red (2).\nThe fill spreads to adjacent (up, down, left, right) white pixels (color 0).\nThe fill is blocked by azure pixels (color 8) and the grid boundaries.\nThe original red and azure pixels remain unchanged.\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef transform(input_grid):\n    \"\"\"\n    Applies a flood fill starting from red pixels, constrained by azure pixels.\n\n    Args:\n        input_grid (list of list of int): The input grid.\n\n    Returns:\n        list of list of int: The transformed grid.\n    \"\"\"\n    # Convert input grid to a NumPy array for easier manipulation\n    grid = np.array(input_grid, dtype=int)\n    output_grid = grid.copy() # Initialize output_grid as a copy of the input\n    height, width = grid.shape\n\n    # Initialize a queue for the flood fill algorithm\n    queue = deque()\n\n    # Find all initial red pixels (color 2) and add them to the queue\n    # These are the starting points for the fill\n    for r in range(height):\n        for c in range(width):\n            if grid[r, c] == 2:\n                # We add the initial red seeds to the queue to start the process,\n                # but we don't need to change their color as they are already red.\n                # The algorithm will explore their neighbors.\n                queue.append((r, c))\n\n    # Define the four cardinal directions for neighbors\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] # Right, Left, Down, Up\n\n    # Perform the flood fill\n    while queue:\n        r, c = queue.popleft() # Get the next pixel to process\n\n        # Explore neighbors\n        for dr, dc in directions:\n            nr, nc = r + dr, c + dc\n\n            # Check if the neighbor is within the grid boundaries\n            if 0 <= nr < height and 0 <= nc < width:\n                # Check if the neighbor pixel in the output_grid is white (0)\n                # We check the output_grid because we modify it in place.\n                # We don't fill if the neighbor is already red (2) or azure (8)\n                if output_grid[nr, nc] == 0:\n                    # Change the neighbor's color to red (2)\n                    output_grid[nr, nc] = 2\n                    # Add the newly colored neighbor to the queue to process its neighbors\n                    queue.append((nr, nc))\n\n    # Convert the NumPy array back to a list of lists for the final output\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3874,
    "candidates_token_count": 635,
    "total_token_count": 4509,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.030072,
  "retries": null
}