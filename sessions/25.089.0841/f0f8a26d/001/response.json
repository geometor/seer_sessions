{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nThe transformation consists of three steps:\n1. Rotate the input grid 90 degrees counter-clockwise.\n2. Apply downward gravity to the non-background pixels within each column of the rotated grid. The most frequent color is considered the background. Non-background pixels in a column fall to the lowest possible positions in that column, maintaining their original vertical order relative to each other.\n3. Rotate the resulting grid 90 degrees clockwise to produce the output grid.\n\"\"\"\n\ndef apply_gravity_down(grid, background_color):\n    \"\"\"\n    Applies downward gravity to non-background pixels in each column.\n    \"\"\"\n    rows, cols = grid.shape\n    output_grid = np.full((rows, cols), background_color, dtype=int)\n\n    for j in range(cols):\n        # Extract non-background pixels from the column\n        column = grid[:, j]\n        non_background_pixels = [p for p in column if p != background_color]\n\n        # Place non-background pixels at the bottom of the output column\n        num_non_background = len(non_background_pixels)\n        if num_non_background > 0:\n            output_grid[rows - num_non_background:, j] = non_background_pixels\n\n    return output_grid\n\ndef find_background_color(grid):\n    \"\"\"\n    Finds the most frequent color in the grid, assuming it's the background.\n    Defaults to 0 (black/white depending on map) if grid is empty or uniform.\n    \"\"\"\n    unique, counts = np.unique(grid, return_counts=True)\n    if len(counts) == 0:\n        return 0 # Default background\n    background_color = unique[np.argmax(counts)]\n    return background_color\n\ndef transform(input_grid):\n    \"\"\"\n    Applies a counter-clockwise rotation, downward gravity, and clockwise rotation.\n    \"\"\"\n    # Find the background color (most frequent pixel value)\n    background_color = find_background_color(input_grid)\n\n    # 1. Rotate the input grid 90 degrees counter-clockwise\n    rotated_ccw_grid = np.rot90(input_grid, k=1)\n\n    # 2. Apply downward gravity to non-background pixels\n    gravity_applied_grid = apply_gravity_down(rotated_ccw_grid, background_color)\n\n    # 3. Rotate the resulting grid 90 degrees clockwise\n    output_grid = np.rot90(gravity_applied_grid, k=-1) # k=-1 for clockwise\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7490,
    "candidates_token_count": 597,
    "total_token_count": 8087,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 8.909029,
  "retries": null
}