{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nThe transformation consists of the following steps:\n1. Identify the background color, which is the most frequent color in the input grid.\n2. Rotate the input grid 90 degrees counter-clockwise (k=1).\n3. Apply downward gravity to all non-background pixels within each column of the rotated grid. Gravity pulls these pixels to the lowest available rows in their respective columns, maintaining their original top-to-bottom order relative to each other within the column. Background pixels fill the vacated spaces above the moved pixels.\n4. Rotate the resulting grid 90 degrees clockwise (k=-1, or 3 rotations CCW) to produce the final output grid.\n\"\"\"\n\ndef find_background_color(grid):\n    \"\"\"\n    Finds the most frequent color in the grid, assuming it's the background.\n    Defaults to 0 if grid is empty or has no single dominant color.\n    \n    Args:\n        grid (np.ndarray): The input grid.\n\n    Returns:\n        int: The background color value.\n    \"\"\"\n    unique, counts = np.unique(grid, return_counts=True)\n    if len(counts) == 0:\n        # Handle empty grid case\n        return 0 \n    # Find the index of the maximum count\n    max_count_index = np.argmax(counts)\n    # Return the color corresponding to the maximum count\n    background_color = unique[max_count_index]\n    return int(background_color) # Ensure it's a standard Python int\n\ndef apply_gravity_down(grid, background_color):\n    \"\"\"\n    Applies downward gravity to non-background pixels in each column.\n    Pixels fall to the bottom, maintaining relative order.\n    \n    Args:\n        grid (np.ndarray): The grid to apply gravity to.\n        background_color (int): The color identified as background.\n\n    Returns:\n        np.ndarray: The grid after applying gravity.\n    \"\"\"\n    rows, cols = grid.shape\n    # Initialize the output grid with the background color\n    output_grid = np.full((rows, cols), background_color, dtype=int)\n\n    # Process each column independently\n    for j in range(cols):\n        # Extract the current column\n        column = grid[:, j]\n        # Filter out background pixels to get the 'falling' pixels, preserving order\n        non_background_pixels = [p for p in column if p != background_color]\n        \n        # Calculate the number of non-background pixels\n        num_non_background = len(non_background_pixels)\n        \n        # If there are any non-background pixels in this column\n        if num_non_background > 0:\n            # Place the non-background pixels at the bottom of the output column,\n            # starting from the row index (rows - num_non_background)\n            output_grid[rows - num_non_background:, j] = non_background_pixels\n            \n    return output_grid\n\ndef transform(input_grid):\n    \"\"\"\n    Applies a sequence of rotation, gravity, and reverse rotation to the input grid.\n    \n    Args:\n        input_grid (np.ndarray): The input 2D grid.\n\n    Returns:\n        np.ndarray: The transformed 2D grid.\n    \"\"\"\n    \n    # 1. Identify the background color\n    background_color = find_background_color(input_grid)\n\n    # 2. Rotate the input grid 90 degrees counter-clockwise (k=1)\n    rotated_ccw_grid = np.rot90(input_grid, k=1)\n\n    # 3. Apply downward gravity to non-background pixels in the rotated grid\n    gravity_applied_grid = apply_gravity_down(rotated_ccw_grid, background_color)\n\n    # 4. Rotate the resulting grid 90 degrees clockwise (k=-1) to get the final output\n    output_grid = np.rot90(gravity_applied_grid, k=-1) \n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 18862,
    "candidates_token_count": 918,
    "total_token_count": 19780,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.933827,
  "retries": null
}