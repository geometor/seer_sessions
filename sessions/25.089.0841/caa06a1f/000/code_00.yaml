Task: Color-Swapped Checkerboard Extension

Input_Features:
  - Grid:
      - Contains a primary pattern area and a border/padding area.
  - Primary_Pattern_Area:
      - Location: Typically top-left region.
      - Content: Checkerboard pattern using two distinct colors (Color1, Color2).
      - Example_Colors_Pairs: [(magenta, green), (magenta, orange), (gray, yellow)]
  - Border_Padding_Area:
      - Location: Bottom row(s) and/or right column(s).
      - Content: Uniformly filled with a third distinct color (Color3).
      - Example_Colors: [blue, green, magenta]
      - Role: Delimits the primary pattern; ignored in output generation.
  - Grid_Dimensions:
      - Variable height and width (H x W).

Output_Features:
  - Grid:
      - Same dimensions (H x W) as the input grid.
  - Content:
      - Full checkerboard pattern covering the entire grid.
      - Uses the same two colors (Color1, Color2) as the input's primary pattern.
  - Color_Relationship:
      - The output checkerboard pattern is the color-swapped version of the input's primary pattern.
      - If input(0,0) is Color1, output(0,0) is Color2.
      - If input(0,1) is Color2, output(0,1) is Color1.
      - The color at output(r, c) is determined by the parity of (r + c) and the swapped starting colors.

Transformation_Rule:
  - Identify the two primary checkerboard colors (Color1, Color2) from the input, typically by looking at cells like (0,0) and (0,1) or (1,0).
  - Determine the grid dimensions (H, W) from the input.
  - Create an output grid of size H x W.
  - Fill the output grid with a checkerboard pattern using Color1 and Color2, ensuring that the color at (0,0) in the output is the *opposite* of the color at (0,0) in the input's primary pattern.
  - Specifically:
    - Let Input_Color_at_00 = input[0][0]
    - Let Other_Primary_Color = the other color in the input's checkerboard pattern (e.g., input[0][1] or input[1][0] if different from input[0][0]).
    - Set Output_Color_at_00 = Other_Primary_Color
    - Set Output_Color_Adjacent_to_00 = Input_Color_at_00
    - For each cell (r, c) in the output grid:
      - If (r + c) is even, assign Output_Color_at_00.
      - If (r + c) is odd, assign Output_Color_Adjacent_to_00.
