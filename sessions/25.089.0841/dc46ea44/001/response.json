{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\ndef find_horizontal_line(grid, color):\n    \"\"\"Finds the row index of a horizontal line of a specific color.\"\"\"\n    for r in range(grid.shape[0]):\n        if np.all(grid[r, :] == color):\n            return r\n    return -1 # Indicate not found, though task examples guarantee it exists\n\ndef transform(input_grid):\n    \"\"\"\n    Reflects the grid content vertically across the horizontal yellow line.\n    The portion above the yellow line moves below it, and the portion below\n    the yellow line moves above it. The yellow line itself remains in place.\n    \"\"\"\n    # Convert input list of lists to numpy array for easier manipulation\n    input_array = np.array(input_grid, dtype=int)\n    \n    # Define the color of the reflection line\n    reflection_line_color = 4 # yellow\n\n    # Find the row index of the yellow horizontal line\n    line_row_index = find_horizontal_line(input_array, reflection_line_color)\n    \n    # If no line is found (should not happen based on examples), return input\n    if line_row_index == -1:\n        # Or raise an error, depending on expected behavior for invalid inputs\n        print(\"Warning: Reflection line not found.\")\n        return input_grid \n\n    # Extract the parts of the grid relative to the line\n    # Part above the line\n    grid_above = input_array[:line_row_index, :]\n    # The line itself\n    grid_line = input_array[line_row_index:line_row_index+1, :]\n    # Part below the line\n    grid_below = input_array[line_row_index+1:, :]\n\n    # Construct the output grid by swapping the 'above' and 'below' parts\n    # Place the 'below' part first (at the top of the output)\n    # Then place the 'line'\n    # Finally, place the 'above' part (at the bottom of the output)\n    output_array = np.vstack((grid_below, grid_line, grid_above))\n\n    # Convert the numpy array back to a list of lists for the required output format\n    output_grid = output_array.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2558,
    "candidates_token_count": 521,
    "total_token_count": 3079,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.708932,
  "retries": null
}