{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nReflects the grid content vertically across the horizontal yellow line.\nThe yellow line acts as a mirror. Pixels at a certain distance above the line\nare moved to the same distance below the line, and vice versa. The yellow\nline itself remains in place.\n\"\"\"\n\nimport numpy as np\n\ndef find_horizontal_line(grid, color):\n    \"\"\"\n    Finds the row index of a horizontal line of a specific color.\n\n    Args:\n        grid (np.array): The input grid as a NumPy array.\n        color (int): The color value to search for.\n\n    Returns:\n        int: The row index of the first full horizontal line of the specified color,\n             or -1 if no such line is found.\n    \"\"\"\n    height, width = grid.shape\n    for r in range(height):\n        # Check if all elements in the row match the color\n        if np.all(grid[r, :] == color):\n            return r\n    return -1\n\ndef transform(input_grid):\n    \"\"\"\n    Performs a vertical reflection of the grid across a horizontal line of yellow (4).\n\n    Args:\n        input_grid (list of list of int): The input grid.\n\n    Returns:\n        list of list of int: The transformed grid with content reflected vertically\n                             across the yellow line. Returns the original grid if\n                             the yellow line is not found.\n    \"\"\"\n    # Convert input list of lists to numpy array for easier manipulation\n    input_array = np.array(input_grid, dtype=int)\n    height, width = input_array.shape\n\n    # Define the color of the reflection line\n    reflection_line_color = 4 # yellow\n\n    # Find the row index of the yellow horizontal line\n    line_row_index = find_horizontal_line(input_array, reflection_line_color)\n\n    # If no line is found (should not happen based on examples), return input\n    if line_row_index == -1:\n        print(\"Warning: Reflection line (yellow) not found. Returning original grid.\")\n        return input_grid\n\n    # Initialize the output grid as a copy of the input grid\n    # We will overwrite rows based on the reflection logic\n    output_array = np.copy(input_array)\n\n    # Perform the reflection\n    # Iterate through each row of the input grid\n    for r in range(height):\n        # Calculate the target row index in the output grid based on reflection\n        # target_row = line_row_index + (line_row_index - source_row)\n        target_r = line_row_index + (line_row_index - r)\n\n        # Ensure the target row is within the grid bounds (although the formula\n        # should naturally handle this if the line exists within the grid)\n        if 0 <= target_r < height:\n            # Copy the content of the source row 'r' from the input\n            # to the target row 'target_r' in the output\n            output_array[target_r, :] = input_array[r, :]\n\n    # Convert the numpy array back to a list of lists for the required output format\n    output_grid = output_array.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6033,
    "candidates_token_count": 728,
    "total_token_count": 6761,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 17.621082,
  "retries": null
}