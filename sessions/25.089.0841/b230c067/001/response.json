{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nThis program identifies all distinct contiguous objects of azure color (8) in an input grid. \nIt calculates the size (pixel count) and finds the top-leftmost pixel (minimum row, then minimum column) for each object. \nIt then determines the object with the smallest size. If multiple objects share the smallest size, \nit selects the one whose top-left pixel has the minimum row index. If there's still a tie, \nit selects the one whose top-left pixel has the minimum column index. \nThis selected 'target' object is recolored to red (2) in the output grid. \nAll other original azure objects are recolored to blue (1). \nThe background (white, 0) remains unchanged.\n\"\"\"\n\ndef find_objects(grid, target_color):\n    \"\"\"\n    Finds all distinct contiguous objects of a specific color in the grid.\n\n    Args:\n        grid (np.ndarray): The input grid.\n        target_color (int): The color of the objects to find.\n\n    Returns:\n        list: A list of dictionaries, where each dictionary represents an object\n              and contains 'pixels' (list of (r, c) tuples), 'size' (int),\n              and 'top_left' (tuple (r, c)).\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == target_color and not visited[r, c]:\n                # Start BFS to find a new object\n                obj_pixels = []\n                q = deque([(r, c)])\n                visited[r, c] = True\n                min_r, min_c_for_min_r = r, c\n\n                while q:\n                    row, col = q.popleft()\n                    obj_pixels.append((row, col))\n\n                    # Update top-left pixel tracking\n                    if row < min_r:\n                        min_r = row\n                        min_c_for_min_r = col\n                    elif row == min_r and col < min_c_for_min_r:\n                        min_c_for_min_r = col\n                        \n                    # Explore neighbors (4-connectivity: up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] == target_color and not visited[nr, nc]:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n\n                if obj_pixels:\n                    objects.append({\n                        'pixels': obj_pixels,\n                        'size': len(obj_pixels),\n                        'top_left': (min_r, min_c_for_min_r)\n                    })\n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by recoloring azure objects based on size and position.\n\n    Args:\n        input_grid (np.ndarray): The 2D input grid.\n\n    Returns:\n        np.ndarray: The transformed 2D output grid.\n    \"\"\"\n    # initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n    azure_color = 8\n    blue_color = 1\n    red_color = 2\n\n    # Find all azure objects\n    azure_objects = find_objects(input_grid, azure_color)\n\n    # If no azure objects, return the original grid copy\n    if not azure_objects:\n        return output_grid\n\n    # Find the minimum size\n    min_size = min(obj['size'] for obj in azure_objects)\n\n    # Filter objects with the minimum size\n    min_size_objects = [obj for obj in azure_objects if obj['size'] == min_size]\n\n    target_object = None\n    # Determine the target object based on size and tie-breaking rules\n    if len(min_size_objects) == 1:\n        target_object = min_size_objects[0]\n    else:\n        # Tie-breaking rule 1: Minimum row index of top-left pixel\n        min_row = min(obj['top_left'][0] for obj in min_size_objects)\n        min_row_objects = [obj for obj in min_size_objects if obj['top_left'][0] == min_row]\n\n        if len(min_row_objects) == 1:\n            target_object = min_row_objects[0]\n        else:\n            # Tie-breaking rule 2: Minimum column index of top-left pixel\n            min_col = min(obj['top_left'][1] for obj in min_row_objects)\n            # There should be exactly one object matching this final criterion\n            target_object = [obj for obj in min_row_objects if obj['top_left'][1] == min_col][0]\n\n    # Recolor the objects in the output grid\n    for obj in azure_objects:\n        color_to_use = red_color if obj == target_object else blue_color\n        for r, c in obj['pixels']:\n            output_grid[r, c] = color_to_use\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3435,
    "candidates_token_count": 1269,
    "total_token_count": 4704,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 17.643915,
  "retries": null
}