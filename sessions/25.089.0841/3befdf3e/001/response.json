{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nFind the single object in the input grid, composed of an outer frame color and an inner core color. \nCreate an output grid by copying the input. \nThen, for every pixel in the original input object: \n- if it has the inner color, paint its direct orthogonal neighbors (up, down, left, right) with the inner color, provided they are currently white (0) and within grid bounds. \n- if it has the outer color, paint the cells two steps away orthogonally (up, down, left, right) with the outer color, provided they are currently white (0) and within grid bounds.\nThe painting happens on the output grid, using the original input grid as the reference for source pixel colors and locations.\n\"\"\"\n\ndef find_colors(grid):\n    \"\"\"Finds the unique non-zero colors in the grid.\"\"\"\n    return sorted(list(np.unique(grid[grid != 0])))\n\ndef find_bounding_box(grid):\n    \"\"\"Finds the bounding box (min_row, min_col, max_row, max_col) of non-zero pixels.\"\"\"\n    non_white_coords = np.argwhere(grid != 0)\n    if non_white_coords.size == 0:\n        return None\n    min_r, min_c = non_white_coords.min(axis=0)\n    max_r, max_c = non_white_coords.max(axis=0)\n    return (min_r, min_c, max_r, max_c)\n\ndef determine_inner_outer(grid, colors, bbox):\n    \"\"\"\n    Determines the inner and outer colors.\n    Assumes the color at the top-left corner of the bounding box is the outer color.\n    \"\"\"\n    min_r, min_c, _, _ = bbox\n    # The color at a corner of the bounding box is assumed to be the outer frame color.\n    outer_c = grid[min_r, min_c]\n    # The other non-white color must be the inner color.\n    inner_c = colors[0] if colors[1] == outer_c else colors[1]\n    return inner_c, outer_c\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the expansion transformation to the input grid.\n    \"\"\"\n    input_np = np.array(input_grid, dtype=int)\n    output_np = np.copy(input_np)\n    rows, cols = input_np.shape\n\n    # Find the non-white colors present\n    non_white_colors = find_colors(input_np)\n\n    # Expecting exactly two non-white colors for this pattern\n    if len(non_white_colors) != 2:\n        # If not two colors, or no colors, return the original grid\n        # Or could raise an error depending on desired behavior for unexpected inputs\n        return input_grid \n\n    # Find the bounding box of the object\n    bbox = find_bounding_box(input_np)\n    if bbox is None:\n        # If no object found, return the original grid\n        return input_grid\n\n    # Determine which color is inner and which is outer\n    inner_color, outer_color = determine_inner_outer(input_np, non_white_colors, bbox)\n\n    # Define the relative coordinates for 1-step and 2-step orthogonal neighbors\n    one_step_neighbors = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    two_step_neighbors = [(0, 2), (0, -2), (2, 0), (-2, 0)]\n\n    # Iterate through each cell of the *original* input grid\n    for r in range(rows):\n        for c in range(cols):\n            original_color = input_np[r, c]\n\n            # If the cell has the inner color, paint 1 step away\n            if original_color == inner_color:\n                for dr, dc in one_step_neighbors:\n                    nr, nc = r + dr, c + dc\n                    # Check bounds and if the target cell in the output is currently white\n                    if 0 <= nr < rows and 0 <= nc < cols and output_np[nr, nc] == 0:\n                        output_np[nr, nc] = inner_color\n            \n            # If the cell has the outer color, paint 2 steps away\n            elif original_color == outer_color:\n                for dr, dc in two_step_neighbors:\n                    nr, nc = r + dr, c + dc\n                    # Check bounds and if the target cell in the output is currently white\n                    if 0 <= nr < rows and 0 <= nc < cols and output_np[nr, nc] == 0:\n                        output_np[nr, nc] = outer_color\n\n    # Convert the result back to a list of lists\n    return output_np.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2603,
    "candidates_token_count": 1130,
    "total_token_count": 3733,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 31.502535,
  "retries": null
}