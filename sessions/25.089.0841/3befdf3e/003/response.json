{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nExpands a central rectangular object outwards by two layers, using the object's inner and outer colors.\n\nThe transformation identifies the single rectangular object in the input, which is composed of an outer frame color and an inner core color. It then creates an expanded version in the output grid. The expansion adds two layers around the original object: the layer immediately adjacent (orthogonal distance 1) is filled with the inner color, and the next layer (orthogonal distance 2) is filled with the outer color. The original object remains in place. The expansion only colors cells that were initially white (background color 0).\n\"\"\"\n\ndef find_colors(grid):\n    \"\"\"Finds the unique non-zero colors in the grid.\"\"\"\n    return sorted(list(np.unique(grid[grid != 0])))\n\ndef find_bounding_box(grid):\n    \"\"\"Finds the bounding box (min_row, min_col, max_row, max_col) of non-zero pixels.\"\"\"\n    non_white_coords = np.argwhere(grid != 0)\n    if non_white_coords.size == 0:\n        return None\n    min_r, min_c = non_white_coords.min(axis=0)\n    max_r, max_c = non_white_coords.max(axis=0)\n    return (min_r, min_c, max_r, max_c)\n\ndef determine_inner_outer(grid, colors, bbox):\n    \"\"\"\n    Determines the inner and outer colors.\n    Assumes the color at the top-left corner of the bounding box is the outer color.\n    Handles cases where only one non-white color might be present (although the description implies two).\n    \"\"\"\n    if len(colors) == 0:\n        return None, None # No colors found\n    \n    min_r, min_c, _, _ = bbox\n    outer_c = grid[min_r, min_c]\n    \n    if len(colors) == 1:\n        # If only one color, it acts as both inner and outer for expansion\n        # This might need adjustment based on specific task behavior for single-color objects\n        inner_c = outer_c\n    else:\n        # If two colors, find the one that isn't the outer color\n        inner_c = colors[0] if colors[1] == outer_c else colors[1]\n        \n    return inner_c, outer_c\n\ndef get_object_coords(grid):\n    \"\"\"Returns a list of (row, col) tuples for all non-zero pixels.\"\"\"\n    return [tuple(coord) for coord in np.argwhere(grid != 0)]\n\ndef min_manhattan_distance(point, coord_set):\n    \"\"\"Calculates the minimum Manhattan distance from a point to any coordinate in a set.\"\"\"\n    if not coord_set:\n        return float('inf') # Or handle as appropriate if the set can be empty\n    r1, c1 = point\n    min_dist = float('inf')\n    for r2, c2 in coord_set:\n        dist = abs(r1 - r2) + abs(c1 - c2)\n        min_dist = min(min_dist, dist)\n    return min_dist\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the two-layer expansion transformation based on distance to the original object.\n    \"\"\"\n    input_np = np.array(input_grid, dtype=int)\n    rows, cols = input_np.shape\n    \n    # 1. Identify the object and its properties\n    non_white_colors = find_colors(input_np)\n    object_coords = get_object_coords(input_np)\n\n    if not object_coords: # No object found\n        return input_grid # Return original grid if no object\n\n    bbox = find_bounding_box(input_np) \n    \n    # Handle cases where finding colors/bbox might fail or be inconsistent\n    if not non_white_colors or bbox is None:\n         return input_grid # Should not happen if object_coords is not empty, but safe check\n\n    # Expecting two colors based on examples, but handle single color case.\n    # The description implies two colors, adjust if single-color behavior differs.\n    if len(non_white_colors) > 2:\n        # Unexpected number of colors, return original grid or raise error\n        print(f\"Warning: Expected 1 or 2 non-white colors, found {len(non_white_colors)}. Returning original grid.\")\n        return input_grid\n\n    inner_color, outer_color = determine_inner_outer(input_np, non_white_colors, bbox)\n    \n    # 2. Initialize the output grid as a copy of the input\n    output_np = np.copy(input_np)\n\n    # 3. Iterate through all grid cells to potentially color them\n    for r in range(rows):\n        for c in range(cols):\n            # Only consider coloring cells that are currently white (background)\n            if output_np[r, c] == 0:\n                # 4. Calculate the minimum orthogonal distance to the original object\n                min_dist = min_manhattan_distance((r, c), object_coords)\n\n                # 5. Apply coloring rules based on distance\n                if min_dist == 1:\n                    # Color with inner_color if distance is 1\n                    output_np[r, c] = inner_color\n                elif min_dist == 2:\n                    # Color with outer_color if distance is 2\n                    output_np[r, c] = outer_color\n                    \n    # 6. Return the modified grid as a list of lists\n    return output_np.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 11061,
    "candidates_token_count": 1313,
    "total_token_count": 12374,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.84958,
  "retries": null
}