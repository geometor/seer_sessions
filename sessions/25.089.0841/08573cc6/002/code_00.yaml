task_elements:
  - element: input_grid
    description: A 2D grid containing pixels with colors 0-9.
    properties:
      - size: variable height and width (up to 30x30).
      - content: Mostly white (0) with three significant non-white pixels.
  - element: significant_pixels
    description: The three non-white pixels in the input grid that determine the output.
    properties:
      - pixel_fill_color:
          location: [0, 0]
          role: Defines the fill color for the output shape.
      - pixel_outline_color:
          location: [0, 1]
          role: Defines the outline color for the output shape.
      - pixel_anchor:
          color: 1 (blue)
          location: variable coordinates [r_anchor, c_anchor]
          role: Defines the anchor point for positioning the shape in the output.
  - element: output_grid
    description: A 2D grid representing the transformed input.
    properties:
      - size: Same dimensions as the input grid.
      - content: Initially white (0), then a specific shape is drawn onto it.
  - element: shape_template
    description: A predefined pattern of relative coordinates specifying fill and outline pixels.
    properties:
      - identity: Determined by the unique combination of fill_color and outline_color from input[0,0] and input[0,1].
      - structure: Consists of a set of relative coordinates for fill pixels and a set of relative coordinates for outline pixels, both relative to the anchor point (treated as relative 0,0).
      - examples_observed:
          - fill_color: 5 (gray), outline_color: 6 (magenta) -> Draws a "T" shape.
          - fill_color: 3 (green), outline_color: 2 (red) -> Draws an "H" shape.
          - fill_color: 5 (gray), outline_color: 3 (green) -> Draws a "Key/F" shape.
actions:
  - action: identify_colors_and_anchor
    inputs: input_grid
    outputs: fill_color, outline_color, anchor_location [r_anchor, c_anchor]
    steps:
      - Read color at input_grid[0, 0] -> fill_color.
      - Read color at input_grid[0, 1] -> outline_color.
      - Find coordinates [r_anchor, c_anchor] of the pixel with color 1.
  - action: select_shape_template
    inputs: fill_color, outline_color
    outputs: specific_shape_template (containing lists of relative fill/outline coordinates)
    description: Look up and retrieve the predefined shape template associated with the specific (fill_color, outline_color) pair. Requires a stored mapping (e.g., a dictionary) from color pairs to their corresponding coordinate templates.
  - action: draw_shape
    inputs: output_grid, specific_shape_template, fill_color, outline_color, anchor_location [r_anchor, c_anchor]
    outputs: modified_output_grid
    steps:
      - Initialize output_grid with all white (0) pixels, matching input dimensions.
      - For each relative coordinate [dr, dc] defined as 'fill' in the specific_shape_template:
          - Calculate absolute coordinate [r, c] = [r_anchor + dr, c_anchor + dc].
          - If [r, c] is within the grid bounds:
              - Set output_grid[r, c] = fill_color.
      - For each relative coordinate [dr, dc] defined as 'outline' in the specific_shape_template:
          - Calculate absolute coordinate [r, c] = [r_anchor + dr, c_anchor + dc].
          - If [r, c] is within the grid bounds:
              - Set output_grid[r, c] = outline_color. # This may overwrite fill pixels if coordinates overlap
      - Set output_grid[r_anchor, c_anchor] = 1 (blue). # Ensure anchor is blue, overwriting any drawn fill/outline color at this spot.
