task_description: Identify a primary 'target' object based on color priority (blue=1, then green=3), extract its bounding box to form the output grid, and then overlay pixels from all other non-background 'modifier' objects onto this grid based on their relative positions.

definitions:
  - name: background_color
    description: The most frequent color in the input grid.
  - name: object
    description: A contiguous block of one or more pixels of the same non-background color.
  - name: bounding_box
    description: The smallest rectangle enclosing all pixels of an object.
  - name: target_object
    description: The primary object defining the output grid. Identified by color priority (blue=1 first, then green=3 if no blue object exists).
  - name: modifier_object
    description: Any object that is not the background and not the target_object.
  - name: relative_position
    description: The (row, col) coordinates of a pixel within an object's bounding box, relative to the top-left corner of that bounding box.

steps:
  - step: 1
    action: Identify the background_color.
    inputs:
      - input_grid
    outputs:
      - background_color
  - step: 2
    action: Identify all objects distinct from the background_color.
    inputs:
      - input_grid
      - background_color
    outputs:
      - list_of_objects
  - step: 3
    action: Select the target_object from the list_of_objects based on color priority (blue=1, then green=3).
    inputs:
      - list_of_objects
    outputs:
      - target_object
  - step: 4
    action: Identify all modifier_objects (objects that are not the target_object).
    inputs:
      - list_of_objects
      - target_object
    outputs:
      - list_of_modifier_objects
  - step: 5
    action: Calculate the bounding_box of the target_object.
    inputs:
      - target_object
    outputs:
      - target_bounding_box (defines output grid dimensions and origin)
  - step: 6
    action: Initialize the output_grid using the pixels of the target_object within its bounding_box.
    inputs:
      - target_object
      - target_bounding_box
    outputs:
      - initial_output_grid
  - step: 7
    action: Overlay modifier pixels onto the output grid.
    description: For each modifier_object, iterate through its pixels. For each pixel, calculate its position relative to the top-left corner of the target_bounding_box. If this relative position is within the output grid dimensions, update the output grid pixel at that position with the modifier pixel's color.
    inputs:
      - initial_output_grid
      - list_of_modifier_objects
      - target_bounding_box
    outputs:
      - final_output_grid

examples:
  - example: train_1
    background_color: 8 (azure)
    objects: green(3) 'H', blue(1) 'U', magenta(6) square
    target_object: green(3) 'H' (no blue object found)
    modifier_objects: blue(1) 'U', magenta(6) square
    target_bounding_box: (row 2, col 4) to (row 5, col 7), size 4x4
    output_construction: Start with 4x4 green 'H'. Overlay magenta pixels. Blue pixels fall outside the target bounding box relative space, so they are ignored.
  - example: train_2
    background_color: 2 (red)
    objects: blue(1) 'U', green(3) 'H', yellow(4) rectangle, azure(8) lines
    target_object: blue(1) 'U' (blue object found)
    modifier_objects: green(3) 'H', yellow(4) rectangle, azure(8) lines
    target_bounding_box: (row 1, col 1) to (row 3, col 5), size 3x5
    output_construction: Start with 3x5 blue 'U'. Overlay pixels from green, yellow, and azure objects based on relative positions. Only the azure pixels near the blue shape land within the relative bounding box space.
  - example: train_3
    background_color: 4 (yellow)
    objects: blue(1) '+', green(3) square, red(2) 'H', magenta(6) line
    target_object: blue(1) '+' (blue object found)
    modifier_objects: green(3) square, red(2) 'H', magenta(6) line
    target_bounding_box: (row 3, col 4) to (row 7, col 9), size 5x6
    output_construction: Start with 5x6 blue '+'. Overlay pixels from green, red, and magenta objects. Green square and magenta line pixels overwrite parts of the blue object. Red pixels fall outside the relative bounding box space.
