objects:
  - type: grid
    properties:
      - pixels: represent colors (white=0, red=2, green=3)
      - size: variable height and width (observed 11x11 in examples)
  - type: pixel
    properties:
      - color: white(0), red(2), or green(3)
      - location: (row, column) coordinates
      - role:
        - white(0): background / fillable space
        - red(2): static barrier / obstacle (blocks fill)
        - green(3): starting point for fill / fill color
relationships:
  - type: adjacency
    description: Pixels can be adjacent horizontally or vertically (4-connectivity). Used for fill propagation.
  - type: blocking
    description: Red pixels and grid boundaries prevent the green fill from spreading into or across them.
actions:
  - name: identify_start_points
    input: input grid
    output: list of coordinates of green(3) pixels
  - name: flood_fill
    parameters:
      - start_points: coordinates from identify_start_points
      - fill_color: green(3)
      - target_color: white(0)
      - barrier_color: red(2)
    process: Starting from the start_points, iteratively change adjacent white(0) pixels to green(3). The process uses a queue (BFS) and keeps track of visited cells (initial start points + filled white cells) to avoid re-processing. The fill cannot enter or cross cells with the barrier_color or move outside grid boundaries.
transformation:
  - step: Create the output grid as a copy of the input grid.
  - step: Identify the locations of all green (3) pixels in the input grid.
  - step: Initialize a queue with these starting locations.
  - step: Initialize a set `visited` containing only these starting locations.
  - step: While the queue is not empty:
      - Dequeue a location (r, c).
      - Examine its 4-directionally adjacent neighbors (nr, nc).
      - For each neighbor:
          - Check if the neighbor is within the grid boundaries.
          - Check if the neighbor location (nr, nc) has NOT been visited.
          - Check if the neighbor pixel in the *input* grid is white (0).
          - If all conditions are true:
              - Change the color of the pixel at (nr, nc) in the *output* grid to green (3).
              - Mark (nr, nc) as visited.
              - Enqueue (nr, nc).
  - step: The resulting grid after the process completes is the final output.