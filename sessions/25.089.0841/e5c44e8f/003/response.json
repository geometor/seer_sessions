{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nPerform a flood fill operation starting from green (3) pixels. \nThe fill color is green (3).\nThe fill only affects white (0) pixels found in the original input grid.\nRed (2) pixels act as barriers and are not changed or crossed.\nThe original green (3) pixels also remain unchanged.\nThe fill spreads to 4-directionally adjacent (up, down, left, right) white pixels.\nThe fill stops at grid boundaries and red pixels.\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef transform(input_grid):\n    \"\"\"\n    Applies a flood fill starting from green pixels (3), filling white pixels (0) \n    and stopping at red pixels (2) and grid boundaries.\n    \n    Args:\n        input_grid (list of lists): The input grid.\n        \n    Returns:\n        list of lists: The transformed grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation and copying\n    input_np = np.array(input_grid, dtype=int)\n    output_grid = input_np.copy()\n    height, width = input_np.shape\n\n    # Initialize a queue for Breadth-First Search (BFS) flood fill\n    queue = deque()\n    \n    # Keep track of visited cells to avoid cycles and redundant work. \n    # Crucially, visited means \"either a start point or a point we have filled\".\n    visited = set()\n\n    # Find initial green pixels (starting points)\n    for r in range(height):\n        for c in range(width):\n            if input_np[r, c] == 3:\n                start_point = (r, c)\n                # Add starting green points to the queue and visited set\n                if start_point not in visited:\n                    queue.append(start_point)\n                    visited.add(start_point)\n\n    # Define 4-directional neighbors (Right, Left, Down, Up)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] \n\n    # Perform Breadth-First Search (BFS) based flood fill\n    while queue:\n        # Get the current cell from the front of the queue\n        r, c = queue.popleft()\n\n        # Explore neighbors\n        for dr, dc in directions:\n            nr, nc = r + dr, c + dc\n\n            # 1. Check if the neighbor is within grid boundaries\n            if 0 <= nr < height and 0 <= nc < width:\n                \n                # 2. Check if the neighbor has not been visited (i.e., not a starting green or already filled)\n                if (nr, nc) not in visited:\n                    \n                    # 3. Check if the neighbor in the *original* grid is white (0), which is the only color fillable\n                    if input_np[nr, nc] == 0:\n                        # If all conditions met: fill, mark visited, and enqueue\n                        output_grid[nr, nc] = 3  # Change the color in the output grid\n                        visited.add((nr, nc))    # Mark as visited\n                        queue.append((nr, nc))   # Add to queue for further exploration\n                    \n                    # Note: We implicitly handle red barriers (2) by not filling them (input_np[nr,nc] != 0) \n                    # and not adding them to the queue or visited set if they are encountered as neighbors.\n\n    # Convert the result back to a list of lists as required\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 11392,
    "candidates_token_count": 806,
    "total_token_count": 12198,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.849551,
  "retries": null
}