Input_Features:
  - Grid: 2D array of integers (0-9) representing colors.
  - Background: Primarily white (0).
  - Objects:
    - Multiple distinct objects present.
    - Each object is a connected component of non-white pixels.
    - Shape: All objects are 3x3 plus signs (white center, four adjacent pixels of the same color, white corners).
    - Colors: Objects can be green(3), blue(1), azure(8), red(2).
    - Separation: Objects are separated by white pixels.
    - Arrangement: Objects can be arranged vertically, horizontally, or scattered in the input grid.

Output_Features:
  - Grid: 2D array of integers (0-9).
  - Content: Composed solely of the 3x3 plus-sign shapes extracted from the input.
  - Background: White (0) pixels fill the space within each 3x3 shape's bounding box but not necessarily between shapes if they are directly adjacent in the output.
  - Arrangement:
    - The extracted 3x3 shapes are concatenated either vertically or horizontally.
    - Vertical Concatenation: Shapes are stacked one below the other. Output width is 3. Output height is 3 * number_of_shapes.
    - Horizontal Concatenation: Shapes are placed side-by-side. Output height is 3. Output width is 3 * number_of_shapes.
  - Order:
    - For vertical stacking: Shapes are ordered top-to-bottom based on their original top-most position in the input grid.
    - For horizontal arrangement: Shapes are ordered left-to-right based on their original left-most position in the input grid.

Transformation:
  - Action: Identify, Extract, Sort, Concatenate.
  - Identify: Locate all 3x3 plus-sign shapes in the input grid.
  - Extract: Crop each identified shape to its 3x3 bounding box.
  - Sort: Order the extracted 3x3 shapes based on their original position in the input grid. The sorting key (top row or left column) depends on the final output arrangement (vertical or horizontal).
  - Concatenate: Assemble the sorted 3x3 shapes into the final output grid, either stacking vertically or arranging horizontally.