{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nRed pixels expand to fill adjacent cells, constrained by gray pixels.\n\"\"\"\n\nimport numpy as np\n\ndef get_adjacent_pixels(grid, r, c):\n    \"\"\"\n    Get the valid adjacent pixels for a given cell.\n    \"\"\"\n    rows, cols = grid.shape\n    adjacent = []\n    if r > 0:\n        adjacent.append((r - 1, c))  # Up\n    if r < rows - 1:\n        adjacent.append((r + 1, c))  # Down\n    if c > 0:\n        adjacent.append((r, c - 1))  # Left\n    if c < cols - 1:\n        adjacent.append((r, c + 1))  # Right\n    return adjacent\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = output_grid.shape\n    \n    # Find initial red pixels\n    red_pixels = []\n    for r in range(rows):\n        for c in range(cols):\n            if output_grid[r, c] == 2:\n                red_pixels.append((r, c))\n\n    # Expand red pixels (flood fill)\n    pixels_to_fill = red_pixels.copy()\n    filled_pixels = set()\n\n    while pixels_to_fill:\n        current_pixel = pixels_to_fill.pop()\n        r, c = current_pixel\n\n        if current_pixel in filled_pixels:\n            continue\n        filled_pixels.add(current_pixel)\n\n        if output_grid[r,c] != 5:\n          output_grid[r, c] = 2  # Fill current pixel with red if not gray\n\n          # Add adjacent pixels to the queue if not gray\n          for ar, ac in get_adjacent_pixels(output_grid, r, c):\n              if output_grid[ar, ac] != 5 and (ar,ac) not in filled_pixels:\n                  pixels_to_fill.append((ar, ac))\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2639,
    "candidates_token_count": 485,
    "total_token_count": 3124,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 4.806154,
  "response_file": "009-response.json"
}