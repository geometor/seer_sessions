import numpy as np

def grid_differences(grid1, grid2):
    """Counts the number of differing pixels between two grids."""
    if len(grid1) != len(grid2) or len(grid1[0]) != len(grid2[0]):
        return -1 # Indicate incompatible sizes.
    return sum(1 for i in range(len(grid1)) for j in range(len(grid1[0])) if grid1[i][j] != grid2[i][j])


def analyze_examples(examples, transform_function):
    results = {}
    for example_name, example in examples.items():
        input_grid = example['input']
        expected_output_grid = example['output']
        predicted_output_grid = transform_function(input_grid)

        results[example_name] = {
            'input_shape': (len(input_grid), len(input_grid[0])),
            'output_shape': (len(expected_output_grid), len(expected_output_grid[0])),
            'predicted_output_shape': (len(predicted_output_grid), len(predicted_output_grid[0])),
            'input_colors': sorted(list(set(pixel for row in input_grid for pixel in row))),
            'output_colors': sorted(list(set(pixel for row in expected_output_grid for pixel in row))),
            'predicted_output_colors': sorted(list(set(pixel for row in predicted_output_grid for pixel in row))),
            'differences_expected_predicted': grid_differences(expected_output_grid, predicted_output_grid)
        }
    return results

# Assuming 'train_examples' is defined in the context as shown in the problem
examples = {
    'example_1': train_examples[0],
    'example_2': train_examples[1],
    'example_3': train_examples[2]
}

analysis = analyze_examples(examples, transform)

for example_name, metrics in analysis.items():
    print(f"--- {example_name} ---")
    for key, value in metrics.items():
        print(f"{key}: {value}")