{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Seed Rows:** Examine the input grid and identify \"seed rows,\" which are rows containing at least one non-white pixel.\n2.  **Create Color Sequence For Each Seed Row**: Scan each seed row from left to right. For each non-white pixel encountered, record its color. The ordered sequence of colors becomes the color sequence for that seed row.\n3.  **Stack Seed Rows**: Repeat the stack of seed rows until the height of the stack equals the height of the input grid.\n\"\"\"\n\nimport numpy as np\n\ndef get_seed_rows(grid):\n    \"\"\"Identifies rows with at least one non-white pixel and extracts their color sequences.\"\"\"\n    seed_rows = []\n    for row_index, row in enumerate(grid):\n        color_sequence = []\n        for pixel_value in row:\n            if pixel_value != 0:\n                color_sequence.append(pixel_value)\n        if color_sequence:\n            seed_rows.append({\"row_index\": row_index, \"color_sequence\": color_sequence})\n    return seed_rows\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid by stacking seed rows with color sequences.\"\"\"\n    input_grid = np.array(input_grid)\n    output_grid = np.zeros_like(input_grid)\n    rows = len(output_grid)\n    cols = len(output_grid[0])\n\n    # Find seed rows and their color sequences.\n    seed_rows = get_seed_rows(input_grid)\n\n    # Handle the case where there are no seed rows.\n    if not seed_rows:\n        return output_grid\n\n    # Create stacked seed rows.\n    stacked_rows = []\n    for seed_row in seed_rows:\n      row = np.array(seed_row[\"color_sequence\"])\n      full_row = np.tile(row, cols // len(row) + 1)[:cols]  # Repeat to fill width\n      stacked_rows.append(full_row)\n    \n    # Stack and repeat\n    num_repeats = rows // len(stacked_rows)\n    remainder = rows % len(stacked_rows)\n    \n    final_stack = []\n    \n    for _ in range(num_repeats):\n      for row in stacked_rows:\n        final_stack.append(row)\n    for i in range(remainder):\n      final_stack.append(stacked_rows[i])\n\n    for i in range(len(final_stack)):\n      output_grid[i,:] = final_stack[i]\n    \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8363,
    "candidates_token_count": 597,
    "total_token_count": 8960,
    "cached_content_token_count": 0
  },
  "response_time": 6.276269,
  "response_file": "024-response.json"
}