{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe input grid is transformed into a smaller output grid. A horizontal azure (8) line in the input separates colored regions.\nEach region above and below the azure line is reduced to a 2x2 block of the same color in the output, maintaining relative position and the original color.\nif next to grid boundary, draw line of length two toward interior, if at a corner, place a single pixel.\n\"\"\"\n\nimport numpy as np\n\ndef find_azure_line(grid):\n    # Find the row index of the horizontal azure line.\n    for i, row in enumerate(grid):\n        if all(pixel == 8 for pixel in row):\n            return i\n    return -1  # Should not happen based on problem description\n\ndef get_regions(grid, azure_line_row):\n    # Identify distinct colored regions above and below the azure line.\n    visited = set()\n    regions = []\n\n    def is_valid(r, c):\n        return 0 <= r < grid.shape[0] and 0 <= c < grid.shape[1]\n\n    def dfs(r, c, color, region_set):\n        if (r, c) in visited or not is_valid(r, c) or grid[r, c] != color:\n            return\n        visited.add((r, c))\n        region_set.add((r, c))\n\n        # Explore adjacent cells (including diagonals)\n        for dr in [-1, 0, 1]:\n            for dc in [-1, 0, 1]:\n                if dr == 0 and dc == 0:\n                    continue\n                dfs(r + dr, c + dc, color, region_set)\n    \n    above_regions = []\n    for r in range(0, azure_line_row):\n        for c in range(grid.shape[1]):\n             if (r,c) not in visited and grid[r, c] != 8 and grid[r,c] != 0:\n                new_region = set()\n                dfs(r, c, grid[r, c], new_region)\n                if new_region:\n                    above_regions.append((grid[r,c],new_region))\n    \n    visited = set() # reset visited for below regions\n    below_regions = []\n    for r in range(azure_line_row + 1, grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if (r,c) not in visited and grid[r, c] != 8 and grid[r,c] != 0:\n                new_region = set()\n                dfs(r, c, grid[r, c], new_region)\n                if new_region:\n                    below_regions.append((grid[r,c], new_region))\n\n    return above_regions, below_regions\n\ndef get_top_left(region):\n  min_r = min(r for r,c in region)\n  min_c = min(c for r,c in region if r == min_r)\n  return (min_r, min_c)\n  \n\ndef transform(input_grid):\n    # Convert input grid to numpy array\n    grid = np.array(input_grid)\n\n    # Find the azure line\n    azure_line_row = find_azure_line(grid)\n\n    # Get regions above and below the azure line\n    above_regions, below_regions = get_regions(grid, azure_line_row)\n    \n    # compute output grid dimension.  +1 if there are regions below\n    output_height = (len(above_regions) + len(below_regions)) \n    if len(below_regions) > 0:\n      output_height = max(len(above_regions),len(below_regions)) * 2\n\n    output_width = 0\n    if len(above_regions) > 0:\n        output_width = max(output_width, len(above_regions)*2)\n    if len(below_regions) > 0:\n        output_width = max(output_width, len(below_regions)*2)\n        \n    if (output_width == 0):\n        output_width = grid.shape[1] // 2\n    \n    \n    \n    # Initialize output grid with zeros\n    output_grid = np.zeros((output_height, output_width), dtype=int)\n\n    # Process above regions\n    for i, (color, region) in enumerate(above_regions):\n      r,c = get_top_left(region)\n      out_r = (r * 2 ) // (azure_line_row+1)\n      out_c = (c * 2) // (grid.shape[1]+1)\n      if out_r+1 < output_grid.shape[0] and out_c+1 < output_grid.shape[1]:\n        output_grid[out_r:out_r+2, out_c:out_c+2] = color\n      elif out_r+1 < output_grid.shape[0]:\n        output_grid[out_r:out_r+2, out_c] = color\n      elif out_c+1 < output_grid.shape[1]:\n        output_grid[out_r, out_c:out_c+2] = color\n      else:\n        output_grid[out_r,out_c] = color\n\n    # Process below regions\n    for i, (color, region) in enumerate(below_regions):\n        r,c = get_top_left(region)\n        #out_r = (r * output_height) // grid.shape[0]\n        #out_c = (c * output_width) // grid.shape[1]\n        out_r = ((r-azure_line_row-1) * 2 ) // (grid.shape[0]-azure_line_row)  + (output_height//2)\n        out_c = (c * 2) // (grid.shape[1]+1)\n        if out_r+1 < output_grid.shape[0] and out_c+1 < output_grid.shape[1]:\n            output_grid[out_r:out_r+2, out_c:out_c+2] = color\n        elif out_r+1 < output_grid.shape[0]:\n            output_grid[out_r:out_r+2, out_c] = color\n        elif out_c+1 < output_grid.shape[1]:\n            output_grid[out_r, out_c:out_c+2] = color\n        else:\n            output_grid[out_r,out_c] = color\n\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4139,
    "candidates_token_count": 1562,
    "total_token_count": 5701,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 17.205055,
  "response_file": "002-response.json"
}