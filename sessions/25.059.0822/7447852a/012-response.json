{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by changing the last red pixel in each contiguous group of red pixels on a row to yellow, and then propagating the yellow color downwards if the cell below is not red.\n\"\"\"\n\nimport numpy as np\n\ndef get_red_pixels(grid):\n    # use where to find red pixels\n    red_pixels = np.where(grid == 2)\n    # combine and return list of (row, col)\n    return list(zip(red_pixels[0], red_pixels[1]))\n\ndef get_red_groups(red_pixels_by_row):\n    grouped_red_pixels = {}\n    for row, cols in red_pixels_by_row.items():\n        grouped_red_pixels[row] = []\n        current_group = []\n        cols.sort()  # Ensure columns are sorted\n        for i in range(len(cols)):\n            current_group.append(cols[i])\n            if i + 1 == len(cols) or cols[i+1] != cols[i] + 1: # Check for contiguity\n                grouped_red_pixels[row].append(current_group)\n                current_group = []\n    return grouped_red_pixels\n\ndef transform(input_grid):\n    output_grid = np.copy(input_grid)\n    rows, cols = output_grid.shape\n\n    red_pixels = get_red_pixels(input_grid)\n    \n    # create dictionary, keys are row, values are column\n    red_pixels_by_row = {}\n    for r, c in red_pixels:\n        if r not in red_pixels_by_row:\n            red_pixels_by_row[r] = []\n        red_pixels_by_row[r].append(c)\n\n    # group red pixels\n    red_groups = get_red_groups(red_pixels_by_row)\n\n\n    # change last red to yellow\n    for row in red_groups:\n      for group in red_groups[row]:\n        last_red_col = group[-1]\n        output_grid[row, last_red_col] = 4\n\n\n    # propagate yellow color down, conditionally\n    for r in range(rows - 1):\n        for c in range(cols):\n            if output_grid[r, c] == 4:\n                if output_grid[r + 1, c] != 2:\n                    output_grid[r + 1, c] = 4\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4095,
    "candidates_token_count": 576,
    "total_token_count": 4671,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 5.998074,
  "response_file": "012-response.json"
}