import numpy as np

def get_bounding_box(grid):
    """Find the bounding box coordinates of non-zero pixels."""
    rows, cols = np.where(grid != 0)
    if len(rows) == 0:  # Handle empty grid case
        return None  # Or return (0, 0, 0, 0), depending on desired behavior
    min_row, max_row = np.min(rows), np.max(rows)
    min_col, max_col = np.min(cols), np.max(cols)
    return min_row, max_row, min_col, max_col

def transform(input_grid):
    """
    Crops the input grid to the bounding box of the non-zero pixels.
    """
    # Convert input_grid to a NumPy array
    input_grid = np.array(input_grid)
    
    # Find the bounding box
    bounding_box = get_bounding_box(input_grid)

    # Check If there are no non-zero pixels
    if bounding_box is None:
      return [] # Return an empty grid

    # Extract the region
    min_row, max_row, min_col, max_col = bounding_box
    output_grid = input_grid[min_row:max_row+1, min_col:max_col+1]

    return output_grid.tolist()

def analyze_example(example):
    input_grid = np.array(example['input'])
    expected_output_grid = np.array(example['output'])
    transformed_output_grid = np.array(transform(example['input']))

    input_bb = get_bounding_box(input_grid)
    expected_output_bb = get_bounding_box(expected_output_grid)
    transformed_output_bb = get_bounding_box(transformed_output_grid)

    input_non_white_pixels = np.sum(input_grid != 0)
    expected_output_non_white_pixels = np.sum(expected_output_grid != 0)
    transformed_output_non_white_pixels = np.sum(transformed_output_grid != 0)

    is_correct = np.array_equal(transformed_output_grid, expected_output_grid)

    report = {
        "input_bounding_box": input_bb,
        "expected_output_bounding_box": expected_output_bb,
        "transformed_output_bounding_box": transformed_output_bb,
        "input_non_white_pixels": int(input_non_white_pixels),
        "expected_output_non_white_pixels": int(expected_output_non_white_pixels),
        "transformed_output_non_white_pixels": int(transformed_output_non_white_pixels),
        "is_correct": bool(is_correct)
    }
    return report

task_data = {
    "train": [
        {
            "input": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 2, 3, 0, 0, 0],
                [0, 0, 0, 0, 4, 5, 6, 0, 0, 0],
                [0, 0, 0, 0, 7, 8, 9, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            "output": [
                [1, 2, 3],
                [4, 5, 6],
                [7, 8, 9]
            ]
        },
        {
            "input": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 0, 3, 0, 0, 0],
                [0, 0, 0, 0, 0, 5, 0, 0, 0, 0],
                [0, 0, 0, 0, 7, 0, 9, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            "output": [
                [1, 0, 3],
                [0, 5, 0],
                [7, 0, 9]
            ]
        },
        {
            "input": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 1, 3, 0, 0, 0],
                [0, 0, 0, 0, 1, 5, 1, 0, 0, 0],
                [0, 0, 0, 0, 7, 1, 9, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            "output": [
                [1, 1, 3],
                [1, 5, 1],
                [7, 1, 9]
            ]
        }
    ]
}

reports = [analyze_example(example) for example in task_data['train']]
for i, report in enumerate(reports):
    print(f"Example {i+1}:")
    print(report)
    print("-" * 20)