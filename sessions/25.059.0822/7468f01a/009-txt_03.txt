import numpy as np

# Helper function to find yellow bounding box
def find_yellow_bounding_box(grid):
    rows, cols = np.where(grid == 4)
    if len(rows) == 0:
        return None
    min_row, max_row = np.min(rows), np.max(rows)
    min_col, max_col = np.min(cols), np.max(cols)
    return min_row, max_row, min_col, max_col

# Example data (replace with actual data from the task)
examples = [
    {
        "input": np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 4, 4, 4, 4, 4, 4, 4, 0],
                           [0, 4, 0, 0, 0, 0, 0, 4, 0],
                           [0, 4, 0, 0, 0, 0, 0, 4, 0],
                           [0, 4, 4, 4, 4, 4, 4, 4, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
        "output": np.array([[4, 4, 4, 4, 4, 4, 4],
                            [4, 0, 0, 0, 0, 0, 4],
                            [4, 0, 0, 0, 0, 0, 4],
                            [4, 4, 4, 4, 4, 4, 4]]),
    },
    {
        "input": np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0],
                           [0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0],
                           [0, 0, 0, 4, 0, 5, 5, 5, 5, 5, 5, 5, 0, 4, 0, 0],
                           [0, 0, 0, 4, 0, 5, 5, 5, 5, 5, 5, 5, 0, 4, 0, 0],
                           [0, 0, 0, 4, 0, 5, 5, 5, 5, 5, 5, 5, 0, 4, 0, 0],
                           [0, 0, 0, 4, 0, 5, 5, 5, 5, 5, 5, 5, 0, 4, 0, 0],
                           [0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0],
                           [0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
        "output": np.array([[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],
                            [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
                            [4, 0, 5, 5, 5, 5, 5, 5, 5, 0, 4],
                            [4, 0, 5, 5, 5, 5, 5, 5, 5, 0, 4],
                            [4, 0, 5, 5, 5, 5, 5, 5, 5, 0, 4],
                            [4, 0, 5, 5, 5, 5, 5, 5, 5, 0, 4],
                            [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
                            [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]]),
    },
    {
        "input": np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 4, 4, 4, 4, 4, 0, 0],
                           [0, 0, 0, 4, 0, 0, 0, 4, 0, 0],
                           [0, 0, 0, 4, 0, 0, 0, 4, 0, 0],
                           [0, 0, 0, 4, 0, 0, 0, 4, 0, 0],
                           [0, 0, 0, 4, 4, 4, 4, 4, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
        "output": np.array([[4, 4, 4, 4, 4],
                            [4, 0, 0, 0, 4],
                            [4, 0, 0, 0, 4],
                            [4, 0, 0, 0, 4],
                            [4, 4, 4, 4, 4]]),
    },
        {
        "input": np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 4, 4, 0, 0, 0, 0],
                           [0, 0, 0, 0, 4, 4, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
        "output": np.array([[4, 4],
                            [4, 4]]),
    }
]

for i, example in enumerate(examples):
    input_grid = example["input"]
    output_grid = example["output"]
    yellow_bbox = find_yellow_bounding_box(input_grid)
    print(f"Example {i+1}:")
    print(f"  Input shape: {input_grid.shape}")
    print(f"  Output shape: {output_grid.shape}")
    if yellow_bbox:
        min_row, max_row, min_col, max_col = yellow_bbox
        print(f"  Yellow BBox: rows={min_row}-{max_row}, cols={min_col}-{max_col}")
        predicted_output = input_grid[min_row:max_row+1, min_col:max_col+1]
        print(f"  Correct Output? {np.array_equal(predicted_output, output_grid)}")

    else:
        print("  Yellow BBox: None (no yellow pixels)")
        print(f"  Correct Output? {np.array_equal(np.array([]), output_grid)}")
