{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe algorithm extracts a contiguous, non-white colored region from a larger grid. The extracted region maintains the relative positions and colors of its pixels. The output grid is a minimal bounding box around the extracted region. Background (white/0) pixels are discarded.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Extracts the smallest rectangular subgrid containing all non-white pixels.\n    \"\"\"\n    rows, cols = input_grid.shape\n    non_white_pixels = []\n\n    # Find all non-white pixels\n    for r in range(rows):\n        for c in range(cols):\n            if input_grid[r, c] != 0:\n                non_white_pixels.append((r, c))\n\n    if not non_white_pixels:  # Handle the case where the input is all white\n        return np.array([[]])\n\n    # Find bounding box coordinates\n    min_row, min_col = non_white_pixels[0]\n    max_row, max_col = non_white_pixels[0]\n    for r, c in non_white_pixels:\n        min_row = min(min_row, r)\n        max_row = max(max_row, r)\n        min_col = min(min_col, c)\n        max_col = max(max_col, c)\n\n    # Create output grid\n    output_rows = max_row - min_row + 1\n    output_cols = max_col - min_col + 1\n    output_grid = np.zeros((output_rows, output_cols), dtype=int)\n\n    # Copy pixels to the output grid\n    for r, c in non_white_pixels:\n        output_grid[r - min_row, c - min_col] = input_grid[r, c]\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4754,
    "candidates_token_count": 429,
    "total_token_count": 5183,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 5.580238,
  "response_file": "002-response.json"
}