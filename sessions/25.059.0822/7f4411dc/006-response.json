{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. Identify Orange Pixels: Locate all pixels with the color orange (value 7).\n2. Check for White Neighbors: For *each* orange pixel, determine if ANY of its immediate neighbors (up, down, left, right, and diagonals) are white (value 0).\n3. Contiguous Length Check If an orange pixel is adjacent to a white, determine the maximum contiguous length of orange in any direction.\n4. Conditional Removal: If an orange pixel *is* adjacent to a white pixel *and* the maximum contiguous length is three or greater, change the orange pixel to white (0); otherwise, leave the orange pixel unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef is_adjacent_to_white(grid, r, c):\n    \"\"\"Checks if a cell at (r, c) is adjacent to a white (0) cell.\"\"\"\n    rows, cols = grid.shape\n    for dr in [-1, 0, 1]:\n        for dc in [-1, 0, 1]:\n            if dr == 0 and dc == 0:\n                continue\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < rows and 0 <= nc < cols and grid[nr, nc] == 0:\n                return True\n    return False\n\ndef are_any_white_pixels(grid):\n    \"\"\"Check if there are any white pixels in the grid\"\"\"\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r,c] == 0:\n                return True\n\n    return False\n    \ndef get_contiguous_group_size(grid, r, c, color):\n    \"\"\"\n    Calculate maximum group size of contiguous cells of same color in any single direction.\n    \"\"\"\n    rows, cols = grid.shape\n    max_size = 0\n\n    # Check Horizontal\n    count = 0\n    for dc in range(-cols + 1, cols):\n        nc = c + dc\n        if 0 <= nc < cols and grid[r,nc] == color:\n            count += 1\n        elif count > 0:\n            max_size = max(count,max_size)\n            count = 0\n\n    #Check Vertical\n    count = 0\n    for dr in range(-rows + 1, rows):\n        nr = r + dr\n        if 0 <= nr < rows and grid[nr,c] == color:\n            count += 1\n        elif count > 0:\n            max_size = max(count,max_size)\n            count = 0\n    \n    # Check diagonals\n    for slope in [-1,1]:\n        count = 0\n        for dd in range(-max(rows,cols)+1,max(rows,cols)):\n            nr = r + dd\n            nc = c + slope*dd\n\n            if 0 <= nr < rows and 0 <= nc < cols and grid[nr,nc] == color:\n                count +=1\n            elif count > 0:\n                max_size = max(count,max_size)\n                count = 0            \n    \n    return max_size\n            \ndef transform(input_grid):\n    # Initialize output_grid as a copy of the input_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = output_grid.shape\n    any_white = are_any_white_pixels(input_grid)\n\n    # Iterate through each cell in the grid\n    for r in range(rows):\n        for c in range(cols):\n            # Check if the cell is orange (7)\n            if output_grid[r, c] == 7:\n                # Check adjacency to white and contiguous group size\n                if any_white and get_contiguous_group_size(output_grid,r,c,7) >= 3:\n                    output_grid[r, c] = 0  # Change to white\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5065,
    "candidates_token_count": 908,
    "total_token_count": 5973,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.092381,
  "response_file": "006-response.json"
}