{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. Find Contiguous Regions: Identify all contiguous regions of pixels that have the same color (excluding white).  A contiguous region is a group of pixels where each pixel is directly adjacent (up, down, left, or right, but not diagonally) to at least one other pixel in the same region.\n\n2. Check for White Neighbors: For each identified region, determine if ANY pixel within that region is immediately adjacent (including diagonally) to a white pixel (value 0).\n\n3.  Conditional Removal Based on Group Size: If a region has at least one pixel adjacent to white, and the maximum contiguous length within the region, in any direction is three or greater, change all pixels in that region to white (0).  Otherwise, leave the region unchanged.\n\n\"\"\"\n\nimport numpy as np\n\ndef is_adjacent_to_white(grid, r, c):\n    \"\"\"Checks if a cell at (r, c) is adjacent to a white (0) cell.\"\"\"\n    rows, cols = grid.shape\n    for dr in [-1, 0, 1]:\n        for dc in [-1, 0, 1]:\n            if dr == 0 and dc == 0:\n                continue\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < rows and 0 <= nc < cols and grid[nr, nc] == 0:\n                return True\n    return False\n\ndef get_contiguous_group_size(grid, r, c, color):\n    \"\"\"\n    Calculate maximum group size of contiguous cells of same color in any single direction.\n    \"\"\"\n    rows, cols = grid.shape\n    max_size = 0\n\n    # Check Horizontal\n    count = 0\n    for dc in range(-cols + 1, cols):\n        nc = c + dc\n        if 0 <= nc < cols and grid[r,nc] == color:\n            count += 1\n        elif count > 0:\n            max_size = max(count,max_size)\n            count = 0\n\n    #Check Vertical\n    count = 0\n    for dr in range(-rows + 1, rows):\n        nr = r + dr\n        if 0 <= nr < rows and grid[nr,c] == color:\n            count += 1\n        elif count > 0:\n            max_size = max(count,max_size)\n            count = 0\n    \n    # Check diagonals\n    for slope in [-1,1]:\n        count = 0\n        for dd in range(-max(rows,cols)+1,max(rows,cols)):\n            nr = r + dd\n            nc = c + slope*dd\n\n            if 0 <= nr < rows and 0 <= nc < cols and grid[nr,nc] == color:\n                count +=1\n            elif count > 0:\n                max_size = max(count,max_size)\n                count = 0            \n    \n    return max_size\n\ndef get_contiguous_regions(grid):\n    \"\"\"Identifies all contiguous regions of non-white pixels.\"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n    regions = []\n\n    def dfs(r, c, color, current_region):\n        \"\"\"Depth-first search to find all pixels in a contiguous region.\"\"\"\n        if (r < 0 or r >= rows or c < 0 or c >= cols or\n            visited[r, c] or grid[r, c] != color):\n            return\n        visited[r, c] = True\n        current_region.append((r, c))\n        # Check adjacent cells (not diagonally)\n        dfs(r + 1, c, color, current_region)\n        dfs(r - 1, c, color, current_region)\n        dfs(r, c + 1, color, current_region)\n        dfs(r, c - 1, color, current_region)\n\n    for r in range(rows):\n        for c in range(cols):\n            if not visited[r, c] and grid[r, c] != 0:\n                current_region = []\n                dfs(r, c, grid[r, c], current_region)\n                regions.append((grid[r,c], current_region))  # Store color and region\n    return regions\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the defined rules.\"\"\"\n    output_grid = np.copy(input_grid)\n    regions = get_contiguous_regions(input_grid)\n\n    for color, region in regions:\n        adjacent_to_white = False\n        max_size = 0\n        for r, c in region:\n            if is_adjacent_to_white(input_grid, r, c):\n                adjacent_to_white = True\n            max_size = max(max_size,get_contiguous_group_size(input_grid,r,c,color))\n\n        if adjacent_to_white and max_size >=3:\n            for r, c in region:\n                output_grid[r, c] = 0  # Change to white\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6098,
    "candidates_token_count": 1175,
    "total_token_count": 7273,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 12.725176,
  "response_file": "008-response.json"
}