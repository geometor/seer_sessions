import numpy as np
from collections import Counter

def calculate_metrics(grid):
    grid = np.array(grid)
    metrics = {
        "dimensions": grid.shape,
        "min": int(np.min(grid)),
        "max": int(np.max(grid)),
        "mean": float(np.mean(grid)),
        "median": float(np.median(grid)),
        "unique_values": np.unique(grid).tolist(),
        "mode": Counter(grid.flatten()).most_common(1)[0][0]
    }
    return metrics

def analyze_example(example):
    input_metrics = calculate_metrics(example['input'])
    output_metrics = calculate_metrics(example['output'])

    input_grid = np.array(example['input'])
    output_grid = np.array(example['output'])

    diff_grid = np.subtract(input_grid, output_grid,  where=(input_grid.shape == output_grid.shape))
    diff_metrics = None
    if input_grid.shape == output_grid.shape:
        diff_metrics = calculate_metrics(diff_grid)
    
    return {
        "input": input_metrics,
        "output": output_metrics,
        "diff": diff_metrics
    }

# Assuming 'task' variable contains the task data
task_data = {
    "train": [
        {"input": [[0, 5, 0], [5, 0, 5], [0, 5, 0]], "output": [[4, 8, 3], [8, 3, 4], [3, 4, 8]]},
        {"input": [[5, 5, 5], [5, 5, 5], [5, 5, 5]], "output": [[4, 4, 4], [4, 4, 4], [4, 4, 4]]},
        {"input": [[1, 0, 1], [0, 1, 1], [1, 0, 1]], "output": [[2, 0, 2], [0, 1, 1], [2, 0, 2]]},
    ]
}

results = [analyze_example(example) for example in task_data['train']]
print(results)
