{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Red Shapes:** Find all contiguous blocks of red pixels. Consider them as separate objects.\n2.  **Connectivity Check:** Determine if a red shape is \"connected\" \u2013 meaning the red pixels are adjacent horizontally or diagonally.\n3.  **Shape Type Check** determine if the shape is a \"line\". A line is defined as a series of horizontally, vertically, or diagonally adjacent pixels of the same color.\n4.  **Conditional Transformation:** If a red shape is a connected line:\n    *   Change the first red pixel in the line to yellow.\n    *   Skip the next red pixel (leave it red).\n    *   Change the next red pixel to yellow, and so on, in an alternating pattern from both ends, towards the center of the line.\n5.  **Other Shapes:** If the red shape is *not* a connected line, do not perform any transformations. Leave the pixels as they are.\n\"\"\"\n\nimport numpy as np\n\ndef find_connected_components(grid, color):\n    \"\"\"Finds connected components of a given color in the grid.\"\"\"\n    visited = np.zeros_like(grid, dtype=bool)\n    components = []\n\n    def is_valid(x, y):\n        return 0 <= x < grid.shape[0] and 0 <= y < grid.shape[1]\n\n    def dfs(x, y, current_component):\n        if not is_valid(x, y) or visited[x, y] or grid[x, y] != color:\n            return\n        visited[x, y] = True\n        current_component.append((x, y))\n\n        for dx in [-1, 0, 1]:\n            for dy in [-1, 0, 1]:\n                if dx == 0 and dy == 0:\n                    continue\n                dfs(x + dx, y + dy, current_component)\n\n    for x in range(grid.shape[0]):\n        for y in range(grid.shape[1]):\n            if not visited[x, y] and grid[x, y] == color:\n                current_component = []\n                dfs(x, y, current_component)\n                components.append(current_component)\n    return components\n\ndef is_line(component):\n    \"\"\"Checks if a component is a line (horizontal, vertical, or diagonal).\"\"\"\n    if len(component) <= 1:\n        return True  # Single pixel or empty is considered a line\n\n    # Convert component coordinates to NumPy array for easier manipulation\n    coords = np.array(component)\n    x_coords = coords[:, 0]\n    y_coords = coords[:, 1]\n\n    # Check for horizontal line (all x coordinates are the same)\n    if np.all(x_coords == x_coords[0]):\n        return True\n\n    # Check for vertical line (all y coordinates are the same)\n    if np.all(y_coords == y_coords[0]):\n        return True\n\n    # Check for diagonal line (difference between x and y coordinates is constant)\n    diffs = x_coords - y_coords\n    if np.all(diffs == diffs[0]):  # Top-left to bottom-right diagonal\n        return True\n\n    # Check for anti-diagonal (sum of x and y coordinates is constant)\n    sums = x_coords + y_coords\n    if np.all(sums == sums[0]):  # Top-right to bottom-left diagonal\n         return True\n\n    # Check if the differences in x and y coordinates are constant\n    dx = np.diff(x_coords)\n    dy = np.diff(y_coords)\n    \n    if np.all(dx == dx[0]) and np.all(dy == dy[0]) and (abs(dx[0]) <=1 and abs(dy[0])<=1):\n        return True\n\n\n    return False\n    \n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the defined rules.\"\"\"\n    output_grid = input_grid.copy()\n    red_components = find_connected_components(input_grid, 2)\n\n    for component in red_components:\n        if is_line(component):\n            # Sort component by x and then y to handle different line orientations\n            component.sort(key=lambda p: (p[0], p[1]))\n            \n            #Apply alternating transformation from both ends of the line.\n            for i in range(0, len(component), 2):\n                output_grid[component[i]] = 4\n            \n            component.sort(key=lambda p: (p[0], -p[1]), reverse=True)\n\n            for i in range(0, len(component), 2):\n                output_grid[component[i]] = 4\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3765,
    "candidates_token_count": 1091,
    "total_token_count": 4856,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.73439,
  "response_file": "005-response.json"
}