{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Colored Bands:** Examine the input grid to determine if there's a *complete* horizontal or vertical band of alternating blue (1) and red (2) pixels. A complete band spans the entire width (for horizontal) or height (for vertical) of the grid. It is not enough for just two pixels to be present.\n2. **Conditional Stretching:**\n    *   **Horizontal Band:** If a complete horizontal band exists, stretch the grid horizontally by a factor of 2. Duplicate each column. This applies to *all* rows, including those not part of the colored band.\n    *  **Vertical Band:** If a complete vertical band exists, stretch the grid vertically by a factor of 2. Duplicate each row. This applies to *all* columns including those not part of the colored band.\n    *   **No Complete Band:** If neither a complete horizontal nor a complete vertical band exists, the output grid is identical to the input grid. There's no stretching.\n\n3.  **Background:** The background (color 5, gray) is stretched along with the colored band if stretching occurs.\n\"\"\"\n\nimport numpy as np\n\ndef _is_complete_alternating_band(row_or_col):\n    \"\"\"Checks if a row or column is a complete alternating band of 1s and 2s.\"\"\"\n    if not row_or_col.size:  # Empty row/column\n        return False\n    if row_or_col[0] != 1 and row_or_col[0] != 2:\n        return False\n    for i in range(row_or_col.size - 1):\n        if row_or_col[i] == row_or_col[i+1] or (row_or_col[i] != 1 and row_or_col[i] != 2) or (row_or_col[i+1] != 1 and row_or_col[i+1] != 2):\n            return False\n    return True\n\ndef _find_complete_bands(grid):\n    \"\"\"Finds complete horizontal and vertical alternating bands.\"\"\"\n    rows, cols = grid.shape\n    horizontal_band = None\n    vertical_band = None\n\n    # Check for complete horizontal band\n    for r in range(rows):\n        if _is_complete_alternating_band(grid[r]):\n            horizontal_band = r\n            break  # Only one complete band is needed\n\n    # Check for complete vertical band (using transposed grid)\n    transposed_grid = grid.T\n    for c in range(cols):\n        if _is_complete_alternating_band(transposed_grid[c]):\n            vertical_band = c\n            break  # Only one complete band is needed\n\n    return horizontal_band, vertical_band\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid based on the presence of complete alternating bands.\"\"\"\n    rows, cols = input_grid.shape\n    horizontal_band, vertical_band = _find_complete_bands(input_grid)\n\n    # No complete band: return input as is\n    if horizontal_band is None and vertical_band is None:\n        return input_grid.copy()\n\n    # Horizontal band: stretch horizontally\n    if horizontal_band is not None:\n        output_grid = np.zeros((rows, cols * 2), dtype=int)\n        for r in range(rows):\n            for c in range(cols):\n                output_grid[r, 2 * c] = input_grid[r, c]\n                output_grid[r, 2 * c + 1] = input_grid[r, c]\n        return output_grid\n\n    # Vertical band: stretch vertically\n    if vertical_band is not None:\n        output_grid = np.zeros((rows * 2, cols), dtype=int)\n        for c in range(cols):\n            for r in range(rows):\n                output_grid[2 * r, c] = input_grid[r, c]\n                output_grid[2 * r + 1, c] = input_grid[r, c]\n        return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8827,
    "candidates_token_count": 935,
    "total_token_count": 9762,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.211019,
  "response_file": "018-response.json"
}