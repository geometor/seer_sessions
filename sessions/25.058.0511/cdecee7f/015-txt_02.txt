import numpy as np

def get_nonzero_pixels(grid):
    """
    Extracts the non-zero pixels from the input grid and returns them in a list.
    Reads from the input grid from bottom to top, and left to right.
    """
    nonzero_pixels = []
    for r in range(grid.shape[0] -1, -1, -1):
        for c in range(grid.shape[1]):
            if grid[r, c] != 0:
                nonzero_pixels.append(grid[r, c])
    return nonzero_pixels

def transform(input_grid):
    # initialize output_grid
    output_grid = np.zeros((3, 3), dtype=int)

    # Extract non-zero pixels
    nonzero_pixels = get_nonzero_pixels(np.array(input_grid))

    # Fill the output grid
    k=0
    for i in range(3):
        for j in range(3):
            if k < len(nonzero_pixels):
               output_grid[i,j] = nonzero_pixels[k]
               k+=1

    return output_grid

task = {
  "train": [
    {
      "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0]],
      "output": [[1, 0, 0], [0, 0, 0], [0, 0, 0]]
    },
    {
      "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 2, 2, 2]],
      "output": [[2, 2, 2], [2, 2, 2], [2, 2, 2]]
    },
    {
      "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
      "output": [[3, 3, 3], [3, 3, 3], [3, 3, 3]]
    },
    {
      "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 4, 0, 0, 0, 0, 0, 0, 0, 0], [4, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
      "output": [[4, 4], [4, 4], [0, 0]]
    },
    {
      "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 6, 6, 6, 6, 0, 0, 0], [0, 0, 0, 6, 6, 6, 6, 0, 0, 0], [0, 0, 0, 6, 6, 6, 6, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
      "output": [[6, 6, 6, 6], [6, 6, 6, 6], [6, 6, 6, 6], [0, 0, 0, 0]]
    }
  ]
}

def compare_grids(grid1, grid2):
    grid1 = np.array(grid1)
    grid2 = np.array(grid2)
    if grid1.shape != grid2.shape:
        return f"Different shapes: {grid1.shape} vs {grid2.shape}"
    else:
        return np.array_equal(grid1, grid2)

results = []
for i, example in enumerate(task["train"]):
    input_grid = example['input']
    expected_output = example['output']
    actual_output = transform(input_grid)
    comparison = compare_grids(actual_output, expected_output)
    results.append(
        {
            'example': i + 1,
            'input': input_grid,
             'expected': expected_output,
             'actual': actual_output.tolist(),
             'comparison': comparison
        }
    )

for result in results:
    print(result)