import numpy as np

# Provided code (slightly modified for easier use within this environment)
def find_center(grid):
    non_zero_coords = np.argwhere(grid != 0)
    if non_zero_coords.size == 0:
       return grid.shape[0] // 2, grid.shape[1] // 2
    center_row = int(np.mean(non_zero_coords[:, 0]))
    center_col = int(np.mean(non_zero_coords[:, 1]))
    return center_row, center_col

def extract_subgrid(grid, center_row, center_col, size=3):
    start_row = max(0, center_row - size // 2)
    end_row = min(grid.shape[0], center_row + size // 2 + 1)
    start_col = max(0, center_col - size // 2)
    end_col = min(grid.shape[1], center_col + size // 2 + 1)
    subgrid = grid[start_row:end_row, start_col:end_col]
    return subgrid

def filter_background(grid):
  # Create a new grid with only the colors 1 and 8.
  rows, cols = grid.shape
  filtered_grid = np.zeros((0,0))

  center_r, center_c = find_center(grid)
  subgrid = extract_subgrid(grid, center_r, center_c)
    
  return subgrid

def transform(input_grid):
    input_grid = np.array(input_grid)
    center_row, center_col = find_center(input_grid)
    output_grid = extract_subgrid(input_grid, center_row, center_col)
    output_grid = filter_background(output_grid)
    return output_grid.tolist()

# Task examples (replace with actual data)
task_examples = [
    {
        "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        "output": [[0, 0, 0], [0, 8, 1], [0, 0, 0]]
    },
    {
        "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        "output": [[0, 0, 0], [0, 8, 1], [0, 0, 0]]
    },
    {
        "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        "output": [[0, 0, 0], [0, 8, 1], [0, 0, 0]]
    }

]

results = []
for i, example in enumerate(task_examples):
    transformed_output = transform(example["input"])
    results.append({
        "example_index": i,
        "expected_output": example["output"],
        "actual_output": transformed_output,
        "match": transformed_output == example["output"]
    })

for result in results:
    print(result)