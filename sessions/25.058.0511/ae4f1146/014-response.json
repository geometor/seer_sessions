{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nExtracts a subgrid from the input, where the subgrid is defined by the\nlocation of blue pixels and their immediate azure neighbors. The rest of the\ninput grid is discarded.\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, row, col):\n    \"\"\"Gets the coordinates of all neighbors (including diagonals).\"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    for i in range(max(0, row - 1), min(rows, row + 2)):\n        for j in range(max(0, col - 1), min(cols, col + 2)):\n            if (i, j) != (row, col):\n                neighbors.append((i, j))\n    return neighbors\n\ndef transform(input_grid):\n    # initialize output_grid\n    input_grid = np.array(input_grid)\n    rows, cols = input_grid.shape\n    blue_pixels = []\n\n    # 1. Identify Target Pixels: Locate all 'blue' (1) pixels.\n    for r in range(rows):\n        for c in range(cols):\n            if input_grid[r, c] == 1:\n                blue_pixels.append((r, c))\n\n    if not blue_pixels:  # Handle cases with no blue pixels\n        return []\n\n    # 2. Define Extraction Region: Find bounding box and include azure neighbors.\n    min_row = min(r for r, _ in blue_pixels)\n    max_row = max(r for r, _ in blue_pixels)\n    min_col = min(c for _, c in blue_pixels)\n    max_col = max(c for _, c in blue_pixels)\n\n    # expand the region for getting azure pixels\n    target_pixels = set()\n    for r in range(min_row,max_row+1):\n       for c in range(min_col,max_col+1):\n           if input_grid[r,c] == 1:\n              target_pixels.add((r,c))\n              for nr, nc in get_neighbors(input_grid, r, c):\n                  if input_grid[nr, nc] == 8:\n                     target_pixels.add((nr,nc))\n    \n    if not target_pixels:\n        return []\n\n    # 3. Extract Subgrid.\n    min_row = min(r for r,_ in target_pixels)\n    min_col = min(c for _,c in target_pixels)\n    max_row = max(r for r,_ in target_pixels)\n    max_col = max(c for _,c in target_pixels)\n\n    output_grid = np.zeros((max_row - min_row + 1, max_col - min_col + 1), dtype=int)\n\n    for r in range(min_row, max_row + 1):\n      for c in range(min_col, max_col +1):\n         if (r,c) in target_pixels:\n            output_grid[r-min_row,c-min_col] = input_grid[r,c]\n\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2429,
    "candidates_token_count": 728,
    "total_token_count": 3157,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.980557,
  "response_file": "014-response.json"
}