import numpy as np

def find_objects(grid):
    """Finds contiguous regions of non-zero pixels."""
    objects = []
    visited = np.zeros_like(grid, dtype=bool)

    def dfs(row, col, color, obj_coords):
        """Depth-first search to find connected components."""
        if (row < 0 or row >= grid.shape[0] or col < 0 or col >= grid.shape[1]
                or visited[row, col] or grid[row, col] != color):
            return
        visited[row, col] = True
        obj_coords.append((row, col))
        dfs(row + 1, col, color, obj_coords)
        dfs(row - 1, col, color, obj_coords)
        dfs(row, col + 1, color, obj_coords)
        dfs(row, col - 1, color, obj_coords)

    for row in range(grid.shape[0]):
        for col in range(grid.shape[1]):
            if not visited[row, col] and grid[row, col] != 0:
                obj_coords = []
                dfs(row, col, grid[row, col], obj_coords)
                objects.append({
                    'color': grid[row, col],
                    'coords': obj_coords
                })
    return objects

def get_bounding_box(objects):
    """Calculates the bounding box encompassing all objects."""
    if not objects:
        return (0,0,0,0)

    min_row = min(min(coord[0] for coord in obj['coords']) for obj in objects)
    max_row = max(max(coord[0] for coord in obj['coords']) for obj in objects)
    min_col = min(min(coord[1] for coord in obj['coords']) for obj in objects)
    max_col = max(max(coord[1] for coord in obj['coords']) for obj in objects)

    return min_row, min_col, max_row, max_col

def analyze_example(input_grid, output_grid):
    """Analyzes a single input-output pair."""
    input_objects = find_objects(input_grid)
    output_objects = find_objects(output_grid)

    input_colors = {obj['color'] for obj in input_objects}
    output_colors = {obj['color'] for obj in output_objects}
    missing_colors = input_colors - output_colors
    extra_colors = output_colors - input_colors
    input_bb = get_bounding_box(input_objects)
    input_bb_size = (input_bb[2]-input_bb[0]+1, input_bb[3] - input_bb[1]+1)


    print(f"  Input Colors: {input_colors}")
    print(f"  Output Colors: {output_colors}")
    print(f"  Missing Colors: {missing_colors}")
    print(f"  Extra Colors: {extra_colors}")
    print(f" Input Bounding Box Size: {input_bb_size}")
    print(f" Number of input objects {len(input_objects)}")
    print(f" Number of output objects {len(output_objects)}")

train = [
    (np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 5, 5, 5, 0, 0, 0],
       [0, 0, 0, 5, 5, 5, 0, 0, 0],
       [0, 0, 0, 5, 5, 5, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0]]), np.array([[0, 0, 0],
       [0, 5, 0],
       [0, 0, 0]])),
    (np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 5, 5, 5, 0, 0, 0],
       [0, 0, 0, 5, 5, 5, 0, 0, 0],
       [0, 0, 0, 5, 5, 5, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0]]), np.array([[0, 0, 0],
       [0, 5, 0],
       [0, 0, 0]])),
    (np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 5, 5, 5, 0, 0, 0],
       [0, 0, 0, 5, 5, 5, 0, 0, 0],
       [0, 0, 0, 5, 5, 5, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 4, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0]]), np.array([[0, 0, 0],
       [4, 5, 0],
       [0, 0, 0]])),
    (np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 5, 5, 5, 0, 0, 0],
       [0, 0, 0, 5, 5, 5, 0, 0, 0],
       [0, 0, 0, 5, 5, 5, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 4, 4, 4, 0, 0, 0],
       [0, 0, 0, 4, 4, 4, 0, 0, 0],
       [0, 0, 0, 4, 4, 4, 0, 0, 0]]), np.array([[0, 0, 0],
       [0, 5, 0],
       [0, 4, 0]])),
    (np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 5, 5, 0, 0, 0, 0],
       [0, 0, 0, 5, 5, 0, 0, 0, 0],
       [0, 0, 0, 5, 5, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 4, 4, 4, 0, 0, 0],
       [0, 0, 0, 4, 4, 4, 0, 0, 0],
       [0, 0, 0, 4, 4, 4, 0, 0, 0]]), np.array([[0, 0, 0],
       [0, 5, 0],
       [0, 4, 0]]))
]

for i, (input_grid, output_grid) in enumerate(train):
    print(f"Example {i+1}:")
    analyze_example(input_grid, output_grid)
