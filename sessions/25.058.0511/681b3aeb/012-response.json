{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Find all distinct objects within the input grid. An object is a contiguous region of pixels sharing the same color (excluding black/background).\n2.  **Bounding Boxes:** For *each* identified object, determine its bounding box. The bounding box is the smallest rectangle that completely encloses the object.\n3.  **Sort Objects:** Sort the objects based on the top-left corner coordinates (row, then column) of their bounding boxes. This determines the order in which objects are placed.\n4.  **Iterative Placement:** Create an initially empty output grid. Iterate through the sorted objects. For each object:\n    *   Find the next available top-left position in the output grid. Initially, this is (0, 0). For subsequent objects find the next available position.\n    *   Copy the object's pixels into the output grid, starting at the calculated top-left position.\n    *   The size of output grid should change based on current object's placement.\n5. **Output:** Return the final output grid.\n\"\"\"\n\nimport numpy as np\n\ndef get_objects(grid):\n    \"\"\"\n    Identifies and returns a list of distinct colored objects in the grid.\n    Each object is represented as a list of (row, col) coordinates.\n    \"\"\"\n    objects = {}\n    visited = set()\n    rows, cols = grid.shape\n\n    def dfs(row, col, color, obj):\n        if (row, col) in visited or row < 0 or row >= rows or col < 0 or col >= cols or grid[row, col] != color:\n            return\n        visited.add((row, col))\n        obj.append((row, col))\n        dfs(row + 1, col, color, obj)\n        dfs(row - 1, col, color, obj)\n        dfs(row, col + 1, color, obj)\n        dfs(row, col - 1, color, obj)\n\n    for row in range(rows):\n        for col in range(cols):\n            color = grid[row, col]\n            if color != 0 and (row, col) not in visited:\n                obj = []\n                dfs(row, col, color, obj)\n                if color not in objects:\n                    objects[color] = []\n                objects[color].append(obj)\n    return objects\n\ndef get_object_bounding_box(obj):\n    \"\"\"Calculates the bounding box for a single object.\"\"\"\n    min_row, min_col = float('inf'), float('inf')\n    max_row, max_col = float('-inf'), float('-inf')\n    for row, col in obj:\n        min_row = min(min_row, row)\n        min_col = min(min_col, col)\n        max_row = max(max_row, row)\n        max_col = max(max_col, col)\n    return min_row, min_col, max_row, max_col\n\ndef transform(input_grid):\n    # Identify Objects\n    objects = get_objects(input_grid)\n\n    # Bounding Boxes and Sort Objects\n    sorted_objects = []\n    for color, obj_list in objects.items():\n        for obj in obj_list:\n           ob_min_row, ob_min_col, ob_max_row, ob_max_col = get_object_bounding_box(obj)\n           sorted_objects.append((color, obj, (ob_min_row, ob_min_col, ob_max_row, ob_max_col)))\n\n    sorted_objects.sort(key=lambda x: (x[3][0], x[3][1])) # sort by topleft corner\n\n    # Iterative Placement\n    output_grid = np.zeros((1, 1), dtype=int)  # Initialize with a small size\n\n    for color, obj, (ob_min_row, ob_min_col, ob_max_row, ob_max_col) in sorted_objects:\n        # Find next available top-left position\n        next_row = 0\n        next_col = 0\n        \n        if output_grid.size > 0 :\n            max_r, max_c = output_grid.shape\n            \n            \n        # get object bounding box dimensions\n        o_rows = ob_max_row - ob_min_row + 1\n        o_cols = ob_max_col - ob_min_col + 1\n        \n        # Resize output_grid if needed\n        new_rows = max(output_grid.shape[0], next_row + o_rows)\n        new_cols = max(output_grid.shape[1], next_col + o_cols)\n\n        \n        temp_grid = np.zeros((new_rows, new_cols), dtype=int)\n        temp_grid[:output_grid.shape[0], :output_grid.shape[1]] = output_grid\n        output_grid = temp_grid\n        \n\n        # Copy object's pixels\n        for r in range(o_rows):\n            for c in range(o_cols):\n                output_grid[next_row + r, next_col + c] = input_grid[ob_min_row + r, ob_min_col + c]\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 2277,
            "end_index": 2456,
            "uri": "https://github.com/waltman/advent-of-code-2022",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5197,
    "candidates_token_count": 1217,
    "total_token_count": 6414,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.555245,
  "response_file": "012-response.json"
}