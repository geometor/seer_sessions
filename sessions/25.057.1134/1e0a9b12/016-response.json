{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. **Identify Pixels:** Examine each non-zero pixel in the input grid.\n2. **Check for Movability:** For each pixel, determine if it can move down. A pixel can move down *only if* the cell directly below it is either:\n   - Empty (value 0).\n   - Occupied by a non-zero pixel (of any color), AND the pixel below is not part of the same 'original' cluster as the pixel being checked.\n3. **Move Down:** If a pixel is movable, move it down *as far as possible* until:\n    -It hits another pixel of any color.\n    -It reaches the bottom row.\n4. **Merge:** If a pixel moves down and becomes adjacent to another non-zero pixel, consider them merged into a single cluster (this is implicit in the positioning).\n5.  **Fill empty spaces:** If a space is not occupied, fill it with zero.\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, r, c):\n    neighbors = []\n    rows, cols = grid.shape\n    if r > 0:\n        neighbors.append((r - 1, c))\n    if r < rows - 1:\n        neighbors.append((r + 1, c))\n    if c > 0:\n        neighbors.append((r, c - 1))\n    if c < cols - 1:\n        neighbors.append((r, c + 1))\n    return neighbors\n\ndef find_clusters(grid):\n    clusters = []\n    visited = set()\n    rows, cols = grid.shape\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and (r, c) not in visited:\n                cluster = []\n                queue = [(r, c)]\n                visited.add((r, c))\n\n                while queue:\n                    curr_r, curr_c = queue.pop(0)\n                    cluster.append((curr_r, curr_c, grid[curr_r, curr_c]))\n                    for nr, nc in get_neighbors(grid, curr_r, curr_c):\n                        if (nr, nc) not in visited and grid[nr,nc] != 0:\n                            visited.add((nr, nc))\n                            queue.append((nr, nc))\n                clusters.append(cluster)\n    return clusters\n\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.zeros_like(input_grid)\n    rows, cols = input_grid.shape\n    \n    # Find original clusters to track membership\n    original_clusters = find_clusters(input_grid)\n    cluster_map = {}  # (r, c) -> cluster_index\n    for i, cluster in enumerate(original_clusters):\n        for r, c, _ in cluster:\n            cluster_map[(r, c)] = i\n\n    # Iterate through each *pixel* rather than clusters\n    for r in range(rows):\n        for c in range(cols):\n            if input_grid[r, c] != 0:\n                # Check for movability\n                new_r = r\n                while new_r < rows - 1:\n                    # Condition 1: Empty space below\n                    if output_grid[new_r + 1, c] == 0 and input_grid[new_r+1,c] == 0:\n                        new_r += 1\n                    # Condition 2: Occupied by a non-zero pixel, but NOT from the same original cluster\n                    elif output_grid[new_r + 1,c] == 0 and input_grid[new_r+1,c] != 0 and cluster_map.get((r,c)) != cluster_map.get((new_r+1, c)):\n                        new_r += 1\n\n                    else:\n                        break  # Cannot move further down\n\n                output_grid[new_r, c] = input_grid[r, c]\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 896,
            "end_index": 1135,
            "uri": "https://github.com/Anuj-cs20/IIITDMK_CSE_Coursework",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2979,
    "candidates_token_count": 923,
    "total_token_count": 3902,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.919648,
  "response_file": "016-response.json"
}