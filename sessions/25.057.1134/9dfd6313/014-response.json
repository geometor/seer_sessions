{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Anchors:** Locate all grey (5) cells. These generally remain in their original positions.\n\n2.  **Propagate Left to Right**.  Consider each non-grey and non-white cell, moving it along the row as follows:\n    *   Iterate through all non-grey and non-white cells in reading order (left to right, top to bottom)\n    *  If a non-grey, non-white pixel has a grey (5) pixel anywhere above it in the same column, move it to first empty cell on the same column, directly above the nearest grey (5).\n    *   If a non-grey, non-white pixel has a grey (5) pixel anywhere below it in the same column, move it to first empty cell on the same column, directly below the nearest grey (5).\n    *   When a pixel is moved on row to above a gray, check the right adjacent pixel of its orginal position and if not 0, move the value to above the neighboring grey as well.\n\n3. Copy any not moved non-grey and non-white to the output.\n\"\"\"\n\nimport numpy as np\n\ndef find_nearest_grey_above(grid, row, col):\n    \"\"\"Finds the nearest grey (5) cell above the given cell in the same column.\"\"\"\n    for r in range(row - 1, -1, -1):\n        if grid[r][col] == 5:\n            return r\n    return -1\n\ndef find_nearest_grey_below(grid, row, col):\n    \"\"\"Finds the nearest grey (5) cell below the given cell in the same column.\"\"\"\n    for r in range(row + 1, len(grid)):\n        if grid[r][col] == 5:\n            return r\n    return -1\n\ndef find_first_empty_above(grid, row, col):\n    \"\"\"Finds the first empty (0) cell above the given row in the same column.\"\"\"\n    for r in range(row - 1, -1, -1):\n        if grid[r][col] == 0:\n            return r\n    return -1\n\ndef find_first_empty_below(grid, row, col):\n    \"\"\"Finds the first empty (0) cell below the given row in the same column.\"\"\"\n    for r in range(row + 1, len(grid)):\n        if grid[r][col] == 0:\n            return r\n    return -1\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.zeros_like(input_grid)\n    rows, cols = input_grid.shape\n    moved = np.zeros_like(input_grid, dtype=bool) # track if pixel has moved\n    \n    # copy the grey cells first\n    for r in range(rows):\n      for c in range(cols):\n        if input_grid[r][c] == 5:\n            output_grid[r][c] = 5\n            moved[r,c] = True\n\n    # Iterate through non-grey, non-white cells\n    for r in range(rows):\n        for c in range(cols):\n            if input_grid[r][c] not in (0, 5) and not moved[r,c]:\n                val = input_grid[r][c]\n                \n                # Check for grey above\n                grey_above = find_nearest_grey_above(input_grid, r, c)\n                if grey_above != -1:\n                    empty_above = find_first_empty_above(input_grid, grey_above, c)\n                    if empty_above != -1:\n                        output_grid[empty_above][c] = val\n                        moved[r,c] = True\n                        if c+1 < cols and input_grid[r,c+1] != 0:\n                           grey_neighbor_above = find_nearest_grey_above(input_grid,r,c+1)\n                           if grey_neighbor_above != -1:\n                              empty_neighbor = find_first_empty_above(input_grid, grey_neighbor_above, c+1)\n                              output_grid[empty_neighbor][c+1] = input_grid[r][c+1]\n                              moved[r,c+1] = True\n                        continue\n                           \n\n                # Check for grey below\n                grey_below = find_nearest_grey_below(input_grid, r, c)\n                if grey_below != -1:\n                    empty_below = find_first_empty_below(input_grid, grey_below +1 , c)\n                    if empty_below != -1:\n                        output_grid[empty_below][c] = val\n                        moved[r,c] = True\n                        continue\n\n    # copy unmoved\n    for r in range(rows):\n        for c in range(cols):\n           if not moved[r,c]:\n              output_grid[r][c] = input_grid[r][c]\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2312,
    "candidates_token_count": 1151,
    "total_token_count": 3463,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.97993,
  "response_file": "014-response.json"
}