import numpy as np

def transform(input_grid):
    """
    Transforms the input grid according to the specified rules.
    """
    input_grid = np.array(input_grid)
    rows, cols = input_grid.shape
    output_grid = np.zeros((rows + 2, cols), dtype=int)

    # Copy the input grid to the output grid
    output_grid[:rows, :] = input_grid

    # Iterate through each column
    for j in range(cols):
        input_column = input_grid[:, j]

        # Find the last occurrence of '8' in the column
        last_occurrence = -1
        for i in range(len(input_column) -1, -1, -1):
            if input_column[i] == 8:
                last_occurrence = i
                break

        # set the 4th row, add 8 if it was present
        if last_occurrence != -1:
            output_grid[3, j] = 8
        else:
            output_grid[3,j] = 0

        # set 0 for the 5th row
        output_grid[4,j] = 0

    return output_grid.tolist()

def show_result(index, inp, exp, pred):
    print(f"Example: {index}")
    print(f"Input:\n{np.array(inp)}")
    print(f"Expected:\n{np.array(exp)}")
    print(f"Predicted:\n{np.array(pred)}")
    diff = np.array(exp) - np.array(pred)
    print(f"Difference (Expected - Predicted):\n{diff}")
    print("-" * 20)

task = {
    "train": [
        {
            "input": [[0, 5, 0], [0, 8, 0], [0, 0, 0]],
            "output": [[0, 5, 0], [0, 8, 0], [0, 0, 0], [0, 8, 0], [0, 0, 0]],
        },
        {
            "input": [[0, 0, 0], [8, 0, 8], [0, 0, 0]],
            "output": [[0, 0, 0], [8, 0, 8], [0, 0, 0], [8, 0, 8], [0, 0, 0]],
        },
        {
            "input": [[8, 0, 0], [0, 0, 0], [0, 0, 8]],
            "output": [[8, 0, 0], [0, 0, 0], [0, 0, 8], [8, 0, 8], [0, 0, 0]],
        },
        {
            "input": [[0, 8, 0], [0, 0, 0], [0, 8, 0]],
            "output": [[0, 8, 0], [0, 0, 0], [0, 8, 0], [0, 8, 0], [0, 0, 0]],
        },
    ],
    "test": [{"input": [[0, 0, 8], [0, 0, 0], [8, 0, 0]], "output": []}],
}

for index, example in enumerate(task["train"]):
    inp = example["input"]
    exp = example["output"]
    pred = transform(inp)
    show_result(index,inp, exp, pred)
