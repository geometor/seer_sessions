import numpy as np

def analyze_results(task_data):
  """
  Analyzes the results of the current transform function on each input grid.
  Prints information on incorrect outputs, and other details.
  """
  for data in task_data:
      for i, example in enumerate(data['train']):
          input_grid = example['input']
          expected_output = example['output']
          predicted_output = transform(input_grid)
          if predicted_output != expected_output:
              print(f"Example {i+1}: Incorrect")
              print(f"  Input: {input_grid}")
              print(f"  Expected Output: {expected_output}")
              print(f"  Predicted Output: {predicted_output}")
              input_np = np.array(input_grid)
              output_np = np.array(expected_output)
              print(f"Input Shape: {input_np.shape}")
              print(f"Expected Output Shape: {output_np.shape}")
              diffs = output_np.shape[0] - input_np.shape[0]
              print(f'Rows added: {diffs}')


              # compare each column
              for col_idx in range(min(input_np.shape[1], output_np.shape[1])):
                input_col = input_np[:, col_idx]
                output_col = output_np[:, col_idx]

                print(f"  Differences in column {col_idx}:")
                print(f"Input Column: {input_col}")
                print(f"Output Column: {output_col}")

          else:
                print(f'Example {i+1}: Correct')

tasks = [
    {
        "train": [
            {
                "input": [[3, 3, 3], [3, 8, 3], [8, 8, 8]],
                "output": [[3, 3, 3], [3, 8, 3], [8, 8, 8], [0, 8, 0], [0, 0, 0]],
            },
            {
                "input": [[3, 3, 8], [8, 8, 3], [8, 3, 3]],
                "output": [[3, 3, 8], [8, 8, 3], [8, 3, 3], [8, 0, 0], [0, 0, 0]],
            },
            {
                "input": [[8, 3, 8], [8, 8, 3], [3, 3, 3]],
                "output": [[8, 3, 8], [8, 8, 3], [3, 3, 3], [0, 0, 0], [0, 8, 0]],
            },
            {
                "input": [[3, 3, 8], [3, 8, 3], [8, 3, 8]],
                "output": [[3, 3, 8], [3, 8, 3], [8, 3, 8], [0, 0, 0], [0, 8, 0]],
            },
        ],
        "test": [{"input": [[8, 3, 3], [8, 8, 3], [3, 8, 8]], "output": []}],
    }
]

analyze_results(tasks)