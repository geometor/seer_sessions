def describe_grid(grid):
    """Provides a description of the grid's dimensions and color distribution."""
    import numpy as np

    grid_array = np.array(grid)
    height, width = grid_array.shape
    unique, counts = np.unique(grid_array, return_counts=True)
    color_counts = dict(zip(unique, counts))
    
    description = {
        'height': height,
        'width': width,
        'color_counts': color_counts
    }
    return description

def compare_grids(grid1, grid2):
    """Compares two grids for equality and describes differences."""
    import numpy as np

    array1 = np.array(grid1)
    array2 = np.array(grid2)
    
    if array1.shape != array2.shape:
        return {
            'equal': False,
            'description': f"Grids have different shapes: {array1.shape} vs {array2.shape}."
        }

    diff = array1 - array2
    if np.all(diff == 0):
        return {
            'equal': True,
            'description': "Grids are identical."
        }
    else:
        num_diffs = np.sum(diff != 0)
        description = f"Grids differ in {num_diffs} positions."
        
      
        return {
            'equal': False,
            'description': description
        }
# Example usage with the first training pair:
train = task_data['train']
input_grid = train[0]['input']
output_grid = train[0]['output']
transformed_grid = transform(input_grid)
print(f"Input grid description: {describe_grid(input_grid)}")
print(f"Output grid description: {describe_grid(output_grid)}")
print(f"Transformed grid description: {describe_grid(transformed_grid)}")
print(f"Comparison result: {compare_grids(output_grid, transformed_grid)}")
print("-----")
input_grid = train[1]['input']
output_grid = train[1]['output']
transformed_grid = transform(input_grid)
print(f"Input grid description: {describe_grid(input_grid)}")
print(f"Output grid description: {describe_grid(output_grid)}")
print(f"Transformed grid description: {describe_grid(transformed_grid)}")
print(f"Comparison result: {compare_grids(output_grid, transformed_grid)}")
print("-----")
input_grid = train[2]['input']
output_grid = train[2]['output']
transformed_grid = transform(input_grid)
print(f"Input grid description: {describe_grid(input_grid)}")
print(f"Output grid description: {describe_grid(output_grid)}")
print(f"Transformed grid description: {describe_grid(transformed_grid)}")
print(f"Comparison result: {compare_grids(output_grid, transformed_grid)}")
