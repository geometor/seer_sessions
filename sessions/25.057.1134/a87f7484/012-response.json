{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Key Color:** The key color is orange (7).\n\n2.  **Locate Orange Clusters:** Find all contiguous clusters (horizontal or vertical) of orange pixels in the input grid.\n\n3.  **Calculate Cluster Centers:** For each orange cluster, compute its center coordinates (row, col) by averaging the row and column indices of all pixels in the cluster.\n\n4.  **Select Cluster:**\n    *   If no orange clusters, return a blank grid of the correct output size.\n    *   If there is only 1, select it.\n    *   If there are multiple, choose the cluster with the *lowest* row index.\n    *   If multiple are at that row index, use the lowest column of these.\n\n5.  **Extract Subgrid:** Extract a subgrid from the input grid, centered at the selected cluster center. The dimensions of the subgrid are equal to the dimensions of the output grid given in the training example.\n\n6.  **Return Subgrid:** The extracted subgrid is the output.\n\"\"\"\n\nimport numpy as np\n\ndef get_clusters(grid, key_color):\n    \"\"\"\n    Finds clusters of the key color in the grid.\n    Returns a list of (row, col) tuples representing the center of each cluster.\n    \"\"\"\n    visited = set()\n    clusters = []\n\n    def dfs(row, col):\n        \"\"\"Depth-first search to find connected components.\"\"\"\n        if (\n            row < 0\n            or row >= grid.shape[0]\n            or col < 0\n            or col >= grid.shape[1]\n            or grid[row, col] != key_color\n            or (row, col) in visited\n        ):\n            return []\n\n        visited.add((row, col))\n        cluster_pixels = [(row, col)]\n\n        cluster_pixels.extend(dfs(row + 1, col))\n        cluster_pixels.extend(dfs(row - 1, col))\n        cluster_pixels.extend(dfs(row, col + 1))\n        cluster_pixels.extend(dfs(row, col - 1))\n        return cluster_pixels\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] == key_color and (row, col) not in visited:\n                cluster_pixels = dfs(row, col)\n                if cluster_pixels:\n                    # Calculate the center of the cluster\n                    rows, cols = zip(*cluster_pixels)\n                    center_row = int(np.mean(rows))\n                    center_col = int(np.mean(cols))\n                    clusters.append((center_row, center_col))\n    return clusters\n\ndef select_cluster(clusters):\n    \"\"\"Selects the cluster based on the lowest row, then lowest col.\"\"\"\n    if not clusters:\n        return None\n    return min(clusters, key=lambda x: (x[0], x[1]))\n\ndef transform(input_grid, output_shape):\n    input_grid = np.array(input_grid)\n    key_color = 7\n\n    # Locate Orange Clusters and Calculate Cluster Centers\n    clusters = get_clusters(input_grid, key_color)\n\n    # Select Cluster\n    selected_center = select_cluster(clusters)\n\n    # if no key color present, return a blank grid of the output_shape\n    if selected_center is None:\n        return np.zeros(output_shape, dtype=int)\n\n    center_row, center_col = selected_center\n\n    # Extract Subgrid\n    start_row = center_row - (output_shape[0] - 1 )// 2\n    start_col = center_col - (output_shape[1] - 1) // 2\n    end_row = center_row + (output_shape[0] + 2)// 2\n    end_col = center_col + (output_shape[1] + 2) // 2\n    output_grid = np.zeros(output_shape, dtype=int)\n\n    for i in range(output_shape[0]):\n        for j in range(output_shape[1]):\n            input_row = start_row + i\n            input_col = start_col + j\n            if 0 <= input_row < input_grid.shape[0] and 0 <= input_col < input_grid.shape[1]:\n                output_grid[i, j] = input_grid[input_row, input_col]\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6612,
    "candidates_token_count": 1036,
    "total_token_count": 7648,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.956532,
  "response_file": "012-response.json"
}