import numpy as np

def describe_grid(grid):
    unique, counts = np.unique(grid, return_counts=True)
    color_counts = dict(zip(unique, counts))
    height, width = grid.shape
    print(f"  Dimensions: {width}x{height}")
    print(f"  Colors: {color_counts}")

def analyze_example(example, title):
    print(title)
    input_grid = np.array(example['input'])
    output_grid = np.array(example['output'])
    print("Input:")
    describe_grid(input_grid)
    print("Output:")
    describe_grid(output_grid)
    predicted_output = transform(input_grid)  # using existing function
    if np.array_equal(predicted_output, output_grid):
      print("Prediction: correct")
    else:
      print("Prediction: incorrect")
      print("predicted output")
      describe_grid(predicted_output)
    print("---")


task = {
    "train": [
        {
            "input": [[5, 0, 0], [0, 0, 0], [0, 0, 1]],
            "output": [[1, 0, 0], [0, 0, 0], [0, 0, 5]],
        },
        {
            "input": [[0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0]],
            "output": [[0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0]],
        },
        {
            "input": [[5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]],
            "output": [[1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]],
        },
        {
            "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]],
            "output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5]],
        },
        {
            "input": [[0, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
            "output": [[0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        },
    ],
    "test": [{"input": [[0, 0, 0, 0, 0, 0, 5], [0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0]], "output": [[0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [0, 5, 0, 0, 0, 0, 0]]}],
}
for i, example in enumerate(task['train']):
    analyze_example(example, f"Train Example {i+1}:")
for i, example in enumerate(task['test']):
    analyze_example(example, f"Test Example {i+1}:")
