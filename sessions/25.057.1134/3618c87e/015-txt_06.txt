import numpy as np

def transform(input_grid):
    # initialize output_grid
    output_grid = np.copy(input_grid)
    
    # get height
    height = output_grid.shape[0]

    # Reflect vertically
    output_grid = np.flipud(output_grid)

    # Color swap
    for r in range(height):
        for c in range(output_grid.shape[1]):
            if output_grid[r, c] == 1:
                output_grid[r, c] = 5
            elif output_grid[r, c] == 5:
                output_grid[r, c] = 1

    return output_grid

task_data = {
    "train": [
        {
            "input": [
                [1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 0, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1],
            ],
            "output": [
                [5, 5, 5, 5, 5, 5, 5],
                [5, 5, 5, 5, 5, 5, 5],
                [5, 5, 5, 5, 5, 5, 5],
                [5, 5, 5, 5, 5, 5, 5],
                [5, 5, 5, 0, 5, 5, 5],
                [5, 5, 5, 5, 5, 5, 5],
                [5, 5, 5, 5, 5, 5, 5],
                [5, 5, 5, 5, 5, 5, 5],
                [5, 5, 5, 5, 5, 5, 5],
            ],
        },
        {
            "input": [
                [0, 1, 0, 1, 0, 1, 0, 1, 0],
                [1, 0, 1, 0, 1, 0, 1, 0, 1],
                [0, 1, 0, 1, 0, 1, 0, 1, 0],
                [1, 0, 1, 0, 1, 0, 1, 0, 1],
                [0, 1, 0, 1, 0, 1, 0, 1, 0],
                [1, 0, 1, 0, 1, 0, 1, 0, 1],
                [0, 1, 0, 1, 0, 1, 0, 1, 0],
                [1, 0, 1, 0, 1, 0, 1, 0, 1],
                [0, 1, 0, 1, 0, 1, 0, 1, 0],
            ],
            "output": [
                [0, 5, 0, 5, 0, 5, 0, 5, 0],
                [5, 0, 5, 0, 5, 0, 5, 0, 5],
                [0, 5, 0, 5, 0, 5, 0, 5, 0],
                [5, 0, 5, 0, 5, 0, 5, 0, 5],
                [0, 5, 0, 5, 0, 5, 0, 5, 0],
                [5, 0, 5, 0, 5, 0, 5, 0, 5],
                [0, 5, 0, 5, 0, 5, 0, 5, 0],
                [5, 0, 5, 0, 5, 0, 5, 0, 5],
                [0, 5, 0, 5, 0, 5, 0, 5, 0],
            ],
        },
        {
            "input": [
                [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0],
            ],
            "output": [
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            ],
        },
    ]
}

def check_transform(task):
    correct = 0
    for example in task['train']:
        input_grid = np.array(example['input'])
        expected_output = np.array(example['output'])
        transformed_output = transform(input_grid)
        if np.array_equal(transformed_output, expected_output):
           correct += 1

    return correct, len(task['train'])

correct, total_examples = check_transform(task_data)
print(f"{correct} correct out of {total_examples} examples")