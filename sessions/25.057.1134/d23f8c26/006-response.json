{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by preserving a center vertical line if it exists, preserving a center pixel if it exists, and setting all other pixels to white (0).\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"\n    Identifies objects in the grid based on contiguous color regions.\n    \"\"\"\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n    rows, cols = grid.shape\n\n    def dfs(r, c, color, object_pixels):\n        if (r < 0 or r >= rows or c < 0 or c >= cols or\n                visited[r, c] or grid[r, c] != color):\n            return\n        visited[r, c] = True\n        object_pixels.append((r, c))\n        dfs(r + 1, c, color, object_pixels)\n        dfs(r - 1, c, color, object_pixels)\n        dfs(r, c + 1, color, object_pixels)\n        dfs(r, c - 1, color, object_pixels)\n\n    for r in range(rows):\n        for c in range(cols):\n            if not visited[r, c]:\n                object_pixels = []\n                dfs(r, c, grid[r, c], object_pixels)\n                if object_pixels:\n                    objects.append({\"color\": grid[r, c], \"pixels\": object_pixels})\n    return objects\n\ndef is_vertical_line(pixels, rows, cols):\n    \"\"\"\n    Checks if a set of pixels forms a vertical line spanning the grid's height.\n    \"\"\"\n    if len(pixels) != rows:\n        return False\n    \n    # Check unique column\n    col_values = [p[1] for p in pixels]\n    if len(set(col_values)) != 1:\n      return False\n\n    # Check if the line is centered\n    if col_values[0] != cols // 2:\n        return False\n\n    row_values = sorted([p[0] for p in pixels])\n    return row_values == list(range(rows))\n\ndef is_center_pixel(pixels, rows, cols):\n    \"\"\"\n    Checks if there is only one pixel and if it is at the center of the grid\n    \"\"\"\n    return len(pixels) == 1 and pixels[0] == (rows // 2, cols // 2)\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the specified rule.\n    \"\"\"\n    input_grid = np.array(input_grid)\n    rows, cols = input_grid.shape\n    output_grid = np.zeros_like(input_grid)  # Initialize with white (0)\n\n    objects = find_objects(input_grid)\n    \n    # handle all the same color, by returning an all 0's grid\n    if len(objects) == 1:\n      return output_grid\n\n    for obj in objects:\n        if is_vertical_line(obj[\"pixels\"], rows, cols):\n            for r, c in obj[\"pixels\"]:\n                output_grid[r, c] = obj[\"color\"]\n        elif is_center_pixel(obj[\"pixels\"], rows, cols):\n            r, c = obj[\"pixels\"][0]\n            output_grid[r,c] = obj[\"color\"]\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3379,
    "candidates_token_count": 781,
    "total_token_count": 4160,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.647295,
  "response_file": "006-response.json"
}