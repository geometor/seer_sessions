{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThis program transforms the input grid as follows:\n1. It identifies all objects of color 8 (azure) in the input grid.\n2. For each azure object:\n    - If the object is a vertical line, a blue (color 1) pixel is placed immediately to the right of the top-most cell of the object.\n    - If the object is a horizontal line or an L-shape, a blue pixel is placed immediately to the left of the right-most cell of the object.\n3. All other cells in the input grid remain unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, color):\n    \"\"\"\n    Finds connected components of a specific color in the grid.\n    Returns a list of lists, where each inner list contains the coordinates of an object.\n    \"\"\"\n    objects = []\n    visited = set()\n\n    def is_valid(x, y):\n        return 0 <= x < grid.shape[0] and 0 <= y < grid.shape[1]\n\n    def dfs(x, y):\n        if (x, y) in visited or not is_valid(x, y) or grid[x, y] != color:\n            return []\n\n        visited.add((x, y))\n        object_coords = [(x, y)]\n\n        for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            object_coords.extend(dfs(x + dx, y + dy))\n\n        return object_coords\n\n    for x in range(grid.shape[0]):\n        for y in range(grid.shape[1]):\n            if grid[x, y] == color:\n                found_object = dfs(x, y)\n                if found_object:\n                    objects.append(found_object)\n\n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the specified rule.\n    \"\"\"\n    input_grid = np.array(input_grid)\n    output_grid = np.copy(input_grid)\n    azure_objects = find_objects(input_grid, 8)\n\n    for obj in azure_objects:\n        # Sort by x and then y to find top-most and left-most points\n        sorted_by_x = sorted(obj, key=lambda p: (p[0], p[1]))\n        top_most = sorted_by_x[0]\n\n        # Sort by y in reverse order to find right-most point\n        sorted_by_y_desc = sorted(obj, key=lambda p: p[1], reverse=True)\n        right_most = sorted_by_y_desc[0]\n\n        # Check if it's a vertical line (all y-coordinates are the same)\n        if all(p[1] == sorted_by_x[0][1] for p in sorted_by_x) and len(obj) == 2: # Vertical and length = 2\n                output_grid[top_most[0], top_most[1] + 1] = 1  # Place blue to the right\n        else:  # Horizontal line or other shapes\n            output_grid[right_most[0], right_most[1] - 1] = 1 # Place to left\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3944,
    "candidates_token_count": 760,
    "total_token_count": 4704,
    "cached_content_token_count": 0
  },
  "timing": {
    "response_time": 7.328414
  },
  "response_file": "006-response.json"
}