{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation rule identifies azure (8) colored L-shaped objects and inserts a blue (1) pixel to the right of the horizontal segment of each L.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, color):\n    \"\"\"Finds contiguous regions of the specified color.\"\"\"\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n    rows, cols = grid.shape\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i, j] == color and not visited[i, j]:\n                obj = []\n                stack = [(i, j)]\n                while stack:\n                    r, c = stack.pop()\n                    if 0 <= r < rows and 0 <= c < cols and grid[r, c] == color and not visited[r, c]:\n                        visited[r, c] = True\n                        obj.append((r, c))\n                        stack.extend([(r + 1, c), (r - 1, c), (r, c + 1), (r, c - 1)])\n                objects.append(obj)\n    return objects\n\ndef is_l_shape(obj):\n    \"\"\"Checks if the object is an L-shape (not rotated).\"\"\"\n    if len(obj) != 3:\n        return False\n\n    coords = np.array(obj)\n    # Sort coordinates to handle different L orientations\n    coords = coords[coords[:, 0].argsort()] #sort by row\n\n    #check for [[r,c],[r+1,c],[r+1,c+1]]\n    if coords[0,0] == coords[1,0] -1 and \\\n       coords[0,1] == coords[1,1] and \\\n       coords[1,0] == coords[2,0] and \\\n       coords[1,1] == coords[2,1] -1:\n        return True\n\n    coords = coords[coords[:, 1].argsort()] #sort by col\n    #check for [[r,c],[r,c+1],[r+1,c+1]]\n    if coords[0,0] == coords[1,0] and \\\n       coords[0,1] == coords[1,1] -1 and \\\n       coords[1,0] == coords[2,0] -1 and \\\n       coords[1,1] == coords[2,1]:\n        return True\n\n    return False\n\ndef find_insertion_point(obj):\n    \"\"\"Finds the insertion point for the blue pixel.\"\"\"\n    coords = np.array(obj)\n\n    coords_row_sorted = coords[coords[:, 0].argsort()] #sort by row\n     #check for [[r,c],[r+1,c],[r+1,c+1]]\n    if coords_row_sorted[0,0] == coords_row_sorted[1,0] -1 and \\\n       coords_row_sorted[0,1] == coords_row_sorted[1,1] and \\\n       coords_row_sorted[1,0] == coords_row_sorted[2,0] and \\\n       coords_row_sorted[1,1] == coords_row_sorted[2,1] -1:\n        return (coords_row_sorted[2,0],coords_row_sorted[2,1]+1)\n\n    coords_col_sorted = coords[coords[:, 1].argsort()] #sort by col\n    #check for [[r,c],[r,c+1],[r+1,c+1]]\n    if coords_col_sorted[0,0] == coords_col_sorted[1,0] and \\\n       coords_col_sorted[0,1] == coords_col_sorted[1,1] -1 and \\\n       coords_col_sorted[1,0] == coords_col_sorted[2,0] -1 and \\\n       coords_col_sorted[1,1] == coords_col_sorted[2,1]:\n        return (coords_col_sorted[1,0],coords_col_sorted[1,1]+1)\n    return None\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the rule.\"\"\"\n    output_grid = np.copy(input_grid)\n    azure_objects = find_objects(input_grid, 8)\n\n    for obj in azure_objects:\n        if is_l_shape(obj):\n            insertion_point = find_insertion_point(obj)\n            if insertion_point:\n                row, col = insertion_point\n                if 0 <= row < output_grid.shape[0] and 0 <= col < output_grid.shape[1]:\n                    output_grid[row, col] = 1\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4111,
    "candidates_token_count": 1101,
    "total_token_count": 5212,
    "cached_content_token_count": 0
  },
  "timing": {
    "response_time": 8.583497
  },
  "response_file": "008-response.json"
}