task_description: Modifies a 3x3 area around the intersection of a horizontal and vertical line.

objects:
  - object: horizontal_line
    properties:
      - is the single row containing a continuous segment of a single non-background color.
      - color: The color of the line segment (color_h).
      - row_index: The row index of the line (r).
  - object: vertical_line
    properties:
      - is the single column containing a continuous or fragmented segment of a single non-background color.
        (Note: Example 2 requires identifying a fragmented line).
      - color: The color of the line segment (color_v).
      - col_index: The column index of the line (c).
  - object: intersection_point
    properties:
      - location: Defined by the row_index (r) of the horizontal_line and the col_index (c) of the vertical_line.
      - coordinates: (r, c).
  - object: target_area
    properties:
      - shape: 3x3 square.
      - center: The intersection_point (r, c).
      - affected_pixels: Pixels at `(r-1:r+2, c-1:c+2)`, respecting grid boundaries.

actions:
  - action: find_lines_and_intersection
    inputs: input_grid
    outputs:
      - r: row_index of horizontal_line
      - c: col_index of vertical_line
      - color_h: color of horizontal_line
      - color_v: color of vertical_line
    details: Identify the unique horizontal and vertical lines and their intersection point. Handles solid lines and the specific fragmented green line in Example 2.
  - action: initialize_output
    inputs: input_grid
    outputs: output_grid
    details: Create a copy of the input grid.
  - action: fill_target_area
    inputs:
      - output_grid
      - intersection_point (r, c)
    modifies: output_grid
    details: Set all pixels within the 3x3 target_area centered at (r, c) to yellow (4).
  - action: restore_center_pixel
    inputs:
      - output_grid
      - input_grid
      - intersection_point (r, c)
    modifies: output_grid
    details: Set the pixel at the center `(r, c)` of the target_area back to its original color from `input_grid[r, c]`. This action is always performed.
  - action: finalize_output
    inputs: output_grid
    outputs: final_output_grid
    details: The grid after filling and restoration is the final output. Horizontal neighbors, vertical neighbors, and corners of the 3x3 area remain yellow.
