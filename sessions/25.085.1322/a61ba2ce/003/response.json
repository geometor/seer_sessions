{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nIdentifies four 3-pixel L-shaped objects in the input grid.\nExtracts the 2x2 pattern defined by each object's bounding box.\nAssigns each pattern to a quadrant (TL, TR, BL, BR) in a 4x4 output grid based on the object colors sorted numerically (1st color -> TL, 2nd -> TR, 3rd -> BL, 4th -> BR).\nDetermines the vertical center line of the input grid (between column index floor(width/2) and floor(width/2) + 1).\nChecks if the bounding box of either the object assigned to TL or the object assigned to TR crosses this vertical center line (crossing means min_col <= floor(width/2) AND max_col >= floor(width/2) + 1).\nIf the crossing condition is met, swaps the patterns placed in the TL and TR quadrants of the output grid. Otherwise, places them according to the sorted color order.\n\"\"\"\n\ndef find_l_objects(grid):\n    \"\"\"\n    Finds all contiguous 3-pixel L-shaped objects of non-background colors.\n\n    Args:\n        grid (np.ndarray): The input grid.\n\n    Returns:\n        list: A list of dictionaries, each representing an L-shaped object with keys:\n              'color': The color of the object's pixels.\n              'pixels': A list of (row, col) coordinates of the object's pixels.\n              'bbox': A tuple (min_row, min_col, max_row, max_col) of the bounding box (should be 2x2).\n              'pattern': A 2x2 numpy array of the pattern within the bbox.\n    \"\"\"\n    height, width = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n    background_color = 0\n\n    for r in range(height):\n        for c in range(width):\n            if grid[r, c] != background_color and not visited[r, c]:\n                color = grid[r, c]\n                pixels = []\n                q = [(r, c)]\n                visited[r, c] = True\n                min_r, min_c = r, c\n                max_r, max_c = r, c\n\n                component_pixels = [] # Track pixels in the current connected component\n\n                while q:\n                    row, col = q.pop(0)\n                    component_pixels.append((row, col))\n                    min_r = min(min_r, row)\n                    min_c = min(min_c, col)\n                    max_r = max(max_r, row)\n                    max_c = max(max_c, col)\n\n                    # Check neighbors (4-connectivity)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        if 0 <= nr < height and 0 <= nc < width and \\\n                           grid[nr, nc] == color and not visited[nr, nc]:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n\n                # Check if the found object is an L-shape (3 pixels and 2x2 bbox)\n                if len(component_pixels) == 3 and (max_r - min_r == 1) and (max_c - min_c == 1):\n                    bbox = (min_r, min_c, max_r, max_c)\n                    # Extract the 2x2 pattern directly using the bounding box\n                    pattern = grid[min_r:min_r+2, min_c:min_c+2]\n                    \n                    # Ensure pattern is exactly 2x2, padding if necessary (unlikely for valid L)\n                    if pattern.shape != (2, 2):\n                         padded_pattern = np.zeros((2, 2), dtype=int)\n                         rows_p, cols_p = pattern.shape\n                         padded_pattern[0:rows_p, 0:cols_p] = pattern\n                         pattern = padded_pattern\n\n                    objects.append({\n                        'color': color,\n                        'pixels': component_pixels,\n                        'bbox': bbox,\n                        'pattern': pattern\n                    })\n    return objects\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the specified L-shape pattern assembly rule.\n    \"\"\"\n    input_grid_np = np.array(input_grid, dtype=int)\n    height, width = input_grid_np.shape\n\n    # 1. Find the four L-shaped objects\n    objects = find_l_objects(input_grid_np)\n\n    # Ensure exactly four objects are found\n    if len(objects) != 4:\n        # Return default 4x4 grid if object count is wrong\n        print(f\"Warning: Expected 4 objects, but found {len(objects)}. Returning default grid.\")\n        return np.zeros((4, 4), dtype=int).tolist()\n\n    # 2. Sort objects by color index (ascending)\n    objects.sort(key=lambda obj: obj['color'])\n\n    # 3. Assign objects conceptually to quadrants based on sorted order\n    # obj_tl (lowest color), obj_tr (2nd), obj_bl (3rd), obj_br (highest color)\n    obj_tl = objects[0]\n    obj_tr = objects[1]\n    obj_bl = objects[2]\n    obj_br = objects[3]\n\n    # 4. Determine the vertical center line indices\n    # The line is conceptually between center_col_idx and center_col_idx_plus_1\n    center_col_idx = (width - 1) // 2\n    center_col_idx_plus_1 = center_col_idx + 1 # The index of the column just right of the midline\n\n    # 5. Check the swap condition\n    swap_top_quadrants = False\n    # Check if TL object's bbox crosses the center line\n    tl_bbox = obj_tl['bbox']\n    if tl_bbox[1] <= center_col_idx and tl_bbox[3] >= center_col_idx_plus_1:\n        swap_top_quadrants = True\n\n    # Check if TR object's bbox crosses the center line (only need one to cross)\n    if not swap_top_quadrants:\n        tr_bbox = obj_tr['bbox']\n        if tr_bbox[1] <= center_col_idx and tr_bbox[3] >= center_col_idx_plus_1:\n            swap_top_quadrants = True\n\n    # 6. Construct the 4x4 output grid\n    output_grid = np.zeros((4, 4), dtype=int)\n\n    # Place bottom patterns (always fixed relative to sorted order)\n    output_grid[2:4, 0:2] = obj_bl['pattern']\n    output_grid[2:4, 2:4] = obj_br['pattern']\n\n    # Place top patterns based on swap condition\n    if swap_top_quadrants:\n        # Swap: TR pattern goes to TL output, TL pattern goes to TR output\n        output_grid[0:2, 0:2] = obj_tr['pattern']\n        output_grid[0:2, 2:4] = obj_tl['pattern']\n    else:\n        # No swap: TL pattern goes to TL output, TR pattern goes to TR output\n        output_grid[0:2, 0:2] = obj_tl['pattern']\n        output_grid[0:2, 2:4] = obj_tr['pattern']\n\n    # 7. Return as list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 10205,
    "candidates_token_count": 1801,
    "total_token_count": 12006,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 17.997663,
  "retries": null
}