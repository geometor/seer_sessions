{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nIdentifies a horizontal red line (color 2) starting at column 0 in the input grid. \nCopies the input grid to the output grid.\nDraws a green triangle (color 3) above the red line. For each row 'r' above the red line's row 'R', the green line extends from column 0 to column L + R - r - 1 (inclusive), where L is the length of the red line.\nDraws a blue triangle (color 1) below the red line. For each row 'r' below the red line's row 'R', the blue line extends from column 0 to column L - (r - R) - 1 (inclusive), as long as the width L - (r - R) is positive.\n\"\"\"\n\ndef find_red_line(grid):\n    \"\"\"Finds the row, starting column (assumed 0), and length of the horizontal red line.\"\"\"\n    red_pixels = np.where(grid == 2)\n    if len(red_pixels[0]) == 0:\n        # Should not happen based on examples, but handle defensively\n        return -1, -1, 0 \n        \n    row_r = red_pixels[0][0]\n    # Verify all red pixels are in the same row and start at column 0 and are contiguous\n    cols = sorted(red_pixels[1])\n    length_l = len(cols)\n    \n    # Basic validation based on observations\n    if not np.all(red_pixels[0] == row_r):\n         raise ValueError(\"Red pixels found in multiple rows.\")\n    if cols[0] != 0:\n         raise ValueError(f\"Red line does not start at column 0. Starts at {cols[0]}\")\n    if not all(cols[i] == i for i in range(length_l)):\n        raise ValueError(\"Red line is not contiguous.\")\n        \n    return row_r, 0, length_l # Return row, start_col (always 0), length\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule: copy grid, find red line, draw green and blue triangles.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    grid = np.array(input_grid, dtype=int)\n    height, width = grid.shape\n    \n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(grid)\n\n    # Find the red line properties\n    row_r, start_col_c, length_l = find_red_line(grid)\n\n    if row_r == -1: # No red line found\n        return output_grid.tolist() # Return the copy\n\n    # --- Draw the green shape (color 3) above the red line ---\n    # Iterate through rows from 0 up to (but not including) the red line's row\n    for r in range(row_r):\n        # Calculate the end column index (exclusive) for the green line in this row\n        # Formula from NL: 0 to L + R - r - 1 inclusive. Slice endpoint is index + 1.\n        end_col_green = start_col_c + length_l + row_r - r\n        \n        # Ensure the end column does not exceed grid boundaries\n        end_col_green = min(end_col_green, width)\n        \n        # Draw the green line segment in the current row\n        if end_col_green > start_col_c: # Check if there's anything to draw\n             output_grid[r, start_col_c:end_col_green] = 3\n\n    # --- Draw the blue shape (color 1) below the red line ---\n    # Iterate through rows starting from the one below the red line\n    for r in range(row_r + 1, height):\n        # Calculate the width of the blue line for the current row\n        # Formula from NL: width = L - (r - R)\n        width_blue = length_l - (r - row_r)\n        \n        # If width is zero or less, stop drawing blue for this and subsequent rows\n        if width_blue <= 0:\n            break \n            \n        # Calculate the end column index (exclusive)\n        # Formula from NL: C to C + width - 1 inclusive. Slice endpoint is C + width.\n        end_col_blue = start_col_c + width_blue\n        \n        # Ensure the end column does not exceed grid boundaries\n        end_col_blue = min(end_col_blue, width)\n\n        # Draw the blue line segment in the current row\n        if end_col_blue > start_col_c: # Check if there's anything to draw\n            output_grid[r, start_col_c:end_col_blue] = 1\n\n    # Return the modified grid as a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3177,
    "candidates_token_count": 1130,
    "total_token_count": 4307,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.460092,
  "retries": null
}