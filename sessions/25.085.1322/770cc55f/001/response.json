{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Tuple, Set\n\n\"\"\"\nTransformation Rule:\n1. Identify the single horizontal red line (color 2).\n2. Identify the two objects that are neither red (2) nor white (0). These two objects will have the same color and one will be above the red line, the other below.\n3. Determine the set of column indices occupied by the object above the red line.\n4. Determine the set of column indices occupied by the object below the red line.\n5. Find the intersection of these two sets of column indices (common columns).\n6. The output grid is a copy of the input grid, with an added yellow (color 4) rectangle.\n7. This yellow rectangle spans vertically from the row immediately below the red line down to the second-to-last row of the grid.\n8. Horizontally, the yellow rectangle spans the common columns identified in step 5.\n\"\"\"\n\ndef find_colored_pixels(grid: np.ndarray, color: int) -> List[Tuple[int, int]]:\n    \"\"\"Finds all pixels of a specific color.\"\"\"\n    rows, cols = np.where(grid == color)\n    return list(zip(rows, cols))\n\ndef get_object_columns(pixels: List[Tuple[int, int]]) -> Set[int]:\n    \"\"\"Gets the set of unique column indices from a list of pixel coordinates.\"\"\"\n    if not pixels:\n        return set()\n    return set(col for row, col in pixels)\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Applies the transformation rule to the input grid.\n    \"\"\"\n    # Convert input list of lists to a numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    output_np = np.copy(input_np)\n    height, width = input_np.shape\n\n    # 1. Find the red line row\n    red_line_row = -1\n    for r in range(height):\n        if np.any(input_np[r, :] == 2):\n            red_line_row = r\n            break\n    \n    # Check if red line was found (should always be present based on examples)\n    if red_line_row == -1:\n        print(\"Warning: Red line (color 2) not found.\")\n        return input_grid # Or handle error appropriately\n\n    # 2. Find the paired objects' color and pixels\n    paired_object_color = -1\n    all_paired_pixels = []\n    unique_colors = np.unique(input_np)\n    for color in unique_colors:\n        if color != 0 and color != 2: # Exclude white and red\n            paired_object_color = color\n            all_paired_pixels = find_colored_pixels(input_np, paired_object_color)\n            break\n            \n    if paired_object_color == -1:\n         print(\"Warning: Paired objects (non-white, non-red) not found.\")\n         # If no paired objects, maybe just return the input? Or perhaps there's an edge case?\n         # Based on examples, this shouldn't happen. For now, return unmodified copy.\n         return output_np.tolist()\n\n\n    # Separate pixels into above and below the red line\n    pixels_above = [p for p in all_paired_pixels if p[0] < red_line_row]\n    pixels_below = [p for p in all_paired_pixels if p[0] > red_line_row]\n\n    # 3. Get column indices for the object above\n    cols_above = get_object_columns(pixels_above)\n\n    # 4. Get column indices for the object below\n    cols_below = get_object_columns(pixels_below)\n\n    # 5. Find the intersection of column indices\n    common_cols = cols_above.intersection(cols_below)\n\n    # 6. Define the row range for the yellow rectangle\n    # Starts row below red line, ends at the second-to-last row (height - 1 exclusive)\n    start_row = red_line_row + 1\n    end_row = height # The loop will go up to end_row - 1\n\n    # 7. & 8. Fill the yellow rectangle in the output grid\n    for r in range(start_row, end_row):\n        for c in common_cols:\n            # Ensure column index is within grid bounds (safety check)\n            if 0 <= c < width:\n                 # Check if the target cell is white (0) before overwriting. \n                 # The examples suggest overwriting only white space.\n                 if output_np[r, c] == 0:\n                     output_np[r, c] = 4 # Yellow\n\n    # Convert the result back to a list of lists\n    output_grid = output_np.tolist()\n    \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3358,
    "candidates_token_count": 1133,
    "total_token_count": 4491,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.637452,
  "retries": null
}