task_description: Scale the contents of the bounding box surrounding the non-white object(s) by a factor of 2x2.

definitions:
  - name: input_grid
    type: Grid
    description: The input 2D array of pixel colors.
  - name: output_grid
    type: Grid
    description: The output 2D array of pixel colors.
  - name: non_white_pixels
    type: Set[Pixel]
    description: All pixels in the input_grid that are not white (color 0).
  - name: bounding_box
    type: Rectangle
    description: The smallest rectangular region in the input_grid that encloses all non_white_pixels.
    properties:
      - top_row
      - left_col
      - height
      - width
      - content: Grid # The subgrid defined by the bounding box coordinates

actions:
  - name: find_non_white_pixels
    input: input_grid
    output: non_white_pixels
    description: Identify all pixels with color other than 0.
  - name: calculate_bounding_box
    input: non_white_pixels
    output: bounding_box
    description: Determine the minimum and maximum row and column indices containing non-white pixels. If no non-white pixels exist, handle appropriately (e.g., return an empty box or the whole grid - based on examples, assumes at least one non-white pixel).
  - name: extract_bounding_box_content
    input: 
      - input_grid
      - bounding_box
    output: bounding_box.content
    description: Create a subgrid containing the pixels from the input_grid within the bounding_box.
  - name: scale_grid
    input: 
      - grid_to_scale: bounding_box.content
      - scale_factor: Integer (value is 2 for this task)
    output: scaled_grid: Grid
    description: Create a new grid where each pixel (r, c) in grid_to_scale becomes a scale_factor x scale_factor block of the same color at position (r*scale_factor, c*scale_factor) in the scaled_grid. The dimensions of scaled_grid are (grid_to_scale.height * scale_factor, grid_to_scale.width * scale_factor).
  - name: assign_output
    input: scaled_grid
    output: output_grid
    description: The final output grid is the scaled_grid.

relationships:
  - output_grid.height == bounding_box.height * 2
  - output_grid.width == bounding_box.width * 2
  - For each pixel `p` at relative coordinates (r, c) within the bounding_box (where 0 <= r < bounding_box.height, 0 <= c < bounding_box.width) with color `C`:
      The 2x2 block of pixels in the output_grid starting at (r*2, c*2) are all set to color `C`.