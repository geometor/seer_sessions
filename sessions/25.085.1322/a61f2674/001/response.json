{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\ndef find_vertical_segments(grid, color):\n    \"\"\"\n    Finds all contiguous vertical segments of a specified color in the grid.\n\n    Args:\n        grid (np.array): The input grid.\n        color (int): The color value to search for.\n\n    Returns:\n        list: A list of tuples, where each tuple represents a segment\n              (column_index, start_row, end_row, length).\n    \"\"\"\n    segments = []\n    height, width = grid.shape\n    for c in range(width):\n        start_row = -1\n        for r in range(height):\n            # Check if current pixel is the target color\n            if grid[r, c] == color:\n                # If it's the start of a new segment\n                if start_row == -1:\n                    start_row = r\n            # Check if the segment ends\n            # Segment ends if pixel is not the target color OR it's the last row\n            if grid[r, c] != color or r == height - 1:\n                # If we were tracking a segment\n                if start_row != -1:\n                    # Determine the end row\n                    end_row = r - 1 if grid[r, c] != color else r\n                    length = end_row - start_row + 1\n                    segments.append((c, start_row, end_row, length))\n                    # Reset start_row for the next potential segment in this column\n                    start_row = -1\n    return segments\n\ndef transform(input_grid):\n    \"\"\"\n    Identifies the longest and shortest vertical contiguous segments of gray (5)\n    pixels in the input grid. In the output grid, pixels corresponding to the\n    longest segment(s) are colored blue (1), pixels corresponding to the\n    shortest segment(s) are colored red (2), and all other pixels are white (0).\n    \"\"\"\n    # Convert input to numpy array for easier processing\n    np_grid = np.array(input_grid, dtype=int)\n    height, width = np_grid.shape\n\n    # Initialize output grid with white (0)\n    output_grid = np.zeros_like(np_grid)\n\n    # Find all vertical gray (5) segments\n    gray_segments = find_vertical_segments(np_grid, 5)\n\n    # If no gray segments found, return the all-white grid\n    if not gray_segments:\n        return output_grid.tolist() # Convert back to list of lists\n\n    # Extract lengths and find min/max\n    segment_lengths = [length for _, _, _, length in gray_segments]\n    min_length = min(segment_lengths)\n    max_length = max(segment_lengths)\n\n    # Color the longest segments blue (1)\n    for col, start_row, end_row, length in gray_segments:\n        if length == max_length:\n            output_grid[start_row : end_row + 1, col] = 1\n\n    # Color the shortest segments red (2)\n    # This will overwrite blue if a segment is both the longest and shortest\n    # (i.e., all segments have the same length)\n    for col, start_row, end_row, length in gray_segments:\n        if length == min_length:\n            output_grid[start_row : end_row + 1, col] = 2\n\n    # Return the result as a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3131,
    "candidates_token_count": 800,
    "total_token_count": 3931,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.908153,
  "retries": null
}