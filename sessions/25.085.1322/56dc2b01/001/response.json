{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n# Define color constants\nWHITE = 0\nBLUE = 1\nRED = 2\nGREEN = 3\nYELLOW = 4\nGRAY = 5\nMAGENTA = 6\nORANGE = 7\nAZURE = 8\nMAROON = 9\n\ndef find_pixels(grid, color_code):\n    \"\"\"Finds all coordinates of pixels with a given color_code.\"\"\"\n    pixels = np.argwhere(grid == color_code)\n    # Convert numpy coordinates (row, col) to tuples\n    return [tuple(p) for p in pixels]\n\ndef get_bounding_box(pixels):\n    \"\"\"Calculates the bounding box (min_row, min_col, max_row, max_col) for a set of pixels.\"\"\"\n    if not pixels:\n        return None\n    rows = [p[0] for p in pixels]\n    cols = [p[1] for p in pixels]\n    return min(rows), min(cols), max(rows), max(cols)\n\ndef transform(input_grid):\n    \"\"\"\n    Moves green object(s) (color 3) towards a stationary red barrier (color 2) until adjacent, \n    then places an azure marker line/column (color 8) adjacent to the moved green object(s) \n    on the side opposite the barrier, spanning the grid dimension.\n    \"\"\"\n    \n    # Convert input list of lists to a numpy array for easier manipulation\n    grid = np.array(input_grid, dtype=int)\n    height, width = grid.shape\n\n    # Initialize output_grid with the background color (white)\n    output_grid = np.full_like(grid, WHITE)\n\n    # 1. Identify green (movable) and red (barrier) pixels\n    green_pixels = find_pixels(grid, GREEN)\n    red_pixels = find_pixels(grid, RED)\n\n    # Handle cases where objects might be missing (though not expected based on examples)\n    if not green_pixels or not red_pixels:\n        return input_grid # Or potentially return an empty grid or raise error\n\n    # 2. Determine bounding boxes\n    green_bb = get_bounding_box(green_pixels)\n    red_bb = get_bounding_box(red_pixels)\n\n    green_min_row, green_min_col, green_max_row, green_max_col = green_bb\n    red_min_row, red_min_col, red_max_row, red_max_col = red_bb\n\n    # 3. Determine movement direction\n    dr, dc = 0, 0 # Change in row, change in column\n    direction = None\n\n    # Check relative positions - assumes clear separation along one axis\n    if green_max_row < red_min_row:\n        direction = \"DOWN\"\n        dr = red_min_row - green_max_row - 1\n    elif green_min_row > red_max_row:\n        direction = \"UP\"\n        dr = red_max_row - green_min_row + 1 # Note: dr will be negative\n    elif green_max_col < red_min_col:\n        direction = \"RIGHT\"\n        dc = red_min_col - green_max_col - 1\n    elif green_min_col > red_max_col:\n        direction = \"LEFT\"\n        dc = red_max_col - green_min_col + 1 # Note: dc will be negative\n    else:\n         # This case suggests overlap or adjacent start - might need refinement\n         # For now, assume examples guarantee initial separation\n         return grid.tolist() # Or handle error\n\n    # 4. Place the stationary barrier (red pixels) onto the output grid\n    for r, c in red_pixels:\n        output_grid[r, c] = RED\n\n    # 5. Calculate new positions for green pixels and place them\n    moved_green_pixels = []\n    for r, c in green_pixels:\n        new_r, new_c = r + dr, c + dc\n        # Check bounds before placing, though movement logic should keep it inbound\n        if 0 <= new_r < height and 0 <= new_c < width:\n            output_grid[new_r, new_c] = GREEN\n            moved_green_pixels.append((new_r, new_c))\n        else:\n            # Handle unexpected out-of-bounds movement if necessary\n            pass \n            \n    # If no green pixels were successfully moved (e.g., due to bounds), return early\n    if not moved_green_pixels:\n        # This might happen if the initial configuration is strange\n        # or movement calculation leads outside. Return current state.\n         return output_grid.tolist()\n\n\n    # 6. Determine marker position and draw it\n    moved_green_bb = get_bounding_box(moved_green_pixels)\n    mg_min_row, mg_min_col, mg_max_row, mg_max_col = moved_green_bb\n\n    if direction == \"DOWN\":\n        marker_row = mg_min_row - 1\n        if 0 <= marker_row < height:\n            output_grid[marker_row, :] = AZURE\n    elif direction == \"UP\":\n        marker_row = mg_max_row + 1\n        if 0 <= marker_row < height:\n            output_grid[marker_row, :] = AZURE\n    elif direction == \"RIGHT\":\n        marker_col = mg_min_col - 1\n        if 0 <= marker_col < width:\n            output_grid[:, marker_col] = AZURE\n    elif direction == \"LEFT\":\n        marker_col = mg_max_col + 1\n        if 0 <= marker_col < width:\n            output_grid[:, marker_col] = AZURE\n\n    # 7. Convert the final numpy grid back to a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3775,
    "candidates_token_count": 1370,
    "total_token_count": 5145,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 19.045528,
  "retries": null
}