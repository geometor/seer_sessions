task_description: Transform a 3x3 input grid into a 9x9 output grid by selectively copying the input grid pattern into 3x3 subgrids of the output based on input grid properties.

elements:
  - element: input_grid
    description: A 3x3 grid of pixels with color values 0-9.
    properties:
      - width: 3
      - height: 3
      - pixels: Contains color values.
      - total_sum: The sum of all pixel values in the grid.
      - unique_colors: The set of non-zero color values present in the grid.
      - num_unique_colors: The count of unique non-zero colors.
      - min_color: The minimum non-zero color value present.
      - max_color: The maximum color value present.
      - second_min_color: The second smallest non-zero color value present (if applicable).

  - element: output_grid
    description: A 9x9 grid of pixels with color values 0-9.
    properties:
      - width: 9
      - height: 9
      - background_color: white (0)
      - structure: Can be viewed as a 3x3 grid of 3x3 subgrids.

  - element: subgrid
    description: A 3x3 region within the output grid.
    properties:
      - position: Defined by a block row (0-2) and block column (0-2).
      - content: Either a copy of the input_grid or filled with the background_color.

actions:
  - action: analyze_input
    description: Calculate properties of the input grid.
    steps:
      - Calculate total_sum.
      - Identify unique_colors (non-zero).
      - Count num_unique_colors.
      - Find min_color (non-zero).
      - Find max_color.
      - Find second_min_color (if num_unique_colors >= 2).

  - action: determine_target_value
    description: Decide which pixel value(s) in the input grid determine the placement locations.
    logic: Based on num_unique_colors and parity of total_sum.
      - If num_unique_colors <= 2:
          - If total_sum is even: target = max_color
          - If total_sum is odd: target = min_color
      - If num_unique_colors == 3:
          - If total_sum is even: target = min_color
          - If total_sum is odd: target = max_color
      - If num_unique_colors >= 4:
          - target = second_min_color

  - action: identify_placement_locations
    description: Find all coordinates (r, c) in the input grid where the pixel value matches the target_value.

  - action: construct_output
    description: Create the 9x9 output grid.
    steps:
      - Initialize a 9x9 grid with background_color (0).
      - For each placement location (r, c) identified:
          - Copy the entire 3x3 input_grid into the output_grid's subgrid at block position (r, c). (i.e., starting at output coordinates [r*3, c*3]).

relationships:
  - relationship: input_pixel_to_output_subgrid
    description: The coordinate (r, c) of a determining pixel (matching the target_value) in the input grid maps directly to the block coordinate (r, c) of the subgrid in the output grid where a copy is placed.