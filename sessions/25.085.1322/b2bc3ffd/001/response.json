{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n# Define constants for background and border colors\nBACKGROUND_COLOR = 7\nBORDER_COLOR = 8\n\ndef find_objects(grid):\n    \"\"\"\n    Finds all distinct contiguous objects in the grid.\n    An object is a group of connected pixels (8-way connectivity)\n    of the same color, excluding background (7) and border (8).\n\n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        list: A list of dictionaries, where each dictionary represents an object\n              and contains 'color' (int) and 'pixels' (list of tuples (r, c)).\n    \"\"\"\n    height, width = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n    \n    # Iterate through the grid, excluding the border row\n    for r in range(height - 1): # Exclude last row (border)\n        for c in range(width):\n            color = grid[r, c]\n            # Check if it's a potential object pixel and not visited\n            if color != BACKGROUND_COLOR and color != BORDER_COLOR and not visited[r, c]:\n                current_object_pixels = []\n                q = deque([(r, c)])\n                visited[r, c] = True\n                object_color = color\n\n                while q:\n                    curr_r, curr_c = q.popleft()\n                    current_object_pixels.append((curr_r, curr_c))\n\n                    # Check 8 neighbors (Moore neighborhood)\n                    for dr in [-1, 0, 1]:\n                        for dc in [-1, 0, 1]:\n                            if dr == 0 and dc == 0:\n                                continue # Skip self\n\n                            nr, nc = curr_r + dr, curr_c + dc\n\n                            # Check bounds (importantly, exclude border row nr == height - 1)\n                            if 0 <= nr < height - 1 and 0 <= nc < width:\n                                # Check if neighbor has the same color and not visited\n                                if grid[nr, nc] == object_color and not visited[nr, nc]:\n                                    visited[nr, nc] = True\n                                    q.append((nr, nc))\n                                    \n                if current_object_pixels:\n                     objects.append({'color': object_color, 'pixels': current_object_pixels})\n\n    return objects\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by moving objects upwards based on their size.\n\n    1. Identifies all distinct contiguous objects (non-background, non-border color).\n    2. Calculates the size (number of pixels) P for each object.\n    3. Erases the original objects from a copy of the grid.\n    4. Draws the objects in their new positions, shifted upwards by P rows.\n    The background (Orange, 7) and bottom border (Azure, 8) remain unchanged.\n    \"\"\"\n    \n    # Convert input list of lists to numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    height, width = input_np.shape\n    \n    # Initialize output_grid as a copy of the input grid\n    output_grid = np.copy(input_np)\n\n    # Find all objects in the input grid\n    objects = find_objects(input_np)\n\n    # Step 1: Erase original objects from the output grid\n    # Iterate through each found object\n    for obj in objects:\n        # Iterate through the pixels of the current object\n        for r, c in obj['pixels']:\n            # Set the corresponding pixel in the output grid to background color\n            output_grid[r, c] = BACKGROUND_COLOR\n\n    # Step 2: Draw objects in their new positions\n    # Iterate through each found object again\n    for obj in objects:\n        obj_color = obj['color']\n        obj_pixels = obj['pixels']\n        # Calculate the size (number of pixels) P\n        size_p = len(obj_pixels)\n        # Calculate the upward shift amount S = P\n        shift_s = size_p\n\n        # Iterate through the original pixels of the object\n        for r, c in obj_pixels:\n            # Calculate the new row position\n            new_r = r - shift_s\n            new_c = c # Column remains the same\n\n            # Check if the new position is within the grid bounds (non-negative row)\n            if new_r >= 0:\n                # Set the pixel at the new coordinate in the output grid to the object's color\n                output_grid[new_r, new_c] = obj_color\n\n    # Convert the result back to a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2787,
    "candidates_token_count": 1089,
    "total_token_count": 3876,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 19.408164,
  "retries": null
}