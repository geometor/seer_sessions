{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport collections\n\ndef find_objects(grid, background_color):\n    \"\"\"\n    Finds all contiguous objects of non-background colors in the grid.\n\n    Args:\n        grid (list[list[int]]): The input grid.\n        background_color (int): The background color.\n\n    Returns:\n        list[dict]: A list of dictionaries, each representing an object.\n                    Each dictionary contains 'color', 'pixels' (a set of (r, c) tuples),\n                    and 'rows' (a set of row indices).\n    \"\"\"\n    height = len(grid)\n    width = len(grid[0])\n    visited = set()\n    objects = []\n    \n    for r in range(height):\n        for c in range(width):\n            if (r, c) not in visited and grid[r][c] != background_color:\n                color = grid[r][c]\n                obj_pixels = set()\n                obj_rows = set()\n                q = collections.deque([(r, c)])\n                visited.add((r, c))\n                \n                while q:\n                    row, col = q.popleft()\n                    obj_pixels.add((row, col))\n                    obj_rows.add(row)\n                    \n                    # Check neighbors (4-directional)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        if 0 <= nr < height and 0 <= nc < width and \\\n                           (nr, nc) not in visited and grid[nr][nc] == color:\n                            visited.add((nr, nc))\n                            q.append((nr, nc))\n                            \n                objects.append({\n                    'color': color,\n                    'pixels': obj_pixels,\n                    'rows': obj_rows\n                })\n    return objects\n\ndef find_background_color(grid):\n    \"\"\"Finds the most frequent color in the grid, assumed to be the background.\"\"\"\n    counts = collections.Counter(pixel for row in grid for pixel in row)\n    # Return the most common color, default to 0 if grid is empty or uniform\n    if not counts:\n        return 0\n    return counts.most_common(1)[0][0]\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on object row span.\n    \n    Rule:\n    1. Identify the background color (most frequent).\n    2. Find all contiguous non-background objects, noting their color, pixels, and row span.\n    3. Identify objects spanning multiple rows (\"multi-row objects\").\n    4. Create a \"pattern template\" row:\n       - Start with the background color.\n       - For each column containing pixels from any multi-row object, set the template's\n         pixel in that column to the multi-row object's color. (Assumes one color per column\n         among multi-row objects).\n    5. Create the output grid (same size as input, initialized to background color).\n    6. Process each row of the input grid:\n       a. Find all objects confined strictly to the current row (\"single-row objects\").\n       b. If NO single-row objects exist in this row:\n          - Copy the \"pattern template\" row to the corresponding output row.\n       c. If one or more single-row objects exist in this row:\n          i.  If all these single-row objects have the SAME color:\n              - Fill the entire corresponding output row with that color.\n          ii. If these single-row objects have DIFFERENT colors:\n              - Find the rightmost pixel belonging to any of these single-row objects.\n              - Fill the entire corresponding output row with the color of that rightmost pixel's object.\n    7. Return the output grid.\n    \"\"\"\n    \n    height = len(input_grid)\n    width = len(input_grid[0])\n\n    # 1. Identify Background Color\n    background_color = find_background_color(input_grid)\n\n    # Initialize output grid with background color\n    output_grid = [[background_color for _ in range(width)] for _ in range(height)]\n\n    # 2. Find Objects\n    objects = find_objects(input_grid, background_color)\n    \n    # 3. Identify Multi-Row Objects and their pixels\n    multi_row_pixels = {} # Map column -> color\n    for obj in objects:\n        if len(obj['rows']) > 1:\n            for r, c in obj['pixels']:\n                # Assuming consistency: last seen color for a column prevails if conflict\n                multi_row_pixels[c] = obj['color']\n\n    # 4. Create Pattern Template Row\n    pattern_template = [background_color] * width\n    for c, color in multi_row_pixels.items():\n        pattern_template[c] = color\n\n    # Create a lookup for faster access: row -> list of objects intersecting that row\n    objects_by_row = collections.defaultdict(list)\n    for i, obj in enumerate(objects):\n        obj['id'] = i # Assign a unique id for easy reference\n        for r in obj['rows']:\n            objects_by_row[r].append(obj)\n\n    # 6. Process Rows\n    for r in range(height):\n        intersecting_objects = objects_by_row[r]\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 2,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3252,
    "candidates_token_count": 1233,
    "total_token_count": 4485,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 176.433833,
  "retries": null
}