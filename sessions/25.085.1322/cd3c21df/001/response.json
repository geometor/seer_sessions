{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nIdentifies all solid rectangular objects in the input grid. \nIf multiple exist, selects the one with the aspect ratio closest to 1 (squareness).\nTies are broken by selecting the object whose top-left corner has the highest row index, \nand then the highest column index.\nThe output is the selected rectangular object, cropped to its bounding box.\n\"\"\"\n\ndef find_objects(grid):\n    \"\"\"\n    Finds all contiguous objects of non-background pixels.\n\n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        list: A list of objects. Each object is represented as a dictionary \n              containing 'pixels' (list of (r, c) tuples), 'min_row', 'min_col', \n              'max_row', 'max_col', and 'size'.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and not visited[r, c]:\n                obj_pixels = []\n                q = [(r, c)]\n                visited[r, c] = True\n                min_r, min_c = r, c\n                max_r, max_c = r, c\n\n                while q:\n                    row, col = q.pop(0)\n                    obj_pixels.append((row, col))\n                    min_r = min(min_r, row)\n                    min_c = min(min_c, col)\n                    max_r = max(max_r, row)\n                    max_c = max(max_c, col)\n\n                    # Check neighbors (4-connectivity)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] != 0 and not visited[nr, nc]:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n                \n                objects.append({\n                    'pixels': obj_pixels,\n                    'min_row': min_r,\n                    'min_col': min_c,\n                    'max_row': max_r,\n                    'max_col': max_c,\n                    'size': len(obj_pixels)\n                })\n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rules to the input grid.\n    \"\"\"\n    input_grid = np.array(input_grid)\n    \n    # 1. Identify all distinct contiguous objects\n    all_objects = find_objects(input_grid)\n    \n    if not all_objects:\n        # Handle case with no objects found (though not in examples)\n        return np.array([[]]) # Or some other representation for empty output\n\n    # 2. & 3. Filter for solid rectangles and calculate properties\n    rectangular_objects = []\n    for obj in all_objects:\n        height = obj['max_row'] - obj['min_row'] + 1\n        width = obj['max_col'] - obj['min_col'] + 1\n        bbox_area = height * width\n        \n        # Check if the object size equals the bounding box area\n        if obj['size'] == bbox_area:\n            # Calculate aspect ratio (squareness)\n            aspect_ratio = min(height, width) / max(height, width) if max(height, width) > 0 else 1.0\n            obj['height'] = height\n            obj['width'] = width\n            obj['aspect_ratio'] = aspect_ratio\n            rectangular_objects.append(obj)\n\n    # 4. Handle case where no rectangular objects are found\n    if not rectangular_objects:\n        # Handle case (though not in examples)\n         return np.array([[]]) # Or appropriate empty output\n\n    # 5. & 6. Select the target object based on criteria\n    selected_object = None\n    if len(rectangular_objects) == 1:\n        selected_object = rectangular_objects[0]\n    else:\n        # Sort by aspect ratio (descending), then row index (descending), then col index (descending)\n        rectangular_objects.sort(key=lambda o: (o['aspect_ratio'], o['min_row'], o['min_col']), reverse=True)\n        selected_object = rectangular_objects[0] # The first one after sorting is the desired one\n\n    # 7. Extract the subgrid corresponding to the selected object's bounding box\n    min_r = selected_object['min_row']\n    min_c = selected_object['min_col']\n    max_r = selected_object['max_row']\n    max_c = selected_object['max_col']\n    \n    output_grid = input_grid[min_r : max_r + 1, min_c : max_c + 1]\n    \n    return output_grid.tolist() # Convert back to list of lists for consistency\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3268,
    "candidates_token_count": 1204,
    "total_token_count": 4472,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.935548,
  "retries": null
}