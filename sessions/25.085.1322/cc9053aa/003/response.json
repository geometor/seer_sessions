{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nPerforms a flood fill transformation starting from existing Maroon (9) pixels.\nThe fill propagates outwards using 4-way cardinal adjacency (up, down, left, right).\nOnly Azure (8) pixels encountered during the propagation are changed to Maroon (9).\nExisting Maroon (9) pixels allow the propagation to continue through them.\nAll other pixels (colors 0-7) act as barriers and stop the propagation.\nThe initial Maroon pixels remain Maroon. Pixels not reached by the fill remain unchanged.\n\"\"\"\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies a flood fill transformation starting from Maroon pixels,\n    changing reachable Azure pixels to Maroon using 4-way adjacency.\n\n    Args:\n        input_grid: A 2D numpy array representing the input grid.\n\n    Returns:\n        A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    # Get grid dimensions\n    height, width = input_grid.shape\n    \n    # Initialize output_grid as a copy of the input\n    output_grid = input_grid.copy()\n    \n    # Initialize a queue for Breadth-First Search (BFS)\n    q = deque()\n    \n    # Initialize a set to keep track of visited coordinates to prevent reprocessing\n    visited = set()\n    \n    # Find all initial Maroon (9) pixels and add them to the queue and visited set\n    for r in range(height):\n        for c in range(width):\n            if input_grid[r, c] == 9:\n                # Only add if not already visited (relevant if multiple initial 9s are connected)\n                if (r, c) not in visited:\n                    q.append((r, c))\n                    visited.add((r, c))\n\n    # Define the 4 cardinal neighbor offsets (up, down, left, right)\n    neighbors = [(dr, dc) for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]]\n\n    # Perform BFS\n    while q:\n        # Get the current pixel coordinates from the queue\n        r, c = q.popleft()\n\n        # Explore cardinal neighbors\n        for dr, dc in neighbors:\n            nr, nc = r + dr, c + dc\n\n            # Check if the neighbor is within the grid boundaries\n            if 0 <= nr < height and 0 <= nc < width:\n                neighbor_coord = (nr, nc)\n\n                # If the neighbor has already been visited, skip it\n                if neighbor_coord in visited:\n                    continue\n\n                neighbor_color = input_grid[nr, nc]\n\n                # Check if the neighbor is Azure (8)\n                if neighbor_color == 8:\n                    # Mark as visited\n                    visited.add(neighbor_coord)\n                    # Change the color in the output grid\n                    output_grid[nr, nc] = 9\n                    # Add to the queue to continue propagation from this newly changed pixel\n                    q.append(neighbor_coord)\n                # Check if the neighbor is Maroon (9) - allows propagation through existing Maroon areas\n                elif neighbor_color == 9:\n                    # Mark as visited\n                    visited.add(neighbor_coord)\n                    # Add to the queue to continue propagation, but DO NOT change its color\n                    q.append(neighbor_coord)\n                # Neighbors of other colors (0-7) act as barriers.\n                # We mark them as visited to avoid checking them again if reached from another path,\n                # but we don't add them to the queue, effectively stopping the fill.\n                # Alternatively, we can just not add them to visited or the queue. Let's stick to not adding.\n                \n                # Note: We only add 8s and 9s to the queue. Other colors simply block.\n\n    # The output_grid has been modified in place during the BFS for Azure pixels.\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3375,
    "candidates_token_count": 897,
    "total_token_count": 4272,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 22.109474,
  "retries": null
}