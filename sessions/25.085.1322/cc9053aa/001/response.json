{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nPerforms a flood fill transformation starting from existing Maroon (9) pixels.\nThe fill propagates outwards using 8-way adjacency (including diagonals).\nOnly Azure (8) pixels encountered during the propagation are changed to Maroon (9).\nAll other pixels, including initial Maroon pixels and pixels of other colors, remain unchanged.\nPixels that are not Azure (8) or Maroon (9) act as barriers to the propagation.\n\"\"\"\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies a flood fill transformation starting from Maroon pixels,\n    changing reachable Azure pixels to Maroon.\n\n    Args:\n        input_grid: A 2D numpy array representing the input grid.\n\n    Returns:\n        A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    # Get grid dimensions\n    height, width = input_grid.shape\n    \n    # Initialize output_grid as a copy of the input\n    output_grid = input_grid.copy()\n    \n    # Initialize a queue for Breadth-First Search (BFS)\n    q = deque()\n    \n    # Initialize a set to keep track of visited coordinates to prevent reprocessing\n    visited = set()\n    \n    # Initialize a set to store coordinates of Azure pixels that need to be changed\n    azure_to_change = set()\n\n    # Find all initial Maroon (9) pixels and add them to the queue and visited set\n    for r in range(height):\n        for c in range(width):\n            if input_grid[r, c] == 9:\n                if (r, c) not in visited:\n                    q.append((r, c))\n                    visited.add((r, c))\n\n    # Define the 8 possible neighbor offsets (including diagonals)\n    neighbors = [(dr, dc) for dr in [-1, 0, 1] for dc in [-1, 0, 1] if not (dr == 0 and dc == 0)]\n\n    # Perform BFS\n    while q:\n        # Get the current pixel coordinates from the queue\n        r, c = q.popleft()\n\n        # Explore neighbors\n        for dr, dc in neighbors:\n            nr, nc = r + dr, c + dc\n\n            # Check if the neighbor is within the grid boundaries\n            if 0 <= nr < height and 0 <= nc < width:\n                neighbor_coord = (nr, nc)\n\n                # If the neighbor has already been visited, skip it\n                if neighbor_coord in visited:\n                    continue\n\n                neighbor_color = input_grid[nr, nc]\n\n                # Check if the neighbor is Azure (8)\n                if neighbor_color == 8:\n                    # Mark as visited\n                    visited.add(neighbor_coord)\n                    # Add to the set of pixels to be changed\n                    azure_to_change.add(neighbor_coord)\n                    # Add to the queue to continue propagation from this pixel\n                    q.append(neighbor_coord)\n                # Check if the neighbor is Maroon (9) - allows propagation through existing Maroon areas\n                elif neighbor_color == 9:\n                    # Mark as visited\n                    visited.add(neighbor_coord)\n                    # Add to the queue to continue propagation, but DO NOT change it\n                    q.append(neighbor_coord)\n                # Neighbors of other colors (0-7) act as barriers and are implicitly handled\n                # by not adding them to the queue or visited set unless they are initial 9s.\n\n    # Change the color of all identified Azure pixels to Maroon in the output grid\n    for r, c in azure_to_change:\n        output_grid[r, c] = 9\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3024,
    "candidates_token_count": 839,
    "total_token_count": 3863,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 20.576363,
  "retries": null
}