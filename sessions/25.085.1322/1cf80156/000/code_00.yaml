task_name: crop_object
description: Extract the minimal bounding box containing the single non-white object from the input grid.

examples:
  train_1:
    input:
      grid_size: [11, 12]
      objects:
        - color: 1 # blue
          pixels: [[1, 2], [2, 2], [2, 3], [3, 3], [4, 2], [4, 3], [4, 4], [5, 4]]
          bounding_box: # Calculated [min_row, min_col, max_row, max_col]
            rows: [1, 5]
            cols: [2, 4]
      background_color: 0 # white
    output:
      grid_size: [5, 3] # (max_row - min_row + 1, max_col - min_col + 1)
      content: Cropped section of input from row 1 to 5 and column 2 to 4.
  train_2:
    input:
      grid_size: [10, 12]
      objects:
        - color: 2 # red
          pixels: [[2, 4], [2, 5], [2, 6], [3, 5], [4, 3], [4, 4], [4, 5], [5, 3], [5, 5]]
          bounding_box:
            rows: [2, 5]
            cols: [3, 6]
      background_color: 0 # white
    output:
      grid_size: [4, 4]
      content: Cropped section of input from row 2 to 5 and column 3 to 6.
  train_3:
    input:
      grid_size: [12, 12]
      objects:
        - color: 8 # azure
          pixels: [[3, 4], [3, 6], [4, 3], [4, 4], [4, 5], [4, 6], [5, 6], [5, 7]]
          bounding_box:
            rows: [3, 5]
            cols: [3, 7]
      background_color: 0 # white
    output:
      grid_size: [3, 5]
      content: Cropped section of input from row 3 to 5 and column 3 to 7.

common_properties:
  - Input contains a single non-white object.
  - Background is always white (0).
  - Output is a subgrid of the input.
  - The output subgrid is the smallest rectangle containing all non-white pixels.

transformation:
  action: "crop"
  target: "non-white object"
  parameter: "minimal bounding box"