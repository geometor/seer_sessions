task_context:
  grid_size: [10, 10] # Both input and output grids are 10x10 in the examples.

input_elements:
  - object: background
    color: white (0)
  - object: trigger_pixel
    count: variable (typically 2 in examples)
    properties:
      - color: non-white (1-9)
      - location: (row R, column C_idx)

output_elements:
  - object: background
    color: white (0)
  - object: frame
    count: matches count of input trigger_pixels
    properties:
      - color: same as corresponding trigger_pixel
      - shape: rectangular border
      - extent:
          left_col: 0
          right_col: 9 # grid_width - 1
          top_row: determined by rule
          bottom_row: determined by rule

transformation_rules:
  - rule: Frame Generation
    applies_to: each input trigger_pixel
    details:
      - identify: pixel P with color C at (R, C_idx)
      - condition: check row index R relative to midpoint (4.5 for 10 rows)
      - if R <= 4:
          frame_top_row: 0
          frame_bottom_row: R
      - if R >= 5:
          frame_top_row: C_idx # Based on column index of input pixel
          frame_bottom_row: 9 # grid_height - 1
      - action: Draw Frame Border
        target: output grid (initialized white)
        color: C
        rows: [frame_top_row, frame_bottom_row]
        columns: [0, 9] # left_col, right_col
        pixels_to_draw:
          - row frame_top_row, all columns 0-9
          - row frame_bottom_row, all columns 0-9
          - column 0, all rows frame_top_row to frame_bottom_row
          - column 9, all rows frame_top_row to frame_bottom_row