{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid by shifting all non-background pixels (color > 0) \none column to the right, with horizontal wrap-around. Pixels that shift \nbeyond the rightmost column reappear in the leftmost column of the same row. \nThe output grid has the same dimensions as the input grid and is initially \nfilled with the background color (0). Background pixels remain in place.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Applies a horizontal shift with wrap-around to non-background pixels.\n\n    Args:\n        input_grid (np.ndarray): A 2D NumPy array representing the input grid.\n\n    Returns:\n        np.ndarray: A 2D NumPy array representing the transformed grid.\n    \"\"\"\n    # Get the dimensions of the input grid\n    height, width = input_grid.shape\n\n    # Initialize the output grid with the background color (0)\n    # Using np.zeros_like ensures the same shape and dtype as the input\n    output_grid = np.zeros_like(input_grid)\n\n    # Iterate through each cell of the input grid\n    for r in range(height):\n        for c in range(width):\n            # Get the color of the current pixel\n            color = input_grid[r, c]\n\n            # Check if the pixel is not the background color\n            if color > 0:\n                # Calculate the new column index for the shift with wrap-around\n                # The modulo operator (%) handles the wrap-around automatically:\n                # - If c + 1 < width, new_c = c + 1\n                # - If c + 1 == width (i.e., c is the last column index width - 1), new_c = width % width = 0\n                new_c = (c + 1) % width\n\n                # Place the pixel in the shifted position (same row, new column) in the output grid\n                output_grid[r, new_c] = color\n            # else:\n                # If the color is background (0), the corresponding output cell\n                # remains 0 as initialized, effectively keeping background pixels in place.\n\n    # Return the modified output grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6970,
    "candidates_token_count": 500,
    "total_token_count": 7470,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 6.857433,
  "retries": null
}