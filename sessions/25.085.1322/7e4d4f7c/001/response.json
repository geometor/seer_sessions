{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nTransformation Rule:\n1. Create an output grid with 3 rows and the same width as the input grid.\n2. Copy the first row (index 0) of the input grid to the first row of the output grid.\n3. Copy the second row (index 1) of the input grid to the second row of the output grid.\n4. Identify the 'background color' by finding the most frequent color in the input grid from row 1 downwards.\n5. Analyze the first row (index 0) of the input grid to find the 'target color'. This is the color with the highest frequency in that row, excluding the identified 'background color'.\n6. Create the third row (index 2) of the output grid by taking a copy of the input grid's first row and replacing all occurrences of the 'target color' with magenta (6). If no 'target color' is found (e.g., row 0 only contains the background color or is uniform), the third output row is an identical copy of the first input row.\n\"\"\"\n\ndef find_most_frequent(elements):\n    \"\"\"Finds the most frequent element in a list or array.\"\"\"\n    if not elements:\n        return None\n    counts = Counter(elements)\n    # Find the element with the maximum count\n    # If there are ties, Counter.most_common(1) returns one arbitrarily\n    most_common_item = counts.most_common(1)\n    if not most_common_item:\n        return None\n    return most_common_item[0][0]\n\ndef find_target_color_in_row(row, background_color):\n    \"\"\"Finds the most frequent color in a row, excluding the background color.\"\"\"\n    counts = Counter(row)\n    \n    # Remove the background color from consideration\n    if background_color in counts:\n        del counts[background_color]\n        \n    # If no other colors are left, there's no target color\n    if not counts:\n        return None\n        \n    # Find the most frequent among the remaining colors\n    # If there are ties, Counter.most_common(1) returns one arbitrarily\n    most_common_item = counts.most_common(1)\n    if not most_common_item:\n         return None # Should not happen if counts is not empty, but for safety\n    return most_common_item[0][0]\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the transformation rule to the input grid.\n    \"\"\"\n    input_height, input_width = input_grid.shape\n    \n    # Initialize output_grid with 3 rows and same width\n    output_grid = np.zeros((3, input_width), dtype=int)\n\n    # --- Step 1 & 2: Copy row 0 and row 1 ---\n    output_grid[0, :] = input_grid[0, :]\n    if input_height > 1:\n        output_grid[1, :] = input_grid[1, :]\n    # Note: If input height is 1, row 1 will be zeros, which might need adjustment\n    # based on task constraints, but examples have height >= 2. Let's assume height >= 2.\n\n    # --- Step 3: Identify background color ---\n    background_color = None\n    if input_height > 1:\n        # Consider rows from index 1 downwards\n        background_area = input_grid[1:, :].flatten()\n        if background_area.size > 0:\n             background_color = find_most_frequent(background_area)\n\n    # --- Step 4: Find target color in row 0 ---\n    input_row_0 = input_grid[0, :]\n    target_color = find_target_color_in_row(input_row_0, background_color)\n\n    # --- Step 5: Create row 2 ---\n    output_row_2 = input_row_0.copy() # Start with a copy of input row 0\n    replacement_color = 6 # Magenta\n\n    # Replace target color with replacement color if a target color was found\n    if target_color is not None:\n        output_row_2[output_row_2 == target_color] = replacement_color\n\n    output_grid[2, :] = output_row_2\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3192,
    "candidates_token_count": 1002,
    "total_token_count": 4194,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.657618,
  "retries": null
}