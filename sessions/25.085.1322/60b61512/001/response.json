{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\ndef transform(input_grid):\n    \"\"\"\n    Identifies white (0) pixels that are fully enclosed by yellow (4) pixels\n    and changes them to orange (7). A white pixel is considered enclosed if it\n    cannot reach the boundary of the grid by moving only through adjacent\n    (up, down, left, right) white pixels. Other pixels remain unchanged.\n    \"\"\"\n    # Convert input list of lists to a NumPy array for easier manipulation\n    input_array = np.array(input_grid, dtype=int)\n    output_array = input_array.copy()\n    rows, cols = input_array.shape\n\n    # Create a visited grid to keep track of white pixels reachable from the boundary\n    visited = np.zeros_like(input_array, dtype=bool)\n    queue = deque()\n\n    # Add all white pixels on the boundary to the queue and mark them as visited\n    for r in range(rows):\n        for c in range(cols):\n            # Check if the cell is on the boundary\n            if r == 0 or r == rows - 1 or c == 0 or c == cols - 1:\n                # Check if the cell is white (0) and not already visited\n                if input_array[r, c] == 0 and not visited[r, c]:\n                    visited[r, c] = True\n                    queue.append((r, c))\n\n    # Define the four cardinal directions for neighbors\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    # Perform Breadth-First Search (BFS) starting from the boundary white pixels\n    while queue:\n        r, c = queue.popleft()\n\n        # Explore neighbors\n        for dr, dc in directions:\n            nr, nc = r + dr, c + dc\n\n            # Check if the neighbor is within the grid boundaries\n            if 0 <= nr < rows and 0 <= nc < cols:\n                # Check if the neighbor is white (0) and not visited\n                if input_array[nr, nc] == 0 and not visited[nr, nc]:\n                    visited[nr, nc] = True\n                    queue.append((nr, nc))\n\n    # Iterate through the grid to find unenclosed white pixels\n    for r in range(rows):\n        for c in range(cols):\n            # If a pixel is white (0) and was not reached by the BFS (not visited),\n            # it means it's enclosed. Change its color to orange (7).\n            if input_array[r, c] == 0 and not visited[r, c]:\n                output_array[r, c] = 7\n\n    # Convert the NumPy array back to a list of lists for the final output\n    return output_array.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1730,
    "candidates_token_count": 644,
    "total_token_count": 2374,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.146598,
  "retries": null
}