{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies a horizontal pattern block defined by the columns containing any non-background pixels \nin the input grid. This pattern block spans from the minimum column index to the maximum column index \ncontaining non-background pixels, across all rows. The identified pattern block is then repeated \nhorizontally, starting from its original minimum column index position, tiling across the width of the \ngrid. If the pattern doesn't fit perfectly at the end, it is truncated. Areas outside the repeated \npattern (including columns before the original minimum column index) are filled with the \nbackground color (0). If the input grid contains only background pixels, the output is identical \nto the input.\n\"\"\"\n\nimport numpy as np\n\ndef find_pattern_bounds(grid_np):\n    \"\"\"\n    Finds the minimum and maximum column indices containing non-background (non-zero) pixels\n    in the numpy grid.\n    \n    Args:\n        grid_np (np.ndarray): The input grid as a numpy array.\n        \n    Returns:\n        tuple (int, int) or (None, None): A tuple containing the minimum and maximum column index,\n                                          or (None, None) if the grid is all background.\n    \"\"\"\n    # Find the coordinates (row, col) of all non-zero elements\n    # non_background_pixels is a tuple of arrays, one for each dimension (rows, columns)\n    non_background_pixels = np.where(grid_np != 0)\n    \n    # Check if the column indices array is empty (meaning no non-zero elements were found)\n    if non_background_pixels[1].size == 0: \n        # Grid is all background, no pattern bounds\n        return None, None\n        \n    # Find the minimum and maximum column index among the non-zero elements\n    min_col = np.min(non_background_pixels[1])\n    max_col = np.max(non_background_pixels[1])\n    \n    return min_col, max_col\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by identifying a horizontal pattern based on non-background pixels\n    and tiling this pattern horizontally across the grid, starting from the pattern's original\n    minimum column index.\n    \n    Args:\n        input_grid (list[list[int]]): The input grid represented as a list of lists.\n        \n    Returns:\n        list[list[int]]: The transformed grid as a list of lists.\n    \"\"\"\n    # Convert input grid (list of lists) to a numpy array for efficient processing\n    input_np = np.array(input_grid, dtype=int)\n    \n    # Handle empty input grid case\n    if input_np.size == 0:\n        return []\n        \n    height, width = input_np.shape\n\n    # Find the horizontal boundaries (min and max columns) of the non-background pattern\n    min_col, max_col = find_pattern_bounds(input_np)\n\n    # If no pattern found (all background), return the original input grid as list of lists\n    if min_col is None:\n        return input_np.tolist() \n\n    # Calculate the width of the repeating pattern block\n    pattern_width = max_col - min_col + 1\n\n    # Extract the pattern slice from the input grid. This includes all rows.\n    # Slicing format is [rows_start:rows_end, cols_start:cols_end]\n    # Using ':' for rows means selecting all rows.\n    # Column slice max_col + 1 makes the slice inclusive of max_col.\n    pattern = input_np[:, min_col : max_col + 1]\n\n    # Initialize the output grid with the same dimensions as the input, filled with background color (0)\n    output_np = np.zeros_like(input_np)\n\n    # Start tiling the pattern horizontally from the minimum column index where it was first found\n    current_col = min_col\n    while current_col < width:\n        # Determine how many columns of the pattern can fit into the remaining grid space\n        # starting at current_col. This handles truncation at the right edge.\n        cols_to_copy = min(pattern_width, width - current_col)\n\n        # Calculate the ending column index (exclusive) for this copy operation in the output grid\n        end_col = current_col + cols_to_copy\n\n        # If cols_to_copy is less than the full pattern_width (due to grid boundary),\n        # we only need the beginning slice of the pattern for this copy operation.\n        pattern_slice_to_copy = pattern[:, :cols_to_copy]\n\n        # Place the (potentially truncated) pattern slice into the output grid\n        # The slice output_np[:, current_col:end_col] defines the target area.\n        output_np[:, current_col:end_col] = pattern_slice_to_copy\n\n        # Advance the starting column for the next pattern placement by the full width of the pattern\n        current_col += pattern_width\n\n    # Convert the resulting numpy array back to a list of lists format for the final output\n    output_grid = output_np.tolist()\n    \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2006,
    "candidates_token_count": 1181,
    "total_token_count": 3187,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 184.223458,
  "retries": null
}