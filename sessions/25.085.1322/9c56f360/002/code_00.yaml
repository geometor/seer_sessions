task_description: Move green pixels leftward within each row, positioning them relative to azure pixels, and handle collisions.

grid_properties:
  - dimensions: variable height and width (up to 30x30)
  - background_color: white (0)

objects:
  - type: mover
    color: green (3)
    behavior: Moves horizontally within its row based on azure pixel locations. Processed right-to-left within rows.
  - type: obstacle / anchor
    color: azure (8)
    behavior: Static. Defines the target location for green pixels to its right.
  - type: background
    color: white (0)
    behavior: Fills empty space, including the original positions of moved green pixels.

actions:
  - name: process_rows_independently
    description: Apply the transformation logic to each row separately.
  - name: identify_green_pixels
    description: Find the column indices of all green pixels in the current row.
  - name: determine_target_column
    description: For a green pixel at column 'c', scan left from 'c-1' in the original row state. If an azure pixel is found at 'az_c', the target is 'az_c + 1'. If no azure is found, the target is column 0.
  - name: process_green_pixels_right_to_left
    description: Iterate through the identified green pixels within a row, starting from the rightmost one.
  - name: check_movement_needed
    description: If a green pixel's current column 'c' equals its target column 'target_c', it does not move.
  - name: resolve_collisions_and_move
    description:
      - If a green pixel needs to move (c != target_c), calculate its final destination column 'dest_c'.
      - Start with 'dest_c = target_c'.
      - Check if the position (row, dest_c) has already been occupied by another green pixel *moved earlier in the current row's pass*.
      - If occupied, increment 'dest_c' until an unoccupied column is found (within grid bounds).
      - Mark the final (row, dest_c) as occupied for the current pass.
      - Update the grid: set the original position (row, c) to white (0) and the final position (row, dest_c) to green (3).

state_management:
  - rule: Use the original input grid state to determine azure pixel locations for target calculation for all green pixels in a row.
  - rule: Track occupied destination cells *within* the processing of a single row to handle collisions correctly during the right-to-left pass.