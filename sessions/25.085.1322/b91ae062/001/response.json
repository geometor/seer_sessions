{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport collections\n\n\"\"\"\nUpscales an input grid based on the number of unique non-white colors.\n\n1.  Count the number of distinct non-white (color values 1 through 9) pixels \n    present in the input grid. Let this count be `N`.\n2.  Determine the dimensions of the input grid (height `H_in`, width `W_in`).\n3.  Calculate the dimensions of the output grid: height `H_out = H_in * N`, \n    width `W_out = W_in * N`.\n4.  Create the output grid with dimensions `H_out` x `W_out`.\n5.  Iterate through each pixel of the input grid at `(row, col)`.\n6.  Let the color of the input pixel be `C`.\n7.  In the output grid, fill the square block of size `N x N`, whose top-left \n    corner is at `(row * N, col * N)`, entirely with the color `C`.\n8.  Return the completed output grid.\n\"\"\"\n\ndef calculate_scaling_factor(grid_np):\n    \"\"\"\n    Calculates the scaling factor N by counting unique non-white colors.\n    \"\"\"\n    # Flatten the grid to easily find unique values\n    flat_grid = grid_np.flatten()\n    # Filter out white pixels (value 0)\n    non_white_pixels = flat_grid[flat_grid != 0]\n    # Find unique non-white colors\n    unique_colors = np.unique(non_white_pixels)\n    # The scaling factor N is the count of these unique colors\n    n = len(unique_colors)\n    # Handle the edge case where the grid might be all white\n    # Based on examples, N is always at least 1 if there are non-white cells.\n    # If the grid is *entirely* white, N will be 0. The examples don't show\n    # this case. Assuming N must be at least 1 if any scaling is done.\n    # If N=0, perhaps return 1 to avoid 0-sized output? Or is it guaranteed N>=1?\n    # Let's assume N will be >= 1 based on the provided examples. If an all-white\n    # input yields N=0, the scaling logic breaks. We'll proceed assuming N>=1.\n    # If N actually results in 0, the code might raise an error later or produce\n    # an empty grid depending on numpy version. Let's enforce N=1 if it's 0.\n    if n == 0:\n       # If there are no non-white colors, check if the grid contains *any* cells.\n       # If it's non-empty and all white, perhaps N should be 1?\n       # Let's follow the rule strictly first: N is the count.\n       # But output dimensions would be 0x0. Let's default N to 1 in this case.\n       # This means an all-white input maps to an identical all-white output.\n        return 1 \n    return n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by scaling each pixel into an NxN block,\n    where N is the count of unique non-white colors in the input grid.\n    \"\"\"\n    # Convert input list of lists to numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    \n    # Step 1: Calculate the scaling factor N\n    n = calculate_scaling_factor(input_np)\n    \n    # Step 2: Determine input dimensions\n    h_in, w_in = input_np.shape\n    \n    # Step 3: Calculate output dimensions\n    h_out = h_in * n\n    w_out = w_in * n\n    \n    # Step 4: Create the output grid (initialized with zeros - white)\n    # It's safer to initialize, although all cells should be overwritten.\n    output_np = np.zeros((h_out, w_out), dtype=int)\n    \n    # Step 5 & 6 & 7: Iterate through input pixels and fill output blocks\n    for r in range(h_in):\n        for c in range(w_in):\n            # Get the color of the current input pixel\n            color = input_np[r, c]\n            \n            # Calculate the top-left corner of the corresponding block in the output grid\n            start_row = r * n\n            start_col = c * n\n            \n            # Fill the N x N block in the output grid with the color\n            output_np[start_row : start_row + n, start_col : start_col + n] = color\n            \n    # Step 8: Convert numpy array back to list of lists for the required output format\n    output_grid = output_np.tolist()\n    \n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2838,
    "candidates_token_count": 1129,
    "total_token_count": 3967,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 17.330992,
  "retries": null
}