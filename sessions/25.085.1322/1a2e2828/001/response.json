{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nThe transformation identifies a specific color from the input grid based on the presence and uniqueness of solid or mono-color horizontal and vertical lines.\n\nThe rules are applied in a specific order:\n\n1.  **Solid Horizontal Line Uniqueness:** If exactly one color forms a solid horizontal line (a row containing only that non-white color) exactly once, that color is the output.\n2.  **Solid Vertical Line Uniqueness:** If Rule 1 doesn't apply, and exactly one color forms a solid vertical line (a column containing only that non-white color) exactly once, that color is the output.\n3.  **Single Solid Horizontal Color:** If Rules 1 & 2 don't apply, and only one distinct color forms *any* solid horizontal lines (even if multiple lines of that color exist), that color is the output.\n4.  **Single Solid Vertical Color:** If Rules 1-3 don't apply, and only one distinct color forms *any* solid vertical lines (even if multiple lines of that color exist), that color is the output.\n5.  **Mono-color Vertical Line Uniqueness:** If Rules 1-4 don't apply, and exactly one color forms a mono-color vertical line (a column where all non-white pixels are of that same color) exactly once, that color is the output.\n6.  **Mono-color Horizontal Line Uniqueness:** If Rules 1-5 don't apply, and exactly one color forms a mono-color horizontal line (a row where all non-white pixels are of that same color) exactly once, that color is the output.\n\nThe output is a 1x1 grid containing the selected color.\n\"\"\"\n\ndef is_solid_line(line, color):\n    \"\"\"Checks if a 1D array 'line' consists entirely of the given non-white 'color'.\"\"\"\n    if color == 0:  # White is the background, not a solid line color\n        return False\n    return np.all(line == color)\n\ndef get_mono_color(line):\n    \"\"\"\n    Finds the single non-white color in a line, if one exists.\n    Returns the color if the line is mono-color (ignoring white), otherwise None.\n    Returns None if the line is all white.\n    \"\"\"\n    non_white_pixels = line[line != 0]\n    if non_white_pixels.size == 0:\n        return None  # All white\n    unique_colors = np.unique(non_white_pixels)\n    if len(unique_colors) == 1:\n        return unique_colors[0]\n    return None # Mixed non-white colors\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rules to find the output color.\n    \"\"\"\n    grid = np.array(input_grid, dtype=int)\n    height, width = grid.shape\n\n    solid_h_colors = []\n    solid_v_colors = []\n    mono_h_colors = []\n    mono_v_colors = []\n\n    # --- Step 1 & 3: Analyze Rows ---\n    for r in range(height):\n        row = grid[r, :]\n        # Check for solid horizontal lines\n        unique_in_row = np.unique(row)\n        if len(unique_in_row) == 1 and unique_in_row[0] != 0:\n             solid_h_colors.append(unique_in_row[0])\n             \n        # Check for mono-color horizontal lines\n        mono_color = get_mono_color(row)\n        if mono_color is not None:\n            mono_h_colors.append(mono_color)\n\n\n    # --- Step 2 & 4: Analyze Columns ---\n    for c in range(width):\n        col = grid[:, c]\n        # Check for solid vertical lines\n        unique_in_col = np.unique(col)\n        if len(unique_in_col) == 1 and unique_in_col[0] != 0:\n             solid_v_colors.append(unique_in_col[0])\n\n        # Check for mono-color vertical lines\n        mono_color = get_mono_color(col)\n        if mono_color is not None:\n            mono_v_colors.append(mono_color)\n\n    # --- Apply Rules ---\n\n    # Rule 1: Unique Solid H Color (appears exactly once)\n    solid_h_counts = Counter(solid_h_colors)\n    unique_solid_h = [color for color, count in solid_h_counts.items() if count == 1]\n    if len(unique_solid_h) == 1:\n        return np.array([[unique_solid_h[0]]], dtype=int)\n\n    # Rule 2: Unique Solid V Color (appears exactly once)\n    solid_v_counts = Counter(solid_v_colors)\n    unique_solid_v = [color for color, count in solid_v_counts.items() if count == 1]\n    if len(unique_solid_v) == 1:\n        return np.array([[unique_solid_v[0]]], dtype=int)\n\n    # Rule 3: Single distinct Solid H Color (even if multiple lines)\n    distinct_solid_h = set(solid_h_colors)\n    if len(distinct_solid_h) == 1:\n        return np.array([[list(distinct_solid_h)[0]]], dtype=int)\n\n    # Rule 4: Single distinct Solid V Color (even if multiple lines)\n    distinct_solid_v = set(solid_v_colors)\n    if len(distinct_solid_v) == 1:\n        return np.array([[list(distinct_solid_v)[0]]], dtype=int)\n        \n    # Rule 5: Unique Mono V Color (appears exactly once)\n    mono_v_counts = Counter(mono_v_colors)\n    unique_mono_v = [color for color, count in mono_v_counts.items() if count == 1]\n    if len(unique_mono_v) == 1:\n         return np.array([[unique_mono_v[0]]], dtype=int)\n\n    # Rule 6: Unique Mono H Color (appears exactly once)\n    mono_h_counts = Counter(mono_h_colors)\n    unique_mono_h = [color for color, count in mono_h_counts.items() if count == 1]\n    if len(unique_mono_h) == 1:\n        return np.array([[unique_mono_h[0]]], dtype=int)\n\n\n    # Fallback or error case if none of the rules match (though examples suggest one always will)\n    # Based on examples, this part shouldn't be reached. \n    # If it were, returning a default like 0 or raising an error might be appropriate.\n    # Let's assume one rule must match based on the task structure.\n    # For safety, let's return the most frequent mono vertical color if absolutely nothing else matches\n    # or just the first one found if frequencies are equal. This is a guess.\n    if mono_v_colors:\n         most_common_v = mono_v_counts.most_common(1)\n         if most_common_v:\n              return np.array([[most_common_v[0][0]]], dtype=int)\n    if mono_h_colors:\n         most_common_h = mono_h_counts.most_common(1)\n         if most_common_h:\n              return np.array([[most_common_h[0][0]]], dtype=int)\n              \n    # Absolute last resort\n    return np.array([[0]], dtype=int) # Default to white if truly nothing found\n\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2873,
    "candidates_token_count": 1782,
    "total_token_count": 4655,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 139.580791,
  "retries": null
}