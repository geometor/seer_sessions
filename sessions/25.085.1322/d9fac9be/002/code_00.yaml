task_description: Analyze the input grid to find the two distinct non-white colors, count their occurrences, and select one color for the 1x1 output grid based on the counts relative to a threshold of 9.

definitions:
  - object: grid
    description: A 2D array of pixels with integer values 0-9 representing colors.
  - object: pixel
    description: A single cell in the grid.
  - property: color
    description: The integer value (0-9) of a pixel. 0 is white/background. 1-9 are distinct colors.
  - property: non-white_pixel
    description: A pixel whose color value is not 0.
  - property: color_pair
    description: The two distinct non-white colors present in the input grid. It is assumed there are always exactly two.
  - property: color_count
    description: The number of times a specific non-white color appears in the grid.
  - value: threshold
    description: A fixed value of 9 used for comparison against color counts.

actions:
  - action: identify_colors
    description: Find the two unique non-white color values present in the input grid.
  - action: count_colors
    description: Count the occurrences of each of the two identified non-white colors.
  - action: compare_counts_to_threshold
    description: Compare each of the two color counts to the threshold value (9). Determine if both are strictly less than 9, or if at least one is greater than or equal to 9.
  - action: select_output_color
    description: >
      Choose one of the two non-white colors based on the following logic:
      1. If at least one count is >= 9:
         a. Select the color with the minimum count.
         b. If counts are equal, select the color with the higher numerical value (e.g., between 3 and 8, select 8).
      2. If both counts are < 9:
         a. Select the color with the maximum count.
         b. If counts are equal, select the color with the *lower* numerical value (e.g., between 2 and 4, select 2).
  - action: create_output_grid
    description: Generate a 1x1 grid containing only the selected output color.

example_analysis:
  - example_id: 1
    colors: [1, 2]
    counts: {1: 9, 2: 19}
    condition: "At least one count >= 9" (19 >= 9, 9 >= 9)
    selection: Minimum count (9) -> Color 1.
    output: 1
  - example_id: 2
    colors: [3, 8]
    counts: {3: 10, 8: 10}
    condition: "At least one count >= 9" (10 >= 9)
    selection: Minimum count (tie). Tie-breaker for this condition: Higher color value -> Color 8.
    output: 8
  - example_id: 3
    colors: [3, 8]
    counts: {3: 20, 8: 10}
    condition: "At least one count >= 9" (20 >= 9, 10 >= 9)
    selection: Minimum count (10) -> Color 8.
    output: 8
  - example_id: 4
    colors: [2, 4]
    counts: {2: 8, 4: 8}
    condition: "Both counts < 9" (8 < 9)
    selection: Maximum count (tie). Tie-breaker for this condition: *Lower* color value -> Color 2.
    output: 2
