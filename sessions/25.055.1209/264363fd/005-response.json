{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Blue Objects:** Locate all contiguous regions of blue (color 1) pixels. These are considered individual objects.\n2.  **Create Inner Border:** For each blue object, determine its inner border. The inner border consists of the pixels immediately adjacent to the outer boundary of the object, *within* the object itself.\n3. **Color Inner Border (Filled Objects):** If a blue object is a fully filled shape (e.g. complete rectangle, square), then color all pixels of its inner border *red*, *unless* that border is a only single pixel wide.\n4. **Color Inner Border (L-shapes and U-shapes i.e., single-pixel border sections):** If a section of the border is only a single pixel wide, color the pixel *green* only if it connects perpendicular borders. Color a single pixel border red, if it does not connect two borders.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, color):\n    \"\"\"Finds contiguous regions of the specified color.\"\"\"\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == color and not visited[r, c]:\n                obj = []\n                stack = [(r, c)]\n                while stack:\n                    curr_r, curr_c = stack.pop()\n                    if 0 <= curr_r < rows and 0 <= curr_c < cols and grid[curr_r, curr_c] == color and not visited[curr_r, curr_c]:\n                        visited[curr_r, curr_c] = True\n                        obj.append((curr_r, curr_c))\n                        stack.extend([(curr_r + 1, curr_c), (curr_r - 1, curr_c),\n                                      (curr_r, curr_c + 1), (curr_r, curr_c - 1)])\n                objects.append(obj)\n    return objects\n\ndef get_inner_border(obj, grid):\n    \"\"\"Calculates the inner border of an object.\"\"\"\n    rows, cols = grid.shape\n    inner_border = set()\n    obj_set = set(obj)\n\n    for r, c in obj:\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < rows and 0 <= nc < cols and (nr, nc) not in obj_set:\n                inner_border.add((r,c)) # the inner border are those pixels IN the object adjacent to the outside\n                break # only need to find ONE neighbor outside to know it is on a border\n    return list(inner_border)\n\ndef is_connecting_corner(grid, r, c, obj):\n    \"\"\"\n    Checks if a pixel at (r, c) on a single-pixel-wide border\n    connects perpendicular borders within the object.\n\n    Returns True if (r, c) is a connecting corner, and False otherwise.\n    \"\"\"\n    rows, cols = grid.shape\n    obj_set = set(obj)\n    neighbors = []\n\n    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n        nr, nc = r + dr, c + dc\n        if 0 <= nr < rows and 0 <= nc < cols and (nr,nc) in obj_set:\n            neighbors.append((dr, dc))\n\n    # Check if there are at least two neighbors and they are perpendicular\n    if len(neighbors) >= 2:\n        for i in range(len(neighbors)):\n            for j in range(i + 1, len(neighbors)):\n                dr1, dc1 = neighbors[i]\n                dr2, dc2 = neighbors[j]\n                if dr1 * dr2 + dc1 * dc2 == 0:  # Dot product is 0 for perpendicular vectors\n                    return True\n\n    return False\n  \ndef is_single_pixel_wide(grid, r, c, obj):\n    \"\"\"\n    Checks if the pixel at (r,c) is part of a single-pixel wide section of the\n    object's border.  This considers both horizontal and vertical single-pixel\n    wide sections.\n    \"\"\"\n    rows, cols = grid.shape\n    obj_set = set(obj)\n    horizontal_count = 0\n    vertical_count = 0\n\n     # Check horizontal neighbors\n    for dc in [-1, 1]:\n        nc = c + dc\n        if 0 <= nc < cols and (r, nc) in obj_set:\n            horizontal_count += 1\n\n    # Check vertical neighbors\n    for dr in [-1, 1]:\n        nr = r + dr\n        if 0 <= nr < rows and (nr, c) in obj_set:\n            vertical_count += 1\n\n    return horizontal_count == 0 or vertical_count == 0\n    \n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the rules.\"\"\"\n    output_grid = np.copy(input_grid)\n    blue_objects = find_objects(input_grid, 1)\n\n    for obj in blue_objects:\n        inner_border = get_inner_border(obj, input_grid)\n        is_filled = len(inner_border) < len(obj) # filled object has a border less than total size\n\n        for r, c in inner_border:\n            if is_filled:\n                # filled object - color inner border red, unless it is single pixel width\n                if is_single_pixel_wide(input_grid, r, c, obj):\n                    if is_connecting_corner(input_grid, r, c, obj):\n                        output_grid[r,c] = 3 # green\n                    else:\n                        output_grid[r,c] = 2 #red\n                else:\n                    output_grid[r, c] = 2  # Red\n            else:\n                # not filled, so it IS a single-pixel border\n                if is_connecting_corner(input_grid, r, c, obj):\n                    output_grid[r,c] = 3 # green\n                else:\n                    output_grid[r,c] = 2 # red\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8546,
    "candidates_token_count": 1481,
    "total_token_count": 10027,
    "cached_content_token_count": 0
  },
  "response_time": 17.286953,
  "response_file": "005-response.json"
}