import numpy as np
from collections import Counter

# Input and Expected Output grids from all examples

input_grids = [
    np.array([
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0],
        [0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0],
        [0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0],
        [0, 0, 0, 5, 0, 0, 5, 5, 0, 0, 0],
        [0, 0, 0, 0, 0, 5, 5, 5, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    ]),
    np.array([
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 5, 5, 5, 5, 5, 5, 0, 0, 0],
        [0, 5, 5, 5, 5, 5, 5, 0, 0, 0],
        [0, 0, 0, 5, 0, 0, 5, 0, 0, 0],
        [0, 0, 0, 0, 5, 5, 5, 0, 0, 0],
        [0, 0, 0, 0, 5, 5, 5, 0, 0, 0],
        [0, 0, 0, 0, 5, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    ]),
    np.array([
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 5, 5, 5, 5, 5, 0, 0, 0],
        [0, 0, 0, 0, 5, 5, 0, 0, 0],
        [0, 0, 0, 5, 0, 0, 0, 0, 0],
        [0, 0, 0, 5, 5, 5, 0, 0, 0],
        [0, 0, 0, 5, 5, 5, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0]
    ])
]

expected_output_grids = [
    np.array([
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 8, 8, 2, 2, 2, 0, 0, 0, 0],
        [0, 0, 0, 2, 8, 8, 0, 0, 0, 0, 0],
        [0, 0, 0, 2, 8, 8, 8, 8, 0, 0, 0],
        [0, 0, 0, 2, 0, 0, 8, 8, 0, 0, 0],
        [0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    ]),
     np.array([
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 8, 8, 2, 8, 8, 2, 0, 0, 0],
        [0, 8, 8, 2, 8, 8, 2, 0, 0, 0],
        [0, 0, 0, 2, 0, 0, 2, 0, 0, 0],
        [0, 0, 0, 0, 2, 8, 8, 0, 0, 0],
        [0, 0, 0, 0, 2, 8, 8, 0, 0, 0],
        [0, 0, 0, 0, 2, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    ]),
    np.array([
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 2, 2, 2, 8, 8, 0, 0, 0],
        [0, 0, 0, 0, 8, 8, 0, 0, 0],
        [0, 0, 0, 2, 0, 0, 0, 0, 0],
        [0, 0, 0, 2, 8, 8, 0, 0, 0],
        [0, 0, 0, 2, 8, 8, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0]
    ])
]

transformed_output_grids = [
    np.array([
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 8, 2, 8, 8, 8, 0, 0, 0, 0],
        [0, 0, 0, 8, 2, 8, 0, 0, 0, 0, 0],
        [0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0],
        [0, 0, 0, 8, 0, 0, 8, 8, 0, 0, 0],
        [0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    ]),
    np.array([
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 8, 8, 8, 8, 8, 8, 0, 0, 0],
        [0, 8, 8, 2, 8, 8, 8, 0, 0, 0],
        [0, 0, 0, 8, 0, 0, 8, 0, 0, 0],
        [0, 0, 0, 0, 8, 8, 8, 0, 0, 0],
        [0, 0, 0, 0, 8, 8, 8, 0, 0, 0],
        [0, 0, 0, 0, 8, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    ]),
    np.array([
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 8, 8, 8, 8, 8, 0, 0, 0],
        [0, 0, 0, 0, 8, 8, 0, 0, 0],
        [0, 0, 0, 8, 0, 0, 0, 0, 0],
        [0, 0, 0, 8, 8, 8, 0, 0, 0],
        [0, 0, 0, 8, 8, 8, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0]
    ])
]

def analyze_results(input_grid, expected_output_grid, transformed_output_grid):
    """Analyzes the transformation results and provides detailed metrics."""

    if input_grid.shape != expected_output_grid.shape or input_grid.shape != transformed_output_grid.shape:
        print("Error: Grids have different shapes.")
        return

    diff = expected_output_grid - transformed_output_grid
    pixels_off = np.count_nonzero(diff)
    match = pixels_off == 0

    size_correct = input_grid.shape == transformed_output_grid.shape

    expected_colors = Counter(expected_output_grid.flatten())
    transformed_colors = Counter(transformed_output_grid.flatten())
    color_palette_correct = set(expected_colors.keys()) == set(transformed_colors.keys())

    correct_pixel_counts = all(expected_colors[color] == transformed_colors[color] for color in expected_colors)
    
    print(f"  match: {match}")
    print(f"  pixels_off: {pixels_off}")
    print(f"  size_correct: {size_correct}")
    print(f"  color_palette_correct: {color_palette_correct}")
    print(f"  correct_pixel_counts: {correct_pixel_counts}")
    if not correct_pixel_counts:
      print("Pixel counts differences:")
      for color in expected_colors:
          if expected_colors[color] != transformed_colors[color]:
            print(f"Color {color}: Expected {expected_colors[color]}, Got {transformed_colors[color]}")

# Analyze each example
for i in range(len(input_grids)):
    print(f"Example {i + 1}:")
    analyze_results(input_grids[i], expected_output_grids[i], transformed_output_grids[i])
    print("-" * 20)