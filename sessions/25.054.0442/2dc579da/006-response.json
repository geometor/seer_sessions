{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nExtracts the top-left object from the input grid, stopping at the first major discontinuity in color or pattern.\nThe object starts at the top-left.  The boundary occurs when there's a horizontal or vertical solid color change or pattern change\n\"\"\"\n\nimport numpy as np\n\ndef find_boundary(grid):\n    \"\"\"\n    Finds the boundary of the top-left object.\n\n    Args:\n        grid (numpy.ndarray): The input grid.\n\n    Returns:\n        tuple: (row_end, col_end), the indices (exclusive) of the object's boundary.\n    \"\"\"\n    rows, cols = grid.shape\n    row_end = rows\n    col_end = cols\n\n    # Find initial pattern in the first row and column.\n    initial_row_pattern = grid[0, :].tolist()\n    initial_col_pattern = grid[:, 0].tolist()\n    \n    # Find horizontal boundary.\n    for r in range(1, rows):\n        current_row_pattern = grid[r, :col_end].tolist()\n        # Check for a change solid color.\n        unique_colors = np.unique(grid[r,:])\n        if len(unique_colors) == 1 and unique_colors[0] != grid[0,0]:\n          row_end = r\n          break\n        # Check for pattern shift (compare against the first row).\n        if current_row_pattern[:col_end] != initial_row_pattern[:col_end]:\n            row_end = r\n            break\n\n    # Find vertical boundary\n    for c in range(1, cols):\n      current_col_pattern = grid[:row_end, c].tolist()\n      # Check for solid color change\n      unique_colors = np.unique(grid[:,c])\n      if len(unique_colors) == 1 and unique_colors[0] != grid[0,0]:\n          col_end = c\n          break\n\n      # Check for a pattern shift\n      if current_col_pattern[:row_end] != initial_col_pattern[:row_end]:\n        col_end = c\n        break\n\n\n    return row_end, col_end\n\ndef transform(input_grid):\n    \"\"\"\n    Extracts the top-left object of the input grid, stopping at the first discontinuity.\n\n    Args:\n        input_grid (numpy.ndarray): The input grid.\n\n    Returns:\n        numpy.ndarray: The extracted subgrid.\n    \"\"\"\n    # Find the boundary of the top-left object.\n    row_end, col_end = find_boundary(input_grid)\n\n    # Extract the subgrid.\n    output_grid = input_grid[:row_end, :col_end]\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3249,
    "candidates_token_count": 628,
    "total_token_count": 3877,
    "cached_content_token_count": 0
  },
  "response_time": 6.291925,
  "response_file": "006-response.json"
}