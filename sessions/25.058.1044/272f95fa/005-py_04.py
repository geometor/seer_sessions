import numpy as np

def find_azure_lines(grid):
    # Find the row and column indices where azure (8) lines exist.
    rows, cols = grid.shape
    azure_rows = []
    azure_cols = []

    for r in range(rows):
        if np.any(grid[r, :] == 8):
            if len(set(grid[r, :])) <= 2 and 0 in grid[r,:]:
                azure_rows.append(r)

    for c in range(cols):
        if np.any(grid[:, c] == 8):
            if len(set(grid[:, c])) <= 2 and 0 in grid[:,c]:
                azure_cols.append(c)

    return azure_rows, azure_cols

# Define the training examples as numpy arrays (replace with your actual data)
example_inputs = [
  np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
  np.array([[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]),
  np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 0, 0, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 0, 0, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
  np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])
]

example_outputs = [
  np.array([[2, 2, 2, 2, 2, 8, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 8, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 8, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 8, 2, 2, 2, 2, 2], [4, 4, 4, 4, 4, 8, 6, 6, 6, 6, 6], [4, 4, 4, 4, 4, 8, 6, 6, 6, 6, 6], [4, 4, 4, 4, 4, 8, 6, 6, 6, 6, 6]]),
  np.array([[2, 2, 8, 2, 2, 2], [2, 2, 8, 2, 2, 2], [2, 2, 8, 2, 2, 2], [2, 2, 8, 2, 2, 2], [2, 2, 8, 2, 2, 2], [2, 2, 8, 2, 2, 2], [4, 4, 8, 6, 6, 6], [4, 4, 8, 6, 6, 6], [4, 4, 8, 6, 6, 6], [4, 4, 8, 6, 6, 6], [4, 4, 8, 6, 6, 6]]),
  np.array([[2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2], [4, 8, 4, 4, 8, 6, 6, 6, 6], [4, 4, 4, 4, 4, 6, 6, 6, 6], [4, 4, 4, 4, 4, 6, 6, 6, 6], [4, 4, 4, 4, 4, 6, 6, 6, 6], [1, 8, 1, 1, 8, 3, 3, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1]]),
  np.array([[2, 2, 2, 2, 8, 2, 2, 8, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 8, 2, 2, 8, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 8, 2, 2, 8, 2, 2, 2, 2, 2, 2], [4, 4, 4, 4, 8, 4, 4, 8, 6, 6, 6, 6, 6, 6], [4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6], [4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6], [4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6], [4, 4, 4, 4, 8, 4, 4, 8, 6, 6, 6, 6, 6, 6], [4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6], [4, 4, 4, 4, 8, 4, 4, 8, 6, 6, 6, 6, 6, 6], [1, 1, 1, 1, 8, 1, 1, 8, 3, 3, 3, 3, 3, 3], [1, 1, 1, 1, 8, 1, 1, 8, 3, 3, 3, 3, 3, 3], [1, 1, 1, 1, 8, 1, 1, 8, 3, 3, 3, 3, 3, 3]])
]

for i, (input_grid, expected_output) in enumerate(zip(example_inputs, example_outputs)):
    azure_rows, azure_cols = find_azure_lines(input_grid)
    print(f"Example {i+1}:")
    print(f"  Azure Rows: {azure_rows}")
    print(f"  Azure Columns: {azure_cols}")

    actual_output = transform(input_grid.tolist())  # Use your transform function
    if np.array_equal(actual_output, expected_output):
      print("  Result: Correct")
    else:
      print("  Result: Incorrect")
      print("actual")
      print(actual_output)
      print("expected")
      print(expected_output)
