{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nImplements a cellular automaton-like transformation where pixels of certain \"source\" colors\niteratively \"paint\" adjacent pixels of specific \"target\" colors according to fixed rules,\nuntil the grid state stabilizes.\n\nThe painting process continues in iterations. In each iteration, the state of the grid\nfor the *next* step is calculated based *entirely* on the grid's state at the *current* step.\nThe update is simultaneous in concept, though implemented sequentially. The process stops\nwhen a full iteration results in no changes to the grid.\n\nThe rules defining which source color can paint which target color are:\n- Blue(1) paints Red(2) and Azure(8).\n- Red(2) paints Blue(1).\n- Green(3) paints Blue(1) and Magenta(6).\n- Yellow(4) paints Red(2).\n- Azure(8) paints Blue(1), Green(3), and Magenta(6).\n\nOnly orthogonal neighbors (up, down, left, right) are considered for painting influence.\nIf multiple neighbors attempt to paint the same target cell in one iteration, the one\nprocessed last in the standard top-to-bottom, left-to-right scan of source cells\nwill determine the final color for that target cell in the next grid state.\n\"\"\"\n\nimport numpy as np\n\n# Define the painting rules: {source_color: [list_of_target_colors]}\nPAINTING_RULES = {\n    1: [2, 8],  # Blue paints Red and Azure\n    2: [1],      # Red paints Blue\n    3: [1, 6],  # Green paints Blue and Magenta\n    4: [2],      # Yellow paints Red\n    8: [1, 3, 6]  # Azure paints Blue, Green, and Magenta\n}\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the iterative painting transformation to the input grid until stabilization.\n\n    Args:\n        input_grid: A list of lists or numpy array representing the input grid.\n\n    Returns:\n        A numpy array representing the transformed grid after stabilization.\n    \"\"\"\n    # Convert input to a numpy array for easier manipulation\n    current_grid = np.array(input_grid, dtype=int)\n    height, width = current_grid.shape\n\n    # Start the iterative process\n    while True:\n        # Create a copy for the next state. Modifications will be made to this grid\n        # based *only* on the state of current_grid.\n        next_grid = np.copy(current_grid)\n        \n        # Iterate through each cell in the current grid to determine its influence\n        for r in range(height):\n            for c in range(width):\n                # Get the color of the potential source cell from the *current* state\n                source_color = current_grid[r, c]\n\n                # Check if this color can act as a source\n                if source_color in PAINTING_RULES:\n                    allowed_targets = PAINTING_RULES[source_color]\n\n                    # Define orthogonal neighbors coordinates relative to (r, c)\n                    neighbor_deltas = [\n                        (-1, 0),  # Up\n                        (1, 0),  # Down\n                        (0, -1),  # Left\n                        (0, 1)   # Right\n                    ]\n\n                    # Check each orthogonal neighbor\n                    for dr, dc in neighbor_deltas:\n                        nr, nc = r + dr, c + dc\n\n                        # Check boundary conditions for the neighbor\n                        if 0 <= nr < height and 0 <= nc < width:\n                            # Get the color of the potential target cell from the *current* state\n                            target_color = current_grid[nr, nc]\n\n                            # Check if this neighbor's current color is a valid target\n                            # for the source color\n                            if target_color in allowed_targets:\n                                # If valid, update the corresponding cell in the *next* grid state\n                                # Note: If multiple sources target this cell in the same iteration,\n                                # the last one processed in the r, c loops will overwrite previous\n                                # changes to next_grid[nr, nc] for this iteration.\n                                next_grid[nr, nc] = source_color\n\n        # After checking all cells and potentially updating next_grid,\n        # compare the next state with the current state.\n        if np.array_equal(current_grid, next_grid):\n            # If they are identical, the grid has stabilized. Break the loop.\n            break\n        else:\n            # Otherwise, update current_grid to the newly computed state\n            # and continue to the next iteration.\n            current_grid = next_grid\n\n    # Return the final stable grid state\n    return current_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7856,
    "candidates_token_count": 1058,
    "total_token_count": 8914,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.049994,
  "retries": 1
}