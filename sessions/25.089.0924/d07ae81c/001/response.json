{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nImplements a cellular automaton-like transformation where pixels of certain \"source\" colors \niteratively \"paint\" adjacent pixels of specific \"target\" colors according to fixed rules.\n\nThe painting process continues in iterations until no more pixels change color in a full pass \nover the grid. The rules are:\n- Blue(1) paints Red(2) and Azure(8).\n- Red(2) paints Blue(1).\n- Green(3) paints Blue(1) and Magenta(6).\n- Yellow(4) paints Red(2).\n- Azure(8) paints Blue(1), Green(3), and Magenta(6).\n\nOnly orthogonal neighbors (up, down, left, right) are considered for painting.\n\"\"\"\n\nimport numpy as np\n\n# Define the painting rules: {source_color: [list_of_target_colors]}\nPAINTING_RULES = {\n    1: [2, 8],  # Blue paints Red and Azure\n    2: [1],      # Red paints Blue\n    3: [1, 6],  # Green paints Blue and Magenta\n    4: [2],      # Yellow paints Red\n    8: [1, 3, 6]  # Azure paints Blue, Green, and Magenta\n}\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the iterative painting transformation to the input grid.\n\n    Args:\n        input_grid: A list of lists or numpy array representing the input grid.\n\n    Returns:\n        A numpy array representing the transformed grid.\n    \"\"\"\n    # Convert input to a numpy array for easier manipulation\n    current_grid = np.array(input_grid, dtype=int)\n    height, width = current_grid.shape\n\n    # Start the iterative process\n    while True:\n        # Create a copy for the next state to avoid modifying the grid while iterating\n        next_grid = np.copy(current_grid)\n        changes_made = False\n\n        # Iterate through each cell in the current grid\n        for r in range(height):\n            for c in range(width):\n                source_color = current_grid[r, c]\n\n                # Check if the current cell's color is a source color\n                if source_color in PAINTING_RULES:\n                    allowed_targets = PAINTING_RULES[source_color]\n\n                    # Define orthogonal neighbors\n                    neighbors = [\n                        (r - 1, c),  # Up\n                        (r + 1, c),  # Down\n                        (r, c - 1),  # Left\n                        (r, c + 1)   # Right\n                    ]\n\n                    # Check each neighbor\n                    for nr, nc in neighbors:\n                        # Check boundary conditions\n                        if 0 <= nr < height and 0 <= nc < width:\n                            target_color = current_grid[nr, nc]\n\n                            # Check if the neighbor's color is a valid target for the source color\n                            # AND if the target cell in the next_grid isn't already the source color\n                            # (This second check prevents re-painting and ensures the loop terminates)\n                            if target_color in allowed_targets and next_grid[nr, nc] != source_color:\n                                # Apply the paint to the next state grid\n                                next_grid[nr, nc] = source_color\n                                changes_made = True\n\n        # If no changes were made in this full pass, the process is stable\n        if not changes_made:\n            break\n\n        # Otherwise, update the current grid for the next iteration\n        current_grid = next_grid\n\n    # Return the final stable grid\n    return current_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4756,
    "candidates_token_count": 812,
    "total_token_count": 5568,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.67655,
  "retries": 1
}