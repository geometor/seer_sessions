{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nIdentify the two distinct non-background colors (Color A and Color B) present in the input grid, assuming the background color is orange (7). Calculate the bounding box for all pixels of Color A and the bounding box for all pixels of Color B. Determine the intersection region of these two bounding boxes. Iterate through each pixel within this intersection region. If a pixel in the input grid within this region has Color A, change its color to Color B in the output grid. If it has Color B, change its color to Color A. Pixels outside the intersection region, or background-colored pixels within the intersection, remain unchanged.\n\"\"\"\n\ndef get_pixel_coordinates_by_color(grid):\n    \"\"\"Finds coordinates of all pixels for each color.\"\"\"\n    color_coords = {}\n    height, width = grid.shape\n    for r in range(height):\n        for c in range(width):\n            color = grid[r, c]\n            if color not in color_coords:\n                color_coords[color] = []\n            color_coords[color].append((r, c))\n    return color_coords\n\ndef get_bounding_box(coords):\n    \"\"\"Calculates the bounding box for a list of coordinates.\"\"\"\n    if not coords:\n        return None # Or handle appropriately, maybe return (0,0,0,0) or raise error\n    min_r = min(r for r, c in coords)\n    max_r = max(r for r, c in coords)\n    min_c = min(c for r, c in coords)\n    max_c = max(c for r, c in coords)\n    # Return format: (min_row, max_row, min_col, max_col) inclusive\n    return min_r, max_r, min_c, max_c\n\ndef transform(input_grid):\n    \"\"\"\n    Swaps the colors of the two non-background objects within their bounding box intersection.\n    \"\"\"\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n    height, width = input_grid.shape\n    \n    # Define background color\n    background_color = 7 \n\n    # Find coordinates for each color\n    color_coordinates = get_pixel_coordinates_by_color(input_grid)\n\n    # Identify non-background colors\n    non_background_colors = [color for color in color_coordinates if color != background_color]\n\n    # Ensure there are exactly two non-background colors\n    if len(non_background_colors) != 2:\n        # If not exactly two non-background colors, return the original grid unchanged\n        # This handles edge cases or grids not matching the pattern\n        return output_grid \n\n    color_a = non_background_colors[0]\n    color_b = non_background_colors[1]\n\n    # Get coordinates for each non-background color\n    coords_a = color_coordinates[color_a]\n    coords_b = color_coordinates[color_b]\n\n    # Calculate bounding boxes\n    bbox_a = get_bounding_box(coords_a)\n    bbox_b = get_bounding_box(coords_b)\n    \n    if not bbox_a or not bbox_b:\n        # Handle case where one object might be empty if logic allows\n        return output_grid\n\n    min_r_a, max_r_a, min_c_a, max_c_a = bbox_a\n    min_r_b, max_r_b, min_c_b, max_c_b = bbox_b\n\n    # Calculate the intersection of the bounding boxes\n    intersect_min_r = max(min_r_a, min_r_b)\n    intersect_max_r = min(max_r_a, max_r_b)\n    intersect_min_c = max(min_c_a, min_c_b)\n    intersect_max_c = min(max_c_a, max_c_b)\n\n    # Check if there is a valid intersection area\n    if intersect_min_r > intersect_max_r or intersect_min_c > intersect_max_c:\n        # No overlap in bounding boxes, return original grid\n        return output_grid\n\n    # Iterate through the intersection region\n    for r in range(intersect_min_r, intersect_max_r + 1):\n        for c in range(intersect_min_c, intersect_max_c + 1):\n            # Get the color of the pixel from the input grid\n            input_color = input_grid[r, c]\n            \n            # Swap colors if they match one of the non-background colors\n            if input_color == color_a:\n                output_grid[r, c] = color_b\n            elif input_color == color_b:\n                output_grid[r, c] = color_a\n            # Pixels with background color or other colors remain unchanged (already copied)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 3849,
            "end_index": 4009,
            "uri": "https://github.com/Rijgersberg/advent-of-code-2020",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4340,
    "candidates_token_count": 1148,
    "total_token_count": 5488,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.592692,
  "retries": 1
}