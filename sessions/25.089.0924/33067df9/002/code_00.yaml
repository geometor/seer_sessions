task_type: grid_transformation
constants:
  output_grid_size: 26
  active_area_dimension: 22 # output_grid_size - 2 * border_size
  border_size: 2
  gap_size: 2
  background_color: 0 # white

input_objects:
  - object: grid
    attributes:
      - type: 2D array of integers (colors)
      - size: variable (rows, cols)
  - object: pixel
    attributes:
      - type: single cell in the input grid
      - property: color (integer 0-9)
      - role: non-white pixels act as templates for output blocks

output_objects:
  - object: grid
    attributes:
      - type: 2D array of integers (colors)
      - size: fixed (26x26)
      - structure:
          - border: 2-pixel margin of background_color
          - active_area: central 22x22 region
  - object: block
    attributes:
      - type: solid rectangle of color
      - location: positioned within the active_area
      - size: uniform height and width for all blocks in a given output
      - color: determined by the corresponding input pixel
      - layout: arranged in a grid structure separated by gaps

derived_concepts:
  - concept: active_rows
    description: Sorted list of unique row indices in the input grid that contain at least one non-white pixel.
    calculation: Identify rows with non-zero elements, get unique indices, sort.
  - concept: active_cols
    description: Sorted list of unique column indices in the input grid that contain at least one non-white pixel.
    calculation: Identify columns with non-zero elements, get unique indices, sort.
  - concept: N_rows
    description: The count of active_rows.
  - concept: N_cols
    description: The count of active_cols.
  - concept: block_height
    description: The uniform height of all output blocks.
    calculation: `(active_area_dimension - (N_rows - 1) * gap_size) // N_rows` (integer division).
  - concept: block_width
    description: The uniform width of all output blocks.
    calculation: `(active_area_dimension - (N_cols - 1) * gap_size) // N_cols` (integer division).
  - concept: row_map
    description: A mapping from an active input row index to its 0-based sequential index within the sorted active_rows list.
    example: If `active_rows = [1, 3, 7]`, then `row_map = {1: 0, 3: 1, 7: 2}`.
  - concept: col_map
    description: A mapping from an active input column index to its 0-based sequential index within the sorted active_cols list.
    example: If `active_cols = [2, 5]`, then `col_map = {2: 0, 5: 1}`.

actions:
  - action: initialize_output
    actor: system
    result: Create a 26x26 grid filled with background_color (0).
  - action: analyze_input
    actor: system
    input: input_grid
    outputs: active_rows, active_cols, N_rows, N_cols, non_white_pixel_coordinates
  - action: handle_empty_input
    actor: system
    condition: N_rows == 0 or N_cols == 0
    result: Return the initialized empty output grid.
  - action: calculate_block_dimensions
    actor: system
    inputs: N_rows, N_cols, active_area_dimension, gap_size
    outputs: block_height, block_width
  - action: build_index_maps
    actor: system
    inputs: active_rows, active_cols
    outputs: row_map, col_map
  - action: draw_blocks
    actor: system
    inputs: output_grid, non_white_pixel_coordinates, input_grid, row_map, col_map, block_height, block_width, border_size, gap_size
    process: For each non-white pixel `(r, c)` with color `clr`:
      1. Get block row index `i = row_map[r]`.
      2. Get block column index `j = col_map[c]`.
      3. Calculate top-left corner `out_r = border_size + i * (block_height + gap_size)`.
      4. Calculate top-left corner `out_c = border_size + j * (block_width + gap_size)`.
      5. Fill the rectangle from `(out_r, out_c)` of size `block_height` x `block_width` in the output_grid with `clr`.
    output: modified output_grid