{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransforms an input grid containing sparse colored pixels into a 26x26 output grid.\nThe output grid has a 2-pixel white border. The inner 22x22 area displays \nsolid-colored blocks corresponding to the non-white pixels in the input. \nThe relative positions of the input pixels determine the layout of the blocks \nin the output grid. The size of each block is uniform and calculated based on the \nnumber of input rows and columns that contain non-white pixels, ensuring they fit \nwithin the 22x22 active area with 2-pixel gaps between them.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid: A list of lists representing the input grid.\n\n    Returns:\n        A list of lists representing the transformed output grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n\n    # Define constants for the output grid layout\n    output_size = 26\n    border_size = 2\n    gap_size = 2\n    background_color = 0\n    active_area_dimension = output_size - 2 * border_size # Should be 22\n\n    # Initialize the output grid with the background color\n    output_grid = np.full((output_size, output_size), background_color, dtype=int)\n\n    # 1. Find coordinates of non-white pixels\n    non_white_coordinates = np.argwhere(input_np != background_color)\n\n    # 2. Handle empty input: If no non-background pixels are found, return the initialized output grid.\n    if non_white_coordinates.size == 0:\n        return output_grid.tolist() \n\n    # 3. Identify unique active rows and columns and count them\n    active_rows = sorted(list(np.unique(non_white_coordinates[:, 0])))\n    active_cols = sorted(list(np.unique(non_white_coordinates[:, 1])))\n    N_rows = len(active_rows)\n    N_cols = len(active_cols)\n    \n    # Defensive check (should not be needed if non_white_coordinates is not empty)\n    if N_rows == 0 or N_cols == 0:\n         return output_grid.tolist()\n\n    # 4. Calculate the dimensions of the output blocks using integer division\n    # Handle the edge case of a single row or column where there are no gaps\n    if N_rows == 1:\n         block_height = active_area_dimension\n    else:\n         # Total space for rows = N_rows * block_height + (N_rows - 1) * gap_size = active_area_dimension\n         block_height = (active_area_dimension - (N_rows - 1) * gap_size) // N_rows\n    \n    if N_cols == 1:\n         block_width = active_area_dimension\n    else:\n         # Total space for cols = N_cols * block_width + (N_cols - 1) * gap_size = active_area_dimension\n         block_width = (active_area_dimension - (N_cols - 1) * gap_size) // N_cols\n\n    # Ensure block dimensions are at least 1 if calculation results in 0 or less\n    block_height = max(1, block_height)\n    block_width = max(1, block_width)\n    \n    # 5. Create mappings from input row/col index to output block index (0-based)\n    row_map = {r: i for i, r in enumerate(active_rows)}\n    # Corrected dictionary comprehension for col_map\n    col_map = {c: j for j, c in enumerate(active_cols)} \n\n    # 6. Iterate through each non-white input pixel and draw its corresponding block\n    for r, c in non_white_coordinates:\n        # a. Get the pixel's color\n        color = input_np[r, c]\n\n        # b. Find the corresponding output block's row index i\n        i = row_map[r] \n        # c. Find the corresponding output block's column index j\n        j = col_map[c]\n\n        # d. Calculate the top-left corner (out_r_start, out_c_start) for the block\n        # Formula: offset + block_index * (block_dimension + gap)\n        out_r_start = border_size + i * (block_height + gap_size)\n        out_c_start = border_size + j * (block_width + gap_size)\n        \n        # e. Calculate the bottom-right corner coordinates (exclusive)\n        out_r_end = out_r_start + block_height\n        out_c_end = out_c_start + block_width\n\n        # f. Fill the block in the output grid using slicing\n        # Slicing automatically handles the dimensions\n        # Ensure indices do not exceed output bounds (numpy slicing handles this gracefully up to the edge)\n        output_grid[out_r_start:out_r_end, out_c_start:out_c_end] = color\n\n    # 7. Return the completed output grid as a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 15161,
    "candidates_token_count": 1246,
    "total_token_count": 16407,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.315324,
  "retries": 1
}