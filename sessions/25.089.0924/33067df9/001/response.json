{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransforms an input grid containing sparse colored pixels into a 26x26 output grid.\nThe output grid has a 2-pixel white border. The inner 22x22 area displays \nsolid-colored blocks corresponding to the non-white pixels in the input. \nThe relative positions of the input pixels determine the layout of the blocks \nin the output. The size of each block is uniform and calculated based on the \nnumber of input rows and columns that contain non-white pixels, ensuring they fit \nwithin the 22x22 area with 2-pixel gaps between them.\n\"\"\"\n\ndef find_active_indices(grid):\n    \"\"\"Finds unique row and column indices containing non-white pixels.\"\"\"\n    non_white_coords = np.argwhere(grid != 0)\n    if non_white_coords.size == 0:\n        return [], []\n    active_rows = sorted(list(np.unique(non_white_coords[:, 0])))\n    active_cols = sorted(list(np.unique(non_white_coords[:, 1])))\n    return active_rows, active_cols\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n    \"\"\"\n    input_np = np.array(input_grid)\n    \n    # Constants for the output grid layout\n    output_size = 26\n    active_area_dim = 22\n    border_offset = 2\n    gap_size = 2\n\n    # Initialize the output grid with white (0)\n    output_grid = np.zeros((output_size, output_size), dtype=int)\n\n    # 1. Find active rows and columns in the input grid\n    active_rows, active_cols = find_active_indices(input_np)\n    N_rows = len(active_rows)\n    N_cols = len(active_cols)\n\n    # If there are no non-white pixels, return the empty grid\n    if N_rows == 0 or N_cols == 0:\n        return output_grid.tolist() # Return as list of lists\n\n    # 2. Calculate the dimensions of the output blocks\n    # Ensure division results in integers\n    block_height = (active_area_dim - (N_rows - 1) * gap_size) // N_rows\n    block_width = (active_area_dim - (N_cols - 1) * gap_size) // N_cols\n\n    # 3. Create mappings from input row/col index to output block index\n    row_map = {r: i for i, r in enumerate(active_rows)}\n    col_map = {c: j for i, c in enumerate(active_cols)}\n\n    # 4. Iterate through input grid and draw blocks in the output grid\n    input_rows, input_cols = input_np.shape\n    for r in range(input_rows):\n        for c in range(input_cols):\n            color = input_np[r, c]\n            # If the pixel is not white\n            if color != 0:\n                # Find the corresponding block's position index (i, j)\n                i = row_map[r]\n                j = col_map[c]\n\n                # Calculate the top-left corner coordinates for the output block\n                out_r_start = border_offset + i * (block_height + gap_size)\n                out_c_start = border_offset + j * (block_width + gap_size)\n                \n                # Calculate the bottom-right corner coordinates (exclusive)\n                out_r_end = out_r_start + block_height\n                out_c_end = out_c_start + block_width\n\n                # Fill the block in the output grid\n                output_grid[out_r_start:out_r_end, out_c_start:out_c_end] = color\n\n    # Return the final grid as a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8197,
    "candidates_token_count": 923,
    "total_token_count": 9120,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.194246,
  "retries": 1
}