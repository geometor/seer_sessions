{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\ndef find_pixels_by_color(grid, color):\n    \"\"\"Finds the coordinates of all pixels with a specific color.\"\"\"\n    rows, cols = np.where(grid == color)\n    return set(zip(rows, cols))\n\ndef find_contiguous_objects(grid, color):\n    \"\"\"\n    Finds all contiguous objects of a given color in the grid.\n    Uses Breadth-First Search (BFS) for 4-connectivity.\n    \"\"\"\n    height, width = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n\n    for r in range(height):\n        for c in range(width):\n            # If the pixel is the target color and not yet visited\n            if grid[r, c] == color and not visited[r, c]:\n                current_object = set()\n                q = deque([(r, c)])\n                visited[r, c] = True\n                current_object.add((r, c))\n\n                while q:\n                    row, col = q.popleft()\n\n                    # Check 4 neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n\n                        # Check bounds\n                        if 0 <= nr < height and 0 <= nc < width:\n                            # If neighbor is same color and not visited\n                            if grid[nr, nc] == color and not visited[nr, nc]:\n                                visited[nr, nc] = True\n                                q.append((nr, nc))\n                                current_object.add((nr, nc))\n                \n                if current_object:\n                    objects.append(current_object)\n                    \n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on the locations of blue pixels (1) and red pixels (2).\n    \n    1. Identifies rows (R) and columns (C) containing at least one blue pixel (1).\n    2. Finds all contiguous objects of red pixels (2).\n    3. Initializes the output grid as a copy of the input.\n    4. For each red object: if any of its pixels fall into an affected row (R) or column (C),\n       the entire red object is changed to blue (1) in the output.\n    5. For each pixel location (r, c): if its column (c) is an affected column (C) and\n       the input pixel was white (0), the output pixel is changed to blue (1).\n    \"\"\"\n    # Convert input to numpy array for efficient operations\n    input_array = np.array(input_grid, dtype=int)\n    output_array = np.copy(input_array)\n    height, width = input_array.shape\n\n    # 1. Find affected rows (R) and columns (C) from blue pixels (1)\n    blue_pixels_coords = find_pixels_by_color(input_array, 1)\n    affected_rows = set(r for r, c in blue_pixels_coords)\n    affected_cols = set(c for r, c in blue_pixels_coords)\n\n    # 2. Find all contiguous red (2) objects\n    red_objects = find_contiguous_objects(input_array, 2)\n\n    # 4. Process red objects\n    for red_object in red_objects:\n        intersects_affected_zone = False\n        for r_obj, c_obj in red_object:\n            if r_obj in affected_rows or c_obj in affected_cols:\n                intersects_affected_zone = True\n                break # No need to check further pixels in this object\n        \n        # If the object intersects the affected zone, change all its pixels to blue (1)\n        if intersects_affected_zone:\n            for r_obj, c_obj in red_object:\n                output_array[r_obj, c_obj] = 1\n\n    # 5. Process white (0) pixels in affected columns\n    for r in range(height):\n        for c in range(width):\n            # Check if the column is affected AND the original pixel was white (0)\n            if c in affected_cols and input_array[r, c] == 0:\n                # Note: We only modify output_array here. If a red object was turned \n                # blue in step 4, this step won't overwrite it back to 0. If the\n                # pixel was originally blue (1) or red (2) that wasn't changed in step 4,\n                # this condition (input_array[r,c] == 0) prevents changing it.\n                output_array[r, c] = 1\n                \n    # Convert the result back to a list of lists\n    return output_array.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 18495,
    "candidates_token_count": 1125,
    "total_token_count": 19620,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 17.19297,
  "retries": 1
}