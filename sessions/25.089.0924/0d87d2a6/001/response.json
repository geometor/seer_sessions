{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\ndef find_pixels_by_color(grid, color):\n    \"\"\"Finds the coordinates of all pixels with a specific color.\"\"\"\n    rows, cols = np.where(grid == color)\n    return set(zip(rows, cols))\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on the locations of blue pixels (1).\n\n    Identifies all pixels with color blue (1) in the input grid. Determines the\n    set of unique row indices and column indices containing these blue pixels.\n    Creates an output grid of the same dimensions as the input. For each pixel\n    location (row, col), if its row index is in the set of affected rows OR\n    its column index is in the set of affected columns, set the corresponding\n    output pixel's color to blue (1). Otherwise, copy the color from the\n    input grid at that location.\n    \"\"\"\n    # Convert input grid to a numpy array for easier manipulation\n    input_array = np.array(input_grid, dtype=int)\n    # Initialize the output grid as a copy of the input grid\n    output_array = np.copy(input_array)\n    height, width = input_array.shape\n\n    # Find coordinates of all blue pixels (color 1)\n    blue_pixels_coords = find_pixels_by_color(input_array, 1)\n\n    # Collect unique row and column indices containing blue pixels\n    affected_rows = set(r for r, c in blue_pixels_coords)\n    affected_cols = set(c for r, c in blue_pixels_coords)\n\n    # Iterate through each pixel of the grid\n    for r in range(height):\n        for c in range(width):\n            # If the current row or column contained a blue pixel in the input\n            if r in affected_rows or c in affected_cols:\n                # Change the corresponding output pixel to blue (1)\n                output_array[r, c] = 1\n            # Otherwise, the pixel retains its original color (already copied)\n\n    # Convert the numpy array back to a list of lists\n    return output_array.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4964,
    "candidates_token_count": 488,
    "total_token_count": 5452,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 8.293174,
  "retries": 1
}