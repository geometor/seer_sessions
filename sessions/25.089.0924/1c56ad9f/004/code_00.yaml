task_description: Vertically shift pixels of a single colored object based on a periodic pattern determined by their column index relative to the object's left edge.
elements:
  - element: grid
    description: A 2D array representing the input or output state. Contains a background and a single foreground object.
    properties:
      height: Integer dimension.
      width: Integer dimension.
  - element: background
    description: The area of the grid not occupied by the object.
    properties:
      color: white (0)
      role: Unchanging canvas.
  - element: object
    description: A single connected group of non-white pixels representing the foreground element.
    properties:
      color: Uniform non-white color (varies per example: green, red, gray, azure).
      shape: Various contiguous shapes (like letters 'E', 'H', '8', '0').
      connectivity: Pixels are adjacent (including diagonals considered connected for identification, although transformation is per-pixel).
      pixel_count: Preserved during transformation.
    relationships:
      - type: located_on
        target: background
  - element: pixel
    description: Individual cell within the grid.
    properties:
      row: Integer index.
      column: Integer index.
      color: Integer value (0-9).
      is_object_pixel: Boolean (true if color is not white).
  - element: object_bounding_box
    description: The minimum rectangle enclosing the object.
    properties:
      min_row: Topmost row index of the object.
      max_row: Bottommost row index of the object.
      min_col: Leftmost column index of the object. # Key property for transformation
      max_col: Rightmost column index of the object.

actions:
  - action: identify_object_and_properties
    description: Locate the non-white object, its pixels, color, and leftmost column.
    inputs:
      - input_grid
    outputs:
      - object_pixels: List of (row, col) coordinates.
      - object_color: Integer color value.
      - min_col: The minimum column index occupied by the object.
  - action: calculate_vertical_shift
    description: Determine the vertical shift 'dy' for an object pixel based on its column 'c' and the object's starting column 'min_col'.
    inputs:
      - column_index (c)
      - object_min_col (min_col)
    outputs:
      - vertical_shift (dy): Integer value (+1, 0, or -1).
    logic: |
      relative_col = column_index - object_min_col
      remainder = relative_col % 3
      if remainder == 1:
        vertical_shift = 1
      elif remainder == 2:
        vertical_shift = -1
      else: # remainder == 0
        vertical_shift = 0
  - action: apply_transformation
    description: Create the output grid by placing each object pixel from the input grid into its new vertically shifted position.
    inputs:
      - input_grid_dimensions (height, width)
      - object_pixels (list of (r, c) from input)
      - object_color
      - min_col
    outputs:
      - output_grid
    logic: |
      Initialize output_grid of the same dimensions as input, filled with background color (white, 0).
      For each pixel (r, c) in object_pixels:
        Calculate vertical_shift (dy) using calculate_vertical_shift(c, min_col).
        new_row = r + dy
        If 0 <= new_row < height: # Check grid bounds
          Set output_grid[new_row][c] = object_color

relationships:
  - type: transformation_rule
    source: input_grid
    target: output_grid
    description: The output grid is generated by relocating each pixel of the input object. The pixel's column remains the same, but its row is adjusted by a vertical shift (dy). This shift cycles through 0, +1, -1 based on the pixel's column index relative to the object's leftmost column (`min_col`), specifically `(c - min_col) % 3`. Pixels shifted outside the grid boundaries are discarded. The background remains unchanged.