task_context:
  description: "Identifies a block of three vertically adjacent rows containing horizontal non-white pixel segments. Performs transformations based on these segments: center row expands horizontally, upper row projects/casts rays upwards, lower row projects/casts rays downwards."
  grid_properties:
    - size_variable
    - background_color: white (0)
objects:
  - object_type: segment_block
    description: "A set of three vertically consecutive rows, each containing at least one horizontal segment of non-white pixels."
    identification: Find the first instance where rows r, r+1, r+2 each contain non-white pixels.
    components:
      - upper_row: The first row (r).
      - center_row: The middle row (r+1).
      - lower_row: The third row (r+2).
  - object_type: horizontal_segment
    description: "A contiguous horizontal sequence of non-white pixels within a single row."
    properties:
      - start_column: Index of the leftmost pixel.
      - end_column: Index of the rightmost pixel.
      - center_column: Calculated as `start + (end - start) // 2`.
      - pixels: List of color values in the segment.
      - length: `end - start + 1`.
      - parent_row: The row object (upper, center, or lower) containing the segment.
actions:
  - action: find_segment_block
    description: "Locate the upper, center, and lower rows forming the first segment_block in the input grid."
    inputs: input_grid
    outputs: upper_row_index, center_row_index, lower_row_index (or indicates failure if none found)
  - action: analyze_segments
    description: "For each of the upper, center, and lower rows, find the primary horizontal_segment and its properties (start, end, center, pixels)."
    inputs: upper_row_index, center_row_index, lower_row_index, input_grid
    outputs: upper_segment_properties, center_segment_properties, lower_segment_properties
  - action: expand_center_row
    description: "Modify the output grid (initially a copy of input). In the center row, fill pixels to the left of the segment with the segment's leftmost pixel color. Fill pixels to the right of the segment with the segment's rightmost pixel color. The original segment pixels remain unchanged."
    inputs: output_grid, center_segment_properties
    outputs: modified_output_grid
  - action: project_and_cast_rays
    description: "For each pixel in the upper and lower row segments, project it and cast a ray in the output grid."
    inputs: output_grid, segment_properties (upper or lower), direction_multiplier (dr = -1 for upper, dr = 1 for lower)
    outputs: modified_output_grid
    details:
      - For each pixel `p` with color `C` at `(r_orig, c_orig)` in the segment:
        - Calculate offset: `offset = c_orig - segment_center_column`.
        - Determine ray direction: `dc = offset > 0 ? 1 : (offset < 0 ? -1 : 0)`. `dr = direction_multiplier`.
        - Calculate initial projection coordinates: `(r_proj, c_proj) = (r_orig + dr, c_orig + offset)`.
        - If `(r_proj, c_proj)` is within grid bounds, set `output_grid[r_proj, c_proj] = C`.
        - Start ray casting from `(ray_r, ray_c) = (r_proj + dr, c_proj + dc)`.
        - While `(ray_r, ray_c)` is within grid bounds:
          - Set `output_grid[ray_r, ray_c] = C`.
          - Update `ray_r += dr`, `ray_c += dc`.
flow:
  - Initialize `output_grid` as a copy of `input_grid`.
  - Perform `find_segment_block`. If not found, return `output_grid`.
  - Perform `analyze_segments`.
  - Perform `expand_center_row`.
  - Perform `project_and_cast_rays` for the upper segment with `dr = -1`.
  - Perform `project_and_cast_rays` for the lower segment with `dr = 1`.
  - Return final `output_grid`.
