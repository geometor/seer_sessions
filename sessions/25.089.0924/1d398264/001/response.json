{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Tuple\n\n\"\"\"\nThe transformation identifies three key adjacent rows in the input grid based on a specific pattern in the middle row.\n1. Find the \"center row\": Locate a row containing a horizontal sequence of three non-white pixels where the outer two pixels have the same color (X) and the middle pixel has a different color (Y), forming an \"X Y X\" pattern.\n2. Identify \"upper row\" and \"lower row\": These are the rows directly above and below the center row, respectively.\n3. Initialize the output grid as a copy of the input grid.\n4. Apply transformations based on these three rows:\n    a. Center Row (Horizontal Expansion): Extend the color X from the \"X Y X\" pattern horizontally outwards to fill the rest of the center row in the output grid, leaving the original \"X Y X\" pixels unchanged.\n    b. Upper Row (Upward Projection): For each non-white pixel in the upper row of the input grid:\n        - Find the horizontal segment of non-white pixels it belongs to.\n        - Calculate the center column of this segment.\n        - Calculate the pixel's horizontal offset from the segment center.\n        - Project the pixel one step upwards and horizontally by its offset. Place the pixel's color at this new location in the output grid.\n    c. Lower Row (Downward Projection & Ray Casting): For each non-white pixel in the lower row of the input grid:\n        - Find the horizontal segment of non-white pixels it belongs to.\n        - Calculate the center column of this segment.\n        - Calculate the pixel's horizontal offset from the segment center.\n        - Project the pixel one step downwards and horizontally by its offset. Place the pixel's color at this new location in the output grid.\n        - Cast a \"ray\" of the same color downwards from this projected position. The ray goes straight down if the offset was zero, diagonally down-left if the offset was negative, and diagonally down-right if the offset was positive. The ray continues until it hits the grid boundary.\n5. Return the modified output grid.\n\"\"\"\n\ndef find_center_row(grid: np.ndarray) -> Tuple[int, int, int, int, int]:\n    \"\"\"\n    Finds the row index and column indices of the 'X Y X' pattern.\n    Returns (row_idx, x_color, left_x_col, y_col, right_x_col) or raises ValueError if not found.\n    \"\"\"\n    height, width = grid.shape\n    for r in range(height):\n        for c in range(width - 2):\n            p1, p2, p3 = grid[r, c], grid[r, c + 1], grid[r, c + 2]\n            # Check for X Y X pattern (non-white)\n            if p1 != 0 and p2 != 0 and p3 != 0 and p1 == p3 and p1 != p2:\n                # Check if the pattern is isolated horizontally by white pixels or grid edges\n                left_ok = (c == 0 or grid[r, c - 1] == 0)\n                right_ok = (c + 3 == width or grid[r, c + 3] == 0)\n                if left_ok and right_ok:\n                     return r, p1, c, c + 1, c + 2\n    raise ValueError(\"Center 'X Y X' pattern not found\")\n\ndef find_horizontal_segment(grid: np.ndarray, r: int, c: int) -> Tuple[int, int]:\n    \"\"\"Finds the start and end column index of a horizontal segment of non-white pixels.\"\"\"\n    if r < 0 or r >= grid.shape[0] or grid[r, c] == 0:\n        raise ValueError(f\"Pixel at ({r}, {c}) is white or out of bounds\")\n\n    width = grid.shape[1]\n    start_col = c\n    while start_col > 0 and grid[r, start_col - 1] != 0:\n        start_col -= 1\n\n    end_col = c\n    while end_col < width - 1 and grid[r, end_col + 1] != 0:\n        end_col += 1\n\n    return start_col, end_col\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Applies the described transformation to the input grid.\n    \"\"\"\n    input_np = np.array(input_grid, dtype=int)\n    output_np = np.copy(input_np)\n    height, width = input_np.shape\n\n    try:\n        # 1. Find the center row and the 'X Y X' pattern\n        center_row_idx, x_color, left_x_col, y_col, right_x_col = find_center_row(input_np)\n        upper_row_idx = center_row_idx - 1\n        lower_row_idx = center_row_idx + 1\n\n        # 4a. Center Row Horizontal Expansion\n        # Fill left side\n        for c in range(left_x_col):\n            output_np[center_row_idx, c] = x_color\n        # Fill right side\n        for c in range(right_x_col + 1, width):\n            output_np[center_row_idx, c] = x_color\n        # Ensure original X Y X is preserved (already copied, but good practice)\n        # output_np[center_row_idx, left_x_col:right_x_col+1] = input_np[center_row_idx, left_x_col:right_x_col+1]\n\n        # 4b. Upper Row Upward Projection\n        if upper_row_idx >= 0:\n            processed_cols_upper = set()\n            for c_orig in range(width):\n                if c_orig in processed_cols_upper:\n                    continue\n                if input_np[upper_row_idx, c_orig] != 0:\n                    color = input_np[upper_row_idx, c_orig]\n                    start_col, end_col = find_horizontal_segment(input_np, upper_row_idx, c_orig)\n                    mid_col = start_col + (end_col - start_col) // 2\n\n                    # Process all pixels in this segment\n                    for c_seg in range(start_col, end_col + 1):\n                         if input_np[upper_row_idx, c_seg] != 0: # Check again as segments might merge oddly\n                            seg_color = input_np[upper_row_idx, c_seg]\n                            offset = c_seg - mid_col\n                            target_row = upper_row_idx - 1\n                            target_col = c_seg + offset # Project horizontally by offset\n\n                            if 0 <= target_row < height and 0 <= target_col < width:\n                                output_np[target_row, target_col] = seg_color\n                            processed_cols_upper.add(c_seg)\n\n\n        # 4c. Lower Row Downward Projection & Ray Casting\n        if lower_row_idx < height:\n            processed_cols_lower = set()\n            for c_orig in range(width):\n                 if c_orig in processed_cols_lower:\n                     continue\n                 if input_np[lower_row_idx, c_orig] != 0:\n                    color = input_np[lower_row_idx, c_orig]\n                    start_col, end_col = find_horizontal_segment(input_np, lower_row_idx, c_orig)\n                    mid_col = start_col + (end_col - start_col) // 2\n\n                    # Process all pixels in this segment\n                    for c_seg in range(start_col, end_col + 1):\n                        if input_np[lower_row_idx, c_seg] != 0: # Check again\n                            seg_color = input_np[lower_row_idx, c_seg]\n                            offset = c_seg - mid_col\n                            \n                            # --- Single Step Projection ---\n                            target_row = lower_row_idx + 1\n                            target_col = c_seg + offset # Project horizontally by offset\n\n                            proj_r, proj_c = -1, -1 # Store projection coords for ray start\n                            if 0 <= target_row < height and 0 <= target_col < width:\n                                output_np[target_row, target_col] = seg_color\n                                proj_r, proj_c = target_row, target_col\n\n                            # --- Ray Casting ---\n                            if proj_r != -1: # Only cast if initial projection was in bounds\n                                dr, dc = 1, 0  # Default: straight down\n                                if offset < 0:\n                                    dc = -1  # Diagonal down-left\n                                elif offset > 0:\n                                    dc = 1  # Diagonal down-right\n\n                                # Start ray from the *next* position after the single step projection\n                                ray_r, ray_c = proj_r + dr, proj_c + dc\n                                while 0 <= ray_r < height and 0 <= ray_c < width:\n                                    output_np[ray_r, ray_c] = seg_color\n                                    ray_r += dr\n                                    ray_c += dc\n                            processed_cols_lower.add(c_seg)\n\n\n    except ValueError as e:\n        # If the characteristic pattern isn't found, return the input unchanged\n        # Or handle the error as appropriate for the specific ARC task context\n        # For now, returning a copy is safer.\n        print(f\"Warning: {e}. Returning copy of input.\")\n        return input_np.tolist()\n\n\n    return output_np.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4391,
    "candidates_token_count": 2267,
    "total_token_count": 6658,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 30.005647,
  "retries": 1
}