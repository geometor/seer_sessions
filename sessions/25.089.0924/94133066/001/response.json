{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentify all contiguous objects composed of non-white pixels (colors 1 through 9) in the input grid.\nSelect the object that has the maximum pixel count.\nCalculate the bounding box coordinates (minimum row, minimum column, maximum row, maximum column) that tightly enclose the selected largest object.\nCreate a new grid by extracting all pixels from the input grid that fall within this calculated bounding box. This extracted subgrid is the final output.\n\"\"\"\n\ndef _find_objects(grid_np):\n    \"\"\"\n    Finds all contiguous objects of non-background pixels in the grid.\n\n    Args:\n        grid_np: A numpy array representing the grid.\n\n    Returns:\n        A list of sets, where each set contains the (row, col) tuples\n        of pixels belonging to a single contiguous non-background object.\n    \"\"\"\n    rows, cols = grid_np.shape\n    visited = set()\n    objects = []\n\n    for r in range(rows):\n        for c in range(cols):\n            # If the pixel is non-background (not 0) and not yet visited\n            if grid_np[r, c] != 0 and (r, c) not in visited:\n                current_object = set()\n                q = deque([(r, c)])\n                visited.add((r, c))\n                current_object.add((r, c))\n\n                # Start Breadth-First Search (BFS)\n                while q:\n                    row, col = q.popleft()\n\n                    # Check neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n\n                        # Check if neighbor is within bounds\n                        if 0 <= nr < rows and 0 <= nc < cols:\n                            # Check if neighbor is non-background and not visited\n                            if grid_np[nr, nc] != 0 and (nr, nc) not in visited:\n                                visited.add((nr, nc))\n                                current_object.add((nr, nc))\n                                q.append((nr, nc))\n                \n                # Add the found object to the list\n                if current_object:\n                    objects.append(current_object)\n    return objects\n\ndef _get_bounding_box(object_coords):\n    \"\"\"\n    Calculates the bounding box for a set of coordinates.\n\n    Args:\n        object_coords: A set of (row, col) tuples representing an object.\n\n    Returns:\n        A tuple (min_row, min_col, max_row, max_col).\n        Returns None if object_coords is empty.\n    \"\"\"\n    if not object_coords:\n        return None\n\n    rows = [r for r, c in object_coords]\n    cols = [c for r, c in object_coords]\n    \n    min_row = min(rows)\n    min_col = min(cols)\n    max_row = max(rows)\n    max_col = max(cols)\n    \n    return min_row, min_col, max_row, max_col\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by extracting the largest non-background object.\n    \n    Args:\n        input_grid: A list of lists representing the input grid.\n\n    Returns:\n        A list of lists representing the extracted subgrid containing the largest object.\n        Returns an empty list if no non-background objects are found.\n    \"\"\"\n    # Convert input list of lists to numpy array for easier processing\n    grid_np = np.array(input_grid, dtype=int)\n\n    # Find all contiguous non-background objects\n    objects = _find_objects(grid_np)\n\n    # If no objects found, return empty grid or handle as appropriate\n    if not objects:\n        # Decide on behavior: return empty list, original grid, or raise error?\n        # Based on examples, there's always an object. Let's assume one exists.\n        # If this assumption is wrong, error handling might be needed.\n         return [] # Or raise ValueError(\"No non-background objects found\")\n\n    # Find the largest object based on the number of pixels\n    largest_object = max(objects, key=len)\n\n    # Calculate the bounding box of the largest object\n    min_row, min_col, max_row, max_col = _get_bounding_box(largest_object)\n\n    # Extract the subgrid defined by the bounding box\n    # Note: Slicing is inclusive of the start index and exclusive of the end index,\n    # so we add 1 to max_row and max_col.\n    output_grid_np = grid_np[min_row : max_row + 1, min_col : max_col + 1]\n\n    # Convert the resulting numpy array back to a list of lists\n    output_grid = output_grid_np.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5285,
    "candidates_token_count": 1144,
    "total_token_count": 6429,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 17.507068,
  "retries": 1
}