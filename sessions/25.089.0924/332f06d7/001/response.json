{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom scipy.ndimage import label, generate_binary_structure\n\n\"\"\"\nThis transformation operates based on the number of distinct, contiguous objects \nof Red (2), White (0), and Blue (1) colors found in the input grid. \nGreen (3) is treated as a background/separator color.\n\n1. Identify and count the number of distinct objects for Red, White, and Blue.\n2. Check if there is exactly one object of each color (Red=1, White=1, Blue=1).\n3. If the condition (one of each) is TRUE:\n    - Change all White pixels (0) to Blue (1).\n    - Change all Blue pixels (1) to White (0).\n    - Keep Red pixels (2) and all other colors unchanged.\n4. If the condition is FALSE:\n    - Change all Red pixels (2) to White (0).\n    - Change all White pixels (0) to Blue (1).\n    - Keep Blue pixels (1) and all other colors unchanged.\n\"\"\"\n\ndef find_objects(grid, color):\n    \"\"\"\n    Finds and counts the number of distinct contiguous objects of a specific color.\n    \n    Args:\n        grid (np.array): The input grid.\n        color (int): The color value to find objects for.\n        \n    Returns:\n        int: The number of distinct objects of the specified color.\n    \"\"\"\n    # Create a binary mask where True indicates the target color\n    mask = (grid == color)\n    # Define connectivity (8-connectivity allows diagonal connections)\n    structure = generate_binary_structure(2, 2) \n    # Label connected components in the mask\n    labeled_array, num_features = label(mask, structure=structure)\n    # Return the count of distinct objects found\n    return num_features\n\ndef transform(input_grid):\n    \"\"\"\n    Applies a conditional color transformation based on the counts of Red, White, \n    and Blue objects in the input grid.\n\n    Args:\n        input_grid (list[list[int]]): A 2D list representing the input grid.\n\n    Returns:\n        list[list[int]]: A 2D list representing the transformed output grid.\n    \"\"\"\n    # Convert input list of lists to a NumPy array for efficient processing\n    input_np = np.array(input_grid, dtype=int)\n    \n    # Count the number of distinct objects for Red, White, and Blue\n    num_red_objects = find_objects(input_np, 2) # Red color = 2\n    num_white_objects = find_objects(input_np, 0) # White color = 0\n    num_blue_objects = find_objects(input_np, 1) # Blue color = 1\n    \n    # Check if the condition (exactly one object of each color) is met\n    is_condition_met = (num_red_objects == 1 and \n                        num_white_objects == 1 and \n                        num_blue_objects == 1)\n                        \n    # Create a copy of the input grid to modify for the output\n    output_grid = np.copy(input_np)\n    \n    # Apply the transformation rules based on the condition\n    if is_condition_met:\n        # Condition is TRUE: White -> Blue, Blue -> White\n        # Find pixels that are White (0) in the input\n        white_pixels = (input_np == 0)\n        # Find pixels that are Blue (1) in the input\n        blue_pixels = (input_np == 1)\n        \n        # Change White pixels to Blue in the output grid\n        output_grid[white_pixels] = 1 \n        # Change Blue pixels to White in the output grid\n        output_grid[blue_pixels] = 0 \n        # Red and other colors remain unchanged as they were copied initially\n    else:\n        # Condition is FALSE: Red -> White, White -> Blue\n        # Find pixels that are Red (2) in the input\n        red_pixels = (input_np == 2)\n        # Find pixels that are White (0) in the input\n        white_pixels = (input_np == 0)\n        \n        # Change Red pixels to White in the output grid\n        output_grid[red_pixels] = 0\n        # Change White pixels to Blue in the output grid\n        output_grid[white_pixels] = 1\n        # Blue and other colors remain unchanged as they were copied initially\n        \n    # Convert the final NumPy array back to a list of lists for the output\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5010,
    "candidates_token_count": 1053,
    "total_token_count": 6063,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 20.373562,
  "retries": 1
}