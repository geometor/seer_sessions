{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransformation rule:\n1. Identify the background color (the most frequent color in the grid).\n2. Create a copy of the input grid.\n3. Iterate through each pixel in the grid.\n4. If a pixel has the background color, check if it is enclosed by a single non-background color in all four cardinal directions (up, down, left, right).\n5. To check for enclosure:\n   - Look upwards from the pixel: Find the first non-background pixel. Record its color. If the grid boundary is hit first, it's not enclosed.\n   - Look downwards: Find the first non-background pixel. Record its color. If the grid boundary is hit first, it's not enclosed.\n   - Look leftwards: Find the first non-background pixel. Record its color. If the grid boundary is hit first, it's not enclosed.\n   - Look rightwards: Find the first non-background pixel. Record its color. If the grid boundary is hit first, it's not enclosed.\n6. If all four directions hit a non-background pixel, and all four non-background pixels found have the *same* color, then the original background pixel is considered enclosed.\n7. If a background pixel is enclosed by color 'C', change its color to 'C' in the copied grid.\n8. Pixels that were not background pixels, or background pixels that were not enclosed, remain unchanged.\n9. Return the modified copied grid.\n\"\"\"\n\ndef get_background_color(grid):\n    \"\"\"Finds the most frequent color in the grid.\"\"\"\n    colors, counts = np.unique(grid, return_counts=True)\n    return colors[np.argmax(counts)]\n\ndef check_enclosed(grid, r, c, bg_color, height, width):\n    \"\"\"\n    Checks if the background pixel at (r, c) is enclosed by a single non-background color.\n    Returns (True, frame_color) if enclosed, (False, None) otherwise.\n    \"\"\"\n    frame_color = -1 # Use -1 to indicate no frame color found yet\n\n    # Check Up\n    found_up = False\n    for i in range(r - 1, -1, -1):\n        if grid[i, c] != bg_color:\n            frame_color = grid[i, c]\n            found_up = True\n            break\n    if not found_up:\n        return False, None\n\n    # Check Down\n    found_down = False\n    for i in range(r + 1, height):\n        if grid[i, c] != bg_color:\n            if grid[i, c] != frame_color: return False, None # Different color\n            found_down = True\n            break\n    if not found_down:\n        return False, None\n\n    # Check Left\n    found_left = False\n    for j in range(c - 1, -1, -1):\n        if grid[r, j] != bg_color:\n            if grid[r, j] != frame_color: return False, None # Different color\n            found_left = True\n            break\n    if not found_left:\n        return False, None\n\n    # Check Right\n    found_right = False\n    for j in range(c + 1, width):\n        if grid[r, j] != bg_color:\n            if grid[r, j] != frame_color: return False, None # Different color\n            found_right = True\n            break\n    if not found_right:\n        return False, None\n\n    # If all checks passed and found the same frame color\n    return True, frame_color\n\n\ndef transform(input_grid):\n    \"\"\"\n    Fills the interior of hollow rectangular frames with the color of the frame.\n    \"\"\"\n    # Convert list of lists to numpy array for easier manipulation\n    input_grid_np = np.array(input_grid, dtype=int)\n    \n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid_np)\n    height, width = output_grid.shape\n\n    # Identify the background color\n    bg_color = get_background_color(input_grid_np)\n\n    # Iterate through each pixel potentially inside a frame\n    for r in range(height):\n        for c in range(width):\n            # Check only pixels that currently have the background color\n            if input_grid_np[r, c] == bg_color:\n                # Check if this background pixel is enclosed\n                is_enclosed, frame_color = check_enclosed(input_grid_np, r, c, bg_color, height, width)\n                \n                # If enclosed, fill the pixel with the frame color\n                if is_enclosed:\n                    output_grid[r, c] = frame_color\n\n    # Convert back to list of lists for the expected output format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4738,
    "candidates_token_count": 1123,
    "total_token_count": 5861,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 21.09043,
  "retries": 1
}