{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nTransforms an input grid based on the following rules:\n\n1.  Preserve Original Objects: Any maroon (9) pixels in the input grid are kept in the same position in the output grid.\n2.  Create Green Frames: Any white (0) pixel in the input grid that is adjacent (including diagonally, 8-way connectivity) to at least one maroon (9) pixel becomes green (3) in the output grid. If multiple maroon blocks are close, their green frames merge.\n3.  Identify Remaining White Regions: After placing the maroon pixels and generating the green frames, identify the connected components of the remaining white (0) pixels using 8-way connectivity.\n4.  Fill Rectangular White Regions with Blue: For each connected component of white pixels identified in step 3, determine if the shape of the component forms a perfect rectangle. If it does, fill all pixels within that component with blue (1) in the output grid. If the component is not a perfect rectangle, its pixels remain white (0).\n5.  Precedence: Maroon pixels take precedence over green. Green pixels take precedence over potential blue or remaining white pixels. Blue pixels take precedence over remaining white pixels.\n\"\"\"\n\ndef get_neighbors(r, c, height, width):\n    \"\"\"Generates valid 8-way neighbor coordinates for a given cell.\"\"\"\n    neighbors = []\n    for dr in [-1, 0, 1]:\n        for dc in [-1, 0, 1]:\n            if dr == 0 and dc == 0:\n                continue\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < height and 0 <= nc < width:\n                neighbors.append((nr, nc))\n    return neighbors\n\ndef find_connected_component(grid, start_r, start_c, target_color, visited):\n    \"\"\"Finds a connected component using BFS.\"\"\"\n    height, width = grid.shape\n    if not (0 <= start_r < height and 0 <= start_c < width) or \\\n       visited[start_r, start_c] or \\\n       grid[start_r, start_c] != target_color:\n        return None\n\n    component = set()\n    q = deque([(start_r, start_c)])\n    visited[start_r, start_c] = True\n\n    while q:\n        r, c = q.popleft()\n        component.add((r, c))\n\n        for nr, nc in get_neighbors(r, c, height, width):\n            if not visited[nr, nc] and grid[nr, nc] == target_color:\n                visited[nr, nc] = True\n                q.append((nr, nc))\n    \n    return component\n\ndef is_rectangle(component_coords):\n    \"\"\"Checks if a set of coordinates forms a solid rectangle.\"\"\"\n    if not component_coords:\n        return False\n        \n    rows = [r for r, c in component_coords]\n    cols = [c for r, c in component_coords]\n    \n    min_r, max_r = min(rows), max(rows)\n    min_c, max_c = min(cols), max(cols)\n    \n    expected_height = max_r - min_r + 1\n    expected_width = max_c - min_c + 1\n    expected_size = expected_height * expected_width\n    \n    return len(component_coords) == expected_size\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rules to the input grid.\n    \"\"\"\n    input_grid_np = np.array(input_grid, dtype=int)\n    height, width = input_grid_np.shape\n    output_grid = np.copy(input_grid_np) # Start with maroon pixels\n\n    # 1. Create Green Frames\n    maroon_pixels = set(tuple(coord) for coord in np.argwhere(input_grid_np == 9))\n    \n    for r in range(height):\n        for c in range(width):\n            # Only consider original white pixels\n            if input_grid_np[r, c] == 0:\n                is_neighbor_to_maroon = False\n                for nr, nc in get_neighbors(r, c, height, width):\n                    if (nr, nc) in maroon_pixels:\n                        is_neighbor_to_maroon = True\n                        break\n                if is_neighbor_to_maroon:\n                    output_grid[r, c] = 3 # Turn white pixel green\n\n    # 2. Find and Fill Blue Rectangles\n    visited = np.zeros_like(output_grid, dtype=bool)\n    \n    for r in range(height):\n        for c in range(width):\n            # Look for unvisited white pixels in the *current* output grid\n            if output_grid[r, c] == 0 and not visited[r, c]:\n                # Find the connected component of white pixels starting from here\n                component = find_connected_component(output_grid, r, c, 0, visited)\n                \n                if component:\n                    # Check if the component forms a perfect rectangle\n                    if is_rectangle(component):\n                        # If it's a rectangle, color it blue\n                        for cr, cc in component:\n                            output_grid[cr, cc] = 1\n                    # If not a rectangle, it remains white (0), and visited is already marked\n\n    return output_grid.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6340,
    "candidates_token_count": 1257,
    "total_token_count": 7597,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 22.697687,
  "retries": 1
}