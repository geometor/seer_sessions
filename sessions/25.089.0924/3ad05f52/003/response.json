{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nPerform a constrained flood fill operation on the input grid.\n1. Identify the unique 'fill color' which is not white (0) or azure (8).\n2. Identify all pixels with this 'fill color' in the input grid; these are the 'seed points'.\n3. Identify all white (0) pixels connected to the grid border without crossing any non-white pixels. Mark these as 'exterior white'.\n4. Starting from the seed points, perform a 4-way flood fill on the grid.\n5. The fill operation changes white (0) pixels to the 'fill color' *only if* the white pixel is *not* marked as 'exterior white'.\n6. The fill stops at the grid boundaries, at pixels with the azure (8) color, and at 'exterior white' pixels.\n7. The output grid is the input grid after the constrained flood fill operation.\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of the input grid\n    output_grid = np.copy(input_grid)\n    height, width = output_grid.shape\n\n    # --- Find the unique fill color and seed points ---\n    fill_color = -1\n    seed_points = []\n    unique_colors = np.unique(input_grid)\n\n    for color in unique_colors:\n        if color != 0 and color != 8: # 0 is white (background), 8 is azure (boundary)\n            fill_color = color\n            break # Assume only one such color based on problem description\n\n    # If no specific fill color found (grid might be only 0s and 8s), return original\n    if fill_color == -1:\n        return output_grid\n\n    # Find all initial locations of the fill color\n    seed_points = list(zip(*np.where(input_grid == fill_color)))\n\n    # If no seed points found, return original\n    if not seed_points:\n        return output_grid\n\n    # --- Identify Exterior White Pixels ---\n    is_exterior = np.zeros((height, width), dtype=bool)\n    exterior_queue = deque()\n\n    # Check border cells\n    for r in range(height):\n        for c in [0, width - 1]:\n             if input_grid[r, c] == 0 and not is_exterior[r, c]:\n                is_exterior[r, c] = True\n                exterior_queue.append((r, c))\n    for c in range(width):\n        for r in [0, height - 1]:\n             if input_grid[r, c] == 0 and not is_exterior[r, c]:\n                is_exterior[r, c] = True\n                exterior_queue.append((r, c))\n\n    # BFS for exterior white pixels\n    while exterior_queue:\n        r, c = exterior_queue.popleft()\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < height and 0 <= nc < width:\n                if input_grid[nr, nc] == 0 and not is_exterior[nr, nc]:\n                    is_exterior[nr, nc] = True\n                    exterior_queue.append((nr, nc))\n\n    # --- Perform Constrained Flood Fill (using BFS) ---\n    fill_queue = deque(seed_points)\n    # Initialize visited with seed points AND all exterior white points\n    # We don't want the main fill to process exterior points at all.\n    visited = set(seed_points)\n    visited.update(zip(*np.where(is_exterior)))\n\n    while fill_queue:\n        r, c = fill_queue.popleft()\n\n        # Explore 4-way neighbors (up, down, left, right)\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n\n            # Check if the neighbor is within bounds\n            if 0 <= nr < height and 0 <= nc < width:\n                # Check if the neighbor hasn't been visited yet\n                if (nr, nc) not in visited:\n                    # Check if the neighbor is a fillable area:\n                    # Must be white (0) in the *output grid* (which starts as input)\n                    # AND must NOT be an exterior white cell.\n                    if output_grid[nr, nc] == 0 and not is_exterior[nr, nc]:\n                        # Change color in the output grid\n                        output_grid[nr, nc] = fill_color\n                        # Mark as visited\n                        visited.add((nr, nc))\n                        # Add to queue for further exploration\n                        fill_queue.append((nr, nc))\n                    else:\n                        # If it's not a fillable white cell (e.g., boundary 8, already filled, exterior white)\n                        # mark it as visited so we don't check it again from another path.\n                        visited.add((nr, nc))\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 24817,
    "candidates_token_count": 1185,
    "total_token_count": 26002,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.881944,
  "retries": 1
}