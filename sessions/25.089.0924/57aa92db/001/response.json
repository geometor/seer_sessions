{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nIdentifies pairs of adjacent, non-white pixels where one color's index is greater than the other. \nFor each such pair, the pixel with the lower color index ('target') triggers an expansion. \nThe expansion fills any white (0) pixels within the 3x3 neighborhood centered on the 'target' pixel with the color of the adjacent pixel having the higher index ('expander'). \nThis process is applied based on the state of the original input grid, modifying a copy which becomes the output. \nPixels that are not white in the input grid retain their original color.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the expansion transformation to the input grid.\n\n    Args:\n        input_grid (np.ndarray): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.ndarray: A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    # Initialize output_grid as a copy of the input_grid\n    output_grid = np.copy(input_grid)\n    height, width = input_grid.shape\n\n    # Iterate through each cell (r, c) of the input grid\n    for r in range(height):\n        for c in range(width):\n            color_b = input_grid[r, c]\n\n            # Skip if the current cell is white (background)\n            if color_b == 0:\n                continue\n\n            # Check cardinal neighbors (up, down, left, right)\n            for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                nr, nc = r + dr, c + dc\n\n                # Check if the neighbor is within grid boundaries\n                if 0 <= nr < height and 0 <= nc < width:\n                    color_a = input_grid[nr, nc]\n\n                    # Check if neighbor is non-white, different from current cell, and has a higher index\n                    if color_a != 0 and color_a != color_b and color_a > color_b:\n                        # color_b at (r, c) is the 'target', color_a is the 'expander'\n                        \n                        # Iterate through the 3x3 neighborhood centered at the target (r, c)\n                        for tr_offset in range(-1, 2):\n                            for tc_offset in range(-1, 2):\n                                tr, tc = r + tr_offset, c + tc_offset\n\n                                # Check if the neighborhood cell is within grid boundaries\n                                if 0 <= tr < height and 0 <= tc < width:\n                                    # Check if the cell in the original input grid is white\n                                    if input_grid[tr, tc] == 0:\n                                        # Update the corresponding cell in the output grid with the expander color\n                                        output_grid[tr, tc] = color_a\n                                        \n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6463,
    "candidates_token_count": 666,
    "total_token_count": 7129,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.156162,
  "retries": 1
}