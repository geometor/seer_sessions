# Focus on the transformation from input to output grid

# Grid properties:
grid_dimensions:
  variable: true # width and height can vary between examples
  range: 1x1 to 30x30

# Colors involved:
colors:
  input:
    - white (0)
    - gray (5)
  output:
    - white (0) # some white pixels remain unchanged
    - gray (5) # all gray pixels remain unchanged
    - red (2) # appears in output where specific patterns exist in input

# Core Objects/Patterns:
- object: 2x2_white_block
  definition: A square block of four pixels arranged in a 2x2 configuration, where all four pixels have the color white (0).
  location: Can occur anywhere within the grid boundaries.
  overlap: Allowed; multiple 2x2 white blocks can share pixels.

# Transformation rule:
transformation:
  action: pattern_replacement
  input_pattern: 2x2_white_block (all pixels are white (0))
  output_pattern: 2x2_red_block (all pixels are red (2))
  condition: Identify all occurrences of the input_pattern in the input grid.
  effect: For every identified input_pattern, change the corresponding pixels in the output grid to match the output_pattern.
  unchanged_pixels:
    - Gray (5) pixels remain unchanged.
    - White (0) pixels that are NOT part of any 2x2_white_block remain unchanged.

# Relationships:
- relationship: input_output_correspondence
  description: The output grid is initially a copy of the input grid, modified according to the transformation rule.
- relationship: spatial_adjacency
  description: The rule relies on the spatial adjacency of pixels to form the 2x2 block pattern.