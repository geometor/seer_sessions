# Global grid properties
background_color: 7 # orange
grid_size: variable (16x16, 11x11)

# Object definition
object: contiguous block of non-background pixels

# Core Transformation Steps
1. Identify all input objects (color, shape, pixels, location/bounding_box).
2. For each input object:
   a. Determine input color `C_in`.
   b. Determine output color `C_out` based on `C_in` (see color_map).
   c. Get input object top-left reference point `P_in = (r_min, c_min)`.
   d. Calculate transposed reference point `P_t = (c_min, r_min)`.
   e. Calculate output reference point `P_out` by applying a color-dependent transformation `T(C_in)` to `P_t` (see placement_map).
   f. Generate the output shape `S_out` based on `C_in` (see shape_map).
   g. Draw `S_out` with color `C_out` relative to `P_out` on the output grid.

# Color Mapping (C_in -> C_out)
color_map:
  2: 1  # Red -> Blue
  1: 2  # Blue -> Red
  5: 5  # Gray -> Gray
  9: 9  # Maroon -> Maroon
  8: 8  # Azure -> Azure
  4: 4  # Yellow -> Yellow
  7: 7  # Orange -> Orange (Background)

# Placement Transformation T(C_in) : P_t(r_t, c_t) -> P_out(r_out, c_out)
placement_map:
  9: P_out = (r_t + 3, c_t + 3)       # Maroon (Confirmed Ex 2)
  5: P_out = (r_t + floor(r_t/4) - 4, c_t - 3) # Gray (Confirmed Ex 2)
  2: P_out = ? # Red -> Blue Plus (Needs rule)
  1: P_out = ? # Blue -> Red L/Staircase (Needs rule)
  8: P_out = ? # Azure -> Azure Corner (Needs rule)
  4: P_out = ? # Yellow -> Yellow Scatter (Complex rule, possibly pixel-level, not object-level)

# Shape Mapping (C_in -> S_out generation relative to P_out)
shape_map:
  9: Horizontal Line (length 5) starting at P_out. # Maroon
  5: Single Pixel at P_out. # Gray
  2: 3x3 Plus Sign centered (?) at P_out. # Red -> Blue
  1: L-shape or Staircase relative to P_out. (Specific geometry needed). # Blue -> Red
  8: Corner/Pair shape, likely similar to transposed input shape, drawn relative to P_out. # Azure
  4: Scatter pattern. (Generation rule unclear, possibly pixel-level transformation). # Yellow

# Note: The rules for colors 1, 2, 4, 8 require significant further investigation for both placement and shape generation. The Yellow(4) rule might fundamentally differ (pixel-level transform).