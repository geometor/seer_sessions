# Global grid properties
background_color: 7 # orange
grid_size: variable (16x16, 11x11)

# Object definition
object: contiguous block of non-background pixels

# Core Transformation Steps
1. Identify all input objects (color, shape, location/bounding_box).
2. For each input object:
   a. Determine input color `C_in`.
   b. Determine output color `C_out` based on `C_in` (see color_map below).
   c. Determine output shape `S_out` based on `C_in` (see shape_map below).
   d. Get input object reference point `P_in` (e.g., top-left of bounding box (r_min, c_min)).
   e. Calculate transposed reference point `P_t = (c_min, r_min)`.
   f. Calculate output reference point `P_out` by applying a color-dependent transformation `T(C_in)` to `P_t`.
   g. Draw `S_out` with color `C_out` relative to `P_out` on the output grid (initially background color).

# Color Mapping (C_in -> C_out)
color_map:
  2: 1  # Red -> Blue (Ex 1)
  1: 2  # Blue -> Red (Ex 1)
  5: 5  # Gray -> Gray (Ex 2)
  9: 9  # Maroon -> Maroon (Ex 2)
  8: 8  # Azure -> Azure (Ex 3)
  4: 4  # Yellow -> Yellow (Ex 3)
  7: 7  # Orange -> Orange (Background)

# Shape Mapping (C_in -> S_out description)
shape_map:
  2: Plus Sign (+) # Input Red Diagonal
  1: L-shape / Staircase # Input Blue Plus
  5: Single Pixel # Input Gray Pixel
  9: Horizontal Line (length 5?) # Input Maroon Vertical Line
  8: Corner / Pair (similar to input) # Input Azure Corner/Pair
  4: Scattered pattern # Input Yellow Vertical Line

# Placement Transformation T(C_in) : P_t -> P_out (Hypothesized, potentially incomplete/incorrect)
placement_map:
  9: P_out = (P_t.row + 3, P_t.col + 3) # Based on Ex 2 Maroon
  # Other colors (1, 2, 4, 5, 8) have complex or undetermined placement rules relative to P_t.
  # The rule for Gray(5) seems inconsistent even within Ex 2.
