Task: Draw colored frames around specific objects based on color-key markers.

Input_Grid:
  - Contains a background color (white: 0).
  - Contains distinct Objects:
      - Composed of contiguous pixels of a single non-white color.
      - Vary in shape and position.
      - Examples: Green(3) shapes, Yellow(4) shapes, Azure(8) shapes, Blue(1) shapes.
  - Contains Markers:
      - Located in the bottom-left corner.
      - Consist of vertical pairs of pixels.
      - Format: (Object_Color, Frame_Color) at (row, 0) and (row, 1).
      - Example pairs: (Green, Blue), (Yellow, Red), (Azure, Green), (Blue, Red).

Output_Grid:
  - Preserves all elements from the Input_Grid (background, objects, markers).
  - Adds Frames:
      - Rectangular borders drawn around identified Objects.
      - Position: One pixel offset outwards from the object's bounding box.
      - Thickness: One pixel.
      - Color: Determined by the Frame_Color associated with the Object_Color in the Markers.

Relationships:
  - Each Object (excluding markers) is a target for potential framing.
  - The color of an Object determines which Marker pair is relevant.
  - The second color in the relevant Marker pair dictates the color of the Frame for all objects of the corresponding Object_Color.
  - A Frame's location is defined relative to the bounding box of the Object it encloses.

Actions:
  1. Identify Marker pairs in the bottom-left corner to create a mapping: Object_Color -> Frame_Color.
  2. Identify all distinct Objects (contiguous non-white, non-marker pixels) in the grid.
  3. For each identified Object:
     a. Determine its color (Object_Color).
     b. Check if its Object_Color exists in the Marker mapping.
     c. If yes:
        i. Find the Frame_Color from the mapping.
        ii. Calculate the bounding box of the Object (min_row, min_col, max_row, max_col).
        iii. Define the Frame area as the perimeter of the rectangle from (min_row-1, min_col-1) to (max_row+1, max_col+1).
        iv. Draw the Frame onto the grid using the determined Frame_Color, ensuring not to overwrite existing non-white pixels from the input.
  4. Return the modified grid.