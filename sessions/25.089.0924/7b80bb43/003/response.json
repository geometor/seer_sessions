{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\nimport copy\n\n\"\"\"\nTransforms an input grid based on two rules applied sequentially:\n\n1.  **Cleanup Isolated Pixels:** \n    - Identifies the background color (most frequent) and foreground color.\n    - Creates a copy of the input grid.\n    - Iterates through the *original* input grid. For each pixel with the foreground color, it checks its four cardinal neighbors (up, down, left, right). \n    - If *none* of the cardinal neighbors in the original grid have the foreground color, the corresponding pixel in the *copy* is changed to the background color.\n\n2.  **Fill Specific Horizontal Gaps:**\n    - Takes the grid resulting from the cleanup step.\n    - Iterates through each row.\n    - Identifies specific horizontal patterns: `[Foreground Pixel] [Background Pixel] [Background Pixel] [Background Pixel] [Foreground Pixel]`.\n    - If this exact 5-pixel pattern is found, the three central background pixels are changed to the foreground color.\n    - The final grid after applying both steps is returned.\n\"\"\"\n\ndef _get_colors(grid):\n    \"\"\"Identifies the background (most frequent) and foreground colors.\"\"\"\n    counts = Counter(grid.flatten())\n    # Assume background is the most frequent color\n    background_color = counts.most_common(1)[0][0]\n    foreground_color = None\n    # Find the first color that is not the background\n    for color_count in counts.most_common():\n        color = color_count[0]\n        if color != background_color:\n            foreground_color = color\n            break\n    # Handle grids with only one color \n    if foreground_color is None:\n        # If only one color, it acts as both background and foreground \n        # This edge case might not be relevant for this specific task based on examples\n        # but handles potential single-color inputs gracefully.\n        foreground_color = background_color \n    return background_color, foreground_color\n\ndef _is_isolated(grid, r, c, fg_color):\n    \"\"\"Checks if the foreground pixel at (r, c) is isolated cardinally.\"\"\"\n    rows, cols = grid.shape\n    # Check neighbors (up, down, left, right)\n    # Ensure neighbor coordinates are within grid bounds\n    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n        nr, nc = r + dr, c + dc\n        if 0 <= nr < rows and 0 <= nc < cols and grid[nr, nc] == fg_color:\n            return False # Found a foreground neighbor\n    return True # No foreground neighbors found\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rules: cleanup isolated pixels, then fill specific horizontal gaps.\n    \"\"\"\n    input_np = np.array(input_grid, dtype=int)\n    rows, cols = input_np.shape\n    \n    # 1. Identify Colors\n    background_color, foreground_color = _get_colors(input_np)\n    \n    # Create a working copy for modifications\n    # Step 3 requires checking the original grid while modifying the copy\n    cleaned_grid = input_np.copy()\n    \n    # 3. Cleanup Isolated Pixels\n    # Iterate through the *original* grid to determine isolation\n    for r in range(rows):\n        for c in range(cols):\n            if input_np[r, c] == foreground_color:\n                # Check isolation based on the original grid state\n                if _is_isolated(input_np, r, c, foreground_color):\n                    # Modify the *working copy*\n                    cleaned_grid[r, c] = background_color\n                    \n    # 4. Fill Specific Horizontal Gaps (length 3)\n    # Create the final output grid based on the cleaned grid\n    # Use copy.deepcopy to ensure modifications don't interfere if needed later, though direct modification is fine here.\n    output_grid = cleaned_grid.copy() \n    for r in range(rows):\n        # Use a while loop to potentially skip columns after filling a gap\n        c = 0\n        while c <= cols - 5: # Ensure there's room for the 5-pixel pattern\n            # Check for the specific pattern: FG, BG, BG, BG, FG\n            if (cleaned_grid[r, c] == foreground_color and\n                cleaned_grid[r, c+1] == background_color and\n                cleaned_grid[r, c+2] == background_color and\n                cleaned_grid[r, c+3] == background_color and\n                cleaned_grid[r, c+4] == foreground_color):\n                \n                # Fill the 3-pixel gap in the output grid\n                output_grid[r, c+1 : c+4] = foreground_color\n                \n                # Advance the column index past the pattern we just processed\n                # We move to c+4 because the pixel at c+4 was the end of the pattern\n                c += 4 \n            else:\n                # If pattern not found, just move to the next column\n                c += 1\n\n    # 5. Output\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 16664,
    "candidates_token_count": 1197,
    "total_token_count": 17861,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 22.31549,
  "retries": 1
}