task_description: Find the largest square block of white pixels and fill a slightly smaller square within it with azure pixels, adjusting the starting position based on the size of the white square.
elements:
  - object: grid
    attributes:
      - background: white (0)
      - foreground: variable (red, yellow, green)
      - contains: shapes, blocks
  - object: white_square
    description: The largest contiguous square block composed entirely of white (0) pixels.
    properties:
      - color: white (0)
      - shape: square
      - size: N x N (variable, e.g., 3x3, 4x4, 5x5)
      - location: variable
      - uniqueness: assumed to be the largest unique square of white pixels per grid
  - object: azure_square
    description: The block of azure (8) pixels replacing part of the white_square in the output.
    properties:
      - color: azure (8)
      - shape: square
      - size: (N-1) x (N-1), where N is the side length of the white_square
      - location: derived from the white_square's location and size N
actions:
  - action: find
    actor: system
    target: white_square
    condition: largest square block of white (0) pixels
  - action: determine_properties
    actor: system
    target: white_square
    details: find its top-left corner (r, c) and side length N
  - action: calculate_placement
    actor: system
    target: azure_square
    condition: based on N (side length of white_square)
    details: |
      If N is odd, top-left corner is (r+1, c).
      If N is even, top-left corner is (r, c).
  - action: fill
    actor: system
    target: area within the output grid corresponding to the calculated azure_square location and size
    color: azure (8)
relationships:
  - type: containment
    source: white_square
    target: azure_square (conceptually, the area is within the original white square)
  - type: derivation
    source: white_square (size N, location (r,c))
    target: azure_square (size (N-1)x(N-1), location depends on N's parity)