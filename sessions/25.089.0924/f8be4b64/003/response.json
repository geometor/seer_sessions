{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nThe transformation identifies \"plus\" shapes made of green pixels (3) in the input grid. \nA plus shape is defined by a central pixel having four green neighbors (North, South, East, West).\nThe color of this central pixel (the \"core color\") determines a fill operation on the grid.\nThese fill operations only affect pixels that were originally background (white, 0). \nOriginal non-background pixels are preserved.\n\nFill Operations based on Core Color:\n- Azure (8): Fill the corresponding row with Azure.\n- Magenta (6): Fill the corresponding column with Magenta.\n- Gray (5): Fill the corresponding row AND column with Gray.\n- Red (2): Fill the corresponding row AND column with Red.\n- Yellow (4): Fill the corresponding row with Yellow.\n- Other colors (e.g., 0): No operation.\n\nPriority of Overlapping Fills:\nIf multiple fill operations target the same original background pixel, the color is determined by the operation with the highest priority, applied in this order:\n1. Azure (8)\n2. Magenta (6)\n3. Gray (5)\n4. Red (2)\n5. Yellow (4)\n\nHigher priority fills overwrite the effects of lower priority fills on background pixels.\n\"\"\"\n\ndef find_plus_centers(grid):\n    \"\"\"\n    Finds all pixels that are centers of a green plus shape.\n    A center is a pixel (r, c) where grid[r-1, c], grid[r+1, c], \n    grid[r, c-1], and grid[r, c+1] are all green (3).\n    \n    Args:\n        grid (np.array): Input grid.\n\n    Returns:\n        list: A list of tuples, where each tuple is ((row, col), core_color).\n    \"\"\"\n    centers = []\n    height, width = grid.shape\n    # Iterate through possible center locations (avoiding edges)\n    for r in range(1, height - 1):\n        for c in range(1, width - 1):\n            # Check orthogonal neighbors\n            if (grid[r - 1, c] == 3 and\n                grid[r + 1, c] == 3 and\n                grid[r, c - 1] == 3 and\n                grid[r, c + 1] == 3):\n                core_color = grid[r, c]\n                centers.append(((r, c), core_color))\n    return centers\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on green plus shapes and their core colors,\n    applying fill operations with priority rules.\n\n    Args:\n        input_grid (list of lists): The input grid.\n\n    Returns:\n        list of lists: The transformed grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    grid_np = np.array(input_grid, dtype=int)\n    output_grid = grid_np.copy() # Start with a copy\n    height, width = grid_np.shape\n\n    # Find all green plus centers and their core colors\n    plus_centers = find_plus_centers(grid_np)\n\n    # Define priority order and associated fill types\n    # Priority: 8 > 6 > 5 > 2 > 4\n    # Fill Types: R=Row, C=Column, RC=Row/Column\n    priority_map = {\n        8: 'R', \n        6: 'C', \n        5: 'RC',\n        2: 'RC',\n        4: 'R'\n    }\n    priority_order = [8, 6, 5, 2, 4]\n\n    # Apply fills based on priority order\n    for core_color in priority_order:\n        fill_type = priority_map.get(core_color)\n        if not fill_type:\n            continue # Skip colors without defined actions\n\n        # Find centers with the current core color\n        centers_for_color = [center for center in plus_centers if center[1] == core_color]\n\n        for (r, c), color_val in centers_for_color:\n            # Determine target cells based on fill type\n            target_cells = []\n            if 'R' in fill_type:\n                for tc in range(width):\n                    target_cells.append((r, tc))\n            if 'C' in fill_type:\n                for tr in range(height):\n                     # Avoid adding the center pixel twice if RC\n                    if (tr, c) not in target_cells:\n                       target_cells.append((tr, c))\n            \n            # Apply fill to target cells if they were originally background\n            for tr, tc in target_cells:\n                 # Check bounds just in case, though target_cells should be within bounds\n                 if 0 <= tr < height and 0 <= tc < width:\n                    # Check if the original pixel was background (0)\n                    if grid_np[tr, tc] == 0:\n                        output_grid[tr, tc] = color_val # Apply the fill\n\n    # Convert back to list of lists for the expected output format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 22625,
    "candidates_token_count": 1180,
    "total_token_count": 23805,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.498015,
  "retries": 1
}