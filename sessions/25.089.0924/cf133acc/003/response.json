{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransforms the input grid based on the following rule:\n1. Identify horizontal line segments of a single color 'C' that are interrupted by exactly one white (0) pixel gap.\n2. The total horizontal span of the colored segments plus the single gap must be at least 3 pixels.\n3. For each identified segment and gap:\n    a. Fill the single white gap pixel with the line color 'C'.\n    b. Draw a vertical ray upwards from the position directly above the filled gap, using the same color 'C'.\n    c. This upward ray continues until it reaches the top edge (row 0) of the grid.\n    d. The ray overwrites any existing pixel values (white or colored) in its path.\n4. Pixels not part of a filled gap or an upward ray path remain unchanged from the input grid.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid (np.ndarray): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.ndarray: A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n    height, width = input_grid.shape\n    \n    # Keep track of gaps that have already been processed as part of a line\n    processed_gaps = set()\n\n    # Iterate through each cell to check if it's a potential gap\n    for r in range(height):\n        # A gap must have a left and right neighbor within the grid bounds\n        for c in range(1, width - 1):\n\n            # Condition 1: Is the current cell a white pixel (potential gap)?\n            if input_grid[r, c] == 0:\n                \n                # Condition 2: Are the immediate left and right neighbors non-white and the same color?\n                left_pixel_color = input_grid[r, c - 1]\n                right_pixel_color = input_grid[r, c + 1]\n\n                if left_pixel_color != 0 and left_pixel_color == right_pixel_color:\n                    line_color = left_pixel_color\n                    gap_col = c\n\n                    # Avoid reprocessing if this gap was part of an already identified line\n                    if (r, gap_col) in processed_gaps:\n                        continue\n\n                    # --- Verify the full segment properties ---\n\n                    # Find the leftmost extent of the line segment\n                    start_c = c - 1\n                    while start_c > 0 and input_grid[r, start_c - 1] == line_color:\n                        start_c -= 1\n\n                    # Find the rightmost extent of the line segment\n                    end_c = c + 1\n                    while end_c < width - 1 and input_grid[r, end_c + 1] == line_color:\n                        end_c += 1\n                        \n                    # Calculate total span (colored parts + gap)\n                    span = end_c - start_c + 1\n\n                    # Condition 3: Is the total span at least 3?\n                    if span < 3:\n                        continue # Line segment too short\n\n                    # Condition 4: Is there exactly one gap (at the expected position) within this span?\n                    gap_count = 0\n                    found_gap_col = -1\n                    valid_segment = True\n                    for scan_c in range(start_c, end_c + 1):\n                        pixel = input_grid[r, scan_c]\n                        if pixel == 0:\n                            gap_count += 1\n                            found_gap_col = scan_c\n                        elif pixel != line_color:\n                            valid_segment = False # Found an unexpected color\n                            break\n                    \n                    # Check if conditions met: exactly one gap, it's at the column 'c' we started with, and no other colors interfered\n                    if not valid_segment or gap_count != 1 or found_gap_col != gap_col:\n                        continue # Invalid segment structure\n\n                    # --- All conditions met, perform the transformation ---\n\n                    # Mark this gap as processed\n                    processed_gaps.add((r, gap_col))\n\n                    # 1. Fill the gap in the output grid\n                    output_grid[r, gap_col] = line_color\n\n                    # 2. Draw the vertical ray upwards, overwriting existing pixels\n                    # Start from the row directly above the gap\n                    for ray_r in range(r - 1, -1, -1): # Iterate from r-1 down to 0\n                         output_grid[ray_r, gap_col] = line_color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 13773,
    "candidates_token_count": 1086,
    "total_token_count": 14859,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 17.82906,
  "retries": 1
}