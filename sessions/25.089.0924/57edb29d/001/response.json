{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import defaultdict, Counter\n\n\"\"\"\nTransforms the input grid based on identifying an inner pattern color within multiple host objects,\nselecting a specific host object based on the inner pattern color via a fixed mapping,\nand extracting/recoloring the pattern from the selected host object's bounding box.\n\n1. Find the background color (most frequent).\n2. Find the unique \"inner pattern color\" (C_inner) by identifying the non-background color adjacent\n   to the most *diverse* set of other non-background colors (using 8-way adjacency).\n3. Determine the \"selected host color\" (h_selected) based on C_inner using the map:\n   {5: 3, 7: 8, 6: 1}.\n4. Locate the specific object (O_selected) of color h_selected (defined by 4-way contiguous pixels)\n   that contains C_inner pixels within its bounding box.\n5. Extract the subgrid corresponding to O_selected's bounding box.\n6. Create the output grid with the dimensions of the bounding box, initially filled with h_selected.\n7. Populate the output grid by copying pixels matching C_inner from the input subgrid; all other\n   pixels remain h_selected.\n\"\"\"\n\ndef _get_neighbors(r, c, height, width, connectivity=8):\n    \"\"\"\n    Gets valid neighbor coordinates for a given cell (r, c).\n\n    Args:\n        r (int): Row index of the cell.\n        c (int): Column index of the cell.\n        height (int): Grid height.\n        width (int): Grid width.\n        connectivity (int): 4 or 8 for neighbor definition.\n\n    Returns:\n        list: A list of tuples representing valid neighbor coordinates (row, col).\n    \"\"\"\n    neighbors = []\n    if connectivity == 8:\n        moves = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]\n    elif connectivity == 4:\n        moves = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    else:\n        raise ValueError(\"Connectivity must be 4 or 8\")\n        \n    for dr, dc in moves:\n        nr, nc = r + dr, c + dc\n        if 0 <= nr < height and 0 <= nc < width:\n            neighbors.append((nr, nc))\n    return neighbors\n\ndef _find_objects(grid, color_to_find):\n    \"\"\"\n    Finds all contiguous objects (based on 4-way adjacency) of a specific color using BFS.\n    Calculates the bounding box for each object found.\n\n    Args:\n        grid (np.array): The input grid.\n        color_to_find (int): The color of the objects to find.\n\n    Returns:\n        list: A list of dictionaries, where each dictionary represents an object\n              and contains 'coords' (a set of (row, col) tuples) and\n              'bbox' (a tuple: min_r, min_c, max_r, max_c).\n    \"\"\"\n    height, width = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n\n    for r in range(height):\n        for c in range(width):\n            # Start BFS if we find a pixel of the target color that hasn't been visited\n            if grid[r, c] == color_to_find and not visited[r, c]:\n                obj_coords = set()\n                q = [(r, c)] # Queue for BFS\n                visited[r, c] = True\n                min_r, min_c = r, c\n                max_r, max_c = r, c\n                \n                head = 0 # Use index as queue pointer for efficiency\n                while head < len(q):\n                    row, col = q[head]\n                    head += 1\n                    \n                    obj_coords.add((row, col))\n                    # Update bounding box dynamically\n                    min_r = min(min_r, row)\n                    min_c = min(min_c, col)\n                    max_r = max(max_r, row)\n                    max_c = max(max_c, col)\n\n                    # Explore 4-way neighbors\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]: \n                        nr, nc = row + dr, col + dc\n                        # Check bounds, color match, and visited status\n                        if 0 <= nr < height and 0 <= nc < width and \\\n                           grid[nr, nc] == color_to_find and not visited[nr, nc]:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n                            \n                # Store the found object and its bounding box\n                if obj_coords:\n                    bounding_box = (min_r, min_c, max_r, max_c)\n                    objects.append({'coords': obj_coords, 'bbox': bounding_box})\n    return objects\n\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n    \"\"\"\n    input_grid = np.array(input_grid, dtype=int)\n    height, width = input_grid.shape\n\n    # Step 1: Find background color (most frequent color)\n    colors, counts = np.unique(input_grid, return_counts=True)\n    if len(colors) == 1: # Handle grids with only one color\n        # This case might need specific handling depending on task requirements,\n        # but for this task, it likely implies an error or an unexpected input.\n        # Returning an empty grid or the input might be options.\n        # Based on the problem structure, assume valid inputs have patterns.\n         print(\"Warning: Input grid has only one color.\")\n         # Returning a minimal grid based on the single color object might be an interpretation\n         single_color = colors[0]\n         host_map_inv = {v: k for k, v in {5: 3, 7: 8, 6: 1}.items()} # Find potential inner color\n         if single_color in host_map_inv:\n              # Assume this single color object IS the output\n               obj = _find_objects(input_grid, single_color)\n               if obj:\n                    min_r, min_c, max_r, max_c = obj[0]['bbox']\n                    return input_grid[min_r:max_r+1, min_c:max_c+1].tolist()\n         return [] # Return empty list if unsure how to handle\n\n\n    background_color = colors[np.argmax(counts)]\n\n    # Step 2: Find the inner pattern color (C_inner)\n    # It's the non-background color adjacent to the most *different* non-background colors.\n    adjacencies = defaultdict(set)\n\n    for r in range(height):\n        for c in range(width):\n            center_color = input_grid[r, c]\n            # Skip background pixels\n            if center_color == background_color:\n                continue\n                \n            # Check 8 neighbors\n            for nr, nc in _get_neighbors(r, c, height, width, connectivity=8):\n                neighbor_color = input_grid[nr, nc]\n                # Consider adjacency only if neighbor is non-background and different color\n                if neighbor_color != background_color and neighbor_color != center_color:\n                    adjacencies[center_color].add(neighbor_color)\n                    adjacencies[neighbor_color].add(center_color) # Record reverse adjacency too\n\n    inner_pattern_color = -1\n    max_diverse_adjacencies = -1\n\n    # Determine which color has the most diverse adjacencies\n    potential_inner_colors = sorted(list(adjacencies.keys())) # Sort for consistent tie-breaking (lowest color wins)\n    for color in potential_inner_colors:\n        num_adjacent_colors = len(adjacencies[color])\n        if num_adjacent_colors > max_diverse_adjacencies:\n             max_diverse_adjacencies = num_adjacent_colors\n             inner_pattern_color = color\n        # Tie-breaking: If counts are equal, the sorting ensures we keep the lowest color index.\n        \n    if inner_pattern_color == -1:\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 2,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5781,
    "candidates_token_count": 1956,
    "total_token_count": 7737,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 74.23883,
  "retries": 1
}