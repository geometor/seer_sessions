task_type: bounded_region_fill
color_palette:
  input: [0, 1, 3] # white, blue, green
  output: [0, 1, 3, 8] # white, blue, green, azure
  boundary_color: 3 # green
  fill_color: 8 # azure
  background_colors: [0, 1] # Colors potentially fillable
grid_properties:
  - connectivity: 4-neighbor adjacency (up, down, left, right)
  - border_connectedness: Pixels are connected to the border if a path exists using only non-boundary colors.
objects:
  - type: boundary_wall
    definition: Contiguous or non-contiguous pixels of the boundary_color (green, 3). These act as barriers.
    properties:
      - invariant: Their color does not change during the transformation.
  - type: exterior_region
    definition: Set of all non-boundary pixels connected to the grid's border via paths of non-boundary pixels.
    properties:
      - invariant: Pixels in this region retain their original color.
  - type: interior_region
    definition: Set of all pixels (including boundary and non-boundary colors) not part of the exterior_region. These are 'enclosed' by the boundary_wall.
  - type: fillable_pixels
    definition: Pixels within an interior_region whose original color is NOT the boundary_color.
    properties:
      - target: These are the only pixels whose color is modified.
actions:
  - identify_exterior: Perform a flood fill (e.g., BFS or DFS) starting from all non-boundary pixels on the grid's border. Mark all reachable non-boundary pixels.
  - identify_fillable: Iterate through all pixels in the grid. If a pixel was *not* marked during identify_exterior AND its original color is *not* the boundary_color, it is fillable.
  - fill_region: Change the color of all identified fillable_pixels to the fill_color (azure, 8).
relationships:
  - enclosure: The boundary_wall pixels separate the grid into exterior and interior regions.
  - reachability: Defines connection to the border, avoiding boundary_wall pixels.
transformation:
  - step 1: Identify all pixels reachable from the border through non-green paths (exterior_region).
  - step 2: Identify all pixels that were *not* reached in step 1.
  - step 3: For pixels identified in step 2, if their original color was *not* green (3), change their color to azure (8).
  - step 4: All other pixels (green walls and reachable non-green pixels) retain their original color.