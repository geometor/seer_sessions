- task: Reflect a pattern across a dividing line.
- objects:
    - grid: The input 2D array of pixels.
    - separator_line:
        - type: A continuous, single-pixel-thick line composed entirely of yellow pixels (4).
        - orientation: Either horizontal or vertical.
        - function: Divides the grid into two regions along its length.
        - identification: It is the unique yellow line where one adjacent region contains foreground pixels and the other does not (ignoring other separator lines).
    - foreground_pixel: Any pixel that is NOT white (0) and NOT yellow (4).
    - source_region: The region on one side of the separator_line containing foreground_pixels.
    - target_region: The region on the other side of the separator_line, which will be overwritten by the reflection. Initially, it contains no foreground_pixels.
- properties:
    - separator_line: Defined by its orientation (horizontal/vertical) and index (row/column).
    - source_region: Defined by the pixels on one side of the separator.
    - target_region: Defined by the pixels on the other side of the separator.
- relationships:
    - separator_line: Defines the axis of reflection.
    - source_region: Its content determines the reflected pattern.
    - target_region: Receives the reflected pattern.
- actions:
    - Identify all horizontal and vertical yellow lines.
    - For each yellow line, check the regions on either side.
    - Determine the unique yellow line that separates a region *with* foreground_pixels from a region *without* foreground_pixels (ignoring pixels belonging to other yellow lines when checking the "without" region). This is the `separator_line`.
    - Identify the `source_region` (containing foreground_pixels).
    - Create an output grid initialized as a copy of the input grid.
    - For each pixel `(r, c)` in the `source_region`:
        - Calculate the corresponding `(target_r, target_c)` coordinates by reflecting across the `separator_line`.
            - If horizontal line at `R`: `target_r = 2*R - r`, `target_c = c`.
            - If vertical line at `C`: `target_r = r`, `target_c = 2*C - c`.
        - Copy the pixel value from `input[r][c]` to `output[target_r][target_c]`, overwriting any previous value at the target location.