- task: Reflect a pattern across a yellow separator line.
- objects:
    - grid: The input 2D array of pixels.
    - separator_line: A continuous line (horizontal or vertical) of yellow pixels (color 4). It is uniquely identified by being adjacent to a region containing only white pixels (color 0).
    - pattern_region: The area on the side of the separator_line *not* entirely composed of white pixels. This region contains the source pattern.
    - target_region: The area on the side of the separator_line composed entirely of white pixels (color 0). This region will be overwritten by the reflection.
- properties:
    - separator_line:
        - color: yellow (4)
        - orientation: horizontal or vertical
        - location: row index (R) or column index (C)
    - pattern_region: Contains the source pattern including any white/yellow pixels within it.
    - target_region: Initially filled entirely with white pixels (0).
- relationships:
    - separator_line: Divides the grid into pattern_region and target_region.
    - pattern_region: Source for the reflection.
    - target_region: Destination for the reflection.
- actions:
    - Locate potential horizontal and vertical yellow lines.
    - For each potential line, check the regions on either side.
    - Identify the unique line where one adjacent region is *entirely* white (0) and the other is not.
    - Determine the orientation (horizontal/vertical), index (R/C), and the side containing the pattern ('above'/'below' or 'left'/'right').
    - Create an output grid as a copy of the input grid.
    - Iterate through the pixels `(r_src, c_src)` in the pattern_region.
    - For each source pixel, calculate the target pixel coordinates using reflection logic:
        - If horizontal separator at R, pattern above: `r_tgt = 2*R - r_src`, `c_tgt = c_src`.
        - If horizontal separator at R, pattern below: `r_tgt = 2*R - r_src`, `c_tgt = c_src`.
        - If vertical separator at C, pattern left: `r_tgt = r_src`, `c_tgt = 2*C - c_src`.
        - If vertical separator at C, pattern right: `r_tgt = r_src`, `c_tgt = 2*C - c_src`.
    - Copy the value from `grid[r_src, c_src]` to `output_grid[r_tgt, c_tgt]`, ensuring target coordinates are within grid bounds.
    - Return the modified output_grid.