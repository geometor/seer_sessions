{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef find_background_color(grid_half):\n  \"\"\"Finds the most frequent color in a grid section.\"\"\"\n  if grid_half.size == 0:\n      # Handle empty grid sections if they could occur\n      return 0 # Default to white or raise an error\n  colors, counts = np.unique(grid_half, return_counts=True)\n  return colors[np.argmax(counts)]\n\ndef count_foreground_pixels(grid_half, background_color):\n  \"\"\"Counts pixels that are not the background color.\"\"\"\n  if grid_half.size == 0:\n      return 0\n  return np.sum(grid_half != background_color)\n\ndef transform(input_grid):\n  \"\"\"\n  Transforms the input grid by splitting it into two halves, identifying the half\n  with more foreground pixels (source half) and the other half (target half).\n  The output grid has the dimensions of one half, the background color of the\n  target half, and the foreground pixels of the source half overlaid onto it.\n  \"\"\"\n  # Convert input to numpy array for easier manipulation\n  input_np = np.array(input_grid, dtype=int)\n  H, W = input_np.shape\n\n  # Determine split axis and define the two halves\n  if H > W:\n      # Split horizontally\n      mid_h = H // 2\n      # np.array_split handles potential odd dimensions gracefully\n      halves = np.array_split(input_np, 2, axis=0)\n      half_A = halves[0] # Top\n      half_B = halves[1] # Bottom\n      # Ensure consistent shape for output (take the shape of the first half)\n      # In case of odd height, the first half might be smaller.\n      # Let's adjust: target shape should be the shape of the *source* half later.\n      # For now, just get the halves.\n      output_shape = half_A.shape if H % 2 == 0 else halves[0].shape # default to first half shape\n                                                                      # this will be updated later based on source\n\n  else:\n      # Split vertically (includes H == W case)\n      mid_w = W // 2\n      halves = np.array_split(input_np, 2, axis=1)\n      half_A = halves[0] # Left\n      half_B = halves[1] # Right\n      # Get shape for output\n      output_shape = half_A.shape if W % 2 == 0 else halves[0].shape # default to first half shape\n                                                                      # this will be updated later based on source\n\n\n  # Find background color for each half\n  bg_A = find_background_color(half_A)\n  bg_B = find_background_color(half_B)\n\n  # Count foreground pixels in each half\n  count_A = count_foreground_pixels(half_A, bg_A)\n  count_B = count_foreground_pixels(half_B, bg_B)\n\n  # Determine source and target halves based on foreground pixel count\n  # If counts are equal, default to A as source (based on train_1 logic where left > right)\n  # Although test cases imply one count is strictly greater. Let's stick to >= for robustness.\n  if count_A >= count_B:\n      source_half = half_A\n      bg_source = bg_A\n      # target_half = half_B # Not explicitly needed\n      bg_target = bg_B\n  else:\n      source_half = half_B\n      bg_source = bg_B\n      # target_half = half_A # Not explicitly needed\n      bg_target = bg_A\n\n  # Determine the correct output shape based on the source half\n  output_shape = source_half.shape\n\n  # Create the output grid, initialized with the target background color\n  output_grid = np.full(output_shape, bg_target, dtype=int)\n\n  # Iterate through the source half and overlay its foreground pixels\n  for r in range(source_half.shape[0]):\n      for c in range(source_half.shape[1]):\n          pixel_value = source_half[r, c]\n          # If the pixel in the source half is not its background color...\n          if pixel_value != bg_source:\n              # ...place it onto the output grid at the same relative position\n              output_grid[r, c] = pixel_value\n\n  # Convert back to list of lists for standard ARC output format\n  return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5243,
    "candidates_token_count": 1057,
    "total_token_count": 6300,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 18.98889,
  "retries": 1
}