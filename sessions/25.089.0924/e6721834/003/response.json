{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\nimport operator\n\n# --- Helper Functions ---\n\ndef find_most_frequent_color(grid_section):\n  \"\"\"\n  Finds the most frequent color in a grid section (numpy array).\n  Handles ties by returning the smallest color index.\n  Returns 0 (white) for empty input.\n  \"\"\"\n  if grid_section.size == 0:\n      return 0\n  colors, counts = np.unique(grid_section, return_counts=True)\n  # In case of a tie in counts, np.argmax returns the index of the first max value.\n  # Since np.unique returns sorted colors, this effectively selects the smallest color index in a tie.\n  most_frequent_color = colors[np.argmax(counts)]\n  return most_frequent_color\n\ndef count_non_background_pixels(grid_section, background_color):\n  \"\"\"\n  Counts the number of pixels in the grid section that are not the background color.\n  \"\"\"\n  if grid_section.size == 0:\n      return 0\n  return np.sum(grid_section != background_color)\n\n# --- Main Transformation Function ---\n\ndef transform(input_grid):\n  \"\"\"\n  Transforms the input grid based on the following rules:\n  1. Split the input grid into two halves (vertically if Width >= Height, horizontally otherwise).\n  2. Identify the background color (most frequent) of each half.\n  3. Count the number of non-background (foreground) pixels in each half.\n  4. Determine the \"source\" half (the one with strictly more foreground pixels) and the \"target\" half.\n     If counts are equal, the first half (Top or Left) is the source.\n  5. Create an output grid with the dimensions of the source half.\n  6. Fill the output grid with the background color of the target half.\n  7. Overlay the foreground pixels from the source half onto the output grid,\n     maintaining their relative positions within the source half.\n  \"\"\"\n  input_np = np.array(input_grid, dtype=int)\n  H, W = input_np.shape\n\n  # --- 1. Split into Halves ---\n  # np.array_split handles odd dimensions; the first array might be smaller.\n  if H > W:\n      # Split horizontally into Top (A) and Bottom (B)\n      axis_split = 0\n      half_A, half_B = np.array_split(input_np, 2, axis=axis_split)\n  else:\n      # Split vertically (includes H == W) into Left (A) and Right (B)\n      axis_split = 1\n      half_A, half_B = np.array_split(input_np, 2, axis=axis_split)\n\n  # --- 2. Identify Background Colors ---\n  bg_A = find_most_frequent_color(half_A)\n  bg_B = find_most_frequent_color(half_B)\n\n  # --- 3. Count Foreground Pixels ---\n  count_A = count_non_background_pixels(half_A, bg_A)\n  count_B = count_non_background_pixels(half_B, bg_B)\n\n  # --- 4. Determine Source and Target Halves ---\n  # Source has strictly more foreground pixels. Tie goes to A (Top/Left).\n  if count_A >= count_B:\n      source_half = half_A\n      bg_source = bg_A\n      # target_half = half_B # Not explicitly needed for pixel values\n      bg_target = bg_B\n  else:\n      source_half = half_B\n      bg_source = bg_B\n      # target_half = half_A # Not explicitly needed for pixel values\n      bg_target = bg_A\n\n  # --- 5. Create Output Grid ---\n  output_shape = source_half.shape\n  output_grid = np.full(output_shape, bg_target, dtype=int)\n\n  # --- 6. & 7. Overlay Foreground Pixels ---\n  # Iterate through the source half using its local coordinates (r, c)\n  for r in range(source_half.shape[0]):\n      for c in range(source_half.shape[1]):\n          pixel_value = source_half[r, c]\n          # Check if the pixel in the source half is a foreground pixel\n          if pixel_value != bg_source:\n              # Place the foreground pixel onto the output grid at the same relative coordinate\n              output_grid[r, c] = pixel_value\n\n  # Convert final numpy array back to list of lists\n  return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 19359,
    "candidates_token_count": 1082,
    "total_token_count": 20441,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 22.788325,
  "retries": 1
}