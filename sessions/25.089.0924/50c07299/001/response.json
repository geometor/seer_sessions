{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransformation Rule:\n1. Identify the connected group of red (2) pixels in the input grid, which forms a diagonal line segment sloping down and to the left.\n2. Determine the length of this segment (`L_in`) by counting the red pixels.\n3. Find the coordinates `(r_in, c_in)` of the top-right pixel of the segment (minimum row index, maximum column index).\n4. Calculate a displacement value `k = L_in + 1`.\n5. Calculate the starting coordinates `(r_out, c_out)` for the output segment: `r_out = r_in - k`, `c_out = c_in + k`.\n6. Determine the length of the output segment: `L_out = L_in + 1`.\n7. Create an output grid of the same dimensions as the input, filled with the background color, orange (7).\n8. Draw the new red segment of length `L_out` onto the output grid, starting at `(r_out, c_out)` and extending diagonally down and to the left. The pixels colored are `(r_out + i, c_out - i)` for `i` from 0 to `L_out - 1`.\n\"\"\"\n\ndef find_red_segment_properties(grid):\n    \"\"\"\n    Finds the red (2) pixels, calculates the segment length, \n    and identifies the top-right pixel coordinates.\n\n    Args:\n        grid (np.ndarray): The input grid.\n\n    Returns:\n        tuple: (length, top_right_row, top_right_col) or (0, -1, -1) if no red pixels.\n    \"\"\"\n    red_pixels = np.argwhere(grid == 2)\n    if len(red_pixels) == 0:\n        return 0, -1, -1 # No red segment found\n\n    length = len(red_pixels)\n    \n    # Find the top-right pixel (min row, max col)\n    min_row = np.min(red_pixels[:, 0])\n    # Filter pixels in the minimum row\n    top_pixels = red_pixels[red_pixels[:, 0] == min_row]\n    # Find the maximum column among those top pixels\n    max_col = np.max(top_pixels[:, 1])\n    top_right_row = min_row\n    top_right_col = max_col\n    \n    return length, top_right_row, top_right_col\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid (np.ndarray): The input 2D array representing the grid.\n\n    Returns:\n        np.ndarray: The transformed 2D array representing the output grid.\n    \"\"\"\n    # Find properties of the red segment in the input grid\n    L_in, r_in, c_in = find_red_segment_properties(input_grid)\n\n    # Handle case where no red segment is found (though not expected based on examples)\n    if L_in == 0:\n        return np.copy(input_grid) # Or return an empty grid/error, depending on desired behavior\n\n    # Calculate displacement and new segment properties\n    k = L_in + 1\n    r_out = r_in - k\n    c_out = c_in + k\n    L_out = L_in + 1\n\n    # Initialize the output grid with the background color (orange, 7)\n    output_grid = np.full_like(input_grid, 7)\n    \n    # Get grid dimensions for boundary checks (optional but good practice)\n    height, width = output_grid.shape\n\n    # Draw the new red segment\n    for i in range(L_out):\n        row_idx = r_out + i\n        col_idx = c_out - i\n        # Check if the pixel coordinates are within the grid boundaries\n        if 0 <= row_idx < height and 0 <= col_idx < width:\n            output_grid[row_idx, col_idx] = 2 # Set pixel to red\n        # else: # Handle out-of-bounds pixels if necessary, e.g., log a warning or stop\n        #     print(f\"Warning: Calculated pixel ({row_idx}, {col_idx}) is out of bounds.\")\n            \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5306,
    "candidates_token_count": 1012,
    "total_token_count": 6318,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.410176,
  "retries": 1
}