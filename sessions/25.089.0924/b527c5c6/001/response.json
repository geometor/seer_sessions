{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransformation rule:\n1. Find all red (2) pixels in the input grid.\n2. For each red pixel at position (r, c):\n   a. Extend lines horizontally (left/right) and vertically (up/down) from the red pixel's neighbors.\n   b. The extension only modifies pixels that were originally white (0) in the input grid.\n   c. The color used for extension in a specific direction is determined by the color of the neighbor of the red pixel in that direction in the *original* input grid:\n      - If the neighbor is green (3), the extension color is green (3).\n      - If the neighbor is white (0) or the red pixel is at the edge (neighbor is off-grid), the extension color is red (2).\n   d. The extension in each direction continues until it hits a non-white pixel (from the original input grid) or the grid boundary.\n3. Modifications from all red pixels are combined onto a copy of the input grid.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n    \n    Args:\n        input_grid (list[list[int]]): A 2D list representing the input grid.\n\n    Returns:\n        list[list[int]]: A 2D list representing the transformed output grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    # Create a copy to modify for the output\n    output_np = np.copy(input_np)\n    height, width = input_np.shape\n\n    # Define color constants\n    WHITE = 0\n    RED = 2\n    GREEN = 3\n\n    # Find all red pixels\n    red_pixels = np.argwhere(input_np == RED)\n\n    # Helper function to safely get neighbor color\n    def get_neighbor_color(grid, r, c):\n        if 0 <= r < height and 0 <= c < width:\n            return grid[r, c]\n        else:\n            return WHITE # Treat off-grid as white\n\n    # Process each red pixel\n    for r, c in red_pixels:\n\n        # --- Horizontal Extensions ---\n\n        # Left Extension\n        left_neighbor_color = get_neighbor_color(input_np, r, c - 1)\n        fill_color_left = GREEN if left_neighbor_color == GREEN else RED\n        for cc in range(c - 1, -1, -1): # Iterate leftwards from neighbor\n            if input_np[r, cc] == WHITE: # Check original grid pixel\n                output_np[r, cc] = fill_color_left # Update output grid\n            else:\n                break # Stop extension if non-white pixel encountered\n\n        # Right Extension\n        right_neighbor_color = get_neighbor_color(input_np, r, c + 1)\n        fill_color_right = GREEN if right_neighbor_color == GREEN else RED\n        for cc in range(c + 1, width): # Iterate rightwards from neighbor\n            if input_np[r, cc] == WHITE: # Check original grid pixel\n                output_np[r, cc] = fill_color_right # Update output grid\n            else:\n                break # Stop extension\n\n        # --- Vertical Extensions ---\n\n        # Up Extension\n        up_neighbor_color = get_neighbor_color(input_np, r - 1, c)\n        fill_color_up = GREEN if up_neighbor_color == GREEN else RED\n        for rr in range(r - 1, -1, -1): # Iterate upwards from neighbor\n            if input_np[rr, c] == WHITE: # Check original grid pixel\n                output_np[rr, c] = fill_color_up # Update output grid\n            else:\n                break # Stop extension\n\n        # Down Extension\n        down_neighbor_color = get_neighbor_color(input_np, r + 1, c)\n        fill_color_down = GREEN if down_neighbor_color == GREEN else RED\n        for rr in range(r + 1, height): # Iterate downwards from neighbor\n            if input_np[rr, c] == WHITE: # Check original grid pixel\n                output_np[rr, c] = fill_color_down # Update output grid\n            else:\n                break # Stop extension\n\n    # Convert the final numpy array back to a list of lists\n    output_grid = output_np.tolist()\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7823,
    "candidates_token_count": 1036,
    "total_token_count": 8859,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.488609,
  "retries": 1
}