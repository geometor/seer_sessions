task_description: Identify enclosed white regions within an azure boundary and fill them with azure, while turning the boundary and exterior regions white.
grid_properties:
  - dimensions: Variable size (e.g., 22x22, 12x12, 16x16). Output matches input dimensions.
  - colors: Input uses white (0) and azure (8). Output uses white (0) and azure (8).
objects:
  - type: boundary_shape
    color: azure (8)
    input_properties: Forms a closed or partially closed shape within the grid, does not touch the border in examples.
    output_properties: Pixels corresponding to the input boundary shape become white (0).
  - type: background_region
    color: white (0)
    input_properties: Occupies the rest of the grid.
    subtypes:
      - exterior: White pixels reachable from any grid border pixel via 8-directional movement without crossing an azure (8) pixel.
      - interior: White pixels *not* reachable from the grid border without crossing an azure (8) pixel (i.e., enclosed by the azure shape).
    output_properties:
      - exterior pixels remain white (0).
      - interior pixels become azure (8).
relationships:
  - Connectivity: White pixels are classified as interior or exterior based on 8-directional path connectivity to the grid border, blocked by azure pixels.
actions:
  - classify_white_pixels: Perform a flood fill (e.g., BFS) starting from *all* white pixels located on the grid borders (row 0, last row, col 0, last col). Mark all reachable white pixels as 'exterior'.
  - generate_output_grid:
    1. Create an output grid of the same dimensions as the input.
    2. Iterate through each input pixel (r, c):
       - If input[r, c] is azure (8), set output[r, c] to white (0).
       - If input[r, c] is white (0):
         - If pixel (r, c) was marked 'exterior' during flood fill, set output[r, c] to white (0).
         - If pixel (r, c) was *not* marked 'exterior' (meaning it's 'interior'), set output[r, c] to azure (8).
output_description: The output grid shows previously enclosed white areas now filled with azure, while the original azure boundary and the exterior white areas become white.
failed_attempt_analysis: The previous code produced all-white outputs, suggesting the flood fill incorrectly marked all white pixels as 'exterior', possibly due to an implementation bug despite the logic appearing sound in simulation.