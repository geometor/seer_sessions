{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Dict, Tuple\n\ndef find_vertical_segments(grid: np.ndarray, color: int) -> List[Dict]:\n    \"\"\"\n    Finds all contiguous vertical segments of a given color in the grid.\n\n    Args:\n        grid: The input numpy array representing the grid.\n        color: The integer value of the color to find segments for.\n\n    Returns:\n        A list of dictionaries, where each dictionary represents a segment\n        and contains 'length', 'row' (start row), and 'col'.\n        Returns an empty list if no segments are found.\n    \"\"\"\n    segments = []\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool) # Keep track of visited cells within segments\n\n    for c in range(cols):\n        for r in range(rows):\n            # Check if the cell has the target color and hasn't been visited as part of a segment yet\n            if grid[r, c] == color and not visited[r, c]:\n                # Found the start of a potential segment\n                segment_len = 0\n                current_r = r\n                # Extend downwards as long as the color matches and within bounds\n                while current_r < rows and grid[current_r, c] == color:\n                    visited[current_r, c] = True\n                    segment_len += 1\n                    current_r += 1\n                \n                # Store the found segment details\n                if segment_len > 0:\n                    segments.append({'length': segment_len, 'row': r, 'col': c})\n    return segments\n\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Transforms the input grid based on the following rules:\n    1. Find the vertical segment of maroon pixels (9) in the input grid.\n    2. Determine its length L.\n    3. Replace this maroon segment with the background color (orange, 7).\n    4. Find all vertical segments of azure pixels (8) in the input grid.\n    5. Identify the longest azure segment(s).\n    6. If there are multiple longest segments, choose the leftmost one (smallest column index).\n    7. Replace the top L pixels of the chosen azure segment with maroon pixels (9).\n\n    Args:\n        input_grid: A numpy array representing the input grid.\n\n    Returns:\n        A numpy array representing the transformed output grid.\n    \"\"\"\n    \n    output_grid = np.copy(input_grid)\n    background_color = 7\n    maroon = 9\n    azure = 8\n\n    # 1. Find the vertical maroon segment\n    maroon_segments = find_vertical_segments(input_grid, maroon)\n    \n    # Assume there is exactly one maroon segment based on examples\n    if not maroon_segments:\n        # Handle edge case: No maroon segment found (return input unchanged)\n        return output_grid \n        \n    maroon_segment = maroon_segments[0] # Assuming only one exists\n    maroon_len = maroon_segment['length']\n    maroon_start_row = maroon_segment['row']\n    maroon_col = maroon_segment['col']\n\n    # 3. Replace the maroon segment with the background color\n    output_grid[maroon_start_row : maroon_start_row + maroon_len, maroon_col] = background_color\n\n    # 4. Find all vertical azure segments\n    azure_segments = find_vertical_segments(input_grid, azure)\n\n    if not azure_segments:\n        # Handle edge case: No azure segments found (return grid after removing maroon)\n        return output_grid\n\n    # 5. Identify the longest azure segment(s)\n    max_azure_len = 0\n    for seg in azure_segments:\n        if seg['length'] > max_azure_len:\n            max_azure_len = seg['length']\n            \n    longest_azure_segments = [seg for seg in azure_segments if seg['length'] == max_azure_len]\n\n    # 6. If multiple longest, choose the leftmost one\n    target_azure_segment = min(longest_azure_segments, key=lambda seg: seg['col'])\n    \n    target_start_row = target_azure_segment['row']\n    target_col = target_azure_segment['col']\n    # Target length isn't directly used, but we use maroon_len\n\n    # 7. Replace the top L pixels of the chosen azure segment with maroon\n    # Ensure we don't try to write past the bottom of the grid, though slicing handles this.\n    # Also ensure we don't write more pixels than the target segment has, \n    # although the problem implies L <= target_length. Slicing handles this too.\n    num_pixels_to_change = min(maroon_len, target_azure_segment['length']) # Use min just in case L > target_len\n    \n    # Change the color in the output grid\n    output_grid[target_start_row : target_start_row + num_pixels_to_change, target_col] = maroon\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4317,
    "candidates_token_count": 1180,
    "total_token_count": 5497,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 27.729543,
  "retries": 1
}