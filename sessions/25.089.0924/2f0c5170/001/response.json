{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentify all rectangular regions ('patterns') enclosed entirely by a border of white (0) pixels within the input grid, which typically has an azure (8) background.\nFor each identified pattern, count the number of unique non-white colors present within it (excluding the white border).\nSelect the pattern that has the maximum number of unique non-white colors.\nThe output grid is the selected pattern itself, maintaining its original colors and dimensions.\n\"\"\"\n\ndef find_connected_components(grid, target_colors):\n    \"\"\"Find connected components of specified colors using BFS.\"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    components = []\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] in target_colors and not visited[r, c]:\n                component_pixels = []\n                q = deque([(r, c)])\n                visited[r, c] = True\n                min_r, min_c = r, c\n                max_r, max_c = r, c\n\n                while q:\n                    row, col = q.popleft()\n                    component_pixels.append((row, col))\n                    min_r = min(min_r, row)\n                    min_c = min(min_c, col)\n                    max_r = max(max_r, row)\n                    max_c = max(max_c, col)\n\n                    # Explore neighbors (4-connectivity)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] in target_colors and not visited[nr, nc]:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n\n                # Extract the component grid based on bounding box\n                component_grid = grid[min_r:max_r+1, min_c:max_c+1]\n                # Store component grid and its original bounding box\n                components.append((component_grid, (min_r, min_c, max_r, max_c)))\n\n    return components\n\ndef check_if_framed_by_white(grid, r0, c0, r1, c1):\n    \"\"\"Check if the area defined by the bounding box (r0, c0, r1, c1) is surrounded by white (0).\"\"\"\n    rows, cols = grid.shape\n\n    # Check top border (r = r0 - 1)\n    if r0 > 0:\n        for c in range(max(0, c0 - 1), min(cols, c1 + 2)):\n            if grid[r0 - 1, c] != 0:\n                return False\n    # Check bottom border (r = r1 + 1)\n    if r1 < rows - 1:\n        for c in range(max(0, c0 - 1), min(cols, c1 + 2)):\n             if grid[r1 + 1, c] != 0:\n                return False\n    # Check left border (c = c0 - 1)\n    if c0 > 0:\n        for r in range(max(0, r0), min(rows, r1 + 1)): # Check from r0 to r1 inclusive\n             if grid[r, c0 - 1] != 0:\n                return False\n    # Check right border (c = c1 + 1)\n    if c1 < cols - 1:\n         for r in range(max(0, r0), min(rows, r1 + 1)): # Check from r0 to r1 inclusive\n             if grid[r, c1 + 1] != 0:\n                return False\n\n    # Check corners explicitly (if they exist)\n    if r0 > 0 and c0 > 0 and grid[r0 - 1, c0 - 1] != 0: return False\n    if r0 > 0 and c1 < cols - 1 and grid[r0 - 1, c1 + 1] != 0: return False\n    if r1 < rows - 1 and c0 > 0 and grid[r1 + 1, c0 - 1] != 0: return False\n    if r1 < rows - 1 and c1 < cols - 1 and grid[r1 + 1, c1 + 1] != 0: return False\n\n    return True\n\n\ndef count_unique_non_white(pattern_grid):\n    \"\"\"Counts unique colors in a grid, excluding white (0).\"\"\"\n    if pattern_grid is None or pattern_grid.size == 0:\n        return 0\n    colors = set(pattern_grid.flatten())\n    colors.discard(0) # Remove white\n    return len(colors)\n\ndef transform(input_grid):\n    \"\"\"\n    Finds patterns enclosed in white frames, selects the one with the most unique non-white colors,\n    and returns that pattern as the output grid.\n    \"\"\"\n    np_grid = np.array(input_grid, dtype=int)\n    rows, cols = np_grid.shape\n\n    # Define colors that can be part of a pattern (anything except the azure background)\n    pattern_colors = set(range(10))\n    pattern_colors.discard(8) # Exclude azure background color\n\n    # Find all connected components made of potential pattern colors\n    potential_components = find_connected_components(np_grid, pattern_colors)\n\n    valid_patterns = []\n    # Check each component to see if it's framed by white\n    for component_grid, (r0, c0, r1, c1) in potential_components:\n        # The component itself might contain white pixels, which is allowed.\n        # The bounding box refers to the extent of the non-azure pixels found.\n        if check_if_framed_by_white(np_grid, r0, c0, r1, c1):\n            # If framed, extract the exact region within the frame\n            # The frame is at r0-1, c0-1 to r1+1, c1+1\n            # The content is from r0, c0 to r1, c1\n            pattern_content = np_grid[r0:r1+1, c0:c1+1]\n            unique_colors = count_unique_non_white(pattern_content)\n            valid_patterns.append({'grid': pattern_content, 'colors': unique_colors})\n\n    # Handle cases where no valid framed patterns are found\n    if not valid_patterns:\n        # Return empty or based on specific requirement (e.g., smallest possible white grid)\n        # Based on examples, seems like there's always a valid pattern.\n        # If not, returning a 1x1 white grid might be a safe default, but let's assume one is found.\n         return [[0]] # Default fallback if no pattern found\n\n    # Select the pattern with the maximum number of unique non-white colors\n    best_pattern_info = max(valid_patterns, key=lambda item: item['colors'])\n    output_grid = best_pattern_info['grid']\n\n    # Return the selected pattern grid as a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4944,
    "candidates_token_count": 1713,
    "total_token_count": 6657,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 121.108774,
  "retries": 2
}