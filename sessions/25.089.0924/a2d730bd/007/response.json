{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nTransforms the input grid by iteratively filling background pixels within the \nbounding box of each non-background color. A background pixel is filled if \nit resides within the specific color's bounding box (calculated from the initial \npixel positions) and is adjacent (including diagonally, 8-way) to at least one pixel \nof that color (either original or newly filled in a previous iteration for that same color). \nThis filling process repeats for each color until no more background pixels can be filled \nwithin their respective bounding boxes for that color.\nThe background color is the most frequent color in the input grid.\n\"\"\"\n\ndef find_background_color(grid):\n    \"\"\"Finds the most frequent color in the grid.\"\"\"\n    # Use np.unique which is efficient for this\n    unique, counts = np.unique(grid, return_counts=True)\n    # Return the color (unique value) corresponding to the max count\n    return unique[np.argmax(counts)]\n\ndef find_pixels_of_color(grid, color):\n    \"\"\"Finds the coordinates of all pixels with the specified color.\"\"\"\n    # np.where returns tuples of row indices and column indices\n    rows, cols = np.where(grid == color)\n    # zip them into (row, col) pairs\n    return list(zip(rows, cols))\n\ndef calculate_bounding_box(coords):\n    \"\"\"Calculates the min/max row/col for a list of coordinates.\"\"\"\n    # Handle the case where a color might not be present or has no pixels\n    if not coords:\n        return None\n    # Find min/max row and column from the list of coordinates\n    min_row = min(r for r, c in coords)\n    min_col = min(c for r, c in coords)\n    max_row = max(r for r, c in coords)\n    max_col = max(c for r, c in coords)\n    return min_row, min_col, max_row, max_col\n\ndef get_neighbor_coords(grid_shape, r, c):\n    \"\"\"Gets the coordinates of the 8 neighbors of a cell within grid bounds.\"\"\"\n    rows, cols = grid_shape\n    neighbors = []\n    # Iterate through the 3x3 neighbourhood centered at (r, c)\n    for dr in [-1, 0, 1]:\n        for dc in [-1, 0, 1]:\n            # Skip the center cell itself\n            if dr == 0 and dc == 0:\n                continue\n            nr, nc = r + dr, c + dc\n            # Check if the neighbor coordinates are within the grid boundaries\n            if 0 <= nr < rows and 0 <= nc < cols:\n                neighbors.append((nr, nc))\n    return neighbors\n\ndef transform(input_grid):\n    # Convert input list of lists to numpy array for efficient processing\n    input_grid_np = np.array(input_grid, dtype=int)\n    rows, cols = input_grid_np.shape\n    \n    # Initialize output_grid as a copy of the input grid. Modifications will be made to this copy.\n    output_grid = np.copy(input_grid_np)\n\n    # Determine the background color (most frequent) from the input grid\n    background_color = find_background_color(input_grid_np)\n\n    # Identify all unique non-background colors present in the input grid\n    unique_colors = np.unique(input_grid_np)\n    non_background_colors = [c for c in unique_colors if c != background_color]\n\n    # Process each non-background color separately\n    for color in non_background_colors:\n        # Find all coordinates of the current color C in the *original input* grid\n        # This defines the area where filling can occur.\n        pixel_coords = find_pixels_of_color(input_grid_np, color)\n        \n        # If this color wasn't present in the input, skip to the next color\n        if not pixel_coords:\n            continue\n\n        # Calculate the bounding box for this color C based on its initial pixels in the input grid\n        bounding_box = calculate_bounding_box(pixel_coords)\n        if bounding_box is None: # Should not happen if pixel_coords is not empty, but good practice\n            continue\n        min_row, min_col, max_row, max_col = bounding_box\n\n        # Start the iterative filling process for the current color C\n        while True:\n            pixels_changed_this_pass = False\n            # Create a list to store coordinates of pixels to change in this pass\n            # This avoids modifying the grid while iterating over it, which can cause issues\n            coords_to_change = [] \n            \n            # Iterate through each cell (r, c) within the calculated bounding box\n            for r in range(min_row, max_row + 1):\n                for c in range(min_col, max_col + 1):\n                    # Check condition 1: Is the pixel (r, c) in the *current output grid* the background color?\n                    if output_grid[r, c] == background_color:\n                        # Check condition 2: Does pixel (r, c) have at least one neighbor with color C in the *current output grid*?\n                        neighbor_coords = get_neighbor_coords(output_grid.shape, r, c)\n                        has_color_neighbor = False\n                        for nr, nc in neighbor_coords:\n                            if output_grid[nr, nc] == color:\n                                has_color_neighbor = True\n                                break # Found a neighbor, no need to check others\n                        \n                        # If both conditions are met, mark this pixel for change in this pass\n                        if has_color_neighbor:\n                            coords_to_change.append((r, c))\n            \n            # After checking all pixels in the bounding box, apply the changes if any were found\n            if coords_to_change:\n                pixels_changed_this_pass = True\n                for r, c in coords_to_change:\n                    output_grid[r, c] = color\n            \n            # If no pixels were changed in this entire pass through the bounding box, \n            # the fill process for this color is complete. Exit the while loop.\n            if not pixels_changed_this_pass:\n                break \n\n    # Convert the final numpy array back to a list of lists for the expected output format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 30002,
    "candidates_token_count": 1474,
    "total_token_count": 31476,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 20.178415,
  "retries": 1
}