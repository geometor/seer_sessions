{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nFill background pixels within the bounding box of each non-background color group \nif they are adjacent (including diagonally) to a pixel of that color in the input grid.\n\"\"\"\n\ndef find_background_color(grid):\n    \"\"\"Finds the most frequent color in the grid.\"\"\"\n    unique, counts = np.unique(grid, return_counts=True)\n    return unique[np.argmax(counts)]\n\ndef find_pixels_of_color(grid, color):\n    \"\"\"Finds the coordinates of all pixels with the specified color.\"\"\"\n    rows, cols = np.where(grid == color)\n    return list(zip(rows, cols))\n\ndef calculate_bounding_box(coords):\n    \"\"\"Calculates the min/max row/col for a list of coordinates.\"\"\"\n    if not coords:\n        return None\n    min_row = min(r for r, c in coords)\n    min_col = min(c for r, c in coords)\n    max_row = max(r for r, c in coords)\n    max_col = max(c for r, c in coords)\n    return min_row, min_col, max_row, max_col\n\ndef get_neighbors(grid, r, c):\n    \"\"\"Gets the coordinates of the 8 neighbors of a cell.\"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    for dr in [-1, 0, 1]:\n        for dc in [-1, 0, 1]:\n            if dr == 0 and dc == 0:\n                continue\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < rows and 0 <= nc < cols:\n                neighbors.append((nr, nc))\n    return neighbors\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by filling background pixels within the bounding box \n    of each non-background color if they are adjacent to a pixel of that color.\n\n    1. Initialize the output grid as a copy of the input grid.\n    2. Determine the background color (most frequent).\n    3. Identify all unique non-background colors.\n    4. For each non-background color C:\n        a. Find all pixels with color C.\n        b. Calculate the bounding box for color C.\n        c. Iterate through cells (r, c) within the bounding box.\n        d. If input_grid[r, c] is the background color:\n            i. Check the 8 neighbors of (r, c) in the input grid.\n            ii. If any neighbor has color C, set output_grid[r, c] to C.\n    5. Return the modified output grid.\n    \"\"\"\n    # Convert input list of lists to numpy array for easier processing\n    input_grid_np = np.array(input_grid, dtype=int)\n    rows, cols = input_grid_np.shape\n    \n    # Initialize output_grid as a copy of the input grid\n    output_grid = np.copy(input_grid_np)\n\n    # Determine the background color\n    background_color = find_background_color(input_grid_np)\n\n    # Identify all unique non-background colors\n    unique_colors = np.unique(input_grid_np)\n    non_background_colors = [c for c in unique_colors if c != background_color]\n\n    # Process each non-background color\n    for color in non_background_colors:\n        # Find pixels of the current color\n        pixel_coords = find_pixels_of_color(input_grid_np, color)\n        \n        # Skip if no pixels of this color exist\n        if not pixel_coords:\n            continue\n\n        # Calculate the bounding box for this color\n        bounding_box = calculate_bounding_box(pixel_coords)\n        if bounding_box is None:\n            continue\n        min_row, min_col, max_row, max_col = bounding_box\n\n        # Iterate within the bounding box\n        for r in range(min_row, max_row + 1):\n            for c in range(min_col, max_col + 1):\n                # Check if the current pixel in the *input* grid is the background color\n                if input_grid_np[r, c] == background_color:\n                    # Get the neighbors of the current pixel\n                    neighbors = get_neighbors(input_grid_np, r, c)\n                    \n                    # Check if any neighbor in the *input* grid has the current color\n                    has_color_neighbor = False\n                    for nr, nc in neighbors:\n                        if input_grid_np[nr, nc] == color:\n                            has_color_neighbor = True\n                            break\n                            \n                    # If a neighbor has the color, update the output grid\n                    if has_color_neighbor:\n                        output_grid[r, c] = color\n\n    # Convert the final numpy array back to a list of lists\n    return output_grid.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5842,
    "candidates_token_count": 1140,
    "total_token_count": 6982,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.738478,
  "retries": 1
}