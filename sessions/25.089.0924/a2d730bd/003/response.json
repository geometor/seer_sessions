{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nTransforms the input grid by iteratively filling background pixels within the \nbounding box of each non-background color. A background pixel is filled if \nit resides within the specific color's bounding box and is adjacent (including \ndiagonally) to at least one pixel of that color (either original or newly filled). \nThis process repeats for each color until no more background pixels can be filled \nwithin their respective bounding boxes.\n\"\"\"\n\ndef find_background_color(grid):\n    \"\"\"Finds the most frequent color in the grid.\"\"\"\n    # Use np.unique which is efficient for this\n    unique, counts = np.unique(grid, return_counts=True)\n    # Return the color (unique value) corresponding to the max count\n    return unique[np.argmax(counts)]\n\ndef find_pixels_of_color(grid, color):\n    \"\"\"Finds the coordinates of all pixels with the specified color.\"\"\"\n    # np.where returns tuples of row indices and column indices\n    rows, cols = np.where(grid == color)\n    # zip them into (row, col) pairs\n    return list(zip(rows, cols))\n\ndef calculate_bounding_box(coords):\n    \"\"\"Calculates the min/max row/col for a list of coordinates.\"\"\"\n    # Handle the case where a color might not be present\n    if not coords:\n        return None\n    # Find min/max row and column from the list of coordinates\n    min_row = min(r for r, c in coords)\n    min_col = min(c for r, c in coords)\n    max_row = max(r for r, c in coords)\n    max_col = max(c for r, c in coords)\n    return min_row, min_col, max_row, max_col\n\ndef get_neighbors(grid_shape, r, c):\n    \"\"\"Gets the coordinates of the 8 neighbors of a cell within grid bounds.\"\"\"\n    rows, cols = grid_shape\n    neighbors = []\n    # Iterate through the 3x3 neighbourhood centered at (r, c)\n    for dr in [-1, 0, 1]:\n        for dc in [-1, 0, 1]:\n            # Skip the center cell itself\n            if dr == 0 and dc == 0:\n                continue\n            nr, nc = r + dr, c + dc\n            # Check if the neighbor coordinates are within the grid boundaries\n            if 0 <= nr < rows and 0 <= nc < cols:\n                neighbors.append((nr, nc))\n    return neighbors\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by iteratively filling background pixels.\n\n    1. Initialize output_grid as a copy of input_grid.\n    2. Determine the background color.\n    3. Find all non-background colors.\n    4. For each non-background color C:\n        a. Find initial pixels of color C.\n        b. Calculate the bounding box for C.\n        c. Enter a loop:\n            i. Find background pixels within the bounding box that are adjacent to a pixel of color C (in the current output_grid state).\n            ii. If no such pixels are found, exit the loop for color C.\n            iii. Change these found pixels to color C in output_grid.\n            iv. Repeat the loop.\n    5. Return the final output_grid.\n    \"\"\"\n    # Convert input list of lists to numpy array for efficient processing\n    input_grid_np = np.array(input_grid, dtype=int)\n    rows, cols = input_grid_np.shape\n    \n    # Initialize output_grid as a copy of the input grid\n    output_grid = np.copy(input_grid_np)\n\n    # Determine the background color (most frequent)\n    background_color = find_background_color(input_grid_np)\n\n    # Identify all unique non-background colors present in the input\n    unique_colors = np.unique(input_grid_np)\n    non_background_colors = [c for c in unique_colors if c != background_color]\n\n    # Process each non-background color separately\n    for color in non_background_colors:\n        # Find all initial coordinates of the current color\n        pixel_coords = find_pixels_of_color(input_grid_np, color)\n        \n        # If this color wasn't present in the input, skip\n        if not pixel_coords:\n            continue\n\n        # Calculate the bounding box for this color based on initial pixels\n        bounding_box = calculate_bounding_box(pixel_coords)\n        if bounding_box is None: # Should not happen if pixel_coords is not empty, but good practice\n            continue\n        min_row, min_col, max_row, max_col = bounding_box\n\n        # Iteratively fill background pixels within the bounding box\n        while True:\n            pixels_changed_in_pass = False\n            # Create a list to store coordinates of pixels to change in this pass\n            # This avoids modifying the grid while iterating over it, which can cause issues\n            coords_to_change = [] \n            \n            # Iterate through each cell within the calculated bounding box\n            for r in range(min_row, max_row + 1):\n                for c in range(min_col, max_col + 1):\n                    # Check if the pixel is currently background color\n                    if output_grid[r, c] == background_color:\n                        # Get its 8 neighbors' coordinates\n                        neighbors = get_neighbors(output_grid.shape, r, c)\n                        # Check if any neighbor currently has the target color\n                        has_color_neighbor = False\n                        for nr, nc in neighbors:\n                            if output_grid[nr, nc] == color:\n                                has_color_neighbor = True\n                                break # Found a neighbor, no need to check others\n                        \n                        # If a neighbor has the color, mark this pixel for change\n                        if has_color_neighbor:\n                            coords_to_change.append((r, c))\n            \n            # If no pixels were marked for change in this pass, the fill is complete for this color\n            if not coords_to_change:\n                break # Exit the while loop for the current color\n            \n            # Apply the changes for this pass\n            for r, c in coords_to_change:\n                output_grid[r, c] = color\n            # Since changes were made, set the flag to continue the while loop\n            pixels_changed_in_pass = True # This flag isn't strictly needed due to the `if not coords_to_change: break` check, but confirms logic flow.\n\n\n    # Convert the final numpy array back to a list of lists for the expected output format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 14050,
    "candidates_token_count": 1543,
    "total_token_count": 15593,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 24.219269,
  "retries": 1
}