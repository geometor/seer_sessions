{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nTransforms the input grid by filling specific background pixels. \nFor each non-background color C present in the input:\n1. Determine the bounding box enclosing all pixels of color C.\n2. Iterate through each pixel (r, c) within this bounding box.\n3. If the pixel (r, c) in the *input* grid has the background color AND \n   at least one of its 8 neighbors in the *input* grid has color C, \n   then change the color of pixel (r, c) in the output grid to C.\nThe background color is the most frequent color in the input grid.\nAll other pixels retain their original color from the input.\n\"\"\"\n\ndef find_background_color(grid):\n    \"\"\"Finds the most frequent color in the grid.\"\"\"\n    # Use np.unique which is efficient for this\n    unique, counts = np.unique(grid, return_counts=True)\n    # Return the color (unique value) corresponding to the max count\n    return unique[np.argmax(counts)]\n\ndef find_pixels_of_color(grid, color):\n    \"\"\"Finds the coordinates of all pixels with the specified color.\"\"\"\n    # np.where returns tuples of row indices and column indices\n    rows, cols = np.where(grid == color)\n    # zip them into (row, col) pairs\n    return list(zip(rows, cols))\n\ndef calculate_bounding_box(coords):\n    \"\"\"Calculates the min/max row/col for a list of coordinates.\"\"\"\n    # Handle the case where a color might not be present or has no pixels\n    if not coords:\n        return None\n    # Find min/max row and column from the list of coordinates\n    min_row = min(r for r, c in coords)\n    min_col = min(c for r, c in coords)\n    max_row = max(r for r, c in coords)\n    max_col = max(c for r, c in coords)\n    return min_row, min_col, max_row, max_col\n\ndef get_neighbor_coords(grid_shape, r, c):\n    \"\"\"Gets the coordinates of the 8 neighbors of a cell within grid bounds.\"\"\"\n    rows, cols = grid_shape\n    neighbors = []\n    # Iterate through the 3x3 neighbourhood centered at (r, c)\n    for dr in [-1, 0, 1]:\n        for dc in [-1, 0, 1]:\n            # Skip the center cell itself\n            if dr == 0 and dc == 0:\n                continue\n            nr, nc = r + dr, c + dc\n            # Check if the neighbor coordinates are within the grid boundaries\n            if 0 <= nr < rows and 0 <= nc < cols:\n                neighbors.append((nr, nc))\n    return neighbors\n\ndef transform(input_grid):\n    # Convert input list of lists to numpy array for efficient processing\n    input_grid_np = np.array(input_grid, dtype=int)\n    rows, cols = input_grid_np.shape\n    \n    # Initialize output_grid as a copy of the input grid. Modifications will be made to this copy.\n    output_grid = np.copy(input_grid_np)\n\n    # Determine the background color (most frequent)\n    background_color = find_background_color(input_grid_np)\n\n    # Identify all unique non-background colors present in the input\n    unique_colors = np.unique(input_grid_np)\n    non_background_colors = [c for c in unique_colors if c != background_color]\n\n    # Process each non-background color separately\n    for color in non_background_colors:\n        # Find all coordinates of the current color C in the *input* grid\n        pixel_coords = find_pixels_of_color(input_grid_np, color)\n        \n        # If this color wasn't present in the input, skip\n        if not pixel_coords:\n            continue\n\n        # Calculate the bounding box for this color C based on its pixels in the input grid\n        bounding_box = calculate_bounding_box(pixel_coords)\n        if bounding_box is None: \n            continue\n        min_row, min_col, max_row, max_col = bounding_box\n\n        # Iterate through each cell (r, c) within the calculated bounding box\n        for r in range(min_row, max_row + 1):\n            for c in range(min_col, max_col + 1):\n                # Check condition 1: Is the pixel (r, c) in the *input* grid the background color?\n                if input_grid_np[r, c] == background_color:\n                    # Check condition 2: Does pixel (r, c) have at least one neighbor with color C in the *input* grid?\n                    neighbor_coords = get_neighbor_coords(input_grid_np.shape, r, c)\n                    has_color_neighbor_in_input = False\n                    for nr, nc in neighbor_coords:\n                        if input_grid_np[nr, nc] == color:\n                            has_color_neighbor_in_input = True\n                            break # Found a neighbor, no need to check others\n                    \n                    # If both conditions are met, update the *output* grid\n                    if has_color_neighbor_in_input:\n                        output_grid[r, c] = color\n\n    # Convert the final numpy array back to a list of lists for the expected output format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 20841,
    "candidates_token_count": 1272,
    "total_token_count": 22113,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.813,
  "retries": 1
}