{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nPerform a flood fill operation starting from all blue (1) pixels in the input grid.\nThe fill color is blue (1) and it expands into adjacent (up, down, left, right) \nwhite (0) pixels. The fill stops at the grid boundaries or any non-white (0) \npixels (e.g., gray 5, azure 8), which act as barriers. All original non-white \npixels retain their color and position.\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef transform(input_grid):\n    \"\"\"\n    Applies a flood fill operation starting from blue pixels (1).\n\n    Args:\n        input_grid (list of lists): The input grid representing pixel colors.\n\n    Returns:\n        list of lists: The transformed grid with white areas connected to blue pixels\n                       filled with blue, bounded by non-white pixels or grid edges.\n    \"\"\"\n    # Convert input to numpy array for easier indexing and manipulation\n    np_input_grid = np.array(input_grid, dtype=int)\n    output_grid = np.copy(np_input_grid)\n    height, width = output_grid.shape\n\n    # Initialize queue for BFS flood fill\n    queue = deque()\n    \n    # Initialize a set to track visited coordinates. \n    # Add all non-white pixels initially, as they are boundaries or starting points \n    # and should not be filled or added to the queue again.\n    visited = set()\n    for r in range(height):\n        for c in range(width):\n            if output_grid[r, c] != 0:\n                visited.add((r, c))\n                # If it's a blue pixel (1), add it to the queue to start the fill from here\n                if output_grid[r, c] == 1:\n                    queue.append((r, c))\n\n    # Perform Breadth-First Search (BFS) flood fill\n    while queue:\n        r, c = queue.popleft()\n\n        # Explore neighbors (up, down, left, right)\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n\n            # Check if neighbor is within bounds\n            if 0 <= nr < height and 0 <= nc < width:\n                # Check if the neighbor has not been visited. \n                # Since all non-white cells were added initially, \n                # a non-visited cell must be white (0).\n                if (nr, nc) not in visited:\n                    # Change color to blue (1)\n                    output_grid[nr, nc] = 1\n                    # Mark as visited\n                    visited.add((nr, nc))\n                    # Add to queue for further exploration\n                    queue.append((nr, nc))\n\n    # Convert the result back to a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 19710,
    "candidates_token_count": 671,
    "total_token_count": 20381,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.333289,
  "retries": 1
}