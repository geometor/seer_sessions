{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\ndef transform(input_grid):\n    \"\"\"\n    Performs a flood fill operation starting from all blue (1) pixels in the \n    input grid. The fill color is blue (1) and it expands into adjacent \n    (up, down, left, right) white (0) pixels. The fill stops at the grid \n    boundaries or any non-white (0) pixels (e.g., gray 5, azure 8), which \n    act as barriers. All original non-white pixels retain their color and \n    position.\n    \"\"\"\n\n    # Convert input to numpy array for easier indexing and manipulation\n    np_input_grid = np.array(input_grid, dtype=int)\n    output_grid = np.copy(np_input_grid)\n    height, width = output_grid.shape\n\n    # Initialize queue for Breadth-First Search (BFS) flood fill\n    queue = deque()\n    \n    # Initialize a set to track coordinates that have been visited or are part of the fill\n    # This prevents infinite loops and redundant checks.\n    visited = set()\n\n    # Find initial starting points (blue pixels) and add them to the queue and visited set.\n    # These are the sources from which the fill expands.\n    for r in range(height):\n        for c in range(width):\n            # Check if the current pixel is blue (1)\n            if output_grid[r, c] == 1:\n                # Add blue pixels as starting points for the BFS if not already added\n                # (relevant if multiple blue pixels are connected initially)\n                if (r, c) not in visited:\n                    queue.append((r, c))\n                    visited.add((r, c))\n\n    # Perform the BFS flood fill\n    while queue:\n        # Get the next coordinate from the front of the queue\n        r, c = queue.popleft()\n\n        # Define the four cardinal directions for neighbors\n        neighbors = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n        # Explore neighbors (up, down, left, right)\n        for dr, dc in neighbors:\n            nr, nc = r + dr, c + dc\n\n            # Check if the neighbor coordinate is within the grid boundaries\n            if 0 <= nr < height and 0 <= nc < width:\n                # Check if the neighbor pixel is white (0) AND has not been visited yet\n                # White pixels are the target for filling.\n                # Non-white pixels act as implicit boundaries and are not processed further.\n                if output_grid[nr, nc] == 0 and (nr, nc) not in visited:\n                    # Change the neighbor's color to blue (1)\n                    output_grid[nr, nc] = 1\n                    # Mark the neighbor as visited\n                    visited.add((nr, nc))\n                    # Add the newly filled neighbor to the queue to explore from it later\n                    queue.append((nr, nc))\n\n    # Convert the final numpy grid back to a list of lists format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 13907,
    "candidates_token_count": 706,
    "total_token_count": 14613,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.216009,
  "retries": 1
}