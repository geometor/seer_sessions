task_type: flood_fill
objects:
  - type: grid
    description: A 2D array of pixels with colors 0-9.
  - type: pixel
    properties:
      - color:
          values: [white (0), blue (1), gray (5), azure (8)] # Colors observed in examples
      - position: (row, column) coordinates
elements:
  - role: background
    color: white (0)
    description: Represents areas that can potentially be filled.
  - role: fill_start_points
    color: blue (1)
    location: Present in the input grid. These pixels initiate the fill and remain unchanged.
  - role: fill_area
    color: white (0)
    description: Pixels eligible to be filled. Must be connected to a start point via a path of only white pixels.
  - role: boundary
    color: Any color except white (0). (Specifically gray (5) and azure (8) in examples).
    description: These pixels block the flood fill propagation and remain unchanged.
action:
  type: flood_fill
  parameters:
    - start_points: Locations of all blue (1) pixels in the input grid.
    - fill_color: blue (1)
    - target_color: white (0)
    - boundary_colors: All colors except white (0).
  propagation: Spreads to adjacent (up, down, left, right) pixels of the target color (white).
transformation:
  - description: Create the output grid as an exact copy of the input grid.
  - description: Identify the coordinates of all pixels that are white (0) and are adjacent (up, down, left, right) to any blue (1) pixel in the input grid. These are the initial cells to be filled.
  - description: Initialize a queue or stack data structure for the flood fill algorithm, adding the coordinates identified in the previous step. Maintain a set to keep track of coordinates that have been processed or added to the queue.
  - description: While the queue/stack is not empty:
      a. Remove a coordinate (row, col) from the queue/stack.
      b. Change the color of the pixel at (row, col) in the output grid to blue (1).
      c. Examine its four adjacent neighbors (up, down, left, right).
      d. For each neighbor (neighbor_row, neighbor_col):
          i. Check if the neighbor is within the grid boundaries.
          ii. Check if the color of the neighbor pixel in the *output* grid is white (0).
          iii. Check if the neighbor coordinate has not already been processed or added to the queue.
          iv. If all checks (i, ii, iii) pass:
              1. Add the neighbor coordinate (neighbor_row, neighbor_col) to the queue/stack and the processed set.
  - description: Pixels that were originally blue (1) or any boundary color (e.g., 5, 8) in the input grid retain their original color and position in the output grid.
  - description: Return the modified output grid.