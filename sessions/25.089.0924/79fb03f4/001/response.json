{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nPerform a flood fill operation starting from all blue (1) pixels in the input grid.\nThe fill color is blue (1) and it expands into adjacent white (0) pixels.\nThe fill stops at the grid boundaries or any non-white (0) pixels.\nAll original non-white pixels retain their color and position.\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef transform(input_grid):\n    \"\"\"\n    Applies a flood fill operation starting from blue pixels (1).\n\n    Args:\n        input_grid (list of lists): The input grid representing pixel colors.\n\n    Returns:\n        list of lists: The transformed grid with white areas adjacent to blue pixels\n                       filled with blue, bounded by non-white pixels or grid edges.\n    \"\"\"\n    # Convert input to numpy array for easier indexing and manipulation\n    np_input_grid = np.array(input_grid, dtype=int)\n    output_grid = np.copy(np_input_grid)\n    height, width = output_grid.shape\n\n    # Find initial starting points for the flood fill (blue pixels)\n    start_points = np.argwhere(np_input_grid == 1)\n\n    # Initialize queue for BFS flood fill and a set to track visited cells\n    queue = deque()\n    visited = set()\n\n    # Add initial blue points to the queue and visited set\n    # Note: We start filling *from* these points into adjacent white cells.\n    # The blue points themselves are already blue. We add them to visited\n    # to ensure we don't try to process them as fill targets.\n    for r, c in start_points:\n        # We don't actually need to add the blue pixels themselves to the queue,\n        # but we need to consider their *neighbors* as potential starting points\n        # for the fill into white areas.\n        visited.add((r, c)) # Mark the blue pixel itself as 'visited' conceptually\n\n        # Check neighbors of the initial blue pixels\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n            # Check if neighbor is within bounds\n            if 0 <= nr < height and 0 <= nc < width:\n                # Check if the neighbor is white (0) and not already visited\n                if output_grid[nr, nc] == 0 and (nr, nc) not in visited:\n                    # This white neighbor is a starting point for the actual fill\n                    output_grid[nr, nc] = 1 # Fill it blue\n                    visited.add((nr, nc))\n                    queue.append((nr, nc))\n\n\n    # Perform Breadth-First Search (BFS) flood fill\n    while queue:\n        r, c = queue.popleft()\n\n        # Explore neighbors (up, down, left, right)\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n\n            # Check if neighbor is within bounds\n            if 0 <= nr < height and 0 <= nc < width:\n                # Check if the neighbor is white (0) and not already visited\n                if output_grid[nr, nc] == 0 and (nr, nc) not in visited:\n                    # Change color to blue (1)\n                    output_grid[nr, nc] = 1\n                    # Mark as visited\n                    visited.add((nr, nc))\n                    # Add to queue for further exploration\n                    queue.append((nr, nc))\n\n    # Convert the result back to a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5315,
    "candidates_token_count": 842,
    "total_token_count": 6157,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.849857,
  "retries": 1
}