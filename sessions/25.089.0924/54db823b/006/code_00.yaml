elements:
  - object: grid
    attributes:
      - width: Integer
      - height: Integer
      - pixels: 2D array of integers (0-9)
    colors_present: [white (0), green (3), maroon (9)]
  - object: shapes
    description: Contiguous areas of non-white pixels within the grid.
    connectivity: Orthogonal (4-way adjacency)
    composition: Made of green (3) and/or maroon (9) pixels.
    properties:
      - maroon_count: The number of maroon (9) pixels in the shape.
      - total_size: The total number of pixels (green and maroon) in the shape.
      - location: The set of coordinates (row, column) occupied by the shape.
      - top_left: The coordinate (min_row, min_col) representing the top-most, left-most pixel of the shape.

constants:
  - name: MIN_REMOVAL_SIZE_THRESHOLD
    value: 10

actions:
  - name: find_all_shapes
    input: grid
    output: list of shapes with their properties (maroon_count, total_size, location, top_left)
  - name: select_candidate_shape
    input: list of shapes
    output: the single candidate shape selected, or None if no shapes exist.
    logic:
      1. If no shapes exist, return None.
      2. Calculate `min_maroon_count` = minimum `maroon_count` across all shapes.
      3. Filter shapes to keep only those where `shape.maroon_count == min_maroon_count`. Let this be `candidates_1`.
      4. If `len(candidates_1) == 1`, return the single shape.
      5. Else, calculate `max_total_size` = maximum `total_size` among shapes in `candidates_1`.
      6. Filter `candidates_1` to keep only those where `shape.total_size == max_total_size`. Let this be `candidates_2`.
      7. If `len(candidates_2) == 1`, return the single shape.
      8. Else, sort `candidates_2` based on `top_left` coordinates (first by row, then by column). Return the first shape in the sorted list.
  - name: determine_removal
    input: candidate_shape (output from `select_candidate_shape`)
    output: boolean (True if shape should be removed, False otherwise)
    logic:
      1. If `candidate_shape` is None, return False.
      2. Return True if `candidate_shape.total_size > MIN_REMOVAL_SIZE_THRESHOLD`, else return False.
  - name: generate_output_grid
    input:
      - input_grid: original grid
      - candidate_shape: the shape selected by `select_candidate_shape`
      - remove_shape: boolean result from `determine_removal`
    output: output_grid
    logic:
      1. Create a copy of the `input_grid`.
      2. If `remove_shape` is True:
         For each pixel coordinate in `candidate_shape.location`:
           Set the pixel at that coordinate in the copied grid to white (0).
      3. Return the modified (or unmodified if `remove_shape` is False) grid copy.

relationships:
  - The transformation identifies shapes based on connectivity and color composition.
  - A candidate shape is selected by prioritizing minimum maroon pixels, then maximum total size, then top-left position.
  - The candidate shape is only removed if its total size exceeds a fixed threshold (10).
  - If a shape is removed, its pixels are turned white (0); otherwise, the grid remains unchanged.