{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\ndef find_objects(grid):\n    \"\"\"\n    Finds all distinct contiguous blocks of non-white pixels in the grid.\n\n    Args:\n        grid (np.ndarray): The input grid.\n\n    Returns:\n        list: A list of dictionaries, where each dictionary represents an object\n              and contains 'color', 'pixels' (set of (r, c) tuples), \n              'min_r', 'min_c', 'height', 'width'.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = set()\n    objects = []\n    \n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and (r, c) not in visited:\n                color = grid[r, c]\n                obj_pixels = set()\n                q = deque([(r, c)])\n                visited.add((r, c))\n                min_r, max_r = r, r\n                min_c, max_c = c, c\n\n                while q:\n                    row, col = q.popleft()\n                    obj_pixels.add((row, col))\n                    min_r = min(min_r, row)\n                    max_r = max(max_r, row)\n                    min_c = min(min_c, col)\n                    max_c = max(max_c, col)\n\n                    # Check neighbors (4-connectivity)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] == color and (nr, nc) not in visited:\n                            visited.add((nr, nc))\n                            q.append((nr, nc))\n\n                # Check if all pixels within the bounding box have the same color \n                # and form a solid rectangle. This confirms the 'block' nature.\n                is_solid_rectangle = True\n                height = max_r - min_r + 1\n                width = max_c - min_c + 1\n                if len(obj_pixels) != height * width:\n                    # This check might be too strict if objects aren't always perfect rectangles\n                    # For this specific task, they seem to be. If not, remove this check.\n                    is_solid_rectangle = False \n                else: # Double check all pixels within bbox are the object color\n                    for br in range(min_r, max_r + 1):\n                         for bc in range(min_c, max_c + 1):\n                             if grid[br, bc] != color:\n                                 is_solid_rectangle = False\n                                 break\n                         if not is_solid_rectangle:\n                             break\n\n                if is_solid_rectangle: # Only add if it's a solid rectangular block\n                    objects.append({\n                        'color': color,\n                        'pixels': obj_pixels, # Storing pixels might not be needed if always rectangular\n                        'min_r': min_r,\n                        'min_c': min_c,\n                        'height': height,\n                        'width': width\n                    })\n                # If objects could be non-rectangular, remove the is_solid_rectangle check\n                # and potentially adjust how height/width are used later.\n                # For now, assuming solid rectangles based on examples.\n\n\n    return objects\n\ndef draw_object(grid, color, top_r, top_c, height, width):\n    \"\"\"\n    Draws a solid rectangle (object) onto the grid if it fits.\n\n    Args:\n        grid (np.ndarray): The grid to draw on (modified in-place).\n        color (int): The color of the object.\n        top_r (int): The top row coordinate.\n        top_c (int): The top column coordinate.\n        height (int): The height of the object.\n        width (int): The width of the object.\n    \"\"\"\n    rows, cols = grid.shape\n    \n    # Check if the object fits entirely within the grid boundaries\n    if top_r >= 0 and top_c >= 0 and \\\n       top_r + height <= rows and top_c + width <= cols:\n        # Draw the rectangle\n        grid[top_r:top_r + height, top_c:top_c + width] = color\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by finding green rectangular blocks and adding three copies \n    of each block at specific relative positions determined by the block's dimensions.\n\n    Transformation Rule:\n    1. Identify all distinct, contiguous, solid rectangular blocks of non-white pixels \n       (green in the examples) in the input grid.\n    2. For each identified block with top-left corner (r, c), height h, and width w:\n       a. Keep the original block.\n       b. Add a copy at position (r + h, c - w).\n       c. Add a copy at position (r + h, c + w).\n       d. Add a copy at position (r + 2*h, c + 2*w).\n    3. Copies are only added if they fit entirely within the grid boundaries.\n    \"\"\"\n    # Convert input_grid list of lists to numpy array for easier manipulation\n    input_grid_np = np.array(input_grid, dtype=int)\n    \n    # Initialize output_grid as a copy of the input\n    output_grid = input_grid_np.copy()\n    \n    # Find all non-white rectangular block objects in the input grid\n    objects = find_objects(input_grid_np)\n    \n    # Iterate through each found object\n    for obj in objects:\n        # Get object properties\n        color = obj['color']\n        r = obj['min_r']\n        c = obj['min_c']\n        h = obj['height']\n        w = obj['width']\n        \n        # Calculate target top-left positions for the three copies\n        pos1 = (r + h, c - w)\n        pos2 = (r + h, c + w)\n        pos3 = (r + 2 * h, c + 2 * w)\n        \n        target_positions = [pos1, pos2, pos3]\n        \n        # Attempt to draw each copy onto the output grid\n        for tr, tc in target_positions:\n            draw_object(output_grid, color, tr, tc, h, w)\n            \n    # Convert the final numpy array back to a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 10984,
    "candidates_token_count": 1534,
    "total_token_count": 12518,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 19.768551,
  "retries": 1
}