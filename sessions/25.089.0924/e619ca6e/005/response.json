{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nTransformation Rule:\n1. Initialize the output grid as a copy of the input grid.\n2. Identify all distinct, contiguous, solid rectangular blocks of non-white pixels in the input grid.\n3. For each identified block with top-left corner (r, c), height h, width w, and color C:\n    a. Generate a chain of copies moving diagonally down and left:\n        i.   Start at position (r + h, c - w).\n        ii.  Repeatedly add (h, -w) to the current position.\n        iii. For each position in the chain, draw a copy of the block (clipped to grid boundaries) onto the output grid.\n        iv.  Stop the chain when the block's top-left corner goes beyond the bottom boundary (row >= grid_height) or the block's right edge goes beyond the left boundary (col + width <= 0).\n    b. Generate a chain of copies moving diagonally down and right:\n        i.   Start at position (r + h, c + w).\n        ii.  Repeatedly add (h, w) to the current position.\n        iii. For each position in the chain, draw a copy of the block (clipped to grid boundaries) onto the output grid.\n        iv.  Stop the chain when the block's top-left corner goes beyond the bottom boundary (row >= grid_height) or the block's left edge goes beyond the right boundary (col >= grid_width).\n4. Return the final modified output grid.\n\"\"\"\n\n\ndef find_objects(grid):\n    \"\"\"\n    Finds all distinct contiguous blocks of non-white pixels in the grid,\n    assuming they are solid rectangles.\n\n    Args:\n        grid (np.ndarray): The input grid.\n\n    Returns:\n        list: A list of dictionaries, where each dictionary represents an object\n              and contains 'color', 'min_r', 'min_c', 'height', 'width'.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = set()\n    objects = []\n    \n    for r in range(rows):\n        for c in range(cols):\n            # If pixel is non-white and not visited yet, start BFS\n            if grid[r, c] != 0 and (r, c) not in visited:\n                color = grid[r, c]\n                obj_pixels = set()\n                q = deque([(r, c)])\n                visited.add((r, c))\n                min_r, max_r = r, r\n                min_c, max_c = c, c\n\n                # Breadth-First Search to find all connected pixels of the same color\n                while q:\n                    row, col = q.popleft()\n                    obj_pixels.add((row, col))\n                    min_r = min(min_r, row)\n                    max_r = max(max_r, row)\n                    min_c = min(min_c, col)\n                    max_c = max(max_c, col)\n\n                    # Check neighbors (4-connectivity)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        # Check boundaries and if neighbor is same color and not visited\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] == color and (nr, nc) not in visited:\n                            visited.add((nr, nc))\n                            q.append((nr, nc))\n\n                # Calculate bounding box dimensions\n                height = max_r - min_r + 1\n                width = max_c - min_c + 1\n                \n                # Verify it's a solid rectangle within its bounding box\n                is_solid_rectangle = True\n                if len(obj_pixels) != height * width:\n                     is_solid_rectangle = False\n                else: # Double check all pixels within bbox are the object color\n                    for br in range(min_r, max_r + 1):\n                         for bc in range(min_c, max_c + 1):\n                             if grid[br, bc] != color:\n                                 is_solid_rectangle = False\n                                 break\n                         if not is_solid_rectangle:\n                             break\n\n                # If confirmed as a solid rectangle, add to the list\n                if is_solid_rectangle: \n                    objects.append({\n                        'color': color,\n                        'min_r': min_r,\n                        'min_c': min_c,\n                        'height': height,\n                        'width': width\n                    })\n    return objects\n\ndef draw_clipped_object(grid, color, top_r, top_c, height, width):\n    \"\"\"\n    Draws a solid rectangle (object) onto the grid, clipping it if it\n    goes out of bounds. Modifies the grid in-place.\n\n    Args:\n        grid (np.ndarray): The grid to draw on (modified in-place).\n        color (int): The color of the object.\n        top_r (int): The intended top row coordinate.\n        top_c (int): The intended top column coordinate.\n        height (int): The height of the object.\n        width (int): The width of the object.\n        \n    Returns:\n        bool: True if any part of the object was drawn, False otherwise.\n    \"\"\"\n    rows, cols = grid.shape\n    \n    # Calculate the actual drawing boundaries, clipped to the grid\n    draw_start_r = max(0, top_r)\n    draw_end_r = min(rows, top_r + height) # Exclusive end\n    draw_start_c = max(0, top_c)\n    draw_end_c = min(cols, top_c + width)   # Exclusive end\n\n    # Draw only if there's a valid drawing area (overlap with the grid)\n    if draw_start_r < draw_end_r and draw_start_c < draw_end_c:\n        grid[draw_start_r:draw_end_r, draw_start_c:draw_end_c] = color\n        return True\n    return False\n\n\ndef transform(input_grid):\n    # Convert input_grid list of lists to numpy array for easier manipulation\n    input_grid_np = np.array(input_grid, dtype=int)\n    grid_rows, grid_cols = input_grid_np.shape\n    \n    # Initialize output_grid as a copy of the input\n    output_grid = input_grid_np.copy()\n    \n    # Find all non-white rectangular block objects in the input grid\n    objects = find_objects(input_grid_np)\n    \n    # Iterate through each found object\n    for obj in objects:\n        # Get object properties\n        color = obj['color']\n        r = obj['min_r']\n        c = obj['min_c']\n        h = obj['height']\n        w = obj['width']\n        \n        # --- 1. Process the down-left diagonal chain ---\n        current_r = r + h\n        current_c = c - w\n        \n        while True:\n             # Check termination condition for down-left chain:\n             # Stop if top row is off bottom OR right edge is off left\n            if current_r >= grid_rows or (current_c + w) <= 0:\n                break \n            \n            # Draw the clipped object at the current chain position\n            drawn = draw_clipped_object(output_grid, color, current_r, current_c, h, w)\n            # Although we check bounds before drawing, this confirms if *any* pixel was drawn.\n            # If no pixels were drawn (e.g., block starts completely off-grid but passes initial check),\n            # we might still want to stop, but the current check covers most cases.\n            \n            # Calculate the next position in the down-left chain\n            current_r += h\n            current_c -= w\n\n        # --- 2. Process the down-right diagonal chain ---\n        current_r = r + h\n        current_c = c + w\n        \n        while True:\n            # Check termination condition for down-right chain:\n            # Stop if top row is off bottom OR left edge is off right\n            if current_r >= grid_rows or current_c >= grid_cols:\n                break \n\n            # Draw the clipped object at the current chain position\n            drawn = draw_clipped_object(output_grid, color, current_r, current_c, h, w)\n            \n            # Calculate the next position in the down-right chain\n            current_r += h\n            current_c += w\n            \n    # Convert the final numpy array back to a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 29652,
    "candidates_token_count": 2028,
    "total_token_count": 31680,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 22.564811,
  "retries": 1
}