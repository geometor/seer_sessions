task_description: Identify a background color, a seed color/pixel(s), and boundary colors, then flood fill the connected area of the background color adjacent to the seed(s) with the seed color.

definitions:
  - name: background_color
    description: The most frequent color in the input grid. This color is targeted for replacement.
  - name: seed_pixel(s)
    description: One or more pixels of a specific color that initiate the fill. Often a color appearing infrequently or uniquely in the input.
  - name: fill_color
    description: The color used to replace the background color during the fill. This is the same color as the seed_pixel(s).
  - name: boundary_colors
    description: All colors present in the input grid that are neither the background_color nor the fill_color. These colors block the flood fill.
  - name: target_fill_area
    description: The connected component (4-way adjacency) of background_color pixels that are adjacent to any seed_pixel.

transformation_steps:
  - step: 1
    action: identify_colors
    inputs: input_grid
    outputs: background_color, seed_pixel(s), fill_color, boundary_colors
    details: >
      background_color = most frequent color.
      seed_pixel(s)/fill_color = identify the color/pixels initiating the fill based on input/output comparison (often infrequent color becoming fill color).
      boundary_colors = all other colors present.
  - step: 2
    action: find_initial_fill_pixels
    inputs: input_grid, seed_pixel(s), background_color
    outputs: initial_queue
    details: Find all pixels with background_color that are cardinally adjacent to any seed_pixel.
  - step: 3
    action: flood_fill
    inputs: input_grid (for boundaries), initial_queue, background_color, fill_color, boundary_colors
    outputs: modified_grid
    details: >
      Initialize output grid as copy of input.
      Use a queue/stack starting with initial_queue.
      Iteratively change background_color pixels in the queue to fill_color in the output grid.
      Add adjacent background_color neighbors (that are not boundaries and not already visited/queued) to the queue.
      Stop when the queue is empty.
  - step: 4
    action: final_output
    inputs: modified_grid
    outputs: output_grid

examples:
  - example: 1
    background_color: 1 (blue)
    seed_pixel(s): (4, 8) with color 9 (maroon)
    fill_color: 9 (maroon)
    boundary_colors: [3 (green), 5 (gray)]
    target_fill_area: Connected component of blue pixels adjacent to (4, 8), bounded by green/gray.
  - example: 2
    background_color: 0 (white)
    seed_pixel(s): (4, 12) with color 4 (yellow)
    fill_color: 4 (yellow)
    boundary_colors: [5 (gray)]
    target_fill_area: Connected component of white pixels adjacent to (4, 12), bounded by gray.
  - example: 3
    background_color: 7 (orange)
    seed_pixel(s): Multiple locations with color 3 (green) e.g., (10, 9), (11, 7), (11, 8), (11, 9), (12, 7), (12, 8).
    fill_color: 3 (green)
    boundary_colors: [9 (maroon), 6 (magenta), 8 (azure)]
    target_fill_area: Connected component(s) of orange pixels adjacent to any initial green pixel, bounded by maroon/magenta/azure.
