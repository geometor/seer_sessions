{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nIdentifies the coordinates of the blue pixel (1) and the red pixel (2) in the input grid.\nCalculates the set of integer coordinates representing the pixels lying on the straight line segment connecting the blue and red pixels using a Bresenham-like algorithm.\nCreates an output grid by copying the input grid.\nColors the pixels corresponding to the calculated line coordinates green (3), except for the original blue and red pixel locations.\n\"\"\"\n\ndef find_pixel_coords(grid, color_value):\n    \"\"\"Finds the coordinates (row, col) of the first pixel with the given color value.\"\"\"\n    coords = np.argwhere(grid == color_value)\n    if len(coords) > 0:\n        return tuple(coords[0])\n    return None\n\ndef get_line_coords(r1, c1, r2, c2):\n    \"\"\"Calculates the coordinates of pixels on the line segment between (r1, c1) and (r2, c2) using a Bresenham-like algorithm.\"\"\"\n    coords = []\n    dr = abs(r2 - r1)\n    dc = abs(c2 - c1)\n    sr = 1 if r1 < r2 else -1\n    sc = 1 if c1 < c2 else -1\n    \n    # Adjusted error calculation for potentially better diagonal handling (using dc - dr or dr - dc)\n    # Let's try dc - dr, similar to standard x-dominant Bresenham\n    err = dc - dr \n\n    r, c = r1, c1\n    \n    while True:\n        coords.append((r, c))\n        if r == r2 and c == c2:\n            break\n        \n        e2 = 2 * err\n        \n        # Check conditions for stepping\n        moved_r = False\n        moved_c = False\n\n        if e2 >= -dr: # Favor stepping in column (x-direction in standard algo)\n            if c != c2: # Avoid overshooting target column\n                err -= dr\n                c += sc\n                moved_c = True\n\n        if e2 <= dc: # Favor stepping in row (y-direction in standard algo)\n             if r != r2: # Avoid overshooting target row\n                err += dc\n                r += sr\n                moved_r = True\n        \n        # Ensure progress if stuck (e.g., perfectly diagonal and error logic prevents step)\n        # This shouldn't happen with correct Bresenham, but as a safeguard:\n        if not moved_r and not moved_c:\n             # If no move happened but we are not at the end, force a move\n             # Prioritize the direction with the larger remaining distance\n             if dr > dc :\n                 if r != r2: r += sr\n                 elif c != c2: c += sc\n             else:\n                 if c != c2: c += sc\n                 elif r != r2: r += sr\n             # Re-evaluate error or break if stuck, though this indicates an algo issue\n             # For simplicity here, let's assume the main logic covers all cases.\n             # A more robust implementation might need careful state management.\n             if r == coords[-1][0] and c == coords[-1][1]: # Truly stuck\n                 # print(f\"Warning: Bresenham stuck at {r, c} going to {r2, c2}\")\n                 break \n\n\n    return coords\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by drawing a green line between the blue and red pixels.\n    \"\"\"\n    # Convert input list of lists to numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    \n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_np)\n\n    # Find the coordinates of the blue (1) and red (2) pixels\n    start_coords = find_pixel_coords(input_np, 1)\n    end_coords = find_pixel_coords(input_np, 2)\n\n    if start_coords is None or end_coords is None:\n        # Should not happen based on examples, but good practice\n        return output_grid.tolist() \n\n    r1, c1 = start_coords\n    r2, c2 = end_coords\n\n    # Calculate the coordinates for the line connecting the two points\n    line_coords = get_line_coords(r1, c1, r2, c2)\n\n    # Color the path pixels green (3), excluding start and end points\n    for r, c in line_coords:\n        if (r, c) != start_coords and (r, c) != end_coords:\n            # Check grid bounds just in case, though Bresenham should stay within\n            if 0 <= r < output_grid.shape[0] and 0 <= c < output_grid.shape[1]:\n                 output_grid[r, c] = 3\n\n    # Convert back to list of lists for the required output format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5311,
    "candidates_token_count": 1156,
    "total_token_count": 6467,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 92.789881,
  "retries": 2
}