{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\ndef find_pixel_coords(grid, color_value):\n    \"\"\"\n    Finds the coordinates (row, col) of the first pixel with the given color value.\n    \n    Args:\n        grid (np.array): The input grid.\n        color_value (int): The color value to search for.\n        \n    Returns:\n        tuple: (row, col) coordinates or None if not found.\n    \"\"\"\n    coords = np.argwhere(grid == color_value)\n    if len(coords) > 0:\n        # Return the coordinates of the first occurrence\n        return tuple(coords[0])\n    return None\n\ndef get_line_coords_rc(r0, c0, r1, c1):\n    \"\"\"\n    Calculates the coordinates of pixels on the line segment between (r0, c0) \n    and (r1, c1) using a Bresenham-like algorithm.\n    This version aims to replicate standard integer-based line drawing.\n    \n    Args:\n        r0, c0 (int): Starting row and column.\n        r1, c1 (int): Ending row and column.\n        \n    Returns:\n        list: A list of (row, col) tuples representing the pixels on the line,\n              including the start and end points.\n    \"\"\"\n    points = []\n    dr = abs(r1 - r0)\n    dc = abs(c1 - c0)\n    sr = 1 if r0 < r1 else -1 # Step direction for row\n    sc = 1 if c0 < c1 else -1 # Step direction for column\n    \n    # Initialize error term based on differences (one common Bresenham variant)\n    err = dr - dc \n\n    r, c = r0, c0\n    while True:\n        points.append((r, c)) # Add current point to the list\n        if r == r1 and c == c1:\n            # Stop if we have reached the end point\n            break\n            \n        e2 = 2 * err # Store error*2 for comparison\n        \n        # Check conditions for moving row-wise (vertical step)\n        # This condition checks if moving vertically is preferred or necessary\n        if e2 >= -dc: \n            if r == r1: break # Safety check: don't overshoot target row\n            err -= dc # Adjust error by -delta_col\n            r += sr   # Move vertically\n            \n        # Check conditions for moving column-wise (horizontal step)\n        # This condition checks if moving horizontally is preferred or necessary\n        if e2 <= dr: \n            if c == c1: break # Safety check: don't overshoot target column\n            err += dr  # Adjust error by delta_row\n            c += sc   # Move horizontally\n            \n    return points\n\n\ndef transform(input_grid):\n    \"\"\"\n    Identifies a blue (1) and a red (2) pixel in the input grid.\n    Draws a green (3) line connecting these two pixels on the output grid.\n    The line consists of pixels determined by a Bresenham-like algorithm.\n    The start (blue) and end (red) pixels themselves are not colored green.\n    \n    Args:\n        input_grid (list of lists): The input grid represented as a 2D list.\n        \n    Returns:\n        list of lists: The transformed grid with the green line added.\n    \"\"\"\n    # Convert input list of lists to numpy array for easier processing\n    input_np = np.array(input_grid, dtype=int)\n    \n    # Create a copy of the input grid to modify as the output\n    output_grid = np.copy(input_np)\n\n    # Find the coordinates of the blue (1 - start) and red (2 - end) pixels\n    start_coords = find_pixel_coords(input_np, 1)\n    end_coords = find_pixel_coords(input_np, 2)\n\n    # Proceed only if both start and end points are found\n    if start_coords is not None and end_coords is not None:\n        r0, c0 = start_coords\n        r1, c1 = end_coords\n\n        # Calculate all coordinates for the line connecting the start and end points\n        line_coords = get_line_coords_rc(r0, c0, r1, c1)\n\n        # Color the path pixels green (3)\n        # Iterate through all calculated coordinates on the line\n        for r, c in line_coords:\n            # Only color the pixel if it is NOT the start point AND NOT the end point\n            if (r, c) != start_coords and (r, c) != end_coords:\n                # Check grid bounds as a safety measure, although line algo should stay within\n                if 0 <= r < output_grid.shape[0] and 0 <= c < output_grid.shape[1]:\n                     output_grid[r, c] = 3 # Set color to green\n\n    # Convert the final numpy array back to a list of lists for the required output format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 18760,
    "candidates_token_count": 1168,
    "total_token_count": 19928,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 134.29031,
  "retries": 2
}