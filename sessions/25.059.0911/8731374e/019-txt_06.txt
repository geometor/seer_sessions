import numpy as np

def analyze_example(input_grid, expected_output_grid):
    input_grid = np.array(input_grid)
    expected_output_grid = np.array(expected_output_grid)

    # Find cross center
    center = None
    rows, cols = input_grid.shape
    for r in range(rows):
        for c in range(cols):
            if input_grid[r, c] == 2:
                # Simplified check (assuming only one cross)
                center = (r, c)
                break
        if center:
            break

    if not center:
        return {
            "cross_found": False,
        }

    # Get cross boundaries
    center_row, center_col = center
    up = center_row
    while up >= 0 and input_grid[up, center_col] == 2:
        up -= 1
    down = center_row
    while down < rows and input_grid[down, center_col] == 2:
        down += 1
    left = center_col
    while left >= 0 and input_grid[center_row, left] == 2:
        left -= 1
    right = center_col
    while right < cols and input_grid[center_row, right] == 2:
        right += 1
        
    cross_height = down - up -1
    cross_width = right - left - 1

    return {
        "cross_found": True,
        "center": center,
        "cross_height": cross_height,
        "cross_width" : cross_width,
        "input_shape": input_grid.shape,
        "expected_output_shape": expected_output_grid.shape,
        "up": up,
        "down": down,
        "left": left,
        "right": right,
    }

examples = [
    (
        [[8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 2, 8, 8, 8, 8, 8], [8, 8, 8, 8, 2, 8, 8, 8, 8, 8], [8, 8, 2, 2, 2, 2, 2, 8, 8, 8], [8, 8, 8, 8, 2, 8, 8, 8, 8, 8], [8, 8, 8, 8, 2, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8]],
        [[8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 2, 8, 8, 8, 8], [8, 8, 8, 2, 8, 8, 8, 8], [8, 2, 2, 2, 2, 2, 8, 8], [8, 8, 8, 2, 8, 8, 8, 8], [8, 8, 8, 2, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8]],
    ),
    (
        [[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8], [8, 8, 8, 2, 2, 2, 2, 2, 8, 8, 8, 8], [8, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]],
        [[8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 2, 8, 8, 8, 8, 8], [8, 8, 8, 8, 2, 8, 8, 8, 8, 8], [8, 8, 2, 2, 2, 2, 2, 8, 8, 8], [8, 8, 8, 8, 2, 8, 8, 8, 8, 8], [8, 8, 8, 8, 2, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8]],
    ),
    (
       [[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8], [8, 8, 8, 2, 2, 2, 2, 2, 8, 8, 8], [8, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]],
        [[8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 2, 8, 8, 8, 8, 8], [8, 8, 8, 8, 2, 8, 8, 8, 8, 8], [8, 8, 2, 2, 2, 2, 2, 8, 8, 8], [8, 8, 8, 8, 2, 8, 8, 8, 8, 8], [8, 8, 8, 8, 2, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8]],
    ),
]

results = [analyze_example(inp, out) for inp, out in examples]
for i, r in enumerate(results):
    print(f"Example {i+1}:")
    for k, v in r.items():
        print(f"  {k}: {v}")
