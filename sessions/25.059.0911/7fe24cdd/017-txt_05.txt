import numpy as np
from typing import List, Tuple
from collections import Counter

def count_objects(grid: List[List[int]]) -> int:
    """Counts distinct objects (contiguous blocks of same color) in a grid."""
    grid = np.array(grid)
    rows, cols = grid.shape
    visited = np.zeros((rows, cols), dtype=bool)
    count = 0

    def is_valid(r, c):
        return 0 <= r < rows and 0 <= c < cols

    def dfs(r, c, color):
        if not is_valid(r, c) or visited[r, c] or grid[r, c] != color:
            return
        visited[r, c] = True
        for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:
            dfs(r + dr, c + dc, color)

    for r in range(rows):
        for c in range(cols):
            if not visited[r, c]:
                dfs(r, c, grid[r, c])
                count += 1
    return count

def summarize_grid(grid: List[List[int]], grid_name:str, output_grid:List[List[int]]=None) -> dict:
    """Analyzes a single grid and returns a summary."""
    grid_np = np.array(grid)
    rows, cols = grid_np.shape
    unique_colors = list(np.unique(grid_np))
    object_count = count_objects(grid)

    summary = {
        "name": grid_name,
        "dimensions": (rows, cols),
        "unique_colors": unique_colors,
        "object_count": object_count,
        "grid": grid_np.tolist(),
    }
    if output_grid is not None:
        is_correct = np.array_equal(grid_np, np.array(output_grid))
        summary["output_match"] = is_correct
        if not is_correct:
          summary["output_grid"] = output_grid
    return summary

def analyze_examples(examples: List[Tuple[List[List[int]], List[List[int]]]], code_output: List[List[List[int]]]) -> List[dict]:
    """Analyzes all training examples and returns a list of summaries."""
    analysis = []
    for i, (input_grid, output_grid) in enumerate(examples):
        input_summary = summarize_grid(input_grid, f"Example {i+1} Input", code_output[i])
        output_summary = summarize_grid(output_grid, f"Example {i+1} Output")        
        analysis.append({"input": input_summary, "output": output_summary,})
    return analysis


#provided examples
examples = [
    ([[5, 0, 5], [0, 5, 0], [5, 0, 5]], [[5, 0, 5, 5, 0, 5], [0, 5, 0, 0, 5, 0], [5, 0, 5, 5, 0, 5], [5, 0, 5, 5, 0, 5], [0, 5, 0, 0, 5, 0], [5, 0, 5, 5, 0, 5]]),
    ([[8, 8, 8, 8, 8], [8, 8, 8, 8, 8], [8, 8, 8, 8, 8], [8, 8, 8, 8, 8], [8, 8, 8, 8, 8]], [[8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8]]),
    ([[5, 0, 5], [0, 0, 0], [5, 0, 5]], [[0, 5, 0, 5, 0, 5], [0, 0, 0, 0, 0, 0], [0, 5, 0, 5, 0, 5]]),
    ([[5, 0, 0, 2, 2], [0, 5, 0, 2, 2], [0, 0, 5, 2, 2], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[5, 0, 0, 2, 2], [0, 5, 0, 2, 2], [0, 0, 5, 2, 2], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]])
]
# provided code output
code_output = [
    [[5, 0, 5, 5, 0, 5], [0, 5, 0, 0, 5, 0], [5, 0, 5, 5, 0, 5], [5, 0, 5, 5, 0, 5], [0, 5, 0, 0, 5, 0], [5, 0, 5, 5, 0, 5]],
    [[8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8]],
    [[0, 5, 0, 5, 0, 5], [0, 0, 0, 0, 0, 0], [0, 5, 0, 5, 0, 5]],
    [[5, 0, 0, 2, 2], [0, 5, 0, 2, 2], [0, 0, 5, 2, 2], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
]

analysis = analyze_examples(examples, code_output)
for item in analysis:
  print(item)