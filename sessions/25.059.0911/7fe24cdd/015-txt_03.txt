import numpy as np

def get_grid_info(grid):
    grid = np.array(grid)
    return {
        'shape': grid.shape,
        'colors': np.unique(grid).tolist(),
    }

def check_symmetry(grid):
    grid = np.array(grid)
    return {
        'horizontal': np.array_equal(grid, np.flip(grid, axis=0)),
        'vertical': np.array_equal(grid, np.flip(grid, axis=1)),
        'diagonal1': np.array_equal(grid, grid.T),  # Check for symmetry along main diagonal (top-left to bottom-right)
        'diagonal2': np.array_equal(grid, np.flip(grid.T, axis=1)) # Check for symmetry along anti-diagonal (top-right to bottom-left)
    }


task_data = {
    "train": [
        {
            "input": [[5, 5, 5], [5, 5, 5], [5, 5, 5]],
            "output": [[5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5]]
        },
        {
            "input": [[5, 5, 8, 5, 5], [5, 5, 8, 5, 5], [8, 8, 8, 8, 8], [5, 5, 8, 5, 5], [5, 5, 8, 5, 5]],
            "output": [[5, 5, 8, 5, 5, 5, 5, 8, 5, 5], [5, 5, 8, 5, 5, 5, 5, 8, 5, 5], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [5, 5, 8, 5, 5, 5, 5, 8, 5, 5], [5, 5, 8, 5, 5, 5, 5, 8, 5, 5], [5, 5, 8, 5, 5, 5, 5, 8, 5, 5], [5, 5, 8, 5, 5, 5, 5, 8, 5, 5], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [5, 5, 8, 5, 5, 5, 5, 8, 5, 5], [5, 5, 8, 5, 5, 5, 5, 8, 5, 5]]
        },
        {
            "input": [[0, 5, 0], [0, 5, 0], [0, 5, 0]],
            "output": [[5, 0, 5, 0, 5, 0], [5, 0, 5, 0, 5, 0], [5, 0, 5, 0, 5, 0]]
        },
        {
            "input": [[1, 0, 2, 0, 3], [0, 1, 0, 2, 0], [0, 0, 1, 0, 0], [0, 2, 0, 3, 0], [3, 0, 2, 0, 1]],
            "output": [[1, 0, 2, 0, 3], [0, 1, 0, 2, 0], [0, 0, 1, 0, 0], [0, 2, 0, 3, 0], [3, 0, 2, 0, 1]]
        }
    ]
}


for i, example in enumerate(task_data['train']):
    input_info = get_grid_info(example['input'])
    output_info = get_grid_info(example['output'])
    symmetry_input = check_symmetry(example['input'])
    symmetry_output = check_symmetry(example['output'])

    print(f"Example {i+1}:")
    print(f"  Input: Shape={input_info['shape']}, Colors={input_info['colors']}, Symmetry={symmetry_input}")
    print(f"  Output: Shape={output_info['shape']}, Colors={output_info['colors']}, Symmetry={symmetry_output}")
    print(f"  Correct: {np.array_equal(transform(example['input']), example['output'])}")