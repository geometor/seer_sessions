{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation identifies multi-pixel colored objects within the input grid.\nIt also finds a uniquely colored single pixel object, and moves a copy of the\nsource object to that location in the output.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef find_objects(grid):\n    # Find all contiguous colored objects (connected components).\n    objects = []\n    visited = set()\n    rows, cols = len(grid), len(grid[0])\n\n    def dfs(r, c, color, obj):\n        if (r, c) in visited or r < 0 or r >= rows or c < 0 or c >= cols or grid[r][c] != color:\n            return\n        visited.add((r, c))\n        obj.append((r, c))\n        dfs(r + 1, c, color, obj)\n        dfs(r - 1, c, color, obj)\n        dfs(r, c + 1, color, obj)\n        dfs(r, c - 1, color, obj)\n\n    for r in range(rows):\n        for c in range(cols):\n            if (r, c) not in visited:\n                obj = []\n                color = grid[r][c]\n                dfs(r, c, color, obj)\n                if obj:\n                    objects.append((color, obj))\n    return objects\n\ndef find_target_location(grid, objects):\n     # Find the location of single-pixel object with unique color.\n    color_counts = Counter()\n    pixel_locations = {}\n\n    rows, cols = len(grid), len(grid[0])\n    for r in range(rows):\n        for c in range(cols):\n            color_counts[grid[r][c]] += 1\n            pixel_locations[grid[r][c]] = (r,c)\n\n    for color, count in color_counts.items():\n        is_object = False\n        for object_color, obj_pixels in objects:\n          if color == object_color:\n            is_object = True\n        if count == 1 and not is_object:\n          return pixel_locations[color]\n\n    return None\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the specified rule.\n    \"\"\"\n    # Convert input grid to numpy array\n    grid = np.array(input_grid)\n\n    # Find objects\n    objects = find_objects(grid)\n    # print(f\"objects {objects}\")\n\n    # Find target location\n    target_location = find_target_location(grid, objects)\n    # print(f\"target {target_location}\")\n\n    # Initialize output_grid as copy of the grid\n    output_grid = np.copy(grid)\n\n    # skip if no target\n    if not target_location:\n      return output_grid.tolist()\n      \n    # Find object to move\n    # Identify Source Objects: select multi-pixel colored objects\n    source_objects = []\n    for color, obj_pixels in objects:\n      if len(obj_pixels) > 1:\n        source_objects.append((color, obj_pixels))\n\n    # print(f\"source: {source_objects}\")\n    \n    # skip if not source\n    if len(source_objects) == 0:\n        return output_grid.tolist()\n\n    for (source_color, source_pixels) in source_objects:\n        # Translate object: Center of selected object becomes target location.\n\n        # Compute centroid of source object\n        source_rows, source_cols = zip(*source_pixels)\n        source_centroid_r = int(np.mean(source_rows))\n        source_centroid_c = int(np.mean(source_cols))\n\n        # Calculate translation offset\n        offset_r = target_location[0] - source_centroid_r\n        offset_c = target_location[1] - source_centroid_c\n        \n        # print(f\"offset: {(offset_r, offset_c)}\")\n\n        # Create a translated copy of the object in the output grid.\n        for r, c in source_pixels:\n            new_r, new_c = r + offset_r, c + offset_c\n            # Ensure indices are within bounds\n            if 0 <= new_r < output_grid.shape[0] and 0 <= new_c < output_grid.shape[1]:\n              output_grid[new_r, new_c] = source_color\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4268,
    "candidates_token_count": 1037,
    "total_token_count": 5305,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 17.00617,
  "response_file": "002-response.json"
}