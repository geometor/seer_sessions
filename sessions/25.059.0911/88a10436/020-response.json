{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. Identify Colored Clusters: Find all contiguous regions (clusters) of non-background (non-zero) colored pixels in the input grid. A cluster is defined as a group of pixels of the same color that are connected by edges (not just corners).\n2. Optional Grey Removal: If a grey pixel (color 5) is present, remove it (set its value to 0).\n3. Select Largest Cluster: If multiple clusters are found, select the largest cluster based on the total number of pixels. If clusters have the same size, select the cluster whose top-left corner is closest to the origin (0,0).\n4. Move Selected Cluster: Move the selected cluster so that its top-left corner aligns with the top-left corner (0, 0) of the output grid. Preserve the relative positions of pixels within the cluster.\n5. Fill Background: All other pixels in the output grid should be the background color (0). If no clusters are found the output is all 0.\n\"\"\"\n\nimport numpy as np\n\ndef find_clusters(grid):\n    \"\"\"Finds all contiguous clusters of non-background pixels.\"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n    clusters = []\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def dfs(r, c, current_cluster):\n        if not is_valid(r, c) or visited[r, c] or grid[r, c] == 0:\n            return\n        visited[r, c] = True\n        current_cluster.append((r, c, grid[r, c]))\n        dfs(r + 1, c, current_cluster)\n        dfs(r - 1, c, current_cluster)\n        dfs(r, c + 1, current_cluster)\n        dfs(r, c - 1, current_cluster)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and not visited[r, c]:\n                current_cluster = []\n                dfs(r, c, current_cluster)\n                clusters.append(current_cluster)\n    return clusters\n\ndef select_largest_cluster(clusters):\n    \"\"\"Selects the largest cluster, with tie-breaking by top-leftmost.\"\"\"\n    if not clusters:\n        return None\n\n    largest_cluster = max(clusters, key=len)\n    max_size = len(largest_cluster)\n    \n    #check for ties\n    tied_clusters = [cluster for cluster in clusters if len(cluster) == max_size]\n    \n    if len(tied_clusters) > 1:\n      # select the top-left most\n      # find top-left corner of each cluster\n      top_left_corners = []\n      for cluster in tied_clusters:\n        min_row = min(pixel[0] for pixel in cluster)\n        min_col = min(pixel[1] for pixel in cluster)\n        top_left_corners.append((min_row, min_col))\n      \n      # find the minimum top-left corner\n      min_corner = min(top_left_corners)\n      \n      #get index of this corner\n      min_index = top_left_corners.index(min_corner)\n      largest_cluster = tied_clusters[min_index]\n    \n    return largest_cluster\n\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the defined rules.\"\"\"\n\n    # Initialize output grid with the same dimensions and default color (0).\n    output_grid = np.zeros_like(input_grid)\n    rows, cols = input_grid.shape\n\n    # Optional Grey Removal: remove grey pixel (5) if present\n    input_grid = np.where(input_grid == 5, 0, input_grid)\n\n    # Identify Colored Clusters\n    clusters = find_clusters(input_grid)\n    \n    # Select Largest Cluster (or handle no clusters)\n    selected_cluster = select_largest_cluster(clusters)\n    \n    if selected_cluster is None:\n      return output_grid\n    \n    #find top left of selected cluster\n    min_row = min(pixel[0] for pixel in selected_cluster)\n    min_col = min(pixel[1] for pixel in selected_cluster)\n\n    # Calculate the shift needed to move the cluster's top-left to (0, 0).\n    row_shift = -min_row\n    col_shift = -min_col\n\n    # Move the selected cluster to (0, 0) in output grid.\n    for r, c, color in selected_cluster:\n        new_r = r + row_shift\n        new_c = c + col_shift\n        if 0 <= new_r < rows and 0 <= new_c < cols:  # Boundary check\n            output_grid[new_r, new_c] = color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3985,
    "candidates_token_count": 1142,
    "total_token_count": 5127,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 13.887099,
  "response_file": "020-response.json"
}