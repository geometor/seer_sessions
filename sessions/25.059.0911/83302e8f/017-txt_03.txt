input_grid = np.array([
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    [9, 4, 4, 4, 9, 4, 4, 4, 9, 4, 4, 4, 4, 9],
    [9, 4, 4, 4, 9, 4, 4, 4, 9, 3, 3, 3, 3, 9],
    [9, 4, 4, 4, 9, 3, 3, 3, 9, 3, 3, 3, 3, 9],
    [9, 4, 4, 4, 9, 3, 3, 3, 9, 3, 3, 3, 3, 9],
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
])

expected_output_grid = np.array([
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    [9, 4, 4, 4, 9, 4, 4, 4, 9, 3, 3, 3, 3, 9],
    [9, 4, 4, 4, 9, 4, 4, 4, 9, 3, 3, 3, 3, 9],
    [9, 4, 4, 4, 9, 3, 3, 3, 9, 3, 3, 3, 3, 9],
    [9, 4, 4, 4, 9, 3, 3, 3, 9, 3, 3, 3, 3, 9],
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
])

actual_output_grid = transform(input_grid) # Assuming this is the output of the provided code
# Stating the assumption of the content of actual_output_grid because there is no execution environment.
# The assumption is that transform function will work as it was designed in the previous turn,
# and not consider the "border" as part of the filling
assumed_actual_output_grid = np.array([
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    [9, 4, 4, 4, 9, 4, 4, 4, 9, 4, 4, 4, 4, 9],
    [9, 4, 4, 4, 9, 4, 4, 4, 9, 3, 3, 3, 3, 9],
    [9, 4, 4, 4, 9, 3, 3, 3, 9, 3, 3, 3, 3, 9],
    [9, 4, 4, 4, 9, 3, 3, 3, 9, 3, 3, 3, 3, 9],
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
])

result = np.array_equal(expected_output_grid, assumed_actual_output_grid) # should be false.

#check neighbors
def check_neighbors(grid, r, c):
    neighbors = []
    rows, cols = grid.shape
    for dr, dc in [(0, -1), (0, 1), (-1, 0), (1, 0)]:  # Left, Right, Up, Down
        nr, nc = r + dr, c + dc
        if 0 <= nr < rows and 0 <= nc < cols:
            neighbors.append(grid[nr,nc])
    return neighbors

print(check_neighbors(input_grid, 1, 1))
# Expected: [9, 4, 9, 4]
print(check_neighbors(input_grid, 1, 5))
# Expected: [9, 4, 9, 4]
print(check_neighbors(input_grid, 1, 9))
# Expected: [9, 4, 9, 3]
print(check_neighbors(input_grid, 2, 9))
# Expected: [9, 3, 4, 9]
