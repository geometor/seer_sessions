import numpy as np

def analyze_examples(task):
    results = []
    for example in task['train']:
        input_grid = np.array(example['input'])
        output_grid = np.array(example['output'])
        predicted_output = transform(input_grid)
        rows, cols = input_grid.shape

        center_row, center_col = rows // 2, cols // 2
        center_preserved = input_grid[center_row, center_col] == output_grid[center_row, center_col]
        correct_pixels = np.sum(predicted_output == output_grid)
        total_pixels = rows * cols
        accuracy = correct_pixels / total_pixels
        
        # Parity check
        even_parity_correct = 0
        odd_parity_correct = 0
        for r in range(rows):
            for c in range(cols):
                if (r + c) % 2 == 0:
                    if output_grid[r,c] == 0:
                         even_parity_correct +=1
                else:
                    if output_grid[r,c] == 1:
                        odd_parity_correct += 1
        total_even = np.sum((np.indices((rows,cols))[0] + np.indices((rows,cols))[1]) % 2 == 0)
        total_odd = np.sum((np.indices((rows,cols))[0] + np.indices((rows,cols))[1]) % 2 != 0)
        
        even_acc = even_parity_correct/total_even if total_even > 0 else 0
        odd_acc = odd_parity_correct/total_odd if total_odd > 0 else 0

        results.append({
            'input_shape': (rows, cols),
            'center_preserved': center_preserved,
            'accuracy': accuracy,
            'even_parity_accuracy': even_acc,
            'odd_parity_accuracy': odd_acc
        })

    return results
task = {
    "train": [
        {
            "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],
            "output": [[0, 1, 0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 5, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0]]
        },
        {
            "input": [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]],
            "output": [[0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 5, 1, 0], [1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0]]
        },
        {
            "input": [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 5, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]],
            "output": [[0, 1, 0, 1, 0], [1, 0, 1, 0, 1], [0, 1, 5, 1, 0], [1, 0, 1, 0, 1], [0, 1, 0, 1, 0]]
        },
        {
            "input": [[0, 0, 0], [0, 5, 0], [0, 0, 0]],
            "output": [[0, 1, 0], [1, 5, 1], [0, 1, 0]]
        }
    ]
}
analysis_results = analyze_examples(task)
for i, result in enumerate(analysis_results):
    print(f"Example {i+1}:")
    print(f"  Input Shape: {result['input_shape']}")
    print(f"  Center Preserved: {result['center_preserved']}")
    print(f"  Overall Accuracy: {result['accuracy']:.2f}")
    print(f"Even Parity Accuracy: {result['even_parity_accuracy']:.2f}")
    print(f" Odd Parity Accuracy: {result['odd_parity_accuracy']:.2f}")