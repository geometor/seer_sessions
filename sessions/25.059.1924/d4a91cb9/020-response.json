{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Key Pixels:** Find the azure (8) and red (2) pixels in the input grid.\n\n2.  **Check for Direct Connection or No Connection:**\n    *   If the Manhattan distance between the azure and red pixels is 1, do not draw any connector. The output grid is identical to the input grid.\n    *   If the azure and red pixels are in the same row or column, and the distance is greater than one, draw a direct yellow (4) line *between* them by changing existing pixel values in the grid to yellow.\n\n3.  **Draw Adjacent Connector (L-Shaped):**\n     * If the azure and red pixels are *not* in the same row or column,\n       draw a yellow (4) line connecting *adjacent* pixels to create an \"L\" shaped connector.\n        * Find the adjacent pixels to azure and red.\n        * Find the shortest path by Manhattan distance between azure and red *adjacent* positions.\n        * Change the values of the pixels along this shortest adjacent path to yellow.\n\"\"\"\n\nimport numpy as np\n\ndef find_pixel(grid, color):\n    # Find the coordinates of a pixel of the specified color.\n    coords = np.where(grid == color)\n    if len(coords[0]) > 0:\n        return (coords[0][0], coords[1][0])  # Return first instance as (row, col)\n    return None\n\ndef calculate_distance(pixel1, pixel2):\n  #Calculate the Manhattan distance\n  if pixel1 is None or pixel2 is None:\n      return float('inf')\n  return abs(pixel1[0] - pixel2[0]) + abs(pixel1[1] - pixel2[1])\n\ndef get_adjacent_pixels(grid, pixel):\n    #returns list of adjacent pixels to a given pixel\n    adjacent_pixels = []\n    if pixel is not None:\n      for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n        r, c = pixel[0] + dr, pixel[1] + dc\n        if 0 <= r < grid.shape[0] and 0 <= c < grid.shape[1]:\n            adjacent_pixels.append((r,c))\n    return adjacent_pixels\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of the input_grid.\n    output_grid = np.copy(input_grid)\n\n    # Find the azure and red pixels.\n    azure_pixel = find_pixel(input_grid, 8)\n    red_pixel = find_pixel(input_grid, 2)\n\n    if azure_pixel is None or red_pixel is None:\n        return output_grid  # Return original if pixels are not found\n\n    # Calculate Manhattan Distance\n    distance = calculate_distance(azure_pixel, red_pixel)\n\n    #Check Distance = 1, return unchanged\n    if distance == 1:\n      return output_grid\n\n    # Check for direct connection\n    if azure_pixel[0] == red_pixel[0] or azure_pixel[1] == red_pixel[1]:\n        #draw direct line\n        if azure_pixel[0] == red_pixel[0]:  # Same row, draw horizontal line.\n            for col in range(min(azure_pixel[1], red_pixel[1]), max(azure_pixel[1], red_pixel[1])):\n                output_grid[azure_pixel[0], col] = 4\n        else: # Same column, draw a vertical line\n            for row in range(min(azure_pixel[0],red_pixel[0]), max(azure_pixel[0], red_pixel[0])):\n                output_grid[row, azure_pixel[1]] = 4\n    else:\n      #draw L shape connector\n      azure_adj = get_adjacent_pixels(input_grid, azure_pixel)\n      red_adj = get_adjacent_pixels(input_grid, red_pixel)\n\n      # Find the closest adjacent positions using Manhattan distance.\n      min_dist = float('inf')\n      best_azure_adj = None\n      best_red_adj = None\n\n      for a_adj in azure_adj:\n          for r_adj in red_adj:\n              dist = abs(a_adj[0] - r_adj[0]) + abs(a_adj[1] - r_adj[1])\n              if dist < min_dist:\n                  min_dist = dist\n                  best_azure_adj = a_adj\n                  best_red_adj = r_adj\n\n      if best_azure_adj is None or best_red_adj is None:\n          return output_grid\n\n      # Draw the connector line, always L-shape.\n      # First draw from azure adjacent point to the corner point\n      corner_row = best_red_adj[0]\n      corner_col = best_azure_adj[1]\n\n      if best_azure_adj[0] == corner_row: #horizontal segment first\n        for col in range(min(best_azure_adj[1], corner_col), max(best_azure_adj[1],corner_col)+1):\n          output_grid[best_azure_adj[0],col] = 4\n        #then draw vertical segment from the corner\n        for row in range(min(corner_row,best_red_adj[0]), max(corner_row,best_red_adj[0])+1):\n          output_grid[row, corner_col] = 4\n      else: #draw vertical segment first\n        for row in range(min(best_azure_adj[0],corner_row), max(best_azure_adj[0], corner_row)+1):\n          output_grid[row, best_azure_adj[1]] = 4\n        #then draw horizontal segment from the corner\n        for col in range(min(corner_col, best_red_adj[1]), max(corner_col,best_red_adj[1])+1):\n          output_grid[corner_row,col] = 4\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5535,
    "candidates_token_count": 1403,
    "total_token_count": 6938,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 15.791328,
  "response_file": "020-response.json"
}