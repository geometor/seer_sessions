import numpy as np

def find_all_pixels(grid, color):
    rows, cols = np.where(grid == color)
    return list(zip(rows, cols))

def is_adjacent(grid, row, col, color):
    rows, cols = grid.shape
    for r in range(max(0, row - 1), min(rows, row + 2)):
        for c in range(max(0, col - 1), min(cols, col + 2)):
            if (r != row or c != col) and grid[r, c] == color:
                return True
    return False

def analyze_example(input_grid, expected_output, actual_output):
    input_grid = np.array(input_grid)
    expected_output = np.array(expected_output)
    actual_output = np.array(actual_output)

    red_pixels = find_all_pixels(input_grid, 2)
    azure_pixels = find_all_pixels(input_grid, 8)
    
    print(f"Red Pixels: {red_pixels}")
    print(f"Azure Pixels: {azure_pixels}")

    diff = expected_output != actual_output
    diff_indices = np.where(diff)
    
    if diff.any():
        print("Differences between expected and actual output:")
        for r, c in zip(*diff_indices):
            print(f"  Row: {r}, Col: {c}, Expected: {expected_output[r, c]}, Actual: {actual_output[r, c]}")
    else:
        print("No differences found.")
    print("-" * 20)

task = {
  "train": [
      {
      "input": [[0, 0, 0, 0, 0, 0, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 0]],
      "output": [[0, 0, 0, 0, 0, 0, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 4, 4, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 0]]
    },
      {
      "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
      "output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0], [0, 0, 0, 0, 4, 4, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
    },
      {
      "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 0, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],
      "output": [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 0, 8, 0], [0, 0, 0, 4, 4, 4, 4, 4, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]
    },
        {
      "input": [[8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],
      "output": [[8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 4, 4, 4, 4, 0], [0, 0, 0, 2, 0, 0, 0, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]
    },
      {
       "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
       "output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0], [0, 0, 0, 0, 0, 0, 4, 4, 0, 0], [0, 0, 0, 0, 8, 0, 4, 4, 0, 0], [0, 2, 4, 4, 4, 4, 4, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }
  ]
}

import numpy as np

def transform(input_grid):
    # Initialize output_grid as a copy of input_grid
    output_grid = np.copy(input_grid)

    # Find all azure (8) pixels
    azure_pixels = find_all_pixels(input_grid, 8)

    # Find all red (2) pixels
    red_pixels = find_all_pixels(input_grid, 2)

    # Iterate over each red pixel
    for red_row, red_col in red_pixels:
        # Create a horizontal path of yellow (4) pixels to the right
        for col in range(red_col, input_grid.shape[1]):
            if is_adjacent(input_grid, red_row, col, 8): #check if current position is adj to azure
                break # Terminate if adjacent to azure
            if is_connected_to_yellow(input_grid, red_row, col, output_grid):
                break # Terminate if connects to another yellow pixel

            output_grid[red_row, col] = 4 #set to yellow


    return output_grid

for i, example in enumerate(task["train"]):
    print(f"Example {i+1}:")
    input_grid = example["input"]
    expected_output = example["output"]
    actual_output = transform(input_grid)
    analyze_example(input_grid, expected_output, actual_output)