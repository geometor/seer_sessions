{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. Find Red Objects: Identify all contiguous regions of '2' (red) pixels in the input grid.\n2. Count Red Objects: Determine the number of distinct red objects found.\n3. Transformation based on count:\n    * If one red object is found, replace it with a 2x2 block of '3' (green) pixels.  The top-left corner of the 2x2 block is placed at the top-left corner of the bounding box of the original red object.\n    * If two red objects are found:\n        * The first (top-most) red object is replaced by a single '3' (green) pixel.  The pixel is placed at the top-left corner of the bounding box of the first red object.\n        * The second (bottom-most) red object is replaced by a 2x2 block of '3' (green) pixels. The top-left corner of the 2x2 block is placed at the top-left corner of the bounding box of the second red object.\n4. Background Preservation: All non-red pixels from input should be zero in output.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, color):\n    \"\"\"Finds connected regions of the specified color.\"\"\"\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n\n    def dfs(row, col, current_object):\n        if (row < 0 or row >= grid.shape[0] or col < 0 or col >= grid.shape[1] or\n                visited[row, col] or grid[row, col] != color):\n            return\n        visited[row, col] = True\n        current_object.append((row, col))\n        dfs(row + 1, col, current_object)\n        dfs(row - 1, col, current_object)\n        dfs(row, col + 1, current_object)\n        dfs(row, col - 1, current_object)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] == color and not visited[row, col]:\n                current_object = []\n                dfs(row, col, current_object)\n                objects.append(current_object)\n    return objects\n\ndef get_bounding_box(obj):\n    \"\"\"Calculates the bounding box of an object.\"\"\"\n    min_row = min(pixel[0] for pixel in obj)\n    max_row = max(pixel[0] for pixel in obj)\n    min_col = min(pixel[1] for pixel in obj)\n    max_col = max(pixel[1] for pixel in obj)\n    return (min_row, min_col), (max_row, max_col)\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.zeros_like(input_grid)\n\n    # find red objects\n    red_objects = find_objects(input_grid, 2)\n    \n    # sort objects based on top-most row (y-coordinate)\n    red_objects.sort(key=lambda obj: min(pixel[0] for pixel in obj))\n\n    # change output pixels based on shape abstraction rules\n    if len(red_objects) == 1:\n        # Single object becomes 2x2 block at its top-left corner\n        top_left, _ = get_bounding_box(red_objects[0])\n        output_grid[top_left[0], top_left[1]] = 3\n        output_grid[top_left[0], top_left[1] + 1] = 3\n        output_grid[top_left[0] + 1, top_left[1]] = 3\n        output_grid[top_left[0] + 1, top_left[1] + 1] = 3\n        \n    elif len(red_objects) == 2:\n      # First shape becomes single point at its top-left corner\n        top_left_first, _ = get_bounding_box(red_objects[0])\n        output_grid[top_left_first[0], top_left_first[1]] = 3\n\n        # Second shape becomes 2x2 block at its top-left corner\n        top_left_second, _ = get_bounding_box(red_objects[1])\n        output_grid[top_left_second[0], top_left_second[1]] = 3\n        output_grid[top_left_second[0], top_left_second[1] + 1] = 3\n        output_grid[top_left_second[0] + 1, top_left_second[1]] = 3\n        output_grid[top_left_second[0] + 1, top_left_second[1] + 1] = 3\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3975,
    "candidates_token_count": 1129,
    "total_token_count": 5104,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 13.049873,
  "response_file": "006-response.json"
}