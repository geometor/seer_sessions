def grid_dims(grid):
    return len(grid), len(grid[0])

def find_color_position(grid, color):
    # Find the position of the first occurrence of a given color.
    for r, row in enumerate(grid):
        for c, cell in enumerate(row):
            if cell == color:
                return (r, c)  # Return row and column
    return None  # Color not found

task_data = {
    "train": [
        {
            "input": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 5, 5, 5, 5, 5, 5, 5, 0, 0],
                [0, 5, 5, 5, 5, 5, 5, 5, 0, 0],
                [0, 5, 5, 5, 5, 5, 5, 5, 0, 0],
                [0, 5, 5, 5, 5, 5, 5, 2, 0, 0],
                [0, 5, 5, 5, 5, 5, 5, 5, 0, 0],
                [0, 5, 5, 5, 5, 5, 5, 5, 0, 0],
                [0, 5, 5, 5, 5, 5, 5, 5, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            ],
            "output": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 5, 5, 5, 5, 5, 5, 5, 0, 0],
                [0, 5, 5, 5, 5, 5, 5, 5, 0, 0],
                [0, 5, 5, 5, 5, 5, 5, 5, 0, 0],
                [0, 5, 5, 5, 5, 5, 5, 2, 0, 0],
                [0, 5, 5, 5, 5, 5, 5, 5, 2, 0],
                [0, 5, 5, 5, 5, 5, 5, 5, 0, 2],
                [0, 5, 5, 5, 5, 5, 5, 5, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            ],
        },
        {
            "input": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 5, 5, 5, 5, 5, 5, 5, 5, 0],
                [0, 5, 5, 5, 5, 5, 5, 5, 5, 0],
                [0, 5, 5, 5, 5, 5, 5, 5, 5, 0],
                [0, 5, 5, 5, 5, 5, 5, 5, 2, 0],
                [0, 5, 5, 5, 5, 5, 5, 5, 5, 0],
                [0, 5, 5, 5, 5, 5, 5, 5, 5, 0],
                [0, 5, 5, 5, 5, 5, 5, 5, 5, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            ],
            "output": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 5, 5, 5, 5, 5, 5, 5, 5, 0],
                [0, 5, 5, 5, 5, 5, 5, 5, 5, 0],
                [0, 5, 5, 5, 5, 5, 5, 5, 5, 0],
                [0, 5, 5, 5, 5, 5, 5, 5, 2, 0],
                [0, 5, 5, 5, 5, 5, 5, 5, 5, 2],
                [0, 5, 5, 5, 5, 5, 5, 5, 5, 0],
                [0, 5, 5, 5, 5, 5, 5, 5, 5, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            ],
        },
        {
            "input": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 3, 3, 3, 3, 3, 3, 0, 0],
                [0, 0, 3, 3, 3, 3, 3, 3, 0, 0],
                [0, 0, 3, 3, 3, 3, 3, 3, 0, 0],
                [0, 0, 3, 3, 3, 3, 3, 2, 0, 0],
                [0, 0, 3, 3, 3, 3, 3, 3, 0, 0],
                [0, 0, 3, 3, 3, 3, 3, 3, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            ],
            "output": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 3, 3, 3, 3, 3, 3, 0, 0],
                [0, 0, 3, 3, 3, 3, 3, 3, 0, 0],
                [0, 0, 3, 3, 3, 3, 3, 3, 0, 0],
                [0, 0, 3, 3, 3, 3, 3, 2, 0, 0],
                [0, 0, 3, 3, 3, 3, 3, 3, 2, 0],
                [0, 0, 3, 3, 3, 3, 3, 3, 0, 2],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            ],
        },
        {
            "input": [
                [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
                [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
                [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
                [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
                [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
                [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
                [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
                [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
                [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2],
            ],
            "output": [
                [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
                [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
                [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
                [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
                [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
                [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
                [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
                [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
                [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2],
            ],
        }
    ]
}

results = []
for i, example in enumerate(task_data["train"]):
    input_grid = example["input"]
    output_grid = example["output"]
    input_dims = grid_dims(input_grid)
    output_dims = grid_dims(output_grid)
    red_pos_input = find_color_position(input_grid, 2)
    red_pos_output = find_color_position(output_grid, 2)

    results.append(
        {
            "example": i + 1,
            "input_dims": input_dims,
            "output_dims": output_dims,
            "red_pos_input": red_pos_input,
            "red_pos_output": red_pos_output,
        }
    )

print(results)