{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies distinct colored rectangles in the input grid and creates a new azure (color 8) rectangle in an empty space between them, connecting the existing rectangles.\n\"\"\"\n\nimport numpy as np\n\ndef find_rectangles(grid):\n    # Find distinct colored rectangles in the grid\n    rectangles = []\n    visited = np.zeros_like(grid, dtype=bool)\n\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            if not visited[r, c] and grid[r, c] != 0:\n                color = grid[r, c]\n                start_row, start_col = r, c\n                end_row, end_col = r, c\n\n                # Expand rectangle horizontally\n                while end_col + 1 < cols and grid[r, end_col + 1] == color and not visited[r, end_col+1]:\n                    end_col += 1\n\n                # Expand rectangle vertically\n                while end_row + 1 < rows and all(grid[end_row + 1, start_col:end_col + 1] == color) and not all(visited[end_row+1, start_col:end_col+1]):\n                    end_row += 1\n                \n                #mark visisted\n                for i in range(start_row, end_row + 1):\n                  for j in range(start_col, end_col + 1):\n                    visited[i,j] = True\n\n                rectangles.append({\n                    'color': color,\n                    'start_row': start_row,\n                    'start_col': start_col,\n                    'end_row': end_row,\n                    'end_col': end_col\n                })\n    return rectangles\n\ndef get_bridge_position(rect1, rect2, grid):\n  #try direct middle connection\n  row_mid = (rect1['end_row'] + rect2['start_row']) //2\n  col_mid = (rect1['end_col'] + rect2['start_col']) // 2\n\n  # if color != 0: offset by 1\n  if grid[row_mid, col_mid] != 0:\n    row_mid +=1\n    col_mid +=1\n  #determine width and height\n\n  height = 3 #fixed based on provided cases\n  width = 3\n\n  start_row = row_mid - height //2\n  start_col = col_mid - width // 2\n\n  return start_row, start_col, height, width\n\ndef transform(input_grid):\n    # Initialize output grid as a copy of the input grid\n    output_grid = np.copy(input_grid)\n\n    # Find distinct colored rectangles in the input grid\n    rectangles = find_rectangles(input_grid)\n\n    # Create a new azure rectangle connecting the existing rectangles, if more than one found.\n    if len(rectangles) >= 2:\n\n      #sort by col to create consistent bridge\n      rectangles.sort(key=lambda x: x['start_col'])\n      #find bridging location\n      bridge_start_row, bridge_start_col, height, width = get_bridge_position(rectangles[0], rectangles[1], input_grid)\n\n      #draw onto output\n      for r in range(bridge_start_row, bridge_start_row + height):\n        for c in range(bridge_start_col, bridge_start_col + width):\n          if 0 <= r < output_grid.shape[0] and 0 <= c < output_grid.shape[1]: #check bounds\n            output_grid[r, c] = 8\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2467,
    "candidates_token_count": 857,
    "total_token_count": 3324,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.330301,
  "response_file": "010-response.json"
}