import numpy as np

def get_inner_block_coords(grid, border_color):
    """Finds the coordinates of the inner block surrounded by a border."""
    rows, cols = grid.shape
    
    # Find top-left corner
    top_row, left_col = -1, -1
    for r in range(rows):
        for c in range(cols):
            if grid[r, c] == border_color:
                if (r+1 < rows and c+1 < cols and
                    np.any(grid[r+1,c] != border_color) and np.any(grid[r,c+1] != border_color) ):

                    top_row, left_col = r+1, c+1
                    break
        if top_row != -1:
            break

    # Find bottom-right corner
    bottom_row, right_col = -1, -1
    for r in range(rows - 1, -1, -1):
        for c in range(cols - 1, -1, -1):
           if grid[r, c] == border_color:
                if (r-1 > 0 and c-1 > 0 and
                    np.any(grid[r-1,c] != border_color) and np.any(grid[r,c-1] != border_color) ):
                    bottom_row, right_col = r-1, c-1
                    break
        if bottom_row != -1:
            break

    return top_row, left_col, bottom_row, right_col

def transform(input_grid):
    """Transforms the input grid according to the described rule."""
    output_grid = np.copy(input_grid)
    rows, cols = input_grid.shape

    # 1. Identify Boundaries (using azure border color)
    azure_color = 8
    top_row, left_col, bottom_row, right_col = get_inner_block_coords(input_grid, azure_color)
  
    # 2. Column-Based Transformation and adding additional row
    for c in range(left_col, right_col + 1):
        if (c - left_col) % 2 == 0:  # Odd columns (0-indexed)
             for r in range(top_row, bottom_row + 1):
                output_grid[r,c] = input_grid[r,c] # keep original layout
             output_grid[top_row -1, c] = 2 # top added
             output_grid[bottom_row + 1, c] = 2 # bottom added
        else: # Even columns
            for r in range(top_row, bottom_row + 1):
                output_grid[r, c] = input_grid[r,c] # keep original layout
            output_grid[top_row -1, c] = 2 # top added
            output_grid[bottom_row + 1, c] = 2 # bottom added


    #Add red corners
    output_grid[top_row -1, left_col-1] = 2
    output_grid[top_row -1, right_col+1] = 2
    output_grid[bottom_row+1, left_col-1] = 2
    output_grid[bottom_row+1, right_col+1] = 2
            

    return output_grid

def compare_grids(grid1, grid2):
    """Compares two grids and returns the differences."""
    if grid1.shape != grid2.shape:
        return "Different shapes"
    else:
        return np.sum(grid1 != grid2)

# Example data (replace with actual data from the task)
train_input_output_pairs = [
    (np.array([[8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 2, 2, 2, 2, 2, 2, 2, 8], [8, 2, 2, 2, 2, 2, 2, 2, 8], [8, 2, 2, 2, 2, 2, 2, 2, 8], [8, 2, 2, 2, 2, 2, 2, 2, 8], [8, 2, 2, 2, 2, 2, 2, 2, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8]]), np.array([[2, 8, 8, 8, 8, 8, 8, 8, 8, 2], [8, 2, 2, 2, 2, 2, 2, 2, 2, 8], [8, 2, 2, 2, 2, 2, 2, 2, 2, 8], [8, 2, 2, 2, 2, 2, 2, 2, 2, 8], [8, 2, 2, 2, 2, 2, 2, 2, 2, 8], [8, 2, 2, 2, 2, 2, 2, 2, 2, 8], [2, 8, 8, 8, 8, 8, 8, 8, 8, 2]])),
    (np.array([[8, 8, 8, 8, 8, 8, 8], [8, 2, 2, 2, 2, 2, 8], [8, 2, 2, 2, 2, 2, 8], [8, 2, 2, 2, 2, 2, 8], [8, 8, 8, 8, 8, 8, 8]]), np.array([[2, 8, 8, 8, 8, 8, 8, 2], [8, 2, 2, 2, 2, 2, 2, 8], [8, 2, 2, 2, 2, 2, 2, 8], [8, 2, 2, 2, 2, 2, 2, 8], [2, 8, 8, 8, 8, 8, 8, 2]])),
    (np.array([[8, 8, 8, 8, 8], [8, 2, 2, 2, 8], [8, 2, 2, 2, 8], [8, 8, 8, 8, 8]]), np.array([[2, 8, 8, 8, 8, 2], [8, 2, 2, 2, 2, 8], [8, 2, 2, 2, 2, 8], [2, 8, 8, 8, 8, 2]])),
]

results = []
for i, (input_grid, expected_output) in enumerate(train_input_output_pairs):
    transformed_grid = transform(input_grid)
    diff = compare_grids(transformed_grid, expected_output)
    results.append((i, diff, transformed_grid.shape, expected_output.shape))

print(results)
