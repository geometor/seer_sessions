import numpy as np

def analyze_example(input_grid, output_grid, predicted_grid):
    """Analyzes a single example and returns relevant metrics."""

    # Find gray area
    gray_bounds = find_object(input_grid, 5)
    if gray_bounds:
        gray_min_row, gray_min_col = gray_bounds[0]
        gray_max_row, gray_max_col = gray_bounds[1]
        gray_width = gray_max_col - gray_min_col + 1
        gray_height = gray_max_row - gray_min_row + 1
    else:
        gray_width = 0
        gray_height = 0

    # Top row colors (excluding white)
    top_row_colors = [color for color in np.unique(input_grid[0]) if color != 0]

    # Color widths in the entire input grid
    input_color_widths = {color: get_color_width(input_grid, color) for color in top_row_colors}

    # Total non-white width in input
    total_non_white_width = sum([get_color_width(input_grid, c) for c in np.unique(input_grid) if c!= 0])


    # Differences between predicted and actual output
    diff = (output_grid != predicted_grid).astype(int)
    diff_pixels = np.sum(diff)

    analysis = {
        "gray_bounds": gray_bounds,
        "gray_width": gray_width,
        "gray_height": gray_height,
        "top_row_colors": top_row_colors,
        "input_color_widths": input_color_widths,
        "total_non_white_width": total_non_white_width,
        "diff_pixels": diff_pixels,
        "output_shape": output_grid.shape,
        "predicted_shape": predicted_grid.shape,
    }
    return analysis

def find_object(grid, color):
    """Finds the bounding box of a contiguous region of the specified color."""
    rows, cols = np.where(grid == color)
    if len(rows) == 0:
        return None  # Color not found
    min_row, max_row = np.min(rows), np.max(rows)
    min_col, max_col = np.min(cols), np.max(cols)
    return (min_row, min_col), (max_row, max_col)

def get_color_width(grid, color):
    """Calculates the total contiguous width of a color in the grid."""
    bounds = find_object(grid, color)
    if bounds is None:
        return 0
    _, min_col = bounds[0]
    _, max_col = bounds[1]
    return max_col - min_col + 1

# Load the grids.  (Replace with actual grid data loading)
# Assuming the grids are available in a dictionary called 'grids'
# Example usage with the provided grids:
task_data = {
 "train": [
  {
   "input": [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 0, 0, 0, 0, 0, 0, 2, 0],
    [0, 1, 0, 0, 0, 0, 0, 0, 2, 0],
    [0, 1, 0, 0, 0, 0, 0, 0, 2, 0],
    [0, 1, 0, 0, 0, 5, 5, 5, 2, 0],
    [0, 1, 0, 0, 0, 5, 5, 5, 2, 0],
    [0, 1, 0, 0, 0, 5, 5, 5, 2, 0],
    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]
   ],
   "output": [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 0, 0, 0, 0, 0, 0, 2, 0],
    [0, 1, 0, 0, 0, 0, 0, 0, 2, 0],
    [0, 1, 0, 0, 0, 0, 0, 0, 2, 0],
    [0, 1, 0, 0, 0, 1, 1, 1, 2, 0],
    [0, 1, 0, 0, 0, 1, 1, 1, 2, 0],
    [0, 1, 0, 0, 0, 1, 1, 1, 2, 0],
    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]
   ]
  },
  {
   "input": [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 4, 4, 4, 4, 0, 0, 0],
    [0, 0, 0, 4, 4, 4, 4, 0, 0, 0],
    [0, 0, 0, 4, 4, 4, 4, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 3, 3, 3, 0, 0, 0, 0, 0],
    [0, 0, 3, 3, 3, 0, 0, 0, 0, 0],
    [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
    [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
    [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
   ],
   "output": [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 4, 4, 4, 4, 0, 0, 0],
    [0, 0, 0, 4, 4, 4, 4, 0, 0, 0],
    [0, 0, 0, 4, 4, 4, 4, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 3, 3, 3, 0, 0, 0, 0, 0],
    [0, 0, 3, 3, 3, 0, 0, 0, 0, 0],
    [4, 4, 4, 4, 4, 4, 4, 3, 3, 3],
    [4, 4, 4, 4, 4, 4, 4, 3, 3, 3],
    [4, 4, 4, 4, 4, 4, 4, 3, 3, 3]
   ]
  },
        {
            "input": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0],
                [0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0],
                [0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0]
            ],
            "output": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0],
                [0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0],
                [0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0]
            ]
        }
 ],
 "test": [
        {
            "input": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 6, 6, 6, 6, 6, 0, 8, 0, 0, 0, 0],
                [0, 0, 0, 0, 6, 6, 6, 6, 6, 0, 8, 0, 0, 0, 0],
                [0, 0, 0, 0, 6, 6, 6, 6, 6, 0, 8, 0, 0, 0, 0],
                [0, 0, 0, 0, 6, 6, 6, 6, 6, 0, 8, 0, 0, 0, 0],
                [0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0],
                [0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0],
                [0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0]
            ],
            "output": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 6, 6, 6, 6, 6, 0, 8, 0, 0, 0, 0],
                [0, 0, 0, 0, 6, 6, 6, 6, 6, 0, 8, 0, 0, 0, 0],
                [0, 0, 0, 0, 6, 6, 6, 6, 6, 0, 8, 0, 0, 0, 0],
                [0, 0, 0, 0, 6, 6, 6, 6, 6, 0, 8, 0, 0, 0, 0],
                [0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 8, 8, 0, 0, 0],
                [0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 8, 8, 0, 0, 0],
                [0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 8, 8, 0, 0, 0]
            ]
        }
    ]
}

for i in range(len(task_data["train"])):
    input_grid = np.array(task_data["train"][i]["input"])
    output_grid = np.array(task_data["train"][i]["output"])
    predicted_grid = transform(input_grid)  # Use the provided transform function
    analysis = analyze_example(input_grid, output_grid, predicted_grid)
    print(f"--- Example {i+1} ---")
    print(analysis)