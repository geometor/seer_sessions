def find_objects_and_report(grid, grid_name):
    """Finds objects and reports their properties."""
    objects = find_objects(grid)
    report = f"Objects in {grid_name}:\n"
    for i, obj in enumerate(objects):
        color = obj['color']
        pixels = obj['pixels']
        height, width = get_object_dimensions(pixels)
        bottom_edge = get_object_bottom_edge(pixels)
        min_row = min([p[0] for p in pixels])
        min_col = min([p[1] for p in pixels])
        max_row = max([p[0] for p in pixels])
        max_col = max([p[1] for p in pixels])

        report += f"  Object {i+1}:\n"
        report += f"    Color: {color} ({['white', 'blue', 'red', 'green', 'yellow', 'gray', 'magenta', 'orange', 'azure', 'maroon'][color]})\n"
        report += f"    Height: {height}\n"
        report += f"    Width: {width}\n"
        report += f"    Top Left Corner: ({min_row}, {min_col})\n"
        report += f"    Bottom Right Corner: ({max_row}, {max_col})\n"

    return report

# Load the example grids and compare the results
task_data = {
    "train": [
        {
            "input": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 7, 7, 7, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 6, 6, 6],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 9, 9, 9, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            ],
            "output": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 7, 7, 7, 0, 0, 0, 0, 0, 0],
                [0, 3, 3, 3, 0, 0, 0, 6, 6, 6],
                [0, 0, 0, 0, 0, 0, 0, 3, 3, 3],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 9, 9, 9, 0],
                [0, 0, 0, 0, 0, 0, 3, 3, 3, 0],
            ],
        },
        {
            "input": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 6, 6, 6, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            ],
            "output": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 6, 6, 6, 0, 0],
                [0, 0, 0, 0, 0, 3, 3, 3, 0, 0],
            ],
        },
        {
            "input": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 7, 7, 7, 7, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            ],
            "output": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 7, 7, 7, 7, 0, 0, 0],
                [0, 0, 0, 3, 3, 3, 3, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            ],
        },
        {
            "input": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 6, 6, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 9, 9, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
            ],
            "output": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 6, 6, 0, 0, 0, 0, 0, 0],
                [0, 3, 3, 0, 0, 0, 9, 9, 0],
                [0, 0, 0, 0, 0, 0, 3, 3, 0],
            ],
        }
    ],
    "test": [
        {
            "input": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 9, 9, 9, 9, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 7, 7, 7, 7, 7, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            ],
            "output": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 9, 9, 9, 9, 0],
                [0, 0, 0, 0, 0, 3, 3, 3, 3, 0],
                [0, 7, 7, 7, 7, 7, 0, 0, 0, 0],
                [0, 3, 3, 3, 3, 3, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            ]
        }
    ]
}

reports = ""
for example_index, example in enumerate(task_data["train"]):
    reports += find_objects_and_report(np.array(example["input"]), f"train[{example_index}][input]") + "\n"
    reports += find_objects_and_report(np.array(example["output"]), f"train[{example_index}][output]") + "\n"
reports += find_objects_and_report(np.array(task_data["test"][0]["input"]), f"test[0][input]") + "\n"

print(reports)
