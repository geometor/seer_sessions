import numpy as np

def find_bounding_box(grid, color):
    rows, cols = grid.shape
    min_row, min_col = rows, cols
    max_row, max_col = -1, -1

    for r in range(rows):
        for c in range(cols):
            if grid[r, c] == color:
                min_row = min(min_row, r)
                min_col = min(min_col, c)
                max_row = max(max_row, r)
                max_col = max(max_col, c)

    return min_row, min_col, max_row, max_col

def transform(input_grid):
    # Find the bounding box of the magenta (6) regions.
    min_row, min_col, max_row, max_col = find_bounding_box(input_grid, 6)

    # Extract region defined by color 6
    # use the corners and walk inward, use the first and last
    # rows/cols to calculate the dimensions of the sub region.

    top_row_index = -1
    for r in range(min_row, max_row + 1):
      row = input_grid[r]
      if 6 in row:
        top_row_index = r
        break

    bottom_row_index = -1
    for r in range(max_row, min_row -1, -1):
      row = input_grid[r]
      if 6 in row:
        bottom_row_index = r
        break

    left_col_index = -1
    for c in range(min_col, max_col + 1):
      col = input_grid[:,c]
      if 6 in col:
        left_col_index = c
        break

    right_col_index = -1
    for c in range(max_col, min_col - 1, -1):
      col = input_grid[:,c]
      if 6 in col:
        right_col_index = c
        break
    
    # calculate height and width based on location of 6 pixels
    height = bottom_row_index - top_row_index + 1
    width = right_col_index - left_col_index + 1

    # Initialize output_grid with the calculated dimensions, filled with 6s.
    output_grid = np.full((height, width), 6, dtype=int)

    # Iterate through the region of interest within the input grid and copy 0s.
    for r in range(height):
        for c in range(width):
            input_row = top_row_index + r
            input_col = left_col_index + c
            if input_grid[input_row, input_col] == 0:
                output_grid[r, c] = 0

    return output_grid

# Training examples (replace with actual data loading if needed)
train_pairs = [
    (np.array([[6, 6, 6, 6, 6, 6, 6, 6, 6],
              [6, 1, 1, 1, 1, 1, 1, 1, 6],
              [6, 1, 1, 1, 1, 1, 1, 1, 6],
              [6, 1, 1, 1, 0, 1, 1, 1, 6],
              [6, 1, 1, 1, 1, 1, 1, 1, 6],
              [6, 1, 1, 1, 1, 1, 1, 1, 6],
              [6, 6, 6, 6, 6, 6, 6, 6, 6]]),
     np.array([[6, 6, 6, 6, 6],
              [6, 6, 6, 6, 6],
              [6, 6, 0, 6, 6],
              [6, 6, 6, 6, 6],
              [6, 6, 6, 6, 6]])),
    
    (np.array([[6, 6, 6, 6, 6, 6, 6, 6],
              [6, 8, 8, 8, 8, 8, 8, 6],
              [6, 8, 8, 8, 8, 8, 8, 6],
              [6, 8, 8, 0, 8, 8, 8, 6],
              [6, 8, 8, 8, 8, 0, 8, 6],
              [6, 8, 8, 8, 8, 8, 8, 6],
              [6, 6, 6, 6, 6, 6, 6, 6]]),
     np.array([[6, 6, 6, 6, 6, 6],
              [6, 6, 6, 6, 6, 6],
              [6, 6, 0, 6, 6, 6],
              [6, 6, 6, 6, 0, 6],
              [6, 6, 6, 6, 6, 6]])),
    
    (np.array([[6, 6, 6, 6, 6, 6],
              [6, 1, 1, 1, 1, 6],
              [6, 1, 0, 1, 1, 6],
              [6, 1, 1, 1, 1, 6],
              [6, 1, 1, 1, 0, 6],
              [6, 6, 6, 6, 6, 6]]),
     np.array([[6, 6, 6, 6],
              [6, 0, 6, 6],
              [6, 6, 6, 6],
              [6, 6, 6, 0]]))
]

for i, (input_grid, expected_output) in enumerate(train_pairs):
    predicted_output = transform(input_grid)
    print(f"--- Example {i + 1} ---")
    print("Input:\n", input_grid)
    print("Expected Output:\n", expected_output)
    print("Predicted Output:\n", predicted_output)
    print("Correct Dimensions:", expected_output.shape == predicted_output.shape)
    print("Correct Values (element-wise):\n", np.array_equal(expected_output, predicted_output))
    print("\n")