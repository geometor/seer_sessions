import numpy as np

def get_metrics(grid):
    return {
        'size': grid.shape,
        'unique_colors': np.unique(grid).tolist(),
        'num_colors': len(np.unique(grid)),
    }

def compare_grids(grid1, grid2):
  if grid1.shape != grid2.shape:
    return False
  return np.array_equal(grid1, grid2)

def transform(input_grid):
    # initialize output_grid as a 5x5 array filled with 0s (white)
    output_grid = np.zeros((5, 5), dtype=int)

    # Iterate through the 5x5 region in the upper-left corner of the input
    for i in range(min(5, input_grid.shape[0])):
        for j in range(min(5, input_grid.shape[1])):
            # Check if the pixel's color in the input grid is 0 or 3
            if input_grid[i][j] == 0 or input_grid[i][j] == 3:
                # If so, copy the pixel to the output grid
                output_grid[i][j] = input_grid[i][j]
            else:
                # if not, pixel becomes 0
                output_grid[i][j] = 0

    return output_grid

task_data = {
    'train': [
        {
            'input': np.array([[3, 0, 3, 0, 3, 5, 5, 5],
                               [0, 3, 0, 3, 0, 5, 5, 5],
                               [3, 0, 3, 0, 3, 5, 5, 5],
                               [0, 3, 0, 3, 0, 5, 5, 5],
                               [3, 0, 3, 0, 3, 5, 5, 5],
                               [5, 5, 5, 5, 5, 5, 5, 5],
                               [5, 5, 5, 5, 5, 5, 5, 5],
                               [5, 5, 5, 5, 5, 5, 5, 5]]),
            'output': np.array([[3, 0, 3, 0, 3],
                                [0, 3, 0, 3, 0],
                                [3, 0, 3, 0, 3],
                                [0, 3, 0, 3, 0],
                                [3, 0, 3, 0, 3]])
        },
        {
            'input': np.array([[5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                              [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                              [5, 5, 3, 0, 3, 0, 3, 5, 5, 5],
                              [5, 5, 0, 3, 0, 3, 0, 5, 5, 5],
                              [5, 5, 3, 0, 3, 0, 3, 5, 5, 5],
                              [5, 5, 0, 3, 0, 3, 0, 5, 5, 5],
                              [5, 5, 3, 0, 3, 0, 3, 5, 5, 5],
                              [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                              [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                              [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]]),
            'output': np.array([[0, 0, 0, 0, 0],
                                [0, 0, 3, 0, 3],
                                [0, 3, 0, 3, 0],
                                [3, 0, 3, 0, 3],
                                [0, 3, 0, 3, 0]])
        },
        {
            'input': np.array([[5, 5, 5, 5, 5, 5, 5, 5, 5],
                              [5, 5, 5, 5, 5, 5, 5, 5, 5],
                              [5, 5, 5, 5, 5, 5, 5, 5, 5],
                              [5, 5, 5, 5, 5, 5, 5, 5, 5],
                              [5, 5, 5, 5, 3, 0, 5, 5, 5],
                              [5, 5, 5, 5, 0, 3, 5, 5, 5],
                              [5, 5, 5, 5, 5, 5, 5, 5, 5],
                              [5, 5, 5, 5, 5, 5, 5, 5, 5],
                              [5, 5, 5, 5, 5, 5, 5, 5, 5]]),
            'output': np.array([[0, 0, 0, 0, 0],
                                [0, 0, 0, 0, 0],
                                [0, 0, 0, 0, 0],
                                [0, 0, 3, 0, 0],
                                [0, 0, 0, 3, 0]])
        },
        {
            'input': np.array([[5, 5, 5, 5, 5, 5, 5],
                                [5, 5, 5, 5, 3, 5, 5],
                                [5, 5, 5, 5, 0, 5, 5],
                                [5, 5, 5, 5, 3, 5, 5],
                                [5, 5, 5, 5, 5, 5, 5]]),
            'output': np.array([[0, 0, 0, 0, 0],
                                [0, 0, 3, 0, 0],
                                [0, 0, 0, 0, 0],
                                [0, 0, 3, 0, 0],
                                [0, 0, 0, 0, 0]])
        }

    ]
}

results = []
for i, example in enumerate(task_data['train']):
    input_metrics = get_metrics(example['input'])
    output_metrics = get_metrics(example['output'])
    code_output = transform(example['input'])
    match = compare_grids(code_output, example['output'])

    # find location of 3 and 0
    coords = np.where((example['input'] == 3) | (example['input'] == 0))
    if len(coords[0]) > 0:
      # take slice
      min_row, min_col = np.min(coords, axis=1)
      max_row, max_col = np.max(coords, axis=1)
      subgrid_size = (max_row - min_row + 1, max_col - min_col + 1)
      subgrid = example['input'][min_row:max_row + 1, min_col:max_col + 1]
    else:
       subgrid_size = (0,0)
       subgrid = np.array([])
    subgrid_metrics = get_metrics(subgrid)

    results.append({
        'example': i + 1,
        'input': input_metrics,
        'output': output_metrics,
        'code_output_match': match,
        'subgrid_size': subgrid_size,
        'subgrid': subgrid_metrics
    })

for result in results:
    print(result)