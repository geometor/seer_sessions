{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Find Initial Red:** Identify all red (2) pixels in the input grid.\n\n2.  **Extend Red Vertically:** For *each* initial red pixel, create a vertical line of red pixels extending upwards and downwards to the top and bottom edges of the grid. This forms the `red_line` objects.\n\n3.  **Transform Azure:** Identify all azure (8) pixels. For *each* azure pixel:\n    *   If the azure pixel is adjacent (horizontally or vertically, but *not* diagonally) to *any* pixel in a `red_line`, change the azure pixel to red (2).\n    *   Otherwise, change the azure pixel to white (0).\n\"\"\"\n\nimport numpy as np\n\ndef get_pixels_by_color(grid, color):\n    \"\"\"Finds the coordinates of all pixels of a specific color in the grid.\"\"\"\n    pixels = []\n    for row_index, row in enumerate(grid):\n        for col_index, pixel in enumerate(row):\n            if pixel == color:\n                pixels.append((row_index, col_index))\n    return pixels\n\ndef is_adjacent(coord1, coord2):\n    \"\"\"Checks if two coordinates are adjacent (not diagonally).\"\"\"\n    row1, col1 = coord1\n    row2, col2 = coord2\n    return (abs(row1 - row2) <= 1 and col1 == col2) or \\\n           (abs(col1 - col2) <= 1 and row1 == row2)\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of the input_grid\n    output_grid = np.copy(input_grid)\n    grid_height = len(input_grid)\n\n    # 1. Find Initial Red\n    initial_red_pixels = get_pixels_by_color(input_grid, 2)\n\n    # 2. Extend Red Vertically\n    for red_pixel in initial_red_pixels:\n        row, col = red_pixel\n        # Extend upwards\n        for r in range(row - 1, -1, -1):\n            output_grid[r, col] = 2\n        # Extend downwards\n        for r in range(row + 1, grid_height):\n            output_grid[r, col] = 2\n\n    # 3. Transform Azure\n    azure_pixels = get_pixels_by_color(output_grid, 8)  # Get azure pixels from the *modified* grid\n    for azure_pixel in azure_pixels:\n        row, col = azure_pixel\n        adjacent_to_red_line = False\n        # Check adjacency to any red pixel (which will now include the extended lines)\n        for r in range(grid_height):\n            if is_adjacent((row, col), (r, col)) and output_grid[r, col] == 2:\n                adjacent_to_red_line = True\n                break  # Optimization: Once found, no need to check further\n            if is_adjacent((row, col), (row,r)) and output_grid[row, r] == 2:\n                adjacent_to_red_line = True\n                break\n        if adjacent_to_red_line:\n            output_grid[row, col] = 2\n        else:\n            output_grid[row, col] = 0\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5344,
    "candidates_token_count": 771,
    "total_token_count": 6115,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.428353,
  "response_file": "006-response.json"
}