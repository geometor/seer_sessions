import numpy as np

# Example data grids (replace with actual data)
example_data = [
    {
        "input": np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 8, 0, 0, 0, 8, 0],
                           [0, 0, 0, 8, 0, 2, 0, 8, 0],
                           [0, 0, 0, 8, 0, 0, 0, 8, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
        "output": np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 8, 0, 0, 0, 8, 0],
                            [0, 0, 0, 8, 2, 2, 2, 8, 0],
                            [0, 0, 0, 8, 0, 0, 0, 8, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
        "result": np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 8, 0, 0, 0, 8, 0],
                            [0, 0, 0, 8, 2, 2, 2, 8, 0],
                            [0, 0, 0, 8, 0, 0, 0, 8, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
    },
     {
        "input": np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 8, 0, 0, 0, 8, 0],
                           [0, 0, 0, 8, 2, 2, 0, 8, 0],
                           [0, 0, 0, 8, 0, 0, 0, 8, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
        "output": np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 8, 0, 0, 0, 8, 0],
                            [0, 0, 0, 8, 2, 2, 2, 8, 0],
                            [0, 0, 0, 8, 8, 0, 0, 8, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
        "result": np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 8, 0, 0, 0, 8, 0],
                            [0, 0, 0, 8, 2, 2, 2, 8, 0],
                            [0, 0, 0, 8, 0, 0, 0, 8, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
    },
    {
        "input": np.array([[0, 0, 0, 8, 0, 0, 0, 8, 0],
                           [0, 0, 0, 8, 0, 0, 0, 8, 0],
                           [0, 0, 0, 8, 2, 0, 0, 8, 0],
                           [0, 0, 0, 8, 0, 0, 0, 8, 0],
                           [0, 0, 0, 8, 0, 0, 0, 8, 0]]),
        "output": np.array([[0, 0, 0, 8, 0, 0, 0, 8, 0],
                            [0, 0, 0, 8, 0, 0, 0, 8, 0],
                            [0, 0, 0, 8, 2, 2, 2, 8, 0],
                            [0, 0, 0, 8, 8, 0, 0, 8, 0],
                            [0, 0, 0, 8, 0, 0, 0, 8, 0]]),
        "result": np.array([[0, 0, 0, 8, 0, 0, 0, 8, 0],
                            [0, 0, 0, 8, 0, 0, 0, 8, 0],
                            [0, 0, 0, 8, 2, 2, 2, 8, 0],
                            [0, 0, 0, 8, 0, 0, 0, 8, 0],
                            [0, 0, 0, 8, 0, 0, 0, 8, 0]]),
    }
]

for i, example in enumerate(example_data):
    input_grid = example["input"]
    output_grid = example["output"]
    result_grid = example["result"]
    print(f"Example {i+1}:")
    print(f"  Input shape: {input_grid.shape}")
    print(f"  Output shape: {output_grid.shape}")
    print(f"  Result shape: {result_grid.shape}")

    # Find azure lines in input
    azure_lines_input = []
    for col in range(input_grid.shape[1]):
        if all(input_grid[:, col] == 8):
            azure_lines_input.append(col)
    print(f"  Azure lines in input: {azure_lines_input}")

     # find azure lines in output
    azure_lines_output = []
    for col in range(output_grid.shape[1]):
        if all(output_grid[:, col] == 8):
            azure_lines_output.append(col)
    print(f"  Azure lines in output: {azure_lines_output}")

    # Find red pixels in input
    red_pixels_input = []
    for row in range(input_grid.shape[0]):
        for col in range(input_grid.shape[1]):
            if input_grid[row, col] == 2:
                red_pixels_input.append((row, col))
    print(f"  Red pixel positions in input: {red_pixels_input}")

     # Find red pixels in output
    red_pixels_output = []
    for row in range(output_grid.shape[0]):
        for col in range(output_grid.shape[1]):
            if output_grid[row, col] == 2:
                red_pixels_output.append((row, col))
    print(f"  Red pixel positions in output: {red_pixels_output}")

    print(f"  Correct: {np.array_equal(output_grid, result_grid)}")
    print("-" * 20)