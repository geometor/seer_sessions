facts:
  - object: input_grid
    type: grid
    properties:
      dimensions: [height, width]
      pixels:
        value_range: [0, 1]
        majority_value: 0
        minority_value: 1
        minority_count: 1
        minority_position: [row, col] # bottom row index
  - object: output_grid
    type: grid
    properties:
      dimensions: [height, width] # same as input
      pixels:
        value_range: [1, 8]
        alternating_pattern: true
        pattern_start: determined_by_input_minority_position
  - transformation:
      type: replacement and pattern generation
      input: input_grid
      output: output_grid
      rules:
        - replace_value:
          original: 0
          new: [8, 1] # alternating
        - pattern_logic:
            row_start:  #Alternating pattern in a row determined by position of '1'
                if (input.minority_position.col + row_index) % 2 == 0: start with 8
                else: start with 1
            alternation: [8, 1]
