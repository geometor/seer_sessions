import numpy as np

def describe_grid(grid):
    rows, cols = grid.shape
    description = f"Grid size: {rows}x{cols}\n"
    unique_colors = np.unique(grid)
    description += f"Colors present: {unique_colors}\n"
    #count non-zero
    count = np.count_nonzero(grid)
    description += f"Non-zero pixels: {count}\n"

    return description

def compare_grids(grid1, grid2):
    if grid1.shape != grid2.shape:
        return "Grids have different shapes."
    else:
        diff = grid1 != grid2
        num_diff = np.sum(diff)
        return f"Number of different pixels: {num_diff}"
def get_border_pixels(grid):
    """Returns a dictionary of border pixels."""
    rows, cols = grid.shape
    border = {
      "top": [(0,j) for j in range(cols)],
      "bottom": [(rows-1, j) for j in range(cols)],
      "left": [(i,0) for i in range(rows)],
      "right": [(i, cols-1) for i in range(rows)],
    }

    return border

def describe_border(grid):
   border_pixels = get_border_pixels(grid)
   all_border_pixels = []
   for positions in border_pixels.values():
      all_border_pixels.extend(positions)

   colors = {}
   for r,c in all_border_pixels:
      color = grid[r,c]
      if color not in colors:
         colors[color] = 0
      colors[color] += 1
   return f"Border Colors: {colors}"
   

examples = [
  {
    "input": np.array([
      [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
      [5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5],
      [5, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 5],
      [5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5],
      [5, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 5],
      [5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5],
      [5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5],
      [5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5],
      [5, 0, 0, 8, 0, 1, 0, 0, 0, 0, 0, 5],
      [5, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5],
      [5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5],
      [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
    ]),
    "output": np.array([
      [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
      [5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5],
      [5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5],
      [5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5],
      [5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5],
      [5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5],
      [5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5],
      [5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5],
      [5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5],
      [5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5],
      [5, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 5],
      [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
    ])
  },
  {
    "input": np.array([
     [8, 8, 8, 8, 8, 8, 8, 8, 8],
     [8, 0, 0, 0, 0, 0, 0, 0, 8],
     [8, 0, 0, 6, 0, 0, 0, 0, 8],
     [8, 0, 0, 0, 0, 0, 0, 0, 8],
     [8, 0, 0, 0, 0, 0, 0, 0, 8],
     [8, 0, 0, 0, 0, 0, 5, 0, 8],
     [8, 8, 8, 8, 8, 8, 8, 8, 8],
    ]),
    "output": np.array([
     [8, 8, 8, 8, 8, 8, 8, 8, 8],
     [8, 0, 0, 0, 0, 0, 0, 0, 8],
     [8, 0, 0, 0, 0, 0, 0, 0, 8],
     [8, 0, 0, 0, 0, 0, 0, 0, 8],
     [8, 0, 0, 0, 0, 0, 0, 0, 8],
     [8, 1, 0, 0, 0, 0, 0, 5, 8],
     [8, 8, 8, 8, 8, 8, 8, 8, 8],
    ]),
  },
    {
    "input": np.array([
     [4, 4, 4, 4, 4, 4, 4],
     [4, 0, 0, 0, 0, 0, 4],
     [4, 0, 0, 0, 7, 0, 4],
     [4, 0, 0, 0, 0, 0, 4],
     [4, 4, 4, 4, 4, 4, 4],
    ]),
        "output": np.array([
     [4, 4, 4, 4, 4, 4, 4],
     [4, 0, 0, 0, 0, 0, 4],
     [4, 0, 0, 0, 0, 7, 4],
     [4, 0, 0, 0, 0, 0, 4],
     [4, 4, 4, 4, 4, 4, 4],
    ]),
  },
]

for i, example in enumerate(examples):
    print(f"Example {i+1}:")
    print("Input:")
    print(describe_grid(example["input"]))
    print(describe_border(example["input"]))
    print("Output:")
    print(describe_grid(example["output"]))
    print(describe_border(example["output"]))
    print("Comparison:")
    print(compare_grids(example["input"], example["output"]))
    print("-" * 20)