{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation rule identifies a shape composed of connected red and green pixels, \ncreates a bounding box around it, shifts the box one row down and one column left,\nand recolors the interior of the translated box. The top-right pixel of this new shape is red,\nand the rest are blue.\n\"\"\"\n\nimport numpy as np\n\ndef get_colored_shape(input_grid):\n    \"\"\"\n    Finds the largest contiguous block of connected red and green pixels.\n    Pixels are considered connected if they touch directly or diagonally.\n    \"\"\"\n    red = 2\n    green = 3\n    rows, cols = np.where((input_grid == red) | (input_grid == green))\n    pixels = list(zip(rows, cols))\n\n    if not pixels:\n        return []\n\n    # create adjacency matrix, where 1 is adjacent and 0 is not\n    adj_matrix = np.zeros((len(pixels), len(pixels)), dtype=int)\n    for i in range(len(pixels)):\n        for j in range(i + 1, len(pixels)):\n            row_i, col_i = pixels[i]\n            row_j, col_j = pixels[j]\n            # two pixels are defined as adjacent if they are touching directly or diagonally\n            if abs(row_i - row_j) <= 1 and abs(col_i - col_j) <= 1:\n                adj_matrix[i, j] = adj_matrix[j, i] = 1\n    \n    # perform depth first search to find largest cluster of 1's\n    visited = [False] * len(pixels)\n    def depth_first_search(index, cluster):\n        visited[index] = True\n        cluster.append(pixels[index])\n        for i in range(len(pixels)):\n            if adj_matrix[index, i] == 1 and not visited[i]:\n                depth_first_search(i, cluster)\n        \n    # find clusters\n    clusters = []\n    for i in range(len(pixels)):\n        if not visited[i]:\n            current_cluster = []\n            depth_first_search(i, current_cluster)\n            clusters.append(current_cluster)\n            \n    # sort and return largest cluster of coordinates\n    if len(clusters) > 0:\n      clusters.sort(key=len, reverse=True)\n      return clusters[0]\n    else:\n      return []\n\ndef create_bounding_box(coords):\n    \"\"\"Creates a bounding box around the given coordinates.\"\"\"\n    if not coords:\n        return None\n    min_row = min(r for r, _ in coords)\n    max_row = max(r for r, _ in coords)\n    min_col = min(c for _, c in coords)\n    max_col = max(c for _, c in coords)\n    return (min_row, min_col), (max_row, max_col)\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.zeros_like(input_grid)\n\n    # get the colored shape\n    shape = get_colored_shape(input_grid)\n\n    if shape:\n        # create bounding box\n        box_start, box_end = create_bounding_box(shape)\n\n        # translate bounding box\n        t_row = box_start[0] + 1\n        t_col = box_start[1] - 1\n        t_box_end_row = box_end[0] + 1\n        t_box_end_col = box_end[1] - 1\n\n        # recolor inside translated box\n        for r in range(t_row, t_box_end_row + 1):\n            for c in range(t_col, t_box_end_col + 1):\n                if r == t_row and c == t_col + 1:\n                  output_grid[r][c] = 2 # set top-right to red\n                elif r >= 0 and c >= 0:\n                  output_grid[r][c] = 1  # set remaining to blue\n\n    # copy other non-white pixels except original shape\n    for r in range(input_grid.shape[0]):\n        for c in range(input_grid.shape[1]):\n            if input_grid[r][c] != 0 and (r, c) not in shape:\n                output_grid[r][c] = input_grid[r][c]\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7207,
    "candidates_token_count": 1046,
    "total_token_count": 8253,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.584604,
  "response_file": "012-response.json"
}