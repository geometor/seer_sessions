import numpy as np

def analyze_example(input_grid, output_grid):
    input_grid = np.array(input_grid)
    output_grid = np.array(output_grid)

    changed_rows = []
    for i in range(input_grid.shape[0]):
        if not np.array_equal(input_grid[i], output_grid[i]):
            changed_rows.append(i)

    print(f"Changed Rows: {changed_rows}")
    input_unique_colors = np.unique(input_grid)
    output_unique_colors = np.unique(output_grid)

    print(f"Input unique colors: {input_unique_colors}")
    print(f"Output unique colors: {output_unique_colors}")

    # identify source of repeated pattern - look at last two rows
    pattern = input_grid[-2:, :]
    pattern_unique_colors = np.unique(pattern)

    print(f"Pattern unique colors (last 2 rows): {pattern_unique_colors}")

    # Check if output uses same colors
    output_matches_pattern = all([color in pattern_unique_colors for color in output_unique_colors])
    print(f"Output matches pattern colors: {output_matches_pattern}")

    # Determine how much of the pattern is used
    pattern_height, pattern_width = pattern.shape
    print(f"Pattern width: {pattern_width}")

    # Check if the modified rows match the pattern.
    if changed_rows:
      for row in changed_rows:
        row_matches = False
        for i in range(0, pattern_width): # accounts for partial widths
          if np.array_equal(output_grid[row], np.tile(pattern[0 if row % 2 == 0 else 1], output_grid.shape[1])[:output_grid.shape[1]]):
              row_matches = True
        print(f"Row {row} matches the extended pattern: {row_matches}")

# dummy data for demonstration - these values will be replaced in the loop
example_input = [[1, 2], [3, 4]]
example_output = [[1, 2], [3, 4]]

analyze_example(example_input, example_output)