objects:
  - name: input_grid
    type: grid
    properties:
      height: variable
      width: variable
      pixels:
        values: [0, 4] # white, yellow
        colors: [white, yellow]

  - name: output_grid
    type: grid
    properties:
      height: derived
      width: 2 * input_grid.width
      pixels:
        values: [0, 4, 8] # white, yellow, azure
        colors: [white, yellow, azure]

  - name: white_block
    type: block
    properties:
      size: 2x2
      pattern:
        - [8, 0]
        - [0, 8]

  - name: yellow_block
    type: block
    properties:
      size: 2x2
      pattern:
        - [4, 4]
        - [4, 4]

actions:
  - name: expand_white
    input: white pixel (input_grid)
    output: white_block (output_grid)
    rule: "replace each white pixel with a 2x2 block: [[8, 0], [0, 8]]"

  - name: expand_yellow
    input: yellow pixel (input_grid)
    output: yellow_block (output_grid)
    rule: "replace each yellow pixel with a 2x2 block: [[4, 4], [4, 4]]"
  - name: position_yellow_block
    input: yellow pixel coordinates (input_grid), input_grid height
    output: yellow block (output_grid), output_grid

    rule: >
        If a yellow pixel exists in the input grid, a yellow 2x2 block will be placed in the output.
        The yellow block's row in the output depends upon the presence of white pixels in the same row as the yellow pixel:
          - if there are no other white pixels in the same row:
              yellow_block_row = 0
          - regardless of the row position of the yellow pixel, the output will always have at least 2 rows
        The yellow block's top-left corner column is always 2 * input_column.
  - name: generate_output
    input: input_grid, white_blocks, yellow_block (optional)
    output: output_grid
    rule: >
      Create an output grid where:
        - Width is twice the input grid's width.
        - Height is determined by the input grid and presence of yellow.
        - White pixels are expanded into white_blocks.
        - If yellow exists, the yellow_block takes precedence, overwriting any overlapping part of expanded white blocks.
        - The row position of yellow blocks and expanded white block placement are interwoven, as described by position_yellow_block
