{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Magenta Pixels:** Locate all magenta (6) pixels in the input grid.\n\n2.  **Duplicate Magenta Pixels:** For *each* magenta pixel in the input grid, create a duplicate magenta pixel in the output grid. The duplicate's row is the *same* as the original.  The duplicate's column is the original magenta pixel's column plus a fixed horizontal offset. The horizontal offset equals the difference between the max and min column that has a magenta pixel.\n\n3.  **Azure Fill:** For each row where there are both original and duplicated magenta pixels:\n    * find the column of the leftmost and rightmost magenta pixel (original or duplicate)\n    * fill all pixels between the original and duplicated magenta pixels with azure (8), inclusive, in that row.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    # initialize output_grid, same size as input\n    input_height, input_width = input_grid.shape\n    output_grid = np.zeros((input_height, input_width), dtype=int)\n\n    # find original magenta pixels\n    magenta_pixels = []\n    for row in range(input_height):\n        for col in range(input_width):\n            if input_grid[row, col] == 6:\n                magenta_pixels.append((row, col))\n\n    # calculate horizontal offset\n    if magenta_pixels:\n      min_col = min( [ col for _, col in magenta_pixels ] )\n      max_col = max( [ col for _, col in magenta_pixels ] )\n      horizontal_offset = max_col - min_col\n    else:\n      horizontal_offset = 0\n    \n    # duplicate magenta pixels and azure fill\n    for row, col in magenta_pixels:\n        # original magenta\n        output_grid[row, col] = 6\n        # duplicate magenta\n        new_col = col + horizontal_offset\n        if new_col < input_width:\n          output_grid[row,new_col] = 6\n\n          # azure fill between\n          for fill_col in range(min(col,new_col), max(col,new_col)+1 ):\n            if output_grid[row,fill_col] == 0:\n              output_grid[row, fill_col] = 8\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4247,
    "candidates_token_count": 531,
    "total_token_count": 4778,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 5.494782,
  "response_file": "010-response.json"
}