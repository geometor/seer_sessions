{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. **Identify Target:** Find all pixels of the target color (red, denoted as 2) within the input grid.\n2. **Check for Target Presence:** If no pixels of the target color are found, return an output grid that matches the input grid size and is entirely filled with the background color (white, denoted as 0).\n3. **Bounding Box:** If target color pixels are present, determine the bounding box around the target pixels.\n4. **Extract Target Object**: Create new grid using the bounding box.\n5. **Reduce:** Create an output grid where the dimensions are equal to the dimensions of the extracted grid from the previous step.\n6. **Transfer and set color**: Copy the extracted grid to the output grid.\n7. **Replace non target:** Replace all non-target color pixels in the output grid with the background color (white, 0).\n\"\"\"\n\nimport numpy as np\n\ndef get_bounding_box(grid, target_color):\n    \"\"\"\n    Finds the bounding box of the target color in the grid.\n    Returns None if no target color is found.\n    \"\"\"\n    coords = np.argwhere(grid == target_color)\n    if coords.size == 0:\n        return None\n    min_row, min_col = coords.min(axis=0)\n    max_row, max_col = coords.max(axis=0)\n    return (min_row, min_col), (max_row, max_col)\n\ndef extract_object(grid, target_color):\n    \"\"\"\n    Extracts the object defined by the target color.\n    Returns an empty array if no target color pixels are present.\n    \"\"\"\n    bbox = get_bounding_box(grid, target_color)\n    if bbox is None:\n        return np.zeros((0, 0), dtype=int)  # Return an empty array\n    (min_row, min_col), (max_row, max_col) = bbox\n    return grid[min_row:max_row+1, min_col:max_col+1]\n\ndef replace_non_target(grid, target_color, background_color):\n    \"\"\"\n    Replaces all pixels in the grid that are not the target color with the background color.\n    \"\"\"\n    return np.where(grid == target_color, target_color, background_color)\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by extracting, reducing, and centering a target color (red) shape.\n    \"\"\"\n    target_color = 2  # Red\n    background_color = 0  # White\n    \n    # Check for Target Presence\n    if not np.any(input_grid == target_color):\n        return np.full(input_grid.shape, background_color, dtype=int)\n    \n    # Extract Target Object\n    extracted_object = extract_object(input_grid, target_color)\n\n    # Reduce/Transfer: Output grid has same dimensions as extracted object\n    output_grid = np.copy(extracted_object)\n\n    # Replace Non-Target\n    output_grid = replace_non_target(output_grid, target_color, background_color)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5300,
    "candidates_token_count": 726,
    "total_token_count": 6026,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.678248,
  "response_file": "018-response.json"
}