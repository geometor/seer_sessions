import numpy as np

def analyze_grid(grid, color):
    pixels = np.argwhere(grid == color)
    count = len(pixels)
    return count, pixels

def check_adjacency(grid, r, c, target_color):
    adjacencies = 0
    rows, cols = grid.shape
    
    # Check all 8 neighbors
    for i in range(max(0, r-1), min(rows, r+2)):
        for j in range(max(0, c-1), min(cols, c+2)):
            if (i != r or j != c) and grid[i, j] == target_color:
                adjacencies+=1
    return adjacencies

def analyze_examples(examples):
    results = []
    for i, example in enumerate(examples):
        input_grid = example['input']
        output_grid = example['output']

        count_8_input, pixels_8_input = analyze_grid(input_grid, 8)
        count_1_input, _ = analyze_grid(input_grid, 1)
        count_8_output, pixels_8_output = analyze_grid(output_grid, 8)
        count_1_output, _ = analyze_grid(output_grid, 1)

        adjacent_8_to_1_input = 0
        for r,c in pixels_8_input:
            if check_adjacency(input_grid, r, c, 1) > 0:
                adjacent_8_to_1_input +=1

        results.append({
            'example': i,
            'input_8_count': count_8_input,
            'input_1_count': count_1_input,
            'input_8_adjacent_to_1_count': adjacent_8_to_1_input,
            'output_8_count': count_8_output,
            'output_1_count': count_1_output,

        })
    return results

# Assuming 'task' is defined elsewhere and contains the training examples.
results = analyze_examples(task['train'])
print(results)