{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms input grids containing gray (5) objects into output grids with blue (1) and red (2) objects.\nThe gray objects are replaced by either blue or red objects, maintaining the original shape and position.\nThe background remains white (0).\nThe choice between blue and red for a gray object depends on its connectivity to other gray objects.\nAdjacent gray objects have different colors, determined using a Breadth-First Search on an adjacency graph.\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef find_objects(grid, color):\n    \"\"\"Finds contiguous regions of the specified color in the grid.\"\"\"\n    visited = set()\n    objects = []\n\n    def is_valid(x, y):\n        return 0 <= x < grid.shape[0] and 0 <= y < grid.shape[1]\n\n    def dfs(x, y, current_object):\n        if (x, y) in visited or not is_valid(x, y) or grid[x, y] != color:\n            return\n        visited.add((x, y))\n        current_object.append((x, y))\n\n        # Check adjacent cells (not diagonally)\n        dfs(x + 1, y, current_object)\n        dfs(x - 1, y, current_object)\n        dfs(x, y + 1, current_object)\n        dfs(x, y - 1, current_object)\n\n    for x in range(grid.shape[0]):\n        for y in range(grid.shape[1]):\n            if grid[x, y] == color and (x, y) not in visited:\n                current_object = []\n                dfs(x, y, current_object)\n                objects.append(current_object)\n    return objects\n\ndef build_adjacency_graph(objects):\n    \"\"\"Builds an adjacency graph of the objects.\"\"\"\n    graph = {i: [] for i in range(len(objects))}\n    for i, obj1 in enumerate(objects):\n        for j, obj2 in enumerate(objects):\n            if i != j:\n                for x1, y1 in obj1:\n                    for x2, y2 in obj2:\n                        # Check for adjacency (not diagonally)\n                        if abs(x1 - x2) + abs(y1 - y2) == 1:\n                            if j not in graph[i]:\n                                graph[i].append(j)\n                            if i not in graph[j]:\n                                graph[j].append(i)\n                            break  # Move to the next object pair\n                    else:\n                        continue\n                    break\n    return graph\n\ndef color_graph(graph, objects):\n    \"\"\"Colors the graph using a BFS traversal, alternating colors.\"\"\"\n    colors = {}  # object index -> color\n    q = deque()\n\n    for start_node in graph:\n        if start_node not in colors:\n          q.append((start_node, 1))  # Start with blue (1)\n          colors[start_node] = 1\n\n          while q:\n              node, color = q.popleft()\n              for neighbor in graph[node]:\n                  if neighbor not in colors:\n                      colors[neighbor] = 3 - color  # Alternate between 1 and 2\n                      q.append((neighbor, 3 - color))\n    return colors\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the described rules.\"\"\"\n    input_grid = np.array(input_grid)\n    output_grid = np.copy(input_grid)\n\n    # 1. Identify Gray Shapes\n    gray_objects = find_objects(input_grid, 5)\n\n    # 2. Construct a Connectivity Graph\n    adjacency_graph = build_adjacency_graph(gray_objects)\n\n    # 3. Color the graph\n    object_colors = color_graph(adjacency_graph, gray_objects)\n\n    # 4. Replace with Colored Shapes\n    for i, obj in enumerate(gray_objects):\n        color = object_colors.get(i,0) # get assigned color\n        for x, y in obj:\n            output_grid[x, y] = color\n\n    return output_grid.tolist()\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7337,
    "candidates_token_count": 957,
    "total_token_count": 8294,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.778015,
  "response_file": "004-response.json"
}