{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Gray Objects:** Find all contiguous groups of gray pixels.\n2.  **Recolor to Red:** Change the color of all identified gray pixels to red.\n3.  **Identify Adjacent White Pixels:** Find all white pixels directly adjacent (up, down, left, right) to the *original* gray pixels.\n4.  **Recolor Adjacent Whites to Blue:** Change the color of these adjacent white pixels to blue.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, color):\n    \"\"\"Finds contiguous regions of a specific color in the grid.\"\"\"\n    objects = []\n    visited = set()\n    rows, cols = grid.shape\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def dfs(r, c, current_object):\n        if (r, c) in visited or not is_valid(r, c) or grid[r, c] != color:\n            return\n        visited.add((r, c))\n        current_object.append((r, c))\n        # Check adjacent cells (up, down, left, right)\n        dfs(r + 1, c, current_object)\n        dfs(r - 1, c, current_object)\n        dfs(r, c + 1, current_object)\n        dfs(r, c - 1, current_object)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == color and (r, c) not in visited:\n                current_object = []\n                dfs(r, c, current_object)\n                objects.append(current_object)\n    return objects\n\ndef get_adjacent_pixels(grid, pixel_coords):\n    \"\"\"Gets the coordinates of pixels adjacent to the given pixel.\"\"\"\n    rows, cols = grid.shape\n    r, c = pixel_coords\n    adjacent = []\n    # Check up, down, left, right\n    if r > 0:\n        adjacent.append((r - 1, c))\n    if r < rows - 1:\n        adjacent.append((r + 1, c))\n    if c > 0:\n        adjacent.append((r, c - 1))\n    if c < cols - 1:\n        adjacent.append((r, c + 1))\n    return adjacent\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the specified rule.\"\"\"\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # 1. Identify Gray Objects\n    gray_objects = find_objects(input_grid, 5)\n\n    # Store original gray pixel locations for adjacency check\n    original_gray_pixels = set()\n    for obj in gray_objects:\n        for r, c in obj:\n          original_gray_pixels.add((r,c))\n\n    # 2. Recolor Gray to Red\n    for obj in gray_objects:\n        for r, c in obj:\n            output_grid[r, c] = 2\n\n    # 3 & 4. Identify and Recolor Adjacent White Pixels to Blue\n    for r, c in original_gray_pixels:\n        adjacent_pixels = get_adjacent_pixels(input_grid, (r, c))\n        for ar, ac in adjacent_pixels:\n            if input_grid[ar, ac] == 0:  # Check if it's white in the *input* grid\n                output_grid[ar, ac] = 1\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7711,
    "candidates_token_count": 835,
    "total_token_count": 8546,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.448306,
  "response_file": "008-response.json"
}