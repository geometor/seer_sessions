{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Find all contiguous regions of red (color 2) and gray (color 5) pixels. Each of these regions is an individual object.\n2. **Iterate and Position for Each Red Object** For each red region:\n    *   Find the topmost and bottommost row indices of the *current* red region.\n    *   Find all Gray regions.\n    *   For each gray region:\n        * Create two copies of the gray region\n        * **Above:** Place one copy of the gray region such that the bottom row of the gray copy aligns with the top row of the *current* red region, and the original column positions of all pixels within the copied region are kept.\n        * **Below:** Place the second copy of the gray region such that the top row of the gray region copy aligns with the bottom row of the *current* red region, preserving the original column positions.\n3.  **Output:** The output grid consists of the repositioned gray regions, and the red regions in their original locations, against a black (color 0) background.\n\"\"\"\n\nimport numpy as np\n\ndef find_regions(grid, color):\n    \"\"\"\n    Finds all distinct regions of a specific color in the grid.\n\n    Args:\n        grid: The input numpy array.\n        color: The color to search for.\n\n    Returns:\n        A list of regions, where each region is a list of (row, col) coordinates.\n    \"\"\"\n    visited = set()\n    regions = []\n\n    def is_valid(r, c):\n        return 0 <= r < grid.shape[0] and 0 <= c < grid.shape[1]\n\n    def dfs(r, c, current_region):\n        if (r, c) in visited or not is_valid(r, c) or grid[r, c] != color:\n            return\n        visited.add((r, c))\n        current_region.append((r, c))\n\n        # Explore adjacent cells (4-connectivity)\n        dfs(r + 1, c, current_region)\n        dfs(r - 1, c, current_region)\n        dfs(r, c + 1, current_region)\n        dfs(r, c - 1, current_region)\n\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] == color and (r, c) not in visited:\n                current_region = []\n                dfs(r, c, current_region)\n                regions.append(current_region)\n\n    return regions\n\ndef get_row_extents(region):\n    \"\"\"Calculates the minimum and maximum row indices for a single region.\"\"\"\n    if not region:\n        return 0, -1  # Handle empty region case\n\n    min_row = float('inf')\n    max_row = float('-inf')\n\n    for r, _ in region:\n        min_row = min(min_row, r)\n        max_row = max(max_row, r)\n\n    return min_row, max_row\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by repositioning gray regions relative to each red region.\n    \"\"\"\n    grid = np.array(input_grid)\n    output_grid = np.zeros_like(grid)\n\n    # 1. Identify Red and Gray Regions\n    red_regions = find_regions(grid, 2)\n    gray_regions = find_regions(grid, 5)\n\n    # 2. Iterate through Red Regions and Position Gray Copies\n    for red_region in red_regions:\n        red_min_row, red_max_row = get_row_extents(red_region)\n\n        for gray_region in gray_regions:\n            gray_min_row, gray_max_row = get_row_extents(gray_region)\n            gray_height = gray_max_row - gray_min_row + 1\n\n            # Place copy above\n            for r, c in gray_region:\n                new_row = red_min_row - (gray_max_row - r + 1)  #Align bottom of gray to top of red\n                if 0 <= new_row < output_grid.shape[0]: # boundary check\n                     output_grid[new_row, c] = 5\n\n            # Place copy below\n            for r, c in gray_region:\n                new_row = red_max_row + (r - gray_min_row + 1) # align top of gray to bottom of red\n                if 0 <= new_row < output_grid.shape[0]: # boundary check\n                    output_grid[new_row, c] = 5\n\n    # 3. Add Red Regions (in their original positions)\n    for red_region in red_regions:\n        for r, c in red_region:\n            output_grid[r, c] = 2\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5036,
    "candidates_token_count": 1142,
    "total_token_count": 6178,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.440329,
  "response_file": "008-response.json"
}