import numpy as np

def compare_grids(grid1, grid2):
    """Compares two grids and returns a grid highlighting the differences."""
    if grid1.shape != grid2.shape:
        return "Grids have different shapes"
    diff_grid = np.zeros_like(grid1)
    for i in range(grid1.shape[0]):
        for j in range(grid1.shape[1]):
            if grid1[i, j] != grid2[i, j]:
                diff_grid[i, j] = 9 # Highlight differences with 9
    return diff_grid

def calculate_accuracy(grid1, grid2):
    """Calculates the accuracy of grid2 compared to the ground truth, grid1"""
    if grid1.shape != grid2.shape:
        return "Grids have different shapes"
    correct_pixels = np.sum(grid1 == grid2)
    total_pixels = grid1.size
    return (correct_pixels / total_pixels) * 100

# the transform function from above is assumed to be defined here
# Assume 'train' is a list of dictionaries, each with 'input' and 'output'
train = task_data['train']

for i, example in enumerate(train):
    input_grid = np.array(example['input'])
    expected_output = np.array(example['output'])
    generated_output = transform(input_grid)
    diff_grid = compare_grids(expected_output, generated_output)
    accuracy = calculate_accuracy(expected_output, generated_output)
    print(f"Example {i+1}:")
    print(f"Accuracy: {accuracy:.2f}%")
    print("Difference Grid:")
    print(diff_grid)
    print("Expected Output:")
    print(expected_output)
    print("Generated Output")
    print(generated_output)