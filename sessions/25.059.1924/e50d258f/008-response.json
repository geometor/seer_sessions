{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. Identify Background: The background consists primarily of pixels with a value of 0 (white). In some cases, 8 (azure) may also be part of the background, *adjacent* to the 0 values.\n2. Locate Content: Find the bounding box of the non-background pixels. This defines the region of interest.\n3. Extract Content Block: If a solid color rectangle is present (all non-zero pixels are the same), extract.\n4. Extract Column:  If non zero pixels form a single vertical line extract a 4x4 area around it where the last column in the area contains the line.\n\"\"\"\n\nimport numpy as np\n\ndef _find_bounding_box(grid):\n    \"\"\"Finds the bounding box of non-background pixels.\"\"\"\n    rows_with_content = np.any(grid != 0, axis=1)\n    cols_with_content = np.any(grid != 0, axis=0)\n\n    if np.any(rows_with_content) and np.any(cols_with_content):\n        min_row, max_row = np.where(rows_with_content)[0][[0, -1]]\n        min_col, max_col = np.where(cols_with_content)[0][[0, -1]]\n        return (min_row, min_col), (max_row, max_col)\n    else:\n        return None, None  # Empty bounding box\n\ndef _is_solid_rectangle(grid, min_row, min_col, max_row, max_col):\n    \"\"\"Checks if the content within the bounding box is a solid rectangle.\"\"\"\n    if min_row is None:  # Handle empty bounding box case\n      return False, None\n    \n    content = grid[min_row:max_row+1, min_col:max_col+1]\n    unique_colors = np.unique(content)\n    return len(unique_colors) == 1 and unique_colors[0] != 0, unique_colors[0] if len(unique_colors) == 1 else None\n\ndef _extract_rectangle(grid, min_row, min_col, max_row, max_col):\n  \"\"\"Extracts the rectangle defined by the bounding box.\"\"\"\n  return grid[min_row:max_row+1, min_col:max_col+1].tolist()\n\ndef _extract_column(grid, min_row, min_col, max_row, max_col):\n  \"\"\"Extracts 4x4 area with vertical line in the last column\"\"\"\n  line_col = max_col\n  start_col = max(0, line_col - 3)\n  return grid[min_row:min_row+4, start_col:start_col+4].tolist()\n    \n\ndef transform(input_grid):\n    # Convert to numpy array\n    grid = np.array(input_grid)\n\n    # Find bounding box\n    (min_row, min_col), (max_row, max_col) = _find_bounding_box(grid)\n    \n    # Check for solid rectangle\n    is_rectangle, rect_color = _is_solid_rectangle(grid, min_row, min_col, max_row, max_col)\n    if is_rectangle:\n      return _extract_rectangle(grid, min_row, min_col, max_row, max_col)\n\n    # check and extract vertical line\n    if max_row - min_row + 1 > 0 and max_col - min_col + 1 == 1:\n      return _extract_column(grid, min_row, min_col, max_row, max_col)\n\n    return output_grid.tolist() #should not reach here with correct logic\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5322,
    "candidates_token_count": 858,
    "total_token_count": 6180,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.414734,
  "response_file": "008-response.json"
}