import numpy as np

def analyze_grid(grid, example_id, type="input"):
    grid = np.array(grid)
    colors = np.unique(grid)
    rows, cols = grid.shape
    print(f"{type.capitalize()} {example_id}:")
    print(f"  Dimensions: {rows}x{cols}")
    print(f"  Colors: {colors}")

    # Find bounding box (only for input)
    if type == "input":
      rows_with_content = np.any(grid != 0, axis=1)
      cols_with_content = np.any(grid != 0, axis=0)
      
      if np.any(rows_with_content) and np.any(cols_with_content):
          min_row, max_row = np.where(rows_with_content)[0][[0, -1]]
          min_col, max_col = np.where(cols_with_content)[0][[0, -1]]
          print(f"  Bounding Box: ({min_row}, {min_col}) - ({max_row}, {max_col})")
          print(f"  Bounding Box Size: {max_row - min_row + 1} x {max_col - min_col + 1}")
      else:
          print("Empty Bounding Box")
    print("---")
    
task = {
    "train": [
        {
            "input": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            ],
            "output": [[4, 4, 4, 4], [4, 4, 4, 4], [4, 4, 4, 4], [4, 4, 4, 4], [4, 4, 4, 4]],
        },
        {
            "input": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            ],
            "output": [[0, 0, 0, 3], [0, 0, 0, 3], [0, 0, 0, 3], [0, 0, 0, 3]],
        },
        {
            "input": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            ],
            "output": [[8, 8, 8, 8], [8, 8, 8, 8], [8, 8, 8, 8], [8, 8, 8, 8], [8, 8, 8, 8]],
        },
    ],
    "test": [
        {
            "input": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            ],
            "output": [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]],
        }
    ],
}

for i, example in enumerate(task["train"]):
  analyze_grid(example["input"], i+1, "input")
  analyze_grid(example["output"], i+1, "output")
for i, example in enumerate(task["test"]):
  analyze_grid(example["input"], i+1, "input")
  analyze_grid(example["output"], i+1, "output")