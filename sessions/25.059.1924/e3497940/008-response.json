{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify** all gray (5) pixels.\n2.  **Identify** all colored pixels (non-black, non-gray) that are directly adjacent (up, down, left, or right) to any gray pixel.\n3.  **Remove** all gray pixels.\n4.  **Remove** any colored pixels identified in step 2 (adjacent to gray).\n5. **Retain** all other pixels (black and any colored pixels not adjacent to gray), maintaining their relative positions. Black pixels (0) act like a background and are unaffected.\n6.  The output is a new grid formed by the remaining pixels.\n\"\"\"\n\nimport numpy as np\n\ndef find_gray_pixels(grid):\n    # Find the row and column indices of all gray (5) pixels.\n    gray_pixels = []\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] == 5:\n                gray_pixels.append((r, c))\n    return gray_pixels\n\ndef find_adjacent_colored_pixels(grid, gray_pixels):\n    # Find all colored pixels adjacent to gray pixels.\n    adjacent_colored_pixels = set()\n    for r, c in gray_pixels:\n        # Check neighbors (up, down, left, right)\n        neighbors = [(r - 1, c), (r + 1, c), (r, c - 1), (r, c + 1)]\n        for nr, nc in neighbors:\n            if 0 <= nr < grid.shape[0] and 0 <= nc < grid.shape[1]:\n                if grid[nr, nc] != 0 and grid[nr, nc] != 5:\n                    adjacent_colored_pixels.add((nr, nc))\n    return list(adjacent_colored_pixels)\n\ndef transform(input_grid):\n    # Find all gray pixels\n    gray_pixels = find_gray_pixels(input_grid)\n\n    # Find all colored pixels adjacent to gray pixels\n    adjacent_colored_pixels = find_adjacent_colored_pixels(input_grid, gray_pixels)\n\n    # Create a list to store the pixels to keep\n    pixels_to_keep = []\n\n    # Iterate through the original grid and add non-gray, non-adjacent pixels to keep_pixels\n    for r in range(input_grid.shape[0]):\n        for c in range(input_grid.shape[1]):\n            if (r, c) not in gray_pixels and (r, c) not in adjacent_colored_pixels:\n                pixels_to_keep.append((r, c, input_grid[r, c]))\n\n    # Determine the new grid dimensions\n    if not pixels_to_keep:\n        # Return empty grid, if nothing to show\n        return np.zeros((0,0), dtype=int)\n\n    max_row = max(p[0] for p in pixels_to_keep)\n    max_col = max(p[1] for p in pixels_to_keep)\n\n    # create mapping of old to new column\n    col_map = {}\n    new_col = 0\n    for c in range(input_grid.shape[1]): # original\n        # check if column has a pixel\n        keep_col = False\n        for r in range(input_grid.shape[0]):\n             if (r,c,input_grid[r,c]) in pixels_to_keep:\n                keep_col = True\n                break\n        if keep_col:\n            col_map[c] = new_col\n            new_col += 1\n\n    # Create the output grid\n    output_grid = np.zeros((max_row + 1, new_col), dtype=int)\n\n    # Copy the pixels to keep to the new grid\n    for r, c, color in pixels_to_keep:\n        output_grid[r, col_map[c]] = color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5205,
    "candidates_token_count": 912,
    "total_token_count": 6117,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.525081,
  "response_file": "008-response.json"
}