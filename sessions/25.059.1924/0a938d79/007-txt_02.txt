import numpy as np

def get_grid_metrics(grid):
    """Calculates basic metrics of a grid."""
    return {
        'shape': grid.shape,
        'unique_colors': np.unique(grid).tolist(),
        'color_counts': {color: int(count) for color, count in zip(*np.unique(grid, return_counts=True))},
    }

def analyze_example(input_grid, output_grid):
    """Analyzes an example pair and the predicted output."""
    return {
        'input_metrics': get_grid_metrics(input_grid),
        'output_metrics': get_grid_metrics(output_grid),
        'errors': int(np.sum(output_grid != transform(input_grid))),
    }

# Load the example grids (replace with your actual data loading)
# Example usage with dummy data (replace with your actual data)
train_examples = [
    (np.array([[5, 1, 5], [7, 5, 5], [5, 5, 0]]), np.array([[2, 8, 2], [8, 2, 8], [2, 8, 2]])),  # Example 1
    (np.array([[0, 5, 0], [0, 5, 0], [0, 5, 0]]), np.array([[2, 8, 2], [8, 2, 8], [2, 8, 2]])), # Example 2
    (np.array([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]), np.array([[2, 8, 2, 8, 2], [8, 2, 8, 2, 8], [2, 8, 2, 8, 2], [8, 2, 8, 2, 8]])),  # Example 3
]
# Analyze specific examples (first, middle, last)
analysis_results = [analyze_example(inp, outp) for inp, outp in [train_examples[0], train_examples[1], train_examples[2]]]
print(analysis_results)
