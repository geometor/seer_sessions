{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nExtends colored lines horizontally to grid boundaries or until a different color is encountered.\n\"\"\"\n\nimport numpy as np\n\ndef get_background_color(grid):\n    # the background color is assumed to be in every example to be white\n    return 0\n\ndef find_horizontal_lines(grid):\n    \"\"\"Finds all horizontal line segments in a grid.\"\"\"\n    background_color = get_background_color(grid)\n    lines = []\n    for r_idx, row in enumerate(grid):\n        c_idx = 0\n        while c_idx < len(row):\n            pixel = row[c_idx]\n            if pixel != background_color:\n                # Start of a potential line segment\n                segment = []\n                c = c_idx\n                while c < len(row) and row[c] == pixel:\n                    segment.append((r_idx, c))\n                    c += 1\n                if len(segment) > 1:  # Consider it a line only if length > 1\n                    lines.append(segment)\n                c_idx = c  # move the index\n            else:\n                c_idx += 1\n    return lines\n\ndef extend_line(grid, line_segment):\n    \"\"\"Extends a single horizontal line segment.\"\"\"\n    background_color = get_background_color(grid)\n    output_grid = np.copy(grid)\n    row_index = line_segment[0][0]\n    line_color = grid[line_segment[0]]\n\n    # Extend to the left\n    c_left = line_segment[0][1] - 1\n    while c_left >= 0 and output_grid[row_index, c_left] == background_color:\n        output_grid[row_index, c_left] = line_color\n        c_left -= 1\n\n    # Extend to the right\n    c_right = line_segment[-1][1] + 1\n    while c_right < output_grid.shape[1] and output_grid[row_index, c_right] == background_color:\n        output_grid[row_index, c_right] = line_color\n        c_right += 1\n\n    return output_grid\n\ndef transform(input_grid):\n    # Convert input to numpy array\n    grid = np.array(input_grid)\n\n    # Find all horizontal lines\n    lines = find_horizontal_lines(grid)\n\n    # Extend each line\n    output_grid = np.copy(grid) # start the output\n    for line in lines:\n        output_grid = extend_line(output_grid, line) # extend each line\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 9395,
    "candidates_token_count": 617,
    "total_token_count": 10012,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.835335,
  "response_file": "012-response.json"
}