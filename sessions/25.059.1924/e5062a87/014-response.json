{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```tool_code\nimport numpy as np\n\ndef get_background_color(grid):\n    \"\"\"Returns the background color (assumed to be 0 for white).\"\"\"\n    return 0\n\ndef find_all_non_background_pixels(grid):\n    \"\"\"Finds the coordinates of all non-background pixels.\"\"\"\n    background_color = get_background_color(grid)\n    pixels = []\n    for r_idx, row in enumerate(grid):\n        for c_idx, pixel in enumerate(row):\n            if pixel != background_color:\n                pixels.append((r_idx, c_idx))\n    return pixels\n\ndef extend_pixel_horizontally(grid, pixel_coord):\n    \"\"\"Extends a single pixel horizontally to the grid boundaries or until a different color is encountered.\"\"\"\n    output_grid = np.copy(grid)\n    row_index, col_index = pixel_coord\n    pixel_color = grid[row_index, col_index]\n    background_color = get_background_color(grid)\n\n    # Extend to the left\n    c_left = col_index\n    while c_left >= 0 and (output_grid[row_index, c_left] == background_color or output_grid[row_index, c_left] == pixel_color):\n        output_grid[row_index, c_left] = pixel_color\n        c_left -= 1\n\n    # Extend to the right\n    c_right = col_index\n    while c_right < output_grid.shape[1] and (output_grid[row_index, c_right] == background_color or output_grid[row_index, c_right] == pixel_color):\n        output_grid[row_index, c_right] = pixel_color\n        c_right += 1\n    \n    return output_grid\n    \n\ndef transform(input_grid):\n    \"\"\"\n    Extends each non-background color pixel horizontally to the edges of the grid or until a different color is hit.\n    \"\"\"\n    # Convert input to numpy array\n    grid = np.array(input_grid)\n\n    # Find all non-background pixels\n    non_background_pixels = find_all_non_background_pixels(grid)\n\n    # Extend each pixel horizontally\n    output_grid = np.copy(grid)\n    for pixel_coord in non_background_pixels:\n        output_grid = extend_pixel_horizontally(output_grid, pixel_coord)\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6033,
    "candidates_token_count": 575,
    "total_token_count": 6608,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 5.744691,
  "response_file": "014-response.json"
}