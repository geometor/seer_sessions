{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation identifies vertical and horizontal lines within the input grid.\nIt locates where these lines intersect, forming a crossing.\nA new color (yellow, represented by 4) appears in the output grid around this intersection.\nThe yellow color fills the cells immediately above and below the crossing point.\nThe fill extends horizontally from the intersection, stopping at the original lines or grid edges.\n\"\"\"\n\nimport numpy as np\n\ndef find_vertical_lines(grid):\n    # Find vertical lines of single-pixel width\n    vertical_lines = []\n    rows, cols = grid.shape\n    for c in range(cols):\n        for r in range(rows):\n            if r + 1 < rows and grid[r, c] == grid[r + 1, c] and grid[r, c] != 0:\n                color = grid[r,c]\n                length = 0\n                while r + length < rows and grid[r + length, c] == color:\n                    length += 1\n                vertical_lines.append( (r,c, color, length) )\n                break # move onto next column\n    return vertical_lines\n\ndef find_horizontal_lines(grid):\n    # Find horizontal lines of single-pixel width\n    horizontal_lines = []\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            if c + 1 < cols and grid[r, c] == grid[r, c + 1] and grid[r,c] != 0:\n                color = grid[r,c]\n                length = 0\n                while c + length < cols and grid[r, c + length] == color:\n                    length += 1\n                horizontal_lines.append((r, c, color, length))\n                break  # move onto next row\n    return horizontal_lines\n\ndef find_crossing(vertical_lines, horizontal_lines):\n    # Find crossing of vertical and horizontal line\n    crossings = []\n    for v in vertical_lines:\n        v_row, v_col, v_color, v_length = v\n        for h in horizontal_lines:\n            h_row, h_col, h_color, h_length = h\n            if v_color != h_color and v_col >= h_col and v_col < h_col + h_length and h_row >= v_row and h_row < v_row + v_length:\n                crossings.append((h_row, v_col, v_color, h_color))  # row, col, v_color, h_color\n    return crossings\n\ndef transform(input_grid):\n    # Initialize output grid with the same dimensions and background color as the input\n    output_grid = np.copy(input_grid)\n\n    # Find vertical and horizontal lines\n    vertical_lines = find_vertical_lines(input_grid)\n    horizontal_lines = find_horizontal_lines(input_grid)\n\n    # Find crossings\n    crossings = find_crossing(vertical_lines, horizontal_lines)\n\n    # Fill around the crossings\n    for crossing in crossings:\n        row, col, v_color, h_color = crossing\n\n        #fill center, above, and below\n        output_grid[row, col] = 4\n        if row > 0:\n          output_grid[row - 1, col] = 4\n        if row + 1 < output_grid.shape[0]:\n          output_grid[row + 1, col] = 4\n\n        #fill horizontally, stopping one short of existing colored pixels\n        c_left = col - 1\n        while c_left >= 0 and output_grid[row, c_left] == 0 :\n            output_grid[row, c_left] = 4\n            c_left -= 1\n        c_right = col + 1\n        while c_right < output_grid.shape[1] and output_grid[row, c_right] == 0:\n            output_grid[row, c_right] = 4\n            c_right += 1\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6113,
    "candidates_token_count": 947,
    "total_token_count": 7060,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.438159
}