{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation rule involves rearranging colored blocks within the input grid. Each column is processed independently.\nWithin each column, contiguous blocks of the same non-zero color are moved downwards, stacking them at the bottom of the grid.\nThe relative horizontal order of blocks across columns, as well as their sizes, are preserved. The color 0 acts as empty space.\n\"\"\"\n\nimport numpy as np\n\ndef get_objects_per_column(grid):\n    \"\"\"\n    Identifies contiguous blocks of non-zero colors within each column.\n    Returns a list of lists, where each sublist represents a column and contains the objects found in that column.\n    Objects in the list are represented as tuples: ((row_start, col), value, length)\n    \"\"\"\n    columns = []\n    num_cols = len(grid[0])\n    num_rows = len(grid)\n\n    for col in range(num_cols):\n        current_column_objects = []\n        start_row = None\n        current_color = 0\n        for row in range(num_rows):\n            if grid[row][col] != 0:  # Non-zero color\n                if start_row is None:  # Start of a new object\n                    start_row = row\n                    current_color = grid[row][col]\n                elif grid[row][col] != current_color:\n                    # append previous\n                    current_column_objects.append(\n                        ((start_row, col), current_color, row - start_row)\n                    )\n                    # Start of a new object\n                    start_row = row\n                    current_color = grid[row][col]\n            elif start_row is not None:  # End of an object\n                current_column_objects.append(\n                    ((start_row, col), current_color, row - start_row)\n                )\n                start_row = None\n                current_color = 0\n        # Check for object at the end of the column\n        if start_row is not None:\n            current_column_objects.append(\n                ((start_row, col), current_color, num_rows - start_row)\n            )\n        columns.append(current_column_objects)\n    return columns\ndef get_objects_per_row(grid):\n    rows = []\n    num_cols = len(grid[0])\n    num_rows = len(grid)\n\n    for row in range(num_rows):\n        current_row_objects = []\n        start_col = None\n        current_color = 0\n        for col in range(num_cols):\n            if grid[row][col] != 0:\n                if start_col is None:\n                    start_col = col\n                    current_color = grid[row][col]\n                elif grid[row][col] != current_color:\n                    current_row_objects.append(\n                        ((row, start_col), current_color, col - start_col)\n                    )\n                    start_col = col\n                    current_color = grid[row][col]\n            elif start_col is not None:\n                current_row_objects.append(\n                    ((row, start_col), current_color, col - start_col)\n                )\n                start_col = None\n                current_color = 0\n\n        if start_col is not None:\n            current_row_objects.append(\n                ((row, start_col), current_color, num_cols-start_col)\n            )\n        rows.append(current_row_objects)\n    return rows\n\ndef get_adjacent_objects(input_grid, col_objects, row_objects):\n    adjacent_objects_list = []\n    num_rows = len(input_grid)\n    num_cols = len(input_grid[0])\n    processed = set()\n\n    for col_obj_list in col_objects:\n        for col_obj in col_obj_list:\n            obj_id = (col_obj[0][0], col_obj[0][1], col_obj[1])  # (row, col, color)\n            if obj_id in processed:\n                continue\n            \n            adjacent_objects = []\n            q = [col_obj]\n            \n            while q:\n                curr = q.pop(0)\n                obj_id = (curr[0][0], curr[0][1], curr[1])\n                if obj_id in processed:\n                    continue\n                processed.add(obj_id)\n                adjacent_objects.append(curr)                \n                \n                (r, c), val, l = curr\n                \n                # Find neighbors in column\n                for neighbor_col_obj_list in col_objects:\n                    for neighbor_col_obj in neighbor_col_obj_list:\n                        (nr, nc), nval, nl = neighbor_col_obj\n                        if nval == val and nc == c and (nr < r and nr + nl == r or nr == r + l):\n                            q.append(neighbor_col_obj)\n\n                # Find neighbors in row\n                for neighbor_row_obj_list in row_objects:\n                    for neighbor_row_obj in neighbor_row_obj_list:\n                        (nr, nc), nval, nl = neighbor_row_obj\n                        if nval == val and nr == r:  # Same row\n                           if (nc < c and nc+nl==c) or (nc == c + 1):\n                                for neighbor_col_obj_list in col_objects:\n                                    for neighbor_col_obj in neighbor_col_obj_list:\n                                        (nr2, nc2), nval2, nl2 = neighbor_col_obj\n                                        if nr2 == nr and nc2 == nc and nval2==val:\n                                            q.append(neighbor_col_obj)\n\n\n            adjacent_objects_list.append(adjacent_objects)\n\n    return adjacent_objects_list\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by moving contiguous blocks of non-zero colors downwards within each column.\n    \"\"\"\n    input_grid = np.array(input_grid)\n    num_rows = len(input_grid)\n    num_cols = len(input_grid[0])\n    output_grid = np.zeros_like(input_grid)\n\n    col_objects = get_objects_per_column(input_grid)\n    row_objects = get_objects_per_row(input_grid)\n\n    adjacent_objects_list = get_adjacent_objects(input_grid, col_objects, row_objects)\n\n    for objects in adjacent_objects_list:\n        current_row = num_rows\n        for obj in reversed(objects):\n            (r,c), val, l = obj\n            current_row -= l\n            for i in range(l):\n                output_grid[current_row + i][c] = val\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2235,
    "candidates_token_count": 1594,
    "total_token_count": 3829,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 28.681826
}