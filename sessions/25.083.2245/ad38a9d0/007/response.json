{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms magenta (6) and orange (7) pixels in the input grid based on their\nrelative position within their respective objects and adjacency, while leaving\nother colored pixels unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the observed rules.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    magenta_objects = find_objects(output_grid, 6)\n    orange_objects = find_objects(output_grid, 7)\n\n    # Transform magenta pixels.\n    for object_pixels in magenta_objects:\n        transform_magenta_object(output_grid, object_pixels)\n\n    # Transform orange pixels.\n    for object_pixels in orange_objects:\n        transform_orange_object(output_grid, object_pixels, magenta_objects)\n\n    return output_grid\n\ndef find_objects(grid, color):\n    \"\"\"\n    Finds all contiguous objects of a given color. Returns a list of lists,\n    where each inner list contains the coordinates of the pixels in an object.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = set()\n    objects = []\n\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i, j] == color and (i, j) not in visited:\n                object_pixels = get_object(grid, i, j, color)\n                objects.append(object_pixels)\n                visited.update(object_pixels)\n    return objects\n\ndef get_object(grid, row, col, color):\n    \"\"\"\n    Finds a contiguous object in the grid starting at the given row and column.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = set()\n    to_visit = [(row, col)]\n    object_pixels = []\n\n    while to_visit:\n        current_row, current_col = to_visit.pop()\n\n        if (current_row, current_col) in visited:\n            continue\n        visited.add((current_row, current_col))\n\n        if 0 <= current_row < rows and 0 <= current_col < cols and grid[current_row, current_col] == color:\n            object_pixels.append((current_row, current_col))\n            # Add neighbors to the list of cells to visit\n            for dr in [-1, 0, 1]:\n                for dc in [-1, 0, 1]:\n                    if dr == 0 and dc == 0:\n                        continue\n                    to_visit.append((current_row + dr, current_col + dc))\n\n    return object_pixels\n\ndef transform_magenta_object(grid, object_pixels):\n    \"\"\"\n    Transforms a single magenta object based on relative position within the object.\n    \"\"\"\n    min_row = min([p[0] for p in object_pixels])\n    max_row = max([p[0] for p in object_pixels])\n    min_col = min([p[1] for p in object_pixels])\n    max_col = max([p[1] for p in object_pixels])\n    \n    for i, j in object_pixels:\n        # Determine relative position\n        if i == min_row:  # Top row\n            grid[i, j] = 8 if j > (min_col + max_col) // 2 else 4\n        elif i > min_row and i < max_row: # Middle rows\n            grid[i,j] = 9 if j > (min_col + max_col) // 2 else 3\n        elif i == max_row: # Bottom\n             grid[i,j] = 5 # provisional value\n\ndef transform_orange_object(grid, object_pixels, magenta_objects):\n    \"\"\"\n    Transforms a single orange object based on adjacency to magenta objects.\n    Also handles magenta/orange interaction edge case.\n    \"\"\"\n    for i, j in object_pixels:\n        is_adjacent = False\n        for magenta_object in magenta_objects:\n            for mx, my in magenta_object:\n                if is_adjacent_pixel((i, j), (mx, my)):\n                    is_adjacent = True\n                    break  # No need to check other magenta pixels\n            if is_adjacent:\n                break\n\n        if is_adjacent:\n            grid[i, j] = 4\n\n    # Second pass to handle the magenta/orange edge case.\n    rows, cols = grid.shape\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i,j] == 5: # Check provisional magenta pixels\n                for neighbor_i, neighbor_j in get_neighbors(grid, i, j):\n                    if grid[neighbor_i, neighbor_j] == 4: # If adjacent to orange\n                        grid[i,j] = 2 # Change to red\n\ndef is_adjacent_pixel(pixel1, pixel2):\n    \"\"\"\n    Checks if two pixels are adjacent (including diagonals).\n    \"\"\"\n    return abs(pixel1[0] - pixel2[0]) <= 1 and abs(pixel1[1] - pixel2[1]) <= 1 and pixel1 != pixel2\n\ndef get_neighbors(grid, i, j):\n    \"\"\"\n    Gets the coordinates of the neighbors of a pixel (including diagonals).\n    \"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    for x in range(max(0, i - 1), min(rows, i + 2)):\n        for y in range(max(0, j - 1), min(cols, j + 2)):\n            if (x, y) != (i, j):\n                neighbors.append((x, y))\n    return neighbors\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7080,
    "candidates_token_count": 1325,
    "total_token_count": 8405,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 17.076866
}