{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid based on horizontal and vertical neighbor rules.\n\nHorizontal Neighbor Rule (Same Color):\n    - If a pixel has left and right neighbors of the same color:\n        - If neighbors are 4 (yellow) and the current pixel is 4, change to 6 (magenta).\n        - If neighbors are 0 (white) and the current pixel is 0, change to 3 (green).\n        - If neighbors are 0 (white) and the current pixel is 4, change to 9 (maroon).\n\nVertical Neighbor Rule (Example 2 Specific):\n    - If a pixel is 0 (white) and:\n      -  the pixel above is 0 and the pixel below is NOT 0, change to 3\n      - the pixel above is NOT 0 and the pixel below IS 0, change to 3\n      -  the pixel above and the pixel below are both 0, change to 3.\n\nNo Change Rule:\n    - If none of the above, pixel's value remains unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef get_horizontal_neighbors(grid, row, col):\n    \"\"\"Gets the immediate left and right neighbors of a pixel.\n       Returns None for a neighbor if it's out of bounds.\n    \"\"\"\n    rows, cols = grid.shape\n    left_neighbor = grid[row, col - 1] if col > 0 else None\n    right_neighbor = grid[row, col + 1] if col < cols - 1 else None\n    return left_neighbor, right_neighbor\n\ndef get_vertical_neighbors(grid, row, col):\n    \"\"\"Gets the immediate top and bottom neighbors of a pixel.\n       Returns None for a neighbor if it's out of bounds.\n    \"\"\"\n    rows, cols = grid.shape\n    top_neighbor = grid[row - 1, col] if row > 0 else None\n    bottom_neighbor = grid[row + 1, col] if row < rows - 1 else None\n    return top_neighbor, bottom_neighbor\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the defined rules.\"\"\"\n    output_grid = np.copy(input_grid)  # Initialize output grid\n    rows, cols = input_grid.shape\n\n    # Iterate through each pixel\n    for row in range(rows):\n        for col in range(cols):\n            # Get horizontal neighbors\n            left_neighbor, right_neighbor = get_horizontal_neighbors(input_grid, row, col)\n\n            # Horizontal Rule\n            if left_neighbor is not None and right_neighbor is not None:\n                if left_neighbor == right_neighbor:\n                    if left_neighbor == 4 and output_grid[row, col] == 4:\n                        output_grid[row, col] = 6\n                    elif left_neighbor == 0 and output_grid[row, col] == 0:\n                        output_grid[row, col] = 3\n                    elif left_neighbor == 0 and output_grid[row, col] == 4:\n                        output_grid[row, col] = 9\n\n            # Vertical Rule\n            top_neighbor, bottom_neighbor = get_vertical_neighbors(input_grid, row, col)\n            if output_grid[row,col] == 0:  #current pixel has to be white.\n                if top_neighbor == 0 and bottom_neighbor != 0:\n                    output_grid[row,col] = 3\n                elif top_neighbor != 0 and bottom_neighbor == 0:\n                    output_grid[row,col] = 3\n                elif top_neighbor == 0 and bottom_neighbor == 0:\n                    output_grid[row,col] = 3\n\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5109,
    "candidates_token_count": 855,
    "total_token_count": 5964,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.065659
}