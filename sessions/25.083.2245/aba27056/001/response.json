{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by identifying contiguous regions of a non-zero color and creating an outline of color '4' (yellow) around them. The placement of the outline depends on adjacency to the target region and the surrounding '0' (white) pixels.\n\"\"\"\n\nimport numpy as np\n\ndef find_target_region(grid):\n    \"\"\"\n    Finds the contiguous region of non-zero color in the input grid.\n    Assumes there's only one such region.\n    \"\"\"\n    rows, cols = grid.shape\n    target_color = 0\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0:\n                target_color = grid[r, c]\n                break\n        if target_color != 0:\n            break\n\n    if target_color == 0:\n        return [], target_color  # No target region found\n\n    visited = np.zeros_like(grid, dtype=bool)\n    target_region = []\n\n    def dfs(row, col):\n        if (row < 0 or row >= rows or col < 0 or col >= cols or\n                visited[row, col] or grid[row, col] != target_color):\n            return\n        visited[row, col] = True\n        target_region.append((row, col))\n        dfs(row + 1, col)\n        dfs(row - 1, col)\n        dfs(row, col + 1)\n        dfs(row, col - 1)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r,c] == target_color:\n               dfs(r,c)\n               return target_region, target_color # return after finding first region\n    return [], target_color\n\ndef is_enclosed(grid, row, col, target_region):\n    \"\"\"\n    Checks if a '0' cell is enclosed by other '0' cells and is adjacent to the target region.\n    It's enclosed if it's surrounded by '0's *and* the edges of the grid.\n    \"\"\"\n    rows, cols = grid.shape\n    \n    # Check if the cell is on the border of the grid\n    if row == 0 or row == rows - 1 or col == 0 or col == cols - 1:\n        return False\n\n    # Check adjacency to the target region\n    adjacent_to_target = False\n    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n        nr, nc = row + dr, col + dc\n        if (nr, nc) in target_region:\n            adjacent_to_target = True\n            break\n    if not adjacent_to_target:\n        return False # must be adjecent to the target object\n    \n    # Check for '0' neighbors in all four directions\n    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n        nr, nc = row + dr, col + dc\n        if not (0 <= nr < rows and 0 <= nc < cols and (grid[nr, nc] == 0 or (nr,nc) in target_region )):\n            return False  # Not enclosed if any neighbor isn't '0' or target region\n\n\n    return True\n\ndef get_enclosed_zeros(grid, target_region):\n    \"\"\"\n    find all enclosed zero areas connected to the target_region\n    \"\"\"\n    rows, cols = grid.shape\n    enclosed_zeros = []\n    visited = np.zeros_like(grid, dtype=bool)\n\n    def dfs(row, col):\n        nonlocal enclosed_zeros\n        if (row < 0 or row >= rows or col < 0 or col >= cols or visited[row,col] or grid[row,col] != 0 or (row,col) in target_region):\n            return\n\n        if not is_enclosed(grid, row, col, target_region):\n            return\n            \n        visited[row, col] = True\n        enclosed_zeros.append((row,col))\n\n        dfs(row+1, col)\n        dfs(row-1, col)\n        dfs(row, col+1)\n        dfs(row, col-1)\n\n    for r,c in target_region:\n      for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n          nr, nc = r + dr, c + dc\n          if 0 <= nr < rows and 0 <= nc < cols and grid[nr,nc] == 0:\n             dfs(nr, nc)\n\n    return enclosed_zeros\n    \ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the identified rule.\n    \"\"\"\n    grid = np.array(input_grid)  # Convert to NumPy array\n    rows, cols = grid.shape\n    output_grid = grid.copy()\n\n    # 1. Identify Target Region\n    target_region, target_color = find_target_region(grid)\n\n    if not target_region:\n        return output_grid # nothing to do\n\n    # 2 & 3. Create and Place Outline\n    for r in range(rows):\n        for c in range(cols):\n            # Apply rule for non-enclosed '0' adjacent to the target\n            if grid[r, c] == 0:\n                is_adjacent = False\n                for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                    nr, nc = r + dr, c + dc\n                    if (nr, nc) in target_region:\n                        is_adjacent = True\n                        break\n                if is_adjacent:\n                    if not is_enclosed(grid,r,c, target_region):\n                       output_grid[r, c] = 4\n\n    enclosed_zeros = get_enclosed_zeros(grid, target_region)\n    for r,c in enclosed_zeros:\n       output_grid[r,c] = 4\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2405,
    "candidates_token_count": 1434,
    "total_token_count": 3839,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 21.616481
}