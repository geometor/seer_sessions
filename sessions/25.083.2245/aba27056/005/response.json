{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by identifying all contiguous regions of non-zero color and creating a yellow (color 4) outline around each of them. The outline is placed on '0' (white) cells that are directly adjacent to the target region. Areas of '0' that are completely enclosed by each target region are also filled with yellow (color 4).\n\"\"\"\n\nimport numpy as np\n\ndef find_all_target_regions(grid):\n    \"\"\"\n    Finds all contiguous regions of non-zero color in the input grid.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    target_regions = []\n\n    def dfs(row, col, target_color, current_region):\n        if (row < 0 or row >= rows or col < 0 or col >= cols or\n                visited[row, col] or grid[row, col] != target_color):\n            return\n        visited[row, col] = True\n        current_region.append((row, col))\n        dfs(row + 1, col, target_color, current_region)\n        dfs(row - 1, col, target_color, current_region)\n        dfs(row, col + 1, target_color, current_region)\n        dfs(row, col - 1, target_color, current_region)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and not visited[r,c]:\n                current_region = []\n                dfs(r, c, grid[r,c], current_region)\n                target_regions.append((current_region, grid[r,c]))\n\n    return target_regions\n\ndef is_internal_zero(grid, row, col, target_region):\n    \"\"\"\n    Checks if a '0' cell is an internal zero for a specific target region.\n    \"\"\"\n    rows, cols = grid.shape\n    \n    # Perform a flood fill from the current zero.\n    visited = np.zeros_like(grid, dtype=bool)\n    stack = [(row, col)]\n    edge_reached = False\n\n    while stack:\n        cr, cc = stack.pop()\n        if not (0 <= cr < rows and 0 <= cc < cols):\n            edge_reached = True\n            break\n        if visited[cr, cc] or (cr, cc) in target_region:\n            continue\n        \n        visited[cr,cc] = True\n\n        for dr, dc in [(0,1),(0,-1),(1,0),(-1,0)]:\n            nr, nc = cr + dr, cc + dc\n            if 0 <= nr < rows and 0 <= nc < cols and grid[nr,nc] == 0 and not (nr,nc) in target_region:\n                stack.append((nr,nc))\n\n    return not edge_reached\n\ndef get_enclosed_zeros(grid, target_region):\n    \"\"\"\n    Finds '0' cells that are completely enclosed by a specific target region.\n    \"\"\"\n    rows, cols = grid.shape\n    enclosed_zeros = []\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r,c] == 0 and (r, c) not in target_region and is_internal_zero(grid, r, c, target_region):\n              enclosed_zeros.append((r,c))\n\n    return enclosed_zeros\n    \n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the identified rule.\n    \"\"\"\n    grid = np.array(input_grid)  # Convert to NumPy array\n    rows, cols = grid.shape\n    output_grid = grid.copy()\n\n    # 1. Identify All Target Regions\n    target_regions = find_all_target_regions(grid)\n    \n    for target_region, target_color in target_regions:\n\n        # 2. Create Outline for each region\n        for r in range(rows):\n            for c in range(cols):\n                if grid[r, c] == 0:  # Check if it's a white pixel\n                    is_adjacent = False\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = r + dr, c + dc\n                        if (nr, nc) in target_region:\n                            is_adjacent = True\n                            break\n                    if is_adjacent:\n                        output_grid[r, c] = 4  # Change to yellow\n\n        # 3. Fill Enclosed Areas for each region\n        enclosed_zeros = get_enclosed_zeros(grid, target_region)  # Use original grid\n        for r, c in enclosed_zeros:\n            output_grid[r, c] = 4  # Change enclosed '0's to yellow\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4648,
    "candidates_token_count": 1143,
    "total_token_count": 5791,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 15.048065
}