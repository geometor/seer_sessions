{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Regions:** Identify all contiguous regions of orange (7) pixels and red (2) pixels. A region consists of pixels of the same color connected horizontally or vertically.\n2.  **Determine Adjacency:** For each orange region, check if it is adjacent to *any* red region. Adjacency is defined as sharing a horizontal or vertical border.\n3.  **Transform Orange Regions:**\n    *   If an orange region is adjacent to *any* red region, change all pixels in that orange region to green (3).\n    *   If an orange region is *not* adjacent to any red region, change all pixels in that orange region to gray (5).\n4.  **Preserve Red Regions:** Red (2) pixels remain unchanged.\n5.  **Preserve Other Regions:** Other color pixels (e.g. Blue (1) in the third example) are unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef get_regions(grid, color):\n    \"\"\"\n    Identifies contiguous regions of a specific color in the grid.\n    NOTE: This implementation uses a manual flood-fill approach as a workaround because SciPy is unavailable.\n    \"\"\"\n    visited = np.zeros_like(grid, dtype=bool)\n    regions = []\n\n    def is_valid(r, c):\n        return 0 <= r < grid.shape[0] and 0 <= c < grid.shape[1]\n\n    def dfs(r, c, current_region):\n        if not is_valid(r, c) or visited[r, c] or grid[r, c] != color:\n            return\n        visited[r, c] = True\n        current_region.append((r, c))\n        dfs(r + 1, c, current_region)\n        dfs(r - 1, c, current_region)\n        dfs(r, c + 1, current_region)\n        dfs(r, c - 1, current_region)\n\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] == color and not visited[r, c]:\n                current_region = []\n                dfs(r, c, current_region)\n                regions.append(np.array(current_region))  # Convert list of tuples to numpy array\n    return regions\n\ndef is_adjacent(region, other_color_regions, grid):\n    \"\"\"\n    Checks if a given region is adjacent to any region of another color.\n    \"\"\"\n    for r, c in region:\n        neighbors = []\n        if r > 0:\n            neighbors.append((r - 1, c))  # Up\n        if r < grid.shape[0] - 1:\n            neighbors.append((r + 1, c))  # Down\n        if c > 0:\n            neighbors.append((r, c - 1))  # Left\n        if c < grid.shape[1] - 1:\n            neighbors.append((r, c + 1))  # Right\n\n        for neighbor_row, neighbor_col in neighbors:\n            for other_region in other_color_regions:\n                if (neighbor_row, neighbor_col) in map(tuple, other_region): # using map to make compatible with numpy\n                    return True\n    return False\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of input_grid\n    output_grid = np.copy(input_grid)\n\n    # 1. Identify Regions - using a custom implementation due to the scipy limitation\n    orange_regions = get_regions(input_grid, 7)\n    red_regions = get_regions(input_grid, 2)\n\n    # 2 & 3. Transform Orange Regions based on Adjacency\n    for orange_region in orange_regions:\n        if is_adjacent(orange_region, red_regions, input_grid):\n            for r, c in orange_region:\n                output_grid[r, c] = 3  # Change to green\n        else:\n            for r, c in orange_region:\n                output_grid[r, c] = 5  # Change to gray\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3029,
    "candidates_token_count": 964,
    "total_token_count": 3993,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.541646
}