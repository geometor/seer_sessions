{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nMoves all green (3) pixels to the last available empty spots before the leftmost azure (8) pixel in their respective row,\nprovided they are not already adjacent to an azure, and that at least one azure exists in the row.\n\"\"\"\n\nimport numpy as np\n\ndef get_indices(grid, value):\n    \"\"\"Helper function to find indices of a specific value in the grid.\"\"\"\n    return np.where(grid == value)\n\ndef is_adjacent(grid, row, col, target_value):\n    \"\"\"Helper function to check if a cell is adjacent to a cell with the target_value.\"\"\"\n    rows, cols = grid.shape\n    for dr in [-1, 0, 1]:\n        for dc in [-1, 0, 1]:\n            if dr == 0 and dc == 0:\n                continue\n            new_row, new_col = row + dr, col + dc\n            if 0 <= new_row < rows and 0 <= new_col < cols and grid[new_row, new_col] == target_value:\n                return True\n    return False\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the specified rule.\"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = output_grid.shape\n\n    for row_index in range(rows):\n        row = output_grid[row_index]\n        threes = np.where(row == 3)[0]\n        eights = np.where(row == 8)[0]\n        \n        # If there are no 3s or 8s in this row, continue\n        if threes.size == 0 or eights.size == 0:\n            continue\n\n        #Find the leftmost 8\n        leftmost_eight_index = eights[0]\n\n\n        # Find the available 0s before the leftmost 8\n        insert_indices = []\n        for i in reversed(range(leftmost_eight_index)):\n            if row[i] == 0:\n              insert_indices.append(i)\n            else:\n              break #stop at the last string of zeros\n        \n        insert_indices.reverse() #make indices ascending\n\n        #Move all 3s that are not adjacent to 8\n        moved_count = 0\n        for three_index in threes:\n          adjacent_to_eight = False\n          for eight_index in eights:\n                if abs(three_index - eight_index) <= 1:\n                     adjacent_to_eight = True\n          if not adjacent_to_eight:\n            if moved_count < len(insert_indices):\n                # Remove the 3 from its current position\n                output_grid[row_index, three_index] = 0\n                output_grid[row_index, insert_indices[moved_count]] = 3\n                moved_count +=1\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5928,
    "candidates_token_count": 664,
    "total_token_count": 6592,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.976747
}