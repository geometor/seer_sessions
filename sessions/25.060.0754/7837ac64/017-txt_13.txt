import numpy as np

def describe_grid(grid):
    """Provides a basic description of a grid."""
    return {
        'shape': grid.shape,
        'unique_colors': np.unique(grid).tolist(),
    }

def analyze_example(input_grid, output_grid, predicted_output_grid):
    """Analyzes a single example."""
    return {
        'input': describe_grid(input_grid),
        'output': describe_grid(output_grid),
        'predicted_output': describe_grid(predicted_output_grid),
        'match': np.array_equal(output_grid, predicted_output_grid)
    }

def compare_grids(grid1, grid2):
    """Compares two grids and highlights differences."""
    if grid1.shape != grid2.shape:
        return "Shapes are different"
    else:
      return (grid1 == grid2).flatten().tolist()

# Provided examples and outputs (replace with actual data)
examples = [
  (np.array([[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,2,0,0],[0,0,0,0,0,3,0,0,0]]),np.array([[0,0,0],[1,0,0],[2,0,0]])),
  (np.array([[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,4,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,6,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,7,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0]]),np.array([[4,0,0],[6,0,0],[7,0,0]])),
  (np.array([[0,0,0,0,0,0,0],[0,8,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,5,0,0,0],[0,0,0,0,0,0,0],[0,0,0,4,0,0,0]]), np.array([[8,0,0],[5,0,0],[4,0,0]])),
]

# Previous transform function
def transform(input_grid):
    # Initialize 3x3 output grid with 0s (black)
    output_grid = np.zeros((3, 3), dtype=int)

    input_height = input_grid.shape[0]
    segment_height = input_height // 3
    
    output_row = 0
    # Iterate through each segment
    for segment_index in range(3):
        start_row = segment_index * segment_height
        end_row = (segment_index + 1) * segment_height
        if segment_index == 2 :
            end_row = input_height
        
        # Find the first non-black and non-green pixel in the current segment
        found = False
        for row in range(start_row, end_row):
            for col in range(input_grid.shape[1]):
                if input_grid[row, col] != 0 and input_grid[row, col] != 3:
                    output_grid[output_row, 0] = input_grid[row, col]
                    output_row += 1
                    found = True
                    break  # Stop searching after finding the first matching pixel
            if found:
                break

    return output_grid

results = []
for input_grid, output_grid in examples:
  predicted = transform(input_grid)
  results.append(analyze_example(input_grid, output_grid, predicted))
  if not np.array_equal(output_grid, predicted):
    print(f'{compare_grids(output_grid, predicted)=}')

for result in results:
    print(result)