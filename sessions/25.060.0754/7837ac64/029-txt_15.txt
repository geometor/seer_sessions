import numpy as np

def find_azure_structure(grid):
    # Find row and column indices where azure (8) pixels exist.
    rows = np.where(np.any(grid == 8, axis=1))[0]
    cols = np.where(np.any(grid == 8, axis=0))[0]
    return rows, cols

def get_region_contents(grid, row_start, row_end, col_start, col_end):
    # Extract the contents of a region defined by the given boundaries.
    region = grid[row_start:row_end, col_start:col_end]
    return region

def transform(input_grid):
    # Create 3x3 Output
    output_grid = np.zeros((3, 3), dtype=int)

    # Identify the Azure Structure
    azure_rows, azure_cols = find_azure_structure(input_grid)

    # Define region boundaries based on azure structure.
    row_bounds = [0] + list(azure_rows) + [input_grid.shape[0]]
    col_bounds = [0] + list(azure_cols) + [input_grid.shape[1]]

    # Map to Output
    output_row = 0
    output_col = 0
    for i in range(len(row_bounds) - 1):
        for j in range(len(col_bounds) - 1):
            # Extract each region
            region = get_region_contents(input_grid, row_bounds[i], row_bounds[i+1], col_bounds[j], col_bounds[j+1])

            # Check region contents and map to output.
            if np.any(region == 1):
                output_grid[output_row, output_col] = 1
            elif np.any(region == 2):
                output_grid[output_row, output_col] = 2

            output_col += 1
            if output_col == 3:
                output_col = 0
                output_row += 1
            if output_row == 3:
                break  # Stop if we've filled the 3x3 grid
        if output_row == 3:
            break

    return output_grid

# Example grids (replace with your actual data)
example_pairs = [
    (np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 8, 0, 0, 0, 0],
              [0, 0, 1, 0, 8, 0, 2, 0, 0],
              [0, 0, 0, 0, 8, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 8, 8, 8, 8, 8, 8, 8, 0],
              [0, 0, 0, 0, 8, 0, 0, 0, 0],
              [0, 0, 2, 0, 8, 0, 1, 0, 0],
              [0, 0, 0, 0, 8, 0, 0, 0, 0]]),
     np.array([[0, 0, 0],
              [1, 0, 2],
              [2, 0, 1]])),
     (np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 8, 0, 0, 0, 0],
                [0, 0, 1, 0, 8, 0, 0, 0, 0],
                [0, 0, 0, 0, 8, 0, 2, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
      np.array([[0, 0, 0],
               [1, 0, 2],
               [0, 0, 0]])
     ),
    (np.array([[0, 0, 0, 0, 8, 0, 0, 0, 0],
               [0, 0, 1, 0, 8, 0, 0, 2, 0],
               [0, 0, 0, 0, 8, 0, 0, 0, 0]]),
     np.array([[1, 0, 2],
               [0, 0, 0],
               [0, 0, 0]])
    )
]

for i, (input_grid, expected_output) in enumerate(example_pairs):
    actual_output = transform(input_grid)
    print(f"Example {i+1}:")
    print("Input:\n", input_grid)
    print("Expected Output:\n", expected_output)
    print("Actual Output:\n", actual_output)
    print("Correct:", np.array_equal(actual_output, expected_output))
    print("-" * 20)