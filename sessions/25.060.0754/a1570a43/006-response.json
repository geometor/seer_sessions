{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Red Pixels:** Locate all pixels with the color red (value 2) within the input grid.\n2.  **Rotate:** For *each* red pixel, individually rotate it 90 degrees clockwise around a fixed center point.\n3. **Fixed Center.** The center of rotation is at coordinates (x, y) where:\n      - `x` = the x coordinate of the original red pixel\n      - `y` = `input_grid.shape[1] // 2 - (red_pixel.x - input_grid.shape[0] // 2)`\n      - Note, the `//` operator represents integer division.\n4. **Output.** Place the rotated red pixels in the output, any existing red pixels in the input grid should be empty (value 0) in the output.\n\"\"\"\n\nimport numpy as np\n\ndef find_red_pixels(grid):\n    # Find coordinates of all red pixels.\n    return np.argwhere(grid == 2)\n\ndef rotate_point_around_dynamic_center(point, grid_shape):\n    # Rotate a point 90 degrees clockwise around a dynamic center.\n    y, x = point\n    center_y = y\n    center_x = grid_shape[1] // 2 - (y - grid_shape[0] // 2)\n    new_y = center_y + (x - center_x)\n    new_x = center_x - (y - center_y)\n    return (new_y, new_x)\n\ndef transform(input_grid):\n    # Initialize the output grid as a copy of the input grid.\n    output_grid = np.copy(input_grid)\n    \n    # Find all red pixels\n    red_pixels = find_red_pixels(input_grid)\n    \n    # Clear existing red pixels from output grid\n    for y, x in red_pixels:\n      output_grid[y,x] = 0\n\n    # Rotate each red pixel individually and update the output grid.\n    for point in red_pixels:\n        new_point = rotate_point_around_dynamic_center(point, input_grid.shape)\n        # Ensure the new point is within the grid bounds.\n        if 0 <= new_point[0] < output_grid.shape[0] and 0 <= new_point[1] < output_grid.shape[1]:\n            output_grid[new_point] = 2\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6694,
    "candidates_token_count": 565,
    "total_token_count": 7259,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 4.603402,
  "response_file": "006-response.json"
}