{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation rotates a shape made of red (2) pixels 90 degrees clockwise while keeping green (3) and white (0) pixels unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef get_red_shape(grid):\n    \"\"\"\n    Extracts the coordinates of red pixels (value 2) forming the shape.\n    \"\"\"\n    red_pixels = []\n    for r, row in enumerate(grid):\n        for c, value in enumerate(row):\n            if value == 2:\n                red_pixels.append((r, c))\n    return red_pixels\n\ndef rotate_point(point, origin):\n    \"\"\"\n    Rotates a point 90 degrees clockwise around an origin.\n    \"\"\"\n    ox, oy = origin\n    px, py = point\n\n    qx = ox + (py - oy)\n    qy = oy - (px - ox)\n    return qx, qy\n\ndef get_rotation_origin(red_pixels):\n    \"\"\"\n    Calculates an approximate \"center\" of rotation for the red shape.\n    Uses the average (centroid) of the red pixels as the rotation origin\n    \"\"\"\n\n    if not red_pixels:\n       return (0,0)\n\n    sum_x = 0\n    sum_y = 0\n    for x, y in red_pixels:\n        sum_x += x\n        sum_y += y\n    return (round(sum_x / len(red_pixels)), round(sum_y / len(red_pixels)))\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.array(input_grid, copy=True)\n\n    # get red shape coordinates\n    red_pixels = get_red_shape(input_grid)\n    \n    # handle empty red pixels\n    if not red_pixels:\n        return output_grid\n\n    # calculate the origin (centroid) of the red pixels\n    origin = get_rotation_origin(red_pixels)\n\n    # rotate red pixels and update the output_grid\n    rotated_red_pixels = []\n    for point in red_pixels:\n      rotated_pixel = rotate_point(point,origin)\n      rotated_red_pixels.append(rotated_pixel)\n\n    # clear original red pixels\n    for r,c in red_pixels:\n      output_grid[r][c] = 0\n\n    # add rotated pixels\n    for r,c in rotated_red_pixels:\n      # check if the cell within grid bounds\n      if 0 <= r < output_grid.shape[0] and 0 <= c < output_grid.shape[1]:\n        output_grid[r][c] = 2\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5096,
    "candidates_token_count": 620,
    "total_token_count": 5716,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.426939,
  "response_file": "002-response.json"
}