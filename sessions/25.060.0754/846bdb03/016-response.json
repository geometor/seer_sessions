{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. **Identify Clusters:** Locate distinct clusters of non-white (non-zero) pixels in the input grid.  A cluster is defined as a group of contiguous (adjacent horizontally or vertically, not diagonally) non-white pixels.\n2. **Bounding Box:** For each identified cluster, determine the smallest rectangular bounding box that completely encloses all pixels of that cluster.\n3. **Sample from Bounding Boxes:** Extract pixels by selecting information from the columns where non-white pixels first appear, and the rows where those pixels are in the input grid.\n4. **Assemble Output:** Arrange these extracted pixels/rows in a condensed rectangular grid, and remove all complete rows and columns with white pixels. The output grid will contain only the information from that sampling.\n\"\"\"\n\nimport numpy as np\n\ndef find_clusters(grid):\n    \"\"\"Finds clusters of non-zero pixels in a grid.\"\"\"\n    visited = set()\n    clusters = []\n\n    def is_valid(r, c):\n        return 0 <= r < grid.shape[0] and 0 <= c < grid.shape[1]\n\n    def dfs(r, c, current_cluster):\n        if (r, c) in visited or not is_valid(r, c) or grid[r, c] == 0:\n            return\n        visited.add((r, c))\n        current_cluster.append((r, c))\n        neighbors = [(r + 1, c), (r - 1, c), (r, c + 1), (r, c - 1)]\n        for nr, nc in neighbors:\n            dfs(nr, nc, current_cluster)\n\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] != 0 and (r, c) not in visited:\n                current_cluster = []\n                dfs(r, c, current_cluster)\n                clusters.append(current_cluster)\n    return clusters\n\ndef bounding_box(cluster):\n    \"\"\"Calculates the bounding box of a cluster.\"\"\"\n    min_r, min_c = float('inf'), float('inf')\n    max_r, max_c = float('-inf'), float('-inf')\n    for r, c in cluster:\n        min_r = min(min_r, r)\n        min_c = min(min_c, c)\n        max_r = max(max_r, r)\n        max_c = max(max_c, c)\n    return min_r, min_c, max_r, max_c\n\ndef extract_rows_cols(grid, clusters):\n    \"\"\"Extracts rows and columns of interest based on clusters.\"\"\"\n    rows_of_interest = set()\n    cols_of_interest = set()\n\n    for cluster in clusters:\n        min_r, min_c, max_r, max_c = bounding_box(cluster)\n        \n        for r, c in cluster:\n          rows_of_interest.add(r)\n          cols_of_interest.add(c)\n\n    #convert sets to sorted lists.\n    rows_of_interest = sorted(list(rows_of_interest))\n    cols_of_interest = sorted(list(cols_of_interest))\n\n    return rows_of_interest, cols_of_interest\n\n\n\ndef transform(input_grid):\n    # Convert input grid to numpy array\n    input_grid = np.array(input_grid)\n\n    # 1. Identify Clusters\n    clusters = find_clusters(input_grid)\n\n    # 2. & 3. Bounding Box and Sample\n    rows_of_interest, cols_of_interest = extract_rows_cols(input_grid, clusters)\n\n\n    # 4. Assemble Output - create a grid with the selected rows and columns\n    # Create a subgrid\n    subgrid = input_grid[np.ix_(rows_of_interest, cols_of_interest)]\n\n    return subgrid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2526,
    "candidates_token_count": 908,
    "total_token_count": 3434,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.177573,
  "response_file": "016-response.json"
}