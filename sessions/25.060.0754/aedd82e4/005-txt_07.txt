import numpy as np

def analyze_example(input_grid, output_grid, transform_func):
    """Analyzes a single input-output example and the transform function's output.
    """
    predicted_output = transform_func(input_grid)
    correct = np.array_equal(predicted_output, output_grid)
    bottom_left_input = input_grid[2, 0]
    bottom_left_output = output_grid[2, 0] if output_grid.shape == input_grid.shape else "N/A"

    return {
        "correct": correct,
        "bottom_left_input": int(bottom_left_input),  # Convert to int for cleaner reporting
        "bottom_left_output": int(bottom_left_output) if isinstance(bottom_left_output, np.int64) else bottom_left_output,
        "predicted_output_equals_output": np.array_equal(predicted_output, output_grid)
    }


# Define example grids (replace with your actual data)
example1_input = np.array([[0, 0, 0], [0, 0, 0], [2, 0, 0]])
example1_output = np.array([[0, 0, 0], [0, 0, 0], [1, 0, 0]])
example2_input = np.array([[0, 0, 0], [0, 2, 0], [0, 0, 0]])
example2_output = np.array([[0, 0, 0], [0, 2, 0], [0, 0, 0]])
example3_input = np.array([[0, 0, 0], [0, 0, 0], [2, 5, 0]])
example3_output = np.array([[0, 0, 0], [0, 0, 0], [1, 5, 0]])

# Initial transform function
def transform(input_grid):
    output_grid = np.copy(input_grid)
    if output_grid[2, 0] == 2:
        output_grid[2, 0] = 1
    return output_grid

# Analyze the examples
results = []
results.append(analyze_example(example1_input, example1_output, transform))
results.append(analyze_example(example2_input, example2_output, transform))
results.append(analyze_example(example3_input, example3_output, transform))

print(results)