task_context:
  grid_properties:
    - dimensions: Input and output grids have the same height and width.
    - background_color: The predominant color in the input grid serves as the background and is preserved in the output grid where no other pattern is drawn.
  objects:
    - object: source_pixel
      description: Isolated pixels of blue color (1) in the input grid.
      properties:
        - color: blue (1)
        - location: (row, column) coordinates
    - object: pattern
      description: A composite shape drawn in the output grid centered on the location of each source_pixel.
      properties:
        - center_color: red (2) at the source_pixel location.
        - line_color: blue (1) forming horizontal and vertical lines through the center, extending to grid boundaries.
        - diagonal_color: green (3) placed at the four diagonal neighbors of the center.
actions:
  - action: identify_source_pixels
    input: input_grid
    output: list of coordinates (r, c) for all blue (1) pixels.
  - action: initialize_output
    input: input_grid dimensions, background_color
    output: output_grid filled with background_color.
  - action: draw_center_and_lines
    input: output_grid, source_pixel coordinates (r, c)
    output: modified output_grid
    steps:
      - Set output_grid[r, c] to red (2).
      - Fill output_grid[r, :] with blue (1), skipping column c.
      - Fill output_grid[:, c] with blue (1), skipping row r.
  - action: draw_diagonals
    input: output_grid, source_pixel coordinates (r, c)
    output: modified output_grid
    steps:
      - For each diagonal neighbor (nr, nc) of (r, c):
        - If (nr, nc) is within grid bounds, set output_grid[nr, nc] to green (3).
relationships:
  - Each source_pixel in the input corresponds to one pattern in the output.
  - The pattern's center is located at the source_pixel's original coordinates.
  - The pattern's colors (red 2, blue 1, green 3) overwrite the background color and potentially each other based on drawing order.
order_of_operations:
  - Initialize the output grid with the background color.
  - Iterate through all identified source_pixel coordinates. For each coordinate, perform the draw_center_and_lines action.
  - After processing all source pixels for centers and lines, iterate through all identified source_pixel coordinates again. For each coordinate, perform the draw_diagonals action.