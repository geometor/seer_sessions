task_description: Reflect objects across a blue axis and swap specific colors only in the reflection.

definitions:
  background_color: 0 (white)
  axis_color: 1 (blue)
  object_colors: [2, 3, 4, 5, 6, 8] # Red, Green, Yellow, Gray, Magenta, Azure
  color_swap_pairs:
    - [2, 3] # Red <-> Green
    - [4, 8] # Yellow <-> Azure
    - [5, 6] # Gray <-> Magenta
  identity_colors: [0, 1, 7, 9] # Colors that are not part of swaps and not objects (except axis)

grid_properties:
  axis:
    - A single, complete line (row or column) of blue (1) pixels.
    - Defines the axis of reflection.
    - Can be horizontal or vertical.
  objects:
    - Contiguous or non-contiguous collections of pixels with colors from `object_colors`.
    - Located on one side of the axis.

transformation_steps:
  - step: 1
    action: Initialize output grid
    details: Create a copy of the input grid. This preserves background, axis, and original objects initially.
  - step: 2
    action: Identify axis
    details: Find the unique horizontal or vertical blue line. If none or multiple exist, the transformation might be undefined (though examples only show one).
  - step: 3
    action: Identify original object pixels
    details: Find all pixels that are not background (0) and not axis (1). Store their coordinates and original colors.
  - step: 4
    action: Perform reflection and color swap
    details: For each original object pixel identified in step 3
      - Calculate its reflected coordinate across the axis.
      - Determine the swapped color using the `color_swap_pairs`.
      - If the reflected coordinate is within the grid boundaries, update the output grid *at the reflected coordinate* with the *swapped* color. The original pixel's position in the output grid remains as copied initially unless overwritten by another pixel's reflection.

important_notes:
  - The colors of the *original* object pixels are *not* changed in the output grid, unless their position is overwritten by the reflection of another pixel.
  - The color swap is applied *only* to the pixels being placed at the reflected positions.
  - Reflections can overlap; the last write to a cell determines its final color.
  - Reflections landing outside the grid boundaries are ignored.