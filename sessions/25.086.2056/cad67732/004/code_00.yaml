task_description: >
  Transforms an input grid by creating an enlarged output grid (2x height, 2x width)
  and placing two copies of the input grid into specific quadrants based on the
  distribution of non-background pixels in the input.

input_object:
  name: input_grid
  properties:
    - height (H)
    - width (W)
    - pixels: 2D array of integer colors (0-9)
    - non_background_pixels: Pixels with color > 0
    - main_diagonal_non_background_count: Count of non_background_pixels where row index equals column index.
    - anti_diagonal_non_background_count: Count of non_background_pixels where row index equals (W - 1 - column index).

output_object:
  name: output_grid
  properties:
    - height: 2 * H
    - width: 2 * W
    - pixels: 2D array initialized to white (0)
    - content: Contains two copies of input_grid placed in specific quadrants.

transformation:
  actions:
    - Create output_grid of size (2*H, 2*W) filled with white (0).
    - Calculate main_diagonal_non_background_count (M) and anti_diagonal_non_background_count (A) for input_grid.
    - Compare M and A.
    - if M >= A:
        - Copy input_grid to top-left quadrant of output_grid (rows 0 to H-1, cols 0 to W-1).
        - Copy input_grid to bottom-right quadrant of output_grid (rows H to 2*H-1, cols W to 2*W-1).
    - else (A > M):
        - Copy input_grid to top-right quadrant of output_grid (rows 0 to H-1, cols W to 2*W-1).
        - Copy input_grid to bottom-left quadrant of output_grid (rows H to 2*H-1, cols 0 to W-1).
  notes: >
    The comparison uses '>=' for the main diagonal case based on Examples 1 & 2 where M > A.
    If M == A, the default assumption is main diagonal placement (TL, BR). This needs confirmation if such a case exists.
    All examples use square grids; the diagonal definitions assume this but are robust for rectangular grids as well.