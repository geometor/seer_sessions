{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransforms the input grid based on the vertical position and horizontal alignment of the non-background pattern.\n\n1.  Analyze the Input Grid: Check if the input grid contains any non-background pixels (pixels with value != 0).\n    - If no non-background pixels exist, return the input grid unchanged.\n2.  Identify Pattern Position: Determine the minimum row index (`min_r`) and minimum column index (`min_c`) containing any non-background pixel.\n3.  Apply Conditional Transformation:\n    - Case 1: Pattern does not touch the top edge (`min_r > 0`)\n        a. Find the maximum row index (`max_r`) containing a non-background pixel.\n        b. Calculate the height of the pattern's row span: `h = max_r - min_r + 1`.\n        c. Extract the block of rows from the input grid spanning `min_r` to `max_r` (inclusive).\n        d. Create a new block by vertically flipping the extracted block.\n        e. Create the output grid as a copy of the input grid.\n        f. Replace the top `h` rows of the output grid (rows 0 to `h-1`) with the flipped block.\n    - Case 2: Pattern touches the top edge (`min_r == 0`)\n        a. Check if the pattern is already aligned to the left edge (`min_c == 0`). If yes, return the input grid unchanged.\n        b. If not left-aligned (`min_c > 0`), create a new output grid of the same dimensions as the input, filled entirely with the background color (0).\n        c. Iterate through each pixel `(r, c)` of the input grid. If the input pixel `input[r, c]` is not the background color, copy its value to the output grid at position `(r, c - min_c)`. This effectively shifts the entire pattern left by `min_c` columns.\n4.  Return the Output Grid: Return the resulting transformed grid.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid (list of lists): The input grid.\n\n    Returns:\n        list of lists: The transformed grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    grid = np.array(input_grid, dtype=int)\n    height, width = grid.shape\n    background_pixel = 0\n\n    # Find indices of non-background pixels\n    non_bg_coords = np.argwhere(grid != background_pixel)\n\n    # 1. Handle empty grid case\n    if non_bg_coords.size == 0:\n        return input_grid\n\n    # 2. Identify Pattern Position\n    min_r = non_bg_coords[:, 0].min()\n    max_r = non_bg_coords[:, 0].max()\n    min_c = non_bg_coords[:, 1].min()\n\n    # 3. Apply Conditional Transformation\n    \n    # Case 1: Pattern does not touch the top edge (min_r > 0)\n    if min_r > 0:\n        # a. max_r already calculated\n        # b. Calculate row span height\n        block_height = max_r - min_r + 1\n        \n        # c. Extract the block of rows\n        pattern_block = grid[min_r : max_r + 1, :]\n        \n        # d. Vertically flip the extracted block\n        reversed_block = pattern_block[::-1, :]\n        \n        # e. Create output grid as a copy\n        output_grid = grid.copy()\n        \n        # f. Replace the top 'block_height' rows with the flipped block\n        # Ensure we don't try to write past the grid boundary\n        rows_to_overwrite = min(block_height, height)\n        output_grid[0:rows_to_overwrite, :] = reversed_block[:rows_to_overwrite, :] # Slice reversed_block too in case it's taller than grid\n\n    # Case 2: Pattern touches the top edge (min_r == 0)\n    else: # min_r == 0\n        # a. Check if already left-aligned\n        if min_c == 0:\n            # Pattern touches top and left, return unchanged\n            output_grid = grid\n        else: # min_c > 0\n            # b. Create a new output grid filled with background color\n            output_grid = np.full_like(grid, background_pixel)\n            \n            # c. Shift the pattern left by min_c columns\n            for r, c in non_bg_coords:\n                 # Check boundary just in case, though c >= min_c should hold\n                if c - min_c >= 0:\n                   output_grid[r, c - min_c] = grid[r, c]\n\n    # 4. Return the Output Grid\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5095,
    "candidates_token_count": 1141,
    "total_token_count": 6236,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.629408,
  "retries": null
}