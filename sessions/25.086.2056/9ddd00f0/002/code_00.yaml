---
task_description: Transforms the input grid based on the vertical position and horizontal alignment of the non-background pattern.

definitions:
  - name: background_pixel
    value: 0
  - name: input_grid
    type: 2D array of integers 0-9
  - name: output_grid
    type: 2D array of integers 0-9
  - name: pattern
    description: The collection of all non-background pixels in the input grid.

pattern_properties:
  - name: exists
    description: Whether the input grid contains any non-background pixels.
    value_logic: Check if any pixel value is not equal to background_pixel.
  - name: min_row
    description: The minimum row index containing a non-background pixel.
    value_logic: Find the minimum row index among all pixels in the pattern. Relevant only if pattern exists.
  - name: max_row
    description: The maximum row index containing a non-background pixel.
    value_logic: Find the maximum row index among all pixels in the pattern. Relevant only if pattern exists.
  - name: row_span_height
    description: The number of rows between min_row and max_row, inclusive.
    value_logic: max_row - min_row + 1. Relevant only if pattern exists.
  - name: min_col
    description: The minimum column index containing a non-background pixel.
    value_logic: Find the minimum column index among all pixels in the pattern. Relevant only if pattern exists.
  - name: touches_top_edge
    description: Whether the pattern includes any pixels in the first row (row 0).
    value_logic: Check if min_row == 0. Relevant only if pattern exists.
  - name: is_left_aligned
    description: Whether the pattern includes any pixels in the first column (column 0).
    value_logic: Check if min_col == 0. Relevant only if pattern exists.

transformation_logic:
  - condition: Pattern does not exist.
    action: Return the input_grid unchanged.
  - condition: Pattern exists AND touches_top_edge is False.
    action:
      - Step 1: Identify the block of rows in the input_grid from min_row to max_row, inclusive.
      - Step 2: Create a vertically flipped copy of this row block.
      - Step 3: Create the output_grid as a copy of the input_grid.
      - Step 4: Overwrite the top 'row_span_height' rows of the output_grid with the flipped row block.
  - condition: Pattern exists AND touches_top_edge is True AND is_left_aligned is True.
    action: Return the input_grid unchanged (pattern already touches top and left).
  - condition: Pattern exists AND touches_top_edge is True AND is_left_aligned is False.
    action:
      - Step 1: Determine the horizontal shift amount needed, which is equal to min_col.
      - Step 2: Create a new output_grid of the same dimensions as the input_grid, filled with the background_pixel color.
      - Step 3: For each non-background pixel at `(r, c)` in the input_grid, copy its value to the position `(r, c - min_col)` in the output_grid.

output:
  - name: final_grid
    description: The transformed grid resulting from applying the relevant action based on the conditions.
    type: 2D array of integers 0-9
---