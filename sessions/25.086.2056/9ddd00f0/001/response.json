{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nIdentifies the block of rows spanning from the topmost row containing a non-background pixel \nto the bottommost row containing a non-background pixel in the input grid. \nAssumes background color is 0.\nReverses the order of the rows within this identified block.\nCreates an output grid by taking a copy of the input grid and overwriting its top rows \nwith the reversed block. The number of rows overwritten equals the height of the identified block.\nThe rows below the overwritten section remain unchanged from the input grid.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid (list of lists): The input grid.\n\n    Returns:\n        list of lists: The transformed grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    grid = np.array(input_grid, dtype=int)\n    height, width = grid.shape\n\n    # Find indices of rows containing any non-background (non-zero) pixels\n    non_background_rows = [r for r in range(height) if np.any(grid[r, :] != 0)]\n\n    # If no non-background pixels exist, return the original grid\n    if not non_background_rows:\n        return input_grid\n\n    # Find the index of the topmost and bottommost rows with non-background pixels\n    min_row_idx_overall = min(non_background_rows)\n    max_row_idx = max(non_background_rows)\n\n    # Calculate the height of the block spanning these rows\n    block_height = max_row_idx - min_row_idx_overall + 1\n\n    # Extract the block of rows from the input grid\n    # Includes all rows from min_row_idx_overall to max_row_idx, inclusive\n    pattern_block = grid[min_row_idx_overall : max_row_idx + 1, :]\n\n    # Reverse the order of rows within the extracted block\n    reversed_block = pattern_block[::-1, :]\n\n    # Create the output grid as a copy of the input grid\n    output_grid = grid.copy()\n\n    # Overwrite the top 'block_height' rows of the output grid with the reversed block\n    # Ensure we don't try to write past the grid boundary if block_height > height (shouldn't happen with this logic)\n    rows_to_overwrite = min(block_height, height)\n    output_grid[0:rows_to_overwrite, :] = reversed_block\n\n    # Convert the output grid back to a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3388,
    "candidates_token_count": 603,
    "total_token_count": 3991,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 17.50834,
  "retries": null
}