{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransforms the input grid based on the vertical position of its non-background (non-white) pixels.\n\n1. Analyze the Input Grid: Check if the input grid contains any non-background pixels (pixels with value != 0).\n   - If no non-background pixels exist, return the input grid unchanged.\n2. Identify Pattern Position: Determine the minimum row index (`min_r`) containing any non-background pixel.\n3. Apply Conditional Transformation:\n   - Case 1: Pattern touches the top edge (`min_r == 0`): Return the input grid unchanged.\n   - Case 2: Pattern does not touch the top edge (`min_r > 0`):\n     a. Find the maximum row index (`max_r`) containing a non-background pixel.\n     b. Calculate the height of the pattern's row span: `block_height = max_r - min_r + 1`.\n     c. Extract the rectangular block of rows from the input grid spanning `min_r` to `max_r` (inclusive) across the full grid width.\n     d. Create a new block by vertically flipping the extracted block.\n     e. Create the output grid as a copy of the input grid.\n     f. Determine the number of rows to overwrite at the top: `rows_to_overwrite = min(block_height, grid_height)`.\n     g. Replace the content of the output grid from row 0 up to (but not including) `rows_to_overwrite` with the corresponding top rows of the flipped block.\n4. Return the Output Grid: Return the resulting transformed grid.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid (list of lists): The input grid.\n\n    Returns:\n        list of lists: The transformed grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    grid = np.array(input_grid, dtype=int)\n    height, width = grid.shape\n    background_pixel = 0\n\n    # 1. Analyze the Input Grid: Find indices of non-background pixels\n    non_bg_coords = np.argwhere(grid != background_pixel)\n\n    # Handle case where grid is all background\n    if non_bg_coords.size == 0:\n        return input_grid # Return original grid unchanged\n\n    # 2. Identify Pattern Position (minimum row index)\n    min_r = non_bg_coords[:, 0].min()\n\n    # 3. Apply Conditional Transformation\n\n    # Case 1: Pattern touches the top edge (min_r == 0)\n    if min_r == 0:\n        # Return the input grid unchanged\n        output_grid = grid\n\n    # Case 2: Pattern does not touch the top edge (min_r > 0)\n    else:\n        # a. Find maximum row index\n        max_r = non_bg_coords[:, 0].max()\n\n        # b. Calculate row span height\n        block_height = max_r - min_r + 1\n\n        # c. Extract the block of rows containing the pattern (full width)\n        pattern_block = grid[min_r : max_r + 1, :]\n\n        # d. Vertically flip the extracted block\n        reversed_block = np.flipud(pattern_block)\n\n        # e. Create output grid as a copy of the input\n        output_grid = grid.copy()\n\n        # f. Determine the number of rows to overwrite at the top\n        rows_to_overwrite = min(block_height, height)\n\n        # g. Replace the top 'rows_to_overwrite' rows with the flipped block\n        # Ensure the source slice matches the destination slice size\n        output_grid[0:rows_to_overwrite, :] = reversed_block[0:rows_to_overwrite, :]\n\n    # 4. Return the Output Grid\n    # Convert back to list of lists as required by the ARC format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7883,
    "candidates_token_count": 913,
    "total_token_count": 8796,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.127089,
  "retries": null
}