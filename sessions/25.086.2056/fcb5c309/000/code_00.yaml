task_context:
  input_grid:
    description: A 2D grid containing pixels of different colors (0-9).
    elements:
      - type: background
        color: white (0)
      - type: large_shapes
        description: One or more contiguous objects of the same color, typically the largest non-background objects in the grid. Their specific shape (L, U, etc.) varies but isn't directly used in the output.
        properties:
          - color: Varies (blue, red, green in examples)
          - size: Relatively large compared to other non-background elements.
      - type: scattered_pixels
        description: Pixels (or very small objects) of a distinct color, not part of the largest contiguous object(s).
        properties:
          - color: Varies (green, yellow, red in examples). This color's numerical value is significant.
          - size: Small, typically individual pixels or small groups.
          - distribution: Spread across the grid, not forming large structures.
  output_grid:
    description: A smaller 2D grid representing a single digit.
    properties:
      - size: Fixed based on the digit (e.g., 6x7 for '3', 7x7 for '2' and '4').
    elements:
      - type: digit_shape
        description: A pattern of pixels forming a numerical digit.
        properties:
          - color: Same as the 'scattered_pixels' color from the input.
          - value: The numerical digit represented corresponds to the color value of the 'scattered_pixels'.
      - type: background
        color: white (0)

transformation_logic:
  - step: Identify non-background pixels and group them into contiguous objects based on color.
  - step: Calculate the size (pixel count) of each object.
  - step: Find the maximum size among all objects.
  - step: Identify the color of the pixels that *do not* belong to any object(s) having the maximum size. This is the 'scatter_color'.
  - step: Determine the numerical value ('digit_value') of the 'scatter_color'.
  - step: Select a predefined pixel pattern corresponding to the 'digit_value'.
  - step: Create the output grid using the 'scatter_color' for the digit pattern pixels and white (0) for the background pixels.

predefined_digit_patterns: # Using 'C' for scatter_color, '_' for white(0)
  '2': # 7x7
    - C C C C C C C
    - C _ C _ C _ C
    - C _ _ _ _ _ C
    - C _ _ _ _ _ C
    - C _ C _ _ _ C
    - C _ _ _ _ C C
    - C C C C C C C
  '3': # 6x7
    - C C C C C C C
    - C _ _ C _ _ C
    - C _ _ _ _ _ C
    - C C _ C _ _ C
    - C _ _ _ _ _ C
    - C C C C C C C
  '4': # 7x7
    - C C C C C C C
    - C _ _ _ _ _ C
    - C C _ _ _ _ C
    - C _ _ _ _ _ C
    - C _ _ _ C _ C
    - C _ _ _ _ _ C
    - C C C C C C C
  # Note: Patterns for other digits (0, 1, 5-9) might be needed if they appear as scatter colors.