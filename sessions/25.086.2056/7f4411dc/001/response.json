{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentifies all separate, connected groups (objects) of a single non-white color in the input grid.\nCalculates the size (number of pixels) of each object.\nFinds the largest size among all objects.\nCreates a new output grid initialized with white (0) pixels.\nCopies only the object(s) matching the largest size from the input grid to the output grid at their original positions.\nConnectivity is defined as adjacent pixels (up, down, left, right).\n\"\"\"\n\ndef find_objects(grid, color):\n    \"\"\"\n    Finds all connected objects of a specific color in the grid using BFS.\n\n    Args:\n        grid (np.array): The input grid.\n        color (int): The color of the objects to find.\n\n    Returns:\n        list: A list of objects, where each object is a list of (row, col) tuples.\n    \"\"\"\n    height, width = grid.shape\n    visited = set()\n    objects = []\n\n    for r in range(height):\n        for c in range(width):\n            # If we find a pixel of the target color that hasn't been visited\n            if grid[r, c] == color and (r, c) not in visited:\n                current_object_coords = []\n                queue = deque([(r, c)])\n                visited.add((r, c))\n\n                # Start BFS from this pixel\n                while queue:\n                    curr_r, curr_c = queue.popleft()\n                    current_object_coords.append((curr_r, curr_c))\n\n                    # Check neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = curr_r + dr, curr_c + dc\n\n                        # Check if neighbor is within bounds\n                        if 0 <= nr < height and 0 <= nc < width:\n                            # Check if neighbor has the target color and hasn't been visited\n                            if grid[nr, nc] == color and (nr, nc) not in visited:\n                                visited.add((nr, nc))\n                                queue.append((nr, nc))\n                \n                # Add the found object (list of coordinates) to our list of objects\n                if current_object_coords:\n                    objects.append(current_object_coords)\n                    \n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Filters the input grid to keep only the largest object(s) of the non-background color.\n\n    Args:\n        input_grid (np.array): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.array: A 2D numpy array representing the output grid.\n    \"\"\"\n    \n    # Get grid dimensions\n    height, width = input_grid.shape\n    \n    # Initialize output_grid with background color (white=0)\n    output_grid = np.zeros_like(input_grid)\n    \n    # Find the non-background color used for objects\n    object_color = None\n    unique_colors = np.unique(input_grid)\n    for color in unique_colors:\n        if color != 0:\n            object_color = color\n            break\n            \n    # If no object color found (grid is all white), return the empty grid\n    if object_color is None:\n        return output_grid\n\n    # Find all connected objects of that color\n    objects = find_objects(input_grid, object_color)\n\n    # If no objects are found, return the empty grid\n    if not objects:\n        return output_grid\n        \n    # Calculate the size of each object\n    object_sizes = [len(obj) for obj in objects]\n    \n    # Find the maximum size among the objects\n    max_size = max(object_sizes)\n    \n    # Iterate through the objects and draw only the largest ones onto the output grid\n    for i, obj_coords in enumerate(objects):\n        if object_sizes[i] == max_size:\n            for r, c in obj_coords:\n                output_grid[r, c] = object_color\n                \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3697,
    "candidates_token_count": 965,
    "total_token_count": 4662,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.734173,
  "retries": null
}