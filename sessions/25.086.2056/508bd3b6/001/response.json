{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\ndef find_wall_location(grid):\n    \"\"\"\n    Determines the location of the 'wall' (block of red pixels) \n    based on which edge has the most red pixels.\n    \"\"\"\n    H, W = grid.shape\n    \n    # Count red pixels (value 2) on each edge\n    sum_bottom = np.sum(grid[H-1, :] == 2)\n    sum_top = np.sum(grid[0, :] == 2)\n    sum_left = np.sum(grid[:, 0] == 2)\n    sum_right = np.sum(grid[:, W-1] == 2)\n    \n    sums = {\n        'bottom': sum_bottom,\n        'top': sum_top,\n        'left': sum_left,\n        'right': sum_right\n    }\n    \n    # Find the edge with the maximum count\n    # If all counts are 0, return None or a default\n    if all(v == 0 for v in sums.values()):\n        return None \n        \n    wall_location = max(sums, key=sums.get)\n    return wall_location\n\ndef transform(input_grid):\n    \"\"\"\n    Identifies Azure (8) pixels and a Red (2) wall in the input grid.\n    For each Azure pixel, it draws a diagonal Green (3) line starting \n    from the adjacent cell, moving away from the Red wall, until it \n    hits the grid boundary or a non-White (0) pixel.\n    The original Azure and Red pixels remain unchanged.\n    \"\"\"\n    \n    # Convert input list of lists to numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    H, W = input_np.shape\n    \n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_np)\n    \n    # Find coordinates of all Azure (8) pixels\n    azure_pixels = np.argwhere(input_np == 8)\n    \n    # If there are no azure pixels, return the original grid\n    if azure_pixels.size == 0:\n        return output_grid.tolist()\n        \n    # Determine the location of the red wall\n    wall_loc = find_wall_location(input_np)\n    \n    # If no wall is found, return the original grid (or handle as error/default)\n    if wall_loc is None:\n        # Based on examples, a wall seems required. If none, maybe no change?\n        return output_grid.tolist() \n        \n    # Determine the diagonal direction (dr, dc) based on the wall location\n    # dr = change in row, dc = change in column\n    if wall_loc == 'bottom':\n        dr, dc = -1, 1  # Up-Right\n    elif wall_loc == 'right':\n        dr, dc = -1, -1 # Up-Left\n    elif wall_loc == 'left':\n        dr, dc = -1, 1  # Up-Right\n    elif wall_loc == 'top':\n        # Assumption based on symmetry, not seen in examples\n        dr, dc = 1, 1   # Down-Right (Needs verification if top wall occurs) \n    else: \n        # Should not happen if wall_loc is one of the four or None\n        return output_grid.tolist()\n\n    # Iterate through each found Azure pixel\n    for r, c in azure_pixels:\n        # Calculate the starting position for the green line\n        current_r, current_c = r + dr, c + dc\n        \n        # Draw the green line diagonally\n        while 0 <= current_r < H and 0 <= current_c < W:\n            # Check the corresponding cell in the *output* grid\n            if output_grid[current_r, current_c] == 0: # If it's white\n                output_grid[current_r, current_c] = 3 # Change it to green\n                # Move to the next diagonal position\n                current_r += dr\n                current_c += dc\n            else:\n                # Stop if we hit a non-white pixel or the boundary (checked by while)\n                break\n                \n    # Convert the final numpy array back to a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2834,
    "candidates_token_count": 1007,
    "total_token_count": 3841,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 168.239343,
  "retries": null
}