{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import defaultdict, deque\n\n\"\"\"\nIdentifies distinct, contiguous objects of non-white colors in the input grid.\nCounts the number of objects for each color.\nSorts the colors based on their object count (descending) and then by color value (ascending) for ties.\nCreates an output grid where:\n  - The number of rows equals the number of distinct non-white colors found.\n  - The number of columns equals the maximum object count found for any single color.\n  - Each row corresponds to a unique color from the sorted list.\n  - In row 'i' corresponding to color 'C' with count 'N', the last 'N' cells are filled with 'C', and the preceding cells are white (0).\n\"\"\"\n\ndef find_object_counts(grid):\n    \"\"\"\n    Finds connected components (objects) of non-white colors and counts them per color.\n\n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        dict: A dictionary mapping color (int) to object count (int).\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    color_counts = defaultdict(int)\n    \n    # Directions for 4-way connectivity (up, down, left, right)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    for r in range(rows):\n        for c in range(cols):\n            # Check if the cell is non-white and hasn't been visited yet\n            if grid[r, c] != 0 and not visited[r, c]:\n                color = grid[r, c]\n                # Found the start of a new object of this color\n                color_counts[color] += 1\n                \n                # Perform BFS to find all parts of this object and mark them visited\n                queue = deque([(r, c)])\n                visited[r, c] = True\n                \n                while queue:\n                    curr_r, curr_c = queue.popleft()\n                    \n                    # Explore neighbors\n                    for dr, dc in directions:\n                        nr, nc = curr_r + dr, curr_c + dc\n                        \n                        # Check bounds\n                        if 0 <= nr < rows and 0 <= nc < cols:\n                            # Check if neighbor is part of the same object and not visited\n                            if grid[nr, nc] == color and not visited[nr, nc]:\n                                visited[nr, nc] = True\n                                queue.append((nr, nc))\n                                \n    return dict(color_counts)\n\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Transforms the input grid based on counts of colored objects.\n\n    Args:\n        input_grid (np.array): The input 2D numpy array.\n\n    Returns:\n        np.array: The transformed 2D numpy array.\n    \"\"\"\n    # 1. Find and count distinct objects for each color\n    color_counts = find_object_counts(input_grid)\n\n    # Handle edge case: no non-white objects found\n    if not color_counts:\n        return np.zeros((1, 1), dtype=int) # Or potentially an empty grid np.array([[]]) depending on expected ARC behavior\n\n    # 2. Get list of (color, count) pairs\n    counts_list = list(color_counts.items())\n\n    # 3. Sort the list: primary key = count (descending), secondary key = color (ascending)\n    #    We sort by color ascending first, then by count descending (stable sort preserves previous order for ties)\n    counts_list.sort(key=lambda item: item[0]) # Sort by color ascending\n    counts_list.sort(key=lambda item: item[1], reverse=True) # Sort by count descending (stable)\n\n    # 4. Determine output grid dimensions\n    num_colors = len(counts_list)\n    # Find max count, default to 1 if list is somehow non-empty but counts are 0 (shouldn't happen with find_object_counts)\n    max_count = max(count for _, count in counts_list) if counts_list else 1 \n    \n    output_height = num_colors\n    output_width = max_count\n\n    # 5. Initialize the output grid with background color (0)\n    output_grid = np.zeros((output_height, output_width), dtype=int)\n\n    # 6. Populate the output grid row by row based on the sorted list\n    for i, (color, count) in enumerate(counts_list):\n        # Fill the last 'count' cells of row 'i' with 'color'\n        # Calculate the start column index for the colored segment\n        start_col = output_width - count\n        # Fill the cells\n        output_grid[i, start_col:output_width] = color\n        \n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3797,
    "candidates_token_count": 1139,
    "total_token_count": 4936,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.880501,
  "retries": null
}