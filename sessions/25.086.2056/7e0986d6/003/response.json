{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentify the non-background color that forms the smallest connected object (by pixel count). \nReplace all pixels of this identified color with the background color (white, 0).\nIf multiple colors share the same smallest object size, choose the color with the lowest numerical value as the tie-breaker.\nConnectedness is defined by sharing an edge (up, down, left, right), not just a corner.\n\"\"\"\n\nimport numpy as np\nfrom collections import defaultdict\n\nBACKGROUND_COLOR = 0\n\ndef find_objects(grid, color):\n    \"\"\"\n    Finds all connected objects of a specific color in the grid.\n\n    Args:\n        grid (np.array): The input grid.\n        color (int): The color of the objects to find.\n\n    Returns:\n        list of sets: A list where each set contains the (row, col) tuples of pixels belonging to one object.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = set()\n    objects = []\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == color and (r, c) not in visited:\n                # Start a Breadth-First Search (BFS) for a new object\n                current_object = set()\n                q = [(r, c)]\n                visited.add((r, c))\n                \n                while q:\n                    row, col = q.pop(0)\n                    current_object.add((row, col))\n\n                    # Check neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        \n                        # Check bounds and if neighbor is the correct color and not visited\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] == color and (nr, nc) not in visited:\n                            visited.add((nr, nc))\n                            q.append((nr, nc))\n                \n                objects.append(current_object)\n                \n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Identifies the non-background color forming the smallest object and replaces \n    all occurrences of that color with the background color (0). Uses color value\n    as a tie-breaker if minimum object sizes are equal.\n\n    Args:\n        input_grid (list of lists): A 2D list representing the input grid.\n\n    Returns:\n        list of lists: A 2D list representing the transformed grid.\n    \"\"\"\n    # Convert input list of lists to a numpy array\n    input_array = np.array(input_grid, dtype=int)\n    # Initialize output_grid as a copy\n    output_grid = np.copy(input_array)\n    \n    # Find unique non-background colors\n    unique_colors = np.unique(input_array)\n    non_background_colors = [color for color in unique_colors if color != BACKGROUND_COLOR]\n\n    # If there are fewer than two non-background colors, no change is needed\n    if len(non_background_colors) < 1: # Changed from < 2 because even with one color, we might need to process it if it has the smallest object\n         return output_grid.tolist()\n\n    min_object_sizes = {} # Dictionary to store {color: min_object_size}\n\n    # Iterate through each non-background color\n    for color in non_background_colors:\n        # Find all objects of the current color\n        objects = find_objects(input_array, color)\n        \n        # If no objects of this color are found (shouldn't happen if color is present), skip\n        if not objects:\n            continue\n            \n        # Calculate the size of each object and find the minimum size for this color\n        min_size_for_color = min(len(obj) for obj in objects)\n        min_object_sizes[color] = min_size_for_color\n\n    # If min_object_sizes is empty (no non-background colors found objects), return original\n    if not min_object_sizes:\n         return output_grid.tolist()\n\n    # Find the overall minimum object size among all colors\n    overall_min_size = min(min_object_sizes.values())\n\n    # Find all colors that share this overall minimum size\n    colors_with_min_size = [color for color, size in min_object_sizes.items() if size == overall_min_size]\n\n    # Apply tie-breaking rule: choose the color with the lowest numerical value\n    target_color = min(colors_with_min_size)\n\n    # Replace all occurrences of the target_color with the BACKGROUND_COLOR\n    output_grid[output_grid == target_color] = BACKGROUND_COLOR\n\n    # Convert the result back to a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4015,
    "candidates_token_count": 1123,
    "total_token_count": 5138,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 18.252372,
  "retries": null
}