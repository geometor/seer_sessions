{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by creating a larger square grid based on the extent of non-background pixels.\n    The input pattern is placed in the top-left corner of the output grid.\n    A 180-degree rotated version of the input pattern is placed symmetrically in the bottom-right corner.\n\n    The size of the output grid (N x N) is determined by finding the maximum distance 'd'\n    of any non-background (non-zero color) pixel from any of the four edges of the input grid.\n    The output grid dimension N is calculated as N = 2 * d + 1.\n\n    Each non-background pixel from the input at coordinate (r, c) is copied to two locations\n    in the output grid:\n    1. The same coordinate (r, c).\n    2. The symmetrically opposite coordinate (N-1-r, N-1-c).\n    \"\"\"\n\n    # Convert input list of lists to a numpy array for easier processing\n    input_np = np.array(input_grid, dtype=int)\n    H_in, W_in = input_np.shape\n\n    # Find the coordinates (row, column) of all non-background pixels (value != 0)\n    non_background_coords = np.argwhere(input_np != 0)\n\n    # If there are no non-background pixels, the input is entirely background.\n    # In this case, return the original grid as no transformation occurs.\n    if non_background_coords.shape[0] == 0:\n        return input_grid\n\n    # Determine the bounding box of the non-background pixels\n    min_r = non_background_coords[:, 0].min()\n    max_r = non_background_coords[:, 0].max()\n    min_c = non_background_coords[:, 1].min()\n    max_c = non_background_coords[:, 1].max()\n\n    # Calculate the maximum distance of any non-background pixel from any edge.\n    # Distance from top edge to farthest pixel = max_r\n    # Distance from bottom edge to farthest pixel = H_in - 1 - min_r\n    # Distance from left edge to farthest pixel = max_c\n    # Distance from right edge to farthest pixel = W_in - 1 - min_c\n    max_dist = max(max_r, H_in - 1 - min_r, max_c, W_in - 1 - min_c)\n\n    # Calculate the dimension 'N' for the square output grid\n    N = 2 * max_dist + 1\n\n    # Initialize the output grid with the background color (0)\n    output_np = np.zeros((N, N), dtype=int)\n\n    # Iterate through each pixel of the input grid\n    for r in range(H_in):\n        for c in range(W_in):\n            # Get the color of the current input pixel\n            color = input_np[r, c]\n            # If the color is not background\n            if color != 0:\n                # Copy the pixel to the corresponding top-left position in the output grid\n                # Check bounds just in case, though N should be large enough by design\n                if 0 <= r < N and 0 <= c < N:\n                     output_np[r, c] = color\n                \n                # Calculate the symmetrically opposite coordinates for the 180-degree rotation\n                rotated_r = N - 1 - r\n                rotated_c = N - 1 - c\n                # Copy the pixel to the corresponding bottom-right position in the output grid\n                # Check bounds just in case\n                if 0 <= rotated_r < N and 0 <= rotated_c < N:\n                    output_np[rotated_r, rotated_c] = color\n\n    # Convert the resulting numpy array back to a list of lists\n    output_grid = output_np.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2978,
    "candidates_token_count": 904,
    "total_token_count": 3882,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 180.087594,
  "retries": null
}