{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nRecolor blue (1) objects based on the order of appearance of other non-white, non-blue colors (palette colors).\n\n1. Identify unique palette colors (not white 0, not blue 1) and their order of first appearance (top-to-bottom, left-to-right).\n2. Identify all contiguous blue (1) objects and their order based on their top-leftmost pixel (top-to-bottom, left-to-right).\n3. Recolor the blue objects using the palette colors:\n   - The first blue object takes the first palette color.\n   - If there are multiple blue objects and multiple palette colors:\n     - The last blue object takes the last palette color.\n     - Intermediate blue objects (if any) take the second palette color.\n   - If there are multiple blue objects but only one palette color, all blue objects take that single palette color.\n4. Non-blue objects and the white background remain unchanged.\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef find_objects(grid, target_colors):\n    \"\"\"\n    Finds contiguous objects of specified colors in a grid.\n\n    Args:\n        grid (np.array): The input grid.\n        target_colors (set): A set of colors to find objects for.\n\n    Returns:\n        list: A list of objects, where each object is a set of (row, col) tuples.\n              The list is sorted by the top-leftmost coordinate of each object.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] in target_colors and not visited[r, c]:\n                obj_coords = set()\n                q = deque([(r, c)])\n                visited[r, c] = True\n                min_r, min_c = r, c\n\n                while q:\n                    row, col = q.popleft()\n                    obj_coords.add((row, col))\n                    \n                    # Keep track of the top-leftmost coordinate\n                    if row < min_r:\n                        min_r, min_c = row, col\n                    elif row == min_r and col < min_c:\n                        min_c = col\n\n                    # Explore 8 neighbors (including diagonals)\n                    for dr in [-1, 0, 1]:\n                        for dc in [-1, 0, 1]:\n                            if dr == 0 and dc == 0:\n                                continue\n                            nr, nc = row + dr, col + dc\n                            if 0 <= nr < rows and 0 <= nc < cols and \\\n                               grid[nr, nc] in target_colors and not visited[nr, nc]:\n                                visited[nr, nc] = True\n                                q.append((nr, nc))\n                \n                objects.append({'coords': obj_coords, 'top_left': (min_r, min_c)})\n\n    # Sort objects based on their top-left coordinate (row, then column)\n    objects.sort(key=lambda obj: obj['top_left'])\n    \n    # Return just the coordinate sets in the sorted order\n    return [obj['coords'] for obj in objects]\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by recoloring blue objects based on palette colors.\n    \n    Args:\n        input_grid (np.array): The input 2D array.\n\n    Returns:\n        np.array: The transformed 2D array.\n    \"\"\"\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # 1. Identify and order palette colors\n    palette_colors_ordered = []\n    palette_first_coords = {} # color -> (row, col)\n    for r in range(rows):\n        for c in range(cols):\n            color = input_grid[r, c]\n            # Palette colors are non-white (0) and non-blue (1)\n            if color != 0 and color != 1:\n                if color not in palette_first_coords:\n                    palette_first_coords[color] = (r, c)\n    \n    # Sort the found palette colors by their first appearance coordinates\n    sorted_palette_items = sorted(palette_first_coords.items(), key=lambda item: item[1])\n    palette_colors_ordered = [color for color, coords in sorted_palette_items]\n    num_palette_colors = len(palette_colors_ordered)\n\n    # 2. Identify and order blue objects\n    blue_objects = find_objects(input_grid, {1})\n    num_blue_objects = len(blue_objects)\n\n    # 3. Check edge cases: no blue objects or no palette colors\n    if num_blue_objects == 0 or num_palette_colors == 0:\n        return output_grid # Return the original grid if nothing to transform\n\n    # 4. Recolor the blue objects based on the rules\n    \n    # Recolor the first blue object (B1) with the first palette color (P1)\n    first_object_coords = blue_objects[0]\n    first_palette_color = palette_colors_ordered[0]\n    for r, c in first_object_coords:\n        output_grid[r, c] = first_palette_color\n\n    # Handle remaining objects if any (n > 1)\n    if num_blue_objects > 1:\n        if num_palette_colors == 1:\n            # If only one palette color (P1), all remaining objects take P1\n            single_palette_color = palette_colors_ordered[0]\n            for i in range(1, num_blue_objects):\n                obj_coords = blue_objects[i]\n                for r, c in obj_coords:\n                    output_grid[r, c] = single_palette_color\n        else: # num_palette_colors > 1\n            # Recolor the last blue object (Bn) with the last palette color (Pm)\n            last_object_coords = blue_objects[-1]\n            last_palette_color = palette_colors_ordered[-1]\n            for r, c in last_object_coords:\n                output_grid[r, c] = last_palette_color\n\n            # Recolor intermediate blue objects (B2 to Bn-1) with the second palette color (P2)\n            if num_blue_objects > 2: # Only if intermediate objects exist\n                second_palette_color = palette_colors_ordered[1]\n                for i in range(1, num_blue_objects - 1):\n                    intermediate_obj_coords = blue_objects[i]\n                    for r, c in intermediate_obj_coords:\n                        output_grid[r, c] = second_palette_color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 4618,
            "end_index": 4950,
            "uri": "https://github.com/abhisheksol/competivity-programming",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3612,
    "candidates_token_count": 1596,
    "total_token_count": 5208,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 17.197592,
  "retries": null
}