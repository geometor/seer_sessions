task_description: Extracts a shape defined by one color within a boundary defined by another color, re-colors the shape, and places it on a smaller grid.

input_elements:
  - type: background
    color: white (0)
    properties: Fills the grid initially.
  - type: main_object
    properties:
      - Contiguous group of pixels of a single non-white color.
      - Larger pixel count compared to marker_pixels.
      - Its shape (within ROI) is preserved in the output.
      - Its original color is discarded in the output.
  - type: marker_pixels
    properties:
      - Group of exactly four pixels.
      - All four pixels have the same non-white color, distinct from the main_object color.
      - Typically form the corners of a rectangle.
      - Define the Region of Interest (ROI).
      - Their color determines the output object's color.

relationships:
  - The marker_pixels define a bounding box (ROI). Let the minimum row/col be (r1, c1) and max row/col be (r2, c2).
  - The main_object may extend outside the ROI, but only the portion strictly inside the ROI (rows r1+1 to r2-1, cols c1+1 to c2-1) matters for the output shape.
  - The output grid dimensions are (r2 - r1 - 1) by (c2 - c1 - 1).
  - The color of the marker_pixels becomes the color of the shape in the output grid.

actions:
  - Identify the two non-white colors present.
  - Count pixels for each color to distinguish the main_object color from the marker_pixel color.
  - Find the coordinates of the four marker_pixels.
  - Determine the bounding box (ROI) defined by the marker_pixels: (min_row, min_col) to (max_row, max_col).
  - Define the 'inner region' of the ROI: (min_row + 1, min_col + 1) to (max_row - 1, max_col - 1).
  - Calculate the output grid dimensions: height = max_row - min_row - 1, width = max_col - min_col - 1.
  - Create a new output grid of the calculated dimensions, initialized to white (0).
  - Iterate through the pixels in the input grid's 'inner region'.
  - If a pixel (r, c) within the inner region belongs to the main_object:
    - Calculate its corresponding position in the output grid: (r_out, c_out) = (r - (min_row + 1), c - (min_col + 1)).
    - Set the color of the output grid pixel at (r_out, c_out) to the marker_pixel color.