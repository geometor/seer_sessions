{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import defaultdict\n\n\"\"\"\nRecolor regions of azure pixels based on a sequence of vertical color lines.\n\n1.  Initialize a white output grid of the same size as the input.\n2.  Identify full-height vertical lines of a single, non-white(0)/non-azure(8) color on the left. Sort them left-to-right by column index. Let N be the number of lines.\n3.  Identify all maximal contiguous horizontal segments of azure(8) pixels in each row.\n4.  Group these azure segments based on their starting column index.\n5.  Sort these groups based on their starting column index, from left to right. Let M be the number of groups.\n6.  If N equals M, then for the i-th sorted line and i-th sorted segment group:\n    a.  Get the color C from the i-th line.\n    b.  For every segment (r, c_start, c_end) in the i-th group, color the pixels in the output grid from (r, c_start) to (r, c_end) with color C.\n7.  If N does not equal M, the output grid remains white.\n8.  Return the output grid.\n\"\"\"\n\ndef find_vertical_lines(input_grid):\n    \"\"\"\n    Finds full-height vertical lines of a single non-white, non-azure color.\n    Returns a list of dicts {'color': c, 'col_index': i}, sorted by col_index.\n    \"\"\"\n    height, width = input_grid.shape\n    lines = []\n    if height == 0: # Handle empty grid case\n        return lines\n        \n    for c in range(width):\n        col = input_grid[:, c]\n        first_color = col[0]\n        # Check if the first pixel is a potential line color\n        if first_color != 0 and first_color != 8:\n            is_line = True\n            # Check if all pixels in the column match the first pixel's color\n            for r in range(1, height):\n                if col[r] != first_color:\n                    is_line = False\n                    break\n            if is_line:\n                lines.append({'color': first_color, 'col_index': c})\n\n    # Sort lines by column index (already processed in order, but explicit sort is safer)\n    lines.sort(key=lambda x: x['col_index'])\n    return lines\n\ndef find_azure_segments(input_grid):\n    \"\"\"\n    Finds all maximal contiguous horizontal segments of azure (8) pixels.\n    Returns a list of tuples: (row_index, start_col, end_col).\n    \"\"\"\n    height, width = input_grid.shape\n    segments = []\n    for r in range(height):\n        c = 0\n        while c < width:\n            # Find the start of an azure segment\n            if input_grid[r, c] == 8:\n                start_col = c\n                # Find the end of the segment\n                while c + 1 < width and input_grid[r, c + 1] == 8:\n                    c += 1\n                end_col = c\n                segments.append((r, start_col, end_col))\n            c += 1\n    return segments\n\ndef group_segments_by_start_col(segments):\n    \"\"\"\n    Groups azure segments by their starting column index.\n    Returns a list of groups (each group is a list of segments), sorted by start_col.\n    \"\"\"\n    groups = defaultdict(list)\n    for segment in segments:\n        r, start_col, end_col = segment\n        groups[start_col].append(segment)\n    \n    # Sort the groups by their start_col key\n    sorted_start_cols = sorted(groups.keys())\n    sorted_groups = [groups[start_col] for start_col in sorted_start_cols]\n    \n    return sorted_groups\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by recoloring azure segments based on vertical color lines.\n    \"\"\"\n    input_grid_np = np.array(input_grid, dtype=np.int64)\n    height, width = input_grid_np.shape\n    \n    # 1. Initialize output_grid with white (0)\n    output_grid = np.zeros_like(input_grid_np)\n\n    # 2. Identify & Sort Color Lines\n    vertical_lines = find_vertical_lines(input_grid_np)\n    N = len(vertical_lines)\n\n    # 3. Identify Azure Horizontal Segments\n    azure_segments = find_azure_segments(input_grid_np)\n\n    # 4. Group Azure Segments by Start Column\n    # 5. Sort Segment Groups\n    grouped_segments = group_segments_by_start_col(azure_segments)\n    M = len(grouped_segments)\n\n    # 6. Check if counts match N == M\n    if N > 0 and N == M:\n        # 7. Recolor Output Grid based on matched lines and groups\n        for i in range(N):\n            line_color = vertical_lines[i]['color']\n            segment_group = grouped_segments[i]\n            \n            for r, c_start, c_end in segment_group:\n                # Ensure coordinates are valid (should be by construction)\n                if 0 <= r < height and 0 <= c_start <= c_end < width:\n                     # Color the segment in the output grid\n                     output_grid[r, c_start : c_end + 1] = line_color\n    # else: # If N != M or N == 0, output grid remains white (initialized state)\n    #    pass \n\n    # 8. Return\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 13268,
    "candidates_token_count": 1350,
    "total_token_count": 14618,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.405037,
  "retries": null
}