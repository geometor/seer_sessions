task_context:
  grid_dimensionality: 2D
  grid_size_constraints: 1x1 to 30x30
  color_palette_size: 10 (0-9)
  background_color: 0 (white)

input_elements:
  - type: background
    color: 0 (white)
    description: Fills empty space.
  - type: vertical_lines
    color: variable (not 0, not 8)
    properties:
      - single_column_width
      - full_grid_height
      - distinct_colors
      - located_on_left
      - separated_by_white_columns
    role: source_of_color_information
  - type: target_shapes
    color: 8 (azure)
    properties:
      - variable_shape_size
      - located_on_right
      - can_be_multiple_disconnected_shapes
    role: pixels_to_be_recolored

output_elements:
  - type: background
    color: 0 (white)
    description: Fills all space except recolored target shapes.
  - type: recolored_shapes
    color: variable (derived from input vertical_lines)
    properties:
      - occupy_same_pixels_as_input_target_shapes
    role: result_of_transformation

transformation_rules:
  - action: identify_vertical_lines
    inputs: input_grid
    outputs: list_of_colors, list_of_column_indices
    description: Find columns composed entirely of a single non-white, non-azure color. Store their color and column index.
  - action: sort_vertical_lines
    inputs: list_of_colors, list_of_column_indices
    outputs: sorted_list_of_colors
    description: Sort the identified vertical lines based on their column index (left-to-right).
  - action: identify_azure_columns
    inputs: input_grid
    outputs: set_of_azure_column_indices
    description: Find all unique column indices that contain at least one azure (8) pixel.
  - action: group_azure_columns
    inputs: set_of_azure_column_indices
    outputs: list_of_column_groups
    description: Group the azure column indices into contiguous sets (e.g., {7,8,9}, {11,12}).
  - action: sort_azure_column_groups
    inputs: list_of_column_groups
    outputs: sorted_list_of_column_groups
    description: Sort the groups based on the minimum column index within each group (left-to-right).
  - action: map_colors_to_groups
    inputs: sorted_list_of_colors, sorted_list_of_column_groups
    outputs: mapping_dictionary (group -> color)
    description: Create a mapping where the i-th color corresponds to the i-th column group. Assumes the number of lines equals the number of groups.
  - action: generate_output_grid
    inputs: input_grid, mapping_dictionary
    outputs: output_grid
    description: Create an output grid of the same size, initialized to white. For each azure pixel in the input at (r, c), find its column group, get the corresponding color from the mapping, and place that color at (r, c) in the output grid.

relationships:
  - type: spatial_ordering
    entity1: vertical_lines
    entity2: azure_column_groups
    description: The left-to-right order of vertical lines corresponds directly to the left-to-right order of azure column groups.
  - type: color_assignment
    entity1: vertical_line_color
    entity2: azure_pixels_in_corresponding_group
    description: The color of a vertical line determines the output color of the azure pixels belonging to its corresponding column group.

assumptions:
  - The number of vertical color lines equals the number of contiguous groups of azure columns.
  - Vertical lines span the full height of the grid.
  - Vertical lines are always 1 pixel wide.
  - Azure (8) is exclusively used for the target shapes to be recolored.
  - All non-azure, non-line pixels in the input are white (0).