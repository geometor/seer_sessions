InputGrid:
  Properties:
    - height: H
    - width: W
  Objects:
    - VerticalLines:
        - Definition: Contiguous vertical sequence of pixels from row 0 to H-1, all having the same color C, where C is not white (0) and not azure (8).
        - Location: Reside in columns to the left of any azure pixels.
        - Properties:
            - color: C
            - col_index: i
        - Exists: If at least one such line is present.
    - AzurePixels:
        - Definition: Pixels with color azure (8).
        - Location: Reside in columns to the right of the VerticalLines.
        - Grouping: Can form contiguous horizontal segments within rows.
        - Property: start_col_index - the column index where a horizontal segment begins.
        - Exists: If at least one azure pixel is present.

Transformation:
  Conditions:
    - Let N be the count of VerticalLines, sorted left-to-right by col_index.
    - Let `AzureStartCols` be the sorted list of unique start_col_index values from all horizontal azure segments.
    - Let M be the count of unique columns in `AzureStartCols`.
    - The transformation proceeds only if N > 0 and N == M. Otherwise, the output is a white grid.
  Actions:
    - Create an OutputGrid of size HxW, initialized to white (0).
    - Create a mapping: For each `j` from 0 to N-1, map `VerticalLines[j].color` to the zone defined by `AzureStartCols[j]`.
    - For each pixel (r, c) in the InputGrid:
        - If the pixel color is azure (8):
            - Find the largest index `k` such that `AzureStartCols[k] <= c`.
            - If such a `k` exists (which it should if c is part of an azure segment and N==M>0):
                - Get the color `TargetColor = VerticalLines[k].color`.
                - Set `OutputGrid[r, c] = TargetColor`.
OutputGrid:
  Properties:
    - Same dimensions as InputGrid.
    - Contains pixels colored according to the transformation rules, or is all white if conditions are not met.