{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nRecolor specific regions of azure (light blue, 8) pixels based on a sequence of vertical color lines located to their left.\n\n1.  **Initialize:** Create a white output grid of the same size as the input.\n2.  **Identify & Sort Color Lines:** Find full-height vertical lines of a single, non-white(0)/non-azure(8) color on the left. Sort them left-to-right by column index.\n3.  **Identify Azure Regions:** Find all distinct connected components (regions) of azure(8) pixels using 8-way adjacency. Record the pixels and bounding box (min/max column) for each region.\n4.  **Filter Azure Regions:** Keep only those azure regions with a horizontal width (max_col - min_col + 1) greater than 1.\n5.  **Sort Filtered Azure Regions:** Sort the remaining regions left-to-right based on their minimum column index.\n6.  **Map Lines to Regions:** If the number of sorted lines matches the number of sorted, filtered regions, map the i-th line's color to the i-th region.\n7.  **Recolor Output:** For each mapped region, color its pixels in the output grid using the corresponding line's color.\n8.  **Return:** Output the modified grid.\n\"\"\"\n\ndef find_vertical_lines(input_grid):\n    \"\"\"\n    Finds vertical lines of a single non-white, non-azure color.\n    Returns a list of dicts {'color': c, 'col_index': i}, sorted by col_index.\n    \"\"\"\n    height, width = input_grid.shape\n    lines = []\n    for c in range(width):\n        col = input_grid[:, c]\n        first_color = col[0]\n        # Check if the first pixel is a potential line color and the column is full height\n        if height > 0 and first_color != 0 and first_color != 8:\n            is_line = True\n            # Check if all pixels in the column match the first pixel's color\n            for r in range(1, height):\n                if col[r] != first_color:\n                    is_line = False\n                    break\n            if is_line:\n                lines.append({'color': first_color, 'col_index': c})\n\n    # Sort lines by column index (already processed in order, but explicit sort is safer)\n    lines.sort(key=lambda x: x['col_index'])\n    return lines\n\ndef find_azure_regions(input_grid):\n    \"\"\"\n    Finds connected components of azure (8) pixels using 8-way adjacency (BFS).\n    Returns a list of dicts {'pixels': set((r,c)), 'min_col': mc, 'max_col': xc, 'width': w}.\n    \"\"\"\n    height, width = input_grid.shape\n    visited = np.zeros_like(input_grid, dtype=bool)\n    regions = []\n    \n    # Define 8-way neighbors (relative coordinates)\n    neighbors = [(-1, -1), (-1, 0), (-1, 1),\n                 ( 0, -1),          ( 0, 1),\n                 ( 1, -1), ( 1, 0), ( 1, 1)]\n\n    for r in range(height):\n        for c in range(width):\n            # If it's an azure pixel and not yet visited, start BFS\n            if input_grid[r, c] == 8 and not visited[r, c]:\n                current_region_pixels = set()\n                min_c, max_c = c, c\n                q = deque([(r, c)])\n                visited[r, c] = True\n\n                while q:\n                    row, col = q.popleft()\n                    current_region_pixels.add((row, col))\n                    min_c = min(min_c, col)\n                    max_c = max(max_c, col)\n\n                    # Explore neighbors\n                    for dr, dc in neighbors:\n                        nr, nc = row + dr, col + dc\n                        # Check bounds\n                        if 0 <= nr < height and 0 <= nc < width:\n                            # Check if neighbor is azure and not visited\n                            if input_grid[nr, nc] == 8 and not visited[nr, nc]:\n                                visited[nr, nc] = True\n                                q.append((nr, nc))\n                \n                # Finished BFS for one component, calculate width and store\n                width_region = max_c - min_c + 1\n                regions.append({\n                    'pixels': current_region_pixels,\n                    'min_col': min_c,\n                    'max_col': max_c,\n                    'width': width_region\n                })\n                \n    return regions\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by recoloring azure regions based on vertical color lines.\n    \"\"\"\n    input_grid = np.array(input_grid)\n    height, width = input_grid.shape\n    \n    # 1. Initialize output_grid with white (0)\n    output_grid = np.zeros_like(input_grid)\n\n    # 2. Identify Color Lines\n    vertical_lines = find_vertical_lines(input_grid)\n    # 3. Sort Color Lines (already sorted by find_vertical_lines)\n    \n    # 4. Identify Azure Regions\n    azure_regions = find_azure_regions(input_grid)\n\n    # 5. Filter Azure Regions (width > 1)\n    filtered_regions = [region for region in azure_regions if region['width'] > 1]\n\n    # 6. Sort Filtered Azure Regions by min_col\n    filtered_regions.sort(key=lambda x: x['min_col'])\n\n    # 7. Map Lines to Regions\n    if len(vertical_lines) == len(filtered_regions):\n        # 8. Recolor Output Grid\n        for i in range(len(vertical_lines)):\n            line_color = vertical_lines[i]['color']\n            region_pixels = filtered_regions[i]['pixels']\n            \n            for r, c in region_pixels:\n                # Ensure coordinates are valid (should be by construction)\n                if 0 <= r < height and 0 <= c < width:\n                     output_grid[r, c] = line_color\n    else:\n        # If mismatch, return the empty white grid (as per analysis)\n        print(f\"Warning: Mismatch between number of color lines ({len(vertical_lines)}) and filtered azure regions ({len(filtered_regions)}).\")\n        pass # Keep output_grid as all zeros\n\n    # 9. Return\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 12815,
    "candidates_token_count": 1559,
    "total_token_count": 14374,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 19.613811,
  "retries": null
}