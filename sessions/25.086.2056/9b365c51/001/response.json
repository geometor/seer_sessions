{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport collections\n\n\"\"\"\nIdentify vertical lines of distinct non-white, non-azure colors on the left.\nIdentify groups of contiguous columns containing azure pixels on the right.\nMap the i-th vertical line color (ordered left-to-right) to the i-th azure column group (ordered left-to-right).\nCreate an output grid, initially white. For every azure pixel in the input at (r, c), find the column group 'c' belongs to, determine the corresponding color from the vertical lines, and place that color at (r, c) in the output grid.\n\"\"\"\n\ndef find_vertical_lines(input_grid):\n    \"\"\"Finds vertical lines of a single non-white, non-azure color.\"\"\"\n    height, width = input_grid.shape\n    lines = []\n    for c in range(width):\n        col = input_grid[:, c]\n        first_color = col[0]\n        if first_color != 0 and first_color != 8: # Must not be white or azure\n            is_line = True\n            for r in range(1, height):\n                if col[r] != first_color:\n                    is_line = False\n                    break\n            if is_line:\n                lines.append({'color': first_color, 'col_index': c})\n    # Sort lines by column index\n    lines.sort(key=lambda x: x['col_index'])\n    return lines\n\ndef find_azure_column_groups(input_grid):\n    \"\"\"Finds groups of contiguous columns containing azure pixels.\"\"\"\n    height, width = input_grid.shape\n    azure_cols = set()\n    for r in range(height):\n        for c in range(width):\n            if input_grid[r, c] == 8:\n                azure_cols.add(c)\n\n    if not azure_cols:\n        return []\n\n    sorted_azure_cols = sorted(list(azure_cols))\n\n    groups = []\n    if not sorted_azure_cols:\n        return groups\n\n    current_group = [sorted_azure_cols[0]]\n    for i in range(1, len(sorted_azure_cols)):\n        if sorted_azure_cols[i] == sorted_azure_cols[i-1] + 1:\n            current_group.append(sorted_azure_cols[i])\n        else:\n            groups.append(current_group)\n            current_group = [sorted_azure_cols[i]]\n    groups.append(current_group) # Add the last group\n\n    return groups\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by recoloring azure areas based on vertical color lines.\n    \"\"\"\n    input_grid = np.array(input_grid)\n    height, width = input_grid.shape\n    \n    # Initialize output_grid with white (0)\n    output_grid = np.zeros_like(input_grid)\n\n    # Step 2 & 3: Find and sort vertical color lines\n    vertical_lines = find_vertical_lines(input_grid)\n    sorted_colors = [line['color'] for line in vertical_lines]\n\n    # Step 4, 5 & 6: Find and sort groups of contiguous azure columns\n    azure_column_groups = find_azure_column_groups(input_grid)\n\n    # Ensure the number of lines matches the number of groups (as per assumption)\n    if len(sorted_colors) != len(azure_column_groups):\n        # This case might indicate a misunderstanding or an edge case not covered.\n        # For now, return the empty grid or handle error appropriately.\n        print(f\"Warning: Mismatch between number of color lines ({len(sorted_colors)}) and azure groups ({len(azure_column_groups)}).\")\n        # Depending on expected behavior, might return input, empty grid, or raise error\n        return output_grid.tolist() \n\n    # Step 7 & 8a, 8b, 8c: Create mapping from column index to target color\n    col_to_color_map = {}\n    for i, group in enumerate(azure_column_groups):\n        color_to_assign = sorted_colors[i]\n        for col_index in group:\n            col_to_color_map[col_index] = color_to_assign\n\n    # Step 8 & 8d: Iterate through the input grid and populate the output grid\n    for r in range(height):\n        for c in range(width):\n            if input_grid[r, c] == 8: # If the pixel is azure in the input\n                # Find the corresponding color from the map\n                if c in col_to_color_map:\n                    output_grid[r, c] = col_to_color_map[c]\n                # else: # Handle case where an azure pixel is not in a mapped group (shouldn't happen with current logic)\n                #     pass # Keep it white (0) in the output\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4511,
    "candidates_token_count": 1153,
    "total_token_count": 5664,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.254633,
  "retries": null
}