task_description: >
  The task involves identifying two key objects in the input grid: a 'container'
  (the largest contiguous object of a single color) and a 'source' (a single pixel
  of a different color that is cardinally adjacent to the container). Based on the
  shortest path from the source to the 'outside' (non-container or grid boundary)
  through the container, a projection line is drawn outwards from the container
  in the opposite direction.

definitions:
  - &background_color 0
  - &container
    description: The largest contiguous object of a single non-background color.
    properties: [color, size, coordinates]
  - &source
    description: >
      A single pixel object with a color different from the container, which is
      cardinally adjacent to at least one pixel of the container. Assumed to be unique.
    properties: [color, position]
  - &distance
    description: >
      The number of contiguous container-colored pixels starting from a neighbor
      of the source pixel, moving away from the source along one of the four
      cardinal directions, stopping when a non-container pixel or grid boundary
      is encountered.
  - &min_distance_direction
    description: >
      The cardinal direction (up, down, left, right) associated with the smallest
      calculated distance. Ties are broken by order: up, down, left, right.
  - &projection_direction
    description: The cardinal direction opposite to the min_distance_direction.
  - &projection_start_point
    description: >
      The first non-container (background) pixel encountered when moving from the source
      pixel along the projection_direction, passing through the container pixels.
  - &projection_line
    description: >
      A line of pixels starting from the projection_start_point and extending to
      the grid boundary along the projection_direction.

example_analysis:
  example_1:
    container: { color: 8 (azure), size: 15 }
    source: { color: 3 (green), position: (8, 6) }
    distances_in_container: { up: 3, down: 0, left: 3, right: 3 }
    min_distance_direction: down
    projection_direction: up
    projection_start_point: (4, 6) (color 0 - background)
    action: Paint pixels from (4, 6) to (0, 6) with source color (3).
  example_2:
    container: { color: 2 (red), size: 8 }
    source: { color: 1 (blue), position: (4, 3) }
    distances_in_container: { up: 2, down: 2, left: 0, right: 2 }
    min_distance_direction: left
    projection_direction: right
    projection_start_point: (4, 6) (color 0 - background)
    action: Paint pixels from (4, 6) to (4, 14) with source color (1).
  example_3:
    container: { color: 3 (green), size: 8 }
    source: { color: 2 (red), position: (2, 4) }
    distances_in_container: { up: 0, down: 2, left: 2, right: 2 }
    min_distance_direction: up
    projection_direction: down
    projection_start_point: (5, 4) (color 0 - background)
    action: Paint pixels from (5, 4) to (14, 4) with source color (2).
