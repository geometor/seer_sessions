task_description: Reverse the order of repeating patterns found along a diagonal line.

common_elements:
  - Input and output grids have the same dimensions.
  - The background color is white (0).
  - A specific pattern (composed of one or more colored pixels relative to an anchor point) repeats in the input grid.
  - These pattern instances are arranged along a diagonal line (typically top-left to bottom-right, but Example 1 shows top-right to bottom-left).
  - The transformation involves reversing the order of these pattern instances along the diagonal.
  - The pattern's internal structure (shape and colors) remains unchanged.

example_specifics:
  example_1:
    grid_size: [12, 12]
    pattern_pixels: # (row_offset, col_offset, color) relative to anchor
      - [0, 0, 2] # red
      - [0, 1, 2] # red
      - [1, 0, 3] # green
      - [1, 1, 2] # red
    input_anchors: # (row, col)
      - [0, 10]
      - [2, 8]
      - [4, 6]
      - [6, 4]
      - [8, 2]
      - [10, 0]
    output_anchors: # (row, col) - reversed order
      - [10, 0]
      - [8, 2]
      - [6, 4]
      - [4, 6]
      - [2, 8]
      - [0, 10]
    diagonal_type: Anti-diagonal (top-right to bottom-left)

  example_2:
    grid_size: [12, 12]
    pattern_pixels: # (row_offset, col_offset, color) relative to anchor
      - [0, 0, 8] # azure
      - [1, 0, 2] # red
      - [1, 1, 2] # red
    input_anchors: # (row, col)
      - [0, 0]
      - [2, 2]
      - [4, 4]
      - [6, 6]
      - [8, 8]
      - [10, 10]
    output_anchors: # (row, col) - reversed order
      - [10, 10]
      - [8, 8]
      - [6, 6]
      - [4, 4]
      - [2, 2]
      - [0, 0]
    diagonal_type: Main diagonal (top-left to bottom-right)

  example_3:
    grid_size: [10, 10]
    pattern_pixels: # (row_offset, col_offset, color) relative to anchor
      - [0, 0, 2] # red
      - [0, 1, 1] # blue
      - [1, 0, 1] # blue
    input_anchors: # (row, col)
      - [0, 0]
      - [2, 2]
      - [4, 4]
      - [6, 6]
      - [8, 8]
    output_anchors: # (row, col) - reversed order
      - [8, 8]
      - [6, 6]
      - [4, 4]
      - [2, 2]
      - [0, 0]
    diagonal_type: Main diagonal (top-left to bottom-right)

actions:
  - Identify the top-leftmost non-background pixel; this is the potential anchor of the first pattern instance.
  - Determine the pattern's structure (relative pixel coordinates and colors) based on this first instance. The extent of the pattern needs to be determined (e.g., a small bounding box like 2x2 or 3x3, or dynamically).
  - Find all occurrences of this exact pattern in the input grid by matching the structure at different potential anchor points.
  - Collect the anchor points (row, col) of all identified pattern instances.
  - Sort these anchor points based on their position along the diagonal (e.g., sort by row then column for the main diagonal, or row then negative column for the anti-diagonal).
  - Create a new output grid of the same size as the input, filled with the background color.
  - Place the identified pattern onto the output grid at new anchor positions. These new positions are the original anchor positions, but taken in reverse order from the sorted list.