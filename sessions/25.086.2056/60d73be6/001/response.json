{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nReflects non-background, non-axis pixels across a single complete line (axis) of a non-background color.\n\nThe transformation identifies a single complete horizontal or vertical line within the input grid that consists of a single, non-background color. This line acts as the axis of reflection. It then iterates through all pixels in the input grid. If a pixel is neither the background color (7) nor part of the identified axis, its position is reflected across the axis. The color of the original pixel is then placed at the calculated reflected position in the output grid. The output grid initially starts as a copy of the input grid, so original elements (including the axis and the pixels being reflected) are preserved.\n\"\"\"\n\ndef find_axis(grid):\n    \"\"\"\n    Finds a complete horizontal or vertical line of a single non-background color.\n\n    Args:\n        grid (np.ndarray): The input grid.\n\n    Returns:\n        tuple: ('h', row_index) if a horizontal axis is found,\n               ('v', col_index) if a vertical axis is found,\n               (None, None) if no axis is found.\n    \"\"\"\n    height, width = grid.shape\n    background_color = 7\n\n    # Check for horizontal axis\n    for r in range(height):\n        first_pixel_color = grid[r, 0]\n        if first_pixel_color != background_color and np.all(grid[r, :] == first_pixel_color):\n            return 'h', r\n\n    # Check for vertical axis\n    for c in range(width):\n        first_pixel_color = grid[0, c]\n        if first_pixel_color != background_color and np.all(grid[:, c] == first_pixel_color):\n            return 'v', c\n\n    return None, None # No axis found\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the reflection transformation to the input grid.\n\n    Args:\n        input_grid (list of lists): The input grid represented as a list of lists.\n\n    Returns:\n        list of lists: The transformed grid.\n    \"\"\"\n    input_np = np.array(input_grid, dtype=int)\n    height, width = input_np.shape\n    output_grid = np.copy(input_np)\n    background_color = 7\n\n    # Find the axis of symmetry\n    axis_type, axis_index = find_axis(input_np)\n\n    if axis_type is None:\n        # If no axis is found, return the original grid (or handle as an error/edge case)\n        # Based on examples, an axis always exists.\n        return input_grid # Return as list of lists\n\n    # Iterate through each pixel of the input grid\n    for r in range(height):\n        for c in range(width):\n            color = input_np[r, c]\n\n            # Skip background pixels\n            if color == background_color:\n                continue\n\n            # Skip pixels on the axis itself\n            is_on_axis = False\n            if axis_type == 'h' and r == axis_index:\n                is_on_axis = True\n            elif axis_type == 'v' and c == axis_index:\n                is_on_axis = True\n\n            if is_on_axis:\n                continue\n\n            # This pixel is not background and not on the axis, so reflect it\n            r_reflected, c_reflected = -1, -1 # Initialize with invalid values\n\n            if axis_type == 'h':\n                # Reflect vertically across the horizontal axis\n                r_reflected = 2 * axis_index - r\n                c_reflected = c\n            elif axis_type == 'v':\n                # Reflect horizontally across the vertical axis\n                r_reflected = r\n                c_reflected = 2 * axis_index - c\n\n            # Check if the reflected coordinates are within the grid bounds\n            if 0 <= r_reflected < height and 0 <= c_reflected < width:\n                # Apply the color to the reflected position in the output grid\n                output_grid[r_reflected, c_reflected] = color\n\n    # Convert back to list of lists for the expected output format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3355,
    "candidates_token_count": 960,
    "total_token_count": 4315,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.763081,
  "retries": null
}