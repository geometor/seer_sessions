{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nIdentifies a primary shape (contiguous non-white, non-azure pixels) and a single azure marker pixel (8) in the input grid.\nThe azure pixel indicates how to extend the primary shape.\nIf the azure pixel is to the right of the shape's rightmost edge, the shape is extended horizontally to the right. The pattern for extension is taken from the column *inside* the rightmost edge (index max_col - 1) of the original shape. This pattern is copied into the columns from the original right edge + 1 up to and including the column of the azure pixel.\nIf the azure pixel is below the shape's bottom edge, the shape is extended vertically downwards. The pattern for extension is taken from the row *inside* the bottom edge (index max_row - 1) of the original shape. This pattern is copied into the rows from the original bottom edge + 1 up to and including the row of the azure pixel.\nThe azure marker pixel is removed (set to white 0) in the output grid.\n\"\"\"\n\ndef find_marker(grid):\n    \"\"\"Finds the coordinates (row, col) of the first azure (8) pixel.\"\"\"\n    marker_coords = np.where(grid == 8)\n    if len(marker_coords[0]) > 0:\n        # Return the coordinates of the first marker found\n        return int(marker_coords[0][0]), int(marker_coords[1][0])\n    return None\n\ndef find_shape_bounds(grid):\n    \"\"\"Finds the bounding box [min_row, max_row, min_col, max_col] of non-white (0) and non-azure (8) pixels.\"\"\"\n    shape_coords = np.where((grid != 0) & (grid != 8))\n    if len(shape_coords[0]) > 0:\n        min_row = int(np.min(shape_coords[0]))\n        max_row = int(np.max(shape_coords[0]))\n        min_col = int(np.min(shape_coords[1]))\n        max_col = int(np.max(shape_coords[1]))\n        return min_row, max_row, min_col, max_col\n    return None # No shape found\n\ndef transform(input_grid):\n    \"\"\"\n    Extends a shape based on the position of an azure marker pixel, using the\n    pattern from the row/column just inside the relevant edge.\n    \"\"\"\n    # Convert input list of lists to numpy array for easier manipulation\n    grid = np.array(input_grid, dtype=int)\n    # Create a copy to modify, which will be the output\n    output_grid = np.copy(grid)\n    \n    # 1. Identify the marker\n    marker_pos = find_marker(grid)\n    \n    if marker_pos is None:\n        # If no marker is found, return the original grid (as per step 1 of NL program)\n        return input_grid \n        \n    marker_row, marker_col = marker_pos\n    \n    # 3. Remove the marker from the output grid\n    output_grid[marker_row, marker_col] = 0\n    \n    # 4. Identify the shape and its bounding box\n    shape_bounds = find_shape_bounds(grid)\n    \n    if shape_bounds is None:\n         # If no shape is found, return the grid with the marker removed (as per step 4)\n         return output_grid.tolist()\n         \n    min_row, max_row, min_col, max_col = shape_bounds\n\n    # 5. Check for horizontal extension (marker to the right)\n    if marker_col > max_col:\n        # Check if there is an inner column to copy from\n        if max_col - 1 >= min_col:\n            # Define the pattern from the input grid's column *inside* the right edge\n            pattern_col_idx = max_col - 1\n            pattern = grid[min_row : max_row + 1, pattern_col_idx]\n            \n            # Iterate through columns from edge+1 *up to and including* marker's column\n            for c in range(max_col + 1, marker_col + 1):\n                # Ensure we don't write out of bounds\n                if c < output_grid.shape[1]: \n                    # Apply the pattern to the output grid\n                    output_grid[min_row : max_row + 1, c] = pattern\n        else:\n            # Handle edge case where shape is only 1 column wide - not explicitly shown\n            # in examples, but could potentially use the single column as pattern.\n            # Based on examples, this case doesn't seem to occur.\n            # Defaulting to using the single edge column if no inner column exists.\n            pattern = grid[min_row : max_row + 1, max_col]\n            for c in range(max_col + 1, marker_col + 1):\n                if c < output_grid.shape[1]: \n                    output_grid[min_row : max_row + 1, c] = pattern\n\n\n                \n    # 6. Check for vertical extension (marker below) - use elif assuming only one direction\n    elif marker_row > max_row:\n        # Check if there is an inner row to copy from\n        if max_row - 1 >= min_row:\n            # Define the pattern from the input grid's row *inside* the bottom edge\n            pattern_row_idx = max_row - 1\n            pattern = grid[pattern_row_idx, min_col : max_col + 1]\n\n            # Iterate through rows from edge+1 *up to and including* marker's row\n            for r in range(max_row + 1, marker_row + 1):\n                 # Ensure we don't write out of bounds\n                if r < output_grid.shape[0]:\n                    # Apply the pattern to the output grid\n                    output_grid[r, min_col : max_col + 1] = pattern\n        else:\n            # Handle edge case where shape is only 1 row high.\n            # Using the single edge row if no inner row exists.\n            pattern = grid[max_row, min_col : max_col + 1]\n            for r in range(max_row + 1, marker_row + 1):\n                 if r < output_grid.shape[0]:\n                    output_grid[r, min_col : max_col + 1] = pattern\n\n\n    # 7. Return the modified output_grid as a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7952,
    "candidates_token_count": 1532,
    "total_token_count": 9484,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.710844,
  "retries": null
}