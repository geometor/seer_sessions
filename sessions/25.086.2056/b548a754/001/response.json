{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nIdentifies a primary shape (contiguous non-white, non-azure pixels) and a single azure marker pixel (8) in the input grid.\nThe azure pixel indicates how to extend the primary shape.\nIf the azure pixel is to the right of the shape's rightmost edge, the shape is extended horizontally to the right. The rightmost column of the shape is copied into the columns between the original right edge and the column of the azure pixel.\nIf the azure pixel is below the shape's bottom edge, the shape is extended vertically downwards. The bottom row of the shape is copied into the rows between the original bottom edge and the row of the azure pixel.\nThe azure marker pixel is removed (set to white 0) in the output grid.\n\"\"\"\n\ndef find_marker(grid):\n    \"\"\"Finds the coordinates of the azure (8) pixel.\"\"\"\n    marker_coords = np.where(grid == 8)\n    if len(marker_coords[0]) > 0:\n        return marker_coords[0][0], marker_coords[1][0]\n    return None\n\ndef find_shape_bounds(grid):\n    \"\"\"Finds the bounding box of non-white (0) and non-azure (8) pixels.\"\"\"\n    shape_coords = np.where((grid != 0) & (grid != 8))\n    if len(shape_coords[0]) > 0:\n        min_row = np.min(shape_coords[0])\n        max_row = np.max(shape_coords[0])\n        min_col = np.min(shape_coords[1])\n        max_col = np.max(shape_coords[1])\n        return min_row, max_row, min_col, max_col\n    return None\n\ndef transform(input_grid):\n    \"\"\"\n    Extends a shape based on the position of an azure marker pixel.\n    \"\"\"\n    # Convert input list of lists to numpy array for easier manipulation\n    grid = np.array(input_grid, dtype=int)\n    output_grid = np.copy(grid)\n    \n    # Find the marker pixel\n    marker_pos = find_marker(grid)\n    \n    if marker_pos is None:\n        # If no marker is found, return the original grid (or handle as error)\n        # For this problem, examples suggest a marker always exists.\n        return input_grid \n        \n    marker_row, marker_col = marker_pos\n    \n    # Remove the marker from the output grid\n    output_grid[marker_row, marker_col] = 0\n    \n    # Find the bounding box of the shape (excluding the marker itself)\n    shape_bounds = find_shape_bounds(grid)\n    \n    if shape_bounds is None:\n         # If no shape is found, return the grid with the marker removed\n         return output_grid.tolist()\n         \n    min_row, max_row, min_col, max_col = shape_bounds\n\n    # Determine extension direction and apply it\n    # Check for horizontal extension (marker to the right)\n    if marker_col > max_col:\n        # Extract the rightmost column of the shape as the pattern\n        edge_pattern = grid[min_row:max_row+1, max_col]\n        # Fill columns from the end of the shape up to the marker's column\n        for c in range(max_col + 1, marker_col):\n            # Ensure we don't write out of bounds if marker is beyond grid edge\n            if c < output_grid.shape[1]: \n                output_grid[min_row:max_row+1, c] = edge_pattern\n                \n    # Check for vertical extension (marker below) - use elif assuming only one direction\n    elif marker_row > max_row:\n        # Extract the bottom row of the shape as the pattern\n        edge_pattern = grid[max_row, min_col:max_col+1]\n        # Fill rows from the end of the shape up to the marker's row\n        for r in range(max_row + 1, marker_row):\n             # Ensure we don't write out of bounds if marker is beyond grid edge\n            if r < output_grid.shape[0]:\n                output_grid[r, min_col:max_col+1] = edge_pattern\n\n    # Convert the output numpy array back to a list of lists\n    return output_grid.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4358,
    "candidates_token_count": 1021,
    "total_token_count": 5379,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 26.830063,
  "retries": null
}