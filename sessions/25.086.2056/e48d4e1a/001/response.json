{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransform an input grid by relocating its horizontal and vertical lines based on a count of gray pixels.\n\n1. Identify the dominant color (not white 0 or gray 5) forming a complete horizontal line and a complete vertical line in the input grid.\n2. Find the row index (input_h_row) of the horizontal line and the column index (input_v_col) of the vertical line.\n3. Count the number of gray (5) pixels (N) in the input grid.\n4. Calculate the new row index for the horizontal line: output_h_row = input_h_row + N.\n5. Calculate the new column index for the vertical line: output_v_col = input_v_col - N.\n6. Create an output grid of the same dimensions as the input, filled with white (0).\n7. Draw the horizontal line of the dominant color at output_h_row in the output grid.\n8. Draw the vertical line of the dominant color at output_v_col in the output grid.\n\"\"\"\n\nimport numpy as np\n\ndef find_dominant_color_and_lines(grid):\n    \"\"\"\n    Finds the dominant color and the indices of the horizontal and vertical lines.\n    The dominant color is the one forming complete lines, excluding white (0) and gray (5).\n    \"\"\"\n    rows, cols = grid.shape\n    dominant_color = -1\n    input_h_row = -1\n    input_v_col = -1\n\n    # Find horizontal line and dominant color\n    for r in range(rows):\n        row_elements = np.unique(grid[r, :])\n        # Check if the row consists of a single non-background, non-gray color\n        if len(row_elements) == 1 and row_elements[0] not in [0, 5]:\n            dominant_color = row_elements[0]\n            input_h_row = r\n            break\n        # Check if the row consists of the dominant color and potentially white\n        elif len(row_elements) == 2 and dominant_color != -1 and dominant_color in row_elements and 0 in row_elements:\n             # Check if it's a full line of dominant color\n             if np.all(grid[r, :] == dominant_color):\n                 input_h_row = r\n                 break\n        # Check if the row consists of the dominant color and potentially gray (edge case?)\n        elif len(row_elements) == 2 and dominant_color != -1 and dominant_color in row_elements and 5 in row_elements:\n             # Check if it's a full line of dominant color\n             if np.all(grid[r, :] == dominant_color):\n                 input_h_row = r\n                 break\n\n\n    # If dominant color wasn't found via horizontal line, try vertical\n    if dominant_color == -1:\n        for c in range(cols):\n            col_elements = np.unique(grid[:, c])\n            if len(col_elements) == 1 and col_elements[0] not in [0, 5]:\n                dominant_color = col_elements[0]\n                # We still need to find the horizontal line index later\n                break\n            elif len(col_elements) > 1: # Look for columns that aren't just background\n                 for color in col_elements:\n                     if color not in [0, 5]:\n                         # Check if this color forms a full vertical line\n                         if np.all(grid[:, c] == color):\n                             dominant_color = color\n                             break\n                 if dominant_color != -1:\n                     break # Found dominant color via vertical line\n\n\n    # Find vertical line column using the determined dominant color\n    for c in range(cols):\n         # Check if the column is entirely the dominant color\n         if np.all(grid[:, c] == dominant_color):\n             input_v_col = c\n             break\n         # Check if the column contains only the dominant color and white/gray\n         col_elements = np.unique(grid[:, c])\n         if dominant_color in col_elements:\n             is_potential_line = True\n             for element in col_elements:\n                 if element not in [0, 5, dominant_color]:\n                     is_potential_line = False\n                     break\n             if is_potential_line:\n                 # Verify it's a full line (might intersect horizontal line)\n                 count_dominant = np.sum(grid[:, c] == dominant_color)\n                 if count_dominant == rows: # It's a full solid line\n                      input_v_col = c\n                      break\n                 elif count_dominant == rows -1: # It might be the line we are looking for intersecting another\n                     # Check if the non-dominant color is at the horizontal line intersection\n                     non_dominant_indices = np.where(grid[:, c] != dominant_color)[0]\n                     if len(non_dominant_indices) == 1 and non_dominant_indices[0] == input_h_row:\n                           # It looks like the correct vertical line, even if intersected\n                           input_v_col = c\n                           # Need to find the actual horizontal line row if not found yet\n                           if input_h_row == -1:\n                                for r in range(rows):\n                                     if np.all(grid[r, :] == dominant_color):\n                                         input_h_row = r\n                                         break\n                           break\n\n\n    # Final check/find for horizontal row if needed\n    if input_h_row == -1 and dominant_color != -1:\n         for r in range(rows):\n             if np.all(grid[r, :] == dominant_color):\n                 input_h_row = r\n                 break\n             # Check for intersections\n             row_elements = np.unique(grid[r, :])\n             if dominant_color in row_elements:\n                 is_potential_line = True\n                 for element in row_elements:\n                     if element not in [0, 5, dominant_color]:\n                         is_potential_line = False\n                         break\n                 if is_potential_line:\n                      count_dominant = np.sum(grid[r, :] == dominant_color)\n                      if count_dominant == cols:\n                          input_h_row = r\n                          break\n                      elif count_dominant == cols -1:\n                           non_dominant_indices = np.where(grid[r, :] != dominant_color)[0]\n                           if len(non_dominant_indices) == 1 and non_dominant_indices[0] == input_v_col:\n                               input_h_row = r\n                               break\n\n\n    if dominant_color == -1 or input_h_row == -1 or input_v_col == -1:\n        # Fallback or error handling if lines/color not found as expected\n        # This part might need refinement based on more complex cases.\n        # For now, try finding the most frequent non-zero color as dominant.\n        colors, counts = np.unique(grid[grid != 0], return_counts=True)\n        if len(colors) > 0:\n            max_count_idx = np.argmax(counts)\n            potential_dominant = colors[max_count_idx]\n            if potential_dominant != 5: # Ensure it's not gray\n                dominant_color = potential_dominant\n                # Attempt to find lines again with this assumption\n                if input_h_row == -1:\n                    for r in range(rows):\n                         if np.sum(grid[r,:] == dominant_color) > cols // 2 : # Heuristic: If more than half the row is the color\n                             if np.all(grid[r, grid[r,:] != 0] == dominant_color): # Check non-zero cells are dominant\n                                 input_h_row = r\n                                 break\n                if input_v_col == -1:\n                     for c in range(cols):\n                         if np.sum(grid[:,c] == dominant_color) > rows // 2: # Heuristic\n                             if np.all(grid[grid[:,c] != 0, c] == dominant_color): # Check non-zero cells are dominant\n                                 input_v_col = c\n                                 break\n\n    if dominant_color == -1 or input_h_row == -1 or input_v_col == -1:\n         raise ValueError(\"Could not reliably determine dominant color or line positions.\")\n\n\n    return dominant_color, input_h_row, input_v_col\n\ndef count_gray_pixels(grid):\n    \"\"\"Counts the number of gray (5) pixels in the grid.\"\"\"\n    return np.sum(grid == 5)\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by moving horizontal and vertical lines.\n    The movement distance and direction is determined by the count of gray pixels.\n    \"\"\"\n    # Convert input to numpy array for easier processing\n    input_array = np.array(input_grid, dtype=int)\n    rows, cols = input_array.shape\n\n    # Find the dominant color and the original line positions\n    dominant_color, input_h_row, input_v_col = find_dominant_color_and_lines(input_array)\n\n    # Count the number of gray pixels\n    n_gray = count_gray_pixels(input_array)\n\n    # Calculate the new line positions\n    output_h_row = input_h_row + n_gray\n    output_v_col = input_v_col - n_gray\n\n    # Ensure new positions are within grid bounds (though examples suggest they are)\n    output_h_row = max(0, min(rows - 1, output_h_row))\n    output_v_col = max(0, min(cols - 1, output_v_col))\n\n    # Initialize the output grid with the background color (white 0)\n    output_grid = np.zeros_like(input_array)\n\n    # Draw the new horizontal line\n    output_grid[output_h_row, :] = dominant_color\n\n    # Draw the new vertical line\n    # This will overwrite the cell at the intersection, which is the correct behavior\n    output_grid[:, output_v_col] = dominant_color\n\n    # Return the transformed grid as a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4240,
    "candidates_token_count": 2364,
    "total_token_count": 6604,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 21.149967,
  "retries": null
}