{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\ndef find_bounding_box(grid):\n    \"\"\"\n    Finds the minimum bounding box containing all non-background (non-zero) pixels.\n\n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        tuple: (min_row, max_row, min_col, max_col) or None if no non-background pixels exist.\n    \"\"\"\n    non_background_pixels = np.where(grid != 0)\n    rows = non_background_pixels[0]\n    cols = non_background_pixels[1]\n\n    if len(rows) == 0:\n        return None  # No non-background pixels found\n\n    min_row = np.min(rows)\n    max_row = np.max(rows)\n    min_col = np.min(cols)\n    max_col = np.max(cols)\n\n    return min_row, max_row, min_col, max_col\n\ndef transform(input_grid):\n    \"\"\"\n    Extracts the subgrid defined by the minimal bounding box containing all non-white pixels.\n\n    1. Identify all pixels in the input grid that are not white (value 0).\n    2. Determine the minimum and maximum row and column indices occupied by these non-white pixels.\n       This defines the bounding box.\n    3. Create the output grid by copying the portion of the input grid within this bounding box.\n    \"\"\"\n    # Convert input list of lists to a numpy array for easier manipulation\n    input_array = np.array(input_grid, dtype=int)\n\n    # Find the bounding box of non-white pixels\n    bbox = find_bounding_box(input_array)\n\n    # If no non-white pixels are found, return an empty grid or a default\n    # Based on examples, we expect non-white pixels. If not, maybe return a 1x1 white grid?\n    # For now, let's assume the bounding box is always found for valid inputs.\n    if bbox is None:\n        # Handle the case where the input grid is all white (or empty)\n        # Returning a 1x1 white grid seems like a reasonable default, though not explicitly shown.\n        return [[0]] \n        # Or perhaps return an empty list: return []\n\n    min_row, max_row, min_col, max_col = bbox\n\n    # Extract the subgrid corresponding to the bounding box\n    output_array = input_array[min_row : max_row + 1, min_col : max_col + 1]\n\n    # Convert the output numpy array back to a list of lists\n    output_grid = output_array.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2678,
    "candidates_token_count": 615,
    "total_token_count": 3293,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.772879,
  "retries": null
}