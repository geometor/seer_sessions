{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\ndef find_azure_line_row(grid):\n    \"\"\"Finds the row index containing the horizontal azure (8) line.\"\"\"\n    for r in range(grid.shape[0]):\n        if np.all(grid[r, :] == 8) or (np.count_nonzero(grid[r, :] == 8) > 1 and np.all(grid[r, grid[r,:] != 0] == 8)):\n             # Check if the row consists entirely of 8s or mostly 8s excluding 0s\n             # Second condition handles cases like train_3 where the line isn't full width\n             is_line = True\n             for c in range(grid.shape[1]):\n                 # Check if non-zero elements are 8\n                 if grid[r, c] != 0 and grid[r, c] != 8:\n                     is_line = False\n                     break\n                 # Check for vertical continuity for non-zero elements (basic check)\n                 if grid[r,c] == 8:\n                     if c > 0 and grid[r, c-1] == 0: # Gap before an 8\n                         has_8_after = False\n                         for k in range(c + 1, grid.shape[1]):\n                            if grid[r, k] == 8:\n                                has_8_after = True\n                                break\n                         if not has_8_after: # Isolated 8 segment at the end\n                             pass # Allow it\n                         # else: # Gap within the line - might not be the line\n                         #    is_line = False\n                         #    break\n                     if c < grid.shape[1] - 1 and grid[r, c+1] == 0: # Gap after an 8\n                          has_8_before = False\n                          for k in range(c):\n                             if grid[r, k] == 8:\n                                 has_8_before = True\n                                 break\n                          if not has_8_before: # Isolated 8 segment at the beginning\n                             pass # Allow it\n                          # else: # Gap within the line\n                          #    is_line = False\n                          #    break\n\n\n             # Check if there's at least one group of adjacent 8s\n             has_adjacent_8 = False\n             if np.count_nonzero(grid[r, :] == 8) > 0:\n                 for c in range(grid.shape[1] -1):\n                     if grid[r, c] == 8 and grid[r, c+1] == 8:\n                         has_adjacent_8 = True\n                         break\n                 # Handle single column grids or single 8 in a row\n                 if grid.shape[1] == 1 and grid[r, 0] == 8:\n                     has_adjacent_8 = True\n                 # If only one 8 exists, consider it part of the 'line' for this logic\n                 if not has_adjacent_8 and np.count_nonzero(grid[r, :] == 8) == 1:\n                     has_adjacent_8 = True\n\n\n             if is_line and has_adjacent_8 and np.count_nonzero(grid[r,:] == 8) > 0:\n                 return r\n    return -1 # Indicate not found\n\n\ndef transform(input_grid):\n    \"\"\"\n    Identifies a horizontal line of azure (8) pixels.\n    All non-white, non-azure pixels located above this line \"fall\" vertically downwards\n    until they land on the azure line or stack on top of another fallen pixel of the\n    same color within the same column.\n    Pixels below the azure line are removed (set to white 0).\n    The azure line itself remains unchanged.\n    \"\"\"\n    input_grid_np = np.array(input_grid, dtype=int)\n    output_grid = np.zeros_like(input_grid_np) # Start with a white grid\n\n    # Find the row index of the azure line\n    azure_line_row = find_azure_line_row(input_grid_np)\n\n    if azure_line_row == -1:\n        # If no distinct azure line is found, return the input as is or handle error\n        # For now, let's return the original grid, assuming the line is a key feature\n        return input_grid\n\n    # Copy the azure line to the output grid\n    output_grid[azure_line_row, :] = input_grid_np[azure_line_row, :]\n\n    # Process each column independently\n    for c in range(input_grid_np.shape[1]):\n        # Collect falling pixels from above the azure line in this column\n        falling_pixels = []\n        for r in range(azure_line_row):\n            pixel = input_grid_np[r, c]\n            if pixel != 0 and pixel != 8: # Ignore white and azure pixels\n                falling_pixels.append(pixel)\n\n        # Place the falling pixels in the output grid, stacking upwards from the line\n        current_row = azure_line_row - 1\n        for pixel in reversed(falling_pixels): # Place from bottom up\n            if current_row >= 0:\n                output_grid[current_row, c] = pixel\n                current_row -= 1\n            else:\n                # Should not happen if grid height is sufficient, but handles overflow\n                break\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3058,
    "candidates_token_count": 1239,
    "total_token_count": 4297,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 82.531885,
  "retries": null
}