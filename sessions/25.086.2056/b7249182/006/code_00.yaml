task_description: Transforms a grid containing two non-white pixels into a grid with two diamond shapes.
input_features:
  - property: grid_dimensions
    value: variable (e.g., 10x13, 14x10, 10x18)
  - property: background_color
    value: 0 (white)
  - property: objects
    value: exactly two non-white pixels (P1, P2)
  - property: object_colors (P1, P2)
    value: distinct non-white colors (e.g., green/blue, red/azure, gray/azure)
  - property: object_alignment
    value: P1 and P2 are always aligned either horizontally (same row) or vertically (same column)
  - property: object_order
    value: P1 is the pixel with the smaller row index, or the smaller column index if rows are equal.

output_features:
  - property: grid_dimensions
    value: same as input grid dimensions
  - property: background_color
    value: 0 (white)
  - property: objects
    value: two diamond shapes (Shape1, Shape2)
  - property: shape_definition
    value: 13-pixel diamond (5x5 square minus corners) centered at a specific point. Relative coordinates from center (r,c): [(-2,0), (-1,-1),(-1,0),(-1,1), (0,-2),(0,-1),(0,0),(0,1),(0,2), (1,-1),(1,0),(1,1), (2,0)]
  - property: shape_color (Shape1)
    value: color of P1
  - property: shape_color (Shape2)
    value: color of P2
  - property: shape_centers (Center1, Center2)
    value: calculated based on P1, P2 positions

transformation:
  - action: identify_pixels
    inputs: input_grid
    outputs: P1 ((r1, c1), color1), P2 ((r2, c2), color2) [sorted]
  - action: determine_alignment_and_distance
    inputs: P1, P2
    outputs: orientation ('horizontal' or 'vertical'), distance (dist)
      - horizontal: dist = c2 - c1
      - vertical: dist = r2 - r1
  - action: calculate_movement
    inputs: distance (dist)
    outputs: move_amount (move)
      - move = (dist - 3) // 2
  - action: calculate_centers
    inputs: P1, P2, move_amount (move), orientation
    outputs: Center1 (cr1, cc1), Center2 (cr2, cc2)
      - horizontal: cr1=r1, cc1=c1+move; cr2=r2, cc2=c2-move
      - vertical: cr1=r1+move, cc1=c1; cr2=r2-move, cc2=c2
  - action: draw_shapes
    inputs: output_grid_template, Center1, color1, Center2, color2, shape_definition
    outputs: final_output_grid
    process: Draw the 13-pixel diamond shape using color1 centered at Center1, and draw the shape using color2 centered at Center2. Handle boundary clipping implicitly by checking coordinates.