{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List\n\n\"\"\"\nTransforms an input grid composed of solid-colored rectangular blocks into a smaller \noutput grid where each cell represents one block from the input. \nThe output grid's dimensions correspond to the number of block rows and columns \nin the input. The color of each output cell matches the color of the corresponding \ninput block, preserving the relative spatial arrangement.\n\nWorkflow:\n1. Convert the input list of lists into a NumPy array.\n2. Identify the top-left corner coordinates (row, column) and the color of each \n   distinct rectangular block in the input grid. A pixel is considered a top-left \n   corner if its color differs from the pixel above it (or if it's in the first row) \n   AND its color differs from the pixel to its left (or if it's in the first column).\n3. Determine the dimensions of the output grid:\n   - Collect and sort the unique row coordinates of the identified top-left corners. \n     The number of unique rows is the output height.\n   - Collect and sort the unique column coordinates of the identified top-left corners. \n     The number of unique columns is the output width.\n4. Create an empty output grid (NumPy array) with the determined dimensions.\n5. Populate the output grid: For each identified block (represented by its top-left \n   corner row, column, and color):\n   - Find the index of the block's row in the sorted unique row list. This is the \n     output row index.\n   - Find the index of the block's column in the sorted unique column list. This \n     is the output column index.\n   - Assign the block's color to the output grid at the calculated (output row, \n     output column) position.\n6. Convert the completed NumPy output grid back into a list of lists and return it.\n\"\"\"\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Summarizes a grid of colored rectangular blocks into a smaller grid \n    representing the block layout and colors.\n    \"\"\"\n    # Convert input to NumPy array for efficient processing\n    input_np = np.array(input_grid, dtype=int)\n    height, width = input_np.shape\n\n    # Store top-left corners: (row, col, color)\n    top_left_corners = []\n    # Store unique row and column indices of corners\n    corner_rows = set()\n    corner_cols = set()\n\n    # --- 1. Identify Block Top-Left Corners ---\n    for r in range(height):\n        for c in range(width):\n            # Check if the pixel above has a different color (or if it's the first row)\n            is_top_edge = (r == 0) or (input_np[r, c] != input_np[r - 1, c])\n            # Check if the pixel to the left has a different color (or if it's the first column)\n            is_left_edge = (c == 0) or (input_np[r, c] != input_np[r, c - 1])\n\n            # If it's both a top edge and a left edge relative to color changes, it's a top-left corner\n            if is_top_edge and is_left_edge:\n                color = input_np[r, c]\n                top_left_corners.append({'r': r, 'c': c, 'color': color})\n                corner_rows.add(r)\n                corner_cols.add(c)\n\n    # --- 2. Determine Output Dimensions ---\n    # Sort the unique row and column coordinates to map them to output indices\n    sorted_corner_rows = sorted(list(corner_rows))\n    sorted_corner_cols = sorted(list(corner_cols))\n    \n    output_height = len(sorted_corner_rows)\n    output_width = len(sorted_corner_cols)\n\n    # Create mapping from corner coordinate to output index\n    row_map = {r: i for i, r in enumerate(sorted_corner_rows)}\n    col_map = {c: i for i, c in enumerate(sorted_corner_cols)}\n\n    # --- 3. Create Output Grid ---\n    # Initialize with a placeholder value like -1 or use default 0 if 0 is not a possible block color (it isn't in ARC generally)\n    output_np = np.zeros((output_height, output_width), dtype=int) \n\n    # --- 4. Populate Output Grid ---\n    for corner in top_left_corners:\n        output_row = row_map[corner['r']]\n        output_col = col_map[corner['c']]\n        output_np[output_row, output_col] = corner['color']\n\n    # --- 5. Return Output ---\n    # Convert back to list of lists format\n    output_grid = output_np.tolist()\n    \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3657,
    "candidates_token_count": 1138,
    "total_token_count": 4795,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 19.764321,
  "retries": null
}