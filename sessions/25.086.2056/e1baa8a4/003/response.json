{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid composed of solid-colored rectangular blocks into a smaller \noutput grid where each cell represents one block from the input. The transformation \nidentifies the grid structure based on color changes between adjacent cells, \ndetermines the dimensions of the block layout, and samples the color from the \ntop-left corner of each block region in the input grid to create the output grid.\n\nWorkflow:\n1. Convert the input list of lists into a NumPy array.\n2. Identify Row Boundaries: Find all unique row indices `r` (including 0) where \n   a vertical color change occurs (i.e., the color at `(r, c)` is different \n   from `(r-1, c)` for any column `c`, or `r=0`). Sort these indices.\n3. Identify Column Boundaries: Find all unique column indices `c` (including 0) \n   where a horizontal color change occurs (i.e., the color at `(r, c)` is \n   different from `(r, c-1)` for any row `r`, or `c=0`). Sort these indices.\n4. Determine Output Dimensions: The output grid height is the number of unique \n   row boundaries found. The output grid width is the number of unique column \n   boundaries found.\n5. Create Output Grid: Initialize an empty NumPy array with the calculated \n   output dimensions.\n6. Populate Output Grid: Iterate through the output grid cells `(out_r, out_c)`. \n   For each cell, find the corresponding input grid start row `in_r` (the \n   `out_r`-th sorted row boundary) and start column `in_c` (the `out_c`-th \n   sorted column boundary). Assign the color from the input grid at `(in_r, in_c)` \n   to the output grid cell `(out_r, out_c)`.\n7. Convert the NumPy output grid back to a list of lists and return it.\n\"\"\"\n\nimport numpy as np\nfrom typing import List\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Summarizes a grid of colored rectangular blocks into a smaller grid \n    representing the block layout and colors by sampling at boundary intersections.\n    \"\"\"\n    # Convert input to NumPy array for efficient processing\n    input_np = np.array(input_grid, dtype=int)\n    height, width = input_np.shape\n\n    # --- 1. Identify Row Boundaries ---\n    row_boundaries = {0} # Always include the first row\n    # Check for color changes between row r and r-1\n    for r in range(1, height):\n        if np.any(input_np[r, :] != input_np[r - 1, :]):\n            row_boundaries.add(r)\n    sorted_row_boundaries = sorted(list(row_boundaries))\n\n    # --- 2. Identify Column Boundaries ---\n    col_boundaries = {0} # Always include the first column\n    # Check for color changes between column c and c-1\n    for c in range(1, width):\n         if np.any(input_np[:, c] != input_np[:, c - 1]):\n            col_boundaries.add(c)\n    sorted_col_boundaries = sorted(list(col_boundaries))\n\n    # --- 3. Determine Output Dimensions ---\n    output_height = len(sorted_row_boundaries)\n    output_width = len(sorted_col_boundaries)\n\n    # --- 4. Create Output Grid ---\n    # Initialize with zeros, assuming 0 is background or not a block color. \n    # This matches the previous code's initialization.\n    output_np = np.zeros((output_height, output_width), dtype=int) \n\n    # --- 5. Populate Output Grid ---\n    # Iterate through the indices of the boundary lists, which correspond to output coordinates\n    for out_r, in_r in enumerate(sorted_row_boundaries):\n        for out_c, in_c in enumerate(sorted_col_boundaries):\n            # Sample the color from the input grid at the boundary intersection\n            output_np[out_r, out_c] = input_np[in_r, in_c]\n\n    # --- 6. Return Output ---\n    # Convert back to list of lists format\n    output_grid = output_np.tolist()\n    \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 9270,
    "candidates_token_count": 1010,
    "total_token_count": 10280,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 19.912484,
  "retries": null
}