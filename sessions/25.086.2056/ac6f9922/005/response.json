{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentify the border color (top-left pixel) and the inner background color (most frequent non-border color) of the input grid.\nFind all \"special\" colors, which are colors neither the border nor the inner background color.\nFor each unique special color, determine the top-left coordinate (minimum row, minimum column) of its occurrences in the input grid.\nCollect these top-left coordinates and their corresponding special colors.\nDetermine the output grid dimensions based on the unique row and column coordinates found. The height is max(2, number of unique rows), and the width is max(2, number of unique columns).\nCreate mappings from the sorted unique row coordinates to output row indices (0, 1, ...) and similarly for columns.\nInitialize the output grid with the calculated dimensions, filled with the border color.\nFor each recorded special color and its top-left coordinate (min_r, min_c), use the mappings to find the corresponding output grid coordinates (output_r, output_c) and place the special color at that position in the output grid.\nIf no special colors are found, return a 2x2 grid filled with the border color.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef find_inner_background_color(grid, border_color):\n    \"\"\"Finds the most frequent color in the grid, excluding the border color.\"\"\"\n    pixels = grid.flatten()\n    color_counts = Counter(p for p in pixels if p != border_color)\n    \n    if not color_counts:\n        # If only the border color exists, there's no inner background.\n        # Return a value that won't match any valid color (e.g., -1)\n        # or perhaps the border color itself if that makes sense in context.\n        # Using -1 to indicate none found.\n        return -1 \n        \n    # Return the most frequent non-border color\n    most_common_color = color_counts.most_common(1)[0][0]\n    return int(most_common_color)\n\ndef find_special_colors_top_left(grid, border_color, inner_background_color):\n    \"\"\"Finds unique special colors and the top-left coordinate of their occurrences.\"\"\"\n    height, width = grid.shape\n    unique_colors = np.unique(grid)\n    special_color_coords = {} # Store {color: (min_r, min_c)}\n\n    for color in unique_colors:\n        if color == border_color or color == inner_background_color:\n            continue # Skip border and inner background colors\n\n        # Find all occurrences of this special color\n        locations = np.argwhere(grid == color)\n        if locations.size == 0: # Should not happen if color is from unique_colors, but safety check\n            continue \n            \n        min_r = np.min(locations[:, 0])\n        min_c = np.min(locations[:, 1])\n        special_color_coords[int(color)] = (min_r, min_c)\n\n    # Convert to list of tuples for easier processing later\n    # Format: [(color, min_r, min_c), ...]\n    result_list = [(color, r, c) for color, (r, c) in special_color_coords.items()]\n    return result_list\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by mapping the top-left locations of special color\n    blocks to a compressed output grid.\n    \"\"\"\n    # Convert input to numpy array\n    grid = np.array(input_grid, dtype=int)\n    height, width = grid.shape\n\n    if height == 0 or width == 0:\n        return [[]] # Handle empty input grid\n\n    # 1. Identify Border Color\n    border_color = int(grid[0, 0])\n\n    # 2. Identify Inner Background Color\n    inner_background_color = find_inner_background_color(grid, border_color)\n\n    # 3. & 4. Find Special Colors and their Top-Left Coordinates\n    special_locations = find_special_colors_top_left(grid, border_color, inner_background_color)\n\n    # Handle case where no special colors are found\n    if not special_locations:\n        # Return a 2x2 grid filled with the border color\n        output_grid = np.full((2, 2), border_color, dtype=int)\n        return output_grid.tolist()\n\n    # 5. Collect unique row/column coordinates from top-left locations\n    unique_rows = sorted(list(set(r for _, r, _ in special_locations)))\n    unique_cols = sorted(list(set(c for _, _, c in special_locations)))\n\n    # 6. Create coordinate-to-index mappings\n    row_map = {r: i for i, r in enumerate(unique_rows)}\n    col_map = {c: i for i, c in enumerate(unique_cols)}\n\n    # 7. Determine output grid dimensions (minimum 2x2)\n    output_height = max(2, len(unique_rows))\n    output_width = max(2, len(unique_cols))\n\n    # 8. Initialize the output grid with border_color\n    output_grid = np.full((output_height, output_width), border_color, dtype=int)\n\n    # 9. Place special colors into the output grid based on mapped coordinates\n    for color, r, c in special_locations:\n        output_r = row_map[r]\n        output_c = col_map[c]\n        output_grid[output_r, output_c] = color\n\n    # 10. Return the result as a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 20593,
    "candidates_token_count": 1312,
    "total_token_count": 21905,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.064405,
  "retries": null
}