elements:
  - role: background
    color: white (0)
    description: The default color filling most of the grid.
  - role: point_A
    color: gray (5)
    description: Single, scattered pixels acting as reference points. Multiple may exist.
  - role: point_B
    color: yellow (4)
    description: Single, scattered pixels acting as centers for the transformation. Multiple may exist.
  - role: fill_color
    color: red (2)
    description: Color used to fill square areas in the output grid.

relationships:
  - type: distance
    element1: point_B (yellow)
    element2: point_A (gray)
    metric: Manhattan distance
    description: The distance between each yellow pixel and all gray pixels is relevant.
  - type: relative_position
    element1: point_B (yellow)
    element2: point_A (gray)
    metric: Max coordinate difference (max(delta_row, delta_col))
    description: The maximum difference in row or column coordinates between a yellow pixel and its closest gray pixel determines the size of the output square.
  - type: centered_on
    element1: fill_color area (red square)
    element2: point_B (yellow)
    description: Each generated red square is centered on a yellow pixel.

actions:
  - action: find_closest
    input: point_B (yellow), all point_A (gray)
    output: closest point_A(s) based on Manhattan distance
    tie_breaking_1: None (consider all ties)
  - action: calculate_size
    input: point_B (yellow), closest point_A(s)
    output: integer size S
    logic: |
      For each closest gray G', calculate potential size s' = 2 * max(abs(Y_row - G'_row), abs(Y_col - G'_col)) - 1.
      The final size S is the minimum value among all calculated s'.
    tie_breaking_2: Minimum resulting size S.
  - action: draw_square
    center: point_B (yellow)
    size: S
    color: fill_color (red)
    target_grid: output grid
    rule: Fill background (white 0) pixels within the square area with red (2). Do not overwrite existing non-white pixels.

goal:
  description: For every yellow pixel in the input, find its closest gray pixel (using a specific tie-breaking rule based on resulting shape size), calculate a square size based on their relative positions, and draw a red square of that size centered on the yellow pixel onto the output grid, preserving original non-white pixels.