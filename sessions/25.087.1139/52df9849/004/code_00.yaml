task_description: Iteratively update pixel colors based on orthogonal neighbors until no more changes occur.
background_color: 7 (orange) in all examples.
objects:
  - type: contiguous areas of non-background color.
  - properties: color (numeric value 0-9, excluding background).
interactions:
  - type: color change propagation at boundaries between different colored objects.
  - rule: A non-background pixel's color is updated based on its orthogonal neighbors.
conditions_for_change:
  - Pixel must not be the background color.
  - Pixel must have at least one orthogonal neighbor that is:
      - Not the background color.
      - Not the same color as the pixel itself.
      - Has a color value *greater* than the pixel's color value.
change_rule:
  - If conditions are met, the pixel's color changes to the *maximum* color value among all qualifying orthogonal neighbors.
process:
  - type: Iterative / Propagation.
  - steps:
      1. Initialize the output grid as a copy of the input grid.
      2. Repeatedly scan all pixels in the grid.
      3. In each scan, check each non-background pixel against its *current* neighbors in the output grid using the conditions and change rule.
      4. Update the output grid *in place* or in a temporary grid for the next iteration (care needed depending on implementation). A common approach is to calculate all changes based on the state at the start of the iteration and apply them simultaneously before the next iteration.
      5. Stop iterating when a full scan results in no pixels changing color.
examples_summary:
  - example1:
      - input_colors: [1 (blue), 4 (yellow), 7 (orange)]
      - output_colors: [1 (blue), 4 (yellow), 7 (orange)]
      - changes: 8 pixels change from blue (1) to yellow (4).
      - requires_propagation: Yes. Pixels (7,7), (8,7), (9,7) only change because their neighbors change in the first propagation step.
  - example2:
      - input_colors: [5 (gray), 7 (orange), 9 (maroon)]
      - output_colors: [5 (gray), 7 (orange), 9 (maroon)]
      - changes: 1 pixel changes from gray (5) to maroon (9).
      - requires_propagation: No. The change occurs based on the initial input state.