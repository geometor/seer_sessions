task_context:
  problem_description: "Pixels change color based on adjacent pixels with higher color values in a single step."
  background_color: 7 # Orange, consistently observed across examples.
  grid_properties:
    - dimensions_vary: False # All examples are 16x16, but cannot assume this holds for test case.
    - content_type: colored_pixels
    - objects_present: Yes # Contiguous blocks of non-background color.

objects:
  - type: pixel_group
    attributes:
      - color: Represents a numerical value (1-9, excluding background 7).
      - contiguity: Forms distinct objects.
      - shape: Can be lines, blocks, etc.

actions:
  - name: color_update
    actor: grid_pixel
    target: self
    condition: |
      The pixel must not be the background color.
      The pixel must have at least one orthogonal neighbor (up, down, left, right) in the original input grid that:
        1. Is not the background color.
        2. Is not the same color as the pixel itself.
        3. Has a color value strictly greater than the pixel's color value.
    effect: |
      The pixel's color is changed to the maximum color value found among all qualifying orthogonal neighbors (based on the condition above).
    application_rule: |
      This update is calculated for all pixels based *only* on the original input grid configuration. The final output grid reflects all these single-step changes simultaneously. No iteration occurs.

examples_summary:
  - example_index: 1
    input_objects: Blue(1) block, Yellow(4) block.
    output_objects: Blue(1) block (reduced size), Yellow(4) block (increased size).
    change_rule: Blue pixels adjacent to Yellow pixels change to Yellow (4 > 1).
    failed_previous_code: Yes (Yellow spread too far).
  - example_index: 2
    input_objects: Gray(5) line, Maroon(9) line.
    output_objects: Gray(5) line (one pixel shorter), Maroon(9) line (one pixel longer).
    change_rule: Gray pixel adjacent to Maroon pixel changes to Maroon (9 > 5).
    failed_previous_code: Yes (Maroon spread too far).
