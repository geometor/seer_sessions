{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nModify the input grid by removing specific pixels based on the location of magenta markers.\nSpecifically:\n1. Find all magenta (6) pixels in the input grid.\n2. For each magenta pixel, identify its orthogonally adjacent (up, down, left, right) neighbors.\n3. Among these neighbors, find those that are maroon (9).\n4. Create an output grid by copying the input grid.\n5. In the output grid, change the color of all original magenta pixels to white (0).\n6. In the output grid, change the color of all maroon pixels identified in step 3 (those adjacent to magenta) to white (0).\n\"\"\"\n\nimport numpy as np\n\ndef find_pixels_by_color(grid, color):\n    \"\"\"Finds the coordinates of all pixels with a specific color.\"\"\"\n    rows, cols = np.where(grid == color)\n    return list(zip(rows, cols))\n\ndef get_orthogonal_neighbors(grid_shape, r, c):\n    \"\"\"Gets the coordinates of orthogonal neighbors within grid boundaries.\"\"\"\n    neighbors = []\n    height, width = grid_shape\n    potential_neighbors = [(r-1, c), (r+1, c), (r, c-1), (r, c+1)]\n    for nr, nc in potential_neighbors:\n        if 0 <= nr < height and 0 <= nc < width:\n            neighbors.append((nr, nc))\n    return neighbors\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by removing magenta pixels and any adjacent maroon pixels.\n    \"\"\"\n    # Convert input list of lists to numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    height, width = input_np.shape\n\n    # Initialize output_grid as a copy of the input grid\n    output_grid = np.copy(input_np)\n\n    # 1. Find all magenta (6) pixels\n    magenta_coords = find_pixels_by_color(input_np, 6)\n\n    # 2. & 3. Find maroon (9) pixels adjacent to magenta pixels\n    maroon_to_remove_coords = set() # Use a set to avoid duplicates\n    for r, c in magenta_coords:\n        neighbors = get_orthogonal_neighbors(input_np.shape, r, c)\n        for nr, nc in neighbors:\n            # Check the original input grid for the neighbor's color\n            if input_np[nr, nc] == 9:\n                maroon_to_remove_coords.add((nr, nc))\n\n    # 5. Change original magenta pixels to white (0) in the output grid\n    for r, c in magenta_coords:\n        output_grid[r, c] = 0\n\n    # 6. Change adjacent maroon pixels to white (0) in the output grid\n    for r, c in maroon_to_remove_coords:\n        output_grid[r, c] = 0\n\n    # Convert back to list of lists for the expected output format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3710,
    "candidates_token_count": 699,
    "total_token_count": 4409,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 8.907894,
  "retries": null
}