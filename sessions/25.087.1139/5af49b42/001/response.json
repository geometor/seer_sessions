{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Tuple, Dict, Set\n\n\"\"\"\nIdentify horizontal sequences of non-background colors (patterns) and isolated non-background pixels (markers).\nFor each marker, find a pattern that contains the marker's color.\nCopy that pattern onto the grid, aligning it such that the pixel in the pattern matching the marker's color is placed at the original marker's location.\nThe original patterns and markers remain unless overwritten by a newly copied pattern.\n\"\"\"\n\ndef find_horizontal_segments(grid: np.ndarray) -> List[Tuple[List[int], int, int]]:\n    \"\"\"\n    Finds all contiguous horizontal segments of non-zero colors.\n\n    Args:\n        grid: The input grid as a numpy array.\n\n    Returns:\n        A list of tuples, where each tuple contains:\n        - color_sequence (List[int]): The sequence of colors in the segment.\n        - row (int): The row index of the segment.\n        - start_col (int): The starting column index of the segment.\n    \"\"\"\n    height, width = grid.shape\n    segments = []\n    visited_cols_in_row = set() # Keep track of cols already part of a found segment in the current row\n\n    for r in range(height):\n        visited_cols_in_row.clear()\n        for c in range(width):\n            if c in visited_cols_in_row:\n                continue\n            if grid[r, c] != 0:\n                # Found the start of a potential segment\n                segment_colors = []\n                start_c = c\n                current_c = c\n                while current_c < width and grid[r, current_c] != 0:\n                    segment_colors.append(grid[r, current_c])\n                    visited_cols_in_row.add(current_c)\n                    current_c += 1\n                \n                segments.append((segment_colors, r, start_c))\n                # No need to update c here because the outer loop will continue from c+1,\n                # and the visited check handles skipping the rest of the segment.\n    return segments\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transforms the input grid based on identified patterns and markers.\n\n    1. Finds all horizontal segments of non-background colors.\n    2. Segments of length 1 are markers.\n    3. Segments of length 2 or more are patterns.\n    4. For each marker, finds a pattern containing the marker's color.\n    5. Copies the found pattern to the marker's row, aligning the matching color.\n    \"\"\"\n    \n    input_np = np.array(input_grid, dtype=int)\n    output_grid = np.copy(input_np)\n    height, width = input_np.shape\n\n    # 1. Find all horizontal segments\n    all_segments = find_horizontal_segments(input_np)\n\n    # 2. & 3. Separate segments into markers and patterns\n    markers = []\n    patterns = []\n    unique_pattern_sequences = set() # Store unique patterns as tuples to handle duplicates\n\n    for colors, r, c in all_segments:\n        if len(colors) == 1:\n            markers.append((colors[0], r, c)) # Store as (color, row, col)\n        elif len(colors) >= 2:\n            # Store the unique pattern sequence\n            pattern_tuple = tuple(colors)\n            if pattern_tuple not in unique_pattern_sequences:\n                 patterns.append(colors) # Store the list version for easier indexing later\n                 unique_pattern_sequences.add(pattern_tuple)\n            # We don't need the original location of patterns for the transformation rule itself\n\n    # 4. & 5. Process each marker\n    for marker_color, r, c in markers:\n        found_pattern = None\n        # Find a pattern containing the marker's color\n        for p in patterns:\n            if marker_color in p:\n                found_pattern = p\n                break # Use the first matching pattern found\n\n        if found_pattern:\n            # Find the index of the marker color within the pattern\n            try:\n                idx = found_pattern.index(marker_color)\n            except ValueError:\n                # This shouldn't happen if the pattern was selected correctly\n                continue \n\n            # Calculate the target start column for copying\n            target_start_col = c - idx\n\n            # Copy the pattern to the output grid\n            for j, p_color in enumerate(found_pattern):\n                current_col = target_start_col + j\n                # Check boundaries before writing\n                if 0 <= current_col < width:\n                    output_grid[r, current_col] = p_color\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4414,
    "candidates_token_count": 1105,
    "total_token_count": 5519,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 28.765209,
  "retries": null
}