{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentifies all distinct contiguous objects composed solely of yellow (4) pixels in the input grid, considering 8-way adjacency. \nCounts how many of these objects consist of exactly one pixel (single yellow objects).\nIf the count of single yellow objects is exactly 6:\n  Identifies the single yellow object with the minimum row index (and minimum column index as a tie-breaker).\n  Changes the color of all *other* single yellow objects to white (0).\n  Keeps the identified top-leftmost single yellow object yellow.\nIf the count of single yellow objects is not 6, the grid remains unchanged.\n\"\"\"\n\ndef find_connected_object(grid, start_row, start_col, target_color, visited):\n    \"\"\"\n    Finds all connected pixels of a target_color starting from (start_row, start_col)\n    using Breadth-First Search (BFS) considering 8-way adjacency.\n\n    Args:\n        grid (np.array): The input grid.\n        start_row (int): The starting row index.\n        start_col (int): The starting column index.\n        target_color (int): The color of the object to find.\n        visited (np.array): A boolean grid of the same shape as grid,\n                             marking visited pixels.\n\n    Returns:\n        list: A list of (row, col) tuples representing the pixels in the object.\n              Returns an empty list if the starting pixel is not the target color\n              or has already been visited.\n    \"\"\"\n    rows, cols = grid.shape\n    if not (0 <= start_row < rows and 0 <= start_col < cols) or \\\n       visited[start_row, start_col] or \\\n       grid[start_row, start_col] != target_color:\n        return []\n\n    object_pixels = []\n    queue = deque([(start_row, start_col)])\n    visited[start_row, start_col] = True\n\n    while queue:\n        r, c = queue.popleft()\n        object_pixels.append((r, c))\n\n        # Check 8 neighbors (including diagonals)\n        for dr in [-1, 0, 1]:\n            for dc in [-1, 0, 1]:\n                if dr == 0 and dc == 0:\n                    continue  # Skip self\n\n                nr, nc = r + dr, c + dc\n\n                # Check bounds, color, and visited status\n                if 0 <= nr < rows and 0 <= nc < cols and \\\n                   not visited[nr, nc] and \\\n                   grid[nr, nc] == target_color:\n                    visited[nr, nc] = True\n                    queue.append((nr, nc))\n\n    return object_pixels\n\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule based on the count of single yellow pixels.\n\n    Args:\n        input_grid (list of lists): The input grid represented as a list of lists.\n\n    Returns:\n        list of lists: The transformed grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_grid_np = np.array(input_grid, dtype=int)\n    rows, cols = input_grid_np.shape\n\n    # Keep track of visited pixels to avoid processing the same object multiple times\n    visited = np.zeros_like(input_grid_np, dtype=bool)\n\n    target_color = 4  # Yellow\n    replacement_color = 0 # White\n\n    # 1. Identify all single yellow objects\n    single_yellow_pixels = []\n    for r in range(rows):\n        for c in range(cols):\n            # If the pixel is the target color and hasn't been visited yet\n            if input_grid_np[r, c] == target_color and not visited[r, c]:\n                # Find the complete connected object starting from this pixel\n                object_pixels = find_connected_object(input_grid_np, r, c, target_color, visited)\n\n                # Check if the object size is exactly 1\n                if len(object_pixels) == 1:\n                    # The object contains only the starting pixel (r, c)\n                    single_yellow_pixels.append(object_pixels[0]) # Add (r, c) tuple\n\n    # 2. Count the single yellow objects\n    num_single_yellow = len(single_yellow_pixels)\n\n    # 3. Check the condition (N == 6)\n    if num_single_yellow == 6:\n        # Condition met: Perform transformation\n        # Create the output grid as a copy\n        output_grid_np = np.copy(input_grid_np)\n\n        # a. Find the top-leftmost single yellow pixel to preserve\n        # Sort by row, then by column\n        single_yellow_pixels.sort(key=lambda x: (x[0], x[1]))\n        pixel_to_preserve = single_yellow_pixels[0]\n\n        # b. Change all *other* single yellow pixels to white\n        for r, c in single_yellow_pixels:\n            if (r, c) != pixel_to_preserve:\n                output_grid_np[r, c] = replacement_color\n\n        # Convert the result back to a list of lists\n        return output_grid_np.tolist()\n\n    else:\n        # Condition not met: Return the input grid unchanged\n        return input_grid # Return original list of lists\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 16134,
    "candidates_token_count": 1252,
    "total_token_count": 17386,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.105691,
  "retries": null
}