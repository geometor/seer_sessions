{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nThe transformation rule identifies a unique 'source' pixel in the input grid, distinguished by its color being neither the predominant background color nor white (0). Based on the color of this source pixel, a specific predefined pattern of relative coordinates is selected. This pattern is then applied relative to the source pixel's location, changing the pixels in the output grid at the calculated target coordinates to the source pixel's color. The background and other elements like white pixels remain unchanged unless overwritten by the pattern application.\n\"\"\"\n\ndef find_most_frequent_color(grid):\n    \"\"\"Finds the most frequent color in the grid, ignoring white (0).\"\"\"\n    colors = grid.flatten()\n    color_counts = Counter(c for c in colors if c != 0)\n    if not color_counts:\n        # Handle cases with only white pixels or empty grids if necessary\n        # For ARC, grids usually have a background. If not, maybe return 0?\n        # Let's assume a dominant non-white color exists based on examples.\n        # If the grid is all white, the concept of 'background' is less clear.\n        # Could fall back to the most frequent overall, which would be 0.\n        return 0 # Or handle error/edge case appropriately\n    # Return the color (key) with the highest count (value)\n    return color_counts.most_common(1)[0][0]\n\ndef find_source_pixel(grid, background_color):\n    \"\"\"Finds the unique pixel that is not the background color and not white (0).\"\"\"\n    source_pixel_info = None\n    found_count = 0\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            color = grid[r, c]\n            if color != background_color and color != 0:\n                source_pixel_info = {'row': r, 'col': c, 'color': color}\n                found_count += 1\n                # Assuming only one such pixel exists based on the problem description\n                # If more than one could exist, this logic would need adjustment.\n    # Add a check to ensure exactly one source pixel was found, as per perception\n    if found_count == 1:\n         return source_pixel_info\n    else:\n        # Handle cases where 0 or >1 source pixels are found (error or different logic needed)\n        print(f\"Warning: Found {found_count} source pixels. Expected 1.\")\n        return None # Or raise an error\n\ndef transform(input_grid):\n    \"\"\"\n    Applies a color-specific pattern anchored at a unique source pixel.\n\n    Args:\n        input_grid (list of lists): The input grid.\n\n    Returns:\n        list of lists: The transformed grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    grid = np.array(input_grid, dtype=int)\n    output_grid = np.copy(grid)\n    rows, cols = grid.shape\n\n    # 1. Determine the background color\n    background_color = find_most_frequent_color(grid)\n\n    # 2. Find the source pixel (location and color)\n    source_pixel = find_source_pixel(grid, background_color)\n\n    # Proceed only if a unique source pixel was found\n    if source_pixel is None:\n        print(\"Error: Could not find a unique source pixel.\")\n        return output_grid.tolist() # Return the original grid if no source found\n\n    source_row = source_pixel['row']\n    source_col = source_pixel['col']\n    source_color = source_pixel['color']\n\n    # 3. Define the patterns associated with specific source colors\n    # Patterns are sets of (dr, dc) relative offsets\n    patterns = {\n        3: {(0,0), (1,0), (1,1), (1,2), (2,-2), (2,0), (3,-3), (3,-2), (3,-1), (4,-4), (4,-2), (5,-4), (5,-3)}, # Green\n        2: {(0,0), (1,-1), (1,1), (2,0), (2,2), (3,1), (3,3), (4,2), (4,4), (5,3), (5,5), (6,4), (6,6)}, # Red\n        8: {(-4,0), (-4,1), (-4,3), (-4,4), (-3,0), (-3,1), (-3,3), (-3,4), (-2,2), (-1,0), (-1,1), (-1,3), (-1,4), (0,0), (0,1), (0,3), (0,4)}  # Azure\n    }\n\n    # 4. Select the appropriate pattern\n    selected_pattern = patterns.get(source_color)\n\n    # Proceed only if a pattern exists for the source color\n    if selected_pattern is None:\n        print(f\"Warning: No pattern defined for source color {source_color}.\")\n        return output_grid.tolist() # Return the original grid if no pattern found\n\n    # 5. Apply the pattern to the output grid\n    for dr, dc in selected_pattern:\n        target_row = source_row + dr\n        target_col = source_col + dc\n\n        # 6. Check if the target coordinates are within grid bounds\n        if 0 <= target_row < rows and 0 <= target_col < cols:\n            # 7. Update the output grid pixel\n            output_grid[target_row, target_col] = source_color\n\n    # Return the modified grid as a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5129,
    "candidates_token_count": 1322,
    "total_token_count": 6451,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.434961,
  "retries": null
}