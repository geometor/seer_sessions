{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentify all connected objects of the same non-white color in the input grid.\nCalculate the area (number of pixels) for each object.\nFind the object with the largest area.\nExtract the bounding box containing the largest object.\nCreate an output grid with the dimensions of the bounding box.\nCopy the largest object into the output grid, preserving its shape and relative position within the bounding box, using the original color. Fill the rest of the output grid with white (0).\n\"\"\"\n\ndef find_objects(grid, target_color):\n    \"\"\"\n    Finds all connected objects of a specific color in the grid.\n\n    Args:\n        grid (np.array): The input grid.\n        target_color (int): The color of the objects to find.\n\n    Returns:\n        list: A list of objects, where each object is a set of (row, col) tuples.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = set()\n    objects = []\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == target_color and (r, c) not in visited:\n                # Start BFS to find a connected object\n                obj_pixels = set()\n                q = deque([(r, c)])\n                visited.add((r, c))\n                obj_pixels.add((r, c))\n\n                while q:\n                    row, col = q.popleft()\n\n                    # Check neighbors (4-connectivity)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] == target_color and (nr, nc) not in visited:\n                            visited.add((nr, nc))\n                            obj_pixels.add((nr, nc))\n                            q.append((nr, nc))\n                \n                if obj_pixels:\n                    objects.append(obj_pixels)\n    return objects\n\ndef get_bounding_box(obj_pixels):\n    \"\"\"\n    Calculates the bounding box for a set of pixels.\n\n    Args:\n        obj_pixels (set): A set of (row, col) tuples representing an object.\n\n    Returns:\n        tuple: (min_row, min_col, max_row, max_col) or None if no pixels.\n    \"\"\"\n    if not obj_pixels:\n        return None\n    \n    rows = [r for r, c in obj_pixels]\n    cols = [c for r, c in obj_pixels]\n    \n    min_row = min(rows)\n    min_col = min(cols)\n    max_row = max(rows)\n    max_col = max(cols)\n    \n    return min_row, min_col, max_row, max_col\n\ndef transform(input_grid):\n    \"\"\"\n    Identifies the largest object of a single non-white color in the input grid\n    and extracts it into a new grid representing its bounding box.\n    \"\"\"\n    grid = np.array(input_grid, dtype=int)\n    rows, cols = grid.shape\n    \n    # Find the non-white color present in the grid\n    unique_colors = np.unique(grid)\n    target_color = -1\n    for color in unique_colors:\n        if color != 0:\n            target_color = color\n            break\n            \n    if target_color == -1:\n        # Handle case with only background color or empty grid\n        # Based on examples, this shouldn't happen, but good practice.\n        # Returning an empty grid or a 1x1 white grid might be options.\n        # Let's return a 1x1 white grid for now.\n         return [[0]] \n\n    # Find all objects of the target color\n    objects = find_objects(grid, target_color)\n    \n    if not objects:\n        # No objects of the target color found\n         return [[0]]\n\n    # Find the object with the largest area (most pixels)\n    largest_object = max(objects, key=len)\n    \n    # Get the bounding box of the largest object\n    min_r, min_c, max_r, max_c = get_bounding_box(largest_object)\n    \n    # Calculate output grid dimensions\n    output_height = max_r - min_r + 1\n    output_width = max_c - min_c + 1\n    \n    # Initialize output grid with white (0)\n    output_grid = np.zeros((output_height, output_width), dtype=int)\n    \n    # Copy the largest object pixels to the output grid, adjusting coordinates\n    for r, c in largest_object:\n        output_r = r - min_r\n        output_c = c - min_c\n        output_grid[output_r, output_c] = target_color\n        \n    # Convert back to list of lists for the required output format\n    return output_grid.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3988,
    "candidates_token_count": 1182,
    "total_token_count": 5170,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 94.409423,
  "retries": null
}