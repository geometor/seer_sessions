{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransformation Rule Description:\n\n1.  **Identify the Background Template:** Find the largest contiguous rectangular block in the input grid composed of a single, non-white (non-zero) color. This block determines the output grid's dimensions and background color.\n2.  **Create the Output Canvas:** Initialize a new grid with the dimensions derived from the background template rectangle, filling it entirely with the template's color.\n3.  **Identify the Foreground Pattern:** Locate all pixels in the *input* grid that have the color Azure (8).\n4.  **Overlay the Pattern:** For each Azure (8) pixel found in the input grid at coordinates (row, column), place an Azure (8) pixel at the *same* coordinates (row, column) in the output canvas, provided these coordinates fall within the bounds of the output canvas.\n\"\"\"\n\ndef find_largest_solid_rectangle(grid):\n    \"\"\"\n    Finds the largest solid rectangle of a single non-white color in the grid.\n\n    Args:\n        grid (np.ndarray): The input grid.\n\n    Returns:\n        tuple: (color, (height, width)) of the largest rectangle, or (-1, (0, 0)) if none found.\n    \"\"\"\n    rows, cols = grid.shape\n    max_area = 0\n    best_color = -1\n    best_dims = (0, 0)\n    \n    # Iterate through all possible top-left corners\n    for r1 in range(rows):\n        for c1 in range(cols):\n            color = grid[r1, c1]\n            # Skip white background pixels\n            if color == 0:\n                continue\n\n            # Check rectangles expanding from this corner\n            max_possible_c2 = cols\n            for r2 in range(r1, rows):\n                 # Check if the starting color continues in this row\n                 if grid[r2, c1] != color:\n                     break # Cannot expand downwards anymore with this color\n                 \n                 for c2 in range(c1, max_possible_c2):\n                     # Check if the pixel maintains the color\n                     if grid[r2, c2] != color:\n                         # If the color breaks, this column is the max for subsequent rows starting from r1,c1\n                         max_possible_c2 = c2 \n                         break \n                         \n                     # Check if the rectangle formed so far is solid\n                     is_solid = True\n                     # Optimization: only need to check the new row/column being added if prior checks passed\n                     # Check the new column from r1 to r2\n                     for i in range(r1, r2 + 1):\n                          if grid[i, c2] != color:\n                              is_solid = False\n                              break\n                     if not is_solid:\n                          max_possible_c2 = c2 # Cannot expand further right with this color at this height\n                          break\n                     # Check the new row from c1 to c2 (already partially checked above)\n                     # This check might be redundant given the outer loops structure, but safer?\n                     # Re-evaluating logic - the inner loops ensure solidity as they expand.\n\n                     # Calculate area if solid\n                     height = r2 - r1 + 1\n                     width = c2 - c1 + 1\n                     area = height * width\n\n                     if area > max_area:\n                         max_area = area\n                         best_color = color\n                         best_dims = (height, width)\n                 # Need to handle the case where the inner loop completed without break\n                 # This means we reached max_possible_c2 = cols\n\n\n    # --- Alternative, potentially simpler approach ---\n    # Find unique non-white colors\n    unique_colors = np.unique(grid[grid != 0])\n    max_area_alt = 0\n    best_color_alt = -1\n    best_dims_alt = (0, 0)\n    \n    for color in unique_colors:\n        # Create a mask for the current color\n        mask = (grid == color)\n        \n        # Find largest rectangle in the boolean mask (standard algorithm)\n        # Using a histogram-based approach for finding the largest rectangle in a binary matrix\n        heights = np.zeros(cols, dtype=int)\n        for r in range(rows):\n            for c in range(cols):\n                heights[c] = heights[c] + 1 if mask[r, c] else 0\n            \n            # Calculate largest rectangle ending at this row using histogram method\n            stack = [-1]\n            for c, h in enumerate(heights):\n                while stack[-1] != -1 and heights[stack[-1]] >= h:\n                    height = heights[stack.pop()]\n                    width = c - stack[-1] - 1\n                    area = height * width\n                    if area > max_area_alt:\n                        max_area_alt = area\n                        best_color_alt = color\n                        # Dimensions are trickier here, need to store them with the area\n                        # This standard algorithm gives area, not explicit dims easily.\n                        # Let's stick to the first method which finds dimensions directly.\n                        \n            while stack[-1] != -1:\n                height = heights[stack.pop()]\n                width = cols - stack[-1] - 1\n                area = height * width\n                if area > max_area_alt:\n                    max_area_alt = area\n                    best_color_alt = color\n                    # Again, dims are hard to track directly this way.\n\n    # Reverting to the first, more direct (though potentially slower) approach\n    # Need to ensure the first approach correctly identifies the largest rectangle\n    # Let's refine the first approach slightly for clarity/correctness.\n\n    max_area_final = 0\n    best_color_final = -1\n    best_dims_final = (0, 0)\n\n    for r1 in range(rows):\n        for c1 in range(cols):\n            color = grid[r1, c1]\n            if color == 0:\n                continue\n            \n            # Max width possible for rows starting from r1\n            max_w = cols - c1 \n            for r2 in range(r1, rows):\n                # Check if the first column pixel still matches\n                if grid[r2, c1] != color:\n                    break # Cannot extend height further\n\n                # Check pixels in the current row r2 from c1 onwards\n                for c2 in range(c1, c1 + max_w):\n                    if grid[r2, c2] != color:\n                         max_w = c2 - c1 # Update max width possible for subsequent rows\n                         break\n                \n                # Now we know the rectangle is solid up to height (r2-r1+1) and width max_w\n                current_h = r2 - r1 + 1\n                current_w = max_w \n                area = current_h * current_w\n                \n                if area > max_area_final:\n                    max_area_final = area\n                    best_color_final = color\n                    best_dims_final = (current_h, current_w)\n\n                if max_w == 0: # Optimization: if width became 0, no point checking further rows\n                     break\n\n    return best_color_final, best_dims_final\n\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n    \"\"\"\n    grid_np = np.array(input_grid, dtype=int)\n    rows, cols = grid_np.shape\n\n    # 1. Identify the Background Template\n    bg_color, (output_height, output_width) = find_largest_solid_rectangle(grid_np)\n\n    if bg_color == -1 or output_height == 0 or output_width == 0:\n        # Handle cases where no suitable background is found (e.g., all white input)\n        # Based on examples, this shouldn't happen, but good practice.\n        # Return empty or based on specific error handling if needed.\n        # For now, let's assume a valid background is always found.\n        # If the task demands a specific output for failure, adjust here.\n        # Perhaps return the input grid or an empty grid? Let's assume valid input.\n         print(\"Warning: Could not find a valid background rectangle.\")\n         # Fallback to input dimensions and white background? Or fail?\n         # Based on ARC, valid inputs usually exist. Let's proceed assuming success.\n         # If needed, could return np.array([[]]).tolist()\n         pass # Continue assuming bg_color, output_height, output_width are valid\n\n\n    # 2. Create the Output Canvas\n    output_grid = np.full((output_height, output_width), bg_color, dtype=int)\n\n    # 3. Identify the Foreground Pattern (Azure pixels)\n    azure_pixels = np.argwhere(grid_np == 8) # Returns list of [row, col]\n\n    # 4. Overlay the Pattern\n    for r, c in azure_pixels:\n        # Check if the coordinate is within the bounds of the output grid\n        if r < output_height and c < output_width:\n            output_grid[r, c] = 8 # Set pixel to Azure\n\n    # Convert the final NumPy array back to a list of lists\n    return output_grid.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4591,
    "candidates_token_count": 2139,
    "total_token_count": 6730,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 113.979667,
  "retries": null
}