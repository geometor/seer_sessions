Task: Overlay pattern onto background

Input:
  - Contains two main regions separated by white space (0).
  - Upper_Region:
      - Contains geometric patterns or shapes.
      - Composed of multiple colors.
      - Always includes Azure (8) pixels.
      - May include Red (2), Blue (1), Green (3), Yellow (4), etc.
      - Location: Generally top portion of the grid.
  - Lower_Region:
      - Contains a large solid rectangle of a single primary color (e.g., Green (3), Blue (1), Yellow (4)).
      - Surrounded by a White (0) border.
      - Location: Generally bottom portion of the grid.

Output:
  - Dimensions: Match the dimensions of the solid colored rectangle in the input's Lower_Region (excluding the white border).
  - Background_Color: Matches the color of the solid rectangle in the input's Lower_Region.
  - Foreground_Pattern:
      - Consists only of Azure (8) pixels.
      - The positions of these Azure (8) pixels directly correspond to the positions of the Azure (8) pixels found in the input's Upper_Region.

Transformation:
  - Action_1: Identify the large, non-white, single-colored rectangle in the lower part of the input grid.
  - Action_2: Determine the color (let's call it `BackgroundColor`) and dimensions (Height x Width) of this rectangle.
  - Action_3: Create a new grid (the output grid) with dimensions Height x Width, filled entirely with `BackgroundColor`.
  - Action_4: Identify all pixels with the color Azure (8) in the upper part of the input grid.
  - Action_5: For each Azure (8) pixel found at coordinates (row, column) in the input's upper part, set the pixel at the same coordinates (row, column) in the output grid to Azure (8).

Relationships:
  - Output grid size and background color are determined by the Lower_Region rectangle.
  - Output grid foreground pattern (Azure pixels) is determined by the Azure pixels in the Upper_Region.
  - The relative coordinates of the Azure (8) pixels are preserved from the input's upper region to the output grid.
  - Non-Azure colors in the input's Upper_Region are discarded.
  - White (0) pixels act as delimiters but are not part of the final output structure itself.