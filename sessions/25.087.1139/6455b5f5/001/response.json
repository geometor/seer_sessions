{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on the following rules:\n    1. Red (2) pixels remain unchanged.\n    2. Identify connected regions (components) of white (0) pixels.\n    3. Determine which white pixels are 'border-reachable' by performing a flood fill (BFS)\n       starting from all white pixels on the grid's border, treating red pixels as barriers.\n    4. For each white component:\n       a. Check if it's adjacent (4-directionally) to any red pixel.\n       b. If not adjacent to red, it remains white (0).\n       c. If adjacent to red:\n          i. Check if any pixel in the component is 'border-reachable'.\n          ii. If border-reachable, fill the entire component with blue (1).\n          iii. If not border-reachable (enclosed by red), fill the entire component with azure (8).\n    \"\"\"\n    \n    # Convert input_list to numpy array for easier manipulation\n    input_grid_np = np.array(input_grid, dtype=int)\n    output_grid = input_grid_np.copy()\n    height, width = input_grid_np.shape\n\n    # Initialize arrays to track visited pixels during BFS and border reachability\n    visited_border = np.zeros_like(input_grid_np, dtype=bool)\n    border_reachable = np.zeros_like(input_grid_np, dtype=bool)\n    \n    # --- Step 1: Determine border-reachable white pixels ---\n    q = deque()\n    \n    # Add all white border pixels to the queue and mark them\n    for r in range(height):\n        for c in [0, width - 1]: # Left and Right borders\n            if input_grid_np[r, c] == 0 and not visited_border[r, c]:\n                q.append((r, c))\n                visited_border[r, c] = True\n                border_reachable[r, c] = True\n    for c in range(width):\n        for r in [0, height - 1]: # Top and Bottom borders (avoid double-adding corners)\n             if input_grid_np[r, c] == 0 and not visited_border[r, c]:\n                q.append((r, c))\n                visited_border[r, c] = True\n                border_reachable[r, c] = True\n\n    # Perform BFS for border reachability\n    while q:\n        r, c = q.popleft()\n        \n        # Check 4-directional neighbors\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n            \n            # Check bounds, if white, and not visited\n            if 0 <= nr < height and 0 <= nc < width and \\\n               input_grid_np[nr, nc] == 0 and not visited_border[nr, nc]:\n                visited_border[nr, nc] = True\n                border_reachable[nr, nc] = True\n                q.append((nr, nc))\n\n    # --- Step 2: Identify white components, check adjacency & reachability, and fill ---\n    visited_component = np.zeros_like(input_grid_np, dtype=bool)\n    \n    for r in range(height):\n        for c in range(width):\n            # If it's a white pixel and hasn't been visited as part of a component yet\n            if input_grid_np[r, c] == 0 and not visited_component[r, c]:\n                \n                component_pixels = []\n                is_adj_to_red = False\n                is_reachable_from_border = False\n                \n                comp_q = deque([(r, c)])\n                visited_component[r, c] = True\n                \n                # BFS to find the current white component and its properties\n                while comp_q:\n                    cr, cc = comp_q.popleft()\n                    component_pixels.append((cr, cc))\n                    \n                    # Check if this specific pixel is border-reachable\n                    if border_reachable[cr, cc]:\n                        is_reachable_from_border = True\n                        \n                    # Check neighbors for adjacency to red and other white pixels\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = cr + dr, cc + dc\n                        \n                        if 0 <= nr < height and 0 <= nc < width:\n                            # Check for adjacent red pixel\n                            if input_grid_np[nr, nc] == 2:\n                                is_adj_to_red = True\n                                \n                            # Check for adjacent white pixel for component expansion\n                            elif input_grid_np[nr, nc] == 0 and not visited_component[nr, nc]:\n                                visited_component[nr, nc] = True\n                                comp_q.append((nr, nc))\n                \n                # --- Step 3: Fill the component based on its properties ---\n                if is_adj_to_red:\n                    fill_color = 1 if is_reachable_from_border else 8\n                    for pr, pc in component_pixels:\n                        output_grid[pr, pc] = fill_color\n                # Else: component is not adjacent to red, leave it white (already is in output_grid)\n\n    # Convert back to list of lists for the expected output format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5737,
    "candidates_token_count": 1285,
    "total_token_count": 7022,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 22.16374,
  "retries": null
}