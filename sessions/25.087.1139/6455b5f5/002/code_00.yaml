task_name: d90796e8
grid_properties:
  - All examples have rectangular grids of varying sizes (up to 18x13).
  - Input grids contain only white (0) and red (2) pixels.
  - Output grids contain white (0), red (2), blue (1), and azure (8) pixels.

object_definitions:
  - color: red (2)
    description: Forms static barriers or walls within the grid. Red pixels in the input remain red in the output.
    attributes: [static]
  - color: white (0)
    description: Represents empty space or areas that can potentially change color.
    attributes: [mutable, background]
  - color: blue (1)
    description: One of the output colors resulting from transforming white pixels.
    attributes: [derived]
  - color: azure (8)
    description: Another output color resulting from transforming white pixels.
    attributes: [derived]

transformations:
  - type: color_change
    input_color: white (0)
    output_colors: [white (0), blue (1), azure (8)]
    conditions: Governed by the relationship of white pixel regions to red pixels and the grid border.

observations:
  - Red pixels are invariant; their positions and color remain unchanged from input to output.
  - White pixels are the only ones that change color.
  - The transformation logic involves identifying connected components (regions) of white pixels.
  - The fate of a white component depends on two factors:
      1. Adjacency: Whether the component touches (shares an edge, 4-directionally) any red pixel.
      2. Border Reachability: Whether the component can be reached by a path of white pixels starting from any white pixel on the grid's border, without crossing any red pixels.
  - Rule Derivations from Analysis:
      - If a white component is NOT adjacent to any red pixel, it remains white (0). (This was missed/incorrectly implemented previously, causing 292 pixel errors).
      - If a white component IS adjacent to at least one red pixel AND it IS border-reachable, it becomes blue (1).
      - If a white component IS adjacent to at least one red pixel AND it is NOT border-reachable (i.e., enclosed by red pixels or red pixels and the border itself acting as a barrier), it becomes azure (8). (There were 28 errors related to misclassifying azure regions).
  - Implementation Detail: Border reachability should be determined via a flood fill (like BFS) originating from *all* white border pixels simultaneously, treating red pixels as impassable walls.