{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransforms an input grid based on the locations of non-white pixels (source points).\n\n1. Identify all non-white pixels (source points) in the input grid, storing their \n   row, column, and color.\n2. Create an output grid of the same dimensions as the input, initialized to white (0).\n3. For each source point, fill its corresponding row and column in the output grid \n   with the source point's color. This effectively draws horizontal and vertical lines.\n4. Iterate through all unique pairs of distinct source points. For each pair \n   (point1 at (r1, c1), point2 at (r2, c2)), mark the intersection pixels at \n   (r1, c2) and (r2, c1) with red (2).\n5. Finally, ensure that the original locations of the source points in the output \n   grid retain their original colors, correcting any overwrites from the line drawing \n   or intersection marking steps.\n\"\"\"\n\ndef find_source_points(grid):\n    \"\"\"Finds all non-white pixels and returns their coordinates and color.\"\"\"\n    points = []\n    height, width = grid.shape\n    for r in range(height):\n        for c in range(width):\n            color = grid[r, c]\n            if color != 0:\n                points.append({'r': r, 'c': c, 'color': color})\n    return points\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n    \"\"\"\n    input_grid_np = np.array(input_grid)\n    height, width = input_grid_np.shape\n\n    # 1. Initialize output_grid with white (0)\n    output_grid = np.zeros_like(input_grid_np)\n\n    # 2. Find source points\n    source_points = find_source_points(input_grid_np)\n\n    # 3. Draw lines for each source point\n    for point in source_points:\n        r, c, clr = point['r'], point['c'], point['color']\n        # Fill row r with color clr\n        output_grid[r, :] = clr\n        # Fill column c with color clr\n        output_grid[:, c] = clr\n\n    # 4. Mark intersections with red (2)\n    num_points = len(source_points)\n    for i in range(num_points):\n        for j in range(i + 1, num_points): # Iterate through unique pairs\n            p1 = source_points[i]\n            p2 = source_points[j]\n            \n            # Intersection point 1: row of p1, column of p2\n            output_grid[p1['r'], p2['c']] = 2\n            # Intersection point 2: row of p2, column of p1\n            output_grid[p2['r'], p1['c']] = 2\n\n    # 5. Restore original source point colors\n    for point in source_points:\n        r, c, clr = point['r'], point['c'], point['color']\n        output_grid[r, c] = clr\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4539,
    "candidates_token_count": 746,
    "total_token_count": 5285,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.544026,
  "retries": null
}