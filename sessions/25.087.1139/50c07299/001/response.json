{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransformation Rule:\n1. Initialize an output grid with the same dimensions as the input, filled with orange (7).\n2. Find all red (2) pixels in the input grid. These form a diagonal segment (top-right to bottom-left).\n3. Determine the length (L) of the input segment (number of red pixels).\n4. Find the coordinates (r_in, c_in) of the top-rightmost red pixel (minimum row index).\n5. Calculate the length of the output segment: L_out = L + 1.\n6. Calculate the coordinates (r_out, c_out) for the top-rightmost pixel of the output segment:\n   - r_out = r_in - (L + 1)\n   - c_out = c_in + min(L + 1, 3)\n7. Draw the output segment onto the output grid: Place L_out red pixels starting at (r_out, c_out) and extending diagonally down-left. The coordinates are (r_out + i, c_out - i) for i from 0 to L_out - 1.\n8. Return the output grid.\n\"\"\"\n\ndef find_red_pixels(grid):\n    \"\"\"Finds the coordinates of all red (2) pixels.\"\"\"\n    red_pixels = []\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] == 2:\n                red_pixels.append((r, c))\n    return red_pixels\n\ndef get_segment_properties(red_pixels):\n    \"\"\"Determines the length and top-right pixel of the segment.\"\"\"\n    if not red_pixels:\n        return 0, (-1, -1) # No segment found\n\n    length = len(red_pixels)\n    # Sort by row (ascending), then column (descending) to find top-right\n    # For a top-right to bottom-left diagonal, the min row index is sufficient\n    top_right_pixel = min(red_pixels, key=lambda p: p[0])\n\n    return length, top_right_pixel\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n    \"\"\"\n    input_np = np.array(input_grid, dtype=int)\n    rows, cols = input_np.shape\n    background_color = 7\n    foreground_color = 2\n\n    # 1. Initialize output grid\n    output_grid = np.full_like(input_np, background_color)\n\n    # 2. Find red pixels\n    red_pixels = find_red_pixels(input_np)\n\n    # 3. & 4. Determine input segment properties\n    length_in, (r_in, c_in) = get_segment_properties(red_pixels)\n\n    if length_in == 0:\n        # Handle case with no red pixels if necessary, though examples always have them.\n        # For now, just return the background grid.\n        return output_grid.tolist()\n\n    # 5. Calculate output segment length\n    length_out = length_in + 1\n\n    # 6. Calculate output segment top-right position\n    # Note: The logic derived was r_out = r_in - (L + 1), which is r_in - length_out\n    # And c_out = c_in + min(L + 1, 3), which is c_in + min(length_out, 3)\n    r_out = r_in - length_out\n    c_out = c_in + min(length_out, 3)\n\n    # 7. Draw the output segment\n    for i in range(length_out):\n        draw_r = r_out + i\n        draw_c = c_out - i\n        # Check boundaries before drawing\n        if 0 <= draw_r < rows and 0 <= draw_c < cols:\n            output_grid[draw_r, draw_c] = foreground_color\n        else:\n            # Optional: Log or handle pixels outside bounds if needed\n            # print(f\"Warning: Calculated pixel ({draw_r}, {draw_c}) is outside grid bounds.\")\n            pass\n\n    # 8. Return the output grid\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5414,
    "candidates_token_count": 1000,
    "total_token_count": 6414,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.387829,
  "retries": null
}