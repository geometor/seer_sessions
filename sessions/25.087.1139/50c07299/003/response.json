{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransformation Rule:\n1. Find the diagonal segment of red (2) pixels in the input grid. This segment runs from top-right to bottom-left.\n2. Determine the length (L_in) of the input segment.\n3. Identify the coordinates (r_in, c_in) of the top-rightmost pixel of the input segment (the pixel with the minimum row index).\n4. Calculate the length of the output segment: L_out = L_in + 1.\n5. Calculate the coordinates (r_out, c_out) for the top-rightmost pixel of the output segment using the following formulas:\n   - r_out = r_in - L_out\n   - c_out = c_in + min(L_out, 3)\n6. Initialize an output grid with the same dimensions as the input grid, filled entirely with orange (7).\n7. Draw the output segment onto the output grid: Starting from the calculated (r_out, c_out), place L_out red (2) pixels diagonally down and to the left. That is, color the pixels at (r_out + i, c_out - i) red for i from 0 to L_out - 1, ensuring these coordinates are within the grid boundaries.\n8. Return the final output grid.\n\"\"\"\n\ndef find_colored_pixels(grid, color):\n    \"\"\"Finds the coordinates of all pixels of a specific color.\"\"\"\n    pixels = []\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == color:\n                pixels.append((r, c))\n    return pixels\n\ndef get_segment_properties(pixels):\n    \"\"\"Determines the length and top-right pixel of the segment.\"\"\"\n    if not pixels:\n        return 0, (-1, -1) # No segment found\n\n    length = len(pixels)\n    # For a top-right to bottom-left diagonal, the pixel with the minimum row index\n    # is the top-rightmost one.\n    top_right_pixel = min(pixels, key=lambda p: p[0])\n\n    return length, top_right_pixel\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n    \"\"\"\n    input_np = np.array(input_grid, dtype=int)\n    rows, cols = input_np.shape\n    background_color = 7\n    foreground_color = 2\n\n    # 1. Find red pixels (input segment)\n    red_pixels = find_colored_pixels(input_np, foreground_color)\n\n    # 2. & 3. Determine input segment properties\n    length_in, (r_in, c_in) = get_segment_properties(red_pixels)\n\n    # Handle case where no red segment is found (though unlikely based on examples)\n    if length_in == 0:\n        return np.full_like(input_np, background_color).tolist()\n\n    # 4. Calculate output segment length\n    length_out = length_in + 1\n\n    # 5. Calculate output segment top-right position\n    r_out = r_in - length_out\n    c_out = c_in + min(length_out, 3)\n\n    # 6. Initialize output grid\n    output_grid = np.full_like(input_np, background_color)\n\n    # 7. Draw the output segment\n    for i in range(length_out):\n        draw_r = r_out + i\n        draw_c = c_out - i\n        # Check boundaries before drawing\n        if 0 <= draw_r < rows and 0 <= draw_c < cols:\n            output_grid[draw_r, draw_c] = foreground_color\n\n    # 8. Return the output grid\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6851,
    "candidates_token_count": 900,
    "total_token_count": 7751,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 35.021606,
  "retries": null
}