{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nIdentify each distinct non-background colored object in the input grid.\nFor each object, calculate its height (the number of rows it spans).\nCreate an output grid initialized with the background color (white, 0).\nMove each object vertically upwards by a number of rows equal to its calculated height.\nDraw the moved objects onto the output grid.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by moving each colored object upwards.\n    \n    The amount each object moves upwards is equal to its height (number of rows it spans).\n    \n    Args:\n        input_grid (list of list of int): The input grid representing colors.\n        \n    Returns:\n        list of list of int: The transformed grid.\n    \"\"\"\n    # Convert input list of lists to numpy array for easier manipulation\n    input_array = np.array(input_grid, dtype=int)\n    rows, cols = input_array.shape\n    \n    # Initialize output grid with background color (0)\n    # Using the same dimensions and data type as the input\n    output_array = np.zeros_like(input_array)\n    \n    # Find unique non-background colors present in the input grid\n    # Exclude 0 (background) from the unique values\n    unique_colors = np.unique(input_array[input_array != 0])\n    \n    # Process each unique color found\n    for color in unique_colors:\n        # Find all coordinates (pixels) where the input grid has the current color\n        coords = np.argwhere(input_array == color)\n        \n        # Proceed only if coordinates were found for this color\n        if coords.size > 0:\n            # Extract the row indices from the coordinates\n            current_rows = coords[:, 0]\n            # Extract the column indices from the coordinates\n            current_cols = coords[:, 1]\n            \n            # Determine the vertical span (height) of the object\n            min_row = np.min(current_rows)\n            max_row = np.max(current_rows)\n            height = max_row - min_row + 1\n            \n            # The vertical shift amount is equal to the object's height\n            # Positive shift means moving upwards (decreasing row index)\n            shift = height\n            \n            # Calculate the new row indices after applying the upward shift\n            new_rows = current_rows - shift\n            \n            # --- Boundary Check (Optional based on ARC constraints, but safer) ---\n            # Identify indices where the new row position is still within the grid (>= 0)\n            # Assumes objects do not wrap around or go out of bounds based on examples\n            # valid_indices = new_rows >= 0\n            # Filter coordinates to keep only those that remain within grid bounds\n            # valid_new_rows = new_rows[valid_indices]\n            # valid_cols = current_cols[valid_indices]\n            # ---------------------------------------------------------------------\n            \n            # Place the pixels of the moved object onto the output grid\n            # Uses advanced indexing: output_array[row_indices, col_indices] = value\n            # Directly use new_rows and current_cols, assuming they stay within bounds as per examples\n            # If boundary checks were enabled, use valid_new_rows and valid_cols instead.\n            output_array[new_rows, current_cols] = color\n\n    # Convert the resulting numpy array back to a list of lists format\n    output_grid = output_array.tolist()\n    \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3806,
    "candidates_token_count": 804,
    "total_token_count": 4610,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 46.805714,
  "retries": null
}