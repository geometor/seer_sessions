task_description: Extract all 4x4 hollow squares from the input grid and arrange them sequentially in the output grid.
background_color: 0 (white)
input_grid:
  description: A 2D grid containing various colored shapes, including potential 4x4 hollow squares, on a white background.
  objects:
    - object: hollow_square
      definition: A 4x4 area where the outer 1-pixel border consists of a single non-white color, and the inner 2x2 area is white (color 0).
      properties:
        - size: [4, 4]
        - border_color: Any color from 1 to 9.
        - center_color: 0 (white)
        - location: Defined by the top-left coordinate (row, column) in the input grid.
    - object: other_shapes
      definition: Any contiguous block of non-white color that does not form a 4x4 hollow square.
      properties:
        - color: Any color from 1 to 9.
        - shape: Variable.
      relevance: Ignored in the transformation.
transformation:
  action: find_and_arrange_hollow_squares
  steps:
    - 1. Scan the input grid to identify all instances of the 'hollow_square' object. Record the 4x4 pixel data and the top-left (row, column) coordinate for each identified square.
    - 2. If no hollow squares are found, the process terminates, resulting in a minimal default output (e.g., a 1x1 white grid).
    - 3. If one or more hollow squares are found:
        - a. Calculate the overall spatial extent of the squares: Determine the minimum and maximum row indices (`min_r`, `max_r`) and column indices (`min_c`, `max_c`) among the top-left coordinates of all found squares.
        - b. Calculate the row span: `row_span = max_r - min_r`.
        - c. Calculate the column span: `col_span = max_c - min_c`.
        - d. Sort the identified hollow squares based on their top-left coordinates, primarily by column index, and secondarily by row index.
        - e. Determine the arrangement direction: If `row_span >= col_span`, the arrangement is Vertical. Otherwise (`col_span > row_span`), the arrangement is Horizontal.
    - 4. Construct the output grid:
        - If the arrangement is Vertical: Create an output grid with height `4 * number_of_squares` and width `4`. Place the sorted squares one below the other in the determined order.
        - If the arrangement is Horizontal: Create an output grid with height `4` and width `4 * number_of_squares`. Place the sorted squares side-by-side from left to right in the determined order.
output_grid:
  description: A grid containing the identified hollow squares arranged sequentially.
  properties:
    - height: 4 (if Horizontal arrangement) or 4 * number_of_squares (if Vertical arrangement).
    - width: 4 * number_of_squares (if Horizontal arrangement) or 4 (if Vertical arrangement).
    - content: Concatenated or stacked 4x4 hollow squares from the input, in the specified sorted order.
    - edge_case: If no squares found in input, output might be a 1x1 white grid `[[0]]`.