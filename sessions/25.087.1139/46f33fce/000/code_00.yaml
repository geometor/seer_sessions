task_context:
  grid_dimensionality: 2D
  color_palette: 0-9 (white background with sparse colored pixels)

input_elements:
  - object: Input Grid
    properties:
      - type: 2D array
      - size: variable (e.g., 10x10 in examples)
      - content: contains background pixels and isolated colored pixels
  - object: Background Pixel
    properties:
      - color: 0 (white)
  - object: Colored Pixel
    properties:
      - color: 1-9 (non-white)
      - size: 1x1
      - position: (row, column) coordinates (0-based index)
      - relationship: isolated from other colored pixels

output_elements:
  - object: Output Grid
    properties:
      - type: 2D array
      - size: scaled version of Input Grid (2*height, 2*width)
      - content: contains background pixels and expanded colored blocks
  - object: Background Pixel
    properties:
      - color: 0 (white)
  - object: Colored Block
    properties:
      - color: 1-9 (matches the color of the corresponding input pixel)
      - size: 4x4
      - position: top-left (Row, Column) coordinates (0-based index)
      - relationship: derived from a single Colored Pixel in the input

transformation:
  actions:
    - name: Scaling
      input: Input Grid
      output: Output Grid
      details: Output grid dimensions are double the input grid dimensions (height * 2, width * 2).
    - name: Mapping and Expansion
      input: Colored Pixel at (r, c) with color C
      output: Colored Block of color C
      details: Each non-white input pixel is mapped to a 4x4 block in the output.
    - name: Positioning
      input: Input pixel position (r, c)
      output: Output block top-left position (R, C)
      details: The top-left corner (R, C) of the 4x4 output block is determined by the input pixel position (r, c) using the formula R = 2*r, C = 2*c.
    - name: Filling
      input: Output Grid, Colored Blocks
      output: Final Output Grid
      details: Initialize the output grid with the background color (white). Place the 4x4 colored blocks at their calculated positions.

relationships:
  - input_pixel_to_output_block: Each non-white pixel in the input corresponds one-to-one with a 4x4 block of the same color in the output.
  - coordinate_mapping: The top-left coordinate of the output block `(R, C)` is derived from the input pixel coordinate `(r, c)` by `(R, C) = (2*r, 2*c)`.