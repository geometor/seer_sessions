{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentifies the unique object in the input grid containing yellow (4) pixels. \nExtracts this object into a new grid corresponding to its bounding box. \nReplaces the original background color (azure, 8) within the bounding box with white (0) in the output grid. \nPreserves all other colors of the selected object.\n\"\"\"\n\ndef get_bounding_box(coords):\n    \"\"\"Calculates the bounding box for a set of coordinates.\"\"\"\n    if not coords:\n        return 0, 0, 0, 0\n    min_row = min(r for r, c in coords)\n    max_row = max(r for r, c in coords)\n    min_col = min(c for r, c in coords)\n    max_col = max(c for r, c in coords)\n    return min_row, max_row, min_col, max_col\n\ndef find_connected_object(grid, start_coords, background_color=8):\n    \"\"\"Finds all connected non-background pixels starting from any of the start_coords using BFS.\"\"\"\n    rows, cols = grid.shape\n    visited = set()\n    object_coords = set()\n    q = deque()\n\n    # Initialize queue with valid start coordinates that are not background\n    for r, c in start_coords:\n         if 0 <= r < rows and 0 <= c < cols and grid[r, c] != background_color:\n             q.append((r, c))\n             visited.add((r,c))\n             object_coords.add((r,c))\n             break # Start BFS from the first valid yellow pixel found\n\n    while q:\n        r, c = q.popleft()\n\n        # Explore neighbors (4-directional)\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n            neighbor_coord = (nr, nc)\n\n            if 0 <= nr < rows and 0 <= nc < cols and \\\n               neighbor_coord not in visited and \\\n               grid[nr, nc] != background_color:\n                visited.add(neighbor_coord)\n                object_coords.add(neighbor_coord)\n                q.append(neighbor_coord)\n\n    return object_coords\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by isolating the object containing yellow pixels.\n\n    Args:\n        input_grid: A list of lists representing the input grid.\n\n    Returns:\n        A list of lists representing the transformed output grid.\n    \"\"\"\n    input_array = np.array(input_grid, dtype=int)\n    rows, cols = input_array.shape\n    background_color = 8\n    target_color = 4 # yellow\n    output_background_color = 0 # white\n\n    # 1. Find all yellow pixels\n    yellow_pixels = []\n    for r in range(rows):\n        for c in range(cols):\n            if input_array[r, c] == target_color:\n                yellow_pixels.append((r, c))\n\n    # Handle case where no yellow pixel is found (though not expected based on examples)\n    if not yellow_pixels:\n        # Return empty grid or handle as appropriate for the task constraints\n        # Based on examples, we expect at least one yellow pixel.\n        # If this case needs specific handling, add it here.\n        # For now, assume it won't happen or return an empty grid.\n         print(\"Warning: No yellow pixel found in input.\")\n         return [] # Or perhaps return the input unchanged, or a specific error indicator\n\n    # 2. Identify the full object connected to the yellow pixel(s)\n    # Start flood fill from the first yellow pixel found\n    selected_object_coords = find_connected_object(input_array, yellow_pixels, background_color)\n\n    if not selected_object_coords:\n         # This shouldn't happen if yellow_pixels is not empty and yellow isn't the background\n         print(\"Error: Could not find connected object for yellow pixels.\")\n         return []\n\n    # 3. Determine the bounding box of the selected object\n    min_row, max_row, min_col, max_col = get_bounding_box(selected_object_coords)\n\n    # 4. Calculate output grid dimensions\n    output_height = max_row - min_row + 1\n    output_width = max_col - min_col + 1\n\n    # 5. Create the output grid, initialized with the output background color\n    output_array = np.full((output_height, output_width), output_background_color, dtype=int)\n\n    # 6. Populate the output grid\n    # Iterate through the bounding box area in the *input* grid\n    for r in range(min_row, max_row + 1):\n        for c in range(min_col, max_col + 1):\n            # Check if the current coordinate belongs to the selected object\n            if (r, c) in selected_object_coords:\n                 # Calculate corresponding coordinates in the output grid\n                 out_r = r - min_row\n                 out_c = c - min_col\n                 # Copy the original color from the input grid\n                 output_array[out_r, out_c] = input_array[r, c]\n            # else: the output grid remains the output_background_color (white/0)\n\n    # Convert numpy array back to list of lists for the final output\n    output_grid = output_array.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4930,
    "candidates_token_count": 1294,
    "total_token_count": 6224,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 21.467729,
  "retries": null
}