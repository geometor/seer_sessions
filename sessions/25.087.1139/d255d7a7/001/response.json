{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nIdentifies the cluster of non-background (non-orange/7) pixels in the input grid.\nDetermines the primary edge this cluster is located against (bottom, top, right, or left, prioritized in that order).\nMoves the entire cluster (preserving its internal structure) to the corresponding opposite edge of the grid.\nThe output grid is initialized with the background color, and then the moved cluster's pixels are placed onto it.\n\nExample:\n- If the cluster is primarily against the left edge, it's moved to the right edge.\n- If the cluster is primarily against the bottom edge, it's moved to the top edge.\n\nThe cluster is defined by all pixels that are not orange (7).\nThe movement is calculated based on the bounding box of the cluster.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Moves a cluster of non-background pixels from one edge to the opposite edge.\n\n    Args:\n        input_grid (list of list of int): The input grid.\n\n    Returns:\n        list of list of int: The transformed grid.\n    \"\"\"\n    input_arr = np.array(input_grid, dtype=int)\n    H, W = input_arr.shape\n    background_color = 7\n\n    # Find coordinates of all non-background pixels\n    object_pixels_coords = list(zip(*np.where(input_arr != background_color)))\n\n    # If there are no object pixels, return the original grid\n    if not object_pixels_coords:\n        return input_grid\n\n    # Determine the bounding box of the object pixels\n    rows, cols = zip(*object_pixels_coords)\n    min_r, max_r = min(rows), max(rows)\n    min_c, max_c = min(cols), max(cols)\n\n    # Determine edge affiliation\n    is_left = (min_c == 0)\n    is_right = (max_c == W - 1)\n    is_top = (min_r == 0)\n    is_bottom = (max_r == H - 1)\n\n    # Calculate the translation vector (dr, dc) based on edge priority: Bottom > Top > Right > Left\n    dr, dc = 0, 0\n    if is_bottom and not is_top:\n        # Move to top edge\n        dr = 0 - min_r  # Target min_r is 0\n    elif is_top and not is_bottom:\n        # Move to bottom edge\n        dr = (H - 1) - max_r # Target max_r is H - 1\n    elif is_right and not is_left:\n        # Move to left edge\n        dc = 0 - min_c  # Target min_c is 0\n    elif is_left and not is_right:\n        # Move to right edge\n        dc = (W - 1) - max_c # Target max_c is W - 1\n    # else: handles cases touching opposite sides, fully contained, or corners where priority doesn't select one edge.\n    # In these cases, dr, dc remain 0, effectively no move according to this logic.\n\n    # Initialize the output grid with the background color\n    output_arr = np.full((H, W), background_color, dtype=int)\n\n    # Copy the object pixels to their new locations\n    for r, c in object_pixels_coords:\n        color = input_arr[r, c]\n        nr, nc = r + dr, c + dc\n\n        # Ensure the new coordinates are within the grid bounds\n        if 0 <= nr < H and 0 <= nc < W:\n            output_arr[nr, nc] = color\n\n    # Convert back to list of lists for the expected output format\n    return output_arr.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4471,
    "candidates_token_count": 866,
    "total_token_count": 5337,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 48.939841,
  "retries": null
}