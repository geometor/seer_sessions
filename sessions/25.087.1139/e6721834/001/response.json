{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef get_most_common_color(grid_part):\n    \"\"\"Finds the most common color in a grid or subgrid.\"\"\"\n    if grid_part.size == 0:\n        return -1 # Or handle appropriately, maybe raise error\n    colors, counts = np.unique(grid_part, return_counts=True)\n    return colors[np.argmax(counts)]\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Identifies two distinct regions in the input grid based on background color.\n    One region (Source) has a background of gray (6) or azure (8).\n    The other region (Target) has a different background color.\n    The output grid has the dimensions and background color of the Target Region,\n    with the non-background shapes from the Source Region overlaid onto it\n    at their original relative positions.\n    \"\"\"\n    input_grid = np.array(input_grid)\n    height, width = input_grid.shape\n\n    region1 = None\n    region2 = None\n    bg1 = -1\n    bg2 = -1\n    output_shape = None\n    is_vertical_split = False\n\n    # Check for vertical split\n    # Ensure width > 1 before attempting split\n    if width > 1:\n        mid_w = width // 2\n        # Check if width is even and if the regions actually span half the width\n        # This handles cases like 1x2 grids correctly.\n        if width % 2 == 0:\n            part1 = input_grid[:, :mid_w]\n            part2 = input_grid[:, mid_w:]\n            bg1_candidate = get_most_common_color(part1)\n            bg2_candidate = get_most_common_color(part2)\n            # Check if backgrounds are different and define the split if so\n            if bg1_candidate != bg2_candidate:\n                 region1 = part1\n                 region2 = part2\n                 bg1 = bg1_candidate\n                 bg2 = bg2_candidate\n                 output_shape = region1.shape # or region2.shape, they are same\n                 is_vertical_split = True\n\n\n    # If not a vertical split, check for horizontal split\n    # Ensure height > 1 before attempting split\n    if region1 is None and height > 1:\n        mid_h = height // 2\n        # Ensure height is even and check regions\n        if height % 2 == 0:\n            part1 = input_grid[:mid_h, :]\n            part2 = input_grid[mid_h:, :]\n            bg1_candidate = get_most_common_color(part1)\n            bg2_candidate = get_most_common_color(part2)\n            # Check if backgrounds are different and define the split if so\n            if bg1_candidate != bg2_candidate:\n                region1 = part1\n                region2 = part2\n                bg1 = bg1_candidate\n                bg2 = bg2_candidate\n                output_shape = region1.shape # or region2.shape, they are same\n                is_vertical_split = False # It's horizontal\n\n    # If no split identified (e.g., 1x1 grid or uniform grid), return input?\n    # Based on examples, a split should always be identifiable.\n    if region1 is None:\n        # This case shouldn't happen based on the training examples provided.\n        # If it could, we'd need a rule for it. Let's assume a split is always found.\n        # Maybe raise an error or return the input unchanged if necessary.\n        print(\"Warning: Could not determine split.\")\n        return input_grid # Placeholder for undefined behavior\n\n    # Identify Source (6 or 8 background) and Target regions\n    source_region = None\n    target_region = None\n    source_bg = -1\n    target_bg = -1\n\n    if bg1 in [6, 8]:\n        source_region = region1\n        source_bg = bg1\n        target_region = region2\n        target_bg = bg2\n    elif bg2 in [6, 8]:\n        source_region = region2\n        source_bg = bg2\n        target_region = region1\n        target_bg = bg1\n    else:\n        # This case also shouldn't happen based on examples.\n        print(\"Warning: Could not identify source region (background 6 or 8).\")\n        return input_grid # Placeholder\n\n    # Create the output grid filled with the target background color\n    output_grid = np.full(output_shape, target_bg, dtype=int)\n\n    # Iterate through the source region and copy non-background pixels (shapes)\n    r_max, c_max = source_region.shape\n    for r in range(r_max):\n        for c in range(c_max):\n            pixel_color = source_region[r, c]\n            # If the pixel color is not the source background color, it's part of a shape\n            if pixel_color != source_bg:\n                # Copy the shape pixel to the same relative position in the output grid\n                output_grid[r, c] = pixel_color\n\n    return output_grid.tolist() # Return as list of lists per spec\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4649,
    "candidates_token_count": 1219,
    "total_token_count": 5868,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 20.230679,
  "retries": null
}