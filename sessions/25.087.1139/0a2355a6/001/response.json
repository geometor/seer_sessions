{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentify all distinct contiguous objects composed of azure (8) pixels in the input grid.\nSort these objects based on their top-most, left-most pixel (row-major order).\nDetermine a specific color sequence based on the total number (N) of objects found:\n- If N = 3, the sequence is [Blue(1), Blue(1), Green(3)].\n- If N = 4, the sequence is [Red(2), Blue(1), Green(3), Blue(1)].\n- If N = 5, the sequence is [Yellow(4), Yellow(4), Green(3), Red(2), Blue(1)].\nReplace the azure (8) pixels of the k-th sorted object with the k-th color from the determined sequence.\nKeep the background white (0) pixels unchanged.\n\"\"\"\n\ndef find_objects(grid, color):\n    \"\"\"\n    Finds all contiguous objects of a specific color in the grid.\n\n    Args:\n        grid (np.array): The input grid.\n        color (int): The color of the objects to find.\n\n    Returns:\n        list: A list of objects, where each object is a list of (row, col) tuples.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == color and not visited[r, c]:\n                current_object = []\n                q = deque([(r, c)])\n                visited[r, c] = True\n                while q:\n                    row, col = q.popleft()\n                    current_object.append((row, col))\n                    # Check neighbors (4-connectivity: up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] == color and not visited[nr, nc]:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n                if current_object:\n                    objects.append(current_object)\n    return objects\n\ndef get_top_left(obj_coords):\n    \"\"\"\n    Finds the top-most, left-most coordinate of an object.\n\n    Args:\n        obj_coords (list): A list of (row, col) tuples representing the object.\n\n    Returns:\n        tuple: The (row, col) of the top-left pixel.\n    \"\"\"\n    min_row = min(r for r, c in obj_coords)\n    min_col = min(c for r, c in obj_coords if r == min_row)\n    return (min_row, min_col)\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by finding azure objects, sorting them,\n    and recoloring them based on the total count.\n\n    Args:\n        input_grid (list): A list of lists representing the input grid.\n\n    Returns:\n        list: A list of lists representing the transformed output grid.\n    \"\"\"\n    # Convert input to numpy array for easier processing\n    grid = np.array(input_grid, dtype=int)\n    output_grid = grid.copy() # Start with a copy\n\n    # Define the target color (azure)\n    target_color = 8\n\n    # 1. Identify all distinct contiguous azure objects\n    objects = find_objects(grid, target_color)\n    num_objects = len(objects)\n\n    # If no objects found, return the original grid\n    if num_objects == 0:\n        return input_grid # Or output_grid.tolist()\n\n    # 2. & 3. Determine top-left coordinate for each object and sort them\n    object_data = []\n    for obj in objects:\n        top_left = get_top_left(obj)\n        object_data.append({'coords': obj, 'top_left': top_left})\n\n    # Sort by row, then column\n    sorted_objects = sorted(object_data, key=lambda x: (x['top_left'][0], x['top_left'][1]))\n\n    # 4. Determine the color sequence based on N\n    color_map = {\n        1: 1, # Blue\n        2: 2, # Red\n        3: 3, # Green\n        4: 4, # Yellow\n    }\n\n    color_sequence = []\n    if num_objects == 3:\n        # [Blue, Blue, Green]\n        color_sequence = [color_map[1], color_map[1], color_map[3]]\n    elif num_objects == 4:\n        # [Red, Blue, Green, Blue]\n        color_sequence = [color_map[2], color_map[1], color_map[3], color_map[1]]\n    elif num_objects == 5:\n        # [Yellow, Yellow, Green, Red, Blue]\n        color_sequence = [color_map[4], color_map[4], color_map[3], color_map[2], color_map[1]]\n    else:\n        # Handle unexpected number of objects - return original grid?\n        # Based on the examples, only 3, 4, 5 are expected.\n        # Let's return the original grid if N is not 3, 4, or 5.\n        print(f\"Warning: Unexpected number of objects ({num_objects}). Returning original grid.\")\n        return input_grid\n\n    # 5. & 6. Recolor the objects in the output grid\n    for i, obj_data in enumerate(sorted_objects):\n        color_to_apply = color_sequence[i]\n        for r, c in obj_data['coords']:\n            output_grid[r, c] = color_to_apply\n\n    # 7. Background pixels (0) are already preserved from the copy.\n\n    # 8. Return the final grid as a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5004,
    "candidates_token_count": 1435,
    "total_token_count": 6439,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 17.608389,
  "retries": null
}