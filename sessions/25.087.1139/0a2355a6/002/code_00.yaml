task_description: Recolor azure objects based on their count, sort order, and grid height.
background_color: white (0)
target_object_color: azure (8)

steps:
  - step: 1
    action: find_contiguous_objects
    input_color: 8
    connectivity: 4-way (horizontal/vertical)
    output: list_of_objects (each object is a list of pixel coordinates)
  - step: 2
    action: count_objects
    input: list_of_objects
    output: object_count (N)
  - step: 3
    action: sort_objects
    input: list_of_objects
    sort_key: top_left_coordinate (row-major: minimum row, then minimum column)
    output: sorted_list_of_objects
  - step: 4
    action: determine_color_sequence
    input: object_count (N), input_grid_height (H)
    logic:
      - if N == 3: sequence = [1, 1, 3] # Blue, Blue, Green
      - if N == 4:
        - if H < 15: sequence = [2, 1, 3, 1] # Red, Blue, Green, Blue
        - if H >= 15: sequence = [4, 3, 2, 1] # Yellow, Green, Red, Blue
      # Note: N=5 case was based on faulty assumption, no example with N=5 exists.
      # Only N=3 and N=4 are observed in training.
    output: color_sequence
  - step: 5
    action: recolor_objects
    input: sorted_list_of_objects, color_sequence
    process: Iterate through the sorted objects and the color sequence simultaneously. For the k-th object, change the color of all its pixels to the k-th color in the sequence.
    output: modified_grid
  - step: 6
    action: preserve_background
    input: original_input_grid, modified_grid
    process: Ensure pixels that were originally white (0) remain white (0). (Achieved by modifying a copy).
    output: final_output_grid

examples_summary:
  - example: 1
    input_grid_shape: [14, 14]
    object_count: 4
    height_condition: < 15
    expected_sequence: [2, 1, 3, 1]
  - example: 2
    input_grid_shape: [14, 11]
    object_count: 4
    height_condition: < 15
    expected_sequence: [2, 1, 3, 1]
  - example: 3
    input_grid_shape: [15, 14]
    object_count: 4
    height_condition: >= 15
    expected_sequence: [4, 3, 2, 1]
  - example: 4
    input_grid_shape: [9, 11]
    object_count: 3
    height_condition: < 15 # (Doesn't matter for N=3 rule)
    expected_sequence: [1, 1, 3]