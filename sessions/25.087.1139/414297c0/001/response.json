{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nTransformation Rule:\n1. Identify all distinct contiguous regions composed of a single non-white color in the input grid. Connectivity is defined by horizontal and vertical adjacency.\n2. Find the region with the largest area (most pixels).\n3. Determine the bounding box of this largest region.\n4. Create an output grid with the dimensions of the bounding box.\n5. Populate the output grid by iterating through the corresponding area in the input grid (defined by the bounding box).\n6. If an input pixel within the bounding box has the same color as the largest region, copy that color to the output grid.\n7. If an input pixel within the bounding box has a different color (including white or any other color), set the corresponding pixel in the output grid to red (2).\n\"\"\"\n\ndef find_regions(grid):\n    \"\"\"\n    Finds all contiguous regions of the same non-white color in the grid.\n\n    Args:\n        grid (np.ndarray): The input grid.\n\n    Returns:\n        list: A list of dictionaries, where each dictionary represents a region\n              and contains 'color', 'pixels' (set of (r, c) tuples),\n              'area', and 'bbox' (min_row, min_col, max_row, max_col).\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n    regions = []\n\n    for r in range(rows):\n        for c in range(cols):\n            color = grid[r, c]\n            # If it's a non-white pixel and not yet visited\n            if color != 0 and not visited[r, c]:\n                region_pixels = set()\n                q = deque([(r, c)])\n                visited[r, c] = True\n                min_r, min_c = r, c\n                max_r, max_c = r, c\n\n                # Perform BFS to find all connected pixels of the same color\n                while q:\n                    row, col = q.popleft()\n                    region_pixels.add((row, col))\n                    min_r = min(min_r, row)\n                    min_c = min(min_c, col)\n                    max_r = max(max_r, row)\n                    max_c = max(max_c, col)\n\n                    # Check 4-directional neighbors\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           not visited[nr, nc] and grid[nr, nc] == color:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n\n                regions.append({\n                    'color': color,\n                    'pixels': region_pixels,\n                    'area': len(region_pixels),\n                    'bbox': (min_r, min_c, max_r, max_c)\n                })\n\n    return regions\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Extracts the largest contiguous non-white region, crops to its bounding box,\n    and replaces any pixel within the box that is not the region's main color with red (2).\n\n    Args:\n        input_grid (np.ndarray): The input grid.\n\n    Returns:\n        np.ndarray: The transformed output grid.\n    \"\"\"\n    # 1. Find all contiguous non-white regions\n    regions = find_regions(input_grid)\n\n    if not regions:\n        # Handle case with no non-white pixels if necessary, maybe return empty or original?\n        # Based on examples, there's always a target region.\n        # Returning an empty grid for now, though this might need adjustment\n        # if such test cases exist.\n        return np.array([[]], dtype=int)\n\n\n    # 2. Find the largest region\n    largest_region = max(regions, key=lambda r: r['area'])\n    main_color = largest_region['color']\n    min_r, min_c, max_r, max_c = largest_region['bbox']\n\n    # 3. Determine output grid dimensions\n    output_height = max_r - min_r + 1\n    output_width = max_c - min_c + 1\n\n    # 4. Create the output grid (initialized to a placeholder, e.g., 0)\n    # We will fill every cell, so initialization value doesn't strictly matter\n    # unless the transformation rule had exceptions. Let's use red (2) as a default.\n    output_grid = np.full((output_height, output_width), 2, dtype=int) # Default to red\n\n    # 5. & 6. & 7. Populate the output grid based on the transformation rule\n    for r_in in range(min_r, max_r + 1):\n        for c_in in range(min_c, max_c + 1):\n            # Calculate corresponding output coordinates\n            r_out = r_in - min_r\n            c_out = c_in - min_c\n\n            # Get the color from the input grid within the bounding box\n            input_color = input_grid[r_in, c_in]\n\n            # Apply the rule: keep main_color, otherwise set to red (2)\n            if input_color == main_color:\n                output_grid[r_out, c_out] = main_color\n            else:\n                output_grid[r_out, c_out] = 2 # Red\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4695,
    "candidates_token_count": 1310,
    "total_token_count": 6005,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 18.62263,
  "retries": null
}