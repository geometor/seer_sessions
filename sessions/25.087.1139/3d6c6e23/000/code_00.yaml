facts:
  - grid_dimensions: Input and output grids have the same height and width.
  - background_color: White (0) is the background and is preserved, except where replaced by output structures.
  - active_elements: Non-white pixels in the input grid.
  - grouping: Active elements are grouped by color.
  - column_constraint: For each color group, all pixels reside in a single column in the input.
  - action: Pixels of each color group "fall" towards the bottom of the grid.
  - aggregation: Falling pixels of the same color aggregate to form a structure.
  - structure_shape: The structure is a vertically symmetrical pyramid/triangle composed of horizontal layers.
  - layer_width: Each layer has an odd width (1, 3, 5, ...).
  - structure_composition:
      rule: The structure for a color uses layers corresponding to odd widths, starting with the largest odd width possible given the pixel count for that color, then the next largest odd width for the remaining pixels, and so on, until all pixels are accounted for.
      layers_order: Layers are stacked vertically, widest at the bottom, narrowest at the top.
      examples:
        - pixel_count: 1, layers: [1]
        - pixel_count: 3, layers: [3]
        - pixel_count: 4, layers: [3, 1]
        - pixel_count: 5, layers: [5]
        - pixel_count: 9, layers: [5, 3, 1]
  - horizontal_positioning: Each structure is horizontally centered based on the column index of its constituent pixels in the input grid.
  - vertical_positioning:
      anchor: Structures are built upwards starting from the bottom row of the grid.
      stacking_order: If multiple colors exist, their structures are stacked vertically.
      stacking_rule: The color group whose lowest pixel in the input grid had the largest row index forms the structure at the very bottom. Structures for colors with progressively smaller maximum row indices are stacked on top.
  - pixel_conservation: The count of pixels for each specific color is conserved between input and output.
