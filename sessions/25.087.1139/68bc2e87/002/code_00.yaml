Input Grid:
  Properties:
    - Type: 2D array of integers (0-9) representing colors.
    - Size: Variable height and width (up to 30x30).
    - Contains: Pixels of various colors.
  Objects:
    - Background Region:
        - Color: Azure (8).
        - Location: Typically forms the outermost border and connected area.
        - Role: Defines the starting point for analysis.
    - Frame Regions:
        - Color: Any color other than the background (e.g., Yellow(4), Green(3), Red(2), Magenta(6), Orange(7), Blue(1)).
        - Property: Form contiguous regions.
        - Relationship: Nested structure, where one frame color completely encloses the next inner frame color. Frames are adjacent to each other.
        - Sequence: An ordered list of frame colors exists, from the one adjacent to the background inwards.
    - Target Color:
        - Color: Red (2).
        - Role: Its presence within the sequence of frame colors determines the output.

Output Grid:
  Properties:
    - Type: 1x1 grid (2D array).
    - Size: Always 1x1 based on examples.
  Content:
    - Contains the color Red (2) if the transformation condition is met.

Transformation Rule:
  Action: Identify nested frames and check for a specific color.
  Steps:
    1. Identify the main background region (azure=8 connected to the border).
    2. Perform a layer-by-layer search inwards from the background region.
    3. Determine the sequence of unique frame colors encountered (e.g., [color_adjacent_to_background, next_inner_color, ...]).
    4. Check if the color Red (2) exists anywhere in this sequence.
  Condition: If Red (2) is found in the sequence of nested frame colors.
  Result: Output a 1x1 grid containing Red (2).
  Alternative (Implicit): If no valid nested frame structure starting with azure is found, or if red is not in the sequence (though this case wasn't observed), the output is implicitly undefined by the examples but likely not `[[2]]`.