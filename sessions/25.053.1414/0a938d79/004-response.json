{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Source Rows:** Scan each row of the input grid. A row is a \"source row\" if it contains at least one non-zero (non-white) pixel.\n\n2.  **Replicate Horizontally:** For each source row, replicate its pattern of non-zero pixels across the *entire* row. Any zero-value pixels between non-zero pixels in the source row should remain zero.  The output for this row will now have solid stripes of color corresponding to the non-zero pixels in the input.\n\n3. **Stack Rows:** Create the output grid by stacking the source rows from top to bottom. If a row between two source rows does not contain any source colors, the row from above is copied down until a new source row is encountered.\n\n4. **Handle Edge Cases** If a source row contains only `0` - all white - then it has no effect.\n\"\"\"\n\nimport numpy as np\n\ndef _find_source_rows(grid):\n    \"\"\"Identifies and returns a list of row indices that contain at least one non-zero pixel.\"\"\"\n    source_rows = []\n    for i, row in enumerate(grid):\n        if any(pixel != 0 for pixel in row):\n            source_rows.append(i)\n    return source_rows\n\ndef _replicate_row_horizontally(row):\n    \"\"\"Replicates the non-zero pixels of a row across the entire row.\"\"\"\n    new_row = np.array(row)  # create a copy to modify\n    non_zero_indices = np.where(new_row != 0)[0]\n\n    for i in range(len(new_row)):\n      if new_row[i] == 0:\n        closest_index = -1\n        min_dist = float('inf')\n        for nz_idx in non_zero_indices:\n          dist = abs(nz_idx - i)\n          if dist < min_dist:\n              min_dist = dist\n              closest_index = nz_idx\n        if closest_index != -1:\n           new_row[i] = new_row[closest_index]\n    return new_row.tolist()\n\ndef transform(input_grid):\n    # initialize output_grid\n    input_grid = np.array(input_grid)\n    output_grid = np.zeros_like(input_grid)\n    \n    # Find source rows\n    source_row_indices = _find_source_rows(input_grid)\n\n    # Replicate and stack rows\n    last_filled_row = None\n    for y in range(input_grid.shape[0]):\n        if y in source_row_indices:\n            # replicate current source row\n            output_grid[y, :] = _replicate_row_horizontally(input_grid[y, :])\n            last_filled_row = output_grid[y,:]\n        elif last_filled_row is not None:\n            # fill from above\n            output_grid[y,:] = last_filled_row\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8136,
    "candidates_token_count": 691,
    "total_token_count": 8827,
    "cached_content_token_count": 0
  },
  "response_time": 6.696461,
  "response_file": "004-response.json"
}