import numpy as np

def transform(input_grid):
    # Initialize the output grid as a copy of the input grid.
    output_grid = np.copy(input_grid)
    
    # Get the dimensions of the input grid.
    rows, cols = input_grid.shape
    
    # Store original top-left cell color
    top_left_color = input_grid[0, 0]
    
    # Determine the minimum dimension for swapping to handle rectangular arrays
    min_dim = min(rows, cols)
    
    # copy first row to first column
    for i in range(1,rows):
        if i < cols:
           output_grid[i,0] = input_grid[0,i]

    # copy first column to first row
    for i in range(1,cols):
        if i < rows:
            output_grid[0,i] = input_grid[i,0]

    # restore top left
    output_grid[0,0] = top_left_color


    return output_grid

def compare_grids(grid1, grid2):
    return np.array_equal(grid1, grid2)

# Example data (replace with your actual data)
examples = [
    {
        "input": np.array([[8, 8, 8, 8, 8, 8, 8, 8, 8],
                           [8, 8, 8, 8, 8, 8, 8, 8, 8],
                           [8, 8, 8, 8, 8, 8, 8, 8, 8],
                           [8, 8, 8, 8, 8, 8, 8, 8, 8],
                           [8, 8, 8, 8, 8, 8, 8, 8, 8],
                           [8, 8, 8, 8, 8, 8, 8, 8, 8],
                           [8, 8, 8, 8, 8, 8, 8, 8, 8],
                           [8, 8, 8, 8, 8, 8, 8, 8, 8],
                           [8, 8, 8, 8, 8, 8, 8, 8, 8]]),
        "output": np.array([[8, 8, 8, 8, 8, 8, 8, 8, 8],
                            [8, 8, 8, 8, 8, 8, 8, 8, 8],
                            [8, 8, 8, 8, 8, 8, 8, 8, 8],
                            [8, 8, 8, 8, 8, 8, 8, 8, 8],
                            [8, 8, 8, 8, 8, 8, 8, 8, 8],
                            [8, 8, 8, 8, 8, 8, 8, 8, 8],
                            [8, 8, 8, 8, 8, 8, 8, 8, 8],
                            [8, 8, 8, 8, 8, 8, 8, 8, 8],
                            [8, 8, 8, 8, 8, 8, 8, 8, 8]]),
    },
    {
        "input": np.array([[5, 5, 5, 5, 5, 5, 5, 5],
                           [5, 5, 5, 5, 5, 5, 5, 5],
                           [5, 5, 5, 5, 5, 5, 5, 5],
                           [5, 5, 5, 5, 5, 5, 5, 5],
                           [5, 5, 5, 5, 5, 5, 5, 5],
                           [5, 5, 5, 5, 5, 5, 5, 5],
                           [5, 5, 5, 5, 5, 5, 5, 5],
                           [5, 5, 5, 5, 5, 5, 5, 5]]),
        "output": np.array([[5, 5, 5, 5, 5, 5, 5, 5],
                            [5, 5, 5, 5, 5, 5, 5, 5],
                            [5, 5, 5, 5, 5, 5, 5, 5],
                            [5, 5, 5, 5, 5, 5, 5, 5],
                            [5, 5, 5, 5, 5, 5, 5, 5],
                            [5, 5, 5, 5, 5, 5, 5, 5],
                            [5, 5, 5, 5, 5, 5, 5, 5],
                            [5, 5, 5, 5, 5, 5, 5, 5]]),
    },
    {
       "input": np.array([[8, 3, 6, 8, 8, 8, 3, 3, 6],
                          [6, 8, 8, 8, 3, 8, 8, 8, 8],
                          [8, 8, 8, 6, 8, 3, 8, 8, 8],
                          [6, 6, 8, 8, 8, 6, 8, 6, 3],
                          [8, 8, 8, 8, 8, 8, 8, 8, 8],
                          [8, 8, 8, 6, 8, 8, 6, 8, 8],
                          [8, 3, 8, 6, 8, 8, 8, 6, 8],
                          [8, 8, 8, 8, 8, 3, 8, 8, 8],
                          [6, 8, 8, 8, 6, 8, 8, 3, 8]]),
        "output": np.array([[8, 6, 8, 6, 8, 8, 8, 8, 6],
                            [3, 8, 8, 8, 3, 8, 8, 8, 8],
                            [6, 8, 8, 6, 8, 3, 8, 8, 8],
                            [8, 6, 8, 8, 8, 6, 8, 6, 3],
                            [8, 8, 8, 8, 8, 8, 8, 8, 8],
                            [8, 8, 8, 6, 8, 8, 6, 8, 8],
                            [3, 3, 8, 6, 8, 8, 8, 6, 8],
                            [3, 8, 8, 8, 8, 3, 8, 8, 8],
                            [6, 8, 8, 8, 6, 8, 8, 3, 8]]),

    },
    {
        "input": np.array([[2, 1, 1, 2, 2, 2, 2],
                           [1, 2, 2, 2, 2, 1, 2],
                           [1, 2, 1, 1, 1, 1, 1],
                           [2, 2, 1, 1, 2, 1, 1],
                           [2, 2, 2, 2, 1, 1, 2],
                           [1, 2, 2, 1, 1, 2, 1]]),
        "output": np.array([[2, 1, 1, 2, 2, 2, 2],
                            [1, 2, 2, 2, 2, 1, 2],
                            [1, 2, 1, 1, 1, 1, 1],
                            [2, 2, 1, 1, 2, 1, 1],
                            [2, 2, 2, 2, 1, 1, 2],
                            [1, 2, 2, 1, 1, 2, 1]]),
    },
        {
        "input": np.array([[7, 1, 7, 7, 7, 7, 7, 7],
                   [7, 1, 7, 1, 1, 7, 1, 1],
                   [7, 7, 7, 7, 7, 7, 1, 7],
                   [1, 7, 7, 1, 1, 7, 7, 7],
                   [7, 1, 7, 7, 7, 7, 1, 7]]),
        "output": np.array([[7, 7, 7, 1, 7],
                            [1, 1, 7, 1, 1],
                            [7, 7, 7, 7, 7],
                            [7, 1, 7, 1, 7],
                            [7, 7, 7, 7, 7]]),
    }
]

for i, example in enumerate(examples):
    input_grid = example['input']
    expected_output = example['output']
    actual_output = transform(input_grid)
    is_correct = compare_grids(expected_output, actual_output)
    print(f"Example {i+1}:")
    print(f"  Input Dimensions: {input_grid.shape}")
    print(f"  Output Dimensions: {expected_output.shape}")
    print(f"  Is Correct: {is_correct}")
    if not is_correct:
        print(f"  Differences: {np.where(expected_output != actual_output)}")
    print("-" * 20)
