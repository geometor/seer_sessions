{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on the following rules:\n    1. Identify the primary gray (5) rectangular frame and the area it encloses.\n    2. Check if any gray (5) pixels exist within the enclosed area (excluding the frame itself).\n    3. If no internal gray pixels exist:\n        a. Change white (0) pixels inside the frame that are adjacent (8-connectivity) to the frame to red (2).\n        b. Change remaining white (0) pixels inside the frame to gray (5).\n    4. If internal gray pixels exist:\n        a. Change white (0) pixels inside the frame that are adjacent (8-connectivity) to *any* gray pixel (frame or internal) to red (2).\n        b. Leave all other pixels unchanged.\n    \"\"\"\n    \n    input_array = np.array(input_grid, dtype=int)\n    output_array = np.copy(input_array)\n    height, width = input_array.shape\n    \n    # --- Helper function for adjacency check ---\n    def is_adjacent(grid, r, c, target_color):\n        \"\"\"Checks 8 neighbors of (r,c) for target_color.\"\"\"\n        h, w = grid.shape\n        for dr in [-1, 0, 1]:\n            for dc in [-1, 0, 1]:\n                if dr == 0 and dc == 0:\n                    continue\n                nr, nc = r + dr, c + dc\n                if 0 <= nr < h and 0 <= nc < w and grid[nr, nc] == target_color:\n                    return True\n        return False\n\n    # --- Find all gray pixels ---\n    gray_pixels = np.argwhere(input_array == 5)\n    if gray_pixels.size == 0:\n        # No gray pixels, no frame, return original grid\n        return input_grid \n        \n    # --- Determine frame boundaries and enclosed area ---\n    # Assume the frame defines the min/max boundaries of all gray pixels\n    min_r = np.min(gray_pixels[:, 0])\n    max_r = np.max(gray_pixels[:, 0])\n    min_c = np.min(gray_pixels[:, 1])\n    max_c = np.max(gray_pixels[:, 1])\n\n    # Define the potential enclosed area (inside the frame boundaries)\n    # Note: This assumes a simple rectangular frame structure\n    enclosed_rows = range(min_r + 1, max_r)\n    enclosed_cols = range(min_c + 1, max_c)\n\n    # --- Check for internal gray pixels ---\n    has_internal_gray = False\n    for r in enclosed_rows:\n        for c in enclosed_cols:\n            if input_array[r, c] == 5:\n                has_internal_gray = True\n                break\n        if has_internal_gray:\n            break\n            \n    # --- Apply transformation rules ---\n    pixels_to_red = [] # Store coords of white pixels to turn red\n    pixels_to_gray = [] # Store coords of white pixels to turn gray (only in Case 1)\n    \n    for r in enclosed_rows:\n        for c in enclosed_cols:\n            if input_array[r, c] == 0: # Focus on white pixels inside the frame\n                \n                # Check adjacency to ANY gray pixel (frame or internal)\n                if is_adjacent(input_array, r, c, 5):\n                    pixels_to_red.append((r, c))\n                elif not has_internal_gray: \n                    # If no internal gray, non-adjacent white pixels go gray\n                    pixels_to_gray.append((r, c))\n                    \n    # --- Update the output grid ---\n    for r, c in pixels_to_red:\n        output_array[r, c] = 2 # Change adjacent white to red\n\n    # Only change non-adjacent white to gray if there were NO internal grays\n    if not has_internal_gray:\n        for r, c in pixels_to_gray:\n            output_array[r, c] = 5 # Change non-adjacent white to gray\n\n    return output_array.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5508,
    "candidates_token_count": 984,
    "total_token_count": 6492,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.078414,
  "retries": null
}