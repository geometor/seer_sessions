{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nRestores a repeating horizontal pattern in a grid by filling in specific 'hole' pixels (white=0). \nIt prioritizes using a 'template' row (a pattern row with no holes) if available. \nIf no template row exists, it determines the pattern by finding the most frequent non-background, \nnon-hole color for each column across all pattern rows. \nRows consisting entirely of the background color (blue=1) are preserved and ignored during pattern analysis.\n\"\"\"\n\ndef synthesize_reference_pattern_from_all(grid, pattern_rows_indices, background_color, hole_color):\n    \"\"\"\n    Constructs the reference horizontal pattern sequence by analyzing all pattern rows.\n    This is used as a fallback when no single 'template' row (without holes) is found.\n\n    Args:\n        grid (np.array): The input grid.\n        pattern_rows_indices (list): Indices of rows identified as pattern rows.\n        background_color (int): The value representing background pixels.\n        hole_color (int): The value representing hole pixels to be filled.\n\n    Returns:\n        list: The reference pattern sequence (length = grid width). Returns None\n              if no valid pattern can be synthesized (e.g., only background/holes).\n    \"\"\"\n    if not pattern_rows_indices:\n        return None \n        \n    _ , width = grid.shape\n    reference_pattern = [background_color] * width # Default to background color\n\n    for c in range(width):\n        # Collect non-background, non-hole colors at column 'c' from all pattern rows\n        column_colors = grid[pattern_rows_indices, c]\n        valid_pattern_colors = [color for color in column_colors \n                                if color != background_color and color != hole_color]\n        \n        # Find the most frequent valid color\n        if not valid_pattern_colors:\n            # If no valid pattern colors found in this column, keep default (background_color)\n            continue \n            \n        counts = Counter(valid_pattern_colors)\n        max_count = max(counts.values())\n        most_frequent_colors = [color for color, count in counts.items() if count == max_count]\n        \n        # Tie-breaking rule: choose the smallest numerical color value\n        reference_pattern[c] = min(most_frequent_colors)\n        \n    # Check if the synthesized pattern is just background colors (meaning no real pattern found)\n    if all(p == background_color for p in reference_pattern):\n         # This might happen if all non-background pixels were holes\n         # In this ambiguous case, maybe returning None is safer to signal failure\n         # Or perhaps we should return the default background pattern if that's intended behaviour.\n         # Let's return None for now to indicate synthesis might have failed to find a non-bg pattern.\n         # print(\"Warning: Synthesized pattern consists only of background color.\")\n         # return None # Revisit this if it causes issues - maybe returning the bg pattern is correct.\n         pass # Allow the background pattern to be returned if that's all that could be derived.\n\n\n    return reference_pattern\n\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the pattern restoration transformation to the input grid.\n\n    Args:\n        input_grid (list of lists): The input grid represented as a list of lists.\n\n    Returns:\n        list of lists: The output grid with holes filled according to the determined pattern.\n    \"\"\"\n    # Convert input to numpy array for easier processing\n    input_array = np.array(input_grid, dtype=int)\n    height, width = input_array.shape\n    \n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_array)\n\n    # Define standard colors based on the problem description\n    background_color = 1  # blue\n    hole_color = 0        # white\n\n    # --- Identify Structure ---\n    # Identify background rows (all blue)\n    is_background_row = np.all(input_array == background_color, axis=1)\n    \n    # Identify pattern rows (any row that is not a background row)\n    pattern_rows_indices = np.where(~is_background_row)[0].tolist()\n\n    # If there are no pattern rows, the grid is likely all background or empty, return as is\n    if not pattern_rows_indices:\n        return output_grid.tolist()\n\n    # --- Determine the Reference Pattern ---\n    reference_pattern = None\n    \n    # 1. Try to find a 'template' row (a pattern row without any holes)\n    template_row_indices = []\n    for r_idx in pattern_rows_indices:\n        if hole_color not in input_array[r_idx, :]:\n            template_row_indices.append(r_idx)\n            \n    if template_row_indices:\n        # Use the first found template row to define the pattern\n        template_idx = template_row_indices[0]\n        reference_pattern = input_array[template_idx, :].tolist()\n        # print(f\"Using template row {template_idx} for pattern.\")\n    else:\n        # 2. Fallback: No template row found, synthesize pattern from all pattern rows\n        # print(\"No template row found. Synthesizing pattern from all pattern rows.\")\n        reference_pattern = synthesize_reference_pattern_from_all(input_array, \n                                                                   pattern_rows_indices, \n                                                                   background_color, \n                                                                   hole_color)\n\n    # Check if pattern determination was successful\n    if reference_pattern is None:\n         # This might happen if synthesis failed (e.g., only bg/holes found in columns)\n         # Or if the only pattern rows contained only bg/holes.\n         # Return the grid unchanged as we couldn't determine a pattern to fill holes.\n         # print(\"Warning: Could not determine a reference pattern.\")\n         return output_grid.tolist() \n\n    # --- Fill the Holes ---\n    # Iterate only through the pattern rows identified earlier\n    for r in pattern_rows_indices:\n        for c in range(width):\n            # Check if the current pixel in the original input is a hole\n            if input_array[r, c] == hole_color:\n                # Replace the hole in the output grid with the reference pattern color for this column\n                output_grid[r, c] = reference_pattern[c]\n                    \n    # Convert the final numpy array back to a list of lists for the expected output format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3299,
    "candidates_token_count": 1515,
    "total_token_count": 4814,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 23.037911,
  "retries": null
}