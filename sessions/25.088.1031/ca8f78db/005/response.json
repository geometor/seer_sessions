{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nRestores a repeating horizontal pattern in a grid by filling in specific 'hole' pixels (white=0), \nwhile preserving 'background' areas (solid blue=1 rows) and existing pattern elements (other colors). \nThe correct pattern color for each column is determined by finding the most frequent non-background, \nnon-hole color in that column across all rows containing pattern elements.\n\"\"\"\n\ndef synthesize_reference_pattern(grid, pattern_rows_indices, background_color, hole_color):\n    \"\"\"\n    Constructs the reference horizontal pattern sequence.\n\n    Args:\n        grid (np.array): The input grid.\n        pattern_rows_indices (list): Indices of rows identified as pattern rows.\n        background_color (int): The value representing background pixels.\n        hole_color (int): The value representing hole pixels to be filled.\n\n    Returns:\n        list: The reference pattern sequence (length = grid width). Returns None\n              if no pattern rows are found.\n    \"\"\"\n    if not pattern_rows_indices:\n        # Handle case where no pattern rows exist (e.g., grid is all background)\n        return None \n        \n    _ , width = grid.shape\n    reference_pattern = [background_color] * width # Default pattern element\n\n    for c in range(width):\n        # 1. Collect colors at column 'c' from all pattern rows\n        column_colors = grid[pattern_rows_indices, c]\n        \n        # 2. Filter out background and hole colors\n        valid_pattern_colors = [color for color in column_colors \n                                if color != background_color and color != hole_color]\n        \n        # 3. Find the most frequent color among the remaining valid ones\n        if not valid_pattern_colors:\n            # If no valid pattern colors found in this column, keep default (background_color)\n            # Alternatively, could use another default or raise error depending on expected input constraints\n            continue \n            \n        counts = Counter(valid_pattern_colors)\n        \n        # 4. Determine the reference color for column 'c', handling ties\n        max_count = max(counts.values())\n        most_frequent_colors = [color for color, count in counts.items() if count == max_count]\n        \n        # Tie-breaking rule: choose the smallest numerical color value\n        reference_pattern[c] = min(most_frequent_colors)\n        \n    return reference_pattern\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the pattern restoration transformation to the input grid.\n\n    Args:\n        input_grid (list of lists): The input grid represented as a list of lists.\n\n    Returns:\n        list of lists: The output grid with holes filled according to the synthesized pattern.\n    \"\"\"\n    # Convert input to numpy array for easier processing\n    input_array = np.array(input_grid, dtype=int)\n    height, width = input_array.shape\n    \n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_array)\n\n    # Define standard colors based on the problem description\n    background_color = 1  # blue\n    hole_color = 0        # white\n\n    # --- Identify Structure ---\n    # Identify background rows (all blue)\n    is_background_row = np.all(input_array == background_color, axis=1)\n    \n    # Identify pattern rows (any row that is not a background row)\n    pattern_rows_indices = np.where(~is_background_row)[0].tolist()\n\n    # Check if there's anything to do (e.g., if there are pattern rows)\n    if not pattern_rows_indices:\n        # If no pattern rows, the grid is likely all background, return as is\n        return output_grid.tolist()\n\n    # --- Determine the Reference Pattern ---\n    reference_pattern = synthesize_reference_pattern(input_array, pattern_rows_indices, background_color, hole_color)\n    \n    # Check if pattern synthesis was successful (it should be if pattern_rows_indices exist)\n    if reference_pattern is None:\n         # This case should ideally not be reached if pattern_rows_indices is not empty,\n         # but handle defensively.\n         print(\"Warning: Could not synthesize reference pattern despite finding pattern rows.\")\n         return output_grid.tolist() # Return unchanged grid\n\n    # --- Fill the Holes ---\n    # Iterate through each cell of the grid\n    for r in range(height):\n        # Check if the current row is a pattern row\n        if r in pattern_rows_indices:\n            for c in range(width):\n                # Check if the current pixel is a hole\n                if input_array[r, c] == hole_color:\n                    # Replace the hole in the output grid with the reference pattern color for this column\n                    output_grid[r, c] = reference_pattern[c]\n                    \n    # Convert the final numpy array back to a list of lists for the expected output format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6193,
    "candidates_token_count": 1161,
    "total_token_count": 7354,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 21.38163,
  "retries": null
}