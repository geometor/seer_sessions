{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom skimage import measure\n\n\"\"\"\nTransforms the input grid based on blue objects (color 1) against a yellow background (color 4).\nFor each distinct blue object:\n1. Identifies yellow pixels adjacent (orthogonally or diagonally) to the blue object.\n2. Partitions these adjacent yellow pixels into two groups:\n    a. 'Frame': Those adjacent yellow pixels that are also adjacent (orthogonally or diagonally) to at least one yellow pixel *not* adjacent to the current blue object. These frame pixels are colored red (2).\n    b. 'Fill': Those adjacent yellow pixels that are *not* 'Frame' pixels.\n3. Colors the 'Fill' pixels based on their adjacency to the 'Frame':\n    a. If a 'Fill' pixel is adjacent (orthogonally or diagonally) to any 'Frame' pixel (now colored red), it's colored azure (8).\n    b. Otherwise, it's colored magenta (6).\n4. The original blue object pixels and the rest of the yellow background pixels remain unchanged.\n\"\"\"\n\ndef _get_neighbors(r, c, height, width, include_diagonal=True):\n    \"\"\" Gets valid neighbor coordinates for a given cell. \"\"\"\n    neighbors = []\n    for dr in range(-1, 2):\n        for dc in range(-1, 2):\n            if dr == 0 and dc == 0:\n                continue\n            if not include_diagonal and abs(dr) + abs(dc) > 1:\n                continue\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < height and 0 <= nc < width:\n                neighbors.append((nr, nc))\n    return neighbors\n\ndef _find_objects(grid, color):\n    \"\"\" Finds connected components of a specific color. \"\"\"\n    binary_grid = (grid == color).astype(int)\n    labeled_grid, num_labels = measure.label(binary_grid, connectivity=2, background=0, return_num=True) # connectivity=2 means diagonal connections are included\n    \n    objects = []\n    for i in range(1, num_labels + 1):\n        coords = set(map(tuple, np.argwhere(labeled_grid == i)))\n        objects.append(coords)\n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    height, width = input_grid.shape\n    \n    # Define colors\n    background_color = 4\n    object_color = 1\n    frame_color = 2\n    outer_fill_color = 8\n    inner_fill_color = 6\n\n    # Find all blue objects\n    blue_objects = _find_objects(input_grid, object_color)\n    \n    # Get coordinates of all yellow pixels\n    all_yellow_coords = set(map(tuple, np.argwhere(input_grid == background_color)))\n\n    for blue_object_coords in blue_objects:\n        # 1. Find yellow pixels adjacent to the current blue object\n        adjacent_to_blue_coords = set()\n        for r, c in blue_object_coords:\n            neighbors = _get_neighbors(r, c, height, width, include_diagonal=True)\n            for nr, nc in neighbors:\n                 adjacent_to_blue_coords.add((nr, nc))\n\n        adjacent_yellow_coords = {\n            (r, c) for r, c in adjacent_to_blue_coords \n            if input_grid[r, c] == background_color\n        }\n\n        # 2. Find yellow pixels NOT adjacent to the current blue object\n        non_adjacent_to_current_blue_yellow_coords = all_yellow_coords - adjacent_yellow_coords\n\n        # 3. Determine Frame pixels\n        actual_frame_coords = set()\n        for yr, yc in adjacent_yellow_coords:\n            is_frame = False\n            neighbors = _get_neighbors(yr, yc, height, width, include_diagonal=True)\n            for nr, nc in neighbors:\n                if (nr, nc) in non_adjacent_to_current_blue_yellow_coords:\n                    is_frame = True\n                    break\n            if is_frame:\n                actual_frame_coords.add((yr, yc))\n\n        # 4. Determine Fill pixels\n        fill_coords = adjacent_yellow_coords - actual_frame_coords\n\n        # 5. Color Frame pixels in the output grid\n        for r, c in actual_frame_coords:\n            output_grid[r, c] = frame_color\n\n        # 6. Color Fill pixels in the output grid\n        for r, c in fill_coords:\n            is_adjacent_to_frame = False\n            neighbors = _get_neighbors(r, c, height, width, include_diagonal=True)\n            # Check adjacency against the *final* frame coordinates\n            for nr, nc in neighbors:\n                 # We check against actual_frame_coords, not the output_grid's current state\n                 # because multiple objects might interact otherwise.\n                 if (nr, nc) in actual_frame_coords: \n                    is_adjacent_to_frame = True\n                    break\n            \n            if is_adjacent_to_frame:\n                output_grid[r, c] = outer_fill_color # Azure\n            else:\n                output_grid[r, c] = inner_fill_color # Magenta\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8282,
    "candidates_token_count": 1267,
    "total_token_count": 9549,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 28.487578,
  "retries": null
}