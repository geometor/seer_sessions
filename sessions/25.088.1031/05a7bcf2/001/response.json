{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\ndef find_separator(grid):\n    \"\"\"\n    Identifies the azure separator line/column.\n\n    Args:\n        grid: A numpy array representing the input grid.\n\n    Returns:\n        A tuple (orientation, index) where orientation is 'h' (horizontal)\n        or 'v' (vertical), and index is the row or column index of the\n        separator. Returns (None, None) if no separator is found.\n    \"\"\"\n    rows, cols = grid.shape\n    # Check for horizontal separator\n    for r in range(rows):\n        if np.all(grid[r, :] == 8):\n            return 'h', r\n    # Check for vertical separator\n    for c in range(cols):\n        if np.all(grid[:, c] == 8):\n            return 'v', c\n    return None, None\n\ndef fill_projection_path(output_grid, r_start, c_start, sep_orientation, sep_index):\n    \"\"\"\n    Fills the path from a source pixel towards the separator with azure (8),\n    only overwriting white (0) pixels.\n\n    Args:\n        output_grid: The numpy array representing the output grid (modified in place).\n        r_start: The row index of the source pixel.\n        c_start: The column index of the source pixel.\n        sep_orientation: 'h' or 'v' for the separator orientation.\n        sep_index: The row or column index of the separator.\n    \"\"\"\n    if sep_orientation == 'h':\n        # Project vertically towards the horizontal separator\n        if r_start < sep_index: # Project down\n            for r in range(r_start + 1, sep_index):\n                if output_grid[r, c_start] == 0:\n                    output_grid[r, c_start] = 8\n        elif r_start > sep_index: # Project up\n            for r in range(sep_index + 1, r_start):\n                 if output_grid[r, c_start] == 0:\n                    output_grid[r, c_start] = 8\n    elif sep_orientation == 'v':\n        # Project horizontally towards the vertical separator\n        if c_start < sep_index: # Project right\n            for c in range(c_start + 1, sep_index):\n                 if output_grid[r_start, c] == 0:\n                    output_grid[r_start, c] = 8\n        elif c_start > sep_index: # Project left\n            for c in range(sep_index + 1, c_start):\n                 if output_grid[r_start, c] == 0:\n                    output_grid[r_start, c] = 8\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on the following rules:\n    1. Find a horizontal or vertical separator line/column of azure pixels (8).\n    2. Identify yellow (4) and red (2) pixels on either side of the separator.\n    3. Change yellow pixels to green (3) in the output. Red pixels remain red.\n    4. For each original yellow or red pixel, project towards the separator.\n    5. Fill the white pixels (0) along the direct path between the pixel and\n       the separator with azure (8). The path starts from the pixel adjacent\n       to the source pixel and ends just before the separator.\n    \"\"\"\n    # Convert input list of lists to a NumPy array\n    input_np = np.array(input_grid, dtype=int)\n    # Initialize the output grid as a copy of the input\n    output_np = input_np.copy()\n    rows, cols = input_np.shape\n\n    # Find the azure separator\n    separator_orientation, separator_index = find_separator(input_np)\n\n    if separator_orientation is None:\n        # Should not happen based on examples, but handle defensively\n        return output_np.tolist()\n\n    # Iterate through each pixel of the original input grid\n    for r in range(rows):\n        for c in range(cols):\n            pixel_value = input_np[r, c]\n\n            # Process yellow pixels\n            if pixel_value == 4:\n                # Change yellow to green in the output\n                output_np[r, c] = 3\n                # Fill the projection path towards the separator\n                fill_projection_path(output_np, r, c, separator_orientation, separator_index)\n\n            # Process red pixels\n            elif pixel_value == 2:\n                # Red pixels remain red (already copied), just fill the path\n                fill_projection_path(output_np, r, c, separator_orientation, separator_index)\n\n    # Convert the final NumPy array back to a list of lists\n    return output_np.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 13163,
    "candidates_token_count": 1109,
    "total_token_count": 14272,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.224291,
  "retries": null
}