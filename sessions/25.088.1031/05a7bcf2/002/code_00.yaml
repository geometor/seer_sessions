task_description: Project colored pixels towards a dividing line, filling the path.

grid_properties:
  - dimensions: variable (up to 30x30)
  - background_color: white (0)

objects:
  - object: separator
    color: azure (8)
    shape: single-pixel-thick line (horizontal or vertical)
    location: spans the full grid width or height, dividing it into two regions
    role: acts as a target boundary for projections
  - object: source_pixel
    color: yellow (4) or red (2)
    location: anywhere except on the separator line
    role: initiates transformation (color change and projection)

transformations:
  - action: identify_separator
    input: input grid
    output: orientation ('h' or 'v') and index (row or column) of the azure separator
  - action: color_change
    input: source_pixel
    condition: if color is yellow (4)
    output_pixel_color: green (3) at the same location
    condition_else: if color is red (2)
      output_pixel_color: red (2) at the same location
  - action: project_path
    trigger: presence of a source_pixel (yellow or red)
    path_color: azure (8)
    path_direction: orthogonal (vertical for horizontal separator, horizontal for vertical separator) towards the separator
    path_start: pixel adjacent to the source_pixel's location, towards the separator
    path_end: pixel adjacent to the separator line (does not include the separator)
    overwrite_rule: only changes pixels if their original color in the input grid was white (0)

output_grid_generation:
  - step: Initialize output grid as a copy of the input grid.
  - step: Perform color_change for all yellow source pixels found in the input.
  - step: For each location corresponding to an original yellow or red source pixel:
      - Determine the projection path parameters (start, end, direction).
      - Iterate along the path coordinates.
      - For each coordinate on the path, if the corresponding pixel in the *output* grid is currently white (0), change it to azure (8). (Correction: check against the *output* grid state during path drawing to handle potential path overlaps correctly, ensuring only white is overwritten).

# Note: The previous code checked against the output grid state, which seems correct.
# The description "original color in the input grid was white (0)" might be simpler
# but subtly different if paths could potentially overlap. Sticking with
# "if the corresponding pixel in the output grid is currently white (0)" seems safer
# and matches the previous code's implementation detail.
