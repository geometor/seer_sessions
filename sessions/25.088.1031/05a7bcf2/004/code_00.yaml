InputGrid:
  Properties:
    - Dimensions: variable (up to 30x30)
    - Content: Pixels of colors 0-9

Objects:
  - Type: Separator
    Properties:
      - Color: Azure (8)
      - Shape: Single continuous horizontal or vertical line
      - Extent: Spans the full width or height of the grid
      - Uniqueness: Assumed to be the only such line in the grid (needs verification across all examples)
  - Type: SourcePixel
    InputColor:
      - Yellow (4)
      - Red (2)
    Location: Any cell not part of the Separator line

Actions:
  1. Identify: Locate the unique Separator line (its orientation and index).
  2. Copy: Create the OutputGrid as a copy of the InputGrid.
  3. Identify: Locate all SourcePixels in the InputGrid.
  4. TransformColor:
     - For each Yellow SourcePixel location in InputGrid:
       - Change the color at the corresponding location in OutputGrid to Green (3).
     - Red SourcePixels initially remain Red (2) in the OutputGrid (due to copy), but might be overwritten later.
  5. Project:
     - For each identified SourcePixel location (r_src, c_src):
       - Determine the orthogonal direction towards the Separator.
       - Define Path: Iterate through cells starting one step away from the SourcePixel location towards the Separator, stopping the iteration *before* reaching the Separator index.
       - DrawPath: For each cell (r_path, c_path) on the Path:
         - Change the color of OutputGrid[r_path, c_path] to Azure (8).
         # Crucial Refinement Needed Here based on examples:
         # - Does it *always* overwrite, or only specific colors (e.g., White(0))?
         # - What happens if paths overlap? (Likely last write wins).
         # - Does the source pixel itself get overwritten by a projection from another source?

# Potential Issues/Refinements needed based on Timeout/Error analysis:
# - Separator Finding: Confirm uniqueness and full span assumptions. Optimize search algorithm if performance is an issue. Handle cases with no or multiple separators if they occur.
# - Projection Overwrite Rule: Determine precisely which colors can be overwritten by the Azure projection path. The previous assumption (only White(0)) might be wrong.
# - Source Pixel Overwriting: Determine if a source pixel (especially Red ones) can be overwritten by a projection path originating from *another* source pixel.