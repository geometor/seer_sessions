{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nTransforms the input grid by replacing each magenta pixel (color 6) with the \ncolor of its nearest non-magenta neighbor. Distance is measured using \nManhattan distance (|row1 - row2| + |col1 - col2|).\n\nIf multiple non-magenta neighbors are equidistant, a tie-breaking rule is applied:\n1. Priority based on the relative direction of the non-magenta neighbor (source) \n   to the magenta pixel (target): Up is preferred, then Left, then Down, then Right.\n2. If still tied (e.g., equidistant sources in non-primary directions, or \n   multiple sources in the same highest-priority direction), the source with \n   the smallest row index is chosen.\n3. If still tied, the source with the smallest column index is chosen.\n\nNon-magenta pixels remain unchanged in the output grid.\n\nThis implementation uses an optimized multi-source Breadth-First Search (BFS) \nstarting from all non-magenta pixels simultaneously. Instead of storing lists \nof potential sources for ties, it stores only the single \"best\" source found \nso far for each grid cell, applying the tie-breaking rules whenever an equally \nshort path is discovered.\n\"\"\"\n\ndef compare_sources(source1_pos, source2_pos, target_r, target_c):\n    \"\"\"\n    Compares two source positions based on the tie-breaking rules relative \n    to a target position. Used to determine which source is 'better' when\n    they are equidistant from the target.\n\n    Args:\n        source1_pos (tuple): (row, col) of the first source.\n        source2_pos (tuple): (row, col) of the second source.\n        target_r (int): Row index of the target pixel.\n        target_c (int): Column index of the target pixel.\n\n    Returns:\n        int: -1 if source1 is better, 1 if source2 is better. \n             (Technically returns 0 if they are identical, but sources are\n              distinct points).\n    \"\"\"\n    sr1, sc1 = source1_pos\n    sr2, sc2 = source2_pos\n\n    # Helper to calculate priority based on relative direction\n    def get_priority(sr, sc, tr, tc):\n        dr = sr - tr\n        dc = sc - tc\n        if dr < 0 and dc == 0: return 0  # Up\n        if dr == 0 and dc < 0: return 1  # Left\n        if dr > 0 and dc == 0: return 2  # Down\n        if dr == 0 and dc > 0: return 3  # Right\n        return 4 # Other (diagonal or non-cardinal aligned)\n\n    p1 = get_priority(sr1, sc1, target_r, target_c)\n    p2 = get_priority(sr2, sc2, target_r, target_c)\n\n    # Compare based on priority\n    if p1 < p2: return -1\n    if p1 > p2: return 1\n\n    # Tie in priority: Compare based on row index\n    if sr1 < sr2: return -1\n    if sr1 > sr2: return 1\n\n    # Tie in row index: Compare based on column index\n    if sc1 < sc2: return -1\n    if sc1 > sc2: return 1\n    \n    # This case should not be reached if source positions are distinct\n    return 0 \n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid using the optimized multi-source BFS approach.\n\n    Args:\n        input_grid (list of lists): The input grid.\n\n    Returns:\n        list of lists: The transformed grid.\n    \"\"\"\n    grid = np.array(input_grid, dtype=int)\n    rows, cols = grid.shape\n    output_grid = np.copy(grid) # Initialize output grid\n\n    # Find coordinates of source (non-magenta) and target (magenta) pixels\n    source_pixels = [] # Stores tuples: ((r, c), color)\n    target_coords = [] # Stores tuples: (r, c)\n    has_magenta = False\n    has_non_magenta = False\n    for r in range(rows):\n        for c in range(cols):\n            color = grid[r, c]\n            if color == 6:\n                target_coords.append((r, c))\n                has_magenta = True\n            else:\n                source_pixels.append(((r, c), color))\n                has_non_magenta = True\n\n    # Handle edge cases: no targets or no sources\n    if not has_magenta or not has_non_magenta:\n        return input_grid\n\n    # Initialize distance grid: stores min distance from any source\n    distance_grid = np.full((rows, cols), float('inf'), dtype=float)\n    # Initialize source info grid: stores the (r, c, color) of the best source found so far\n    # Use object dtype to store tuples, initialize with None\n    source_info_grid = np.full((rows, cols), None, dtype=object) \n\n    # Initialize BFS queue with all source pixels\n    queue = deque()\n    for (sr, sc), color in source_pixels:\n        distance_grid[sr, sc] = 0\n        source_info_grid[sr, sc] = (sr, sc, color) # Store (source_r, source_c, source_color)\n        queue.append((sr, sc))\n\n    # --- Optimized Multi-Source BFS ---\n    while queue:\n        r, c = queue.popleft()\n        current_dist = distance_grid[r, c]\n        # The best source reaching (r, c) is stored in source_info_grid[r, c]\n        current_best_source_info = source_info_grid[r, c] \n        \n        # Explore neighbors (Up, Down, Left, Right) using Manhattan distance steps\n        for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nr, nc = r + dr, c + dc\n\n            # Check if neighbor is within grid bounds\n            if 0 <= nr < rows and 0 <= nc < cols:\n                new_dist = current_dist + 1\n\n                # --- Comparison Logic ---\n                # Case 1: Found a shorter path to the neighbor\n                if new_dist < distance_grid[nr, nc]:\n                    distance_grid[nr, nc] = new_dist\n                    # The best source for (r,c) is now the best for (nr,nc) via this path\n                    source_info_grid[nr, nc] = current_best_source_info \n                    queue.append((nr, nc)) # Add neighbor to queue for further exploration\n\n                # Case 2: Found an equally short path to the neighbor\n                elif new_dist == distance_grid[nr, nc]:\n                    # Need to compare the source associated with the current path \n                    # (current_best_source_info) against the source already known \n                    # for the neighbor (source_info_grid[nr, nc]).\n                    \n                    existing_best_source_info = source_info_grid[nr, nc]\n                    \n                    # Extract source positions for comparison\n                    candidate_source_pos = (current_best_source_info[0], current_best_source_info[1])\n                    existing_source_pos = (existing_best_source_info[0], existing_best_source_info[1])\n\n                    # Compare using the tie-breaking rules relative to the *neighbor* (nr, nc)\n                    comparison_result = compare_sources(candidate_source_pos, existing_source_pos, nr, nc)\n\n                    # If the new path's source is better (-1), update the neighbor's source info\n                    if comparison_result == -1:\n                        source_info_grid[nr, nc] = current_best_source_info\n                        # No need to re-enqueue: (nr, nc) is already in the queue \n                        # or has been processed at this distance level. We just updated\n                        # the source info that will be propagated *from* it later.\n\n    # --- Post-BFS: Assign colors to target pixels ---\n    for tr, tc in target_coords:\n        best_source_info = source_info_grid[tr, tc]\n        if best_source_info is not None:\n            # The third element of the tuple is the color\n            winning_color = best_source_info[2] \n            output_grid[tr, tc] = winning_color\n        # If best_source_info is None, it means the target was unreachable, \n        # which shouldn't happen if has_non_magenta is true, but we keep its \n        # original color (which is magenta 6) just in case.\n\n    # Convert the final NumPy array back to list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5042,
    "candidates_token_count": 2066,
    "total_token_count": 7108,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 34.934232,
  "retries": null
}