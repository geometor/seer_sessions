Task: Replace specific pixels based on proximity to other pixels.

Input_Objects:
  - type: Grid
    properties:
      - height: Integer (1-30)
      - width: Integer (1-30)
      - pixels: 2D array of integers (0-9 representing colors)

Output_Objects:
  - type: Grid
    properties:
      - height: Same as input grid height
      - width: Same as input grid width
      - pixels: 2D array of integers (0-9 representing colors)

Pixel_Types:
  - type: Target_Pixel
    identifier: Color is magenta (6)
    action: Needs replacement
  - type: Source_Pixel
    identifier: Color is not magenta (not 6)
    action: Can be used as replacement color; remains unchanged in the output grid.

Transformation_Rule:
  - action: Iterate through each pixel of the input grid.
  - condition: If a pixel is a Target_Pixel (magenta, 6).
    - sub_action: Find the 'nearest' Source_Pixel (non-magenta).
      - definition: 'Nearest' is defined by minimum Manhattan distance.
        - formula: distance = |row1 - row2| + |col1 - col2|
      - tie_breaking: If multiple Source_Pixels share the minimum Manhattan distance:
        - rule: Select the pixel based on directional priority relative to the Target_Pixel's location.
        - priority_order:
          1. Up (minimum row index, same column index)
          2. Left (same row index, minimum column index)
          3. Down (maximum row index, same column index)
          4. Right (same row index, maximum column index)
        - secondary_tie_breaking: If ties persist after directional priority (e.g., diagonal candidates), prioritize by minimum row index, then minimum column index. (Note: The provided code's `get_sort_key` implies this secondary rule, although pure Up/Left/Down/Right preference might resolve most ties.)
    - sub_action: Replace the Target_Pixel's color in the output grid with the color of the selected nearest Source_Pixel.
  - condition: If a pixel is a Source_Pixel (not magenta).
    - sub_action: Keep the pixel's color unchanged in the output grid.

Algorithm_Notes:
  - Current implementation uses nested loops causing O(rows * cols * num_magenta) complexity, leading to timeouts.
  - Recommended optimization: Use Breadth-First Search (BFS) starting from each Target_Pixel to find the nearest Source_Pixel efficiently, incorporating the tie-breaking rules into the search order.