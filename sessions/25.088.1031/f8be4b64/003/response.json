{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nIdentifies specific patterns in the input grid: a non-white (0) and non-green (3) \ncenter pixel surrounded by a green (3) '+' shape (orthogonal neighbors). \nFor each such pattern found, it draws horizontal and vertical lines extending \nacross the grid, centered on the pattern's center pixel. The lines use the \ncolor of the center pixel. These lines overwrite existing pixels in the output \ngrid, except for any green pixels that are part of any identified '+' shape.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by drawing lines from centers of green '+' patterns.\n\n    Args:\n        input_grid (np.ndarray): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.ndarray: A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    height, width = input_grid.shape\n    # Initialize output_grid as a copy of the input grid\n    output_grid = np.copy(input_grid)\n    \n    centers = []\n    protected_coords = set()\n\n    # 1. Find all centers and identify protected green '+' pixels\n    for r in range(height):\n        for c in range(width):\n            pixel_color = input_grid[r, c]\n\n            # Check if the pixel is a potential center (not white and not green)\n            if pixel_color != 0 and pixel_color != 3:\n                \n                # Define neighbor coordinates\n                neighbors_coords = [\n                    (r - 1, c),  # Up\n                    (r + 1, c),  # Down\n                    (r, c - 1),  # Left\n                    (r, c + 1)   # Right\n                ]\n                \n                is_center_of_plus = True\n                actual_neighbors = [] # Store valid neighbor coords\n                \n                # Check if all four neighbors are within bounds and are green\n                for nr, nc in neighbors_coords:\n                    if not (0 <= nr < height and 0 <= nc < width and input_grid[nr, nc] == 3):\n                        is_center_of_plus = False\n                        break\n                    actual_neighbors.append((nr, nc)) # Add valid green neighbor coord\n                \n                # If it's a confirmed center of a green '+' pattern\n                if is_center_of_plus:\n                    # Store center info\n                    centers.append({'r': r, 'c': c, 'color': pixel_color})\n                    # Add the coordinates of the green '+' arms to the protected set\n                    for coord in actual_neighbors:\n                        protected_coords.add(coord)\n\n    # 2. Draw lines for each found center\n    for center in centers:\n        r, c, center_color = center['r'], center['c'], center['color']\n        \n        # Draw horizontal line, avoiding protected green pixels\n        for j in range(width):\n            if (r, j) not in protected_coords:\n                output_grid[r, j] = center_color\n                \n        # Draw vertical line, avoiding protected green pixels\n        for i in range(height):\n            if (i, c) not in protected_coords:\n                output_grid[i, c] = center_color\n\n    # Ensure the center pixel itself has the correct color (it might be overwritten\n    # by another line if not protected, but drawing it last for its own lines ensures\n    # it's correct unless another line overwrites it later, which seems intended).\n    # Re-checking logic: The lines should overwrite everything except protected green cells.\n    # The previous loops already handle overwriting, including centers. No extra step needed.\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 10879,
    "candidates_token_count": 848,
    "total_token_count": 11727,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 23.673766,
  "retries": null
}