task_description: Processes multi-colored objects composed of nested rectangular layers by swapping the colors of symmetric layers.

elements:
  - type: background
    color: white (0)
    role: static_canvas
  - type: object
    count: variable (2 in this example)
    description: Contiguous regions of non-white pixels.
    properties:
      - shape: rectangular (overall)
      - structure: composed of nested rectangular layers or frames of uniform color.
      - layers: sequence of colors from outermost to innermost.

relationships:
  - type: spatial
    description: Objects are separate and do not overlap. Their positions relative to the grid boundaries are maintained.
  - type: layer_symmetry
    description: Layers within an object can be paired symmetrically (outermost with innermost, second outermost with second innermost, etc.).

actions:
  - name: identify_objects
    input: input_grid
    output: list_of_objects
    description: Find connected components of non-white pixels.
  - name: analyze_layers
    input: object
    output: sequence_of_layer_colors
    description: Determine the colors of the nested layers from outside to inside.
  - name: swap_layer_colors
    input: sequence_of_layer_colors
    output: new_sequence_of_layer_colors
    description: Reverse the order of colors in the sequence.
  - name: reconstruct_object
    input: object_structure, new_sequence_of_layer_colors
    output: transformed_object
    description: Apply the new color sequence to the corresponding layers of the original object structure.
  - name: compose_output
    input: list_of_transformed_objects, original_grid_dimensions, background_color
    output: output_grid
    description: Place the transformed objects onto a background grid of the original size.

transformation_rule:
  - For each object identified in the input grid:
    - Determine the ordered sequence of colors of its nested layers (outermost to innermost).
    - Reverse this color sequence.
    - Apply the reversed color sequence back onto the object's layer structure (outermost layer gets the first color of the reversed sequence, etc.).
  - Maintain the position and structure of each object.
  - Keep background (white) pixels unchanged.

example_train_1:
  object_1:
    input_layers: [azure(8), orange(7), yellow(4), green(3)]
    reversed_layers: [green(3), yellow(4), orange(7), azure(8)]
    output_layers: [green(3), yellow(4), orange(7), azure(8)]
  object_2:
    input_layers: [red(2), blue(1), green(3)]
    reversed_layers: [green(3), blue(1), red(2)]
    output_layers: [green(3), blue(1), red(2)]
