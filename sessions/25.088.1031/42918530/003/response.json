{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nThe transformation identifies white pixels (0) enclosed within shapes made of a single other color. \nIf a white pixel has exactly two orthogonal neighbors of the *enclosing* color, it is changed to that enclosing color. \nOtherwise, it remains white (0). Non-white pixels are unchanged.\n\"\"\"\n\ndef find_neighbors(r, c, height, width):\n    \"\"\"Yields coordinates of 4 orthogonal neighbors within grid bounds.\"\"\"\n    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n        nr, nc = r + dr, c + dc\n        if 0 <= nr < height and 0 <= nc < width:\n            yield nr, nc\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on the neighbor rule.\n\n    For each white pixel (0) in the input grid:\n    1. Check its four orthogonal neighbors.\n    2. Count the number of non-white neighbors and identify their unique colors.\n    3. If there are exactly two non-white neighbors AND they both have the SAME color,\n       change the white pixel to that color in the output grid.\n    4. Otherwise, the pixel remains white (or its original color if not white).\n    \"\"\"\n    input_grid_np = np.array(input_grid, dtype=int)\n    height, width = input_grid_np.shape\n    output_grid = np.copy(input_grid_np)\n\n    # Iterate through each pixel of the input grid\n    for r in range(height):\n        for c in range(width):\n            # Check if the current pixel is white (0)\n            if input_grid_np[r, c] == 0:\n                \n                non_white_neighbor_colors = []\n                # Check orthogonal neighbors\n                for nr, nc in find_neighbors(r, c, height, width):\n                    neighbor_color = input_grid_np[nr, nc]\n                    # If neighbor is not white, record its color\n                    if neighbor_color != 0:\n                        non_white_neighbor_colors.append(neighbor_color)\n                \n                # Check the conditions for changing the color\n                # Condition 1: Exactly two non-white neighbors\n                if len(non_white_neighbor_colors) == 2:\n                    # Condition 2: Both non-white neighbors have the same color\n                    fill_color = non_white_neighbor_colors[0]\n                    if non_white_neighbor_colors[1] == fill_color:\n                         # If both conditions met, change the pixel in the output grid\n                        output_grid[r, c] = fill_color\n            \n            # If the pixel is not white, or if the conditions are not met for a white pixel,\n            # it remains unchanged (already copied to output_grid).\n\n    # Return the transformed grid as a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 11013,
    "candidates_token_count": 674,
    "total_token_count": 11687,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 98.420885,
  "retries": null
}