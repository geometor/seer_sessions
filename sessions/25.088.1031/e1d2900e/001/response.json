{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransform the input grid by changing the color of white pixels (0) to blue (1) \nif they are directly adjacent (horizontally or vertically) to any red pixel (2). \nAll original red (2) and blue (1) pixels, as well as white pixels not adjacent \nto red pixels, remain unchanged.\n\"\"\"\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid: A 2D numpy array representing the input grid.\n\n    Returns:\n        A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    # Initialize output_grid as a copy of the input grid\n    output_grid = np.copy(input_grid)\n    height, width = input_grid.shape\n\n    # Define relative coordinates for adjacent neighbors (up, down, left, right)\n    neighbors = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    # Iterate through each cell of the input grid\n    for r in range(height):\n        for c in range(width):\n            # Check if the current cell in the input grid is white (0)\n            if input_grid[r, c] == 0:\n                # Check its adjacent neighbors\n                for dr, dc in neighbors:\n                    nr, nc = r + dr, c + dc\n                    # Check if the neighbor coordinates are within grid bounds\n                    if 0 <= nr < height and 0 <= nc < width:\n                        # Check if the neighbor in the *input* grid is red (2)\n                        if input_grid[nr, nc] == 2:\n                            # If a red neighbor is found, change the corresponding\n                            # cell in the *output* grid to blue (1)\n                            output_grid[r, c] = 1\n                            # Once changed, no need to check other neighbors for this cell\n                            break \n                            \n    # Return the modified grid\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 9505,
    "candidates_token_count": 470,
    "total_token_count": 9975,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 8.041863,
  "retries": null
}