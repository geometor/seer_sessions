{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nTransforms the input grid based on the following rule:\nA white pixel (0) is changed to blue (1) if and only if:\n1. It is orthogonally adjacent to at least one red pixel (2) in the input grid.\n2. It is reachable from at least one original blue pixel (1) in the input grid \n   via a path consisting only of orthogonally connected white pixels (0), \n   potentially including the target white pixel itself.\n   (In other words, the white pixel belongs to a connected component of white \n   pixels that touches or contains an original blue pixel).\n\nAll other pixels (original red, original blue, and white pixels not meeting \nboth conditions) remain unchanged.\n\"\"\"\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid: A 2D numpy array representing the input grid.\n\n    Returns:\n        A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    height, width = input_grid.shape\n    output_grid = np.copy(input_grid)\n    \n    # Define orthogonal neighbors delta coordinates\n    neighbors = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    # --- Step 1: Identify potential target pixels ---\n    # Find all white pixels (0) that are orthogonally adjacent to red pixels (2).\n    potential_targets = set()\n    for r in range(height):\n        for c in range(width):\n            if input_grid[r, c] == 0: # If the pixel is white\n                is_adj_to_red = False\n                # Check all orthogonal neighbors\n                for dr, dc in neighbors:\n                    nr, nc = r + dr, c + dc\n                    # Check if neighbor is within bounds and is red\n                    if 0 <= nr < height and 0 <= nc < width and input_grid[nr, nc] == 2:\n                        is_adj_to_red = True\n                        break # Found a red neighbor, no need to check others\n                if is_adj_to_red:\n                    potential_targets.add((r, c)) # Mark this white pixel as a potential target\n\n    # --- Step 2: Identify starting points for BFS/Flood Fill ---\n    # Find all original blue pixels (1) which will act as seeds for the search.\n    start_nodes = []\n    for r in range(height):\n        for c in range(width):\n            if input_grid[r, c] == 1:\n                start_nodes.append((r, c))\n\n    # --- Step 3: Perform BFS to find reachable white pixels from blue pixels ---\n    # Use Breadth-First Search (BFS) starting from original blue pixels (1)\n    # to find all connected white pixels (0).\n    # Keep track of which potential targets are encountered during this search.\n    \n    queue = deque()\n    visited = set() # Keep track of visited pixels (blue and white) to avoid cycles and redundant work\n    confirmed_targets = set() # Store white pixels that are both potential targets and reachable from blue\n\n    # Initialize queue and visited set with original blue pixels\n    for r, c in start_nodes:\n        if (r, c) not in visited:\n             queue.append((r, c))\n             visited.add((r, c))\n\n    # Start BFS. The search expands through connected white pixels.\n    while queue:\n        r, c = queue.popleft() # Get the next pixel coordinates from the queue\n\n        # Explore orthogonal neighbors of the current pixel\n        for dr, dc in neighbors:\n            nr, nc = r + dr, c + dc\n\n            # Check if the neighbor is within grid bounds\n            if 0 <= nr < height and 0 <= nc < width:\n                # Check if the neighbor is white (0) and has not been visited yet\n                if input_grid[nr, nc] == 0 and (nr, nc) not in visited:\n                    visited.add((nr, nc)) # Mark as visited\n                    queue.append((nr, nc)) # Add to the queue to explore its neighbors later\n                    \n                    # Crucially, check if this newly reached white pixel is one of the potential targets\n                    if (nr, nc) in potential_targets:\n                        # If yes, it meets both conditions (adjacent to red AND reachable from blue via white path)\n                        confirmed_targets.add((nr, nc)) \n                \n                # We only expand the search *through* white pixels. \n                # Blue pixels start the search but don't propagate it further once reached again,\n                # as they are already handled by the initial seeding or added to visited.\n                # Red pixels block the search.\n\n    # --- Step 4: Apply transformation to confirmed targets ---\n    # Modify the output grid: change the color of confirmed target pixels to blue (1).\n    for r, c in confirmed_targets:\n        output_grid[r, c] = 1 # Change color to blue\n\n    # Return the modified grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 8358,
            "end_index": 8492,
            "uri": "https://github.com/AshwiniBRamesh/DataScience",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 13733,
    "candidates_token_count": 1172,
    "total_token_count": 14905,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 44.142922,
  "retries": null
}