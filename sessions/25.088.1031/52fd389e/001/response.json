{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nIdentifies connected components of yellow (4) pixels in the input grid. \nFor each yellow component:\n1. Determines its bounding box.\n2. Finds the unique non-yellow, non-white color pixel located within that bounding box in the input grid. This is the 'fill_color'.\n3. Calculates an expanded bounding box by extending the original one pixel outwards in all directions (including diagonals).\n4. Colors all pixels within this expanded bounding box that were originally white (0) in the input grid with the 'fill_color'. The original yellow shape and its internal colored pixels remain unchanged.\n\"\"\"\n\ndef find_objects(grid, color):\n    \"\"\"Finds all connected objects of a given color in the grid.\"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == color and not visited[r, c]:\n                # Start a Breadth-First Search (BFS) for a new object\n                obj_coords = set()\n                q = [(r, c)]\n                visited[r, c] = True\n                \n                while q:\n                    row, col = q.pop(0)\n                    obj_coords.add((row, col))\n\n                    # Check 8 neighbors (including diagonals)\n                    for dr in [-1, 0, 1]:\n                        for dc in [-1, 0, 1]:\n                            if dr == 0 and dc == 0:\n                                continue\n                            nr, nc = row + dr, col + dc\n                            # Check boundaries and if neighbor has the target color and not visited\n                            if 0 <= nr < rows and 0 <= nc < cols and \\\n                               grid[nr, nc] == color and not visited[nr, nc]:\n                                visited[nr, nc] = True\n                                q.append((nr, nc))\n                if obj_coords:\n                    objects.append(list(obj_coords)) # Store as list of tuples\n    return objects\n\ndef get_bounding_box(object_coords):\n    \"\"\"Calculates the bounding box (min_row, min_col, max_row, max_col) for a set of coordinates.\"\"\"\n    if not object_coords:\n        return None\n    rows = [r for r, c in object_coords]\n    cols = [c for r, c in object_coords]\n    return min(rows), min(cols), max(rows), max(cols)\n\ndef find_internal_color(grid, bounding_box):\n    \"\"\"Finds the first non-background (0), non-yellow (4) color within a bounding box.\"\"\"\n    min_r, min_c, max_r, max_c = bounding_box\n    for r in range(min_r, max_r + 1):\n        for c in range(min_c, max_c + 1):\n            color = grid[r, c]\n            if color != 0 and color != 4:\n                return color\n    return None # Should not happen based on examples\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule: finds yellow objects, determines their internal \n    color, and draws a frame of that color around each object.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # 1. Find all yellow objects\n    yellow_objects = find_objects(input_grid, 4)\n\n    # 2. Process each yellow object\n    for obj_coords in yellow_objects:\n        if not obj_coords:\n            continue\n            \n        # 2a. Get bounding box\n        bbox = get_bounding_box(obj_coords)\n        if bbox is None:\n            continue\n        min_r, min_c, max_r, max_c = bbox\n\n        # 2b. Find the internal fill color within the bounding box\n        fill_color = find_internal_color(input_grid, bbox)\n        if fill_color is None:\n            # If no internal color found (unexpected), skip this object\n            continue\n\n        # 2c. Calculate expanded bounding box coordinates, clamped to grid boundaries\n        exp_min_r = max(0, min_r - 1)\n        exp_min_c = max(0, min_c - 1)\n        exp_max_r = min(rows - 1, max_r + 1)\n        exp_max_c = min(cols - 1, max_c + 1)\n\n        # 2d. Iterate through the expanded bounding box\n        for r in range(exp_min_r, exp_max_r + 1):\n            for c in range(exp_min_c, exp_max_c + 1):\n                # 2e. If the cell in the *input* grid is white (0), color it in the *output* grid\n                if input_grid[r, c] == 0:\n                    output_grid[r, c] = fill_color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 9874,
    "candidates_token_count": 1178,
    "total_token_count": 11052,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.535677,
  "retries": null
}