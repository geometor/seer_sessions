task_description: "For each connected yellow object in the input grid, find a unique non-yellow, non-white pixel within its bounding box. Determine the bounding box of the yellow object. Create a frame one pixel thick surrounding this bounding box, colored with the found unique color. This frame overwrites existing pixels."

grid_properties:
  size: Variable (up to 30x30)
  colors: 0-9 mapped to specific colors. White (0) is background. Yellow (4) is the primary object identifier.

objects:
  - type: Primary Object
    color: 4 (Yellow)
    shape: Contiguous block (connected including diagonals)
    properties:
      - bounding_box: The smallest rectangle enclosing the object.
      - internal_color_pixel: A pixel within the bounding box whose color is not Yellow (4) and not White (0). There might be multiple pixels of this color, but the color itself is unique per yellow object in the examples.

actions:
  - name: Identify Primary Objects
    input: grid
    output: List of yellow objects (sets of coordinates)
    condition: Find all distinct connected components of yellow pixels.

  - name: Determine Properties for each Primary Object
    input: grid, yellow_object_coordinates
    output: bounding_box, internal_color
    steps:
      - Calculate the bounding box (min_row, min_col, max_row, max_col) from object coordinates.
      - Search within the bounding box in the input grid for the first pixel that is not yellow (4) and not white (0). Record its color as internal_color.

  - name: Construct Output Frame
    input: input_grid, bounding_box, internal_color
    output: modified_grid
    steps:
      - Initialize output_grid as a copy of input_grid.
      - Calculate the expanded bounding box coordinates (frame boundaries):
          frame_min_r = max(0, min_row - 1)
          frame_min_c = max(0, min_col - 1)
          frame_max_r = min(grid_height - 1, max_row + 1)
          frame_max_c = min(grid_width - 1, max_col + 1)
      - Iterate through all cells (r, c) within the expanded bounding box (from frame_min_r to frame_max_r, frame_min_c to frame_max_c).
      - If the cell (r, c) is on the perimeter of the expanded bounding box (i.e., r == frame_min_r or r == frame_max_r or c == frame_min_c or c == frame_max_c):
          Set output_grid[r, c] = internal_color (overwriting the previous value).

final_output: The modified grid after processing all yellow objects. If multiple frames overlap, the later processed frame's color takes precedence in the overlapping region based on typical iteration order, although examples don't show complex overlaps.