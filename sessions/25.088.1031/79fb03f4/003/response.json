{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nPerforms a flood fill operation on the input grid.\nThe fill originates from all blue (1) pixels simultaneously.\nIt spreads into orthogonally adjacent white (0) pixels.\nThe fill is blocked by gray (5) pixels, azure (8) pixels, and the grid boundaries.\nBlue (1), gray (5), and azure (8) pixels in the input remain unchanged in the output.\nOnly white (0) pixels reachable from a blue (1) pixel without crossing a boundary are changed to blue (1).\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by performing a flood fill operation starting from\n    blue (1) pixels. The fill spreads through adjacent white (0) pixels and is\n    blocked by gray (5) and azure (8) pixels, as well as the grid boundaries.\n\n    Args:\n        input_grid (list[list[int]]): A 2D list representing the input grid.\n\n    Returns:\n        list[list[int]]: A 2D list representing the transformed output grid.\n    \"\"\"\n\n    # Convert input list of lists to a NumPy array for efficient processing\n    input_np = np.array(input_grid, dtype=int)\n    # Initialize the output grid as a copy of the input grid\n    output_np = np.copy(input_np)\n    height, width = input_np.shape\n\n    # Define fill color, target color, and boundary colors\n    fill_color = 1          # Blue\n    target_color = 0        # White\n    boundary_colors = {5, 8} # Gray and Azure\n\n    # Initialize a queue for Breadth-First Search (BFS)\n    queue = deque()\n    # Initialize a set to keep track of visited locations to prevent cycles and re-processing\n    visited = set()\n\n    # Find initial seed locations (pixels with value 1) and add them to the queue and visited set\n    for r in range(height):\n        for c in range(width):\n            if input_np[r, c] == fill_color:\n                seed_location = (r, c)\n                if seed_location not in visited:\n                    queue.append(seed_location)\n                    visited.add(seed_location)\n\n    # Perform the flood fill using BFS\n    while queue:\n        r, c = queue.popleft()\n\n        # Explore orthogonal neighbors (up, down, left, right)\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n            neighbor_location = (nr, nc)\n\n            # Check if the neighbor is within the grid boundaries\n            if 0 <= nr < height and 0 <= nc < width:\n                # Check if the neighbor location has already been visited\n                if neighbor_location not in visited:\n                    # Mark the neighbor as visited regardless of its color to avoid re-checking\n                    visited.add(neighbor_location)\n\n                    # Check the color of the neighbor pixel in the *input* grid\n                    neighbor_color = input_np[nr, nc]\n\n                    # If the neighbor is the target color (white), fill it and add to queue\n                    if neighbor_color == target_color:\n                        output_np[nr, nc] = fill_color\n                        queue.append(neighbor_location)\n                    # If the neighbor is a boundary color, it stops the fill in this direction\n                    # but is marked visited. No action needed here as it's already added to visited.\n                    # elif neighbor_color in boundary_colors:\n                    #     pass # Boundary blocks fill, already marked visited\n                    # If the neighbor is already the fill color, it means it's part of another\n                    # seed or already filled region. Already marked visited.\n                    # elif neighbor_color == fill_color:\n                    #     pass # Already fill color, already marked visited\n\n    # Convert the resulting NumPy array back to a list of lists\n    output_grid = output_np.tolist()\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 24321,
    "candidates_token_count": 927,
    "total_token_count": 25248,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 19.85336,
  "retries": null
}