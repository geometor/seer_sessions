{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nTransforms the input grid based on the following rule:\n1. Identify all connected components of white (0) pixels in the input grid. Connectivity is defined by orthogonal adjacency. Movement between white pixels is blocked by gray (5), azure (8), blue (1), and the grid boundaries.\n2. Identify the locations of all initial blue (1) pixels in the input grid.\n3. For each connected component of white pixels, check if any pixel within that component is orthogonally adjacent to any of the initial blue (1) pixels.\n4. If a white component is adjacent to an initial blue pixel, change all pixels belonging to that component to blue (1) in the output grid.\n5. Pixels that were initially blue (1), gray (5), or azure (8) remain unchanged in the output grid. White components not adjacent to any initial blue pixel also remain unchanged (white).\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Fills connected components of white pixels if they are adjacent to an initial blue pixel.\n\n    Args:\n        input_grid (list[list[int]]): A 2D list representing the input grid.\n\n    Returns:\n        list[list[int]]: A 2D list representing the transformed output grid.\n    \"\"\"\n    input_np = np.array(input_grid, dtype=int)\n    output_np = np.copy(input_np)\n    height, width = input_np.shape\n\n    # Define colors\n    white = 0\n    blue = 1\n    gray = 5\n    azure = 8\n    boundary_colors = {gray, azure, blue} # Blue is also a boundary for white components\n\n    # Find initial blue pixel locations\n    initial_blue_locations = set(tuple(coord) for coord in np.argwhere(input_np == blue))\n\n    # Keep track of visited white pixels during component finding\n    visited_white = np.zeros_like(input_np, dtype=bool)\n    \n    # List to store coordinates of pixels in components that should be filled blue\n    pixels_to_fill = []\n\n    # Iterate through each cell to find connected components of white pixels\n    for r in range(height):\n        for c in range(width):\n            # If it's a white pixel and hasn't been visited yet, start BFS to find its component\n            if input_np[r, c] == white and not visited_white[r, c]:\n                component_pixels = set()\n                is_adjacent_to_blue = False\n                queue = deque([(r, c)])\n                visited_white[r, c] = True\n                component_pixels.add((r, c))\n\n                while queue:\n                    curr_r, curr_c = queue.popleft()\n\n                    # Check adjacency to initial blue pixels for the current pixel\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = curr_r + dr, curr_c + dc\n                        if 0 <= nr < height and 0 <= nc < width:\n                            if (nr, nc) in initial_blue_locations:\n                                is_adjacent_to_blue = True\n                                # No need to break here, continue BFS to find the whole component\n\n                    # Explore neighbors for BFS (only add unvisited white pixels)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = curr_r + dr, curr_c + dc\n                        # Check bounds\n                        if 0 <= nr < height and 0 <= nc < width:\n                            # Check if neighbor is white and not visited\n                            if input_np[nr, nc] == white and not visited_white[nr, nc]:\n                                visited_white[nr, nc] = True\n                                queue.append((nr, nc))\n                                component_pixels.add((nr, nc))\n                \n                # After BFS for the component is complete, if it was adjacent to blue, mark its pixels for filling\n                if is_adjacent_to_blue:\n                    pixels_to_fill.extend(list(component_pixels))\n\n    # Fill the marked pixels in the output grid\n    for r_fill, c_fill in pixels_to_fill:\n        output_np[r_fill, c_fill] = blue\n\n    # Convert the resulting NumPy array back to a list of lists\n    output_grid = output_np.tolist()\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7676,
    "candidates_token_count": 1030,
    "total_token_count": 8706,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 19.036913,
  "retries": null
}