{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nPerform a flood fill originating from initial blue (1) pixels into adjacent white (0) areas, \nbounded by gray (5), azure (8) pixels, and grid boundaries. \nInitial blue, gray, and azure pixels remain unchanged. White pixels not reached by the fill\nalso remain unchanged.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Applies a flood fill transformation to the input grid.\n\n    Args:\n        input_grid (list[list[int]]): A 2D list representing the input grid.\n\n    Returns:\n        list[list[int]]: A 2D list representing the transformed output grid.\n    \"\"\"\n    input_np = np.array(input_grid, dtype=int)\n    output_np = np.copy(input_np) # Initialize output grid as a copy of input\n    height, width = input_np.shape\n\n    # Define colors\n    white = 0\n    blue = 1\n    gray = 5\n    azure = 8\n    # Barrier colors (gray, azure) and fill color (blue) are implicitly handled by the logic\n    # The fill only enters 'white' cells and stops otherwise.\n\n    # Initialize queue for Breadth-First Search (BFS)\n    queue = deque()\n\n    # Find initial \"seed\" pixels for the flood fill\n    # These are white pixels adjacent to initial blue pixels\n    for r in range(height):\n        for c in range(width):\n            # Check only initial blue pixels as sources\n            if input_np[r, c] == blue:\n                # Check orthogonal neighbors\n                for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                    nr, nc = r + dr, c + dc\n\n                    # Check bounds\n                    if 0 <= nr < height and 0 <= nc < width:\n                        # Check if neighbor is white in input AND still white in output (not yet processed/queued)\n                        if input_np[nr, nc] == white and output_np[nr, nc] == white:\n                            # Mark this seed pixel as blue in the output\n                            output_np[nr, nc] = blue\n                            # Add its coordinates to the queue to start the fill from here\n                            queue.append((nr, nc))\n\n    # Perform the flood fill using BFS\n    while queue:\n        # Get the next pixel to process\n        r, c = queue.popleft()\n\n        # Explore orthogonal neighbors\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n\n            # Check bounds\n            if 0 <= nr < height and 0 <= nc < width:\n                # Check if the neighbor was originally white AND is currently still white in the output grid\n                # This means it's a fillable pixel that hasn't been reached yet.\n                # We check input_np[nr, nc] == white because barriers (gray, azure) or initial blue \n                # should not be overwritten, even if the flood reaches them.\n                if input_np[nr, nc] == white and output_np[nr, nc] == white:\n                     # Change the neighbor's color to blue in the output grid\n                    output_np[nr, nc] = blue\n                    # Add the neighbor to the queue to continue the fill from there\n                    queue.append((nr, nc))\n\n    # Convert the resulting NumPy array back to a list of lists\n    output_grid = output_np.tolist()\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 12403,
    "candidates_token_count": 827,
    "total_token_count": 13230,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.347964,
  "retries": null
}