task_description: Tile a single input object across the output grid with color modifications based on tile position and boundary clipping.

common_properties:
  background_color: 0 # white
  tiling_border: 1 # 1 pixel white border between tiles
  object_finding: Find the single contiguous non-white object in the input.

example_1:
  grid_size: [23, 28]
  input_object:
    color: 7 # orange
    shape_name: H
    size: [5, 3] # height, width
    top_left: [4, 5] # row, col
    pixel_count: 11
  output_pattern:
    tile_colors_present: [7, 6] # orange, magenta
    tiling_start: [4, 5] # Same as input object top-left
    tiling_grid_indices: # (j, i) 0-based tile row/col index
      - color: 7 (original) if (i+1) % 3 != 0 and j == 0
      - color: 6 (magenta) if (i+1) % 3 == 0
      - color: 0 (background) if (i+1) % 3 != 0 and j > 0
    boundary_handling: Tiles are clipped at the grid edges. Partial tiles are drawn.
    estimated_full_tiles: [3, 6] # vertical, horizontal
    actual_tiles_drawn: 12 (some partial)

example_2:
  grid_size: [23, 28]
  input_object:
    color: 7 # orange
    shape_name: C
    size: [3, 3] # height, width
    top_left: [5, 3] # row, col
    pixel_count: 8
  output_pattern:
    tile_colors_present: [7, 6] # orange, magenta
    tiling_start: [5, 3] # Same as input object top-left
    tiling_grid_indices: # (j, i) 0-based tile row/col index
      - color: 7 (original) if (i+1) % 3 != 0 and j == 0
      - color: 6 (magenta) if (i+1) % 3 == 0
      - color: 0 (background) if (i+1) % 3 != 0 and j > 0
    boundary_handling: Tiles are clipped at the grid edges. Partial tiles are drawn.
    estimated_full_tiles: [4, 6] # vertical, horizontal
    actual_tiles_drawn: 15 (some partial)
