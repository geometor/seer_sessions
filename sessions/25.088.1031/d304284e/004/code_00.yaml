task_description: Tile a single non-background object across the grid with specific color rules based on tile position.
background_color: 0 # white
highlight_color: 6 # magenta

input_features:
  - Single contiguous non-background object.
  - Object color varies (e.g., orange).
  - Object shape varies (e.g., 'H', '0').
  - Object position varies.
  - Grid size varies.

output_features:
  - Grid dimensions match input.
  - Background is white (0).
  - Input object shape is tiled across the grid.
  - Tiling starts at the input object's original top-left coordinate.
  - Tiles are separated by a 1-pixel white border vertically and horizontally.
  - Tiling proceeds downwards and rightwards, stopping if a tile would exceed grid boundaries.
  - Tile color depends on the zero-based tile row index (j) and tile column index (i).

transformation_steps:
  1. Find the single contiguous non-background object in the input grid.
  2. Identify its color (original_color), coordinates, and calculate its bounding box (min_r, min_c, max_r, max_c).
  3. Determine the object's height (obj_height = max_r - min_r + 1) and width (obj_width = max_c - min_c + 1).
  4. Extract the object's shape relative to its top-left corner (relative_shape).
  5. Initialize an output grid of the same dimensions as the input, filled with the background color (0).
  6. Iterate through potential tile row starting positions:
     - `start_r = min_r + j * (obj_height + 1)` where `j` starts at 0 and increments.
     - Break the outer loop if `start_r >= grid_height`.
  7. For each `j`, iterate through potential tile column starting positions:
     - `start_c = min_c + i * (obj_width + 1)` where `i` starts at 0 and increments.
     - Break the inner loop if `start_c >= grid_width`.
  8. Check if the current tile fits completely within the grid boundaries:
     - `fits = (start_r + obj_height <= grid_height) and (start_c + obj_width <= grid_width)`
  9. If the tile fits:
     - Determine the `tile_color`:
       - If `(i + 1) % 3 == 0`: `tile_color = highlight_color` (magenta, 6)
       - Else (if `(i + 1) % 3 != 0`):
         - If `j == 0`: `tile_color = original_color`
         - If `j > 0`: `tile_color = background_color` (white, 0)
     - Place the object's `relative_shape` onto the output grid at `(start_r, start_c)` using the determined `tile_color`.
  10. Return the completed output grid.