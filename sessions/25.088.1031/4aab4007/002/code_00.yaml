task_context:
  grid_properties:
    - Input and output grids have the same dimensions.
    - Grids contain pixels with integer values 0-9 representing colors.
    - white: 0, blue: 1, red: 2, green: 3, yellow: 4, gray: 5, magenta: 6, orange: 7, azure: 8, maroon: 9.
  structure:
    - Grids have distinct border regions and a central pattern area.
    - outer_border: Rows 0 and H-1, Columns 0 and W-1 are typically blue (1). These pixels remain unchanged in the output.
    - inner_border: Row 2 and Column 2 are typically yellow (4) in the input. Row H-2 and Column W-2 are also border-like. These may change in the output *if* they contain white pixels.
    - core_pattern_area (for color lookup): Defined by rows 3 to H-2 and columns 3 to W-2 in the input grid. This area contains the definitive diagonal color patterns.
    - target_pixels (for filling): All white (0) pixels in the input grid, *except* those on the absolute outer border (row 0, H-1, col 0, W-1).
transformation:
  action: Fill white pixels.
  rule: Diagonal color propagation.
  details:
    - Iterate through each pixel (r, c) of the input grid, excluding the outer_border.
    - If the pixel input[r, c] is white (0):
        - Calculate the diagonal constant k = r + c.
        - Find the fill_color:
            - Search within the core_pattern_area of the *input* grid.
            - Iterate through column indices c_s from 3 to W-2.
            - Calculate the corresponding row index r_s = k - c_s.
            - Check if r_s is within the core_pattern_area row bounds (3 to H-2).
            - If input[r_s, c_s] is not white (0), this is the fill_color. Stop searching for this diagonal.
        - Set the output pixel output[r, c] to the found fill_color.
    - If the pixel input[r, c] is not white (0) and not on the outer_border:
        - Copy the color directly: output[r, c] = input[r, c].
    - Pixels on the outer_border are copied directly: output[r, c] = input[r, c].