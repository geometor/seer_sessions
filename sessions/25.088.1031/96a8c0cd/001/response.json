{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nPerform a flood fill operation starting from the single red (2) pixel in the input grid.\nThe fill color is red (2).\nThe fill expands to adjacent white (0) pixels (up, down, left, right).\nThe fill stops expanding when it encounters a blue (1) pixel, a green (3) pixel, or the grid boundary.\nThe original red, blue, and green pixels remain unchanged.\n\"\"\"\n\ndef find_seed_point(grid, color):\n    \"\"\"Finds the first pixel with the specified color.\"\"\"\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == color:\n                return (r, c)\n    return None # Should not happen based on task description\n\ndef transform(input_grid):\n    \"\"\"\n    Applies a flood fill originating from the red pixel, bounded by blue, green pixels, and grid edges.\n\n    Args:\n        input_grid (np.ndarray): The input grid.\n\n    Returns:\n        np.ndarray: The transformed output grid.\n    \"\"\"\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n    rows, cols = output_grid.shape\n\n    # Define colors\n    background_color = 0\n    boundary_color_1 = 1\n    seed_color = 2\n    fill_color = 2\n    boundary_color_2 = 3\n\n    # Find the starting point for the flood fill (the red pixel)\n    seed_coords = find_seed_point(input_grid, seed_color)\n    \n    if not seed_coords:\n        # If no seed point is found (shouldn't happen per task description), return original\n        return output_grid \n\n    # Initialize a queue for BFS flood fill and a set to track visited cells\n    queue = deque([seed_coords])\n    visited = {seed_coords}\n\n    # Process the queue\n    while queue:\n        r, c = queue.popleft()\n\n        # Check neighbors (up, down, left, right)\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n\n            # Check if neighbor is within bounds\n            if 0 <= nr < rows and 0 <= nc < cols:\n                # Check if the neighbor hasn't been visited\n                if (nr, nc) not in visited:\n                    # Check if the neighbor is a background cell in the *original* input grid\n                    if input_grid[nr, nc] == background_color:\n                        # Mark as visited\n                        visited.add((nr, nc))\n                        # Change color in the output grid\n                        output_grid[nr, nc] = fill_color\n                        # Add to queue for further processing\n                        queue.append((nr, nc))\n                    else:\n                        # If it's a boundary or already filled (not background), mark as visited\n                        # to prevent re-checking, but don't enqueue or change color.\n                        visited.add((nr, nc))\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5960,
    "candidates_token_count": 738,
    "total_token_count": 6698,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.711819,
  "retries": null
}