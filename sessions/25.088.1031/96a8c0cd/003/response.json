{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nPerform a flood fill operation starting from the single red (2) pixel in the input grid.\nThe fill color is red (2).\nThe fill expands to adjacent white (0) pixels (up, down, left, right).\nThe fill stops expanding when it encounters a blue (1) pixel, a green (3) pixel, or the grid boundary.\nThe original red, blue, and green pixels remain unchanged. White pixels not reachable from the red seed\nthrough a path of white pixels (without crossing blue or green) also remain unchanged.\n\"\"\"\n\ndef find_seed_point(grid, color):\n    \"\"\"Finds the coordinates (row, col) of the first pixel with the specified color.\"\"\"\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == color:\n                return (r, c)\n    return None # Should not happen based on task description if seed always exists\n\ndef transform(input_grid):\n    \"\"\"\n    Applies a bounded flood fill originating from the red pixel (2), filling\n    reachable white pixels (0) with red (2), bounded by blue (1), green (3),\n    and grid edges.\n\n    Args:\n        input_grid (np.ndarray): The input grid.\n\n    Returns:\n        np.ndarray: The transformed output grid.\n    \"\"\"\n    rows, cols = input_grid.shape\n    # Initialize output_grid as a copy of the input to preserve original boundary/seed pixels\n    output_grid = np.copy(input_grid)\n\n    # Define color constants based on the problem description\n    background_color = 0 # White - the medium to be filled\n    boundary_color_1 = 1 # Blue - stops the fill\n    seed_color = 2       # Red - the starting point of the fill\n    fill_color = 2       # Red - the color used to fill\n    boundary_color_2 = 3 # Green - stops the fill\n\n    # 1. Find the starting point for the flood fill (the single red pixel)\n    seed_coords = find_seed_point(input_grid, seed_color)\n\n    # If no seed point is found (shouldn't happen per task description), return original\n    if not seed_coords:\n        return output_grid\n\n    # 2. Perform a Breadth-First Search (BFS) to find all white cells reachable from the seed\n    #    without crossing boundaries (blue, green, or grid edges).\n    reachable_white_cells = set() # Store coordinates of white cells to be filled\n    queue = deque([seed_coords])     # Queue for BFS, starting with the seed\n    visited = {seed_coords}          # Set to keep track of all visited coordinates (seed, white, boundary)\n\n    while queue:\n        # Get the next coordinate to process\n        r, c = queue.popleft()\n\n        # Explore the 4 adjacent neighbors (up, down, left, right)\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n\n            # Check if the neighbor is within the grid boundaries\n            if not (0 <= nr < rows and 0 <= nc < cols):\n                continue # Skip if out of bounds\n\n            # Check if the neighbor has already been visited\n            if (nr, nc) in visited:\n                continue # Skip if already processed\n\n            # Mark the neighbor as visited to prevent reprocessing\n            visited.add((nr, nc))\n\n            # Get the color of the neighbor in the *original* input grid\n            neighbor_color = input_grid[nr, nc]\n\n            # If the neighbor is a white pixel (background_color):\n            # It's part of the area to be filled. Add it to our set of\n            # reachable white cells and add it to the queue to explore from it.\n            if neighbor_color == background_color:\n                reachable_white_cells.add((nr, nc))\n                queue.append((nr, nc))\n\n            # If the neighbor is a boundary color (blue or green) or any other non-white color:\n            # The fill stops here for this path. We've already marked it as visited,\n            # so we don't need to do anything else (specifically, don't add it to the queue).\n\n    # 3. Modify the output grid: Change the color of all identified reachable white cells to the fill color.\n    for r_fill, c_fill in reachable_white_cells:\n        output_grid[r_fill, c_fill] = fill_color\n\n    # 4. Return the modified grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 12716,
    "candidates_token_count": 1080,
    "total_token_count": 13796,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 46.044335,
  "retries": null
}