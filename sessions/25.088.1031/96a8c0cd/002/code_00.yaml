task_context:
  problem_type: flood_fill
  fill_origin: single_pixel
  fill_color_source: specific_color # Red (2)
  fill_color_target: same_as_source # Red (2)
  fill_medium: specific_color # White (0)
  boundaries:
    - type: specific_color # Blue (1)
    - type: specific_color # Green (3)
    - type: grid_edge
  boundary_behavior: stop_propagation # Fill does not cross boundaries
  output_grid: based_on_input # Input grid modified by the fill operation

input_grid_properties:
  - contains_single_seed_pixel: True # Always one red (2) pixel
  - contains_boundary_pixels: True # Blue (1) and/or Green (3) pixels exist
  - contains_fillable_pixels: True # White (0) pixels exist
  - grid_size: variable

output_grid_properties:
  - preserves_seed_pixel: True # Original red pixel remains red
  - preserves_boundary_pixels: True # Original blue and green pixels are unchanged
  - changes_fillable_pixels: # White pixels reachable from the seed without crossing boundaries are changed
      - condition: is_white_pixel # Pixel value is 0 in input
      - condition: is_reachable_from_seed # Exists a path of white pixels from seed
      - condition: path_does_not_cross_boundaries # Path only contains white pixels
      - action: change_color_to_fill_color # Change to red (2)
  - unchanged_pixels: # Pixels not meeting the criteria above remain unchanged
      - white_pixels_not_reachable
      - original_boundary_pixels
      - original_seed_pixel (already covered)
      - other_colors (if any existed, none in examples)