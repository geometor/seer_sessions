{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nTransformation Rule Natural Language Description:\n\n1.  **Identify Objects**:\n    *   Find all contiguous regions of non-white pixels (color != 0) in the input grid.\n    *   Designate the region with the largest number of pixels as the \"pattern object\". Note its color (`pattern_color`) and the set of coordinates it occupies (`pattern_coords`).\n    *   Identify all other non-white pixels in the grid as \"marker pixels\". Note their coordinates and colors (`marker_pixels`).\n2.  **Determine Coordinate Sets**:\n    *   Create a set `pattern_rows` containing all unique row indices from `pattern_coords`.\n    *   Create a set `pattern_cols` containing all unique column indices from `pattern_coords`.\n    *   Create a set `inhibited_rows` containing all unique row indices from the `marker_pixels`.\n    *   Create a set `inhibited_cols` containing all unique column indices from the `marker_pixels`.\n3.  **Construct Output Grid**:\n    *   Initialize a new output grid with the same dimensions as the input grid, filled entirely with the background color (white, 0).\n    *   **Project Pattern Horizontally**: Iterate through each row index `r` present in `pattern_rows`. If this row `r` is *not* present in `inhibited_rows`, then iterate through all columns `c` of the grid. If column `c` is *not* present in `inhibited_cols`, set the output grid cell `(r, c)` to the `pattern_color`.\n    *   **Project Pattern Vertically**: Iterate through each column index `c` present in `pattern_cols`. If this column `c` is *not* present in `inhibited_cols`, then iterate through all rows `r` of the grid. If row `r` is *not* present in `inhibited_rows`, set the output grid cell `(r, c)` to the `pattern_color`. (Note: This might overwrite some cells filled during horizontal projection, which is acceptable as it's the same color).\n    *   **Overlay Pattern**: Iterate through all coordinates `(r, c)` in the original `pattern_coords`. Set the output grid cell `(r, c)` to the `pattern_color`, ensuring the original pattern shape is preserved and overwrites any background filling within its bounds.\n    *   **Overlay Markers**: Iterate through all `marker_pixels`. For each marker at `(r, c)` with color `M`, set the output grid cell `(r, c)` to `M`, ensuring markers appear on top of the filled background and the pattern.\n4.  **Return**: Return the completed output grid.\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef _find_all_objects(grid):\n    \"\"\"\n    Finds all contiguous objects (connected components) of the same non-background color.\n\n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        list: A list of dictionaries, where each dictionary represents an object\n              with keys 'color' (int) and 'coords' (set of (row, col) tuples).\n              Returns an empty list if no non-background objects are found.\n    \"\"\"\n    height, width = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n\n    for r in range(height):\n        for c in range(width):\n            # If the cell is non-background and not visited yet, start a search\n            if grid[r, c] != 0 and not visited[r, c]:\n                color = grid[r, c]\n                coords = set()\n                q = deque([(r, c)])\n                visited[r, c] = True\n\n                # Breadth-First Search (BFS) for connected component\n                while q:\n                    row, col = q.popleft()\n                    coords.add((row, col))\n\n                    # Check 4-directional neighbors\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n\n                        # Check bounds, color match, and visited status\n                        if 0 <= nr < height and 0 <= nc < width and \\\n                           not visited[nr, nc] and grid[nr, nc] == color:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n\n                # Store the found object\n                if coords:\n                    objects.append({'color': color, 'coords': coords})\n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by projecting the pattern color along its original\n    rows and columns, blocked by marker pixels, then overlaying the original\n    pattern and markers.\n\n    Args:\n        input_grid (list of lists): The input grid represented as a list of lists.\n\n    Returns:\n        list of lists: The transformed output grid.\n    \"\"\"\n    grid = np.array(input_grid, dtype=int)\n    height, width = grid.shape\n\n    # 1. Identify Objects\n    all_objects = _find_all_objects(grid)\n\n    if not all_objects:\n        # If no non-white objects, return the original grid\n        return input_grid\n\n    # Find the largest object (pattern object)\n    pattern_object = max(all_objects, key=lambda obj: len(obj['coords']), default=None)\n\n    # This check should ideally not be needed if all_objects is not empty,\n    # but added for robustness.\n    if pattern_object is None:\n         return input_grid\n\n    pattern_color = pattern_object['color']\n    pattern_coords = pattern_object['coords']\n\n    # Identify marker pixels (all non-background pixels not in the pattern object)\n    marker_pixels = []\n    for r in range(height):\n        for c in range(width):\n            if grid[r,c] != 0 and (r,c) not in pattern_coords:\n                 marker_pixels.append({'r': r, 'c': c, 'color': grid[r,c]})\n\n    # 2. Determine Coordinate Sets\n    pattern_rows = set(r for r, c in pattern_coords)\n    pattern_cols = set(c for r, c in pattern_coords)\n    inhibited_rows = set(p['r'] for p in marker_pixels)\n    inhibited_cols = set(p['c'] for p in marker_pixels)\n\n    # 3. Construct Output Grid\n    # Initialize output grid with background color (0)\n    output_grid = np.zeros_like(grid, dtype=int)\n\n    # Project Pattern Horizontally\n    for r in pattern_rows:\n        # If the pattern's original row is not inhibited\n        if r not in inhibited_rows:\n            # Fill this row with pattern color, except in inhibited columns\n            for c in range(width):\n                if c not in inhibited_cols:\n                    output_grid[r, c] = pattern_color\n\n    # Project Pattern Vertically\n    for c in pattern_cols:\n        # If the pattern's original column is not inhibited\n        if c not in inhibited_cols:\n            # Fill this column with pattern color, except in inhibited rows\n            for r in range(height):\n                if r not in inhibited_rows:\n                    output_grid[r, c] = pattern_color\n\n    # Overlay the original pattern object\n    # This ensures the original shape is preserved and covers projected background\n    for r, c in pattern_coords:\n        output_grid[r, c] = pattern_color\n\n    # Overlay the marker pixels\n    # This places the markers back on top of everything else\n    for p in marker_pixels:\n        output_grid[p['r'], p['c']] = p['color']\n\n    # 4. Return the result\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 15082,
    "candidates_token_count": 1812,
    "total_token_count": 16894,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 49.629442,
  "retries": null
}