{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentifies blue (1) objects in the input grid and determines whether to change their color to red (2) based on two conditions:\n1. Whether the blue object encloses any white (0) pixels.\n2. Whether the blue object is adjacent (8-way connectivity) to any original red (2) object.\n\nThe transformation rule is:\n- If a blue object encloses white pixels AND is NOT adjacent to any red object, it changes to red.\n- If a blue object does NOT enclose white pixels AND IS adjacent to at least one red object, it changes to red.\n- Otherwise, the blue object remains blue.\n- Original red objects and all other pixels remain unchanged.\n\"\"\"\n\ndef find_objects(grid, color):\n    \"\"\"\n    Finds all contiguous objects of a specified color in the grid.\n\n    Args:\n        grid (np.ndarray): The input grid.\n        color (int): The color of the objects to find.\n\n    Returns:\n        dict: A dictionary where keys are object IDs (starting from 1)\n              and values are lists of (row, col) tuples for pixels\n              belonging to that object.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n    objects = {}\n    object_id = 0\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == color and not visited[r, c]:\n                object_id += 1\n                obj_pixels = []\n                q = deque([(r, c)])\n                visited[r, c] = True\n                while q:\n                    row, col = q.popleft()\n                    obj_pixels.append((row, col))\n                    # Check 8 neighbors\n                    for dr in [-1, 0, 1]:\n                        for dc in [-1, 0, 1]:\n                            if dr == 0 and dc == 0:\n                                continue\n                            nr, nc = row + dr, col + dc\n                            if 0 <= nr < rows and 0 <= nc < cols and \\\n                               grid[nr, nc] == color and not visited[nr, nc]:\n                                visited[nr, nc] = True\n                                q.append((nr, nc))\n                if obj_pixels:\n                    objects[object_id] = obj_pixels\n    return objects\n\ndef get_all_object_pixels(objects_dict):\n    \"\"\"\n    Gets a set of all pixel coordinates from an objects dictionary.\n\n    Args:\n        objects_dict (dict): Dictionary returned by find_objects.\n\n    Returns:\n        set: A set of (row, col) tuples.\n    \"\"\"\n    all_pixels = set()\n    for pixels in objects_dict.values():\n        all_pixels.update(pixels)\n    return all_pixels\n\ndef is_adjacent(obj_pixels, target_pixels_set, grid_shape):\n    \"\"\"\n    Checks if any pixel in obj_pixels is adjacent (8-way) to any pixel\n    in target_pixels_set.\n\n    Args:\n        obj_pixels (list): List of (row, col) tuples for the object.\n        target_pixels_set (set): Set of (row, col) tuples for target adjacent pixels.\n        grid_shape (tuple): (rows, cols) of the grid.\n\n    Returns:\n        bool: True if adjacent, False otherwise.\n    \"\"\"\n    rows, cols = grid_shape\n    for r, c in obj_pixels:\n        for dr in [-1, 0, 1]:\n            for dc in [-1, 0, 1]:\n                if dr == 0 and dc == 0:\n                    continue\n                nr, nc = r + dr, c + dc\n                if 0 <= nr < rows and 0 <= nc < cols:\n                    if (nr, nc) in target_pixels_set:\n                        return True\n    return False\n\ndef encloses_white_pixels(obj_pixels, grid):\n    \"\"\"\n    Checks if a blue object encloses white (0) pixels.\n\n    Determines this by checking if any white pixel adjacent to the object\n    cannot reach the grid border via other white pixels.\n\n    Args:\n        obj_pixels (list): List of (row, col) tuples for the blue object.\n        grid (np.ndarray): The input grid.\n\n    Returns:\n        bool: True if the object encloses white pixels, False otherwise.\n    \"\"\"\n    rows, cols = grid.shape\n    obj_pixels_set = set(obj_pixels)\n    \n    # 1. Find all white pixels reachable from the border\n    reachable_white = np.zeros_like(grid, dtype=bool)\n    q = deque()\n    \n    # Add border white pixels to queue\n    for r in range(rows):\n        if grid[r, 0] == 0: q.append((r, 0)); reachable_white[r, 0] = True\n        if grid[r, cols-1] == 0: q.append((r, cols-1)); reachable_white[r, cols-1] = True\n    for c in range(cols):\n        if grid[0, c] == 0: q.append((0, c)); reachable_white[0, c] = True\n        if grid[rows-1, c] == 0: q.append((rows-1, c)); reachable_white[rows-1, c] = True\n        \n    # Perform BFS for reachable white pixels (4-way is sufficient)\n    while q:\n        r, c = q.popleft()\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < rows and 0 <= nc < cols and \\\n               grid[nr, nc] == 0 and not reachable_white[nr, nc]:\n               reachable_white[nr, nc] = True\n               q.append((nr, nc))\n\n    # 2. Find white pixels adjacent (8-way) to the blue object\n    adjacent_white_pixels = set()\n    for r, c in obj_pixels:\n        for dr in [-1, 0, 1]:\n            for dc in [-1, 0, 1]:\n                if dr == 0 and dc == 0:\n                    continue\n                nr, nc = r + dr, c + dc\n                # Check bounds and if it's a white pixel NOT part of the object itself\n                if 0 <= nr < rows and 0 <= nc < cols and \\\n                   grid[nr, nc] == 0 and (nr, nc) not in obj_pixels_set:\n                   adjacent_white_pixels.add((nr, nc))\n\n    # 3. Check if any adjacent white pixel is NOT reachable from the border\n    for r, c in adjacent_white_pixels:\n        if not reachable_white[r, c]:\n            # Found an enclosed white pixel adjacent to the object\n            return True\n            \n    # If we checked all adjacent white pixels and all were reachable, it doesn't enclose.\n    return False\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by changing specific blue objects to red based on enclosure and adjacency rules.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Find original red objects and their pixels\n    red_objects = find_objects(input_grid, 2)\n    all_red_pixels = get_all_object_pixels(red_objects)\n\n    # Find blue objects\n    blue_objects = find_objects(input_grid, 1)\n\n    # Iterate through each blue object\n    for obj_id, blue_obj_pixels in blue_objects.items():\n        # Determine if the object encloses white pixels\n        encloses_white = encloses_white_pixels(blue_obj_pixels, input_grid)\n\n        # Determine if the object is adjacent to any original red object\n        adjacent_to_red = is_adjacent(blue_obj_pixels, all_red_pixels, (rows, cols))\n\n        # Apply the transformation rule\n        change_to_red = False\n        if encloses_white and not adjacent_to_red:\n            change_to_red = True\n        elif not encloses_white and adjacent_to_red:\n            change_to_red = True\n\n        # If the condition is met, change the object's color in the output grid\n        if change_to_red:\n            for r, c in blue_obj_pixels:\n                output_grid[r, c] = 2 # Change to red\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 5297,
            "end_index": 5632,
            "uri": "https://github.com/abhisheksol/competivity-programming",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5798,
    "candidates_token_count": 2019,
    "total_token_count": 7817,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 25.49828,
  "retries": null
}