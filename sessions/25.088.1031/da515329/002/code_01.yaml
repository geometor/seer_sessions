task_description: Evolve an initial pattern of azure pixels on a white background using a cellular automaton rule for a specific number of steps.
grid_properties:
  - Input and output grids share the same dimensions.
  - Grid sizes vary between examples (e.g., 22x22, 12x12, 16x16).
  - The grid contains only two colors: white (0) as the background and azure (8) for the pattern.
initial_state:
  - The input grid represents the initial state (step 0) of the automaton.
  - It features a small configuration of azure pixels ('seed').
transformation:
  - A deterministic cellular automaton rule updates the grid state iteratively.
  - The number of iterations `N` is equal to the maximum dimension (height or width) of the grid.
  - The state of a cell in the next iteration depends on the states of its neighbors in the current iteration.
  - Boundary condition: Cells outside the grid are considered white (0).
automaton_rule:
  - The neighborhood considered for updating a cell consists of its four cardinal neighbors (up, down, left, right).
  - The update rule is based on the parity (odd/even) of the sum of the states of these neighbors.
  - Map colors for calculation: white (0) -> 0, azure (8) -> 1.
  - A cell at `(r, c)` becomes azure (state 1) in the next step if the sum of the states of its cardinal neighbors `(r-1, c)`, `(r+1, c)`, `(r, c-1)`, `(r, c+1)` in the current step is odd.
  - Otherwise, the cell becomes white (state 0).
final_state:
  - The output grid is the state of the automaton after `N` iterations.
  - The final pattern resembles a 2D Sierpinski triangle/carpet generated from the initial seed configuration.
  - Convert states back to colors: 0 -> white (0), 1 -> azure (8).