Grid:
  background_color: white (0)
  contains:
    - Objects
    - Background

Objects:
  type: Rectangular regions
  composition:
    - Pixels
  pixel_colors:
    - azure (8)
    - green (3)
  separation: Separated by background_color
  properties:
    - location: (top_left_x, top_left_y)
    - dimensions: (height, width)
    - area: height * width
    - green_pixel_count: count of green (3) pixels
    - azure_pixel_count: count of azure (8) pixels
    - green_total_ratio: green_pixel_count / area
    - green_azure_ratio: green_pixel_count / azure_pixel_count (handle azure_pixel_count = 0)
  count: The number of distinct objects in the input grid.

Transformation:
  action: Identify Objects
  input: Input Grid
  output: List of Objects
  constraints:
    - Must be rectangular.
    - Must contain only azure (8) and green (3) pixels.

  action: Select Object
  input: List of Objects
  output: Single Selected Object
  logic: Based on object count and properties
    - rule_1:
        condition: object count == 4
        criterion: Maximize green_total_ratio
        tie_breaker: (Not observed in examples, assume max area if needed)
    - rule_2:
        condition: object count == 3
        comparison_objects:
          - ObjMinArea (object with minimum area)
          - ObjMaxArea (object with maximum area)
        criterion: Minimize abs(green_azure_ratio - 1/3)
        selection:
          - if abs(Ratio(ObjMinArea) - 1/3) < abs(Ratio(ObjMaxArea) - 1/3): select ObjMinArea
          - else: select ObjMaxArea # Covers > and == cases

  action: Output Grid Generation
  input: Selected Object
  output: Output Grid (copy of the Selected Object)