task_context:
  problem_description: Identify specific rectangular objects composed of green and azure pixels within a larger grid containing a white background, and select one object based on rules determined by the count of such objects.
  input_grid_description: A 2D grid containing pixels of white(0), green(3), and azure(8). Objects are contiguous rectangular blocks made solely of green and azure.
  output_grid_description: A 2D grid representing a copy of the single selected object.

identified_objects:
  - object_type: rectangular_area
    properties:
      - composition: consists only of green (3) and azure (8) pixels
      - contiguity: forms a solid rectangle (no holes of background color within its bounding box)
      - background: surrounded by white (0) pixels or grid boundaries
    count_dependency: The selection rule depends on the number (n) of these objects found in the input grid.

transformation_rules:
  - rule_condition: Number of valid objects (n) = 4
    action:
      - calculate property: For each object, compute the ratio R = (count of green pixels) / (total area of the object).
      - select: Choose the object with the maximum value of R.
      - output: Return the grid corresponding to the selected object.
  - rule_condition: Number of valid objects (n) = 3
    action:
      - calculate property: For each object, compute the ratio R = (count of green pixels) / (count of azure pixels). Handle division by zero if azure count is 0 (treat ratio as infinity if green count > 0, else 0).
      - calculate property: For each object, compute the absolute difference D = |R - 0.5|.
      - select: Choose the object with the minimum value of D.
      - tie_breaking: If multiple objects have the same minimum difference, the examples do not clearly define a tie-breaker (though none occurred in the training set). Assume the first object encountered with the minimum difference is selected, or potentially one based on area or position if needed.
      - output: Return the grid corresponding to the selected object.

validation_notes:
  - The initial rule for n=3 (comparing min/max area objects based on ratio closeness to 1/3) failed on Example 3.
  - The revised rule for n=3 (selecting object with Green/Azure ratio closest to 0.5) successfully explains Examples 3 and 4.
  - The rule for n=4 (selecting object with max Green/Total Area ratio) successfully explains Examples 1 and 2.