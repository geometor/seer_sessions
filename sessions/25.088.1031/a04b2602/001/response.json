{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by changing green pixels (3) to blue (1) if they are adjacent \n    (orthogonally or diagonally) to any red pixel (2). All other pixels retain their original color.\n\n    Args:\n        input_grid (list[list[int]]): A 2D list representing the input grid.\n\n    Returns:\n        list[list[int]]: A 2D list representing the transformed output grid.\n    \"\"\"\n    # Convert input list of lists to a NumPy array for easier processing\n    input_np = np.array(input_grid, dtype=int)\n    # Create a copy to modify, preserving the original input\n    output_np = np.copy(input_np)\n    height, width = input_np.shape\n\n    # Define the relative coordinates for 8 neighbors (orthogonal and diagonal)\n    neighbor_offsets = [\n        (-1, -1), (-1, 0), (-1, 1),\n        (0, -1),          (0, 1),\n        (1, -1), (1, 0), (1, 1)\n    ]\n\n    # Iterate through each pixel in the grid\n    for r in range(height):\n        for c in range(width):\n            # Check if the current pixel is green (3)\n            if input_np[r, c] == 3:\n                is_adjacent_to_red = False\n                # Check all 8 neighbors\n                for dr, dc in neighbor_offsets:\n                    nr, nc = r + dr, c + dc\n                    # Check if the neighbor coordinates are within the grid bounds\n                    if 0 <= nr < height and 0 <= nc < width:\n                        # Check if the neighbor in the *original* input grid is red (2)\n                        if input_np[nr, nc] == 2:\n                            is_adjacent_to_red = True\n                            break  # Found a red neighbor, no need to check others\n\n                # If an adjacent red pixel was found, change the current pixel to blue (1) in the output grid\n                if is_adjacent_to_red:\n                    output_np[r, c] = 1\n\n    # Convert the output NumPy array back to a list of lists\n    output_grid = output_np.tolist()\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5610,
    "candidates_token_count": 541,
    "total_token_count": 6151,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.970543,
  "retries": null
}