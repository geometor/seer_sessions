{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by changing green pixels (3) to blue (1) if they \n    are part of a contiguous green region that is adjacent (orthogonally or \n    diagonally) to any red pixel (2). The change propagates through the \n    connected green region. All other pixels retain their original color.\n\n    Args:\n        input_grid (list[list[int]]): A 2D list representing the input grid.\n\n    Returns:\n        list[list[int]]: A 2D list representing the transformed output grid.\n    \"\"\"\n    # Convert input list of lists to a NumPy array for easier processing\n    input_np = np.array(input_grid, dtype=int)\n    # Create a copy to modify, preserving the original input\n    output_np = np.copy(input_np)\n    height, width = input_np.shape\n\n    # Define the relative coordinates for 8 neighbors (orthogonal and diagonal)\n    neighbor_offsets = [\n        (-1, -1), (-1, 0), (-1, 1),\n        (0, -1),          (0, 1),\n        (1, -1), (1, 0), (1, 1)\n    ]\n\n    # Queue for Breadth-First Search (BFS) propagation\n    queue = deque()\n    # Set to keep track of green pixels already turned blue or queued\n    processed_or_queued = set()\n\n    # --- Initialization Step ---\n    # Find initial green pixels adjacent to red pixels\n    for r in range(height):\n        for c in range(width):\n            # Check if the current pixel is green in the original input\n            if input_np[r, c] == 3:\n                is_adjacent_to_red = False\n                # Check all 8 neighbors in the original input grid\n                for dr, dc in neighbor_offsets:\n                    nr, nc = r + dr, c + dc\n                    # Check if the neighbor coordinates are within the grid bounds\n                    if 0 <= nr < height and 0 <= nc < width:\n                        # Check if the neighbor in the *original* input grid is red (2)\n                        if input_np[nr, nc] == 2:\n                            is_adjacent_to_red = True\n                            break  # Found a red neighbor\n\n                # If adjacent to red, mark it blue in output, add to queue and processed set\n                if is_adjacent_to_red:\n                    if (r, c) not in processed_or_queued:\n                         output_np[r, c] = 1\n                         queue.append((r, c))\n                         processed_or_queued.add((r, c))\n\n    # --- Propagation Step (BFS) ---\n    while queue:\n        # Get the next blue pixel coordinate from the queue\n        curr_r, curr_c = queue.popleft()\n\n        # Check its 8 neighbors\n        for dr, dc in neighbor_offsets:\n            nr, nc = curr_r + dr, curr_c + dc\n\n            # Check if the neighbor coordinates are valid (within bounds)\n            if 0 <= nr < height and 0 <= nc < width:\n                # Check if the neighbor is green in the *current output grid* \n                # and hasn't been processed or queued yet\n                if output_np[nr, nc] == 3 and (nr, nc) not in processed_or_queued:\n                    # Change the neighbor to blue\n                    output_np[nr, nc] = 1\n                    # Add the neighbor to the queue for further propagation\n                    queue.append((nr, nc))\n                    # Mark neighbor as processed/queued\n                    processed_or_queued.add((nr, nc))\n\n    # Convert the output NumPy array back to a list of lists\n    output_grid = output_np.tolist()\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 23450,
    "candidates_token_count": 892,
    "total_token_count": 24342,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.173741,
  "retries": null
}