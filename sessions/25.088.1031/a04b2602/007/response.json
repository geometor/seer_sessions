{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on the following rule:\n    1. Identify connected components of green pixels (value 3) using 8-way adjacency.\n    2. Determine if any pixel within a green component is adjacent (8-way) to any red pixel (value 2).\n    3. If a green component is adjacent to a red pixel, change all pixels of that component to blue (value 1) in the output grid.\n    4. Otherwise, the green component remains unchanged.\n    5. All non-green pixels retain their original color.\n    \"\"\"\n    \n    # Convert input list of lists to a NumPy array for efficient operations\n    input_np = np.array(input_grid, dtype=int)\n    # Create a copy to store the output; modifications will be made here\n    output_np = np.copy(input_np)\n    height, width = input_np.shape\n    # Keep track of visited pixels to avoid processing components multiple times\n    visited = np.zeros_like(input_np, dtype=bool)\n\n    # Define relative coordinates for 8 neighbors (orthogonal and diagonal)\n    neighbor_offsets = [\n        (-1, -1), (-1, 0), (-1, 1),\n        (0, -1),          (0, 1),\n        (1, -1), (1, 0), (1, 1)\n    ]\n\n    # Iterate through each pixel in the grid to find the start of green components\n    for r in range(height):\n        for c in range(width):\n            # If we find a green pixel (3) that hasn't been visited yet, start exploring its component\n            if input_np[r, c] == 3 and not visited[r, c]:\n                \n                # Initialize structures for the current component search (BFS)\n                current_component_coords = [] # Stores coordinates of pixels in this component\n                is_adjacent_to_red = False    # Flag to check if this component touches a red pixel\n                queue = deque([(r, c)])       # Queue for BFS\n                visited[r, c] = True          # Mark the starting pixel as visited\n                \n                # --- Breadth-First Search (BFS) ---\n                # Explore the connected component of green pixels\n                while queue:\n                    curr_r, curr_c = queue.popleft()\n                    # Add the current pixel to the list for this component\n                    current_component_coords.append((curr_r, curr_c))\n                    \n                    # Check all 8 neighbors of the current pixel\n                    for dr, dc in neighbor_offsets:\n                        nr, nc = curr_r + dr, curr_c + dc\n                        \n                        # Ensure the neighbor is within the grid boundaries\n                        if 0 <= nr < height and 0 <= nc < width:\n                            # Check neighbor's color in the original input grid\n                            neighbor_color = input_np[nr, nc]\n                            \n                            # If the neighbor is red (2), set the flag for the component\n                            if neighbor_color == 2:\n                                is_adjacent_to_red = True \n                                # Note: We continue BFS to find all component pixels,\n                                # even after finding a red neighbor.\n                                \n                            # If the neighbor is green (3) and hasn't been visited,\n                            # mark it visited and add it to the queue to explore later.\n                            elif neighbor_color == 3 and not visited[nr, nc]:\n                                visited[nr, nc] = True\n                                queue.append((nr, nc))\n                # --- End of BFS for this component ---\n                                \n                # After exploring the entire component, check the flag\n                if is_adjacent_to_red:\n                    # If the component was adjacent to red, change all its pixels to blue (1) in the output grid\n                    for comp_r, comp_c in current_component_coords:\n                        output_np[comp_r, comp_c] = 1 \n\n    # Convert the modified NumPy array back to a standard list of lists format\n    output_grid = output_np.tolist()\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7747,
    "candidates_token_count": 950,
    "total_token_count": 8697,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 147.037078,
  "retries": null
}