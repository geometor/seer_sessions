{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Tuple\n\n\"\"\"\nIdentifies the largest contiguous rectangular block for each non-white color \npresent in the input grid and changes the color of these largest blocks to yellow (4).\n\n1. Copy the input grid to create the initial output grid.\n2. Find all unique colors present in the input grid, excluding white (0).\n3. For each unique non-white color:\n    a. Find all maximal contiguous rectangular blocks composed entirely of that color.\n    b. Calculate the area (height * width) of each block.\n    c. Identify the block with the maximum area for this color. If there are ties,\n       any one of the largest blocks can be chosen.\n4. Store the location (top-left row, col) and dimensions (height, width) of the \n   largest block found for each color.\n5. Iterate through the stored largest blocks.\n6. For each largest block, change the color of all pixels within its bounds in the \n   output grid to yellow (4).\n7. Return the modified output grid.\n\"\"\"\n\n\ndef find_maximal_rectangles(grid: np.ndarray, color: int) -> List[Tuple[int, int, int, int]]:\n    \"\"\"\n    Finds all maximal contiguous rectangles of a given color in the grid.\n\n    Args:\n        grid: The input grid as a NumPy array.\n        color: The target color to search for.\n\n    Returns:\n        A list of tuples, where each tuple represents a maximal rectangle\n        in the format (row, col, height, width).\n    \"\"\"\n    height, width = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    rectangles = []\n\n    for r in range(height):\n        for c in range(width):\n            if grid[r, c] == color and not visited[r, c]:\n                # Found a potential top-left corner of a new maximal rectangle\n                \n                # Find the maximum possible width for the first row\n                current_w = 0\n                while c + current_w < width and grid[r, c + current_w] == color and not visited[r, c + current_w]:\n                    current_w += 1\n                \n                if current_w == 0: # Should not happen if grid[r,c]==color and not visited, but as safeguard\n                    visited[r, c] = True # Mark as visited to prevent re-check\n                    continue\n\n                # Find the maximum possible height for this width\n                current_h = 1\n                while r + current_h < height:\n                    # Check if the entire next row segment matches the color and width\n                    all_match = True\n                    for i in range(current_w):\n                        if grid[r + current_h, c + i] != color or visited[r + current_h, c + i]:\n                            all_match = False\n                            break\n                    \n                    if all_match:\n                        current_h += 1\n                    else:\n                        break # Cannot extend height further with this width\n\n                # Store the rectangle found\n                rectangles.append((r, c, current_h, current_w))\n                \n                # Mark the area of this rectangle as visited\n                visited[r : r + current_h, c : c + current_w] = True\n                \n    return rectangles\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transforms the input grid by finding the largest rectangle of each \n    non-white color and changing its color to yellow (4).\n    \"\"\"\n    \n    input_grid_np = np.array(input_grid, dtype=int)\n    output_grid = input_grid_np.copy()\n    height, width = input_grid_np.shape\n    \n    # Find unique non-white colors\n    unique_colors = np.unique(input_grid_np)\n    non_white_colors = [c for c in unique_colors if c != 0]\n    \n    largest_blocks_to_recolor = []\n\n    # Find the largest rectangle for each color\n    for color in non_white_colors:\n        # Find all maximal rectangles of this color\n        rectangles = find_maximal_rectangles(input_grid_np, color)\n        \n        if not rectangles:\n            continue # No rectangles of this color found\n\n        # Calculate areas and find the max area\n        max_area = 0\n        largest_rect = None\n        for r, c, h, w in rectangles:\n            area = h * w\n            if area > max_area:\n                max_area = area\n                largest_rect = (r, c, h, w)\n        \n        if largest_rect:\n             largest_blocks_to_recolor.append(largest_rect)\n\n    # Recolor the largest identified blocks to yellow (4)\n    for r, c, h, w in largest_blocks_to_recolor:\n        output_grid[r : r + h, c : c + w] = 4\n        \n    # Return the grid in list of lists format\n    return output_grid.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 9500,
    "candidates_token_count": 1174,
    "total_token_count": 10674,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 22.72471,
  "retries": null
}