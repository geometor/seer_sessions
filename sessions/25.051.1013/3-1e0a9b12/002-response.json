{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation involves moving all colored objects to the last row, preserving the order of the objects, and the yellow objects is also duplicated in its initial position.\n\"\"\"\n\nimport numpy as np\n\ndef get_objects(grid):\n    \"\"\"\n    Identify distinct objects in the grid.\n    Returns a dictionary of color:positions.\n    \"\"\"\n    objects = {}\n    for y, row in enumerate(grid):\n        for x, color in enumerate(row):\n            if color != 0:\n                if color not in objects:\n                    objects[color] = []\n                objects[color].append((y, x))\n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by moving colored cells to the bottom row,\n    maintaining their original colors and order, except for color 4,\n    which also duplicated at its original position.\n    \"\"\"\n    # Initialize output_grid as a copy of the input_grid to retain background\n    output_grid = np.copy(input_grid)\n    \n    # Get the objects from input grid\n    objects = get_objects(input_grid)\n    \n    # Sort the colored tiles by their column to maintain x-order\n    sorted_colors = sorted(objects.keys(), key=lambda color: objects[color][0][1])\n\n    # Clear the original positions of the moving objects, except yellow.\n    # Make a separate list, exclude yellow if it exists.\n    \n    colors_no_yellow = [c for c in sorted_colors if c != 4]\n\n    for color in colors_no_yellow:\n        for pos in objects[color]:\n            output_grid[pos] = 0\n    \n    # Move all objects to the last row by column order.\n    last_row = output_grid.shape[0] - 1\n    for x, color in enumerate(sorted_colors):      \n        output_grid[last_row, x] = color\n        \n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1658,
    "candidates_token_count": 450,
    "total_token_count": 2108,
    "cached_content_token_count": 0
  },
  "timing": {
    "response_time": 5.719658
  },
  "response_file": "002-response.json"
}