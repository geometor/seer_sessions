{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nIdentifies the column span of azure (8) pixels.\nCategorizes maroon (9) pixels based on their column position relative to this span:\n- 'left': columns to the left of the azure span.\n- 'right': columns to the right of the azure span.\n- 'middle': columns overlapping with the azure span.\n\nTransformation Rules (applied in order of precedence):\n1. If 'right' maroons exist, change all azure pixels in the *leftmost* column of the azure span to maroon.\n2. If 'left' maroons exist, change all azure pixels in the *rightmost* column of the azure span to maroon. \n   (Rules 1 and 2 can apply simultaneously).\n3. If NEITHER 'left' NOR 'right' maroons exist, BUT 'middle' maroons do exist:\n   Find the minimum column index ('min_middle_col') among the 'middle' maroons.\n   Change all azure pixels in columns from 'min_middle_col' up to and including the *rightmost* column of the azure span to maroon.\n4. If none of the above conditions are met (e.g., no maroons, or no relevant maroons), no changes are made.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Applies transformations to an input grid based on the relative positions \n    of azure (8) and maroon (9) pixels.\n    \"\"\"\n    # Convert input list of lists to a numpy array for efficient operations\n    grid = np.array(input_grid, dtype=int)\n    output_grid = grid.copy()\n    height, width = grid.shape\n\n    azure = 8\n    maroon = 9\n\n    # Find coordinates of all azure pixels\n    azure_coords = np.argwhere(grid == azure)\n    \n    # If there are no azure pixels, return the original grid unchanged\n    if azure_coords.size == 0:\n        return output_grid.tolist() \n\n    # Determine the minimum and maximum column indices occupied by azure pixels\n    azure_cols = azure_coords[:, 1]\n    min_col = np.min(azure_cols)\n    max_col = np.max(azure_cols)\n\n    # Find coordinates of all maroon pixels\n    maroon_coords = np.argwhere(grid == maroon)\n    \n    # If there are no maroon pixels, return the original grid unchanged\n    if maroon_coords.size == 0:\n        return output_grid.tolist() \n\n    # Get the column indices of maroon pixels\n    maroon_cols = maroon_coords[:, 1]\n\n    # Categorize maroon pixels based on their column relative to the azure span\n    left_maroon_exists = np.any(maroon_cols < min_col)\n    right_maroon_exists = np.any(maroon_cols > max_col)\n    \n    # Identify maroon pixels within the azure column span\n    middle_maroon_mask = (maroon_cols >= min_col) & (maroon_cols <= max_col)\n    middle_maroon_cols = maroon_cols[middle_maroon_mask]\n    middle_maroon_exists = middle_maroon_cols.size > 0\n\n    # Apply transformation rules based on maroon locations\n    \n    # Flag to track if left/right rules were applied, giving them precedence\n    left_right_transformed = False \n\n    # Rule 1: If maroons exist to the right of the azure span\n    if right_maroon_exists:\n        # Find rows in the leftmost azure column containing azure pixels\n        rows_to_change_min = np.where(grid[:, min_col] == azure)[0]\n        # Change those azure pixels to maroon in the output grid\n        if rows_to_change_min.size > 0:\n             output_grid[rows_to_change_min, min_col] = maroon\n             left_right_transformed = True # Mark that a transformation occurred\n\n    # Rule 2: If maroons exist to the left of the azure span\n    if left_maroon_exists:\n        # Find rows in the rightmost azure column containing azure pixels\n        rows_to_change_max = np.where(grid[:, max_col] == azure)[0]\n         # Change those azure pixels to maroon in the output grid\n        if rows_to_change_max.size > 0:\n            output_grid[rows_to_change_max, max_col] = maroon\n            left_right_transformed = True # Mark that a transformation occurred\n\n    # Rule 3: If no left/right maroons, but middle maroons exist\n    # This rule only applies if the left/right rules did NOT trigger\n    if not left_right_transformed and middle_maroon_exists:\n        # Find the minimum column index among the middle maroons\n        min_middle_col = np.min(middle_maroon_cols)\n        # Iterate through columns from the min_middle_col to the max_col of the azure span\n        for c in range(min_middle_col, max_col + 1):\n            # Find rows in the current column 'c' containing azure pixels\n            rows_to_change_middle = np.where(grid[:, c] == azure)[0]\n            # Change those azure pixels to maroon in the output grid\n            if rows_to_change_middle.size > 0:\n                 output_grid[rows_to_change_middle, c] = maroon\n\n    # Convert the final numpy array back to a list of lists before returning\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3665,
    "candidates_token_count": 1270,
    "total_token_count": 4935,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 28.893776,
  "retries": 1
}