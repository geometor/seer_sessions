{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify** all red (2) pixels within the input grid.\n2.  **For each** red pixel:\n    *   **Check for adjacent white pixels:** If there's a white (0) pixel directly to the left, change it to green (3).\n    *   **Check for adjacent white pixels:** If there's a white (0) pixel directly to the right, change it to green (3).\n    *   **Check for adjacent white pixels:** If there's a white (0) pixel directly above, change it to green (3).\n    *   **Check for adjacent white pixels:** If there's a white (0) pixel directly below, change it to green (3).\n3.  **All other pixels remain unchanged.** The transformation only affects white pixels that are immediately adjacent to a red pixel.\n\"\"\"\n\nimport numpy as np\n\ndef get_red_pixels(grid):\n    \"\"\"Finds the coordinates of all red (2) pixels in the grid.\"\"\"\n    red_pixels = []\n    for row_index, row in enumerate(grid):\n        for col_index, pixel in enumerate(row):\n            if pixel == 2:\n                red_pixels.append((row_index, col_index))\n    return red_pixels\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the described rule.\"\"\"\n    output_grid = np.copy(input_grid)\n    red_pixels = get_red_pixels(input_grid)\n\n    for row, col in red_pixels:\n        # Check and change left neighbor\n        if col > 0 and input_grid[row, col - 1] == 0:\n            output_grid[row, col - 1] = 3\n        # Check and change right neighbor\n        if col < input_grid.shape[1] - 1 and input_grid[row, col + 1] == 0:\n            output_grid[row, col + 1] = 3\n        # Check and change above neighbor\n        if row > 0 and input_grid[row - 1, col] == 0:\n            output_grid[row - 1, col] = 3\n        # Check and change below neighbor\n        if row < input_grid.shape[0] - 1 and input_grid[row + 1, col] == 0:\n            output_grid[row + 1, col] = 3\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2645,
    "candidates_token_count": 561,
    "total_token_count": 3206,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 5.455858,
  "response_file": "008-response.json"
}