{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Target Pixels:** Locate all pixels with the value '2' (red).\n\n2.  **Check Adjacency:** For each target pixel (red pixel):\n    *   Iterate through its eight neighboring pixels (including diagonals).\n\n3.  **Conditional Transformation:** If ANY of the following is true, change color from `red` to `green`:\n    *    There exist three or more horizontally or vertically adjacent red(2) pixels.\n    *\t  Place a green(3) pixel to the upper right of any set of two diagonally adjacent red pixels.\n\n4.  **Leave Unchanged:** Any red pixel not meeting the adjacency condition remains red. All non-red pixels remain unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, row, col, include_diagonal=True):\n    \"\"\"Gets the neighbors of a cell, optionally including diagonals.\"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    for i in range(max(0, row - 1), min(rows, row + 2)):\n        for j in range(max(0, col - 1), min(cols, col + 2)):\n            if (i != row or j != col):  # Exclude the cell itself\n                if include_diagonal or (i == row or j == col): # Exclude diagonals if required\n                    neighbors.append((i, j))\n    return neighbors\n\ndef check_horizontal_vertical_adjacency(grid, row, col, target_color=2):\n    \"\"\"Checks for three or more horizontally or vertically adjacent pixels of target_color.\"\"\"\n    count = 0\n    #check horizontal\n    for j in range(max(0, col - 2), min(grid.shape[1], col + 3)):\n      if grid[row,j] == target_color:\n        count +=1\n      else:\n        count = 0\n      if count >= 3:\n        return True\n\n    #check vertical\n    count = 0\n    for i in range(max(0, row - 2), min(grid.shape[0], row + 3)):\n        if grid[i, col] == target_color:\n            count +=1\n        else:\n          count = 0\n\n        if count >= 3:\n            return True\n    return False\n\ndef check_diagonal_adjacency(grid, row, col, target_color=2):\n    \"\"\"Place a green(3) pixel to the upper right of any set of two diagonally adjacent red pixels.\"\"\"\n    neighbors = get_neighbors(grid, row, col)\n    for r, c in neighbors:\n      if grid[r,c] == target_color:\n        if r == row - 1 and c == col + 1: # upper right\n          return True\n        if r == row -1 and c == col -1:\n          if (row-2, col) in get_neighbors(grid,row-1,col-1, include_diagonal=False) and grid[row-2, col] == target_color:\n            return True\n          elif(row, col-2) in get_neighbors(grid,row-1,col-1, include_diagonal=False) and grid[row,col-2] == target_color:\n            return True\n\n    return False\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the specified rules.\"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = output_grid.shape\n\n    for row in range(rows):\n        for col in range(cols):\n            if output_grid[row, col] == 2:\n                if check_horizontal_vertical_adjacency(output_grid, row, col):\n                    output_grid[row, col] = 3\n\n                if check_diagonal_adjacency(input_grid, row, col):\n                    if row > 0 and col < cols-1:\n                       output_grid[row -1, col+1] = 3\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3037,
    "candidates_token_count": 911,
    "total_token_count": 3948,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.967587,
  "response_file": "010-response.json"
}