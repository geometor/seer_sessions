{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Red Pixels:** Locate all pixels with the value '2' (red).\n\n2.  **Horizontal/Vertical Group Check:** For each red pixel:\n    *   Check for horizontally or vertically adjacent red pixels.\n    *   Count the number of *connected* red pixels (including the starting pixel).  \"Connected\" means reachable by moving horizontally or vertically through other red pixels.\n    *   If the count is 3 or more, change the color of *all* connected red pixels in that group to '3' (green).\n\n3.  **Isolated Diagonal Pair Check:** For each red pixel:\n    *   Check for diagonally adjacent red pixels.\n    *   If a diagonally adjacent red pixel is found, check *both* pixels to see if they have *any* other horizontally or vertically adjacent red neighbors.\n    *   If *neither* of the two diagonally adjacent red pixels has any other red neighbors (H/V), change the color of *both* pixels to '3' (green).\n\n4.  **All Other Pixels:**  Pixels not meeting the above conditions remain unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef get_hv_neighbors(grid, row, col):\n    \"\"\"Gets the horizontal and vertical neighbors of a cell.\"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    for i in range(max(0, row - 1), min(rows, row + 2)):\n        for j in range(max(0, col - 1), min(cols, col + 2)):\n            if (i == row or j == col) and (i != row or j != col): # Exclude diagonals and self\n                neighbors.append((i, j))\n    return neighbors\n\ndef get_diagonal_neighbors(grid, row, col):\n    \"\"\"Gets the diagonal neighbors of a cell.\"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    for i in range(max(0, row - 1), min(rows, row + 2)):\n        for j in range(max(0, col - 1), min(cols, col + 2)):\n            if (i != row and j != col):  # Only diagonals\n                neighbors.append((i, j))\n    return neighbors\n\ndef get_connected_hv_pixels(grid, row, col, target_color=2):\n    \"\"\"Gets all connected H/V pixels of the target color using a breadth-first search.\"\"\"\n    rows, cols = grid.shape\n    connected_pixels = set()\n    queue = [(row, col)]\n    visited = set()\n\n    while queue:\n        r, c = queue.pop(0)\n        if (r, c) in visited:\n            continue\n        visited.add((r,c))\n\n        if grid[r, c] == target_color:\n          connected_pixels.add((r,c))\n          neighbors = get_hv_neighbors(grid, r, c)\n          for nr, nc in neighbors:\n            if (nr, nc) not in visited:\n                queue.append((nr,nc))\n\n    return connected_pixels\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the specified rules.\"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = output_grid.shape\n    red_pixels = []\n\n    # Identify Red Pixels and store for later\n    for r in range(rows):\n        for c in range(cols):\n            if output_grid[r, c] == 2:\n              red_pixels.append((r,c))\n\n    # Horizontal/Vertical Group Check\n    for r, c in red_pixels:\n        connected_pixels = get_connected_hv_pixels(output_grid, r, c)\n        if len(connected_pixels) >= 3:\n            for cr, cc in connected_pixels:\n                output_grid[cr, cc] = 3\n\n    #Rebuild red pixel list, taking into consideration the changes\n    red_pixels = []\n    for r in range(rows):\n      for c in range(cols):\n        if output_grid[r,c] == 2:\n          red_pixels.append((r,c))\n\n\n    # Isolated Diagonal Pair Check\n    for r, c in red_pixels:\n      diagonal_neighbors = get_diagonal_neighbors(output_grid,r,c)\n      for dr, dc, in diagonal_neighbors:\n        if output_grid[dr,dc] == 2:\n          neighbors1 = get_hv_neighbors(output_grid,r,c)\n          neighbors2 = get_hv_neighbors(output_grid,dr,dc)\n          has_other_red_neighbors1 = any(output_grid[nr, nc] == 2 for nr, nc in neighbors1)\n          has_other_red_neighbors2 = any(output_grid[ndr, ndc] == 2 for ndr, ndc in neighbors2)\n\n          if not has_other_red_neighbors1 and not has_other_red_neighbors2:\n            output_grid[r,c] = 3\n            output_grid[dr,dc] = 3\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4645,
    "candidates_token_count": 1178,
    "total_token_count": 5823,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.266048,
  "response_file": "014-response.json"
}