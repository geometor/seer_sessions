def get_grid_string(grid):
    return '\n'.join(''.join(str(cell) for cell in row) for row in grid)

task_data = {
    "train": [
        {
            "input": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 8, 8, 8, 8, 8, 8, 0, 0, 0],
                [0, 8, 8, 8, 8, 8, 8, 0, 0, 0],
                [0, 8, 8, 8, 8, 8, 8, 0, 0, 0],
                [0, 8, 8, 8, 8, 8, 8, 0, 0, 0],
                [0, 8, 8, 8, 8, 8, 8, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            "output": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 2, 2, 2, 2, 2, 2, 0, 0, 0],
                [0, 1, 1, 1, 1, 1, 1, 0, 0, 0],
                [0, 1, 1, 1, 1, 1, 1, 0, 0, 0],
                [0, 1, 1, 1, 1, 1, 1, 0, 0, 0],
                [0, 1, 1, 1, 1, 1, 1, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            ]
        },
        {
            "input": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 8, 8, 8, 8, 8, 0, 0, 0],
                [0, 0, 8, 8, 8, 8, 8, 0, 0, 0],
                [0, 0, 8, 8, 8, 8, 8, 0, 0, 0],
                [0, 0, 8, 8, 8, 8, 8, 0, 0, 0],
                [0, 0, 8, 8, 8, 8, 8, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            "output": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 2, 2, 2, 2, 2, 0, 0, 0],
                [0, 0, 1, 1, 1, 1, 1, 0, 0, 0],
                [0, 0, 1, 1, 1, 1, 1, 0, 0, 0],
                [0, 0, 1, 1, 1, 1, 1, 0, 0, 0],
                [0, 0, 1, 1, 1, 1, 1, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            ]
        },
         {
            "input": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 8, 8, 8, 8, 8, 8, 8, 0],
                [0, 0, 8, 8, 8, 8, 8, 8, 8, 0],
                [0, 0, 8, 8, 8, 8, 8, 8, 8, 0],
                [0, 0, 8, 8, 8, 8, 8, 8, 8, 0],
                [0, 0, 8, 8, 8, 8, 8, 8, 8, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            "output": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 2, 2, 2, 2, 2, 2, 2, 0],
                [0, 0, 1, 1, 1, 1, 1, 1, 1, 0],
                [0, 0, 1, 1, 1, 1, 1, 1, 1, 0],
                [0, 0, 1, 1, 1, 1, 1, 1, 1, 0],
                [0, 0, 1, 1, 1, 1, 1, 1, 1, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            ]
        },
        {
            "input": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 8, 8, 8, 8, 0, 0, 0],
                [0, 0, 0, 8, 8, 8, 8, 0, 0, 0],
                [0, 0, 0, 8, 8, 8, 8, 0, 0, 0],
                [0, 0, 0, 8, 8, 8, 8, 0, 0, 0],
                [0, 0, 0, 8, 8, 8, 8, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            "output": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 2, 2, 2, 2, 0, 0, 0],
                [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
                [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
                [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
                [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            ]
        },
       {
            "input": [
                [0, 0, 0, 0, 0, 0, 0],
                [0, 0, 8, 8, 8, 0, 0],
                [0, 0, 8, 8, 8, 0, 0],
                [0, 0, 8, 8, 8, 0, 0],
                [0, 0, 8, 8, 8, 0, 0],
                [0, 0, 0, 0, 0, 0, 0]
            ],
            "output": [
                [0, 0, 0, 0, 0, 0, 0],
                [0, 0, 2, 2, 2, 0, 0],
                [0, 0, 1, 1, 1, 0, 0],
                [0, 0, 1, 1, 1, 0, 0],
                [0, 0, 1, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 0]
            ]
        },
        {
            "input": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 8, 8, 8, 8, 8, 8, 0],
                [0, 0, 8, 8, 8, 8, 8, 8, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            "output": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 2, 2, 2, 2, 2, 2, 0],
                [0, 0, 1, 1, 1, 1, 1, 1, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ]
        }

    ]
}

import numpy as np

for i, example in enumerate(task_data['train']):
    input_grid = np.array(example['input'])
    expected_output_grid = np.array(example['output'])
    predicted_output_grid = transform(input_grid)

    print(f"Example {i+1}:")
    print("Input:")
    print(get_grid_string(input_grid))
    print("Expected Output:")
    print(get_grid_string(expected_output_grid))
    print("Predicted Output:")
    print(get_grid_string(predicted_output_grid))
    print("-" * 20)