{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\ndef find_pattern_block(grid):\n    \"\"\"\n    Finds the top-left corner (r, c) and colors [[c1, c2], [c3, c4]] \n    of the first 2x2 block of non-background (non-zero) pixels.\n    \n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        tuple: (r, c, c1, c2, c3, c4) if found, otherwise None.\n    \"\"\"\n    height, width = grid.shape\n    for r in range(height - 1):\n        for c in range(width - 1):\n            # Check if all four pixels in the 2x2 block are non-zero\n            if grid[r, c] != 0 and \\\n               grid[r, c+1] != 0 and \\\n               grid[r+1, c] != 0 and \\\n               grid[r+1, c+1] != 0:\n                c1 = grid[r, c]\n                c2 = grid[r, c+1]\n                c3 = grid[r+1, c]\n                c4 = grid[r+1, c+1]\n                return r, c, c1, c2, c3, c4\n    return None # Should not happen based on task description\n\ndef draw_if_fits(grid, r_start, c_start, block_array):\n    \"\"\"\n    Draws the block_array onto the grid at (r_start, c_start) \n    only if the entire block fits within the grid boundaries.\n\n    Args:\n        grid (np.array): The target grid to draw on.\n        r_start (int): The starting row index.\n        c_start (int): The starting column index.\n        block_array (np.array): The block of pixels to draw.\n    \"\"\"\n    block_height, block_width = block_array.shape\n    grid_height, grid_width = grid.shape\n    \n    r_end = r_start + block_height\n    c_end = c_start + block_width\n    \n    # Check boundaries\n    if r_start >= 0 and c_start >= 0 and r_end <= grid_height and c_end <= grid_width:\n        # Draw the block\n        grid[r_start:r_end, c_start:c_end] = block_array\n\ndef transform(input_grid):\n    \"\"\"\n    Generates multiple colored rectangular blocks based on a 2x2 pattern \n    block found in the input grid. The generation rules involve scaling \n    the pattern and creating larger blocks based on the columns of the \n    pattern at specific relative offsets. Blocks are only drawn if they \n    fit entirely within the grid boundaries.\n\n    1. Find the unique 2x2 non-white pattern block [[c1, c2], [c3, c4]] \n       at location (r, c).\n    2. Initialize an output grid of the same size as the input, filled with white (0).\n    3. Copy the original 2x2 block to the output grid at (r, c).\n    4. Define potential generated blocks based on rules (scaling, columnar expansion) \n       with specific relative offsets from (r, c).\n    5. For each potential block, check if it fits within the grid boundaries.\n    6. If a block fits, draw it onto the output grid.\n    \"\"\"\n    input_array = np.array(input_grid, dtype=int)\n    height, width = input_array.shape\n    \n    # Find the 2x2 pattern block\n    pattern_info = find_pattern_block(input_array)\n    if pattern_info is None:\n        # If no pattern found (unexpected), return a copy of the input or an empty grid\n        return input_grid \n        \n    r, c, c1, c2, c3, c4 = pattern_info\n\n    # Initialize output grid\n    output_array = np.zeros_like(input_array)\n\n    # 1. Copy the original pattern block\n    original_block = input_array[r:r+2, c:c+2]\n    draw_if_fits(output_array, r, c, original_block)\n\n    # 2. Generate and attempt to draw the scaled 4x4 block\n    scaled_block = np.array([[c1, c1, c2, c2],\n                             [c1, c1, c2, c2],\n                             [c3, c3, c4, c4],\n                             [c3, c3, c4, c4]], dtype=int)\n    draw_if_fits(output_array, r - 1, c + 2, scaled_block)\n\n    # 3. Generate and attempt to draw the first column 4x4 blocks\n    block_c1_4x4 = np.full((4, 4), c1, dtype=int)\n    block_c3_4x4 = np.full((4, 4), c3, dtype=int)\n    draw_if_fits(output_array, r - 3, c + 6, block_c1_4x4)\n    draw_if_fits(output_array, r + 1, c + 6, block_c3_4x4)\n\n    # 4. Generate and attempt to draw the second column 4x4 blocks\n    block_c2_4x4 = np.full((4, 4), c2, dtype=int)\n    block_c4_4x4 = np.full((4, 4), c4, dtype=int)\n    draw_if_fits(output_array, r - 3, c + 10, block_c2_4x4)\n    draw_if_fits(output_array, r + 1, c + 10, block_c4_4x4)\n\n    # 5. Generate and attempt to draw the first column 8x8 blocks\n    block_c1_8x8 = np.full((8, 8), c1, dtype=int)\n    block_c3_8x8 = np.full((8, 8), c3, dtype=int)\n    draw_if_fits(output_array, r - 7, c + 14, block_c1_8x8)\n    draw_if_fits(output_array, r + 1, c + 14, block_c3_8x8)\n    \n    # 6. Generate and attempt to draw the second column 8x8 blocks\n    block_c2_8x8 = np.full((8, 8), c2, dtype=int)\n    block_c4_8x8 = np.full((8, 8), c4, dtype=int)\n    draw_if_fits(output_array, r - 7, c + 22, block_c2_8x8)\n    draw_if_fits(output_array, r + 1, c + 22, block_c4_8x8)\n\n    # Convert back to list of lists for the expected output format\n    return output_array.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6309,
    "candidates_token_count": 1682,
    "total_token_count": 7991,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 28.868048,
  "retries": null
}