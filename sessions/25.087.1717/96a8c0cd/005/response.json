{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\nimport collections\n\n# Define color constants for clarity\nWHITE = 0\nBLUE = 1\nRED = 2\nGREEN = 3\n\ndef transform(input_grid):\n    \"\"\"\n    Performs a constrained flood fill starting from the Red (2) pixel(s).\n    The fill spreads orthogonally (up, down, left, right) through adjacent\n    White (0) pixels. The fill is blocked by Blue (1) pixels, Green (3) pixels,\n    and the grid boundaries. All reachable White (0) pixels are changed to Red (2)\n    in the output grid. Original Red, Blue, and Green pixels are preserved.\n    \"\"\"\n    \n    # Get grid dimensions\n    height = len(input_grid)\n    width = len(input_grid[0])\n    \n    # Initialize output_grid as a deep copy of the input\n    output_grid = copy.deepcopy(input_grid)\n    \n    # Set to keep track of visited coordinates during the flood fill\n    visited = set()\n    \n    # Queue for Breadth-First Search (BFS) starting from initial Red pixels\n    queue = collections.deque()\n    \n    # Find initial Red (2) pixels and add them to the queue and visited set\n    for r in range(height):\n        for c in range(width):\n            if input_grid[r][c] == RED:\n                start_coord = (r, c)\n                # Only add if not already visited (handles overlapping initial red areas if they existed)\n                if start_coord not in visited:\n                    visited.add(start_coord)\n                    queue.append(start_coord)\n                    # Note: The initial red pixel itself is NOT changed in the output grid,\n                    # it's just the starting point for the fill spreading into white areas.\n                    # The deep copy already preserves its color.\n\n    # Define orthogonal directions (right, left, down, up)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    # Perform BFS flood fill\n    while queue:\n        current_row, current_col = queue.popleft()\n        \n        # Explore neighbors\n        for dr, dc in directions:\n            neighbor_row, neighbor_col = current_row + dr, current_col + dc\n            neighbor_coord = (neighbor_row, neighbor_col)\n            \n            # Check 1: Is the neighbor within the grid boundaries?\n            if 0 <= neighbor_row < height and 0 <= neighbor_col < width:\n                # Check 2: Has the neighbor already been visited?\n                if neighbor_coord not in visited:\n                    # Check 3: Is the neighbor White (0) in the *input* grid (fillable)?\n                    if input_grid[neighbor_row][neighbor_col] == WHITE:\n                        # If all checks pass:\n                        # 1. Change the color in the output grid\n                        output_grid[neighbor_row][neighbor_col] = RED\n                        # 2. Mark neighbor as visited\n                        visited.add(neighbor_coord)\n                        # 3. Add neighbor to the queue to explore from it\n                        queue.append(neighbor_coord)\n                    else:\n                         # If the neighbour is not white, but within bounds and not visited,\n                         # mark it as visited anyway. This prevents reconsidering barrier\n                         # cells (Blue, Green, or other non-white/non-red) multiple times.\n                         # The initial Red cell(s) were already added to visited.\n                         visited.add(neighbor_coord)\n\n\n    # Return the modified grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 10912,
    "candidates_token_count": 826,
    "total_token_count": 11738,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.976193,
  "retries": null
}