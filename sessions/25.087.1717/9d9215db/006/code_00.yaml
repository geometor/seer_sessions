task_context:
  grid_properties:
    - background_color: white (0)
    - dimensions: height (H) and width (W) vary per example, but are consistent between input and output for a given example.
    - symmetry_axes: horizontal centerline (between rows floor((H-1)/2) and ceil((H-1)/2)), vertical centerline (between columns floor((W-1)/2) and ceil((W-1)/2)).
  input_objects:
    - type: individual pixels
    - properties:
        - color: non-white (1-9)
        - position: row (r), column (c)
  output_objects:
    - type: individual pixels derived from input pixels
    - properties:
        - color: same as the generating input pixel
        - position: determined by reflections
transformation:
  action: reflection and placement
  details:
    - For each non-white input pixel at (r, c) with color C:
      - Calculate reflection coordinates:
        - vertical_reflection_row: r_v = H - 1 - r
        - horizontal_reflection_col: c_h = W - 1 - c
      - Identify four target output positions:
        - P1: (r, c)  # Original
        - P2: (r_v, c) # Vertical Reflection
        - P3: (r, c_h) # Horizontal Reflection
        - P4: (r_v, c_h) # Diagonal Reflection
      - Place color C at positions P1, P2, P3, P4 in the output grid.
  overlap_rule:
    - If multiple input pixels map to the same output position, the color from the input pixel processed later (typically based on row-major iteration order) overwrites the previous color.
  output_initialization:
    - The output grid starts as a blank grid (all white, 0) with the same dimensions as the input grid.