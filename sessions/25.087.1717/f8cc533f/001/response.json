{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nTransformation Rule:\n\n1.  Identify the background color, which is the most frequent color in the input grid.\n2.  Create an output grid initialized as a copy of the input grid.\n3.  Iterate through each pixel of the input grid.\n4.  If a pixel has the background color:\n    a.  Examine its 8 neighbors (including diagonals).\n    b.  Count the occurrences of each non-background color among these neighbors.\n    c.  If any single non-background color appears 3 or more times, change the color of the corresponding pixel in the output grid to that non-background color.\n5.  Pixels that are not the background color remain unchanged.\n6.  Return the modified output grid.\n\"\"\"\n\ndef find_background_color(grid):\n    \"\"\"Finds the most frequent color in the grid.\"\"\"\n    colors, counts = np.unique(grid, return_counts=True)\n    return colors[np.argmax(counts)]\n\ndef get_neighbors(grid, r, c):\n    \"\"\"Gets the values of the 8 neighbors of a pixel at (r, c).\"\"\"\n    height, width = grid.shape\n    neighbors = []\n    for dr in [-1, 0, 1]:\n        for dc in [-1, 0, 1]:\n            if dr == 0 and dc == 0:\n                continue  # Skip the pixel itself\n            nr, nc = r + dr, c + dc\n            # Check boundaries\n            if 0 <= nr < height and 0 <= nc < width:\n                neighbors.append(grid[nr, nc])\n    return neighbors\n\ndef transform(input_grid):\n    \"\"\"\n    Fills background pixels based on the color of surrounding neighbors.\n    A background pixel changes to a non-background color C if at least 3\n    of its 8 neighbors have color C.\n    \"\"\"\n    # Convert input list of lists to numpy array for easier manipulation\n    input_grid_np = np.array(input_grid, dtype=int)\n    \n    # Initialize output_grid as a copy of the input\n    output_grid = input_grid_np.copy()\n    height, width = input_grid_np.shape\n\n    # 1. Identify the background color\n    background_color = find_background_color(input_grid_np)\n\n    # 3. Iterate through each pixel of the input grid\n    for r in range(height):\n        for c in range(width):\n            # 4. Check if the pixel has the background color\n            if input_grid_np[r, c] == background_color:\n                # a. Examine its 8 neighbors\n                neighbors = get_neighbors(input_grid_np, r, c)\n                \n                # b. Count occurrences of non-background colors\n                non_background_neighbors = [n for n in neighbors if n != background_color]\n                if not non_background_neighbors:\n                    continue # No non-background neighbors, nothing to change\n                    \n                neighbor_counts = Counter(non_background_neighbors)\n                \n                # c. Check if any single non-background color appears >= 3 times\n                for color, count in neighbor_counts.items():\n                    if count >= 3:\n                        # d. Change the output pixel's color\n                        output_grid[r, c] = color\n                        # Assuming only one color can meet the condition per pixel based on examples\n                        break \n                        \n    # Convert back to list of lists for the expected output format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5210,
    "candidates_token_count": 816,
    "total_token_count": 6026,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.827413,
  "retries": null
}