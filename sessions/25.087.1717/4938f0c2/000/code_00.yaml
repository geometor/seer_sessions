task_description: Replicate a red object based on reflections centered on a 2x2 green square, only if specific conditions are met.

element_focus:
  - color: 3 # green
    role: anchor/center_of_symmetry
    properties:
      - must be a 2x2 square
      - must be unique (exactly one instance)
  - color: 2 # red
    role: object_to_be_transformed
    properties:
      - must be unique (exactly one instance)
  - color: 0 # white
    role: background

actions:
  - name: find_objects
    description: Identify all contiguous blocks of non-background colors (red and green).
  - name: count_objects
    description: Count the number of distinct red objects and distinct green objects.
  - name: check_green_object_properties
    description: Verify if there is exactly one green object and if it has a shape of 2x2 pixels.
  - name: check_red_object_properties
    description: Verify if there is exactly one red object.
  - name: calculate_center
    description: Determine the center coordinates (row, col) of the 2x2 green square. Let the top-left pixel be (r,c), center is (r+0.5, c+0.5).
  - name: reflect_object
    inputs: [object_pixels, center_coords]
    outputs: [reflected_pixels_horizontal, reflected_pixels_vertical, reflected_pixels_center]
    description: >
      Calculate the coordinates of the red object's pixels after reflection across the horizontal axis,
      vertical axis, and center point defined by the green square's center.
      - Horizontal Reflection of (r_pix, c_pix) across center (cr, cc): (2*cr - r_pix, c_pix)
      - Vertical Reflection of (r_pix, c_pix) across center (cr, cc): (r_pix, 2*cc - c_pix)
      - Center Reflection of (r_pix, c_pix) across center (cr, cc): (2*cr - r_pix, 2*cc - c_pix)
  - name: construct_output
    description: >
      If the conditions (exactly one 2x2 green object, exactly one red object) are met,
      create the output grid by taking the input grid and adding the three sets of reflected red pixels.
      If the conditions are not met, the output grid is identical to the input grid.

relationships:
  - The green object acts as the anchor and defines the center for the reflection operations on the red object.
  - The transformation (reflection) is conditional on the number and shape of the green and red objects.

constraints:
  - Reflected pixels falling outside the grid boundaries are ignored.
  - If reflected pixels overlap with existing pixels, the red color takes precedence over white.