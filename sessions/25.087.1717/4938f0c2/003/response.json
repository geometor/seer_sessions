{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentify unique red (2) and green (3) objects on a white (0) background using 8-way connectivity.\nIf there is exactly one red object and exactly one green object, and the green object is a 2x2 square, then replicate the red object by reflecting it across the horizontal, vertical, and center axes defined by the center of the 2x2 green square.\nThe three reflected copies are added to the original grid (overwriting only background pixels if necessary, though overlaps are primarily with the original object or other reflections in the examples).\nIf the conditions (one 8-way connected red object, one 8-way connected 2x2 green object) are not met, return the input grid unchanged.\n\"\"\"\n\ndef find_objects_8way(grid, color):\n    \"\"\"\n    Finds all contiguous objects of a specified color in the grid using 8-way connectivity.\n    Returns a list of sets, where each set contains the (row, col) coordinates of an object.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n    if rows == 0 or cols == 0:\n        return objects\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == color and not visited[r, c]:\n                obj_coords = set()\n                q = deque([(r, c)])\n                visited[r, c] = True\n                while q:\n                    row, col = q.popleft()\n                    obj_coords.add((row, col))\n                    # Check 8 neighbors (including diagonals)\n                    for dr in [-1, 0, 1]:\n                        for dc in [-1, 0, 1]:\n                            if dr == 0 and dc == 0:\n                                continue\n                            nr, nc = row + dr, col + dc\n                            if 0 <= nr < rows and 0 <= nc < cols and \\\n                               grid[nr, nc] == color and not visited[nr, nc]:\n                                visited[nr, nc] = True\n                                q.append((nr, nc))\n                if obj_coords:\n                    objects.append(obj_coords)\n    return objects\n\ndef is_2x2(obj_coords):\n    \"\"\"\n    Checks if a set of coordinates forms a 2x2 square.\n    \"\"\"\n    if len(obj_coords) != 4:\n        return False\n    # Check if the min/max rows/cols define a 1x1 bounding box (which means a 2x2 pixel area)\n    rows = {r for r, c in obj_coords}\n    cols = {c for r, c in obj_coords}\n    return len(rows) == 2 and len(cols) == 2 and \\\n           max(rows) == min(rows) + 1 and max(cols) == min(cols) + 1\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the reflection transformation based on the presence of a single 8-way\n    connected red object and a single 8-way connected 2x2 green square.\n    \"\"\"\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # 1. Identify red and green objects using 8-way connectivity\n    red_objects = find_objects_8way(input_grid, 2)\n    green_objects = find_objects_8way(input_grid, 3)\n\n    # 2. Check if there is exactly one red object and exactly one green object\n    if len(red_objects) != 1 or len(green_objects) != 1:\n        # 3. If not, return the input grid unmodified\n        return output_grid\n\n    red_coords = red_objects[0]\n    green_coords = green_objects[0]\n\n    # 4. Check if the single green object is a 2x2 square\n    if not is_2x2(green_coords):\n        # 5. If not, return the input grid unmodified\n        return output_grid\n\n    # 6. Conditions are met: proceed with reflection\n    # a. Find the top-left coordinate (min_r, min_c) of the 2x2 green square\n    min_r = min(r for r, c in green_coords)\n    min_c = min(c for r, c in green_coords)\n\n    # b. Output grid is already initialized as a copy\n\n    # c. Iterate through each pixel (r, c) of the original red object\n    for r, c in red_coords:\n        # i. Calculate horizontally reflected coordinate\n        ref_r_h = 2 * min_r + 1 - r\n        ref_c_h = c\n\n        # ii. Calculate vertically reflected coordinate\n        ref_r_v = r\n        ref_c_v = 2 * min_c + 1 - c\n\n        # iii. Calculate center-reflected coordinate\n        ref_r_c = 2 * min_r + 1 - r\n        ref_c_c = 2 * min_c + 1 - c\n\n        # iv. Add reflections to the output grid if within bounds\n        # Horizontal Reflection\n        if 0 <= ref_r_h < rows and 0 <= ref_c_h < cols:\n            output_grid[ref_r_h, ref_c_h] = 2 # Set to red\n\n        # Vertical Reflection\n        if 0 <= ref_r_v < rows and 0 <= ref_c_v < cols:\n            output_grid[ref_r_v, ref_c_v] = 2 # Set to red\n\n        # Center Reflection\n        if 0 <= ref_r_c < rows and 0 <= ref_c_c < cols:\n            output_grid[ref_r_c, ref_c_c] = 2 # Set to red\n\n    # d. Return the modified output grid\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 3287,
            "end_index": 3622,
            "uri": "https://github.com/abhisheksol/competivity-programming",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 24176,
    "candidates_token_count": 1403,
    "total_token_count": 25579,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.472593,
  "retries": null
}