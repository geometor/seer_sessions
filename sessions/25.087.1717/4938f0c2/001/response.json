{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentify unique red (2) and green (3) objects on a white (0) background.\nIf there is exactly one 2x2 green object and exactly one red object, replicate the red object by reflecting it across the horizontal, vertical, and center axes defined by the center of the 2x2 green square.\nThe three reflected copies are added to the original grid.\nIf the conditions (one 2x2 green object, one red object) are not met, return the input grid unchanged.\n\"\"\"\n\ndef find_objects(grid, color):\n    \"\"\"Finds all contiguous objects of a specified color in the grid.\"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == color and not visited[r, c]:\n                obj_coords = set()\n                q = deque([(r, c)])\n                visited[r, c] = True\n                while q:\n                    row, col = q.popleft()\n                    obj_coords.add((row, col))\n                    # Check 4 neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] == color and not visited[nr, nc]:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n                if obj_coords:\n                    objects.append(obj_coords)\n    return objects\n\ndef is_2x2(obj_coords):\n    \"\"\"Checks if a set of coordinates forms a 2x2 square.\"\"\"\n    if len(obj_coords) != 4:\n        return False\n    rows = sorted([r for r, c in obj_coords])\n    cols = sorted([c for r, c in obj_coords])\n    return rows[0] == rows[1] and rows[2] == rows[3] and rows[0] + 1 == rows[2] and \\\n           cols[0] == cols[2] and cols[1] == cols[3] and cols[0] + 1 == cols[1]\n\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the reflection transformation based on the presence of a single 2x2\n    green square and a single red object.\n    \"\"\"\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Find green objects (color 3)\n    green_objects = find_objects(input_grid, 3)\n\n    # Find red objects (color 2)\n    red_objects = find_objects(input_grid, 2)\n\n    # Check conditions: exactly one green object, exactly one red object, and green is 2x2\n    if len(green_objects) != 1 or len(red_objects) != 1:\n        return output_grid # Return original if counts are wrong\n\n    green_coords = green_objects[0]\n    if not is_2x2(green_coords):\n        return output_grid # Return original if green object is not 2x2\n\n    red_coords = red_objects[0]\n\n    # Calculate the center of the green 2x2 square\n    min_r = min(r for r, c in green_coords)\n    min_c = min(c for r, c in green_coords)\n    center_r = min_r + 0.5\n    center_c = min_c + 0.5\n\n    # Iterate through each pixel of the red object and calculate reflections\n    for r, c in red_coords:\n        # Horizontal reflection (across horizontal line through center)\n        ref_r_h = int(round(2 * center_r - (r + 1))) # Using pixel center (r+0.5) -> 2*center_r - (r+0.5) - 0.5 = 2*center_r - r - 1\n        ref_c_h = c\n\n        # Vertical reflection (across vertical line through center)\n        ref_r_v = r\n        ref_c_v = int(round(2 * center_c - (c + 1))) # Using pixel center (c+0.5) -> 2*center_c - (c+0.5) - 0.5 = 2*center_c - c - 1\n\n        # Center reflection (180-degree rotation)\n        ref_r_c = ref_r_h # Same row calculation as horizontal\n        ref_c_c = ref_c_v # Same col calculation as vertical\n\n        # Apply reflections to the output grid if within bounds\n        # Note: The original red object is already in output_grid\n        \n        # Horizontal Reflection\n        if 0 <= ref_r_h < rows and 0 <= ref_c_h < cols:\n            output_grid[ref_r_h, ref_c_h] = 2\n\n        # Vertical Reflection\n        if 0 <= ref_r_v < rows and 0 <= ref_c_v < cols:\n            output_grid[ref_r_v, ref_c_v] = 2\n\n        # Center Reflection\n        if 0 <= ref_r_c < rows and 0 <= ref_c_c < cols:\n            output_grid[ref_r_c, ref_c_c] = 2\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6083,
    "candidates_token_count": 1329,
    "total_token_count": 7412,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 18.635313,
  "retries": null
}