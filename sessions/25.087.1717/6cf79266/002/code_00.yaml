task_description: Find specific patterns in the input grid and replace them in the output grid.
grid_properties:
  - dimensionality: 2D
  - cell_values: Integers 0-9 representing colors (white=0, blue=1, green=3, gray=5, orange=7).
  - size: Variable, up to 30x30. Examples shown are 20x20.
objects:
  - type: Pattern
    shape: 3x3 square
    color: All white (0) pixels
    identifier: white_square_3x3
  - type: Pattern
    shape: 3x3 square
    color: All blue (1) pixels
    identifier: blue_square_3x3
actions:
  - name: find
    target: white_square_3x3
    description: Identify all occurrences of 3x3 subgrids containing only white pixels in the input grid.
  - name: filter_overlaps
    target: white_square_3x3
    description: >
      If multiple identified white_square_3x3 patterns overlap (share any pixels),
      select only one from the overlapping set to be transformed. The selection
      criterion is based on the top-left coordinate (row, col) of the square:
      choose the square with the minimum row index. If row indices are tied,
      choose the one with the minimum column index.
  - name: replace
    source: selected white_square_3x3 (after filtering)
    destination: Corresponding 3x3 area in the output grid
    replacement: blue_square_3x3
    description: >
      For each selected white_square_3x3, replace the pixels in the
      corresponding 3x3 location in the output grid with blue (1) pixels.
initial_state: Output grid is a copy of the input grid.
final_state: Output grid reflects the input grid with the selected 3x3 white squares replaced by 3x3 blue squares.
constraints:
  - Only 3x3 squares that are entirely white in the *input* are candidates for transformation.
  - Pixels belonging to a transformed blue square cannot be part of another transformed square, effectively handling overlaps by prioritizing the first match encountered in a top-down, left-right scan.