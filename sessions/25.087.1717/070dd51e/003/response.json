{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import defaultdict\n\n\"\"\"\nConnect pairs of same-colored pixels in the input grid by drawing a straight \nline (horizontal or vertical) between them using their color. Lines are drawn \nfirst horizontally, then vertically, so that vertical lines overwrite \nhorizontal lines at intersection points.\n\n1.  Create a copy of the input grid to serve as the output grid.\n2.  Identify all non-white pixels in the input grid and group them by color, \n    storing their coordinates.\n3.  Create two lists: one for pairs defining horizontal lines and one for \n    pairs defining vertical lines.\n4.  Iterate through each color group:\n    *   If a group contains exactly two pixels:\n        *   Determine the coordinates (r1, c1) and (r2, c2) of the pair.\n        *   If r1 == r2 (horizontal), add the pair (coordinates, color) to the \n            horizontal lines list.\n        *   If c1 == c2 (vertical), add the pair (coordinates, color) to the \n            vertical lines list.\n5.  Process the horizontal lines list:\n    *   For each horizontal pair ((r1, c1), (r2, c2)) and its color:\n        *   Fill the pixels on the output grid from (r1, min(c1, c2)) to \n            (r1, max(c1, c2)) inclusive with the pair's color.\n6.  Process the vertical lines list:\n    *   For each vertical pair ((r1, c1), (r2, c2)) and its color:\n        *   Fill the pixels on the output grid from (min(r1, r2), c1) to \n            (max(r1, r2), c1) inclusive with the pair's color. This step \n            overwrites any color previously placed by horizontal lines at \n            intersection points.\n7.  Return the final output grid.\n\"\"\"\n\ndef find_colored_pixels(grid):\n    \"\"\"Finds all non-white pixels and groups them by color.\"\"\"\n    colored_pixels = defaultdict(list)\n    height, width = grid.shape\n    for r in range(height):\n        for c in range(width):\n            color = grid[r, c]\n            if color != 0: # 0 is white (background)\n                colored_pixels[color].append((r, c))\n    return colored_pixels\n\ndef draw_horizontal_line(grid, p1, p2, color):\n    \"\"\"Fills the horizontal line segment between two points p1 and p2.\"\"\"\n    r1, c1 = p1\n    r2, c2 = p2 # r1 == r2 for horizontal lines\n    start_col = min(c1, c2)\n    end_col = max(c1, c2)\n    for c in range(start_col, end_col + 1):\n        grid[r1, c] = color\n\ndef draw_vertical_line(grid, p1, p2, color):\n    \"\"\"Fills the vertical line segment between two points p1 and p2.\"\"\"\n    r1, c1 = p1\n    r2, c2 = p2 # c1 == c2 for vertical lines\n    start_row = min(r1, r2)\n    end_row = max(r1, r2)\n    for r in range(start_row, end_row + 1):\n        grid[r, c1] = color\n\ndef transform(input_grid):\n    # Convert input list of lists to a NumPy array for efficient manipulation\n    input_np = np.array(input_grid, dtype=int)\n    \n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_np)\n\n    # Find all non-white pixels and group them by color\n    colored_pixels_map = find_colored_pixels(input_np)\n\n    # Prepare lists to store details of horizontal and vertical lines\n    horizontal_lines = []\n    vertical_lines = []\n\n    # Iterate through each color group found\n    for color, positions in colored_pixels_map.items():\n        # Check if there are exactly two pixels of this color\n        if len(positions) == 2:\n            # Get the coordinates of the two pixels\n            p1 = positions[0]\n            p2 = positions[1]\n            r1, c1 = p1\n            r2, c2 = p2\n\n            # Classify line as horizontal or vertical and add to respective list\n            if r1 == r2: # Horizontal alignment\n                horizontal_lines.append({'p1': p1, 'p2': p2, 'color': color})\n            elif c1 == c2: # Vertical alignment\n                vertical_lines.append({'p1': p1, 'p2': p2, 'color': color})\n            # Note: The problem implies pairs are strictly horizontal or vertical.\n\n    # Draw all horizontal lines first\n    for line_info in horizontal_lines:\n        draw_horizontal_line(output_grid, line_info['p1'], line_info['p2'], line_info['color'])\n\n    # Draw all vertical lines second (this handles overwriting at intersections)\n    for line_info in vertical_lines:\n        draw_vertical_line(output_grid, line_info['p1'], line_info['p2'], line_info['color'])\n\n    # Convert the final NumPy array back to a list of lists for the required output format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8348,
    "candidates_token_count": 1273,
    "total_token_count": 9621,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.193429,
  "retries": null
}