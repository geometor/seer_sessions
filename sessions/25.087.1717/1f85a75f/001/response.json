{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentify all contiguous non-background (non-zero) objects in the input grid.\nCalculate the size (pixel count) of each object.\nSelect the object with the largest size.\nDetermine the minimal bounding box (top row, bottom row, left column, right column) enclosing this largest object.\nExtract the portion of the input grid defined by this bounding box.\nReturn the extracted subgrid as the output.\n\"\"\"\n\ndef find_objects(grid):\n    \"\"\"\n    Finds all contiguous objects of the same non-zero color in the grid.\n\n    Args:\n        grid (np.ndarray): The input grid.\n\n    Returns:\n        list: A list of objects. Each object is represented as a dictionary\n              containing 'color' (int) and 'pixels' (set of (row, col) tuples).\n              Returns an empty list if the grid has no non-zero pixels.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = set()\n    objects = []\n    \n    for r in range(rows):\n        for c in range(cols):\n            # Check if the pixel is non-background and not visited yet\n            if grid[r, c] != 0 and (r, c) not in visited:\n                color = grid[r, c]\n                current_object_pixels = set()\n                q = deque([(r, c)])\n                visited.add((r, c))\n                current_object_pixels.add((r, c))\n\n                # Breadth-First Search (BFS) to find connected pixels of the same color\n                while q:\n                    row, col = q.popleft()\n\n                    # Check 4 neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n\n                        # Check bounds and if neighbor is same color and not visited\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] == color and (nr, nc) not in visited:\n                            visited.add((nr, nc))\n                            current_object_pixels.add((nr, nc))\n                            q.append((nr, nc))\n                \n                # Store the found object\n                objects.append({'color': color, 'pixels': current_object_pixels})\n                \n    return objects\n\ndef get_bounding_box(pixels):\n    \"\"\"\n    Calculates the minimal bounding box for a set of pixel coordinates.\n\n    Args:\n        pixels (set): A set of (row, col) tuples representing the object's pixels.\n\n    Returns:\n        tuple: (min_row, max_row, min_col, max_col)\n               Returns None if the pixel set is empty.\n    \"\"\"\n    if not pixels:\n        return None\n    \n    rows = [r for r, c in pixels]\n    cols = [c for r, c in pixels]\n    \n    min_row = min(rows)\n    max_row = max(rows)\n    min_col = min(cols)\n    max_col = max(cols)\n    \n    return min_row, max_row, min_col, max_col\n\ndef transform(input_grid):\n    \"\"\"\n    Finds the largest contiguous non-background object in the input grid,\n    determines its bounding box, and extracts that region as the output grid.\n    \"\"\"\n    # Convert input list of lists to numpy array for easier slicing\n    grid = np.array(input_grid, dtype=int)\n    \n    # Find all non-background objects\n    objects = find_objects(grid)\n    \n    # Handle cases with no non-background objects\n    if not objects:\n        # Depending on requirements, could return empty grid, original, etc.\n        # Let's return a 1x1 white grid as a placeholder.\n        return np.array([[0]], dtype=int) \n\n    # Find the largest object based on pixel count\n    largest_object = max(objects, key=lambda obj: len(obj['pixels']))\n    \n    # Get the bounding box of the largest object\n    min_row, max_row, min_col, max_col = get_bounding_box(largest_object['pixels'])\n    \n    # Extract the subgrid defined by the bounding box\n    # Note: Slicing is exclusive of the end index, so add 1 to max indices\n    output_grid = grid[min_row : max_row + 1, min_col : max_col + 1]\n    \n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5500,
    "candidates_token_count": 1065,
    "total_token_count": 6565,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.206885,
  "retries": null
}