{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nProcesses a grid based on a central horizontal axis defined by non-white pixels. \n1. Initialize an output grid of the same size as the input grid, filled entirely with white (0).\n2. Identify all non-white pixels in the input grid. If none, return the white grid.\n3. Find the unique row indices containing non-white pixels ('active_rows') and sort them.\n4. Determine the 'middle_row' as the median row index from 'active_rows'.\n5. Find all non-white pixels from the input grid located on this 'middle_row'.\n6. Identify the 'fill_color' as the color of the leftmost non-white pixel on the 'middle_row'.\n7. Fill the entire 'middle_row' in the output grid with the 'fill_color'.\n8. Overlay the original non-white pixels from the input's 'middle_row' onto the output's 'middle_row'.\n9. For each non-white pixel in the input grid:\n    - If its row is above the 'middle_row', project its color diagonally up and to the left onto the output grid until a boundary is hit.\n    - If its row is below the 'middle_row', project its color diagonally down and to the left onto the output grid until a boundary is hit.\n    - Pixels on the 'middle_row' are not projected.\n10. Return the final output grid.\n\"\"\"\n\ndef find_non_white_pixels(grid):\n    \"\"\"Finds all non-white pixels and returns their coordinates and colors.\"\"\"\n    pixels = []\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            color = grid[r, c]\n            if color != 0:\n                pixels.append(((r, c), color))\n    return pixels\n\ndef project_up_left(grid, r_start, c_start, color):\n    \"\"\"Projects a color diagonally up-left from (r_start, c_start) onto the grid.\"\"\"\n    rows, cols = grid.shape\n    r, c = r_start, c_start\n    while r >= 0 and c >= 0:\n        grid[r, c] = color\n        r -= 1\n        c -= 1\n\ndef project_down_left(grid, r_start, c_start, color):\n    \"\"\"Projects a color diagonally down-left from (r_start, c_start) onto the grid.\"\"\"\n    rows, cols = grid.shape\n    r, c = r_start, c_start\n    while r < rows and c >= 0:\n        grid[r, c] = color\n        r += 1\n        c -= 1\n\ndef transform(input_grid):\n    \"\"\"\n    Applies transformations based on a median 'middle row'.\n    Pixels above the middle row project up-left.\n    Pixels below the middle row project down-left.\n    The middle row is filled based on its *leftmost* pixel, then overlaid with original middle row pixels.\n    \"\"\"\n    input_grid_np = np.array(input_grid, dtype=int)\n    rows, cols = input_grid_np.shape\n    # 1. Initialize output grid\n    output_grid = np.zeros_like(input_grid_np) # Initialize with white (0)\n\n    # 2. Identify all non-white pixels\n    non_white_pixels = find_non_white_pixels(input_grid_np)\n\n    # Handle empty input\n    if not non_white_pixels:\n        return output_grid.tolist() # Return empty white grid\n\n    # 3. Collect and sort active rows\n    active_rows = sorted(list(set(r for (r, c), color in non_white_pixels)))\n\n    # Should not happen if non_white_pixels is not empty, but safeguard\n    if not active_rows:\n         return output_grid.tolist() \n\n    # 4. Determine the middle row (median row index)\n    middle_row_list_index = len(active_rows) // 2\n    middle_row = active_rows[middle_row_list_index]\n\n    # 5. Find pixels located on the middle row in the input\n    middle_row_pixels = [((r, c), color) for (r, c), color in non_white_pixels if r == middle_row]\n\n    # 6. Determine the fill color from the *leftmost* pixel on the middle row\n    fill_color = 0 # Default to white if middle row has no pixels (unlikely)\n    if middle_row_pixels:\n        leftmost_col = cols # Start higher than any possible column index\n        # Find the pixel with the minimum column index\n        for (r, c), color in middle_row_pixels:\n            if c < leftmost_col:\n                leftmost_col = c\n                fill_color = color\n        \n        # 7. Fill the entire middle row with the fill color\n        output_grid[middle_row, :] = fill_color\n\n        # 8. Overlay original pixels from the middle row onto the filled row\n        for (r, c), color in middle_row_pixels:\n             # This overwrites the fill color at these specific columns\n            output_grid[r, c] = color\n            \n    # 9. Process all non-white pixels for projection\n    for (r, c), color in non_white_pixels:\n        if r < middle_row:\n            # Project pixels above the middle row up-left\n            project_up_left(output_grid, r, c, color)\n        elif r > middle_row:\n            # Project pixels below the middle row down-left\n            project_down_left(output_grid, r, c, color)\n        # else: r == middle_row -> Do nothing, handled by fill/overlay\n\n    # 10. Return the final grid\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 15465,
    "candidates_token_count": 1363,
    "total_token_count": 16828,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 19.029296,
  "retries": null
}