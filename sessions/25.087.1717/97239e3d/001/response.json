{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import defaultdict\n\n\"\"\"\nProcesses an input grid based on marker pixels (colors other than white 0 or azure 8).\n\n1.  Identifies marker pixels and groups them by color.\n2.  For each color:\n    a.  If there are two or more markers of that color, defines a bounding box using the minimum and maximum row/column of those markers.\n    b.  If there is exactly one marker of that color at (r, c), defines a rectangle from row 0 to r, and from column 4 to c (inclusive, using min/max for column range). The column 4 seems to be a consistent structural anchor in the examples.\n3.  Fills the defined rectangle in the output grid with the marker color, but only modifies pixels that were originally white (0) in the input grid.\n\"\"\"\n\ndef find_marker_pixels(grid):\n    \"\"\"\n    Finds all pixels in the grid that are not white (0) or azure (8).\n\n    Args:\n        grid (np.ndarray): The input grid.\n\n    Returns:\n        dict: A dictionary where keys are marker colors and values are lists\n              of (row, col) tuples representing their locations.\n    \"\"\"\n    markers = defaultdict(list)\n    height, width = grid.shape\n    for r in range(height):\n        for c in range(width):\n            color = grid[r, c]\n            if color != 0 and color != 8:\n                markers[color].append((r, c))\n    return markers\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by filling rectangles defined by marker pixels.\n\n    Args:\n        input_grid (np.ndarray): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.ndarray: A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n    height, width = input_grid.shape\n\n    # Find and group marker pixels by color\n    markers_by_color = find_marker_pixels(input_grid)\n\n    # Process each color group to define and fill rectangles\n    for color, locations in markers_by_color.items():\n        r_start, r_end = -1, -1\n        c_start, c_end = -1, -1\n\n        if len(locations) == 1:\n            # Case 1: Single marker pixel defines the rectangle\n            r, c = locations[0]\n            # Define row range: from top row (0) to marker row (r)\n            r_start = 0\n            r_end = r\n            # Define column range: from anchor column (4) to marker column (c)\n            # The anchor column 4 appears consistent in examples.\n            anchor_col = 4\n            # Ensure anchor_col is within bounds if grid is narrow, though examples are wide.\n            if anchor_col >= width:\n                 anchor_col = 0 # Fallback if grid is unexpectedly narrow\n\n            c_start = min(anchor_col, c)\n            c_end = max(anchor_col, c)\n\n        elif len(locations) > 1:\n            # Case 2: Multiple marker pixels define the bounding box\n            rows = [loc[0] for loc in locations]\n            cols = [loc[1] for loc in locations]\n            r_start = min(rows)\n            r_end = max(rows)\n            c_start = min(cols)\n            c_end = max(cols)\n\n        # Fill the defined rectangle if bounds are valid\n        if r_start != -1: # Check if rectangle bounds were successfully defined\n            # Ensure bounds are within the grid dimensions\n            r_start = max(0, r_start)\n            r_end = min(height - 1, r_end)\n            c_start = max(0, c_start)\n            c_end = min(width - 1, c_end)\n\n            # Iterate through the rectangle bounds\n            for i in range(r_start, r_end + 1):\n                for j in range(c_start, c_end + 1):\n                    # Only change pixels that were originally white (0)\n                    if input_grid[i, j] == 0:\n                        output_grid[i, j] = color\n\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6072,
    "candidates_token_count": 1012,
    "total_token_count": 7084,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 18.117664,
  "retries": null
}