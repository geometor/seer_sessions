task_description: "Identify the largest connected red (2) rectangular object and any 'marker' pixels (non-white (0), non-red (2)). Draw red lines extending from the rectangle's boundaries towards the markers. Vertical lines extend from markers above/below the rectangle. Horizontal lines extend from markers left/right of the rectangle."

objects:
  - type: grid
    description: The input and output are 2D arrays of integers (0-9) representing colors.
  - type: rectangle
    color: red (2)
    property: largest connected rectangular block of red pixels.
    role: central reference object.
    attributes:
      - bounding_box: (min_row, min_col, max_row, max_col)
  - type: marker
    color: any color except white (0) and red (2)
    property: single pixel locations.
    role: triggers for drawing lines.
    attributes:
      - position: (row, col)
      - relative_position: (Above, Below, Left, Right) relative to the red rectangle's bounding box.
  - type: line
    color: red (2)
    role: drawn elements in the output grid.
    property: can be vertical or horizontal.

actions:
  - action: find_largest_red_rectangle
    input: input grid
    output: bounding box (min_r, min_c, max_r, max_c) of the largest red rectangle.
  - action: find_markers
    input: input grid
    output: list of marker positions (row, col) and their colors.
  - action: draw_lines
    input: output grid (copy of input), red rectangle bbox, marker positions
    output: modified output grid
    condition: only draw on white (0) pixels.
    details:
      - if marker is Above (marker_row < min_r):
          draw vertical red line in marker_col from row 0 to min_r - 1.
      - if marker is Below (marker_row > max_r):
          draw vertical red line in marker_col from row max_r + 1 to grid_height - 1.
      - if marker is Left (marker_col < min_c):
          draw horizontal red lines for **each row** `r` from `min_r` to `max_r`, extending from column 0 to min_c - 1.
      - if marker is Right (marker_col > max_c):
          draw horizontal red lines for **each row** `r` from `min_r` to `max_r`, extending from column max_c + 1 to grid_width - 1.