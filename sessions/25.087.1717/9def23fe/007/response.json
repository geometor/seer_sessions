{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nTransformation Rule:\n1. Initialize the output grid as a copy of the input grid.\n2. Identify the largest connected red (2) object that forms a solid rectangle in the input grid. Determine its bounding box coordinates: `min_row`, `min_col`, `max_row`, `max_col`. If no such rectangle is found, return the original grid.\n3. Identify all \"marker\" pixels in the input grid. A marker pixel is any pixel whose color is neither white (0) nor red (2). Record the position (`marker_row`, `marker_col`) of each marker.\n4. Iterate through each identified marker pixel (`mr`, `mc`):\n    a. If the marker is Above the rectangle (`mr < min_row`): Draw a vertical red (2) line segment in the output grid in column `mc`. This line extends from row 0 up to `min_row - 1`. Only change pixels if their current color is white (0).\n    b. If the marker is Below the rectangle (`mr > max_row`): Draw a vertical red (2) line segment in the output grid in column `mc`. This line extends from row `max_row + 1` down to the bottom edge of the grid. Only change pixels if their current color is white (0).\n    c. If the marker is Left of the rectangle (`mc < min_col`): Draw a horizontal red (2) line segment in the output grid in row `mr`. This line extends from column 0 up to `min_col - 1`. Only change pixels if their current color is white (0).\n    d. If the marker is Right of the rectangle (`mc > max_col`): Draw a horizontal red (2) line segment in the output grid in row `mr`. This line extends from column `max_col + 1` across to the right edge of the grid. Only change pixels if their current color is white (0).\n    *Note: These four position checks are independent for each marker.*\n5. Return the modified output grid.\n\"\"\"\n\n# --- Helper Functions ---\n\ndef find_connected_components(grid, color):\n    \"\"\"Finds all connected components of a given color using BFS.\"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    components = []\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == color and not visited[r, c]:\n                component = []\n                q = deque([(r, c)]) # Use deque for efficient popleft\n                visited[r, c] = True\n                component_rows = set()\n                component_cols = set()\n\n                # BFS to find all connected pixels of the same color\n                while q:\n                    row, col = q.popleft()\n                    component.append((row, col))\n                    component_rows.add(row)\n                    component_cols.add(col)\n\n                    # Check neighbors (4-connectivity: up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] == color and not visited[nr, nc]:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n\n                # Check if the component forms a solid rectangle\n                if not component_rows or not component_cols: continue # Skip if empty component\n\n                min_r, max_r = min(component_rows), max(component_rows)\n                min_c, max_c = min(component_cols), max(component_cols)\n                \n                # Verify the count of pixels matches the bounding box area\n                is_rectangle = len(component) == (max_r - min_r + 1) * (max_c - min_c + 1)\n                \n                # Double-check all cells within the bounding box are the correct color\n                # This ensures there are no 'holes' of other colors within the component's bbox\n                if is_rectangle:\n                    for row_idx in range(min_r, max_r + 1):\n                        for col_idx in range(min_c, max_c + 1):\n                             if grid[row_idx, col_idx] != color:\n                                is_rectangle = False\n                                break\n                        if not is_rectangle:\n                            break\n\n                if component and is_rectangle: # Only add if it's a non-empty solid rectangle\n                    components.append(component)\n    return components\n\ndef find_largest_component(grid, color):\n    \"\"\"Finds the largest connected rectangular component of a given color.\"\"\"\n    components = find_connected_components(grid, color)\n    if not components:\n        return None\n    # Find the component with the maximum number of pixels\n    largest_component = max(components, key=len)\n    return largest_component\n\ndef get_bounding_box(component_coords):\n    \"\"\"Calculates the bounding box (min_row, min_col, max_row, max_col) of a component.\"\"\"\n    if not component_coords:\n        return None, None, None, None\n    rows = [r for r, c in component_coords]\n    cols = [c for r, c in component_coords]\n    min_row, max_row = min(rows), max(rows)\n    min_col, max_col = min(cols), max(cols)\n    return min_row, min_col, max_row, max_col\n\n# --- Main Transformation Function ---\n\ndef transform(input_grid):\n    # 1. Initialize output_grid as a copy of input_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = output_grid.shape\n    red_color = 2\n    background_color = 0\n\n    # 2. Find the largest red rectangular object and its bounding box\n    red_component = find_largest_component(output_grid, red_color)\n    if not red_component:\n        # If no valid red rectangle found, return the original grid\n        return output_grid\n\n    min_row, min_col, max_row, max_col = get_bounding_box(red_component)\n    # Bounding box should be valid if red_component was found\n\n    # 3. Find all marker pixels\n    marker_coords = []\n    for r in range(rows):\n        for c in range(cols):\n            if output_grid[r, c] != background_color and output_grid[r, c] != red_color:\n                marker_coords.append((r, c))\n\n    # 4. Process each marker and draw lines, only overwriting background\n    for mr, mc in marker_coords:\n        # Ensure marker column/row is within grid bounds before drawing\n        # Although markers are found within bounds, keep checks for loop ranges\n\n        # a. Check Above\n        if mr < min_row:\n            if 0 <= mc < cols: # Check if marker column is valid\n                for r in range(min_row): # From row 0 up to min_row - 1\n                    if 0 <= r < rows: # Redundant row check, but safe\n                        if output_grid[r, mc] == background_color:\n                           output_grid[r, mc] = red_color\n\n        # b. Check Below\n        if mr > max_row:\n            if 0 <= mc < cols: # Check if marker column is valid\n                for r in range(max_row + 1, rows): # From max_row + 1 down to the end\n                     if 0 <= r < rows: # Redundant row check, but safe\n                         if output_grid[r, mc] == background_color:\n                            output_grid[r, mc] = red_color\n\n        # c. Check Left\n        if mc < min_col:\n            if 0 <= mr < rows: # Check if marker row is valid\n                for c in range(min_col): # From col 0 up to min_col - 1\n                    if 0 <= c < cols: # Redundant col check, but safe\n                        if output_grid[mr, c] == background_color:\n                            output_grid[mr, c] = red_color\n\n        # d. Check Right\n        if mc > max_col:\n            if 0 <= mr < rows: # Check if marker row is valid\n                for c in range(max_col + 1, cols): # From max_col + 1 across to the end\n                    if 0 <= c < cols: # Redundant col check, but safe\n                        if output_grid[mr, c] == background_color:\n                             output_grid[mr, c] = red_color\n\n    # 5. Return the modified grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 13000,
    "candidates_token_count": 2052,
    "total_token_count": 15052,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 22.487323,
  "retries": null
}