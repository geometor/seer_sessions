{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nIdentifies horizontal (hr) and/or vertical (vc) lines composed entirely of yellow (4) pixels.\nThese lines act as potential axes of symmetry or boundaries for copying.\nThe transformation depends on the position of non-background (0), non-yellow (4) 'pattern' pixels relative to these lines.\nPrecedence is given to the vertical line condition.\n\n1. If a vertical line `vc` exists AND all pattern pixels are to its left (column < vc):\n   Reflect the portion of the grid left of `vc` horizontally across `vc`.\n   The reflection formula for a pixel at (r, c) is (r, vc + (vc - c)).\n\n2. Else if a horizontal line `hr` exists AND all pattern pixels are above it (row < hr):\n   Perform a vertical flip-copy. The entire region above `hr` (rows 0 to hr-1) is copied,\n   flipped vertically, and placed below `hr` (starting at row hr+1).\n   The copy formula for a pixel at (hr - i, c) is (hr + i, c), for 1 <= i <= hr.\n\n3. If neither of the above conditions is met, the grid remains unchanged.\n\nThe yellow lines themselves and the original source pattern(s) are preserved in the output.\n\"\"\"\n\ndef find_horizontal_line(grid):\n    \"\"\"Finds the row index of a horizontal line of yellow pixels.\"\"\"\n    height, width = grid.shape\n    for r in range(height):\n        if np.all(grid[r, :] == 4):\n            return r\n    return None\n\ndef find_vertical_line(grid):\n    \"\"\"Finds the column index of a vertical line of yellow pixels.\"\"\"\n    height, width = grid.shape\n    for c in range(width):\n        if np.all(grid[:, c] == 4):\n            return c\n    return None\n\ndef find_pattern_pixels(grid):\n    \"\"\"Finds coordinates of all non-background (0) and non-yellow (4) pixels.\"\"\"\n    pattern_pixels = np.argwhere((grid != 0) & (grid != 4))\n    return pattern_pixels # Returns list of [row, col] pairs\n\ndef transform(input_grid):\n    \"\"\"\n    Applies reflection or flip-copy based on yellow lines and pattern location.\n    \"\"\"\n    # Convert input list of lists to a NumPy array\n    grid_np = np.array(input_grid, dtype=int)\n    height, width = grid_np.shape\n    \n    # Initialize output grid as a copy of the input\n    output_grid = np.copy(grid_np)\n\n    # Find potential yellow lines\n    hr = find_horizontal_line(grid_np)\n    vc = find_vertical_line(grid_np)\n\n    # Find pattern pixels (non-background, non-yellow)\n    pattern_pixels = find_pattern_pixels(grid_np)\n\n    # If there are no pattern pixels, no transformation is needed\n    if len(pattern_pixels) == 0:\n        return output_grid.tolist()\n\n    # --- Apply transformation logic based on conditions ---\n\n    # Condition 1: Vertical line exists and pattern is entirely to the left\n    pattern_is_left = False\n    if vc is not None:\n        # Check if all pattern pixels have column < vc\n        if np.all(pattern_pixels[:, 1] < vc):\n            pattern_is_left = True\n            # Perform horizontal reflection for the region left of vc\n            for r in range(height):\n                for c in range(vc):\n                    reflected_c = vc + (vc - c)\n                    # Ensure reflected column is within bounds\n                    if 0 <= reflected_c < width:\n                        # Copy the pixel from the original grid to the reflected position\n                        # We copy *all* pixels in the source region, not just pattern pixels,\n                        # to correctly handle background and parts of the yellow line if they were there.\n                        output_grid[r, reflected_c] = grid_np[r, c]\n            # Transformation done, return result\n            return output_grid.tolist()\n\n    # Condition 2: Horizontal line exists and pattern is entirely above (and vertical condition was not met)\n    pattern_is_above = False\n    if hr is not None and not pattern_is_left: # Only check if vertical reflection didn't happen\n         # Check if all pattern pixels have row < hr\n         if np.all(pattern_pixels[:, 0] < hr):\n             pattern_is_above = True\n             # Perform vertical flip-copy for the region above hr\n             for i in range(1, hr + 1): # i ranges from 1 to hr\n                 source_r = hr - i\n                 dest_r = hr + i\n                 # Ensure source row is valid (implicitly true if i >= 1)\n                 # Ensure destination row is within bounds\n                 if 0 <= source_r < height and 0 <= dest_r < height:\n                     # Copy the entire source row to the destination row\n                     output_grid[dest_r, :] = grid_np[source_r, :]\n             # Transformation done, return result\n             return output_grid.tolist()\n\n    # Condition 3: Neither condition met, return the initial copy\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7597,
    "candidates_token_count": 1212,
    "total_token_count": 8809,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.292868,
  "retries": null
}