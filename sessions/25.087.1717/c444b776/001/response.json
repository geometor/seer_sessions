{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nIdentifies horizontal and/or vertical lines composed entirely of yellow (4) pixels. \nThese lines act as axes of reflection.\nIf only a horizontal line exists, the pattern above the line is reflected vertically downwards.\nIf only a vertical line exists, the pattern to the left of the line is reflected horizontally to the right.\nIf both lines exist, the pattern in the top-left quadrant is reflected horizontally, vertically, and diagonally (combination of both reflections) into the other quadrants.\nThe yellow lines themselves and the original source pattern(s) are preserved.\n\"\"\"\n\ndef find_horizontal_line(grid):\n    \"\"\"Finds the row index of a horizontal line of yellow pixels.\"\"\"\n    height, width = grid.shape\n    for r in range(height):\n        if np.all(grid[r, :] == 4):\n            # Ensure it's a full line, not just yellow pixels within a pattern\n            # Although the examples suggest full lines, this is a safer check\n            is_full_line = True\n            if r > 0 and np.any(grid[r-1, :] != 0) and np.any(grid[r-1, :] != 4):\n                 # Check if row above has non-background colors other than yellow\n                 pass # Potentially part of a larger shape, but task seems to use background separation\n            if r < height - 1 and np.any(grid[r+1, :] != 0) and np.any(grid[r+1, :] != 4):\n                 # Check if row below has non-background colors other than yellow\n                 pass # Potentially part of a larger shape\n\n            # For this task, simply checking if the row is all yellow seems sufficient based on examples\n            return r\n    return None\n\ndef find_vertical_line(grid):\n    \"\"\"Finds the column index of a vertical line of yellow pixels.\"\"\"\n    height, width = grid.shape\n    for c in range(width):\n        if np.all(grid[:, c] == 4):\n             # Similarly, check if it's a full line if needed, but examples suggest clear lines\n            return c\n    return None\n\ndef transform(input_grid):\n    \"\"\"\n    Reflects patterns across horizontal and/or vertical yellow lines.\n\n    Args:\n        input_grid (list[list[int]]): The input grid.\n\n    Returns:\n        list[list[int]]: The transformed grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    grid_np = np.array(input_grid, dtype=int)\n    height, width = grid_np.shape\n    # Initialize output grid as a copy of the input\n    output_grid = np.copy(grid_np)\n\n    # Find the yellow lines\n    hr = find_horizontal_line(grid_np)\n    vc = find_vertical_line(grid_np)\n\n    # --- Apply reflection logic ---\n\n    if hr is not None and vc is not None:\n        # Case 1: Both horizontal and vertical lines exist\n        # Source region is top-left quadrant\n        for r in range(hr):\n            for c in range(vc):\n                pixel_color = grid_np[r, c]\n                if pixel_color != 4: # Don't reflect the reflection lines themselves if part of pattern\n                    # Reflect horizontally to top-right\n                    reflected_c_right = vc + (vc - c)\n                    if 0 <= reflected_c_right < width:\n                        output_grid[r, reflected_c_right] = pixel_color\n\n                    # Reflect vertically to bottom-left\n                    reflected_r_bottom = hr + (hr - r)\n                    if 0 <= reflected_r_bottom < height:\n                        output_grid[reflected_r_bottom, c] = pixel_color\n\n                    # Reflect diagonally to bottom-right\n                    if 0 <= reflected_r_bottom < height and 0 <= reflected_c_right < width:\n                        output_grid[reflected_r_bottom, reflected_c_right] = pixel_color\n\n    elif hr is not None:\n        # Case 2: Only horizontal line exists\n        # Source region is above the line\n        for r in range(hr):\n            for c in range(width):\n                 pixel_color = grid_np[r, c]\n                 if pixel_color != 4: # Avoid reflecting the line itself\n                    # Reflect vertically downwards\n                    reflected_r = hr + (hr - r)\n                    if 0 <= reflected_r < height:\n                         output_grid[reflected_r, c] = pixel_color\n\n    elif vc is not None:\n        # Case 3: Only vertical line exists\n        # Source region is left of the line\n         for r in range(height):\n            for c in range(vc):\n                 pixel_color = grid_np[r, c]\n                 if pixel_color != 4: # Avoid reflecting the line itself\n                    # Reflect horizontally to the right\n                    reflected_c = vc + (vc - c)\n                    if 0 <= reflected_c < width:\n                         output_grid[r, reflected_c] = pixel_color\n\n    # Case 4: No yellow lines found - output_grid remains a copy of input_grid\n\n    # Convert numpy array back to list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4506,
    "candidates_token_count": 1214,
    "total_token_count": 5720,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.498236,
  "retries": null
}