{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Identifies gray pixels (5) that are orthogonally adjacent to exactly two yellow \n    pixels (4) and changes their color to red (2). All other pixels remain \n    unchanged.\n    \"\"\"\n\n    # Get the dimensions of the input grid\n    height, width = input_grid.shape\n\n    # Initialize the output grid as a copy of the input grid\n    output_grid = np.copy(input_grid)\n\n    # Iterate through each pixel of the input grid\n    for r in range(height):\n        for c in range(width):\n            # Check if the current pixel is gray (5)\n            if input_grid[r, c] == 5:\n                # Count the number of yellow (4) orthogonal neighbors\n                yellow_neighbor_count = 0\n                \n                # Define orthogonal neighbor coordinates (dr, dc)\n                neighbors = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right\n                \n                for dr, dc in neighbors:\n                    nr, nc = r + dr, c + dc\n                    \n                    # Check if the neighbor is within the grid boundaries\n                    if 0 <= nr < height and 0 <= nc < width:\n                        # Check if the neighbor is yellow (4)\n                        if input_grid[nr, nc] == 4:\n                            yellow_neighbor_count += 1\n                            \n                # If the gray pixel has exactly two yellow neighbors, change it to red (2) in the output grid\n                if yellow_neighbor_count == 2:\n                    output_grid[r, c] = 2\n            \n            # If the pixel is not gray, or if it's gray but doesn't meet the condition,\n            # its value in the output_grid remains unchanged (as it was copied initially).\n\n    # Return the modified grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6269,
    "candidates_token_count": 457,
    "total_token_count": 6726,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 6.440662,
  "retries": null
}