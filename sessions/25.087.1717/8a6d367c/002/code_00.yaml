task_description: Find the largest hollow rectangular frame, extract the subgrid defined by its bounding box, and transform the interior content.
background_color_overall: Azure (8) seems prevalent but might vary; need to determine dynamically.
frame_object:
  description: The largest connected object forming a hollow rectangle (pixels only on the perimeter of its bounding box, interior empty of frame color).
  properties:
    - color: Varies (Maroon 9, Green 3, Yellow 4 in examples). Single solid color per frame.
    - shape: Hollow rectangle.
    - size: Largest area among all hollow rectangles.
interior_content:
  description: Pixels within the bounding box of the frame object, excluding the frame pixels themselves.
  components:
    - internal_background:
        description: The color filling most of the space within the interior.
        color: Azure (8) in all examples.
        role: Pixels to be potentially transformed.
    - internal_objects:
        description: One or more distinct objects within the interior, different from the internal background and frame color.
        color: Varies (Gray 5, White 0, Green 3 in examples). Appears to be a single color type per example.
        role: Source color for transformation and pixels to be preserved.
transformation_rule:
  action: Modify pixels within the extracted subgrid (defined by the frame's bounding box).
  steps:
    - Identify the frame pixels (color `C_frame`).
    - Identify the internal object pixels (color `C_object`). Assume only one object color for now.
    - Identify the internal background pixels (color `C_background`, typically Azure 8).
    - Create the output grid by copying the extracted subgrid.
    - Iterate through each pixel `(r, c)` in the output grid's interior (not the frame border).
    - If `output_grid[r, c]` is `C_background`:
        - Check if there exists any pixel `(r', c')` such that `input_grid_interior[r', c']` is `C_object` AND (`r' == r` OR `c' == c`). Note: coordinates here are relative to the interior slice.
        - If such a pixel exists, change `output_grid[r, c]` to `C_object`.
    - Preserve frame pixels (`C_frame`) and original internal object pixels (`C_object`).

ambiguities:
 - What if there is more than one internal object color? (Not seen in examples).
 - What if there are no internal objects? (Output might be just the frame, or frame + internal background).
 - Exact definition of "largest" frame (area of bounding box vs. number of pixels). Assume bounding box area.
 - How to handle non-rectangular internal objects affecting rows/columns. (Assume any pixel of `C_object` in the row/col triggers transformation).