task_name: two_pixel_pattern_propagation
description: Generates a repeating line pattern (horizontal or vertical) based on the location and color of two initial non-white pixels.

examples:
  train_1:
    input_objects:
      - pixel: P1
        color: red
        location: [5, 0]
      - pixel: P2
        color: green
        location: [7, 8]
    properties:
      grid_dimensions: [22, 9]
      row_diff: 2
      col_diff: 8
      orientation_determinant: col_diff >= row_diff (8 >= 2) -> True
      axis: row-wise
      sorted_pixels: [P1, P2] # Sorted by row index
      pattern_anchor_1: { color: red, index: 5 }
      pattern_anchor_2: { color: green, index: 7 }
      pattern_cycle_length: 7 - 5 + 1 = 3
      pattern_unit: [red_row, white_row, green_row]
    output_changes:
      - action: fill_row
        row_index: 5
        color: red
      - action: fill_row
        row_index: 7
        color: green
      - action: repeat_pattern
        start_row: 5
        direction: downwards
        pattern: [red_row, white_row, green_row]
  train_2:
    input_objects:
      - pixel: P1
        color: blue
        location: [0, 5]
      - pixel: P2
        color: green
        location: [6, 8]
    properties:
      grid_dimensions: [7, 23]
      row_diff: 6
      col_diff: 3
      orientation_determinant: col_diff < row_diff (3 < 6) -> True
      axis: column-wise
      sorted_pixels: [P1, P2] # Sorted by column index
      pattern_anchor_1: { color: blue, index: 5 }
      pattern_anchor_2: { color: green, index: 8 }
      pattern_cycle_length: 8 - 5 + 1 = 4
      pattern_unit: [blue_col, white_col, white_col, green_col]
    output_changes:
      - action: fill_column
        col_index: 5
        color: blue
      - action: fill_column
        col_index: 8
        color: green
      - action: repeat_pattern
        start_col: 5
        direction: rightwards
        pattern: [blue_col, white_col, white_col, green_col]
  train_3:
    input_objects:
      - pixel: P1
        color: yellow
        location: [7, 0]
      - pixel: P2
        color: blue
        location: [11, 0]
    properties:
      grid_dimensions: [24, 8]
      row_diff: 4
      col_diff: 0
      orientation_determinant: col_diff == 0 -> True
      axis: row-wise
      sorted_pixels: [P1, P2] # Sorted by row index
      pattern_anchor_1: { color: yellow, index: 7 }
      pattern_anchor_2: { color: blue, index: 11 }
      pattern_cycle_length: 11 - 7 + 1 = 5
      pattern_unit: [yellow_row, white_row, white_row, white_row, blue_row]
    output_changes:
      - action: fill_row
        row_index: 7
        color: yellow
      - action: fill_row
        row_index: 11
        color: blue
      - action: repeat_pattern
        start_row: 7
        direction: downwards
        pattern: [yellow_row, white_row, white_row, white_row, blue_row]
  train_4:
    input_objects:
      - pixel: P1
        color: red
        location: [0, 5]
      - pixel: P2
        color: azure
        location: [9, 7]
    properties:
      grid_dimensions: [10, 25]
      row_diff: 9
      col_diff: 2
      orientation_determinant: col_diff < row_diff (2 < 9) -> True
      axis: column-wise
      sorted_pixels: [P1, P2] # Sorted by column index
      pattern_anchor_1: { color: red, index: 5 }
      pattern_anchor_2: { color: azure, index: 7 }
      pattern_cycle_length: 7 - 5 + 1 = 3
      pattern_unit: [red_col, white_col, azure_col]
    output_changes:
      - action: fill_column
        col_index: 5
        color: red
      - action: fill_column
        col_index: 7
        color: azure
      - action: repeat_pattern
        start_col: 5
        direction: rightwards
        pattern: [red_col, white_col, azure_col]

general_rule:
  - Find the two non-white pixels P1(r1, c1, C1) and P2(r2, c2, C2).
  - Determine axis: If abs(c1-c2) == 0 or (abs(r1-r2) != 0 and abs(c1-c2) >= abs(r1-r2)), use row-wise axis. Otherwise, use column-wise axis.
  - Sort pixels by axis index: PA(ra, ca, CA) is the pixel with the smaller index on the chosen axis, PB(rb, cb, CB) is the other.
  - Calculate pattern cycle length: L = (index of PB on axis) - (index of PA on axis) + 1.
  - Create output grid same size as input, filled with white.
  - If row-wise: Iterate rows `r` from `ra` to grid height - 1. If `(r - ra) % L == 0`, fill row `r` with CA. If `(r - ra) % L == L - 1`, fill row `r` with CB.
  - If column-wise: Iterate columns `c` from `ca` to grid width - 1. If `(c - ca) % L == 0`, fill column `c` with CA. If `(c - ca) % L == L - 1`, fill column `c` with CB.