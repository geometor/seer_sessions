{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport copy\n\n\"\"\"\nIdentify each white pixel in the input grid.\nFor each white pixel, examine its 8 neighbors (including diagonals).\nCollect the colors of all non-white neighbors.\nIf there is exactly one unique non-white neighbor color, change the white pixel in the output grid to that unique color.\nIf there are zero non-white neighbors or more than one unique non-white neighbor color, the pixel remains white.\nPixels that are not white in the input grid retain their original color in the output grid.\n\"\"\"\n\ndef get_neighbors(grid, r, c):\n    \"\"\"Gets the values of the 8 neighbors of a cell.\"\"\"\n    neighbors = []\n    height, width = grid.shape\n    for dr in [-1, 0, 1]:\n        for dc in [-1, 0, 1]:\n            if dr == 0 and dc == 0:\n                continue\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < height and 0 <= nc < width:\n                neighbors.append(grid[nr, nc])\n    return neighbors\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on neighbor rules for white pixels.\n\n    Args:\n        input_grid (np.ndarray): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.ndarray: A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    # Initialize output_grid as a copy of the input\n    output_grid = copy.deepcopy(input_grid)\n    height, width = input_grid.shape\n\n    # Iterate through each pixel in the input grid\n    for r in range(height):\n        for c in range(width):\n            # Check if the current pixel is white (0)\n            if input_grid[r, c] == 0:\n                # Get the colors of its neighbors\n                neighbors = get_neighbors(input_grid, r, c)\n                \n                # Filter out white neighbors and find unique non-white neighbor colors\n                non_white_neighbors = set(n for n in neighbors if n != 0)\n                \n                # If there is exactly one unique non-white neighbor color\n                if len(non_white_neighbors) == 1:\n                    # Change the corresponding pixel in the output grid to that color\n                    output_grid[r, c] = list(non_white_neighbors)[0]\n            # If the pixel is not white, it remains unchanged (already copied)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5906,
    "candidates_token_count": 575,
    "total_token_count": 6481,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 99.727358,
  "retries": null
}