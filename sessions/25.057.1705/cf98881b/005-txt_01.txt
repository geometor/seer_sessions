def get_grids(task, example_index, input_or_output):
    if input_or_output == "input":
        return task["train"][example_index]["input"]
    elif input_or_output == "output":
        return task["train"][example_index]["output"]
    else:
        raise ValueError("Invalid value. Must be 'input' or 'output'.")

def get_result(task, example_index, transform_function):
      input_grid = get_grids(task, example_index, "input")
      return transform_function(input_grid)

task = {
    "train": [
        {
            "input": [[5, 5, 5, 5, 5], [5, 5, 5, 5, 5], [5, 5, 5, 5, 5]],
            "output": [[5, 5], [5, 5], [5, 5]],
        },
        {
            "input": [[6, 6, 6, 6], [6, 6, 6, 6], [6, 6, 6, 6], [6, 6, 6, 6]],
            "output": [[6, 6], [6, 6], [6, 6], [6, 6]],
        },
        {
            "input": [[7, 7, 7], [7, 7, 7], [7, 7, 7], [7, 7, 7], [7, 7, 7]],
            "output": [[7, 7], [7, 7], [7, 7], [7, 7], [7, 7]],
        },
        {
            "input": [[3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3]],
            "output": [[3, 3], [3, 3]],
        },
    ]
}

import numpy as np

def transform(input_grid):
    """
    Transforms the input grid by selecting specific columns.

    Args:
        input_grid (list of lists): The input grid represented as a 2D list.

    Returns:
        list of lists: The transformed grid.
    """
    input_grid = np.array(input_grid)
    rows = input_grid.shape[0]
   
    # select input columns
    selected_columns = [0, 2]

    #check if columns exist
    cols = input_grid.shape[1]
    for col_index in selected_columns:
      if col_index >= cols:
          return input_grid.tolist() # or some other default behavior, like an empty grid


    # build output by gathering selected input columns
    output_grid = input_grid[:, selected_columns]

    return output_grid.tolist()


for i in range(len(task["train"])):
    input_grid = get_grids(task, i, "input")
    output_grid = get_grids(task, i, "output")
    result_grid = get_result(task, i, transform)
    print(f"Example {i+1}:")
    print(f"  Input shape: {np.array(input_grid).shape}")
    print(f"  Output shape: {np.array(output_grid).shape}")
    print(f"  Result shape: {np.array(result_grid).shape}")
    print(f"  Matches Output: {output_grid == result_grid}")
    print("-" * 20)