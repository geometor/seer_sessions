{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransformation Rule:\n\n1.  **Identify Colored Lines:** Find all horizontal lines consisting of one or more contiguous pixels of the same non-zero color.\n2.  **Determine New Order using Original index**: Add empty rows on the top. For the colored line, put them at the index that is equal to the number of rows from that row to the bottom.\n3. **Reconstruct Grid:** fill the top lines with 0. Arrange the original line based on the new order.\n\"\"\"\n\nimport numpy as np\n\ndef get_horizontal_lines(grid):\n    \"\"\"\n    Identifies horizontal lines of non-zero, same-colored pixels.\n    Returns a list of tuples: (row_index, start_col, end_col, color).\n    \"\"\"\n    lines = []\n    rows, cols = grid.shape\n    for r in range(rows):\n        start_col = -1\n        current_color = 0\n        for c in range(cols):\n            if grid[r, c] != 0:\n                if start_col == -1:\n                    start_col = c\n                    current_color = grid[r, c]\n                elif grid[r, c] != current_color:\n                    lines.append((r, start_col, c - 1, current_color))\n                    start_col = c\n                    current_color = grid[r, c]\n            elif start_col != -1:\n                lines.append((r, start_col, c - 1, current_color))\n                start_col = -1\n                current_color = 0\n        if start_col != -1:\n             lines.append((r, start_col, cols-1, current_color))\n    return lines\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the described rule.\n    \"\"\"\n    input_grid_np = np.array(input_grid)\n    rows, cols = input_grid_np.shape\n    output_grid = np.zeros((rows, cols), dtype=int)\n\n    # Get horizontal lines\n    lines = get_horizontal_lines(input_grid_np)\n\n    # Determine new row index based on original row's distance to bottom\n    for line in lines:\n        row_index, start_col, end_col, color = line\n        new_row_index = rows - 1 - row_index\n        output_grid[new_row_index, start_col:end_col+1] = color\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2098,
    "candidates_token_count": 579,
    "total_token_count": 2677,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.049592,
  "response_file": "008-response.json"
}