import numpy as np

def describe_grid(grid, name="Grid"):
    height, width = grid.shape
    unique_colors = np.unique(grid)
    print(f"{name}:")
    print(f"  Dimensions: {height} x {width}")
    print(f"  Unique Colors: {unique_colors}")

def compare_grids(grid1, grid2):
    if grid1.shape != grid2.shape:
        print("Grids have different shapes.")
        return
    else:
        print("Grids have the same shape.")
    diff = grid1 != grid2
    if np.any(diff):
        print("Grids differ at the following coordinates:")
        diff_coords = np.where(diff)
        for i in range(len(diff_coords[0])):
            row = diff_coords[0][i]
            col = diff_coords[1][i]
            print(f"  ({row}, {col}): Expected {grid2[row, col]}, Got {grid1[row, col]}")
    else:
        print("Grids are identical.")

# Example data from the prompt (replace with actual data as needed)
train_inputs = [
    np.array([[6, 1], [1, 6]]),
    np.array([[8, 8, 8, 8, 8, 8, 8, 8, 8, 8]]),
    np.array([[5, 5, 1], [5, 5, 1], [5, 5, 1]]),
    np.array([[5, 5, 5, 5, 5], [5, 5, 5, 5, 5], [5, 5, 5, 5, 5], [5, 5, 5, 5, 5]])
]

train_outputs = [
    np.array([[0, 0, 0, 0, 0, 0], [6, 1, 0, 0, 0, 0], [1, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]),
    np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
    np.array([[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [5, 5, 1, 0, 0, 0], [5, 5, 1, 0, 0, 0], [5, 5, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]),
    np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])
]

# Call the transform function
generated_outputs = [transform(inp) for inp in train_inputs]

# Analyze and compare
for i in range(len(train_inputs)):
    print(f"\n--- Example {i+1} ---")
    describe_grid(train_inputs[i], "Input")
    describe_grid(train_outputs[i], "Expected Output")
    describe_grid(generated_outputs[i], "Generated Output")
    compare_grids(generated_outputs[i], train_outputs[i])