{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nFind all red objects in the input grid, determine the bounding box around each,\nand extract the subgrid corresponding to each bounding box, enlarging it by one in all directions.\n\"\"\"\n\nimport numpy as np\n\ndef find_object(grid, color):\n    \"\"\"\n    Finds all objects of a given color in the grid.\n    Returns a list of bounding box coordinates (top_left_row, top_left_col, bottom_right_row, bottom_right_col) for each object.\n    \"\"\"\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n\n    def dfs(row, col, current_object):\n        if (\n            row < 0\n            or row >= grid.shape[0]\n            or col < 0\n            or col >= grid.shape[1]\n            or visited[row, col]\n            or grid[row, col] != color\n        ):\n            return\n        visited[row, col] = True\n        current_object.append((row, col))\n        dfs(row + 1, col, current_object)\n        dfs(row - 1, col, current_object)\n        dfs(row, col + 1, current_object)\n        dfs(row, col - 1, current_object)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] == color and not visited[row, col]:\n                current_object = []\n                dfs(row, col, current_object)\n                if current_object:\n                    rows, cols = zip(*current_object)\n                    top_left_row = min(rows)\n                    top_left_col = min(cols)\n                    bottom_right_row = max(rows)\n                    bottom_right_col = max(cols)\n                    objects.append(\n                        (top_left_row, top_left_col, bottom_right_row, bottom_right_col)\n                    )\n    return objects\n\ndef get_bounding_box(coordinates):\n    \"\"\"\n    Get the bounding box from a list of coordinates.\n    \"\"\"\n    rows, cols = zip(*coordinates)\n    return min(rows), min(cols), max(rows), max(cols)\n    \n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the described rule.\n    \"\"\"\n    input_grid = np.array(input_grid)\n    output_grids = []\n\n    # 1. Identify Red Clusters\n    red_clusters = find_object(input_grid, 2)\n\n    for target_cluster in red_clusters:\n\n        # 2. Define Bounding Box\n        top_left_row, top_left_col, bottom_right_row, bottom_right_col = target_cluster\n        \n        # 3. Extract with Enlarging\n        top_left_row = max(0, top_left_row - 1)\n        top_left_col = max(0, top_left_col - 1)\n        bottom_right_row = min(input_grid.shape[0] -1, bottom_right_row + 1)\n        bottom_right_col = min(input_grid.shape[1] -1, bottom_right_col + 1)\n\n        # Extract the subgrid\n        output_grid = input_grid[\n            top_left_row : bottom_right_row + 1, top_left_col : bottom_right_col + 1\n        ].copy()\n        output_grids.append(output_grid.tolist())\n\n    return output_grids\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4049,
    "candidates_token_count": 839,
    "total_token_count": 4888,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.703236,
  "response_file": "018-response.json"
}