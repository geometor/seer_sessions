{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Red Pixels:** Locate all pixels with the value '2' (red) within the input grid.\n2.  **Identify White Pixels:** Locate all pixels with the value of '0' (white) within the input grid.\n3.  **Adjacent Transformation:** For each white pixel, check if it is directly adjacent (horizontally or vertically, but *not* diagonally) to any red pixel.\n4.  **Change to Yellow:** If a white pixel is adjacent to a red pixel, change its value to '4' (yellow) in the output grid.\n5.  **Preserve Other Pixels:** All other pixels that are not white and adjacent to a red pixel retain their original values in the output grid.\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, row, col):\n    \"\"\"Gets the valid neighbors of a cell (up, down, left, right).\"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    if row > 0:\n        neighbors.append((row - 1, col))  # Up\n    if row < rows - 1:\n        neighbors.append((row + 1, col))  # Down\n    if col > 0:\n        neighbors.append((row, col - 1))  # Left\n    if col < cols - 1:\n        neighbors.append((row, col + 1))  # Right\n    return neighbors\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the observed rule.\"\"\"\n    input_grid = np.array(input_grid)  # Ensure numpy array\n    output_grid = input_grid.copy()\n    rows, cols = input_grid.shape\n\n    # Identify '2's (red pixels)\n    red_pixels = [(r, c) for r in range(rows) for c in range(cols) if input_grid[r, c] == 2]\n\n    # Iterate through all white pixels\n    for r in range(rows):\n        for c in range(cols):\n            if input_grid[r, c] == 0:  # Check if it's a white pixel\n                # Check for adjacent red pixels\n                for neighbor_row, neighbor_col in get_neighbors(input_grid, r, c):\n                    if input_grid[neighbor_row, neighbor_col] == 2:\n                        output_grid[r, c] = 4  # Change to yellow\n                        break  # Move to the next white pixel after finding one adjacency\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 798,
            "end_index": 1090,
            "uri": "https://github.com/Kaeltherol/Minesweeper",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5589,
    "candidates_token_count": 578,
    "total_token_count": 6167,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.905531,
  "response_file": "006-response.json"
}