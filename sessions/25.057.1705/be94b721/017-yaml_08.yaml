    - type: object
      color: 8
      shape: 1x1
      location: center
    - type: action
      description: remove object
    ```
* Simulated metrics (assume input_grid and output_grid are defined as numpy arrays):

    ```python
    # Simulated Code Execution Results
    input_grid = np.array([[0, 0, 0], [0, 8, 0], [0, 0, 0]])
    output_grid = np.array([])
    print(f"Input grid shape: {input_grid.shape}")
    print(f"Output grid shape: {output_grid.shape if output_grid.size else 'Empty'}")
    print(f"Number of azure objects in input: {len(find_objects(input_grid, 8))}")

    # Input grid shape: (3, 3)
    # Output grid shape: Empty
    # Number of azure objects in input: 1
    ```

**Example 2:**

*   **Input:** 5x5 grid with an azure (8) border around a 3x3 region of black (0) pixels.
*   **Output:** 3x3 grid of black (0) pixels.
*   **Predicted Output:** 3x3 grid of black (0) pixels.
*   **Observation:** The code correctly extracts the region surrounded by the azure border.
    ```yaml
    - type: object
        color: 8
        shape: border
        location: outer
    - type: object
      color: 0
      shape: 3x3
      location: inner
    - type: action
      description: extract inner object, remove border

    ```
*   Simulated Metrics:

    ```python
    # Simulated Code Execution Results
    input_grid = np.array([[8, 8, 8, 8, 8], [8, 0, 0, 0, 8], [8, 0, 0, 0, 8], [8, 0, 0, 0, 8], [8, 8, 8, 8, 8]])
    output_grid = np.array([[0, 0, 0], [0, 0, 0], [0, 0, 0]])
    print(f"Input grid shape: {input_grid.shape}")
    print(f"Output grid shape: {output_grid.shape}")
    print(f"Number of azure objects in input: {len(find_objects(input_grid, 8))}")
    # Input grid shape: (5, 5)
    # Output grid shape: (3, 3)
    # Number of azure objects in input: 1
    ```

**Example 3:**

*   **Input:** 7x7 grid with two azure (8) regions: a 3x3 square and a 1x1 square.
*   **Output:** 3x3 grid, which matches the larger azure square in the input.
*   **Predicted Output:** 3x3 grid (correct).
*   **Observation:** The code correctly selects the top-leftmost azure region and extracts it. This example confirms the behavior with multiple azure regions.
    ```yaml
    - type: object
      color: 8
      shape: 3x3
      location: top-left
    - type: object
      color: 8
      shape: 1x1
      location: other
    - type: action
      description: select top-left object

    ```
*   Simulated Metrics

    ```python
    # Simulated Code Execution Results
    input_grid = np.array([[8, 8, 8, 0, 0, 0, 0],
                           [8, 8, 8, 0, 0, 0, 0],
                           [8, 8, 8, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 8, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0]])
    output_grid = np.array([[8, 8, 8],
                            [8, 8, 8],
                            [8, 8, 8]])
    print(f"Input grid shape: {input_grid.shape}")
    print(f"Output grid shape: {output_grid.shape}")
    print(f"Number of azure objects in input: {len(find_objects(input_grid, 8))}")

    # Input grid shape: (7, 7)
    # Output grid shape: (3, 3)
    # Number of azure objects in input: 2

    ```

**Example 4:**

*   **Input:** 3x3 grid with a single orange pixel (7).
*   **Output:** Empty grid
*   **Predicted output:** \[ ]
* **Observation:** no azure, so returns \[].
    ```yaml
    - type: object
      color: 7
      shape: 1x1
      location: center
    - type: action
      description: empty output

    ```

**Example 5:**

*   **Input:** 5x5 grid with orange border and black inside.
*   **Output:** 3x3 of all black.
*   **Predicted output:** \[ ]
* **Observation:** no azure, so returns \[].
    ```yaml
    - type: object
        color: 7
        shape: border
        location: outer
    - type: object
      color: 0
      shape: 3x3
      location: inner
    - type: action
      description: remove border, extract inner object

    ```

**YAML Facts**