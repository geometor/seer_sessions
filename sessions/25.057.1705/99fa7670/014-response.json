{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. **Identify Objects:** Find all pixels in the input grid that have a non-zero color value. These are the \"active\" objects.\n2. **Horizontal Expansion:** For each active object, replace all pixels in its row with the object's color.\n3. **Partial duplication**: For each active object, replicate it to the very end of the rows below the original.\n4. **Preserve Background:** All other pixels (with an initial value of 0) remain unchanged (white).\n\"\"\"\n\nimport numpy as np\n\ndef get_objects(grid):\n    \"\"\"Finds all non-zero pixels and returns their coordinates and color.\"\"\"\n    objects = []\n    for row_idx, row in enumerate(grid):\n        for col_idx, pixel in enumerate(row):\n            if pixel != 0:\n                objects.append(((row_idx, col_idx), pixel))\n    return objects\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the specified rules.\"\"\"\n    output_grid = np.copy(input_grid)\n    objects = get_objects(input_grid)\n\n    for (row, col), color in objects:\n        # Horizontal Expansion\n        output_grid[row, :] = color\n        \n    # partial duplication with order - azure first, gray next\n    for (row, col), color in sorted(objects, reverse=True, key=lambda x : x[1]):    \n        #Partial Duplication - azure\n        if color == 8:\n          if row + 1 < output_grid.shape[0]:\n            output_grid[row + 1, -1] = color\n          if row + 2 < output_grid.shape[0]:\n            output_grid[row + 2, -1] = color\n        \n        #Partial Duplication - gray\n        if color == 5:\n          if row + 1 < output_grid.shape[0]:\n            output_grid[row + 1, -1] = color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2127,
    "candidates_token_count": 457,
    "total_token_count": 2584,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 16.935663,
  "response_file": "014-response.json"
}