{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation extracts azure shapes from the input, creates an 8x8 grid with a red border, and positions scaled versions of the azure shapes within this new grid, preserving their relative positioning and aspect ratio, and setting the background to black.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, color):\n    # Find objects of a specific color in the grid.\n    coords = np.argwhere(grid == color)\n    if coords.size == 0:\n        return []\n    return coords\n\ndef get_bounding_box(coords):\n    # Calculate the bounding box of a set of coordinates.\n    min_y, min_x = np.min(coords, axis=0)\n    max_y, max_x = np.max(coords, axis=0)\n    return min_y, min_x, max_y, max_x\n  \ndef get_object_size_and_center(coords):\n    # Calculate object size based on bounding box.\n    min_y, min_x, max_y, max_x = get_bounding_box(coords)\n    width = max_x - min_x + 1\n    height = max_y - min_y + 1\n    center_x = (min_x + max_x) // 2\n    center_y = (min_y + max_y) // 2\n    return width, height, center_x, center_y\n\ndef transform(input_grid):\n    # Initialize 8x8 output grid with all zeros (black).\n    output_grid = np.zeros((8, 8), dtype=int)\n\n    # Create red border.\n    output_grid[0, :] = 2\n    output_grid[-1, :] = 2\n    output_grid[:, 0] = 2\n    output_grid[:, -1] = 2\n    \n    # Find azure objects.\n    azure_coords = find_objects(input_grid, 8)\n    \n    # if no azure, return\n    if not azure_coords.any():\n       return output_grid\n\n    # Get azure bounding box.\n    min_y, min_x, max_y, max_x = get_bounding_box(azure_coords)\n    azure_width, azure_height, azure_center_x, azure_center_y = get_object_size_and_center(azure_coords)\n\n\n    # Calculate scaling factors, keep aspect ratio\n    scale_x = (max_x - min_x + 1) / 6\n    scale_y = (max_y - min_y + 1) / 6\n\n    scale = max(scale_x, scale_y)\n    if scale == 0:\n        scale = 1\n\n    # map azure coords to output grid, scaled, centered\n    for y, x in azure_coords:\n        new_x = int((x - azure_center_x) / scale) + 3  # Add 4 to center horizontally\n        new_y = int((y - azure_center_y) / scale) + 3  # Add 4 to center vertically\n\n        if 0 < new_x < 7 and 0 < new_y < 7:  # within output bounds\n           output_grid[new_y, new_x] = 8\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5628,
    "candidates_token_count": 766,
    "total_token_count": 6394,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.904688,
  "response_file": "012-response.json"
}