import numpy as np

# the functions from the previous code block, copied here
def find_objects(grid):
    # Find coordinates of all non-zero pixels.
    grid = np.array(grid)
    non_zero_coords = np.argwhere(grid != 0)
    if non_zero_coords.size == 0:
        return []  # No objects found

    objects = []
    visited = set()

    def get_neighbors(coord):
        row, col = coord
        neighbors = []
        if row > 0:
            neighbors.append((row - 1, col))  # Up
        if row < grid.shape[0] - 1:
            neighbors.append((row + 1, col))  # Down
        if col > 0:
            neighbors.append((row, col - 1))  # Left
        if col < grid.shape[1] - 1:
            neighbors.append((row, col + 1))  # Right
        return neighbors

    def dfs(coord, current_object):
        visited.add(tuple(coord))
        current_object.append(coord)
        for neighbor in get_neighbors(coord):
            if tuple(neighbor) not in visited and grid[neighbor[0], neighbor[1]] == grid[coord[0], coord[1]]:
                dfs(neighbor, current_object)


    for coord in non_zero_coords:
        if tuple(coord) not in visited:
            current_object = []
            dfs(coord, current_object)
            objects.append(current_object)

    return objects

def get_object_bounds(object_coords):
    min_row = np.min(object_coords[:, 0])
    max_row = np.max(object_coords[:, 0])
    min_col = np.min(object_coords[:, 1])
    max_col = np.max(object_coords[:, 1])
    return min_row, max_row, min_col, max_col

def transform(input_grid):
    # Convert input grid to a NumPy array.
    input_grid = np.array(input_grid)

    # 1. Find Objects.
    objects = find_objects(input_grid)

    if not objects:
        return [[]]

    output_grids = []

    for obj in objects:
        obj_arr = np.array(obj)
       # 2. Isolate with Padding.
        min_row, max_row, min_col, max_col = get_object_bounds(obj_arr)

        padded_min_row = max(0, min_row - 1)
        padded_max_row = min(input_grid.shape[0], max_row + 2)
        padded_min_col = max(0, min_col - 1)
        padded_max_col = min(input_grid.shape[1], max_col + 2)

        # 3. Extract the padded region.
        extracted_grid = input_grid[padded_min_row:padded_max_row, padded_min_col:padded_max_col]
        output_grids.append(extracted_grid)

    # 4. Combine objects
    if len(output_grids) == 1:
        return output_grids[0].tolist()
    else:
        #determine max height and total width
        max_height = max(grid.shape[0] for grid in output_grids)
        total_width = sum(grid.shape[1] for grid in output_grids) + (len(output_grids) -1) # +1 for padding

        combined_grid = np.zeros((max_height, total_width), dtype=int)
        current_x = 0
        for grid in output_grids:
            h, w = grid.shape
            combined_grid[:h, current_x:current_x+w] = grid
            current_x += w + 1 #space between objects

        return combined_grid.tolist()

# Task data (replace with actual data)
task = {
  "train": [
    {
      "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 5, 5, 5, 0, 0, 0], [0, 0, 0, 5, 5, 5, 5, 0, 0, 0], [0, 0, 0, 5, 5, 5, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
      "output": [[0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 5, 5, 0, 0, 0], [0, 5, 5, 5, 5, 0, 0, 0], [0, 5, 5, 5, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]
    },
    {
      "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 8, 8, 0, 0, 0], [0, 0, 0, 8, 8, 8, 8, 0, 0, 0], [0, 0, 0, 8, 8, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
      "output": [[0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 0, 0, 0], [0, 8, 8, 8, 8, 0, 0, 0], [0, 8, 8, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]
    },
    {
      "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 6, 6, 6, 6, 0, 0, 0], [0, 0, 0, 6, 6, 6, 6, 0, 0, 0], [0, 0, 0, 6, 6, 6, 6, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
      "output": [[0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 6, 6, 6, 0, 0, 0], [0, 6, 6, 6, 6, 0, 0, 0], [0, 6, 6, 6, 6, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]
    },
    {
      "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 3, 3, 0, 0, 0], [0, 0, 0, 3, 3, 3, 3, 0, 0, 0], [0, 0, 0, 3, 3, 3, 3, 0, 0, 0]],
      "output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 0, 0, 0, 0, 3, 3, 3, 3, 0], [0, 2, 2, 2, 2, 0, 0, 0, 0, 3, 3, 3, 3, 0], [0, 2, 2, 2, 2, 0, 0, 0, 0, 3, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
    },
    {
      "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 4, 4, 4, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 4, 4, 4, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 4, 4, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
      "output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
    }
  ]
}

def analyze_example(input_grid, expected_output, transform_func):
    predicted_output = transform_func(input_grid)
    objects = find_objects(input_grid)
    num_objects = len(objects)

    print(f"  Number of objects: {num_objects}")

    if num_objects > 0:
        extracted_object_dims = []
        for obj in objects:
            obj_arr = np.array(obj)
            min_row, max_row, min_col, max_col = get_object_bounds(obj_arr)
            extracted_object_dims.append((max_row - min_row + 3, max_col - min_col + 3))  # +2 for padding
        print(f"  Extracted object dimensions: {extracted_object_dims}")

    print(f"  Predicted output shape: {np.array(predicted_output).shape if predicted_output else 'Empty'}")
    print(f"  Expected output shape: {np.array(expected_output).shape}")
    print(f"  Predicted output: {predicted_output}")
    print(f"  Expected output: {expected_output}")
    print(f"Match: {np.array_equal(np.array(predicted_output),np.array(expected_output))}")


for i, example in enumerate(task["train"]):
    print(f"Example {i + 1}:")
    analyze_example(example["input"], example["output"], transform)
    print("-" * 40)