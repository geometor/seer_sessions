{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Gray Objects:** Find all contiguous groups of gray (5) pixels.  A group can be any number of pixels.\n2.  **Classify Objects:**\n    *   **Horizontal Line:** If a gray object consists of 3 or more pixels in a horizontal row, it's a horizontal line.\n    *   **Vertical Line:** If a gray object consists of 2 pixels stacked vertically, it's a vertical line.\n    *  **3x3 Square:** If a gray object consists of 9 pixels in a square.\n    *  **Single Pixel:** Any object not matching above conditions.\n3.  **Transform Gray Objects:**\n    *   Change horizontal line segments (3+ pixels) to red (2).\n    *   Change vertical line segments (2 pixels) to blue (1).\n    *   Change gray 3x3 squares to green(3).\n    *   For any single gray pixel object:\n        * Change single gray pixels that are *adjacent* to horizontal lines, and which are not part of any other shape, to the same color as the nearest other shape.\n4.  **Output:** The output grid retains all original pixel values except for the transformed gray pixels.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, color):\n    \"\"\"Finds contiguous blocks of pixels of a specified color.\"\"\"\n    visited = set()\n    objects = []\n\n    def is_valid(r, c):\n        return 0 <= r < grid.shape[0] and 0 <= c < grid.shape[1]\n\n    def dfs(r, c, current_object):\n        if (r, c) in visited or not is_valid(r, c) or grid[r, c] != color:\n            return\n        visited.add((r, c))\n        current_object.append((r, c))\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            dfs(r + dr, c + dc, current_object)\n\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] == color and (r, c) not in visited:\n                current_object = []\n                dfs(r, c, current_object)\n                objects.append(current_object)\n    return objects\n\ndef is_horizontal_line(obj):\n    \"\"\"Checks if an object is a horizontal line segment of length 3 or more.\"\"\"\n    if len(obj) < 3:\n        return False\n    rows = [r for r, _ in obj]\n    return len(set(rows)) == 1\n\ndef is_vertical_line(obj):\n    \"\"\"Checks if an object is a vertical line segment of length 2.\"\"\"\n    if len(obj) != 2:\n        return False\n    cols = [c for _, c in obj]\n    return len(set(cols)) == 1\n\ndef is_square(obj):\n    \"\"\"check if object is a 3x3 square\"\"\"\n\n    if len(obj) != 9:\n        return False\n\n    rows = [pos[0] for pos in obj]\n    cols = [pos[1] for pos in obj]\n\n    if len(set(rows)) == 3 and len(set(cols)) == 3:\n      return True\n    \n    return False\n\ndef distance(r1,c1,r2,c2):\n    return abs(r1-r2) + abs(c1 - c2)\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of the input_grid\n    output_grid = np.copy(input_grid)\n    \n    # Find all gray objects\n    gray_objects = find_objects(input_grid, 5)\n\n    red_objects = []\n    blue_objects = []\n    green_objects = []\n\n    # Determine the new color for each object\n    for obj in gray_objects:\n        if is_horizontal_line(obj):\n            # Change to red (2)\n            for r, c in obj:\n                output_grid[r, c] = 2\n            red_objects.append(obj)\n\n        elif is_vertical_line(obj):\n            #change to blue (1)\n            for r,c in obj:\n                output_grid[r, c] = 1\n            blue_objects.append(obj)\n\n        elif is_square(obj):\n            for r,c in obj:\n                output_grid[r,c] = 3\n            green_objects.append(obj)\n        \n\n    for obj in gray_objects:\n\n        if len(obj) == 1:\n            r,c = obj[0]\n\n            # find minimum distance from red object\n            min_dist_red = 1000\n            if len(red_objects) > 0:\n\n                for red in red_objects:\n                    for red_r, red_c in red:\n                        dist = distance(r,c,red_r,red_c)\n                        if dist < min_dist_red:\n                            min_dist_red = dist\n\n\n            # find minimum distance from blue object\n            min_dist_blue = 1000\n            if len(blue_objects) > 0:\n                for blue in blue_objects:\n                    for blue_r, blue_c in blue:\n                        dist = distance(r,c,blue_r,blue_c)\n                        if dist < min_dist_blue:\n                            min_dist_blue = dist\n\n            # find minimum distance from green object\n            min_dist_green = 1000\n            if len(green_objects) > 0:\n                for green in green_objects:\n                    for green_r, green_c in green:\n                        dist = distance(r,c,green_r, green_c)\n                        if dist < min_dist_green:\n                            min_dist_green = dist\n\n            #prioritize assignment\n            if min_dist_red < min_dist_blue and min_dist_red < min_dist_green:\n                 output_grid[r,c] = 2\n            elif min_dist_blue < min_dist_red and min_dist_blue < min_dist_green:\n                output_grid[r,c] = 1\n            elif min_dist_green < min_dist_red and min_dist_green < min_dist_blue:\n                output_grid[r,c] = 3\n            elif min_dist_red == min_dist_blue and min_dist_red < min_dist_green:  #red == blue\n                output_grid[r,c] = 2\n            elif min_dist_red == min_dist_green and min_dist_red < min_dist_blue:  #red == green\n                output_grid[r,c] = 2;\n            elif min_dist_blue == min_dist_green and min_dist_blue < min_dist_red: #blue == green\n                output_grid[r,c] = 1\n            else: # red == blue == green\n                output_grid[r,c] = 2\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7590,
    "candidates_token_count": 1668,
    "total_token_count": 9258,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 14.784144,
  "response_file": "014-response.json"
}