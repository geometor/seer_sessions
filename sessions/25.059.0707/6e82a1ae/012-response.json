{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms a grid of pixels, changing gray (5) pixels to red (2), green (3), or blue (1) based on their spatial arrangement.\n\n1.  **Identify Objects:** Find all contiguous blocks of gray (5) pixels.\n2.  **Determine New Color:** For each gray object:\n    *   If the shape is a \"horizontal line segment\" (3 or more gray pixels in a row), change its color to red (2).\n    *   If the shape is a \"vertical line segment\" (two gray pixels, one on top of each other) change its color to blue (1).\n    *   If the shape is a square (3x3), change its color to green(3)\n    * If shape is a single pixel. determine the color by checking which is the closest colored line and applying that same color.\n3.  **Apply Transformation:** Replace the gray (5) pixels of each object with its determined new color.\n4. **Output:** All pixels retain original value except where gray pixels have been transformed.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, color):\n    \"\"\"Finds contiguous blocks of pixels of a specified color.\"\"\"\n    visited = set()\n    objects = []\n\n    def is_valid(r, c):\n        return 0 <= r < grid.shape[0] and 0 <= c < grid.shape[1]\n\n    def dfs(r, c, current_object):\n        if (r, c) in visited or not is_valid(r, c) or grid[r, c] != color:\n            return\n        visited.add((r, c))\n        current_object.append((r, c))\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            dfs(r + dr, c + dc, current_object)\n\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] == color and (r, c) not in visited:\n                current_object = []\n                dfs(r, c, current_object)\n                objects.append(current_object)\n    return objects\n\ndef is_horizontal_line(obj):\n    \"\"\"Checks if an object is a horizontal line segment of length 3 or more.\"\"\"\n    if len(obj) < 3:\n        return False\n    rows = [r for r, _ in obj]\n    return len(set(rows)) == 1\n\ndef is_vertical_line(obj):\n    \"\"\"Checks if an object is a vertical line segment of length 2.\"\"\"\n    if len(obj) != 2:\n        return False\n    cols = [c for _, c in obj]\n    return len(set(cols)) == 1\n\ndef is_square(obj):\n    \"\"\"check if object is a 3x3 square\"\"\"\n\n    if len(obj) != 9:\n        return False\n\n    rows = [pos[0] for pos in obj]\n    cols = [pos[1] for pos in obj]\n\n    if len(set(rows)) == 3 and len(set(cols)) == 3:\n      return True\n    \n    return False\n\ndef distance(r1,c1,r2,c2):\n    return abs(r1-r2) + abs(c1 - c2)\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of the input_grid\n    output_grid = np.copy(input_grid)\n    \n    # Find all gray objects\n    gray_objects = find_objects(input_grid, 5)\n\n    red_objects = []\n    blue_objects = []\n\n    # Determine the new color for each object\n    for obj in gray_objects:\n        if is_horizontal_line(obj):\n            # Change to red (2)\n            for r, c in obj:\n                output_grid[r, c] = 2\n            red_objects.append(obj)\n\n        elif is_vertical_line(obj):\n            #change to blue (1)\n            for r,c in obj:\n                output_grid[r, c] = 1\n            blue_objects.append(obj)\n\n        elif is_square(obj):\n            for r,c in obj:\n                output_grid[r,c] = 3\n        \n\n    for obj in gray_objects:\n\n        if len(obj) == 1:\n            r,c = obj[0]\n\n            # find minimum distance from red object\n            min_dist_red = 1000\n            if len(red_objects) > 0:\n\n                for red in red_objects:\n                    for red_r, red_c in red:\n                        dist = distance(r,c,red_r,red_c)\n                        if dist < min_dist_red:\n                            min_dist_red = dist\n\n\n            # find minimum distance from blue object\n            min_dist_blue = 1000\n            if len(blue_objects) > 0:\n                for blue in blue_objects:\n                    for blue_r, blue_c in blue:\n                        dist = distance(r,c,blue_r,blue_c)\n                        if dist < min_dist_blue:\n                            min_dist_blue = dist\n\n            if min_dist_red < min_dist_blue:\n                output_grid[r,c] = 3 # red + 1\n            elif min_dist_blue < min_dist_red:\n                output_grid[r,c] = 2 # blue + 1\n            else:\n                output_grid[r,c] = 2 # handles case of equal distance\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3476,
    "candidates_token_count": 1322,
    "total_token_count": 4798,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.603071,
  "response_file": "012-response.json"
}