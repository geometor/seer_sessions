{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport collections\nimport copy\n\n\"\"\"\nPerform a flood fill operation starting from the single red (2) pixel.\nThe fill spreads cardinally (up, down, left, right) into adjacent white (0) pixels.\nThe spread is blocked by azure (8) pixels and the grid boundaries.\nAzure pixels and the original red pixel remain unchanged.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Applies a flood fill transformation starting from the red pixel.\n\n    Args:\n        input_grid (list[list[int]]): The input 2D grid.\n\n    Returns:\n        list[list[int]]: The transformed 2D grid.\n    \"\"\"\n\n    # Get grid dimensions\n    height = len(input_grid)\n    if height == 0:\n        return []\n    width = len(input_grid[0])\n    if width == 0:\n        return [[] for _ in range(height)]\n\n    # Initialize output_grid as a deep copy of the input_grid\n    output_grid = copy.deepcopy(input_grid)\n\n    # Find the starting red pixel (color 2)\n    start_pos = None\n    for r in range(height):\n        for c in range(width):\n            if input_grid[r][c] == 2:\n                start_pos = (r, c)\n                break\n        if start_pos:\n            break\n\n    # If no starting red pixel is found, return the original grid copy\n    if not start_pos:\n        return output_grid\n\n    # Initialize the queue for Breadth-First Search (BFS) flood fill\n    queue = collections.deque([start_pos])\n    # Initialize a set to keep track of visited coordinates to avoid cycles and redundant checks\n    visited = {start_pos}\n\n    # Define cardinal directions (up, down, left, right)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    # Perform the flood fill\n    while queue:\n        # Get the current pixel coordinates from the queue\n        current_r, current_c = queue.popleft()\n\n        # Explore neighbors in cardinal directions\n        for dr, dc in directions:\n            neighbor_r, neighbor_c = current_r + dr, current_c + dc\n\n            # Check if the neighbor is within the grid boundaries\n            if 0 <= neighbor_r < height and 0 <= neighbor_c < width:\n                # Check if the neighbor has already been visited\n                if (neighbor_r, neighbor_c) not in visited:\n                    # Mark the neighbor as visited\n                    visited.add((neighbor_r, neighbor_c))\n                    \n                    # Check if the neighbor pixel is white (0) - the fill target\n                    if output_grid[neighbor_r][neighbor_c] == 0:\n                        # Change the neighbor's color to red (2) in the output grid\n                        output_grid[neighbor_r][neighbor_c] = 2\n                        # Add the neighbor to the queue to process its neighbors later\n                        queue.append((neighbor_r, neighbor_c))\n\n    # Return the modified grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3950,
    "candidates_token_count": 720,
    "total_token_count": 4670,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.424442,
  "retries": 1
}