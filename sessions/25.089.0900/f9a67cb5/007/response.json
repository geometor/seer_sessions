{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport collections\nimport copy\n\n\"\"\"\nPerforms a flood fill operation on a 2D grid starting from a single red (2) pixel.\nThe fill spreads cardinally (up, down, left, right) into adjacent white (0) pixels.\nThe spread is blocked by azure (8) pixels and the grid boundaries.\nAzure pixels and the original red pixel remain unchanged in the output. White pixels\nreachable from the start without crossing barriers are changed to red (2).\n\"\"\"\n\ndef find_start_pixel(grid, start_color):\n    \"\"\"Finds the coordinates of the first pixel with the specified start_color.\"\"\"\n    height = len(grid)\n    if height == 0:\n        return None\n    width = len(grid[0])\n    if width == 0:\n        return None\n        \n    for r in range(height):\n        for c in range(width):\n            if grid[r][c] == start_color:\n                return (r, c)\n    return None\n\ndef transform(input_grid):\n    \"\"\"\n    Applies a flood fill transformation starting from the red pixel (2),\n    filling white pixels (0) and stopping at azure barriers (8) or grid edges.\n\n    Args:\n        input_grid (list[list[int]]): The input 2D grid representing colors.\n\n    Returns:\n        list[list[int]]: The transformed 2D grid with the flood fill applied.\n    \"\"\"\n\n    # Get grid dimensions and handle empty grids\n    height = len(input_grid)\n    if height == 0:\n        return []\n    width = len(input_grid[0])\n    if width == 0:\n        return [[] for _ in range(height)]\n\n    # Initialize output_grid as a deep copy to modify\n    # This preserves barriers (8) and the original start pixel (2) initially\n    output_grid = copy.deepcopy(input_grid)\n\n    # --- Configuration ---\n    start_color = 2     # Red\n    fill_color = 2      # Red\n    target_color = 0    # White\n    # Barrier color (8, Azure) is implicitly handled\n\n    # --- Find the starting point ---\n    start_pos = find_start_pixel(input_grid, start_color)\n\n    # If no starting red pixel is found, return the unmodified copy\n    if not start_pos:\n        return output_grid\n\n    # --- Initialize Flood Fill (BFS) ---\n    # Queue for BFS, initialized with the starting position\n    queue = collections.deque([start_pos])\n    # Set to keep track of visited coordinates to prevent cycles and redundant processing.\n    # Start with the initial position already visited.\n    visited = {start_pos}\n\n    # Define cardinal directions (up, down, left, right) for neighbor checking\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    # --- Perform Flood Fill ---\n    while queue:\n        # Get the current pixel coordinates from the front of the queue\n        current_r, current_c = queue.popleft()\n\n        # Explore neighbors in cardinal directions\n        for dr, dc in directions:\n            neighbor_r, neighbor_c = current_r + dr, current_c + dc\n\n            # 1. Check if the neighbor is within the grid boundaries\n            if 0 <= neighbor_r < height and 0 <= neighbor_c < width:\n\n                # 2. Check if the neighbor has already been visited\n                if (neighbor_r, neighbor_c) not in visited:\n\n                    # 3. Check if the neighbor is a target pixel (white, 0)\n                    # We only fill and explore *from* white pixels.\n                    if output_grid[neighbor_r][neighbor_c] == target_color:\n\n                        # Mark the neighbor as visited *before* adding to queue\n                        visited.add((neighbor_r, neighbor_c))\n\n                        # Change the neighbor's color to the fill color\n                        output_grid[neighbor_r][neighbor_c] = fill_color\n\n                        # Add the newly filled neighbor to the queue to process its neighbors\n                        queue.append((neighbor_r, neighbor_c))\n\n    # Return the modified grid after the fill is complete\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 14761,
    "candidates_token_count": 971,
    "total_token_count": 15732,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.431012,
  "retries": 1
}