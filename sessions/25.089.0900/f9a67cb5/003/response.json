{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport collections\nimport copy\n\n\"\"\"\nPerforms a flood fill operation on a 2D grid.\nThe fill starts from a single 'start_color' pixel (red, 2).\nIt spreads cardinally (up, down, left, right) into adjacent 'target_pixels' (white, 0).\nThe spread is blocked by 'barrier_pixels' (azure, 8) and the grid boundaries.\nBarrier pixels and the original start pixel retain their color.\nWhite pixels reachable from the start pixel without crossing barriers are changed to the 'fill_color' (red, 2).\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Applies a flood fill transformation starting from the red pixel (2),\n    filling white pixels (0) and stopping at azure barriers (8) or grid edges.\n\n    Args:\n        input_grid (list[list[int]]): The input 2D grid representing colors.\n\n    Returns:\n        list[list[int]]: The transformed 2D grid with the flood fill applied.\n    \"\"\"\n\n    # Get grid dimensions\n    height = len(input_grid)\n    if height == 0:\n        return []\n    width = len(input_grid[0])\n    if width == 0:\n        return [[] for _ in range(height)]\n\n    # Initialize output_grid as a deep copy of the input_grid to modify\n    output_grid = copy.deepcopy(input_grid)\n\n    # --- Find the starting point ---\n    start_pos = None\n    start_color = 2  # Red\n    for r in range(height):\n        for c in range(width):\n            if input_grid[r][c] == start_color:\n                start_pos = (r, c)\n                break\n        if start_pos:\n            break\n\n    # If no starting red pixel is found, return the original grid copy\n    if not start_pos:\n        return output_grid\n\n    # --- Initialize Flood Fill (BFS) ---\n    fill_color = 2      # Red\n    target_color = 0    # White\n    barrier_color = 8   # Azure\n\n    queue = collections.deque([start_pos])\n    # Keep track of visited coordinates to avoid cycles and redundant checks\n    visited = {start_pos}\n\n    # Define cardinal directions (up, down, left, right)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    # --- Perform Flood Fill ---\n    while queue:\n        # Get the current pixel coordinates from the front of the queue\n        current_r, current_c = queue.popleft()\n\n        # Explore neighbors in cardinal directions\n        for dr, dc in directions:\n            neighbor_r, neighbor_c = current_r + dr, current_c + dc\n\n            # 1. Check if the neighbor is within the grid boundaries\n            if 0 <= neighbor_r < height and 0 <= neighbor_c < width:\n\n                # 2. Check if the neighbor has already been visited\n                if (neighbor_r, neighbor_c) not in visited:\n\n                    # Mark the neighbor as visited *before* checking its color\n                    # This prevents adding it multiple times if reachable from different paths\n                    visited.add((neighbor_r, neighbor_c))\n\n                    # 3. Check if the neighbor is a target pixel (white, 0)\n                    # This implicitly handles barriers (azure, 8) and already filled pixels (red, 2)\n                    # as they are not equal to the target_color.\n                    if output_grid[neighbor_r][neighbor_c] == target_color:\n\n                        # Change the neighbor's color to the fill color in the output grid\n                        output_grid[neighbor_r][neighbor_c] = fill_color\n\n                        # Add the neighbor to the queue to process its neighbors later\n                        queue.append((neighbor_r, neighbor_c))\n\n    # Return the modified grid after the fill is complete\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 11448,
    "candidates_token_count": 910,
    "total_token_count": 12358,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 18.282041,
  "retries": 1
}