{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by moving non-background pixels based on their color.\n\n    1. Initializes the output grid as a copy of the input grid.\n    2. Identifies all pixels in the input grid that are not the background color (azure, 8).\n    3. For each identified non-background pixel:\n        a. Determines its color and original position (row, column).\n        b. Calculates the new position based on the pixel's color:\n            - Orange (7): Move 2 rows up.\n            - Red (2): Move 2 columns left.\n            - Maroon (9): Move 2 rows down.\n            - Blue (1): Move 1 column right.\n        c. Sets the pixel at the original position in the output grid to the background color (azure, 8).\n        d. Sets the pixel at the calculated new position in the output grid to the original color of the non-background pixel.\n    4. Returns the modified output grid.\n    \"\"\"\n    # Convert input_grid to a NumPy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    # Initialize output_grid as a copy of the input grid\n    output_grid = np.copy(input_np)\n    background_color = 8\n\n    # Get the dimensions of the grid\n    height, width = input_np.shape\n\n    # Find the coordinates and colors of non-background pixels\n    non_background_pixels = []\n    for r in range(height):\n        for c in range(width):\n            color = input_np[r, c]\n            if color != background_color:\n                non_background_pixels.append(((r, c), color))\n\n    # Process each non-background pixel\n    for (r, c), color in non_background_pixels:\n        new_r, new_c = r, c # Initialize new coordinates with original ones\n\n        # Calculate the new position based on the pixel's color\n        if color == 7: # orange\n            new_r = r - 2\n        elif color == 2: # red\n            new_c = c - 2\n        elif color == 9: # maroon\n            new_r = r + 2\n        elif color == 1: # blue\n            new_c = c + 1\n\n        # Check if the new position is within the grid boundaries\n        if 0 <= new_r < height and 0 <= new_c < width:\n             # Set the original position in the output grid to the background color\n            output_grid[r, c] = background_color\n            # Set the calculated new position in the output grid to the original color\n            output_grid[new_r, new_c] = color\n        # else: # If move is out of bounds, the pixel effectively disappears (replaced by background)\n        #     output_grid[r, c] = background_color # This is implicitly handled by copying initially and only updating valid new positions\n\n    # Convert the NumPy array back to a list of lists for the final output\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3351,
    "candidates_token_count": 714,
    "total_token_count": 4065,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 8.248532,
  "retries": 1
}