task_context:
  grid_size: constant (16x16 in examples)
  background_color: azure (8), determined as the most frequent color.
objects:
  - id: source_object
    description: A single contiguous shape composed of exactly two distinct non-background colors found in the input grid.
    properties:
      colors: A set of exactly two colors present in the object (e.g., {white(0), gray(5)} or {blue(1), red(2)}).
      pixels: List of coordinates and colors {'r': row, 'c': col, 'color': color} occupied by the object.
      anchor_pixel: The pixel within the object having the minimum row index, and among those, the minimum column index. Contains {'r': row, 'c': col, 'color': color}.
      anchor_color: The color of the anchor_pixel.
relationships:
  - The horizontal_shift amount (dx) depends solely on the anchor_color of the source_object: white(0) -> dx=3; blue(1) -> dx=5.
  - The two non-background colors within the source_object are swapped in the output object.
actions:
  - name: identify_background
    input: input_grid
    output: background_color
  - name: identify_object_pixels_and_colors
    input: input_grid, background_color
    output: source_object_pixels (list of {'r','c','color'}), source_object_colors (set of 2 colors)
    constraints: Must find exactly two non-background colors.
  - name: find_anchor_pixel
    input: source_object_pixels
    output: anchor_pixel {'r','c','color'}
  - name: determine_shift
    input: anchor_pixel['color']
    output: horizontal_shift (integer dx)
    logic: if anchor_color is white(0), dx=3; if anchor_color is blue(1), dx=5.
  - name: create_color_swap_map
    input: source_object_colors (set of 2 colors)
    output: color_map (dict where color1 maps to color2, color2 maps to color1)
  - name: translate_and_swap_colors
    input: input_grid_dimensions, background_color, source_object_pixels, horizontal_shift (dx), color_map
    output: output_grid
    logic:
      1. Create a new grid filled with background_color.
      2. For each pixel {'r': r, 'c': c, 'color': original_color} in source_object_pixels:
         a. Find the mapped_color using color_map[original_color].
         b. Calculate the target position (r, c + dx).
         c. If the target position is within grid bounds, set the output grid pixel at (r, c + dx) to mapped_color.