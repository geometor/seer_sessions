task_description: Extract specific 6x6 shapes from an input grid, clean them, and stack them vertically in a specific order.

elements:
  - element: grid
    role: input/output container
    properties:
      - background_color: The most frequent color in the input grid.
      - dimensions: variable (up to 30x30 for input). Output height is N * 6, width is 6, where N is the number of extracted shapes.

  - element: shape
    role: primary object of interest
    properties:
      - colors: Any color except background and noise colors (e.g., Yellow, Azure, Green, Blue, Red).
      - structure: Contiguous block of non-background, non-noise pixels.
      - size_constraint: Must have a bounding box of exactly 6x6 pixels.
      - location: Defined by its bounding box coordinates in the input grid.

  - element: noise_pixel
    role: irrelevant data or control signal
    properties:
      - colors: [Gray (5), Orange (7), Maroon (9)]
      - location: Scattered within the input grid, potentially inside shape bounding boxes.
      - significance:
          - Gray (5), Maroon (9): Ignored during shape identification, removed if within an extracted shape's box.
          - Orange (7): Presence in the input grid signals a reversal of the output stacking order. Also removed if within an extracted shape's box.

actions:
  - action: identify_background_color
    description: Find the most frequent pixel color in the input grid.
  - action: identify_shapes
    description: Find all maximal contiguous blocks of pixels that are not background or noise colors.
  - action: filter_shapes
    description: Select only those identified shapes whose bounding box dimensions are exactly 6x6.
  - action: determine_order
    description: >
      Calculate the top-left corner (min_row, min_col) for the bounding box of each filtered shape.
      Sort the shapes based on these coordinates (primary key: min_row, secondary key: min_col).
      Check if any Orange (7) pixels exist anywhere in the input grid. If yes, reverse the sorted order.
  - action: extract_and_clean
    description: >
      For each shape in the determined order:
      1. Extract the 6x6 pixel region corresponding to its bounding box from the input grid.
      2. Replace any noise pixels (Gray=5, Orange=7, Maroon=9) within this 6x6 region with the identified background color.
  - action: stack_output
    description: Vertically concatenate the cleaned 6x6 grids in the determined order to create the final output grid.

relationships:
  - relation: shape_extraction
    subject: shape
    object: output_grid
    description: Each filtered 6x6 shape from the input corresponds to a 6x6 subgrid in the output.
  - relation: noise_removal
    subject: noise_pixel
    object: shape (within its 6x6 box)
    description: Noise pixels within a shape's extracted 6x6 box are replaced by the background color.
  - relation: order_determination
    subject: shape location
    object: stacking order
    description: The relative position (top-left corner) of shapes determines their stacking order.
  - relation: order_reversal
    subject: Orange (7) pixel presence
    object: stacking order
    description: The presence of Orange (7) in the input grid reverses the default stacking order.