{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nIdentify distinct, same-colored contiguous objects (non-background, non-noise) \nwhose minimal bounding box fits within 6x6. Use the top-left corner of each \nsuch object's bounding box to define the top-left corner of a 6x6 window to \nextract from the input. Collect all unique 6x6 window definitions. Order \nthem top-to-bottom, left-to-right based on their top-left corner. If the \ninput grid contains any Orange (7) pixels, reverse this order. Extract each \n6x6 window, clean it by replacing noise pixels (Gray=5, Orange=7, Maroon=9) \nwith the background color, and vertically stack the cleaned windows to create \nthe output.\n\"\"\"\n\ndef find_colored_objects(grid, background_color, noise_colors):\n    \"\"\"\n    Finds contiguous objects of the *same* non-background, non-noise color.\n\n    Args:\n        grid (np.array): The input grid.\n        background_color (int): The background color.\n        noise_colors (set): A set of colors to ignore as part of objects.\n\n    Returns:\n        list: A list of dictionaries, where each dictionary represents an object\n              and contains:\n              - 'color': The color of the object.\n              - 'pixels': A set of (row, col) tuples for pixels in the object.\n              - 'bbox': A tuple (min_r, max_r, min_c, max_c) for the bounding box.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n\n    for r in range(rows):\n        for c in range(cols):\n            color = grid[r, c]\n            # Start BFS if we find an unvisited pixel that is not background or noise\n            if not visited[r, c] and color != background_color and color not in noise_colors:\n                obj_pixels = set()\n                q = [(r, c)]\n                visited[r, c] = True\n                current_color = color # Color of the object we are tracing\n                min_r, max_r = r, r\n                min_c, max_c = c, c\n\n                while q:\n                    row, col = q.pop(0)\n                    obj_pixels.add((row, col))\n                    min_r = min(min_r, row)\n                    max_r = max(max_r, row)\n                    min_c = min(min_c, col)\n                    max_c = max(max_c, col)\n\n                    # Check 4 neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        # Check bounds and if visited\n                        if 0 <= nr < rows and 0 <= nc < cols and not visited[nr, nc]:\n                            neighbor_color = grid[nr, nc]\n                            # Only add neighbors of the SAME color as the starting pixel\n                            if neighbor_color == current_color:\n                                visited[nr, nc] = True\n                                q.append((nr, nc))\n                \n                # Store the found object details\n                objects.append({\n                    'color': current_color,\n                    'pixels': obj_pixels,\n                    'bbox': (min_r, max_r, min_c, max_c)\n                })\n                \n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on the described logic.\n    \"\"\"\n    grid = np.array(input_grid, dtype=int)\n    rows, cols = grid.shape\n    \n    if rows == 0 or cols == 0:\n        return []\n\n    # 1. Identify the background color\n    colors, counts = np.unique(grid, return_counts=True)\n    if len(colors) == 0: # Handle empty input grid case\n      return []\n    background_color = colors[np.argmax(counts)]\n\n    # 2. Define noise colors\n    noise_colors = {5, 7, 9}\n\n    # 3. Find all contiguous objects by color\n    all_objects = find_colored_objects(grid, background_color, noise_colors)\n\n    # 4. Filter objects by bounding box size (<= 6x6)\n    filtered_objects = []\n    for obj in all_objects:\n        min_r, max_r, min_c, max_c = obj['bbox']\n        height = max_r - min_r + 1\n        width = max_c - min_c + 1\n        if height <= 6 and width <= 6:\n            filtered_objects.append(obj)\n\n    # 5. Get unique top-left corners (min_r, min_c) from filtered objects\n    unique_corners = set()\n    for obj in filtered_objects:\n        min_r, _, min_c, _ = obj['bbox']\n        # Ensure the 6x6 window starting at this corner fits within the grid\n        if min_r + 6 <= rows and min_c + 6 <= cols:\n             unique_corners.add((min_r, min_c))\n        #else:\n            # Optional: log or handle cases where object near edge implies window out of bounds\n            # Based on examples, seems objects are placed such that 6x6 fits\n            # pass \n\n    # 6. Handle case where no valid corners are found\n    if not unique_corners:\n        return [] \n\n    # 7. Sort unique corners (row, then column)\n    sorted_corners = sorted(list(unique_corners), key=lambda x: (x[0], x[1]))\n\n    # 8. Check for Orange (7) in the original input grid\n    has_orange = np.any(grid == 7)\n\n    # 9. Reverse order if Orange (7) is present\n    if has_orange:\n        sorted_corners.reverse()\n\n    # 10. Initialize list for cleaned 6x6 output grids\n    output_subgrids = []\n\n    # 11. Iterate through corners, extract, clean, and collect\n    for r_corner, c_corner in sorted_corners:\n        # a. Extract the 6x6 subgrid (already bounds-checked in step 5)\n        subgrid = grid[r_corner : r_corner + 6, c_corner : c_corner + 6].copy()\n        \n        # b. Clean the subgrid (replace noise with background)\n        for r_sub in range(6):\n            for c_sub in range(6):\n                if subgrid[r_sub, c_sub] in noise_colors:\n                    subgrid[r_sub, c_sub] = background_color\n                    \n        # c. Add cleaned subgrid to the list\n        output_subgrids.append(subgrid)\n\n    # 12. Vertically stack the cleaned grids\n    if not output_subgrids:\n         return [] # Should not happen if unique_corners was not empty, but good practice\n         \n    final_output_grid_np = np.vstack(output_subgrids)\n\n    # Convert final numpy array back to list of lists\n    return final_output_grid_np.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 27272,
    "candidates_token_count": 1720,
    "total_token_count": 28992,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 21.591096,
  "retries": 1
}