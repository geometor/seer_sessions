{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Transforms the input grid by shifting the non-background pixels\n    in each row to the left. The amount of shift for a given row\n    is determined by the column index of the left-most non-background\n    pixel in that row, such that this pixel ends up in column 0\n    in the output grid. Rows containing only background pixels remain\n    unchanged.\n\n    Args:\n        input_grid: A 2D NumPy array representing the input grid.\n\n    Returns:\n        A 2D NumPy array representing the transformed output grid.\n    \"\"\"\n    # Get the dimensions of the input grid\n    height, width = input_grid.shape\n\n    # Initialize an output grid with the same dimensions, filled with the background color (0)\n    output_grid = np.zeros_like(input_grid)\n\n    # Iterate through each row of the input grid\n    for r in range(height):\n        # Get the current row\n        row = input_grid[r, :]\n\n        # Find the indices of non-background (non-zero) pixels in the current row\n        non_zero_indices = np.where(row != 0)[0]\n\n        # If there are no non-zero pixels, the row is entirely background\n        if len(non_zero_indices) == 0:\n            # Copy the background row directly (already initialized to 0, so technically optional)\n            # output_grid[r, :] = 0 \n            continue # Proceed to the next row\n        else:\n            # Find the column index of the first (left-most) non-zero pixel\n            first_col_index = non_zero_indices[0]\n\n            # Calculate the horizontal shift amount needed to move the first non-zero pixel to column 0\n            shift = -first_col_index\n\n            # Iterate through the pixels of the current input row\n            for c in range(width):\n                # Get the color of the pixel\n                color = input_grid[r, c]\n\n                # If the pixel is not background\n                if color != 0:\n                    # Calculate the new column index after applying the shift\n                    new_col = c + shift\n                    \n                    # Ensure the new column index is within the grid bounds\n                    # (Should always be true with this logic, but good practice)\n                    if 0 <= new_col < width:\n                        # Place the pixel's color at the new position in the output grid\n                        output_grid[r, new_col] = color\n\n    # Return the completed output grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4241,
    "candidates_token_count": 598,
    "total_token_count": 4839,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.736292,
  "retries": 1
}