{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport math\n\n\"\"\"\nThis transformation identifies two distinct colored pixels in the input grid.\nIt then draws two connected 'staple' or 'U' shapes centered around the midpoint \nbetween these two pixels. The orientation of the staples (horizontal or vertical) \ndepends on whether the input pixels share the same row or column.\n\n1. Find the coordinates and colors of the two non-white pixels in the input grid.\n2. Calculate the midpoint coordinates between these two pixels.\n3. Determine the orientation:\n   - If the pixels are in the same row (horizontal orientation):\n     - Calculate the center columns for the two vertical 'legs' of the staples, \n       offset horizontally from the midpoint column.\n     - Draw two vertical segments (legs) of length 5, centered vertically on the \n       shared row, using the respective pixel colors.\n     - Draw two horizontal segments connecting each original pixel to the center \n       of its corresponding vertical leg.\n     - Draw a horizontal segment connecting the centers of the two vertical legs, \n       splitting the color at the midpoint column.\n   - If the pixels are in the same column (vertical orientation):\n     - Calculate the center rows for the two horizontal 'bases' of the staples, \n       offset vertically from the midpoint row.\n     - Draw two horizontal segments (bases) of length 5, centered horizontally \n       on the shared column, using the respective pixel colors.\n     - Draw two vertical segments connecting each original pixel to the center \n       of its corresponding horizontal base.\n     - Draw a vertical segment connecting the centers of the two horizontal bases, \n       splitting the color at the midpoint row.\n4. Return the resulting grid.\n\"\"\"\n\ndef find_colored_pixels(grid):\n    \"\"\"Finds all non-background (non-zero) pixels.\"\"\"\n    pixels = []\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] != 0:\n                pixels.append({'row': r, 'col': c, 'color': grid[r, c]})\n    return pixels\n\ndef draw_pixel(grid, r, c, color):\n    \"\"\"Draws a pixel if within grid bounds.\"\"\"\n    rows, cols = grid.shape\n    if 0 <= r < rows and 0 <= c < cols:\n        grid[r, c] = color\n\ndef draw_vline(grid, r_start, r_end, c, color):\n    \"\"\"Draws a vertical line.\"\"\"\n    for r in range(min(r_start, r_end), max(r_start, r_end) + 1):\n        draw_pixel(grid, r, c, color)\n\ndef draw_hline(grid, r, c_start, c_end, color):\n    \"\"\"Draws a horizontal line.\"\"\"\n    for c in range(min(c_start, c_end), max(c_start, c_end) + 1):\n        draw_pixel(grid, r, c, color)\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by drawing connected staple shapes based on two anchor pixels.\n    \"\"\"\n    input_np = np.array(input_grid, dtype=int)\n    rows, cols = input_np.shape\n    output_grid = np.zeros_like(input_np)\n\n    # Find the two anchor pixels\n    pixels = find_colored_pixels(input_np)\n    if len(pixels) != 2:\n        # Handle unexpected input (e.g., return empty or input grid)\n        # For this specific task structure, we expect exactly two points.\n        return output_grid.tolist() \n\n    p1 = pixels[0]\n    p2 = pixels[1]\n    r1, c1, color1 = p1['row'], p1['col'], p1['color']\n    r2, c2, color2 = p2['row'], p2['col'], p2['color']\n\n    # Calculate midpoint (can be float)\n    mr = (r1 + r2) / 2.0\n    mc = (c1 + c2) / 2.0\n\n    # Determine orientation and draw shapes\n    if r1 == r2:  # Horizontal orientation\n        vr = r1 # Center row is the shared row\n        # Calculate center columns for the vertical segments (staple legs)\n        # Centers are offset by 1.5 units from the midpoint column\n        vc1 = math.floor(mc - 1) \n        vc2 = math.ceil(mc + 1) \n\n        # Ensure vc1 and vc2 are distinct if mc is integer or half-integer\n        # This adjustment ensures a gap of at least 2, matching examples\n        if vc2 - vc1 < 3:\n             if mc % 1 == 0: # Integer midpoint\n                 vc1 = int(mc - 2)\n                 vc2 = int(mc + 2)\n             else: # Half-integer midpoint like 6.5\n                 vc1 = int(mc - 1.5)\n                 vc2 = int(mc + 1.5)\n                 \n        # Ensure p1 corresponds to vc1 and p2 to vc2 based on column order\n        if c1 > c2:\n             vc1, vc2 = vc2, vc1 # Swap centers if p1 is to the right of p2\n             color1, color2 = color2, color1 # Swap colors too\n             r1, r2 = r2, r1 # Swap original coords\n             c1, c2 = c2, c1\n             \n        # Draw vertical segment 1 (length 5)\n        draw_vline(output_grid, vr - 2, vr + 2, vc1, color1)\n        # Draw vertical segment 2 (length 5)\n        draw_vline(output_grid, vr - 2, vr + 2, vc2, color2)\n\n        # Draw horizontal segment 1 (from p1 to center of leg 1)\n        draw_hline(output_grid, vr, c1, vc1, color1)\n        # Draw horizontal segment 2 (from p2 to center of leg 2)\n        draw_hline(output_grid, vr, c2, vc2, color2)\n\n        # Draw connection segment between leg centers, splitting color at midpoint\n        for c in range(vc1, vc2 + 1):\n            if c <= mc:\n                 draw_pixel(output_grid, vr, c, color1)\n            else:\n                 draw_pixel(output_grid, vr, c, color2)\n\n\n    elif c1 == c2:  # Vertical orientation\n        hc = c1 # Center column is the shared column\n        # Calculate center rows for the horizontal segments (staple bases)\n        # Centers are offset by 1.5 units from the midpoint row\n        hr1 = math.floor(mr - 1)\n        hr2 = math.ceil(mr + 1)\n\n        # Ensure hr1 and hr2 are distinct\n        if hr2 - hr1 < 3:\n             if mr % 1 == 0: # Integer midpoint\n                 hr1 = int(mr - 2)\n                 hr2 = int(mr + 2)\n             else: # Half-integer midpoint like 5.5\n                 hr1 = int(mr - 1.5)\n                 hr2 = int(mr + 1.5)\n\n        # Ensure p1 corresponds to hr1 and p2 to hr2 based on row order\n        if r1 > r2:\n            hr1, hr2 = hr2, hr1 # Swap centers if p1 is below p2\n            color1, color2 = color2, color1 # Swap colors\n            r1, r2 = r2, r1 # Swap original coords\n            c1, c2 = c2, c1\n            \n        # Draw horizontal segment 1 (length 5)\n        draw_hline(output_grid, hr1, hc - 2, hc + 2, color1)\n        # Draw horizontal segment 2 (length 5)\n        draw_hline(output_grid, hr2, hc - 2, hc + 2, color2)\n\n        # Draw vertical segment 1 (from p1 to center of base 1)\n        draw_vline(output_grid, r1, hr1, hc, color1)\n        # Draw vertical segment 2 (from p2 to center of base 2)\n        draw_vline(output_grid, r2, hr2, hc, color2)\n\n        # Draw connection segment between base centers, splitting color at midpoint\n        for r in range(hr1, hr2 + 1):\n             if r <= mr:\n                 draw_pixel(output_grid, r, hc, color1)\n             else:\n                 draw_pixel(output_grid, r, hc, color2)\n\n    # Convert back to list of lists for the expected output format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4509,
    "candidates_token_count": 2051,
    "total_token_count": 6560,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 37.128578,
  "retries": 1
}