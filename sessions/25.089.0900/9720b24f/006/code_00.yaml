Task: Enclosed Region Removal by Single Color Boundary

Input_Description: Grid containing pixels of colors 0-9. White (0) is background. Non-white pixels can form contiguous regions (objects).
Output_Description: Input grid modified by changing certain non-white pixels to white (0).

Pixel_Types:
  - Background: Color white (0). Represents empty space.
  - Region_Pixel: A non-white pixel belonging to a contiguous area of the same color.
  - Boundary_Pixel: A non-white pixel that is adjacent (up, down, left, right) to a Region_Pixel but has a different color.

Objects:
  - Region: A set of contiguous pixels of the same `target_color`.
    Properties:
      - `target_color`: The color of the pixels in the region (non-white).
      - `pixels`: Set of coordinates `{(r, c)}` belonging to the region.
      - `is_enclosed`: Boolean state determined by transformation rule.
  - Boundary: The set of non-background pixels immediately adjacent to a Region.
    Properties:
      - `colors`: Set of unique colors present in the boundary pixels.

Transformation_Rule:
  Action: Change the color of all `pixels` within an `is_enclosed` Region to white (0).
  Condition_for_Enclosure (`is_enclosed` = True):
    - A Region is enclosed if and only if an "escape test" fails.
    - Escape_Test:
      - Start a search (e.g., BFS) from any pixel within the Region.
      - The search can move to any adjacent pixel *except* for pixels of a potential *single* `boundary_color`.
      - Identify the set of all non-white, non-`target_color` pixels adjacent to the Region (`potential_boundary_colors`).
      - If `potential_boundary_colors` contains more than one color, the Region is *not* enclosed (cannot perform escape test with a single boundary color).
      - If `potential_boundary_colors` contains exactly one color (`the_boundary_color`):
        - Perform the escape search. The search cannot enter cells with `the_boundary_color`.
        - If the search can reach the grid edge OR any background (0) pixel, the Escape_Test *succeeds*, and the Region is *not* enclosed.
        - If the search completes without reaching the edge or background, the Escape_Test *fails*, and the Region *is* enclosed.
      - If `potential_boundary_colors` is empty (Region is adjacent only to background or edge), the Region is *not* enclosed.

Examples_Analysis (Summary from code execution):
  - Example 1: Region color 7 changed. Adjacent boundary color is {1}. Region touches background. Enclosed.
  - Example 2: Region color 5 changed. Adjacent boundary color is {2}. Region touches background. Enclosed. Region color 8 changed. Adjacent boundary color is {6}. Region touches background. Enclosed.
  - Example 3: Region color 6 changed. Adjacent boundary colors include {3}. Region touches background. Enclosed. Region color 8 changed. Adjacent boundary colors include {7}. Region touches background. Enclosed. (Note: The simple analysis tool had trouble here, manual inspection confirms boundaries).
  - Example 4: Region color 5 changed. Adjacent boundary color is {2}. Region touches background. Enclosed.

Key_Observation: A region being adjacent to background (0) pixels does *not* prevent it from being enclosed, provided those background pixels can only be reached by crossing the single `boundary_color`. The crucial factor is whether a path exists from the region to the edge/background *without* crossing the boundary color.
