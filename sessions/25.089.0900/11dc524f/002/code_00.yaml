task_context:
  grid_properties:
    - dimensions_preserved: true
    - background_color: 7 # orange
    - static_background: true
  objects:
    - role: mobile_object
      color: 2 # red
      shape: variable
      shape_preserved: true
      action: moves_towards_target
    - role: target_object
      color: 5 # gray
      shape: variable # Consistently 2x2 in examples, but could vary
      shape_preserved: true
      action: remains_static
  relationships:
    - type: spatial
      between: [mobile_object, target_object]
      initial_state: separated
      final_state: adjacent # Orthogonally or diagonally
  transformation:
    type: iterative_movement
    actor: mobile_object (red)
    target: target_object (gray)
    movement_rule: >
      1. Calculate the center of the bounding boxes for the red and gray objects.
      2. Determine the vector difference between the centers (target_center - mobile_center).
      3. Identify the axis (row 'y' or column 'x') corresponding to the component with the largest absolute value in the difference vector. This is the dominant axis.
      4. Define a single step vector (dr, dc): move one unit along the dominant axis in the direction that reduces the separation. If the row component is dominant, step is (sign(dy), 0). If the column component is dominant, step is (0, sign(dx)). If components are equal, prioritize one (e.g., row/vertical).
      5. Translate all pixels of the mobile_object by the step vector (dr, dc).
    stopping_condition: >
      The movement stops immediately *before* executing a step if any pixel of the mobile_object is currently adjacent (sharing an edge or a corner) to any pixel of the target_object.