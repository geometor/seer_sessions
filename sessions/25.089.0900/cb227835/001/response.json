{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nDraw a green (3) line between the two azure (8) pixels found in the input grid. \nThe line is drawn using Bresenham's line algorithm, excluding the start and end points (the azure pixels themselves). \nThe output grid is a copy of the input grid with the green line pixels added.\n\"\"\"\n\nimport numpy as np\n\ndef _find_pixels(grid, color):\n    \"\"\"Finds all coordinates of pixels with a specific color.\"\"\"\n    coords = np.argwhere(grid == color)\n    # Convert to list of tuples (row, col)\n    return [tuple(coord) for coord in coords]\n\ndef _bresenham_line(r0, c0, r1, c1):\n    \"\"\"\n    Generate coordinates for a line between (r0, c0) and (r1, c1) using Bresenham's algorithm.\n    Includes start and end points.\n    \"\"\"\n    points = []\n    dr = abs(r1 - r0)\n    dc = abs(c1 - c0)\n    sr = 1 if r0 < r1 else -1\n    sc = 1 if c0 < c1 else -1\n    err = dr - dc\n\n    while True:\n        points.append((r0, c0))\n        if r0 == r1 and c0 == c1:\n            break\n        e2 = 2 * err\n        if e2 > -dc:\n            err -= dc\n            r0 += sr\n        if e2 < dr:\n            err += dr\n            c0 += sc\n            \n    return points\n\ndef transform(input_grid):\n    \"\"\"\n    Identifies two azure (8) pixels in the input grid and draws a green (3) line \n    between them using Bresenham's algorithm. The start and end points are not colored green.\n    \n    Args:\n        input_grid (np.ndarray): A 2D NumPy array representing the input grid.\n\n    Returns:\n        np.ndarray: A 2D NumPy array representing the output grid with the line drawn.\n    \"\"\"\n    # Find the coordinates of the two azure pixels\n    azure_pixels = _find_pixels(input_grid, 8)\n    \n    if len(azure_pixels) != 2:\n        # Handle cases where there aren't exactly two azure pixels (optional, based on ARC constraints)\n        # For this specific task, we assume exactly two are always present based on examples.\n        # If not, we might return the input unchanged or raise an error.\n        # Returning input unchanged seems safer for ARC.\n        return input_grid.copy() \n        \n    p1 = azure_pixels[0]\n    p2 = azure_pixels[1]\n\n    # Generate the line coordinates using Bresenham's algorithm\n    line_points = _bresenham_line(p1[0], p1[1], p2[0], p2[1])\n\n    # Initialize the output grid as a copy of the input\n    output_grid = input_grid.copy()\n\n    # Iterate through the points on the line\n    for r, c in line_points:\n        # Check if the current point is not one of the original azure pixels\n        if (r, c) != p1 and (r, c) != p2:\n            # Check grid boundaries (though Bresenham should stay within if points are)\n            if 0 <= r < output_grid.shape[0] and 0 <= c < output_grid.shape[1]:\n                 # Color the point green\n                output_grid[r, c] = 3\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3666,
    "candidates_token_count": 828,
    "total_token_count": 4494,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.74831,
  "retries": 1
}