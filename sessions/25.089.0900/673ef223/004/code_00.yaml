elements:
  - object: background
    color: white (0)
    role: static_canvas
  - object: red_line_segment
    color: red (2)
    shape: vertical_line
    count: 2 (one left, one right)
    properties:
      - spans_multiple_rows
      - defines_boundaries_for_line_drawing
      - defines_mapping_between_rows_via_relative_position
    role: boundary/anchor/mapping_basis
  - object: azure_marker
    color: azure (8)
    shape: pixel
    count: variable (>=1)
    location: within_rows_spanned_by_a_red_line_segment
    role: trigger
  - object: generated_same_side_line
    color: azure (8)
    shape: horizontal_line_segment
    role: output_element
    relationship:
      - starts_adjacent_to_source_red_line
      - extends_towards_trigger_column (exclusive)
      - exists_on_same_row_as_trigger
  - object: generated_yellow_endpoint
    color: yellow (4)
    shape: pixel
    role: output_element
    location: at_the_original_coordinates_of_an_azure_marker
    relationship: terminates_generated_same_side_line
  - object: generated_opposite_side_line
    color: azure (8)
    shape: horizontal_line_segment
    role: output_element
    relationship:
      - exists_on_row_corresponding_to_trigger_row_in_target_segment (r_target)
      - starts_at_source_column (inclusive, overwrites original red pixel at (r_target, source_col))
      - extends_towards_target_column (exclusive, preserves original red pixel at (r_target, target_col))
      - fills_columns_between_source_and_target (details depend on source/target orientation)

actions:
  - initialize: create output grid by copying input grid and changing all azure (8) pixels to white (0).
  - identify: locate the two vertical red line segments (color 2), recording their column index (`col_left`, `col_right`) and row ranges (`row_start_left`, `row_end_left`, `row_start_right`, `row_end_right`).
  - identify: locate all azure marker pixels (color 8) in the *original input* grid.
  - for_each: azure marker pixel at input coordinates (`r`, `c`):
      - determine: which red segment is 'source' (based on `r`) and which is 'target'. Note `source_col`, `target_col`, `source_row_start`, `target_row_start`, `target_row_end`.
      - generate_same_side:
          - place: yellow (4) pixel in the output grid at (`r`, `c`).
          - draw: horizontal line segment in row `r` with azure (8).
              - if source is left: fill columns `source_col + 1` to `c - 1`.
              - if source is right: fill columns `c + 1` to `source_col - 1`.
      - generate_opposite_side:
          - calculate: the corresponding row index `r_target = target_row_start + (r - source_row_start)`.
          - validate: check if `r_target` is within the row range `[target_row_start, target_row_end]` and within grid bounds.
          - if valid:
              - draw: horizontal line segment in row `r_target` with azure (8).
                  - if source is left (`source_col < target_col`): fill columns from `source_col` (inclusive) to `target_col` (exclusive).
                  - if source is right (`source_col > target_col`): fill columns from `target_col + 1` (inclusive) to `source_col + 1` (exclusive).
  - return: the modified output grid.
