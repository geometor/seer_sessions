{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nCounts the number of corners and adjacent same color tiles in a 3x3 grid.\n\"\"\"\n\nimport numpy as np\n\ndef count_corners_and_adjacent(grid):\n    \"\"\"\n    Counts corners with adjacent same-color tiles.\n    \"\"\"\n    grid = np.array(grid)\n    if grid.shape != (3, 3):\n        return 0  # Not a 3x3 grid\n\n    count = 0\n\n    # Check top-left corner\n    if grid[0, 0] != 0:\n      if grid[0,0] == grid[0,1]:\n        count += 1\n      if grid[0,0] == grid[1,0]:\n        count += 1\n\n    # Check top-right corner\n    if grid[0, 2] != 0:\n      if grid[0,2] == grid[0,1]:\n        count += 1\n      if grid[0,2] == grid[1,2]:\n        count += 1\n\n    # Check bottom-left corner\n    if grid[2, 0] != 0:\n        if grid[2,0] == grid[1,0]:\n            count +=1\n        if grid[2,0] == grid[2,1]:\n            count += 1\n\n    # Check bottom-right corner\n    if grid[2, 2] != 0:\n        if grid[2,2] == grid[2,1]:\n            count += 1\n        if grid[2,2] == grid[1,2]:\n            count += 1\n    return count\n\n\ndef transform(input_grid):\n    \"\"\"\n    Counts corners and adjacent tiles of the same color\n    \"\"\"\n    # Convert input to numpy array\n    grid = np.array(input_grid)\n\n    # Count corners with adjacent same-color tiles\n    count = count_corners_and_adjacent(grid)\n\n    return count\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4207,
    "candidates_token_count": 445,
    "total_token_count": 4652,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.400581
}