{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Green Lines:** Locate all horizontal and vertical lines composed of two or more contiguous green (3) pixels in the input grid.\n\n2.  **Endpoint Evaluation:** For the first and last pixels of each green line (endpoints):\n    *   If an endpoint has two *or more* adjacent white pixels (up, down, left, or right), replace it with azure (8).\n    *   If an endpoint has only *one* adjacent white pixel, replace with azure if and only if there is at least one green pixel adjacent to this end point.\n\n3.  **Interior Pixel Evaluation:** For all other pixels within each green line (not the first and last pixels):\n    *    If a green pixel has *at least one* adjacent white pixel (up, down, left, or right), replace it with azure (8).\n\n4.  **Copy Unmodified Pixels:** Any pixel that is not green, or does not meet the above replacement criteria within a green line, is copied directly from the input grid to the output grid.\n\"\"\"\n\nimport numpy as np\n\ndef count_adjacent_white_pixels(grid, row, col):\n    \"\"\"Counts the number of white (0) pixels adjacent to a given cell.\"\"\"\n    count = 0\n    rows, cols = grid.shape\n    # Check up\n    if row > 0 and grid[row - 1, col] == 0:\n        count += 1\n    # Check down\n    if row < rows - 1 and grid[row + 1, col] == 0:\n        count += 1\n    # Check left\n    if col > 0 and grid[row, col - 1] == 0:\n        count += 1\n    # Check right\n    if col < cols - 1 and grid[row, col + 1] == 0:\n        count += 1\n    return count\n\ndef get_green_lines(grid):\n    \"\"\"Identifies horizontal and vertical lines of green pixels.\"\"\"\n    rows, cols = grid.shape\n    green_lines = []\n\n    # Check for horizontal lines\n    for r in range(rows):\n        current_line = []\n        for c in range(cols):\n            if grid[r, c] == 3:\n                current_line.append((r, c))\n            else:\n                if len(current_line) > 1:\n                    green_lines.append(current_line)\n                current_line = []\n        if len(current_line) > 1:\n            green_lines.append(current_line)\n\n    # Check for vertical lines\n    for c in range(cols):\n        current_line = []\n        for r in range(rows):\n            if grid[r, c] == 3:\n                current_line.append((r, c))\n            else:\n                if len(current_line) > 1:\n                    green_lines.append(current_line)\n                current_line = []\n        if len(current_line) > 1:\n            green_lines.append(current_line)\n\n    return green_lines\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of input_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Get green lines\n    green_lines = get_green_lines(input_grid)\n\n    # Iterate through each green line\n    for line in green_lines:\n        # Process the line ends\n        first_r, first_c = line[0]\n        last_r, last_c = line[-1]\n\n        # Check if endpoints have two or more adjacent white pixels\n        if count_adjacent_white_pixels(input_grid, first_r, first_c) >= 2:\n            output_grid[first_r, first_c] = 8\n        elif count_adjacent_white_pixels(input_grid, first_r, first_c) == 1:\n            #check for horizontal line\n            if first_r == last_r and len(line)>1:\n                output_grid[first_r, first_c] = 8\n            #check for vertical line\n            if first_c == last_c and len(line)>1:\n                output_grid[first_r, first_c] = 8\n\n        if count_adjacent_white_pixels(input_grid, last_r, last_c) >= 2:\n            output_grid[last_r, last_c] = 8\n        elif count_adjacent_white_pixels(input_grid, last_r, last_c) == 1:\n             #check for horizontal line\n            if first_r == last_r and len(line)>1:\n                output_grid[last_r, last_c] = 8\n             #check for vertical line\n            if first_c == last_c and len(line)>1:\n                output_grid[last_r, last_c] = 8\n\n        # Iterate through interior green pixels in line\n        for i in range(1, len(line) - 1):\n            r, c = line[i]\n            if count_adjacent_white_pixels(input_grid, r, c) >= 1:\n                output_grid[r, c] = 8\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5697,
    "candidates_token_count": 1221,
    "total_token_count": 6918,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.378458
}