{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Green Lines:** Find all horizontal and vertical lines formed by contiguous green (3) pixels.\n2.  **White Neighbor Condition for Replacement:** Within each identified green line:\n    *   A green pixel is replaced with azure (8) if it meets *both* these conditions:\n        1. It has at least one adjacent white pixel (up, down, left, or right).\n        2. it is *not* at either end of its line segment *unless* it has at\n           least two white pixels adjacent\n\n3.  **Copy Other Pixels:** All pixels that are not part of the green lines identified in step 1, or that do not meet the conditions within a line, are copied directly from the input grid to the output grid without modification.\n\"\"\"\n\nimport numpy as np\n\ndef count_adjacent_white_pixels(grid, row, col):\n    \"\"\"Counts the number of white (0) pixels adjacent to a given cell.\"\"\"\n    count = 0\n    rows, cols = grid.shape\n    # Check up\n    if row > 0 and grid[row - 1, col] == 0:\n        count += 1\n    # Check down\n    if row < rows - 1 and grid[row + 1, col] == 0:\n        count += 1\n    # Check left\n    if col > 0 and grid[row, col - 1] == 0:\n        count += 1\n    # Check right\n    if col < cols - 1 and grid[row, col + 1] == 0:\n        count += 1\n    return count\n\ndef get_green_lines(grid):\n    \"\"\"Identifies horizontal and vertical lines of green pixels.\"\"\"\n    rows, cols = grid.shape\n    green_lines = []\n\n    # Check for horizontal lines\n    for r in range(rows):\n        current_line = []\n        for c in range(cols):\n            if grid[r, c] == 3:\n                current_line.append((r, c))\n            else:\n                if len(current_line) > 1:\n                    green_lines.append(current_line)\n                current_line = []\n        if len(current_line) > 1:\n            green_lines.append(current_line)\n\n    # Check for vertical lines\n    for c in range(cols):\n        current_line = []\n        for r in range(rows):\n            if grid[r, c] == 3:\n                current_line.append((r, c))\n            else:\n                if len(current_line) > 1:\n                    green_lines.append(current_line)\n                current_line = []\n        if len(current_line) > 1:\n            green_lines.append(current_line)\n\n    return green_lines\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of input_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Get green lines\n    green_lines = get_green_lines(input_grid)\n    \n    # Iterate through each green line\n    for line in green_lines:\n        #process the line ends\n        first_r, first_c = line[0]\n        last_r, last_c = line[-1]\n        \n        # Check if the line segment meets condition for replacment and are end caps\n        if count_adjacent_white_pixels(input_grid,first_r, first_c) >= 1:\n          if count_adjacent_white_pixels(input_grid,first_r, first_c) >= 2:\n            output_grid[first_r, first_c] = 8\n          else: #only replace if there are other greens adjacent\n             #check for horizontal line\n             if first_r == last_r and len(line) > 1:\n                output_grid[first_r, first_c] = 8\n             #check for vertical line   \n             if first_c == last_c and len(line) > 1:\n                 output_grid[first_r, first_c] = 8\n\n\n        if count_adjacent_white_pixels(input_grid,last_r, last_c) >= 1:\n          if count_adjacent_white_pixels(input_grid,last_r, last_c) >= 2:\n            output_grid[last_r, last_c] = 8\n          else: #only replace if there are other greens adjacent\n             #check for horizontal line\n             if first_r == last_r and len(line) > 1:\n                output_grid[last_r, last_c] = 8\n             #check for vertical line   \n             if first_c == last_c and len(line) > 1:\n                 output_grid[last_r, last_c] = 8\n\n\n        # Iterate through green pixels in line\n        for i in range(1,len(line)-1):\n            r, c = line[i]\n            if count_adjacent_white_pixels(input_grid, r, c) >= 1:\n                    output_grid[r,c] = 8\n    \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3732,
    "candidates_token_count": 1208,
    "total_token_count": 4940,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 14.733161
}