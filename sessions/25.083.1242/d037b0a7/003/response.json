{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe program identifies \"source\" rows by checking for non-zero values in their last element.\nFor each source row, it modifies subsequent \"target\" rows. It replaces zeros in the target row\nwith corresponding non-zero values from the source row, *excluding* the last element.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    # Initialize output_grid\n    input_grid = np.array(input_grid)\n    output_grid = []\n\n    # Identify source rows (rows where the last element is not zero)\n    source_rows_indices = [i for i, row in enumerate(input_grid) if row[-1] != 0]\n\n    # Iterate through all rows to build the output grid\n    row_index = 0\n    while row_index < len(input_grid):\n        row = input_grid[row_index]\n        output_grid.append(row.tolist())  # Always append the original row first\n\n        #if is source row,\n        if row_index in source_rows_indices:\n\n            #check next row if it exist\n            if row_index + 1 < len(input_grid):\n\n                next_row_index = row_index + 1\n\n                #if next row index is less than len of input grid\n                while next_row_index < len(input_grid):\n\n                    #copy next row\n                    modified_row = input_grid[next_row_index].copy()\n\n                    #if last element are different, merge\n                    if input_grid[next_row_index][-1] != input_grid[row_index][-1]:\n\n                        # Iterate and merge\n                        for j in range(len(modified_row) - 1):  # Exclude the last element\n                            if modified_row[j] == 0 and row[j] != 0:\n                                modified_row[j] = row[j]\n\n                        output_grid.append(modified_row.tolist())\n                    #if they are same, append current row copy\n                    else:\n                        output_grid.append(input_grid[row_index].tolist())\n\n\n                    next_row_index += 1\n\n        row_index += 1 #increment to next row\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3193,
    "candidates_token_count": 510,
    "total_token_count": 3703,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.90067
}