{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by extracting all contiguous non-zero objects, and\nconstructing a new grid that contains only these objects, preserving their\nrelative spatial relationships, but removing all background (zero-valued) pixels.\nThe output grid's size is determined by the bounding box that encompasses all\nextracted objects.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"\n    Identifies and returns a list of objects in the grid.  Each object\n    is represented as a dictionary containing the coordinates and color\n    of its constituent pixels.\n    \"\"\"\n    objects = []\n    visited = set()\n    rows, cols = len(grid), len(grid[0])\n\n    def dfs(r, c, current_object):\n        if (r, c) in visited or r < 0 or r >= rows or c < 0 or c >= cols or grid[r][c] == 0:\n            return\n        visited.add((r, c))\n        current_object.append((r, c, grid[r][c]))\n        dfs(r + 1, c, current_object)\n        dfs(r - 1, c, current_object)\n        dfs(r, c + 1, current_object)\n        dfs(r, c - 1, current_object)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r][c] != 0 and (r, c) not in visited:\n                current_object = []\n                dfs(r, c, current_object)\n                objects.append(current_object)\n    return objects\n\ndef bounding_box(objects):\n    \"\"\"\n    Calculates the bounding box that encompasses all objects.\n    Returns (min_row, max_row, min_col, max_col).\n    \"\"\"\n    if not objects:\n        return 0, -1, 0, -1  # Empty grid case\n\n    min_row = float('inf')\n    max_row = float('-inf')\n    min_col = float('inf')\n    max_col = float('-inf')\n\n    for obj in objects:\n        for r, c, _ in obj:\n            min_row = min(min_row, r)\n            max_row = max(max_row, r)\n            min_col = min(min_col, c)\n            max_col = max(max_col, c)\n\n    return min_row, max_row, min_col, max_col\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the described rules.\n    \"\"\"\n    grid = np.array(input_grid)\n    objects = find_objects(grid)\n    min_row, max_row, min_col, max_col = bounding_box(objects)\n\n    # Calculate output grid dimensions\n    output_height = max_row - min_row + 1\n    output_width = max_col - min_col + 1\n\n    # Initialize the output grid with zeros (background)\n    output_grid = np.zeros((output_height, output_width), dtype=int)\n\n    # Place objects in the output grid.\n    for obj in objects:\n        for r, c, color in obj:\n            # Calculate the new position relative to the bounding box\n            new_r = r - min_row\n            new_c = c - min_col\n            output_grid[new_r, new_c] = color\n\n    return output_grid.tolist()\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4120,
    "candidates_token_count": 805,
    "total_token_count": 4925,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.348461,
  "response_file": "002-response.json"
}