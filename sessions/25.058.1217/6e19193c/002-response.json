{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation takes each colored block, and \"scatters\" its pixels into a diagonal line, \nkeeping the relative position the same as the original form.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"Finds contiguous blocks of non-white pixels.\"\"\"\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n    rows, cols = grid.shape\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def dfs(r, c, color, obj_pixels):\n        if not is_valid(r, c) or visited[r, c] or grid[r, c] != color:\n            return\n        visited[r, c] = True\n        obj_pixels.append((r, c))\n        dfs(r + 1, c, color, obj_pixels)\n        dfs(r - 1, c, color, obj_pixels)\n        dfs(r, c + 1, color, obj_pixels)\n        dfs(r, c - 1, color, obj_pixels)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and not visited[r, c]:\n                obj_pixels = []\n                dfs(r, c, grid[r, c], obj_pixels)\n                objects.append({'color': grid[r, c], 'pixels': obj_pixels})\n    return objects\n\ndef center_of_mass(pixels):\n    \"\"\"Calculates the center of mass of a set of pixels.\"\"\"\n    if not pixels:\n        return 0,0\n    sum_r = sum(p[0] for p in pixels)\n    sum_c = sum(p[1] for p in pixels)\n    return round(sum_r / len(pixels)), round(sum_c / len(pixels))\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.zeros_like(input_grid)\n    \n    # Find objects in the input grid\n    objects = find_objects(input_grid)\n\n    # Scatter pixels of each object along a diagonal\n    for obj in objects:\n        pixels = obj['pixels']\n        color = obj['color']\n        center_r, center_c = center_of_mass(pixels)\n\n        # Scatter the pixels diagonally\n        for i, (r, c) in enumerate(pixels):\n            new_r = center_r - len(pixels) // 2 + i\n            new_c = center_c - len(pixels) // 2 + i\n\n            if 0 <= new_r < output_grid.shape[0] and 0 <= new_c < output_grid.shape[1]:\n                  output_grid[new_r, new_c] = color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3671,
    "candidates_token_count": 666,
    "total_token_count": 4337,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.314415,
  "response_file": "002-response.json"
}