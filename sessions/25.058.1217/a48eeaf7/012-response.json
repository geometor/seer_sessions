{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid by moving gray (5) pixels one step closer to the center of the grid, either horizontally or vertically, but only if a 2x2 red (2) square is present. If no red square is present, the output is identical to the input.\n\"\"\"\n\nimport numpy as np\n\ndef find_red_square(grid):\n    # Find the top-left corner coordinates of the red square\n    rows, cols = grid.shape\n    for r in range(rows - 1):\n        for c in range(cols - 1):\n            if grid[r, c] == 2 and grid[r+1, c] == 2 and grid[r, c+1] == 2 and grid[r+1, c+1] == 2:\n                return (r, c)  # Return top-left corner\n    return None\n\ndef find_gray_pixels(grid):\n    # Find coordinates of all gray pixels\n    return np.argwhere(grid == 5)\n\ndef calculate_center(grid):\n    # Calculate the center coordinates of the grid\n    rows, cols = grid.shape\n    center_r = rows // 2\n    center_c = cols // 2\n    return (center_r, center_c)\n\ndef move_pixel(grid, row, col, center_row, center_col):\n    # Move the pixel at (row, col) one step closer to the center\n    new_grid = grid.copy()\n    \n    # only move if pixel is gray (5)\n    if new_grid[row, col] != 5:\n        return new_grid\n    \n    row_diff = abs(row - center_row)\n    col_diff = abs(col - center_col)\n    \n    if row_diff > col_diff:\n        # Move vertically\n        if row < center_row:\n            new_grid[row, col] = 0\n            new_grid[row + 1, col] = 5\n        else:\n            new_grid[row, col] = 0\n            new_grid[row - 1, col] = 5\n    elif col_diff > 0: # handles edge case where diffs are equal\n        # Move horizontally\n        if col < center_col:\n            new_grid[row, col] = 0\n            new_grid[row, col + 1] = 5\n        else:\n            new_grid[row, col] = 0\n            new_grid[row, col - 1] = 5\n            \n    return new_grid\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of the input_grid\n    output_grid = input_grid.copy()\n\n    # Find the red square\n    red_square_corner = find_red_square(input_grid)\n\n    # If no red square, return the input grid\n    if red_square_corner is None:\n        return output_grid\n\n    # Find all gray pixels\n    gray_pixels = find_gray_pixels(input_grid)\n\n    # Calculate the center of the grid\n    center_r, center_c = calculate_center(input_grid)\n\n    # Iterate through gray pixels and move them towards the center\n    for gray_r, gray_c in gray_pixels:\n        output_grid = move_pixel(output_grid, gray_r, gray_c, center_r, center_c)\n        \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8164,
    "candidates_token_count": 799,
    "total_token_count": 8963,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.001706,
  "response_file": "012-response.json"
}