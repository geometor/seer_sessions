{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Find all contiguous regions (objects) of blue (1) pixels in the input grid.\n\n2.  **Group Objects:**\n    *   **Group A:** Select the blue object whose top-left corner is the most top-left in the grid. If there's only one blue object, it belongs to Group A.\n    *   **Group B:** All remaining blue objects belong to Group B.\n\n3.  **Transform Objects:**\n    *   **Group A:** Shift the object one cell diagonally up and to the left (subtract 1 from both row and column indices) and change its color to red (2).\n    *   **Group B:**\n        * if the objects in Group B are horizontally adjacent to each other: Shift the object one cell diagonally down and to the right (add 1 to both row and column indices) and change its color to red (2).\n        * Otherwise: Shift each object in group B, one cell down, and one cell left. Change its color to red (2).\n\n4.  **Output:** Create the output grid by applying these transformations to the input grid. Leave all other pixels unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, color):\n    \"\"\"Finds contiguous regions of the specified color in the grid.\"\"\"\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n\n    def dfs(row, col, current_object):\n        \"\"\"Depth-first search to find contiguous pixels.\"\"\"\n        if (\n            row < 0\n            or row >= grid.shape[0]\n            or col < 0\n            or col >= grid.shape[1]\n            or visited[row, col]\n            or grid[row, col] != color\n        ):\n            return\n        visited[row, col] = True\n        current_object.append((row, col))\n        dfs(row + 1, col, current_object)\n        dfs(row - 1, col, current_object)\n        dfs(row, col + 1, current_object)\n        dfs(row, col - 1, current_object)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] == color and not visited[row, col]:\n                current_object = []\n                dfs(row, col, current_object)\n                objects.append(current_object)\n    return objects\n\ndef find_top_left(obj):\n    \"\"\"Returns the top-left coordinate of an object.\"\"\"\n    return min(obj, key=lambda p: (p[0], p[1]))\n\ndef are_horizontally_adjacent(obj1, obj2):\n    \"\"\"Checks if two objects are horizontally adjacent.\"\"\"\n    for r1, c1 in obj1:\n        for r2, c2 in obj2:\n            if abs(r1 - r2) <= 1 and abs(c1 - c2) == 1: # Check for adjacent columns with at most 1 off rows\n                return True\n    return False\n\ndef move_object(object_pixels, row_shift, col_shift, grid_shape):\n    \"\"\"Shifts the object pixels by the specified row and column offsets, handling bounds.\"\"\"\n    moved_pixels = []\n    for row, col in object_pixels:\n        new_row = row + row_shift\n        new_col = col + col_shift\n        if 0 <= new_row < grid_shape[0] and 0 <= new_col < grid_shape[1]:\n            moved_pixels.append((new_row, new_col))\n    return moved_pixels\n\ndef transform(input_grid):\n    # Initialize output_grid with the same values as the input_grid\n    output_grid = np.copy(input_grid)\n    grid_shape = input_grid.shape\n\n    # 1. Identify Objects\n    blue_objects = find_objects(input_grid, 1)\n\n    # 2. Group Objects\n    if not blue_objects:\n        return output_grid  # No blue objects to transform\n\n    if len(blue_objects) == 1:\n        group_a = blue_objects[0]\n        group_b = []\n    else:\n        # Find top-left-most object for Group A\n        top_left_coords = [find_top_left(obj) for obj in blue_objects]\n        group_a_index = top_left_coords.index(min(top_left_coords))\n        group_a = blue_objects[group_a_index]\n        group_b = [obj for i, obj in enumerate(blue_objects) if i != group_a_index]\n\n    # 3. Transform Objects\n    #   - Group A\n    moved_group_a = move_object(group_a, -1, -1, grid_shape)\n    for row, col in moved_group_a:\n        output_grid[row, col] = 2\n\n    #   - Group B\n    if len(group_b) > 0:\n        horizontally_adjacent = False\n\n        if len(group_b) > 1 :\n            adjacent_count = 0\n            for i in range(len(group_b)):\n                for j in range(i + 1, len(group_b)):\n                    if are_horizontally_adjacent(group_b[i], group_b[j]):\n                        adjacent_count += 1\n            if adjacent_count >= 1:\n                horizontally_adjacent = True\n\n        for obj in group_b:\n            if horizontally_adjacent:\n              moved_group_b = move_object(obj, 1, 1, grid_shape) # All to (1,1)\n            else:\n              moved_group_b = move_object(obj, 1, -1, grid_shape) # All to (1,-1)\n            for row, col in moved_group_b:\n                output_grid[row, col] = 2\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7423,
    "candidates_token_count": 1388,
    "total_token_count": 8811,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 12.921422,
  "response_file": "016-response.json"
}