import numpy as np

COLOR_MAP = {
    0: (238, 238, 238),  # white
    1: (30, 147, 255),  # blue
    2: (220, 50, 40),  # red
    3: (79, 204, 48),  # green
    4: (230, 200, 0),  # yellow
    5: (85, 85, 85),  # gray
    6: (229, 58, 163),  # magenta
    7: (230, 120, 20),  # orange
    8: (135, 216, 241),  # azure
    9: (146, 18, 49),  # maroon
}

def describe_grid(grid):
    rows, cols = grid.shape
    description = f"Grid Size: {rows}x{cols}\n"
    unique, counts = np.unique(grid, return_counts=True)
    color_counts = dict(zip(unique, counts))
    for color_code, count in color_counts.items():
        color_name = [name for name, code in COLOR_MAP.items() if code[0] == color_code][0]  # Corrected line
        description += f"Color {color_name} ({color_code}): {count} pixels\n"
    return description
  
def find_broken_vertical_line(grid, color):
    """Finds the column index and row indices of a broken vertical line of a given color."""
    rows, cols = grid.shape
    for j in range(cols):
        gray_pixels = []
        for i in range(rows):
            if grid[i, j] == color:
                gray_pixels.append(i)
        if len(gray_pixels) > 1:  # Consider it a line if there are at least two gray pixels
            return j, gray_pixels
    return None, []

def transform(input_grid):
    # Initialize output grid with a copy of the input grid
    output_grid = np.copy(input_grid)
    rows, cols = output_grid.shape

    # Find the broken vertical gray line
    col_index, row_indices = find_broken_vertical_line(input_grid, 5)
    if col_index is not None:
        # Change the color of the gray pixels to blue
        for i in row_indices:
            output_grid[i, col_index] = 1

    # Change white cells in the last three rows of the last column to red
    for i in range(max(0, rows - 3), rows):  # Ensure we don't go out of bounds
        if cols > 0 and output_grid[i, cols - 1] == 0: # make sure there is a last col
            output_grid[i, cols - 1] = 2

    return output_grid

task = task_data
train_examples = task['train']

for i, example in enumerate(train_examples):
    input_grid = np.array(example['input'])
    output_grid = np.array(example['output'])
    predicted_output = transform(input_grid)
    
    print(f"--- Example {i+1} ---")
    print("Input Description:")
    print(describe_grid(input_grid))
    print("Output Description:")
    print(describe_grid(output_grid))
    print("Predicted Output Description:")
    print(describe_grid(predicted_output))
    print("Match:", np.array_equal(output_grid, predicted_output))
    print("\n")
