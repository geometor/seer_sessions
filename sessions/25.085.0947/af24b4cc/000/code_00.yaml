task_context:
  grid_size_input: [9, 10]
  grid_size_output: [4, 5]
  input_structure: Contains 6 distinct connected components (objects) of non-white pixels, separated by white pixels. These components are spatially arranged in a 2x3 grid pattern.
  output_structure: Primarily white, with a 2x3 area of non-white pixels corresponding spatially to the input components.

objects:
  - id: input_component
    description: A connected component of non-white pixels in the input grid (using 8-way adjacency).
    properties:
      - colors: A list or set of colors present in the component.
      - pixel_coordinates: The set of (row, col) coordinates belonging to the component.
      - color_frequencies: A map of color values to their counts within the component.
      - spatial_order: Determined by the top-most, then left-most pixel coordinate.
  - id: output_pixel
    description: A single pixel in the 2x3 colored area of the output grid.
    properties:
      - color: The resulting color determined from the corresponding input component.
      - position: Coordinates (row, col) within the output grid, specifically (1,1) to (2,3).

relationships:
  - type: correspondence
    from: input_component
    to: output_pixel
    rule: The N-th input component (when sorted spatially top-to-bottom, left-to-right) determines the color of the N-th output pixel (when read row by row).

actions:
  - action: identify_components
    input: input_grid
    output: list of input_component objects
    description: Find all connected components of non-white pixels using 8-way adjacency.
  - action: sort_components
    input: list of input_component objects
    output: sorted list of input_component objects
    description: Sort components based on their top-most, then left-most pixel coordinate.
  - action: determine_dominant_color
    input: input_component
    output: color_value
    description: |
      Calculate color frequencies within the component.
      Find the maximum frequency.
      Identify colors with this maximum frequency.
      If one color, select it.
      If multiple colors (tie), select the one whose pixel appears first when scanning the component's pixels top-to-bottom, then left-to-right.
  - action: construct_output
    input: list of color_values (one per component, in order)
    output: output_grid
    description: Create a 4x5 white grid. Place the determined colors into positions (1,1), (1,2), (1,3), (2,1), (2,2), (2,3) according to the sorted component order.
