{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nReceives an input grid.\nIdentifies the contiguous block of rows starting from the top (row 0) that contain at least one non-white pixel (colors 1-9). Let the height of this block be 'k'.\nCreates an output grid initially as a copy of the input grid.\nCopies the rows of the identified top block from the input grid, in reverse order, to the bottom 'k' rows of the output grid. Specifically, input row 'i' (where 0 <= i < k) is copied to output row 'H - 1 - i', where 'H' is the total height of the grid.\n\"\"\"\n\ndef _find_top_block_height(grid):\n    \"\"\"\n    Finds the height of the block of rows starting from the top\n    that contain at least one non-white pixel.\n    \"\"\"\n    height = grid.shape[0]\n    top_block_height = 0\n    for r in range(height):\n        # Check if the row contains any non-white pixel\n        if np.any(grid[r] != 0):\n            top_block_height = r + 1\n        else:\n            # First all-white row encountered, stop searching\n            break\n    # Handle case where the entire grid might be non-white\n    # In this case, the loop completes, and top_block_height correctly reflects the grid height if the last row was non-white,\n    # or the index of the first all-white row if one existed.\n    # If the first row itself is all white, height will be 0, which is correct.\n    return top_block_height\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by mirroring the top non-white block of rows\n    to the bottom of the grid, while keeping the original block at the top.\n\n    Args:\n        input_grid (list): A list of lists representing the input grid.\n\n    Returns:\n        list: A list of lists representing the transformed output grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    H, W = input_np.shape\n\n    # Initialize output_grid as a copy of the input\n    output_np = np.copy(input_np)\n\n    # Find the height of the top block (k)\n    k = _find_top_block_height(input_np)\n\n    # If k > 0, there is a block to mirror\n    if k > 0:\n        # Iterate through the rows of the top block (indices 0 to k-1)\n        for i in range(k):\n            # Get the source row from the input grid\n            source_row = input_np[i]\n            # Determine the destination row index in the output grid\n            # This reverses the order of the source rows for the bottom placement\n            destination_row_index = H - 1 - i\n            # Copy the source row to the destination row in the output grid\n            output_np[destination_row_index] = source_row\n\n    # Convert the result back to a list of lists\n    output_grid = output_np.tolist()\n\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2749,
    "candidates_token_count": 735,
    "total_token_count": 3484,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.815264
}