Task: Extend horizontal patterns within rows.

Input_Global:
  - Property: Grid representing an image.
  - Property: Contains rows composed of pixels (colors 0-9).
  - Property: Width varies per example (7, 6, 8).
  - Property: Height is consistent within examples (5).

Output_Global:
  - Property: Grid derived from the input.
  - Property: Height matches the input grid height.
  - Property: Width is exactly double the input grid width.
  - Property: Color palette matches the input grid color palette.

Transformation: Operates row by row.

Row_Types:
  - Type: Background Row
    - Condition: All pixels in the row are white (0).
    - Action: Create an output row of double width filled entirely with white (0).
  - Type: Pattern Row
    - Condition: Contains at least one non-white pixel.
    - Objects:
        - Horizontal Pattern: The shortest sequence of pixels (P) starting from the first pixel, whose repetition generates the entire input row.
          - Property: Length (p) is between 1 and the row width (w).
          - Identification: Find smallest p such that `row[i] == row[i % p]` for all `0 <= i < w`.
    - Action: Create an output row of double width (`2 * w`).
    - Action: Fill the output row by repeating the identified Horizontal Pattern (P). The pixel at output column `j` is `P[j % p]`.

Examples_Analysis:
  - Example 1 (5x7 -> 5x14):
    - Row 2 Pattern: [red, green, green] (p=3). 7 pixels input, 14 pixels output generated by repeating the pattern. Concatenation failed (5 pixels off).
  - Example 2 (5x6 -> 5x12):
    - Row 1/2 Pattern: [red, azure] (p=2). Input width (6) is a multiple of pattern length (2). Concatenation happened to match pattern repetition. Match.
  - Example 3 (5x8 -> 5x16):
    - Row 2 Pattern: [blue, red, red] (p=3). 8 pixels input, 16 pixels output generated by repeating the pattern.
    - Row 3 Pattern: [red, blue, red] (p=3). 8 pixels input, 16 pixels output generated by repeating the pattern. Concatenation failed (11 pixels off).