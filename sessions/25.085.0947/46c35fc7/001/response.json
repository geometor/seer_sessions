{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nThe transformation identifies all 3x3 subgrids within the input grid that contain at least one pixel color different from orange (7). \nFor each such 3x3 subgrid found, the 8 pixels forming its border are rotated 90 degrees counter-clockwise around the center pixel of the subgrid. \nThe center pixel of the 3x3 subgrid remains unchanged. Pixels outside of any identified 3x3 subgrid also remain unchanged. The output grid has the same dimensions as the input grid.\n\"\"\"\n\ndef rotate_3x3_border_ccw(subgrid):\n    \"\"\"\n    Rotates the 8 border cells of a 3x3 numpy array 90 degrees counter-clockwise.\n    \n    Args:\n        subgrid (np.ndarray): A 3x3 numpy array.\n        \n    Returns:\n        np.ndarray: A new 3x3 numpy array with the border rotated.\n    \"\"\"\n    # Coordinates of the border cells relative to the 3x3 subgrid, clockwise\n    border_coords = [\n        (0, 0), (0, 1), (0, 2), (1, 2), (2, 2), (2, 1), (2, 0), (1, 0)\n    ]\n    \n    # Extract border values\n    border_values = np.array([subgrid[r, c] for r, c in border_coords])\n    \n    # Rotate values 2 positions counter-clockwise (equivalent to a left shift of 2)\n    # A 90-degree CCW rotation moves the value at index i to index (i - 2) % 8.\n    # np.roll with a shift of -2 achieves this.\n    rotated_values = np.roll(border_values, -2) \n    \n    # Create the new 3x3 grid, starting with a copy\n    new_subgrid = np.copy(subgrid)\n    \n    # Place rotated values back onto the border\n    for i, (r, c) in enumerate(border_coords):\n        new_subgrid[r, c] = rotated_values[i]\n        \n    # The center subgrid[1, 1] is already correct due to np.copy\n    return new_subgrid\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule: finds 3x3 subgrids with non-background colors\n    and rotates their borders 90 degrees counter-clockwise.\n\n    Args:\n        input_grid (list[list[int]]): The input grid as a list of lists.\n\n    Returns:\n        list[list[int]]: The transformed grid as a list of lists.\n    \"\"\"\n    # Convert input to numpy array for easier slicing and manipulation\n    input_np = np.array(input_grid, dtype=int)\n    # Initialize output grid as a copy of the input\n    output_np = np.copy(input_np)\n    # Get grid dimensions\n    H, W = input_np.shape\n    # Define the background color\n    background_color = 7\n\n    # Iterate through all possible top-left corners (r, c) for a 3x3 subgrid\n    # The range ends at H-2 and W-2 to ensure a full 3x3 subgrid fits\n    for r in range(H - 2):\n        for c in range(W - 2):\n            # Extract the 3x3 subgrid from the *original* input grid\n            subgrid = input_np[r:r+3, c:c+3]\n\n            # Check if the subgrid contains any cell value other than the background color\n            if np.any(subgrid != background_color):\n                # If it does, apply the 90-degree counter-clockwise rotation to its border\n                rotated_subgrid = rotate_3x3_border_ccw(subgrid)\n                # Place the resulting rotated subgrid into the corresponding location in the output grid\n                # Modifications are made to the output_np array\n                output_np[r:r+3, c:c+3] = rotated_subgrid\n\n    # Convert the final numpy array back to a list of lists for the expected output format\n    return output_np.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1694,
    "candidates_token_count": 975,
    "total_token_count": 2669,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 184.643671
}