task_description: Find a specific rectangular subgrid within the input grid and output it.

definitions:
  component: A contiguous group of non-white (non-zero color) pixels, connected horizontally or vertically (4-connectivity).
  bounding_box: The smallest rectangle enclosing all pixels of a component, defined by (min_row, max_row, min_col, max_col).
  subgrid: The portion of the input grid within a bounding box.
  dense_subgrid: A subgrid extracted from a component's bounding box that contains *no* white (zero color) pixels.
  area: The number of pixels in a subgrid (height * width).

steps:
  1. Identify_Components: Find all connected components of non-white pixels in the input grid.
  2. Analyze_Components: For each component:
     a. Calculate its bounding_box.
     b. Extract the corresponding subgrid from the input grid.
     c. Check if the extracted subgrid is a dense_subgrid.
     d. If it is dense, calculate its area.
  3. Filter_Dense: Collect all dense_subgrids found.
  4. Select_Output: From the collection of dense_subgrids, select the one with the minimum area.
  5. Handle_Ties: (Implicitly handled by current code - first encountered is chosen). The examples suggest uniqueness or that tie-breaking isn't critical, *except* potentially Example 2 highlights an issue with the 'minimum area' rule itself.
  6. Output: Return the selected dense_subgrid.

observations:
  - All components identified in the examples perfectly fill their bounding boxes, making the distinction potentially irrelevant for this task.
  - All bounding boxes corresponding to components are also dense (contain no white pixels).
  - The rule "select the dense subgrid with minimum area" works for Example 1 and 3.
  - This rule fails for Example 2, where the expected output corresponds to a dense subgrid with area 20, but another dense subgrid with a smaller area (16) exists.
  - Alternative rules considered (maximum area, positional selection) do not consistently work across all examples.