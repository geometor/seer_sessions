{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentify all contiguous blocks of non-white (non-zero) pixels using 4-connectivity (horizontal/vertical adjacency). \nFor each block, determine its minimal bounding box. \nFind the unique block where the subgrid defined by its bounding box contains *only* non-white pixels (i.e., has a density of 1.0). \nThe output is this subgrid.\n\"\"\"\n\ndef find_connected_components(grid):\n    \"\"\"\n    Finds all connected components of non-zero pixels in the grid.\n    Uses 4-connectivity (horizontal/vertical).\n\n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        list: A list of components, where each component is a list of (row, col) tuples.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    components = []\n\n    for r in range(rows):\n        for c in range(cols):\n            # Check if the pixel is non-zero and hasn't been visited yet\n            if grid[r, c] != 0 and not visited[r, c]:\n                # Start BFS to find all connected pixels in this component\n                component = []\n                q = deque([(r, c)])\n                visited[r, c] = True\n                \n                while q:\n                    row, col = q.popleft()\n                    component.append((row, col))\n\n                    # Check neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        # Check bounds and if neighbor is non-zero and unvisited\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] != 0 and not visited[nr, nc]:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n                            \n                # Add the found component to the list\n                components.append(component)\n                \n    return components\n\ndef get_bounding_box(component):\n    \"\"\"\n    Calculates the bounding box (min_row, max_row, min_col, max_col) for a component.\n\n    Args:\n        component (list): A list of (row, col) tuples representing the component.\n\n    Returns:\n        tuple: (min_row, max_row, min_col, max_col) or None if component is empty.\n    \"\"\"\n    if not component:\n        return None\n    # Extract all row and column indices\n    rows = [r for r, c in component]\n    cols = [c for r, c in component]\n    # Find the min and max row and column indices\n    min_row, max_row = min(rows), max(rows)\n    min_col, max_col = min(cols), max(cols)\n    return min_row, max_row, min_col, max_col\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by finding and extracting the unique dense subgrid.\n\n    Args:\n        input_grid (list of lists): The input grid represented as a list of lists.\n\n    Returns:\n        list of lists: The extracted subgrid, or an empty list if no such subgrid is found.\n    \"\"\"\n    # Convert input list of lists to a numpy array for efficient processing\n    grid = np.array(input_grid, dtype=int)\n    \n    # Handle empty grid case\n    if grid.size == 0:\n        return []\n\n    # Find all connected components (blocks) of non-zero pixels\n    components = find_connected_components(grid)\n\n    # Initialize variable to store the target subgrid\n    target_subgrid_list = []\n\n    # Iterate through each found component\n    for component in components:\n        if not component:\n            continue\n\n        # Determine the bounding box for the current component\n        bbox = get_bounding_box(component)\n        min_row, max_row, min_col, max_col = bbox\n\n        # Extract the subgrid corresponding to the bounding box\n        # Numpy slicing is exclusive of the end index, so add 1 to max indices\n        subgrid = grid[min_row : max_row + 1, min_col : max_col + 1]\n\n        # Check if all pixels within this bounding box subgrid are non-zero (density is 1.0)\n        if np.all(subgrid != 0):\n            # If density is 1.0, this is our target subgrid\n            # Convert the numpy subgrid back to a list of lists\n            target_subgrid_list = subgrid.tolist()\n            # Assume uniqueness based on examples and break the loop\n            break \n\n    # Return the found target subgrid\n    return target_subgrid_list\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1812,
    "candidates_token_count": 1133,
    "total_token_count": 2945,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 46.888625
}