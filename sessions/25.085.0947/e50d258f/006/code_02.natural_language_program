# Natural Language Program

## Goal:
Identify a specific rectangular region within the input grid based on connected non-white pixels and output that region.

## Steps:
1.  **Find Components:** Locate all distinct groups of connected non-white (color 1-9) pixels in the input grid. Use 4-way adjacency (pixels sharing an edge are connected).
2.  **Determine Bounding Boxes:** For each identified component, find the smallest rectangular bounding box that encloses all pixels belonging to that component.
3.  **Extract Subgrids:** For each bounding box, extract the corresponding rectangular subgrid from the input grid.
4.  **Filter for Density:** Examine each extracted subgrid. Keep only those subgrids that are "dense," meaning they contain absolutely no white pixels (pixels with value 0).
5.  **Identify Smallest Area:** Among the dense subgrids identified in the previous step, find the one(s) that have the smallest area (area = height * width).
6.  **Select Final Subgrid:**
    *   If there is only one dense subgrid with the minimum area, select that subgrid.
    *   If there are multiple dense subgrids tied for the minimum area, select the one whose bounding box appears earliest in the grid (e.g., the one whose top-left corner has the smallest row index, and then the smallest column index in case of a further tie).
7.  **Output:** The selected dense subgrid is the final output. If no dense subgrids are found in step 4, the output might be considered empty or undefined based on task constraints (e.g., return an empty grid).

## Note:
This program accurately describes the transformation for Examples 1 and 3. However, for Example 2, this logic selects a subgrid (area 16) different from the expected output (area 20). This suggests an additional rule or a modification to the selection criteria (step 5 or 6) might be needed to fully capture the task's logic, but the exact modification is not yet clear from the provided examples.