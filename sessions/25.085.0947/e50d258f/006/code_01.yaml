# YAML Facts Documentation

# Common Objects & Properties:
# - input_grid: 2D array of pixels (integers 0-9).
# - output_grid: 2D array of pixels (integers 0-9).
# - pixel: An integer value (0-9) at a specific coordinate (row, col).
# - white_pixel: Pixel value 0.
# - non_white_pixel: Pixel value 1-9.
# - component: A set of connected non_white_pixels (using 4-way adjacency).
# - bounding_box: The minimal rectangle (min_row, max_row, min_col, max_col) enclosing a component.
# - subgrid: A rectangular slice of a grid.
# - bbox_subgrid: The subgrid defined by a component's bounding_box in the input_grid.
# - dense_subgrid: A bbox_subgrid that contains no white_pixels.
# - area: The number of pixels in a subgrid (height * width).

# Example-Specific Observations (Based on "Minimum Area" Hypothesis):

# Example 1:
#   - Input contains 3 components (A, B, C).
#   - Bbox subgrids for A, B, and C are all dense.
#   - Areas: Area(A)=20, Area(B)=35, Area(C)=9.
#   - Minimum area = 9 (Subgrid C).
#   - Action: Select the dense_subgrid with the minimum area.
#   - Output: Subgrid C. (Matches expectation)

# Example 2:
#   - Input contains 3 components (A, B, C).
#   - Bbox subgrids for A, B, and C are all dense.
#   - Areas: Area(A)=20, Area(B)=16, Area(C)=24.
#   - Minimum area = 16 (Subgrid B).
#   - Action (per hypothesis): Select the dense_subgrid with the minimum area (Subgrid B).
#   - Output: Subgrid A. (Mismatch with expectation - requires refinement)

# Example 3:
#   - Input contains 2 components (A, B).
#   - Bbox subgrids for A and B are both dense.
#   - Areas: Area(A)=24, Area(B)=24.
#   - Minimum area = 24 (Tie between A and B).
#   - Tie-breaking (implicit first-found): Subgrid A.
#   - Action: Select the dense_subgrid with the minimum area, using positional tie-breaking if needed.
#   - Output: Subgrid A. (Matches expectation)

# Actions & Transformations:
# 1. Identify: Find all connected components of non_white_pixels.
# 2. Calculate: Determine the bounding_box for each component.
# 3. Extract: Get the bbox_subgrid from the input_grid for each component.
# 4. Filter: Keep only the bbox_subgrids that are dense_subgrids (contain no white_pixels).
# 5. Calculate: Determine the area for each dense_subgrid.
# 6. Select: Choose the dense_subgrid with the minimum area.
#    - Tie-breaking: If multiple subgrids share the minimum area, select the one encountered first during component processing (or apply a consistent positional rule like top-most, then left-most).
# 7. Output: Return the selected dense_subgrid.