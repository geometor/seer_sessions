task_description: Processes a grid, changing the color of specific pixels based on the color of their cardinal neighbors in the original input grid.

definitions:
  - name: pixel
    type: grid cell with an integer color value
  - name: neighbor
    type: adjacent pixel (up, down, left, or right)
  - name: input_grid
    type: 2D array of pixels
  - name: output_grid
    type: 2D array of pixels, same dimensions as input_grid
  - name: GREEN
    value: 3
  - name: RED
    value: 2
  - name: AZURE
    value: 8
  - name: WHITE
    value: 0

rules:
  - name: Initialization
    description: The output grid starts as a copy of the input grid.
  - name: Green Pixel Transformation
    condition: A pixel in the input_grid is GREEN and has at least one cardinal neighbor (up, down, left, right) that is RED.
    action: Change the color of the corresponding pixel in the output_grid to AZURE.
  - name: Red Pixel Transformation
    condition: A pixel in the input_grid is RED and has at least one cardinal neighbor (up, down, left, right) that is GREEN.
    action: Change the color of the corresponding pixel in the output_grid to WHITE.
  - name: Default
    condition: A pixel does not meet the conditions for Green or Red Pixel Transformation.
    action: The corresponding pixel in the output_grid retains its original color from the input_grid.

evaluation_logic: All transformations are based solely on the state of the input_grid. Changes are determined for all pixels before being applied to generate the final output_grid (i.e., changes happen simultaneously, not sequentially within the grid).

example_summary:
  - example: 1
    input_shape: (7, 6)
    output_shape: (7, 6)
    input_colors: {'white': 34, 'red': 3, 'green': 3, 'gray': 2}
    output_colors: {'white': 36, 'red': 1, 'green': 1, 'gray': 2, 'azure': 2}
    transformations: 2 Green -> Azure, 2 Red -> White
  - example: 2
    input_shape: (3, 3)
    output_shape: (3, 3)
    input_colors: {'white': 6, 'red': 1, 'green': 1, 'gray': 1}
    output_colors: {'white': 7, 'gray': 1, 'azure': 1}
    transformations: 1 Green -> Azure, 1 Red -> White
  - example: 3
    input_shape: (7, 7)
    output_shape: (7, 7)
    input_colors: {'white': 38, 'red': 4, 'green': 5, 'gray': 2}
    output_colors: {'white': 41, 'red': 1, 'green': 2, 'gray': 2, 'azure': 3}
    transformations: 3 Green -> Azure, 3 Red -> White
    note: The diagonal-only adjacent Red/Green pair at input[0,5]/input[1,6] did NOT change color, confirming the cardinal adjacency requirement.