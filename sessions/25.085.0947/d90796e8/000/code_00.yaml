Task: Color transformation based on adjacency.

Input_Grid:
  - Type: 2D Array of integers (pixels)
  - Colors_Present: White(0), Red(2), Green(3), Gray(5)

Output_Grid:
  - Type: 2D Array of integers (pixels)
  - Dimensions: Same as Input_Grid
  - Colors_Present: White(0), Red(2), Green(3), Azure(8), Gray(5)

Objects:
  - Type: Individual Pixels
  - Key_Colors_Input: Green(3), Red(2)
  - Key_Colors_Output: Azure(8), White(0)
  - Static_Colors: Gray(5), and any Green(3)/Red(2) not meeting adjacency criteria.

Relationships:
  - Adjacency: Pixels are considered adjacent if they share an edge or a corner (orthogonal or diagonal).
  - Trigger: Adjacency between a Green(3) pixel and a Red(2) pixel in the input grid.

Actions:
  - Transformation_Rule_1:
    - Condition: A pixel is Green(3) AND has at least one adjacent Red(2) pixel in the input grid.
    - Action: The pixel becomes Azure(8) in the output grid.
  - Transformation_Rule_2:
    - Condition: A pixel is Red(2) AND has at least one adjacent Green(3) pixel in the input grid.
    - Action: The pixel becomes White(0) in the output grid.
  - No_Change_Rule:
    - Condition: A pixel does not meet the conditions for Transformation_Rule_1 or Transformation_Rule_2.
    - Action: The pixel retains its original color in the output grid.

Process:
  - The transformation rules are applied based on the state of the *input* grid to generate the *output* grid.
  - Each pixel's potential transformation is evaluated independently based on its color and its neighbors' colors in the input grid.