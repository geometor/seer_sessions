{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid based on the cardinal adjacency of Green (3) and Red (2) pixels.\n1. If a pixel is Green (3) and has at least one cardinal (up, down, left, right) neighbor that is Red (2) in the input grid, it becomes Azure (8) in the output grid.\n2. If a pixel is Red (2) and has at least one cardinal (up, down, left, right) neighbor that is Green (3) in the input grid, it becomes White (0) in the output grid.\n3. All other pixels retain their original color.\nThe evaluation is based solely on the input grid state; changes are applied simultaneously to create the output grid.\n\"\"\"\n\nimport numpy as np\n\n# Define color constants for clarity\nGREEN = 3\nRED = 2\nAZURE = 8\nWHITE = 0\n\ndef _has_cardinal_neighbor_with_color(grid, r, c, target_color):\n    \"\"\"\n    Checks if any of the 4 cardinal neighbors (up, down, left, right) \n    of the cell at (r, c) in the grid has the specified target_color. \n    Handles boundary conditions.\n    \n    Args:\n        grid (np.array): The input grid.\n        r (int): Row index of the cell.\n        c (int): Column index of the cell.\n        target_color (int): The color to look for in the neighbors.\n\n    Returns:\n        bool: True if at least one cardinal neighbor has the target_color, False otherwise.\n    \"\"\"\n    rows, cols = grid.shape\n    # Define cardinal directions (dr, dc) for row and column changes\n    cardinal_directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] # right, left, down, up\n    \n    # Iterate through the cardinal directions\n    for dr, dc in cardinal_directions:\n        # Calculate neighbor coordinates\n        nr, nc = r + dr, c + dc\n        \n        # Check if the neighbor is within the grid boundaries\n        if 0 <= nr < rows and 0 <= nc < cols:\n            # Check if the neighbor has the target color\n            if grid[nr, nc] == target_color:\n                return True\n                \n    # No cardinal neighbor with the target color was found\n    return False\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rules based on Green-Red cardinal adjacency to the input grid.\n\n    Args:\n        input_grid (list of lists): The input grid represented as a 2D list of integers.\n\n    Returns:\n        list of lists: The transformed output grid.\n    \"\"\"\n    # Convert input list of lists to a NumPy array for easier processing\n    input_np = np.array(input_grid, dtype=int)\n    rows, cols = input_np.shape\n    \n    # Initialize the output grid as a copy of the input grid. \n    # Pixels that don't meet transformation conditions will retain their original color.\n    output_grid = input_np.copy()\n\n    # Iterate through each pixel (cell) of the input grid\n    for r in range(rows):\n        for c in range(cols):\n            # Get color from the original input grid\n            current_color = input_np[r, c] \n\n            # Apply Green Pixel Transformation rule\n            if current_color == GREEN:\n                # Check for cardinal Red neighbors in the input grid\n                if _has_cardinal_neighbor_with_color(input_np, r, c, RED):\n                    # Update the corresponding pixel in the output grid\n                    output_grid[r, c] = AZURE \n\n            # Apply Red Pixel Transformation rule\n            elif current_color == RED:\n                # Check for cardinal Green neighbors in the input grid\n                if _has_cardinal_neighbor_with_color(input_np, r, c, GREEN):\n                    # Update the corresponding pixel in the output grid\n                    output_grid[r, c] = WHITE \n\n            # No transformation needed for other colors, they remain as copied initially\n\n    # Convert the final NumPy array back to a list of lists for the expected output format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5859,
    "candidates_token_count": 962,
    "total_token_count": 6821,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.267916
}