task_elements:
  - name: input_grid
    type: grid
    properties:
      height: 13
      width: 4
      pixels: [white (0), red (2), orange (7), magenta (6)]
      structure: contains a horizontal separator line
  - name: separator_line
    type: line
    properties:
      color: orange (7)
      orientation: horizontal
      location: row index 6 (7th row)
      function: divides input_grid into two subgrids
  - name: upper_subgrid
    type: grid
    properties:
      source: input_grid rows 0-5
      height: 6
      width: 4
      pixels: [white (0), red (2)]
  - name: lower_subgrid
    type: grid
    properties:
      source: input_grid rows 7-12
      height: 6
      width: 4
      pixels: [white (0), magenta (6)]
  - name: output_grid
    type: grid
    properties:
      height: 6
      width: 4
      pixels: [white (0), azure (8)]
      derivation: result of comparing upper_subgrid and lower_subgrid

transformation:
  operation: pixel_wise_comparison
  operands: [upper_subgrid, lower_subgrid]
  output: output_grid
  rule:
    for_each: pixel position (row `i`, column `j`) from (0,0) to (5,3)
    condition: Check if the pixel at `(i,j)` in `upper_subgrid` is white (0) AND the pixel at `(i,j)` in `lower_subgrid` is white (0).
    action_if_true: Set the pixel at `(i,j)` in `output_grid` to azure (8).
    action_if_false: Set the pixel at `(i,j)` in `output_grid` to white (0).

relationships:
  - type: spatial
    entities: [input_grid, separator_line, upper_subgrid, lower_subgrid]
    details: separator_line divides input_grid; upper_subgrid is above separator; lower_subgrid is below separator.
  - type: correspondence
    entities: [upper_subgrid, lower_subgrid, output_grid]
    details: Pixel at (i,j) in output_grid depends on pixels at (i,j) in upper_subgrid and lower_subgrid. Dimensions are identical.