{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransforms the input grid based on the following rules:\n1. Identify all orange (7) pixels in the input grid as \"source\" pixels.\n2. Find the maximum row index (`max_r_source`) among all source pixels.\n3. For each pixel location (tr, tc) in the output grid:\n    a. Calculate the Manhattan distance `d = |tr - r_s| + |tc - c_s|` to every source pixel (r_s, c_s).\n    b. Find the minimum Manhattan distance (`min_d`) and the row index (`r_s_for_min_d`) of a source pixel that yields this minimum distance. If multiple sources are equidistant and minimal, use the one encountered first.\n    c. Calculate the maximum allowed distance for coloring: `max_d_allowed = max_r_source - r_s_for_min_d`.\n    d. If `min_d` is less than or equal to `max_d_allowed`:\n        - If `min_d` is even, set the output pixel at (tr, tc) to orange (7).\n        - If `min_d` is odd, set the output pixel at (tr, tc) to azure (8).\n    e. Otherwise (if `min_d > max_d_allowed`), set the output pixel at (tr, tc) to white (0).\n4. The resulting grid is the final output.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the pattern generation transformation to the input grid.\n\n    Args:\n        input_grid (list of lists or np.ndarray): The input grid with integer color codes.\n\n    Returns:\n        np.ndarray: The transformed output grid.\n    \"\"\"\n    # Convert input to numpy array for easier handling\n    input_np = np.array(input_grid, dtype=int)\n    height, width = input_np.shape\n\n    # Initialize output_grid with white (0)\n    output_grid = np.zeros_like(input_np)\n\n    # 1. Identify source pixels (color 7)\n    source_coords = np.argwhere(input_np == 7)\n\n    # Handle case with no source pixels\n    if source_coords.shape[0] == 0:\n        return output_grid # Return the all-white grid\n\n    # 2. Find the maximum row index among source pixels\n    max_r_source = np.max(source_coords[:, 0])\n\n    # 3. Iterate through each pixel location in the grid\n    for tr in range(height):\n        for tc in range(width):\n            min_d = float('inf')\n            r_s_for_min_d = -1\n\n            # 3a. Calculate distances to all source pixels\n            # 3b. Find minimum distance and corresponding source row\n            for r_s, c_s in source_coords:\n                d = abs(tr - r_s) + abs(tc - c_s)\n                if d < min_d:\n                    min_d = d\n                    r_s_for_min_d = r_s\n                # If distances are equal, we implicitly keep the first one found,\n                # which matches the rule \"use the one encountered first\".\n\n            # Ensure a source was actually found for this pixel\n            # (This should always happen if source_coords is not empty,\n            # but check `r_s_for_min_d` to be safe)\n            if r_s_for_min_d != -1:\n                # 3c. Calculate the maximum allowed distance\n                max_d_allowed = max_r_source - r_s_for_min_d\n\n                # 3d. Apply coloring rule based on min_d and max_d_allowed\n                if min_d <= max_d_allowed:\n                    if min_d % 2 == 0:\n                        output_grid[tr, tc] = 7 # orange\n                    else:\n                        output_grid[tr, tc] = 8 # azure\n                # 3e. Else: pixel remains white (0), already initialized\n\n    return output_grid.tolist() # Return as list of lists if required by spec\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2913,
    "candidates_token_count": 964,
    "total_token_count": 3877,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.375045
}