Task: Replace background based on a row-dependent pattern.

Input_Grid:
  - Properties:
      - Mostly 'white' (0) pixels.
      - Contains a single 'blue' (1) pixel object.
  - Objects:
      - Name: AnchorPixel
        Color: 'blue' (1)
        Position: Fixed at (height - 1, 0).
      - Name: Background
        Color: 'white' (0)
        Position: All other cells.
  - Dimensions:
      - Height: Variable (e.g., 10 in examples)
      - Width: Variable (e.g., 2, 3, 4 in examples)

Output_Grid:
  - Properties:
      - Same dimensions as the input grid.
      - Contains only 'azure' (8) and 'blue' (1) pixels.
      - Exactly one 'blue' pixel per row.
  - Objects:
      - Name: PatternPixels
        Color: 'blue' (1)
        Position: One pixel per row, column determined by a pattern.
      - Name: FillPixels
        Color: 'azure' (8)
        Position: All cells not occupied by PatternPixels.

Transformation_Rule:
  - Action: Replace 'white' pixels and determine 'blue' positions.
  - Pattern:
      - Type: Zigzag column selection per row.
      - Dependency: Row index (r), Grid width (W).
      - Sequence: Define a sequence `S = [0, 1, ..., W-1] + [W-2, ..., 1]`. Length is `L = 2*W - 2`. (Assumes W >= 2).
      - Calculation: For each row `r` (from 0 to height-1):
          - Calculate reverse row index `k = (height - 1) - r`.
          - Calculate sequence index `idx = k % L`.
          - Determine the column for the 'blue' pixel: `blue_col = S[idx]`.
      - Output assignment:
          - Set pixel `(r, blue_col)` to 'blue' (1).
          - Set all other pixels in row `r` to 'azure' (8).
  - Edge Case:
      - If Width (W) is 1, the transformation rule based on the sequence is undefined. The examples provided only show W >= 2. Assuming W >= 2 is required for this pattern. (If W=1, perhaps the output mirrors the input or follows a simpler rule like keeping blue as blue and changing white to azure).

Relationships:
  - The position of the 'blue' pixel in each output row `r` is calculated based on `r`, the grid height `H`, and the grid width `W`.
  - The original 'blue' pixel's position `(H-1, 0)` consistently becomes 'blue' in the output according to the pattern calculation (`k=0`, `idx=0`, `S[0]=0`).