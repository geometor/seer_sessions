{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\ndef find_non_white_pixels(grid):\n    \"\"\"Finds all non-white pixels and returns their (row, col, color) sorted.\"\"\"\n    non_white_pixels = []\n    height, width = grid.shape\n    for r in range(height):\n        for c in range(width):\n            color = grid[r, c]\n            if color != 0:\n                non_white_pixels.append((r, c, color))\n    # Sort by row, then by column\n    non_white_pixels.sort()\n    return non_white_pixels\n\ndef transform(input_grid):\n    \"\"\"\n    Draws 'L' shapes originating from non-white pixels in the input grid.\n    Each 'L' shape extends horizontally to the right edge and vertically\n    down from the right edge to the bottom edge. Shapes are drawn in\n    top-to-bottom, left-to-right order based on the source pixel,\n    with later shapes overwriting earlier ones in case of overlap.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    \n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_np)\n    \n    # Get grid dimensions\n    height, width = input_np.shape\n\n    # Find and sort all non-white source pixels\n    source_pixels = find_non_white_pixels(input_np)\n\n    # Iterate through sorted source pixels and draw 'L' shapes\n    for r, c, color in source_pixels:\n        # Draw horizontal segment: from (r, c) to (r, width-1)\n        output_grid[r, c:width] = color\n        \n        # Draw vertical segment: from (r, width-1) down to (height-1, width-1)\n        # Note: The horizontal segment already colored (r, width-1), \n        # so the vertical segment effectively starts from (r, width-1) \n        # even if we iterate from row r.\n        output_grid[r:height, width-1] = color\n\n    # Convert back to list of lists for the standard ARC format if needed,\n    # but returning a numpy array is often acceptable.\n    return output_grid.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2860,
    "candidates_token_count": 537,
    "total_token_count": 3397,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 7.980581
}