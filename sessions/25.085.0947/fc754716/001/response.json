{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nIdentify the color (C) of the single non-white pixel in the input grid.\nCreate an output grid of the same dimensions as the input.\nFill the border pixels (top row, bottom row, leftmost column, rightmost column) of the output grid with color C.\nFill all interior pixels (if any) of the output grid with white (0).\n\"\"\"\n\ndef find_non_background_color(grid, background_color=0):\n    \"\"\"\n    Finds the first color in the grid that is not the background_color.\n    Assumes there is exactly one such color.\n    \"\"\"\n    unique_colors = np.unique(grid)\n    for color in unique_colors:\n        if color != background_color:\n            return color\n    # Should not happen based on task description, but return background as fallback\n    return background_color \n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by finding the single non-white pixel's color\n    and creating a frame of that color around the border of an output grid\n    of the same dimensions, filling the interior with white.\n    \"\"\"\n    input_np = np.array(input_grid, dtype=int)\n    height, width = input_np.shape\n\n    # Find the color of the single non-white pixel\n    frame_color = find_non_background_color(input_np, 0)\n    \n    # Initialize output_grid with white (0)\n    output_grid = np.zeros((height, width), dtype=int)\n\n    # Fill the border with the frame_color\n    # Fill top row\n    if height > 0:\n        output_grid[0, :] = frame_color\n    # Fill bottom row\n    if height > 1:\n        output_grid[height - 1, :] = frame_color\n    # Fill left column\n    if width > 0:\n        output_grid[:, 0] = frame_color\n    # Fill right column\n    if width > 1:\n        output_grid[:, width - 1] = frame_color\n        \n    # Interior is already filled with 0 (white) due to initialization\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2134,
    "candidates_token_count": 506,
    "total_token_count": 2640,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 8.308212
}