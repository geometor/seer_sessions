{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List\n\n\"\"\"\nChange pixel colors based on their Manhattan distance from a single unique white pixel.\n\n1. Identify the coordinates (r0, c0) of the unique white (0) pixel in the input grid.\n2. Identify the background color (bg_color) by finding the color of any pixel that is not white (0).\n3. Create a new output grid with the same dimensions as the input grid.\n4. Iterate through each pixel (r, c) in the grid.\n5. Calculate the Manhattan distance d = |r - r0| + |c - c0|.\n6. If d is even, set the output pixel (r, c) to white (0).\n7. If d is odd, set the output pixel (r, c) to the background color (bg_color).\n8. Return the completed output grid.\n\"\"\"\n\ndef find_unique_pixel(grid: np.ndarray, color: int) -> tuple[int, int]:\n    \"\"\"Finds the coordinates of the unique pixel with the specified color.\"\"\"\n    coords = np.argwhere(grid == color)\n    if coords.shape[0] != 1:\n        # This case should ideally not happen based on the task description\n        # but handle defensively. If multiple or no white pixels, raise error or return a default?\n        # For now, assume exactly one exists as per perception.\n        raise ValueError(f\"Expected exactly one pixel with color {color}, found {coords.shape[0]}\")\n    return tuple(coords[0])\n\ndef get_background_color(grid: np.ndarray, exception_color: int) -> int:\n    \"\"\"Finds the color that is not the exception_color. Assumes grid has at least one other color.\"\"\"\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] != exception_color:\n                return grid[r, c]\n    # This case should also not happen if the input grid always has a background.\n    # If the grid only contains the exception_color, what should background be?\n    # Based on examples, there's always a background color different from white.\n    raise ValueError(f\"Could not find a background color different from {exception_color}\")\n\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transforms the input grid based on Manhattan distance parity from the unique white pixel.\n    Pixels at even distance become white (0), pixels at odd distance become the background color.\n    \"\"\"\n    # Convert input list of lists to a numpy array for easier manipulation\n    grid_np = np.array(input_grid, dtype=int)\n    height, width = grid_np.shape\n\n    # 1. Identify the coordinates of the unique white pixel (0).\n    try:\n        r0, c0 = find_unique_pixel(grid_np, 0)\n    except ValueError as e:\n        # Handle cases where the white pixel assumption is violated (e.g., no white pixel)\n        # Depending on requirements, could return input, raise error, etc.\n        # For now, let's re-raise as it indicates unexpected input based on examples.\n        print(f\"Error finding unique white pixel: {e}\")\n        raise\n\n    # 2. Identify the background color.\n    try:\n        background_color = get_background_color(grid_np, 0)\n    except ValueError as e:\n        # Handle cases where no background color is found (e.g., grid is all white)\n        print(f\"Error finding background color: {e}\")\n        # If the grid is all white (e.g., 1x1 [[0]]), the rule might imply output is [[0]].\n        # Let's handle the 1x1 case specifically.\n        if height == 1 and width == 1 and grid_np[0,0] == 0:\n             return [[0]] # Output for a single white pixel is just that pixel.\n        raise # Re-raise for other unexpected cases\n\n    # 3. Create a new output grid, initialized (e.g., with zeros).\n    output_grid = np.zeros_like(grid_np)\n\n    # 4. Iterate through each pixel in the grid.\n    for r in range(height):\n        for c in range(width):\n            # 5. Calculate Manhattan distance to the white pixel.\n            distance = abs(r - r0) + abs(c - c0)\n\n            # 6. Check if the distance is even or odd.\n            if distance % 2 == 0:\n                # 7. If even, set output pixel to white (0).\n                output_grid[r, c] = 0\n            else:\n                # 8. If odd, set output pixel to the background color.\n                output_grid[r, c] = background_color\n\n    # Convert the numpy array back to a list of lists for the final output\n    return output_grid.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2475,
    "candidates_token_count": 1146,
    "total_token_count": 3621,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 18.203268
}