{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid based on the Manhattan distance (d) of each pixel from a unique white (0) pixel present in the input grid.\n\n1. Find the coordinates (r0, c0) of the unique white (0) pixel.\n2. Find the background color (bg), which is the non-white color present.\n3. Create an output grid of the same size.\n4. For each pixel (r, c):\n    a. Calculate the Manhattan distance d = |r - r0| + |c - c0|.\n    b. Determine the output color based on d and bg:\n        i.   If d == 0, the output color is white (0).\n        ii.  If d is odd, the output color is the background color (bg).\n        iii. If d is even and d > 0:\n             1. If bg is Blue (1), the output color is white (0).\n             2. If bg is Red (2):\n                 - If (d // 2) is odd, the output color is Red (2).\n                 - If (d // 2) is even, the output color is white (0).\n             3. If bg is Green (3):\n                 - If (d // 2) is odd, the output color is white (0).\n                 - If (d // 2) is even, the output color is Green (3).\n             4. (Default for other bg colors): Assume the output color is white (0).\n5. Return the output grid.\n\"\"\"\n\nimport numpy as np\nfrom typing import List, Tuple\n\ndef find_unique_pixel(grid: np.ndarray, color: int) -> Tuple[int, int]:\n    \"\"\"Finds the coordinates of the unique pixel with the specified color.\"\"\"\n    # Find all occurrences of the color\n    coords = np.argwhere(grid == color)\n    # Check if exactly one was found\n    if coords.shape[0] != 1:\n        raise ValueError(f\"Expected exactly one pixel with color {color}, found {coords.shape[0]}\")\n    # Return as (row, col) tuple\n    return tuple(coords[0])\n\ndef get_background_color(grid: np.ndarray, exception_color: int) -> int:\n    \"\"\"Finds a color in the grid that is not the exception_color.\"\"\"\n    # Get unique colors present in the grid\n    unique_colors = np.unique(grid)\n    # Iterate through unique colors to find one that is not the exception\n    for color in unique_colors:\n        if color != exception_color:\n            return color\n    # If no other color is found, raise an error\n    # This assumes the input grid structure always includes a background color\n    raise ValueError(f\"Could not find a background color different from {exception_color}\")\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Applies a transformation based on Manhattan distance from a unique white pixel,\n    with rules depending on the background color and distance parity.\n    \"\"\"\n    # Convert input list of lists to a numpy array for efficient operations\n    grid_np = np.array(input_grid, dtype=int)\n    height, width = grid_np.shape\n\n    # Handle edge case: Empty grid\n    if height == 0 or width == 0:\n        return []\n\n    # Handle edge case: 1x1 grid - follows d=0 rule if it's the white pixel\n    if height == 1 and width == 1:\n        if grid_np[0,0] == 0:\n             return [[0]]\n        else:\n             # According to task rules, input must contain the unique white pixel.\n             raise ValueError(\"Input 1x1 grid does not contain the required white pixel.\")\n\n    # 1. Identify the coordinates of the unique white pixel (0).\n    try:\n        r0, c0 = find_unique_pixel(grid_np, 0)\n    except ValueError as e:\n        print(f\"Error finding unique white pixel: {e}\")\n        # Re-raise the error to halt execution if the assumption isn't met\n        raise\n\n    # 2. Identify the background color.\n    try:\n        background_color = get_background_color(grid_np, 0)\n    except ValueError as e:\n        print(f\"Error finding background color: {e}\")\n        # Re-raise the error\n        raise\n\n    # 3. Create a new output grid, initialized (e.g., with zeros or empty).\n    # Using np.empty is slightly more efficient if all cells will be filled.\n    output_grid = np.empty_like(grid_np, dtype=int)\n\n    # 4. Iterate through each pixel in the grid.\n    for r in range(height):\n        for c in range(width):\n            # 4a. Calculate Manhattan distance to the white pixel.\n            distance = abs(r - r0) + abs(c - c0)\n\n            # 4b. Determine output color based on distance and background color rules.\n\n            # 4b.i: Rule for d = 0\n            if distance == 0:\n                output_color = 0 # white\n            # 4b.ii: Rule for odd d\n            elif distance % 2 != 0:\n                output_color = background_color\n            # 4b.iii: Rule for even d > 0\n            else: # distance is even and > 0\n                half_d = distance // 2\n                \n                # Default output for even distance is white (covers bg=1 and others)\n                output_color = 0 \n\n                # Special rule for Red background (bg=2)\n                if background_color == 2:\n                    if half_d % 2 != 0: # half_d is odd\n                        output_color = 2 # Red\n                # Special rule for Green background (bg=3)\n                elif background_color == 3:\n                    if half_d % 2 == 0: # half_d is even\n                        output_color = 3 # Green\n\n            # Assign the calculated color to the output grid\n            output_grid[r, c] = output_color\n\n    # 5. Convert the numpy array back to a list of lists for the final output format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8963,
    "candidates_token_count": 1446,
    "total_token_count": 10409,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 18.63522
}