{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List\n\n\"\"\"\nTransforms the input grid based on Manhattan distance from a unique white pixel, with a special rule for distance 2.\n\n1. Find the coordinates (r0, c0) of the unique white (0) pixel.\n2. Find the background color (bg_color), which is the non-white color present.\n3. Create an output grid of the same size.\n4. For each pixel (r, c):\n    a. Calculate the Manhattan distance d = |r - r0| + |c - c0|.\n    b. If d is 0, the output pixel is white (0).\n    c. If d is 2, the output pixel is the background color (bg_color).\n    d. If d > 0 and d is not 2:\n        i. If d is even, the output pixel is white (0).\n        ii. If d is odd, the output pixel is the background color (bg_color).\n5. Return the output grid.\n\"\"\"\n\ndef find_unique_pixel(grid: np.ndarray, color: int) -> tuple[int, int]:\n    \"\"\"Finds the coordinates of the unique pixel with the specified color.\"\"\"\n    coords = np.argwhere(grid == color)\n    if coords.shape[0] != 1:\n        # Defensive check: Ensure exactly one pixel of the target color exists.\n        raise ValueError(f\"Expected exactly one pixel with color {color}, found {coords.shape[0]}\")\n    return tuple(coords[0])\n\ndef get_background_color(grid: np.ndarray, exception_color: int) -> int:\n    \"\"\"Finds a color in the grid that is not the exception_color.\"\"\"\n    # Iterate through the grid to find the first pixel not matching the exception_color.\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] != exception_color:\n                return grid[r, c]\n    # Defensive check: Ensure a background color exists.\n    # Handle the edge case of a grid containing only the exception_color.\n    if grid.shape == (1, 1) and grid[0, 0] == exception_color:\n        # If it's a 1x1 grid of the exception color (white), the concept of 'background' might not apply \n        # in the same way. The transformation rule for d=0 still holds (output is white).\n        # We might not technically need a background color in this specific scenario,\n        # but returning a default or the exception color itself might be acceptable depending on context.\n        # For this problem, d=0 applies, so background is never used. Let's return a default like -1 or raise error.\n         raise ValueError(f\"Grid contains only the exception color {exception_color}, cannot determine background.\")\n    raise ValueError(f\"Could not find a background color different from {exception_color}\")\n\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transforms the input grid based on modified Manhattan distance parity from the unique white pixel.\n    Pixels at distance 0 become white (0).\n    Pixels at distance 2 become the background color.\n    Other pixels follow a checkerboard pattern: even distance -> white (0), odd distance -> background color.\n    \"\"\"\n    # Convert input list of lists to a numpy array for efficient operations\n    grid_np = np.array(input_grid, dtype=int)\n    height, width = grid_np.shape\n\n    # Handle edge case: 1x1 grid\n    if height == 1 and width == 1:\n        # If it's white (0), output is white (0) because d=0.\n        # If it's another color, it doesn't fit the pattern (no white pixel).\n        # Based on examples, we assume a white pixel exists.\n        if grid_np[0,0] == 0:\n            return [[0]]\n        else:\n            # This input violates the assumption of a unique white pixel.\n            # Return input or raise error based on desired behavior for invalid inputs.\n            # Let's raise an error for clarity.\n             raise ValueError(\"Input grid does not contain the required unique white pixel.\")\n\n\n    # 1. Identify the coordinates of the unique white pixel (0).\n    try:\n        r0, c0 = find_unique_pixel(grid_np, 0)\n    except ValueError as e:\n        # Propagate error if the unique white pixel isn't found.\n        print(f\"Error finding unique white pixel: {e}\")\n        raise\n\n    # 2. Identify the background color.\n    try:\n        background_color = get_background_color(grid_np, 0)\n    except ValueError as e:\n        # Propagate error if no background color is found (shouldn't happen with valid inputs).\n        print(f\"Error finding background color: {e}\")\n        raise\n\n    # 3. Create a new output grid, initialized (e.g., with zeros or empty).\n    output_grid = np.zeros_like(grid_np)\n\n    # 4. Iterate through each pixel in the grid.\n    for r in range(height):\n        for c in range(width):\n            # 5a. Calculate Manhattan distance to the white pixel.\n            distance = abs(r - r0) + abs(c - c0)\n\n            # 6. Determine output color based on distance rules.\n            if distance == 0:\n                # 6b. If d is 0, output is white (0).\n                output_grid[r, c] = 0\n            elif distance == 2:\n                 # 6c. If d is 2, output is the background color.\n                output_grid[r, c] = background_color\n            else: # distance > 0 and distance != 2\n                 # 6d. Apply checkerboard pattern for other distances.\n                if distance % 2 == 0:\n                    # 6d.i. If d is even (and not 0 or 2), output is white (0).\n                    output_grid[r, c] = 0\n                else:\n                    # 6d.ii. If d is odd, output is the background color.\n                    output_grid[r, c] = background_color\n\n    # Convert the numpy array back to a list of lists for the final output format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2905,
    "candidates_token_count": 1485,
    "total_token_count": 4390,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 22.490212
}