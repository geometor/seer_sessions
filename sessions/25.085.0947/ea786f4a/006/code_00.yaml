task_description: |
  Color the output grid based on the Manhattan distance (d) of each pixel from a unique white (0) pixel present in the input grid. The specific coloring rule depends on the distance parity (odd/even) and the background color (bg), which is the non-white color in the input.

grid_properties:
  - input_grid: 2D array of integers (colors 0-9).
  - output_grid: 2D array of integers, same dimensions as input.
  - colors: {0: white, 1: blue, 2: red, 3: green, ...}

objects:
  - name: white_pixel
    description: A single pixel with color 0 in the input grid.
    properties:
      - location: (r0, c0) - coordinates within the grid.
      - uniqueness: There is exactly one such pixel.
  - name: background
    description: The dominant non-white color in the input grid.
    properties:
      - color: bg (e.g., 1, 2, or 3 in the examples).
      - uniqueness: Assumed to be a single color other than white.
  - name: grid_pixel
    description: Any pixel in the grid at location (r, c).
    properties:
      - location: (r, c)
      - manhattan_distance: d = abs(r - r0) + abs(c - c0) from the white_pixel.

transformations:
  - action: determine_output_color
    description: Assign a color to each output grid pixel based on its properties relative to the white_pixel and background color.
    rules:
      - condition: d == 0
        output_color: 0 (white)
      - condition: d is odd
        output_color: bg (background color)
      - condition: d is even and d > 0
        sub_rules:
          - condition: bg == 1 (blue)
            output_color: 0 (white)
          - condition: bg == 2 (red)
            output_color: 2 (red) if (d // 2) is odd, else 0 (white)
          - condition: bg == 3 (green)
            output_color: 3 (green) if (d // 2) is even, else 0 (white)

assumptions:
  - Input grid contains exactly one white (0) pixel.
  - Input grid contains exactly one other color (the background color).
  - Grid dimensions are consistent between input and output.