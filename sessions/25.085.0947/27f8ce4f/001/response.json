{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nConstruct a larger grid (3 times the height and width of the input) by selectively \ntiling copies of the input grid based on the locations of its most frequent \nnon-background (non-zero) color.\n\n1. Identify the non-zero color that appears most frequently in the input grid. \n   If there's a tie, choose the smallest color value among the tied ones.\n2. Create a 'pattern' grid of the same dimensions as the input. Mark cells 'True' \n   where the most frequent color appears in the input, 'False' otherwise.\n3. Create an output grid 3 times the height and 3 times the width of the input, \n   filled with the background color (0).\n4. Iterate through the 'pattern' grid. If a cell (r, c) is 'True', copy the \n   entire input grid into the corresponding (r, c) block of the output grid. \n   The top-left corner of the block in the output grid is at (r * H, c * W), \n   where H and W are the height and width of the input grid.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef find_most_frequent_nonzero_color(grid):\n    \"\"\"Finds the most frequent non-zero color in the grid. Handles ties by choosing the smallest value.\"\"\"\n    # Flatten the grid and filter out zeros\n    non_zeros = [pixel for row in grid for pixel in row if pixel != 0]\n\n    if not non_zeros:\n        # Handle case where grid is all zeros or empty\n        return None \n\n    # Count frequencies\n    counts = Counter(non_zeros)\n    \n    # Find the maximum frequency\n    max_freq = 0\n    for color in counts:\n        if counts[color] > max_freq:\n            max_freq = counts[color]\n\n    # Find all colors with the maximum frequency\n    most_frequent_colors = []\n    for color in counts:\n        if counts[color] == max_freq:\n            most_frequent_colors.append(color)\n\n    # Return the smallest color value among those tied for most frequent\n    return min(most_frequent_colors) if most_frequent_colors else None\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on the tiling rule described above.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    H, W = input_np.shape\n\n    # Step 1: Find the most frequent non-zero color\n    most_frequent_color = find_most_frequent_nonzero_color(input_grid)\n    \n    # Handle edge case where no non-zero color exists\n    if most_frequent_color is None:\n         # If no non-zero colors, the pattern grid would be all False,\n         # resulting in an all-zero output grid of the target size.\n         output_H, output_W = 3 * H, 3 * W\n         output_np = np.zeros((output_H, output_W), dtype=int)\n         return output_np.tolist()\n\n\n    # Step 2: Create the boolean pattern grid\n    pattern_grid = (input_np == most_frequent_color)\n\n    # Step 3: Initialize the output grid\n    output_H, output_W = 3 * H, 3 * W\n    output_np = np.zeros((output_H, output_W), dtype=int)\n\n    # Step 4: Populate the output grid based on the pattern grid\n    for r in range(H):\n        for c in range(W):\n            if pattern_grid[r, c]:  # If the pattern is True at (r, c)\n                # Calculate the top-left corner for the block in the output grid\n                start_row = r * H\n                start_col = c * W\n                # Calculate the bottom-right corner (exclusive)\n                end_row = start_row + H\n                end_col = start_col + W\n                # Copy the input grid into the corresponding block\n                output_np[start_row:end_row, start_col:end_col] = input_np\n\n    # Convert the final numpy array back to a list of lists\n    return output_np.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3111,
    "candidates_token_count": 994,
    "total_token_count": 4105,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.562361
}