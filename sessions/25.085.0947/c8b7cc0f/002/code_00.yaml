task_description: Determine the number of pixels of a specific color ('target_color') to place in a 3x3 output grid based on the spatial relationship of those pixels to blue 'walls' in the input grid.

definitions:
  - background_color: white (0)
  - wall_color: blue (1)
  - target_color: The single color in the input grid that is neither white nor blue.
  - outside_pixels: Pixels of the target_color that are reachable from the border of the grid without crossing any wall_color pixels (using 4-directional adjacency).
  - inside_pixels: Pixels of the target_color that are *not* outside_pixels.
  - count_outside: The number of outside_pixels.
  - count_inside: The number of inside_pixels.

examples:
  - id: 1
    input_grid:
      size: 9x9
      target_color: magenta (6)
      total_target_pixels: 8
      wall_pixels_present: true
    analysis:
      count_outside: 3
      count_inside: 5
    output_grid:
      size: 3x3
      target_color_count: 5 # Matches count_inside

  - id: 2
    input_grid:
      size: 7x7
      target_color: yellow (4)
      total_target_pixels: 7
      wall_pixels_present: true
    analysis:
      count_outside: 4
      count_inside: 3
    output_grid:
      size: 3x3
      target_color_count: 3 # Matches count_inside

  - id: 3
    input_grid:
      size: 9x9
      target_color: green (3)
      total_target_pixels: 9
      wall_pixels_present: true
    analysis:
      count_outside: 5
      count_inside: 4
    output_grid:
      size: 3x3
      target_color_count: 4 # Matches count_inside

derived_rule:
  transformation: Create a 3x3 output grid.
  target_pixel_count: The number of target_color pixels to place in the output grid is equal to `count_inside`.
  placement: Fill the 3x3 output grid with the target_color, starting from the top-left cell and proceeding row by row, until the required number of pixels (`count_inside`) is placed. Fill remaining cells with the background_color (white, 0). Ensure the number placed does not exceed 9.
