Input Grid:
  Properties:
    - height: H (variable)
    - width: W (variable)
    - pixels: grid of integer colors (0-9)
    - white_pixels: color 0, treated as background
    - non_white_pixels: colors 1-9, treated as foreground objects/data points

Derived Information:
  - non_white_counts: A map of each non-white color present in the input grid to its frequency (count).
  - unique_non_white_colors: The set of distinct non-white colors present.
  - num_unique_colors: The count of unique_non_white_colors.
  - max_count: The highest frequency found in non_white_counts.
  - threshold: Calculated as (Input H * Input W) / 2.0.
  - sorted_colors: List of unique_non_white_colors sorted primarily by frequency (descending) and secondarily by color value (ascending).

Output Grid:
  Properties:
    - width: Determined by `num_unique_colors`. If `num_unique_colors` is 0, width is 1.
    - height: Determined by a rule:
        - If `max_count >= threshold`, height is `max_count`.
        - If `max_count < threshold`:
            - If `num_unique_colors == Input H`, height is `max_count`.
            - Otherwise, height is `max_count + 1`.
        - If `num_unique_colors` is 0, height is 1.
        - Minimum height is 1 if there are any non-white colors.
    - pixels: Initially all white (0).

Actions:
  1. Identify and count all non-white pixels in the input grid.
  2. Handle edge case: If no non-white pixels exist, the output is a 1x1 grid containing white (0).
  3. Determine the sorting order for the non-white colors (by count desc, then color asc).
  4. Calculate the required output grid height using the rule defined above.
  5. Create the output grid with the calculated height and width (`num_unique_colors`), filled with white.
  6. Iterate through the `sorted_colors`:
     - For each color at index `j` in `sorted_colors`, retrieve its count (`c`).
     - Fill the `j`-th column of the output grid from row 0 down to row `min(c, output_height) - 1` with that color.