task_description: Place specific colored pixels diagonally around a single red pixel, respecting grid boundaries.
grid_size:
  input: 3x5 (constant across examples)
  output: 3x5 (constant across examples)
objects:
  input:
    - object: red_pixel
      color: 2 (red)
      count: 1
      location: variable
    - object: background
      color: 0 (white)
  output:
    - object: green_pixel
      color: 3 (green)
      count: 0 or 1
      location: relative to red_pixel (up-left diagonal)
    - object: magenta_pixel
      color: 6 (magenta)
      count: 0 or 1
      location: relative to red_pixel (up-right diagonal)
    - object: azure_pixel
      color: 8 (azure)
      count: 0 or 1
      location: relative to red_pixel (down-left diagonal)
    - object: orange_pixel
      color: 7 (orange)
      count: 0 or 1
      location: relative to red_pixel (down-right diagonal)
    - object: background
      color: 0 (white)
transformation_rule:
  - action: find
    target: red_pixel (color 2)
    variable: red_pos
  - action: create
    target: output_grid
    properties:
      size: same as input_grid
      initial_color: 0 (white)
  - action: check_and_place
    conditions:
      - position: (red_pos.row - 1, red_pos.col - 1) is within grid bounds
    actions:
      - place: green_pixel (color 3) at (red_pos.row - 1, red_pos.col - 1) in output_grid
  - action: check_and_place
    conditions:
      - position: (red_pos.row - 1, red_pos.col + 1) is within grid bounds
    actions:
      - place: magenta_pixel (color 6) at (red_pos.row - 1, red_pos.col + 1) in output_grid
  - action: check_and_place
    conditions:
      - position: (red_pos.row + 1, red_pos.col - 1) is within grid bounds
    actions:
      - place: azure_pixel (color 8) at (red_pos.row + 1, red_pos.col - 1) in output_grid
  - action: check_and_place
    conditions:
      - position: (red_pos.row + 1, red_pos.col + 1) is within grid bounds
    actions:
      - place: orange_pixel (color 7) at (red_pos.row + 1, red_pos.col + 1) in output_grid