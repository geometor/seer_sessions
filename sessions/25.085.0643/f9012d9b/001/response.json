{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nAnalyze the input grid to identify all unique non-white pixel colors (colors other than 0).\nCount the number of occurrences (frequency) for each unique non-white color found.\nIf there are no non-white colors, return a default grid (e.g., 1x1 white).\nIf there is only one unique non-white color (C1), create a 1x1 output grid containing C1.\nIf there are two or more unique non-white colors:\n  Identify the color with the highest frequency (C1) and its count (Count1).\n  Identify the color with the second highest frequency (C2) and its count (Count2).\n  Calculate the difference: Diff = Count1 - Count2.\n  If Diff is less than or equal to 1, create a 1x1 output grid containing C1.\n  If Diff is greater than 1, create a 2x2 output grid with the pattern [[C1, C1], [C2, C1]].\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on the frequency of non-white colors.\n    Outputs a 1x1 grid with the most frequent color if only one color exists\n    or the difference between the top two frequencies is <= 1.\n    Outputs a 2x2 grid [[C1, C1], [C2, C1]] if the difference between the\n    most frequent (C1) and second most frequent (C2) color counts is > 1.\n    \"\"\"\n    \n    # Convert input to a numpy array for easier manipulation\n    grid = np.array(input_grid, dtype=int)\n    \n    # Flatten the grid and filter out white pixels (color 0)\n    non_white_pixels = grid[grid != 0]\n    \n    # Count the frequency of each non-white color\n    color_counts = Counter(non_white_pixels)\n    \n    # Get the colors and their counts, sorted by count descending\n    # If counts are equal, sort by color value ascending (though not strictly needed by examples)\n    sorted_colors = sorted(color_counts.items(), key=lambda item: (-item[1], item[0]))\n    \n    # Case 1: No non-white colors found\n    if not sorted_colors:\n        # Return a default 1x1 white grid (or handle as per specific ARC requirements if needed)\n        output_grid = np.array([[0]], dtype=int)\n        return output_grid.tolist() # Return as list of lists\n\n    # Get the most frequent color (C1) and its count (Count1)\n    c1, count1 = sorted_colors[0]\n    \n    # Case 2: Only one unique non-white color exists\n    if len(sorted_colors) == 1:\n        output_grid = np.array([[c1]], dtype=int)\n        return output_grid.tolist() # Return as list of lists\n\n    # Case 3: Two or more unique non-white colors exist\n    # Get the second most frequent color (C2) and its count (Count2)\n    c2, count2 = sorted_colors[1]\n    \n    # Calculate the difference in counts\n    diff = count1 - count2\n    \n    # Determine output based on the difference\n    if diff <= 1:\n        # Difference is small, output 1x1 grid with C1\n        output_grid = np.array([[c1]], dtype=int)\n    else:\n        # Difference is large, output 2x2 grid with the pattern [[C1, C1], [C2, C1]]\n        output_grid = np.array([[c1, c1], \n                                [c2, c1]], dtype=int)\n                                \n    return output_grid.tolist() # Return as list of lists\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2283,
    "candidates_token_count": 883,
    "total_token_count": 3166,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.947088
}