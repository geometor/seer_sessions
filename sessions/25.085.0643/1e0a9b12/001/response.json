{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nApplies gravity to each column independently. Non-white pixels fall down within their column until they hit the bottom edge of the grid or another non-white pixel. The relative vertical order of non-white pixels within a column is preserved. White pixels fill the remaining space above the stacked non-white pixels in each column.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by applying gravity to non-white pixels in each column.\n\n    Args:\n        input_grid (list of list of int): The input grid.\n\n    Returns:\n        list of list of int: The transformed output grid.\n    \"\"\"\n    # Convert input list of lists to a numpy array for easier column slicing\n    input_np = np.array(input_grid, dtype=int)\n    height, width = input_np.shape\n\n    # Initialize the output grid with the same dimensions, filled with white (0)\n    output_np = np.zeros_like(input_np)\n\n    # Iterate through each column of the input grid\n    for col_idx in range(width):\n        # Get the current column\n        column = input_np[:, col_idx]\n\n        # Filter out the non-white pixels (values > 0) from the column\n        # Keep them in their original top-to-bottom order\n        non_white_pixels = [pixel for pixel in column if pixel != 0]\n\n        # Determine the number of non-white pixels in this column\n        num_non_white = len(non_white_pixels)\n\n        # If there are any non-white pixels in this column\n        if num_non_white > 0:\n            # Place the non-white pixels at the bottom of the corresponding column\n            # in the output grid, maintaining their relative order.\n            # The index starts from height - num_non_white (the topmost position for the stack)\n            # and goes down to height - 1 (the bottom row).\n            output_np[height - num_non_white : height, col_idx] = non_white_pixels\n\n    # Convert the numpy array output back to a list of lists\n    output_grid = output_np.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2047,
    "candidates_token_count": 502,
    "total_token_count": 2549,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 6.756891
}