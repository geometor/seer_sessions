- task_description: Create an output grid that is twice the height and width of the input grid, tiling rotated versions of the input grid into four quadrants.
- examples:
  - id: 1
    input_grid:
      shape: (3, 3)
      colors: [orange, azure]
      objects: # Visual interpretation
        - shape: L-shape or two adjacent 2x1 rectangles
          color: orange
          location: top-left
        - shape: L-shape or two adjacent 1x2 rectangles
          color: azure
          location: bottom-right adjacent to orange
    output_grid:
      shape: (6, 6)
      colors: [orange, azure]
      matches_2x_input_dims: true
  - id: 2
    input_grid:
      shape: (2, 2)
      colors: [magenta, azure]
      objects: # Visual interpretation
        - shape: diagonal line / two separate pixels
          color: azure
          location: (0,0), (1,1)
        - shape: diagonal line / two separate pixels
          color: magenta
          location: (0,1), (1,0)
    output_grid:
      shape: (4, 4)
      colors: [magenta, azure]
      matches_2x_input_dims: true
  - id: 3
    input_grid:
      shape: (3, 3)
      colors: [yellow, green, maroon]
      objects: # Visual interpretation
        - shape: vertical line (3x1)
          color: green
          location: left edge
        - shape: horizontal line (1x2)
          color: maroon
          location: top-right
        - shape: square (2x2)
          color: yellow
          location: bottom-right (overlapping conceptual boundaries)
    output_grid:
      shape: (6, 6)
      colors: [yellow, green, maroon]
      matches_2x_input_dims: true
- transformation:
    - input: grid (H x W)
    - output: grid (2H x 2W)
    - components:
        - top_left_quadrant: (rows 0 to H-1, cols 0 to W-1)
        - top_right_quadrant: (rows 0 to H-1, cols W to 2W-1)
        - bottom_left_quadrant: (rows H to 2H-1, cols 0 to W-1)
        - bottom_right_quadrant: (rows H to 2H-1, cols W to 2W-1)
    - actions:
        - copy: input grid is placed in the top_left_quadrant.
        - rotate_clockwise_90: input grid is rotated 90 degrees clockwise and placed in the top_right_quadrant.
        - rotate_counter_clockwise_90: input grid is rotated 90 degrees counter-clockwise (or 270 clockwise) and placed in the bottom_left_quadrant.
        - rotate_180: input grid is rotated 180 degrees and placed in the bottom_right_quadrant.