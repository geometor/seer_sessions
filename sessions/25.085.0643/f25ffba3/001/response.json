{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nThis program transforms an input grid based on the following rules:\n1. Determine the height (H) and width (W) of the input grid.\n2. Calculate the midpoint row index M = H / 2.\n3. Create a new output grid with the same dimensions (H x W).\n4. Identify the subgrid corresponding to the bottom half of the input grid (rows M to H-1).\n5. Copy this bottom-half subgrid directly to the bottom half of the output grid (rows M to H-1).\n6. Create a vertically flipped version of the bottom-half subgrid from the input.\n7. Copy this flipped subgrid to the top half of the output grid (rows 0 to M-1).\n8. Return the completed output grid.\nThe resulting output grid exhibits vertical symmetry across its horizontal midpoint.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by copying its bottom half to the output's bottom half,\n    and copying a vertically flipped version of the input's bottom half to the output's top half.\n\n    Args:\n        input_grid (list[list[int]]): A 2D list representing the input grid.\n\n    Returns:\n        list[list[int]]: A 2D list representing the transformed output grid.\n    \"\"\"\n    # Convert input list of lists to a numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n\n    # Get grid dimensions\n    height, width = input_np.shape\n\n    # Calculate the midpoint row index (integer division)\n    midpoint = height // 2\n\n    # Initialize the output grid as a numpy array of the same shape, filled with zeros initially\n    output_np = np.zeros_like(input_np)\n\n    # Extract the bottom half of the input grid\n    bottom_half_input = input_np[midpoint:, :]\n\n    # Copy the bottom half of the input to the bottom half of the output\n    output_np[midpoint:, :] = bottom_half_input\n\n    # Flip the extracted bottom half vertically\n    flipped_bottom_half = np.flipud(bottom_half_input)\n\n    # Copy the flipped bottom half to the top half of the output\n    output_np[:midpoint, :] = flipped_bottom_half\n\n    # Convert the output numpy array back to a list of lists\n    output_grid = output_np.tolist()\n\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2249,
    "candidates_token_count": 558,
    "total_token_count": 2807,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 6.647318
}