{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms a 3x3 input grid into a single integer code (1, 2, 3, or 6) based on the shape of the non-white pattern.\n\n1. Identify the single non-white color (`pattern_color`) in the 3x3 input grid.\n2. Check if the pattern exactly matches a '+' shape template using the `pattern_color`. If it matches, output 6.\n3. If not a '+' shape, check if the pattern exactly matches an 'X' shape template using the `pattern_color`. If it matches, output 2.\n4. If it matches neither template, check if there exists any 2x2 subgrid within the input grid composed entirely of the `pattern_color`.\n5. If such a 2x2 subgrid exists, output 3.\n6. Otherwise (doesn't match templates and no 2x2 block), output 1.\n\"\"\"\n\nimport numpy as np\n\ndef has_2x2_block(grid, pattern_color):\n    \"\"\"\n    Checks if a 2x2 block of the specified pattern_color exists anywhere in the 3x3 grid.\n    \"\"\"\n    # Check the four possible top-left corners of a 2x2 block in a 3x3 grid\n    # Top-left (0,0)\n    if (grid[0, 0] == pattern_color and grid[0, 1] == pattern_color and\n        grid[1, 0] == pattern_color and grid[1, 1] == pattern_color):\n        return True\n    # Top-right (0,1)\n    if (grid[0, 1] == pattern_color and grid[0, 2] == pattern_color and\n        grid[1, 1] == pattern_color and grid[1, 2] == pattern_color):\n        return True\n    # Bottom-left (1,0)\n    if (grid[1, 0] == pattern_color and grid[1, 1] == pattern_color and\n        grid[2, 0] == pattern_color and grid[2, 1] == pattern_color):\n        return True\n    # Bottom-right (1,1)\n    if (grid[1, 1] == pattern_color and grid[1, 2] == pattern_color and\n        grid[2, 1] == pattern_color and grid[2, 2] == pattern_color):\n        return True\n        \n    return False\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule based on pattern shape ('+', 'X') or 2x2 block presence.\n    \"\"\"\n    # Convert input list of lists to a numpy array\n    grid = np.array(input_grid, dtype=int)\n    \n    # Find the pattern color (assuming exactly one non-white color exists)\n    pattern_color = 0\n    unique_colors = np.unique(grid)\n    for color in unique_colors:\n        if color != 0: # 0 is white\n            pattern_color = color\n            break\n            \n    # Handle the unlikely case of an all-white grid (or if finding pattern color fails)\n    if pattern_color == 0:\n        # Based on task examples, a pattern always exists.\n        # If needed, we could return a default value or raise an error.\n        # Let's assume pattern_color is always found > 0.\n        # For robustness, maybe return 0 or None, but based on problem, this shouldn't happen.\n        # Returning 1 might be a safe fallback if we consider it 'asymmetric without 2x2'.\n        return 1 \n\n    # Define the '+' shape template\n    plus_template = np.array([\n        [0, pattern_color, 0],\n        [pattern_color, pattern_color, pattern_color],\n        [0, pattern_color, 0]\n    ])\n\n    # Define the 'X' shape template\n    x_template = np.array([\n        [pattern_color, 0, pattern_color],\n        [0, pattern_color, 0],\n        [pattern_color, 0, pattern_color]\n    ])\n\n    # Check for '+' shape match\n    if np.array_equal(grid, plus_template):\n        return 6\n\n    # Check for 'X' shape match\n    elif np.array_equal(grid, x_template):\n        return 2\n\n    # Otherwise, check for a 2x2 block\n    else:\n        if has_2x2_block(grid, pattern_color):\n            # Pattern contains a 2x2 block\n            return 3\n        else:\n            # Pattern does not contain a 2x2 block\n            return 1\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4318,
    "candidates_token_count": 1091,
    "total_token_count": 5409,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.14293
}