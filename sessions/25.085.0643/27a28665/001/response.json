{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms a 3x3 input grid into a single integer based on the rotational symmetry and structure of the non-white pattern.\n\n1. Identify the pattern formed by the non-white pixels in the input 3x3 grid.\n2. Determine the rotational symmetry of this pattern.\n3. If the pattern has 4-way rotational symmetry (looks the same after 90, 180, 270 degree rotations), the output is 6.\n4. Else, if the pattern has 2-way rotational symmetry (looks the same after a 180 degree rotation, but not 90/270), the output is 2.\n5. Else (the pattern is asymmetric), check if there exists any 2x2 subgrid within the input grid that consists entirely of the non-white pattern pixels.\n6. If such a 2x2 subgrid exists, the output is 3.\n7. Otherwise (asymmetric and no 2x2 subgrid of the pattern color), the output is 1.\n\"\"\"\n\nimport numpy as np\n\ndef has_2x2_block(grid, pattern_color):\n    \"\"\"\n    Checks if a 2x2 block of the specified pattern_color exists anywhere in the grid.\n    Assumes grid is at least 2x2.\n    \"\"\"\n    rows, cols = grid.shape\n    # Iterate through possible top-left corners of a 2x2 block\n    for r in range(rows - 1):\n        for c in range(cols - 1):\n            # Check if all four cells in the 2x2 block match the pattern color\n            if (grid[r, c] == pattern_color and\n                grid[r+1, c] == pattern_color and\n                grid[r, c+1] == pattern_color and\n                grid[r+1, c+1] == pattern_color):\n                return True\n    return False\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule based on rotational symmetry and 2x2 block presence.\n    \"\"\"\n    # Convert input list of lists to a numpy array for easier manipulation\n    grid = np.array(input_grid, dtype=int)\n    \n    # Find the pattern color (assuming exactly one non-white color exists)\n    pattern_color = 0\n    unique_colors = np.unique(grid)\n    for color in unique_colors:\n        if color != 0:\n            pattern_color = color\n            break\n            \n    # If the grid happened to be all white (not expected based on examples),\n    # we might return 0 or handle it, but based on the task, a pattern always exists.\n    # If pattern_color is still 0, something is wrong or it's an all-white grid.\n    # For now, we assume pattern_color > 0 is always found.\n\n    # Generate rotated versions of the grid\n    # k=1 rotates 90 degrees counter-clockwise\n    grid_90 = np.rot90(grid, k=1)\n    grid_180 = np.rot90(grid, k=2)\n    grid_270 = np.rot90(grid, k=3)\n\n    # Check for 4-way rotational symmetry (invariant under 90 degree rotations)\n    # Note: If it's invariant under 90, it's automatically invariant under 180 and 270.\n    if np.array_equal(grid, grid_90):\n        # Output is 6 for 4-way symmetry\n        return 6\n\n    # Check for 2-way rotational symmetry (invariant under 180 degrees, but not 90)\n    elif np.array_equal(grid, grid_180):\n        # Output is 2 for 2-way symmetry\n        return 2\n\n    # Otherwise, the pattern is asymmetric\n    else:\n        # Check if the asymmetric pattern contains a 2x2 block of the pattern color\n        if has_2x2_block(grid, pattern_color):\n            # Output is 3 for asymmetric with a 2x2 block\n            return 3\n        else:\n            # Output is 1 for asymmetric without a 2x2 block\n            return 1\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2249,
    "candidates_token_count": 974,
    "total_token_count": 3223,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.479186
}