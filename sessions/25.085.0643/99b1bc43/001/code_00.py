"""
Combines two 4x4 subgrids from the input based on a cell-wise logical operation to produce a 4x4 output grid.
The input grid has a 9x4 structure: a top 4x4 subgrid (colors 0 and 1), a middle separator row (color 4), and a bottom 4x4 subgrid (colors 0 and 2).
The output 4x4 grid (colors 0 and 3) is generated by comparing corresponding cells from the top and bottom input subgrids.
Rule: For each cell position (row, col):
- If the top cell is blue (1) and the bottom cell is white (0), the output cell is green (3).
- If the top cell is white (0) and the bottom cell is red (2), the output cell is green (3).
- Otherwise (both white, or top is blue and bottom is red), the output cell is white (0).
This is equivalent to an XOR operation where white=0, blue=1, red=1, and the output is green=3 if the result is 1, otherwise white=0.
"""

import numpy as np

def transform(input_grid):
    """
    Transforms the input 9x4 grid into a 4x4 output grid based on the combination rule.

    Args:
        input_grid (np.ndarray): A 9x4 numpy array representing the input grid.

    Returns:
        np.ndarray: A 4x4 numpy array representing the output grid.
    """
    # Extract the upper and lower 4x4 subgrids
    upper_grid = input_grid[0:4, :]
    lower_grid = input_grid[5:9, :] # Skip row 4 (the separator)

    # Get the dimensions for the output grid (which are 4x4)
    height, width = upper_grid.shape

    # Initialize the output grid with white (0)
    output_grid = np.zeros((height, width), dtype=int)

    # Iterate through each cell position (row, col)
    for r in range(height):
        for c in range(width):
            # Get the colors from the corresponding cells in the upper and lower grids
            upper_color = upper_grid[r, c]
            lower_color = lower_grid[r, c]

            # Apply the combination rule
            # Condition 1: Upper is blue (1) and lower is white (0) -> output green (3)
            if upper_color == 1 and lower_color == 0:
                output_grid[r, c] = 3
            # Condition 2: Upper is white (0) and lower is red (2) -> output green (3)
            elif upper_color == 0 and lower_color == 2:
                output_grid[r, c] = 3
            # Otherwise (both white, or upper is blue and lower is red) -> output remains white (0)
            # This else is implicit because the grid is initialized with 0s.

    return output_grid