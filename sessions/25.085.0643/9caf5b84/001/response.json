{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nIdentify the two most frequent colors in the input grid. These are designated as \"stable colors\".\nCreate an output grid, initially identical to the input grid.\nIterate through each pixel of the input grid.\nIf a pixel's color is NOT one of the two stable colors, examine its eight neighbors (orthogonal and diagonal).\nIf any neighbor's color IS one of the stable colors, change the corresponding pixel's color in the output grid to 7 (orange).\nIf a pixel's color IS one of the stable colors, or if it's not stable but has no stable neighbors, it retains its original color in the output grid.\nReturn the modified output grid.\n\"\"\"\n\ndef get_neighbors(grid: np.ndarray, r: int, c: int) -> list:\n    \"\"\"\n    Gets the colors of the 8 neighbors (Moore neighborhood) of cell (r, c).\n\n    Args:\n        grid: The numpy array representing the grid.\n        r: The row index of the cell.\n        c: The column index of the cell.\n\n    Returns:\n        A list containing the colors of the valid neighbors.\n    \"\"\"\n    neighbors = []\n    rows, cols = grid.shape\n    # Iterate through the 3x3 area centered at (r, c)\n    for dr in [-1, 0, 1]:\n        for dc in [-1, 0, 1]:\n            # Skip the central cell itself\n            if dr == 0 and dc == 0:\n                continue\n            # Calculate neighbor coordinates\n            nr, nc = r + dr, c + dc\n            # Check if the neighbor is within the grid boundaries\n            if 0 <= nr < rows and 0 <= nc < cols:\n                neighbors.append(grid[nr, nc])\n    return neighbors\n\ndef transform(input_grid: list) -> list:\n    \"\"\"\n    Transforms the input grid based on stable colors and neighbors.\n\n    Identifies the two most frequent colors as 'stable'. Pixels with non-stable\n    colors change to orange (7) if they have at least one neighbor with a\n    stable color.\n\n    Args:\n        input_grid: A list of lists representing the input grid.\n\n    Returns:\n        A list of lists representing the transformed output grid.\n    \"\"\"\n    # Convert input list of lists to numpy array for efficient processing\n    grid_np = np.array(input_grid, dtype=int)\n    rows, cols = grid_np.shape\n\n    # --- Step 1: Identify Stable Colors ---\n    # Calculate color frequencies in the input grid\n    if grid_np.size == 0: # Handle empty grid case\n        return []\n    color_counts = Counter(grid_np.flatten())\n\n    # Find the two most frequent colors.\n    # Sort first by frequency (descending), then by color value (ascending) for consistent tie-breaking.\n    sorted_colors = sorted(color_counts.items(), key=lambda item: (-item[1], item[0]))\n\n    # Determine the set of stable colors (top 2)\n    stable_colors = set()\n    if len(sorted_colors) > 0:\n        stable_colors.add(sorted_colors[0][0])\n    if len(sorted_colors) > 1:\n        stable_colors.add(sorted_colors[1][0])\n    # Note: If there are fewer than 2 unique colors, stable_colors will contain only those available.\n\n    # --- Step 2: Initialize Output Grid ---\n    # Create a copy of the input grid to modify\n    output_grid_np = np.copy(grid_np)\n\n    # --- Step 3: Process Each Pixel ---\n    # Iterate through each cell (pixel) in the grid\n    for r in range(rows):\n        for c in range(cols):\n            current_color = grid_np[r, c]\n\n            # --- Check if the current pixel's color is NOT stable ---\n            if current_color not in stable_colors:\n                # --- Examine Neighbors ---\n                neighbors = get_neighbors(grid_np, r, c)\n\n                # --- Check if any neighbor has a stable color ---\n                has_stable_neighbor = False\n                for neighbor_color in neighbors:\n                    if neighbor_color in stable_colors:\n                        has_stable_neighbor = True\n                        break # Found a stable neighbor, no need to check further\n\n                # --- Change color to orange (7) if a stable neighbor was found ---\n                if has_stable_neighbor:\n                    output_grid_np[r, c] = 7\n\n            # --- If the current pixel's color IS stable ---\n            # No action is needed; the output grid retains the original color from the copy.\n\n    # --- Step 4: Return Output Grid ---\n    # Convert the numpy array back to a list of lists format\n    return output_grid_np.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2806,
    "candidates_token_count": 1113,
    "total_token_count": 3919,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 99.52654
}