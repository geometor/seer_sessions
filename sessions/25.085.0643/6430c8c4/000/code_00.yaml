task_elements:
  - item: input_grid
    description: A composite grid containing two subgrids separated by a yellow line.
    properties:
      height: Varies (e.g., 9 in examples)
      width: Varies (e.g., 4 in examples)
      contains_separator: true
      separator_color: yellow (4)
      separator_orientation: horizontal

  - item: grid_A
    description: The subgrid located above the yellow separator line.
    properties:
      dimensions: Matches grid_B dimensions (e.g., 4x4)
      pixels: Contains only orange (7) and white (0)

  - item: grid_B
    description: The subgrid located below the yellow separator line.
    properties:
      dimensions: Matches grid_A dimensions (e.g., 4x4)
      pixels: Contains only red (2) and white (0)

  - item: output_grid
    description: The resulting grid after the transformation.
    properties:
      dimensions: Matches grid_A and grid_B dimensions
      pixels: Contains only green (3) and white (0)

relationships:
  - type: derivation
    source: [grid_A, grid_B]
    target: output_grid
    rule: Pixel-wise comparison based on color value 0.

transformation_rule:
  - step: 1
    action: locate_separator
    input: input_grid
    criteria: Find the row consisting entirely of yellow (4) pixels.
    output: separator_row_index

  - step: 2
    action: extract_subgrids
    input: input_grid, separator_row_index
    outputs: [grid_A, grid_B]
    details: grid_A is above the separator, grid_B is below.

  - step: 3
    action: initialize_output
    input: grid_A # (for dimensions)
    output: output_grid
    details: Create a new grid with the same dimensions as grid_A, filled with white (0).

  - step: 4
    action: pixel_wise_comparison
    inputs: [grid_A, grid_B, output_grid]
    condition: For each coordinate (row, col)
    logic: If grid_A[row, col] is white (0) AND grid_B[row, col] is white (0)
    effect: Set output_grid[row, col] to green (3).
    # Note: No explicit 'else' needed as the grid is pre-filled with white (0).

  - step: 5
    action: finalize
    input: output_grid
    output: final_output_grid