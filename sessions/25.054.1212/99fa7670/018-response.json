{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Non-Zero Pixels:** Locate all pixels in the input grid that are not white (value 0). Note their color and their original row and column position.\n\n2.  **Horizontal Expansion:** For each non-zero pixel, change all pixels in its row to that pixel's color.\n\n3.  **Restricted Vertical Expansion (Fill-Down):** For each non-zero pixel identified in step 1, fill downwards *from its original row and column position*. The fill color is the color of the original non-zero pixel. The fill extends to the bottom of the grid, but *only* within that original column. Do not use any horizontally changed values for fill down.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the observed rule.\"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = output_grid.shape\n\n    # 1. Identify Non-Zero Pixels\n    non_zero_pixels = []\n    for r in range(rows):\n        for c in range(cols):\n            if output_grid[r, c] != 0:\n                non_zero_pixels.append((r, c, output_grid[r, c]))\n\n    # 2. Horizontal Expansion\n    for r, _, color in non_zero_pixels:\n        output_grid[r, :] = color\n\n    # 3. Restricted Vertical Expansion (Fill-Down)\n    # Re-iterate using *original* positions\n    for orig_r, orig_c, color in non_zero_pixels:\n        for r in range(orig_r, rows):\n            output_grid[r, orig_c] = color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3688,
    "candidates_token_count": 394,
    "total_token_count": 4082,
    "cached_content_token_count": 0
  },
  "response_time": 4.327409,
  "response_file": "018-response.json"
}