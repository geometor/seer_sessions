{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid by identifying a 2x2 core cluster of four unique,\nnon-zero colored pixels. It mirrors this cluster horizontally and vertically,\nplacing the mirrored clusters relative to the original cluster's position.\nThe output grid combines the original cluster and its mirrored copies,\nmaintaining the original input grid size.\n\"\"\"\n\nimport numpy as np\n\ndef find_core_cluster(grid):\n    \"\"\"Finds the 2x2 core cluster with four unique non-zero colors.\"\"\"\n    rows, cols = grid.shape\n    for r in range(rows - 1):\n        for c in range(cols - 1):\n            colors = [grid[r, c], grid[r + 1, c], grid[r, c + 1], grid[r + 1, c + 1]]\n            if all(color != 0 for color in colors) and len(set(colors)) == 4:\n                return r, c, colors\n    return None, None, None\n\ndef horizontal_mirror(grid, core_row, core_col, colors):\n    \"\"\"Mirrors the core cluster horizontally, two rows above or below.\"\"\"\n    rows, cols = grid.shape\n    # Try above\n    new_row = core_row - 2\n    if new_row >= 0:\n        grid[new_row, core_col:core_col+2] = [colors[2], colors[3]]\n        grid[new_row+1, core_col:core_col+2] = [colors[0], colors[1]]\n    else: #try below\n        new_row = core_row + 2\n        if new_row < rows -1:\n          grid[new_row, core_col:core_col+2] = [colors[2], colors[3]]\n          grid[new_row+1, core_col:core_col+2] = [colors[0], colors[1]]\n\n    return grid\n\ndef vertical_mirror(grid, core_row, core_col, colors):\n    \"\"\"Mirrors the core cluster vertically, two columns to the right or left.\"\"\"\n    rows, cols = grid.shape\n    # Try right\n    new_col = core_col + 2\n    if new_col <= cols - 2:\n        grid[core_row: core_row+2, new_col] = [colors[1], colors[0]]\n        grid[core_row: core_row+2, new_col+1] = [colors[3], colors[2]]\n    else:  #try left\n        new_col = core_col-2\n        if new_col >= 0:\n          grid[core_row: core_row+2, new_col] = [colors[1], colors[0]]\n          grid[core_row: core_row+2, new_col+1] = [colors[3], colors[2]]\n\n    return grid\n\ndef transform(input_grid):\n    # Initialize output grid as a copy of the input grid\n    output_grid = np.copy(input_grid)\n\n    # Find the core cluster\n    core_row, core_col, colors = find_core_cluster(input_grid)\n\n    if core_row is None:\n        return output_grid\n\n    # Apply horizontal mirroring\n    output_grid = horizontal_mirror(output_grid, core_row, core_col, colors)\n\n    # Apply vertical mirroring\n    output_grid = vertical_mirror(output_grid, core_row, core_col, colors)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4601,
    "candidates_token_count": 816,
    "total_token_count": 5417,
    "cached_content_token_count": 0
  },
  "response_time": 6.883088,
  "response_file": "012-response.json"
}