import numpy as np

def get_sequences(input_grid):
    """
    Identifies sequences of non-zero pixels in the input grid.
    """
    rows, cols = input_grid.shape
    sequences = []

    # Horizontal sequences
    for r in range(rows):
        current_sequence = []
        for c in range(cols):
            if input_grid[r, c] != 0:
                current_sequence.append((r, c, input_grid[r, c]))
            elif current_sequence:
                sequences.append(current_sequence)
                current_sequence = []
        if current_sequence:  # Handle sequences at the end of rows
            sequences.append(current_sequence)

    # Vertical sequences
    for c in range(cols):
        current_sequence = []
        for r in range(rows):
            if input_grid[r, c] != 0:
                current_sequence.append((r, c, input_grid[r, c]))
            elif current_sequence:
                sequences.append(current_sequence)
                current_sequence = []
        if current_sequence: # Handle sequences at the end of columns.
            sequences.append(current_sequence)
    return sequences

def analyze_sequences(sequences):
    """Analyzes a list of sequences to find potential repeating patterns."""
    if not sequences:
        return None

    # Flatten the sequences into a single list of values, preserving order
    flat_sequence = [val for seq in sequences for _, _, val in seq]

    # Find the shortest repeating subsequence
    for length in range(1, len(flat_sequence) // 2 + 1):
        subsequence = flat_sequence[:length]
        if len(flat_sequence) % length == 0:  # Check if subsequence divides the whole sequence
             repeats = len(flat_sequence) // length
             if flat_sequence == subsequence * repeats:
                return subsequence  # found a repeat
    return flat_sequence

def report(input_grid, expected_output):

    sequences = get_sequences(input_grid)
    repeating_subsequence = analyze_sequences(sequences)

    print(f"Input Grid:\n{input_grid}")
    print(f"Expected Output:\n{expected_output}")
    print(f"Identified Sequences: {sequences}")

    if repeating_subsequence:
      print(f"Repeating Subsequence: {repeating_subsequence}")
      
      #build output based on repeating sequence
      rows, cols = expected_output.shape
      sub_len = len(repeating_subsequence)
      output_grid = np.zeros((rows, cols), dtype=int)
      
      for r in range(rows):
          for c in range(cols):
              index = (r + c) % sub_len
              output_grid[r,c] = repeating_subsequence[index]
      print(f"Generated Output From Sequence:\n{output_grid}")
    else:
       print("No repeating subsequence found.")
    print("-" * 20)

# Example usage with the provided training data

example_inputs = [
    np.array([[2, 8, 3, 0, 0, 0, 0],
              [8, 3, 0, 0, 0, 0, 0],
              [3, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0]]),
    np.array([[0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 1],
              [0, 0, 0, 0, 0, 1, 2],
              [0, 0, 0, 0, 1, 2, 4],
              [0, 0, 0, 1, 2, 4, 0],
              [0, 0, 1, 2, 4, 0, 0]]),
    np.array([[0, 0, 0, 0, 8, 3, 0],
              [0, 0, 0, 8, 3, 0, 0],
              [0, 0, 8, 3, 0, 0, 0],
              [0, 8, 3, 0, 0, 0, 4],
              [8, 3, 0, 0, 0, 4, 0],
              [3, 0, 0, 0, 4, 0, 0],
              [0, 0, 0, 4, 0, 0, 0]])
]

example_outputs = [
    np.array([[2, 8, 3, 2, 8, 3, 2],
              [8, 3, 2, 8, 3, 2, 8],
              [3, 2, 8, 3, 2, 8, 3],
              [2, 8, 3, 2, 8, 3, 2],
              [8, 3, 2, 8, 3, 2, 8],
              [3, 2, 8, 3, 2, 8, 3],
              [2, 8, 3, 2, 8, 3, 2]]),
    np.array([[2, 4, 1, 2, 4, 1, 2],
              [4, 1, 2, 4, 1, 2, 4],
              [1, 2, 4, 1, 2, 4, 1],
              [2, 4, 1, 2, 4, 1, 2],
              [4, 1, 2, 4, 1, 2, 4],
              [1, 2, 4, 1, 2, 4, 1],
              [2, 4, 1, 2, 4, 1, 2]]),
    np.array([[4, 8, 3, 4, 8, 3, 4],
              [8, 3, 4, 8, 3, 4, 8],
              [3, 4, 8, 3, 4, 8, 3],
              [4, 8, 3, 4, 8, 3, 4],
              [8, 3, 4, 8, 3, 4, 8],
              [3, 4, 8, 3, 4, 8, 3],
              [4, 8, 3, 4, 8, 3, 4]])
]
for i in range(len(example_inputs)):
  report(example_inputs[i], example_outputs[i])