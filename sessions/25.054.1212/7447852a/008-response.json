{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. **Identify Red Pixels:** Locate all pixels with the color red (value 2) in the input grid.\n\n2. **Horizontal and Vertical Expansion:**\n    *   For any continuous horizontal sequence of red pixels, turn all white pixels between the left-most pixel and right-most pixel in the sequence to yellow.\n    *   For any continuous vertical sequence of red pixels, turn all white pixels between the up-most and down-most pixel in the sequence to yellow.\n\n3. **Diagonal connections:**\n    * For any diagonal sequence (upleft, downright) or (upright, downleft), where at least 3 continuous pixels in the sequence, turn the white pixels between upmost and downmost pixels to yellow.\n\n4. **Result:** The output grid is the result of applying these filling rules.\n\"\"\"\n\nimport numpy as np\n\ndef get_red_pixels(grid):\n    red_pixels = []\n    for r_idx, row in enumerate(grid):\n        for c_idx, pixel in enumerate(row):\n            if pixel == 2:\n                red_pixels.append((r_idx, c_idx))\n    return red_pixels\n                \ndef fill_horizontal(grid, red_pixels):\n    output_grid = np.copy(grid)\n    for r_idx, row in enumerate(grid):\n        red_cols = [c_idx for r_idx_, c_idx in red_pixels if r_idx_ == r_idx]\n        if red_cols:\n            min_col = min(red_cols)\n            max_col = max(red_cols)\n            for c_idx in range(min_col+1, max_col):\n                if output_grid[r_idx, c_idx] == 0:\n                    output_grid[r_idx, c_idx] = 4\n    return output_grid\n\ndef fill_vertical(grid, red_pixels):\n    output_grid = np.copy(grid)\n    for c_idx in range(grid.shape[1]):\n        red_rows = [r_idx for r_idx, c_idx_ in red_pixels if c_idx_ == c_idx]\n        if red_rows:\n            min_row = min(red_rows)\n            max_row = max(red_rows)\n            for r_idx in range(min_row + 1, max_row):\n                if output_grid[r_idx, c_idx] == 0:\n                   output_grid[r_idx, c_idx] = 4\n    return output_grid\n\ndef fill_diagonal(grid, red_pixels):\n    output_grid = np.copy(grid)\n    \n    # Helper function to check and fill diagonal sequences\n    def check_and_fill_diagonal(start_row, start_col, row_dir, col_dir):\n        sequence = []\n        r, c = start_row, start_col\n        while 0 <= r < grid.shape[0] and 0 <= c < grid.shape[1]:\n            if grid[r, c] == 2:\n                sequence.append((r,c))\n            elif len(sequence) > 0:\n                break # sequence stopped\n            r += row_dir\n            c += col_dir\n\n        if len(sequence) >= 2: # at least 2 for connecting between\n            min_row = min(sequence, key=lambda x: x[0])[0]\n            max_row = max(sequence, key=lambda x: x[0])[0]\n            min_col = min(sequence, key=lambda x: x[1])[1]\n            max_col = max(sequence, key=lambda x: x[1])[1]\n\n            # infer dir of the sequence\n            r_dir = 1 if max_row > min_row else -1\n            c_dir = 1 if max_col > min_col else -1\n\n            # now fill\n            r, c = min_row + r_dir, min_col + c_dir # start from after first in seq\n            while r != max_row and c != max_col:\n                if output_grid[r,c] == 0:\n                    output_grid[r, c] = 4\n                r += r_dir\n                c += c_dir\n                \n\n    for start_row in range(grid.shape[0]):\n        check_and_fill_diagonal(start_row, 0, 1, 1)      # downright\n        check_and_fill_diagonal(start_row, 0, 1, -1)     # downleft\n        check_and_fill_diagonal(start_row, grid.shape[1]-1, 1, -1)  #upleft from right edge\n        check_and_fill_diagonal(start_row, grid.shape[1]-1, 1, 1) # upright form right edge\n\n    for start_col in range(1,grid.shape[1]): # avoid double count\n        check_and_fill_diagonal(0, start_col, 1, 1) # downright\n        check_and_fill_diagonal(0, start_col, 1, -1) # downleft\n\n    for start_col in range(0,grid.shape[1]-1): # avoid double count\n        check_and_fill_diagonal(0, start_col, -1, 1)   # upright\n        check_and_fill_diagonal(0, start_col, -1, -1)   # upleft\n\n    return output_grid\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n\n    # get all red pixels\n    red_pixels = get_red_pixels(input_grid)\n    \n    # fill horizontally between red pixels\n    output_grid = fill_horizontal(output_grid, red_pixels)\n\n    # fill vertically between red pixels\n    output_grid = fill_vertical(output_grid, red_pixels)\n    \n    # fill diagonally between red pixels\n    output_grid = fill_diagonal(output_grid, red_pixels)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2209,
    "candidates_token_count": 1416,
    "total_token_count": 3625,
    "cached_content_token_count": 0
  },
  "response_time": 13.367968,
  "response_file": "008-response.json"
}