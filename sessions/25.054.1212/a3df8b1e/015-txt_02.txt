import numpy as np

def find_blue_pixel(grid):
    # Find the coordinates of the blue pixel (value 1).
    for r_idx, row in enumerate(grid):
        for c_idx, pixel in enumerate(row):
            if pixel == 1:
                return r_idx, c_idx
    return None  # Should not happen in valid cases, as a blue pixel is expected

def transform(input_grid):
    # Initialize output_grid as a copy of the input grid, then convert to all white.
    output_grid = np.zeros_like(input_grid)

    # Find the blue pixel's location.
    blue_pixel_location = find_blue_pixel(input_grid)

    if blue_pixel_location:
      center_row, center_col = blue_pixel_location

      # Create the cross pattern.
      for r_idx in range(output_grid.shape[0]):
          output_grid[r_idx, center_col] = 1  # Vertical line of the cross.
      for c_idx in range(output_grid.shape[1]):
          output_grid[center_row, c_idx] = 1  # Horizontal line of the cross.
    return output_grid

# Example grids from the prompt
input_grids = [
    np.array([[0, 0],[0, 0],[0, 0],[0, 0],[0, 0],[0, 0],[0, 0],[0, 0],[0, 0],[1, 0]]),
    np.array([[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[1, 0, 0]]),
    np.array([[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[1, 0, 0, 0]])
]
expected_outputs = [
    np.array([[0, 1],[1, 0],[0, 1],[1, 0],[0, 1],[1, 0],[0, 1],[1, 0],[0, 1],[1, 0]]),
    np.array([[0, 1, 0],[1, 0, 0],[0, 1, 0],[0, 0, 1],[0, 1, 0],[1, 0, 0],[0, 1, 0],[0, 0, 1],[0, 1, 0],[1, 0, 0]]),
    np.array([[0, 0, 0, 1],[0, 0, 1, 0],[0, 1, 0, 0],[1, 0, 0, 0],[0, 1, 0, 0],[0, 0, 1, 0],[0, 0, 0, 1],[0, 0, 1, 0],[0, 1, 0, 0],[1, 0, 0, 0]])
]

# Transform each example and print the results.
results = []
for i, input_grid in enumerate(input_grids):
  transformed_grid = transform(input_grid)
  results.append((input_grid.tolist(), expected_outputs[i].tolist(), transformed_grid.tolist()))

print(results)