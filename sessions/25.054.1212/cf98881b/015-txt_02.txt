import numpy as np

def analyze_grid(grid, name):
    grid = np.array(grid)
    dimensions = grid.shape
    unique_colors = np.unique(grid)
    color_counts = {color: np.count_nonzero(grid == color) for color in unique_colors}
    print(f"{name}:")
    print(f"  Dimensions: {dimensions}")
    print(f"  Unique Colors: {unique_colors}")
    print(f"  Color Counts: {color_counts}")

examples = [
    {
        "input": [
            [0, 4, 0, 4, 2, 9, 9, 0, 0, 2, 0, 0, 0, 0],
            [0, 4, 0, 0, 2, 0, 0, 9, 9, 2, 0, 1, 0, 0],
            [4, 0, 0, 0, 2, 0, 0, 0, 0, 2, 1, 1, 1, 0],
            [4, 4, 4, 4, 2, 9, 0, 9, 0, 2, 1, 1, 0, 1]
        ],
        "expected": [
            [9, 4, 0, 4],
            [0, 4, 9, 9],
            [4, 1, 1, 0],
            [4, 4, 4, 4]
        ],
        "predicted": [
            [9, 9, 0, 0],
            [0, 0, 9, 9],
            [0, 0, 0, 0],
            [9, 0, 9, 0]
        ]
    },
    {
        "input": [
            [4, 4, 4, 4, 2, 9, 0, 9, 0, 2, 0, 0, 0, 1],
            [4, 4, 0, 0, 2, 9, 9, 0, 0, 2, 1, 0, 0, 0],
            [4, 0, 4, 4, 2, 0, 0, 0, 9, 2, 0, 1, 0, 1],
            [0, 0, 0, 0, 2, 0, 0, 9, 0, 2, 1, 0, 1, 0]
        ],
        "expected": [
            [4, 4, 4, 4],
            [4, 4, 0, 0],
            [4, 1, 4, 4],
            [1, 0, 9, 0]
        ],
        "predicted": [
            [9, 0, 9, 0],
            [9, 9, 0, 0],
            [0, 0, 0, 9],
            [0, 0, 9, 0]
        ]
    },
    {
       "input": [
            [4, 4, 4, 0, 2, 9, 9, 0, 9, 2, 0, 1, 0, 1],
            [0, 4, 0, 4, 2, 0, 0, 9, 0, 2, 0, 1, 0, 0],
            [0, 4, 0, 4, 2, 0, 0, 9, 9, 2, 1, 0, 0, 1],
            [4, 0, 4, 4, 2, 9, 9, 9, 0, 2, 0, 0, 0, 1]
        ],
        "expected": [
            [4, 4, 4, 9],
            [0, 4, 9, 4],
            [1, 4, 9, 4],
            [4, 9, 4, 4]
        ],
        "predicted": [
            [9, 9, 0, 9],
            [0, 0, 9, 0],
            [0, 0, 9, 9],
            [9, 9, 9, 0]
        ]
    },
    {
        "input": [
            [0, 0, 0, 4, 2, 0, 0, 0, 9, 2, 0, 0, 0, 0],
            [4, 4, 0, 4, 2, 9, 0, 9, 0, 2, 0, 0, 0, 0],
            [4, 0, 4, 4, 2, 0, 9, 9, 0, 2, 1, 1, 0, 1],
            [0, 4, 4, 4, 2, 0, 9, 0, 0, 2, 1, 1, 1, 1]
        ],
        "expected": [
            [0, 0, 0, 4],
            [4, 4, 9, 4],
            [4, 9, 4, 4],
            [1, 4, 4, 4]
        ],
        "predicted": [
            [0, 0, 0, 9],
            [9, 0, 9, 0],
            [0, 9, 9, 0],
            [0, 9, 0, 0]
        ]
    },
    {
        "input": [
            [4, 0, 4, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 1],
            [4, 4, 4, 4, 2, 0, 0, 0, 9, 2, 1, 1, 0, 0],
            [0, 4, 4, 4, 2, 0, 9, 9, 0, 2, 1, 1, 0, 1],
            [0, 4, 4, 0, 2, 0, 0, 9, 0, 2, 0, 1, 0, 1]
        ],
        "expected": [
            [4, 0, 4, 1],
            [4, 4, 4, 4],
            [1, 4, 4, 4],
            [0, 4, 4, 1]
        ],
        "predicted": [
            [0, 0, 0],
            [0, 0, 9],
            [9, 9, 0],
            [0, 9, 0]
        ]
    }
]

for i, example in enumerate(examples):
    print(f"Example {i+1}:")
    analyze_grid(example["input"], "  Input")
    analyze_grid(example["expected"], "  Expected")
    analyze_grid(example["predicted"], "  Predicted")
    print("-" * 20)