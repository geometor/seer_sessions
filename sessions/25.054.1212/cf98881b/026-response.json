{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nExtracts a subgrid from the input grid. The subgrid is defined by the bounding box of the largest contiguous yellow region, includes directly adjacent blue squares, and all other colors within this region are changed to white.\n\"\"\"\n\nimport numpy as np\n\ndef find_largest_object(grid, color):\n    # implementation of depth first search\n    visited = np.zeros_like(grid, dtype=bool)\n    max_size = 0\n    max_object_coords = []\n\n    def dfs(row, col):\n        if (row < 0 or row >= grid.shape[0] or col < 0 or col >= grid.shape[1] or\n                visited[row, col] or grid[row, col] != color):\n            return 0, []\n\n        visited[row, col] = True\n        size = 1\n        coords = [(row, col)]\n\n        # Explore all 8 neighbors (including diagonals).\n        for dr in [-1, 0, 1]:\n            for dc in [-1, 0, 1]:\n                if dr == 0 and dc == 0:\n                    continue\n                new_size, new_coords = dfs(row + dr, col + dc)\n                size += new_size\n                coords.extend(new_coords)\n\n        return size, coords\n\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] == color and not visited[r, c]:\n                size, coords = dfs(r, c)\n                if size > max_size:\n                    max_size = size\n                    max_object_coords = coords\n    return max_object_coords\n\ndef get_bounding_box(coords):\n    min_row = min(c[0] for c in coords)\n    max_row = max(c[0] for c in coords)\n    min_col = min(c[1] for c in coords)\n    max_col = max(c[1] for c in coords)\n    return min_row, max_row, min_col, max_col\n\ndef expand_bounding_box_for_blue(input_grid, bbox):\n    min_row, max_row, min_col, max_col = bbox\n    expanded_coords = []\n\n    for r in range(min_row, max_row+1):\n      for c in range(min_col, max_col+1):\n        if input_grid[r,c] == 1: #blue\n            #check neighbors to expand\n            for dr in [-1, 0, 1]:\n                for dc in [-1, 0, 1]:\n                    if dr == 0 and dc == 0:\n                        continue\n                    nr, nc = r + dr, c + dc\n                    if 0 <= nr < input_grid.shape[0] and 0 <= nc < input_grid.shape[1]:\n                      expanded_coords.append((nr,nc))\n\n    if len(expanded_coords) > 0:\n        er, ec, _, _ = get_bounding_box(expanded_coords)\n        min_row = min(min_row, er)\n        max_row = max(max_row, er)\n        min_col = min(min_col, ec)\n        max_col = max(max_col, ec)\n    return  min_row, max_row, min_col, max_col\n\ndef transform(input_grid):\n    # Find the largest yellow object.\n    yellow_coords = find_largest_object(input_grid, 4)\n\n    # Get its bounding box.\n    bbox = get_bounding_box(yellow_coords)\n\n    # expand for adjacent blue\n    bbox = expand_bounding_box_for_blue(input_grid, bbox)\n    min_row, max_row, min_col, max_col = bbox\n\n    # Extract the subgrid.\n    output_grid = input_grid[min_row:max_row+1, min_col:max_col+1].copy()\n\n    # Replace colors other than yellow and blue with white within subgrid\n    for r in range(output_grid.shape[0]):\n      for c in range(output_grid.shape[1]):\n        if output_grid[r,c] != 4 and output_grid[r,c] != 1:\n          output_grid[r,c] = 0\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2273,
    "candidates_token_count": 1030,
    "total_token_count": 3303,
    "cached_content_token_count": 0
  },
  "response_time": 9.687049,
  "response_file": "026-response.json"
}