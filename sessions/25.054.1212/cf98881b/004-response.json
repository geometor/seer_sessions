{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Target Columns:** Examine the input grid and identify columns that contain at least one pixel with the color 4 (yellow), 9 (maroon), or 1 (blue).\n\n2.  **Determine Column Output Order:** Order the target columns based on the row index of the *first* occurrence of colors 4, 9, or 1 within each target column. Sort these columns in ascending order of this row index.\n\n3.  **Extract Subgrid:** Create a new, intermediate grid containing *only* the target columns, *preserving the newly determined order.*\n\n4.  **Vertical Reduction:** Within each column of the intermediate grid:\n    *   Identify contiguous vertical sequences (blocks) of the *same* color.\n    *   Keep only the *first* such sequence encountered in each column, setting other pixels in that column to color 0 (white).\n\n5.  **Limit Size:** Keep only the first 4 columns (or fewer if less than 4 were created)\n\n6.  **Output:** The resulting grid is the final output.\n\"\"\"\n\nimport numpy as np\n\ndef get_target_columns(input_grid):\n    \"\"\"\n    Identifies columns containing 9, 4, or 1, and returns them with their first occurrence row index.\n    \"\"\"\n    target_columns = []\n    for j in range(input_grid.shape[1]):\n        for i in range(input_grid.shape[0]):\n            if input_grid[i, j] in (9, 4, 1):\n                target_columns.append((j, i))  # Store column index and row index of first occurrence\n                break  # Move to the next column after finding the first target color\n    return target_columns\n\ndef order_columns(target_columns):\n    \"\"\"\n    Orders target columns based on the row index of the first occurrence of 9, 4, or 1.\n    \"\"\"\n    target_columns.sort(key=lambda x: x[1])  # Sort by the row index (second element of the tuple)\n    return target_columns\n\ndef extract_subgrid(input_grid, ordered_columns):\n    \"\"\"\n    Extracts a subgrid based on the ordered target columns.\n    \"\"\"\n    column_indices = [col for col, _ in ordered_columns]\n    subgrid = input_grid[:, column_indices]\n    return subgrid\n\ndef reduce_vertically(input_grid):\n    \"\"\"\n    Keeps only the first contiguous vertical sequence of each color in each column.\n    \"\"\"\n    output_grid = np.zeros_like(input_grid)\n    rows, cols = input_grid.shape\n\n    for j in range(cols):\n        first_sequence_found = {}  # Track if the first sequence of a color has been found\n        current_sequence_color = -1  # Initialize with a non-existent color\n        \n        for i in range(rows):\n            current_color = input_grid[i,j]\n            \n            if current_color not in first_sequence_found:  # New color encountered\n               \n                if current_color != 0:\n                  first_sequence_found[current_color] = True # found the first instance\n                  current_sequence_color = current_color\n                  output_grid[i,j] = current_color\n                else:\n                  output_grid[i,j] = 0 # still white / blank\n            elif current_color == current_sequence_color: # if we are in a sequence\n                output_grid[i, j] = current_color\n            else:\n                output_grid[i,j] = 0\n\n    return output_grid\n    \n\ndef transform(input_grid):\n    # initialize output_grid\n    input_grid = np.array(input_grid)\n\n    # get target columns and the row index of the first occurrence of the target colors\n    target_cols = get_target_columns(input_grid)\n    \n    # order the target columns by the first occurence\n    ordered_cols = order_columns(target_cols)\n\n    # extract the subgrid, using the reordered columns\n    subgrid = extract_subgrid(input_grid, ordered_cols)\n\n    # reduce each column vertically, keeping only first contiguous sequence\n    reduced_grid = reduce_vertically(subgrid)\n    \n    # select at most the first 4 columns\n    output_grid = reduced_grid[:, :4]\n    \n    return output_grid.tolist()\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4588,
    "candidates_token_count": 1017,
    "total_token_count": 5605,
    "cached_content_token_count": 0
  },
  "response_time": 10.625402,
  "response_file": "004-response.json"
}