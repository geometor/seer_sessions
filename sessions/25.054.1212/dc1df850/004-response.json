{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Starting Points:** Locate all red pixels (value 2) in the grid.\n2.  **Propagate Blue:** For each red pixel, change the color of connected white pixels (value 0) to its right and below it to blue (value 1). The change stops when a non-white pixel is encountered in either direction.\n3.  **Preservation:** All other color pixels stay.\n\"\"\"\n\nimport numpy as np\n\ndef flood_fill(grid, x, y):\n    \"\"\"\n    Performs a flood fill operation, changing connected white pixels (0) to blue (1)\n    to the right and below the starting point (x, y). Stops when hitting non-white pixels.\n    \"\"\"\n    if x < 0 or x >= grid.shape[1] or y < 0 or y >= grid.shape[0] or grid[y, x] != 0:\n        return\n\n    grid[y, x] = 1\n    flood_fill(grid, x + 1, y)  # Right\n    flood_fill(grid, x, y + 1)  # Down\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the described rule.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n\n    # Iterate through all pixels in the grid\n    for y in range(output_grid.shape[0]):\n        for x in range(output_grid.shape[1]):\n            # If a red pixel is found, initiate flood fill\n            if output_grid[y, x] == 2:\n                flood_fill(output_grid, x, y)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3137,
    "candidates_token_count": 384,
    "total_token_count": 3521,
    "cached_content_token_count": 0
  },
  "response_time": 4.556654,
  "response_file": "004-response.json"
}