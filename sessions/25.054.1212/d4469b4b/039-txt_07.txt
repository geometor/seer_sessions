import numpy as np

def analyze_results(examples):
    """Analyzes the transformation results for each example."""
    
    analysis = {}
    
    for i, example in enumerate(examples):
      
      # Get the output grid by finding colored pixels
      input_grid_np = np.array(example['input'])
      non_bg_colors = input_grid_np[(input_grid_np != 0)]
      if non_bg_colors.size > 0:
        main_color = non_bg_colors[0] # main color
      else:
        main_color = None
      
      # Object indices
      main_indices = np.argwhere(input_grid_np == main_color)
      rows = np.unique(main_indices[:, 0])
      cols = np.unique(main_indices[:, 1])

      # Bounding box
      if len(main_indices) > 0:
          min_row, min_col = np.min(main_indices, axis=0)
          max_row, max_col = np.max(main_indices, axis=0)
          bounding_box_height = max_row - min_row + 1
          bounding_box_width = max_col - min_col + 1
      else:
        min_row, min_col = 0,0
        bounding_box_height = 0
        bounding_box_width = 0
      
      analysis[f'example_{i+1}'] = {
        'main_color': int(main_color) if main_color is not None else None,
        'bounding_box_height': int(bounding_box_height),
        'bounding_box_width': int(bounding_box_width),
        'output_height': np.array(example['output']).shape[0] if isinstance(example['output'], list) and len(example['output']) > 0 and isinstance(example['output'][0], list)  else 0,
        'output_width': np.array(example['output']).shape[1] if isinstance(example['output'], list) and len(example['output']) > 0 and isinstance(example['output'][0], list) else 0,
        'relative_positions': [[int(r - min_row), int(c-min_col)] for r, c in main_indices]
      }
    return analysis

examples = [
    {'input': [[2, 0, 0, 0, 0], [0, 2, 0, 0, 2], [2, 0, 0, 2, 0], [0, 0, 0, 2, 2], [0, 0, 2, 2, 0]], 'output': [[5, 5, 5], [0, 5, 0], [0, 5, 0]]},
    {'input': [[0, 0, 0, 0, 0], [0, 0, 1, 1, 1], [0, 1, 0, 1, 1], [0, 1, 0, 1, 0], [0, 0, 0, 0, 1]], 'output': [[0, 5, 0], [5, 5, 5], [0, 5, 0]]},
    {'input': [[3, 0, 0, 0, 0], [0, 0, 0, 3, 3], [0, 3, 3, 0, 0], [0, 3, 0, 3, 0], [3, 0, 3, 3, 0]], 'output': [[0, 0, 5], [0, 0, 5], [5, 5, 5]]},
    {'input': [[1, 0, 1, 0, 0], [1, 0, 0, 1, 1], [1, 1, 0, 1, 0], [0, 1, 0, 1, 0], [1, 0, 0, 0, 1]], 'output': [[0, 5, 0], [5, 5, 5], [0, 5, 0]]},
    {'input': [[2, 0, 2, 0, 2], [2, 0, 0, 0, 2], [2, 2, 0, 0, 0], [2, 0, 0, 2, 2], [2, 2, 2, 0, 2]], 'output': [[5, 5, 5], [0, 5, 0], [0, 5, 0]]},
    {'input': [[0, 2, 0, 2, 0], [0, 2, 2, 2, 0], [0, 2, 2, 0, 2], [2, 2, 2, 0, 0], [0, 0, 2, 0, 2]], 'output': [[5, 5, 5], [0, 5, 0], [0, 5, 0]]},
    {'input': [[0, 3, 0, 3, 0], [3, 3, 0, 0, 0], [0, 3, 0, 0, 0], [0, 0, 3, 0, 0], [3, 3, 3, 0, 0]], 'output': [[0, 0, 5], [0, 0, 5], [5, 5, 5]]}
]

analysis = analyze_results(examples)
print(analysis)