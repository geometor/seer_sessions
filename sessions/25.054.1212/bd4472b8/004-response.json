{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Pattern Region:** Determine the region of the input grid that defines the transformation, and copy it to the output grid.\n2.  **Copy Pattern:** The initial rows with data are copied to top of output.\n3.  **Replicate First Row Colors:** For each color in the first row of the input grid:\n    *   Create *two* new rows in the output grid filled with that color.\n4. **Fill with the background color:** all remaining rows are set to the background color, black (0).\n\"\"\"\n\nimport numpy as np\n\ndef get_pattern_region(input_grid):\n    # Find the last row with a non-zero value.\n    last_non_zero_row = -1\n    for i in range(input_grid.shape[0]):\n        if np.any(input_grid[i, :] != 0):\n            last_non_zero_row = i\n        else:\n            break # stop looking after a row of zeros\n\n    return input_grid[:last_non_zero_row+1, :]\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the described rule.\"\"\"\n\n    # Identify the pattern region (rows with non-zero values).\n    pattern_region = get_pattern_region(input_grid)\n\n    # Initialize the output grid with zeros.\n    output_grid = np.zeros_like(input_grid)\n\n    # Copy the original pattern region to the top of the output grid.\n    output_grid[:pattern_region.shape[0], :] = pattern_region\n\n    # Current row index in output grid.\n    current_row = pattern_region.shape[0]\n\n    # Replicate colors from the first row, creating two new rows per color.\n    if pattern_region.shape[0] > 0:\n        for color in pattern_region[0, :]:\n            output_grid[current_row, :] = color\n            current_row += 1\n            output_grid[current_row, :] = color\n            current_row += 1\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3173,
    "candidates_token_count": 474,
    "total_token_count": 3647,
    "cached_content_token_count": 0
  },
  "response_time": 23.036436,
  "response_file": "004-response.json"
}