    3 3 0
    0 3 0
    3 0 3
    ```
*   **Expected Output:**
    ```
    8 8 0
    0 8 0
    3 0 3
    ```
*   **Actual Output:**
    ```
    8 3 0
    0 3 0
    3 0 3
    ```
*   **Mismatches:**
    *   Row 0, Col 1: Expected 8, Got 3.  This is part of a horizontal run of length 2.
    *   Row 1, Col 1: Expected 8, Got 3.  This is a solitary green.

**Example 2:**

*   **Input:**
    ```
    0 3 0 0 0 3
    0 3 3 3 0 0
    0 0 0 0 3 0
    0 3 0 0 0 0
    ```
*   **Expected Output:**
    ```
    0 8 0 0 0 3
    0 8 8 8 0 0
    0 0 0 0 3 0
    0 3 0 0 0 0
    ```
*   **Actual Output:**
    ```
    0 3 0 0 0 3
    0 8 8 3 0 0
    0 0 0 0 3 0
    0 3 0 0 0 0
    ```
*   **Mismatches:**
    *   Row 1, Col 3: Expected 8, Got 3. This is part of a run of 3.

**Example 3:**

*   **Input:**
    ```
    3 3 0 3
    3 3 0 0
    3 0 0 3
    0 0 3 3
    ```
*   **Expected Output:**
    ```
    8 8 0 3
    8 8 0 0
    8 0 0 8
    0 0 8 8
    ```
*   **Actual Output:**
    ```
    8 3 0 3
    8 3 0 0
    3 0 0 3
    0 0 8 3
    ```
*   **Mismatches:** Too many to list individually, but the pattern is clear. Runs of length 2 *are* transformed, solitary greens and isolated runs of one are *not*. And, in the third row, a single green next to a length-two run *is* transformed. This challenges the "entire run" idea.

**Example 4:**
* Input and Expected Output omitted for brevity, similar detailed analysis as above.

**YAML Facts:**
