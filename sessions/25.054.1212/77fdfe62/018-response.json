{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify the Blue Frame:** Locate the outermost rectangular frame of blue (1) pixels within the input grid. This frame may or may not be a complete rectangle, but its corners can always be identified.\n2.  **Locate Corners:** Determine the row and column coordinates of the top-left, top-right, bottom-left, and bottom-right corners of this blue frame.\n3.  **Extract Adjacent Colors:** For each corner of the blue frame, find the color of the *directly* adjacent pixel *outside* the frame:\n    *   Top-left corner:  Pixel above and to the left.\n    *   Top-right corner: Pixel above and to the right.\n    *   Bottom-left corner: Pixel below and to the left.\n    *   Bottom-right corner: Pixel below and to the right.\n    *   If a corner is at the edge of the input grid and has no adjacent pixel in the specified direction, use the color black (0).\n4.  **Create 2x2 Output Grid:** Create a new 2x2 grid.\n5.  **Populate Output Quadrants:** Fill each quadrant of the 2x2 output grid with the adjacent colors obtained in step 3:\n    *   Top-left quadrant: Color adjacent to the top-left corner of the blue frame.\n    *   Top-right quadrant: Color adjacent to the top-right corner of the blue frame.\n    *   Bottom-left quadrant: Color adjacent to the bottom-left corner of the blue frame.\n    *   Bottom-right quadrant: Color adjacent to the bottom-right corner of the blue frame.\n\"\"\"\n\nimport numpy as np\n\ndef get_frame_boundaries(grid):\n    # Find the outermost blue (1) frame.\n    rows, cols = grid.shape\n    top_left = None\n    top_right = None\n    bottom_left = None\n    bottom_right = None\n\n    # Find top-left\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r,c] == 1:\n                top_left = (r,c)\n                break\n        if top_left:\n            break\n\n    #Find other coners based on knowledge that it is rectangular and 1 pixel wide\n    if top_left:\n      for r in range(rows):\n        for c in range(cols):\n          if grid[r,c] == 1:\n            if r == top_left[0] and c > top_left[1]:\n                top_right = (r,c)\n            if c == top_left[1] and r > top_left[0]:\n                bottom_left = (r, c)\n            if bottom_left and top_right and r > top_left[0] and c > top_left[1] and grid[r, c] ==1:\n                bottom_right = (r, c)\n    return top_left, top_right, bottom_left, bottom_right\n\ndef get_adjacent_color(grid, coord, direction):\n    # Get the color of the pixel *directly* adjacent to the given coordinate.\n    rows, cols = grid.shape\n    r, c = coord\n\n    if direction == 'top_left':\n        new_r, new_c = r - 1, c - 1\n    elif direction == 'top_right':\n        new_r, new_c = r - 1, c + 1\n    elif direction == 'bottom_left':\n        new_r, new_c = r + 1, c - 1\n    elif direction == 'bottom_right':\n        new_r, new_c = r + 1, c + 1\n    else:\n        return 0  # Should not happen\n    \n    # check direct adjacency above, below, left and right\n    if direction == 'top_left':\n      if r > 0 and grid[r-1,c] != 1:\n          return grid[r-1, c]\n      elif c > 0 and grid[r, c-1] != 1:\n          return grid[r, c-1]\n    elif direction == 'top_right':\n      if r > 0 and grid[r-1, c] != 1:\n        return grid[r-1, c]\n      elif c < cols -1 and grid[r, c+1] != 1:\n        return grid[r, c+1]\n    elif direction == 'bottom_left':\n      if r < rows - 1 and grid[r + 1, c] != 1:\n        return grid[r+1, c]\n      elif c > 0 and grid[r, c-1] != 1:\n        return grid[r, c-1]\n    elif direction == 'bottom_right':\n      if r < rows -1 and grid[r+1,c] != 1:\n        return grid[r+1, c]\n      elif c < cols - 1 and grid[r, c+1] != 1:\n        return grid[r, c+1]\n\n\n    if 0 <= new_r < rows and 0 <= new_c < cols:\n        if grid[new_r, new_c] != 1:\n          return grid[new_r, new_c]\n        else: return 0\n    else:\n        return 0  # Default to black (0) if out of bounds\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the defined rule.\"\"\"\n\n    # Find the blue frame boundaries\n    top_left, top_right, bottom_left, bottom_right = get_frame_boundaries(input_grid)\n\n    # Handle cases where no blue frame is found\n    if not all([top_left, top_right, bottom_left, bottom_right]):\n        return np.zeros((2, 2), dtype=int)  # Return a 2x2 grid with 0s\n\n    # Extract adjacent colors from input, handling boundary conditions\n    corner_colors = {\n        'top_left': get_adjacent_color(input_grid, top_left, 'top_left'),\n        'top_right': get_adjacent_color(input_grid, top_right, 'top_right'),\n        'bottom_left': get_adjacent_color(input_grid, bottom_left, 'bottom_left'),\n        'bottom_right': get_adjacent_color(input_grid, bottom_right, 'bottom_right')\n    }\n\n    # Create a 2x2 output grid\n    output_grid = np.array([\n        [corner_colors['top_left'], corner_colors['top_right']],\n        [corner_colors['bottom_left'], corner_colors['bottom_right']]\n    ], dtype=int)\n    \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5132,
    "candidates_token_count": 1562,
    "total_token_count": 6694,
    "cached_content_token_count": 0
  },
  "response_time": 12.955382,
  "response_file": "018-response.json"
}