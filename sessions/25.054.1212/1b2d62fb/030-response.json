{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Find Azure Column:** Locate the column in the input grid containing azure (color 8) pixels. Note the column index.\n2.  **Select Columns:** Identify up to three columns:\n    *   The column immediately to the left of the azure column (if it exists).\n    *   The azure column itself.\n    *   The column immediately to the right of the azure column (if it exists).\n3.  **Create Output Grid:** Create an output grid with the same number of rows as the input grid, and with a number of columns the same as the number of `selected_columns`.\n4.  **Transform Pixels in Selected Columns**\n    * Set all pixels in the selected columns to black (0)\n    * For each azure (8) pixel in the original input's azure column, place an azure (8) pixel in the same row in the output grid's middle column.\n    * Additionally, place azure pixels in the rows *immediately above and below* the original azure pixel's row in the output grid's middle column, as long as the row is within range. This means the 8 is duplicated above and below its original position.\n\"\"\"\n\nimport numpy as np\n\ndef find_azure_column(grid):\n    \"\"\"Finds the column index containing azure (8) pixels.\"\"\"\n    for j in range(grid.shape[1]):\n        if 8 in grid[:, j]:\n            return j\n    return -1\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the described rule.\"\"\"\n    azure_column_index = find_azure_column(input_grid)\n    rows = input_grid.shape[0]\n\n    # Determine relevant columns\n    selected_columns = []\n    if azure_column_index - 1 >= 0:\n        selected_columns.append(azure_column_index - 1)\n    selected_columns.append(azure_column_index)\n    if azure_column_index + 1 < input_grid.shape[1]:\n        selected_columns.append(azure_column_index + 1)\n\n    # Initialize output_grid\n    output_grid = np.zeros((rows, len(selected_columns)), dtype=int)\n\n    # Find the rows where the azure pixel is located in the input\n    azure_rows = np.where(input_grid[:, azure_column_index] == 8)[0]\n\n    # Middle column index of the *output* grid\n    output_middle_column = len(selected_columns) // 2\n\n    # Place the azure pixels in the center column\n    for row in azure_rows:\n        output_grid[row, output_middle_column] = 8\n\n        if row - 1 >= 0:\n            output_grid[row - 1, output_middle_column] = 8\n        if row + 1 < rows:\n            output_grid[row + 1, output_middle_column] = 8\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4117,
    "candidates_token_count": 674,
    "total_token_count": 4791,
    "cached_content_token_count": 0
  },
  "response_time": 5.576669,
  "response_file": "030-response.json"
}