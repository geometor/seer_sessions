{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nApplies a color substitution cipher to an input grid. The cipher is determined\nuniquely for each input/output pair by creating a one-to-one mapping between\nthe sorted unique colors present in the input and output grids.\n\"\"\"\n\nimport numpy as np\n\ndef get_unique_colors(grid):\n    \"\"\"Returns a sorted list of unique colors in a grid.\"\"\"\n    return sorted(list(np.unique(grid)))\n\ndef create_color_mapping(input_colors, output_colors):\n    \"\"\"\n    Creates a dictionary mapping input colors to output colors.\n    Assumes the two lists are of the same length.\n    \"\"\"\n    color_map = {}\n    for i in range(len(input_colors)):\n        color_map[input_colors[i]] = output_colors[i]\n    return color_map\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms an input grid by applying a color substitution cipher,\n    determined uniquely for each input/output pair.\n    \"\"\"\n    # initialize output_grid as a copy of the input grid\n    output_grid = np.copy(input_grid)\n\n    # get unique colors from input and expected output\n    input_colors = get_unique_colors(input_grid)\n    # NOTE:  we don't have the output grid at runtime\n    # the following line would be invalid in final solution,\n    # but it will help us generate correct intermediate code:\n    output_colors = get_unique_colors(output_grid) # placeholder, will remove.\n\n\n    # establish color mapping\n    color_map = create_color_mapping(input_colors, output_colors)\n\n    # apply color substitution\n    for i in range(output_grid.shape[0]):\n        for j in range(output_grid.shape[1]):\n            if output_grid[i, j] in color_map:\n                output_grid[i, j] = color_map[output_grid[i, j]]\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3369,
    "candidates_token_count": 455,
    "total_token_count": 3824,
    "cached_content_token_count": 0
  },
  "response_time": 5.345424,
  "response_file": "011-response.json"
}