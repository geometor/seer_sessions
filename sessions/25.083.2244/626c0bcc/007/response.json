{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Input:** Receive a 2D grid of integers (0-9), where each integer represents a color.\n\n2.  **Cluster Identification:** Identify all distinct clusters of azure (8) colored pixels.  Pixels are part of the same cluster if they are directly adjacent horizontally or vertically (not diagonally).\n\n3.  **Extrema Identification (Revised):** Within each identified azure cluster:\n    *   **Top-Left:** Find all pixels with minimum row. Of those, find the one the smallest column.\n    *   **Top-Right:** Find all pixels with the minimum row. Of those, find the one with the largest column.\n    *   **Bottom-Left:** Find all pixels with the maximum row. Of those, find the one with the smallest column.\n    *   **Bottom-Right:** Find all pixels with maximum row, and of those, find the one with maximum column.\n\n4.  **Color Transformation:** Change the colors of the identified extrema pixels as follows:\n    *   Top-Left pixel: Change to blue (1).\n    *   Top-Right pixel: Change to yellow (4).\n    *   Bottom-Left pixel: Change to green (3).\n    *   Bottom-Right pixel: Change to red (2).\n\n5.  **Preservation:** Ensure all pixels that are *not* azure retain their original color.\n\n6.  **Output:** Return the modified 2D grid with the color transformations applied to the identified extrema pixels within each azure cluster.\n\"\"\"\n\nimport numpy as np\n\ndef find_clusters(grid, color):\n    \"\"\"\n    Finds clusters of a specific color in the grid.\n    \"\"\"\n    visited = set()\n    clusters = []\n\n    def is_valid(row, col):\n        return 0 <= row < grid.shape[0] and 0 <= col < grid.shape[1]\n\n    def dfs(row, col, current_cluster):\n        if (row, col) in visited or not is_valid(row, col) or grid[row, col] != color:\n            return\n\n        visited.add((row, col))\n        current_cluster.append((row, col))\n\n        # Explore adjacent cells (up, down, left, right)\n        dfs(row + 1, col, current_cluster)\n        dfs(row - 1, col, current_cluster)\n        dfs(row, col + 1, current_cluster)\n        dfs(row, col - 1, current_cluster)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] == color and (row, col) not in visited:\n                current_cluster = []\n                dfs(row, col, current_cluster)\n                clusters.append(current_cluster)\n\n    return clusters\n\ndef get_cluster_extrema(cluster):\n    \"\"\"\n    Find the top-left, top-right, bottom-left, and bottom-right pixel coordinates of a cluster.\n    Revised to handle multiple min/max rows/cols.\n    \"\"\"\n    if not cluster:\n        return None, None, None, None\n\n    rows, cols = zip(*cluster)\n    min_row, max_row = min(rows), max(rows)\n    min_col, max_col = min(cols), max(cols)\n\n    # Find all pixels with the minimum row\n    top_pixels = [(r, c) for r, c in cluster if r == min_row]\n    # Top-Left: Minimum row, minimum column among top pixels\n    top_left = min(top_pixels, key=lambda x: x[1])\n    # Top-Right: Minimum row, maximum column among top pixels\n    top_right = max(top_pixels, key=lambda x: x[1])\n\n    # Find all pixels with maximum row\n    bottom_pixels = [(r,c) for r,c in cluster if r == max_row]\n    # Bottom-Left: Maximum row, minimum column among bottom pixels\n    bottom_left = min(bottom_pixels, key=lambda x: x[1])\n    # Bottom-Right: Maximum row, maximum column among bottom pixels.\n    bottom_right = max(bottom_pixels, key=lambda x: x[1])\n\n    return top_left, top_right, bottom_left, bottom_right\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the identified rule.\n    \"\"\"\n    input_grid = np.array(input_grid)\n    output_grid = input_grid.copy()\n    \n    # Find azure clusters\n    azure_clusters = find_clusters(input_grid, 8)\n    \n    # Iterate through each cluster\n    for cluster in azure_clusters:\n        # Determine extrema within cluster (refined logic)\n        top_left, top_right, bottom_left, bottom_right = get_cluster_extrema(cluster)\n\n        # Transform based on relative position\n        output_grid[top_left] = 1      # Top-left -> Blue\n        output_grid[top_right] = 4     # Top-right -> Yellow\n        output_grid[bottom_left] = 3   # Bottom-left -> Green\n        output_grid[bottom_right] = 2  # Bottom-right -> Red\n    \n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4545,
    "candidates_token_count": 1217,
    "total_token_count": 5762,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 21.516825
}