{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nNon-zero pixels are treated as objects. These objects are reordered\nvertically, with their output order being the reverse of their input\nvertical order. Objects maintain their original column if possible. All objects\nare shifted upwards to occupy the highest possible rows, checking above any\nexisting objects.\n\"\"\"\n\nimport numpy as np\n\ndef get_non_zero_objects(grid):\n    # get a list of (row, col, value) tuples for non-zero elements\n    objects = []\n    for r, row in enumerate(grid):\n        for c, value in enumerate(row):\n            if value != 0:\n                objects.append((r, c, value))\n    return objects\n\ndef find_available_row(output_grid, col, start_row=0):\n    rows = output_grid.shape[0]\n    # search for the next empty row to insert at, searching upward\n\n    for row in range(start_row, rows):\n      if output_grid[row,col] != 0:\n        start_row = row+1\n\n    for row in reversed(range(start_row,rows)):\n        if output_grid[row,col] == 0:\n            return row\n    return -1  # Should never occur if grid has space, but good practice\n\n\ndef transform(input_grid):\n    # initialize output_grid\n    input_grid = np.array(input_grid)\n    output_grid = np.zeros_like(input_grid)\n    rows, cols = input_grid.shape\n\n    # identify non-zero pixels and their coordinates\n    objects = get_non_zero_objects(input_grid)\n\n    # sort the objects by their row index (vertical order) in descending order\n    sorted_objects = sorted(objects, key=lambda x: x[0], reverse=True)\n\n    # construct the output grid\n    for obj in sorted_objects:\n        _, original_col, value = obj\n        # find available position upward in the column\n        output_row = find_available_row(output_grid, original_col)\n\n        if output_row != -1:\n           output_grid[output_row, original_col] = value\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6459,
    "candidates_token_count": 507,
    "total_token_count": 6966,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.774385
}