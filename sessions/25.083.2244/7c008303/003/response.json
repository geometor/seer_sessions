{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid into an output grid by extracting colored regions above and below a horizontal azure line, and then stacking these regions.\n\"\"\"\n\nimport numpy as np\n\ndef get_azure_line_row(grid):\n    \"\"\"Finds the row index of the horizontal azure line.\"\"\"\n    for i, row in enumerate(grid):\n        if all(pixel == 8 for pixel in row):\n            return i\n    return -1  # Should not happen given the task description\n\ndef extract_colored_columns(grid_section):\n    \"\"\"\n    Extracts colored (non-white, non-azure) pixel regions column-wise,\n    preserving relative row indices within the section.\n    Returns a list of lists, where each sublist represents a column\n    and contains tuples: (row_index, pixel_value).\n    \"\"\"\n    num_rows, num_cols = grid_section.shape\n    colored_columns = []\n\n    for j in range(num_cols):\n        col_data = []\n        for i in range(num_rows):\n            pixel = grid_section[i, j]\n            if pixel != 0 and pixel != 8:\n                col_data.append((i, pixel))  # Store row index and pixel value\n        if col_data:\n            colored_columns.append(col_data)\n    return colored_columns\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the described rules.\"\"\"\n\n    input_grid = np.array(input_grid)\n    azure_line_row = get_azure_line_row(input_grid)\n\n    # Separate the grid into sections above and below the azure line\n    top_section = input_grid[:azure_line_row]\n    bottom_section = input_grid[azure_line_row + 1:]\n\n    # Extract colored columns from each section, preserving row indices\n    top_colored_columns = extract_colored_columns(top_section)\n    bottom_colored_columns = extract_colored_columns(bottom_section)\n    \n    #find bounding box of top section\n    top_rows = 0\n    if len(top_colored_columns) > 0:\n        top_rows = max(item[0] for sublist in top_colored_columns for item in sublist) + 1\n    top_cols = len(top_colored_columns)\n\n    #find bounding box of bottom section\n    bottom_rows = 0\n    if len(bottom_colored_columns) > 0:\n        bottom_rows = max(item[0] for sublist in bottom_colored_columns for item in sublist) + 1\n    bottom_cols = len(bottom_colored_columns)\n\n    output_height = top_rows + bottom_rows\n    output_width = max(top_cols, bottom_cols)\n\n    if output_height > 0 and output_width > 0:\n      output_grid = np.zeros((output_height, output_width), dtype=int)\n    else:\n      return []\n\n    # Populate the output grid using the extracted column data\n    for j, col in enumerate(top_colored_columns):\n        for row_index, pixel_value in col:\n            output_grid[row_index, j] = pixel_value\n\n    for j, col in enumerate(bottom_colored_columns):\n        for row_index, pixel_value in col:\n            output_grid[row_index + top_rows, j] = pixel_value  # Offset by top_rows\n\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4998,
    "candidates_token_count": 811,
    "total_token_count": 5809,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.667167
}