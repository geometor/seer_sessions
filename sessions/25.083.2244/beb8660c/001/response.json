{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation rule involves identifying horizontal lines of uniform color in the input grid, and reordering them vertically in the output grid. The lines seem to be moved from top-to-bottom, preserving their original color and length, add empty rows as padding.\n\"\"\"\n\nimport numpy as np\n\ndef get_lines(grid):\n    \"\"\"\n    Identifies horizontal lines of uniform color in a grid.\n    Returns a list of tuples: (row_index, color, length)\n    \"\"\"\n    lines = []\n    for row_index, row in enumerate(grid):\n        current_color = None\n        current_length = 0\n        for cell in row:\n            if cell != 0:  # Consider 0 as background/empty\n                if current_color is None:\n                    current_color = cell\n                    current_length = 1\n                elif cell == current_color:\n                    current_length += 1\n                else:\n                    lines.append((row_index, current_color, current_length))\n                    current_color = cell\n                    current_length = 1\n            elif current_color is not None:\n                lines.append((row_index, current_color, current_length))\n                current_color = None\n                current_length = 0\n        if current_color is not None:\n            lines.append((row_index, current_color, current_length))\n    return lines\n\ndef get_empty_rows(grid):\n   \"\"\"\n   return list of empty row indexes\n   \"\"\"\n   empty_rows = []\n   for i, row in enumerate(grid):\n      if all(cell == 0 for cell in row):\n         empty_rows.append(i)\n   return empty_rows\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by reordering horizontal lines.\n    \"\"\"\n    input_grid = np.array(input_grid)\n    lines = get_lines(input_grid)\n    empty_rows = get_empty_rows(input_grid)\n\n    # Determine output grid dimensions - adding a row if needed\n    output_height = input_grid.shape[0]\n    if len(lines) + len(empty_rows) >= output_height:\n          output_height = len(lines) + len(empty_rows) + 1\n\n    output_grid = np.zeros((output_height, input_grid.shape[1]), dtype=int)\n\n\n    # Reconstruct the grid with reordered lines\n    current_row = output_grid.shape[0] - len(lines)\n\n    # sorting based on input row, but putting them last to first.\n    lines_sorted = sorted(lines, key = lambda x:x[0], reverse=False)\n\n    for row_index, color, length in lines_sorted:\n        output_grid[current_row, :length] = color\n        current_row += 1\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2104,
    "candidates_token_count": 667,
    "total_token_count": 2771,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 21.507429
}