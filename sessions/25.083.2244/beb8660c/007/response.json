{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Horizontal Lines:** Scan the input grid row by row. Identify contiguous horizontal sequences of pixels with the same non-zero color. Each sequence is a \"line segment.\" Record the row index, color, length, and starting column (x-offset) of each segment.\n2.  **Determine initial output grid:** Initialize an output grid filled with zeros that is the same shape as the input grid.\n3.  **Reorder and Place:** Iterate through the identified line segments from top to bottom, based on their original row index in the input grid.\n4.  **Stacking:** Place each segment in the output grid, starting from the *bottom* row and moving upwards. Preserve the original x-offset of the segment when placing it.\n5.  **Vertical Resizing:** If, during placement, the current row index becomes negative (meaning we've run out of rows at the top), increase the height of the output grid by one row *at the top*. When inserting rows, shift existing content in the grid down by one before placing. Repeat until the line segment is placed.\n\"\"\"\n\nimport numpy as np\n\ndef get_lines(grid):\n    \"\"\"\n    Identifies horizontal lines of uniform color in a grid.\n    Returns a list of tuples: (row_index, color, length, x_offset)\n    \"\"\"\n    lines = []\n    for row_index, row in enumerate(grid):\n        current_color = None\n        current_length = 0\n        x_offset = 0\n        for x, cell in enumerate(row):\n            if cell != 0:  # Consider 0 as background/empty\n                if current_color is None:\n                    current_color = cell\n                    current_length = 1\n                    x_offset = x\n                elif cell == current_color:\n                    current_length += 1\n                else:\n                    lines.append((row_index, current_color, current_length, x_offset))\n                    current_color = cell\n                    current_length = 1\n                    x_offset = x\n            elif current_color is not None:\n                lines.append((row_index, current_color, current_length, x_offset))\n                current_color = None\n                current_length = 0\n        if current_color is not None:\n            lines.append((row_index, current_color, current_length, x_offset))\n    return lines\n\ndef transform(input_grid):\n    # initialize output_grid\n    input_grid = np.array(input_grid)\n    lines = get_lines(input_grid)\n    output_grid = np.zeros_like(input_grid)\n\n    # Reorder and Place Lines\n    current_row = output_grid.shape[0] - 1\n    lines_sorted = sorted(lines, key = lambda x:x[0], reverse=False)\n\n    for row_index, color, length, x_offset in lines_sorted:\n        # Vertical Resizing (add rows to top as needed)\n        while current_row < 0:\n            new_row = np.zeros((1, output_grid.shape[1]), dtype=int)\n            output_grid = np.vstack((new_row, output_grid))\n            current_row += 1\n\n        # Place segment with correct offset\n        output_grid[current_row, x_offset : x_offset + length] = color\n        current_row -= 1\n\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3723,
    "candidates_token_count": 785,
    "total_token_count": 4508,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 29.109469
}