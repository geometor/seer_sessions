{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Shapes:** Scan the input grid and identify all distinct, contiguous regions of non-zero pixels. Each region is a \"shape\", defined by its color, position, width, height, and constituent pixels.\n2.  **Select Shape:**\n      * If there's a yellow (color 4) shape: Select it (example 1)\n      * If there is no yellow shape, but a magenta shape exists: Select the lower of the magenta shape(s) (Example 2)\n      * If there is no yellow or magenta, select the gray (color 5) object (Example 3)\n3. **Extract Shape**: Create a new grid containing *only* the selected shape, maintaining internal zeros within the shape.\n4. **Preserve Internal Zeros (Conditional):** If the selected shape had internal zeros in the original input grid, those zero positions must be maintained in the output grid. Zeros surrounding the shape on all sides are removed.\n\"\"\"\n\nimport numpy as np\n\ndef identify_shapes(grid):\n    shapes = []\n    visited = set()\n    rows, cols = grid.shape\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def dfs(r, c, color, shape_coords):\n        if (r, c) in visited or not is_valid(r, c) or grid[r, c] != color:\n            return\n        visited.add((r, c))\n        shape_coords.append((r, c))\n        for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            dfs(r + dr, c + dc, color, shape_coords)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and (r, c) not in visited:\n                shape_coords = []\n                dfs(r, c, grid[r, c], shape_coords)\n                if shape_coords:\n                    min_r = min(coord[0] for coord in shape_coords)\n                    max_r = max(coord[0] for coord in shape_coords)\n                    min_c = min(coord[1] for coord in shape_coords)\n                    max_c = max(coord[1] for coord in shape_coords)\n                    shapes.append({\n                        'color': grid[r, c],\n                        'position': (min_r, min_c),\n                        'width': max_c - min_c + 1,\n                        'height': max_r - min_r + 1,\n                        'coords': shape_coords,\n                    })\n    return shapes\n\ndef select_shape(shapes):\n    yellow_shapes = [shape for shape in shapes if shape['color'] == 4]\n    if yellow_shapes:\n        return yellow_shapes[0]  # Return the first yellow shape (if multiple)\n\n    magenta_shapes = [shape for shape in shapes if shape['color'] == 6]\n    if magenta_shapes:\n        # Select the lowest magenta shape (largest row value in position)\n        return max(magenta_shapes, key=lambda shape: shape['position'][0])\n\n    gray_shapes = [shape for shape in shapes if shape['color'] == 5]\n    if gray_shapes:\n        return gray_shapes[0]  # Return the first gray shape\n\n    return None  # No matching shape found\n\n\ndef extract_shape(shape, grid):\n    if shape is None:\n        return np.array([])\n\n    min_r, min_c = shape['position']\n    max_r = min_r + shape['height']\n    max_c = min_c + shape['width']\n    extracted_grid = np.zeros_like(grid[min_r:max_r, min_c:max_c])\n\n    for r_in, r_out in enumerate(range(min_r, max_r)):\n        for c_in, c_out in enumerate(range(min_c, max_c)):\n             if (r_out,c_out) in shape['coords']:\n                extracted_grid[r_in, c_in] = grid[r_out,c_out]\n\n    return extracted_grid\n\ndef remove_zeros(grid):\n    if grid.size == 0:  # Handle empty grid case\n        return grid\n\n    # Remove zero rows from top\n    while grid.size > 0 and np.all(grid[0] == 0):\n        grid = grid[1:]\n\n    # Remove zero rows from bottom\n    while grid.size > 0 and np.all(grid[-1] == 0):\n        grid = grid[:-1]\n\n    if grid.size == 0: #check\n        return grid\n\n    # Remove zero columns from left\n    while grid.size > 0 and np.all(grid[:, 0] == 0):\n        grid = grid[:, 1:]\n\n    # Remove zero columns from right\n    while grid.size > 0 and np.all(grid[:, -1] == 0):\n        grid = grid[:, :-1]\n\n    return grid\n\n\ndef transform(input_grid):\n    # Convert input grid to a NumPy array\n    grid = np.array(input_grid)\n\n    # Identify shapes in the input grid\n    shapes = identify_shapes(grid)\n\n    # Select a shape\n    selected_shape = select_shape(shapes)\n    \n    # Extract shape with internal zeros\n    extracted_grid = extract_shape(selected_shape, grid)\n    \n    # remove surrounding zeros\n    output_grid = remove_zeros(extracted_grid)\n    \n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4114,
    "candidates_token_count": 1315,
    "total_token_count": 5429,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 15.889666
}