{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify the Red Shape:** Find all red (2) pixels in the input grid and consider them as a single, connected shape.\n2.  **Locate Enclosed Regions:** Within the red shape, identify two distinct regions that are completely surrounded by the red pixels. One is a small section located at the top-right. The other is the larger region located at the center.\n3. **Identify Background** The rest of the white pixels that are not enclosed by the red shape.\n4.  **Fill Top-Right Region:** Change the color of all pixels within the small, enclosed, top-right region to azure (8).\n5.  **Fill Center Region:** Change the color of all pixels within the large, enclosed, central region to blue (1).\n6. **Background remains unchanged** All other pixels retain original colors.\n\"\"\"\n\nimport numpy as np\n\ndef find_connected_components(grid, color):\n    \"\"\"Finds connected components of a specific color in the grid.\"\"\"\n    visited = np.zeros_like(grid, dtype=bool)\n    components = []\n\n    def dfs(row, col, current_component):\n        \"\"\"Depth-First Search to explore connected component.\"\"\"\n        if (row < 0 or row >= grid.shape[0] or col < 0 or col >= grid.shape[1] or\n                visited[row, col] or grid[row, col] != color):\n            return\n\n        visited[row, col] = True\n        current_component.append((row, col))\n\n        dfs(row + 1, col, current_component)\n        dfs(row - 1, col, current_component)\n        dfs(row, col + 1, current_component)\n        dfs(row, col - 1, current_component)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] == color and not visited[row, col]:\n                current_component = []\n                dfs(row, col, current_component)\n                components.append(current_component)\n    return components\n\ndef flood_fill(grid, start_row, start_col, new_color):\n    \"\"\"Fills a region with a new color using flood fill algorithm.\"\"\"\n    rows, cols = grid.shape\n    old_color = grid[start_row, start_col]\n    if old_color == new_color:\n        return grid\n\n    queue = [(start_row, start_col)]\n    grid[start_row, start_col] = new_color\n\n    while queue:\n        row, col = queue.pop(0)\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            new_row, new_col = row + dr, col + dc\n            if (0 <= new_row < rows and 0 <= new_col < cols and\n                    grid[new_row, new_col] == old_color):\n                grid[new_row, new_col] = new_color\n                queue.append((new_row, new_col))\n    return grid\n    \ndef find_enclosed_regions(grid, enclosing_color):\n    \"\"\"\n    Find regions enclosed by a given color.  This is a simplified\n    version assuming that we are checking white.\n    \"\"\"\n    rows, cols = grid.shape\n    enclosed_regions = []\n    visited = set()\n\n    # Iterate through all pixels\n    for r in range(rows):\n        for c in range(cols):\n            # Only process white (0) cells that have not been visited.\n            if grid[r,c] == 0 and (r,c) not in visited:\n                \n                q = [(r,c)]  \n                visited.add((r,c))\n                enclosed = True  # initially assume its enclosed\n                region_cells = [] # the cells in the region\n\n\n                while q:\n                    row, col = q.pop()\n                    region_cells.append((row,col))\n\n                    neighbors = [(row+1, col), (row-1, col), (row, col+1), (row, col-1)]\n\n                    for nr, nc in neighbors:\n                        if 0 <= nr < rows and 0 <= nc < cols:\n                            if grid[nr,nc] == 0 and (nr,nc) not in visited:\n                                visited.add((nr,nc))\n                                q.append((nr,nc))\n                            elif grid[nr,nc] != enclosing_color:\n                                # not enclosed or red\n                                pass # keep going\n                        else:\n                            # if you reach the edge - its not enclosed\n                            enclosed = False\n\n                if enclosed:\n                   enclosed_regions.append(region_cells)\n    return enclosed_regions\n\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the described rules.\"\"\"\n    output_grid = np.copy(input_grid)\n\n    # 1. Identify the Red Shape (all red pixels)\n    red_components = find_connected_components(input_grid, 2)\n    # Assume there's only one large red shape, might need more robust logic\n    red_shape = red_components[0] if red_components else []\n\n    # 2. & 3. Locate Enclosed Regions and background\n    enclosed_regions = find_enclosed_regions(output_grid, 2)\n\n\n    # 4. & 5. Fill Regions\n    if enclosed_regions:\n        # find top-right - sort by row, then by col to get the top-most, then\n        # rightmost\n        top_right_region = sorted(enclosed_regions, key=lambda region: (min(r for r, _ in region), -max(c for _, c in region)))\n        \n        if len(top_right_region) > 1:\n            # fill first with 8\n            for row, col in top_right_region[0]:\n                output_grid[row, col] = 8\n            \n            # then fill the rest with 1\n            for region in top_right_region[1:]:\n                for row, col in region:\n                  output_grid[row,col] = 1\n\n        else:\n            for row, col in top_right_region[0]:\n                output_grid[row,col] = 1\n            \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3119,
    "candidates_token_count": 1472,
    "total_token_count": 4591,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 15.198504,
  "response_file": "022-response.json"
}