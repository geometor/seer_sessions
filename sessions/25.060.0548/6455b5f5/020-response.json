{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Locate Red Lines:** Identify the single, contiguous, vertical red line and the single, contiguous, horizontal red line in the input grid. Either or both might not exist.\n\n2.  **Background Fill:** Change all white (0) background pixels to blue (1).\n\n3.  **Azure Fill (Conditional):**\n    *   If *both* a vertical and a horizontal red line exist:\n        *   Define an exclusion zone: This is a rectangular region whose width is defined as three columns to each side of the vertical red line and all rows making up the horizontal red line.\n        *   Fill the areas three columns to the left and three columns to the right of the vertical red line with azure (8), *excluding* any pixels within the exclusion zone.\n    *   If *only* a vertical red line exists:\n        *    Fill the areas three columns to the left and three columns to the right of the vertical red line with azure.\n    *   If *only* a horizontal red line exists:\n        *  Do *not* perform any azure fill.\n    *   If *neither* a vertical or horizontal line exist:\n        *    Do *not* perform azure fill\n\n4. Prioritize contiguous red lines.\n\"\"\"\n\nimport numpy as np\n\ndef get_vertical_red_line(grid):\n    \"\"\"Finds the single vertical red line in the grid.\"\"\"\n    red_pixels_per_column = np.sum(grid == 2, axis=0)\n    potential_line_columns = np.where(red_pixels_per_column > 0)[0]\n    \n    if potential_line_columns.size == 0:\n        return None, None\n\n    # Check for contiguity and single line\n    if np.all(np.diff(potential_line_columns) == 1) and np.sum(red_pixels_per_column == np.max(red_pixels_per_column)) == 1 :\n        start_col = potential_line_columns[0]\n        return start_col, 'vertical'\n    return None, None\n\ndef get_horizontal_red_line(grid):\n    \"\"\"Finds the single horizontal red line in the grid.\"\"\"\n    red_pixels_per_row = np.sum(grid == 2, axis=1)\n    potential_line_rows = np.where(red_pixels_per_row > 0)[0]\n     \n    if potential_line_rows.size == 0:\n        return None, None\n\n    # Check for contiguity and single line\n    if np.all(np.diff(potential_line_rows) == 1) and np.sum(red_pixels_per_row == np.max(red_pixels_per_row)) == 1:\n        start_row = potential_line_rows[0]\n        return start_row, 'horizontal'\n    return None, None\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the rules.\"\"\"\n    output_grid = np.copy(input_grid)\n\n    # Find vertical and horizontal red lines\n    vertical_line_col, _ = get_vertical_red_line(input_grid)\n    horizontal_line_row, _ = get_horizontal_red_line(input_grid)\n    \n    horizontal_line_rows = []\n    if horizontal_line_row is not None:\n      red_pixels_per_row = np.sum(input_grid == 2, axis=1)\n      horizontal_line_rows = np.where(red_pixels_per_row > 0)[0].tolist()\n\n    # Background Fill\n    output_grid[output_grid == 0] = 1\n\n    # Azure Fill (Conditional)\n    if vertical_line_col is not None:\n        for col_offset in range(1, 4):\n            # Left side\n            left_col = vertical_line_col - col_offset\n            if left_col >= 0:\n                for row_index in range(output_grid.shape[0]):\n                    if horizontal_line_row is None or row_index not in horizontal_line_rows:\n                        output_grid[row_index, left_col] = 8\n\n            # Right side\n            right_col = vertical_line_col + col_offset\n            if right_col < output_grid.shape[1]:\n                for row_index in range(output_grid.shape[0]):\n                    if horizontal_line_row is None or row_index not in horizontal_line_rows:\n                        output_grid[row_index, right_col] = 8\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3211,
    "candidates_token_count": 1053,
    "total_token_count": 4264,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.724867,
  "response_file": "020-response.json"
}