import numpy as np

def describe_grid(grid):
    rows, cols = grid.shape
    unique_colors = np.unique(grid)
    color_counts = {color: np.count_nonzero(grid == color) for color in unique_colors}
    return {
        "rows": rows,
        "cols": cols,
        "unique_colors": unique_colors.tolist(),
        "color_counts": color_counts,
    }

def find_red_cross_vertical_arm(grid):
    # Find all red pixels
    red_pixels = np.argwhere(grid == 2)

    # Find the vertical arm: Find range for rows
    if len(red_pixels) > 0:
        min_row = np.min(red_pixels[:, 0])
        max_row = np.max(red_pixels[:, 0])
    
        # Find the column that defines the vertical arm by checking for contiguous red pixels
        vertical_arm_col = -1
        for col in np.unique(red_pixels[:, 1]):
            contiguous_pixels = []
            for row in range(min_row, max_row + 1):
                if grid[row, col] == 2:
                  contiguous_pixels.append( (row, col) )

            if len(contiguous_pixels) == (max_row - min_row + 1):
                vertical_arm_col = col
                break
        return vertical_arm_col

    return -1

def transform(input_grid):
    # Initialize output grid as a copy of the input grid
    output_grid = np.copy(input_grid)
    rows, cols = input_grid.shape

    # Find the column index of the vertical arm of the red cross
    vertical_arm_col = find_red_cross_vertical_arm(input_grid)
    
    if (vertical_arm_col >= 0):
        # Iterate through the grid and change colors based on the position relative to the vertical arm
        for r in range(rows):
            for c in range(cols):
                if input_grid[r, c] == 0:  # If it's white
                    if c > vertical_arm_col:
                        output_grid[r, c] = 8  # Change to azure
                    else:
                        output_grid[r, c] = 1  # Change to blue
    return output_grid

# Example grids (replace with your actual data)
example_grids = [
    {
        "input": np.array([
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 2, 0, 0, 0, 0, 0],
            [0, 0, 0, 2, 0, 0, 0, 0, 0],
            [0, 2, 2, 2, 2, 2, 0, 0, 0],
            [0, 0, 0, 2, 0, 0, 0, 0, 0],
            [0, 0, 0, 2, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
        ]),
        "output": np.array([
            [1, 1, 1, 0, 8, 8, 8, 8, 8],
            [1, 1, 1, 2, 8, 8, 8, 8, 8],
            [1, 1, 1, 2, 8, 8, 8, 8, 8],
            [1, 2, 2, 2, 2, 2, 8, 8, 8],
            [1, 1, 1, 2, 8, 8, 8, 8, 8],
            [1, 1, 1, 2, 8, 8, 8, 8, 8],
            [1, 1, 1, 1, 8, 8, 8, 8, 8],
        ]),
    },
        {
        "input": np.array([
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ]),
        "output": np.array([
            [1, 1, 1, 1, 1, 1, 0, 8, 8, 8, 8, 8, 8, 8, 8],
            [1, 1, 1, 1, 1, 1, 0, 8, 8, 8, 8, 8, 8, 8, 8],
            [1, 1, 1, 1, 1, 1, 0, 8, 8, 8, 8, 8, 8, 8, 8],
            [1, 1, 1, 1, 1, 1, 0, 8, 8, 8, 8, 8, 8, 8, 8],
            [1, 1, 1, 1, 1, 1, 2, 8, 8, 8, 8, 8, 8, 8, 8],
            [1, 1, 1, 1, 1, 1, 2, 8, 8, 8, 8, 8, 8, 8, 8],
            [1, 1, 1, 1, 1, 1, 2, 8, 8, 8, 8, 8, 8, 8, 8],
            [1, 1, 1, 1, 1, 1, 2, 8, 8, 8, 8, 8, 8, 8, 8],
            [1, 1, 1, 1, 1, 1, 2, 8, 8, 8, 8, 8, 8, 8, 8],
            [1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8]
        ]),
    },
        {
        "input": np.array([
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ]),
        "output": np.array([
            [1, 1, 1, 1, 1, 1, 0, 8, 8, 8, 8, 8],
            [1, 1, 1, 1, 1, 1, 0, 8, 8, 8, 8, 8],
            [1, 1, 1, 1, 1, 1, 0, 8, 8, 8, 8, 8],
            [1, 1, 1, 1, 1, 1, 0, 8, 8, 8, 8, 8],
            [1, 1, 1, 1, 1, 1, 2, 8, 8, 8, 8, 8],
            [1, 1, 1, 1, 1, 1, 2, 8, 8, 8, 8, 8],
            [1, 1, 1, 1, 1, 1, 2, 8, 8, 8, 8, 8],
            [1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8]
        ]),
    },
]

for i, grids in enumerate(example_grids):
    input_grid = grids['input']
    expected_output_grid = grids['output']
    
    # apply transform
    actual_output_grid = transform(input_grid)

    print(f"Example {i + 1}:")
    print("Input Grid Description:", describe_grid(input_grid))
    print("Expected Output Grid Description:", describe_grid(expected_output_grid))
    print("Actual Output Grid Description:", describe_grid(actual_output_grid))
    
    # find the vertical arm
    vertical_arm = find_red_cross_vertical_arm(input_grid)
    print("Vertical arm col:", vertical_arm)

    # Compare the expected and actual outputs
    comparison = np.array_equal(expected_output_grid, actual_output_grid)
    print("Comparison (Expected == Actual):", comparison)
    print("-" * 30)