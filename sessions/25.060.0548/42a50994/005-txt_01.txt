import numpy as np

def get_neighbors(grid, row, col):
    """Gets the valid neighbors of a cell in a grid."""
    rows, cols = grid.shape
    neighbors = []
    for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
        nr, nc = row + dr, col + dc
        if 0 <= nr < rows and 0 <= nc < cols:
            neighbors.append((nr, nc))
    return neighbors

def is_island(grid, row, col, color):
    """Checks if a pixel is an 'island' (no neighbors of the same color)."""
    if grid[row,col] != color:
        return False

    for nr, nc in get_neighbors(grid, row, col):
        if grid[nr, nc] == color:
            return False  # Has a neighbor of the same color
    return True

def is_perimeter(grid, row, col, color):
    """Checks if a given cell is a perimeter of the given color"""
    if grid[row, col] != color:
      return False

    rows, cols = grid.shape
    if row == 0 or row == rows-1 or col == 0 or col == cols - 1:
        return True
    
    for nr, nc in get_neighbors(grid, row, col):
        if grid[nr, nc] != color:
            return True

    return False


def transform(input_grid):
    """Transforms the input grid according to the rules."""
    output_grid = np.copy(input_grid)
    rows, cols = output_grid.shape
    azure = 8

    # Iterate over all azure pixels
    for r in range(rows):
        for c in range(cols):
            if output_grid[r, c] == azure:
                # Remove island pixels.
                if is_island(output_grid, r, c, azure):
                    output_grid[r, c] = 0

                # Remove perimeter unless it is connected to neighbor
                elif is_perimeter(output_grid, r, c, azure):
                    neighbor_count = 0
                    for nr, nc in get_neighbors(output_grid, r, c):
                        if is_perimeter(output_grid, nr, nc, azure) and output_grid[nr, nc] == azure :
                            neighbor_count += 1
                    if neighbor_count == 0:
                        output_grid[r,c] = 0

    return output_grid

def compare_grids(grid1, grid2):
    """Compares two grids and returns a list of differences."""
    if grid1.shape != grid2.shape:
        return "Grids have different shapes"

    differences = []
    rows, cols = grid1.shape
    for row in range(rows):
        for col in range(cols):
            if grid1[row, col] != grid2[row, col]:
                differences.append((row, col, grid1[row, col], grid2[row, col]))
    return differences

task = '6f8b2844'
train_inputs = [
    np.array([[8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8]]),
    np.array([[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]]),
    np.array([[8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8]]),
    np.array([[8, 0, 8, 8, 8, 8, 8, 8, 8, 0, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 0, 8, 8, 8, 8, 8, 8, 8, 0, 8]])
]
train_outputs = [
    np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
    np.array([[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
    np.array([[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]),
    np.array([[8, 0, 8, 8, 8, 8, 8, 8, 8, 0, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])
]

for i, (input_grid, expected_output) in enumerate(zip(train_inputs, train_outputs)):
    predicted_output = transform(input_grid)
    differences = compare_grids(predicted_output, expected_output)
    print(f"Example {i+1}:")
    print(f"Input:\n{input_grid}")
    print(f"Expected Output:\n{expected_output}")
    print(f"Predicted Output:\n{predicted_output}")
    print(f"Differences: {differences}")
    print("-" * 20)