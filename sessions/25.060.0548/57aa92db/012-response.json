{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Locate all contiguous blocks of non-zero pixels. Each block is an object.\n2.  **Check for Single-Pixel Objects:** Determine if an object consists of only a single pixel.\n3.  **Vertical Replication:** If an object is a single pixel, replicate it vertically, filling the entire column with the object's color.\n4. **Preserve Other Objects:** Objects that consist of more then a single pixel should not be changed.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"Finds contiguous objects in a grid.\"\"\"\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n\n    def dfs(r, c, color, obj):\n        if (r < 0 or r >= grid.shape[0] or c < 0 or c >= grid.shape[1] or\n                visited[r, c] or grid[r, c] != color):\n            return\n        visited[r, c] = True\n        obj.append((r, c))\n        dfs(r + 1, c, color, obj)\n        dfs(r - 1, c, color, obj)\n        dfs(r, c + 1, color, obj)\n        dfs(r, c - 1, color, obj)\n\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] != 0 and not visited[r, c]:\n                obj = []\n                dfs(r, c, grid[r, c], obj)\n                objects.append(obj)\n    return objects\n\ndef replicate_vertically(grid, obj):\n    \"\"\"Replicates a single-pixel object vertically.\"\"\"\n    output_grid = np.copy(grid)\n    if len(obj) == 1:\n        r, c = obj[0]\n        color = grid[r,c]\n\n        # Replicate to fill the entire column\n        for i in range(0, grid.shape[0]):\n            output_grid[i, c] = color\n\n    return output_grid\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the replication rules.\"\"\"\n    # Find objects\n    objects = find_objects(input_grid)\n    # Initialize the output grid as a copy of the input.\n    output_grid = np.copy(input_grid)\n\n    # Replicate single-pixel objects vertically.\n    for obj in objects:\n        output_grid = replicate_vertically(output_grid, obj)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6787,
    "candidates_token_count": 595,
    "total_token_count": 7382,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 5.500006,
  "response_file": "012-response.json"
}