{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Shapes:** For each input grid, identify all distinct shapes. A shape is a group of connected pixels of the same color, excluding the background (black).\n2.  **Color Transformation:**\n    *   Orange (7) becomes Green (3).\n    *   Magenta (6) becomes Blue (1).\n    *  Red (2) becomes Cyan (8).\n    The color transformation is consistently applied based on the initial color, regardless of shape or position.\n3. **Preserve Geometry:** The output grid retains the exact same shapes, sizes, and positions as the input grid. Only the colors of the shapes change according to the mapping.\n\"\"\"\n\nimport numpy as np\n\ndef find_shapes(grid):\n    visited = set()\n    shapes = []\n\n    def dfs(r, c, color, shape_coords):\n        if (r, c) in visited or r < 0 or r >= grid.shape[0] or c < 0 or c >= grid.shape[1] or grid[r, c] != color:\n            return\n        visited.add((r, c))\n        shape_coords.append((r, c))\n        dfs(r + 1, c, color, shape_coords)\n        dfs(r - 1, c, color, shape_coords)\n        dfs(r, c + 1, color, shape_coords)\n        dfs(r, c - 1, color, shape_coords)\n\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if (r, c) not in visited:\n                color = grid[r, c]\n                if color != 0:  # Ignore background\n                    shape_coords = []\n                    dfs(r, c, color, shape_coords)\n                    shapes.append((color, shape_coords))\n    return shapes\n\ndef transform_color(input_color):\n    color_map = {\n        7: 3,  # Orange to Green\n        6: 1,  # Magenta to Blue\n        2: 8   # Red to Cyan\n    }\n    return color_map.get(input_color, input_color) # returns input_color if not in map\n\n\ndef transform(input_grid):\n    # initialize output_grid with the same dimensions and background color\n    output_grid = np.zeros_like(input_grid)\n\n    # identify shapes in the input grid\n    input_shapes = find_shapes(input_grid)\n    \n    # iterate through the identified shapes and transform color\n    for color, coords in input_shapes:\n        new_color = transform_color(color)\n        for r, c in coords:\n            output_grid[r, c] = new_color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4000,
    "candidates_token_count": 634,
    "total_token_count": 4634,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 5.583514,
  "response_file": "030-response.json"
}