import numpy as np

def find_blocks(grid):
    """Find contiguous blocks of the same color (excluding white/0)."""
    blocks = []
    visited = set()
    rows, cols = grid.shape

    def dfs(row, col, color, block):
        if (row, col) in visited or row < 0 or row >= rows or col < 0 or col >= cols or grid[row, col] != color:
            return
        visited.add((row, col))
        block.append((row, col))
        dfs(row + 1, col, color, block)
        dfs(row - 1, col, color, block)
        dfs(row, col + 1, color, block)
        dfs(row, col - 1, color, block)

    for r in range(rows):
        for c in range(cols):
            if (r, c) not in visited and grid[r,c] != 0:
                block = []
                dfs(r, c, grid[r, c], block)
                blocks.append(block)
    return blocks

def transform(input_grid):
    # Find blocks in the input grid
    blocks = find_blocks(np.array(input_grid))
    num_blocks = len(blocks)

    # Initialize the output grid with zeros, with dimensions based on the number of blocks.
    output_grid = np.zeros((num_blocks, num_blocks), dtype=int)

    # Place a 'green' (3) pixel on the diagonal for each block.
    for i in range(num_blocks):
        output_grid[i, i] = 3

    return output_grid

# Example data (replace with actual data from the task)
examples = [
    {
        "input": [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 1]],
        "output": [[3]]
    },
    {
        "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 8, 0, 0, 0], [0, 0, 0, 8, 8, 8, 0, 0, 0], [0, 0, 0, 8, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],
        "output": [[3]]
    },
    {
        "input": [[0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 0], [0, 0, 0, 0, 0, 0, 0]],
        "output": [[3]]
    },
    {
        "input" : [[0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 2, 2, 0, 0, 0],
                   [0, 0, 0, 2, 2, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0]],
        "output" : [[3]]
    }
]

for i, example in enumerate(examples):
    input_grid = example["input"]
    expected_output = example["output"]
    actual_output = transform(input_grid)
    print(f"Example {i+1}:")
    print(f"  Input:\n{np.array(input_grid)}")
    print(f"  Expected Output:\n{np.array(expected_output)}")
    print(f"  Actual Output:\n{actual_output}")
    print(f"  Matches Expected: {np.array_equal(actual_output, np.array(expected_output))}")
    print("-" * 20)