import numpy as np

def find_white_pixel(grid):
    white_pixels = np.where(grid == 0)
    if len(white_pixels[0]) == 1:
        return white_pixels[0][0], white_pixels[1][0]
    else:
        return None

def analyze_example(input_grid, output_grid):
    white_pixel_location = find_white_pixel(input_grid)
    
    if white_pixel_location is not None:
        row, col = white_pixel_location
        new_color = output_grid[row, col]
        
        # Get surrounding pixels (handle edge cases)
        surrounding_pixels = []
        for i in range(max(0, row - 1), min(input_grid.shape[0], row + 2)):
            for j in range(max(0, col - 1), min(input_grid.shape[1], col + 2)):
                if (i, j) != (row, col):
                    surrounding_pixels.append(input_grid[i, j])

        print(f"  Input shape: {input_grid.shape}")
        print(f"  White pixel location: {white_pixel_location}")
        print(f"  New color: {new_color}")
        print(f"  Surrounding pixel colors: {surrounding_pixels}")

    else:
        print(f"  Input shape: {input_grid.shape}")
        print("  No single white pixel found.")

# Load the example grids for task 868de0fa
task_id = "868de0fa"

example_grids = [
    (np.array([[5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5],
               [5, 5, 0, 5, 5],
               [5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5]]),
     np.array([[5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5],
               [5, 5, 1, 5, 5],
               [5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5]])),

    (np.array([[5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 0, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5]]),
     np.array([[5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 2, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5]])),

     (np.array([[5, 5, 5, 5, 5],
                [5, 5, 5, 5, 5],
                [5, 0, 5, 5, 5],
                [5, 5, 5, 5, 5],
                [5, 5, 5, 5, 5]]),
      np.array([[5, 5, 5, 5, 5],
                [5, 1, 5, 5, 5],
                [5, 5, 5, 5, 5],
                [5, 5, 5, 5, 5],
                [5, 5, 5, 5, 5]])),
     
    (np.array([[5, 5, 5, 5, 5],
                [5, 5, 5, 5, 5],
                [5, 5, 5, 5, 5],
                [5, 5, 0, 5, 5],
                [5, 5, 5, 5, 5]]),
      np.array([[5, 5, 5, 5, 5],
                [5, 5, 5, 5, 5],
                [5, 5, 5, 5, 5],
                [5, 5, 1, 5, 5],
                [5, 5, 5, 5, 5]])),
    (np.array([[5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 0, 5, 5],
               [5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5]]),
     np.array([[5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 2, 5, 5],
               [5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5],
               [5, 5, 5, 5, 5, 5, 5]]))
]

for i, (input_grid, output_grid) in enumerate(example_grids):
    print(f"Example {i+1}:")
    analyze_example(input_grid, output_grid)
    print("-" * 20)