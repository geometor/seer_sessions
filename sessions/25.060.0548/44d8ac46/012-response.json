{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Gray Regions:** Find all contiguous regions of gray (5) pixels in the input grid.  Treat diagonally connected gray pixels as part of the same region.\n2.  **Determine Enclosure:** For each gray region, determine if it is *fully* enclosed. A region is fully enclosed if *all* pixels within the region and on its boundary are either gray or on the edge of the entire grid, and there's no \"leak\" to the outside.  A leak is defined as a path of non-gray pixels connecting the interior to the outside, even diagonally.\n3.  **Fill Fully Enclosed Interiors:** If a gray region is fully enclosed, change the color of all non-gray pixels *inside* the enclosed area to red (2).  A pixel is \"inside\" if it's completely surrounded by gray pixels or the edge of the grid in all eight directions (including diagonals) *within* the enclosed area.  If there are gray pixels inside the outer gray shape, do not change their color.\n4. **Leave Partially Enclosed and Unenclosed Regions Unchanged**: Gray regions which are not fully enclosed should not be changed.\n\"\"\"\n\nimport numpy as np\n\ndef find_contiguous_regions(grid, color):\n    \"\"\"Finds contiguous regions of a specific color in the grid, including diagonals.\"\"\"\n    visited = np.zeros_like(grid, dtype=bool)\n    regions = []\n\n    def dfs(row, col, current_region):\n        \"\"\"Depth-first search to explore contiguous regions, including diagonals.\"\"\"\n        if (\n            row < 0\n            or row >= grid.shape[0]\n            or col < 0\n            or col >= grid.shape[1]\n            or visited[row, col]\n            or grid[row, col] != color\n        ):\n            return\n        visited[row, col] = True\n        current_region.append((row, col))\n        # Check all 8 neighbors (including diagonals)\n        for dr in [-1, 0, 1]:\n            for dc in [-1, 0, 1]:\n                if dr == 0 and dc == 0:\n                    continue\n                dfs(row + dr, col + dc, current_region)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] == color and not visited[row, col]:\n                current_region = []\n                dfs(row, col, current_region)\n                regions.append(current_region)\n    return regions\n\ndef is_fully_enclosed(region, grid):\n    \"\"\"\n    Checks if a region is fully enclosed, considering diagonal connections.\n    \"\"\"\n    if not region:\n        return False\n\n    rows, cols = zip(*region)\n    min_row, max_row = min(rows), max(rows)\n    min_col, max_col = min(cols), max(cols)\n\n    # Check if the region touches any edge\n    if min_row == 0 or max_row == grid.shape[0] - 1 or min_col == 0 or max_col == grid.shape[1] - 1:\n        return False\n\n    # Expand the region by one layer to include the boundary for checking enclosure\n    expanded_region = set(region)\n    for r, c in region:\n        for dr in [-1, 0, 1]:\n            for dc in [-1, 0, 1]:\n                if dr == 0 and dc == 0:\n                    continue\n                nr, nc = r + dr, c + dc\n                if 0 <= nr < grid.shape[0] and 0 <= nc < grid.shape[1]:\n                    expanded_region.add((nr, nc))\n\n    # Check for leaks: any non-gray pixel within the expanded region (but not the original region)\n    for r in range(min_row - 1, max_row + 2):\n        for c in range(min_col - 1, max_col + 2):\n            if (r, c) not in region:  # Check outside the original region\n                if 0 <= r < grid.shape[0] and 0 <= c < grid.shape[1]: # within grid\n                    if grid[r,c] != 5: return False\n\n    return True\n\n\ndef get_inner_pixels(region, grid):\n    \"\"\"\n    Gets the inner pixels of a fully enclosed region, excluding gray pixels.\n    \"\"\"\n    rows, cols = zip(*region)\n    min_row, max_row = min(rows), max(rows)\n    min_col, max_col = min(cols), max(cols)\n\n    inner_pixels = []\n    for r in range(min_row, max_row + 1):\n        for c in range(min_col, max_col + 1):\n            if (r, c) not in region:\n                # Check if surrounded by pixels from region or boundary in all 8 directions\n                is_inner = True\n                for dr in [-1, 0, 1]:\n                    for dc in [-1, 0, 1]:\n                        if dr == 0 and dc == 0: continue\n                        nr, nc = r+dr, c + dc\n                        if (nr,nc) not in region:\n                            # if out of boundary, continue, it is an inner\n                            if nr < 0 or nr >= grid.shape[0] or nc < 0 or nc >= grid.shape[1]: continue\n                            # not inner\n                            is_inner = False\n                            break\n                    if not is_inner: break    \n                if is_inner:\n                    inner_pixels.append((r,c))\n    return inner_pixels\n\n\ndef transform(input_grid):\n    \"\"\"\n    Identifies contiguous regions of gray (5) pixels.\n    If a gray object is fully enclosed, changes the color of inner non-gray pixels to red.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    gray_regions = find_contiguous_regions(input_grid, 5)\n\n    for region in gray_regions:\n        if is_fully_enclosed(region, input_grid):\n            inner_pixels = get_inner_pixels(region, input_grid)\n            for row, col in inner_pixels:\n                output_grid[row, col] = 2  # Red\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5508,
    "candidates_token_count": 1464,
    "total_token_count": 6972,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 12.823075,
  "response_file": "012-response.json"
}