{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation rule identifies isolated single-pixel objects in a grid and extends them horizontally towards adjacent non-background objects. An object is considered isolated if all its 8-connected neighbors are background pixels. The extension happens only horizontally.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef get_objects(grid):\n    \"\"\"\n    Identifies contiguous blocks of same-colored pixels as objects.\n    \"\"\"\n    objects = []\n    visited = set()\n    rows, cols = grid.shape\n\n    def dfs(r, c, color, current_object):\n        if (r, c) in visited or not (0 <= r < rows and 0 <= c < cols) or grid[r, c] != color:\n            return\n        visited.add((r, c))\n        current_object.append((r, c))\n        for dr in [-1, 0, 1]:\n            for dc in [-1, 0, 1]:\n                if dr == 0 and dc == 0:\n                    continue\n                dfs(r + dr, c + dc, color, current_object)\n\n    for r in range(rows):\n        for c in range(cols):\n            if (r, c) not in visited:\n                current_object = []\n                dfs(r, c, grid[r, c], current_object)\n                if current_object:\n                    objects.append((grid[r,c], current_object)) # Store color with object\n    return objects\n\ndef get_background_color(grid, objects):\n    \"\"\"\n    Determine the background color. It's the most frequent color.\n    \"\"\"\n    all_colors = []\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            all_colors.append(grid[r,c])\n    \n    color_counts = Counter(all_colors)\n\n    most_common_color = color_counts.most_common(1)[0][0]\n    return most_common_color\n\n\ndef is_isolated(grid, pixel, background_color):\n    \"\"\"\n    Checks if a single-pixel object is isolated (surrounded by background).\n    \"\"\"\n    r, c = pixel\n    rows, cols = grid.shape\n\n    for dr in [-1, 0, 1]:\n        for dc in [-1, 0, 1]:\n            if dr == 0 and dc == 0:\n                continue\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < rows and 0 <= nc < cols and grid[nr, nc] != background_color:\n                return False, (nr, nc) # return coordinates of neighbor\n    return True, None # no non-background neighbors\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the rule.\n    \"\"\"\n    grid = np.array(input_grid)  # Convert to NumPy array\n    rows, cols = grid.shape\n    output_grid = np.copy(grid)  # Initialize output grid\n\n    objects = get_objects(grid)\n    background_color = get_background_color(grid, objects)\n\n\n    # Find and extend isolated single-pixel objects\n    for color, obj_pixels in objects:\n        if len(obj_pixels) == 1:\n            pixel = obj_pixels[0]\n            isolated, neighbor_coord = is_isolated(grid, pixel, background_color)\n            if not isolated and neighbor_coord is not None:\n                r,c = pixel\n                nr, nc = neighbor_coord\n                \n                if nc > c:\n                    # extend to the right\n                    for i in range(c+1, nc):\n                        output_grid[r, i] = grid[r,c]\n\n                elif nc < c:\n                    # extend to the left\n                    for i in range(nc+1, c):\n                         output_grid[r, i] = grid[r,c]\n\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6604,
    "candidates_token_count": 915,
    "total_token_count": 7519,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.243806,
  "response_file": "002-response.json"
}