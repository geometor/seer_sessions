import numpy as np

def find_pixels_by_color(grid, color):
    return np.argwhere(grid == color)

def analyze_examples(examples):
    analysis = []
    for i, (input_grid, output_grid) in enumerate(examples):
        input_grid = np.array(input_grid)
        output_grid = np.array(output_grid)
        green_pixels_in = find_pixels_by_color(input_grid, 3)
        yellow_pixels_in = find_pixels_by_color(input_grid, 4)
        azure_pixels_in = find_pixels_by_color(input_grid, 8)
        green_pixels_out = find_pixels_by_color(output_grid, 3)
        yellow_pixels_out = find_pixels_by_color(output_grid, 4)
        azure_pixels_out = find_pixels_by_color(output_grid, 8)

        green_rows_in = np.unique(green_pixels_in[:, 0]) if len(green_pixels_in) > 0 else []
        yellow_rows_in = np.unique(yellow_pixels_in[:,0]) if len(yellow_pixels_in) > 0 else []

        analysis.append({
            "example": i,
            "input_green_count": len(green_pixels_in),
            "input_yellow_count": len(yellow_pixels_in),
            "input_azure_count": len(azure_pixels_in),
            "input_green_rows": green_rows_in.tolist(),
            "input_yellow_rows": yellow_rows_in.tolist(),
            "output_green_count": len(green_pixels_out),
            "output_yellow_count": len(yellow_pixels_out),
            "output_azure_count": len(azure_pixels_out),
        })
    return analysis

# The provided input and output grids for each example
examples = [
    (
        [[0, 0, 8, 8, 8, 8, 8, 8, 0, 0], [0, 0, 8, 3, 3, 3, 3, 8, 0, 0], [0, 0, 8, 3, 3, 3, 3, 8, 0, 0], [0, 0, 8, 3, 3, 3, 3, 8, 0, 0], [0, 0, 8, 3, 3, 3, 3, 8, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 0, 0], [0, 0, 8, 4, 8, 8, 8, 8, 0, 0], [0, 0, 8, 8, 8, 8, 8, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        [[0, 0, 8, 8, 8, 8, 8, 8, 0, 0], [0, 0, 8, 3, 3, 3, 3, 8, 0, 0], [0, 0, 8, 3, 3, 3, 3, 8, 0, 0], [0, 0, 8, 3, 3, 3, 3, 8, 0, 0], [0, 0, 8, 3, 3, 3, 3, 8, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 0, 0], [0, 0, 4, 4, 8, 8, 8, 8, 0, 0], [0, 0, 8, 8, 8, 8, 8, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
    ),
    (
      [[0, 0, 8, 8, 8, 8, 8, 0, 0, 0], [0, 0, 8, 3, 3, 3, 8, 0, 0, 0], [0, 0, 8, 3, 3, 3, 8, 0, 0, 0], [0, 0, 8, 3, 3, 3, 8, 0, 0, 0], [0, 0, 8, 3, 3, 3, 8, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 0, 0, 0], [0, 0, 8, 4, 8, 8, 8, 0, 0, 0], [0, 0, 8, 8, 8, 8, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
      [[0, 0, 8, 8, 8, 8, 8, 0, 0, 0], [0, 0, 8, 3, 3, 3, 8, 0, 0, 0], [0, 0, 8, 3, 3, 3, 8, 0, 0, 0], [0, 0, 8, 3, 3, 3, 8, 0, 0, 0], [0, 0, 8, 3, 3, 3, 8, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 0, 0, 0], [0, 0, 4, 4, 8, 8, 8, 0, 0, 0], [0, 0, 4, 8, 8, 8, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
    ),
    (
      [[0, 0, 8, 8, 8, 8, 8, 8, 0, 0], [0, 0, 8, 3, 3, 3, 3, 8, 0, 0], [0, 0, 8, 3, 3, 3, 3, 8, 0, 0], [0, 0, 8, 3, 3, 3, 3, 8, 0, 0], [0, 0, 8, 3, 3, 3, 3, 8, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 0, 0], [0, 0, 8, 8, 4, 8, 8, 8, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
      [[0, 0, 8, 8, 8, 8, 8, 8, 0, 0], [0, 0, 8, 3, 3, 3, 3, 8, 0, 0], [0, 0, 8, 3, 3, 3, 3, 8, 0, 0], [0, 0, 8, 3, 3, 3, 3, 8, 0, 0], [0, 0, 8, 3, 3, 3, 3, 8, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 0, 0], [0, 0, 8, 8, 4, 8, 8, 8, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
    ),
]

analysis = analyze_examples(examples)
for item in analysis:
    print(item)