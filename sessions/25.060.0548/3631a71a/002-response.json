{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Scan the input grid and identify all distinct objects. An object is a group of connected pixels of the same color. Connectivity is defined by shared sides (not diagonals).\n\n2.  **Identify the largest connected component by color.**\n    For each distinct, non-background (non-zero) color: Find the largest connected area of that color.\n\n3.  **Remove color 9 (maroon) objects.**\n    Scan the input for distinct, non-background (non-zero) color: Remove color if all the connected component contains any color 9.\n\n4. **Preserve Largest Components and remove others**\n   - Preserve the connected components\n   - If a non-background pixel is not part of its largest connected, remove by setting to 0.\n\n5.  **Output:** The output grid is the result of applying steps 2 & 3.\n\"\"\"\n\nimport numpy as np\nfrom collections import defaultdict\n\ndef get_connected_components(grid):\n    \"\"\"Finds connected components in a grid.\"\"\"\n    visited = set()\n    components = defaultdict(list)\n\n    def dfs(r, c, color, component_id):\n        if (r, c) in visited or not (0 <= r < len(grid) and 0 <= c < len(grid[0])) or grid[r, c] != color:\n            return\n        visited.add((r, c))\n        components[component_id].append((r, c))\n        dfs(r + 1, c, color, component_id)\n        dfs(r - 1, c, color, component_id)\n        dfs(r, c + 1, color, component_id)\n        dfs(r, c - 1, color, component_id)\n\n    component_id = 0\n    for r in range(len(grid)):\n        for c in range(len(grid[0])):\n            if (r, c) not in visited and grid[r, c] != 0:\n                dfs(r, c, grid[r, c], component_id)\n                component_id += 1\n    return components\n\ndef get_largest_component_by_color(components, grid):\n   \"\"\"Returns a dictionary of largest components for each color.\"\"\"\n   largest_components = {}\n   for component_id, pixels in components.items():\n     color = grid[pixels[0][0], pixels[0][1]]\n     if color not in largest_components or len(pixels) > len(largest_components[color]):\n        largest_components[color] = pixels\n   return largest_components\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the described rules.\"\"\"\n    grid = np.array(input_grid)\n    output_grid = np.copy(grid)\n    components = get_connected_components(grid)\n\n    #remove all maroon (9)\n    for r in range(len(grid)):\n      for c in range(len(grid[0])):\n        if grid[r,c] == 9:\n          output_grid[r,c] = 0\n\n    components = get_connected_components(output_grid) #update after removing maroon\n\n    largest_components = get_largest_component_by_color(components, output_grid)\n\n    #remove pixels from secondary same color components\n    for r in range(len(grid)):\n        for c in range(len(grid[0])):\n            color = grid[r, c]\n            if color != 0:\n                found_in_largest = False\n                if color in largest_components:\n                  for lr, lc in largest_components[color]:\n                    if lr == r and lc == c:\n                      found_in_largest = True\n                      break\n                if not found_in_largest:\n                  output_grid[r,c] = 0\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 18525,
    "candidates_token_count": 881,
    "total_token_count": 19406,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 12.517809,
  "response_file": "002-response.json"
}