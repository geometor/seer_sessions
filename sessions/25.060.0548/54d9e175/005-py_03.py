import numpy as np

def describe_grid(grid):
    rows, cols = grid.shape
    unique_colors = np.unique(grid)
    print(f"  Dimensions: {rows}x{cols}")
    print(f"  Unique Colors: {unique_colors}")
    for color in unique_colors:
        count = np.sum(grid == color)
        print(f"    Color {color}: Count = {count}")

task_data = {
    "train": [
        {
            "input": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 5, 0, 0, 0, 0],
                [0, 0, 0, 0, 5, 0, 0, 0, 0],
                [0, 0, 0, 0, 5, 0, 0, 0, 0],
                [0, 0, 0, 0, 5, 0, 0, 0, 0],
                [0, 0, 0, 0, 5, 0, 0, 0, 0],
                [0, 0, 0, 0, 5, 0, 0, 0, 0],
                [0, 0, 0, 0, 5, 0, 0, 0, 0],
                [0, 0, 0, 0, 5, 0, 0, 0, 0]
            ],
            "output": [
                [6, 6, 6, 6, 6, 6, 6, 6, 6],
                [6, 6, 6, 6, 5, 6, 6, 6, 6],
                [6, 6, 6, 6, 5, 6, 6, 6, 6],
                [6, 6, 6, 6, 5, 6, 6, 6, 6],
                [6, 6, 6, 6, 5, 6, 6, 6, 6],
                [6, 6, 6, 6, 5, 6, 6, 6, 6],
                [6, 6, 6, 6, 5, 6, 6, 6, 6],
                [6, 6, 6, 6, 5, 6, 6, 6, 6],
                [6, 6, 6, 6, 5, 6, 6, 6, 6]
            ]
        },
        {
            "input": [
                [1, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            "output": [
                [7, 6, 6, 6, 6, 6, 6, 6, 6],
                [7, 6, 6, 6, 6, 6, 6, 6, 6],
                [7, 6, 6, 6, 6, 6, 6, 6, 6],
                [7, 6, 6, 6, 6, 6, 6, 6, 6],
                [7, 6, 6, 6, 6, 6, 6, 6, 6],
                [7, 6, 6, 6, 6, 6, 6, 6, 6],
                [7, 6, 6, 6, 6, 6, 6, 6, 6],
                [7, 6, 6, 6, 6, 6, 6, 6, 6],
                [7, 6, 6, 6, 6, 6, 6, 6, 6]
            ]
        },
        {
            "input": [
                [2, 0, 0, 0, 0, 0, 0, 0, 0],
                [2, 0, 0, 0, 0, 0, 0, 0, 0],
                [2, 0, 0, 0, 0, 0, 0, 0, 0],
                [2, 0, 0, 0, 0, 0, 0, 0, 0],
                [2, 0, 0, 0, 0, 0, 0, 0, 0],
                [2, 0, 0, 0, 0, 0, 0, 0, 0],
                [2, 0, 0, 0, 0, 0, 0, 0, 0],
                [2, 0, 0, 0, 0, 0, 0, 0, 0],
                [2, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            "output": [
                [7, 6, 6, 6, 6, 6, 6, 6, 6],
                [7, 6, 6, 6, 6, 6, 6, 6, 6],
                [7, 6, 6, 6, 6, 6, 6, 6, 6],
                [7, 6, 6, 6, 6, 6, 6, 6, 6],
                [7, 6, 6, 6, 6, 6, 6, 6, 6],
                [7, 6, 6, 6, 6, 6, 6, 6, 6],
                [7, 6, 6, 6, 6, 6, 6, 6, 6],
                [7, 6, 6, 6, 6, 6, 6, 6, 6],
                [7, 6, 6, 6, 6, 6, 6, 6, 6]
            ]
        }
    ]
}

for i, example in enumerate(task_data["train"]):
    print(f"Example {i+1}: Input")
    describe_grid(np.array(example["input"]))
    print(f"Example {i+1}: Output")
    describe_grid(np.array(example["output"]))
    print("-" * 20)