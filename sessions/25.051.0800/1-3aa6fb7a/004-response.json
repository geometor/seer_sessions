{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation rule preserves the azure (color 8) rectangles and adds a single blue (color 1) pixel adjacent to each azure rectangle. The blue pixel is added to the right of the rectangle if it is in the top-left quadrant, to the left if in the top-right or bottom-right quadrant, and above if in the bottom-left quadrant and close to the border.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, color):\n    \"\"\"\n    Finds contiguous regions of the specified color in the grid.\n    Returns a list of (row, col) tuples for each object found.\n    \"\"\"\n    objects = []\n    visited = set()\n\n    def dfs(row, col, current_object):\n        if (row, col) in visited or not (0 <= row < grid.shape[0] and 0 <= col < grid.shape[1]) or grid[row, col] != color:\n            return\n        visited.add((row, col))\n        current_object.append((row, col))\n        dfs(row + 1, col, current_object)\n        dfs(row - 1, col, current_object)\n        dfs(row, col + 1, current_object)\n        dfs(row, col - 1, current_object)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] == color and (row, col) not in visited:\n                current_object = []\n                dfs(row, col, current_object)\n                objects.append(current_object)\n    return objects\n\ndef is_2x1_rectangle(object_coords):\n    \"\"\"\n    Checks if the object represented by the given coordinates is a 2x1 rectangle.\n    \"\"\"\n    if len(object_coords) != 2:\n        return False\n\n    row_coords = sorted(list(set([coord[0] for coord in object_coords])))\n    col_coords = sorted(list(set([coord[1] for coord in object_coords])))\n\n    if len(row_coords) == 2 and len(col_coords) == 1 and row_coords[1] - row_coords[0] == 1:\n        return True\n    elif len(col_coords) == 2 and len(row_coords) == 1 and col_coords[1] - col_coords[0] == 1:\n        return True\n    \n    return False\n    \n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the rule: adds a blue pixel next to azure 2x1 rectangles.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    azure_objects = find_objects(input_grid, 8)\n\n    for azure_object in azure_objects:\n        if is_2x1_rectangle(azure_object):\n            #get centroid\n            centroid_row = sum([coord[0] for coord in azure_object]) / len(azure_object)\n            centroid_col = sum([coord[1] for coord in azure_object]) / len(azure_object)\n\n            rows, cols = input_grid.shape\n            \n            # get sorted row and cols\n            row_coords = sorted(list(set([coord[0] for coord in azure_object])))\n            col_coords = sorted(list(set([coord[1] for coord in azure_object])))\n            \n            if centroid_row < rows / 2 and centroid_col < cols/2:  # Top-left quadrant\n                output_grid[row_coords[0], col_coords[0] + 1] = 1\n            elif centroid_row < rows/2 and centroid_col >= cols/2: # Top Right Quadrant\n                output_grid[row_coords[0], col_coords[0] - 1] = 1\n            elif centroid_row >= rows/2 and centroid_col >= cols/2: # Bottom Right Quadrant\n                output_grid[row_coords[0], col_coords[0] - 1] = 1\n            elif centroid_row >= rows/2 and centroid_col < cols/2:\n                output_grid[row_coords[0]-1, col_coords[0]] = 1\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3519,
    "candidates_token_count": 991,
    "total_token_count": 4510,
    "cached_content_token_count": 0
  },
  "timing": {
    "response_time": 8.651958
  },
  "response_file": "004-response.json"
}