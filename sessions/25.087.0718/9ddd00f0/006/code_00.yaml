task_description: Transforms column-based blocks within a grid based on adjacency to separator columns.

grid_properties:
  background_color: 0 # white
  objects:
    - type: separator_column
      definition: A grid column composed entirely of the background color.
    - type: content_block
      definition: A contiguous sequence of one or more columns containing at least one non-background pixel.
      properties:
        - start_column_index
        - end_column_index
        - width (number of columns)
        - data (2D array of pixel values)

transformations:
  - action: identify_objects
    inputs: input_grid
    outputs: list_of_separator_columns, list_of_content_blocks

  - action: check_symmetry
    inputs: list_of_separator_columns, list_of_content_blocks, grid_width
    outputs: is_symmetric (boolean)
    # Symmetry condition: Exactly one separator column exists, and it has content blocks immediately adjacent on both its left and right sides.

  - action: process_blocks
    inputs: list_of_content_blocks, list_of_separator_columns, is_symmetric
    outputs: modified_output_grid
    steps:
      # Initialize output grid with background color.
      # For each content_block:
      # 1. Extract block data from input grid.
      # 2. Flip block data vertically.
      # 3. Determine target_start_column based on symmetry:
      #    IF is_symmetric:
      #      Find the single separator column index `sep_idx`.
      #      IF block.end_column_index == sep_idx - 1 (block is left):
      #        target_start_column = block.start_column_index + 1
      #      ELSE IF block.start_column_index == sep_idx + 1 (block is right):
      #        target_start_column = block.start_column_index
      #    ELSE (not symmetric):
      #      IF block is preceded by a separator `sep_idx = block.start_column_index - 1`:
      #        target_start_column = sep_idx - block.width + 1
      #      ELSE: # Covers not preceded (including followed only, or no adjacent sep)
      #        target_start_column = block.start_column_index
      # 4. Calculate target_end_column = target_start_column + block.width - 1
      # 5. Place flipped block data onto output grid in target columns, handling bounds/clipping.

output_grid:
  source: Generated by placing transformed blocks onto an initial background grid.
  properties: Same dimensions as input grid. Contains the vertically flipped and repositioned content blocks.