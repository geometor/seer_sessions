{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid by identifying each distinct non-background colored object \nand repositioning it vertically. The object's internal pattern is preserved (not flipped).\nThe new vertical position is determined by placing the object such that its bottom edge \nin the output grid is mirrored across the horizontal center relative to its original \nbottom edge position. Specifically, the new top row of the object's bounding box is \ncalculated as grid_height - original_bottom_row_exclusive (original r_max). \nThe horizontal position remains unchanged. The background remains white (0).\n\"\"\"\n\nimport numpy as np\nfrom scipy.ndimage import label, find_objects\n\ndef transform(input_grid):\n    \"\"\"\n    Applies a vertical repositioning transformation to each non-background object \n    without altering the object's internal pattern.\n\n    Args:\n        input_grid (list[list[int]]): A 2D list representing the input grid.\n\n    Returns:\n        list[list[int]]: A 2D list representing the transformed output grid.\n    \"\"\"\n    input_array = np.array(input_grid, dtype=int)\n    height, width = input_array.shape\n    background_color = 0\n\n    # Initialize the output grid with the background color\n    output_array = np.full_like(input_array, background_color)\n\n    # Find all unique non-background colors\n    unique_colors = np.unique(input_array)\n    non_background_colors = unique_colors[unique_colors != background_color]\n\n    # Process objects for each color independently to handle overlaps correctly if needed,\n    # though in this task objects seem distinct.\n    for color in non_background_colors:\n        # Create a mask for the current color\n        color_mask = (input_array == color)\n\n        # Label connected components (objects) for the current color\n        # Use a structure that connects diagonally as well\n        structure = np.array([[1,1,1], [1,1,1], [1,1,1]], dtype=bool)\n        labeled_mask, num_features = label(color_mask, structure=structure)\n\n        # If no objects of this color are found, continue\n        if num_features == 0:\n            continue\n\n        # Find the bounding boxes for each distinct object of this color\n        object_slices = find_objects(labeled_mask)\n\n        # Process each object found\n        for i, obj_slice in enumerate(object_slices):\n            object_label = i + 1 # Labels start from 1\n\n            # Get bounding box coordinates and dimensions from the slice\n            r_slice, c_slice = obj_slice\n            r_min, r_max = r_slice.start, r_slice.stop\n            c_min, c_max = c_slice.start, c_slice.stop\n            bbox_height = r_max - r_min\n            bbox_width = c_max - c_min\n\n            # Calculate the new top row position for the object\n            # The new top position is H - old_bottom_exclusive (r_max)\n            target_r_start = height - r_max\n            target_c_start = c_min # Horizontal position remains the same\n\n            # Iterate through the bounding box of the object in the input grid\n            for r_sub in range(bbox_height):\n                for c_sub in range(bbox_width):\n                    # Get the original coordinates in the input grid\n                    original_r = r_min + r_sub\n                    original_c = c_min + c_sub\n\n                    # Check if the pixel at this original coordinate belongs to the *current* labeled object\n                    if labeled_mask[original_r, original_c] == object_label:\n                        # Get the pixel color from the input grid\n                        pixel_color = input_array[original_r, original_c]\n\n                        # Calculate target coordinates in the output grid\n                        target_row = target_r_start + r_sub\n                        target_col = target_c_start + c_sub\n\n                        # Ensure target coordinates are within bounds (should be, but safe check)\n                        if 0 <= target_row < height and 0 <= target_col < width:\n                           output_array[target_row, target_col] = pixel_color\n\n    # Convert the NumPy array back to a list of lists\n    output_grid = output_array.tolist()\n\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 11113,
    "candidates_token_count": 1007,
    "total_token_count": 12120,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.352723,
  "retries": null
}