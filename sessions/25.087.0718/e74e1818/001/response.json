{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentifies distinct connected objects of the same non-background color in the \ninput grid. For each object, determines its vertical extent (minimum and maximum\nrow indices). Then, for each unique vertical extent found across all objects, \nreverses the order of the corresponding horizontal rows from the input grid and \nplaces them into the output grid at the same vertical position.\n\"\"\"\n\ndef find_objects(grid):\n    \"\"\"\n    Finds all distinct connected objects of the same non-background color.\n\n    Args:\n        grid (np.ndarray): The input grid.\n\n    Returns:\n        list[set]: A list where each element is a set of (row, col) tuples \n                   representing the coordinates of a single object.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and not visited[r, c]:\n                # Found the start of a potential new object\n                current_color = grid[r, c]\n                current_object_coords = set()\n                q = deque([(r, c)])\n                visited[r, c] = True\n\n                while q:\n                    row, col = q.popleft()\n                    current_object_coords.add((row, col))\n\n                    # Check 4-directional neighbors\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n\n                        # Check bounds, color match, and visited status\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] == current_color and not visited[nr, nc]:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n                \n                if current_object_coords:\n                    objects.append(current_object_coords)\n    \n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Vertically flips the rows within the vertical bounds of each distinct object \n    found in the input grid.\n\n    Args:\n        input_grid (np.ndarray): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.ndarray: A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    \n    # Initialize output_grid as a copy of the input grid.\n    # Transformations will be applied directly to this copy.\n    output_grid = np.copy(input_grid)\n    \n    # Find all distinct objects (connected components of the same color)\n    objects = find_objects(input_grid)\n    \n    # Determine the vertical extents (min_row, max_row) for each object\n    object_extents = set() # Use a set to automatically handle duplicate extents\n    for obj_coords in objects:\n        if not obj_coords:\n            continue\n        rows = [r for r, c in obj_coords]\n        min_row = min(rows)\n        max_row = max(rows)\n        object_extents.add((min_row, max_row))\n        \n    # Apply the row reversal for each unique vertical extent\n    # Sort extents by min_row to process consistently, though order shouldn't matter\n    # if extents don't overlap in complex ways (which they don't in examples).\n    sorted_extents = sorted(list(object_extents))\n\n    for min_row, max_row in sorted_extents:\n        # Extract the slice of rows from the original input grid\n        input_row_slice = input_grid[min_row : max_row + 1, :]\n        \n        # Reverse the order of rows in the slice\n        reversed_row_slice = np.flipud(input_row_slice)\n        \n        # Place the reversed slice into the output grid\n        output_grid[min_row : max_row + 1, :] = reversed_row_slice\n        \n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3571,
    "candidates_token_count": 953,
    "total_token_count": 4524,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 26.391233,
  "retries": null
}