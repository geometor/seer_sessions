task_elements:
  - description: Input grid properties
    attributes:
      - grid_size: variable (e.g., 20x20, 10x10)
      - background_color: white (0)
      - foreground_object: green (3) cross
        properties:
          - shape: cross (one horizontal line, one vertical line)
          - thickness: 1 pixel
          - lines:
            - type: horizontal
              location: variable row index (e.g., row 5, row 4)
            - type: vertical
              location: variable column index (e.g., col 7, col 6)

  - description: Output grid properties
    attributes:
      - grid_size: same as input
      - preserved_object: green (3) cross from input
      - modified_background: contains white (0) and yellow (4) pixels
        properties:
          - pattern: checkerboard
          - colors_involved: white (0), yellow (4)
          - rule: replaces some original white pixels with yellow

transformation_logic:
  - description: Core transformation rule
    details:
      - step: Identify the row index (`green_row_idx`) of the horizontal green line in the input.
      - step: Determine the target checkerboard parity (`target_parity`) based on the row index:
          - if `green_row_idx` is even, `target_parity = 0`.
          - if `green_row_idx` is odd, `target_parity = 1`.
      - step: Iterate through each cell `(r, c)` of the input grid.
      - step: Apply rules based on input cell color and position:
          - if input color is green (3), output color is green (3).
          - if input color is white (0):
            - calculate cell parity: `cell_parity = (r + c) % 2`.
            - if `cell_parity == target_parity`, output color is yellow (4).
            - if `cell_parity != target_parity`, output color is white (0).

derived_properties:
  - description: Checkerboard pattern selection
    based_on: parity of the row index of the horizontal green line
    example_1:
      input_green_row_idx: 5 (odd)
      target_parity: 1
      output_pattern: yellow (4) where (r + c) % 2 == 1
    example_2:
      input_green_row_idx: 4 (even)
      target_parity: 0
      output_pattern: yellow (4) where (r + c) % 2 == 0