{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import defaultdict\nimport collections\n\n\"\"\"\nIdentify all distinct contiguous objects of non-white colors in the input grid using orthogonal adjacency.\nCount the number of objects for each color.\nSort the colors based on their object counts in descending order.\nDetermine the output grid dimensions: height is the number of unique non-white colors, width is the maximum object count.\nCreate the output grid, initializing with white (0).\nFor each color in the sorted list, add a row to the output grid.\nEach row represents one color, containing 'count' pixels of that color, right-aligned.\n\"\"\"\n\ndef find_objects_by_color(grid):\n    \"\"\"\n    Finds all contiguous objects of non-white colors and counts them per color.\n\n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        dict: A dictionary mapping color -> count of objects.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n    object_counts = defaultdict(int)\n    \n    for r in range(rows):\n        for c in range(cols):\n            color = grid[r, c]\n            # Check if the cell is non-white and not yet visited\n            if color != 0 and not visited[r, c]:\n                # Found the start of a new object\n                object_color = color\n                object_counts[object_color] += 1\n                \n                # Use BFS to find all parts of this object and mark them visited\n                q = collections.deque([(r, c)])\n                visited[r, c] = True\n                \n                while q:\n                    row, col = q.popleft()\n                    \n                    # Check neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        \n                        # Check bounds, color match, and visited status\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] == object_color and not visited[nr, nc]:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n                            \n    return object_counts\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by summarizing object counts per color.\n\n    Args:\n        input_grid (list[list[int]]): The input grid as a list of lists.\n\n    Returns:\n        list[list[int]]: The transformed output grid.\n    \"\"\"\n    # Convert input to numpy array for easier processing\n    grid_np = np.array(input_grid, dtype=int)\n    \n    # Step 1, 2, 3: Find objects, group by color, and count\n    object_counts = find_objects_by_color(grid_np)\n\n    # Handle cases with no non-white objects (though examples don't show this)\n    if not object_counts:\n        return [[0]] # Or potentially an empty grid depending on interpretation\n\n    # Step 4: Sort colors by count (descending)\n    # Use color value as a secondary sort key for stability if counts are equal (optional but good practice)\n    sorted_colors = sorted(object_counts.items(), key=lambda item: (-item[1], item[0]))\n\n    # Step 5: Determine output dimensions\n    output_height = len(sorted_colors)\n    # Calculate max count, default to 0 if no objects found (handled above)\n    output_width = max(count for color, count in sorted_colors) if sorted_colors else 0\n    \n    # Handle case where output_width might be 0 if somehow counts are zero\n    if output_width == 0 and output_height > 0:\n         output_width = 1 # Minimum width seems reasonable if colors exist but counts are 0 (unlikely)\n    elif output_width == 0 and output_height == 0:\n         return [[0]] # Return a single white pixel if no colors and no counts\n\n    # Step 6: Construct the output grid\n    # Initialize with background color (white = 0)\n    output_grid_np = np.zeros((output_height, output_width), dtype=int)\n    \n    # Fill the grid row by row based on sorted colors and counts\n    for i, (color, count) in enumerate(sorted_colors):\n        # Apply color to the rightmost 'count' cells in the current row\n        if count > 0: # Ensure we don't try to slice with negative indices if count is 0\n             output_grid_np[i, -count:] = color\n        \n    # Convert back to list of lists format for the ARC standard\n    output_grid = output_grid_np.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3990,
    "candidates_token_count": 1117,
    "total_token_count": 5107,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 17.255768,
  "retries": null
}