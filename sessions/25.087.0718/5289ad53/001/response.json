{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThis program counts the number of distinct horizontal line segments of Green (3)\nand Red (2) colors in the input grid. It then represents these counts in a\nfixed 2x3 output grid. The output grid is filled sequentially: first with\nGreen pixels equal to the count of Green segments, then with Red pixels equal\nto the count of Red segments. Any remaining cells are filled with White (0).\n\"\"\"\n\nimport numpy as np\n\ndef find_horizontal_segments(grid, color):\n    \"\"\"\n    Finds and counts distinct horizontal segments of a given color.\n\n    Args:\n        grid (np.array): The input grid.\n        color (int): The color value to search for.\n\n    Returns:\n        int: The count of distinct horizontal segments of the specified color.\n    \"\"\"\n    rows, cols = grid.shape\n    count = 0\n    visited = np.zeros_like(grid, dtype=bool) # Keep track of visited pixels within segments\n\n    for r in range(rows):\n        for c in range(cols):\n            # Check if this pixel is the start of a new segment of the target color\n            if not visited[r, c] and grid[r, c] == color:\n                # Check if it's the beginning of a horizontal line\n                # (either at the left edge or the pixel to the left is different)\n                if c == 0 or grid[r, c-1] != color:\n                    count += 1\n                    # Mark all pixels in this segment as visited to avoid recounting\n                    current_c = c\n                    while current_c < cols and grid[r, current_c] == color:\n                        visited[r, current_c] = True\n                        current_c += 1\n    return count\n\ndef transform(input_grid):\n    \"\"\"\n    Counts Green (3) and Red (2) horizontal line segments in the input_grid\n    and represents the counts in a 2x3 output grid.\n\n    Args:\n        input_grid (list[list[int]]): The input grid represented as a list of lists.\n\n    Returns:\n        list[list[int]]: The 2x3 output grid representing the counts.\n    \"\"\"\n    input_array = np.array(input_grid, dtype=int)\n\n    # Count the number of green and red horizontal segments\n    green_line_count = find_horizontal_segments(input_array, 3)\n    red_line_count = find_horizontal_segments(input_array, 2)\n\n    # Initialize the 2x3 output grid with white (0)\n    output_grid = np.zeros((2, 3), dtype=int)\n\n    # Define the filling sequence coordinates\n    fill_coords = [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2)]\n    \n    current_index = 0\n\n    # Fill with green pixels\n    for _ in range(green_line_count):\n        if current_index < len(fill_coords):\n            r, c = fill_coords[current_index]\n            output_grid[r, c] = 3\n            current_index += 1\n        else:\n            break # Stop if we exceed the output grid size\n\n    # Fill with red pixels\n    for _ in range(red_line_count):\n        if current_index < len(fill_coords):\n            r, c = fill_coords[current_index]\n            output_grid[r, c] = 2\n            current_index += 1\n        else:\n            break # Stop if we exceed the output grid size\n\n    # Convert back to list of lists for the required output format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3395,
    "candidates_token_count": 854,
    "total_token_count": 4249,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.473777,
  "retries": null
}