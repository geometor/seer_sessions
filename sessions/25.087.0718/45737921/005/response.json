{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\nimport collections # Although not strictly needed for the current logic, good to keep for potential future object analysis\n\n\"\"\"\nTransforms the input grid based on the global count of unique non-background colors.\nIf exactly two distinct non-background colors (e.g., Color A and Color B) are present \nin the entire input grid, all occurrences of Color A are replaced with Color B, and \nall occurrences of Color B are replaced with Color A. Pixels with the background \ncolor (0) remain unchanged. If the number of unique non-background colors in the \ninput grid is not exactly two, the grid is returned unchanged.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Applies a color swap transformation based on the global count of non-background colors.\n\n    Args:\n        input_grid (list[list[int]]): A 2D list of integers representing the input grid.\n\n    Returns:\n        list[list[int]]: A 2D list of integers representing the transformed output grid.\n    \"\"\"\n    # Handle empty input grid scenario\n    if not input_grid or not input_grid[0]:\n        return []\n\n    height = len(input_grid)\n    width = len(input_grid[0])\n\n    # --- Step 1: Determine the set of unique non-background colors in the input grid ---\n    unique_non_background_colors = set()\n    for r in range(height):\n        for c in range(width):\n            pixel_color = input_grid[r][c]\n            if pixel_color != 0: # Exclude background color (0)\n                unique_non_background_colors.add(pixel_color)\n\n    # --- Step 2: Check if the condition for transformation (exactly two colors) is met ---\n    if len(unique_non_background_colors) == 2:\n        # Condition met: Exactly two non-background colors found. Proceed with swap.\n        \n        # Extract the two colors to be swapped.\n        color_a, color_b = tuple(unique_non_background_colors)\n        \n        # Initialize the output grid as a deep copy to modify.\n        # We could also create a new grid of zeros and fill it, but copy then modify is clearer here.\n        output_grid = copy.deepcopy(input_grid) \n\n        # --- Step 3: Iterate through the grid and perform the swap ---\n        for r in range(height):\n            for c in range(width):\n                # Check the color in the *original* input grid to decide the swap.\n                original_color = input_grid[r][c]\n                \n                # Apply the swap to the corresponding pixel in the *output_grid*.\n                if original_color == color_a:\n                    output_grid[r][c] = color_b\n                elif original_color == color_b:\n                    output_grid[r][c] = color_a\n                # Background pixels (color 0) remain unchanged as they are neither color_a nor color_b.\n        \n        # Return the modified grid.\n        return output_grid\n        \n    else:\n        # Condition not met: The number of unique non-background colors is not two.\n        # Return an unchanged copy of the input grid.\n        return copy.deepcopy(input_grid)\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5941,
    "candidates_token_count": 749,
    "total_token_count": 6690,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 8.984577,
  "retries": null
}