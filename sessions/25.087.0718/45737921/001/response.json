{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport collections\nimport copy\n\n\"\"\"\nIdentifies distinct contiguous objects composed of non-background (non-zero) pixels.\nFor each object found, it determines the two unique non-background colors present within it.\nIt then iterates through the pixels of that object in the output grid (initially a copy of the input)\nand swaps the two identified colors. Pixels that are part of objects not containing exactly two \nnon-background colors, or background pixels (color 0), remain unchanged.\n\"\"\"\n\ndef _find_objects(grid, height, width):\n    \"\"\"\n    Finds all distinct contiguous objects of non-background pixels using BFS.\n    \n    Args:\n        grid (list[list[int]]): The input grid.\n        height (int): The height of the grid.\n        width (int): The width of the grid.\n\n    Returns:\n        list[tuple[set[tuple[int, int]], set[int]]]: \n            A list of objects. Each object is represented as a tuple containing:\n            - A set of (row, col) tuples representing the coordinates of the pixels in the object.\n            - A set of integers representing the unique non-background colors present in the object.\n    \"\"\"\n    visited = [[False for _ in range(width)] for _ in range(height)]\n    objects = []\n\n    for r in range(height):\n        for c in range(width):\n            # Start BFS if we find a non-background pixel that hasn't been visited\n            if grid[r][c] != 0 and not visited[r][c]:\n                object_pixels = set()\n                object_colors = set()\n                q = collections.deque([(r, c)])\n                visited[r][c] = True\n\n                while q:\n                    curr_r, curr_c = q.popleft()\n                    pixel_color = grid[curr_r][curr_c]\n\n                    # Record pixel coordinate and color\n                    object_pixels.add((curr_r, curr_c))\n                    # Only add non-background colors to the object's color set\n                    if pixel_color != 0:\n                        object_colors.add(pixel_color)\n\n                    # Explore neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = curr_r + dr, curr_c + dc\n\n                        # Check if the neighbor is within grid bounds\n                        if 0 <= nr < height and 0 <= nc < width:\n                            # Check if the neighbor is part of the same object (non-background) and not visited\n                            if grid[nr][nc] != 0 and not visited[nr][nc]:\n                                visited[nr][nc] = True\n                                q.append((nr, nc))\n\n                # Once BFS for an object is complete, store its pixels and colors\n                if object_pixels: # Ensure the object is not empty\n                    objects.append((object_pixels, object_colors))\n\n    return objects\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by identifying objects composed of exactly two \n    non-background colors and swapping those two colors within each such object.\n\n    Args:\n        input_grid (list[list[int]]): A 2D list of integers representing the input grid.\n\n    Returns:\n        list[list[int]]: A 2D list of integers representing the transformed output grid.\n    \"\"\"\n    # Handle empty input grid\n    if not input_grid or not input_grid[0]:\n        return []\n\n    height = len(input_grid)\n    width = len(input_grid[0])\n\n    # Create a deep copy of the input grid. This copy will be modified and returned.\n    # Deep copy ensures that modifications don't affect the original input structure (if it's mutable).\n    output_grid = copy.deepcopy(input_grid)\n\n    # Find all distinct objects (contiguous non-background pixels)\n    objects = _find_objects(input_grid, height, width)\n\n    # Process each found object\n    for object_pixels, object_colors in objects:\n        # The core logic applies only if an object consists of exactly two distinct non-background colors\n        if len(object_colors) == 2:\n            # Extract the two colors to be swapped\n            color_a, color_b = tuple(object_colors)\n\n            # Iterate through each pixel belonging to the current object\n            for r, c in object_pixels:\n                # Swap the colors in the output grid based on the input grid's color\n                if input_grid[r][c] == color_a:\n                    output_grid[r][c] = color_b\n                elif input_grid[r][c] == color_b:\n                    output_grid[r][c] = color_a\n        # else:\n            # If an object does not have exactly two colors, its pixels in the\n            # output_grid remain unchanged (as they were copied from the input_grid).\n            # No action is needed for these objects or for background pixels.\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3069,
    "candidates_token_count": 1165,
    "total_token_count": 4234,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 26.116462,
  "retries": null
}