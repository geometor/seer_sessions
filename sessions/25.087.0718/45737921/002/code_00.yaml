task_description: Swap the two distinct non-background colors within each contiguous object composed of exactly those two colors.

grid_properties:
  - Grid dimensions remain unchanged between input and output.
  - The set of colors present in the grid may remain the same, although their positions change.
  - Background pixels (color 0) remain unchanged.

object_definition:
  - A contiguous area of non-background (non-zero color) pixels.
  - Connectivity is defined by side-adjacency (up, down, left, right). Diagonal pixels are not considered connected for object definition.

transformation_rule:
  - Identify all distinct contiguous objects of non-background pixels in the input grid.
  - For each object, determine the set of unique non-background colors it contains.
  - Condition: If an object contains exactly two distinct non-background colors (let's call them color A and color B):
      - Action: Within the pixels belonging to this specific object, change all pixels of color A to color B, and all pixels of color B to color A.
  - Condition: If an object contains only one distinct non-background color, or more than two distinct non-background colors:
      - Action: Leave all pixels belonging to this object unchanged.
  - Background pixels (color 0) are never part of an object and remain unchanged.

examples_summary:
  - Example 1: Contains three separate objects, each composed of blue (1) and red (2). The transformation swaps blue and red within each object.
  - Example 2: Contains three objects.
      - Object 1: blue (1) and red (2) -> Swapped to red and blue.
      - Object 2: green (3) only -> Remains unchanged.
      - Object 3: green (3) and yellow (4) -> Swapped to yellow and green.
  - Example 3: Contains two objects.
      - Object 1: red (2) and yellow (4) -> Swapped to yellow and red.
      - Object 2: blue (1) and green (3) -> Swapped to green and blue.

verification:
  - The rule consistently applies to all three training examples, as confirmed by simulation.
  - The previous Python error was likely due to testing environment type mismatches (e.g., list vs. NumPy array comparison) and not a flaw in the core logic implemented.