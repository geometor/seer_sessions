{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nExpand the largest contiguous non-background (non-white/0) object by one pixel \nlayer in all directions (including diagonals). The largest object is defined as \nthe one with the most pixels. If there's a tie, any of the largest objects can \nbe chosen. The expansion changes the color of adjacent pixels (that are not \nalready part of the target object) to the target object's color.\n\"\"\"\n\ndef find_objects(grid):\n    \"\"\"\n    Finds all contiguous objects of the same non-background color.\n\n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        list: A list of tuples, where each tuple is (color, set_of_coordinates).\n              Returns an empty list if the grid is empty or contains only background.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n\n    for r in range(rows):\n        for c in range(cols):\n            color = grid[r, c]\n            # If the cell is not background (0) and hasn't been visited yet\n            if color != 0 and not visited[r, c]:\n                obj_coords = set()\n                q = [(r, c)] # Queue for BFS\n                visited[r, c] = True\n                \n                while q:\n                    row, col = q.pop(0)\n                    obj_coords.add((row, col))\n                    \n                    # Check all 8 neighbors (including diagonals)\n                    for dr in [-1, 0, 1]:\n                        for dc in [-1, 0, 1]:\n                            if dr == 0 and dc == 0:\n                                continue # Skip self\n                            \n                            nr, nc = row + dr, col + dc\n                            \n                            # Check boundaries\n                            if 0 <= nr < rows and 0 <= nc < cols:\n                                # If neighbor has the same color and not visited\n                                if grid[nr, nc] == color and not visited[nr, nc]:\n                                    visited[nr, nc] = True\n                                    q.append((nr, nc))\n                                    \n                if obj_coords: # Should always be true here unless grid was 1x1\n                   objects.append((color, obj_coords))\n                   \n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Identifies the largest contiguous non-background object and expands it by one\n    pixel layer in all directions (including diagonals).\n\n    Args:\n        input_grid (list of lists): The input grid represented as a list of lists.\n\n    Returns:\n        list of lists: The transformed grid.\n    \"\"\"\n    # Convert input to numpy array for easier processing\n    grid_np = np.array(input_grid, dtype=int)\n    rows, cols = grid_np.shape\n    \n    # Initialize output_grid as a copy of the input\n    output_grid = grid_np.copy()\n\n    # Find all non-background objects\n    objects = find_objects(grid_np)\n\n    # If no non-background objects found, return the original grid\n    if not objects:\n        return output_grid.tolist()\n\n    # Find the largest object (by number of pixels)\n    largest_object_size = -1\n    target_color = -1\n    target_object_coords = set()\n\n    for color, coords in objects:\n        if len(coords) > largest_object_size:\n            largest_object_size = len(coords)\n            target_color = color\n            target_object_coords = coords # Keep track of the actual pixels of the largest object\n\n    # If no valid target color found (e.g., only background), return original\n    if target_color == -1:\n         return output_grid.tolist()\n\n    # Identify pixels to expand into\n    pixels_to_change = set()\n    for r_orig, c_orig in target_object_coords:\n         # Check all 8 neighbors\n        for dr in [-1, 0, 1]:\n            for dc in [-1, 0, 1]:\n                if dr == 0 and dc == 0:\n                    continue # Skip self\n                \n                nr, nc = r_orig + dr, c_orig + dc\n                \n                # Check boundaries\n                if 0 <= nr < rows and 0 <= nc < cols:\n                    # Check if the neighbor is NOT already the target color\n                    # (or part of the original target object coordinates)\n                    # Using grid_np ensures we check against the *original* state\n                    if grid_np[nr, nc] != target_color:\n                         # Add the *neighbor's* coordinates to the set of pixels to change\n                         pixels_to_change.add((nr, nc))\n\n    # Change the color of the identified pixels in the output grid\n    for r, c in pixels_to_change:\n        output_grid[r, c] = target_color\n\n    # Convert back to list of lists for the expected output format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3131,
    "candidates_token_count": 1164,
    "total_token_count": 4295,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.824028,
  "retries": null
}