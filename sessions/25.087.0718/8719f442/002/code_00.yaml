task_structure:
  grid_dimensionality: 2D
  input_output_relation: One input grid transforms into one output grid.
  grid_size_relation: Output grid dimensions are 5 times the input grid dimensions.

grid_properties:
  input_size: 3x3
  output_size: 15x15
  scaling_factor: 5
  background_color: white (0)
  object_colors: [gray (5)] # Only gray objects seem active

transformation_rules:
  pixel_mapping: Each input pixel at (r_in, c_in) influences a 5x5 block in the output grid starting at (r_in * 5, c_in * 5).
  white_pixel_rule: If an input pixel is white (0), the corresponding 5x5 output block is initially considered all white (0).
  gray_pixel_rule: If an input pixel is gray (5), the original 3x3 input grid pattern is placed centered within the corresponding 5x5 output block (at offset (1,1) within the block).
  overlap_handling: When patterns from multiple gray input pixels are placed, they overwrite any existing pixels (including those from initially white blocks or padding areas of other blocks) in the output grid. The final output is the result of all such pattern placements.

objects:
  - type: Background Grid
    properties: Base canvas for input and output, primarily white (0).
  - type: Input Pattern
    properties: The entire 3x3 input grid configuration.
    location: Relative concept, represents the data to be copied.
  - type: Active Pixel (Gray)
    properties: Input pixels with value gray (5).
    action: Triggers the placement of the Input Pattern into a specific location in the output grid.
  - type: Passive Pixel (White)
    properties: Input pixels with value white (0).
    action: Initially designates a corresponding 5x5 area in the output as white, but this can be overwritten by patterns from neighboring Active Pixels.
