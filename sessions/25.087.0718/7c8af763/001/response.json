{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentifies source pixels (blue=1, red=2) and wall pixels (gray=5).\nFills background pixels (white=0) with the color of the nearest source pixel.\nDistance is calculated using Manhattan distance, considering walls as impassable barriers.\nA multi-source Breadth-First Search (BFS) is performed starting simultaneously from all source pixels.\nEach white pixel adopts the color of the first source pixel to reach it via the shortest path.\nPixels that are not white (0), blue (1), red (2), or gray (5) remain unchanged (though none are present in the examples).\nBlue, red, and gray pixels from the input remain unchanged in the output.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Fills white areas based on the nearest blue or red source, blocked by gray walls.\n\n    Args:\n        input_grid (np.ndarray): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.ndarray: A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    # Convert input list of lists to numpy array for easier manipulation\n    input_grid = np.array(input_grid, dtype=int)\n    \n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n    \n    # Get grid dimensions\n    height, width = input_grid.shape\n\n    # Define colors\n    WHITE = 0\n    BLUE = 1\n    RED = 2\n    GRAY = 5\n\n    # Initialize distance grid with infinity\n    distance_grid = np.full((height, width), float('inf'), dtype=float)\n    # Initialize color grid to store the color of the nearest source\n    # Use -1 to indicate no source has reached this cell yet\n    color_grid = np.full((height, width), -1, dtype=int)\n\n    # Initialize a queue for BFS\n    q = deque()\n\n    # Find all source pixels (blue and red) and add them to the queue\n    for r in range(height):\n        for c in range(width):\n            if input_grid[r, c] == BLUE or input_grid[r, c] == RED:\n                distance_grid[r, c] = 0\n                color_grid[r, c] = input_grid[r, c]\n                q.append((r, c))\n\n    # Define possible moves (Manhattan distance neighbors: up, down, left, right)\n    moves = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    # Perform multi-source BFS\n    while q:\n        r, c = q.popleft()\n        current_dist = distance_grid[r, c]\n        source_color = color_grid[r, c] # Color propagated from the original source\n\n        # Explore neighbors\n        for dr, dc in moves:\n            nr, nc = r + dr, c + dc\n\n            # Check if neighbor is within bounds\n            if 0 <= nr < height and 0 <= nc < width:\n                # Check if neighbor is not a wall\n                if input_grid[nr, nc] != GRAY:\n                    # Check if this path is shorter than any previously found path\n                    # We only update if the new distance is strictly smaller.\n                    # This implicitly handles ties: the first source to reach a cell claims it.\n                    if current_dist + 1 < distance_grid[nr, nc]:\n                        distance_grid[nr, nc] = current_dist + 1\n                        # Important: Propagate the color of the *original* source that initiated this path.\n                        # Since color_grid[r,c] already holds the correct originating source color, we use that.\n                        color_grid[nr, nc] = source_color \n                        q.append((nr, nc))\n\n    # Fill the white cells in the output grid based on the BFS results\n    for r in range(height):\n        for c in range(width):\n            # If the original cell was white and a source was reachable\n            if input_grid[r, c] == WHITE and color_grid[r, c] != -1:\n                output_grid[r, c] = color_grid[r, c]\n\n    return output_grid.tolist() # Return as list of lists, matching input format if needed\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3240,
    "candidates_token_count": 1001,
    "total_token_count": 4241,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 21.579676,
  "retries": null
}