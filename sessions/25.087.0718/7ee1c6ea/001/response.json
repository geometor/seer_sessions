{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies a region enclosed by gray (5) pixels. Within this enclosed region,\nfinds the two dominant non-gray (5) and non-white (0) colors present.\nSwaps the positions of pixels having these two identified colors only within\nthe enclosed region. All other pixels (gray frame, pixels outside the frame,\nand white pixels inside the frame) remain unchanged.\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by swapping two specific colors within a gray-enclosed region.\n\n    Args:\n        input_grid (list[list[int]]): The input grid as a list of lists.\n\n    Returns:\n        list[list[int]]: The transformed grid as a list of lists.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    grid = np.array(input_grid, dtype=int)\n    output_grid = np.copy(grid)\n    rows, cols = grid.shape\n\n    # --- 1. Identify pixels reachable from the border (outside or frame) ---\n    visited = np.zeros_like(grid, dtype=bool)\n    q = deque()\n\n    # Add border cells to queue if not gray (5)\n    for r in range(rows):\n        for c in [0, cols - 1]:\n            if grid[r, c] != 5 and not visited[r, c]:\n                visited[r, c] = True\n                q.append((r, c))\n    for c in range(cols):\n        for r in [0, rows - 1]:\n            if grid[r, c] != 5 and not visited[r, c]:\n                visited[r, c] = True\n                q.append((r, c))\n\n    # Perform flood fill from the border cells\n    while q:\n        r, c = q.popleft()\n        # Check neighbors (4-connectivity: up, down, left, right)\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n            # Check bounds\n            if 0 <= nr < rows and 0 <= nc < cols:\n                # If neighbor is not gray, not visited, add to queue\n                if grid[nr, nc] != 5 and not visited[nr, nc]:\n                    visited[nr, nc] = True\n                    q.append((nr, nc))\n\n    # --- 2. Identify interior pixels and their colors ---\n    interior_pixels = []\n    interior_colors = set()\n    for r in range(rows):\n        for c in range(cols):\n            # Interior pixels are those not visited by flood fill and not part of the gray frame\n            if not visited[r, c] and grid[r, c] != 5:\n                interior_pixels.append((r, c))\n                interior_colors.add(grid[r, c])\n\n    # --- 3. Identify the two colors to swap ---\n    # Filter out gray (5) and white (0)\n    swap_colors = [color for color in interior_colors if color != 5 and color != 0]\n\n    # Ensure exactly two swap colors were found (as per observed examples)\n    if len(swap_colors) != 2:\n        # If not exactly two, return the original grid or handle error\n        # For this task, based on examples, we assume exactly two will be found.\n        # If zero or one found, no swap happens. If >2, this logic might be incomplete.\n        # Let's proceed assuming 2 colors are found based on the training data.\n        # If len == 0 or 1, the loop below simply won't perform any swaps.\n        pass\n\n    if len(swap_colors) == 2:\n      color_a = swap_colors[0]\n      color_b = swap_colors[1]\n\n      # --- 4. Perform the swap within the interior region ---\n      for r, c in interior_pixels:\n          if grid[r, c] == color_a:\n              output_grid[r, c] = color_b\n          elif grid[r, c] == color_b:\n              output_grid[r, c] = color_a\n          # Pixels with other colors (like 0) within the interior remain unchanged\n\n    # Convert back to list of lists for the expected output format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3387,
    "candidates_token_count": 1029,
    "total_token_count": 4416,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.926914,
  "retries": null
}