task_description: Crop the input grid to the largest non-white frame and fill the interior based on the colors and arrangement of smaller objects found inside the original frame.

examples:
  - id: 1
    input_shape: [14, 14]
    output_shape: [10, 10]
    frame:
      color: red (2)
      bbox: [1, 2, 10, 11] # (min_r, min_c, max_r, max_c)
    internal_objects:
      count: 4
      objects:
        - color: green (3)
          bbox: [3, 4, 4, 5]
        - color: yellow (4)
          bbox: [3, 6, 4, 7]
        - color: blue (1)
          bbox: [5, 4, 6, 5]
        - color: azure (8)
          bbox: [5, 6, 6, 7]
    output_regions: # Divided into 4 quadrants
      top_left: filled with green (3)
      top_right: filled with yellow (4)
      bottom_left: filled with blue (1)
      bottom_right: filled with azure (8)
    mapping_logic: Internal objects sorted by row, then column, map to TL, TR, BL, BR output quadrants respectively.

  - id: 2
    input_shape: [14, 14]
    output_shape: [6, 6]
    frame:
      color: red (2)
      bbox: [1, 4, 6, 9]
    internal_objects:
      count: 4
      objects:
        - color: green (3)
          bbox: [2, 6, 2, 6]
        - color: gray (5)
          bbox: [2, 7, 2, 7]
        - color: magenta (6)
          bbox: [3, 6, 3, 6]
        - color: azure (8)
          bbox: [3, 7, 3, 7]
    output_regions: # Divided into 4 quadrants
      top_left: filled with green (3)
      top_right: filled with gray (5)
      bottom_left: filled with magenta (6)
      bottom_right: filled with azure (8)
    mapping_logic: Internal objects sorted by row, then column, map to TL, TR, BL, BR output quadrants respectively.

general_properties:
  - background_color: white (0)
  - frame_selection: Largest contiguous non-white object by pixel count. The frame itself might not be a perfect rectangle but its bounding box defines the crop.
  - internal_objects_criteria: Non-white, non-frame color objects strictly contained within the frame's bounding box (excluding the frame pixels themselves).
  - output_structure: A grid cropped to the frame's bounding box, maintaining the original frame border pixels. The internal area is modified.
  - internal_area_fill:
      - If 4 internal objects exist, the internal area of the output grid is divided into 4 equal quadrants (top-left, top-right, bottom-left, bottom-right).
      - Each quadrant is filled with the color of one internal object.
      - The mapping is determined by sorting the internal objects based on their top-left coordinate (row first, then column). The first sorted object colors the TL quadrant, the second TR, the third BL, and the fourth BR.
      - (Assumption: Only the 4-object case is demonstrated; other cases like 1 object might exist but aren't fully defined by these examples.)