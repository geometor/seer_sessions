{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List\n\n\"\"\"\nThe transformation identifies the background color (assumed to be the color of the top-left pixel) in the input grid. \nIt then finds the smallest rectangular bounding box that encloses all pixels with colors different from the background color. \nFinally, it crops the input grid to this bounding box and returns the cropped portion as the output grid.\n\"\"\"\n\ndef find_bounding_box(grid: np.ndarray, bg_color: int) -> tuple:\n    \"\"\"\n    Finds the bounding box of non-background pixels.\n\n    Args:\n        grid: The input grid as a numpy array.\n        bg_color: The background color.\n\n    Returns:\n        A tuple (min_row, max_row, min_col, max_col) defining the bounding box.\n        Returns None if no non-background pixels are found.\n    \"\"\"\n    # Find the coordinates of all non-background pixels\n    non_bg_pixels = np.where(grid != bg_color)\n    rows, cols = non_bg_pixels\n\n    # If no non-background pixels exist, return None\n    if len(rows) == 0:\n        return None\n\n    # Determine the min/max row and column indices\n    min_row = np.min(rows)\n    max_row = np.max(rows)\n    min_col = np.min(cols)\n    max_col = np.max(cols)\n\n    return min_row, max_row, min_col, max_col\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Crops the input grid to the bounding box of all non-background elements.\n\n    Args:\n        input_grid: A list of lists representing the input grid.\n\n    Returns:\n        A list of lists representing the cropped output grid.\n    \"\"\"\n    # Convert input list of lists to a numpy array for easier manipulation\n    input_grid_np = np.array(input_grid, dtype=int)\n    \n    # Determine the background color (assuming it's the color of the top-left pixel)\n    bg_color = input_grid_np[0, 0]\n\n    # Find the bounding box coordinates for non-background pixels\n    bounding_box = find_bounding_box(input_grid_np, bg_color)\n\n    # If no non-background pixels were found, return an empty grid or handle as appropriate\n    # Based on examples, we expect objects, so a bounding box should exist.\n    # If somehow no objects, return 1x1 grid of background? Let's assume objects exist.\n    if bounding_box is None:\n         # Or return [[int(bg_color)]] or handle error\n         return [] # Returning empty list if no non-bg pixels found\n\n    min_row, max_row, min_col, max_col = bounding_box\n\n    # Crop the input grid numpy array using the bounding box coordinates\n    # Slicing is inclusive of the start index and exclusive of the end index, so add 1 to max values\n    output_grid_np = input_grid_np[min_row : max_row + 1, min_col : max_col + 1]\n\n    # Convert the resulting numpy array back to a list of lists\n    output_grid = output_grid_np.tolist()\n\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2804,
    "candidates_token_count": 771,
    "total_token_count": 3575,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 97.907948,
  "retries": null
}