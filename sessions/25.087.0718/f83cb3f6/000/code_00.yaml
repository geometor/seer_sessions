elements:
  - object: barrier_line
    color: 8 (azure)
    shape: solid line (horizontal or vertical)
    property: static, acts as a separator/destination boundary
  - object: mobile_pixels
    color: variable (5, 1, or 2 in examples)
    shape: single pixels
    property: potentially mobile or removable based on position relative to barrier_line
  - object: background
    color: 0 (white)
    property: occupies empty space

relationships:
  - type: relative_position
    objects: [mobile_pixels, barrier_line]
    details: Each mobile pixel is either on one side of the barrier line or the other (e.g., above/below for horizontal line, left/right for vertical line).

actions:
  - action: identify_barrier
    input: input_grid
    output: location (row/column index) and orientation (horizontal/vertical) of the azure line
  - action: identify_mobile_color
    input: input_grid
    output: the color code of the non-zero, non-azure pixels
  - action: filter_and_remove
    condition: based on barrier orientation and mobile pixel position
    details: |
      If barrier is horizontal, remove mobile pixels above it.
      If barrier is vertical, remove mobile pixels to its left.
  - action: relocate_and_stack
    condition: based on barrier orientation and mobile pixel position
    details: |
      If barrier is horizontal, move mobile pixels from below the barrier upwards, stacking them vertically starting from the row just above the barrier, preserving their column.
      If barrier is vertical, move mobile pixels from the right of the barrier leftwards, stacking them horizontally starting from the column just to the right of the barrier, preserving their row.
  - action: preserve_barrier
    details: The barrier_line remains unchanged in the output grid.
  - action: initialize_output
    details: The output grid starts as all white (0).

transformation_goal: Relocate mobile pixels from one side of the barrier line to stack against the other side, removing mobile pixels from the starting side.