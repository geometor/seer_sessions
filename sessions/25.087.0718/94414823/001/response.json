{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nFill the area inside a gray rectangular frame with a 2x2 checkerboard pattern. \nThe pattern uses two colors found outside the frame. The assignment of which \ncolor goes in the top-left quadrant depends on the relative positions of the \ntwo external colored pixels.\n\nRule for determining the primary color (Color A for the top-left quadrant):\n1. If the external pixels are in the same row: Color A is the color of the leftmost pixel.\n2. If the external pixels are in the same column:\n   - If they are left of the frame: Color A is the color of the topmost pixel.\n   - If they are right of the frame: Color A is the color of the bottommost pixel.\nColor B is the other external color.\n\nThe pattern within the inner area is:\nA A B B\nA A B B\nB B A A\nB B A A \n(assuming a 4x4 inner area as in the examples)\n\"\"\"\n\ndef find_frame_and_inner_bounds(grid):\n    \"\"\"Finds the bounds of the gray frame and the inner white area.\"\"\"\n    gray_pixels = np.argwhere(grid == 5)\n    if gray_pixels.size == 0:\n        return None, None, None, None, None, None, None, None\n\n    frame_min_row = np.min(gray_pixels[:, 0])\n    frame_max_row = np.max(gray_pixels[:, 0])\n    frame_min_col = np.min(gray_pixels[:, 1])\n    frame_max_col = np.max(gray_pixels[:, 1])\n\n    inner_min_row = frame_min_row + 1\n    inner_max_row = frame_max_row - 1\n    inner_min_col = frame_min_col + 1\n    inner_max_col = frame_max_col - 1\n    \n    # Verify inner area is actually white - this might be too strict, \n    # but helps confirm assumptions for the examples.\n    # Let's assume the inner area is defined purely by frame bounds for now.\n    \n    return (frame_min_row, frame_max_row, frame_min_col, frame_max_col,\n            inner_min_row, inner_max_row, inner_min_col, inner_max_col)\n\n\ndef find_external_pixels(grid, frame_bounds):\n    \"\"\"Finds the two non-white, non-gray pixels outside the frame.\"\"\"\n    frame_min_r, frame_max_r, frame_min_c, frame_max_c = frame_bounds\n    external_pixels = []\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            # Check if pixel is outside the frame\n            is_outside = (r < frame_min_r or r > frame_max_r or\n                          c < frame_min_c or c > frame_max_c)\n            if is_outside:\n                color = grid[r, c]\n                if color != 0 and color != 5:\n                    external_pixels.append({'row': r, 'col': c, 'color': color})\n                    if len(external_pixels) == 2: # Assume exactly 2\n                         return external_pixels\n    return external_pixels # Should contain 2 pixels based on examples\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by filling the inner area of a gray frame \n    with a pattern determined by two external pixels.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # 1. Find Frame and Inner Area bounds\n    bounds = find_frame_and_inner_bounds(input_grid)\n    if bounds[0] is None: # No frame found\n        return output_grid # Return unchanged grid if no frame\n        \n    (frame_min_r, frame_max_r, frame_min_c, frame_max_c,\n     inner_min_r, inner_max_r, inner_min_c, inner_max_c) = bounds\n\n    # Check if inner bounds are valid\n    if inner_min_r > inner_max_r or inner_min_c > inner_max_c:\n         # Frame is too thin or invalid\n         return output_grid \n\n    # 2. Locate External Colors\n    frame_coords = (frame_min_r, frame_max_r, frame_min_c, frame_max_c)\n    external_pixels = find_external_pixels(input_grid, frame_coords)\n\n    if len(external_pixels) != 2:\n        # Unexpected number of external pixels, return original grid\n        return output_grid \n        \n    p1 = external_pixels[0]\n    p2 = external_pixels[1]\n\n    # 3. Determine Primary Color (A) and Secondary Color (B)\n    color_a = -1 # Placeholder\n    color_b = -1 # Placeholder\n\n    if p1['row'] == p2['row']: # Horizontal alignment\n        if p1['col'] < p2['col']: # p1 is left\n            color_a = p1['color']\n            color_b = p2['color']\n        else: # p2 is left\n            color_a = p2['color']\n            color_b = p1['color']\n    elif p1['col'] == p2['col']: # Vertical alignment\n        pixel_col = p1['col']\n        if pixel_col < inner_min_c: # Left of frame\n            if p1['row'] < p2['row']: # p1 is top\n                color_a = p1['color']\n                color_b = p2['color']\n            else: # p2 is top\n                color_a = p2['color']\n                color_b = p1['color']\n        elif pixel_col > inner_max_c: # Right of frame\n            if p1['row'] > p2['row']: # p1 is bottom\n                color_a = p1['color']\n                color_b = p2['color']\n            else: # p2 is bottom\n                color_a = p2['color']\n                color_b = p1['color']\n        else: \n            # This case (pixels vertically aligned *within* frame's column range but outside row range)\n            # is not covered by examples, return original for safety\n            return output_grid\n    else:\n        # Pixels not aligned horizontally or vertically, not covered by examples\n         return output_grid\n\n    if color_a == -1 or color_b == -1:\n         # Color assignment failed for some reason\n         return output_grid\n\n    # 4. Apply Pattern to Inner Area\n    inner_height = inner_max_r - inner_min_r + 1\n    inner_width = inner_max_c - inner_min_c + 1\n    mid_row_offset = inner_height // 2 # Row index relative to inner_min_r\n    mid_col_offset = inner_width // 2  # Col index relative to inner_min_c\n\n    for r in range(inner_min_r, inner_max_r + 1):\n        for c in range(inner_min_c, inner_max_c + 1):\n            rel_r = r - inner_min_r\n            rel_c = c - inner_min_c\n\n            if rel_r < mid_row_offset: # Top half\n                if rel_c < mid_col_offset: # Top-left quadrant\n                    output_grid[r, c] = color_a\n                else: # Top-right quadrant\n                    output_grid[r, c] = color_b\n            else: # Bottom half\n                if rel_c < mid_col_offset: # Bottom-left quadrant\n                    output_grid[r, c] = color_b\n                else: # Bottom-right quadrant\n                    output_grid[r, c] = color_a\n\n    # 5. Return the constructed output grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3899,
    "candidates_token_count": 1886,
    "total_token_count": 5785,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 20.209454,
  "retries": null
}