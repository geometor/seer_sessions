facts:
  - grid_elements:
      - type: background
        color: white (0)
      - type: pixel
        color: various (1-9)
  - key_pixels:
      - type: gray_pixel
        color: gray (5)
        count: 2
        roles:
          - role: anchor_point
            description: Belongs to a larger connected component (source_object).
          - role: target_point
            description: Is isolated (forms a 1x1 object).
  - objects:
      - type: source_object
        description: A connected component of non-white pixels containing the anchor_point gray pixel.
        properties:
          - shape: variable
          - colors: multiple, including gray (5)
      - type: target_marker
        description: The isolated gray pixel at the target_point.
        properties:
          - shape: 1x1 pixel
          - color: gray (5)
  - relationships:
      - type: spatial
        description: The relative position between the anchor_point and target_point defines a translation vector.
        vector: target_point_location - anchor_point_location
  - actions:
      - action: identify_gray_pixels
        input: input_grid
        output: locations of the two gray pixels
      - action: identify_source_object_and_anchor
        input: input_grid, gray_pixel_locations
        output: source_object (set of pixel coords and colors), anchor_point_location
      - action: identify_target_point
        input: gray_pixel_locations, anchor_point_location
        output: target_point_location
      - action: calculate_translation
        input: anchor_point_location, target_point_location
        output: offset_vector (dr, dc)
      - action: copy_and_translate
        input: input_grid, source_object, offset_vector, target_point_location
        output: output_grid
        steps:
          - Initialize output_grid as a copy of input_grid.
          - Set pixel at target_point_location in output_grid to white (0).
          - For each pixel (r, c) with color 'col' in source_object:
              - If 'col' is NOT gray (5):
                  - Calculate destination: (dest_r, dest_c) = (r + dr, c + dc)
                  - If (dest_r, dest_c) is within grid bounds:
                      - Set output_grid[dest_r, dest_c] = col