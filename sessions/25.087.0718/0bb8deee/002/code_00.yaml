task_description: Assemble a 6x6 grid from parts of a larger grid divided by lines.

input_features:
  - grid: A 2D array of pixels (integers 0-9).
  - dividing_lines:
      - type: One horizontal line and one vertical line.
      - property: Consist entirely of the same single non-white color (ignoring white pixels).
      - location: Intersect within the grid.
      - function: Divide the grid into four quadrants (Top-Left, Top-Right, Bottom-Left, Bottom-Right), excluding the lines themselves.
  - quadrants:
      - definition: Four rectangular regions defined by the dividing lines.
      - content: Contain various patterns or objects represented by non-white pixels.

output_features:
  - grid: A 6x6 2D array of pixels.
  - structure: Composed of four 3x3 subgrids.
  - subgrids:
      - Top-Left: Corresponds to the input Top-Left quadrant.
      - Top-Right: Corresponds to the input Top-Right quadrant.
      - Bottom-Left: Corresponds to the input Bottom-Left quadrant.
      - Bottom-Right: Corresponds to the input Bottom-Right quadrant.

transformation:
  - action: Identify the single non-white color `C` and the row index `R` and column index `C` such that row `R` and column `C` consist only of color `C` (and potentially white color 0).
  - action: Define the four quadrants relative to the intersection `(R, C)`:
      - TL: `grid[0:R, 0:C]`
      - TR: `grid[0:R, C+1:cols]`
      - BL: `grid[R+1:rows, 0:C]`
      - BR: `grid[R+1:rows, C+1:cols]`
  - action: For each quadrant:
      - step: Identify all non-white pixels within the quadrant.
      - step: If non-white pixels exist, calculate their minimal bounding box (min_row, max_row, min_col, max_col) relative to the full input grid coordinates.
      - step: Extract the content within this bounding box: `extracted_content = grid[min_row : max_row+1, min_col : max_col+1]`.
      - step: If no non-white pixels exist, the extracted_content is empty.
  - action: Create a new 6x6 grid initialized with white (0).
  - action: Place the `extracted_content` from each quadrant into the corresponding 3x3 subgrid of the output grid:
      - TL content -> Place starting at output `(0, 0)`.
      - TR content -> Place starting at output `(0, 3)`.
      - BL content -> Place starting at output `(3, 0)`.
      - BR content -> Place starting at output `(3, 3)`.
      - rule: When placing, ensure the content does not exceed the 3x3 boundary of the target subgrid. If `extracted_content` is larger than 3x3, only the top-left 3x3 part is placed. If smaller, it's placed at the top-left within the 3x3 area, padded with white.

constants:
  - output_grid_size: 6x6
  - output_subgrid_size: 3x3
  - background_color: 0 (white)