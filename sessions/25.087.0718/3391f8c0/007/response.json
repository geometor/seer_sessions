{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nThe transformation identifies the two distinct non-white colors present in the input grid.\nIt then finds all distinct objects (contiguous areas of the same non-white color).\nAn output grid of the same size is created, initially filled with the background color (white, 0).\nThe transformation then redraws each object found in the input grid onto the output grid, but swaps its color.\nObjects originally of the first non-white color are drawn with the second non-white color, and vice versa.\nThe position and shape of each object remain the same; only their colors are swapped.\nBackground pixels (white) remain white.\n\"\"\"\n\ndef find_objects(grid: np.ndarray) -> list[tuple[int, set[tuple[int, int]]]]:\n    \"\"\"\n    Finds all connected objects of the same non-white color in the grid.\n\n    Args:\n        grid: The input numpy array grid.\n\n    Returns:\n        A list where each element is a tuple: (color, set_of_coordinates).\n        Each set_of_coordinates contains (row, col) tuples for pixels belonging to that object.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = set()\n    objects = []\n    \n    for r in range(rows):\n        for c in range(cols):\n            # Check if the pixel is non-white and not visited yet\n            if grid[r, c] != 0 and (r, c) not in visited:\n                color = grid[r, c]\n                current_object_coords = set()\n                q = deque([(r, c)])\n                visited.add((r, c))\n                current_object_coords.add((r, c))\n                \n                # Start Breadth-First Search (BFS) to find connected pixels of the same color\n                while q:\n                    row, col = q.popleft()\n                    \n                    # Check 4-directional neighbors\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        \n                        # Check bounds and if neighbor is part of the same object\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] == color and (nr, nc) not in visited:\n                            visited.add((nr, nc))\n                            current_object_coords.add((nr, nc))\n                            q.append((nr, nc))\n                            \n                # Add the found object (color and coordinates) to the list\n                if current_object_coords:\n                    objects.append((color, current_object_coords))\n                    \n    return objects\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Swaps the colors of distinct objects based on the two non-white colors found.\n\n    Args:\n        input_grid: A numpy array representing the input grid.\n\n    Returns:\n        A numpy array representing the output grid with object colors swapped.\n    \"\"\"\n    # Find the unique non-white color values\n    unique_colors = np.unique(input_grid)\n    non_white_colors = unique_colors[unique_colors != 0]\n\n    # If there are not exactly two non-white colors, return the original grid\n    # (or handle based on specific problem constraints if different)\n    if len(non_white_colors) != 2:\n        # This case might need refinement based on task requirements if inputs\n        # can deviate from having exactly two non-background colors.\n        # For now, assume valid inputs have exactly two or return original.\n        return input_grid.copy()\n\n    color1 = non_white_colors[0]\n    color2 = non_white_colors[1]\n\n    # Find all distinct objects in the input grid\n    objects = find_objects(input_grid)\n\n    # Initialize the output grid with the background color (0)\n    output_grid = np.zeros_like(input_grid)\n\n    # Iterate through the found objects and draw them with swapped colors\n    for obj_color, obj_coords in objects:\n        # Determine the swapped color\n        swapped_color = -1 # Placeholder for invalid state\n        if obj_color == color1:\n            swapped_color = color2\n        elif obj_color == color2:\n            swapped_color = color1\n        \n        # Draw the object with the swapped color onto the output grid\n        if swapped_color != -1:\n            for r, c in obj_coords:\n                output_grid[r, c] = swapped_color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4664,
    "candidates_token_count": 1064,
    "total_token_count": 5728,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 103.825294,
  "retries": null
}