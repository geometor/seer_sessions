{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nThe transformation identifies the two distinct non-white colors present in the input grid.\nIt then creates an output grid by swapping these two colors wherever they appear.\nSpecifically, every pixel that had the first non-white color in the input grid will have the second non-white color in the output grid, and vice versa.\nBackground pixels (white, color 0) remain unchanged.\n\"\"\"\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Swaps the two non-white colors found in the input grid pixel by pixel.\n\n    Args:\n        input_grid: A numpy array representing the input grid.\n\n    Returns:\n        A numpy array representing the output grid with the two non-white colors swapped.\n        Background pixels remain unchanged.\n    \"\"\"\n    # Create a copy of the input grid to modify\n    output_grid = input_grid.copy()\n    \n    # Find the unique non-white color values\n    unique_colors = np.unique(input_grid)\n    non_white_colors = unique_colors[unique_colors != 0]\n\n    # Check if there are exactly two non-white colors\n    if len(non_white_colors) != 2:\n        # If not exactly two, return the original grid unchanged \n        # (based on problem constraints implicitly suggesting this scenario)\n        return output_grid\n\n    color1 = non_white_colors[0]\n    color2 = non_white_colors[1]\n\n    # Iterate through each pixel of the grid\n    rows, cols = input_grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            # Get the color of the current pixel in the original input\n            current_color = input_grid[r, c]\n\n            # If the pixel has color1, change it to color2 in the output grid\n            if current_color == color1:\n                output_grid[r, c] = color2\n            # If the pixel has color2, change it to color1 in the output grid\n            elif current_color == color2:\n                output_grid[r, c] = color1\n            # Otherwise (it's the background color 0), leave it unchanged \n            # (already handled by copying initially)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5295,
    "candidates_token_count": 524,
    "total_token_count": 5819,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 162.359643,
  "retries": null
}