{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Identifies the two distinct non-white colors present in the input grid\n    and swaps their positions. Background (white) pixels remain unchanged.\n\n    Args:\n      input_grid: A numpy array representing the input grid.\n\n    Returns:\n      A numpy array representing the output grid with the two non-white\n      colors swapped.\n    \"\"\"\n\n    # Find the unique non-zero color values in the input grid\n    unique_colors = np.unique(input_grid)\n    non_white_colors = unique_colors[unique_colors != 0]\n\n    # Ensure there are exactly two non-white colors to swap\n    if len(non_white_colors) != 2:\n        # This case shouldn't happen based on the examples, but it's good practice\n        # to handle it. We could raise an error or return the input unchanged.\n        # Returning input unchanged seems safer for ARC tasks.\n        print(f\"Warning: Expected 2 non-white colors, found {len(non_white_colors)}. Returning original grid.\")\n        return input_grid.copy()\n\n    color1 = non_white_colors[0]\n    color2 = non_white_colors[1]\n\n    # Create a copy of the input grid to modify\n    output_grid = input_grid.copy()\n\n    # Get the dimensions of the grid\n    rows, cols = input_grid.shape\n\n    # Iterate through each cell of the input grid\n    for r in range(rows):\n        for c in range(cols):\n            # Get the color of the current cell\n            current_color = input_grid[r, c]\n\n            # Apply the swap logic\n            if current_color == color1:\n                output_grid[r, c] = color2\n            elif current_color == color2:\n                output_grid[r, c] = color1\n            # White (0) pixels remain unchanged as the output grid is a copy\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3564,
    "candidates_token_count": 470,
    "total_token_count": 4034,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 6.822913,
  "retries": null
}