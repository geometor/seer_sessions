{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nReflects non-white, non-blue pixels across a blue line axis (either horizontal or vertical).\nThe color of the original pixel is swapped according to predefined pairs (Red<->Green, Azure<->Yellow, Gray<->Magenta).\nThe original color (before swapping) is placed at the reflected position.\nThe blue line and white background remain unchanged, except where overwritten by reflected pixels.\n\"\"\"\n\ndef find_reflection_axis(grid_array):\n    \"\"\"\n    Finds the horizontal or vertical blue line axis.\n\n    Args:\n        grid_array: A numpy array representing the grid.\n\n    Returns:\n        A tuple (orientation, index) where orientation is 'h' or 'v',\n        and index is the row or column index of the line.\n        Returns (None, -1) if no axis is found.\n    \"\"\"\n    height, width = grid_array.shape\n\n    # Check for horizontal line\n    for r in range(height):\n        if np.all(grid_array[r, :] == 1):\n            return 'h', r\n\n    # Check for vertical line\n    for c in range(width):\n        if np.all(grid_array[:, c] == 1):\n            return 'v', c\n\n    return None, -1 # Should not happen based on task constraints\n\ndef reflect_coordinates(r, c, axis_orientation, axis_index):\n    \"\"\"\n    Calculates the reflected coordinates across the axis.\n\n    Args:\n        r: Original row index.\n        c: Original column index.\n        axis_orientation: 'h' for horizontal, 'v' for vertical.\n        axis_index: The index of the axis line.\n\n    Returns:\n        A tuple (ref_r, ref_c) representing the reflected coordinates.\n    \"\"\"\n    ref_r, ref_c = -1, -1\n    if axis_orientation == 'h':\n        # Reflect vertically across the horizontal line\n        ref_r = axis_index + (axis_index - r)\n        ref_c = c\n    elif axis_orientation == 'v':\n        # Reflect horizontally across the vertical line\n        ref_r = r\n        ref_c = axis_index + (axis_index - c)\n    return ref_r, ref_c\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the reflection and color swap transformation to the input grid.\n\n    Args:\n        input_grid: A list of lists representing the input grid.\n\n    Returns:\n        A list of lists representing the transformed output grid.\n    \"\"\"\n    input_array = np.array(input_grid, dtype=int)\n    output_grid = np.copy(input_array) # Initialize output as a copy\n    height, width = input_array.shape\n\n    # 1. Find the reflection axis\n    line_orientation, line_index = find_reflection_axis(input_array)\n\n    if line_orientation is None:\n        # This case should ideally not be reached given the task structure\n        return input_grid # Return original if no axis found\n\n    # 2. Define the color swap mapping\n    color_swap_map = {\n        2: 3, 3: 2,  # Red <-> Green\n        8: 4, 4: 8,  # Azure <-> Yellow\n        5: 6, 6: 5   # Gray <-> Magenta\n        # Other colors map to themselves (identity swap)\n    }\n\n    # 3. Iterate through each pixel to find source pixels\n    for r in range(height):\n        for c in range(width):\n            original_color = input_array[r, c]\n\n            # 4. Check if the pixel is a source pixel (not white and not blue)\n            if original_color != 0 and original_color != 1:\n\n                # 5a. Calculate reflection coordinates\n                ref_r, ref_c = reflect_coordinates(r, c, line_orientation, line_index)\n\n                # 5b. Determine the swapped color\n                swapped_color = color_swap_map.get(original_color, original_color) # Default to original if not in map\n\n                # 5c. Update the output grid\n                # Place the swapped color at the original position\n                output_grid[r, c] = swapped_color\n\n                # Place the original color at the reflected position, checking bounds\n                if 0 <= ref_r < height and 0 <= ref_c < width:\n                    output_grid[ref_r, ref_c] = original_color\n\n    # Convert the numpy array back to a list of lists before returning\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 9168,
    "candidates_token_count": 1067,
    "total_token_count": 10235,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.805504,
  "retries": null
}