{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentifies all separate non-background objects in the input grid.\nFor each object, counts the number of unique colors it contains.\nSelects the object with the maximum number of unique colors.\nReturns a new grid containing only the selected object, cropped to its bounding box.\n\"\"\"\n\n# Helper function using BFS to find one connected object and its properties\ndef find_one_object(grid, start_r, start_c, visited):\n    \"\"\"\n    Finds a single connected object starting from (start_r, start_c) using BFS.\n\n    Args:\n        grid (np.array): The input grid.\n        start_r (int): Starting row.\n        start_c (int): Starting column.\n        visited (np.array): Boolean array marking visited cells.\n\n    Returns:\n        tuple: (list_of_coords, unique_color_count)\n               list_of_coords is a list of (row, col) tuples for the object.\n               unique_color_count is the number of distinct non-zero colors in the object.\n               Returns ([], 0) if the starting cell is background or already visited.\n    \"\"\"\n    rows, cols = grid.shape\n    if not (0 <= start_r < rows and 0 <= start_c < cols) or \\\n       visited[start_r, start_c] or grid[start_r, start_c] == 0:\n        return [], 0\n\n    q = deque([(start_r, start_c)])\n    object_coords = []\n    object_colors = set()\n    visited[start_r, start_c] = True\n\n    while q:\n        r, c = q.popleft()\n        object_coords.append((r, c))\n        color = grid[r, c]\n        # Add color to set (set handles uniqueness automatically)\n        object_colors.add(color) \n\n        # Explore 4-way neighbors (up, down, left, right)\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n            # Check bounds, if neighbor is non-background and not visited\n            if 0 <= nr < rows and 0 <= nc < cols and \\\n               not visited[nr, nc] and grid[nr, nc] != 0:\n                visited[nr, nc] = True\n                q.append((nr, nc))\n\n    # We are counting non-background colors, so if 0 was somehow added (it shouldn't be), remove it.\n    # However, the search condition grid[nr, nc] != 0 prevents this.\n    # The count is simply the size of the set.\n    return object_coords, len(object_colors)\n\n# Helper function to get the bounding box of a set of coordinates\ndef get_bounding_box(coords):\n    \"\"\"\n    Calculates the minimum bounding box for a list of coordinates.\n\n    Args:\n        coords (list): A list of (row, col) tuples.\n\n    Returns:\n        tuple: (min_r, min_c, max_r, max_c) or None if coords is empty.\n    \"\"\"\n    if not coords:\n        return None\n    min_r = min(r for r, c in coords)\n    min_c = min(c for r, c in coords)\n    max_r = max(r for r, c in coords)\n    max_c = max(c for r, c in coords)\n    return min_r, min_c, max_r, max_c\n\n# Helper function to extract a subgrid based on a bounding box\ndef extract_subgrid(grid, bbox):\n    \"\"\"\n    Extracts a subgrid from the grid using the bounding box.\n\n    Args:\n        grid (np.array): The main grid.\n        bbox (tuple): (min_r, min_c, max_r, max_c).\n\n    Returns:\n        np.array: The extracted subgrid. Returns empty array if bbox is None.\n    \"\"\"\n    if bbox is None:\n        # Return an empty numpy array with appropriate shape if needed,\n        # or handle based on expected behavior for \"no object found\".\n        # For ARC, returning an empty list of lists might be represented as np.array([]).shape -> (0,)\n        # Let's return a 0x0 array for consistency.\n         return np.array([[]]).reshape(0,0) \n    min_r, min_c, max_r, max_c = bbox\n    # Slice numpy array: upper bound is exclusive, so add 1\n    return grid[min_r:max_r+1, min_c:max_c+1]\n\n\ndef transform(input_grid):\n    \"\"\"\n    Identifies all separate non-background objects in the input grid.\n    For each object, counts the number of unique colors it contains.\n    Selects the object with the maximum number of unique colors.\n    Returns a new grid containing only the selected object, cropped to its bounding box.\n    \"\"\"\n    # Convert input list of lists to numpy array for efficient processing\n    input_grid_np = np.array(input_grid, dtype=int)\n    rows, cols = input_grid_np.shape\n    # Keep track of visited cells during object search\n    visited = np.zeros_like(input_grid_np, dtype=bool)\n\n    max_unique_colors = -1\n    best_object_bbox = None\n\n    # Iterate through each cell to find starting points of objects\n    for r in range(rows):\n        for c in range(cols):\n            # If cell is part of an object and not yet visited\n            if input_grid_np[r, c] != 0 and not visited[r, c]:\n                # Find the complete object starting from this cell\n                object_coords, unique_color_count = find_one_object(input_grid_np, r, c, visited)\n\n                # If this object has more unique colors than the best found so far\n                if unique_color_count > max_unique_colors:\n                    max_unique_colors = unique_color_count\n                    # Store the bounding box of this new best object\n                    best_object_bbox = get_bounding_box(object_coords)\n                \n                # Note: Tie-breaking is implicitly handled by taking the first object\n                # found with the maximum number of unique colors. If the problem\n                # required a different tie-breaking rule (e.g., largest area, topmost),\n                # additional logic would be needed here inside an `elif unique_color_count == max_unique_colors:` block.\n\n    # After checking all cells, extract the subgrid of the best object\n    if best_object_bbox:\n        output_grid_np = extract_subgrid(input_grid_np, best_object_bbox)\n    else:\n        # Handle case where no non-background object is found\n        # Return an empty grid as per ARC conventions (empty list of lists)\n        output_grid_np = np.array([[]]).reshape(0,0) \n\n    # Convert the final numpy array back to a list of lists\n    return output_grid_np.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3262,
    "candidates_token_count": 1667,
    "total_token_count": 4929,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 40.359244,
  "retries": null
}