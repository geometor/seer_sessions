{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransformation Rule:\n1. Find the single horizontal line containing non-white (non-zero) pixels in the input grid. Let its row index be `r_line`.\n2. Create the output grid as a copy of the input grid.\n3. Iterate through each column `c` of the horizontal line in the input grid.\n4. If the pixel at `(r_line, c)` is red (2):\n   a. Define a target height `h = 4`.\n   b. For each step `k` from 0 to `h-1`:\n      i. Calculate the source column `c_source = c + k`.\n      ii. Calculate the target row `r_target = r_line - 1 - k`.\n      iii. If `r_target` is within the grid's top boundary (>= 0) and `c_source` is within the grid's right boundary (< width), copy the color from `input_grid[r_line, c_source]` to `output_grid[r_target, c]`.\n5. If the pixel at `(r_line, c)` is azure (8):\n   a. Define a target height `h = 3`.\n   b. For each step `k` from 0 to `h-1`:\n      i. Calculate the source column `c_source = c + k`.\n      ii. Calculate the target row `r_target = r_line - 1 - k`.\n      iii. If `r_target` is within the grid's top boundary (>= 0) and `c_source` is within the grid's right boundary (< width), copy the color from `input_grid[r_line, c_source]` to `output_grid[r_target, c]`.\n6. Return the modified output grid.\n\"\"\"\n\ndef find_horizontal_line_row(grid):\n    \"\"\"Finds the row index of the horizontal line containing non-zero pixels.\"\"\"\n    for r in range(grid.shape[0]):\n        if np.any(grid[r, :] != 0):\n            return r\n    return -1 # Should not happen based on task description\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid. Finds a horizontal line,\n    identifies trigger pixels (red=2, azure=8), and draws vertical columns upwards,\n    copying colors from the line segment starting at the trigger pixel.\n    Red triggers a height of 4, azure triggers a height of 3.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_grid_np = np.array(input_grid)\n    \n    # Initialize output_grid as a copy of the input\n    output_grid = input_grid_np.copy()\n    \n    # Get grid dimensions\n    height, width = input_grid_np.shape\n    \n    # Find the row index of the horizontal line\n    r_line = find_horizontal_line_row(input_grid_np)\n    \n    # If no line is found (though unlikely based on examples), return original\n    if r_line == -1:\n        return output_grid.tolist()\n        \n    # Iterate through each column of the grid\n    for c in range(width):\n        # Get the color of the pixel in the horizontal line\n        pixel_color = input_grid_np[r_line, c]\n        \n        target_height = 0\n        # Determine target height based on trigger color\n        if pixel_color == 2: # Red\n            target_height = 4\n        elif pixel_color == 8: # Azure\n            target_height = 3\n            \n        # If it's a trigger pixel, draw the vertical column\n        if target_height > 0:\n            # Iterate upwards for the defined height\n            for k in range(target_height):\n                # Calculate the source column for the color\n                c_source = c + k\n                # Calculate the target row for drawing\n                r_target = r_line - 1 - k\n                \n                # Check boundaries: target row must be >= 0 and source column must be < width\n                if r_target >= 0 and c_source < width:\n                    # Get the color from the horizontal line at the source column\n                    color_to_draw = input_grid_np[r_line, c_source]\n                    # Set the pixel in the output grid\n                    output_grid[r_target, c] = color_to_draw\n\n    # Convert back to list of lists for the expected output format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3896,
    "candidates_token_count": 1052,
    "total_token_count": 4948,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 79.730983,
  "retries": null
}