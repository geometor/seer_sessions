task_description: Recolor azure (8) regions based on a palette derived from vertical lines and the horizontal order of the azure regions.

input_features:
  - name: grid
    type: 2D array of integers (colors)
  - name: palette_source_lines
    description: Vertical lines of pixels in odd-numbered columns (1, 3, 5...).
    properties:
      - Each line contributes at most one color to the palette.
      - Contribution rule: The first non-white (0), non-azure (8) color encountered scanning top-down in an odd column is added.
      - Termination: Palette extraction stops if an odd column contains azure (8) or is entirely white (0).
  - name: azure_regions
    description: Contiguous regions of azure (8) pixels.
    properties:
      - Connectivity: Pixels are connected if they are adjacent horizontally, vertically, or diagonally (8-connectivity).
      - Each distinct connected component forms a region.

transformation:
  - step: extract_palette
    input: grid
    output: ordered list of colors `palette`
    action: Scan odd columns (1, 3, 5...) left-to-right. For each, find the first non-white, non-azure pixel color. Add it to `palette`. Stop if an azure pixel is found in an odd column or the column is all white.
  - step: identify_azure_components
    input: grid
    output: list of azure components, where each component is a set of (row, col) coordinates.
    action: Find all connected components of azure (8) pixels using 8-connectivity.
  - step: determine_component_order
    input: list of azure components
    output: ordered list of azure components `ordered_components`
    action: For each component, find the minimum column index among its pixels. Sort the components based on this minimum column index in ascending order.
  - step: map_colors
    input: `palette`, `ordered_components`
    output: mapping `component_color_map` where key is component ID/index and value is color.
    action: Assign the Nth color from `palette` to the Nth component in `ordered_components`. Handle cases where the number of components might not match the number of palette colors (though in examples they match).
  - step: paint_output
    input: grid dimensions, `component_color_map`, components coordinates
    output: output_grid
    action: Create an output grid of the same dimensions as the input, initialized to white (0). For each component in `ordered_components`, if it has a mapped color, set the color of all pixels belonging to that component in the output grid to the mapped color.

output_features:
  - name: output_grid
    type: 2D array of integers (colors)
    properties:
      - Same dimensions as the input grid.
      - Pixels corresponding to input azure regions are repainted according to the component-palette mapping.
      - All other pixels are white (0).