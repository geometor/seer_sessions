{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nRecolors pixels within a bounded area based on their quadrant, using a 2x2 color key found elsewhere.\n\n1.  **Locate the Key:** Find the unique 2x2 block of pixels in the input grid where none of the four pixels are white (0) or azure (8). Record the four colors (Key-TL, Key-TR, Key-BL, Key-BR) and the key's location.\n2.  **Identify the Target Area:** Determine the rectangular region where modifications occur. This area is typically enclosed by a single-pixel-thick frame of azure (8) pixels. Find the bounding box of all non-azure (8) pixels; if it's framed by azure (8), the Target Area consists of all pixels strictly *inside* this frame. Record its boundaries (top, bottom, left, right) and dimensions (height, width).\n3.  **Identify the Source Color:** Find the single color value that is present both within the 2x2 Key and also appears at least once within the identified Target Area in the input grid (excluding white (0)). This is the Source Color.\n4.  **Determine Quadrants:** Calculate the center of the Target Area. The midpoint row is `top + height // 2` and the midpoint column is `left + width // 2`. Pixels with row index `< midpoint_row` are in the top half; pixels with column index `< midpoint_col` are in the left half. This divides the Target Area into four quadrants: Top-Left (TL), Top-Right (TR), Bottom-Left (BL), Bottom-Right (BR).\n5.  **Apply Transformation:** Create a copy of the input grid. Iterate through each pixel within the Target Area's boundaries. If a pixel in the input grid has the Source Color:\n    *   Determine which quadrant it falls into (TL, TR, BL, BR).\n    *   Change the color of this pixel in the copied grid to the corresponding Key color: Key-TL for TL quadrant, Key-TR for TR, Key-BL for BL, Key-LR for BR.\n6.  **Output:** The modified grid.\n\"\"\"\n\ndef find_key(grid):\n    \"\"\"Finds the 2x2 key block (non-0, non-8 colors) and its top-left coordinates.\"\"\"\n    rows, cols = grid.shape\n    for r in range(rows - 1):\n        for c in range(cols - 1):\n            subgrid = grid[r:r+2, c:c+2]\n            # Check if all elements are not 0 and not 8\n            if np.all((subgrid != 0) & (subgrid != 8)):\n                return subgrid, (r, c)\n    return None, None # Key not found\n\ndef find_target_area(grid):\n    \"\"\"\n    Identifies the target area, assuming it's framed by azure (8) pixels.\n    Returns the boundaries (top, left, bottom, right) of the area *inside* the frame.\n    \"\"\"\n    rows, cols = grid.shape\n    azure_color = 8\n\n    # Find coordinates of all non-azure pixels\n    non_azure_coords = np.argwhere(grid != azure_color)\n\n    if non_azure_coords.size == 0:\n        return None # No non-azure pixels found\n\n    # Determine the bounding box of non-azure pixels\n    min_r, min_c = non_azure_coords.min(axis=0)\n    max_r, max_c = non_azure_coords.max(axis=0)\n\n    # Define potential frame coordinates\n    frame_top_r = min_r - 1\n    frame_bottom_r = max_r + 1\n    frame_left_c = min_c - 1\n    frame_right_c = max_c + 1\n\n    # Check if frame coordinates are within grid bounds\n    if frame_top_r < 0 or frame_bottom_r >= rows or frame_left_c < 0 or frame_right_c >= cols:\n        # print(f\"Warning: Bounding box touches grid edge ({min_r, min_c} to {max_r, max_c}). Cannot confirm frame.\")\n        # Fallback: maybe the target area IS the bounding box? Let's return the bbox for now.\n        # Based on examples, a frame seems required. Returning None indicates failure.\n        return None \n\n\n    # Check if the surrounding 1-pixel border is entirely azure\n    is_framed = True\n    # Check top row of frame\n    if not np.all(grid[frame_top_r, frame_left_c : frame_right_c + 1] == azure_color):\n        is_framed = False\n    # Check bottom row of frame\n    if is_framed and not np.all(grid[frame_bottom_r, frame_left_c : frame_right_c + 1] == azure_color):\n         is_framed = False\n    # Check left column of frame (excluding corners already checked)\n    if is_framed and not np.all(grid[frame_top_r + 1 : frame_bottom_r, frame_left_c] == azure_color):\n        is_framed = False\n    # Check right column of frame (excluding corners already checked)\n    if is_framed and not np.all(grid[frame_top_r + 1 : frame_bottom_r, frame_right_c] == azure_color):\n        is_framed = False\n\n    if is_framed:\n        # Target area is inside the frame\n        target_top = min_r\n        target_left = min_c\n        target_bottom = max_r\n        target_right = max_c\n        return target_top, target_left, target_bottom, target_right\n    else:\n        # print(\"Warning: Non-azure bounding box is not fully framed by azure.\")\n        # If no frame, the logic fails based on examples.\n        return None\n\ndef find_source_color(grid, key_colors, target_area_bounds):\n    \"\"\"\n    Finds the unique color present in the key and within the target area (non-0).\n    \"\"\"\n    if target_area_bounds is None:\n        return -1 # Indicate error\n\n    target_top, target_left, target_bottom, target_right = target_area_bounds\n    \n    target_area_colors = set()\n    # Iterate only within the target area\n    for r in range(target_top, target_bottom + 1):\n        for c in range(target_left, target_right + 1):\n             pixel_color = grid[r, c]\n             if pixel_color != 0: # Exclude white background\n                 target_area_colors.add(pixel_color)\n\n    # Find colors present in both the key and the target area (excluding 0)\n    valid_source_colors = key_colors.intersection(target_area_colors)\n\n    if len(valid_source_colors) == 1:\n        return list(valid_source_colors)[0]\n    else:\n        # print(f\"Warning: Found {len(valid_source_colors)} potential source colors: {valid_source_colors}\")\n        return -1 # Indicate error or ambiguous source\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by recoloring pixels based on their quadrant\n    within a framed target area, using a 2x2 color key.\n    \"\"\"\n    # Convert input to numpy array for easier processing\n    grid = np.array(input_grid, dtype=int)\n    # Create a copy to modify and return\n    output_grid = np.copy(grid)\n\n    # 1. Locate the Key\n    key_matrix, key_coords = find_key(grid)\n    if key_matrix is None:\n        # print(\"Error: Could not find the 2x2 key.\")\n        return input_grid # Return original if key is missing\n\n    key_colors = set(key_matrix.flatten())\n    key_ul = key_matrix[0, 0]\n    key_ur = key_matrix[0, 1]\n    key_ll = key_matrix[1, 0]\n    key_lr = key_matrix[1, 1]\n\n    # 2. Identify the Target Area (inside the azure frame)\n    target_area_bounds = find_target_area(grid)\n    if target_area_bounds is None:\n        # print(\"Error: Could not identify a framed target area.\")\n        return input_grid # Return original if target area is not found as expected\n\n    target_top, target_left, target_bottom, target_right = target_area_bounds\n    target_height = target_bottom - target_top + 1\n    target_width = target_right - target_left + 1\n\n    # Check for valid dimensions\n    if target_height <= 0 or target_width <= 0:\n        # print(\"Error: Identified target area has invalid dimensions.\")\n        return input_grid\n\n    # 3. Identify the Source Color\n    source_color = find_source_color(grid, key_colors, target_area_bounds)\n    if source_color == -1:\n        # print(\"Error: Could not uniquely identify the source color.\")\n        return input_grid # Return original if source color is ambiguous or missing\n\n    # 4. Determine Quadrants boundaries (midpoints are exclusive)\n    # Pixels with row index < mid_row_exclusive are Top\n    # Pixels with col index < mid_col_exclusive are Left\n    mid_row_exclusive = target_top + target_height // 2\n    mid_col_exclusive = target_left + target_width // 2\n\n    # 5. Apply Transformation\n    # Iterate through each pixel *only* within the identified Target Area\n    for r in range(target_top, target_bottom + 1):\n        for c in range(target_left, target_right + 1):\n            # Check if the pixel in the original grid is the source color\n            if grid[r, c] == source_color:\n                # Determine quadrant\n                is_top = r < mid_row_exclusive\n                is_left = c < mid_col_exclusive\n\n                new_color = -1 # Default invalid color\n                if is_top and is_left:         # Top-Left\n                    new_color = key_ul\n                elif is_top and not is_left:   # Top-Right\n                    new_color = key_ur\n                elif not is_top and is_left:   # Bottom-Left\n                    new_color = key_ll\n                elif not is_top and not is_left:# Bottom-Right\n                    new_color = key_lr\n\n                if new_color != -1:\n                   output_grid[r, c] = new_color\n                # No else needed, if quadrant determination failed somehow, pixel remains unchanged\n\n    # 6. Output: Convert back to list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 13908,
    "candidates_token_count": 2524,
    "total_token_count": 16432,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 29.348712,
  "retries": null
}