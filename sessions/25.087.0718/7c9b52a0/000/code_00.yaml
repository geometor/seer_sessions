Input_Grid:
  Properties:
    - type: 2D array of integers (colors)
    - size: variable (e.g., 16x16)
    - contains_border: true
      - border_thickness: 1 pixel
      - border_color: variable (e.g., blue, azure, maroon)
  Contains:
    - Object: White_Rectangle
      - definition: Maximal contiguous rectangular area of white (0) pixels inside the border.
      - count: variable (multiple per input)
      - Properties:
        - height: integer
        - width: integer
        - position: top-left coordinates
      - Contains:
        - Object: Colored_Shape
          - definition: Contiguous block(s) of non-white pixels within a White_Rectangle.
          - color: variable (e.g., red, green, yellow, blue)
          - position: relative to its container White_Rectangle

Output_Grid:
  Properties:
    - type: 2D array of integers (colors)
    - size: Determined by transformation rule (Mode Height x Mode Width of White_Rectangles, then cropped)
  Content:
    - Composite image formed by overlaying the contents of the input White_Rectangles.

Transformation:
  Steps:
    - 1: Identify all White_Rectangles within the input grid border.
    - 2: Record the height and width of each White_Rectangle.
    - 3: Calculate Mode_Height (most frequent height) and Mode_Width (most frequent width).
    - 4: Create an intermediate grid of size Mode_Height x Mode_Width, filled with white (0).
    - 5: For each White_Rectangle:
        - a: Extract its content grid (pixels from input within its bounds).
        - b: Create a temporary grid (Mode_Height x Mode_Width), filled with white (0).
        - c: Copy/crop/pad the content grid onto the top-left of the temporary grid.
        - d: Overlay the temporary grid onto the intermediate grid: copy non-white pixels from temporary to intermediate *only if* the corresponding intermediate pixel is white (0).
    - 6: Crop the intermediate grid: remove all-white rows/columns from the border inwards.
    - 7: Result is the final Output_Grid.
  Key_Rules:
    - White (0) pixels act as transparent during overlay.
    - Non-white pixels only overwrite white pixels during overlay.
    - Output size determined by mode dimensions of White_Rectangles, followed by cropping.