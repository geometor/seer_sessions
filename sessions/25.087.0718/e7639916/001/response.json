{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\ndef find_pixels(grid, color):\n  \"\"\"Finds all coordinates of pixels with a specific color.\"\"\"\n  rows, cols = np.where(grid == color)\n  return list(zip(rows, cols))\n\ndef transform(input_grid):\n  \"\"\"\n  Draws a blue (1) rectangular frame around the bounding box of all azure (8) pixels\n  found in the input grid. The frame is drawn only on white (0) background pixels,\n  preserving the original azure pixels if they lie on the frame's path.\n  \"\"\"\n  # Convert the input list of lists to a NumPy array for easier manipulation\n  input_np = np.array(input_grid, dtype=int)\n  output_grid = np.copy(input_np)\n  \n  # Find the coordinates of all azure (8) pixels\n  azure_pixels = find_pixels(input_np, 8)\n  \n  # If there are no azure pixels, return the original grid\n  if not azure_pixels:\n      return input_grid # Or output_grid.tolist() if consistency is needed\n      \n  # Determine the bounding box coordinates\n  rows = [r for r, c in azure_pixels]\n  cols = [c for r, c in azure_pixels]\n  min_row = min(rows)\n  max_row = max(rows)\n  min_col = min(cols)\n  max_col = max(cols)\n  \n  # Draw the top edge of the frame\n  for c in range(min_col, max_col + 1):\n      if output_grid[min_row, c] == 0: # Check if pixel is white\n          output_grid[min_row, c] = 1 # Draw blue\n          \n  # Draw the bottom edge of the frame\n  for c in range(min_col, max_col + 1):\n      if output_grid[max_row, c] == 0: # Check if pixel is white\n          output_grid[max_row, c] = 1 # Draw blue\n          \n  # Draw the left edge of the frame\n  for r in range(min_row, max_row + 1): # Iterate through rows within the bounds\n      if output_grid[r, min_col] == 0: # Check if pixel is white\n          output_grid[r, min_col] = 1 # Draw blue\n          \n  # Draw the right edge of the frame\n  for r in range(min_row, max_row + 1): # Iterate through rows within the bounds\n      if output_grid[r, max_col] == 0: # Check if pixel is white\n          output_grid[r, max_col] = 1 # Draw blue\n\n  # Convert the NumPy array back to a list of lists for the final output\n  return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3667,
    "candidates_token_count": 658,
    "total_token_count": 4325,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.52596,
  "retries": null
}