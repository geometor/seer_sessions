{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nIdentify distinct, contiguous rectangular blocks of uniform color in the input grid. \nDetermine the top-left corner coordinate and color for each block.\nConstruct an output grid where each cell corresponds to a block in the input.\nThe dimensions of the output grid are determined by the number of unique row and column indices of the block top-left corners.\nThe color of a cell in the output grid is the color of the corresponding block in the input grid, maintaining the relative spatial arrangement.\n\"\"\"\n\ndef find_block_representatives(grid):\n    \"\"\"\n    Identifies the top-left corner and color of each contiguous block.\n\n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        list: A list of tuples, where each tuple is (row, col, color)\n              representing the top-left corner and color of a block.\n    \"\"\"\n    rows, cols = grid.shape\n    representatives = []\n    visited_coords = set() # Keep track of coordinates already part of a found block top-left\n\n    for r in range(rows):\n        for c in range(cols):\n            # Check if this coordinate is already identified as a top-left\n            if (r, c) in visited_coords:\n                continue\n\n            color = grid[r, c]\n            is_top_left = True\n\n            # Check if the cell above has the same color\n            if r > 0 and grid[r - 1, c] == color:\n                is_top_left = False\n            # Check if the cell to the left has the same color\n            elif c > 0 and grid[r, c - 1] == color:\n                 is_top_left = False\n\n            if is_top_left:\n                representatives.append((r, c, color))\n                visited_coords.add((r,c)) # Add this top-left coord to avoid re-adding if logic was different\n\n    # Alternative, more robust block finding (though simpler works here):\n    # Could implement a flood fill or connected components algorithm if blocks weren't guaranteed rectangular.\n    # For this specific task, checking top and left neighbors is sufficient because blocks are solid rectangles.\n\n    return representatives\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by identifying color blocks and creating a smaller\n    grid representing those blocks.\n\n    Args:\n        input_grid (list of lists): The input grid represented as a list of lists.\n\n    Returns:\n        list of lists: The transformed output grid.\n    \"\"\"\n    # Convert input to numpy array for easier handling\n    grid_np = np.array(input_grid, dtype=int)\n    rows, cols = grid_np.shape\n\n    # 1. Identify all distinct, contiguous blocks and their top-left corners/colors\n    block_reps = find_block_representatives(grid_np)\n\n    # Handle empty input or no blocks found (though unlikely in ARC)\n    if not block_reps:\n        return [] # Or return appropriate empty representation\n\n    # 2. Collect all unique top-leftmost row and column indices\n    unique_rows = sorted(list(set(r for r, c, color in block_reps)))\n    unique_cols = sorted(list(set(c for r, c, color in block_reps)))\n\n    # 3. Determine the output grid dimensions\n    output_rows = len(unique_rows)\n    output_cols = len(unique_cols)\n\n    # 4. Create the output grid (initialize with a placeholder, e.g., -1 or 0)\n    # Using numpy for easy assignment, will convert back later\n    output_grid_np = np.full((output_rows, output_cols), -1, dtype=int) # Use -1 to ensure all cells are filled\n\n    # 5. Map row and column indices to output grid indices for quick lookup\n    row_map = {r: i for i, r in enumerate(unique_rows)}\n    col_map = {c: i for i, c in enumerate(unique_cols)}\n\n    # 6. Populate the output grid\n    for r, c, color in block_reps:\n        out_r = row_map[r]\n        out_c = col_map[c]\n        output_grid_np[out_r, out_c] = color\n\n    # 7. Convert the numpy array back to a list of lists\n    output_grid = output_grid_np.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3564,
    "candidates_token_count": 1026,
    "total_token_count": 4590,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.228484,
  "retries": null
}