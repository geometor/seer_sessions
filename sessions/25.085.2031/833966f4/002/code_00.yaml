task_context:
  grid_properties:
    - input_output_shape_match: True # Input and output grids have the same dimensions in all examples.
    - dimensions_vary: True # Example 1 is 5x2, Example 2 is 6x3.
  object_abstraction:
    - The relevant "objects" appear to be entire rows of the grid.
transformation:
  type: Row Swapping
  conditions:
    - Swapping involves pairs of adjacent rows.
    - The decision to swap a pair of rows depends on the index of the first row in the pair.
  details:
    - In Example 1 (5x2):
      - Rows 0 and 1 are swapped (index 0 % 3 == 0).
      - Rows 2 and 3 are NOT swapped (index 2 % 3 != 0).
      - Rows 3 and 4 are swapped (index 3 % 3 == 0).
    - In Example 2 (6x3):
      - Rows 0 and 1 are swapped (index 0 % 3 == 0).
      - Rows 2 and 3 are NOT swapped (index 2 % 3 != 0).
      - Rows 3 and 4 are swapped (index 3 % 3 == 0).
      - Rows 5 and 6 do not form a pair within the grid bounds.
  consistency_check:
    - The rule "swap rows `i` and `i+1` if `i % 3 == 0`" seems consistent across both examples.
    - This is analogous to the previous attempt's logic, but applied to entire rows instead of individual elements in a flattened list.