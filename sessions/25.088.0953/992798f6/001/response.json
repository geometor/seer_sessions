{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nIdentifies the locations of the single blue (1) and single red (2) pixels in the input grid. \nCalculates the coordinates of the pixels lying on the straight line segment connecting the blue and red pixels using Bresenham's line algorithm. \nInitializes the output grid as a copy of the input grid.\nChanges the color of all pixels on the calculated line segment, *except* for the start (blue pixel location) and end (red pixel location) points, to green (3) in the output grid.\n\"\"\"\n\ndef find_pixel(grid, color):\n    \"\"\"Finds the coordinates (row, col) of the first pixel with the specified color.\"\"\"\n    coords = np.argwhere(grid == color)\n    if coords.size > 0:\n        return tuple(coords[0])\n    return None\n\ndef bresenham_line(r0, c0, r1, c1):\n    \"\"\"\n    Generates coordinates for a line from (r0, c0) to (r1, c1) using Bresenham's algorithm.\n    Returns a list of (row, col) tuples.\n    \"\"\"\n    points = []\n    dr = abs(r1 - r0)\n    dc = abs(c1 - c0)\n    sr = 1 if r0 < r1 else -1\n    sc = 1 if c0 < c1 else -1\n    err = dr - dc\n\n    while True:\n        points.append((r0, c0))\n        if r0 == r1 and c0 == c1:\n            break\n        e2 = 2 * err\n        if e2 > -dc:\n            err -= dc\n            r0 += sr\n        if e2 < dr:\n            err += dr\n            c0 += sc\n            \n    return points\n\ndef transform(input_grid):\n    \"\"\"\n    Draws a green line between the blue and red pixels, excluding the endpoints.\n    \"\"\"\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n\n    # Find the coordinates of the blue (1) and red (2) pixels\n    blue_coords = find_pixel(output_grid, 1)\n    red_coords = find_pixel(output_grid, 2)\n\n    if blue_coords is None or red_coords is None:\n        # Should not happen based on task description, but good practice\n        return output_grid \n\n    # Unpack coordinates\n    r_blue, c_blue = blue_coords\n    r_red, c_red = red_coords\n\n    # Generate the line path using Bresenham's algorithm\n    line_path = bresenham_line(r_blue, c_blue, r_red, c_red)\n\n    # Iterate through the path coordinates, skipping the first (blue) and last (red) points\n    # The path must have at least 3 points for there to be intermediate points\n    if len(line_path) > 2: \n        for r, c in line_path[1:-1]:\n             # Ensure coordinates are within grid bounds (should be, but safety check)\n            if 0 <= r < output_grid.shape[0] and 0 <= c < output_grid.shape[1]:\n                # Change the color of the intermediate pixels to green (3)\n                output_grid[r, c] = 3\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5437,
    "candidates_token_count": 790,
    "total_token_count": 6227,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.28985,
  "retries": null
}