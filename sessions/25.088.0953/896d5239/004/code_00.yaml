task_description: Fill regions enclosed by green barriers with azure color.
grid_properties:
  dimensionality: 2
  color_palette: 0-9 (white, blue, red, green, yellow, gray, magenta, orange, azure, maroon)
  max_size: 30x30
objects:
  - object: barrier
    definition: Pixels with green color (3).
    properties: Static, form boundaries.
  - object: region
    definition: A connected component of non-green pixels (using 4-way adjacency).
    properties:
      - Can have various shapes and sizes.
      - Can contain pixels of different non-green colors.
      - Can be adjacent or non-adjacent to the grid border.
  - object: border
    definition: The set of pixels at the edges of the grid (row 0, max_row, col 0, max_col).
actions:
  - action: identify_barriers
    input: input grid
    output: set of coordinates of green pixels.
  - action: identify_regions
    input: input grid, barrier coordinates
    output: list of connected components (regions) of non-green pixels.
  - action: check_border_adjacency
    input: region (set of coordinates), grid dimensions
    output: boolean (true if any pixel in region is on the border, false otherwise).
  - action: fill_region
    input: region coordinates
    output_effect: Change color of all pixels in the region to azure (8).
transformation_rule:
  - step: Preserve green (3) barrier pixels.
  - step: Find all connected components (regions) of non-green pixels.
  - step: For each region, check if it is adjacent to the grid border.
  - step: If a region is NOT adjacent to the border, fill all pixels within that region with azure (8).
  - step: Pixels in regions that ARE adjacent to the border retain their original color.
constants:
  - barrier_color: 3 (green)
  - fill_color: 8 (azure)