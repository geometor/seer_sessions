{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nIdentifies whether the input grid has horizontal (top/bottom) or vertical (left/right) single-pixel thick borders of uniform, non-white, distinct colors.\nIf borders are found, iterates through the grid looking for blue pixels (color 1).\nFor each blue pixel found, it checks its adjacent white pixels (color 0) that are within the non-border area.\nIf the borders are horizontal, a white pixel directly above a blue pixel is changed to the top border's color, and a white pixel directly below is changed to the bottom border's color.\nIf the borders are vertical, a white pixel directly to the left of a blue pixel is changed to the left border's color, and a white pixel directly to the right is changed to the right border's color.\nThe original blue pixels and the border pixels remain unchanged.\nIf no valid borders are identified, the original grid is returned.\n\"\"\"\n\ndef is_uniform_and_non_white(arr):\n    \"\"\"Checks if a 1D numpy array is uniform (all elements same) and not color 0 (white).\"\"\"\n    if arr.size == 0:\n        return False, -1 # Cannot be uniform if empty\n    first_val = arr[0]\n    if first_val == 0: # Check if the color is white\n        return False, -1\n    # Check if all elements are the same as the first element\n    is_uniform = np.all(arr == first_val)\n    return is_uniform, first_val\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the border-based color transformation to white pixels adjacent to blue pixels.\n    \"\"\"\n    input_np = np.array(input_grid, dtype=int)\n    output_grid = np.copy(input_np)\n    height, width = input_np.shape\n\n    border_type = None\n    color1 = -1\n    color2 = -1\n\n    # Check for horizontal borders (top and bottom rows)\n    # Ensure grid is tall enough for distinct top/bottom borders and content area\n    if height >= 3:\n        top_row = input_np[0, :]\n        bottom_row = input_np[height - 1, :]\n        top_uniform, top_color = is_uniform_and_non_white(top_row)\n        bottom_uniform, bottom_color = is_uniform_and_non_white(bottom_row)\n\n        # Check if both are uniform, non-white, and different from each other\n        if top_uniform and bottom_uniform and top_color != bottom_color:\n            border_type = 'horizontal'\n            color1 = top_color  # color_top\n            color2 = bottom_color # color_bottom\n\n    # If horizontal borders not found or not valid, check for vertical borders\n    # Ensure grid is wide enough for distinct left/right borders and content area\n    if border_type is None and width >= 3:\n        left_col = input_np[:, 0]\n        right_col = input_np[:, width - 1]\n        left_uniform, left_color = is_uniform_and_non_white(left_col)\n        right_uniform, right_color = is_uniform_and_non_white(right_col)\n\n        # Check if both are uniform, non-white, and different from each other\n        if left_uniform and right_uniform and left_color != right_color:\n            border_type = 'vertical'\n            color1 = left_color # color_left\n            color2 = right_color # color_right\n\n    # If no valid borders found, return the original grid copy\n    if border_type is None:\n        return output_grid.tolist()\n\n    # Apply transformations based on border type\n    if border_type == 'horizontal':\n        color_top = color1\n        color_bottom = color2\n        # Iterate through the inner grid (excluding borders)\n        for r in range(1, height - 1):\n            for c in range(width):\n                # Find blue pixels (trigger pixels)\n                if input_np[r, c] == 1:\n                    # Check pixel above (must be within inner grid, i.e., r-1 >= 1)\n                    if r - 1 >= 1 and input_np[r - 1, c] == 0:\n                        output_grid[r - 1, c] = color_top\n                    # Check pixel below (must be within inner grid, i.e., r+1 <= height-2)\n                    if r + 1 <= height - 2 and input_np[r + 1, c] == 0:\n                        output_grid[r + 1, c] = color_bottom\n\n    elif border_type == 'vertical':\n        color_left = color1\n        color_right = color2\n        # Iterate through the inner grid (excluding borders)\n        for r in range(height):\n             for c in range(1, width - 1):\n                 # Find blue pixels (trigger pixels)\n                if input_np[r, c] == 1:\n                    # Check pixel left (must be within inner grid, i.e., c-1 >= 1)\n                    if c - 1 >= 1 and input_np[r, c - 1] == 0:\n                        output_grid[r, c - 1] = color_left\n                    # Check pixel right (must be within inner grid, i.e., c+1 <= width-2)\n                    if c + 1 <= width - 2 and input_np[r, c + 1] == 0:\n                        output_grid[r, c + 1] = color_right\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4434,
    "candidates_token_count": 1317,
    "total_token_count": 5751,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 24.727821,
  "retries": null
}