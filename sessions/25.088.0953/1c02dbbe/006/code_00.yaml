task_description: Fill gray areas within bounding boxes defined by colored markers, preserving markers inside the box and erasing those outside.

definitions:
  marker_pixel: A pixel whose color is not white (0) and not gray (5).
  bounding_box(C): The smallest rectangle enclosing all marker pixels of color C.
  fill_region(C): The set of coordinates (r, c) such that the pixel at (r, c) in the input grid is gray (5) AND (r, c) is within the bounding_box(C).

observations:
  - Multiple marker colors can exist in one input grid.
  - Each marker color defines its own independent bounding box and fill region.
  - Gray pixels (5) within a bounding box are changed to the marker color associated with that box.
  - Marker pixels from the input are sometimes erased (set to white 0) and sometimes preserved in the output.
  - Analysis indicates marker pixels are preserved IF AND ONLY IF their location is within the bounding box calculated for their specific color.
  - Marker pixels are erased (set to white 0) IF their location is outside the bounding box calculated for their specific color.
  - The fill operation (changing gray pixels) happens based on the input grid's gray pixels.
  - There might be an implementation issue causing a filled gray pixel to be incorrectly set to white in Example 2 at (12,12), which needs investigation during coding.

actions:
  - Identify all marker pixels and group them by color.
  - For each color C:
    - Calculate bounding_box(C).
    - Calculate fill_region(C) using the input grid.
  - Initialize the output grid as a copy of the input grid.
  - For each color C:
    - For each coordinate (r, c) in fill_region(C):
      - Set the output grid pixel at (r, c) to color C.
  - For each original marker pixel M at location (r, c) with color C_M:
    - Check if (r, c) is within bounding_box(C_M).
    - If (r, c) is NOT within bounding_box(C_M):
      - Set the output grid pixel at (r, c) to white (0).
    - If (r, c) IS within bounding_box(C_M):
       - Set the output grid pixel at (r, c) to color C_M. # Ensure it has the marker color, overwriting if it was filled differently by another color's region. This handles overlaps and preserves the marker.