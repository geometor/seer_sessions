task_description: Replace rows containing trigger pixels with specific color sequences found in the last row, aligning the sequence based on the trigger pixel's color and position.

grid_properties:
  - Input and output grids have the same dimensions.
  - The last row of the input grid serves as a reference or dictionary.
  - The last row of the output grid is identical to the last row of the input grid.
  - All other rows in the input grid may contain 'trigger' pixels.

objects:
  - sequence:
      definition: A contiguous horizontal block of non-white pixels in the last row of the input grid.
      properties:
          - color_pattern: The specific order of colors (pixel values) in the sequence.
          - length: The number of pixels in the sequence.
          - location: Found only in the last row.
      examples:
          - Example 1: [red, green, gray, blue, magenta, yellow] (i.e., [2, 3, 5, 1, 6, 4])
          - Example 2: [blue, red, yellow, green] and [gray, orange, azure, magenta] (i.e., [1, 2, 4, 3] and [5, 7, 8, 6])
          - Example 3: [blue, magenta, red] and [yellow, green, orange, azure] (i.e., [1, 6, 2] and [4, 3, 7, 8])
  - trigger:
      definition: A single non-white pixel located anywhere in the input grid *except* the last row.
      properties:
          - color: The pixel value (1-9).
          - position: The (row, column) coordinate.
      purpose: Activates the sequence copying process for its row. Its color determines *which* sequence is copied, and its column position determines the alignment.

actions:
  - identify_sequences: Scan the last row of the input grid from left to right to find all maximal contiguous sequences of non-white pixels.
  - create_map: Build a mapping where each color present in any identified sequence maps to:
      1. The *first* sequence object it appears in (when scanned left-to-right).
      2. The zero-based index of its first occurrence within that sequence.
  - identify_triggers: Locate all non-white pixels in the input grid, excluding the last row.
  - copy_and_paste:
      - For each trigger pixel:
          1. Use the trigger's color to look up its associated sequence and index_in_sequence from the map.
          2. Determine the starting column for pasting: `paste_start_col = trigger_column - index_in_sequence`.
          3. Create a copy of the input grid (or modify it in place, ensuring correct order if triggers overlap).
          4. Overwrite the pixels in the trigger's row of the output grid with the colors from the associated sequence, starting at `paste_start_col`.
          5. Handle boundary conditions: If the sequence extends beyond the grid's left or right edge, clip the sequence (only paste the parts that fit within the grid width).
      - Preserve the last row: Ensure the last row of the output grid is identical to the input's last row.
      - Preserve background: Pixels not part of a pasted sequence in a modified row remain as they were in the input (or are overwritten by a sequence paste). In these examples, unmodified background pixels are white (0).

edge_cases:
 - Multiple sequences in the last row (Examples 2, 3).
 - A color appearing in multiple sequences (Not present in examples, but the defined mapping rule handles this by choosing the first encountered sequence).
 - Triggers whose associated sequences extend beyond grid boundaries when pasted (Examples 1, 2, 3).
 - Multiple triggers in the same row (Example 2: row 8; Example 3: row 0). The action for the rightmost trigger in a row will overwrite parts of the action from a leftmost trigger if their pasted sequences overlap. (The code implicitly handles this by iterating through triggers as found, which might not be strictly row-by-row, left-to-right, but the final state reflects all pastes). Re-evaluating Example 2, Row 8: Trigger (8, 2, 6) -> Sequence [5, 7, 8, 6], Index 3. Paste Start = 2-3 = -1. Paste `[7, 8, 6]` at cols 0, 1, 2. Trigger (8, 8, 4) -> Sequence [1, 2, 4, 3], Index 2. Paste Start = 8-2 = 6. Paste `[1, 2, 4, 3]` at cols 6, 7, 8, 9. Expected Output row 8: `7 8 6 0 0 0 1 2 4 3 0 0 0 0 0`. This confirms later pastes overwrite earlier ones if they affect the same cell.
