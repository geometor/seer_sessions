task_description: Create a composite image by layering input objects concentrically based on size.

input_elements:
  - type: grid
    description: Contains a white background (color 0) and multiple distinct, non-overlapping, single-color objects.
    properties:
      - colors_present: [0, and others from 1-9]
      - object_shapes: simple lines or small rectangles

output_elements:
  - type: grid
    description: A square grid representing layered objects from the input.
    properties:
      - size: Determined by the largest dimension of the largest input object's bounding box.
      - content: Concentric layers of colors corresponding to input objects.
      - background: No background color; the grid is fully filled by layers.

transformation_steps:
  - step: 1
    action: find_objects
    description: Identify all contiguous blocks of non-white pixels in the input grid.
    inputs:
      - input_grid
    outputs:
      - list_of_objects: Each object represented by its color and pixel coordinates.
  - step: 2
    action: calculate_bounding_boxes
    description: Determine the bounding box (top-left corner, width, height) and area for each identified object.
    inputs:
      - list_of_objects
    outputs:
      - objects_with_bboxes: List of objects, each with color, bbox coordinates, width, height, and area.
  - step: 3
    action: identify_center_object
    description: Find the object with the minimum bounding box area. Use aspect ratio (closest to 1) as a tie-breaker.
    inputs:
      - objects_with_bboxes
    outputs:
      - center_object
      - other_objects
  - step: 4
    action: sort_other_objects
    description: Sort the 'other_objects' list by bounding box area in ascending order.
    inputs:
      - other_objects
    outputs:
      - sorted_other_objects
  - step: 5
    action: determine_output_size
    description: Find the object with the maximum bounding box area from the combined list (center_object + sorted_other_objects). The output size is a square grid with side length equal to the maximum dimension (width or height) of this object's bounding box.
    inputs:
      - center_object
      - sorted_other_objects
    outputs:
      - output_size
      - largest_object: The object determining the output size.
  - step: 6
    action: initialize_output_grid
    description: Create an empty output grid of the calculated 'output_size'.
    inputs:
      - output_size
    outputs:
      - output_grid
  - step: 7
    action: draw_layers
    description: Draw concentric square layers onto the output grid, starting from the largest object down to the center object.
    inputs:
      - output_grid
      - largest_object
      - sorted_other_objects (reversed, from largest area to smallest)
      - center_object
    process:
      - Combine `largest_object` and `sorted_other_objects` (reversed) into an ordered list `layer_objects`.
      - Set `current_layer_size` = `output_size`.
      - For each object in `layer_objects`:
          - Fill a centered square of size `current_layer_size` with the object's color.
          - `current_layer_size` = `current_layer_size` - 2
      - Fill a centered square of size `current_layer_size` with the `center_object`'s color.
    outputs:
      - final_output_grid

relationships:
  - type: layering
    description: Objects are layered based on the size of their bounding boxes.
    elements:
      - input objects
      - output grid layers
  - type: sizing
    description: The output grid size is determined by the largest dimension of the largest object. Layer sizes decrease concentrically.
    elements:
      - largest input object bounding box
      - output grid dimensions
      - layer sizes