task_description: Stacks two selected 3x3 objects from above a horizontal separator line onto a smaller output grid, based on the properties of a single 3x3 'key' object below the separator line.

definitions:
  - &sep definition: A horizontal line of gray pixels (color 5) separating the input grid into upper and lower regions. Expected at row 5 in a 15x15 grid.
  - &upper_objects definition: Three distinct 3x3 objects located above the *sep. They are identifiable by color and shape. Referred to as Left, Middle, Right based on horizontal position.
  - &key_object definition: A single blue (color 1) 3x3 object located below the *sep. Its shape (Hollow, Plus, Diagonal) and vertical position ('High' if top row < 10, 'Low' otherwise) act as instructions.
  - &shapes definition:
      Hollow: 3x3 square boundary, center empty.
      Plus: Center pixel plus 4 cardinal neighbors.
      Diagonal: Center pixel plus 4 diagonal neighbors.
  - &output_grid definition: A 9x15 grid where the selected objects are stacked vertically and centered horizontally.

examples:
  example_1:
    input_grid_dim: [15, 15]
    output_grid_dim: [9, 15]
    separator_row: 5 # Assuming row index 5
    upper_objects:
      - { id: obj_1, color: C1, position: [r1, c1], shape: S1 (e.g., Hollow), location: Left }
      - { id: obj_2, color: C2, position: [r2, c2], shape: S2 (e.g., Plus), location: Middle }
      - { id: obj_3, color: C3, position: [r3, c3], shape: S3 (e.g., Diagonal), location: Right }
    key_object: { color: 1 (Blue), position: [r_key, c_key], shape: S_key (e.g., Hollow), height: High } # Example values
    matched_object_location: Left # e.g., S1 == S_key
    selected_objects_for_output: [obj_1, obj_3] # Matched (Left) and Right
    output_stacking_order: [obj_1, obj_3] # Top: obj_1 (Left), Bottom: obj_3 (Right) - Determined by rule
    output_top_row: 3 # Determined by rule

  # ... metrics for example 2, 3, 4 ...
  # Note variations in key shape, key height, matched object location, and resulting output order/position

rules:
  - rule: Identify the gray separator line, upper objects (Left, Middle, Right), and the blue key object below the line.
  - rule: Determine the key object's shape (Hollow, Plus, Diagonal) and height (High/Low).
  - rule: Find the upper object whose shape matches the key object's shape. Call this the 'Matched Object'.
  - rule: Select two objects for the output: the 'Matched Object' and one other object based on a fixed rule (e.g., always the Rightmost upper object, or always the Leftmost upper object if Right is matched). # Need data to confirm selection rule
  - rule: Determine the stacking order (which selected object goes on top) based on the key object's shape and height.
      # Example rule structure (needs verification with data):
      # if key is Plus: Matched object on top
      # if key is Hollow or Diagonal: Other selected object on top
      # EXCEPTION: if key is Hollow AND High: flip the above order.
  - rule: Determine the starting row for the top object in the 9x15 output grid based on key object's shape and height.
      # Example rule structure (needs verification with data):
      # if High: Hollow->3, Diagonal->0, Plus->1
      # if Low: Hollow->2 (Others TBD)
  - rule: Place the selected objects stacked vertically according to the determined order, starting at the calculated row, and centered horizontally within the 15-column width. The bottom object starts immediately below the top object.
