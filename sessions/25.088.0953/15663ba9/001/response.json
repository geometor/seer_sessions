{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Tuple\n\n\"\"\"\nIdentify the primary non-black color (C) in the input grid.\nIterate through each pixel of the input grid.\nIf a pixel has color C:\n  Count its orthogonal neighbors (up, down, left, right) that also have color C.\n  If the count is exactly 2, change the pixel's color to yellow (4) in the output grid.\n  If the count is exactly 3, change the pixel's color to red (2) in the output grid.\nOtherwise, keep the original color.\nThe black background pixels remain unchanged.\n\"\"\"\n\ndef find_primary_color(grid: np.ndarray) -> int:\n    \"\"\"Finds the most frequent non-black color in the grid.\"\"\"\n    colors, counts = np.unique(grid, return_counts=True)\n    non_black_indices = np.where(colors != 0)[0]\n    if not non_black_indices.size:\n        return 0 # Should not happen based on examples, but handle gracefully\n    \n    # Find the index of the most frequent non-black color\n    most_frequent_non_black_index = non_black_indices[np.argmax(counts[non_black_indices])]\n    return colors[most_frequent_non_black_index]\n\ndef get_orthogonal_neighbors(grid: np.ndarray, r: int, c: int) -> List[Tuple[int, int]]:\n    \"\"\"Gets the coordinates of orthogonal neighbors within grid bounds.\"\"\"\n    neighbors = []\n    rows, cols = grid.shape\n    moves = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    for dr, dc in moves:\n        nr, nc = r + dr, c + dc\n        if 0 <= nr < rows and 0 <= nc < cols:\n            neighbors.append((nr, nc))\n    return neighbors\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transforms the input grid by changing colors of pixels based on their\n    orthogonal neighbors count.\n    Pixels with 2 same-colored neighbors become yellow (4).\n    Pixels with 3 same-colored neighbors become red (2).\n    \"\"\"\n    input_np = np.array(input_grid, dtype=int)\n    output_np = np.copy(input_np)\n    rows, cols = input_np.shape\n\n    # Find the main color of the shapes\n    primary_color = find_primary_color(input_np)\n    if primary_color == 0: # No non-black color found\n        return output_np.tolist() \n\n    # Iterate through each pixel of the input grid\n    for r in range(rows):\n        for c in range(cols):\n            # Check if the pixel is of the primary color\n            if input_np[r, c] == primary_color:\n                neighbor_count = 0\n                # Get orthogonal neighbors\n                neighbors = get_orthogonal_neighbors(input_np, r, c)\n                # Count neighbors with the primary color\n                for nr, nc in neighbors:\n                    if input_np[nr, nc] == primary_color:\n                        neighbor_count += 1\n\n                # Apply transformation rules based on neighbor count\n                if neighbor_count == 2:\n                    output_np[r, c] = 4 # Yellow\n                elif neighbor_count == 3:\n                    output_np[r, c] = 2 # Red\n\n    return output_np.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3398,
    "candidates_token_count": 817,
    "total_token_count": 4215,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 177.295327,
  "retries": null
}