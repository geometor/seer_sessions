task_description: Draw crosses and mark intersections.
elements:
  - type: grid
    role: input
    properties:
      - sparse non-white pixels (sources) on a white background
  - type: grid
    role: output
    properties:
      - same dimensions as input
      - contains horizontal and vertical lines originating from source pixel locations
      - specific color (Red) at intersections of lines from different sources
objects:
  - name: source_pixel
    identified_by: any non-white pixel (value > 0) in the input grid
    properties:
      - color: the pixel's value (1-9)
      - location: row and column index (r, c)
  - name: horizontal_line
    generated_from: source_pixel
    properties:
      - row: same row as the source pixel
      - color: same color as the source pixel
      - extends: across the full width of the grid
  - name: vertical_line
    generated_from: source_pixel
    properties:
      - column: same column as the source pixel
      - color: same color as the source pixel
      - extends: across the full height of the grid
  - name: intersection_point
    identified_by: crossing of a horizontal_line and a vertical_line
    properties:
      - location: (row of horizontal_line, column of vertical_line)
      - color:
          - Red (2), if the lines originate from *different* source pixels.
          - Original color of the source pixel, if the lines originate from the *same* source pixel (i.e., the location of the source pixel itself).
relationships:
  - A source_pixel generates one horizontal_line and one vertical_line of its own color.
  - Lines overwrite the background (white pixels).
  - Where lines overlap, specific rules apply (see intersection_point color).
actions:
  - Identify all source_pixels in the input grid.
  - For each source_pixel:
      - Draw its corresponding horizontal_line onto the output grid.
      - Draw its corresponding vertical_line onto the output grid.
  - For every pair of distinct source_pixels (A and B):
      - Find the intersection point of A's horizontal_line and B's vertical_line. Color it Red (2).
      - Find the intersection point of B's horizontal_line and A's vertical_line. Color it Red (2).
  - For every source_pixel:
      - Ensure its original location in the output grid retains its original color (overwriting any Red intersection color if necessary).