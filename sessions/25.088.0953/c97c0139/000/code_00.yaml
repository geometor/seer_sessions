Input Grid:
  - Contains Background:
      Color: white (0)
  - Contains Objects:
      Type: RedLine
      Color: red (2)
      Shape: Horizontal or Vertical Line (contiguous pixels)
      Quantity: One or more

Output Grid:
  - Contains Background:
      Color: white (0)
  - Contains Objects:
      Type: RedLine
      Color: red (2)
      Persistence: Preserved from input grid
      Relationship: Each RedLine corresponds to an AzureDiamond
      Type: AzureDiamond
      Color: azure (8)
      Shape: Diamond (defined by Manhattan distance)
      Quantity: One per RedLine in input
      Placement: Overwrites only white (0) pixels from the input grid
      Properties:
        Center: Coincides with the center of the corresponding RedLine.
               Calculation: Geometric center (median pixel coordinates). If average coordinate is X.5, round up to X+1.
        Radius (K): Determined by the maximum dimension (Length, L) of the corresponding RedLine.
               Calculation: K = floor((L - 1) / 2)
        Coverage: Fills pixels (r, c) where Manhattan distance |r - center_r| + |c - center_c| <= K.

Transformation:
  - Step 1: Identify all distinct connected components of red (2) pixels (RedLines) in the input grid.
  - Step 2: For each identified RedLine:
      a. Determine its pixels and calculate its bounding box / dimensions (Height H, Width W).
      b. Find the maximum dimension (Length): L = max(H, W).
      c. Calculate the diamond radius: K = floor((L - 1) / 2).
      d. Calculate the center coordinates (center_r, center_c) of the RedLine (using median pixel, rounding .5 coordinates up).
      e. Generate the set of coordinates (r, c) for the AzureDiamond: all (r, c) such that |r - center_r| + |c - center_c| <= K.
  - Step 3: Create the output grid by copying the input grid.
  - Step 4: For each generated AzureDiamond coordinate set:
      a. Iterate through the coordinates (r, c) in the set.
      b. If the pixel at (r, c) in the output grid is currently white (0), change its color to azure (8).

Relationships:
  - One-to-one mapping between input RedLines and output AzureDiamonds.
  - AzureDiamond is geometrically centered on its corresponding RedLine.
  - AzureDiamond size (Radius K) is derived from the RedLine's maximum dimension (Length L).