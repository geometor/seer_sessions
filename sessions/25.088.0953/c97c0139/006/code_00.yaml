task_description: |
  Identify all distinct red objects (color 2) in the input grid. For each red object, calculate its geometric center and a size parameter K. Draw a diamond shape centered at the calculated point with a radius K, coloring only the white background pixels (color 0) within the diamond shape with azure (color 8). Original pixels of the red object and any other non-white pixels within the diamond's area remain unchanged.

grid_properties:
  background_color: 0 # white
  target_object_color: 2 # red
  output_color: 8 # azure

objects:
  - name: red_object
    description: A contiguous group of red pixels (color 2) connected via 4-way adjacency.
    properties:
      - coordinates: List of (row, col) tuples defining the object.
      - num_pixels: Count of pixels in the object.
      - center:
          - calculation: Average of all pixel coordinates, with row and column values floored independently.
          - schema: (center_row, center_col)
      - size_parameter_K:
          - calculation: Floor of (num_pixels / 2).
          - schema: integer

actions:
  - name: draw_diamond
    input: red_object
    output: modification of the grid
    steps:
      - Calculate the center (center_row, center_col) for the red_object.
      - Calculate the size parameter K for the red_object.
      - Define the diamond area: All pixels (r, c) such that the Manhattan distance `abs(r - center_row) + abs(c - center_col)` is less than or equal to K.
      - Iterate through all pixels (r, c) within the grid boundaries.
      - If a pixel (r, c) is within the diamond area AND its current color in the grid is white (0):
          - Change the color of the pixel at (r, c) to azure (8).
      - Pixels within the diamond area that are not white remain unchanged.
      - Pixels outside the diamond area remain unchanged.

processing_order:
  - Find all distinct red_objects.
  - For each red_object found:
      - Perform the draw_diamond action based on its properties. Modifications are cumulative on the output grid.