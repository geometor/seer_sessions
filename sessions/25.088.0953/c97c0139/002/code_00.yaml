task_description: Modify the input grid by drawing shapes related to connected components of red pixels.

observations:
  - grid_properties:
      - Input grids contain connected components (objects) of red pixels (color 2).
      - The background color observed being modified is white (color 0).
      - Output grids are the same size as input grids and introduce azure pixels (color 8).
  - identified_objects:
      - Objects are connected components of red pixels.
      - Connectivity appears to be standard (4-way adjacency).
      - In at least one case (Example 0), the objects are lines (horizontal/vertical).
      - In other cases (Examples 1, 2), the objects might be non-linear shapes.
  - object_properties_used:
      - Pixel coordinates of the object.
      - Object length (pixel count) was used for lines.
      - Bounding box (min/max row/col) was used to calculate the center.
  - actions:
      - Find all distinct red objects.
      - For each red object:
          - Calculate its geometric center. The method `(ceil((min_r+max_r)/2), ceil((min_c+max_c)/2))` worked for lines. This might need adjustment (e.g., floor, round, centroid) for other shapes or based on parity.
          - Calculate a size parameter `K`. The method `K = floor((length - 1) / 2)` worked for lines. This might depend on different properties (e.g., bounding box dimensions) for other shapes.
          - Generate coordinates corresponding to a specific shape (observed: diamond based on Manhattan distance <= K) centered at the calculated center.
          - Iterate through the generated shape's coordinates.
          - If a coordinate is within the grid bounds and the corresponding pixel in the *current* output grid state is white (0), change its color to azure (8).
  - uncertainties:
      - The exact shape of red objects in Examples 1 & 2.
      - The universally correct method for calculating the center point.
      - The universally correct method for calculating the size parameter K.
      - Whether the output shape is always a diamond.
      - Whether the background color modified is always white.
      - Whether the drawing color is always azure.
      - Behavior on non-white backgrounds or when drawn shapes overlap.