{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid by identifying contiguous regions of white pixels (0). \nIf a white region is fully enclosed (does not touch the grid border) AND \nis adjacent (8-way connectivity) to at least one initial blue pixel (1), \nthen all pixels within that white region are changed to blue (1). \nAll other pixels retain their original colors.\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef find_white_region_and_check_adjacency(start_r, start_c, input_grid, visited):\n    \"\"\"\n    Performs a Breadth-First Search (BFS) to find a contiguous region of \n    white pixels (0) starting from (start_r, start_c). \n    It also determines if the region is enclosed within the grid boundaries \n    and if it is adjacent to any initial blue pixel (1).\n\n    Args:\n        start_r (int): Starting row index.\n        start_c (int): Starting column index.\n        input_grid (np.ndarray): The original input grid.\n        visited (np.ndarray): A boolean grid tracking visited white pixels.\n\n    Returns:\n        tuple: A tuple containing:\n            - region_pixels (list): List of (row, col) tuples for the white region.\n            - is_enclosed (bool): True if the region does not touch the border.\n            - is_adjacent_to_blue (bool): True if the region is adjacent to an initial blue pixel.\n    \"\"\"\n    height, width = input_grid.shape\n    queue = deque([(start_r, start_c)])\n    visited[start_r, start_c] = True\n    \n    region_pixels = []\n    is_enclosed = True\n    is_adjacent_to_blue = False\n    \n    # 8 directions for neighbors (horizontal, vertical, diagonal)\n    directions = [\n        (-1, -1), (-1, 0), (-1, 1),\n        (0, -1),           (0, 1),\n        (1, -1), (1, 0), (1, 1)\n    ]\n\n    while queue:\n        r, c = queue.popleft()\n        region_pixels.append((r, c))\n\n        # Check if the current pixel is on the border\n        if r == 0 or r == height - 1 or c == 0 or c == width - 1:\n            is_enclosed = False\n\n        # Explore neighbors\n        for dr, dc in directions:\n            nr, nc = r + dr, c + dc\n\n            # Check if neighbor is within bounds\n            if 0 <= nr < height and 0 <= nc < width:\n                # Check adjacency to an initial blue pixel\n                if input_grid[nr, nc] == 1:\n                    is_adjacent_to_blue = True\n                \n                # Check if neighbor is white and not visited for BFS continuation\n                elif input_grid[nr, nc] == 0 and not visited[nr, nc]:\n                    visited[nr, nc] = True\n                    queue.append((nr, nc))\n            # Note: We don't need an else condition for out-of-bounds, \n            # as the boundary check itself contributes to the 'is_enclosed' logic.\n            # Pixels with colors 2-9 act as natural boundaries for the BFS \n            # exploring white regions, but adjacency check still looks at them.\n\n    return region_pixels, is_enclosed, is_adjacent_to_blue\n\ndef transform(input_grid):\n    \"\"\"\n    Fills enclosed white regions adjacent to initial blue pixels with blue.\n\n    Args:\n        input_grid (np.ndarray): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.ndarray: A 2D numpy array representing the transformed grid.\n    \"\"\"\n    height, width = input_grid.shape\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n    # Keep track of visited white pixels to avoid processing the same region multiple times\n    visited = np.zeros((height, width), dtype=bool)\n\n    # Iterate through each pixel of the grid\n    for r in range(height):\n        for c in range(width):\n            # If we find a white pixel (0) that hasn't been visited yet\n            if input_grid[r, c] == 0 and not visited[r, c]:\n                # Find the entire contiguous white region it belongs to\n                # and check its properties (enclosure, adjacency to blue)\n                region_pixels, is_enclosed, is_adjacent_to_blue = find_white_region_and_check_adjacency(\n                    r, c, input_grid, visited\n                )\n\n                # If the region is both enclosed and adjacent to an initial blue pixel\n                if is_enclosed and is_adjacent_to_blue:\n                    # Fill this region with blue (1) in the output grid\n                    for pr, pc in region_pixels:\n                        output_grid[pr, pc] = 1\n                # Otherwise (not enclosed or not adjacent to blue), the region remains white\n                # (no action needed as output_grid started as a copy).\n\n    # Return the modified grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7636,
    "candidates_token_count": 1204,
    "total_token_count": 8840,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 27.215855,
  "retries": null
}