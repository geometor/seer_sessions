{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nRecolors blue pixels (1) within solid blue rectangles based on their minimum Chebyshev distance 'd' to the nearest non-blue (0) pixel. The color mapping follows a cyclical pattern [1, 2, 3, 2] based on the distance 'd': \n- d=1 -> color 1 (blue)\n- d=2 -> color 2 (red)\n- d=3 -> color 3 (green)\n- d=4 -> color 2 (red)\n- d=5 -> color 1 (blue) ... and so on.\nNon-blue pixels remain unchanged.\n\"\"\"\n\ndef chebyshev_distance(p1, p2):\n    \"\"\"Calculates the Chebyshev distance between two points (row, col).\"\"\"\n    return max(abs(p1[0] - p2[0]), abs(p1[1] - p2[1]))\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by recoloring blue pixels based on their\n    Chebyshev distance to the nearest non-blue pixel.\n    \"\"\"\n    # Convert input list of lists to a NumPy array for easier processing\n    input_array = np.array(input_grid, dtype=int)\n    output_array = np.copy(input_array)\n    height, width = input_array.shape\n\n    # Find coordinates of all non-blue (background) pixels\n    background_pixels = []\n    for r in range(height):\n        for c in range(width):\n            if input_array[r, c] == 0:\n                background_pixels.append((r, c))\n\n    # If there are no background pixels (entire grid is blue), return the original\n    # Although the examples suggest there's always a background.\n    if not background_pixels:\n        return input_grid # Or handle as an edge case if needed\n\n    # Define the color sequence for distances\n    color_sequence = [1, 2, 3, 2] # Blue, Red, Green, Red\n\n    # Iterate through each pixel in the grid\n    for r in range(height):\n        for c in range(width):\n            # Check if the current pixel is blue\n            if input_array[r, c] == 1:\n                min_dist = float('inf')\n                # Calculate the minimum Chebyshev distance to any background pixel\n                for bg_r, bg_c in background_pixels:\n                    dist = chebyshev_distance((r, c), (bg_r, bg_c))\n                    if dist < min_dist:\n                        min_dist = dist\n\n                # Determine the new color based on the minimum distance\n                # Ensure min_dist is at least 1 if the pixel itself is blue\n                if min_dist > 0:\n                    # Calculate the index in the color sequence (0-based)\n                    # The pattern repeats every 4 distances starting from d=1\n                    color_index = (min_dist - 1) % 4\n                    new_color = color_sequence[color_index]\n                    output_array[r, c] = new_color\n                # else: if min_dist is 0, it means the pixel is adjacent to or is background\n                # Since we only process blue pixels (input_array[r, c] == 1), min_dist must be >= 1.\n\n    # Convert the NumPy array back to a list of lists\n    output_grid = output_array.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3945,
    "candidates_token_count": 790,
    "total_token_count": 4735,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.39151,
  "retries": null
}