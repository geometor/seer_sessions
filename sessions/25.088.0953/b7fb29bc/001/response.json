{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nFill the area inside a green frame with alternating colors based on Manhattan distance to the nearest green pixel.\nWhite pixels inside the frame are colored yellow (4) if their minimum Manhattan distance to any green pixel is odd,\nand red (2) if the distance is even. Green pixels and pixels outside the frame remain unchanged.\n\"\"\"\n\ndef _find_exterior_white(grid):\n    \"\"\"Finds all white pixels connected to the border using BFS.\"\"\"\n    rows, cols = grid.shape\n    exterior_coords = set()\n    q = deque()\n    visited = np.zeros_like(grid, dtype=bool)\n\n    # Add border white pixels to the queue\n    for r in range(rows):\n        for c in [0, cols - 1]:\n            if grid[r, c] == 0 and not visited[r, c]:\n                q.append((r, c))\n                visited[r, c] = True\n                exterior_coords.add((r, c))\n    for c in range(cols):\n        for r in [0, rows - 1]:\n             if grid[r, c] == 0 and not visited[r, c]:\n                q.append((r, c))\n                visited[r, c] = True\n                exterior_coords.add((r, c))\n\n    # BFS to find all connected white pixels\n    while q:\n        r, c = q.popleft()\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < rows and 0 <= nc < cols and \\\n               grid[nr, nc] == 0 and not visited[nr, nc]:\n                visited[nr, nc] = True\n                q.append((nr, nc))\n                exterior_coords.add((nr, nc))\n\n    return exterior_coords\n\ndef _calculate_distances_from_green(grid):\n    \"\"\"Calculates minimum Manhattan distance from each pixel to the nearest green pixel using BFS.\"\"\"\n    rows, cols = grid.shape\n    distances = np.full_like(grid, -1, dtype=int) # Use -1 for unvisited/infinity\n    q = deque()\n\n    # Initialize queue with all green pixels\n    green_pixels = np.argwhere(grid == 3)\n    for r, c in green_pixels:\n        distances[r, c] = 0\n        q.append((r, c))\n\n    # Perform BFS\n    while q:\n        r, c = q.popleft()\n        current_dist = distances[r, c]\n\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]: # Manhattan distance neighbors\n            nr, nc = r + dr, c + dc\n\n            # Check bounds and if already visited with a shorter or equal path\n            if 0 <= nr < rows and 0 <= nc < cols and distances[nr, nc] == -1:\n                 distances[nr, nc] = current_dist + 1\n                 q.append((nr, nc))\n            # Optional: If allowing updates for potentially shorter paths (though not needed for standard BFS from all sources)\n            # elif 0 <= nr < rows and 0 <= nc < cols and distances[nr, nc] > current_dist + 1:\n            #     distances[nr, nc] = current_dist + 1\n            #     q.append((nr, nc))\n\n\n    return distances\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on the specified rules.\n\n    Identifies white pixels inside the green frame, calculates their minimum\n    Manhattan distance to the nearest green pixel, and colors them yellow (4)\n    for odd distances and red (2) for even distances > 0.\n    \"\"\"\n    # Convert input to numpy array for easier processing\n    grid = np.array(input_grid, dtype=int)\n    rows, cols = grid.shape\n    # Create a copy to modify\n    output_grid = grid.copy()\n\n    # 1. Identify all white pixels reachable from the border (exterior white)\n    exterior_white_coords = _find_exterior_white(grid)\n\n    # 2. Calculate minimum distances from all green pixels\n    distances = _calculate_distances_from_green(grid)\n\n    # 3. Iterate through the grid and color interior white pixels\n    for r in range(rows):\n        for c in range(cols):\n            # Check if the pixel was originally white\n            if grid[r, c] == 0:\n                # Check if it's an interior white pixel (not reachable from border)\n                if (r, c) not in exterior_white_coords:\n                    dist = distances[r, c]\n                    # Check if it's reachable from a green pixel (dist != -1) and distance > 0\n                    if dist > 0:\n                        # Color based on odd/even distance\n                        if dist % 2 == 1: # Odd distance\n                            output_grid[r, c] = 4 # Yellow\n                        else: # Even distance\n                            output_grid[r, c] = 2 # Red\n\n    # Convert back to list of lists for the expected output format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4760,
    "candidates_token_count": 1229,
    "total_token_count": 5989,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 24.86311,
  "retries": null
}