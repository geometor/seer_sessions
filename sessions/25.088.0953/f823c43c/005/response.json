{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nReplace instances of a 'noise' color (magenta=6) based on a pattern\ndetermined by the two most frequent non-noise colors and the parity of the\npixel's coordinates.\n\n1. Identify the noise color (magenta=6).\n2. Find the two most frequent colors in the input grid, excluding the noise color.\n   Let the most frequent be C1 and the second most frequent be C2.\n   If only one non-noise color exists, C1 = C2 = that color.\n   If no non-noise colors exist (e.g., grid is all magenta or empty), default C1 = C2 = white (0).\n3. Create an output grid initialized from the input grid.\n4. Iterate through each cell (r, c) of the grid.\n5. If the input cell `input_grid[r][c]` is the noise color (6):\n   a. Determine the replacement color based on coordinate parity:\n      - If the row index 'r' is even, the replacement color is C1.\n      - If 'r' is odd and the column index 'c' is even, the replacement color is C1.\n      - If 'r' is odd and 'c' is odd, the replacement color is C2.\n   b. Update the corresponding cell `output_grid[r][c]` with this replacement color.\n6. Pixels that were not the noise color remain unchanged.\n7. Return the modified output grid.\n\"\"\"\n\ndef find_pattern_colors(grid, noise_color):\n    \"\"\"\n    Finds the two most frequent colors in the grid, excluding the noise_color.\n\n    Args:\n        grid (np.array): The input grid.\n        noise_color (int): The color value to exclude from frequency counting.\n\n    Returns:\n        tuple: (C1, C2) where C1 is the most frequent and C2 is the second\n               most frequent non-noise color. Handles cases where fewer than\n               two non-noise colors are present. Defaults to (0, 0) if no\n               non-noise colors are found.\n    \"\"\"\n    # Flatten the grid to easily count all pixel values\n    pixels = grid.flatten()\n\n    # Count the frequency of each color\n    color_counts = Counter(pixels)\n\n    # Remove the noise color from the counts if it exists\n    if noise_color in color_counts:\n        del color_counts[noise_color]\n\n    # Get the colors sorted by frequency (most common first)\n    most_common = color_counts.most_common(2)\n\n    # Determine C1 and C2 based on the number of non-noise colors found\n    if len(most_common) == 0:\n        # No non-noise colors were found\n        c1, c2 = 0, 0  # Default to white\n    elif len(most_common) == 1:\n        # Only one non-noise color was found\n        c1 = most_common[0][0]\n        c2 = c1  # Use the same color for C2\n    else:\n        # Two or more non-noise colors were found\n        c1 = most_common[0][0]\n        c2 = most_common[1][0]\n\n    return (c1, c2)\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by replacing noise pixels (magenta=6) based on\n    a pattern determined by coordinate parity and the two most frequent\n    non-noise colors (C1 and C2).\n\n    Args:\n        input_grid (list of lists): The input grid represented as a list of lists.\n\n    Returns:\n        list of lists: The transformed grid with noise pixels replaced.\n    \"\"\"\n    # Convert input list of lists to a NumPy array for efficient operations\n    grid_np = np.array(input_grid, dtype=int)\n    # Create a copy to modify, preserving the original non-noise pixels\n    output_grid_np = grid_np.copy()\n    rows, cols = grid_np.shape\n\n    # Define the noise color to be identified and replaced\n    noise_color = 6\n\n    # Determine the primary (C1) and secondary (C2) pattern colors globally\n    c1, c2 = find_pattern_colors(grid_np, noise_color)\n\n    # Iterate through each cell of the grid\n    for r in range(rows):\n        for c in range(cols):\n            # Check if the pixel in the original grid is the noise color\n            if grid_np[r, c] == noise_color:\n                # Apply the parity-based replacement rule\n                if r % 2 == 0:\n                    # Rule for even rows\n                    replacement_color = c1\n                else:\n                    # Rules for odd rows\n                    if c % 2 == 0:\n                        # Rule for odd row, even column\n                        replacement_color = c1\n                    else:\n                        # Rule for odd row, odd column\n                        replacement_color = c2\n                \n                # Update the pixel in the output grid\n                output_grid_np[r, c] = replacement_color\n\n    # Convert the NumPy array back to a list of lists for the final output format\n    output_grid = output_grid_np.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 12620,
    "candidates_token_count": 1207,
    "total_token_count": 13827,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 51.269841,
  "retries": null
}