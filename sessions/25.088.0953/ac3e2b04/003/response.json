{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nTransforms the input grid based on two main rules:\n1. Fills enclosed white regions: White pixels (0) that are not connected to the grid border via a path of only white pixels (using 4-directional adjacency) are changed to blue (1).\n2. Changes specific adjacent red pixels: Red pixels (2) that are part of a horizontal line segment of length 2 or more AND are adjacent (using 8-directional adjacency, including diagonals) to any of the enclosed white pixels (identified in rule 1) are also changed to blue (1).\nAll other pixels retain their original color.\n\"\"\"\n\ndef find_reachable_white_pixels(grid):\n    \"\"\"\n    Performs a Breadth-First Search (BFS) starting from all border white pixels\n    to find all white pixels connected to the boundary using 4-directional movement.\n\n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        np.array: A boolean grid of the same shape as input, where True indicates\n                  a white pixel is reachable from the border.\n    \"\"\"\n    height, width = grid.shape\n    is_reachable = np.zeros((height, width), dtype=bool)\n    queue = deque()\n\n    # Add all white border pixels to the queue and mark as reachable\n    for r in range(height):\n        for c in [0, width - 1]:\n            if grid[r, c] == 0 and not is_reachable[r, c]:\n                is_reachable[r, c] = True\n                queue.append((r, c))\n    # Avoid adding corners twice\n    for c in range(1, width - 1):\n        for r in [0, height - 1]:\n             if grid[r, c] == 0 and not is_reachable[r, c]:\n                is_reachable[r, c] = True\n                queue.append((r, c))\n\n    # Perform BFS (4-directional neighbors: up, down, left, right)\n    while queue:\n        r, c = queue.popleft()\n\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n\n            # Check bounds, color (must be white), and visited status\n            if 0 <= nr < height and 0 <= nc < width and \\\n               grid[nr, nc] == 0 and not is_reachable[nr, nc]:\n                is_reachable[nr, nc] = True\n                queue.append((nr, nc))\n\n    return is_reachable\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rules to the input grid.\n\n    Args:\n        input_grid (np.array): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.array: A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    height, width = input_grid.shape\n    # 1. Initialize Output Grid\n    output_grid = np.copy(input_grid)\n\n    # 2. Find Reachable White Pixels\n    is_reachable = find_reachable_white_pixels(input_grid)\n\n    # 3. Identify Enclosed White Pixel Coordinates\n    enclosed_white_coords = set()\n    for r in range(height):\n        for c in range(width):\n            if input_grid[r, c] == 0 and not is_reachable[r, c]:\n                enclosed_white_coords.add((r, c))\n\n    # 4. Fill Enclosed White Regions\n    for r, c in enclosed_white_coords:\n        output_grid[r, c] = 1 # Change to blue\n\n    # 5. Identify Red Pixels to Change\n    red_pixels_to_change_coords = set()\n    # Define 8 neighbors (including diagonals)\n    neighbors_8 = [(dr, dc) for dr in [-1, 0, 1] for dc in [-1, 0, 1] if not (dr == 0 and dc == 0)]\n\n    for r in range(height):\n        for c in range(width):\n            # Check if pixel is red (2)\n            if input_grid[r, c] == 2:\n                # Check if part of horizontal red segment >= length 2\n                is_horizontal = False\n                # Check left neighbor\n                if c > 0 and input_grid[r, c - 1] == 2:\n                    is_horizontal = True\n                # Check right neighbor\n                if not is_horizontal and c < width - 1 and input_grid[r, c + 1] == 2:\n                    is_horizontal = True\n\n                if is_horizontal:\n                    # Check 8 neighbors for adjacency to enclosed white pixels\n                    is_adjacent_to_enclosed = False\n                    for dr, dc in neighbors_8:\n                        nr, nc = r + dr, c + dc\n                        # Check bounds and if neighbor is in the enclosed set\n                        if 0 <= nr < height and 0 <= nc < width and (nr, nc) in enclosed_white_coords:\n                            is_adjacent_to_enclosed = True\n                            break # Found an adjacent enclosed white pixel\n\n                    # If criteria met, mark this red pixel for change\n                    if is_adjacent_to_enclosed:\n                        red_pixels_to_change_coords.add((r, c))\n\n    # 6. Change Designated Red Pixels\n    for r, c in red_pixels_to_change_coords:\n        output_grid[r, c] = 1 # Change to blue\n\n    # 7. Return Final Grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 11789,
    "candidates_token_count": 1314,
    "total_token_count": 13103,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.199384,
  "retries": null
}