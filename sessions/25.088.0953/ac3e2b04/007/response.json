{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nTransforms the input grid based on the following rules:\n\n1.  **Identify Enclosed White Pixels:** Find all white (0) pixels that cannot reach the grid border by moving only through other 4-directionally adjacent white pixels. These are considered \"enclosed\".\n2.  **Identify Adjacent Red Pixels:** Find all red (2) pixels in the original input grid that are 4-directionally adjacent (up, down, left, right) to at least one of the \"enclosed white pixels\" identified in step 1.\n3.  **Apply Changes:** Create an output grid by copying the input. Then, change all \"enclosed white pixels\" to blue (1) in the output grid. Also, change all identified \"adjacent red pixels\" to blue (1) in the output grid. All other pixels retain their original color.\n\"\"\"\n\ndef find_enclosed_white_pixels(grid):\n    \"\"\"\n    Identifies white pixels enclosed by non-white pixels using BFS.\n\n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        set: A set of tuples, where each tuple is the (row, col) coordinate\n             of an enclosed white pixel.\n    \"\"\"\n    height, width = grid.shape\n    visited = np.zeros((height, width), dtype=bool)\n    queue = deque()\n\n    # Initialize queue with all border white pixels\n    for r in range(height):\n        for c in range(width):\n            is_border = (r == 0 or r == height - 1 or c == 0 or c == width - 1)\n            if is_border and grid[r, c] == 0:\n                if not visited[r, c]: # Check if already added (e.g., corners)\n                    visited[r, c] = True\n                    queue.append((r, c))\n\n    # Perform BFS starting from border white pixels (4-directional)\n    while queue:\n        r, c = queue.popleft()\n\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n\n            # Check bounds, color (must be white), and visited status\n            if 0 <= nr < height and 0 <= nc < width and \\\n               grid[nr, nc] == 0 and not visited[nr, nc]:\n                visited[nr, nc] = True\n                queue.append((nr, nc))\n\n    # Identify enclosed white pixels (white pixels not visited by the BFS)\n    enclosed_coords = set()\n    for r in range(height):\n        for c in range(width):\n            if grid[r, c] == 0 and not visited[r, c]:\n                enclosed_coords.add((r, c))\n\n    return enclosed_coords\n\ndef find_adjacent_red_pixels(grid, enclosed_white_coords):\n    \"\"\"\n    Identifies red pixels adjacent (4-directionally) to enclosed white pixels.\n\n    Args:\n        grid (np.array): The input grid.\n        enclosed_white_coords (set): Set of coordinates of enclosed white pixels.\n\n    Returns:\n        set: A set of tuples, where each tuple is the (row, col) coordinate\n             of a red pixel adjacent to an enclosed white pixel.\n    \"\"\"\n    height, width = grid.shape\n    red_to_change_coords = set()\n    deltas = [(0, 1), (0, -1), (1, 0), (-1, 0)] # 4-directional neighbors\n\n    for r in range(height):\n        for c in range(width):\n            # Check if the pixel is red in the original grid\n            if grid[r, c] == 2:\n                # Check its 4 neighbors\n                for dr, dc in deltas:\n                    nr, nc = r + dr, c + dc\n                    # Check bounds and if the neighbor is an enclosed white pixel\n                    if 0 <= nr < height and 0 <= nc < width and \\\n                       (nr, nc) in enclosed_white_coords:\n                        red_to_change_coords.add((r, c))\n                        break # Found one adjacent enclosed white, no need to check others\n\n    return red_to_change_coords\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rules to the input grid.\n    \"\"\"\n    # 1. Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n\n    # 2. Identify enclosed white pixels\n    enclosed_white_coords = find_enclosed_white_pixels(input_grid)\n\n    # 3. Identify red pixels adjacent to the enclosed white pixels\n    red_coords_to_change = find_adjacent_red_pixels(input_grid, enclosed_white_coords)\n\n    # 4. Change enclosed white pixels to blue in the output grid\n    for r, c in enclosed_white_coords:\n        output_grid[r, c] = 1 # Change to blue\n\n    # 5. Change identified adjacent red pixels to blue in the output grid\n    for r, c in red_coords_to_change:\n        output_grid[r, c] = 1 # Change to blue\n\n    # 6. Return the final transformed grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 24241,
    "candidates_token_count": 1233,
    "total_token_count": 25474,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 17.633867,
  "retries": null
}