{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n# --- Helper Functions ---\n\ndef find_connected_components(grid):\n    \"\"\"\n    Finds all connected components of non-background pixels using 4-connectivity.\n    \n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        list: A list of dictionaries, each representing an object.\n              Each dictionary contains:\n              'pixels': set of (row, col) coordinates for the object.\n              'color': the integer color value of the object.\n              'bbox': tuple (min_r, min_c, max_r, max_c) bounding box.\n              'top_left': tuple (r, c) of the top-leftmost pixel.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n    \n    for r in range(rows):\n        for c in range(cols):\n            # If pixel is not background (0) and not visited yet\n            if grid[r, c] != 0 and not visited[r, c]:\n                color = grid[r, c]\n                component_pixels = set()\n                # Use deque for efficient BFS queue\n                q = deque([(r, c)]) \n                visited[r, c] = True\n                min_r, min_c = r, c\n                max_r, max_c = r, c\n                \n                # BFS to find all connected pixels of the same color\n                while q:\n                    row, col = q.popleft()\n                    \n                    component_pixels.add((row, col))\n                    # Update bounding box coordinates\n                    min_r = min(min_r, row)\n                    min_c = min(min_c, col)\n                    max_r = max(max_r, row)\n                    max_c = max(max_c, col)\n                    \n                    # Check 4 neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        # Check bounds, color match, and visited status\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           not visited[nr, nc] and grid[nr, nc] == color:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n                            \n                # Find top-left coordinate for sorting purposes (min row, then min col)\n                top_left = min(component_pixels, key=lambda p: (p[0], p[1]))\n                            \n                objects.append({\n                    'pixels': component_pixels,\n                    'color': color,\n                    'bbox': (min_r, min_c, max_r, max_c),\n                    'top_left': top_left\n                })\n                \n    return objects\n\ndef is_outside_strict(obj_pixels, frame_bbox):\n    \"\"\"\n    Checks if ALL pixels of an object are outside the frame's bounding box.\n    Pixels on the boundary of the frame_bbox are considered NOT outside.\n    \n    Args:\n        obj_pixels (set): Set of (row, col) coordinates for the object.\n        frame_bbox (tuple): Bounding box of the frame (min_r, min_c, max_r, max_c).\n\n    Returns:\n        bool: True if all object pixels are outside the frame bbox, False otherwise.\n    \"\"\"\n    frame_min_r, frame_min_c, frame_max_r, frame_max_c = frame_bbox\n    for r, c in obj_pixels:\n        # If a pixel is within or on the boundary of the frame bbox\n        if frame_min_r <= r <= frame_max_r and frame_min_c <= c <= frame_max_c:\n            return False # Found a pixel inside or on the boundary\n    return True # All pixels are outside\n\n# --- Main Transformation Function ---\n\ndef transform(input_grid_list):\n    \"\"\"\n    Recolors specific objects located outside a gray frame based on the colors\n    of indicator pixels found inside the frame. The mapping is determined by\n    sorting both indicator pixels and target objects by their top-left position\n    (row first, then column) and assigning colors based on this order.\n    \"\"\"\n    input_grid = np.array(input_grid_list, dtype=int)\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n    FRAME_COLOR = 5 # Assuming frame is always gray (5) based on examples\n\n    # 1. Find all connected components (objects)\n    all_objects = find_connected_components(input_grid)\n\n    # 2. Identify the frame object (color FRAME_COLOR, typically largest if multiple)\n    frame_obj = None\n    frame_candidates = [obj for obj in all_objects if obj['color'] == FRAME_COLOR]\n    \n    if not frame_candidates:\n        # Cannot proceed without a frame, return original grid\n        print(\"Warning: No frame object found.\")\n        return output_grid.tolist() \n        \n    # Assume the largest gray object is the frame if multiple exist\n    frame_obj = max(frame_candidates, key=lambda obj: len(obj['pixels']))\n        \n    frame_bbox = frame_obj['bbox']\n    frame_pixels = frame_obj['pixels'] \n\n    # 3. Identify indicator pixels \n    # These are single pixels, non-background, non-frame color, located within the frame's area but not part of the frame itself.\n    indicator_pixels = []\n    min_r, min_c, max_r, max_c = frame_bbox\n    for r in range(min_r, max_r + 1): # Iterate only within frame bbox for efficiency\n        for c in range(min_c, max_c + 1):\n            color = input_grid[r, c]\n            coord = (r, c)\n            # Check if pixel is NOT background, NOT frame color, and NOT part of the frame object itself\n            if color != 0 and color != FRAME_COLOR and coord not in frame_pixels: \n                 # We assume indicators are single pixels based on examples, store coord and color\n                 indicator_pixels.append({'coord': coord, 'color': color})\n\n    # 4. Identify target objects\n    # These are objects, non-background, non-frame color, located entirely outside the frame's bounding box.\n    # Assume all target objects initially share the same color based on examples.\n    target_objects = []\n    target_initial_color = None\n    for obj in all_objects:\n        # Check color is not background or frame color\n        if obj['color'] != 0 and obj['color'] != FRAME_COLOR:\n             # Check if the object is strictly outside the frame's bounding box\n            if is_outside_strict(obj['pixels'], frame_bbox):\n                if target_initial_color is None:\n                    target_initial_color = obj['color'] # Record the color of the first target object found\n                \n                # Only add if it matches the expected initial color\n                if obj['color'] == target_initial_color:\n                    target_objects.append({'pixels': obj['pixels'], 'top_left': obj['top_left']})\n                else:\n                    # Handle unexpected case where outside objects have different colors\n                     print(f\"Warning: Found target object with unexpected color {obj['color']} (expected {target_initial_color}). Ignoring.\")\n\n    # 5. Sort indicator pixels by coordinate (row, then column)\n    indicator_pixels.sort(key=lambda p: p['coord'])\n    indicator_colors = [p['color'] for p in indicator_pixels]\n\n    # 6. Sort target objects by their top-left coordinate (row, then column)\n    target_objects.sort(key=lambda obj: obj['top_left'])\n\n    # 7. Verify counts of indicators and targets match\n    if len(indicator_colors) != len(target_objects):\n        print(f\"Warning: Mismatch between indicator count ({len(indicator_colors)}) and target object count ({len(target_objects)}). Transformation may be incorrect.\")\n        # If counts mismatch, we cannot perform the 1-to-1 mapping, return original grid\n        return output_grid.tolist()\n    \n    # If no indicators/targets were found, nothing to change\n    if not indicator_colors: \n        return output_grid.tolist()\n\n    # 8. Recolor target objects in the output grid based on the sorted mapping\n    for i, target_obj in enumerate(target_objects):\n        new_color = indicator_colors[i] # Get the corresponding color from sorted indicators\n        # Apply the new color to all pixels of the target object\n        for r, c in target_obj['pixels']:\n            output_grid[r, c] = new_color\n            \n    # 9. Return the modified grid as a standard list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5327,
    "candidates_token_count": 2099,
    "total_token_count": 7426,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 65.765223,
  "retries": null
}