{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Tuple, Dict\n\n\"\"\"\nTransforms the input grid by finding each non-white pixel and drawing two lines \nemanating from it towards the two nearest grid edges. The lines are drawn in the \nsame color as the source pixel. Distances to edges are calculated orthogonally \n(top, bottom, left, right). Ties in distance are broken using the priority order: \nTop, Left, Bottom, Right.\n\"\"\"\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid: A numpy array representing the input grid.\n\n    Returns:\n        A numpy array representing the transformed output grid.\n    \"\"\"\n    # Initialize output_grid as a copy of the input grid\n    output_grid = np.copy(input_grid)\n    height, width = input_grid.shape\n\n    # Define the priority order for directions\n    direction_priority = {'up': 0, 'left': 1, 'down': 2, 'right': 3}\n\n    # Iterate through each pixel of the input grid\n    for r in range(height):\n        for c in range(width):\n            pixel_color = input_grid[r, c]\n\n            # Check if the pixel is not white (value > 0)\n            if pixel_color > 0:\n                # Calculate distances to the four edges\n                distances = [\n                    (r, 'up'),                         # Distance to top edge\n                    (height - 1 - r, 'down'),        # Distance to bottom edge\n                    (c, 'left'),                       # Distance to left edge\n                    (width - 1 - c, 'right')         # Distance to right edge\n                ]\n\n                # Sort distances: primarily by distance (ascending), secondarily by direction priority\n                # Use a lambda function for the custom sorting key\n                sorted_distances = sorted(\n                    distances,\n                    key=lambda item: (item[0], direction_priority[item[1]])\n                )\n\n                # Select the two directions towards the closest edges\n                closest_directions = [sorted_distances[0][1], sorted_distances[1][1]]\n\n                # Draw lines for the two selected directions\n                for direction in closest_directions:\n                    if direction == 'up':\n                        for i in range(r + 1): # Iterate from row 0 up to and including r\n                            output_grid[i, c] = pixel_color\n                    elif direction == 'down':\n                         # Iterate from row r down to and including height - 1\n                        for i in range(r, height):\n                            output_grid[i, c] = pixel_color\n                    elif direction == 'left':\n                         # Iterate from column 0 up to and including c\n                        for j in range(c + 1):\n                            output_grid[r, j] = pixel_color\n                    elif direction == 'right':\n                         # Iterate from column c down to and including width - 1\n                        for j in range(c, width):\n                            output_grid[r, j] = pixel_color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4398,
    "candidates_token_count": 714,
    "total_token_count": 5112,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.993068,
  "retries": null
}