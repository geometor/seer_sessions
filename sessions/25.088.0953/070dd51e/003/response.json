{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import defaultdict\n\n\"\"\"\nTransforms the input grid by connecting aligned pairs of same-colored pixels\nwith lines of that color. The transformation happens in two passes: first,\nhorizontal lines are drawn, then vertical lines are drawn. If lines intersect,\nthe color of the vertical line takes precedence, overwriting the horizontal\nline's color at the intersection point. Only colors that appear exactly twice\nin the input grid form connecting pairs. Pixels not part of a drawn line retain\ntheir original color from the input grid.\n\"\"\"\n\ndef find_colored_pixel_pairs(grid):\n    \"\"\"\n    Finds all non-white pixels and identifies colors that appear exactly twice.\n\n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        list: A list of tuples, where each tuple contains:\n              (color, (row1, col1), (row2, col2)).\n              Returns an empty list if no colors appear exactly twice.\n    \"\"\"\n    colored_pixels = defaultdict(list)\n    rows, cols = grid.shape\n    # Group pixel coordinates by color\n    for r in range(rows):\n        for c in range(cols):\n            color = grid[r, c]\n            if color != 0:  # Ignore white background\n                colored_pixels[color].append((r, c))\n\n    # Filter for colors that appear exactly twice\n    pixel_pairs = []\n    for color, positions in colored_pixels.items():\n        if len(positions) == 2:\n            pixel_pairs.append((color, positions[0], positions[1]))\n            \n    return pixel_pairs\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the line-drawing transformation to the input grid.\n\n    Args:\n        input_grid (list[list[int]]): The input grid represented as a list of lists.\n\n    Returns:\n        list[list[int]]: The transformed grid as a list of lists.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    # Initialize output_grid as a copy of the input grid\n    output_grid = np.copy(input_np)\n\n    # Find all pairs of pixels with the same color\n    pixel_pairs = find_colored_pixel_pairs(input_np)\n\n    # --- First Pass: Draw Horizontal Lines ---\n    for color, pos1, pos2 in pixel_pairs:\n        r1, c1 = pos1\n        r2, c2 = pos2\n\n        # Check for horizontal alignment (same row, different columns)\n        if r1 == r2 and c1 != c2:\n            # Determine start and end columns\n            start_c = min(c1, c2)\n            end_c = max(c1, c2)\n            # Draw the horizontal line on the output grid\n            output_grid[r1, start_c:end_c + 1] = color\n\n    # --- Second Pass: Draw Vertical Lines ---\n    for color, pos1, pos2 in pixel_pairs:\n        r1, c1 = pos1\n        r2, c2 = pos2\n\n        # Check for vertical alignment (same column, different rows)\n        if c1 == c2 and r1 != r2:\n            # Determine start and end rows\n            start_r = min(r1, r2)\n            end_r = max(r1, r2)\n            # Draw the vertical line on the output grid (overwrites if necessary)\n            output_grid[start_r:end_r + 1, c1] = color\n\n    # Convert the numpy array back to a list of lists for the final output\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 16374,
    "candidates_token_count": 854,
    "total_token_count": 17228,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.543379,
  "retries": null
}