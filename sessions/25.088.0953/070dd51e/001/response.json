{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import defaultdict\n\n\"\"\"\nFind pairs of pixels of the same color in the input grid. If a pair is aligned\nhorizontally (same row) or vertically (same column), draw a line of that color\nbetween the two pixels (inclusive) on the output grid. Pixels not part of such\naligned pairs remain unchanged. The output grid starts as a copy of the input grid\nand is modified with these lines.\n\"\"\"\n\ndef find_colored_pixels(grid):\n    \"\"\"\n    Finds all non-white (non-zero) pixels and groups their coordinates by color.\n\n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        dict: A dictionary where keys are colors (int > 0) and values are lists\n              of (row, column) tuples.\n    \"\"\"\n    colored_pixels = defaultdict(list)\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            color = grid[r, c]\n            if color != 0:\n                colored_pixels[color].append((r, c))\n    return colored_pixels\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by connecting aligned pairs of same-colored pixels\n    with lines of that color.\n\n    Args:\n        input_grid (list[list[int]]): The input grid represented as a list of lists.\n\n    Returns:\n        list[list[int]]: The transformed grid as a list of lists.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    # Initialize output_grid as a copy of the input grid\n    output_grid = np.copy(input_np)\n\n    # Find all non-white pixels and group them by color\n    colored_pixels = find_colored_pixels(input_np)\n\n    # Iterate through each color group\n    for color, positions in colored_pixels.items():\n        # Check if there are exactly two pixels of this color\n        if len(positions) == 2:\n            pos1, pos2 = positions\n            r1, c1 = pos1\n            r2, c2 = pos2\n\n            # Check for horizontal alignment\n            if r1 == r2 and c1 != c2:\n                # Determine start and end columns\n                start_c = min(c1, c2)\n                end_c = max(c1, c2)\n                # Draw the horizontal line on the output grid\n                for c in range(start_c, end_c + 1):\n                    output_grid[r1, c] = color\n\n            # Check for vertical alignment\n            elif c1 == c2 and r1 != r2:\n                # Determine start and end rows\n                start_r = min(r1, r2)\n                end_r = max(r1, r2)\n                # Draw the vertical line on the output grid\n                for r in range(start_r, end_r + 1):\n                    output_grid[r, c1] = color\n\n    # Convert the numpy array back to a list of lists for the final output\n    return output_grid.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5098,
    "candidates_token_count": 734,
    "total_token_count": 5832,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.824701,
  "retries": null
}