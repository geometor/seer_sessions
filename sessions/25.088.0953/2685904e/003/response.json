{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid based on control information from specific rows and a color frequency condition.\n\n1.  Initialize the output grid as a copy of the input grid.\n2.  Identify Control Parameters:\n    a.  Examine the first row (row 0). Count azure (8) pixels to get height `H`.\n    b.  Find `R_anchor`, the index of the first all-gray (5) row.\n    c.  Find `R_source`, the index of the last row with any non-white (0) pixel.\n3.  Analyze Source Row Colors:\n    a.  Get the colors in row `R_source`.\n    b.  Count the frequency of each unique non-white color in this row.\n4.  Determine Colors to Draw:\n    a.  Create a set `selected_colors`. A color `C` is included if its frequency in the source row equals `H`.\n5.  Draw Vertical Lines:\n    a.  For each column `c`:\n    b.  Get the color `C` at `input_grid[R_source, c]`.\n    c.  If `C` is in `selected_colors`:\n        i. Draw a vertical line of color `C` in column `c` of the output grid.\n        ii. The line spans `H` rows, from row `max(0, R_anchor - H)` up to `R_anchor - 1` (inclusive).\n6.  Return the modified output grid.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef find_anchor_row(grid):\n    \"\"\"Finds the index of the first row consisting entirely of gray (5) pixels.\"\"\"\n    height, width = grid.shape\n    for r in range(height):\n        if np.all(grid[r, :] == 5):\n            return r\n    return -1 # Indicator that no anchor row was found\n\ndef find_source_color_row(grid):\n    \"\"\"Finds the index of the last row containing at least one non-white (0) pixel.\"\"\"\n    height, width = grid.shape\n    for r in range(height - 1, -1, -1): # Iterate backwards from bottom row\n        if np.any(grid[r, :] != 0):\n            return r\n    return -1 # Indicator that no source row was found\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    height, width = input_np.shape\n\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_np)\n\n    # 1. Identify Height Control Row (row 0) and count azure pixels (H)\n    height_control_row = input_np[0, :]\n    H = np.count_nonzero(height_control_row == 8)\n\n    # Handle edge case where H is 0 (no lines to draw)\n    if H == 0:\n        return output_grid.tolist() # Return the original grid\n\n    # 2. Identify the Anchor Row (first all-gray row)\n    R_anchor = find_anchor_row(input_np)\n    if R_anchor == -1:\n        # Handle error or unexpected input: no anchor row found\n        print(\"Warning: No anchor row (all gray) found.\")\n        return output_grid.tolist() # Return original grid\n\n    # 3. Identify the Source Color Row (last non-white row)\n    R_source = find_source_color_row(input_np)\n    if R_source == -1:\n         # Handle error or unexpected input: no source row found\n         print(\"Warning: No source row (non-white pixels) found.\")\n         return output_grid.tolist() # Return original grid\n\n    # 4. Analyze colors in the Source Color Row\n    source_row_content = input_np[R_source, :]\n    non_white_colors_in_source = source_row_content[source_row_content != 0]\n\n    # Handle case where source row has only white pixels (should technically be caught by find_source_color_row)\n    if len(non_white_colors_in_source) == 0:\n         return output_grid.tolist() # No colors to analyze or draw\n\n    # Calculate frequency of each non-white color\n    color_counts = Counter(non_white_colors_in_source)\n\n    # 5. Determine which colors to draw based on frequency matching H\n    selected_colors = {color for color, count in color_counts.items() if count == H}\n\n    # 6. Iterate through columns and draw lines for selected colors\n    for c in range(width):\n        # Get the source color C for the current column\n        C = source_row_content[c]\n\n        # Check if the color C is one of the selected colors\n        if C in selected_colors:\n            # Determine the start and end rows for the line\n            # End row is one above the anchor row (exclusive upper bound for range)\n            # Start row is H rows above the end row (inclusive lower bound)\n            start_row_inclusive = max(0, R_anchor - H)\n            end_row_exclusive = R_anchor\n\n            # Draw the vertical line in the output grid\n            for r in range(start_row_inclusive, end_row_exclusive):\n                 # Ensure row index is valid (already handled by max(0, ...) but good practice)\n                 if r >= 0 and r < height:\n                     output_grid[r, c] = C\n\n    # Return the modified grid as a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 9525,
    "candidates_token_count": 1324,
    "total_token_count": 10849,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 21.548485,
  "retries": null
}