{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\ndef find_connected_component(grid, start_r, start_c, visited):\n    \"\"\"\n    Finds all connected pixels of the same object starting from (start_r, start_c)\n    using Breadth-First Search (BFS). Considers any non-background color (1-9)\n    as part of a potential object.\n\n    Args:\n        grid (np.array): The input grid.\n        start_r (int): Starting row index.\n        start_c (int): Starting column index.\n        visited (np.array): A boolean grid indicating visited pixels.\n\n    Returns:\n        list: A list of tuples, where each tuple is (row, col, color)\n              representing a pixel belonging to the connected component.\n              Returns an empty list if the starting pixel is background or already visited.\n    \"\"\"\n    rows, cols = grid.shape\n    if visited[start_r, start_c] or grid[start_r, start_c] == 0:\n        return []\n\n    component_pixels = []\n    q = deque([(start_r, start_c)])\n    visited[start_r, start_c] = True\n\n    while q:\n        r, c = q.popleft()\n        color = grid[r, c]\n        component_pixels.append((r, c, color))\n\n        # Check 4 neighbors (up, down, left, right)\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < rows and 0 <= nc < cols and \\\n               not visited[nr, nc] and grid[nr, nc] != 0:\n                visited[nr, nc] = True\n                q.append((nr, nc))\n\n    return component_pixels\n\n\ndef transform(input_grid):\n    \"\"\"\n    Identifies distinct non-background objects in the input grid and reflects\n    each object vertically within its own bounding box. The relative positions\n    of the objects in the grid remain the same.\n\n    Args:\n        input_grid (list of lists): The input grid represented as a 2D list.\n\n    Returns:\n        list of lists: The transformed grid.\n    \"\"\"\n    input_array = np.array(input_grid, dtype=int)\n    rows, cols = input_array.shape\n    output_array = np.zeros_like(input_array) # Start with a background grid\n    visited = np.zeros_like(input_array, dtype=bool)\n\n    # Iterate through each pixel to find starting points of objects\n    for r in range(rows):\n        for c in range(cols):\n            # If pixel is part of an object and not yet processed\n            if input_array[r, c] != 0 and not visited[r, c]:\n                # Find all pixels belonging to this connected object\n                object_pixels = find_connected_component(input_array, r, c, visited)\n\n                if not object_pixels: # Should not happen if checks above pass, but safety first\n                    continue\n\n                # Determine the bounding box of the object\n                min_r = min(p[0] for p in object_pixels)\n                max_r = max(p[0] for p in object_pixels)\n                min_c = min(p[1] for p in object_pixels)\n                max_c = max(p[1] for p in object_pixels)\n                \n                obj_height = max_r - min_r + 1\n\n                # Reflect each pixel of the object vertically within its bounding box\n                for p_r, p_c, p_color in object_pixels:\n                    # Calculate row relative to the object's bounding box top edge\n                    relative_r = p_r - min_r\n                    # Calculate the new relative row after vertical flip\n                    new_relative_r = (obj_height - 1) - relative_r\n                    # Calculate the new absolute row in the grid\n                    new_r = min_r + new_relative_r\n                    # Place the pixel with its original color at the new flipped position\n                    # The column position remains the same relative to the grid\n                    output_array[new_r, p_c] = p_color\n\n    return output_array.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3158,
    "candidates_token_count": 1003,
    "total_token_count": 4161,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 27.736712,
  "retries": null
}