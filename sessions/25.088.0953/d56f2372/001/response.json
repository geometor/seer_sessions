{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentify all distinct non-background objects in the input grid. Analyze each object to find its color, pixel count, top-most row (start_row), bottom-most row (end_row), and left-most column (start_col). Determine the overall minimum start_row and maximum end_row across all objects. Select a target object based on the following prioritized rules:\n1. If exactly one object starts at the minimum start_row AND exactly one object ends at the maximum end_row, compare their pixel counts. Select the larger object. If sizes are equal, select the object starting at the minimum start_row.\n2. If only one object starts at the minimum start_row, select that object.\n3. If only one object ends at the maximum end_row, select that object.\n4. If multiple objects start at the minimum start_row (and rules 1-3 don't apply), select the one among them with the smallest start_col (left-most).\nFinally, extract the selected target object into a new grid sized to its minimal bounding box, preserving its shape and color against a background of 0.\n\"\"\"\n\ndef find_objects(grid):\n    \"\"\"\n    Finds all distinct contiguous objects of non-zero color in the grid.\n\n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        list: A list of dictionaries, where each dictionary represents an object\n              and contains its 'color', 'pixels' (list of (r, c) tuples),\n              'pixel_count', 'start_row', 'end_row', and 'start_col'.\n              Returns an empty list if no objects are found.\n    \"\"\"\n    objects = []\n    height, width = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    \n    for r in range(height):\n        for c in range(width):\n            if grid[r, c] != 0 and not visited[r, c]:\n                color = grid[r, c]\n                pixels = []\n                q = deque([(r, c)])\n                visited[r, c] = True\n                min_r, max_r = r, r\n                min_c, max_c = c, c\n                \n                while q:\n                    row, col = q.popleft()\n                    pixels.append((row, col))\n                    min_r = min(min_r, row)\n                    max_r = max(max_r, row)\n                    min_c = min(min_c, col)\n                    max_c = max(max_c, col)\n                    \n                    # Check neighbors (4-directional adjacency)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        if 0 <= nr < height and 0 <= nc < width and \\\n                           not visited[nr, nc] and grid[nr, nc] == color:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n                            \n                if pixels:\n                    objects.append({\n                        'color': color,\n                        'pixels': pixels,\n                        'pixel_count': len(pixels),\n                        'start_row': min_r,\n                        'end_row': max_r,\n                        'start_col': min_c,\n                        # Also store bounding box for convenience later\n                        'bounding_box': (min_r, min_c, max_r, max_c) \n                    })\n                    \n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by identifying objects, selecting one based on positional\n    uniqueness and size, and extracting it to a new grid.\n\n    Args:\n        input_grid (np.array): The 2D input grid.\n\n    Returns:\n        np.array: The 2D output grid containing the selected object.\n    \"\"\"\n    # 1. Identify Objects\n    objects = find_objects(np.array(input_grid))\n\n    # Handle case with no objects\n    if not objects:\n        return np.array([[]], dtype=int) # Or potentially return an empty 1x1 grid: np.zeros((1,1), dtype=int)\n\n    # Handle case with only one object\n    if len(objects) == 1:\n        target_object = objects[0]\n    else:\n        # 2. Analyze Objects & 3. Find Extremes\n        min_start_row = min(obj['start_row'] for obj in objects)\n        max_end_row = max(obj['end_row'] for obj in objects)\n\n        # 4. Identify Top/Bottom Objects\n        top_objects = [obj for obj in objects if obj['start_row'] == min_start_row]\n        bottom_objects = [obj for obj in objects if obj['end_row'] == max_end_row]\n\n        # 5. Select the Target Object\n        target_object = None\n        \n        # Rule A (Unique Top & Bottom)\n        if len(top_objects) == 1 and len(bottom_objects) == 1:\n            top_obj = top_objects[0]\n            bottom_obj = bottom_objects[0]\n            if top_obj['pixel_count'] >= bottom_obj['pixel_count']:\n                target_object = top_obj\n            else:\n                target_object = bottom_obj\n        # Rule B (Unique Top Only)\n        elif len(top_objects) == 1:\n            target_object = top_objects[0]\n        # Rule C (Unique Bottom Only)\n        elif len(bottom_objects) == 1:\n             target_object = bottom_objects[0]\n        # Rule D (Top Tie-breaker)\n        else: # Implies len(top_objects) > 1 (and potentially len(bottom_objects) is also > 1 or 0)\n            target_object = min(top_objects, key=lambda obj: obj['start_col'])\n\n    # 6. Extract and Output\n    if target_object is None: \n         # Should ideally not happen if logic covers all cases, but as a fallback\n         # maybe return the first object or an empty grid? Let's pick first obj.\n         if objects: target_object = objects[0] \n         else: return np.array([[]], dtype=int) # Should have been caught earlier\n\n\n    min_r, min_c, max_r, max_c = target_object['bounding_box']\n    height = max_r - min_r + 1\n    width = max_c - min_c + 1\n\n    # Create a new grid with the dimensions of the target object's bounding box\n    output_grid = np.zeros((height, width), dtype=int)\n\n    # Copy the pixels of the target object into the new grid\n    for r, c in target_object['pixels']:\n        output_grid[r - min_r, c - min_c] = target_object['color']\n\n    return output_grid.tolist() # Convert back to list of lists if required by the framework\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4984,
    "candidates_token_count": 1652,
    "total_token_count": 6636,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 21.101429,
  "retries": null
}