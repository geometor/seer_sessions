task_description: Transforms pairs of red shapes based on pixel count comparison and row position.
grid_properties:
  - size: Variable height, fixed width of 11.
  - background: White (0).
objects:
  - type: Pairs of 4x4 regions containing red (2) shapes.
  - count: 3 pairs per grid.
  - locations:
      pair_0: Top-left at (row=1, col=1) for Left, (row=1, col=6) for Right.
      pair_1: Top-left at (row=6, col=1) for Left, (row=6, col=6) for Right.
      pair_2: Top-left at (row=11, col=1) for Left, (row=11, col=6) for Right.
  - properties:
      - shape: Contained within a 4x4 bounding box. Defined by red (2) pixels.
      - pixel_count: Number of red pixels within the 4x4 box (variable).
relationships:
  - type: Comparison between Left (L) and Right (R) shapes within a pair.
  - basis: Number of red pixels (`count_L` vs `count_R`).
actions:
  - type: Recolor red pixels within a 4x4 region.
  - target_colors: Green (3), Azure (8).
  - condition: Based on the comparison result (`L > R`, `L < R`, `L == R`) and the pair index (0, 1, or 2). Specific rules apply for ties (`L == R`), sometimes depending on the exact pixel count.
transformation_summary:
  - Iterate through the three pairs (index 0, 1, 2).
  - Compare red pixel counts (`count_L`, `count_R`).
  - Define "Winner" as the shape with more red pixels, "Loser" with fewer. "Tie" if equal.
  - Apply recoloring rules based on pair index and comparison result:
      Pair 0 (Row 1):
        Winner -> Green, Loser -> Azure.
        Tie (count 10) -> L=Red, R=Azure.
        Tie (count 13) -> L=Azure, R=Red.
      Pair 1 (Row 6):
        Winner -> Green, Loser -> Azure.
        Tie (count 10) -> L=Azure, R=Red.
        Tie (count 8) -> L=Red, R=Azure.
      Pair 2 (Row 11):
        Winner -> Green, Loser -> Red (no change).
        Tie -> Red, Red (no change).