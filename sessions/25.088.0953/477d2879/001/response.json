{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on a flood-fill or expansion rule originating from 'seed' pixels.\n\n    1.  Identifies 'seed pixels' (any color other than white (0) or blue (1)) in the input grid.\n    2.  Initializes an output grid, a distance grid (initialized to infinity), and a color grid (initialized to -1).\n    3.  Sets the distance to 0 and the color to the seed's color for all seed pixel locations in the respective grids.\n    4.  Uses a Breadth-First Search (BFS) starting simultaneously from all seed pixels.\n    5.  The BFS expands outwards layer by layer into adjacent cells.\n    6.  For each cell being considered for expansion:\n        - If the expansion reaches the cell with a shorter distance than previously recorded, update the cell's distance and color (from the originating seed) in the distance and color grids, and add the cell to the BFS queue.\n        - If the expansion reaches the cell with the *same* distance as previously recorded, compare the current expanding seed's color with the already recorded color. If the current seed's color has a lower numerical value, update the cell's color in the color grid (tie-breaking rule: lower color index wins). Add the cell to the BFS queue only if the distance was updated, not just the color for a tie-break at the same distance. *Correction*: Just update the color; no need to re-add to queue if only tie-breaking.\n    7.  The expansion continues until the queue is empty.\n    8.  The final `color_grid` represents the output, where each cell contains the color of the closest seed pixel according to the BFS expansion and tie-breaking rule.\n    \"\"\"\n    \n    input_grid_np = np.array(input_grid, dtype=int)\n    height, width = input_grid_np.shape\n    \n    # Initialize distance grid with infinity and color grid with -1 (or another placeholder)\n    distance_grid = np.full((height, width), float('inf'))\n    # The output grid will store the final colors\n    output_grid = np.full((height, width), -1, dtype=int) \n    \n    # Use a deque for BFS queue\n    queue = deque()\n    \n    # Identify seed pixels and initialize the BFS\n    for r in range(height):\n        for c in range(width):\n            color = input_grid_np[r, c]\n            # Seed pixels are those not 0 (white) and not 1 (blue)\n            if color != 0 and color != 1:\n                distance_grid[r, c] = 0\n                output_grid[r, c] = color\n                queue.append((r, c))\n\n    # Define neighbors (4-directional adjacency)\n    dr = [-1, 1, 0, 0]\n    dc = [0, 0, -1, 1]\n\n    # Perform BFS\n    while queue:\n        r, c = queue.popleft()\n        current_dist = distance_grid[r, c]\n        current_color = output_grid[r, c]\n        \n        # Explore neighbors\n        for i in range(4):\n            nr, nc = r + dr[i], c + dc[i]\n            \n            # Check if neighbor is within bounds\n            if 0 <= nr < height and 0 <= nc < width:\n                new_dist = current_dist + 1\n                \n                # Check if this path is shorter than any previous path\n                if new_dist < distance_grid[nr, nc]:\n                    distance_grid[nr, nc] = new_dist\n                    output_grid[nr, nc] = current_color\n                    queue.append((nr, nc))\n                # Check for tie-breaking condition: same distance, but lower color index\n                elif new_dist == distance_grid[nr, nc]:\n                    if current_color < output_grid[nr, nc]:\n                        output_grid[nr, nc] = current_color\n                        # Optimization: No need to re-add to queue if only tie-breaking, \n                        # as its neighbors have already been explored or will be explored \n                        # via other paths of the same minimum distance. If a shorter path\n                        # was found later, it would handle propagation.\n                        # queue.append((nr, nc)) # Re-adding might lead to cycles or redundant work\n\n    # The output_grid now holds the final colored grid based on the expansion\n    # Ensure any cell that wasn't reached (shouldn't happen if grid is connected or seeds exist) \n    # has a default value, though the logic should cover all cells reachable from seeds.\n    # If the input grid could be entirely 0s and 1s, the output would remain -1. \n    # Based on examples, there are always seeds.\n    # Let's handle the edge case where some original 0/1 cells might remain -1 if unreachable (though unlikely given examples)\n    # A safe default might be 0, but the problem implies full coverage.\n    # Check if any -1 remains and replace (e.g., with 0), although it shouldn't based on task structure\n    output_grid[output_grid == -1] = 0 # Default to white if unreachable, though likely unnecessary\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4297,
    "candidates_token_count": 1234,
    "total_token_count": 5531,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 24.847043,
  "retries": null
}