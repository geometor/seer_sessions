{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentify the most frequent color (dominant color) in the input grid.\nPerform a reachability analysis (BFS) starting from all boundary pixels that are *not* the dominant color.\nThis search can traverse through any adjacent (8 directions: orthogonal and diagonal) pixel that is also *not* the dominant color.\nMark all pixels reachable from the boundary through non-dominant paths.\nCreate an output grid by copying the input grid.\nIterate through the grid; any pixel that is *not* the dominant color and was *not* marked as reachable is considered enclosed.\nChange the color of these enclosed pixels in the output grid to the dominant color.\nReturn the modified output grid.\n\"\"\"\n\nimport numpy as np\nfrom collections import deque, Counter\n\ndef find_dominant_color(grid):\n    \"\"\"\n    Finds the color with the highest frequency in the grid.\n    Handles ties by returning the smallest color value among the most frequent ones.\n    \"\"\"\n    # Ensure grid is a numpy array for efficient counting\n    grid_np = np.array(grid)\n    # Flatten the grid to count occurrences\n    colors, counts = np.unique(grid_np, return_counts=True)\n    \n    # Find the maximum count\n    max_count = np.max(counts)\n    \n    # Find all colors that have the maximum count\n    most_frequent_colors = colors[counts == max_count]\n    \n    # If there's a tie, return the smallest color value (consistent tie-breaking)\n    dominant_color = np.min(most_frequent_colors)\n    \n    return dominant_color\n\ndef transform(input_grid):\n    \"\"\"\n    Fills enclosed regions (pixels not of the dominant color that cannot reach\n    the grid boundary without crossing the dominant color) with the dominant color.\n    \"\"\"\n    # Convert input list of lists to numpy array for easier manipulation\n    grid = np.array(input_grid)\n    height, width = grid.shape\n\n    # 1. Find the dominant color\n    dominant_color = find_dominant_color(grid)\n\n    # 2. Initialize output grid as a copy of the input\n    output_grid = grid.copy()\n\n    # 3. Initialize reachability tracking and BFS queue\n    is_reachable = np.zeros_like(grid, dtype=bool)\n    queue = deque()\n\n    # 4. Seed the BFS queue with non-dominant boundary pixels\n    for r in range(height):\n        for c in range(width):\n            # Check if pixel is on the boundary\n            if r == 0 or r == height - 1 or c == 0 or c == width - 1:\n                # Check if the boundary pixel is not the dominant color\n                if grid[r, c] != dominant_color:\n                    # If not already marked, mark as reachable and add to queue\n                    if not is_reachable[r, c]:\n                        is_reachable[r, c] = True\n                        queue.append((r, c))\n\n    # 5. Perform BFS to find all reachable non-dominant pixels\n    # Define 8 directions (orthogonal and diagonal)\n    dr = [-1, -1, -1, 0, 0, 1, 1, 1]\n    dc = [-1, 0, 1, -1, 1, -1, 0, 1]\n\n    while queue:\n        r, c = queue.popleft()\n\n        # Explore neighbors\n        for i in range(8):\n            nr, nc = r + dr[i], c + dc[i]\n\n            # Check if neighbor is within grid bounds\n            if 0 <= nr < height and 0 <= nc < width:\n                # Check if neighbor is not the dominant color AND not yet visited/reachable\n                if grid[nr, nc] != dominant_color and not is_reachable[nr, nc]:\n                    is_reachable[nr, nc] = True\n                    queue.append((nr, nc))\n\n    # 6. Fill enclosed non-dominant pixels in the output grid\n    for r in range(height):\n        for c in range(width):\n            # If pixel is not dominant AND was not reached from the boundary\n            if grid[r, c] != dominant_color and not is_reachable[r, c]:\n                output_grid[r, c] = dominant_color\n\n    # Convert back to list of lists for the expected ARC format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 9646,
    "candidates_token_count": 1005,
    "total_token_count": 10651,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.940488,
  "retries": null
}