{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentify the color with the highest frequency in the input grid (dominant_color).\nCreate a copy of the input grid.\nIdentify all pixels that are not the dominant_color and are located on the grid boundary.\nPerform a search (like BFS) starting from these boundary non-dominant_color pixels, marking all reachable non-dominant_color pixels via orthogonal and diagonal moves through other non-dominant_color pixels.\nIterate through the copied grid. Any pixel that is not the dominant_color and was not marked as reachable should be changed to the dominant_color.\nReturn the modified grid.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter, deque\n\ndef find_dominant_color(grid):\n    \"\"\"Finds the color with the highest frequency in the grid.\"\"\"\n    colors, counts = np.unique(grid, return_counts=True)\n    # In case of a tie, numpy unique might not be deterministic,\n    # but based on examples, a unique max seems likely.\n    # If tie-breaking is needed, consider sorting by color value as well.\n    dominant_color_index = np.argmax(counts)\n    return colors[dominant_color_index]\n\ndef transform(input_grid):\n    \"\"\"\n    Fills enclosed regions (pixels not of the dominant color that cannot reach\n    the grid boundary without crossing the dominant color) with the dominant color.\n    \"\"\"\n    # Convert input list of lists to numpy array for easier manipulation\n    grid = np.array(input_grid)\n    height, width = grid.shape\n\n    # 1. Find the dominant color\n    dominant_color = find_dominant_color(grid)\n\n    # 2. Initialize output grid as a copy of the input\n    output_grid = grid.copy()\n\n    # 3. Perform reachability analysis (BFS) from the boundary\n    visited = np.zeros_like(grid, dtype=bool)\n    queue = deque()\n\n    # Add boundary non-dominant pixels to the queue and mark as visited\n    for r in range(height):\n        for c in range(width):\n            if r == 0 or r == height - 1 or c == 0 or c == width - 1:\n                if grid[r, c] != dominant_color and not visited[r, c]:\n                    visited[r, c] = True\n                    queue.append((r, c))\n\n    # Define 8 directions (orthogonal and diagonal)\n    dr = [-1, -1, -1, 0, 0, 1, 1, 1]\n    dc = [-1, 0, 1, -1, 1, -1, 0, 1]\n\n    # Start BFS\n    while queue:\n        r, c = queue.popleft()\n\n        # Explore neighbors\n        for i in range(8):\n            nr, nc = r + dr[i], c + dc[i]\n\n            # Check bounds\n            if 0 <= nr < height and 0 <= nc < width:\n                # Check if neighbor is not dominant color and not visited\n                if grid[nr, nc] != dominant_color and not visited[nr, nc]:\n                    visited[nr, nc] = True\n                    queue.append((nr, nc))\n\n    # 4. Fill enclosed non-dominant pixels\n    for r in range(height):\n        for c in range(width):\n            # If pixel is not dominant and was not reached from boundary\n            if grid[r, c] != dominant_color and not visited[r, c]:\n                output_grid[r, c] = dominant_color\n\n    # Convert back to list of lists if necessary, or keep as numpy array\n    # Assuming the standard ARC format expects list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5424,
    "candidates_token_count": 845,
    "total_token_count": 6269,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.110537,
  "retries": null
}