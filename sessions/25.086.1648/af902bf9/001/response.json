{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n# Helper function to find pixel coordinates of a specific color\ndef find_pixels(grid, color):\n    \"\"\"Finds all coordinates (row, col) of pixels with the specified color.\"\"\"\n    # Use np.argwhere to find indices where grid equals color\n    coords = np.argwhere(grid == color)\n    # Convert the [row, col] pairs into a list of (row, col) tuples\n    return [tuple(coord) for coord in coords]\n\ndef transform(input_grid):\n    \"\"\"\n    Identifies rectangles defined by four yellow (4) corner pixels in the input grid\n    and fills the interior area of these rectangles with red (2) pixels.\n    \"\"\"\n    # Initialize output_grid as a copy of the input_grid (assuming input_grid is a numpy array)\n    output_grid = np.copy(input_grid)\n\n    # Find all yellow (4) pixels in the original input grid\n    yellow_pixels = find_pixels(input_grid, 4)\n\n    # Convert the list of yellow pixel coordinates into a set for efficient O(1) average time lookups\n    yellow_pixel_set = set(yellow_pixels)\n\n    # Store identified rectangle boundaries (min_r, max_r, min_c, max_c) to avoid redundant filling\n    processed_rectangles = set()\n\n    # Iterate through all found yellow pixels, considering each as a potential top-left corner (r1, c1)\n    for r1, c1 in yellow_pixels:\n        # Iterate through all yellow pixels again, considering each as a potential bottom-right corner (r2, c2)\n        for r2, c2 in yellow_pixels:\n            # To form a valid rectangle, the bottom-right corner must be strictly below and to the right of the top-left corner\n            if r2 > r1 and c2 > c1:\n                # Define the coordinates of the other two potential corners: top-right and bottom-left\n                corner_tr = (r1, c2)\n                corner_bl = (r2, c1)\n\n                # Check if these other two corners actually exist as yellow pixels in the input grid\n                if corner_tr in yellow_pixel_set and corner_bl in yellow_pixel_set:\n                    # If all four corners (r1, c1), (r1, c2), (r2, c1), (r2, c2) exist, we've found a rectangle.\n                    # Define the bounds of this rectangle\n                    rectangle_bounds = (r1, r2, c1, c2) # (min_row, max_row, min_col, max_col)\n\n                    # Check if we have already identified and processed this specific rectangle\n                    # This prevents filling the same area multiple times if found via different corner pairs\n                    if rectangle_bounds not in processed_rectangles:\n                        # Add the bounds to the set to mark this rectangle as processed\n                        processed_rectangles.add(rectangle_bounds)\n\n                        # Fill the interior area of this rectangle in the output grid with red (2)\n                        # Iterate through rows strictly between the top and bottom rows (from r1+1 up to, but not including, r2)\n                        for r in range(r1 + 1, r2):\n                            # Iterate through columns strictly between the left and right columns (from c1+1 up to, but not including, c2)\n                            for c in range(c1 + 1, c2):\n                                output_grid[r, c] = 2 # Set the pixel color to red\n\n    # Return the modified grid as a numpy array\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3573,
    "candidates_token_count": 822,
    "total_token_count": 4395,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 28.548673,
  "retries": null
}