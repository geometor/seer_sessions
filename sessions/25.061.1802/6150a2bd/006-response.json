{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation performs a 90-degree clockwise rotation of a single, non-zero colored object within the grid. If the object is not square (dimensions of height and width are not equal), then the rotation is performed on the minimal bounding box of that object, using the center of the bounding box as the point of rotation. If there are multiple colored objects or the bounding box calculation is not possible then a different, unknown transformation applies.\n\"\"\"\n\nimport numpy as np\n\ndef get_bounding_box(grid):\n    \"\"\"\n    Finds the bounding box of the non-zero elements in a grid.\n\n    Args:\n        grid: A 2D list representing the grid.\n\n    Returns:\n        A tuple (min_row, max_row, min_col, max_col) representing the bounding box,\n        or None if no non-zero elements are found.\n    \"\"\"\n    rows = len(grid)\n    cols = len(grid[0]) if rows > 0 else 0\n\n    min_row, max_row = rows, -1\n    min_col, max_col = cols, -1\n\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] != 0:\n                min_row = min(min_row, i)\n                max_row = max(max_row, i)\n                min_col = min(min_col, j)\n                max_col = max(max_col, j)\n\n    if max_row == -1:  # No non-zero elements found\n        return None\n\n    return min_row, max_row, min_col, max_col\n\ndef rotate_point_around_center(point, center, k=1):\n    \"\"\"Rotates a point around a center point 90 degrees clockwise (k=1), counterclockwise (k=-1), 180 (k=2)\"\"\"\n    row, col = point\n    center_row, center_col = center\n    \n    # Translate the point to the origin (relative to the center)\n    translated_row = row - center_row\n    translated_col = col - center_col\n    \n    for _ in range(k):\n         # Rotate 90 degrees clockwise: (row, col) -> (col, -row)\n        rotated_row, rotated_col = translated_col, -translated_row\n        translated_row, translated_col = rotated_row, rotated_col\n    \n    # Translate back to the original coordinate system\n    final_row = rotated_row + center_row\n    final_col = rotated_col + center_col\n    \n    return final_row, final_col\n\n\ndef transform(input_grid):\n    # Find the bounding box of the non-zero elements\n    bbox = get_bounding_box(input_grid)\n\n    if bbox is None:  # Handle empty grid or grid with only zeros\n        return input_grid\n\n    min_row, max_row, min_col, max_col = bbox\n\n    # Calculate center of bounding box\n    center_row = (min_row + max_row) / 2\n    center_col = (min_col + max_col) / 2\n\n\n    # Initialize output grid with zeros, same size as input\n    output_grid = [[0] * len(input_grid[0]) for _ in range(len(input_grid))]\n\n    # Rotate each non-zero pixel within the bounding box\n    for i in range(len(input_grid)):\n        for j in range(len(input_grid[0])):\n            if input_grid[i][j] != 0:\n                # Rotate point around the center\n                rotated_row, rotated_col = rotate_point_around_center((i, j), (center_row, center_col))\n\n                # Check bounds and set pixel in the output grid\n                if 0 <= int(rotated_row) < len(output_grid) and 0 <= int(rotated_col) < len(output_grid[0]):\n                     output_grid[int(rotated_row)][int(rotated_col)] = input_grid[i][j]\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4988,
    "candidates_token_count": 949,
    "total_token_count": 5937,
    "cached_content_token_count": 0
  },
  "response_time": 8.884376,
  "response_file": "006-response.json"
}