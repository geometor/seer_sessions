task_description: Swap the fill colors of patterns contained within red rectangular frames according to a specific permutation based on the number and order of frames.

elements:
  - element: background
    color: white (0)
    properties: Static backdrop.
  - element: frame
    color: blue (1)
    properties: Optional outer border, static.
  - element: container
    color: red (2)
    properties:
      - Hollow rectangular shape.
      - Defines a boundary for an internal pattern.
      - Position and shape are static.
  - element: pattern
    color: variable (not white, blue, or red)
    properties:
      - Located inside a red container.
      - Consists of pixels of a single color.
      - Shape/relative pixel positions are static within its container.
      - The specific color used for the pattern changes based on the transformation rule.

relationships:
  - Each pattern is uniquely associated with one container.
  - Containers can be ordered spatially (e.g., top-to-bottom, left-to-right based on top-left corner).

actions:
  - identify: Locate all red (2) rectangular containers.
  - identify: For each container, determine the color and the set of pixel coordinates (relative to the container or grid) of its internal pattern.
  - order: Sort the identified containers based on their top-left corner coordinates (row index first, then column index).
  - determine_permutation: Based on the total number (N) of containers, find the specific source container for each destination container's new color.
      - If N=3: Container 1 gets color from Container 2; Container 2 gets color from Container 3; Container 3 gets color from Container 1. (Based on Ex1, Ex3 re-ordered)
      - If N=4: Container 1 gets color from Container 3; Container 2 gets color from Container 1; Container 3 gets color from Container 4; Container 4 gets color from Container 2. (Based on Ex2)
  - apply_transformation: Create the output grid. For each container `i` in the ordered list:
      - Find the source container `j = P(i)` according to the permutation rule.
      - Get the original pattern color `C_j` from container `j`.
      - Recolor the pixels forming the pattern shape inside container `i` using the color `C_j`.
      - Preserve all other pixels (background, blue frame, red container frames, white pixels within containers).

implicit_rules:
  - The number of containers (N) determines the specific color permutation rule.
  - The spatial order of containers is crucial for applying the permutation correctly.