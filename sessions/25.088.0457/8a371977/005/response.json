{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nRecolors connected components of white pixels (0) based on whether any pixel\nwithin the component touches the absolute border of the grid.\n\n1. Initialize the output grid as a copy of the input grid.\n2. Create a 'visited' grid to track processed white pixels.\n3. Iterate through each pixel (r, c) of the input grid.\n4. If a pixel is white (0) and hasn't been visited:\n    a. Start a search (e.g., Breadth-First Search) to find all connected\n       white pixels forming a component. Use 8-way adjacency (including diagonals).\n    b. Keep track of all coordinates belonging to this component.\n    c. During the search, maintain a flag `is_border_component`. Set this\n       flag to True if *any* pixel encountered during the search for this\n       component lies on the grid's absolute border (row 0, row H-1, col 0,\n       or col W-1).\n    d. Mark all pixels found during the search as visited.\n    e. After finding the complete component:\n        i. If `is_border_component` is True, change the color of all pixels\n           in this component in the output grid to red (2).\n        ii. If `is_border_component` is False, change the color of all pixels\n            in this component in the output grid to green (3).\n5. Pixels that were not white initially remain unchanged.\n6. Return the modified output grid.\n\"\"\"\n\ndef _is_valid(r, c, height, width):\n    \"\"\"Checks if coordinates are within grid bounds.\"\"\"\n    return 0 <= r < height and 0 <= c < width\n\ndef _is_border_pixel(r, c, height, width):\n    \"\"\"Checks if a pixel coordinate is on the absolute border.\"\"\"\n    return r == 0 or r == height - 1 or c == 0 or c == width - 1\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by recoloring connected components of white pixels.\n    Components touching the border become red (2).\n    Components not touching the border become green (3).\n    Other pixels remain unchanged.\n    \"\"\"\n    # Convert input to numpy array for efficient operations\n    input_array = np.array(input_grid, dtype=int)\n    height, width = input_array.shape\n    \n    # Initialize output_grid as a copy of the input\n    output_array = np.copy(input_array)\n    \n    # Keep track of visited white pixels to avoid processing components multiple times\n    visited = np.zeros_like(input_array, dtype=bool)\n\n    # Define 8-directional neighbours (including diagonals)\n    directions = [(-1, -1), (-1, 0), (-1, 1),\n                  (0, -1),           (0, 1),\n                  (1, -1), (1, 0), (1, 1)]\n\n    # Iterate through each pixel of the grid\n    for r in range(height):\n        for c in range(width):\n            # Check if the current pixel is white (0) and hasn't been processed yet\n            if input_array[r, c] == 0 and not visited[r, c]:\n                \n                # Found the start of a new white component, perform BFS\n                component_coords = []\n                is_component_border_adjacent = False\n                q = deque([(r, c)])\n                visited[r, c] = True # Mark the starting pixel visited\n\n                while q:\n                    curr_r, curr_c = q.popleft()\n                    component_coords.append((curr_r, curr_c))\n\n                    # Check if this *current* pixel is on the border\n                    if not is_component_border_adjacent and _is_border_pixel(curr_r, curr_c, height, width):\n                        is_component_border_adjacent = True\n                        # No need to break, continue BFS to find all component pixels\n\n                    # Explore neighbours for BFS continuation\n                    for dr, dc in directions:\n                        nr, nc = curr_r + dr, curr_c + dc\n                        \n                        # Check if the neighbour is valid, is white, and not visited\n                        if _is_valid(nr, nc, height, width) and \\\n                           input_array[nr, nc] == 0 and \\\n                           not visited[nr, nc]:\n                            \n                            visited[nr, nc] = True # Mark neighbour as visited immediately\n                            q.append((nr, nc)) # Add neighbour to the queue\n\n                # After BFS, determine the color for the entire component\n                target_color = 2 if is_component_border_adjacent else 3\n                \n                # Apply the color to all pixels in the found component\n                for comp_r, comp_c in component_coords:\n                    output_array[comp_r, comp_c] = target_color\n            \n            # If pixel is not white or already visited, do nothing\n\n    # Convert the numpy array back to a list of lists for the expected output format\n    return output_array.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 16769,
    "candidates_token_count": 1172,
    "total_token_count": 17941,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 66.434055,
  "retries": null
}