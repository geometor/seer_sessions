{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\nimport collections\n\ndef find_objects(grid, color):\n    \"\"\"\n    Finds all contiguous objects of a specified color in the grid.\n\n    Args:\n        grid (list of list of int): The input grid.\n        color (int): The color of the objects to find.\n\n    Returns:\n        list: A list of objects. Each object is represented as a dictionary\n              with 'coords' (a set of (row, col) tuples) and \n              'shape' (a frozenset of relative (row, col) tuples from the top-left corner).\n    \"\"\"\n    height = len(grid)\n    width = len(grid[0])\n    visited = set()\n    objects = []\n    \n    for r in range(height):\n        for c in range(width):\n            if grid[r][c] == color and (r, c) not in visited:\n                # Found the start of a potential new object\n                object_coords = set()\n                q = collections.deque([(r, c)])\n                visited.add((r, c))\n                min_r, min_c = r, c\n\n                while q:\n                    curr_r, curr_c = q.popleft()\n                    object_coords.add((curr_r, curr_c))\n                    min_r = min(min_r, curr_r)\n                    min_c = min(min_c, curr_c)\n\n                    # Check 8 neighbors (including diagonals)\n                    for dr in [-1, 0, 1]:\n                        for dc in [-1, 0, 1]:\n                            if dr == 0 and dc == 0:\n                                continue\n                            \n                            nr, nc = curr_r + dr, curr_c + dc\n\n                            # Check bounds and color and visited status\n                            if 0 <= nr < height and 0 <= nc < width and \\\n                               grid[nr][nc] == color and (nr, nc) not in visited:\n                                visited.add((nr, nc))\n                                q.append((nr, nc))\n\n                if object_coords:\n                    # Calculate relative coordinates for the shape representation\n                    relative_coords = frozenset((coord_r - min_r, coord_c - min_c) for coord_r, coord_c in object_coords)\n                    objects.append({'coords': object_coords, 'shape': relative_coords})\n                    \n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Identifies blue shapes (color 1) in the input grid. If an identical shape exists\n    in azure (color 8) anywhere in the input grid, the blue shape is recolored to \n    orange (color 7) in the output grid. Otherwise, the blue shape remains blue. \n    Azure shapes remain azure.\n\n    Args:\n        input_grid (list of list of int): The input grid represented as a 2D list.\n\n    Returns:\n        list of list of int: The transformed grid.\n    \"\"\"\n    \n    # Create a deep copy of the input grid to modify\n    output_grid = copy.deepcopy(input_grid)\n    \n    # Find all blue objects (color 1)\n    blue_objects = find_objects(input_grid, 1)\n    \n    # Find all azure objects (color 8)\n    azure_objects = find_objects(input_grid, 8)\n    \n    # Create a set of unique shapes found among the azure objects for quick lookup\n    # The shape is represented by a frozenset of relative coordinates\n    azure_shapes = {obj['shape'] for obj in azure_objects}\n    \n    # Iterate through each blue object found\n    for blue_obj in blue_objects:\n        # Check if the shape of the current blue object exists in the set of azure shapes\n        if blue_obj['shape'] in azure_shapes:\n            # If a match is found, recolor the pixels of this blue object to orange (7)\n            for r, c in blue_obj['coords']:\n                output_grid[r][c] = 7\n                \n    # Return the modified grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6206,
    "candidates_token_count": 943,
    "total_token_count": 7149,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 26.431914,
  "retries": null
}