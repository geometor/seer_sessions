{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentifies contiguous regions of white pixels (color 0) within the input grid. \nFor each such region, it determines the colors of all non-white pixels immediately adjacent to it. \nIf a white region is fully enclosed (does not touch the grid boundary) and all its adjacent non-white pixels share the exact same color, \nthen the entire white region is filled with that single adjacent color in the output grid. \nOtherwise (if the region touches the boundary, or has adjacent pixels of different non-white colors, or has no adjacent non-white pixels), \nthe white region remains unchanged (color 0). All original non-white pixels are preserved in the output.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Fills enclosed white regions with the color of their single immediate surrounding frame.\n\n    Args:\n        input_grid (list of lists): A 2D list representing the input grid.\n\n    Returns:\n        list of lists: A 2D list representing the transformed output grid.\n    \"\"\"\n    input_grid_np = np.array(input_grid, dtype=int)\n    H, W = input_grid_np.shape\n    output_grid_np = np.copy(input_grid_np)\n    visited = np.full((H, W), False, dtype=bool)\n\n    # Helper function to check grid bounds\n    def is_valid(r, c):\n        return 0 <= r < H and 0 <= c < W\n\n    # Iterate through each cell to find starting points of white regions\n    for r in range(H):\n        for c in range(W):\n            # If it's a white pixel and hasn't been visited yet (part of a new region)\n            if input_grid_np[r, c] == 0 and not visited[r, c]:\n                \n                # Initialize BFS for this white region\n                region_coords = []\n                adjacent_colors = set()\n                touches_boundary = False\n                queue = deque([(r, c)])\n                visited[r, c] = True\n                \n                # Perform BFS to find all connected white pixels and their adjacent non-white neighbors\n                while queue:\n                    curr_r, curr_c = queue.popleft()\n                    region_coords.append((curr_r, curr_c))\n\n                    # Check all 4 neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = curr_r + dr, curr_c + dc\n\n                        # Check if neighbor is out of bounds\n                        if not is_valid(nr, nc):\n                            touches_boundary = True\n                            continue # Move to the next neighbor\n\n                        # Neighbor is within bounds\n                        neighbor_color = input_grid_np[nr, nc]\n\n                        # If neighbor is white and not visited, add to queue\n                        if neighbor_color == 0 and not visited[nr, nc]:\n                            visited[nr, nc] = True\n                            queue.append((nr, nc))\n                        # If neighbor is not white (part of a potential frame)\n                        elif neighbor_color != 0:\n                            adjacent_colors.add(neighbor_color)\n\n                # After exploring the entire white region, check fill conditions\n                # Condition: Region must NOT touch the boundary AND must have exactly ONE adjacent color\n                if not touches_boundary and len(adjacent_colors) == 1:\n                    fill_color = adjacent_colors.pop() # Get the single adjacent color\n                    # Fill the region in the output grid\n                    for fill_r, fill_c in region_coords:\n                        output_grid_np[fill_r, fill_c] = fill_color\n                        \n    return output_grid_np.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 11581,
    "candidates_token_count": 872,
    "total_token_count": 12453,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.275421,
  "retries": null
}