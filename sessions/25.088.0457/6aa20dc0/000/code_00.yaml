task_description: Identify two target objects and a key object against a background. Determine a fill color based on the key object's unique colors compared to the target objects. Find the bounding box enclosing the two target objects. Fill the background pixels within this bounding box with the determined fill color, leaving the original objects unchanged.

elements:
  - type: grid
    properties:
      background_color: The most frequent color in the input grid.
  - type: object
    properties:
      pixels: A list of (row, col) coordinates.
      color: The single color of the object (if monochromatic) or a set of colors (if polychromatic).
      bounding_box: The minimum rectangle (min_row, max_row, min_col, max_col) containing the object's pixels.
      role: Can be 'target' or 'key'. Determined by complexity or color composition relative to other objects. Typically two 'targets' and one 'key'.

relationships:
  - between: [key_object, target_object_1, target_object_2]
    type: color_derivation
    description: The fill color is the color present in the key_object that is NOT present in either target_object_1 or target_object_2.
  - between: [target_object_1, target_object_2]
    type: spatial_enclosure
    description: A combined bounding box is calculated that minimally encloses both target objects.

actions:
  - name: identify_background_color
    inputs: input_grid
    outputs: background_color
  - name: segment_objects
    inputs: input_grid, background_color
    outputs: list_of_objects
  - name: classify_objects
    inputs: list_of_objects
    outputs: target_object_1, target_object_2, key_object
    logic: Identify the two 'simpler' or monochromatic objects as targets, and the remaining (often more complex or polychromatic) object as the key. (Needs refinement based on object properties). A possible heuristic: identify the object containing colors not found in the other two - this is the key. The other two are targets.
  - name: determine_fill_color
    inputs: key_object, target_object_1, target_object_2
    outputs: fill_color
    logic: Find the color C such that C is in key_object.colors and C is NOT in target_object_1.colors and C is NOT in target_object_2.colors. Assume target objects are monochromatic for simplicity based on examples.
  - name: calculate_combined_bounding_box
    inputs: target_object_1, target_object_2
    outputs: combined_bb (min_row, max_row, min_col, max_col)
  - name: fill_background_in_bounding_box
    inputs: input_grid, combined_bb, fill_color, background_color
    outputs: output_grid
    logic: Create a copy of the input grid. Iterate through each pixel (r, c) within the combined_bb. If the color of input_grid[r, c] is the background_color, set output_grid[r, c] to fill_color. Otherwise, keep the original color.
