{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nThe transformation identifies the most frequent color in the input grid, considering it the background color.\nIt then performs a single-step expansion of the non-background colored areas into adjacent background cells.\nThe rule for expansion is: A background cell changes color if and only if it has at least one non-background neighbor, and all of its non-background neighbors share the same color. \nIf these conditions are met, the background cell takes on the color of its non-background neighbor(s).\nCells that are not the background color in the input grid remain unchanged in the output grid.\nBackground cells adjacent to zero non-background neighbors or adjacent to multiple *different* non-background neighbors retain the background color.\nThis process occurs in a single pass based on the initial state of the grid.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by expanding non-background colors by one step \n    into adjacent background cells, conditional on the background cell being \n    adjacent only to non-background cells of a single, uniform color.\n\n    Args:\n        input_grid (list[list[int]]): The input grid represented as a list of lists.\n\n    Returns:\n        list[list[int]]: The transformed grid.\n    \"\"\"\n    # Convert input list of lists to numpy array for easier handling\n    input_array = np.array(input_grid, dtype=int)\n    height, width = input_array.shape\n    \n    # Create a copy of the input grid to store the output\n    # Changes will be made to this copy, based on the original input_array\n    output_array = np.copy(input_array)\n\n    # Handle edge case: if grid contains only one color, no transformation is needed.\n    unique_colors = np.unique(input_array)\n    if len(unique_colors) <= 1:\n        return input_grid \n\n    # Determine background color (assumed to be the most frequent color)\n    counts = Counter(input_array.flatten())\n    # Check for empty grid just in case\n    if not counts: \n        return input_grid\n    background_color = counts.most_common(1)[0][0]\n\n    # Iterate through each cell of the input grid\n    for r in range(height):\n        for c in range(width):\n            # Check if the current cell in the *input* grid has the background color\n            if input_array[r, c] == background_color:\n                # Use a set to store unique non-background colors found in neighbors\n                neighbor_colors = set() \n\n                # Define orthogonal directions\n                directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] # Right, Left, Down, Up\n                \n                # Check orthogonal neighbors in the *input* grid\n                for dr, dc in directions:\n                    nr, nc = r + dr, c + dc\n\n                    # Check if the neighbor coordinates are within grid bounds\n                    if 0 <= nr < height and 0 <= nc < width:\n                        # Get the color of the neighbor from the input grid\n                        neighbor_color = input_array[nr, nc]\n                        # If the neighbor is not background color, add it to the set\n                        if neighbor_color != background_color:\n                            neighbor_colors.add(neighbor_color)\n\n                # Check if there was at least one non-background neighbor AND \n                # exactly one unique non-background neighbor color was found\n                if len(neighbor_colors) == 1:\n                    # Get the single unique neighbor color\n                    new_color = list(neighbor_colors)[0]\n                    # Update the cell in the output grid\n                    output_array[r, c] = new_color\n            \n            # If the cell in the input grid was not background color, it remains unchanged\n            # (already handled by initializing output_array as a copy of input_array)\n\n    # Convert the final numpy array back to a list of lists for the required output format\n    return output_array.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7792,
    "candidates_token_count": 916,
    "total_token_count": 8708,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 105.103806,
  "retries": null
}