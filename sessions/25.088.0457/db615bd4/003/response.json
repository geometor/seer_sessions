{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter, defaultdict\n\n\"\"\"\nTransformation Rule:\n\n1.  Identify the background color (most frequent) and pattern color (second most frequent) in the input grid.\n2.  Find all 'marker pixels' whose colors are neither the background nor the pattern color.\n3.  Group the locations of these marker pixels by their color.\n4.  For each group of marker pixels of the same color:\n    a.  Determine the bounding box (minimum/maximum row and column) enclosing all markers in that group.\n    b.  Iterate through all cells within this bounding box.\n    c.  If a cell within the bounding box originally contained the background color, change its color in the output grid to the marker color of the current group.\n    d.  Cells originally containing the pattern color or other marker colors within the bounding box remain unchanged.\n5.  The output grid is the initial grid modified by these conditional bounding box fills.\n\"\"\"\n\ndef get_background_pattern_colors(grid):\n    \"\"\"\n    Identifies the background (most frequent) and pattern (second most frequent) colors.\n    Handles cases with fewer than two distinct colors.\n    \"\"\"\n    flat_grid = grid.flatten()\n    color_counts = Counter(flat_grid)\n    \n    # Sort colors by frequency (most frequent first)\n    sorted_colors = [item[0] for item in color_counts.most_common()]\n\n    bg_color = sorted_colors[0] if sorted_colors else 0 # Default to 0 if grid is empty? Or handle earlier. Assume non-empty.\n    \n    # If there's only one color, pattern is the same as background\n    pattern_color = sorted_colors[1] if len(sorted_colors) > 1 else bg_color\n    \n    return bg_color, pattern_color\n\ndef find_marker_pixels_and_groups(grid, bg_color, pattern_color):\n    \"\"\"Finds all marker pixels and groups their locations by color.\"\"\"\n    marker_pixels_by_color = defaultdict(list)\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            color = grid[r, c]\n            # Check if the color is neither background nor pattern\n            if color != bg_color and color != pattern_color:\n                marker_pixels_by_color[color].append((r, c))\n    return marker_pixels_by_color\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule: identifies background/pattern, finds marker\n    groups, calculates their bounding boxes, and fills these boxes conditionally\n    on the output grid based on the original background color.\n    \"\"\"\n    # Convert input list of lists to numpy array for efficient processing\n    input_array = np.array(input_grid, dtype=int)\n    \n    # Handle empty grid case\n    if input_array.size == 0:\n        return []\n        \n    # Initialize output_grid as a copy of the input\n    output_array = np.copy(input_array)\n    rows, cols = input_array.shape\n\n    # 1. Identify Background and Pattern colors using frequency\n    bg_color, pattern_color = get_background_pattern_colors(input_array)\n\n    # 2. Find marker pixels and group them by color\n    marker_groups = find_marker_pixels_and_groups(input_array, bg_color, pattern_color)\n\n    # 3. Process each marker color group\n    for marker_color, locations in marker_groups.items():\n        if not locations: # Skip if a color somehow has no locations (shouldn't happen with defaultdict)\n            continue\n\n        # 4a. Determine Bounding Box for the current marker group\n        rows_present = [r for r, c in locations]\n        cols_present = [c for r, c in locations]\n        min_r, max_r = min(rows_present), max(rows_present)\n        min_c, max_c = min(cols_present), max(cols_present)\n\n        # 4b. Fill Bounding Box Conditionally\n        for r in range(min_r, max_r + 1):\n            for c in range(min_c, max_c + 1):\n                # 4c/d/e. Check original color and update output if it was background\n                if input_array[r, c] == bg_color:\n                    output_array[r, c] = marker_color\n                    \n    # Convert the final numpy array back to a list of lists for the expected output format\n    return output_array.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 15728,
    "candidates_token_count": 1061,
    "total_token_count": 16789,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.598297,
  "retries": null
}