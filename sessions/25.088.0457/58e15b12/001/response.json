{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nSimulates the movement of azure (8) and green (3) particles on a grid.\nThe input grid defines the starting positions. Azure particles move down-right (+1,+1) \nand green particles move down-left (+1,-1). Particles bounce off grid edges, \nreversing the velocity component perpendicular to the edge. They leave trails \nof their color. If an azure and a green particle land on the same cell in the \nsame step, the cell becomes magenta (6). Otherwise, if multiple particles land \non the same cell, azure (8) takes priority over green (3). The simulation runs \nfor max(height, width) steps. The output grid accumulates the trails and \ncollision points.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by simulating particle movement, bouncing, trails, \n    and collisions.\n    \"\"\"\n    \n    # Get grid dimensions\n    H, W = input_grid.shape\n    \n    # Initialize an output grid of the same dimensions with background color 0\n    output_grid = np.zeros_like(input_grid)\n    \n    # Identify initial particles\n    particles = []\n    for r in range(H):\n        for c in range(W):\n            color = input_grid[r, c]\n            if color == 8:  # Azure\n                particles.append({'r': r, 'c': c, 'color': 8, 'dr': 1, 'dc': 1})\n            elif color == 3: # Green\n                particles.append({'r': r, 'c': c, 'color': 3, 'dr': 1, 'dc': -1})\n\n    # Calculate the number of simulation steps\n    num_steps = max(H, W)\n\n    # Run the simulation loop\n    for step in range(num_steps):\n        # Dictionary to track landings in the current step: {(r, c): [list_of_colors]}\n        landings = {}\n        # List to store next state for each particle\n        next_states = []\n\n        # --- Prediction and Bounce Phase ---\n        for i, p in enumerate(particles):\n            # Record current position for landing calculation\n            current_pos = (p['r'], p['c'])\n            landings.setdefault(current_pos, []).append(p['color'])\n\n            # Calculate next raw position\n            next_r = p['r'] + p['dr']\n            next_c = p['c'] + p['dc']\n            \n            # Store current velocity for potential bounce update\n            next_dr = p['dr']\n            next_dc = p['dc']\n\n            # Check for bounces and update position/velocity accordingly\n            bounced = False\n            # Vertical bounce\n            if next_r < 0:\n                next_r = 0\n                next_dr = 1\n                bounced = True\n            elif next_r >= H:\n                next_r = H - 1\n                next_dr = -1\n                bounced = True\n                \n            # Horizontal bounce\n            if next_c < 0:\n                next_c = 0\n                next_dc = 1\n                bounced = True\n            elif next_c >= W:\n                next_c = W - 1\n                next_dc = -1\n                bounced = True\n\n            # Store the calculated next state\n            next_states.append({'next_r': next_r, 'next_c': next_c, 'next_dr': next_dr, 'next_dc': next_dc})\n\n        # --- Update Grid Phase ---\n        for (r, c), colors_landed in landings.items():\n            unique_colors = set(colors_landed)\n            \n            # Determine the color to paint based on priority\n            paint_color = 0\n            if 8 in unique_colors and 3 in unique_colors:\n                paint_color = 6  # Magenta for Azure-Green collision\n            elif 8 in unique_colors:\n                paint_color = 8  # Azure has priority\n            elif 3 in unique_colors:\n                paint_color = 3  # Green if no Azure\n                \n            # Update the output grid if a color should be painted\n            if paint_color != 0:\n                output_grid[r, c] = paint_color\n\n        # --- Update Particle State Phase ---\n        for i, p in enumerate(particles):\n            p['r'] = next_states[i]['next_r']\n            p['c'] = next_states[i]['next_c']\n            p['dr'] = next_states[i]['next_dr']\n            p['dc'] = next_states[i]['next_dc']\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 15353,
    "candidates_token_count": 1090,
    "total_token_count": 16443,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.091806,
  "retries": null
}