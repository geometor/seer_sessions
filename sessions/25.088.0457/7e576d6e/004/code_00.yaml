task_description: Find a path between two points in a grid.
objects:
  - object: grid
    properties:
      - type: 2D array of integers (colors)
      - size: variable (up to 30x30)
  - object: pixel
    properties:
      - type: cell in the grid
      - value: integer 0-9 (color)
  - object: background
    identified_by: most frequent color in the input grid
    properties:
      - type: color (integer)
      - role: defines the traversable area for the path
  - object: endpoint_pair
    identified_by: two pixels of the same color, where that color appears exactly twice in the grid (excluding the background color)
    properties:
      - type: color (integer)
      - role: defines the start and end of the path
      - count: 2
  - object: obstacle
    identified_by: any pixel whose color is not the background color and not the endpoint color
    properties:
      - type: color (integer)
      - role: defines non-traversable areas
  - object: path
    properties:
      - type: sequence of connected pixels
      - constraints:
          - connects the endpoint_pair
          - composed only of pixels that were originally background pixels (except for the start and end points)
          - connectivity: horizontal and vertical adjacency only (4-connectivity)
          - optimality: shortest possible path
actions:
  - action: identify_components
    inputs: input_grid
    outputs: background_color, endpoint_color, endpoint_coordinates, obstacle_colors
     Psteps:
        - Count color frequencies.
        - Identify the most frequent color as background.
        - Find a color that appears exactly twice (must not be the background color); identify these two pixels as endpoints and their color as endpoint_color.
        - Identify all other colors as obstacles.
        - Handle ambiguities (e.g., multiple colors appearing twice) or missing components.
  - action: find_shortest_path
    inputs: input_grid, start_endpoint, end_endpoint, background_color, obstacle_colors
    outputs: list_of_path_coordinates or None
    algorithm: Breadth-First Search (BFS)
    constraints:
        - Move only horizontally or vertically.
        - Move only onto cells matching the background_color in the original grid.
        - Target is the end_endpoint.
  - action: draw_path
    inputs: input_grid, path_coordinates, endpoint_color
    outputs: output_grid
    steps:
        - Create a copy of the input_grid.
        - If a path is found:
            - For each coordinate in the path (excluding the start and end coordinates):
                - Set the color of the corresponding pixel in the output_grid copy to the endpoint_color.
        - Return the modified grid copy.
