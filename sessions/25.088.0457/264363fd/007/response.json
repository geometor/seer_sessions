{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransformation Rule:\n1.  Identify the frame color (gray, 5) and the inner color (blue, 1).\n2.  Find the lowest row index (`max_r_inner`) containing the inner color (blue, 1).\n3.  Find the highest row index (`min_r_frame`) containing the frame color (gray, 5).\n4.  Copy the input grid to create the output grid.\n5.  Duplicate the row `max_r_inner` from the input grid to row `max_r_inner + 1` in the output grid.\n6.  Duplicate the row `min_r_frame` from the input grid to row `min_r_frame - 1` in the output grid.\n\"\"\"\n\ndef find_first_row_with_color(grid, color, search_from_top=True):\n    \"\"\"\n    Finds the index of the first row containing the specified color.\n    Searches from top to bottom if search_from_top is True, otherwise bottom to top.\n    Returns -1 if the color is not found.\n    \"\"\"\n    rows, _ = grid.shape\n    if search_from_top:\n        for r in range(rows):\n            if color in grid[r, :]:\n                return r\n    else:\n        for r in range(rows - 1, -1, -1):\n            if color in grid[r, :]:\n                return r\n    return -1 # Color not found in any row\n\ndef transform(input_grid_list):\n    \"\"\"\n    Applies the transformation: duplicates the lowest row containing the inner\n    color (1) downwards by one, and duplicates the topmost row containing the\n    frame color (5) upwards by one.\n    \"\"\"\n    input_grid = np.array(input_grid_list)\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Define the colors of interest\n    frame_color = 5 # gray\n    inner_color = 1 # blue\n\n    # Find the lowest row index containing the inner color (search from bottom)\n    max_r_inner = find_first_row_with_color(input_grid, inner_color, search_from_top=False)\n\n    # Find the highest row index containing the frame color (search from top)\n    min_r_frame = find_first_row_with_color(input_grid, frame_color, search_from_top=True)\n\n    # Apply the duplication if the rows are found and within bounds\n    # Check if the target rows for duplication are valid indices\n    if max_r_inner != -1 and (max_r_inner + 1) < rows:\n        # Copy the lowest inner row downwards\n        output_grid[max_r_inner + 1, :] = input_grid[max_r_inner, :]\n\n    if min_r_frame != -1 and (min_r_frame - 1) >= 0:\n        # Copy the topmost frame row upwards\n        # Important: Use the original input_grid for the source row,\n        # in case the downwards copy overwrote part of the original frame row\n        # if max_r_inner == min_r_frame - 1.\n        output_grid[min_r_frame - 1, :] = input_grid[min_r_frame, :]\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 15896,
    "candidates_token_count": 788,
    "total_token_count": 16684,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.00513,
  "retries": null
}