task_type: pattern_tiling
input_elements:
  - element: solid_prototypes
    description: Solid 2x2 squares of a specific color. Define color mappings.
    properties:
      - color: C (variable)
      - size: 2x2
  - element: hollow_prototypes
    description: Hollow squares (border of one color, white interior). Define output block size.
    properties:
      - size: NxN (N varies per task, e.g., 3 or 5)
      - structure: hollow
  - element: template_grid
    description: A rectangular grid of colors corresponding to solid prototype colors. Defines the layout of the output.
    properties:
      - dimensions: HxW (variable)
      - cell_colors: Match colors of solid_prototypes

transformation_rules:
  - rule: determine_output_block_size
    input: hollow_prototypes
    output_property: N (size dimension)
    logic: N is the dimension of the hollow squares (e.g., if 3x3, N=3).
  - rule: define_color_mappings
    input: solid_prototypes
    output_property: color_map (map from input color C to output block)
    logic: Each solid prototype color C maps to a solid NxN block of color C, where N is determined by the hollow_prototypes.
  - rule: construct_output_grid
    inputs:
      - template_grid (H x W)
      - color_map
      - N (output block size)
    output: final_output_grid
    logic:
      1. Create an empty output grid of size (H * N) x (W * N).
      2. Iterate through template_grid at row `r`, column `c` (0 <= r < H, 0 <= c < W).
      3. Get template color K = template_grid[r][c].
      4. Get the corresponding NxN output block from color_map[K].
      5. Place this NxN block into the output grid starting at position (r * N, c * N).

output_elements:
  - element: tiled_grid
    description: The final output grid constructed by tiling NxN blocks.
    properties:
      - dimensions: (H * N) x (W * N)
      - structure: Composed of NxN blocks arranged according to the template_grid.
      - block_type: Solid NxN squares.
      - block_colors: Determined by template_grid colors and solid_prototype mappings.