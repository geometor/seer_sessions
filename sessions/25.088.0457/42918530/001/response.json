{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport collections\n\n\"\"\"\nThe transformation identifies 5x5 squares based on their single-pixel non-white borders. \nSquares are grouped by their border color. Within each color group, if there is at least \none square with a non-white pattern in its 3x3 inner area (a 'source pattern'), this pattern \nis copied into the 3x3 inner area of all other squares in the same color group whose \ninner areas are initially all white ('empty'). Squares that already have a pattern, or \nsquares belonging to a color group without any patterned squares, remain unchanged. \nThe background also remains unchanged.\n\"\"\"\n\ndef _find_squares(grid):\n    \"\"\"\n    Finds all 5x5 squares in the grid based on their border.\n\n    Args:\n        grid (np.ndarray): The input grid.\n\n    Returns:\n        list: A list of dictionaries, each containing:\n              'top_left': (row, col) tuple of the top-left corner.\n              'color': The border color.\n              'inner_area': A 3x3 numpy array of the inner area.\n    \"\"\"\n    squares = []\n    height, width = grid.shape\n    for r in range(height - 4):\n        for c in range(width - 4):\n            color = grid[r, c]\n            # Potential top-left corner must be non-white\n            if color == 0:\n                continue\n\n            is_square = True\n            # Check corners\n            if not (grid[r+4, c] == color and grid[r, c+4] == color and grid[r+4, c+4] == color):\n                is_square = False\n            \n            # Check top and bottom border\n            if is_square:\n                for i in range(1, 4):\n                    if not (grid[r, c+i] == color and grid[r+4, c+i] == color):\n                        is_square = False\n                        break\n            \n            # Check left and right border\n            if is_square:\n                 for i in range(1, 4):\n                    if not (grid[r+i, c] == color and grid[r+i, c+4] == color):\n                        is_square = False\n                        break\n\n            # Check inner area is not the border color (unless it's part of a pattern)\n            # More importantly, check if the *immediate* inner border is white, to distinguish from solid blocks\n            # A simpler check might be sufficient given the structure: just confirm the border integrity.\n            # Let's assume the structure implies the inside isn't the same as the border unless patterned.\n\n            if is_square:\n                # Extract inner 3x3 area\n                inner_area = grid[r+1:r+4, c+1:c+4]\n                squares.append({\n                    'top_left': (r, c),\n                    'color': color,\n                    'inner_area': inner_area\n                })\n                # Optional: Skip ahead if a square is found to avoid redundant checks?\n                # No, overlapping squares aren't expected based on examples.\n\n    return squares\n\ndef _is_empty(inner_area):\n    \"\"\"Checks if a 3x3 inner area is all white (0).\"\"\"\n    return np.all(inner_area == 0)\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the pattern propagation transformation to the input grid.\n\n    Args:\n        input_grid (list of lists or np.ndarray): The input grid.\n\n    Returns:\n        np.ndarray: The transformed grid.\n    \"\"\"\n    input_grid_np = np.array(input_grid, dtype=int)\n    output_grid = input_grid_np.copy()\n    \n    # 1. Find all 5x5 squares\n    found_squares = _find_squares(input_grid_np)\n\n    # 2. Group squares by border color\n    color_groups = collections.defaultdict(list)\n    for square in found_squares:\n        color_groups[square['color']].append(square)\n\n    # 3. Process each color group\n    for color, squares_in_group in color_groups.items():\n        source_pattern = None\n        \n        # 3a. Find the source pattern for this color\n        for square in squares_in_group:\n            if not _is_empty(square['inner_area']):\n                source_pattern = square['inner_area']\n                break # Assume only one source pattern type per color group\n\n        # 3b. If a source pattern exists, apply it to empty squares\n        if source_pattern is not None:\n            for square in squares_in_group:\n                if _is_empty(square['inner_area']):\n                    r, c = square['top_left']\n                    # Apply the pattern to the output grid\n                    output_grid[r+1:r+4, c+1:c+4] = source_pattern\n\n    return output_grid.tolist() # Return as list of lists as per ARC standard\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8077,
    "candidates_token_count": 1168,
    "total_token_count": 9245,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 17.876719,
  "retries": null
}