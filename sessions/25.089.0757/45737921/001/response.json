{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentify distinct objects in the input grid. An object is defined as a \ncontiguous group of non-background (non-zero) pixels, using 8-way adjacency \n(sides and diagonals). For each object found, determine the unique non-background \ncolors present within it. If an object consists of exactly two distinct \nnon-background colors (Color A and Color B), swap these colors within that \nobject in the output grid: all pixels of Color A become Color B, and all pixels \nof Color B become Color A. Objects with fewer or more than two distinct \nnon-background colors, as well as the background pixels (color 0), remain \nunchanged. The output grid has the same dimensions as the input grid.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by swapping the two constituent colors within each \n    distinct multi-colored object.\n\n    Args:\n        input_grid (list[list[int]]): A 2D list representing the input grid.\n\n    Returns:\n        list[list[int]]: A 2D list representing the transformed output grid.\n    \"\"\"\n    # Convert input list of lists to a NumPy array for efficient processing\n    input_grid_np = np.array(input_grid, dtype=int)\n    # Initialize the output grid as a copy of the input. This ensures that\n    # background pixels and objects not meeting the criteria remain unchanged.\n    output_grid_np = np.copy(input_grid_np)\n    # Get grid dimensions\n    height, width = input_grid_np.shape\n    # Keep track of visited cells to ensure each object is processed only once\n    visited = np.zeros_like(input_grid_np, dtype=bool)\n\n    # Iterate through each cell of the grid to find starting points of objects\n    for r in range(height):\n        for c in range(width):\n            # Check if the cell is non-background and hasn't been visited yet\n            if input_grid_np[r, c] != 0 and not visited[r, c]:\n                # Start of a new potential object, initiate Breadth-First Search (BFS)\n                object_coords = []  # Store coordinates of pixels in the current object\n                object_colors = set()  # Store unique non-background colors in the object\n                q = deque([(r, c)]) # Queue for BFS\n                visited[r, c] = True # Mark starting cell as visited\n\n                # Perform BFS to find all connected non-background pixels\n                while q:\n                    curr_r, curr_c = q.popleft()\n\n                    # Record the coordinate and color of the current cell\n                    object_coords.append((curr_r, curr_c))\n                    object_colors.add(input_grid_np[curr_r, curr_c])\n\n                    # Explore 8 neighbors (horizontal, vertical, and diagonal)\n                    for dr in [-1, 0, 1]:\n                        for dc in [-1, 0, 1]:\n                            if dr == 0 and dc == 0:\n                                continue # Skip the cell itself\n\n                            nr, nc = curr_r + dr, curr_c + dc\n\n                            # Check if the neighbor is within grid bounds\n                            if 0 <= nr < height and 0 <= nc < width:\n                                # Check if neighbor is non-background and not visited\n                                if input_grid_np[nr, nc] != 0 and not visited[nr, nc]:\n                                    visited[nr, nc] = True # Mark neighbor as visited\n                                    q.append((nr, nc)) # Add neighbor to the queue\n\n                # --- Object Processing ---\n                # After the BFS completes, analyze the identified object\n                # Check if the object consists of exactly two distinct non-background colors\n                if len(object_colors) == 2:\n                    # Get the two colors found in the object\n                    color1, color2 = list(object_colors)\n                    \n                    # Iterate through all coordinates belonging to this object\n                    # and apply the color swap directly onto the output grid\n                    for obj_r, obj_c in object_coords:\n                        if input_grid_np[obj_r, obj_c] == color1:\n                            output_grid_np[obj_r, obj_c] = color2\n                        elif input_grid_np[obj_r, obj_c] == color2:\n                            output_grid_np[obj_r, obj_c] = color1\n                # Else (object has 1 color, or more than 2 colors): \n                # No action needed, as output_grid_np already holds the original colors.\n\n    # Convert the final NumPy array back to a list of lists format\n    return output_grid_np.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3101,
    "candidates_token_count": 1085,
    "total_token_count": 4186,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 27.209698,
  "retries": null
}