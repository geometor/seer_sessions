{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nTransforms an input grid based on the adjacency of connected Orange (7) pixel components to Red (2) pixels.\n\n1.  Identifies connected components of Orange (7) pixels using 4-way adjacency (up, down, left, right).\n2.  For each Orange component:\n    a.  Checks if any pixel within the component is 4-way adjacent to any Red (2) pixel in the input grid.\n    b.  If adjacency is found, all pixels of that component are colored Green (3) in the output grid.\n    c.  If no adjacency is found, all pixels of that component are colored Gray (5) in the output grid.\n3.  Red (2) pixels remain unchanged in their original positions.\n4.  The output grid has the same dimensions as the input grid.\n\"\"\"\n\ndef find_connected_components(grid, target_color):\n    \"\"\"\n    Finds all connected components of a target color in a grid using 4-way adjacency.\n\n    Args:\n        grid (np.ndarray): The input grid.\n        target_color (int): The color of the pixels to form components from.\n\n    Returns:\n        list: A list where each element is a list of (row, col) tuples representing a connected component.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    components = []\n\n    for r in range(rows):\n        for c in range(cols):\n            # If it's the target color and not yet visited, start a BFS\n            if grid[r, c] == target_color and not visited[r, c]:\n                component = []\n                q = deque([(r, c)])\n                visited[r, c] = True\n\n                while q:\n                    row, col = q.popleft()\n                    component.append((row, col))\n\n                    # Check 4-way neighbors\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        # Check bounds, target color, and visited status\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] == target_color and not visited[nr, nc]:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n                \n                if component:\n                    components.append(component)\n    return components\n\ndef is_adjacent_to_color(grid, component_pixels, check_color):\n    \"\"\"\n    Checks if any pixel in a component is adjacent (4-way) to a pixel of a specific color.\n\n    Args:\n        grid (np.ndarray): The input grid.\n        component_pixels (list): List of (row, col) tuples for the component.\n        check_color (int): The color to check for adjacency.\n\n    Returns:\n        bool: True if any component pixel is adjacent to check_color, False otherwise.\n    \"\"\"\n    rows, cols = grid.shape\n    for r, c in component_pixels:\n        # Check 4-way neighbors\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n            # Check bounds and if the neighbor has the check_color\n            if 0 <= nr < rows and 0 <= nc < cols and grid[nr, nc] == check_color:\n                return True\n    return False\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid (list of lists): The input grid represented as a list of lists.\n\n    Returns:\n        list of lists: The transformed output grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    \n    # Initialize output grid as a copy of the input\n    output_grid = np.copy(input_np)\n    \n    # Define colors\n    orange_color = 7\n    red_color = 2\n    green_color = 3\n    gray_color = 5\n\n    # Find all connected components of Orange pixels\n    orange_components = find_connected_components(input_np, orange_color)\n\n    # Process each Orange component\n    for component in orange_components:\n        # Check if the component is adjacent to any Red pixel\n        adjacent_to_red = is_adjacent_to_color(input_np, component, red_color)\n\n        # Determine the new color for this component\n        new_color = green_color if adjacent_to_red else gray_color\n\n        # Update the output grid for all pixels in this component\n        for r, c in component:\n            output_grid[r, c] = new_color\n            \n    # Red pixels inherently remain unchanged as they are copied initially \n    # and not part of the orange components being modified.\n\n    # Convert back to list of lists for the expected output format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2706,
    "candidates_token_count": 1188,
    "total_token_count": 3894,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 17.723348,
  "retries": null
}