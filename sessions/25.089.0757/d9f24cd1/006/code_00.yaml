grid_properties:
  - dimensions: height and width (variable, up to 30x30)
  - background_color: white (0)

objects:
  - type: pixel
    properties:
      - color: integer 0-9 (white, blue, red, green, yellow, gray, magenta, orange, azure, maroon)
      - position: (row, column)
  - type: column
    properties:
      - index: integer from 0 to width-1
      - contains_red: boolean (true if any pixel in the column is red=2)
      - contains_gray: boolean (true if any pixel in the column is gray=5)

actions:
  - initialize_output: Create a new grid with the same dimensions as the input, filled with white (0).
  - find_red_columns: Identify all column indices 'c' in the input grid that contain at least one red pixel (2).
  - find_gray_pixels: Identify the (row, column) coordinates of all gray pixels (5) in the input grid.
  - determine_target_red_columns:
      For each input column 'c' identified as containing red:
        Check if column 'c' also contains any gray pixel (5).
        If yes (contains red AND gray): Add column index 'c+1' to the set of target red columns (if 'c+1' is within grid bounds).
        If no (contains red ONLY): Add column index 'c' to the set of target red columns.
  - fill_red_columns: For each column index in the set of target red columns, fill the entire corresponding column in the output grid with red (2).
  - place_gray_pixels: For each gray pixel identified in the input grid at (r, c), set the pixel at (r, c) in the output grid to gray (5), overwriting any existing color.

final_state: The output grid after applying fill_red_columns and place_gray_pixels.