{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nTransforms an input grid based on row classification and a derived pattern template.\n\n1.  **Identify Background Color:** Assume gray (7) is the background.\n2.  **Identify Fill Rows and Colors:** Iterate through input rows. A row is a \"fill row\" if any single non-background color appears 2+ times. Store the row index and the specific color causing the fill (\"fill color\"). Other rows are implicitly \"pattern rows\" for output construction.\n3.  **Derive Pattern Template:** Initialize a template row (width of grid) with the background color. Iterate through every input pixel (r, c). If the pixel's color is not background AND (the pixel's row 'r' is not a fill row OR the pixel's color is not the fill color for row 'r'), update the template row at column 'c' with the pixel's color.\n4.  **Construct Output Grid:** Create an output grid. For each row index 'r': if 'r' corresponds to a fill row, fill the output row with that row's fill color; otherwise, copy the derived pattern template into the output row.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the row-based fill/pattern transformation.\n\n    Args:\n        input_grid (list[list[int]]): A 2D list representing the input grid.\n\n    Returns:\n        list[list[int]]: A 2D list representing the transformed output grid.\n    \"\"\"\n    input_grid_np = np.array(input_grid, dtype=int)\n    height, width = input_grid_np.shape\n    output_grid = np.zeros_like(input_grid_np)\n\n    # --- Step 1: Identify Background Color ---\n    background_color = 7 # Assume gray based on examples\n\n    # --- Step 2: Identify Fill Rows and Fill Colors ---\n    fill_info = {}  # {row_index: fill_color} for fill rows\n\n    for r in range(height):\n        row = input_grid_np[r, :]\n        non_background_pixels = row[row != background_color]\n\n        if len(non_background_pixels) > 0:\n            color_counts = Counter(non_background_pixels)\n            for color, count in color_counts.items():\n                if count >= 2:\n                    # Found a fill row\n                    fill_info[r] = color\n                    # Assume only one color triggers fill per row based on examples\n                    break \n\n    # --- Step 3: Derive the Pattern Template ---\n    pattern_template_row = np.full(width, background_color, dtype=int)\n\n    for r in range(height):\n        for c in range(width):\n            pixel_color = input_grid_np[r, c]\n\n            # Condition 1: Is it background? If yes, ignore.\n            if pixel_color == background_color:\n                continue\n\n            # Condition 2: Is it the fill color for this specific fill row?\n            is_fill_pixel_for_this_row = False\n            if r in fill_info and pixel_color == fill_info[r]:\n                is_fill_pixel_for_this_row = True\n\n            # If not background and not the fill color for its row, use it for the template\n            if not is_fill_pixel_for_this_row:\n                pattern_template_row[c] = pixel_color\n\n    # --- Step 4: Construct the Output Grid ---\n    for r in range(height):\n        if r in fill_info:\n            # This is a fill row, fill with its specific fill color\n            output_grid[r, :] = fill_info[r]\n        else:\n            # This is a pattern row, copy the derived template\n            output_grid[r, :] = pattern_template_row\n\n    # Convert back to list of lists for the expected output format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 11330,
    "candidates_token_count": 906,
    "total_token_count": 12236,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.300082,
  "retries": null
}