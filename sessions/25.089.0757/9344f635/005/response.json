{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nTransforms an input grid row by row based on whether a row contains repeated colors or contributes to a global pattern template derived only from non-repeated rows.\n\n1.  **Identify Background:** Determine the background color (assumed to be gray/7).\n2.  **Classify Rows & Identify Fill Colors:** Iterate through each input row. Count non-background colors. If any non-background color appears >= 2 times, classify the row as \"fill\" and store the repeated color. Otherwise, classify it as \"pattern\". Keep track of which row indices belong to pattern rows.\n3.  **Derive Pattern Template:** Create a template row (width of the grid) filled with the background color. Iterate through *only* the rows previously classified as \"pattern\". For each non-background pixel in these pattern rows, update the template row at the corresponding column with that pixel's color.\n4.  **Construct Output Grid:** Create an output grid of the same dimensions. Iterate through the rows: if the input row was \"fill\", fill the output row with the stored fill color; if the input row was \"pattern\", copy the derived pattern template row into the output row.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the row-based fill/pattern transformation.\n\n    Args:\n        input_grid (list[list[int]]): A 2D list representing the input grid.\n\n    Returns:\n        list[list[int]]: A 2D list representing the transformed output grid.\n    \"\"\"\n    input_grid_np = np.array(input_grid, dtype=int)\n    height, width = input_grid_np.shape\n    output_grid = np.zeros_like(input_grid_np)\n\n    # --- Step 1: Identify Background ---\n    # Assume gray (7) based on consistent appearance in examples.\n    # Dynamic determination could be added, but requires careful handling (e.g., Ex3).\n    background_color = 7\n\n    # --- Step 2: Classify Rows & Identify Fill Colors ---\n    row_types = {}  # {row_index: \"fill\" or \"pattern\"}\n    fill_colors = {}  # {row_index: fill_color} for fill rows\n    pattern_row_indices = [] # List of indices for pattern rows\n\n    for r in range(height):\n        row = input_grid_np[r, :]\n        non_background_pixels = row[row != background_color]\n\n        is_fill_row = False\n        current_fill_color = None\n\n        if len(non_background_pixels) > 0:\n            color_counts = Counter(non_background_pixels)\n            for color, count in color_counts.items():\n                if count >= 2:\n                    is_fill_row = True\n                    current_fill_color = color\n                    break # Assume only one color triggers fill per row (consistent with examples)\n\n        # Store classification\n        if is_fill_row:\n            row_types[r] = \"fill\"\n            fill_colors[r] = current_fill_color\n        else:\n            row_types[r] = \"pattern\"\n            pattern_row_indices.append(r)\n\n    # --- Step 3: Derive Pattern Template ---\n    pattern_template_row = np.full(width, background_color, dtype=int)\n    pattern_pixels_map = {} # Store {col_index: color} from pattern rows\n\n    # Collect pattern pixels only from rows marked as \"pattern\"\n    for r in pattern_row_indices:\n        row = input_grid_np[r, :]\n        for c in range(width):\n            pixel_color = row[c]\n            if pixel_color != background_color:\n                # Overwrite if multiple pattern rows have pixel in same column\n                # Examples suggest this doesn't lead to ambiguity or requires complex merging\n                pattern_pixels_map[c] = pixel_color\n\n    # Populate the template row from the collected pattern pixels\n    for c, color in pattern_pixels_map.items():\n        pattern_template_row[c] = color\n\n    # --- Step 4: Construct Output Grid ---\n    for r in range(height):\n        if row_types[r] == \"fill\":\n            # Fill the output row with the identified fill color\n            output_grid[r, :] = fill_colors[r]\n        elif row_types[r] == \"pattern\":\n            # Copy the derived pattern template row\n            output_grid[r, :] = pattern_template_row\n        else:\n             # This case should theoretically not be reached if all rows are classified\n             # As a fallback, maybe copy input or fill with background?\n             # Let's fill with background as a safe default if classification failed.\n             output_grid[r, :] = background_color\n\n\n    # Convert back to list of lists for the expected output format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 13470,
    "candidates_token_count": 1122,
    "total_token_count": 14592,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.344935,
  "retries": null
}