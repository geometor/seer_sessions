{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nTransforms the input grid based on row-level analysis.\n\n1. Identify the background color (assumed to be 7/gray).\n2. Analyze each row of the input grid:\n   - Count non-background colors in the row.\n   - If any non-background color appears 2 or more times, mark the row as a \"fill row\" with that color.\n   - Otherwise, mark the row as a \"pattern row\".\n3. Determine the pattern template:\n   - Collect all non-background pixels (color and column index) from all \"pattern rows\".\n   - Create a template row (width of the grid) filled with the background color.\n   - Place the collected unique pattern pixel colors into their corresponding columns in the template row.\n4. Construct the output grid:\n   - Initialize an output grid of the same dimensions as the input.\n   - For rows marked as \"fill rows\", fill the corresponding output row entirely with the designated fill color.\n   - For rows marked as \"pattern rows\", copy the pattern template row into the corresponding output row.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid (np.ndarray): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.ndarray: A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    input_grid = np.array(input_grid, dtype=int)\n    height, width = input_grid.shape\n    output_grid = np.zeros_like(input_grid)\n    \n    # --- Configuration ---\n    background_color = 7\n\n    # --- Step 1 & 2: Analyze rows and determine action type ---\n    row_info = {} # Stores type ('fill' or 'pattern') and fill color for each row\n    pattern_pixels = [] # Stores (color, col_index) for pixels in pattern rows\n\n    for r in range(height):\n        row = input_grid[r, :]\n        non_background_pixels = row[row != background_color]\n        \n        if len(non_background_pixels) == 0:\n            # If the row is entirely background, treat it as a pattern row\n            row_info[r] = {'type': 'pattern', 'fill_color': None}\n            continue # No pattern pixels to collect from this row itself\n\n        color_counts = Counter(non_background_pixels)\n        \n        fill_color_found = None\n        for color, count in color_counts.items():\n            if count >= 2:\n                fill_color_found = color\n                break # Assume only one color triggers fill per row based on examples\n        \n        if fill_color_found is not None:\n            row_info[r] = {'type': 'fill', 'fill_color': fill_color_found}\n        else:\n            row_info[r] = {'type': 'pattern', 'fill_color': None}\n            # Collect pixels for the pattern template from this pattern row\n            for c in range(width):\n                pixel_color = input_grid[r, c]\n                if pixel_color != background_color:\n                    pattern_pixels.append((pixel_color, c))\n\n    # --- Step 3: Create the pattern template row ---\n    pattern_template_row = np.full(width, background_color, dtype=int)\n    \n    # Use a set to keep track of columns already filled to handle multiple pixels in the same column\n    # Although the logic implies unique locations based on examples, this makes it robust.\n    # Prioritize based on iteration order if duplicates exist (not explicitly defined, but likely sufficient).\n    filled_cols = set() \n    for color, col_index in pattern_pixels:\n         # Only fill if not already filled by a previous pattern pixel in the same column\n         # Note: The problem description doesn't specify precedence if multiple pattern\n         # pixels map to the same column. We use the first encountered.\n         # Alternatively, could collect all possibilities and decide, but sticking to simpler interpretation first.\n         if col_index not in filled_cols:\n              pattern_template_row[col_index] = color\n              filled_cols.add(col_index)\n\n\n    # --- Step 4: Construct the output grid ---\n    for r in range(height):\n        info = row_info[r]\n        if info['type'] == 'fill':\n            output_grid[r, :] = info['fill_color']\n        elif info['type'] == 'pattern':\n            output_grid[r, :] = pattern_template_row\n        else:\n             # Fallback or error case - should not happen with current logic\n             # Fill with background just in case\n             output_grid[r, :] = background_color\n\n\n    return output_grid.tolist() # Convert back to list of lists if required by the framework\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3876,
    "candidates_token_count": 1119,
    "total_token_count": 4995,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.427173,
  "retries": null
}