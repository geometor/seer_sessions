{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nApply gravity to non-background pixels within each column of the grid.\nNon-background pixels fall downwards until they encounter another \nnon-background pixel below them or reach the bottom row of the grid.\nThe original positions of the fallen pixels become the background color (white, 0).\nThe process happens independently for each column. The bottom row acts as a floor;\nits initial state effectively determines the lowest point pixels can fall to in \neach column, and pixels within the bottom row itself do not move.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Applies gravity to non-background pixels in a grid.\n\n    Args:\n        input_grid: A list of lists representing the input grid.\n\n    Returns:\n        A list of lists representing the transformed grid.\n    \"\"\"\n    # Convert input grid to a NumPy array for easier manipulation\n    input_array = np.array(input_grid, dtype=int)\n    height, width = input_array.shape\n    \n    # Initialize the output grid with the background color (0)\n    output_array = np.zeros_like(input_array)\n    \n    # Process each column independently\n    for c in range(width):\n        # 'landing_row' tracks the next available row index from the bottom where a pixel can land\n        landing_row = height - 1 \n        \n        # Iterate through the rows of the input column from bottom to top\n        for r in range(height - 1, -1, -1):\n            # Get the pixel color from the input grid\n            pixel_color = input_array[r, c]\n            \n            # If the pixel is not the background color\n            if pixel_color != 0:\n                # Place this pixel at the current landing spot in the output grid\n                output_array[landing_row, c] = pixel_color\n                # Move the landing spot one row up for the next pixel in this column\n                landing_row -= 1\n                \n    # Convert the output NumPy array back to a list of lists\n    output_grid = output_array.tolist()\n    \n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3056,
    "candidates_token_count": 483,
    "total_token_count": 3539,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.919602,
  "retries": null
}