{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nApplies a gravity effect to non-background pixels within each column of the grid independently.\nNon-background pixels (colors 1-9) fall downwards within their column until they either \nreach the bottom row of the grid or land on top of another non-background pixel.\nThe original position of a pixel that falls is replaced with the background color (white, 0).\nPixels in the bottom row do not move. The process is applied column by column, and \nwithin each column, pixels are processed from the second-to-last row upwards to ensure \nlower pixels settle before pixels above them attempt to fall.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Applies gravity to non-background pixels in a grid, making them fall downwards\n    within their column until they hit another pixel or the bottom of the grid.\n\n    Args:\n        input_grid: A list of lists representing the input grid.\n\n    Returns:\n        A list of lists representing the transformed grid after gravity is applied.\n    \"\"\"\n    # Convert input grid to a NumPy array for efficient manipulation\n    output_array = np.array(input_grid, dtype=int)\n    height, width = output_array.shape\n\n    # Process each column independently\n    for c in range(width):\n        # Iterate through the rows of the current column from bottom-up, \n        # starting from the second-to-last row.\n        # The bottom row (height - 1) acts as a floor and its pixels don't move upwards.\n        for r in range(height - 2, -1, -1):\n            # Get the color of the current pixel\n            pixel_color = output_array[r, c]\n\n            # Check if the pixel is non-background (should fall)\n            if pixel_color != 0:\n                # Start checking from the row below the current pixel\n                current_r = r\n                \n                # Find the lowest possible row the pixel can fall to\n                # Keep moving down as long as the next row is within bounds and is background (0)\n                while current_r + 1 < height and output_array[current_r + 1, c] == 0:\n                    current_r += 1\n                \n                # If the pixel moved (current_r is different from the original row r)\n                if current_r != r:\n                    # Move the pixel to the new position\n                    output_array[current_r, c] = pixel_color\n                    # Set the original position to background\n                    output_array[r, c] = 0\n\n    # Convert the output NumPy array back to a list of lists\n    output_grid = output_array.tolist()\n    \n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 1774,
            "end_index": 1899,
            "uri": "https://github.com/duntik/programming-for-data",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3234,
    "candidates_token_count": 616,
    "total_token_count": 3850,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 24.840258,
  "retries": null
}