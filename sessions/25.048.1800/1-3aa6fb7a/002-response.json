{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies connected regions of color 8 (azure) in the input grid, sorts them horizontally, and changes the color of specific adjacent cells to 1 (blue).\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, color):\n    \"\"\"\n    Finds connected components of the specified color in the grid.\n    \"\"\"\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n\n    def dfs(row, col, current_object):\n        if (\n            row < 0\n            or row >= grid.shape[0]\n            or col < 0\n            or col >= grid.shape[1]\n            or visited[row, col]\n            or grid[row, col] != color\n        ):\n            return\n        visited[row, col] = True\n        current_object.append((row, col))\n        dfs(row + 1, col, current_object)\n        dfs(row - 1, col, current_object)\n        dfs(row, col + 1, current_object)\n        dfs(row, col - 1, current_object)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] == color and not visited[row, col]:\n                current_object = []\n                dfs(row, col, current_object)\n                objects.append(current_object)\n    return objects\n\ndef sort_objects(objects):\n    \"\"\"\n    Sorts objects based on their leftmost column.\n    \"\"\"\n    return sorted(objects, key=lambda obj: min(col for _, col in obj))\n\ndef get_topmost_cell(object_cells):\n    \"\"\"Returns the topmost cell (min row index) of an object.\"\"\"\n    return min(object_cells, key=lambda cell: cell[0])\n\ndef get_bottommost_cell(object_cells):\n    \"\"\"Returns the bottommost cell (max row index) of an object.\"\"\"\n    return max(object_cells, key=lambda cell: cell[0])\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the specified rule.\n    \"\"\"\n    # Initialize output grid as a copy of the input grid\n    output_grid = np.copy(input_grid)\n    \n    # Find objects of color 8\n    objects = find_objects(output_grid, 8)\n    \n    # Sort objects from left to right\n    sorted_objects = sort_objects(objects)\n    \n    # Process leftmost object\n    if sorted_objects:\n        leftmost_object = sorted_objects[0]\n        topmost_cell = get_topmost_cell(leftmost_object)\n        right_neighbor = (topmost_cell[0], topmost_cell[1] + 1)\n        if 0 <= right_neighbor[1] < output_grid.shape[1]:\n            output_grid[right_neighbor] = 1\n    \n    # Process rightmost object\n    if len(sorted_objects) >= 1:  #Corrected the condition\n        rightmost_object = sorted_objects[-1]\n        bottommost_cell = get_bottommost_cell(rightmost_object)\n        left_neighbor = (bottommost_cell[0], bottommost_cell[1] - 1)\n        if 0 <= left_neighbor[1] < output_grid.shape[1]:\n            output_grid[left_neighbor] = 1\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2361,
    "candidates_token_count": 810,
    "total_token_count": 3171,
    "cached_content_token_count": 0
  },
  "token_totals": {
    "prompt": 4030,
    "candidates": 1401,
    "total": 5431,
    "cached": 0
  },
  "timing": {
    "response_time": 0.000216,
    "total_elapsed": 22.673374,
    "response_times": [
      0.000293,
      0.000216
    ]
  },
  "response_file": "002-response.json"
}