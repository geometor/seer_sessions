{
  "response_report": [
    {
      "response_file": "001-response.json",
      "token_usage": {
        "prompt": 3809,
        "candidates": 649,
        "total": 4458,
        "cached": 0
      },
      "response_time": 10.726535
    },
    {
      "response_file": "002-response.json",
      "token_usage": {
        "prompt": 4319,
        "candidates": 652,
        "total": 4971,
        "cached": 0
      },
      "response_time": 7.92367
    },
    {
      "response_file": "003-response.json",
      "token_usage": {
        "prompt": 1902,
        "candidates": 4593,
        "total": 6495,
        "cached": 0
      },
      "response_time": 42.35571
    },
    {
      "response_file": "004-response.json",
      "token_usage": {
        "prompt": 6286,
        "candidates": 547,
        "total": 6833,
        "cached": 0
      },
      "response_time": 5.937685
    },
    {
      "response_file": "005-response.json",
      "token_usage": {
        "prompt": 1967,
        "candidates": 556,
        "total": 2523,
        "cached": 0
      },
      "response_time": 7.273274
    },
    {
      "response_file": "006-response.json",
      "token_usage": {
        "prompt": 2385,
        "candidates": 389,
        "total": 2774,
        "cached": 0
      },
      "response_time": 5.465404
    },
    {
      "response_file": "007-response.json",
      "token_usage": {
        "prompt": 1640,
        "candidates": 1106,
        "total": 2746,
        "cached": 0
      },
      "response_time": 12.644101
    },
    {
      "response_file": "008-response.json",
      "token_usage": {
        "prompt": 2543,
        "candidates": 597,
        "total": 3140,
        "cached": 0
      },
      "response_time": 6.486259
    },
    {
      "response_file": "009-response.json",
      "token_usage": {
        "prompt": 1848,
        "candidates": 5632,
        "total": 7480,
        "cached": 0
      },
      "response_time": 49.626625
    },
    {
      "response_file": "010-response.json",
      "token_usage": {
        "prompt": 7277,
        "candidates": 555,
        "total": 7832,
        "cached": 0
      },
      "response_time": 5.583691
    },
    {
      "response_file": "011-response.json",
      "token_usage": {
        "prompt": 1967,
        "candidates": 489,
        "total": 2456,
        "cached": 0
      },
      "response_time": 7.964401
    },
    {
      "response_file": "012-response.json",
      "token_usage": {
        "prompt": 2319,
        "candidates": 239,
        "total": 2558,
        "cached": 0
      },
      "response_time": 3.517281
    },
    {
      "response_file": "013-response.json",
      "token_usage": {
        "prompt": 1490,
        "candidates": 1885,
        "total": 3375,
        "cached": 0
      },
      "response_time": 22.196955
    },
    {
      "response_file": "014-response.json",
      "token_usage": {
        "prompt": 3175,
        "candidates": 296,
        "total": 3471,
        "cached": 0
      },
      "response_time": 3.12728
    },
    {
      "response_file": "015-response.json",
      "token_usage": {
        "prompt": 1548,
        "candidates": 853,
        "total": 2401,
        "cached": 0
      },
      "response_time": 11.844392
    },
    {
      "response_file": "016-response.json",
      "token_usage": {
        "prompt": 2198,
        "candidates": 667,
        "total": 2865,
        "cached": 0
      },
      "response_time": 6.679
    },
    {
      "response_file": "017-response.json",
      "token_usage": {
        "prompt": 1967,
        "candidates": 397,
        "total": 2364,
        "cached": 0
      },
      "response_time": 6.774275
    },
    {
      "response_file": "018-response.json",
      "token_usage": {
        "prompt": 2227,
        "candidates": 332,
        "total": 2559,
        "cached": 0
      },
      "response_time": 4.128992
    },
    {
      "response_file": "019-response.json",
      "token_usage": {
        "prompt": 1584,
        "candidates": 2028,
        "total": 3612,
        "cached": 0
      },
      "response_time": 23.218753
    },
    {
      "response_file": "020-response.json",
      "token_usage": {
        "prompt": 3414,
        "candidates": 344,
        "total": 3758,
        "cached": 0
      },
      "response_time": 4.1467
    },
    {
      "response_file": "021-response.json",
      "token_usage": {
        "prompt": 1596,
        "candidates": 1382,
        "total": 2978,
        "cached": 0
      },
      "response_time": 18.586882
    },
    {
      "response_file": "022-response.json",
      "token_usage": {
        "prompt": 2774,
        "candidates": 1113,
        "total": 3887,
        "cached": 0
      },
      "response_time": 10.499867
    }
  ],
  "test_report": {
    "002-py_01-train": [
      {
        "example": 1,
        "input": "2 2 2 3 0\n2 2 2 3 0\n2 2 2 3 0\n3 3 3 3 0\n0 0 0 0 0",
        "expected_output": "2 2 2 3 2 2 2 3 2 2\n2 2 2 3 2 2 2 3 2 2\n2 2 2 3 2 2 2 3 2 2\n3 3 3 3 2 2 2 3 2 2\n2 2 2 2 2 2 2 3 2 2\n2 2 2 2 2 2 2 3 2 2\n2 2 2 2 2 2 2 3 2 2\n3 3 3 3 3 3 3 3 2 2\n2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2 2",
        "transformed_output": "2 2 2 3 0 2 2 2 3 3\n2 2 2 3 0 2 2 2 3 3\n2 2 2 3 0 2 2 2 3 3\n3 3 3 3 0 3 3 3 3 3\n0 0 0 0 0 3 3 3 3 3\n2 2 2 3 0 2 2 2 3 3\n2 2 2 3 0 2 2 2 3 3\n2 2 2 3 0 2 2 2 3 3\n3 3 3 3 0 3 3 3 3 3\n0 0 0 0 0 3 3 3 3 3",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 65,
        "percent_correct": 35.0
      },
      {
        "example": 2,
        "input": "1 1 4 6 0\n1 1 4 6 0\n4 4 4 6 0\n6 6 6 6 0\n0 0 0 0 0",
        "expected_output": "1 1 4 6 1 1 4 6 1 1\n1 1 4 6 1 1 4 6 1 1\n4 4 4 6 1 1 4 6 1 1\n6 6 6 6 1 1 4 6 1 1\n1 1 1 1 1 1 4 6 1 1\n1 1 1 1 1 1 4 6 1 1\n4 4 4 4 4 4 4 6 1 1\n6 6 6 6 6 6 6 6 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1",
        "transformed_output": "1 1 4 6 0 1 1 4 6 6\n1 1 4 6 0 1 1 4 6 6\n4 4 4 6 0 4 4 4 6 6\n6 6 6 6 0 6 6 6 6 6\n0 0 0 0 0 6 6 6 6 6\n1 1 4 6 0 1 1 4 6 6\n1 1 4 6 0 1 1 4 6 6\n4 4 4 6 0 4 4 4 6 6\n6 6 6 6 0 6 6 6 6 6\n0 0 0 0 0 6 6 6 6 6",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 74,
        "percent_correct": 26.0
      },
      {
        "example": 3,
        "input": "2 3 4 1 6\n3 3 4 1 6\n4 4 4 1 6\n1 1 1 1 6\n6 6 6 6 6",
        "expected_output": "2 3 4 1 6 2 3 4 1 6\n3 3 4 1 6 2 3 4 1 6\n4 4 4 1 6 2 3 4 1 6\n1 1 1 1 6 2 3 4 1 6\n6 6 6 6 6 2 3 4 1 6\n2 2 2 2 2 2 3 4 1 6\n3 3 3 3 3 3 3 4 1 6\n4 4 4 4 4 4 4 4 1 6\n1 1 1 1 1 1 1 1 1 6\n6 6 6 6 6 6 6 6 6 6",
        "transformed_output": "2 3 4 1 6 2 3 4 1 1\n3 3 4 1 6 3 3 4 1 1\n4 4 4 1 6 4 4 4 1 1\n1 1 1 1 6 1 1 1 1 1\n6 6 6 6 6 1 1 1 1 1\n2 3 4 1 6 2 3 4 1 1\n3 3 4 1 6 3 3 4 1 1\n4 4 4 1 6 4 4 4 1 1\n1 1 1 1 6 1 1 1 1 1\n6 6 6 6 6 1 1 1 1 1",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 33,
        "percent_correct": 67.0
      }
    ],
    "003-py_02-train": [],
    "004-py_03-train": [
      {
        "example": 1,
        "input": "2 2 2 3 0\n2 2 2 3 0\n2 2 2 3 0\n3 3 3 3 0\n0 0 0 0 0",
        "expected_output": "2 2 2 3 2 2 2 3 2 2\n2 2 2 3 2 2 2 3 2 2\n2 2 2 3 2 2 2 3 2 2\n3 3 3 3 2 2 2 3 2 2\n2 2 2 2 2 2 2 3 2 2\n2 2 2 2 2 2 2 3 2 2\n2 2 2 2 2 2 2 3 2 2\n3 3 3 3 3 3 3 3 2 2\n2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2 2",
        "transformed_output": "2 2 2 3 0 2 2 2 3 0\n2 2 2 3 0 2 2 2 3 0\n2 2 2 3 0 2 2 2 3 0\n3 3 3 3 0 3 3 3 3 0\n0 0 0 0 0 0 0 0 0 0\n2 2 2 3 0 2 2 2 3 0\n2 2 2 3 0 2 2 2 3 0\n2 2 2 3 0 2 2 2 3 0\n3 3 3 3 0 3 3 3 3 0\n0 0 0 0 0 0 0 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 66,
        "percent_correct": 34.0
      },
      {
        "example": 2,
        "input": "1 1 4 6 0\n1 1 4 6 0\n4 4 4 6 0\n6 6 6 6 0\n0 0 0 0 0",
        "expected_output": "1 1 4 6 1 1 4 6 1 1\n1 1 4 6 1 1 4 6 1 1\n4 4 4 6 1 1 4 6 1 1\n6 6 6 6 1 1 4 6 1 1\n1 1 1 1 1 1 4 6 1 1\n1 1 1 1 1 1 4 6 1 1\n4 4 4 4 4 4 4 6 1 1\n6 6 6 6 6 6 6 6 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1",
        "transformed_output": "1 1 4 6 0 1 1 4 6 0\n1 1 4 6 0 1 1 4 6 0\n4 4 4 6 0 4 4 4 6 0\n6 6 6 6 0 6 6 6 6 0\n0 0 0 0 0 0 0 0 0 0\n1 1 4 6 0 1 1 4 6 0\n1 1 4 6 0 1 1 4 6 0\n4 4 4 6 0 4 4 4 6 0\n6 6 6 6 0 6 6 6 6 0\n0 0 0 0 0 0 0 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 75,
        "percent_correct": 25.0
      },
      {
        "example": 3,
        "input": "2 3 4 1 6\n3 3 4 1 6\n4 4 4 1 6\n1 1 1 1 6\n6 6 6 6 6",
        "expected_output": "2 3 4 1 6 2 3 4 1 6\n3 3 4 1 6 2 3 4 1 6\n4 4 4 1 6 2 3 4 1 6\n1 1 1 1 6 2 3 4 1 6\n6 6 6 6 6 2 3 4 1 6\n2 2 2 2 2 2 3 4 1 6\n3 3 3 3 3 3 3 4 1 6\n4 4 4 4 4 4 4 4 1 6\n1 1 1 1 1 1 1 1 1 6\n6 6 6 6 6 6 6 6 6 6",
        "transformed_output": "2 3 4 1 6 2 3 4 1 6\n3 3 4 1 6 3 3 4 1 6\n4 4 4 1 6 4 4 4 1 6\n1 1 1 1 6 1 1 1 1 6\n6 6 6 6 6 6 6 6 6 6\n2 3 4 1 6 2 3 4 1 6\n3 3 4 1 6 3 3 4 1 6\n4 4 4 1 6 4 4 4 1 6\n1 1 1 1 6 1 1 1 1 6\n6 6 6 6 6 6 6 6 6 6",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 20,
        "percent_correct": 80.0
      }
    ],
    "006-py_04-train": [
      {
        "example": 1,
        "input": "2 2 2 3 0\n2 2 2 3 0\n2 2 2 3 0\n3 3 3 3 0\n0 0 0 0 0",
        "expected_output": "2 2 2 3 2 2 2 3 2 2\n2 2 2 3 2 2 2 3 2 2\n2 2 2 3 2 2 2 3 2 2\n3 3 3 3 2 2 2 3 2 2\n2 2 2 2 2 2 2 3 2 2\n2 2 2 2 2 2 2 3 2 2\n2 2 2 2 2 2 2 3 2 2\n3 3 3 3 3 3 3 3 2 2\n2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2 2",
        "transformed_output": "2 2 2 2 2 2 3 3 2 2\n2 2 2 2 2 2 3 3 2 2\n2 2 2 2 2 2 3 3 2 2\n2 2 2 2 2 2 3 3 2 2\n2 2 2 2 2 2 3 3 2 2\n2 2 2 2 2 2 3 3 2 2\n3 3 3 3 3 3 3 3 2 2\n3 3 3 3 3 3 3 3 2 2\n2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2 2",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 20,
        "percent_correct": 80.0
      },
      {
        "example": 2,
        "input": "1 1 4 6 0\n1 1 4 6 0\n4 4 4 6 0\n6 6 6 6 0\n0 0 0 0 0",
        "expected_output": "1 1 4 6 1 1 4 6 1 1\n1 1 4 6 1 1 4 6 1 1\n4 4 4 6 1 1 4 6 1 1\n6 6 6 6 1 1 4 6 1 1\n1 1 1 1 1 1 4 6 1 1\n1 1 1 1 1 1 4 6 1 1\n4 4 4 4 4 4 4 6 1 1\n6 6 6 6 6 6 6 6 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1",
        "transformed_output": "1 1 1 1 4 4 6 6 2 2\n1 1 1 1 4 4 6 6 2 2\n1 1 1 1 4 4 6 6 2 2\n1 1 1 1 4 4 6 6 2 2\n4 4 4 4 4 4 6 6 2 2\n4 4 4 4 4 4 6 6 2 2\n6 6 6 6 6 6 6 6 2 2\n6 6 6 6 6 6 6 6 2 2\n2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2 2",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 81,
        "percent_correct": 19.0
      },
      {
        "example": 3,
        "input": "2 3 4 1 6\n3 3 4 1 6\n4 4 4 1 6\n1 1 1 1 6\n6 6 6 6 6",
        "expected_output": "2 3 4 1 6 2 3 4 1 6\n3 3 4 1 6 2 3 4 1 6\n4 4 4 1 6 2 3 4 1 6\n1 1 1 1 6 2 3 4 1 6\n6 6 6 6 6 2 3 4 1 6\n2 2 2 2 2 2 3 4 1 6\n3 3 3 3 3 3 3 4 1 6\n4 4 4 4 4 4 4 4 1 6\n1 1 1 1 1 1 1 1 1 6\n6 6 6 6 6 6 6 6 6 6",
        "transformed_output": "2 2 3 3 4 4 1 1 6 6\n2 2 3 3 4 4 1 1 6 6\n3 3 3 3 4 4 1 1 6 6\n3 3 3 3 4 4 1 1 6 6\n4 4 4 4 4 4 1 1 6 6\n4 4 4 4 4 4 1 1 6 6\n1 1 1 1 1 1 1 1 6 6\n1 1 1 1 1 1 1 1 6 6\n6 6 6 6 6 6 6 6 6 6\n6 6 6 6 6 6 6 6 6 6",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 80,
        "percent_correct": 20.0
      }
    ],
    "008-py_05-train": [
      {
        "example": 1,
        "input": "2 2 2 3 0\n2 2 2 3 0\n2 2 2 3 0\n3 3 3 3 0\n0 0 0 0 0",
        "expected_output": "2 2 2 3 2 2 2 3 2 2\n2 2 2 3 2 2 2 3 2 2\n2 2 2 3 2 2 2 3 2 2\n3 3 3 3 2 2 2 3 2 2\n2 2 2 2 2 2 2 3 2 2\n2 2 2 2 2 2 2 3 2 2\n2 2 2 2 2 2 2 3 2 2\n3 3 3 3 3 3 3 3 2 2\n2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2 2",
        "transformed_output": "2 2 2 2 2 2 3 3 0 0\n2 2 2 2 2 2 3 3 0 0\n2 2 2 2 2 2 3 3 0 0\n2 2 2 2 2 2 3 3 0 0\n2 2 2 2 2 2 3 3 0 0\n2 2 2 2 2 2 3 3 0 0\n3 3 3 3 3 3 3 3 0 0\n3 3 3 3 3 3 3 3 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 56,
        "percent_correct": 44.0
      },
      {
        "example": 2,
        "input": "1 1 4 6 0\n1 1 4 6 0\n4 4 4 6 0\n6 6 6 6 0\n0 0 0 0 0",
        "expected_output": "1 1 4 6 1 1 4 6 1 1\n1 1 4 6 1 1 4 6 1 1\n4 4 4 6 1 1 4 6 1 1\n6 6 6 6 1 1 4 6 1 1\n1 1 1 1 1 1 4 6 1 1\n1 1 1 1 1 1 4 6 1 1\n4 4 4 4 4 4 4 6 1 1\n6 6 6 6 6 6 6 6 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1",
        "transformed_output": "1 1 1 1 4 4 6 6 0 0\n1 1 1 1 4 4 6 6 0 0\n1 1 1 1 4 4 6 6 0 0\n1 1 1 1 4 4 6 6 0 0\n4 4 4 4 4 4 6 6 0 0\n4 4 4 4 4 4 6 6 0 0\n6 6 6 6 6 6 6 6 0 0\n6 6 6 6 6 6 6 6 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 81,
        "percent_correct": 19.0
      },
      {
        "example": 3,
        "input": "2 3 4 1 6\n3 3 4 1 6\n4 4 4 1 6\n1 1 1 1 6\n6 6 6 6 6",
        "expected_output": "2 3 4 1 6 2 3 4 1 6\n3 3 4 1 6 2 3 4 1 6\n4 4 4 1 6 2 3 4 1 6\n1 1 1 1 6 2 3 4 1 6\n6 6 6 6 6 2 3 4 1 6\n2 2 2 2 2 2 3 4 1 6\n3 3 3 3 3 3 3 4 1 6\n4 4 4 4 4 4 4 4 1 6\n1 1 1 1 1 1 1 1 1 6\n6 6 6 6 6 6 6 6 6 6",
        "transformed_output": "2 2 3 3 4 4 1 1 6 6\n2 2 3 3 4 4 1 1 6 6\n3 3 3 3 4 4 1 1 6 6\n3 3 3 3 4 4 1 1 6 6\n4 4 4 4 4 4 1 1 6 6\n4 4 4 4 4 4 1 1 6 6\n1 1 1 1 1 1 1 1 6 6\n1 1 1 1 1 1 1 1 6 6\n6 6 6 6 6 6 6 6 6 6\n6 6 6 6 6 6 6 6 6 6",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 80,
        "percent_correct": 20.0
      }
    ],
    "009-py_06-train": [
      {
        "example": 1,
        "input": "2 2 2 3 0\n2 2 2 3 0\n2 2 2 3 0\n3 3 3 3 0\n0 0 0 0 0",
        "expected_output": "2 2 2 3 2 2 2 3 2 2\n2 2 2 3 2 2 2 3 2 2\n2 2 2 3 2 2 2 3 2 2\n3 3 3 3 2 2 2 3 2 2\n2 2 2 2 2 2 2 3 2 2\n2 2 2 2 2 2 2 3 2 2\n2 2 2 2 2 2 2 3 2 2\n3 3 3 3 3 3 3 3 2 2\n2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2 2",
        "transformed_output": "2 2 2 2 2 2 3 3 0 0\n2 2 2 2 2 2 3 3 0 0\n2 2 2 2 2 2 3 3 0 0\n2 2 2 2 2 2 3 3 0 0\n2 2 2 2 2 2 3 3 0 0\n2 2 2 2 2 2 3 3 0 0\n3 3 3 3 3 3 3 3 0 0\n3 3 3 3 3 3 3 3 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 56,
        "percent_correct": 44.0
      },
      {
        "example": 2,
        "input": "1 1 4 6 0\n1 1 4 6 0\n4 4 4 6 0\n6 6 6 6 0\n0 0 0 0 0",
        "expected_output": "1 1 4 6 1 1 4 6 1 1\n1 1 4 6 1 1 4 6 1 1\n4 4 4 6 1 1 4 6 1 1\n6 6 6 6 1 1 4 6 1 1\n1 1 1 1 1 1 4 6 1 1\n1 1 1 1 1 1 4 6 1 1\n4 4 4 4 4 4 4 6 1 1\n6 6 6 6 6 6 6 6 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1",
        "transformed_output": "1 1 1 1 4 4 6 6 0 0\n1 1 1 1 4 4 6 6 0 0\n1 1 1 1 4 4 6 6 0 0\n1 1 1 1 4 4 6 6 0 0\n4 4 4 4 4 4 6 6 0 0\n4 4 4 4 4 4 6 6 0 0\n6 6 6 6 6 6 6 6 0 0\n6 6 6 6 6 6 6 6 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 81,
        "percent_correct": 19.0
      },
      {
        "example": 3,
        "input": "2 3 4 1 6\n3 3 4 1 6\n4 4 4 1 6\n1 1 1 1 6\n6 6 6 6 6",
        "expected_output": "2 3 4 1 6 2 3 4 1 6\n3 3 4 1 6 2 3 4 1 6\n4 4 4 1 6 2 3 4 1 6\n1 1 1 1 6 2 3 4 1 6\n6 6 6 6 6 2 3 4 1 6\n2 2 2 2 2 2 3 4 1 6\n3 3 3 3 3 3 3 4 1 6\n4 4 4 4 4 4 4 4 1 6\n1 1 1 1 1 1 1 1 1 6\n6 6 6 6 6 6 6 6 6 6",
        "transformed_output": "2 2 3 3 4 4 1 1 6 6\n2 2 3 3 4 4 1 1 6 6\n3 3 3 3 4 4 1 1 6 6\n3 3 3 3 4 4 1 1 6 6\n4 4 4 4 4 4 1 1 6 6\n4 4 4 4 4 4 1 1 6 6\n1 1 1 1 1 1 1 1 6 6\n1 1 1 1 1 1 1 1 6 6\n6 6 6 6 6 6 6 6 6 6\n6 6 6 6 6 6 6 6 6 6",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 80,
        "percent_correct": 20.0
      }
    ],
    "010-py_07-train": [
      {
        "example": 1,
        "input": "2 2 2 3 0\n2 2 2 3 0\n2 2 2 3 0\n3 3 3 3 0\n0 0 0 0 0",
        "expected_output": "2 2 2 3 2 2 2 3 2 2\n2 2 2 3 2 2 2 3 2 2\n2 2 2 3 2 2 2 3 2 2\n3 3 3 3 2 2 2 3 2 2\n2 2 2 2 2 2 2 3 2 2\n2 2 2 2 2 2 2 3 2 2\n2 2 2 2 2 2 2 3 2 2\n3 3 3 3 3 3 3 3 2 2\n2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2 2",
        "transformed_output": "2 2 2 2 2 2 3 3 0 0\n2 2 2 2 2 2 3 3 0 0\n2 2 2 2 2 2 3 3 0 0\n2 2 2 2 2 2 3 3 0 0\n2 2 2 2 2 2 3 3 0 0\n2 2 2 2 2 2 3 3 0 0\n3 3 3 3 3 3 3 3 0 0\n3 3 3 3 3 3 3 3 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 56,
        "percent_correct": 44.0
      },
      {
        "example": 2,
        "input": "1 1 4 6 0\n1 1 4 6 0\n4 4 4 6 0\n6 6 6 6 0\n0 0 0 0 0",
        "expected_output": "1 1 4 6 1 1 4 6 1 1\n1 1 4 6 1 1 4 6 1 1\n4 4 4 6 1 1 4 6 1 1\n6 6 6 6 1 1 4 6 1 1\n1 1 1 1 1 1 4 6 1 1\n1 1 1 1 1 1 4 6 1 1\n4 4 4 4 4 4 4 6 1 1\n6 6 6 6 6 6 6 6 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1",
        "transformed_output": "1 1 1 1 4 4 6 6 0 0\n1 1 1 1 4 4 6 6 0 0\n1 1 1 1 4 4 6 6 0 0\n1 1 1 1 4 4 6 6 0 0\n4 4 4 4 4 4 6 6 0 0\n4 4 4 4 4 4 6 6 0 0\n6 6 6 6 6 6 6 6 0 0\n6 6 6 6 6 6 6 6 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 81,
        "percent_correct": 19.0
      },
      {
        "example": 3,
        "input": "2 3 4 1 6\n3 3 4 1 6\n4 4 4 1 6\n1 1 1 1 6\n6 6 6 6 6",
        "expected_output": "2 3 4 1 6 2 3 4 1 6\n3 3 4 1 6 2 3 4 1 6\n4 4 4 1 6 2 3 4 1 6\n1 1 1 1 6 2 3 4 1 6\n6 6 6 6 6 2 3 4 1 6\n2 2 2 2 2 2 3 4 1 6\n3 3 3 3 3 3 3 4 1 6\n4 4 4 4 4 4 4 4 1 6\n1 1 1 1 1 1 1 1 1 6\n6 6 6 6 6 6 6 6 6 6",
        "transformed_output": "2 2 3 3 4 4 1 1 6 6\n2 2 3 3 4 4 1 1 6 6\n3 3 3 3 4 4 1 1 6 6\n3 3 3 3 4 4 1 1 6 6\n4 4 4 4 4 4 1 1 6 6\n4 4 4 4 4 4 1 1 6 6\n1 1 1 1 1 1 1 1 6 6\n1 1 1 1 1 1 1 1 6 6\n6 6 6 6 6 6 6 6 6 6\n6 6 6 6 6 6 6 6 6 6",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 80,
        "percent_correct": 20.0
      }
    ],
    "012-py_08-train": [
      {
        "example": 1,
        "input": "2 2 2 3 0\n2 2 2 3 0\n2 2 2 3 0\n3 3 3 3 0\n0 0 0 0 0",
        "expected_output": "2 2 2 3 2 2 2 3 2 2\n2 2 2 3 2 2 2 3 2 2\n2 2 2 3 2 2 2 3 2 2\n3 3 3 3 2 2 2 3 2 2\n2 2 2 2 2 2 2 3 2 2\n2 2 2 2 2 2 2 3 2 2\n2 2 2 2 2 2 2 3 2 2\n3 3 3 3 3 3 3 3 2 2\n2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2 2",
        "transformed_output": "2 2 2 3 1 1 1 1 1 1\n2 2 2 3 1 1 1 1 1 1\n2 2 2 3 1 1 1 1 1 1\n3 3 3 3 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 84,
        "percent_correct": 16.0
      },
      {
        "example": 2,
        "input": "1 1 4 6 0\n1 1 4 6 0\n4 4 4 6 0\n6 6 6 6 0\n0 0 0 0 0",
        "expected_output": "1 1 4 6 1 1 4 6 1 1\n1 1 4 6 1 1 4 6 1 1\n4 4 4 6 1 1 4 6 1 1\n6 6 6 6 1 1 4 6 1 1\n1 1 1 1 1 1 4 6 1 1\n1 1 1 1 1 1 4 6 1 1\n4 4 4 4 4 4 4 6 1 1\n6 6 6 6 6 6 6 6 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1",
        "transformed_output": "1 1 4 6 1 1 1 1 1 1\n1 1 4 6 1 1 1 1 1 1\n4 4 4 6 1 1 1 1 1 1\n6 6 6 6 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 28,
        "percent_correct": 72.0
      },
      {
        "example": 3,
        "input": "2 3 4 1 6\n3 3 4 1 6\n4 4 4 1 6\n1 1 1 1 6\n6 6 6 6 6",
        "expected_output": "2 3 4 1 6 2 3 4 1 6\n3 3 4 1 6 2 3 4 1 6\n4 4 4 1 6 2 3 4 1 6\n1 1 1 1 6 2 3 4 1 6\n6 6 6 6 6 2 3 4 1 6\n2 2 2 2 2 2 3 4 1 6\n3 3 3 3 3 3 3 4 1 6\n4 4 4 4 4 4 4 4 1 6\n1 1 1 1 1 1 1 1 1 6\n6 6 6 6 6 6 6 6 6 6",
        "transformed_output": "2 3 4 1 6 1 1 1 1 1\n3 3 4 1 6 1 1 1 1 1\n4 4 4 1 6 1 1 1 1 1\n1 1 1 1 6 1 1 1 1 1\n6 6 6 6 6 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 58,
        "percent_correct": 42.0
      }
    ],
    "013-py_09-train": [],
    "014-py_10-train": [
      {
        "example": 1,
        "input": "2 2 2 3 0\n2 2 2 3 0\n2 2 2 3 0\n3 3 3 3 0\n0 0 0 0 0",
        "expected_output": "2 2 2 3 2 2 2 3 2 2\n2 2 2 3 2 2 2 3 2 2\n2 2 2 3 2 2 2 3 2 2\n3 3 3 3 2 2 2 3 2 2\n2 2 2 2 2 2 2 3 2 2\n2 2 2 2 2 2 2 3 2 2\n2 2 2 2 2 2 2 3 2 2\n3 3 3 3 3 3 3 3 2 2\n2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2 2",
        "transformed_output": "2 2 2 3 0 2 2 2 3 0\n2 2 2 3 0 2 2 2 3 0\n2 2 2 3 0 2 2 2 3 0\n3 3 3 3 0 3 3 3 3 0\n0 0 0 0 0 0 0 0 0 0\n2 2 2 3 0 2 2 2 3 0\n2 2 2 3 0 2 2 2 3 0\n2 2 2 3 0 2 2 2 3 0\n3 3 3 3 0 3 3 3 3 0\n0 0 0 0 0 0 0 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 66,
        "percent_correct": 34.0
      },
      {
        "example": 2,
        "input": "1 1 4 6 0\n1 1 4 6 0\n4 4 4 6 0\n6 6 6 6 0\n0 0 0 0 0",
        "expected_output": "1 1 4 6 1 1 4 6 1 1\n1 1 4 6 1 1 4 6 1 1\n4 4 4 6 1 1 4 6 1 1\n6 6 6 6 1 1 4 6 1 1\n1 1 1 1 1 1 4 6 1 1\n1 1 1 1 1 1 4 6 1 1\n4 4 4 4 4 4 4 6 1 1\n6 6 6 6 6 6 6 6 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1",
        "transformed_output": "1 1 4 6 0 1 1 4 6 0\n1 1 4 6 0 1 1 4 6 0\n4 4 4 6 0 4 4 4 6 0\n6 6 6 6 0 6 6 6 6 0\n0 0 0 0 0 0 0 0 0 0\n1 1 4 6 0 1 1 4 6 0\n1 1 4 6 0 1 1 4 6 0\n4 4 4 6 0 4 4 4 6 0\n6 6 6 6 0 6 6 6 6 0\n0 0 0 0 0 0 0 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 75,
        "percent_correct": 25.0
      },
      {
        "example": 3,
        "input": "2 3 4 1 6\n3 3 4 1 6\n4 4 4 1 6\n1 1 1 1 6\n6 6 6 6 6",
        "expected_output": "2 3 4 1 6 2 3 4 1 6\n3 3 4 1 6 2 3 4 1 6\n4 4 4 1 6 2 3 4 1 6\n1 1 1 1 6 2 3 4 1 6\n6 6 6 6 6 2 3 4 1 6\n2 2 2 2 2 2 3 4 1 6\n3 3 3 3 3 3 3 4 1 6\n4 4 4 4 4 4 4 4 1 6\n1 1 1 1 1 1 1 1 1 6\n6 6 6 6 6 6 6 6 6 6",
        "transformed_output": "2 3 4 1 6 2 3 4 1 6\n3 3 4 1 6 3 3 4 1 6\n4 4 4 1 6 4 4 4 1 6\n1 1 1 1 6 1 1 1 1 6\n6 6 6 6 6 6 6 6 6 6\n2 3 4 1 6 2 3 4 1 6\n3 3 4 1 6 3 3 4 1 6\n4 4 4 1 6 4 4 4 1 6\n1 1 1 1 6 1 1 1 1 6\n6 6 6 6 6 6 6 6 6 6",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 20,
        "percent_correct": 80.0
      }
    ],
    "016-py_11-train": [
      {
        "example": 1,
        "input": "2 2 2 3 0\n2 2 2 3 0\n2 2 2 3 0\n3 3 3 3 0\n0 0 0 0 0",
        "expected_output": "2 2 2 3 2 2 2 3 2 2\n2 2 2 3 2 2 2 3 2 2\n2 2 2 3 2 2 2 3 2 2\n3 3 3 3 2 2 2 3 2 2\n2 2 2 2 2 2 2 3 2 2\n2 2 2 2 2 2 2 3 2 2\n2 2 2 2 2 2 2 3 2 2\n3 3 3 3 3 3 3 3 2 2\n2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2 2",
        "transformed_output": "2 2 2 3 0 2 2 2 3 0\n2 2 2 3 0 2 2 2 3 0\n2 2 2 3 0 2 2 2 3 0\n3 3 3 3 0 3 3 3 3 0\n0 0 0 0 0 0 0 0 0 0\n2 2 2 3 0 2 2 2 3 0\n2 2 2 3 0 2 2 2 3 0\n2 2 2 3 0 2 2 2 3 0\n3 3 3 3 0 3 3 3 3 0\n0 0 0 0 0 0 0 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 66,
        "percent_correct": 34.0
      },
      {
        "example": 2,
        "input": "1 1 4 6 0\n1 1 4 6 0\n4 4 4 6 0\n6 6 6 6 0\n0 0 0 0 0",
        "expected_output": "1 1 4 6 1 1 4 6 1 1\n1 1 4 6 1 1 4 6 1 1\n4 4 4 6 1 1 4 6 1 1\n6 6 6 6 1 1 4 6 1 1\n1 1 1 1 1 1 4 6 1 1\n1 1 1 1 1 1 4 6 1 1\n4 4 4 4 4 4 4 6 1 1\n6 6 6 6 6 6 6 6 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1",
        "transformed_output": "1 1 4 6 0 1 1 4 6 0\n1 1 4 6 0 1 1 4 6 0\n4 4 4 6 0 4 4 4 6 0\n6 6 6 6 0 6 6 6 6 0\n0 0 0 0 0 0 0 0 0 0\n1 1 4 6 0 1 1 4 6 0\n1 1 4 6 0 1 1 4 6 0\n4 4 4 6 0 4 4 4 6 0\n6 6 6 6 0 6 6 6 6 0\n0 0 0 0 0 0 0 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 75,
        "percent_correct": 25.0
      },
      {
        "example": 3,
        "input": "2 3 4 1 6\n3 3 4 1 6\n4 4 4 1 6\n1 1 1 1 6\n6 6 6 6 6",
        "expected_output": "2 3 4 1 6 2 3 4 1 6\n3 3 4 1 6 2 3 4 1 6\n4 4 4 1 6 2 3 4 1 6\n1 1 1 1 6 2 3 4 1 6\n6 6 6 6 6 2 3 4 1 6\n2 2 2 2 2 2 3 4 1 6\n3 3 3 3 3 3 3 4 1 6\n4 4 4 4 4 4 4 4 1 6\n1 1 1 1 1 1 1 1 1 6\n6 6 6 6 6 6 6 6 6 6",
        "transformed_output": "2 3 4 1 6 2 3 4 1 6\n3 3 4 1 6 3 3 4 1 6\n4 4 4 1 6 4 4 4 1 6\n1 1 1 1 6 1 1 1 1 6\n6 6 6 6 6 6 6 6 6 6\n2 3 4 1 6 2 3 4 1 6\n3 3 4 1 6 3 3 4 1 6\n4 4 4 1 6 4 4 4 1 6\n1 1 1 1 6 1 1 1 1 6\n6 6 6 6 6 6 6 6 6 6",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 20,
        "percent_correct": 80.0
      }
    ],
    "018-py_12-train": [
      {
        "example": 1,
        "input": "2 2 2 3 0\n2 2 2 3 0\n2 2 2 3 0\n3 3 3 3 0\n0 0 0 0 0",
        "expected_output": "2 2 2 3 2 2 2 3 2 2\n2 2 2 3 2 2 2 3 2 2\n2 2 2 3 2 2 2 3 2 2\n3 3 3 3 2 2 2 3 2 2\n2 2 2 2 2 2 2 3 2 2\n2 2 2 2 2 2 2 3 2 2\n2 2 2 2 2 2 2 3 2 2\n3 3 3 3 3 3 3 3 2 2\n2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2 2",
        "transformed_output": "2 2 2 3 0 2 2 2 3 0\n2 2 2 3 0 2 2 2 3 0\n2 2 2 3 0 2 2 2 3 0\n3 3 3 3 0 3 3 3 3 0\n0 0 0 0 0 0 0 0 0 0\n2 2 2 3 0 2 2 2 3 0\n2 2 2 3 0 2 2 2 3 0\n2 2 2 3 0 2 2 2 3 0\n3 3 3 3 0 3 3 3 3 0\n0 0 0 0 0 0 0 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 66,
        "percent_correct": 34.0
      },
      {
        "example": 2,
        "input": "1 1 4 6 0\n1 1 4 6 0\n4 4 4 6 0\n6 6 6 6 0\n0 0 0 0 0",
        "expected_output": "1 1 4 6 1 1 4 6 1 1\n1 1 4 6 1 1 4 6 1 1\n4 4 4 6 1 1 4 6 1 1\n6 6 6 6 1 1 4 6 1 1\n1 1 1 1 1 1 4 6 1 1\n1 1 1 1 1 1 4 6 1 1\n4 4 4 4 4 4 4 6 1 1\n6 6 6 6 6 6 6 6 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1",
        "transformed_output": "1 1 4 6 0 1 1 4 6 0\n1 1 4 6 0 1 1 4 6 0\n4 4 4 6 0 4 4 4 6 0\n6 6 6 6 0 6 6 6 6 0\n0 0 0 0 0 0 0 0 0 0\n1 1 4 6 0 1 1 4 6 0\n1 1 4 6 0 1 1 4 6 0\n4 4 4 6 0 4 4 4 6 0\n6 6 6 6 0 6 6 6 6 0\n0 0 0 0 0 0 0 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 75,
        "percent_correct": 25.0
      },
      {
        "example": 3,
        "input": "2 3 4 1 6\n3 3 4 1 6\n4 4 4 1 6\n1 1 1 1 6\n6 6 6 6 6",
        "expected_output": "2 3 4 1 6 2 3 4 1 6\n3 3 4 1 6 2 3 4 1 6\n4 4 4 1 6 2 3 4 1 6\n1 1 1 1 6 2 3 4 1 6\n6 6 6 6 6 2 3 4 1 6\n2 2 2 2 2 2 3 4 1 6\n3 3 3 3 3 3 3 4 1 6\n4 4 4 4 4 4 4 4 1 6\n1 1 1 1 1 1 1 1 1 6\n6 6 6 6 6 6 6 6 6 6",
        "transformed_output": "2 3 4 1 6 2 3 4 1 6\n3 3 4 1 6 3 3 4 1 6\n4 4 4 1 6 4 4 4 1 6\n1 1 1 1 6 1 1 1 1 6\n6 6 6 6 6 6 6 6 6 6\n2 3 4 1 6 2 3 4 1 6\n3 3 4 1 6 3 3 4 1 6\n4 4 4 1 6 4 4 4 1 6\n1 1 1 1 6 1 1 1 1 6\n6 6 6 6 6 6 6 6 6 6",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 20,
        "percent_correct": 80.0
      }
    ],
    "019-py_13-train": [],
    "020-py_14-train": [
      {
        "example": 1,
        "input": "2 2 2 3 0\n2 2 2 3 0\n2 2 2 3 0\n3 3 3 3 0\n0 0 0 0 0",
        "expected_output": "2 2 2 3 2 2 2 3 2 2\n2 2 2 3 2 2 2 3 2 2\n2 2 2 3 2 2 2 3 2 2\n3 3 3 3 2 2 2 3 2 2\n2 2 2 2 2 2 2 3 2 2\n2 2 2 2 2 2 2 3 2 2\n2 2 2 2 2 2 2 3 2 2\n3 3 3 3 3 3 3 3 2 2\n2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2 2",
        "transformed_output": "2 2 2 3 0 2 2 2 3 0\n2 2 2 3 0 2 2 2 3 0\n2 2 2 3 0 2 2 2 3 0\n3 3 3 3 0 3 3 3 3 0\n0 0 0 0 0 0 0 0 0 0\n2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2 2\n3 3 3 3 3 3 3 3 3 3\n0 0 0 0 0 0 0 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 57,
        "percent_correct": 43.0
      },
      {
        "example": 2,
        "input": "1 1 4 6 0\n1 1 4 6 0\n4 4 4 6 0\n6 6 6 6 0\n0 0 0 0 0",
        "expected_output": "1 1 4 6 1 1 4 6 1 1\n1 1 4 6 1 1 4 6 1 1\n4 4 4 6 1 1 4 6 1 1\n6 6 6 6 1 1 4 6 1 1\n1 1 1 1 1 1 4 6 1 1\n1 1 1 1 1 1 4 6 1 1\n4 4 4 4 4 4 4 6 1 1\n6 6 6 6 6 6 6 6 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1",
        "transformed_output": "1 1 4 6 0 1 1 4 6 0\n1 1 4 6 0 1 1 4 6 0\n4 4 4 6 0 4 4 4 6 0\n6 6 6 6 0 6 6 6 6 0\n0 0 0 0 0 0 0 0 0 0\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n4 4 4 4 4 4 4 4 4 4\n6 6 6 6 6 6 6 6 6 6\n0 0 0 0 0 0 0 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 70,
        "percent_correct": 30.0
      },
      {
        "example": 3,
        "input": "2 3 4 1 6\n3 3 4 1 6\n4 4 4 1 6\n1 1 1 1 6\n6 6 6 6 6",
        "expected_output": "2 3 4 1 6 2 3 4 1 6\n3 3 4 1 6 2 3 4 1 6\n4 4 4 1 6 2 3 4 1 6\n1 1 1 1 6 2 3 4 1 6\n6 6 6 6 6 2 3 4 1 6\n2 2 2 2 2 2 3 4 1 6\n3 3 3 3 3 3 3 4 1 6\n4 4 4 4 4 4 4 4 1 6\n1 1 1 1 1 1 1 1 1 6\n6 6 6 6 6 6 6 6 6 6",
        "transformed_output": "2 3 4 1 6 2 3 4 1 6\n3 3 4 1 6 3 3 4 1 6\n4 4 4 1 6 4 4 4 1 6\n1 1 1 1 6 1 1 1 1 6\n6 6 6 6 6 6 6 6 6 6\n2 2 2 2 2 2 2 2 2 2\n3 3 3 3 3 3 3 3 3 3\n4 4 4 4 4 4 4 4 4 4\n1 1 1 1 1 1 1 1 1 1\n6 6 6 6 6 6 6 6 6 6",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": true,
        "pixels_off": 20,
        "percent_correct": 80.0
      }
    ],
    "022-py_15-train": [
      {
        "example": 1,
        "input": "2 2 2 3 0\n2 2 2 3 0\n2 2 2 3 0\n3 3 3 3 0\n0 0 0 0 0",
        "expected_output": "2 2 2 3 2 2 2 3 2 2\n2 2 2 3 2 2 2 3 2 2\n2 2 2 3 2 2 2 3 2 2\n3 3 3 3 2 2 2 3 2 2\n2 2 2 2 2 2 2 3 2 2\n2 2 2 2 2 2 2 3 2 2\n2 2 2 2 2 2 2 3 2 2\n3 3 3 3 3 3 3 3 2 2\n2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2 2",
        "transformed_output": "2 2 2 3 0\n2 2 2 3 0\n2 2 2 3 0\n3 3 3 3 0\n0 0 0 0 0",
        "match": false,
        "size_correct": false,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": "N/A",
        "percent_correct": "N/A"
      },
      {
        "example": 2,
        "input": "1 1 4 6 0\n1 1 4 6 0\n4 4 4 6 0\n6 6 6 6 0\n0 0 0 0 0",
        "expected_output": "1 1 4 6 1 1 4 6 1 1\n1 1 4 6 1 1 4 6 1 1\n4 4 4 6 1 1 4 6 1 1\n6 6 6 6 1 1 4 6 1 1\n1 1 1 1 1 1 4 6 1 1\n1 1 1 1 1 1 4 6 1 1\n4 4 4 4 4 4 4 6 1 1\n6 6 6 6 6 6 6 6 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1",
        "transformed_output": "1 1 4 6 0\n1 1 4 6 0\n4 4 4 6 0\n6 6 6 6 0\n0 0 0 0 0",
        "match": false,
        "size_correct": false,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": "N/A",
        "percent_correct": "N/A"
      },
      {
        "example": 3,
        "input": "2 3 4 1 6\n3 3 4 1 6\n4 4 4 1 6\n1 1 1 1 6\n6 6 6 6 6",
        "expected_output": "2 3 4 1 6 2 3 4 1 6\n3 3 4 1 6 2 3 4 1 6\n4 4 4 1 6 2 3 4 1 6\n1 1 1 1 6 2 3 4 1 6\n6 6 6 6 6 2 3 4 1 6\n2 2 2 2 2 2 3 4 1 6\n3 3 3 3 3 3 3 4 1 6\n4 4 4 4 4 4 4 4 1 6\n1 1 1 1 1 1 1 1 1 6\n6 6 6 6 6 6 6 6 6 6",
        "transformed_output": "2 3 4 1 6\n3 3 4 1 6\n4 4 4 1 6\n1 1 1 1 6\n6 6 6 6 6",
        "match": false,
        "size_correct": false,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": "N/A",
        "percent_correct": "N/A"
      }
    ]
  },
  "best_train_results": {
    "passed": 0,
    "total": 0
  },
  "best_test_results": {
    "passed": 0,
    "total": 0
  },
  "test_solved": false
}