task_json = {
 "train": [
  {
   "input": [
    [
     0,
     0,
     0,
     0,
     0,
     0
    ],
    [
     0,
     0,
     0,
     0,
     0,
     0
    ],
    [
     0,
     0,
     1,
     1,
     0,
     0
    ],
    [
     0,
     0,
     1,
     1,
     0,
     0
    ],
    [
     0,
     0,
     0,
     0,
     0,
     0
    ],
    [
     0,
     0,
     0,
     0,
     0,
     0
    ]
   ],
   "output": [
    [
     1,
     1,
     0,
     0,
     1,
     1
    ],
    [
     1,
     1,
     0,
     0,
     1,
     1
    ],
    [
     0,
     0,
     1,
     1,
     0,
     0
    ],
    [
     0,
     0,
     1,
     1,
     0,
     0
    ],
    [
     1,
     1,
     0,
     0,
     1,
     1
    ],
    [
     1,
     1,
     0,
     0,
     1,
     1
    ]
   ]
  },
  {
   "input": [
    [
     0,
     0,
     0,
     0,
     0,
     0,
     0
    ],
    [
     0,
     0,
     0,
     0,
     0,
     0,
     0
    ],
    [
     0,
     0,
     0,
     0,
     0,
     0,
     0
    ],
    [
     0,
     0,
     0,
     2,
     2,
     2,
     0
    ],
    [
     0,
     0,
     0,
     0,
     0,
     0,
     0
    ],
    [
     0,
     0,
     0,
     0,
     0,
     0,
     0
    ],
    [
     0,
     0,
     0,
     0,
     0,
     0,
     0
    ]
   ],
   "output": [
    [
     0,
     0,
     0,
     0,
     0,
     0,
     0
    ],
    [
     0,
     0,
     0,
     2,
     2,
     2,
     0
    ],
    [
     0,
     0,
     0,
     0,
     0,
     0,
     0
    ],
    [
     2,
     2,
     2,
     0,
     0,
     0,
     2,
     2,
     2
    ],
    [
     0,
     0,
     0,
     0,
     0,
     0,
     0
    ],
    [
     0,
     0,
     0,
     2,
     2,
     2,
     0
    ],
    [
     0,
     0,
     0,
     0,
     0,
     0,
     0
    ]
   ]
  },
  {
   "input": [
    [
     0,
     0,
     0,
     0,
     0
    ],
    [
     0,
     0,
     0,
     0,
     0
    ],
    [
     0,
     0,
     0,
     0,
     0
    ],
    [
     0,
     0,
     3,
     0,
     0
    ],
    [
     0,
     0,
     0,
     0,
     0
    ]
   ],
   "output": [
    [
     0,
     0,
     3,
     0,
     0
    ],
    [
     0,
     0,
     0,
     0,
     0
    ],
    [
     3,
     0,
     0,
     0,
     3
    ],
    [
     0,
     0,
     0,
     0,
     0
    ],
    [
     0,
     0,
     3,
     0,
     0
    ]
   ]
  }
 ]
}
import numpy as np
def find_objects(grid):
    objects = []
    visited = np.zeros_like(grid, dtype=bool)
    rows, cols = grid.shape
    def dfs(r, c, color, obj):
        if (r < 0 or r >= rows or c < 0 or c >= cols or visited[r, c] or grid[r, c] != color): return
        visited[r, c] = True
        obj.append((r, c))
        dfs(r + 1, c, color, obj); dfs(r - 1, c, color, obj); dfs(r, c + 1, color, obj); dfs(r, c - 1, color, obj)
    for r in range(rows):
        for c in range(cols):
            if not visited[r, c] and grid[r, c] != 0:
                obj = []
                dfs(r, c, grid[r, c], obj)
                objects.append((grid[r,c], obj))
    return objects
def calculate_object_metrics(grid):
    objects = find_objects(grid)
    metrics = []
    for color, obj_pixels in objects:
        min_row, max_row = min(p[0] for p in obj_pixels), max(p[0] for p in obj_pixels)
        min_col, max_col = min(p[1] for p in obj_pixels), max(p[1] for p in obj_pixels)
        width, height = max_col - min_col + 1, max_row - min_row + 1
        metrics.append({ "color": color, "min_row": min_row, "max_row": max_row, "min_col": min_col, "max_col": max_col, "width": width, "height": height, "pixels": obj_pixels })
    return metrics
def calculate_transformation_metrics(input_grid, output_grid, predicted_output_grid):
    input_metrics, output_metrics = calculate_object_metrics(input_grid), calculate_object_metrics(output_grid)
    predicted_output_metrics = calculate_object_metrics(predicted_output_grid)
    return { "input": input_metrics, "output": output_metrics, "predicted": predicted_output_metrics }
def compare_grids(grid1, grid2):
    if grid1.shape != grid2.shape: return "Grids have different shapes"
    diff_grid = np.where(grid1 != grid2, 1, 0)
    return diff_grid
def transform(input_grid):
    input_grid = np.array(input_grid)
    output_grid = np.zeros_like(input_grid)
    rows, cols = input_grid.shape
    objects = find_objects(input_grid)
    for color, obj in objects:
        min_r, max_r, min_c, max_c = min(r for r, c in obj), max(r for r, c in obj), min(c for r, c in obj), max(c for r, c in obj)
        obj_height, obj_width = max_r - min_r + 1, max_c - min_c + 1
        for r, c in obj:
            output_grid[r, c] = color
            left_c, right_c = c - obj_width, c + obj_width
            if left_c >= 0: output_grid[r, left_c] = color
            if right_c < cols: output_grid[r, right_c] = color
            top_r, bottom_r = r - obj_height, r + obj_height
            if top_r >= 0: output_grid[top_r, c] = color
            if bottom_r < rows: output_grid[bottom_r, c] = color
    return output_grid
def test_transform(examples, transform_function):
    results = []
    for i, (input_grid, output_grid) in enumerate(examples):
        predicted_output_grid = transform_function(input_grid)
        diff_grid = compare_grids(np.array(output_grid), np.array(predicted_output_grid))
        metrics = calculate_transformation_metrics(input_grid, output_grid, predicted_output_grid)
        results.append({ "example_index": i, "diff_grid": diff_grid.tolist(), "metrics": metrics })
    return results
examples = task_json['train']
results = test_transform(examples, transform)
print(results)