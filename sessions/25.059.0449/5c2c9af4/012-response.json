{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms a grid with sparse red pixels into a grid with nested red squares,\ncentered on the original red pixel's location.\n\"\"\"\n\nimport numpy as np\n\ndef find_red_pixels(grid):\n    \"\"\"Finds the coordinates of red pixels in the grid.\"\"\"\n    return np.argwhere(grid == 2)\n\ndef create_nested_squares(grid, center):\n    \"\"\"Creates nested squares centered on the given center.\"\"\"\n    rows, cols = grid.shape\n    output_grid = np.zeros((rows, cols), dtype=int)\n    \n    # Find max possible size for square\n    max_size = min(rows, cols)\n\n    # Iterate to draw nested squares. Stop when center is a pixel\n    for size in range(max_size, 0, -2):\n      top = center[0] - size // 2\n      left = center[1] - size // 2\n      bottom = top + size\n      right = left + size\n\n      #check boundary conditions\n      if top < 0 or left < 0:\n        continue\n      if bottom > rows or right > cols:\n        continue\n\n      # Draw square outline (handling edge cases)\n      for i in range(max(0, left), min(right, cols)):\n          if top >= 0 and top < rows:\n            output_grid[top,i] = 2\n          if bottom-1 >=0 and bottom -1 < rows:\n            output_grid[bottom - 1, i] = 2\n      for i in range(max(0, top), min(bottom, rows)):\n          if left >= 0 and left < cols:\n            output_grid[i, left] = 2\n          if right-1 >=0 and right-1 < cols:\n            output_grid[i, right - 1] = 2\n    return output_grid\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by creating a nested squares pattern of red pixels,\n    centered on the original red pixel's location.\n    \"\"\"\n    # Find red pixels\n    red_pixels = find_red_pixels(input_grid)\n\n    # If no red pixels, return a blank grid (or a copy of input)\n    if len(red_pixels) == 0:\n        return np.zeros_like(input_grid)\n\n    # Create nested squares based on *first* red pixel\n    output_grid = create_nested_squares(input_grid, red_pixels[0])\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3283,
    "candidates_token_count": 576,
    "total_token_count": 3859,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.173248,
  "response_file": "012-response.json"
}