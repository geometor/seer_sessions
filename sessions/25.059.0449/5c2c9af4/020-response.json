{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify** all green pixels (value 3) in the input grid.\n2.  **Find** the two closest, unconnected green pixels, using Manhattan Distance (|row1-row2|+|col1-col2|).\n3.  **Connect** any two, unconnected green pixels, using the following steps, repeated until they are considered \"connected\":\n    *   Draw a line of green pixels between them, prioritizing horizontal and vertical steps.\n    *   If a direct horizontal/vertical connection is not possible, use the minimal number of diagonal steps necessary to connect the two.\n    *   Two green pixels are considered \"connected\" if the Manhattan distance between them is 1.\n4. **Repeat** steps 2 and 3 until all green pixels form a single connected component. A component is a group of pixels where any two in the group can reached using only up, down, left, or right.\n5. **Preserve** all other pixels.\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef find_green_pixels(grid):\n    \"\"\"Finds all green pixels in the grid.\"\"\"\n    green_pixels = []\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == 3:\n                green_pixels.append((r, c))\n    return green_pixels\n\ndef manhattan_distance(p1, p2):\n    \"\"\"Calculates the Manhattan distance between two points.\"\"\"\n    return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\ndef is_connected(pixel1, pixel2, grid):\n     \"\"\"Checks if two pixels are connected (Manhattan distance = 1).\"\"\"\n     if manhattan_distance(pixel1,pixel2) == 1 and grid[pixel2] == 3:\n        return True\n     return False\n\ndef get_neighbors(pixel, grid_shape):\n     \"\"\"get neighbors within bounds\"\"\"\n     row,col = pixel\n     rows,cols = grid_shape\n     neighbors = []\n\n     if row > 0:\n          neighbors.append((row - 1, col))  # Up\n     if row < rows - 1:\n        neighbors.append((row + 1, col))  # Down\n     if col > 0:\n          neighbors.append((row, col - 1))  # Left\n     if col < cols - 1:\n          neighbors.append((row, col + 1))  # Right\n\n     return neighbors\n\ndef are_all_connected(green_pixels, grid):\n    \"\"\"Checks if all green pixels are connected using BFS.\"\"\"\n    if not green_pixels:\n        return True\n\n    visited = set()\n    queue = deque([green_pixels[0]])\n    visited.add(green_pixels[0])\n    count = 0\n\n    while queue:\n        curr = queue.popleft()\n        count += 1\n        for neighbor in get_neighbors(curr, grid.shape):\n          if grid[neighbor] == 3 and neighbor not in visited:\n                visited.add(neighbor)\n                queue.append(neighbor)\n    return count == len(green_pixels)\n\ndef connect_pixels(grid, p1, p2):\n    \"\"\"Connects two pixels using horizontal/vertical steps, minimizing diagonals.\"\"\"\n    r1, c1 = p1\n    r2, c2 = p2\n    new_grid = grid.copy()\n\n    r_diff = r2 - r1\n    c_diff = c2 - c1\n\n    #prioritize horizontal/vertical\n    while r_diff != 0:\n        new_grid[r1 + (1 if r_diff > 0 else -1), c1] = 3\n        r1 += (1 if r_diff > 0 else -1)\n        r_diff = r2 - r1\n    while c_diff != 0:\n        new_grid[r1, c1 + (1 if c_diff>0 else -1)] = 3\n        c1 += (1 if c_diff > 0 else -1)\n        c_diff = c2-c1\n\n    return new_grid\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = input_grid.copy()\n\n    # find green pixels\n    green_pixels = find_green_pixels(output_grid)\n\n    #connect all green pixels until all form 1 connected component\n    while not are_all_connected(green_pixels, output_grid):\n      min_dist = float('inf')\n      closest_pair = (None,None)\n\n      for i in range(len(green_pixels)):\n          for j in range(i+1, len(green_pixels)):\n              if not is_connected(green_pixels[i],green_pixels[j], output_grid):\n                  dist = manhattan_distance(green_pixels[i], green_pixels[j])\n                  if dist < min_dist:\n                      min_dist = dist\n                      closest_pair = (green_pixels[i], green_pixels[j])\n      if closest_pair[0] is not None:\n        output_grid = connect_pixels(output_grid, closest_pair[0], closest_pair[1])\n        green_pixels = find_green_pixels(output_grid)  #update the pixel list.\n      else:  #all other components are connected.\n        break\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 1207,
            "end_index": 1358,
            "uri": "https://github.com/NikhilCBhat/snarl",
            "license_": ""
          },
          {
            "start_index": 1707,
            "end_index": 2012,
            "uri": "https://github.com/Kaeltherol/Minesweeper",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2668,
    "candidates_token_count": 1256,
    "total_token_count": 3924,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.654385,
  "response_file": "020-response.json"
}