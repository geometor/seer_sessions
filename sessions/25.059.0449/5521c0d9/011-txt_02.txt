import numpy as np

def find_object(grid, color):
    """Finds the top-left and bottom-right coordinates of a colored object."""
    rows, cols = np.where(grid == color)
    if len(rows) == 0:
        return None
    top_left = (min(rows), min(cols))
    bottom_right = (max(rows), max(cols))
    return top_left, bottom_right

def get_object_shape(top_left, bottom_right):
    """Calculates the shape of the rectangle."""
    height = bottom_right[0] - top_left[0] + 1
    width = bottom_right[1] - top_left[1] + 1
    return height, width

def analyze_example(input_grid, output_grid):
    """Analyzes a single example and returns relevant metrics."""
    analysis = {}
    for color, color_name in zip([4, 2, 1], ["yellow", "red", "blue"]):
        input_obj = find_object(input_grid, color)
        output_obj = find_object(output_grid, color)

        analysis[color_name] = {
            "input": {},
            "output": {}
        }

        if input_obj:
            input_top_left, input_bottom_right = input_obj
            input_height, input_width = get_object_shape(input_top_left, input_bottom_right)
            analysis[color_name]["input"] = {
                "top_left": input_top_left,
                "bottom_right": input_bottom_right,
                "height": input_height,
                "width": input_width
            }

        if output_obj:
            output_top_left, output_bottom_right = output_obj
            output_height, output_width = get_object_shape(output_top_left, output_bottom_right)
            analysis[color_name]["output"] = {
                "top_left": output_top_left,
                "bottom_right": output_bottom_right,
                "height": output_height,
                "width": output_width
            }
    analysis['input_grid_shape'] = input_grid.shape
    analysis['output_grid_shape'] = output_grid.shape
    return analysis

task_id = "3979b1a9"
examples = [
  {
    "input": [
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 4, 4, 4, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 2, 2, 0, 0, 0, 0],
      [0, 0, 0, 0, 2, 2, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 1, 1, 0, 0, 0, 0]
    ],
    "output": [
      [4, 4, 4],
      [2, 2],
      [2, 2],
      [1, 1]
    ]
  },
  {
    "input": [
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 4, 4, 4, 4, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 2, 2, 2, 2, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 1, 1, 1, 0, 0, 0, 0]
    ],
    "output": [
      [4, 4, 4, 4],
      [2, 2, 2, 2],
      [1, 1, 1]
    ]
  },
  {
    "input": [
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 4, 4, 4, 4, 4, 0, 0],
      [0, 0, 0, 2, 2, 2, 2, 2, 0, 0],
      [0, 0, 0, 1, 1, 1, 1, 0, 0, 0]
    ],
    "output": [
      [4, 4, 4, 4, 4],
      [2, 2, 2, 2, 2],
      [1, 1, 1, 1]
    ]
  }
]

results = []
for i, example in enumerate(examples):
    input_grid = np.array(example["input"])
    output_grid = np.array(example["output"])
    analysis = analyze_example(input_grid, output_grid)
    results.append(analysis)
    print(f"Example {i+1}:")
    print(analysis)
    print("-" * 20)