{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nMoves each colored rectangular block to the top of the grid, preserving their original order of appearance (top-to-bottom, then left-to-right).\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"\n    Finds distinct colored rectangular blocks in the grid.\n\n    Args:\n        grid: A 2D numpy array representing the grid.\n\n    Returns:\n        A list of (color, (min_row, max_row, min_col, max_col)) tuples,\n        ordered by their appearance in the grid (top-to-bottom, left-to-right).\n    \"\"\"\n    objects = []\n    visited = set()\n\n    def dfs(row, col, color, min_row, max_row, min_col, max_col):\n        if (row, col) in visited or row < 0 or row >= grid.shape[0] or col < 0 or col >= grid.shape[1] or grid[row, col] != color:\n            return min_row, max_row, min_col, max_col\n\n        visited.add((row, col))\n        min_row = min(min_row, row)\n        max_row = max(max_row, row)\n        min_col = min(min_col, col)\n        max_col = max(max_col, col)\n\n        min_row, max_row, min_col, max_col = dfs(row + 1, col, color, min_row, max_row, min_col, max_col)\n        min_row, max_row, min_col, max_col = dfs(row - 1, col, color, min_row, max_row, min_col, max_col)\n        min_row, max_row, min_col, max_col = dfs(row, col + 1, color, min_row, max_row, min_col, max_col)\n        min_row, max_row, min_col, max_col = dfs(row, col - 1, color, min_row, max_row, min_col, max_col)\n        return min_row, max_row, min_col, max_col\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            color = grid[row, col]\n            if color != 0 and (row, col) not in visited:\n                min_row, max_row, min_col, max_col = dfs(row, col, color, row, row, col, col)\n                objects.append((color, (min_row, max_row, min_col, max_col)))\n\n    return objects\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by moving each colored rectangle to the top,\n    preserving their original order.\n\n    Args:\n        input_grid: A 2D numpy array representing the input grid.\n\n    Returns:\n        A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    input_grid = np.array(input_grid)\n    objects = find_objects(input_grid)\n    output_grid = np.zeros_like(input_grid)\n\n    # Calculate total width of stacked objects\n    total_width = 0\n    for color, (min_row, max_row, min_col, max_col) in objects:\n      total_width += max_col - min_col + 1\n\n    # determine output width\n    output_width = max(input_grid.shape[1], total_width)\n    output_grid = np.zeros((input_grid.shape[0], output_width), dtype=int)\n\n\n    current_row = 0\n    current_col = 0\n    for color, (min_row, max_row, min_col, max_col) in objects:\n        # Calculate height and width of the object\n        height = max_row - min_row + 1\n        width = max_col - min_col + 1\n\n        # Move the object to the top\n        for i in range(height):\n            for j in range(width):\n                output_grid[current_row + i, current_col + j] = color\n        current_row += height\n        current_col = 0 # Reset column to 0 for top align.\n        current_row = 0 # Reset row to 0.\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6791,
    "candidates_token_count": 1026,
    "total_token_count": 7817,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.093795,
  "response_file": "006-response.json"
}