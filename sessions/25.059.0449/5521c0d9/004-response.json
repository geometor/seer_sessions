{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nShifts colored rectangular blocks upwards by a fixed number of rows, removing any rows fully occupied by white space, with special handling for overlapping blue and red blocks.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"\n    Finds distinct colored rectangular blocks in the grid.\n\n    Args:\n        grid: A 2D numpy array representing the grid.\n\n    Returns:\n        A dictionary where keys are colors and values are (min_row, max_row, min_col, max_col) tuples.\n    \"\"\"\n    objects = {}\n    visited = set()\n\n    def dfs(row, col, color, min_row, max_row, min_col, max_col):\n        if (row, col) in visited or row < 0 or row >= grid.shape[0] or col < 0 or col >= grid.shape[1] or grid[row, col] != color:\n            return min_row, max_row, min_col, max_col\n\n        visited.add((row, col))\n        min_row = min(min_row, row)\n        max_row = max(max_row, row)\n        min_col = min(min_col, col)\n        max_col = max(max_col, col)\n\n        min_row, max_row, min_col, max_col = dfs(row + 1, col, color, min_row, max_row, min_col, max_col)\n        min_row, max_row, min_col, max_col = dfs(row - 1, col, color, min_row, max_row, min_col, max_col)\n        min_row, max_row, min_col, max_col = dfs(row, col + 1, color, min_row, max_row, min_col, max_col)\n        min_row, max_row, min_col, max_col = dfs(row, col - 1, color, min_row, max_row, min_col, max_col)\n        return min_row, max_row, min_col, max_col\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            color = grid[row, col]\n            if color != 0 and (row, col) not in visited:\n                min_row, max_row, min_col, max_col = dfs(row, col, color, row, row, col, col)\n                if color not in objects:\n                    objects[color] = []\n                objects[color].append((min_row, max_row, min_col, max_col))\n\n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the described rules.\n\n    Args:\n        input_grid: A 2D numpy array representing the input grid.\n\n    Returns:\n        A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    input_grid = np.array(input_grid)\n    output_grid = np.zeros_like(input_grid)\n    objects = find_objects(input_grid)\n    shift_amount = 4\n\n    for color, object_list in objects.items():\n      for min_row, max_row, min_col, max_col in object_list:\n        new_min_row = min_row - shift_amount\n        new_max_row = max_row - shift_amount\n\n        # Handle boundary conditions and create the shifted block\n        if new_min_row < 0:\n            height = new_max_row + 1\n            new_min_row = 0\n        else:\n            height = new_max_row - new_min_row + 1\n        if new_max_row >=0:\n          for i in range(height):\n              for j in range(min_col, max_col + 1):\n                  output_grid[new_min_row+i,j]=color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2993,
    "candidates_token_count": 932,
    "total_token_count": 3925,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.386651,
  "response_file": "004-response.json"
}