{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation identifies yellow, red, and blue rectangles in the input grid and stacks them vertically in that order (yellow on top, then red, then blue) at the top of the output grid. The rectangles maintain their original widths and heights. All background (white/0) pixels are removed.\n\"\"\"\n\nimport numpy as np\n\ndef find_object(grid, color):\n    \"\"\"Finds the top-left and bottom-right coordinates of a colored object.\"\"\"\n    rows, cols = np.where(grid == color)\n    if len(rows) == 0:\n        return None\n    top_left = (min(rows), min(cols))\n    bottom_right = (max(rows), max(cols))\n    return top_left, bottom_right\n\ndef get_object_shape(top_left, bottom_right):\n    \"\"\"Calculates the shape of the rectangle.\"\"\"\n    height = bottom_right[0] - top_left[0] + 1\n    width = bottom_right[1] - top_left[1] + 1\n    return height, width\n\ndef create_object(grid, top_left, bottom_right):\n  \"\"\" create an object by copying the cells \"\"\"\n  color = grid[top_left[0],top_left[1]]\n  height, width = get_object_shape(top_left, bottom_right)\n  obj = np.full((height, width), color)\n  return obj\n\ndef remove_empty_rows(grid):\n    \"\"\"Removes rows that are entirely filled with 0s.\"\"\"\n    non_empty_rows = np.any(grid != 0, axis=1)\n    filtered_grid = grid[non_empty_rows]\n    return filtered_grid\n\n\ndef transform(input_grid):\n    # initialize output_grid with the correct dimensions, filled with 0s.\n    # It is difficult to know the correct dimension before processing all the\n    # objects so we will start large\n    output_grid = np.zeros((30,30), dtype=int)\n    # Find and stack objects\n    current_row = 0\n    for color in [4, 2, 1]:  # Yellow, Red, Blue\n        object_coords = find_object(input_grid, color)\n        if object_coords:\n            top_left, bottom_right = object_coords\n            obj = create_object(input_grid, top_left, bottom_right)\n            height, width = obj.shape\n\n            output_grid[current_row:current_row + height, 0:width] = obj\n            current_row += height\n    \n    #remove white space\n    output_grid = remove_empty_rows(output_grid)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4418,
    "candidates_token_count": 625,
    "total_token_count": 5043,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.094592,
  "response_file": "012-response.json"
}