{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:**\n    *   Find the horizontal \"red_block\" of contiguous red (2) pixels.\n    *   Find the \"alternating_row\" containing alternating green (3) and red (2) pixels.\n\n2.  **Identify Segment:**\n    *   Within the \"alternating_row\", identify the \"segment\" of pixels that are *horizontally adjacent* to the \"red_block\".\n\n3.  **Shift Segment:**\n    *   Shift the red (2) pixels within the identified \"segment\" one position to the right. If a position to be moved to is currently green, the green pixel becomes red, if a position to be moved to is red, then it remains red.\n\n4.  **Output:** The modified grid is the output.\n\"\"\"\n\nimport numpy as np\n\ndef find_object(grid, color=None, object_type=\"contiguous_block\"):\n    \"\"\"Finds objects in the grid based on color and type.\"\"\"\n    if object_type == \"contiguous_block\":\n        rows, cols = np.where(grid == color)\n        if len(rows) == 0:\n            return None\n\n        min_row, max_row = np.min(rows), np.max(rows)\n        min_col, max_col = np.min(cols), np.max(cols)\n\n        # Check if it's contiguous\n        if (max_row - min_row + 1) * (max_col - min_col + 1) == len(rows):\n            return (min_row, max_row, min_col, max_col)  # Return boundaries\n        else:\n            return None\n\n    elif object_type == \"alternating_row\":\n        for row_index in range(grid.shape[0]):\n            row = grid[row_index]\n            if is_alternating(row):\n                cols = np.where(row != 0)[0] # get all non-zero columns in this row\n                return row_index, cols\n        return None\n\ndef is_alternating(row):\n    \"\"\"Checks if a row has an alternating pattern of green and red (3 and 2).\"\"\"\n    non_zero_elements = row[row != 0]\n    if len(non_zero_elements) < 2:\n        return False\n\n    # Check for strict alternation starting with either green or red\n    for start_color in [2, 3]:\n       is_valid = True\n       for i in range(len(non_zero_elements)):\n          expected_color = start_color if (i % 2 == 0) else (5 - start_color)\n          if non_zero_elements[i] != expected_color:\n              is_valid = False\n              break\n       if is_valid:\n           return True\n           \n    return False\n\ndef get_segment(grid, red_block_bounds, alternating_row_coords):\n    \"\"\"Extracts the segment of the alternating row adjacent to the red block.\"\"\"\n    if red_block_bounds is None or alternating_row_coords is None:\n        return None\n\n    red_row_start, _, red_col_start, red_col_end = red_block_bounds\n    alt_row, alt_cols = alternating_row_coords\n\n    # Check if the alternating row is directly below the red block\n    if alt_row != red_row_start + 1:\n        return None\n\n    segment_cols = []\n    for col in alt_cols:\n        if col >= red_col_start -1 and col <= red_col_end + 1: # adjacent, including diagonals\n           segment_cols.append(col)\n    \n    return alt_row, np.array(segment_cols)\n\ndef shift_segment(grid, segment_coords):\n    \"\"\"Shifts the red pixels in the identified segment one position to the right.\"\"\"\n    if segment_coords is None:\n        return grid\n\n    alt_row, segment_cols = segment_coords\n    new_grid = np.copy(grid)\n\n    red_cols_in_segment = segment_cols[new_grid[alt_row, segment_cols] == 2]\n\n    for col in reversed(red_cols_in_segment):  # Iterate in reverse to avoid overwriting\n        if col + 1 < grid.shape[1]:  # Boundary check\n            new_grid[alt_row, col + 1] = 2  # Always set to red\n            if col not in red_cols_in_segment:\n              new_grid[alt_row,col] = grid[alt_row,col] # original value\n            else:\n               # if original was red and now empty, make sure its not still original color\n               if not (col+1 in red_cols_in_segment and new_grid[alt_row,col+1] == 2):\n                  new_grid[alt_row,col] = grid[alt_row,col] # put back original color\n\n    return new_grid\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the described rule.\"\"\"\n    # 1. Identify Objects\n    red_block_bounds = find_object(input_grid, color=2, object_type=\"contiguous_block\")\n    alternating_row_coords = find_object(input_grid, object_type=\"alternating_row\")\n\n    # 2. Segment Identification\n    segment_coords = get_segment(input_grid, red_block_bounds, alternating_row_coords)\n\n    # 3. Shift Segment\n    output_grid = shift_segment(input_grid, segment_coords)\n\n    # 4. Return output grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6221,
    "candidates_token_count": 1300,
    "total_token_count": 7521,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 12.864611,
  "response_file": "008-response.json"
}