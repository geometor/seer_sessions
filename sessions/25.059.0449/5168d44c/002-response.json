{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation identifies connected components of red (2) pixels and isolated or contained green (3) pixels.\nIt then shifts or copies the connected red block upwards while keeping green (3) pixels within it intact.\nIt also maintains the vertical order of green pixels, and empties the red block's original position.\n\"\"\"\n\nimport numpy as np\nfrom scipy.ndimage import label, find_objects\n\ndef find_connected_components(grid, color):\n    \"\"\"Finds connected components of a specific color in the grid.\"\"\"\n    colored_grid = (grid == color).astype(int)\n    labeled_grid, num_features = label(colored_grid)\n    return labeled_grid, num_features\n\ndef get_object_slices(labeled_grid, num_features):\n    \"\"\"Gets the slices for each connected component.\"\"\"\n    return find_objects(labeled_grid)\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the observed rules.\"\"\"\n    input_grid = np.array(input_grid)\n    output_grid = np.copy(input_grid)\n    \n    # Find connected components of red (2)\n    red_labeled_grid, red_num_features = find_connected_components(input_grid, 2)\n    red_slices = get_object_slices(red_labeled_grid, red_num_features)\n\n    # Find green pixels and their locations\n    green_pixels = np.argwhere(input_grid == 3)\n    \n    # Iterate through red components and move/copy\n    if red_num_features > 0:\n        for red_slice in red_slices:\n           \n            red_block = input_grid[red_slice]\n            \n            # compute output location \n            row_shift = red_block.shape[0]\n            \n            output_row_start = red_slice[0].start - row_shift\n            output_row_end = red_slice[0].stop - row_shift\n\n            if output_row_start >= 0:\n               output_grid[output_row_start:output_row_end, red_slice[1]] = red_block\n               \n            # empty the original position of red pixels\n            red_rows = np.where((input_grid == 2).any(axis=1))[0]\n\n            for r in red_rows:\n                 if all(val == 0 or val == 2 or val == 3 for val in input_grid[r,:]):\n                    output_grid[r,:] = 0\n            \n            # move green color inside the red block\n            for green_pixel in green_pixels:\n              if red_slice[0].start <= green_pixel[0] < red_slice[0].stop and red_slice[1].start <= green_pixel[1] < red_slice[1].stop:\n                  output_grid[green_pixel[0] - row_shift, green_pixel[1] ] = 3\n                  output_grid[green_pixel[0], green_pixel[1]] = 0\n\n\n    # Handle green pixels outside of red blocks (maintain relative vertical order)\n    green_pixels = np.argwhere(input_grid == 3)\n    \n    shifted_green_pixels = []\n\n    for i in range(len(green_pixels)):\n        \n        found = False\n\n        for red_slice in red_slices:\n           \n            red_block = input_grid[red_slice]\n            \n            row_shift = red_block.shape[0]\n\n            if red_slice[0].start <= green_pixels[i][0] < red_slice[0].stop and red_slice[1].start <= green_pixels[i][1] < red_slice[1].stop:\n                 shifted_green_pixels.append([green_pixels[i][0] - row_shift, green_pixels[i][1]])\n                 found = True\n                 break;\n        \n        if not found:\n            shifted_green_pixels.append([green_pixels[i][0], green_pixels[i][1]])\n    \n    # sort by original positions\n    sorted_green = sorted(zip(green_pixels, shifted_green_pixels), key = lambda x: (x[0][0],x[0][1]))\n    \n    #remove the original green positions\n    for green_pixel in green_pixels:\n        is_red = False\n        for red_slice in red_slices:\n           if red_slice[0].start <= green_pixel[0] < red_slice[0].stop and red_slice[1].start <= green_pixel[1] < red_slice[1].stop:\n                is_red = True\n                break\n\n        if not is_red: output_grid[green_pixel[0], green_pixel[1]] = 0\n\n    #fill by new green positions\n    for (original, shifted) in sorted_green:\n          if shifted[0] >= 0:  # Ensure we don't go out of bounds\n            output_grid[shifted[0], shifted[1]] = 3\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4432,
    "candidates_token_count": 1173,
    "total_token_count": 5605,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 12.977899,
  "response_file": "002-response.json"
}