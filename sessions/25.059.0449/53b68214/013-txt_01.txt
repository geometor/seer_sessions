import numpy as np

# Provided examples with unexpected outputs
train_examples = [
    {
        "input": np.array([[0, 0, 3, 0, 0, 0, 0, 0, 0],
                           [0, 0, 3, 0, 0, 0, 0, 0, 0],
                           [0, 0, 3, 0, 0, 0, 0, 0, 0]]),
        "output": np.array([[0, 0, 3, 0, 0, 0, 0, 0, 0],
                            [0, 0, 3, 0, 0, 0, 0, 0, 0],
                            [0, 0, 3, 0, 0, 0, 0, 0, 0],
                            [0, 0, 3, 0, 0, 0, 0, 0, 0],
                            [0, 0, 3, 0, 0, 0, 0, 0, 0],
                            [0, 0, 3, 0, 0, 0, 0, 0, 0]])
    },
    {
        "input": np.array([[0, 0, 3, 0, 0, 0],
                           [0, 0, 3, 0, 0, 0],
                           [0, 0, 3, 0, 0, 0],
                           [0, 0, 3, 0, 0, 0]]),
        "output": np.array([[0, 0, 3, 0, 0, 0],
                            [0, 0, 3, 0, 0, 0],
                            [0, 0, 3, 0, 0, 0],
                            [0, 0, 3, 0, 0, 0],
                            [0, 0, 3, 0, 0, 0],
                            [0, 0, 3, 0, 0, 0],
                            [0, 0, 3, 0, 0, 0],
                            [0, 0, 3, 0, 0, 0]])
    },
    {
        "input": np.array([[0, 0, 3, 0, 0],
                           [0, 0, 3, 0, 0],
                           [0, 0, 3, 0, 0],
                           [0, 0, 3, 0, 0],
                           [0, 0, 3, 0, 0]]),
        "output": np.array([[0, 0, 3, 0, 0],
                            [0, 0, 3, 0, 0],
                            [0, 0, 3, 0, 0],
                            [0, 0, 3, 0, 0],
                            [0, 0, 3, 0, 0],
                            [0, 0, 3, 0, 0],
                            [0, 0, 3, 0, 0],
                            [0, 0, 3, 0, 0],
                            [0, 0, 3, 0, 0],
                            [0, 0, 3, 0, 0]])
    }
]

def transform(input_grid):
    # Get the dimensions of the input grid
    input_height, input_width = input_grid.shape

    # Determine the output grid dimensions (double the height)
    output_height = input_height * 2
    output_width = input_width

    # Initialize the output grid with zeros
    output_grid = np.zeros((output_height, output_width), dtype=int)

    # Repeat the input grid pattern vertically
    for i in range(output_height):
        output_grid[i, :] = input_grid[i % input_height, :]

    return output_grid

for i, example in enumerate(train_examples):
    input_grid = example["input"]
    expected_output = example["output"]
    predicted_output = transform(input_grid)

    print(f"Example {i + 1}:")
    print(f"  Input shape: {input_grid.shape}")
    print(f"  Expected output shape: {expected_output.shape}")
    print(f"  Predicted output shape: {predicted_output.shape}")
    print(f"  Matches expected: {np.array_equal(predicted_output, expected_output)}")