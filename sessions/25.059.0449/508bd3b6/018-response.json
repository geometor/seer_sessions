{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nChange to green all white pixels in a region formed by the left, the top, and a line that would connect the azure pixels.\n\"\"\"\n\nimport numpy as np\n\ndef find_red_rectangle(grid):\n    # Find the coordinates of the red (2) rectangle.\n    rows, cols = np.where(grid == 2)\n    if len(rows) == 0:\n        return None\n    min_row, max_row = np.min(rows), np.max(rows)\n    min_col, max_col = np.min(cols), np.max(cols)\n    return (min_row, max_row, min_col, max_col)\n\ndef find_azure_pixels(grid):\n    # Find the coordinates of the azure (8) pixels.\n    rows, cols = np.where(grid == 8)\n    return list(zip(rows, cols))\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of the input_grid.\n    output_grid = np.copy(input_grid)\n    \n    # Find azure pixels.\n    azure_pixels = find_azure_pixels(input_grid)\n    if not azure_pixels:\n        return output_grid # Return original if no azure pixels\n        \n    # Find top right coordinate\n    height, width = input_grid.shape\n    top_right = (0, width-1)\n\n    # Determine bounding line parameters\n    if len(azure_pixels) >= 2:\n      azure_pixels.sort()\n      top_azure = azure_pixels[0]\n      bottom_azure = azure_pixels[-1]\n\n    else:\n        top_azure = azure_pixels[0]\n        bottom_azure = azure_pixels[0]\n\n    \n    # define filling function\n    def fill_region(grid, start_row, start_col):\n        # start filling from top right using flood fill approach\n        rows, cols = grid.shape\n        visited = np.zeros_like(grid, dtype=bool)\n        stack = [(start_row, start_col)]\n\n        while stack:\n            row, col = stack.pop()\n\n            if row < 0 or row >= rows or col < 0 or col >= cols or visited[row, col] or grid[row,col] != 0:\n                continue\n\n            visited[row, col] = True\n            grid[row,col] = 3\n\n\n            # Calculate the normalized position relative to the line between the azure pixels\n\n            if bottom_azure[0] - top_azure[0] == 0:\n              # Handle cases where there is no row change between azures, preventing zero division\n              if col > bottom_azure[1]:\n                stack.append((row, col -1))\n\n              stack.append((row - 1, col)) #up\n              stack.append((row , col+1)) #right\n\n\n            else:\n                line_parameter = (col - top_azure[1]) / (bottom_azure[1] - top_azure[1])  if bottom_azure[1] != top_azure[1] else 0\n                if (row - top_azure[0])/(bottom_azure[0] - top_azure[0]) > line_parameter:\n                #stop when below the diagonal line defined by the azure pixels\n                    stack.append((row + 1, col))  # Down\n                if  (row - top_azure[0])/(bottom_azure[0] - top_azure[0]) >= line_parameter:\n                    stack.append((row, col - 1))  # Left\n\n            stack.append((row - 1, col)) #up\n            stack.append((row , col+1)) #right\n                \n    \n    # fill\n    fill_region(output_grid, 0, width -1)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3213,
    "candidates_token_count": 884,
    "total_token_count": 4097,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.14488,
  "response_file": "018-response.json"
}