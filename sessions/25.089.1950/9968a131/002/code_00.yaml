task_type: grid_transformation
grid_properties:
  dimensionality: 2D
  color_palette: 0-9
  size_variability: True (input/output dimensions match within examples, but vary between examples; e.g., 4x4, 6x6)
transformation_scope: row-based
row_processing:
  conditional_logic: based on row index (even/odd)
  even_rows: copied verbatim from input to output.
  odd_rows: modified based on content and shifted.
odd_row_modification:
  precondition: Requires the row to have at least 3 columns. If fewer, the row is copied verbatim.
  input_prefix: Define as the first three elements `[e0, e1, e2]` = `input[row, 0], input[row, 1], input[row, 2]`.
  output_first_element_determination:
    variable_name: x
    condition: Check if the color orange (value 7) exists within the input prefix `[e0, e1, e2]`.
    result_if_true: `x` becomes orange (7).
    result_if_false: `x` becomes the value of `e0` (the original first element `input[row, 0]`).
  output_row_construction:
    element_at_index_0: Set to the determined value `x`.
    elements_from_index_1_onwards: Set to the values of the *original input row* starting from index 0, effectively shifting the original row content one position to the right. Specifically, `output[row, j] = input[row, j-1]` for `j` from 1 up to `cols-1`.
key_colors:
  - orange (7): Plays a special role in determining the transformation outcome for the first element of odd rows.
object_focus: The transformation operates on pixel values based on their position (row index, column index) and value (specifically checking for orange/7 in the prefix of odd rows), combined with a structural shift operation on those rows. It does not rely on identifying contiguous objects.