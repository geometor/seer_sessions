import numpy as np

COLOR_MAP = {
    0: (238, 238, 238),  # white
    1: (30, 147, 255),  # blue
    2: (220, 50, 40),  # red
    3: (79, 204, 48),  # green
    4: (230, 200, 0),  # yellow
    5: (85, 85, 85),  # gray
    6: (229, 58, 163),  # magenta
    7: (230, 120, 20),  # orange
    8: (135, 216, 241),  # azure
    9: (146, 18, 49),  # maroon
}

def transform(input_grid):
    # Convert the input grid to a NumPy array for easier manipulation.
    input_array = np.array(input_grid)

    # Count the number of gray pixels (5).
    gray_count = np.sum(input_array == 5)

    # Initialize output based on presence of gray
    if gray_count > 0:
      output_grid = [[1]]
    else:
      output_grid = [[0]] # default if not found - will need to be refined

    return output_grid

#TASK_TRAIN = task["train"]
TASK_TRAIN = [
    {'input': [[5, 0, 5], [0, 5, 0], [5, 0, 5]], 'output': [[1]]},
    {'input': [[0, 5, 0], [5, 0, 5], [0, 5, 0]], 'output': [[1]]},
    {'input': [[5, 5, 5, 5, 5], [5, 0, 0, 0, 5], [5, 5, 5, 5, 5]], 'output': [[1]]},
    {'input': [[0, 0, 0], [0, 0, 0], [0, 0, 0]], 'output': [[0]]},
    {'input': [[8, 8, 8, 8], [8, 8, 8, 8], [8, 8, 8, 8]], 'output': [[0]]}
]

for i, example in enumerate(TASK_TRAIN):
    input_grid = example['input']
    expected_output = example['output']
    actual_output = transform(input_grid)

    print(f"Example {i+1}:")
    print(f"  Input:\n{np.array(input_grid)}")
    print(f"  Expected Output:\n{np.array(expected_output)}")
    print(f"  Actual Output:\n{np.array(actual_output)}")
    print(f"  Correct: {np.array_equal(actual_output, expected_output)}")
    print("-" * 20)