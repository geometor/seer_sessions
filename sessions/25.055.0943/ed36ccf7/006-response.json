{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Red Pixels:** Locate all pixels with the value 2 (red).\n2.  **Identify Adjacent Blue Pixels:** For each red pixel, or group of contiguous red pixels, find all adjacent blue pixels (value 1). Adjacency includes directly above, below, left, and right.\n3.  **Change to White:** Change all of these identified adjacent blue pixels to white (value 0).\n\"\"\"\n\nimport numpy as np\n\ndef get_adjacent_pixels(grid, row, col):\n    \"\"\"\n    Gets the coordinates of adjacent pixels (up, down, left, right).\n    \"\"\"\n    rows, cols = grid.shape\n    adjacent = []\n    if row > 0:\n        adjacent.append((row - 1, col))  # Up\n    if row < rows - 1:\n        adjacent.append((row + 1, col))  # Down\n    if col > 0:\n        adjacent.append((row, col - 1))  # Left\n    if col < cols - 1:\n        adjacent.append((row, col + 1))  # Right\n    return adjacent\n\ndef transform(input_grid):\n    # initialize output_grid as a copy of input grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # identify red pixels\n    red_pixels = []\n    for r in range(rows):\n        for c in range(cols):\n            if input_grid[r, c] == 2:\n                red_pixels.append((r, c))\n\n    # find blue pixels adjacent to red pixels\n    blue_to_white = set()\n    for r, c in red_pixels:\n        adjacent = get_adjacent_pixels(input_grid, r, c)\n        for ar, ac in adjacent:\n            if input_grid[ar, ac] == 1:\n                blue_to_white.add((ar, ac))\n    \n    # change blue to white\n    for r, c in blue_to_white:\n      output_grid[r,c] = 0\n      \n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2682,
    "candidates_token_count": 494,
    "total_token_count": 3176,
    "cached_content_token_count": 0
  },
  "response_time": 5.283604,
  "response_file": "006-response.json"
}