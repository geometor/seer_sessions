{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Target Pixels:** Examine each pixel in the input grid. Focus on pixels with a value of '0' (white).\n2.  **Count Adjacent Gray Pixels:** For each white pixel, count the number of directly adjacent pixels (up, down, left, right, *and diagonally*) that have a value of '5' (gray).\n3.  **Conditional Color Change:** If a white pixel has *at least* two adjacent gray pixels, change the pixel's value to '2' (red) in the output grid.  It does not matter where the gray pixels are.\n4.  **Copy Unchanged Pixels:** If a white pixel does not meet the condition (less than two adjacent gray pixels), its value remains '0' (white) in the output grid. All non-white pixels are copied to the output grid unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef count_adjacent_gray(grid, row, col):\n    \"\"\"Counts adjacent gray pixels (including diagonals).\"\"\"\n    rows, cols = grid.shape\n    count = 0\n    for i in range(max(0, row - 1), min(rows, row + 2)):\n        for j in range(max(0, col - 1), min(cols, col + 2)):\n            if (i != row or j != col) and grid[i, j] == 5:\n                count += 1\n    return count\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the adjacency rule.\"\"\"\n    input_grid = np.array(input_grid)\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Iterate through each pixel\n    for row in range(rows):\n        for col in range(cols):\n            # Check if the pixel is white (0)\n            if input_grid[row, col] == 0:\n                # Count adjacent gray (5) pixels\n                adjacent_gray_count = count_adjacent_gray(input_grid, row, col)\n                # Change to red (2) if at least two adjacent gray pixels\n                if adjacent_gray_count >= 2:\n                    output_grid[row, col] = 2\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4344,
    "candidates_token_count": 513,
    "total_token_count": 4857,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 12.328233
}