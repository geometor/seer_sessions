{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation rule involves identifying yellow objects and adding red pixels based on their position relative to the grid boundaries. If a yellow object touches a boundary, a mirrored copy of the object (in red) is created on the opposite side of the grid. If the yellow object doesn't touch any boundary, it's extended in two opposite directions by creating a red copy of the object shape at the minimum and maximum rows or columns.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, color):\n    \"\"\"Finds contiguous objects of a specified color in the grid.\"\"\"\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n\n    def dfs(row, col, current_object):\n        \"\"\"Depth-First Search to find contiguous pixels.\"\"\"\n        if (row < 0 or row >= grid.shape[0] or col < 0 or col >= grid.shape[1] or\n                visited[row, col] or grid[row, col] != color):\n            return\n\n        visited[row, col] = True\n        current_object.append((row, col))\n        dfs(row + 1, col, current_object)\n        dfs(row - 1, col, current_object)\n        dfs(row, col + 1, current_object)\n        dfs(row, col - 1, current_object)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] == color and not visited[row, col]:\n                current_object = []\n                dfs(row, col, current_object)\n                objects.append(current_object)\n\n    return objects\n\ndef reflect_or_extend(grid, yellow_object):\n    \"\"\"\n    Reflects the object if it touches a boundary, extends it otherwise.\n    \"\"\"\n    output_coords = []\n\n    # Check if the object touches the boundary, collect info\n    top_touch, bottom_touch, left_touch, right_touch = False, False, False, False\n    min_row = min(y for y,x in yellow_object)\n    max_row = max(y for y,x in yellow_object)\n    min_col = min(x for y,x in yellow_object)\n    max_col = max(x for y,x in yellow_object)\n    if min_row == 0:\n        top_touch = True\n    if max_row == grid.shape[0] - 1:\n        bottom_touch = True\n    if min_col == 0:\n        left_touch = True\n    if max_col == grid.shape[1] -1:\n        right_touch = True\n\n    # mirror at boundary\n    if top_touch:\n        for y, x in yellow_object:\n            output_coords.append( (grid.shape[0]-1 - (y-min_row), x) )\n    if bottom_touch:\n        for y, x in yellow_object:\n            output_coords.append( (min_row - 1- (y - max_row) , x) ) # use min_row for offset\n    if left_touch:\n        for y, x in yellow_object:\n            output_coords.append( (y, grid.shape[1]-1 - (x - min_col) ) )\n    if right_touch:\n        for y, x in yellow_object:\n            output_coords.append( (y, min_col - 1 - (x-max_col)) )\n\n    # if not on boundary, then pick the two sides which maximizes distance to a boundary\n    if not (top_touch or bottom_touch or left_touch or right_touch):\n\n        # calculate distance to each boundary\n        dist_top = min_row\n        dist_bottom = grid.shape[0] - 1 - max_row\n        dist_left = min_col\n        dist_right = grid.shape[1] - 1 - max_col\n\n        # extend in the two directions of largest distance\n        distances = [ (\"top\",dist_top), (\"bottom\",dist_bottom), (\"left\", dist_left), (\"right\", dist_right)]\n        distances.sort(key=lambda x: x[1], reverse=True)\n        direction1 = distances[0][0]\n        direction2 = distances[1][0]\n\n        if \"top\" == direction1 or \"top\" == direction2:\n            for y, x in yellow_object:\n                output_coords.append( (min_row - 1 - (y-min_row), x) )  # extend above\n        if \"bottom\" == direction1 or \"bottom\" == direction2:\n            for y, x in yellow_object:\n               output_coords.append( (max_row + 1 + (y - min_row), x) )  # extend below\n        if \"left\" == direction1 or \"left\" == direction2:\n            for y, x in yellow_object:\n                output_coords.append( (y, min_col - 1 - (x - min_col)) ) # extend left\n        if \"right\" == direction1 or \"right\" == direction2:\n            for y, x in yellow_object:\n                output_coords.append( (y, max_col + 1 + (x - min_col)) )   # extend right\n    return output_coords\n            \n\ndef transform(input_grid):\n    \"\"\"\n    Identifies yellow objects and adds red pixels that reflect or expand \n    related to the yellow objects, considering grid boundaries.\n    \"\"\"\n    # Initialize output_grid as a copy of the input_grid\n    output_grid = np.copy(input_grid)\n\n    # Find yellow objects\n    yellow_objects = find_objects(input_grid, 4)\n\n    # For each yellow object, add reflected/extended red pixels\n    for yellow_object in yellow_objects:\n        red_coords = reflect_or_extend(input_grid, yellow_object)\n        for r, c in red_coords:\n            if 0 <= r < output_grid.shape[0] and 0 <= c < output_grid.shape[1]:  # Boundary check\n                output_grid[r, c] = 2\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7289,
    "candidates_token_count": 1442,
    "total_token_count": 8731,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 17.60188
}