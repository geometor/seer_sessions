input_grid:
  type: Grid
  properties:
    height: 10
    width: 10
    pixels: Values from 0-9 representing colors.
  structure: Composed of four 5x5 quadrants.
    quadrants:
      - name: Top-Left (TL)
        coordinates: rows 0-4, cols 0-4
      - name: Top-Right (TR)
        coordinates: rows 0-4, cols 5-9
      - name: Bottom-Left (BL)
        coordinates: rows 5-9, cols 0-4
      - name: Bottom-Right (BR)
        coordinates: rows 5-9, cols 5-9

output_grid:
  type: Grid
  properties:
    height: 5
    width: 5
    pixels: Values from 0-9 representing colors.

transformation:
  type: Pixel-wise Composition
  description: >
    Each pixel in the output grid is determined by the color of the
    corresponding pixel in the input grid's quadrants, checked in a
    specific priority order.
  priority_order: [BL, BR, TL, TR]
  rule: >
    For each output coordinate (r, c):
    1. Get color from input at (r + 5, c) [BL]. If non-white, use it.
    2. Else, get color from input at (r + 5, c + 5) [BR]. If non-white, use it.
    3. Else, get color from input at (r, c) [TL]. If non-white, use it.
    4. Else, get color from input at (r, c + 5) [TR]. Use it (even if white).
    5. If all checked pixels were white, the output is white (0).

colors:
  - white: 0
  - yellow: 4 (primarily in TL)
  - green: 3 (primarily in TR)
  - maroon: 9 (primarily in BL)
  - azure: 8 (primarily in BR)