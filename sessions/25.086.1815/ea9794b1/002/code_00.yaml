task_structure:
  input_size: [10, 10]
  output_size: [5, 5]
  relationship: pixel-wise mapping based on quadrants

quadrants:
  definition: Input grid divided into four 5x5 subgrids.
  TL: Top-Left (rows 0-4, cols 0-4)
  TR: Top-Right (rows 0-4, cols 5-9)
  BL: Bottom-Left (rows 5-9, cols 0-4)
  BR: Bottom-Right (rows 5-9, cols 5-9)

transformation_rule:
  type: quadrant_priority_overlay
  output_pixel_derivation: For each output pixel at (r, c):
    input_pixels:
      - TL_pixel: input[r, c]
      - TR_pixel: input[r, c + 5]
      - BL_pixel: input[r + 5, c]
      - BR_pixel: input[r + 5, c + 5]
    priority_order:
      - Step 1: Check TR_pixel. If not white (0), use TR_pixel.
      - Step 2: Else (TR_pixel is white), check BL_pixel. If BL_pixel is maroon (9), use BL_pixel (9).
      - Step 3: Else (TR_pixel is white, BL_pixel is not 9), check BR_pixel. If not white (0), use BR_pixel.
      - Step 4: Else (TR is white, BL is not 9, BR is white), check BL_pixel. If not white (0), use BL_pixel.
      - Step 5: Else (TR, BR, BL are white or BL is not 9), check TL_pixel. If not white (0), use TL_pixel.
      - Step 6: Else (all corresponding input pixels are white, or satisfy conditions leading here), use white (0).
  note: This assumes a typo in Example 1, Output(0,2), where the expected output 4 should be 8 based on pattern consistency.

objects:
  - type: pixel
    properties: [color (0-9), position (row, col)]
  - type: quadrant
    properties: [location (TL, TR, BL, BR), subgrid of pixels]

actions:
  - select: Identify the four input pixels corresponding to an output pixel location.
  - prioritize: Apply a sequence of checks based on quadrant location and specific color values (TR color, BL color 9, BR color, BL color, TL color).
  - assign: Set the output pixel color based on the first rule met in the priority sequence.