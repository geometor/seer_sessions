{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransforms an input grid based on the number and type of unique non-white colors present.\n\n1.  Analyzes the input grid to find unique non-white colors and counts them (N).\n2.  Determines an output color (C_out) based on N:\n    - If N = 3, C_out is the maximum value among the unique non-white colors.\n    - If N = 2, C_out is always Azure (8).\n    - Otherwise, C_out is White (0).\n3.  Determines a 3x3 output pattern based on N and input features:\n    - If N = 3, the pattern is 'Shape A': [[C,0,0],[0,C,C],[C,0,0]].\n    - If N = 2:\n        - Checks if a 'Strict Plus Shape' for Azure (8) exists in the input (center+cardinal=8, corners=0).\n        - If yes, the pattern is 'Shape +': [[0,C,0],[C,C,C],[0,C,0]].\n        - If no, the pattern is 'Shape X': [[C,0,C],[0,C,0],[C,0,C]].\n    - Otherwise, the pattern is all White (0).\n4.  Constructs a 3x3 output grid using the determined pattern and color.\n\"\"\"\n\ndef _find_non_white_colors(grid):\n    \"\"\"\n    Finds all unique non-white colors in the grid.\n\n    Args:\n        grid (np.ndarray): The input grid.\n\n    Returns:\n        set: A set of unique non-white color integers.\n    \"\"\"\n    unique_colors = np.unique(grid)\n    return set(color for color in unique_colors if color != 0)\n\ndef _check_strict_plus_shape(grid, color):\n    \"\"\"\n    Checks if a 3x3 'strict' plus shape of the specified color exists anywhere in the grid.\n    A 'strict' plus shape has the given color at the center and its 4 cardinal neighbors,\n    and white (0) at the 4 corner positions relative to the center.\n\n    Args:\n        grid (np.ndarray): The input grid.\n        color (int): The non-white color to check for.\n\n    Returns:\n        bool: True if at least one strict plus shape of the given color is found, False otherwise.\n    \"\"\"\n    rows, cols = grid.shape\n    # Iterate through possible center points (r, c) of a 3x3 shape\n    # We need to leave a 1-pixel border around the grid\n    for r in range(1, rows - 1):\n        for c in range(1, cols - 1):\n            # Check center pixel\n            if grid[r, c] == color:\n                # Check cardinal neighbors\n                if (grid[r-1, c] == color and\n                    grid[r+1, c] == color and\n                    grid[r, c-1] == color and\n                    grid[r, c+1] == color):\n                    # Check corner neighbors (must be white)\n                    if (grid[r-1, c-1] == 0 and\n                        grid[r-1, c+1] == 0 and\n                        grid[r+1, c-1] == 0 and\n                        grid[r+1, c+1] == 0):\n                        return True  # Found a strict plus shape\n    return False # No strict plus shape found for this color\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on the rules described in the module docstring.\n\n    Args:\n        input_grid (list of lists): The input grid.\n\n    Returns:\n        list of lists: The 3x3 transformed output grid.\n    \"\"\"\n    # Convert input to numpy array for easier handling\n    grid = np.array(input_grid, dtype=int)\n\n    # Step 1: Analyze Input - Find unique non-white colors and count (N)\n    non_white_colors = _find_non_white_colors(grid)\n    num_non_white_colors = len(non_white_colors)\n\n    # Initialize output grid (3x3) and output color\n    output_grid = np.zeros((3, 3), dtype=int)\n    output_color = 0\n    shape_pattern = None # To hold the pattern coordinates\n\n    # Step 2 & 3: Determine Output Color (C_out) and Shape Pattern based on N\n    if num_non_white_colors == 3:\n        # Rule for N=3: Max color, Shape A\n        output_color = max(non_white_colors)\n        # Define coordinates for Shape A: [[C,0,0],[0,C,C],[C,0,0]]\n        shape_pattern = [(0, 0), (1, 1), (1, 2), (2, 0)]\n\n    elif num_non_white_colors == 2:\n        # Rule for N=2: Color is Azure(8)\n        output_color = 8\n        # Check for strict plus shape of Azure(8) in input\n        has_strict_plus = _check_strict_plus_shape(grid, 8)\n        if has_strict_plus:\n            # Shape +: [[0,C,0],[C,C,C],[0,C,0]]\n            shape_pattern = [(0, 1), (1, 0), (1, 1), (1, 2), (2, 1)]\n        else:\n            # Shape X: [[C,0,C],[0,C,0],[C,0,C]]\n            shape_pattern = [(0, 0), (0, 2), (1, 1), (2, 0), (2, 2)]\n\n    # Else (N is not 2 or 3), output_color remains 0 and shape_pattern remains None\n    # The output_grid will remain all zeros (White)\n\n    # Step 4: Construct Output Grid\n    if output_color != 0 and shape_pattern is not None:\n        for r, c in shape_pattern:\n            output_grid[r, c] = output_color\n\n    # Return as list of lists per ARC standard\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8448,
    "candidates_token_count": 1463,
    "total_token_count": 9911,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.920209,
  "retries": null
}