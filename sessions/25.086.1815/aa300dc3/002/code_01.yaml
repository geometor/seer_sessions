task_description: Identify the longest contiguous straight line segment composed entirely of white (0) pixels. The line can be diagonal (top-left to bottom-right) or anti-diagonal (top-right to bottom-left). Change the color of the pixels belonging to this longest segment to azure (8). If multiple segments share the maximum length, select the one whose starting pixel (the pixel with the smallest row index in the segment) has the smallest row index. If there is still a tie, select the segment whose starting pixel has the largest column index.

definitions:
  - name: grid
    type: 2D array of integers (0-9) representing colors.
  - name: white_pixel
    type: A pixel with value 0.
  - name: segment
    type: A contiguous sequence of white pixels forming a straight line.
  - name: diagonal_segment
    type: A segment where all pixels (r, c) satisfy r - c = constant, and adjacent pixels in the sequence are (r, c) and (r+1, c+1).
  - name: anti_diagonal_segment
    type: A segment where all pixels (r, c) satisfy r + c = constant, and adjacent pixels in the sequence are (r, c) and (r+1, c-1).
  - name: segment_length
    type: The number of pixels in a segment.
  - name: starting_pixel
    type: The pixel in a segment with the minimum row index. For diagonal and anti-diagonal segments relevant here, this pixel is unique. Coordinates are (r_start, c_start).

actions:
  - name: find_white_pixels
    description: Identify the coordinates of all white pixels in the input grid.
  - name: find_segments
    description: Identify all maximal contiguous diagonal and anti-diagonal segments composed of white pixels. For each segment, record its pixels, length, type (diagonal/anti-diagonal), and starting pixel.
  - name: select_longest_segment
    description: >
      Compare all found segments.
      1. Find the maximum length among all segments.
      2. Filter to keep only segments with this maximum length.
      3. If only one segment remains, select it.
      4. If multiple segments remain, compare their starting pixels (r_start, c_start).
      5. Select the segment(s) with the minimum `r_start`.
      6. If a single segment remains, select it.
      7. If multiple segments still remain (tied for minimum `r_start`), select the one among them with the maximum `c_start`.
  - name: update_output_grid
    description: Create a copy of the input grid. Change the color of the pixels belonging to the selected longest segment to azure (8).

input_output_relationship:
  - The output grid is derived from the input grid by recoloring the pixels of a specific white segment.
  - All non-white pixels remain unchanged.
  - All white pixels not part of the selected longest segment remain unchanged.
  - The pixels of the selected longest white segment are changed to azure (8).
  - The selection criteria for the segment prioritize maximum length, then the top-most starting row (minimum row index), then the right-most starting column (maximum column index).

example_2_analysis:
  - input_grid: Contains multiple white segments.
  - segments_found: Multiple diagonal and anti-diagonal segments exist.
  - max_length: The maximum segment length is 7.
  - longest_segments: Three anti-diagonal segments have length 7:
      - S1: type=anti-diag, const=8, start=(1,7), len=7
      - S2: type=anti-diag, const=9, start=(1,8), len=7
      - S3: type=anti-diag, const=10, start=(2,8), len=7
  - tie_breaking_1 (min start row): S1 and S2 both start in row 1 (min row). S3 starts in row 2. S3 is eliminated.
  - tie_breaking_2 (max start col): Compare S1 (start col 7) and S2 (start col 8). S2 has the maximum start column (8 > 7).
  - selected_segment: S2 (start=(1,8)) is selected.
  - output_grid: The pixels of S2 are changed to azure (8). This matches the expected output.