{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import defaultdict\n\n\"\"\"\nIdentify all white (0) pixels in the input grid. Find the longest contiguous \nstraight line segment composed entirely of these white pixels, where the line \ncan be either diagonal (r-c is constant) or anti-diagonal (r+c is constant). \nChange the color of the pixels belonging to this longest segment to azure (8) \nin the output grid, leaving all other pixels unchanged.\n\"\"\"\n\ndef find_longest_segment(white_pixels, grid_dims):\n    \"\"\"\n    Finds the longest diagonal or anti-diagonal segment of white pixels.\n\n    Args:\n        white_pixels (set): A set of (row, col) tuples for white pixels.\n        grid_dims (tuple): A tuple (height, width) of the grid.\n\n    Returns:\n        list: A list of (row, col) tuples representing the longest segment, \n              or an empty list if no white pixels exist.\n    \"\"\"\n    longest_segment = []\n    max_len = 0\n\n    # --- Check Diagonals (r - c = constant) ---\n    diagonals = defaultdict(list)\n    for r, c in white_pixels:\n        diagonals[r - c].append((r, c))\n\n    for diag_key in diagonals:\n        # Sort pixels within the diagonal, e.g., by row, to easily check contiguity\n        sorted_pixels = sorted(diagonals[diag_key])\n        if not sorted_pixels:\n            continue\n\n        current_segment = [sorted_pixels[0]]\n        for i in range(1, len(sorted_pixels)):\n            prev_r, prev_c = sorted_pixels[i-1]\n            curr_r, curr_c = sorted_pixels[i]\n            # Check for contiguity (down-right direction)\n            if curr_r == prev_r + 1 and curr_c == prev_c + 1:\n                current_segment.append((curr_r, curr_c))\n            else:\n                # Segment broken, check if the finished segment is the longest so far\n                if len(current_segment) > max_len:\n                    max_len = len(current_segment)\n                    longest_segment = current_segment\n                # Start a new segment\n                current_segment = [(curr_r, curr_c)]\n        \n        # Check the last segment after the loop\n        if len(current_segment) > max_len:\n            max_len = len(current_segment)\n            longest_segment = current_segment\n\n    # --- Check Anti-Diagonals (r + c = constant) ---\n    anti_diagonals = defaultdict(list)\n    for r, c in white_pixels:\n        anti_diagonals[r + c].append((r, c))\n\n    for anti_diag_key in anti_diagonals:\n        # Sort pixels within the anti-diagonal, e.g., by row, to easily check contiguity\n        sorted_pixels = sorted(anti_diagonals[anti_diag_key])\n        if not sorted_pixels:\n            continue\n            \n        current_segment = [sorted_pixels[0]]\n        for i in range(1, len(sorted_pixels)):\n            prev_r, prev_c = sorted_pixels[i-1]\n            curr_r, curr_c = sorted_pixels[i]\n            # Check for contiguity (down-left direction)\n            if curr_r == prev_r + 1 and curr_c == prev_c - 1:\n                 current_segment.append((curr_r, curr_c))\n            else:\n                # Segment broken, check if the finished segment is the longest so far\n                if len(current_segment) > max_len:\n                    max_len = len(current_segment)\n                    longest_segment = current_segment\n                # Start a new segment\n                current_segment = [(curr_r, curr_c)]\n\n        # Check the last segment after the loop\n        if len(current_segment) > max_len:\n            max_len = len(current_segment)\n            longest_segment = current_segment\n            \n    return longest_segment\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by finding the longest diagonal or anti-diagonal \n    line of white pixels and changing their color to azure.\n\n    Args:\n        input_grid (list of lists): The input grid represented as a 2D list.\n\n    Returns:\n        list of lists: The transformed grid.\n    \"\"\"\n    # Convert to numpy array for easier handling\n    input_np = np.array(input_grid, dtype=int)\n    output_grid = np.copy(input_np)\n    height, width = input_np.shape\n\n    # Find all white pixels (value 0)\n    white_pixels = set()\n    for r in range(height):\n        for c in range(width):\n            if input_np[r, c] == 0:\n                white_pixels.add((r, c))\n\n    # Find the longest diagonal or anti-diagonal segment of white pixels\n    longest_segment_coords = find_longest_segment(white_pixels, (height, width))\n\n    # Change the color of the pixels in the longest segment to azure (8)\n    for r, c in longest_segment_coords:\n        output_grid[r, c] = 8\n\n    # Convert back to list of lists for the required output format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3516,
    "candidates_token_count": 1268,
    "total_token_count": 4784,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.460305,
  "retries": null
}