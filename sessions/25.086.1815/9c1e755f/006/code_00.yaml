task_description: Applies two transformation rules based on the presence and orientation of gray (5) segments to fill adjacent white (0) areas.
grid_properties:
  - size: Variable height and width (1x1 to 30x30).
  - background_color: white (0).
  - active_color: gray (5) acts as a trigger.
  - pattern_colors: Various non-white, non-gray colors (1-4, 6-9).

objects:
  - type: segment
    properties:
      - color: gray (5)
      - contiguity: Maximal contiguous horizontal or vertical line.
  - type: pixel
    properties:
      - color: Any color (0-9)
      - location: (row, column) coordinates
  - type: pattern_source
    properties:
      - location: Below a horizontal gray segment or right of a vertical gray segment.
      - color: Not white (0) and not gray (5).
  - type: pattern_block (for vertical rule)
    properties:
      - location: Connected component of pattern_source pixels right of a vertical gray segment, within its row bounds.
      - shape: Rectangular bounding box.
      - content: A grid of pattern_source pixels.

actions:
  - name: find_gray_segments
    input: input_grid
    output: list of horizontal segments, list of vertical segments (location, extent)
  - name: horizontal_propagation
    trigger: horizontal gray segment at (r, c_start) to (r, c_end)
    input: input_grid, segment location
    output: modified_grid
    steps:
      - For each column `c_source` from `c_start` to `c_end`:
        - Search vertically downwards from `(r + 1, c_source)`.
        - For *each* pixel `(r_source, c_source)` found with a `source_color` (not white or gray):
          - Propagate `source_color` horizontally to the right within row `r_source`.
          - For each column `c_target` from `c_source + 1` to `c_end`:
            - If the pixel at `(r_source, c_target)` is white (0), change its color to `source_color`.
  - name: vertical_tiling
    trigger: vertical gray segment at (r_top, c) to (r_bottom, c)
    input: input_grid, segment location
    output: modified_grid
    steps:
      - Check column `c + 1` for seed pixels (non-white/gray) between rows `r_top` and `r_bottom`.
      - If seeds exist:
        - Find the connected component of non-white/gray pixels containing seeds (bounded by rows `r_top` to `r_bottom`, columns `c + 1` onwards).
        - Determine the bounding box `(r_source_top, r_source_bottom, c_source_left, c_source_right)` of this component (pattern block).
        - If a valid pattern block exists:
          - Calculate pattern height `H_pattern`.
          - Tile upwards: For each target row `r_target` from `r_source_top - 1` down to `r_top`:
            - Calculate the corresponding source row `r_source` using modulo arithmetic based on `H_pattern`.
            - For each target column `c_target` from `c_source_left` to `c_source_right`:
              - If `(r_target, c_target)` is white (0):
                - Get `source_color` from input grid at `(r_source, c_target)`.
                - If `source_color` is not white (0) or gray (5), set `(r_target, c_target)` to `source_color`.

final_grid_construction:
  - Start with a copy of the input grid.
  - Apply horizontal propagation rule for all horizontal gray segments.
  - Apply vertical tiling rule for all vertical gray segments. The order might matter if rules overlap or interact, but based on examples, applying horizontal then vertical seems correct. The modifications happen on the same output grid copy.