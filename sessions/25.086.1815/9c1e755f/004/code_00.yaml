task_context:
  description: The task involves filling white (0) areas based on rules triggered by adjacent gray (5) segments. There are two distinct rules: one for horizontal gray segments and one for vertical gray segments.
  input_output_relationship: The output grid is largely the same as the input, with modifications occurring only in areas that were initially white (0) and are adjacent to or influenced by gray (5) segments according to specific propagation or tiling rules.

components:
  - object: gray_segment
    properties:
      - color: 5 (gray)
      - contiguity: maximal contiguous horizontal or vertical line of gray pixels
    actions:
      - triggers propagation/tiling in adjacent areas

  - object: source_pixel
    properties:
      - color: non-white (0), non-gray (5)
      - location: adjacent to a gray segment (below for horizontal, right for vertical)
    actions:
      - provides the color for horizontal propagation
      - acts as seed for identifying the pattern block for vertical tiling

  - object: pattern_block
    properties:
      - color: contains non-white (0), non-gray (5) pixels
      - contiguity: connected component of source_pixels and other non-white/non-gray pixels
      - location: adjacent to the right of a vertical gray segment, within its row bounds
    actions:
      - serves as the repeating unit for vertical tiling

actions_rules:
  - rule: horizontal_propagation
    trigger: horizontal gray segment (row `r`, cols `c_start` to `c_end`)
    steps:
      - For each column `c` from `c_start` to `c_end`:
        - Search downwards from `(r + 1, c)` to find the first non-white, non-gray pixel.
        - Let this pixel be at `(r_source, c)` with `source_color`.
        - If found:
          - Propagate `source_color` rightwards in row `r_source`.
          - Target columns: `c + 1` to `c_end`.
          - Condition: Fill only if the target pixel `(r_source, c_target)` in the output is currently white (0).

  - rule: vertical_tiling
    trigger: vertical gray segment (col `c`, rows `r_top` to `r_bottom`)
    steps:
      - Identify seed pixels: non-white, non-gray pixels at `(r_adj, c + 1)` where `r_top <= r_adj <= r_bottom`.
      - If seeds exist:
        - Find the bounding box `(r_source_top, r_source_bottom, c_source_left, c_source_right)` of the connected pattern_block containing the seeds, constrained to rows `r_top` to `r_bottom` and columns `>= c + 1`.
        - If a valid pattern_block is found:
          - Tile the pattern (defined by its bounding box in the *input* grid) vertically upwards.
          - Target rows: `r_source_top - 1` down to `r_top`.
          - Source rows for tiling are determined cyclically from the pattern block using modulo arithmetic based on the pattern height.
          - Target columns: `c_source_left` to `c_source_right`.
          - Condition: Fill only if the target pixel `(r_target, c_target)` in the output is currently white (0) and the corresponding source pixel in the pattern block is non-white/non-gray.

assumptions:
  - Gray pixels (5) themselves are never overwritten.
  - Propagation/tiling only affects pixels that are initially white (0).
  - For horizontal propagation, the search for the source pixel starts directly below the segment and proceeds downwards within the same column.
  - For vertical tiling, the pattern block is identified using connectivity of non-white/non-gray pixels adjacent to the right of the segment.