- task: Composite image creation from quadrant sub-regions.
- input_grid:
    - contains_background: color 0 (black).
    - contains_divider_lines:
        - description: Exactly one horizontal line and one vertical line that partition the grid.
        - properties:
            - Each line consists of a single, uniform color (not black).
            - The horizontal and vertical lines share the same color (divider_color).
            - Lines span the full width/height of the grid.
        - location: Identified by row index `h` and column index `v`.
    - contains_quadrants:
        - definition: Four regions (TL, TR, BL, BR) demarcated by the divider lines.
            - TL: rows `0` to `h-1`, cols `0` to `v-1`
            - TR: rows `0` to `h-1`, cols `v+1` to `W-1`
            - BL: rows `h+1` to `H-1`, cols `0` to `v-1`
            - BR: rows `h+1` to `H-1`, cols `v+1` to `W-1`
        - content: Each quadrant contains exactly one significant object.
    - contains_objects:
        - definition: Contiguous regions of a single color.
        - significant_objects:
            - count: Exactly one per quadrant.
            - properties:
                - Color is not background (0) and not divider_color.
                - Minimal bounding box size is exactly 3x3.
- output_grid:
    - size: 6x6.
    - construction: Assembled from the 3x3 minimal bounding boxes of the significant objects found in the input grid's quadrants.
    - mapping:
        - Input TL object's 3x3 bounding box -> Output rows 0-2, cols 0-2.
        - Input TR object's 3x3 bounding box -> Output rows 0-2, cols 3-5.
        - Input BL object's 3x3 bounding box -> Output rows 3-5, cols 0-2.
        - Input BR object's 3x3 bounding box -> Output rows 3-5, cols 3-5.
- transformation_logic:
    1. Find the unique non-black color `C` and indices `h`, `v` such that row `h` and column `v` consist solely of color `C`.
    2. Define the four input quadrants based on `h` and `v`.
    3. For each input quadrant:
        a. Find the single contiguous object `O` whose color is neither 0 nor `C`.
        b. Determine the 3x3 minimal bounding box of `O`.
        c. Extract the pixel data within this 3x3 bounding box.
    4. Create a 6x6 output grid, initially black.
    5. Place the extracted 3x3 data from the TL, TR, BL, BR input objects into the corresponding TL (0:3, 0:3), TR (0:3, 3:6), BL (3:6, 0:3), BR (3:6, 3:6) sections of the output grid.