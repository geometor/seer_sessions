task_description: Identify specific cross patterns and add pixels diagonally relative to the cross center.

objects:
  - name: grid
    type: 2D array of pixels (colors 0-9)
  - name: cross
    description: A pattern identified within the grid.
    properties:
      - center_pixel:
          color: C1 (not white/0)
          position: (r, c)
      - arm_pixels:
          count: 4
          position: Orthogonally adjacent to the center_pixel at (r-1, c), (r+1, c), (r, c-1), (r, c+1).
          color: C2 (all arms have the same color, C2 is not white/0, C1 != C2).
      - diagonal_neighbors:
          position: Diagonally adjacent to the center_pixel at (r±1, c±1).
          color: Must be white/0 (if within grid bounds).

actions:
  - name: find_crosses
    input: input_grid
    output: list of identified cross objects (including center position and color)
    description: Iterate through the grid to locate all patterns matching the 'cross' definition.

  - name: apply_diagonal_placement
    input:
      - output_grid (initially a copy of input_grid)
      - identified_cross (center position (r, c) and center color C1)
    output: modified output_grid
    description: >
      For each identified cross, determine the 8 target positions by applying diagonal offsets
      (dr, dc) from the set {(-2, -2), (-2, 2), (-1, -1), (-1, 1), (1, -1), (1, 1), (2, -2), (2, 2)}
      to the center coordinates (r, c). For each resulting target position (tr, tc), if it is within
      the grid bounds, set the pixel at (tr, tc) in the output_grid to the center color C1.
      The original cross pixels remain unchanged by this specific action (they are part of the initial copy).

process:
  - Initialize the output grid as a copy of the input grid.
  - Find all 'cross' objects in the input grid.
  - For each found 'cross':
      - Get its center coordinates (r, c) and center color C1.
      - Apply the 'apply_diagonal_placement' action using (r, c) and C1 on the output grid.
  - Return the final output grid.
