{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nInitialize the output grid as an identical copy of the input grid.\nScan the input grid to locate all instances of a specific \"cross\" pattern. A cross is defined by:\n    *   A central pixel of color C1 (where C1 is not white).\n    *   Four pixels directly adjacent (up, down, left, right) to the center, all having the same color C2 (where C2 is not white, and C1 is different from C2).\n    *   The four pixels diagonally adjacent to the center must be white (color 0), if those positions exist within the grid boundaries.\nFor each identified cross pattern:\n    a.  Note the coordinates (r, c) of its central pixel.\n    b.  Note the color C1 of its central pixel.\n    c.  Define a set of eight diagonal offset pairs: (-2, -2), (-2, +2), (-1, -1), (-1, +1), (+1, -1), (+1, +1), (+2, -2), (+2, +2).\n    d.  For each offset pair (dr, dc) in the set:\n        i.  Calculate the target coordinates (target_r, target_c) = (r + dr, c + dc).\n        ii. Check if the (target_r, target_c) coordinates are within the bounds of the grid.\n        iii. If the target coordinates are within bounds, change the color of the pixel at (target_r, target_c) in the output grid to the central color C1.\nAfter processing all identified crosses, return the modified output grid.\n\"\"\"\n\ndef _is_within_bounds(r, c, height, width):\n  \"\"\"Checks if coordinates (r, c) are within the grid dimensions.\"\"\"\n  return 0 <= r < height and 0 <= c < width\n\ndef _find_crosses(grid, height, width):\n  \"\"\"\n  Finds all cross patterns in the grid.\n\n  Yields:\n      tuple: (center_row, center_col, center_color)\n             for each valid cross found.\n  \"\"\"\n  cardinal_offsets = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right\n  diagonal_offsets = [(-1, -1), (-1, 1), (1, -1), (1, 1)] # Diagonals\n\n  # Iterate through potential center cells (can't be on the very edge for a full cross)\n  for r in range(1, height - 1):\n      for c in range(1, width - 1):\n          center_color_c1 = grid[r, c]\n\n          # 1. Center must not be white\n          if center_color_c1 == 0:\n              continue\n\n          arm_color_c2 = None\n          arm_coords = []\n          valid_cardinal = True\n\n          # 2. Check cardinal neighbors (arms)\n          for dr, dc in cardinal_offsets:\n              nr, nc = r + dr, c + dc\n              neighbor_color = grid[nr, nc]\n\n              # Arms must not be white and not same color as center\n              if neighbor_color == 0 or neighbor_color == center_color_c1:\n                  valid_cardinal = False\n                  break\n\n              if arm_color_c2 is None:\n                  arm_color_c2 = neighbor_color # Set expected arm color C2\n              elif neighbor_color != arm_color_c2:\n                  valid_cardinal = False # All arms must have same color C2\n                  break\n              # We don't actually need the arm coords for the placement logic now\n              # arm_coords.append((nr, nc))\n\n          if not valid_cardinal or arm_color_c2 is None:\n              continue # Move to next potential center if cardinal checks fail\n\n          # 3. Check diagonal neighbors (must be white)\n          valid_diagonal = True\n          for dr, dc in diagonal_offsets:\n              nr, nc = r + dr, c + dc\n              # Only check if within bounds, edge crosses might not have all diagonals\n              if _is_within_bounds(nr, nc, height, width):\n                  if grid[nr, nc] != 0:\n                      valid_diagonal = False\n                      break # Diagonal neighbor is not white\n\n          if valid_diagonal:\n              # If all checks pass, yield the cross details needed for placement\n              yield r, c, center_color_c1\n\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation: finds crosses and places the center color\n    at specific diagonal offsets from the cross center.\n\n    Args:\n        input_grid: A list of lists representing the input grid.\n\n    Returns:\n        A list of lists representing the transformed output grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_grid_np = np.array(input_grid, dtype=int)\n    height, width = input_grid_np.shape\n\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid_np)\n\n    # Define the required diagonal offsets from the center\n    diagonal_placement_offsets = [\n        (-2, -2), (-2, 2),\n        (-1, -1), (-1, 1),\n        (1, -1), (1, 1),\n        (2, -2), (2, 2)\n    ]\n\n    # Find all cross patterns in the input grid\n    # We only need the center coordinates and center color\n    crosses = list(_find_crosses(input_grid_np, height, width))\n\n    # Process each found cross\n    for center_r, center_c, center_color_c1 in crosses:\n        # Apply all 8 diagonal placement offsets from this center\n        for dr, dc in diagonal_placement_offsets:\n            target_r, target_c = center_r + dr, center_c + dc\n\n            # Check if the target coordinate is within bounds\n            if _is_within_bounds(target_r, target_c, height, width):\n                # Place the center color at the target destination\n                # This overwrites whatever might be there in the output grid\n                output_grid[target_r, target_c] = center_color_c1\n\n    # Convert the final numpy array back to a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 10009,
    "candidates_token_count": 1481,
    "total_token_count": 11490,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.893072,
  "retries": null
}