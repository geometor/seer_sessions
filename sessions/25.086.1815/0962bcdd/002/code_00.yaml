Objects:
  - name: Cross Pattern
    description: A specific 3x3 arrangement of pixels identified in the input grid.
    properties:
      - center_pixel:
          location: (r, c)
          color: C1 (any color except white/0)
      - arm_pixels:
          locations: (r-1, c), (r+1, c), (r, c-1), (r, c+1)
          color: C2 (all must have the same color C2, where C2 != C1 and C2 != white/0)
          condition: Must exist and be within grid bounds.
      - diagonal_pixels:
          locations: (r-1, c-1), (r-1, c+1), (r+1, c-1), (r+1, c+1)
          color: Must be white/0 if within grid bounds.

Actions:
  - name: Apply Knight's Moves
    description: For each identified Cross Pattern, perform an action based on its components.
    inputs:
      - Cross Pattern identified in the input grid.
      - Input grid.
    output:
      - Modified grid.
    steps:
      - Initialize the output grid as a copy of the input grid.
      - Iterate through the input grid to find all valid Cross Patterns.
      - For each found Cross Pattern:
          - Identify the center color C1 and the locations of the four arm pixels (color C2).
          - Define the eight standard knight's move offsets: [(-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1)].
          - For each of the four arm pixels at location (arm_r, arm_c):
              - For each knight's move offset (dr, dc):
                  - Calculate the target coordinate (target_r, target_c) = (arm_r + dr, arm_c + dc).
                  - Check if (target_r, target_c) is within the grid boundaries.
                  - If it is within bounds, set the pixel at (target_r, target_c) in the output grid to the center color C1 (overwriting any existing pixel).
      - Return the final modified output grid.
