{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies if there are exactly two connected objects of the same non-white color\nin the input grid. These two objects must be separated by exactly one row or one\ncolumn consisting entirely of white pixels (0). If such a configuration is found,\nthe separating row or column is filled entirely with green pixels (3) in the\noutput grid. Otherwise, the output grid is identical to the input grid.\n\"\"\"\n\nimport numpy as np\nfrom scipy.ndimage import label, find_objects\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on the described rule.\n\n    Args:\n        input_grid (list of lists): The input grid represented as a 2D list of integers.\n\n    Returns:\n        list of lists: The transformed grid.\n    \"\"\"\n    # Convert input to numpy array for easier processing\n    grid = np.array(input_grid, dtype=int)\n    h, w = grid.shape\n    # Initialize output grid as a copy of the input\n    output_grid = np.copy(grid)\n\n    # Find unique non-white colors present in the grid\n    unique_colors = np.unique(grid[grid != 0])\n\n    # Iterate through each unique non-white color found\n    for color in unique_colors:\n        # Create a mask for the current color\n        mask = (grid == color)\n        \n        # Label connected components (objects) of the current color\n        labeled_array, num_labels = label(mask)\n\n        # Check if exactly two objects of this color were found\n        if num_labels == 2:\n            # Find the slices representing the bounding boxes of the two objects\n            slices = find_objects(labeled_array)\n            \n            # Ensure we have exactly two slices\n            if len(slices) != 2:\n                continue \n\n            slice1, slice2 = slices[0], slices[1]\n\n            # Extract bounding box coordinates (inclusive)\n            r1_min, r1_max_incl = slice1[0].start, slice1[0].stop - 1\n            c1_min, c1_max_incl = slice1[1].start, slice1[1].stop - 1\n            r2_min, r2_max_incl = slice2[0].start, slice2[0].stop - 1\n            c2_min, c2_max_incl = slice2[1].start, slice2[1].stop - 1\n\n            # --- Check for Horizontal Separation ---\n            # Ensure objects are one above the other, potentially swapping for consistent order\n            if r1_min > r2_min:\n                # Swap coordinates if obj1 is below obj2\n                r1_min, r1_max_incl, r2_min, r2_max_incl = r2_min, r2_max_incl, r1_min, r1_max_incl\n                c1_min, c1_max_incl, c2_min, c2_max_incl = c2_min, c2_max_incl, c1_min, c1_max_incl\n                \n            # Check if there is exactly one row between the objects\n            if r2_min == r1_max_incl + 2:\n                sep_row_idx = r1_max_incl + 1\n                # Check if the separating row contains only white pixels (0)\n                if np.all(grid[sep_row_idx, :] == 0):\n                    # Fill the entire separating row with green (3)\n                    output_grid[sep_row_idx, :] = 3\n                    # Return the modified grid as a list of lists\n                    return output_grid.tolist()\n\n            # --- Check for Vertical Separation ---\n            # Ensure objects are side-by-side, potentially swapping for consistent order\n            if c1_min > c2_min:\n                 # Swap coordinates if obj1 is right of obj2\n                r1_min, r1_max_incl, r2_min, r2_max_incl = r2_min, r2_max_incl, r1_min, r1_max_incl\n                c1_min, c1_max_incl, c2_min, c2_max_incl = c2_min, c2_max_incl, c1_min, c1_max_incl\n\n            # Check if there is exactly one column between the objects\n            if c2_min == c1_max_incl + 2:\n                sep_col_idx = c1_max_incl + 1\n                # Check if the separating column contains only white pixels (0)\n                if np.all(grid[:, sep_col_idx] == 0):\n                    # Fill the entire separating column with green (3)\n                    output_grid[:, sep_col_idx] = 3\n                    # Return the modified grid as a list of lists\n                    return output_grid.tolist()\n\n    # If no such pattern was found for any color, return the original grid copy\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3113,
    "candidates_token_count": 1148,
    "total_token_count": 4261,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 31.56343,
  "retries": null
}