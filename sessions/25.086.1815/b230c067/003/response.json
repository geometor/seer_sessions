{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nRecolor azure (8) objects based on the relationship between the parity of the total number of azure pixels and the parity of the size of each individual object.\n\n1. Initialize the output grid as a copy of the input grid.\n2. Find all distinct contiguous objects composed of azure (8) pixels in the input grid, considering pixels connected horizontally or vertically (4-way adjacency) as part of the same object.\n3. Calculate the `total_azure_pixels` by summing the number of pixels in all identified azure objects.\n4. Determine the `total_parity` (Even or Odd) of the `total_azure_pixels`.\n5. Iterate through each identified azure object:\n    a. Calculate the `object_size` (number of pixels) for the current object.\n    b. Determine the `object_parity` (Even or Odd) of the `object_size`.\n    c. Compare the `total_parity` and `object_parity`:\n        i. If `total_parity` is the SAME as `object_parity`, set the `output_color` for this object to Red (2).\n        ii. If `total_parity` is DIFFERENT from `object_parity`, set the `output_color` for this object to Blue (1).\n    d. Recolor all pixels belonging to the current azure object in the output grid with the determined `output_color`.\n6. Return the modified output grid.\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef find_objects(grid, color):\n    \"\"\"\n    Finds all contiguous objects of a specific color in the grid using 4-way adjacency.\n\n    Args:\n        grid (np.array): The input grid.\n        color (int): The color of the objects to find.\n\n    Returns:\n        list: A list of objects, where each object is a set of (row, col) tuples.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = set()\n    objects = []\n\n    for r in range(rows):\n        for c in range(cols):\n            # If pixel is the target color and not yet visited, start a search\n            if grid[r, c] == color and (r, c) not in visited:\n                obj_coords = set()\n                q = deque([(r, c)])\n                visited.add((r, c))\n                obj_coords.add((r, c))\n\n                # Breadth-First Search (BFS) for connected pixels\n                while q:\n                    row, col = q.popleft()\n\n                    # Check neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        # Check bounds and if neighbor is the same color and unvisited\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] == color and (nr, nc) not in visited:\n                            visited.add((nr, nc))\n                            obj_coords.add((nr, nc))\n                            q.append((nr, nc))\n                \n                # Add the found object's coordinates to the list if it's not empty\n                if obj_coords:\n                    objects.append(obj_coords)\n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by recoloring azure objects based on parity rules.\n\n    Args:\n        input_grid (np.array): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.array: A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n    \n    # Define the target color and output colors\n    azure_color = 8\n    blue_color = 1\n    red_color = 2\n    \n    # Find all azure (8) objects using 4-way adjacency\n    azure_objects = find_objects(input_grid, azure_color)\n    \n    # If no azure objects are found, return the original grid\n    if not azure_objects:\n        return output_grid\n        \n    # Calculate the total number of azure pixels\n    total_azure_pixels = sum(len(obj) for obj in azure_objects)\n    \n    # Determine the parity of the total count (True for odd, False for even)\n    total_parity_is_odd = (total_azure_pixels % 2 != 0)\n    \n    # Process each identified azure object\n    for obj_coords in azure_objects:\n        # Calculate the size (pixel count) of the current object\n        object_pixel_count = len(obj_coords)\n        # Determine the parity of the object size (True for odd, False for even)\n        object_parity_is_odd = (object_pixel_count % 2 != 0)\n        \n        # Determine the output color based on comparing total and object parities\n        # Rule: Same parity -> Red(2), Different parity -> Blue(1)\n        if total_parity_is_odd == object_parity_is_odd:\n            output_color = red_color \n        else: \n            output_color = blue_color\n                \n        # Recolor the pixels of the current object in the output grid\n        for r, c in obj_coords:\n            output_grid[r, c] = output_color\n            \n    # Return the final transformed grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 16075,
    "candidates_token_count": 1262,
    "total_token_count": 17337,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.951676,
  "retries": null
}