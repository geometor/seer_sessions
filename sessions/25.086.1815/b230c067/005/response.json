{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nRecolor azure (8) objects based on the parity of their size (pixel count).\n\n1. Create a copy of the input grid to serve as the output grid.\n2. Identify all distinct contiguous objects composed solely of azure (8) pixels \n   within the input grid using 4-way adjacency (horizontal/vertical).\n3. For each identified azure object:\n    a. Calculate its size (number of pixels).\n    b. Determine the parity of the size (Even or Odd).\n    c. If the size is Even, recolor all pixels of the object to Red (2) in the \n       output grid.\n    d. If the size is Odd, recolor all pixels of the object to Blue (1) in the \n       output grid.\n4. Pixels not part of any azure object remain unchanged.\n5. Return the modified output grid.\n\"\"\"\n\ndef find_objects(grid, color):\n    \"\"\"\n    Finds all contiguous objects of a specific color in the grid using 4-way adjacency.\n\n    Args:\n        grid (np.array): The input grid.\n        color (int): The color of the objects to find.\n\n    Returns:\n        list: A list of objects, where each object is a set of (row, col) tuples.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = set()\n    objects = []\n\n    for r in range(rows):\n        for c in range(cols):\n            # If pixel is the target color and not yet visited, start a search\n            if grid[r, c] == color and (r, c) not in visited:\n                obj_coords = set()\n                q = deque([(r, c)])\n                visited.add((r, c))\n                obj_coords.add((r, c))\n\n                # Breadth-First Search (BFS) for connected pixels\n                while q:\n                    row, col = q.popleft()\n\n                    # Check neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        # Check bounds and if neighbor is the same color and unvisited\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] == color and (nr, nc) not in visited:\n                            visited.add((nr, nc))\n                            obj_coords.add((nr, nc))\n                            q.append((nr, nc))\n                \n                # Add the found object's coordinates to the list if it's not empty\n                if obj_coords:\n                    objects.append(obj_coords)\n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by recoloring azure objects based on the parity of their size.\n\n    Args:\n        input_grid (np.array): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.array: A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n    \n    # Define the target color and output colors\n    azure_color = 8\n    blue_color = 1\n    red_color = 2\n    \n    # Find all azure (8) objects using 4-way adjacency\n    azure_objects = find_objects(input_grid, azure_color)\n    \n    # If no azure objects are found, return the original grid\n    if not azure_objects:\n        return output_grid\n        \n    # Process each identified azure object\n    for obj_coords in azure_objects:\n        # Calculate the size (pixel count) of the current object\n        object_size = len(obj_coords)\n        \n        # Determine the output color based on the parity of the object size\n        # Rule: Even size -> Red(2), Odd size -> Blue(1)\n        if object_size % 2 == 0: # Even parity\n            output_color = red_color \n        else: # Odd parity\n            output_color = blue_color\n                \n        # Recolor the pixels of the current object in the output grid\n        for r, c in obj_coords:\n            output_grid[r, c] = output_color\n            \n    # Return the final transformed grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7579,
    "candidates_token_count": 1024,
    "total_token_count": 8603,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.329738,
  "retries": null
}