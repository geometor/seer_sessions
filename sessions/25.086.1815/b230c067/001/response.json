{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies all distinct contiguous objects formed by azure (8) pixels in the input grid.\nCalculates the total number of azure pixels in the grid to determine the 'total parity' (odd or even).\nFor each individual azure object, calculates its pixel count to determine its 'object parity' (odd or even).\nRecolors each azure object based on a rule combining the 'total parity' and the 'object parity':\n- If total parity is EVEN: Objects with ODD pixel counts become blue (1), objects with EVEN pixel counts become red (2).\n- If total parity is ODD: Objects with ODD pixel counts become red (2), objects with EVEN pixel counts become blue (1).\nWhite (0) background pixels remain unchanged.\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef find_objects(grid, color):\n    \"\"\"\n    Finds all contiguous objects of a specific color in the grid.\n\n    Args:\n        grid (np.array): The input grid.\n        color (int): The color of the objects to find.\n\n    Returns:\n        list: A list of objects, where each object is a set of (row, col) tuples.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = set()\n    objects = []\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == color and (r, c) not in visited:\n                # Start BFS to find a new object\n                obj_coords = set()\n                q = deque([(r, c)])\n                visited.add((r, c))\n                obj_coords.add((r, c))\n\n                while q:\n                    row, col = q.popleft()\n\n                    # Check neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] == color and (nr, nc) not in visited:\n                            visited.add((nr, nc))\n                            obj_coords.add((nr, nc))\n                            q.append((nr, nc))\n                \n                if obj_coords:\n                    objects.append(obj_coords)\n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on the described object recoloring rules.\n\n    Args:\n        input_grid (np.array): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.array: A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    # initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n    \n    # Find all azure (8) objects\n    azure_objects = find_objects(input_grid, 8)\n    \n    # Calculate total number of azure pixels\n    total_azure_pixels = sum(len(obj) for obj in azure_objects)\n    \n    # Determine total parity (True for odd, False for even)\n    total_azure_parity_is_odd = (total_azure_pixels % 2 != 0)\n    \n    # Process each object\n    for obj_coords in azure_objects:\n        # Calculate object pixel count and parity\n        object_pixel_count = len(obj_coords)\n        object_parity_is_odd = (object_pixel_count % 2 != 0)\n        \n        # Determine the output color based on total parity and object parity\n        output_color = 0 # Default, should be overwritten\n        if not total_azure_parity_is_odd: # Total is EVEN\n            if object_parity_is_odd:\n                output_color = 1 # Blue\n            else:\n                output_color = 2 # Red\n        else: # Total is ODD\n            if object_parity_is_odd:\n                output_color = 2 # Red\n            else:\n                output_color = 1 # Blue\n                \n        # Recolor the object in the output grid\n        for r, c in obj_coords:\n            output_grid[r, c] = output_color\n            \n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3698,
    "candidates_token_count": 984,
    "total_token_count": 4682,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.077251,
  "retries": null
}