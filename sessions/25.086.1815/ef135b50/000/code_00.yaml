task_context:
  grid_size: fixed 10x10 for examples, but variable in general (up to 30x30)
  colors_present_input: [white (0), red (2)]
  colors_present_output: [white (0), red (2), maroon (9)]
  transformation_type: color substitution based on spatial context

objects:
  - type: pixel
    properties:
      - color: white (0), red (2), maroon (9)
      - location: (row, column)
  - type: shape
    description: contiguous blocks of red (2) pixels, mostly rectangular in examples
    properties:
      - color: red (2)
      - location: set of pixel coordinates

relationships:
  - type: spatial
    description: Relative positioning of pixels within the grid.
    details: Focus is on horizontal alignment within the same row.
    concepts: [left_of, right_of, same_row]

actions:
  - name: identify_target_pixels
    input: input grid
    output: list of coordinates of white (0) pixels
    condition: pixel color is white (0)
  - name: check_horizontal_containment
    input: coordinates of a white (0) pixel, input grid
    output: boolean (true if contained, false otherwise)
    condition: >
      Checks if there exists a red (2) pixel at (row, col_left) where col_left < col
      AND there exists a red (2) pixel at (row, col_right) where col_right > col,
      for the target pixel at (row, col).
  - name: change_color
    input: coordinates of a white (0) pixel that meets the containment condition, output grid
    output: modified output grid
    effect: Changes the color of the pixel at the specified coordinates from white (0) to maroon (9).

transformation_rule:
  description: >
    For each white pixel in the input grid, determine if it is horizontally bounded by red pixels
    within its row. If it is, change its color to maroon in the output grid. Otherwise, keep its color.
    All non-white pixels retain their original color in the output grid.
  steps:
    1. Create a copy of the input grid to serve as the initial output grid.
    2. Iterate through each row and column of the grid.
    3. If the pixel at (row, col) in the input grid is white (0):
       a. Check if there is any red (2) pixel in the same row to the left (columns < col).
       b. Check if there is any red (2) pixel in the same row to the right (columns > col).
       c. If both checks (a and b) are true, set the color of the pixel at (row, col) in the output grid to maroon (9).
    4. Return the final output grid.