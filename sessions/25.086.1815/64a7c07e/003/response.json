{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies all distinct, connected groups (objects) of azure pixels (color 8) in the input grid using 8-way connectivity (including diagonals).\nFor each identified azure object:\n1. Calculate its width based on the horizontal span of its bounding box (max_col - min_col + 1).\n2. Determine the horizontal shift amount, which is equal to the object's width.\n3. Create an output grid initialized with the background color (white, 0).\n4. For every pixel belonging to the object at input position (row, column), calculate its new position (row, column + width) and place the azure color (8) at this new position in the output grid, ensuring the new position is within the grid boundaries.\nReturn the final output grid.\n\"\"\"\n\nimport numpy as np\nimport collections\n\ndef _find_objects(grid, target_color):\n    \"\"\"\n    Finds all connected components of a specific color in a grid using 8-way connectivity (BFS).\n\n    Args:\n        grid (np.array): The input grid.\n        target_color (int): The color of the objects to find.\n\n    Returns:\n        list: A list of dictionaries, where each dictionary represents an object\n              and contains 'pixels' (list of (r, c) tuples), 'bounding_box'\n              (min_r, min_c, max_r, max_c), and 'width'.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n    for r in range(rows):\n        for c in range(cols):\n            # Start BFS if we find an unvisited pixel of the target color\n            if grid[r, c] == target_color and not visited[r, c]:\n                current_object_pixels = []\n                q = collections.deque([(r, c)])\n                visited[r, c] = True\n                min_r, max_r = r, r\n                min_c, max_c = c, c\n\n                # Perform BFS\n                while q:\n                    curr_r, curr_c = q.popleft()\n                    current_object_pixels.append((curr_r, curr_c))\n                    # Update bounding box coordinates\n                    min_r = min(min_r, curr_r)\n                    max_r = max(max_r, curr_r)\n                    min_c = min(min_c, curr_c)\n                    max_c = max(max_c, curr_c)\n\n                    # Explore 8 neighbors (including diagonals)\n                    for dr in [-1, 0, 1]:\n                        for dc in [-1, 0, 1]:\n                            if dr == 0 and dc == 0:\n                                continue # Skip the current cell itself\n                            nr, nc = curr_r + dr, curr_c + dc\n\n                            # Check bounds and if the neighbor is a valid part of the object\n                            if 0 <= nr < rows and 0 <= nc < cols and \\\n                               grid[nr, nc] == target_color and not visited[nr, nc]:\n                                visited[nr, nc] = True\n                                q.append((nr, nc))\n\n                # Calculate properties after finding all pixels of the object\n                width = max_c - min_c + 1\n                bounding_box = (min_r, min_c, max_r, max_c)\n                objects.append({\n                    \"pixels\": current_object_pixels,\n                    \"bounding_box\": bounding_box,\n                    \"width\": width\n                })\n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by shifting azure objects horizontally based on their width.\n\n    Args:\n        input_grid (list[list[int]]): The 2D input grid.\n\n    Returns:\n        list[list[int]]: The transformed 2D output grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    rows, cols = input_np.shape\n\n    # Initialize output grid with background color 0 (white)\n    output_grid = np.zeros_like(input_np)\n\n    object_color = 8 # Azure\n    background_color = 0 # White - used for initialization, already done\n\n    # Find all azure objects in the input grid\n    azure_objects = _find_objects(input_np, object_color)\n\n    # Process each found object\n    for obj in azure_objects:\n        # Calculate the width of the object's bounding box\n        width = obj[\"width\"]\n\n        # Calculate the horizontal shift amount - it's equal to the width\n        shift = width\n\n        # Move each pixel of the current object\n        for r, c in obj[\"pixels\"]:\n            # Calculate the new column index\n            new_c = c + shift\n\n            # Place the object's color in the output grid at the new position,\n            # ensuring it's within the grid bounds.\n            if 0 <= r < rows and 0 <= new_c < cols:\n                 output_grid[r, new_c] = object_color\n\n    # Convert the final numpy array back to a list of lists\n    return output_grid.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5266,
    "candidates_token_count": 1204,
    "total_token_count": 6470,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.744085,
  "retries": null
}