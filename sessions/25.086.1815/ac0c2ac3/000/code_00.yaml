task_description: Create a pattern of concentric squares/rectangles based on non-background pixels from the input.
grid_properties:
  - Input and output grids have the same dimensions.
  - Input grid has a single dominant background color (most frequent color).
objects:
  - type: non_background_pixels
    description: Pixels in the input grid whose color is not the background color.
    properties:
      - color: The specific color value (0-9).
      - position: The (row, column) coordinates in the input grid.
      - distance_from_center: Manhattan distance to the center of the input grid.
  - type: concentric_layers
    description: Squares or rectangles in the output grid, centered, with increasing size.
    properties:
      - layer_index: Integer starting from 0 for the innermost layer (center pixel).
      - size: (2 * layer_index + 1) x (2 * layer_index + 1) relative to the center.
      - color: Determined by the sorted non_background_pixels.
relationships:
  - The set of colors used in the output `concentric_layers` is identical to the set of colors of the input `non_background_pixels`.
  - The color of the `i`-th `concentric_layer` (starting from index 0) is determined by the `i`-th `non_background_pixel` after sorting.
sorting_rule:
  - primary_key: `distance_from_center` (ascending).
  - secondary_key: input `row` index (descending).
  - tertiary_key: input `column` index (descending).
actions:
  - Identify the background color in the input grid.
  - Identify all non_background_pixels (color and position).
  - Calculate the center coordinates of the grid.
  - Calculate the Manhattan distance for each non_background_pixel to the center.
  - Sort the non_background_pixels based on the `sorting_rule`.
  - Create an output grid of the same dimensions as the input.
  - Generate the output grid by drawing concentric layers from the center outwards:
    - For each sorted non_background_pixel `i` (from 0 to N-1, where N is the number of non_background_pixels):
      - Determine the bounding box for the `i`-th layer centered in the grid (size (2i+1)x(2i+1) around the center).
      - Fill this bounding box area in the output grid with the color of the `i`-th sorted pixel. Ensure filling stays within grid boundaries. Later layers overwrite earlier ones in the overlapping regions.