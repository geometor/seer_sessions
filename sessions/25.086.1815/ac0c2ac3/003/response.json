{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nTransforms an input grid by drawing concentric square/rectangular layers centered on the grid. The color of each layer is determined by the color of a non-background pixel from the input grid. The layers are ordered based on the corresponding input pixel's Manhattan distance from the grid center.\n\n1. Analyze Input: Determine dimensions (H, W) and identify the most frequent color as input_background_color.\n2. Identify Pixels: Locate all non-background pixels, recording their color, row (r), and column (c).\n3. Calculate Center: Find center coordinates: center_r = (H - 1) // 2, center_c = (W - 1) // 2.\n4. Calculate Distances: Compute Manhattan distance from each non-background pixel to the center.\n5. Sort Pixels: Sort non-background pixels based on:\n    a. Manhattan distance (ascending).\n    b. Original row index (descending).\n    c. Original column index (descending).\n   Let the sorted list be sorted_pixels with n pixels.\n6. Determine Output Background: The color of the last pixel (index n-1) in sorted_pixels.\n7. Initialize Output Grid: Create an H x W grid filled with the output_background_color.\n8. Draw Concentric Layers: Iterate through sorted_pixels from index i = n - 2 down to 0.\n    a. Get color C_i from sorted_pixels[i].\n    b. Define layer boundaries: min/max row/col = center +/- i.\n    c. Fill the region within these boundaries in the output grid with C_i, overwriting previous colors. Clip to grid dimensions.\n9. Return Output: The final grid.\n\"\"\"\n\ndef find_background_color(grid):\n    \"\"\"Finds the most frequent color in the grid.\"\"\"\n    counts = Counter(grid.flatten())\n    if not counts:\n        return 0 # Default for empty grid\n    # Find the color with the highest count\n    background_color = counts.most_common(1)[0][0]\n    return background_color\n\ndef get_non_background_pixels(grid, background_color):\n    \"\"\"Finds all pixels that are not the background color.\"\"\"\n    pixels = []\n    height, width = grid.shape\n    for r in range(height):\n        for c in range(width):\n            color = grid[r, c]\n            if color != background_color:\n                pixels.append({'color': color, 'r': r, 'c': c})\n    return pixels\n\ndef calculate_center(height, width):\n    \"\"\"Calculates the center coordinates of the grid.\"\"\"\n    # Note: uses integer division for potentially even dimensions\n    center_r = (height - 1) // 2\n    center_c = (width - 1) // 2\n    return center_r, center_c\n\ndef calculate_manhattan_distance(r1, c1, r2, c2):\n    \"\"\"Calculates the Manhattan distance between two points.\"\"\"\n    return abs(r1 - r2) + abs(c1 - c2)\n\ndef transform(input_grid):\n    \"\"\"Applies the transformation logic to the input grid.\"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_grid_np = np.array(input_grid, dtype=int)\n    height, width = input_grid_np.shape\n\n    # 1. Analyze Input: Find background color\n    background_color = find_background_color(input_grid_np)\n\n    # 2. Identify Pixels: Get non-background pixels\n    non_bg_pixels_info = get_non_background_pixels(input_grid_np, background_color)\n\n    # Handle case with no non-background pixels (return grid filled with input background)\n    if not non_bg_pixels_info:\n        output_grid = np.full((height, width), background_color, dtype=int)\n        return output_grid.tolist()\n\n    # 3. Calculate Center\n    center_r, center_c = calculate_center(height, width)\n\n    # 4. Calculate Distances\n    pixels_with_dist = []\n    for pixel in non_bg_pixels_info:\n        dist = calculate_manhattan_distance(pixel['r'], pixel['c'], center_r, center_c)\n        pixels_with_dist.append({\n            'color': pixel['color'],\n            'dist': dist,\n            'r': pixel['r'],\n            'c': pixel['c']\n        })\n\n    # 5. Sort Pixels: distance (asc), row (desc), column (desc)\n    # Use negative row/col for descending sort order with tuple sorting\n    sorted_pixels = sorted(pixels_with_dist, key=lambda p: (p['dist'], -p['r'], -p['c']))\n\n    num_layers = len(sorted_pixels)\n\n    # 6. Determine Output Background: color of the furthest pixel (last in sorted list)\n    output_background_color = sorted_pixels[num_layers - 1]['color']\n\n    # 7. Initialize Output Grid: Fill with the determined background color\n    output_grid = np.full((height, width), output_background_color, dtype=int)\n\n    # Handle case with only one non-background pixel (already handled by background fill)\n    if num_layers <= 1:\n        return output_grid.tolist()\n\n    # 8. Draw Concentric Layers: Iterate from second-furthest (n-2) down to closest (0)\n    # The index 'i' corresponds to the distance rank and also the layer size extension\n    for i in range(num_layers - 2, -1, -1):\n        color_to_draw = sorted_pixels[i]['color']\n\n        # Calculate layer boundaries for layer 'i'\n        # The layer size is effectively (2*i + 1) x (2*i + 1) centered\n        min_r = center_r - i\n        max_r = center_r + i\n        min_c = center_c - i\n        max_c = center_c + i\n\n        # Clip boundaries to the grid dimensions\n        # Using max(0, ...) and min(dim-1, ...) ensures indices are valid\n        start_row = max(0, min_r)\n        end_row = min(height - 1, max_r)\n        start_col = max(0, min_c)\n        end_col = min(width - 1, max_c)\n\n        # Fill the layer using numpy slicing (inclusive end index needed for slicing)\n        # Check if the calculated bounds are valid before slicing\n        if start_row <= end_row and start_col <= end_col:\n             output_grid[start_row : end_row + 1, start_col : end_col + 1] = color_to_draw\n\n    # 9. Return Output: Convert back to list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8914,
    "candidates_token_count": 1603,
    "total_token_count": 10517,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 24.26123,
  "retries": null
}