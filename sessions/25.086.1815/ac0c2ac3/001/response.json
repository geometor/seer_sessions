{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\nimport math\n\n\"\"\"\nTransforms the input grid by identifying non-background pixels, sorting them based on their Manhattan distance from the grid center (with row and column as tie-breakers), and then drawing concentric squares/rectangles centered in the output grid using the sorted colors.\n\n1. Determine the grid dimensions (H, W).\n2. Find the background color (most frequent color in the input).\n3. Identify all non-background pixels, storing their color, row, and column.\n4. Calculate the grid center coordinates (center_r, center_c).\n5. For each non-background pixel, calculate its Manhattan distance to the center.\n6. Sort the non-background pixels:\n    - Primarily by Manhattan distance (ascending).\n    - Secondarily by original row index (descending).\n    - Tertiarily by original column index (descending).\n7. Create an output grid of the same dimensions, initialized (e.g., with zeros).\n8. Iterate through the sorted pixels (index `i`, color `C_i`):\n    - Calculate the boundaries of the `i`-th layer (a square/rectangle of size (2i+1)x(2i+1) centered).\n    - Fill the cells within these boundaries (clipped to the grid dimensions) in the output grid with color `C_i`. Later layers overwrite earlier ones.\n9. Return the final output grid.\n\"\"\"\n\ndef find_background_color(grid):\n    \"\"\"Finds the most frequent color in the grid.\"\"\"\n    counts = Counter(grid.flatten())\n    if not counts:\n        return 0 # Default background if grid is empty, though constraints say min 1x1\n    # Find the color with the highest count\n    background_color = counts.most_common(1)[0][0]\n    return background_color\n\ndef get_non_background_pixels(grid, background_color):\n    \"\"\"Finds all pixels that are not the background color.\"\"\"\n    pixels = []\n    height, width = grid.shape\n    for r in range(height):\n        for c in range(width):\n            color = grid[r, c]\n            if color != background_color:\n                pixels.append({'color': color, 'r': r, 'c': c})\n    return pixels\n\ndef calculate_center(height, width):\n    \"\"\"Calculates the center coordinates of the grid.\"\"\"\n    center_r = (height - 1) // 2\n    center_c = (width - 1) // 2\n    return center_r, center_c\n\ndef calculate_manhattan_distance(r1, c1, r2, c2):\n    \"\"\"Calculates the Manhattan distance between two points.\"\"\"\n    return abs(r1 - r2) + abs(c1 - c2)\n\ndef transform(input_grid):\n    \"\"\"Applies the transformation logic to the input grid.\"\"\"\n    input_grid_np = np.array(input_grid, dtype=int)\n    height, width = input_grid_np.shape\n\n    # Find background color\n    background_color = find_background_color(input_grid_np)\n\n    # Get non-background pixels\n    non_bg_pixels_info = get_non_background_pixels(input_grid_np, background_color)\n\n    # Calculate center\n    center_r, center_c = calculate_center(height, width)\n\n    # Calculate distances and store with pixel info\n    pixels_with_dist = []\n    for pixel in non_bg_pixels_info:\n        dist = calculate_manhattan_distance(pixel['r'], pixel['c'], center_r, center_c)\n        pixels_with_dist.append({\n            'color': pixel['color'],\n            'dist': dist,\n            'r': pixel['r'],\n            'c': pixel['c']\n        })\n\n    # Sort pixels: distance (asc), row (desc), column (desc)\n    # Note the negative sign for descending order on row and col\n    sorted_pixels = sorted(pixels_with_dist, key=lambda p: (p['dist'], -p['r'], -p['c']))\n\n    # Initialize output grid (start with zeros, or any color that will be overwritten)\n    output_grid = np.zeros_like(input_grid_np)\n\n    # Draw concentric layers\n    num_layers = len(sorted_pixels)\n    for i in range(num_layers):\n        color_to_draw = sorted_pixels[i]['color']\n        \n        # Calculate layer boundaries\n        min_r = center_r - i\n        max_r = center_r + i\n        min_c = center_c - i\n        max_c = center_c + i\n\n        # Fill the layer, respecting grid boundaries\n        for r in range(height):\n            for c in range(width):\n                if min_r <= r <= max_r and min_c <= c <= max_c:\n                     # Check bounds just in case, though logic ensures r/c are valid indices\n                     #if 0 <= r < height and 0 <= c < width: # Not strictly necessary if range is correct\n                     output_grid[r, c] = color_to_draw\n                         \n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3691,
    "candidates_token_count": 1197,
    "total_token_count": 4888,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.885347,
  "retries": null
}