task_description: Transforms an input grid by creating and vertically stacking four blocks of rows (A, B, C, B) derived from the input grid.
input_grid:
  properties:
    type: 2D array of integers (pixels)
    height: H
    width: W
    colors: white (0), red (2) in ex1; white (0), azure (8) in ex2.

transformation_steps:
  - step: Define Block A
    source: Input grid
    rows: 0 to H-1 (all rows)
    output: Block A (copy of input)
    height: H
  - step: Define Block B
    source: Input grid
    rows_selected: 0 to H-2 (all rows except the last)
    action: Perform a vertical *upward* cycle shift on the selected rows (Row 0 moves to position H-2, Row 1 moves to position 0, etc.).
    output: Block B
    height: H-1 (if H > 1), 0 (if H = 1)
  - step: Define Block C
    source: Input grid
    rows_selected: 1 to H-1 (all rows except the first)
    action: None (copy selected rows)
    output: Block C
    height: H-1 (if H > 1), 0 (if H = 1)
  - step: Construct Output Grid
    action: Vertically stack the blocks in the order A, B, C, B.
    components: [Block A, Block B, Block C, Block B]
    height: H + 3 * (H-1) (if H > 1), H (if H = 1)
    width: W

derived_properties:
  - Output grid height calculation:
      if H > 1: H_out = H + (H-1) + (H-1) + (H-1) = 4*H - 3
      if H = 1: H_out = H + 0 + 0 + 0 = 1
  - Edge Case (H=1): If the input height is 1, Block B and Block C are empty. The output is just Block A (the original input).

observations:
  - The width of the grid remains unchanged.
  - The transformation only involves selecting, rearranging (cycling), and stacking rows. Pixel values within rows are not altered.
  - Example 1 failed because Block B was constructed using a downward cycle instead of an upward cycle.
  - Example 2 succeeded because for H=3, the rows for Block B are [0, 1]. An upward cycle results in [1, 0], and a downward cycle also results in [1, 0].