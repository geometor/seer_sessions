{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nIdentifies a potential contiguous vertical gray line (color 5). If found, it searches for a maroon pixel (color 9). If the maroon pixel exists and is located immediately to the left of the gray line (same row as one of the gray pixels, column index - 1), a transformation is triggered. The transformation calculates a specific bounding box based on the gray line's position/height and the maroon pixel's position. It then changes all yellow pixels (color 4) located within this calculated bounding box to orange (color 7). If the trigger condition is not met, the input grid is returned unchanged.\n\"\"\"\n\ndef find_vertical_contiguous_gray_line(grid):\n    \"\"\"\n    Finds all gray pixels (5) and checks if they form a single contiguous vertical line.\n    Returns the column index (c_gray), min row index (r_min), and max row index (r_max)\n    if such a line is found, otherwise returns None, None, None.\n    \"\"\"\n    rows, cols = grid.shape\n    gray_pixels = []\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == 5:\n                gray_pixels.append((r, c))\n\n    if not gray_pixels:\n        return None, None, None # No gray pixels\n\n    # Check if all gray pixels are in the same column\n    first_col = gray_pixels[0][1]\n    if not all(c == first_col for r, c in gray_pixels):\n        return None, None, None # Not all in the same column (not vertical)\n\n    # Check for vertical contiguity\n    gray_rows = sorted([r for r, c in gray_pixels])\n    min_row, max_row = gray_rows[0], gray_rows[-1]\n    \n    # Verify contiguity: the number of gray pixels must match the span,\n    # and they must form a sequence without gaps.\n    is_contiguous = all(gray_rows[i] == min_row + i for i in range(len(gray_rows)))\n    \n    if not is_contiguous:\n        return None, None, None # Not contiguous\n\n    return first_col, min_row, max_row\n\ndef find_maroon_pixel(grid):\n    \"\"\"\n    Finds the coordinates (row, col) of the first maroon pixel (9) encountered.\n    Returns (r_m, c_m) or None if not found.\n    \"\"\"\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == 9:\n                return r, c\n    return None # No maroon pixel found\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule based on the gray line, maroon pixel,\n    and calculated bounding box.\n    \"\"\"\n    input_grid_np = np.array(input_grid, dtype=int)\n    rows, cols = input_grid_np.shape\n\n    # 1. Identify structures: vertical contiguous gray line and maroon pixel\n    c_gray, r_min_gray, r_max_gray = find_vertical_contiguous_gray_line(input_grid_np)\n    maroon_pos = find_maroon_pixel(input_grid_np)\n\n    # Initialize trigger flag\n    trigger = False\n\n    # 2. Check Trigger Condition\n    if c_gray is not None and maroon_pos is not None:\n        r_m, c_m = maroon_pos\n        # Check if maroon is immediately left of the gray line\n        is_left = (c_m == c_gray - 1)\n        # Check if maroon's row aligns with the gray line's vertical span\n        is_aligned = (r_min_gray <= r_m <= r_max_gray)\n\n        if is_left and is_aligned:\n            trigger = True\n\n    # 3. Perform Transformation (if triggered)\n    if trigger:\n        # Calculate bounding box parameters based on findings from Example 3 analysis\n        height_gray = r_max_gray - r_min_gray + 1\n        r_start = r_min_gray\n        # Formula derived from Example 3: r_end = r_max_gray + (r_m - r_min_gray + 1)\n        r_end = r_max_gray + (r_m - r_min_gray + 1) \n        # Formula derived from Example 3: c_start = c_gray + (c_gray - c_m + 1)\n        c_start = c_gray + (c_gray - c_m + 1) \n        # Formula derived from Example 3: c_end = c_gray + height_gray * 2\n        c_end = c_gray + height_gray * 2 \n\n        # Create a copy of the grid to modify\n        output_grid_np = np.copy(input_grid_np)\n\n        # Iterate through the grid pixels\n        for r in range(rows):\n            for c in range(cols):\n                # Check if the pixel is yellow (4)\n                if input_grid_np[r, c] == 4:\n                    # Check if the pixel is within the calculated bounding box\n                    if r_start <= r <= r_end and c_start <= c <= c_end:\n                        # Change the color to orange (7) in the output grid\n                        output_grid_np[r, c] = 7\n        \n        # Return the modified grid as a list of lists\n        return output_grid_np.tolist()\n    else:\n        # If trigger condition not met, return the original input grid\n        return input_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 12745,
    "candidates_token_count": 1324,
    "total_token_count": 14069,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.630849,
  "retries": null
}