{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies all distinct contiguous non-white objects in the input grid (using 8-way connectivity).\nFor each object, calculates its color and height (span of rows).\nSorts the objects based on their height in descending order.\nCreates an output grid where:\n  - The height is the maximum height found among all objects.\n  - The width is the total number of objects found.\n  - Each column corresponds to a sorted object.\n  - The j-th column is filled from the top with the j-th object's color for a number of rows equal to its height.\n  - The remaining cells in the column are filled with the background color (white, 0).\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef find_objects(grid):\n    \"\"\"\n    Finds all contiguous objects of the same non-white color in the grid.\n\n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        list: A list of dictionaries, each representing an object with keys:\n              'color' (int): The color of the object.\n              'min_row' (int): The minimum row index occupied by the object.\n              'max_row' (int): The maximum row index occupied by the object.\n              'height' (int): The calculated height of the object.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n    \n    # Define 8-way connectivity neighbors (row_offset, col_offset)\n    neighbors = [(-1, -1), (-1, 0), (-1, 1),\n                 ( 0, -1),          ( 0, 1),\n                 ( 1, -1), ( 1, 0), ( 1, 1)]\n\n    for r in range(rows):\n        for c in range(cols):\n            # If pixel is non-white and not yet visited, start BFS for a new object\n            if grid[r, c] != 0 and not visited[r, c]:\n                color = grid[r, c]\n                min_r, max_r = r, r\n                \n                q = deque([(r, c)])\n                visited[r, c] = True\n                current_object_pixels = set([(r, c)])\n\n                while q:\n                    curr_r, curr_c = q.popleft()\n                    \n                    # Update min/max row for the object\n                    min_r = min(min_r, curr_r)\n                    max_r = max(max_r, curr_r)\n\n                    # Check neighbors\n                    for dr, dc in neighbors:\n                        nr, nc = curr_r + dr, curr_c + dc\n\n                        # Check bounds, color match, and visited status\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] == color and not visited[nr, nc]:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n                            current_object_pixels.add((nr, nc))\n                \n                # Calculate height and store object info\n                height = max_r - min_r + 1\n                objects.append({\n                    'color': color,\n                    'min_row': min_r,\n                    'max_row': max_r,\n                    'height': height\n                })\n                \n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on identified object properties.\n\n    Args:\n        input_grid (np.array): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.array: A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    # 1. Find all non-white objects and their properties\n    objects = find_objects(np.array(input_grid))\n\n    # Handle edge case: no objects found\n    if not objects:\n        # Return a 1x1 white grid or based on specific requirements if any\n        return np.zeros((1, 1), dtype=int) \n\n    # 2. Sort objects by height in descending order\n    # Using a stable sort, relative order of equal height objects is maintained\n    sorted_objects = sorted(objects, key=lambda obj: obj['height'], reverse=True)\n\n    # 3. Determine output grid dimensions\n    max_height = 0\n    if sorted_objects: # Ensure there is at least one object before accessing\n        max_height = sorted_objects[0]['height'] \n    num_objects = len(sorted_objects)\n\n    # 4. Initialize output grid with background color (0)\n    output_grid = np.zeros((max_height, num_objects), dtype=int)\n\n    # 5. Populate output grid column by column based on sorted objects\n    for j, obj in enumerate(sorted_objects):\n        color = obj['color']\n        height = obj['height']\n        # Fill the top 'height' cells of column 'j' with the object's color\n        output_grid[:height, j] = color\n        # The rest of the column remains 0 (background) due to initialization\n\n    return output_grid.tolist() # Return as list of lists per requirement\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4103,
    "candidates_token_count": 1203,
    "total_token_count": 5306,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.382986,
  "retries": null
}