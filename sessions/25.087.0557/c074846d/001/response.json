{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Tuple\n\n\"\"\"\nTransforms the input grid by performing a 90-degree clockwise rotation of red (2) pixels around a gray (5) pivot pixel.\nThe original red pixels are changed to green (3) in place, and the rotated positions are marked with red (2).\n\n1. Initialize the output grid as a copy of the input grid.\n2. Find the coordinates (gr, gc) of the single gray (5) pixel (pivot).\n3. Find the coordinates of all red (2) pixels.\n4. For each red pixel (r, c):\n   a. Change the pixel at (r, c) in the output grid to green (3).\n   b. Calculate the relative position to the pivot: dx = r - gr, dy = c - gc.\n   c. Rotate the relative position 90 degrees clockwise: new_dx = dy, new_dy = -dx.\n   d. Calculate the new absolute position: new_r = gr + new_dx, new_c = gc + new_dy.\n   e. If (new_r, new_c) is within the grid bounds, change the pixel at (new_r, new_c) in the output grid to red (2).\n5. Return the modified output grid.\n\"\"\"\n\ndef find_pixels(grid: np.ndarray, color: int) -> List[Tuple[int, int]]:\n    \"\"\"Finds all pixels of a specific color in the grid.\"\"\"\n    coords = np.argwhere(grid == color)\n    # Convert numpy array coordinates to list of tuples (row, col)\n    return [tuple(coord) for coord in coords]\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Applies the rotation and color change transformation.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    grid_np = np.array(input_grid, dtype=int)\n    output_grid = grid_np.copy()\n    height, width = grid_np.shape\n\n    # Find the gray pivot pixel (color 5)\n    # Assumes exactly one gray pixel exists based on examples\n    pivot_coords_list = find_pixels(grid_np, 5)\n    if not pivot_coords_list:\n        # Handle cases where the pivot might be missing, though not seen in examples\n        return input_grid # Or raise an error\n    gr, gc = pivot_coords_list[0]\n\n    # Find all red pixels (color 2)\n    red_pixel_coords = find_pixels(grid_np, 2)\n\n    # Process each red pixel\n    for r, c in red_pixel_coords:\n        # Change original red pixel to green in the output grid\n        output_grid[r, c] = 3\n\n        # Calculate relative position to pivot\n        dx = r - gr\n        dy = c - gc\n\n        # Rotate 90 degrees clockwise\n        new_dx = dy\n        new_dy = -dx\n\n        # Calculate new absolute position\n        new_r = gr + new_dx\n        new_c = gc + new_dy\n\n        # Check if the new position is within grid bounds\n        if 0 <= new_r < height and 0 <= new_c < width:\n            # Place a new red pixel at the rotated position in the output grid\n            output_grid[new_r, new_c] = 2\n\n    # Convert the final numpy array back to a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3246,
    "candidates_token_count": 803,
    "total_token_count": 4049,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.688556,
  "retries": null
}