task_description: "Transform a grid based on the interaction between a red object and a gray pivot pixel."
elements:
  - element: background
    color: white (0)
    role: "Fills empty space."
  - element: pivot
    color: gray (5)
    count: 1
    properties:
      - static
      - acts as a center for rotation
    role: "Reference point for the transformation."
  - element: primary_object
    color: red (2)
    count: "one or more, possibly forming a contiguous shape"
    properties:
      - changes color to green (3) in place
      - its shape and relative position to the pivot determine the location of the secondary_object
    role: "The object being transformed."
  - element: secondary_object
    color: red (2)
    count: "same number of pixels as primary_object"
    properties:
      - shape matches the primary_object
      - appears in the output grid
      - position is determined by rotating the primary_object's position 90 degrees clockwise around the pivot
    role: "The result of the positional transformation."
  - element: transformed_object
    color: green (3)
    count: "same number of pixels as primary_object"
    properties:
      - occupies the original position of the primary_object
    role: "The result of the color transformation."
actions:
  - action: identify_pivot
    input: grid
    target: gray (5) pixel
    output: coordinates of the pivot (gr, gc)
  - action: identify_primary_object
    input: grid
    target: red (2) pixels
    output: list of coordinates {(r, c)} for all red pixels
  - action: color_change
    input_pixels: primary_object coordinates {(r, c)}
    output_grid: modify pixel at (r, c)
    new_color: green (3)
  - action: rotate_and_place
    input_pixels: primary_object coordinates {(r, c)}
    pivot: pivot coordinates (gr, gc)
    output_grid: modify pixels at calculated new positions
    new_color: red (2)
    logic: |
      For each input red pixel (r, c):
      1. Calculate relative position: dx = r - gr, dy = c - gc
      2. Rotate 90 degrees clockwise: new_dx = dy, new_dy = -dx
      3. Calculate new absolute position: new_r = gr + new_dx, new_c = gc + new_dy
      4. Place red pixel at (new_r, new_c) if within bounds.
relationships:
  - relationship: rotation
    subject: primary_object
    object: secondary_object
    center: pivot
    details: "The secondary_object's position is a 90-degree clockwise rotation of the primary_object's position around the pivot."
  - relationship: color_replacement
    subject: primary_object
    object: transformed_object
    details: "The transformed_object replaces the primary_object at its original location by changing its color from red to green."
