Input Grid:
  - type: object
  - properties:
      - shape: 4x9 grid of pixels
      - contains: two 4x4 subgrids separated by a vertical gray line
      - separator: vertical line of gray (5) pixels in column index 4

Subgrids:
  - name: Left Subgrid (L)
  - type: object
  - properties:
      - source: columns 0-3 of the input grid
      - shape: 4x4 grid
  - name: Right Subgrid (R)
  - type: object
  - properties:
      - source: columns 5-8 of the input grid
      - shape: 4x4 grid

Derived Properties:
  - name: count_L
  - type: property
  - value: count of non-white (not 0) pixels in Left Subgrid
  - name: count_R
  - type: property
  - value: count of non-white (not 0) pixels in Right Subgrid

Actions:
  - name: Compare Counts
  - inputs: [count_L, count_R]
  - logic: determine if count_L > count_R, count_L == count_R, or count_R > count_L
  - name: Overlay
  - inputs: [base_grid, top_grid]
  - process: create a result grid initialized with base_grid; for each pixel in top_grid, if it is non-white, copy its value to the corresponding position in the result grid
  - output: 4x4 combined grid

Transformation Rule:
  - compares count_L and count_R
  - if count_L > count_R: result is Overlay(R, L)
  - if count_L == count_R: result is Overlay(R, L)
  - if count_R > count_L:
      - if count_R - count_L == 1: result is L
      - if count_R - count_L > 1: result is Overlay(L, R)

Output Grid:
  - type: object
  - properties:
      - shape: 4x4 grid
      - content: determined by the Transformation Rule