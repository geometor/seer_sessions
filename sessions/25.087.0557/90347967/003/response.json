{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nRotates all non-background pixels 180 degrees around a central pivot \npixel identified by the color gray (5). The background color is white (0).\nThe output grid has the same dimensions as the input grid. Pixels rotated \noutside the grid boundaries are discarded (though based on examples, this may not occur).\n\"\"\"\n\nimport numpy as np\n\ndef find_pivot(grid, pivot_color=5):\n    \"\"\"\n    Finds the coordinates (row, col) of the first pixel with the pivot_color.\n\n    Args:\n        grid (np.ndarray): The grid to search within.\n        pivot_color (int): The color value of the pivot pixel.\n\n    Returns:\n        tuple[int, int] | None: The (row, col) of the pivot, or None if not found.\n    \"\"\"\n    pivot_coords = np.where(grid == pivot_color)\n    if len(pivot_coords[0]) > 0:\n        # Return the coordinates of the first occurrence\n        return int(pivot_coords[0][0]), int(pivot_coords[1][0])\n    else:\n        # Should not happen based on task description, but handle defensively\n        return None \n\ndef transform(input_grid):\n    \"\"\"\n    Rotates the non-background pixels of the input grid 180 degrees \n    around the gray (5) pivot pixel.\n\n    Args:\n        input_grid (list[list[int]]): The input grid as a 2D list of integers.\n\n    Returns:\n        list[list[int]]: The transformed grid as a 2D list of integers.\n    \"\"\"\n    input_np = np.array(input_grid, dtype=int)\n    rows, cols = input_np.shape\n    background_color = 0\n    pivot_color = 5\n\n    # 1. Initialize output grid with background color\n    output_np = np.full_like(input_np, background_color)\n\n    # 2. Find the coordinates (center_row, center_col) of the gray pivot pixel\n    center_coords = find_pivot(input_np, pivot_color)\n    \n    # Handle case where pivot is not found (unlikely based on examples)\n    if center_coords is None:\n        print(f\"Warning: Pivot color ({pivot_color}) not found in input grid. Returning original grid.\")\n        return input_grid \n        \n    center_row, center_col = center_coords\n\n    # 3. Iterate through every pixel in the input grid\n    for input_row in range(rows):\n        for input_col in range(cols):\n            color = input_np[input_row, input_col]\n\n            # 4. If the color is not the background color\n            if color != background_color:\n                # a. Calculate relative coordinates to the pivot\n                relative_row = input_row - center_row\n                relative_col = input_col - center_col\n\n                # b. Apply 180-degree rotation transformation:\n                # (x, y) rotated 180 deg becomes (-x, -y)\n                # In grid coords (row, col): relative_row is like y, relative_col is like x\n                # new_relative_col = -relative_col\n                # new_relative_row = -relative_row \n                new_relative_row = -relative_row\n                new_relative_col = -relative_col\n\n                # c. Calculate new absolute coordinates based on the pivot\n                output_row = center_row + new_relative_row\n                output_col = center_col + new_relative_col\n\n                # d. Check if the new coordinates are within the grid bounds\n                if 0 <= output_row < rows and 0 <= output_col < cols:\n                    # Place the original color at the new rotated position\n                    output_np[output_row, output_col] = color\n                # else:\n                    # Pixel rotates out of bounds, effectively discarded (left as background)\n\n    # 5. Convert the result back to list of lists for the required output format\n    output_grid = output_np.tolist()\n    \n    # Return the completed output grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5246,
    "candidates_token_count": 965,
    "total_token_count": 6211,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 22.530954,
  "retries": null
}