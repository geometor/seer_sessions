{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nRotates all non-background pixels 90 degrees clockwise around a central pivot \npixel identified by the color gray (5). The background color is white (0).\nThe output grid has the same dimensions as the input grid. Pixels rotated \noutside the grid boundaries are discarded.\n\"\"\"\n\ndef find_pivot(grid, pivot_color=5):\n    \"\"\"Finds the coordinates of the first pixel with the pivot_color.\"\"\"\n    for r_idx, row in enumerate(grid):\n        for c_idx, color in enumerate(row):\n            if color == pivot_color:\n                return r_idx, c_idx\n    # Raise an error or return None if pivot not found? \n    # For this task, based on examples, we assume it always exists.\n    return None \n\ndef transform(input_grid):\n    \"\"\"\n    Rotates the non-background pixels of the input grid 90 degrees clockwise \n    around the gray (5) pixel.\n\n    Args:\n        input_grid (list[list[int]]): The input grid as a 2D list of integers.\n\n    Returns:\n        list[list[int]]: The transformed grid as a 2D list of integers.\n    \"\"\"\n    input_np = np.array(input_grid, dtype=int)\n    rows, cols = input_np.shape\n    background_color = 0\n    pivot_color = 5\n\n    # Initialize output grid with background color\n    output_np = np.full_like(input_np, background_color)\n\n    # 1. Locate the coordinates (center_row, center_col) of the gray pixel\n    center_coords = find_pivot(input_np, pivot_color)\n    if center_coords is None:\n        # Handle case where pivot is not found - maybe return input or raise error\n        # Based on task description, assuming pivot always exists.\n        # For safety, return the input grid unchanged if no pivot.\n        print(\"Warning: Pivot color (gray, 5) not found in input grid.\")\n        return input_grid \n    center_row, center_col = center_coords\n\n    # 2. Iterate through every pixel in the input grid\n    for input_row in range(rows):\n        for input_col in range(cols):\n            color = input_np[input_row, input_col]\n\n            # 3. If the color is not the background color\n            if color != background_color:\n                # a. Calculate relative coordinates\n                relative_row = input_row - center_row\n                relative_col = input_col - center_col\n\n                # b. Apply 90-degree clockwise rotation transformation\n                # (x, y) rotated +90 deg becomes (y, -x)\n                # In grid coords (row, col):\n                # relative_row is like y, relative_col is like x\n                # new_relative_col = relative_row\n                # new_relative_row = -relative_col \n                # Let's re-verify the NL program logic:\n                # NL: new_relative_row = relative_col, new_relative_col = -relative_row\n                new_relative_row = relative_col\n                new_relative_col = -relative_row\n\n                # c. Calculate new absolute coordinates\n                output_row = center_row + new_relative_row\n                output_col = center_col + new_relative_col\n\n                # d. Check if new coordinates are within bounds and place the color\n                if 0 <= output_row < rows and 0 <= output_col < cols:\n                    output_np[output_row, output_col] = color\n\n    # Convert back to list of lists for the required output format\n    output_grid = output_np.tolist()\n    \n    # 4. Return the completed output grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2264,
    "candidates_token_count": 886,
    "total_token_count": 3150,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 21.009261,
  "retries": null
}