# YAML Facts

task_context:
  problem_type: object_manipulation
  phenomenon: gravity_simulation
  world_rules:
    - Objects are contiguous blocks of the same color.
    - White (0) is background.
    - Red (2) pixels form static barriers.
    - All other colors represent movable objects.
    - Objects experience a "gravity" pull towards the red barrier.
    - Gravity direction (Down, Left, or Right) is determined by the relative position of the red barrier(s) to the movable objects.
    - Objects move step-by-step in the direction of gravity.
    - Objects stop when they hit the grid boundary, a red barrier, or another movable object that has already stopped.
    - Objects maintain their shape and integrity during movement; they move as a whole unit.

input_features:
  grid_dimensions: variable (up to 30x30)
  pixels:
    - background: white (0)
    - barrier: red (2)
    - movable_objects: blue (1), green (3), yellow (4), gray (5), magenta (6), orange (7), azure (8), maroon (9)
  objects:
    - barrier_object(s): contiguous region(s) of red pixels
    - movable_object(s): contiguous region(s) of non-white, non-red pixels

transformation:
  actions:
    - identify_objects: Find all contiguous blocks of non-white, non-red pixels.
    - determine_gravity_direction: Calculate the primary direction (Down, Left, or Right) based on the average position of red pixels relative to the average position of movable object pixels.
    - simulate_movement:
        - Initialize current_grid = input_grid.
        - Loop until no object moves in an iteration:
            - Identify all movable objects in current_grid.
            - Determine which objects *can* move one step in the gravity direction. An object can move if ALL its pixels' target positions are within bounds, not red, and currently white.
            - Create a new grid for the next state. Copy static elements (white, red).
            - For objects that *cannot* move, copy them to their current positions in the new grid.
            - For objects that *can* move, copy them to their *new* positions (shifted by the gravity vector) in the new grid. Handle potential conflicts if multiple objects target the same empty cell (though this specific scenario might not occur if objects block each other correctly). A safer way is to update the grid state directly: erase moving objects from old positions, then draw them in new positions.
            - Update current_grid = new_grid.
  output_features:
    - grid: contains the final state after all objects have settled.
    - pixel_colors: preserved from input, only positions change.
    - object_integrity: preserved; objects do not break apart.

examples_analysis:
  - example_index: 1
    direction: Down (1, 0)
    key_observation: Objects fall and stack. Previous code failed by moving pixels individually, splitting an '8' object. Correct behavior requires object-based movement.
  - example_index: 2
    direction: Left (0, -1)
    key_observation: Objects move left and stack horizontally. Previous code failed by moving pixels individually, splitting an '8' object. Correct behavior requires object-based movement.
  - example_index: 3
    direction: Right (0, 1)
    key_observation: Objects move right and stack horizontally. Previous code failed by moving pixels individually, splitting a '9' object. Correct behavior requires object-based movement.
