"""
This module transforms a 5x9 input grid into a 3x3 output grid.
The transformation rule involves two 3x3 patterns within the input grid.
The first pattern (rows 1-3, cols 1-3) determines a characteristic color (blue, red, or green).
The second pattern (rows 1-3, cols 5-7) acts as a mask.
The output grid is generated by applying the characteristic color to the locations corresponding to gray pixels (5) in the second pattern, while keeping white pixels (0) as white.
"""

import numpy as np

def extract_subgrid(grid, row_start, row_end, col_start, col_end):
    """Extracts a subgrid from the input grid."""
    return grid[row_start:row_end, col_start:col_end]

def determine_characteristic_color(left_pattern):
    """Determines the characteristic color based on the left pattern."""
    # Define known patterns and their corresponding colors
    pattern_blue = np.array([[5, 5, 5], [0, 5, 0], [0, 5, 0]])
    pattern_red = np.array([[5, 5, 0], [0, 5, 0], [0, 5, 5]])
    pattern_green = np.array([[0, 5, 5], [0, 5, 0], [5, 5, 0]])

    if np.array_equal(left_pattern, pattern_blue):
        return 1 # blue
    elif np.array_equal(left_pattern, pattern_red):
        return 2 # red
    elif np.array_equal(left_pattern, pattern_green):
        return 3 # green
    else:
        # Handle unknown patterns if necessary, maybe raise an error or return a default
        # For now, let's assume only valid patterns are given based on examples
        raise ValueError("Unknown left pattern encountered") 


def transform(input_grid):
    """
    Transforms the input grid based on the identified patterns.

    Args:
        input_grid (list of lists): The input grid.

    Returns:
        numpy.ndarray: The transformed 3x3 output grid.
    """
    # Convert input to numpy array for easier slicing
    grid = np.array(input_grid, dtype=int)

    # 1. Extract the Left Pattern (rows 1-3, cols 1-3)
    left_pattern = extract_subgrid(grid, 1, 4, 1, 4)

    # 2. Extract the Right Pattern (rows 1-3, cols 5-7)
    right_pattern = extract_subgrid(grid, 1, 4, 5, 8)

    # 3. Determine the Characteristic Color based on the Left Pattern
    characteristic_color = determine_characteristic_color(left_pattern)

    # 4. Initialize the 3x3 output grid with white (0)
    output_grid = np.zeros((3, 3), dtype=int)

    # 5. Create the output grid using the Right Pattern as a mask
    for r in range(3):
        for c in range(3):
            # If the pixel in the Right Pattern is gray (5)
            if right_pattern[r, c] == 5:
                # Set the corresponding output pixel to the Characteristic Color
                output_grid[r, c] = characteristic_color
            # Otherwise, it remains white (0) as initialized

    return output_grid.tolist() # Return as list of lists per ARC standard
