{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nProcesses a 4x4 grid. Non-white pixels are preserved. White pixels (0) in each row are replaced by the colors from the set {1, 2, 3, 4} that are missing from that row. The assignment order depends on the row index: for even rows, missing colors (sorted descendingly) are assigned to white pixel positions (sorted ascendingly); for odd rows, missing colors (sorted ascendingly) are assigned to white pixel positions (sorted ascendingly).\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on the row completion rules.\n\n    Args:\n        input_grid (np.array): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.array: A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    # Initialize output_grid as a copy of the input grid\n    output_grid = np.copy(input_grid)\n    height, width = output_grid.shape\n\n    # Define the full set of colors expected in each output row\n    full_set = {1, 2, 3, 4}\n\n    # Process the grid row by row\n    for r in range(height):\n        # Get the current row\n        row = output_grid[r, :]\n\n        # Find the set of non-white colors present in the input row\n        present_colors = set(val for val in input_grid[r, :] if val != 0)\n\n        # Determine the set of missing colors\n        missing_colors_set = full_set - present_colors\n        \n        # Convert to a list and sort ascendingly\n        missing_colors = sorted(list(missing_colors_set))\n\n        # Find the list of column indices where the color is white (0)\n        white_indices = [c for c, val in enumerate(input_grid[r, :]) if val == 0]\n\n        # If there are white pixels to fill\n        if white_indices:\n            # Sort white indices ascendingly (should already be sorted by enumerate, but good practice)\n            white_indices.sort()\n\n            # If the row index r is even (0, 2, ...)\n            if r % 2 == 0:\n                # Reverse the sorted missing_colors list to make it descending\n                missing_colors.reverse()\n\n            # Assign the missing colors to the white pixel positions\n            # For even rows: descending missing colors -> ascending white positions\n            # For odd rows: ascending missing colors -> ascending white positions\n            for i, col_index in enumerate(white_indices):\n                if i < len(missing_colors): # Ensure we don't index out of bounds if logic is flawed\n                    fill_color = missing_colors[i]\n                    output_grid[r, col_index] = fill_color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2561,
    "candidates_token_count": 647,
    "total_token_count": 3208,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 7.779855,
  "retries": null
}