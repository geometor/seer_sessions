task_type: transformation
grid_properties:
  size_relation: input and output grids have the same dimensions (4x4 in examples)
  input_palette: [blue(1), red(2), green(3), yellow(4), white(0)]
  output_palette: [blue(1), red(2), green(3), yellow(4)]
objects:
  - type: pixel
    properties:
      color: one of the palette colors
      position: row and column index
transformation_rules:
  - scope: grid
    action: preserve_pixels
    condition: input pixel color is not white(0)
    effect: output pixel at the same position has the same color as the input pixel
  - scope: row
    action: identify_missing_colors
    condition: true
    details: For each row, determine which colors from the set {blue(1), red(2), green(3), yellow(4)} are not present among the non-white pixels.
  - scope: row
    action: identify_white_pixels
    condition: true
    details: For each row, identify the column indices of all white(0) pixels.
  - scope: row
    action: fill_white_pixels
    condition: white pixels exist in the row
    details: |
      Replace white(0) pixels with the identified missing colors for that row.
      The assignment follows a specific order based on the row index:
      1. Sort missing colors (M) ascendingly.
      2. Sort white pixel column indices (W) ascendingly.
      3. If the row index is odd: Assign M[i] to the pixel at index W[i].
      4. If the row index is even: Assign M[N-1-i] (where N is the number of missing colors/white pixels) to the pixel at index W[i]. Effectively, assign descending missing colors to ascending white positions.
output_constraints:
  - type: row_completion
    details: Each row in the output grid must contain exactly one instance of each color: blue(1), red(2), green(3), yellow(4).