{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nTransforms the grid based on object adjacency rules between blue (1) and azure (8).\n\n1. Finds all contiguous objects (8-connectivity) of blue pixels and azure pixels.\n2. For each blue object: If *every* pixel within that object is adjacent (8 neighbors)\n   to at least one azure pixel, change all pixels of that blue object to red (2).\n3. For each azure object: If *every* pixel within that object is adjacent (8 neighbors)\n   to at least one blue pixel, change all pixels of that azure object to red (2).\n4. Pixels not part of objects meeting these criteria retain their original color.\n\"\"\"\n\n# Helper function to check neighbors (8 neighbors: horizontal, vertical, diagonal)\ndef _has_neighbor_color(grid, r, c, target_color):\n    \"\"\"\n    Checks if any of the 8 neighbors of cell (r, c) in the grid has the target_color.\n\n    Args:\n        grid (np.array): The input grid.\n        r (int): Row index of the cell.\n        c (int): Column index of the cell.\n        target_color (int): The color to look for in neighbors.\n\n    Returns:\n        bool: True if a neighbor with target_color is found, False otherwise.\n    \"\"\"\n    height, width = grid.shape\n    # Iterate through all 8 neighbor offsets (dr, dc)\n    for dr in range(-1, 2):\n        for dc in range(-1, 2):\n            # Skip the cell itself\n            if dr == 0 and dc == 0:\n                continue\n\n            nr, nc = r + dr, c + dc\n\n            # Check if the neighbor coordinates are within the grid boundaries\n            if 0 <= nr < height and 0 <= nc < width:\n                # Check if the neighbor has the target color\n                if grid[nr, nc] == target_color:\n                    return True\n    # No neighbor with the target color found\n    return False\n\n# Helper function to find contiguous objects (8-connectivity) of a specific color using BFS\ndef find_objects(grid, color):\n    \"\"\"\n    Finds all contiguous objects of a given color in the grid using 8-way connectivity.\n\n    Args:\n        grid (np.array): The input grid.\n        color (int): The color of the objects to find.\n\n    Returns:\n        list: A list of objects, where each object is a list"
          }
        ],
        "role": "model"
      },
      "finish_reason": 2,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4005,
    "candidates_token_count": 562,
    "total_token_count": 4567,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 211.81685,
  "retries": null
}