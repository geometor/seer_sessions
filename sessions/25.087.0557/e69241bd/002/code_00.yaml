objects:
  - type: grid
    properties:
      height: variable (1-30)
      width: variable (1-30)
      pixels: array of integers (0-9) representing colors
  - type: color
    properties:
      value: integer (0-9)
      role: can be source, background, or barrier
  - type: source_pixel
    properties:
      color: one of {1: blue, 3: green, 4: yellow, 6: magenta, 7: orange, 8: azure}
      location: (row, col) in the input grid
  - type: background_pixel
    properties:
      color: 0 (white)
      location: (row, col) in the input grid
  - type: barrier_pixel
    properties:
      color: 5 (gray)
      location: (row, col) in the input grid

actions:
  - name: identify_roles
    description: Classify each pixel in the input grid based on its color as source, background, or barrier.
  - name: calculate_distances
    description: For each background (white) pixel, find the shortest distance to every source pixel. The distance calculation must account for barrier (gray) pixels, which block paths. Chebyshev distance (max of delta_row, delta_col) should be used.
  - name: assign_color
    description: >
      Each background (white) pixel in the output grid takes the color of the *nearest* source pixel identified in the input grid.
      Distances are calculated considering gray pixels as impassable barriers.
      If a background pixel is equidistant from two or more source pixels, the tie is broken by choosing the source pixel with the *lowest color value*.
      If a background pixel cannot reach any source pixel due to barriers, it remains white (0).
  - name: preserve_pixels
    description: Source pixels and barrier pixels retain their original color and location in the output grid.

flow:
  - step: Initialize the output grid as a copy of the input grid.
  - step: Identify all source pixels, background pixels, and barrier pixels in the input grid.
  - step: For each background pixel (r, c):
      - Find all reachable source pixels (sr, sc) using a pathfinding search (like BFS) that avoids barrier pixels.
      - Calculate the Chebyshev distance `max(abs(r-sr), abs(c-sc))` for each reachable source pixel.
      - Determine the minimum distance found.
      - Identify all source pixels that are at this minimum distance.
      - If no source pixels are reachable, the pixel at (r, c) remains white (0).
      - If one or more source pixels are at the minimum distance, select the one among them with the lowest color value.
      - Assign the selected source color to the output grid at position (r, c).
  - step: Return the modified output grid.
