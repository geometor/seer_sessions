{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nSimulate gravity on non-white (non-zero) pixels in a grid. \nNon-white pixels fall downwards into white (zero) spaces until they hit another non-white pixel or the bottom boundary of the grid. \nThe process repeats until no more pixels can fall, reaching a stable state. Objects (contiguous groups of same-colored non-white pixels) effectively maintain their shape while falling.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Applies gravity to non-white pixels in the input grid.\n\n    Args:\n        input_grid (list[list[int]]): A 2D list representing the input grid.\n\n    Returns:\n        list[list[int]]: A 2D list representing the grid after gravity simulation.\n    \"\"\"\n    # Convert input list of lists to a NumPy array for easier manipulation\n    working_grid = np.array(input_grid, dtype=int)\n    height, width = working_grid.shape\n\n    # Loop indefinitely until no pixels move in a full pass\n    while True:\n        moved_this_iteration = False  # Flag to track if any pixel moved in this pass\n\n        # Iterate through the grid cells, starting from the second-to-last row and moving upwards.\n        # This bottom-up approach ensures that pixels fall as far as possible in one go\n        # and correctly handles interactions between falling pixels/objects.\n        for r in range(height - 2, -1, -1):  # Start from second-to-last row, go up to row 0\n            for c in range(width):             # Iterate through columns left to right\n                \n                color = working_grid[r, c]\n\n                # Check if the current pixel is non-white (can fall)\n                # and the pixel directly below it is white (empty space)\n                if color != 0 and working_grid[r + 1, c] == 0:\n                    \n                    # Find the lowest possible row this pixel can fall to in the current column\n                    fall_to_r = r + 1 # Start checking from the row below\n                    # Keep going down as long as we are within bounds and the cell below is white\n                    while fall_to_r + 1 < height and working_grid[fall_to_r + 1, c] == 0:\n                        fall_to_r += 1\n                        \n                    # Move the pixel to the lowest found empty spot (fall_to_r)\n                    working_grid[fall_to_r, c] = color\n                    # Set the original position of the pixel to white (empty)\n                    working_grid[r, c] = 0\n                    \n                    # Mark that a pixel moved in this iteration\n                    moved_this_iteration = True\n\n        # If no pixels moved during this entire pass through the grid,\n        # the grid has reached a stable state, so break the loop.\n        if not moved_this_iteration:\n            break\n\n    # Convert the final NumPy array back to a list of lists\n    output_grid = working_grid.tolist()\n    \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2758,
    "candidates_token_count": 700,
    "total_token_count": 3458,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.858378,
  "retries": null
}