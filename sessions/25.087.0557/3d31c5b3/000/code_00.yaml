Grid_Dimensions:
  Input: 12x6
  Output: 3x6

Input_Structure:
  Type: Composite
  Components:
    - Block_1:
        Rows: 0-2
        Primary_Color: Gray (5)
        Background_Color: White (0)
        Dimensions: 3x6
    - Block_2:
        Rows: 3-5
        Primary_Color: Yellow (4)
        Background_Color: White (0)
        Dimensions: 3x6
    - Block_3:
        Rows: 6-8
        Primary_Color: Red (2)
        Background_Color: White (0)
        Dimensions: 3x6
    - Block_4:
        Rows: 9-11
        Primary_Color: Azure (8)
        Background_Color: White (0)
        Dimensions: 3x6

Transformation:
  Type: Pixel-wise Combination
  Rule: Priority-based overlay
  Mapping:
    - For each output pixel at coordinates (row, col) where 0 <= row < 3 and 0 <= col < 6:
    - Consider the input pixel values at:
        - `P1 = input[row, col]` (from Block 1)
        - `P2 = input[row + 3, col]` (from Block 2)
        - `P3 = input[row + 6, col]` (from Block 3)
        - `P4 = input[row + 9, col]` (from Block 4)
    - Determine the output pixel color based on the following priority order:
        1. If `P1` is Gray (5), the output pixel is Gray (5).
        2. Else if `P2` is Yellow (4), the output pixel is Yellow (4).
        3. Else if `P4` is Azure (8), the output pixel is Azure (8).
        4. Else if `P3` is Red (2), the output pixel is Red (2).
        5. Otherwise, the output pixel is White (0).
  Color_Priority:
    1: Gray (5)
    2: Yellow (4)
    3: Azure (8)
    4: Red (2)
    5: White (0) # Default if no priority color found