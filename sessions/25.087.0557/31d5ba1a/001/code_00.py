"""
The transformation takes a 6x5 input grid and produces a 3x5 output grid.
The input grid is conceptually divided into a 3x5 top half (rows 0-2) and a 3x5 bottom half (rows 3-5).
The top half uses white (0) and maroon (9). The bottom half uses white (0) and yellow (4).
The output grid is generated by comparing the top and bottom halves element-wise.
For each position (r, c) within the 3x5 dimensions:
- If the pixel in the top half is non-white (maroon/9) and the corresponding pixel in the bottom half is white (0), the output pixel at (r, c) is magenta (6).
- If the pixel in the top half is white (0) and the corresponding pixel in the bottom half is non-white (yellow/4), the output pixel at (r, c) is magenta (6).
- In all other cases (both white, or top is maroon/9 and bottom is yellow/4), the output pixel at (r, c) is white (0).
This is equivalent to a logical XOR operation based on whether the pixels are non-white.
"""

import numpy as np

def transform(input_grid):
    """
    Applies an element-wise XOR comparison between the top and bottom halves
    of the input grid to produce the output grid.
    """
    # Convert input list of lists to a numpy array for easier slicing
    input_array = np.array(input_grid, dtype=int)

    # Get dimensions
    input_height, input_width = input_array.shape
    output_height = input_height // 2
    output_width = input_width

    # Extract the top and bottom halves
    top_half = input_array[:output_height, :]
    bottom_half = input_array[output_height:, :]

    # Initialize the output grid with white (0)
    output_grid = np.zeros((output_height, output_width), dtype=int)

    # Iterate through each cell position in the output grid dimensions
    for r in range(output_height):
        for c in range(output_width):
            # Get pixel values from the corresponding positions in the top and bottom halves
            pixel_top = top_half[r, c]
            pixel_bottom = bottom_half[r, c]

            # Determine if the pixels are non-white (i.e., not 0)
            is_non_white_top = (pixel_top != 0)
            is_non_white_bottom = (pixel_bottom != 0)

            # Apply the XOR logic: output is magenta (6) if exactly one is non-white
            if is_non_white_top ^ is_non_white_bottom: # XOR operator
                output_grid[r, c] = 6
            # Otherwise, the output remains white (0) as initialized

    # Convert the numpy array back to a list of lists for the expected output format
    return output_grid.tolist()
