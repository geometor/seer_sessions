{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nLocate the 2x2 subgrid in the input grid that is diagonally opposite the 2x2 block of red pixels (which is always in the bottom-right). This target subgrid is the top-left 2x2 region. Extract this 2x2 subgrid. Rotate the extracted subgrid 90 degrees counter-clockwise. The resulting 2x2 grid is the final output.\n\"\"\"\n\ndef rotate_subgrid_ccw(grid, top, left, height, width):\n  \"\"\"\n  Extracts a subgrid and rotates it 90 degrees counter-clockwise.\n\n  Args:\n    grid: The input grid (numpy array).\n    top: The starting row index of the subgrid.\n    left: The starting column index of the subgrid.\n    height: The height of the subgrid.\n    width: The width of the subgrid.\n\n  Returns:\n    The rotated subgrid (numpy array).\n  \"\"\"\n  subgrid = grid[top:top+height, left:left+width]\n  # np.rot90 rotates counter-clockwise by default with k=1\n  rotated_subgrid = np.rot90(subgrid, k=1)\n  return rotated_subgrid\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by extracting the top-left 2x2 subgrid\n    and rotating it 90 degrees counter-clockwise.\n    \"\"\"\n    # Convert input list of lists to a numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n\n    # Define the region to extract (top-left 2x2)\n    # Based on the examples, the red block confirms the pattern,\n    # but the target subgrid is always the top-left 2x2.\n    top = 0\n    left = 0\n    height = 2\n    width = 2\n\n    # Extract and rotate the specified subgrid counter-clockwise\n    output_grid_np = rotate_subgrid_ccw(input_np, top, left, height, width)\n\n    # Convert the numpy array back to a list of lists for the expected output format\n    output_grid = output_grid_np.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2105,
    "candidates_token_count": 516,
    "total_token_count": 2621,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 6.238946,
  "retries": null
}