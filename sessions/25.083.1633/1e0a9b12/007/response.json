{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIterate through the input grid column by column, and within each column, row by row.\nIdentify non-zero pixels. For each non-zero pixel, record its value and original column index.\nCreate an output grid of the same dimensions as the input grid, filled with zeros.\nIterate through the recorded non-zero pixels. For each pixel:\n    Find the lowest available row in the output grid *within the pixel's original column*.\n    Place the pixel's value in that cell.\nReturn the output grid.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by stacking non-zero digits at the bottom, preserving column order.\n    \"\"\"\n    rows, cols = input_grid.shape\n    output_grid = np.zeros_like(input_grid)\n\n    # Iterate through columns\n    for c in range(cols):\n        # Iterate through rows within each column, from bottom to top\n        available_row = rows - 1\n        for r in range(rows):\n            if input_grid[r, c] != 0:\n                # Place the non-zero pixel in the lowest available row of the same column\n                output_grid[available_row, c] = input_grid[r, c]\n                available_row -= 1  # Move the available row up for the next non-zero pixel in this column\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3363,
    "candidates_token_count": 320,
    "total_token_count": 3683,
    "cached_content_token_count": 0
  },
  "response_time": 42.927074
}