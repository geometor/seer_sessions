{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIterate through each row of the input grid. Within each row, identify the non-zero digits, maintaining their original order. Place these non-zero digits, in their original order, at the bottom of the output grid, starting from the last row and filling upwards, left to right.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by stacking non-zero digits at the bottom, row-wise, preserving within-row order.\n    \"\"\"\n    rows, cols = input_grid.shape\n    output_grid = np.zeros_like(input_grid)\n    current_row = rows - 1\n    current_col = 0\n\n    # Iterate through each row of the input grid\n    for r in range(rows):\n        # Collect non-zero digits from the current row, preserving order\n        non_zero_digits = [val for val in input_grid[r, :] if val != 0]\n\n        # Place the non-zero digits at the bottom of the output grid\n        for digit in non_zero_digits:\n            if current_col >= cols:  # Move to the next row up if the current row is full\n                current_row -= 1\n                current_col = 0\n            if current_row < 0: #handles edge case where there more non zero pixels than available cells\n                break\n\n            output_grid[current_row, current_col] = digit\n            current_col += 1\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3017,
    "candidates_token_count": 341,
    "total_token_count": 3358,
    "cached_content_token_count": 0
  },
  "response_time": 25.085552
}