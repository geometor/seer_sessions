{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Key Rows:** Find all rows that contain at least one red (2) pixel (these are \"red_rows\").  Also, find all rows that contain at least one azure (8) pixel (\"azure_rows\").\n\n2.  **Iterate Through Rows:** Process the input grid row by row.\n\n3.  **Preserve Non-Red Rows:** If the current row is *not* a \"red_row\", copy it to the output grid without changes.\n\n4.  **Process Red Rows:** If the current row *is* a \"red_row\":\n    *   Find the column index of the rightmost azure (8) pixel *in the entire input grid*.\n    *   Find the column index of the leftmost red (2) pixel *in the current \"red_row\"*.\n    *   Change all pixels in the current \"red_row\", starting from the leftmost red pixel, to yellow (4), up to *and including* the column of the rightmost azure pixel found in step 4a.\n    *   If any red pixels in the current \"red_row\" are located *to the right* of the rightmost azure pixel's column, they remain red.\n    * Copy this modified row to the output.\n\n5.  **Duplicate Azure Rows:** Immediately after adding the modified \"red_row\" to the output grid, add copies of *all* \"azure_rows\". Maintain the original order of the \"azure_rows\".\n\n6. **Output:** The result is the output grid.\n\"\"\"\n\nimport numpy as np\n\ndef find_rows_by_color(grid, color):\n    \"\"\"Finds the indices of rows containing at least one pixel of the specified color.\"\"\"\n    return [i for i, row in enumerate(grid) if np.any(row == color)]\n\ndef find_leftmost_pixel(row, color):\n    \"\"\"Finds the column index of the leftmost pixel of a specified color in a row.\"\"\"\n    return next((i for i, pixel in enumerate(row) if pixel == color), -1)\n\ndef find_rightmost_pixel_in_grid(grid, color):\n    \"\"\"Finds the column index of the rightmost pixel of specified color in grid\"\"\"\n    rightmost_col = -1\n    for row in grid:\n        for i in range(len(row) - 1, -1, -1):\n            if row[i] == color:\n                rightmost_col = max(rightmost_col, i)\n                break  # next row\n    return rightmost_col\n\ndef transform(input_grid):\n    input_grid = np.array(input_grid)\n    output_grid = []\n\n    # Identify key rows (Step 1)\n    red_rows = find_rows_by_color(input_grid, 2)\n    azure_rows = find_rows_by_color(input_grid, 8)\n\n    # Iterate through rows (Step 2)\n    for row_index in range(input_grid.shape[0]):\n        # Preserve non-red rows (Step 3)\n        if row_index not in red_rows:\n            output_grid.append(input_grid[row_index].copy())\n        else:\n            # Process red rows (Step 4)\n            transformed_row = input_grid[row_index].copy()\n            rightmost_azure_col = find_rightmost_pixel_in_grid(input_grid, 8)  # Step 4a\n            leftmost_red_col = find_leftmost_pixel(transformed_row, 2)  # Step 4b\n\n            # Step 4c: Change to yellow up to rightmost azure column\n            if leftmost_red_col != -1 and rightmost_azure_col != -1:  # Ensure valid indices\n                for col_index in range(leftmost_red_col, rightmost_azure_col + 1):\n                    transformed_row[col_index] = 4\n\n            # Step 4d (implicitly handled - remaining red pixels stay red) and Step 4e\n            output_grid.append(transformed_row)\n\n            # Duplicate azure rows (Step 5)\n            for azure_row_index in azure_rows:\n                output_grid.append(input_grid[azure_row_index].copy())\n\n    return np.array(output_grid)\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4991,
    "candidates_token_count": 987,
    "total_token_count": 5978,
    "cached_content_token_count": 0
  },
  "response_time": 11.566331
}