{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation rule is: white cells adjacent to azure cells become blue, but only if the adjacent azure cell has at least one *other* azure neighbor in a different direction, thereby creating an azure \"bridge\".\n\"\"\"\n\nimport numpy as np\n\ndef is_valid(r, c, rows, cols):\n    return 0 <= r < rows and 0 <= c < cols\n\ndef get_adjacent_neighbors(r, c, rows, cols):\n    neighbors = []\n    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n        nr, nc = r + dr, c + dc\n        if is_valid(nr, nc, rows, cols):\n            neighbors.append((nr, nc))\n    return neighbors\n\ndef get_all_neighbors(r, c, rows, cols):\n     neighbors = []\n     for dr in [-1, 0, 1]:\n         for dc in [-1, 0, 1]:\n             if dr == 0 and dc == 0:\n                 continue\n             nr, nc = r + dr, c + dc\n             if is_valid(nr, nc, rows, cols):\n                neighbors.append((nr,nc))\n     return neighbors\n\ndef has_different_direction_neighbor(r, c, rows, cols, grid, target_color):\n    neighbors = get_all_neighbors(r, c, rows, cols)\n    neighbor_colors = [(nr, nc) for nr, nc in neighbors if grid[nr, nc] == target_color]\n\n    if not neighbor_colors:\n        return False\n\n    directions = set()\n    for nr, nc in neighbor_colors:\n        dr, dc = nr - r, nc - c\n        directions.add((dr, dc))\n    \n    return len(directions) > 1\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Iterate through all cells\n    for r in range(rows):\n        for c in range(cols):\n            # Check if the current cell is white\n            if input_grid[r, c] == 0:\n                # Get adjacent neighbors\n                adjacent_neighbors = get_adjacent_neighbors(r, c, rows, cols)\n                # Find azure neighbors\n                azure_neighbors = [(nr, nc) for nr, nc in adjacent_neighbors if output_grid[nr, nc] == 8]\n\n                # check directionality condition\n                for ar, ac in azure_neighbors:\n                    if has_different_direction_neighbor(ar, ac, rows, cols, output_grid, 8):\n                        output_grid[r,c] = 1\n                        break\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2736,
    "candidates_token_count": 642,
    "total_token_count": 3378,
    "cached_content_token_count": 0
  },
  "response_time": 6.517165,
  "response_file": "006-response.json"
}