{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nFor each azure L-shape in the input grid:\nFind its uppermost and leftmost cell. \nIf the L-shape is oriented such that the two other cells are below and to the right of the top-left cell, change the cell immediately to the right of the top-left cell to blue.\nIf the L-shape is oriented such that the two other cells are below and to the left of the top-left, change the cell immediately below the top-left to blue.\nIf the L_shape is oriented such that the two other cells are up and to the left, change the cell immediately to the left of the top-left to blue.\n\"\"\"\n\nimport numpy as np\n\ndef find_l_shapes(grid, color):\n    \"\"\"\n    Finds all L-shaped objects of a specific color and returns the top-left corner coordinates.\n    \"\"\"\n    l_shapes = []\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == color:\n                # Check for all possible L-shape orientations (3 cells)\n                if r + 1 < rows and c + 1 < cols and grid[r + 1, c] == color and grid[r, c + 1] == color:\n                    l_shapes.append((r, c))  # Down and Right\n                elif r + 1 < rows and c -1 >=0 and grid[r + 1, c] == color and grid[r+1, c - 1] == color:\n                    l_shapes.append((r, c))  # Down and Left (from Top-Left)\n                elif r -1 >= 0  and c -1 >=0 and grid[r - 1, c] == color and grid[r, c - 1] == color:\n                    l_shapes.append((r,c))  # Up, Left\n                elif r + 1 < rows and c + 1 < cols and grid[r+1, c] == color and grid[r + 1, c + 1] == color:\n                     l_shapes.append((r,c)) # Down, Right (from Top-Left)\n                elif r +1 < rows and c + 1 < cols and grid[r, c+1] == color and grid[r + 1, c + 1] == color:\n                    l_shapes.append((r,c))\n    return l_shapes\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on L-shape orientation and paints an adjacent cell blue.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    azure_l_shapes = find_l_shapes(output_grid, 8)\n\n    for r, c in azure_l_shapes:\n        # Check L-shape orientation and paint adjacent cell blue\n        if r + 1 < output_grid.shape[0] and c + 1 < output_grid.shape[1] and output_grid[r + 1, c] == 8 and output_grid[r, c + 1] == 8:\n            output_grid[r, c + 1] = 1  # Down and Right - paint Right\n        elif r + 1 < output_grid.shape[0] and c - 1 >= 0 and output_grid[r + 1, c] == 8 and output_grid[r + 1, c -1] == 8 :\n            output_grid[r + 1, c] = 1  # Down and Left - paint Down\n        elif r -1 >= 0 and c -1 >=0 and  output_grid[r-1,c] == 8 and output_grid[r , c - 1] == 8 :\n              output_grid[r, c - 1] = 1 # Up and left - paint left\n        elif r + 1 < output_grid.shape[0] and c + 1 < output_grid.shape[1] and output_grid[r+1, c] == 8 and output_grid[r+1, c+1] == 8 :\n            output_grid[r + 1, c] = 1 #Down, Right (from top-left)\n        elif r+1 < output_grid.shape[0] and c+1 < output_grid.shape[1] and output_grid[r,c+1] == 8 and output_grid[r+1,c+1] == 8 :\n            output_grid[r+1,c] = 1 #Down, Right (from top-left)\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5772,
    "candidates_token_count": 1064,
    "total_token_count": 6836,
    "cached_content_token_count": 0
  },
  "timing": {
    "response_time": 10.46398
  },
  "response_file": "004-response.json"
}