task_context:
  description: Transforms a 3x3 input grid into a 9x9 output grid based on the locations of specific colored pixels.
  input_grid_size: 3x3
  output_grid_size: 9x9
  background_color: 0 # white

input_elements:
  - object: trigger_pixel
    color: 2 # red
    count: 1
    role: Identifies the transformation type. Its location seems fixed at (1,1) in examples but might be variable. Its color is not propagated to the output.
  - object: pattern_pixels
    color: 3 # green
    role: Define the fill color for the output pattern and determine the placement of the output shapes based on their coordinates.

output_elements:
  - object: background
    color: 0 # white
    size: 9x9
  - object: shape_1
    type: square_block
    color: 3 # green (derived from input pattern_pixels)
    size: 4x4
    position: Determined by the minimum row and column of the input pattern_pixels.
  - object: shape_2
    type: square_block
    color: 3 # green (derived from input pattern_pixels)
    size: 4x4
    position: Determined by the minimum row and column of the input pattern_pixels, offset by +4 rows and +4 columns relative to shape_1.

transformation_rules:
  - rule: Identify the trigger pixel (red=2) and pattern pixels (green=3) in the input.
  - rule: Determine the fill color for the output from the pattern pixels (green=3).
  - rule: Find the minimum row index (min_r) and minimum column index (min_c) among all pattern pixels in the input.
  - rule: Initialize a 9x9 output grid with the background color (white=0).
  - rule: Place the first 4x4 block of the fill color in the output grid, starting at position (min_r, min_c).
  - rule: Place the second 4x4 block of the fill color in the output grid, starting at position (min_r + 4, min_c + 4).

assumptions:
  - The input grid will always contain exactly one red (2) pixel.
  - The input grid will always contain at least one green (3) pixel if a red pixel is present.
  - The transformation rule identified applies specifically when a red (2) pixel is present.