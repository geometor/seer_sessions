{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentify all 3x3 subgrids within the input grid whose four corner cells (top-left, top-right, bottom-left, bottom-right) are not the background color orange (7). Rotate each of these identified 3x3 subgrids 90 degrees counter-clockwise in place. Pixels outside these rotated blocks remain unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef rotate_subgrid_counter_clockwise(subgrid):\n  \"\"\"\n  Rotates a 3x3 numpy array 90 degrees counter-clockwise.\n  \"\"\"\n  # np.rot90 rotates counter-clockwise by default\n  return np.rot90(subgrid, k=1)\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid (list of lists or np.ndarray): The input grid.\n\n    Returns:\n        np.ndarray: The transformed output grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    # Initialize output_grid as a copy of the input grid\n    output_grid = np.copy(input_np)\n    \n    height, width = input_np.shape\n    background_color = 7\n    subgrid_size = 3\n\n    # Iterate through all possible top-left corners (r, c) for a 3x3 subgrid\n    # The range ensures that the 3x3 subgrid fits entirely within the grid boundaries\n    for r in range(height - subgrid_size + 1):\n        for c in range(width - subgrid_size + 1):\n            \n            # Define the coordinates of the four corners of the current 3x3 subgrid\n            top_left = (r, c)\n            top_right = (r, c + subgrid_size - 1)\n            bottom_left = (r + subgrid_size - 1, c)\n            bottom_right = (r + subgrid_size - 1, c + subgrid_size - 1)\n\n            # Check if none of the four corner pixels have the background color (7)\n            if (input_np[top_left] != background_color and\n                input_np[top_right] != background_color and\n                input_np[bottom_left] != background_color and\n                input_np[bottom_right] != background_color):\n\n                # Extract the 3x3 subgrid from the input grid\n                subgrid_to_rotate = input_np[r:r + subgrid_size, c:c + subgrid_size]\n                \n                # Perform a 90-degree counter-clockwise rotation\n                rotated_subgrid = rotate_subgrid_counter_clockwise(subgrid_to_rotate)\n                \n                # Place the rotated 3x3 block into the output grid at the same position\n                output_grid[r:r + subgrid_size, c:c + subgrid_size] = rotated_subgrid\n\n    # Return the modified output grid\n    return output_grid.tolist() # Return as list of lists if required by caller context\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2983,
    "candidates_token_count": 723,
    "total_token_count": 3706,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.734356,
  "retries": 1
}