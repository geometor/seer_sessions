task_context:
  grid_size: ثابت (input and output grids have the same dimensions)
  background_color: orange (7)
  foreground_color: gray (6)
  action: replace_object_color

objects:
  - type: contiguous block of pixels
  - property: color (always gray (6) in input)
  - property: size (number of pixels)
  - property: shape (spatial arrangement of pixels)
  - property: bounding_box (minimum rectangle enclosing the object)

transformation_rules:
  - condition: pixel color is orange (7)
    action: keep pixel color orange (7)
  - condition: pixel color is gray (6)
    action:
      - identify the contiguous object the pixel belongs to
      - determine the object's properties (size, bounding_box)
      - apply a mapping rule based on properties to determine the output color
      - replace the gray (6) pixel with the determined output color

mapping_rules_observed: # (Based on object properties -> output color)
  - object_properties: { size: 2 } # (e.g., 1x2 or 2x1)
    output_color: maroon (9)
  - object_properties: { size: 3, bounding_box: { height: 2, width: 2 } } # (L-tromino)
    output_color: yellow (4)
  - object_properties: { size: 3, bounding_box: { height: 3, width: 1 } } # (1x3 or 3x1 line)
    output_color: red (2)
  - object_properties: { size: 3, bounding_box: { height: 1, width: 3 } } # (1x3 or 3x1 line)
    output_color: red (2)
  - object_properties: { size: 4 } # (e.g., 2x2 square, L-tetromino)
    output_color: azure (8)
  - object_properties: { size: 5 } # (e.g., T-pentomino)
    output_color: green (3)
  - object_properties: { size: 6, bounding_box: { height: 2, width: 3 } } # (2x3 or 3x2 rectangle)
    output_color: gray (5)
  - object_properties: { size: 6, bounding_box: { height: 3, width: 2 } } # (2x3 or 3x2 rectangle)
    output_color: gray (5)
  - object_properties: { size: 6, bounding_box: other } # (e.g., 5x8 bounding box observed)
    output_color: red (2)

relationships:
  - pixels within a contiguous gray block share the same fate (map to the same output color)
  - the output color is determined solely by the properties of the gray object it replaces
  - background pixels are invariant