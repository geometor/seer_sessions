{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nTransforms an input grid based on the frequency and properties of its non-white colors.\n\n1.  Identify all unique non-white colors (pixels != 0) and their frequencies.\n2.  If no non-white colors exist, return a 1x1 white (0) grid.\n3.  Sort colors by frequency (descending), then value (ascending).\n4.  If only one unique non-white color `c` exists, return `[[c]]`.\n5.  Determine the most frequent color (`c1`) and its count (`count1`).\n6.  If `count1 < 10`:\n    - Find the least frequent color (`c_least`).\n    - Return `[[c_least]]`.\n7.  If `count1 >= 10`:\n    - Find the second most frequent color (`c2`).\n    - Check the parity of `c1`.\n    - If `c1` is odd, return `[[c1, c1], [c2, c1]]`.\n    - If `c1` is even, return `[[c2, c2], [c2, c1]]`.\n\"\"\"\n\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the transformation rules based on color frequencies and parity.\n\n    Args:\n        input_grid: A 2D numpy array representing the input grid.\n\n    Returns:\n        A 2D numpy array representing the output grid (either 1x1 or 2x2).\n    \"\"\"\n\n    # 1. Flatten input grid, remove white pixels (0).\n    pixels = input_grid.flatten()\n    non_white_pixels = [p for p in pixels if p != 0]\n\n    # 2. If no non-white pixels, return a 1x1 white (0) grid.\n    if not non_white_pixels:\n        return np.array([[0]], dtype=int)\n\n    # 3. Count frequencies of remaining pixels.\n    color_counts = Counter(non_white_pixels)\n\n    # 4. Sort colors by frequency descending, then color value ascending.\n    #    Ensure keys are integers for sorting, not numpy types if Counter yields them.\n    sorted_counts = sorted(color_counts.items(), key=lambda item: (-item[1], int(item[0])))\n\n    # 5. If only one unique non-white color `c` exists, return `[[c]]`.\n    if len(sorted_counts) == 1:\n        c1, _ = sorted_counts[0]\n        output_grid = np.array([[c1]], dtype=int)\n        return output_grid\n\n    # 6. Determine the most frequent color (`c1`) and its count (`count1`).\n    c1, count1 = sorted_counts[0]\n    # Ensure c1 is a standard python int for modulo operation\n    c1 = int(c1) \n\n    # Check the threshold condition\n    if count1 < 10:\n        # 6.a Find the least frequent color (`c_least`).\n        c_least, _ = sorted_counts[-1]\n        # 6.b Return `[[c_least]]`.\n        output_grid = np.array([[c_least]], dtype=int)\n    else:\n        # 7. `count1 >= 10` case\n        # 7.a Find the second most frequent color (`c2`).\n        c2, _ = sorted_counts[1]\n        # Ensure c2 is a standard python int\n        c2 = int(c2) \n\n        # 7.b Create a 2x2 output grid, initialized with zeros (or any value)\n        output_grid = np.zeros((2, 2), dtype=int)\n\n        # 7.c Check the parity of `c1`.\n        if c1 % 2 != 0:  # c1 is odd\n            # 7.d If `c1` is odd, return `[[c1, c1], [c2, c1]]`.\n            output_grid[0, 0] = c1\n            output_grid[0, 1] = c1\n            output_grid[1, 0] = c2\n            output_grid[1, 1] = c1\n        else:  # c1 is even\n            # 7.e If `c1` is even, return `[[c2, c2], [c2, c1]]`.\n            output_grid[0, 0] = c2\n            output_grid[0, 1] = c2\n            output_grid[1, 0] = c2\n            output_grid[1, 1] = c1\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 13124,
    "candidates_token_count": 1098,
    "total_token_count": 14222,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.564519,
  "retries": 1
}