task_elements:
  - Input Grid: A 2D array of pixels with color values (0-9).
  - Output Grid: A smaller 2D array (either 1x1 or 2x2).
  - Colors: Pixels have values 0-9. White (0) is ignored.
  - Objects: Individual pixels of non-white colors.
properties:
  - Non-white Colors: The set of unique colors in the input grid, excluding white (0).
  - Frequency: The count of occurrences for each non-white color.
  - Sorted Frequencies: Non-white colors sorted primarily by frequency (descending) and secondarily by color value (ascending).
  - Most Frequent Color (c1): The non-white color appearing first in the sorted list.
  - Most Frequent Count (count1): The frequency of c1.
  - Second Most Frequent Color (c2): The non-white color appearing second in the sorted list (if it exists).
  - Least Frequent Color (c_least): The non-white color appearing last in the sorted list (if multiple colors exist).
  - Frequency Threshold: A specific value (10).
  - Parity: Whether the numerical value of the most frequent color (c1) is odd or even.
actions:
  - Filter: Remove white (0) pixels.
  - Count Frequencies: Determine the number of pixels for each non-white color.
  - Sort by Frequency/Value: Order the non-white colors based on frequency (desc) then value (asc).
  - Identify Key Colors: Determine c1, c2 (if applicable), c_least (if applicable).
  - Compare Frequency to Threshold: Check if count1 is less than 10.
  - Check Parity: Determine if c1 is odd or even.
  - Construct Output Grid: Create either a 1x1 or 2x2 grid based on the threshold comparison and parity check.
  - Populate Output Grid:
    - If 1x1: Fill with c_least.
    - If 2x2: Fill using c1 and c2 based on the parity of c1.
relationships:
  - If only one non-white color `c` exists, output is `[[c]]`.
  - If `count1` < 10, output size is 1x1, content is `c_least`.
  - If `count1` >= 10, output size is 2x2.
  - If `count1` >= 10 and `c1` is odd, the 2x2 pattern is `[[c1, c1], [c2, c1]]`.
  - If `count1` >= 10 and `c1` is even, the 2x2 pattern is `[[c2, c2], [c2, c1]]`.