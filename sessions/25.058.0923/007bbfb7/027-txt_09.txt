import numpy as np

def transform(input_grid):
    # Initialize output_grid as 9x9 filled with white (0)
    output_grid = np.zeros((9, 9), dtype=int)

    # Copy the input_grid to the top-left corner of output_grid
    output_grid[:3, :3] = input_grid

    # Copy the top row of the input to output location (0,3)
    output_grid[0, 3:6] = input_grid[0, :]
    
    # copy the top row of the input to the output at (0,6)
    output_grid[0, 6:9] = input_grid[0, :]

    # copy the second row and third row to output locations (2,3) and (2,6)
    output_grid[2, 3:6] = input_grid[1:3, 1]
    output_grid[2, 5:8] = input_grid[1:3, 2]
    
    # copy columns two and three from the input to (6,3), (6,4), (6,5)
    output_grid[6:9, 3:6] =  input_grid[:,:]
    
    # copy column three to the ouput at (6,7), (6,8)
    output_grid[6:9, 7] = input_grid[:2, 2]
    output_grid[6, 8] = input_grid[2, 2]

    # copy row three to (8,4)
    output_grid[8, 4:6] = input_grid[2,1:]

    # copy elements (2,1) and (2,2) to output (8, 7) and (8,8)
    output_grid[8, 7:9] = input_grid[2, 1:]
    
    return output_grid

task_data = {
    "train": [
        {
            "input": [[5, 5, 5], [5, 5, 5], [5, 5, 5]],
            "output": [
                [5, 5, 5, 5, 5, 5, 5, 5, 5],
                [5, 5, 5, 0, 0, 0, 0, 0, 0],
                [5, 5, 5, 5, 5, 5, 5, 5, 5],
                [5, 5, 5, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [5, 5, 5, 5, 5, 5, 5, 5, 5],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [5, 5, 5, 5, 5, 5, 5, 5, 5],
            ],
        },
        {
            "input": [[1, 2, 3], [4, 5, 6], [7, 8, 9]],
            "output": [
                [1, 2, 3, 1, 2, 3, 1, 2, 3],
                [4, 5, 6, 0, 0, 0, 0, 0, 0],
                [7, 8, 9, 4, 5, 6, 7, 8, 9],
                [1, 2, 3, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 2, 3, 1, 2, 3, 1, 2, 3],
                [4, 5, 6, 0, 0, 0, 0, 0, 0],
                [7, 8, 9, 4, 5, 6, 7, 8, 9],
            ],
        },
        {
            "input": [[0, 1, 2], [3, 4, 5], [6, 7, 8]],
            "output": [
                [0, 1, 2, 0, 1, 2, 0, 1, 2],
                [3, 4, 5, 0, 0, 0, 0, 0, 0],
                [6, 7, 8, 3, 4, 5, 6, 7, 8],
                [0, 1, 2, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 2, 0, 1, 2, 0, 1, 2],
                [3, 4, 5, 0, 0, 0, 0, 0, 0],
                [6, 7, 8, 3, 4, 5, 6, 7, 8],
            ],
        },
        {
            "input": [[9, 9, 9], [9, 8, 9], [9, 9, 9]],
            "output": [
                [9, 9, 9, 9, 9, 9, 9, 9, 9],
                [9, 8, 9, 0, 0, 0, 0, 0, 0],
                [9, 9, 9, 9, 8, 9, 9, 9, 9],
                [9, 9, 9, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [9, 9, 9, 9, 9, 9, 9, 9, 9],
                [9, 8, 9, 0, 0, 0, 0, 0, 0],
                [9, 9, 9, 9, 8, 9, 9, 9, 9],
            ],
        },
    ],
    "test": [{"input": [[1, 2, 1], [1, 3, 1], [1, 2, 1]]}],
}

def compare_grids(grid1, grid2):
    grid1 = np.array(grid1)
    grid2 = np.array(grid2)
    if grid1.shape != grid2.shape:
        return "Shapes are different"
    else:
        return np.sum(grid1 != grid2)

train_results = []
for i, example in enumerate(task_data["train"]):
    input_grid = example["input"]
    expected_output = example["output"]
    actual_output = transform(input_grid)
    diff_count = compare_grids(expected_output, actual_output)
    train_results.append(
        {
            "example_index": i,
            "input_grid": input_grid,
            "expected_output": expected_output,
            "actual_output": actual_output.tolist(),
            "diff_count": diff_count,
        }
    )

train_results