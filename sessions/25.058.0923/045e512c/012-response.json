{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by expanding and replicating red and yellow pixels around a central blue pixel. Red pixels fill horizontally and are mirrored vertically. Yellow pixels fill vertically and extend diagonally if initially diagonal to the blue pixel. The blue pixel is moved to the center row.\n\"\"\"\n\nimport numpy as np\n\ndef find_center(grid):\n    # Find the blue pixel, assumed to be the center\n    blue_pixels = np.argwhere(grid == 1)\n    if blue_pixels.size == 0:\n      return None\n    return blue_pixels[0]\n\ndef fill_red(grid, center):\n  output_grid = np.copy(grid)\n  rows, cols = grid.shape\n  center_row, center_col = center\n\n  red_pixels = np.argwhere(grid == 2)\n\n  for r_pix in red_pixels:\n    # Extend red to left edge\n    for c in range(0, r_pix[1] + 1):\n        output_grid[r_pix[0], c] = 2\n    #Mirror Row\n    mirrored_row = center_row + (center_row - r_pix[0])\n    if 0 <= mirrored_row < rows:\n      for c in range(cols):\n        output_grid[mirrored_row,c] = 2\n\n  return output_grid\n\ndef fill_yellow(grid, center):\n  output_grid = np.copy(grid)\n  rows, cols = output_grid.shape\n  center_row, center_col = center\n\n  yellow_pixels = np.argwhere(grid == 4)\n  for y_pix in yellow_pixels:\n      # Vertical fill\n      for r in range(rows):\n        output_grid[r,y_pix[1]] = 4\n\n      # Diagonal fill\n      row_offset = y_pix[0] - center_row\n      col_offset = y_pix[1] - center_col\n\n      if row_offset != 0 and col_offset != 0:  # Check for diagonal adjacency\n            dr = row_offset // abs(row_offset) # direction\n            dc = col_offset // abs(col_offset)\n            current_row = y_pix[0]\n            current_col = y_pix[1]\n\n            while 0 <= current_row < rows and 0 <= current_col < cols:\n                output_grid[current_row, current_col] = 4\n                current_row += dr\n                current_col += dc\n\n            # mirror\n            mirrored_row = center_row - row_offset\n            mirrored_col = center_col - col_offset\n            if 0 <= mirrored_row < rows and 0 <= mirrored_col < cols:\n                current_row = mirrored_row\n                current_col = mirrored_col\n                while 0 <= current_row < rows and 0 <= mirrored_col < cols:\n                  output_grid[current_row, current_col] = 4\n                  current_row -= dr\n                  current_col -= dc\n\n  return output_grid\n\ndef move_center(grid, center):\n    output_grid = np.copy(grid)\n    rows, _ = grid.shape\n    center_row, center_col = center\n\n    new_center_row = rows // 2\n    output_grid[center_row, center_col] = 0  # Clear original center\n    output_grid[new_center_row, center_col] = 1 # Place in new center\n\n    return output_grid\n\ndef fill_between_red(grid):\n  output_grid = np.copy(grid)\n  rows,cols = output_grid.shape\n  red_rows = np.unique(np.argwhere(output_grid == 2)[:,0])\n\n  for r in range(rows):\n    if r not in red_rows:\n      for c in range(cols):\n        output_grid[r,c] = 0\n\n  for i in range(len(red_rows) - 1):\n    for r in range(red_rows[i] + 1, red_rows[i+1]):\n      for c in range(cols):\n        if output_grid[r,c] != 4:\n            output_grid[r,c] = 2\n  return output_grid\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n\n    # Find the center (blue pixel)\n    center = find_center(input_grid)\n    if center is None:\n        return output_grid\n\n    # Fill Yellow Component\n    output_grid = fill_yellow(output_grid, center)\n\n    # Fill Red Component\n    output_grid = fill_red(output_grid, center)\n\n    # fill between the red\n    output_grid = fill_between_red(output_grid)\n\n    # Move Blue to Vertical Center\n    output_grid = move_center(output_grid, center)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5251,
    "candidates_token_count": 1158,
    "total_token_count": 6409,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.273992,
  "response_file": "012-response.json"
}