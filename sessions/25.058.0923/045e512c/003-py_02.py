import numpy as np

def describe_grid(grid):
    """Provides a textual description of a grid."""
    height, width = grid.shape
    unique_colors = np.unique(grid)
    color_counts = {color: np.count_nonzero(grid == color) for color in unique_colors}
    return f"Height: {height}, Width: {width}, Colors: {color_counts}"


def compare_grids(grid1, grid2):
    """Compares two grids and returns a description of differences."""
    if grid1.shape != grid2.shape:
        return "Grids have different shapes."
    diff = grid1 != grid2
    if np.any(diff):
        num_diffs = np.sum(diff)
        diff_coords = np.where(diff)
        diff_desc = []
        for i in range(num_diffs):
             r, c = diff_coords[0][i], diff_coords[1][i]
             diff_desc.append(f"  Pixel at ({r}, {c}): Expected {grid2[r, c]}, Found {grid1[r, c]}")

        return f"Grids differ in {num_diffs} pixels:\n" + "\n".join(diff_desc)
    else:
        return "Grids are identical."


# Example Data (replace with actual data from the training examples)
# input grids
train_input_0 = np.array([[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,3,3,3,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0]])

train_output_0 = np.array([[0,0,0,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0],
                          [0,0,0,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0],
                          [0,0,0,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0],
                          [0,0,0,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0],
                          [0,0,0,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0],
                          [0,0,0,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3],
                          [0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3],
                          [0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0]])
train_input_1 = np.array([[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,8,8,8,8,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]])

train_output_1 = np.array([[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,0,0,0],
                          [0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]])
train_input_2 = np.array([[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                         [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                         [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                         [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                         [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                         [0,0,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,0,0,0,0,0],
                         [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                         [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                         [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                         [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                         [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                         [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                         [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                         [0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0],
                         [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                         [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]])

train_output_2 = np.array([[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,8,8,8,8,8,8,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,8,8,8,8,8,8,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]])

train_predicted_0 = transform(train_input_0)
train_predicted_1 = transform(train_input_1)
train_predicted_2 = transform(train_input_2)

print("Example 0:")
print(describe_grid(train_input_0))
print(describe_grid(train_output_0))
print(describe_grid(train_predicted_0))
print(compare_grids(train_output_0, train_predicted_0))

print("\nExample 1:")
print(describe_grid(train_input_1))
print(describe_grid(train_output_1))
print(describe_grid(train_predicted_1))
print(compare_grids(train_output_1, train_predicted_1))

print("\nExample 2:")
print(describe_grid(train_input_2))
print(describe_grid(train_output_2))
print(describe_grid(train_predicted_2))
print(compare_grids(train_output_2, train_predicted_2))