import numpy as np

def grid_diff(grid1, grid2):
    """Compute the element-wise difference between two grids, handling None."""
    if grid1 is None or grid2 is None:
        return None
    return np.array(grid1) - np.array(grid2)

def analyze_results(examples):
    analysis = []
    for i, example in enumerate(examples):
        input_grid = example['input']
        expected_output = example['output']

        # Run transformation
        actual_output = transform(input_grid)

        #convert to arrays
        input_grid = np.array(input_grid)
        expected_output = np.array(expected_output)
        actual_output = np.array(actual_output)
        
        diff_expected_actual = grid_diff(expected_output, actual_output)
        
        input_color_counts = {color: np.count_nonzero(input_grid == color) for color in range(10)}
        expected_output_color_counts = {color: np.count_nonzero(expected_output == color) for color in range(10)}
        actual_output_color_counts = {color: np.count_nonzero(actual_output == color) for color in range(10)}

        analysis.append({
            'example_index': i,
            'input_color_counts': input_color_counts,
            'expected_output_color_counts': expected_output_color_counts,
            'actual_output_color_counts': actual_output_color_counts,
            'diff_expected_actual': diff_expected_actual.tolist() if diff_expected_actual is not None else None,
        })

    return analysis

# Assuming 'train' is a list of dictionaries as provided in the task
examples = task['train']
analysis = analyze_results(examples)

# Print color counts and differences for each example
for example_analysis in analysis:
    print(f"Example {example_analysis['example_index'] + 1}:")
    print(f"  Input Color Counts: {example_analysis['input_color_counts']}")
    print(f"  Expected Output Color Counts: {example_analysis['expected_output_color_counts']}")
    print(f"  Actual Output Color Counts: {example_analysis['actual_output_color_counts']}")
    print(f"  Differences (Expected - Actual):\n{example_analysis['diff_expected_actual']}")
    print("-" * 40)