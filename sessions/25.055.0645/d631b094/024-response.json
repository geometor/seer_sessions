{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe input may consist of one or more grids. For each input grid, the program counts the occurrences of each unique color present.\nIf there is one input grid, it creates a single-row output grid and populates it with the counted number of pixels for each color,\nmaintaining the order in which the colors appear. If there are multiple input grids, the program creates a corresponding number of rows\nin the output grid, with the width being equal to the widest input grid. It then populates each row with the counted number of pixels for each unique\ncolor found in the corresponding input grid, padding shorter rows with zeros as needed.\n\"\"\"\n\nimport numpy as np\n\ndef count_colors(grid):\n    \"\"\"Counts the occurrences of each unique color in a grid.\"\"\"\n    unique_colors = np.unique(grid)\n    color_counts = {}\n    for color in unique_colors:\n        color_counts[color] = np.sum(grid == color)\n    return color_counts\n\ndef transform(grids):\n    # Handle the case where 'grids' is a single NumPy array.\n    if isinstance(grids, np.ndarray):\n        grids = [grids]\n\n    num_grids = len(grids)\n    max_width = 0\n\n    # Count colors and find the maximum width for multiple grids.\n    all_color_counts = []\n    for grid in grids:\n      color_counts = count_colors(grid)\n      all_color_counts.append(color_counts)\n      total_pixels = sum(color_counts.values())\n      max_width = max(max_width, total_pixels)\n\n\n    # Create output grid based on the number of input grids\n    if num_grids == 1:\n        output_grid = np.zeros((1, max_width), dtype=int)\n        current_index = 0\n        color_counts = all_color_counts[0]\n        for color in sorted(color_counts.keys(), key=lambda k: np.where(grids[0] == k)[1][0] if np.any(grids[0] == k) else -1 ): #find first index where a color appears and sort by that\n            count = color_counts[color]\n            output_grid[0, current_index:current_index + count] = color\n            current_index += count\n\n    else:\n        output_grid = np.zeros((num_grids, max_width), dtype=int)\n        for i, color_counts in enumerate(all_color_counts):\n            current_index = 0\n            for color in sorted(color_counts.keys(), key=lambda k: np.where(grids[i] == k)[1][0] if np.any(grids[i] == k) else -1 ): #sort color by first appearance\n                count = color_counts[color]\n                output_grid[i, current_index:current_index + count] = color\n                current_index += count\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2674,
    "candidates_token_count": 674,
    "total_token_count": 3348,
    "cached_content_token_count": 0
  },
  "response_time": 7.900214,
  "response_file": "024-response.json"
}