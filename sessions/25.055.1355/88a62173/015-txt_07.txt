import numpy as np

def describe_grid(grid):
    grid = np.array(grid)
    rows, cols = grid.shape
    unique_colors = np.unique(grid)
    description = f"Shape: {rows}x{cols}, Colors: {list(unique_colors)}"
    return description

def show_result(transform,example):
      i = example['input']
      o = example['output']
      p = transform(i)
      print(f'   input: {describe_grid(i)}')
      print(f'expected: {describe_grid(o)}')
      print(f'  output: {describe_grid(p)}')
      print(f'  equal?: {np.array_equal(o,p)}')
      print('')

def show_results(transform,task):
    for i, example in enumerate(task['train']):
      print(f'example {i}')
      show_result(transform, example)
    print(f'test set')
    show_result(transform, task['test'][0])

from task_descriptions import task1
transform_function = transform # rename to avoid clashing with task in notebook
show_results(transform_function, task1)