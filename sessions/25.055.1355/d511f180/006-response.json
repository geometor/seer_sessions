{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Global Swap:** Swap all pixels of color 8 (azure) with color 5 (gray) and all pixels of color 5 (gray) with color 8 (azure).\n2.  **Conditional Magenta Swap:** Change any pixel of color 6 (magenta) to color 8 (azure) if *any* of its immediate neighbors (up, down, left, or right) is color 5 (gray).\n3.  **Preservation:** All other pixels remain unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, row, col):\n    \"\"\"Gets the neighbors of a cell.\"\"\"\n    rows, cols = grid.shape\n    neighbors = {}\n    if row > 0:\n        neighbors[\"up\"] = int(grid[row - 1, col])\n    if row < rows - 1:\n        neighbors[\"down\"] = int(grid[row + 1, col])\n    if col > 0:\n        neighbors[\"left\"] = int(grid[row, col - 1])\n    if col < cols - 1:\n        neighbors[\"right\"] = int(grid[row, col + 1])\n    return neighbors\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Iterate through each pixel of the input grid\n    for r in range(rows):\n        for c in range(cols):\n            # Global Swap: Azure (8) and Gray (5)\n            if input_grid[r, c] == 8:\n                output_grid[r, c] = 5\n            elif input_grid[r, c] == 5:\n                output_grid[r, c] = 8\n            # Conditional Magenta Swap\n            elif input_grid[r, c] == 6:\n                neighbors = get_neighbors(input_grid, r, c)\n                if any(neighbor_color == 5 for neighbor_color in neighbors.values()):\n                    output_grid[r, c] = 8\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3627,
    "candidates_token_count": 484,
    "total_token_count": 4111,
    "cached_content_token_count": 0
  },
  "response_time": 4.778025,
  "response_file": "006-response.json"
}