# This is a placeholder. In a real interaction, I would have access to the
# actual 'inputs', 'outputs', and 'predicted_outputs' from the previous code
# execution.  I'm simulating that here to demonstrate the process.
# I will use data from the json included in the next message

# Example data (replace with actual data from the task)
example_inputs = [
    np.array([[1, 1, 1], [1, 1, 1], [1, 1, 1]]),  # Example Input 1
    np.array([[2, 2, 2], [2, 2, 2]]),          # Example Input 2
    np.array([[3, 3], [3, 3], [3, 3]]),        # Example Input 3
]

example_outputs = [
    np.array([[1, 1, 1], [1, 1, 1], [1, 1, 1]]), # Example Output 1 (Matches Input 1)
    np.array([[0, 0, 0], [0, 0, 0]]),          # Example Output 2 (Different from Input 2)
    np.array([[3, 3], [3, 3], [0, 0]])         # Example Output 3
]
predicted_outputs = [
    np.array([[0, 0, 0], [0, 0, 0], [0, 0, 0]]), # Example Predicted Output 1 (all 0)
    np.array([[0, 0, 0], [0, 0, 0]]),       # Example Predicted Output 2 (all 0)
    np.array([[3, 3], [3, 3], [3, 3]])              # Example Predicted Output 3 (same as input)
]

report_results(example_inputs, example_outputs, predicted_outputs)

#calculate the difference between the predicted and expected output.
diffs = []
for i in range(len(example_outputs)):
    diffs.append(example_outputs[i] - predicted_outputs[i])
print(f"{diffs=}")
