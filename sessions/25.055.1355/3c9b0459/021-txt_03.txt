import numpy as np

# Define the transform function
def transform(input_grid):
    # initialize output_grid
    output_grid = np.copy(input_grid)

    # Swap elements (0,0) and (0,1)
    output_grid[0, 0], output_grid[0, 1] = output_grid[0, 1], output_grid[0, 0]

    # Swap elements (2,0) and (2,1)
    output_grid[2, 0], output_grid[2, 1] = output_grid[2, 1], output_grid[2, 0]
    
    # Swap elements (0,2) and (1,1)
    output_grid[0, 2], output_grid[1, 1] = output_grid[1, 1], output_grid[0, 2]
    
    # The last specified swap would result in (2,1) getting overwritten, and therefore not correct.
    # Therefore it needs to be removed from code.
    
    return output_grid

# Example Input Grids (from the ARC task)
input_grids = [
    np.array([[5, 8, 5], [8, 5, 8], [5, 8, 2]]),  # Example 1
    np.array([[6, 0, 6], [0, 6, 0], [6, 0, 3]]),  # Example 2
    np.array([[7, 0, 7], [0, 7, 0], [7, 0, 9]]),  # Example 3
]

# Generate corresponding output grids
output_grids_actual = [transform(input_grid) for input_grid in input_grids]

# Expected output grids
output_grids_expected = [
    np.array([[8, 5, 5], [8, 5, 8], [8, 5, 2]]),
    np.array([[0, 6, 6], [0, 6, 0], [0, 6, 3]]),
    np.array([[0, 7, 7], [0, 7, 0], [0, 7, 9]]),
]

# Compare and print results
for i, (actual, expected) in enumerate(zip(output_grids_actual, output_grids_expected)):
    print(f"Example {i+1}:")
    print("Input:\n", input_grids[i])
    print("Actual Output:\n", actual)
    print("Expected Output:\n", expected)
    print("Match:", np.array_equal(actual, expected))
    print("-" * 20)