import numpy as np

def find_gray_column(grid):
    # Find the column index of the gray (5) line
    rows, cols = grid.shape
    for j in range(cols):
        if all(grid[:, j] == 5):
            return j
    return -1  # Return -1 if no gray column is found

def transform(input_grid):
    # Convert input to numpy array
    input_grid = np.array(input_grid)

    # Find center column index
    center_col = find_gray_column(input_grid)

    # Initialize output_grid
    output_grid = np.zeros((3, 3), dtype=int)

    # Handle if no gray column exists
    if center_col == -1 :
        rows, cols = input_grid.shape
        if(rows >= 3 and cols >= 3):
            output_grid = input_grid[0:3, 0:3].copy()
            output_grid[input_grid[0:3, 0:3] == 1] = 2
            return output_grid
        else:
          return input_grid

    # Extract 3x3 subgrid
    start_col = max(0, center_col - 1)
    end_col = min(input_grid.shape[1], center_col + 2)
    
    subgrid = input_grid[:, start_col:end_col]

    if subgrid.shape[1] < 3:
        padding = 3- subgrid.shape[1]
        pad_left = padding //2
        pad_right = padding - pad_left
        
        subgrid = np.pad(subgrid, ((0,0),(pad_left, pad_right)), mode='constant', constant_values=0 )
    
    output_grid = subgrid.copy()


    # Recolor blue (1) to red (2)
    output_grid[output_grid == 1] = 2

    return output_grid
    
task = '6d58a25d'
examples = [
    {
"input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 1, 0, 0, 5, 0, 0, 1, 1, 1],[0, 0, 0, 0, 5, 0, 0, 0, 0, 0],[0, 0, 0, 0, 5, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
"output": [[0, 0, 0],[1, 0, 0],[0, 0, 0]]
    },
    {
"input": [[0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 5, 0, 0, 0, 0],[0, 0, 0, 0, 5, 0, 0, 1, 0],[0, 0, 0, 0, 5, 0, 0, 0, 0],[0, 1, 0, 0, 5, 0, 0, 1, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0]],
"output": [[0, 0, 0],[0, 0, 1],[0, 0, 0]]
    },
     {
"input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 1, 0, 0, 5, 0, 0, 1, 1, 1],[0, 0, 0, 0, 5, 0, 0, 0, 0, 0],[0, 0, 0, 0, 5, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
"output": [[0, 0, 0],[1, 0, 0],[0, 0, 0]]
    },
    {
"input": [[0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 5, 0, 0, 0, 0],[0, 0, 0, 0, 5, 0, 0, 1, 0],[0, 0, 0, 0, 5, 0, 0, 0, 0],[0, 1, 0, 0, 5, 0, 0, 1, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0]],
"output": [[0, 0, 0],[0, 0, 1],[0, 0, 0]]
    },
    {
"input": [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
"output": [[1, 0, 0],[0, 1, 0],[0, 0, 0]]
    },
     {
"input":      [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]],
"output": [[0, 0, 0],[0, 0, 0],[0, 0, 1]]
     }
]

def compare_grids(grid1, grid2):
    grid1 = np.array(grid1)
    grid2 = np.array(grid2)
    if grid1.shape != grid2.shape:
        return f"Different shapes: {grid1.shape} vs {grid2.shape}"
    else:
        return np.array_equal(grid1, grid2)


print(f"Task: {task}\\n")

for i, example in enumerate(examples):
    input_grid = example['input']
    expected_output = example['output']
    actual_output = transform(input_grid)
    comparison = compare_grids(expected_output, actual_output)
    print(f"Example {i + 1}:")
    print(f"  Expected Output Shape: {np.array(expected_output).shape}")
    print(f"  Actual Output Shape: {np.array(actual_output).shape}")
    print(f"  Match: {comparison}")
    if(not comparison == True):
        print(f"  Expected Output : {np.array(expected_output)}")
        print(f"  Actual Output   : {np.array(actual_output)}")
