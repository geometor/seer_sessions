import numpy as np

# Provided data (replace with actual data loading if available)
train = [
    {
        "input": [[0, 2, 0], [2, 0, 2], [0, 2, 0]],
        "output": [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
    },
    {
        "input": [[0, 9, 0], [9, 9, 9], [0, 9, 0]],
        "output": [[0, 5, 0], [5, 5, 5], [0, 5, 0]],
    },
    {
        "input": [[4, 0, 4], [0, 4, 0], [4, 0, 4]],
        "output": [[5, 0, 5], [0, 5, 0], [5, 0, 5]],
    },
    {
        "input": [[9, 9, 9], [4, 4, 4], [2, 2, 2]],
        "output": [[5, 5, 5], [5, 5, 5], [0, 0, 0]],
    },
    {
        "input": [[2, 4, 9], [2, 4, 9], [2, 4, 9]],
        "output": [[0, 5, 5], [0, 5, 5], [0, 5, 5]],
    },
]

def transform(input_grid):
    # initialize output_grid
    output_grid = np.zeros_like(input_grid)
    rows, cols = input_grid.shape

    # change output pixels
    for r in range(rows):
        for c in range(cols):
            if input_grid[r, c] == 2 or input_grid[r,c] == 0:
                output_grid[r, c] = 0
            elif input_grid[r, c] == 4 or input_grid[r, c] == 9:
                output_grid[r, c] = 5
            else:
                output_grid[r,c] = input_grid[r,c] # in case there are colors not specified in color map

    return output_grid
                
# Run the transformation and compare with expected outputs
results = []
for i, example in enumerate(train):
    input_grid = np.array(example["input"])
    expected_grid = np.array(example["output"])
    output_grid = transform(input_grid)
    
    # Check if any changes where made and the result
    if np.array_equal(output_grid, input_grid):
        change = "no change"
    else:
        change = "change"
    
    if np.array_equal(output_grid, expected_grid):
        result = "correct"
    else:
        result = "incorrect"
    
    results.append(
        {
            "example": i + 1,
            "input_grid": input_grid.tolist(),
            "output_grid": output_grid.tolist(),
            "expected_grid": expected_grid.tolist(),
            "change": change,
            "result": result,
        }
    )

for result in results:
    print(result)