{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies all contiguous blocks of orange (7) pixels in the input grid.\nExpands them, doubling their width or height based on examples.\nShifts other color pixels accordingly.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"\n    Finds all contiguous objects (blocks of same color) in a grid.\n    Returns a list of objects.\n    \"\"\"\n    objects = []\n    visited = set()\n    rows, cols = grid.shape\n\n    def dfs(row, col, color, pixels):\n        if (row, col) in visited or row < 0 or row >= rows or col < 0 or col >= cols or grid[row, col] != color:\n            return\n        visited.add((row, col))\n        pixels.append((row, col))\n        dfs(row + 1, col, color, pixels)\n        dfs(row - 1, col, color, pixels)\n        dfs(row, col + 1, color, pixels)\n        dfs(row, col - 1, color, pixels)\n\n    for row in range(rows):\n        for col in range(cols):\n            if (row, col) not in visited:\n                color = grid[row, col]\n                pixels = []\n                dfs(row, col, color, pixels)\n                if pixels:\n                    # find top_left, bottom_right\n                    pixels_array = np.array(pixels)\n                    min_row, min_col = np.min(pixels_array, axis=0)\n                    max_row, max_col = np.max(pixels_array, axis=0)\n                    objects.append({\n                        \"color\": color,\n                        \"pixels\": pixels,\n                        \"top_left\": (min_row, min_col),\n                        \"bottom_right\": (max_row, max_col)\n                    })\n    return objects\n\ndef determine_expansion_direction(examples):\n    \"\"\"\n    Determines if expansion is horizontal or vertical by comparing input/output pairs.\n    \"\"\"\n    for input_grid, output_grid in examples:\n        input_grid = np.array(input_grid)\n        output_grid = np.array(output_grid)\n        if input_grid.shape[0] != output_grid.shape[0]:\n            return \"vertical\"  # Height changed\n        if input_grid.shape[1] != output_grid.shape[1]:\n            return \"horizontal\"  # Width changed\n    return \"horizontal\"  # Default to horizontal if no change is detected\n\ndef transform(input_grid, examples=None): #added examples arg\n    # Convert input to numpy array\n    input_grid = np.array(input_grid)\n\n    # Find all objects\n    objects = find_objects(input_grid)\n\n    # Determine expansion direction\n    expansion_direction = determine_expansion_direction(examples)\n\n\n    if expansion_direction == \"horizontal\":\n        # Calculate maximum expansion needed\n        max_expansion = 0\n        for obj in objects:\n            if obj[\"color\"] == 7:\n                width = obj[\"bottom_right\"][1] - obj[\"top_left\"][1] + 1\n                max_expansion = max(max_expansion, width)\n\n        # Initialize output grid\n        output_grid = np.zeros((input_grid.shape[0], input_grid.shape[1] + max_expansion), dtype=int)\n\n        # shift tracking\n        shifts = {}\n\n        # Copy and expand, shift\n        for obj in objects:\n            if obj[\"color\"] == 7:\n                original_width = obj[\"bottom_right\"][1] - obj[\"top_left\"][1] + 1\n                expansion_amount = original_width\n\n                for row, col in obj[\"pixels\"]:\n                    #calculate shift for this row\n                    shift = shifts.get(row,0)\n                    output_grid[row, col + shift] = 7  # Original position\n                    output_grid[row, col + shift + expansion_amount] = 7  # Expanded position\n\n                # update shifts for rows below orange objects\n                for r in range(input_grid.shape[0]):\n                    orange_cols_in_row = 0\n                    for c in range(input_grid.shape[1]):\n                        if input_grid[r,c] == 7:\n                            orange_object = None\n                            for o in objects:\n                                if o['color'] == 7 and (r,c) in o['pixels']:\n                                    orange_object = o\n                                    break\n\n                            if orange_object is not None:\n                                 original_width = orange_object[\"bottom_right\"][1] - orange_object[\"top_left\"][1] + 1\n                                 orange_cols_in_row = original_width\n                                 break #found orange in row\n                    shifts[r] = shifts.get(r,0) + orange_cols_in_row #update shift\n\n            else:\n                # copy non-orange\n                for row, col in obj[\"pixels\"]:\n                    #calculate shift\n                    shift = shifts.get(row, 0)\n                    output_grid[row, col + shift] = obj[\"color\"]\n\n    elif expansion_direction == \"vertical\":\n        # Calculate maximum expansion needed\n        max_expansion = 0\n        for obj in objects:\n            if obj[\"color\"] == 7:\n                height = obj[\"bottom_right\"][0] - obj[\"top_left\"][0] + 1\n                max_expansion = max(max_expansion, height)\n\n        # Initialize output grid\n        output_grid = np.zeros((input_grid.shape[0] + max_expansion, input_grid.shape[1]), dtype=int)\n\n        # shift tracking\n        shifts = {}  # Track shifts per column\n\n        for obj in objects:\n            if obj[\"color\"] == 7:\n                # Calculate original height\n                original_height = obj[\"bottom_right\"][0] - obj[\"top_left\"][0] + 1\n                expansion_amount = original_height\n\n                # Place original and expanded copies\n                for row, col in obj[\"pixels\"]:\n                    shift = shifts.get(col, 0)\n                    output_grid[row + shift, col] = 7\n                    output_grid[row + shift + expansion_amount, col] = 7\n\n                 #update shift\n                for c in range(input_grid.shape[1]):\n                    orange_rows_in_col = 0\n                    for r in range(input_grid.shape[0]):\n                        if input_grid[r,c] == 7:\n                            orange_object = None\n                            for o in objects:\n                                if o['color'] == 7 and (r,c) in o['pixels']:\n                                    orange_object = o\n                                    break\n\n                            if orange_object is not None:\n                                original_height = orange_object['bottom_right'][0] - orange_object['top_left'][0] + 1\n                                orange_rows_in_col = original_height\n                                break\n                    shifts[c] = shifts.get(c,0) + orange_rows_in_col\n\n            else:\n                # Copy other color pixels\n                for row, col in obj[\"pixels\"]:\n                    shift = shifts.get(col, 0)\n                    output_grid[row + shift, col] = obj[\"color\"]\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5770,
    "candidates_token_count": 1695,
    "total_token_count": 7465,
    "cached_content_token_count": 0
  },
  "response_time": 14.598271,
  "response_file": "012-response.json"
}