{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms a 3x3 input grid to a 3x3 output grid based on these rules:\n\n1.  **Identify the dominant color:** Find the non-zero color that appears in the input grid. If there are two non-zero colors that appear with equal frequency and not in the center, favor the top left one.\n2.  **Zero the Center:** the center cell of the output grid is always 0.\n3.  **Map Colors**: transform the dominant color to its mapped pair:\n    *   5 (gray) becomes 4 (yellow)\n    *   8 (light blue) becomes 2 (red)\n    *   3 (green) becomes 1 (blue)\n4.  **Rotate Counter-Clockwise:** Place the transformed color in the output grid by rotating the positions of the input color 90 degrees counter-clockwise. For instance, if the color was in the top-left of the *input*, it will be in the top-center in the *output* grid; if on the top-right it goes on the left-center, etc. All positions of the input color are transformed.\n5. **Fill remaining cells**: fill all the other positions with 0\n\"\"\"\n\nimport numpy as np\n\ndef get_dominant_color(grid):\n    # Count the occurrences of each non-zero color\n    color_counts = {}\n    for row in grid:\n        for cell in row:\n            if cell != 0:\n                color_counts[cell] = color_counts.get(cell, 0) + 1\n\n    # Return the most frequent color, tie goes to top-left in original matrix\n    if not color_counts:\n        return 0\n    \n    max_count = max(color_counts.values())\n    candidates = [color for color, count in color_counts.items() if count == max_count]\n    \n    if len(candidates) == 1:\n        return candidates[0]\n    \n    # Handle ties by finding the color that appears first, top left\n    for r_idx, row in enumerate(grid):\n      for c_idx, cell in enumerate(row):\n        if cell in candidates:\n          return cell\n    \n    return 0 # should never get here, given task specs\n\ndef transform(input_grid):\n    # Initialize output_grid as all zeros\n    output_grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]\n\n    # Get the dominant color in the input grid\n    dominant_color = get_dominant_color(input_grid)\n\n    # Color mapping\n    color_map = {\n        5: 4,\n        8: 2,\n        3: 1\n    }\n    transformed_color = color_map.get(dominant_color, 0)\n\n    # Rotate and transform\n    for i in range(3):\n        for j in range(3):\n            if input_grid[i][j] == dominant_color:\n                # Rotate 90 degrees counter-clockwise: (i, j) -> (j, 2 - i)\n                new_i, new_j = j, 2 - i\n                output_grid[new_i][new_j] = transformed_color\n\n    # the center position is always zero\n    output_grid[1][1] = 0\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2007,
    "candidates_token_count": 767,
    "total_token_count": 2774,
    "cached_content_token_count": 0
  },
  "response_time": 85.232666
}