def find_object(grid, value):
    coords = np.argwhere(grid == value)
    return coords

def get_object_bounds(coords):
    if len(coords) == 0:
        return None
    min_x = np.min(coords[:, 0])
    max_x = np.max(coords[:, 0])
    min_y = np.min(coords[:, 1])
    max_y = np.max(coords[:, 1])
    return (min_x, min_y, max_x, max_y)

def get_object_dimensions(coords):
  bounds = get_object_bounds(coords)
  if bounds is None:
    return (0,0)
  return (bounds[2] - bounds[0] + 1, bounds[3] - bounds[1] + 1)

def is_connected(gray_coords, maroon_coords):
    # check that gray and maroon form contiguous object
    if len(gray_coords) == 0 or len(maroon_coords) == 0:
        return False

    for g_x, g_y in gray_coords:
        for m_x, m_y in maroon_coords:
            if abs(g_x - m_x) <= 1 and abs(g_y - m_y) <=1:
              return True
    return False

def analyze_example(input_grid, output_grid):
    input_grid = np.array(input_grid)
    output_grid = np.array(output_grid)

    input_gray_coords = find_object(input_grid, 5)
    input_maroon_coords = find_object(input_grid, 9)
    output_gray_coords = find_object(output_grid, 5)
    output_maroon_coords = find_object(output_grid, 9)

    input_gray_bounds = get_object_bounds(input_gray_coords)
    input_maroon_bounds = get_object_bounds(input_maroon_coords)
    output_gray_bounds = get_object_bounds(output_gray_coords)
    output_maroon_bounds = get_object_bounds(output_maroon_coords)
    
    input_gray_dims = get_object_dimensions(input_gray_coords)
    input_maroon_dims = get_object_dimensions(input_maroon_coords)
    output_gray_dims = get_object_dimensions(output_gray_coords)
    output_maroon_dims = get_object_dimensions(output_maroon_coords)
    

    connected = is_connected(input_gray_coords, input_maroon_coords)

    report = {
        "input_gray": {
            "coords": input_gray_coords.tolist() if len(input_gray_coords) > 0 else [],
            "bounds": input_gray_bounds,
            "dimensions": input_gray_dims
        },
        "input_maroon": {
            "coords": input_maroon_coords.tolist() if len(input_maroon_coords) > 0 else [],
            "bounds": input_maroon_bounds,
            "dimensions": input_maroon_dims
        },
        "output_gray": {
            "coords": output_gray_coords.tolist() if len(output_gray_coords) > 0 else [],
            "bounds": output_gray_bounds,
            "dimensions": output_gray_dims
        },
        "output_maroon": {
            "coords": output_maroon_coords.tolist() if len(output_maroon_coords) > 0 else [],
            "bounds": output_maroon_bounds,
            "dimensions": output_maroon_dims
        },
        "connected": connected,
    }
    return report

import numpy as np

examples = [
    ([[5, 9, 9, 9, 9], [5, 9, 9, 9, 9], [5, 9, 9, 9, 9], [5, 9, 9, 9, 9]], [[0, 9, 9, 9, 9], [0, 9, 9, 9, 9], [0, 9, 9, 9, 9], [0, 9, 9, 9, 9]]),
    ([[9, 9, 5, 9, 9], [9, 9, 5, 9, 9]], [[9, 9, 0, 9, 9], [9, 9, 0, 9, 9]]),
    ([[5, 9, 9, 5, 9, 9], [5, 9, 9, 5, 9, 9], [5, 9, 9, 5, 9, 9]], [[0, 9, 9, 0, 9, 9], [0, 9, 9, 0, 9, 9], [0, 9, 9, 0, 9, 9]]),
    ([[9, 5, 9, 9, 9], [9, 5, 9, 9, 9], [9, 5, 9, 9, 9], [9, 5, 9, 9, 9], [9, 5, 9, 9, 9]], [[9, 0, 9, 9, 9], [9, 0, 9, 9, 9], [9, 0, 9, 9, 9], [9, 0, 9, 9, 9], [9, 0, 9, 9, 9]]),
    ([[9, 9, 9, 5, 9], [9, 9, 9, 5, 9], [9, 9, 9, 5, 9], [9, 9, 9, 5, 9]], [[9, 9, 9, 0, 9], [9, 9, 9, 0, 9], [9, 9, 9, 0, 9], [9, 9, 9, 0, 9]])
]

reports = []
for i in range(len(examples) // 2):
  reports.append(analyze_example(examples[i*2], examples[i*2+1]))
print(reports)