{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. Remove Gray Object: If a gray object (color 5) exists in the input grid, remove it by changing its pixels to white (color 0).\n\n2. Transform Maroon Object: If a maroon object (color 9) exists in the input grid:\n   * If the maroon object is part of a shape that includes a gray object connected on the left, then the maroon section remains and the gray section is removed.\n   * Otherwise, transform the maroon object into a horizontal line of maroon pixels.\n   * The length of the horizontal line is equal to the height + width of the input maroon object.\n   * The y-coordinate of the horizontal line is equal to the maroon object's minimum y.\n   * The x-coordinate of the new line is equal to original object bounds, minus 1.\n\"\"\"\n\nimport numpy as np\n\ndef find_object(grid, value):\n    coords = np.argwhere(grid == value)\n    return coords\n\ndef get_object_bounds(coords):\n    if len(coords) == 0:\n        return None\n    min_x = np.min(coords[:, 0])\n    max_x = np.max(coords[:, 0])\n    min_y = np.min(coords[:, 1])\n    max_y = np.max(coords[:, 1])\n    return (min_x, min_y, max_x, max_y)\n\ndef get_object_dimensions(coords):\n  bounds = get_object_bounds(coords)\n  if bounds is None:\n    return (0,0)\n  return (bounds[2] - bounds[0] + 1, bounds[3] - bounds[1] + 1)\n\ndef is_connected(gray_coords, maroon_coords):\n    # check that gray and maroon form contiguous object\n    if len(gray_coords) == 0 or len(maroon_coords) == 0:\n        return False\n\n    for g_x, g_y in gray_coords:\n        for m_x, m_y in maroon_coords:\n            if abs(g_x - m_x) <= 1 and abs(g_y - m_y) <=1:\n              return True\n    return False\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n    input_grid = np.array(input_grid)\n\n    # find gray object\n    gray_coords = find_object(input_grid, 5)\n    # Remove Gray Object\n    for x, y in gray_coords:\n        output_grid[x, y] = 0\n\n    # find maroon object\n    maroon_coords = find_object(input_grid, 9)\n    if len(maroon_coords) == 0:\n        return output_grid\n\n    maroon_bounds = get_object_bounds(maroon_coords)\n    maroon_dims = get_object_dimensions(maroon_coords)\n\n    # check if they form a single shape\n    if is_connected(gray_coords, maroon_coords):\n      return output_grid\n\n    # Transform Maroon object into horizontal line.\n    new_length = maroon_dims[0] + maroon_dims[1]\n    min_x, min_y, _, _ = maroon_bounds\n    start_x = min_x -1\n\n    # remove the existing maroon object\n    for x,y in maroon_coords:\n      output_grid[x,y] = 0\n\n    for i in range(new_length):\n        new_x = start_x + i\n        if 0 <= new_x < output_grid.shape[0] and 0 <= min_y < output_grid.shape[1]:\n          output_grid[new_x, min_y] = 9\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8018,
    "candidates_token_count": 881,
    "total_token_count": 8899,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.036353,
  "response_file": "012-response.json"
}