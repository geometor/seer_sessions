{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation identifies two shapes in the input grid: one of gray (5) pixels and another of maroon (9) pixels. The gray shape is removed (replaced with white (0)), and the maroon shape is rotated 45 degrees clockwise around its top-right corner. The background (0) remains unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef find_object(grid, value):\n    # Find coordinates of all pixels with the given value\n    coords = np.argwhere(grid == value)\n    return coords\n\ndef rotate_shape_45_degrees(coords, pivot):\n    # Rotate coordinates 45 degrees clockwise around a pivot point.\n    # Basic formula for 45 degree rotation\n    # x' = (x - a) * cos(45) - (y - b) * sin(45) + a\n    # y' = (x - a) * sin(45) + (y - b) * cos(45) + b\n    # Where (a,b) are the pivot x and y\n    # sin(45) = cos(45) for 45 degrees = 0.7071 (approx)\n\n    rotated_coords = []\n    a, b = pivot\n    for x, y in coords:\n        new_x = int(round((x - a) * 0.7071 - (y - b) * 0.7071 + a))\n        new_y = int(round((x - a) * 0.7071 + (y - b) * 0.7071 + b))\n        rotated_coords.append((new_x, new_y))\n    return rotated_coords\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of the input grid\n    output_grid = np.copy(input_grid)\n\n    # Find maroon (9) object\n    maroon_coords = find_object(input_grid, 9)\n    if len(maroon_coords) == 0:\n        return output_grid\n\n    # Remove the gray object (5)\n    gray_coords = find_object(input_grid, 5)\n    for x,y in gray_coords:\n        output_grid[x,y] = 0\n\n    # find pivot - the top-right maroon pixel\n    min_y = np.min(maroon_coords[:, 1])\n    top_maroon_coords = maroon_coords[maroon_coords[:,1] == min_y]\n    min_x = np.min(top_maroon_coords[:, 0])\n    pivot_coord = (min_x, min_y)\n\n\n    # Rotate maroon object\n    rotated_maroon_coords = rotate_shape_45_degrees(maroon_coords, pivot_coord)\n\n\n    # Place rotated maroon pixels in the output grid, handling out-of-bounds\n    for x, y in rotated_maroon_coords:\n        if 0 <= x < output_grid.shape[0] and 0 <= y < output_grid.shape[1]:\n            output_grid[x, y] = 9\n        # else the rotated coordinate goes off the board\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2560,
    "candidates_token_count": 737,
    "total_token_count": 3297,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.358566,
  "response_file": "010-response.json"
}