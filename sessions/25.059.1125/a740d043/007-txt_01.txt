import numpy as np

def describe_grid(grid):
    grid = np.array(grid)
    height, width = grid.shape
    unique_colors = np.unique(grid)
    return {
        "height": int(height),
        "width": int(width),
        "unique_colors": [int(c) for c in unique_colors]
    }

task = {
    "train": [
        {
            "input": [[1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 0, 0]],
            "output": [[0, 0], [0, 0]]
        },
        {
            "input": [[1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1]],
            "output": [[1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1]]
        },
        {
            "input": [[1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0]],
            "output": [[1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0]]
        },
    ],
    "test": [
        {
            "input": [[1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1]],
            "output": [[1, 1, 1, 1, 1, 1, 1, 1]]
        }
    ]
}

for i, example in enumerate(task["train"]):
    input_desc = describe_grid(example["input"])
    output_desc = describe_grid(example["output"])
    print(f"Example {i+1}:")
    print(f"  Input:  {input_desc}")
    print(f"  Output: {output_desc}")

    # Call transform with the current example's input
    result = transform(example["input"])
    result_desc = describe_grid(result)

    print(f"  Result: {result_desc}")  # Description of the generated result
    print(f"  Correct: {result == example['output']}") # Check against expected output
    print("-" * 20)