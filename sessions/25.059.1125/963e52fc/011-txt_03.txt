import numpy as np

def analyze_grid(grid):
    """Analyzes a single grid and returns relevant metrics."""
    height, width = grid.shape
    unique_colors = np.unique(grid)
    color_counts = {color: np.count_nonzero(grid == color) for color in unique_colors}
    return {
        "height": height,
        "width": width,
        "unique_colors": unique_colors.tolist(),
        "color_counts": color_counts,
    }

def analyze_example(example):
    """Analyzes input and output grids of a single example."""
    input_analysis = analyze_grid(np.array(example["input"]))
    output_analysis = analyze_grid(np.array(example["output"]))
    return {
        "input": input_analysis,
        "output": output_analysis,
    }

def analyze_results(train_examples, transform_func):
    """Analyzes all training examples and the transform function's results."""
    analysis_results = []
    for example in train_examples:
      input_grid = np.array(example['input'])
      output_grid = np.array(example['output'])

      transformed_grid = transform_func(input_grid)
      correct = np.array_equal(transformed_grid, output_grid)
      analysis_results.append({
          "example": analyze_example(example),
          "transform_correct": correct
          })
    return analysis_results

# Assuming 'train' is the list of training examples and 'transform' is defined
results = analyze_results(train, transform)
print(results)