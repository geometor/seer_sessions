        [[0 0 0]
        [0 7 0]
        [0 0 0]]
        ```
*   Output Shape: 3x6
    - Output Grid:
        ```
        [[0 0 0 0 0 0]
        [0 7 0 7 0 0]
        [0 0 0 0 0 0]]
        ```
*   Orange Blocks: \[ (1, 1, 1) ]
*   `code_execution` Result: The existing code will get this case *Correct*. The logic of doubling and coping works.

**Example 3:**

*   Input Shape: 3x3
    - Input Grid:
      ```
      [[0 0 0]
      [0 7 7]
      [0 0 0]]
      ```
*   Output Shape: 3x6
    - Output Grid:
        ```
        [[0 0 0 0 0 0]
        [0 7 7 7 7 0]
        [0 0 0 0 0 0]]
        ```
*   Orange Blocks: \[ (1, 1, 2) ]
*   `code_execution` Result: The existing code will get this case *Correct*. The block is correctly doubled in length.

**Example 4:**
*   Input Shape: 3x3
    - Input Grid:
      ```
      [[7 7 7]
      [7 7 7]
      [7 7 7]
      ```
*   Output Shape: 3x6
    - Output Grid:
        ```
        [[7 7 7 7 7 7]
        [7 7 7 7 7 7]
        [7 7 7 7 7 7]
        ```
*   Orange Blocks: \[ (0,0,2), (1, 0, 2), (2, 0, 2) ]
*   `code_execution` Result: The existing code will get this case *Correct*.

**YAML Facts:**
