import numpy as np

def describe_grid(grid):
    rows, cols = grid.shape
    color_counts = {color: 0 for color in range(10)}
    for value in np.nditer(grid):
        color_counts[int(value)] += 1
    return rows, cols, color_counts

def analyze_examples(examples):
    analysis = []
    for idx, example in enumerate(examples):
        input_grid = np.array(example['input'])
        output_grid = np.array(example['output'])
        input_rows, input_cols, input_counts = describe_grid(input_grid)
        output_rows, output_cols, output_counts = describe_grid(output_grid)
        analysis.append({
            'example_index': idx,
            'input_shape': (input_rows, input_cols),
            'output_shape': (output_rows, output_cols),
            'input_color_counts': input_counts,
            'output_color_counts': output_counts,
            'differences': {color: output_counts[color] - input_counts[color] for color in range(10)}
        })
    return analysis

# Provided training examples (replace with actual data)
examples = [
    {'input': [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], 'output': [[1, 0, 0], [1, 0, 0], [1, 0, 0], [0, 0, 0], [0, 2, 2, 2, 2], [0, 2, 2, 2, 2], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 3]]},
    {'input': [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], 'output': [[1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3]]},
    {'input': [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], 'output': [[1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2], [0, 2, 2, 2, 2], [0, 0, 0, 0, 0, 3]]}

]

analysis = analyze_examples(examples)

for item in analysis:
  print(item)