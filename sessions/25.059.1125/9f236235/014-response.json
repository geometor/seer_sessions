{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by identifying contiguous regions (blocks) of specific\ntarget colors and placing a representative pixel from each block into an output\ngrid, preserving their relative positions. The target colors can be blue (1),\nred (2), green (3), or orange (7). The output grid's dimensions are determined\nby the number of identified blocks.\n\"\"\"\n\nimport numpy as np\n\ndef find_colored_blocks(grid, target_colors):\n    \"\"\"Finds distinct colored blocks in the grid.\"\"\"\n    blocks = []\n    visited = set()\n\n    def is_valid(r, c):\n        return 0 <= r < grid.shape[0] and 0 <= c < grid.shape[1]\n\n    def dfs(r, c, color, block):\n        if (r, c) in visited or not is_valid(r, c) or grid[r, c] != color:\n            return\n        visited.add((r, c))\n        block.append((r, c))\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            dfs(r + dr, c + dc, color, block)\n\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            color = grid[r, c]\n            if color in target_colors and (r, c) not in visited:\n                block = []\n                dfs(r, c, color, block)\n                blocks.append({\"color\": color, \"pixels\": block})\n    return blocks\n\ndef get_representative_pixel(block):\n    \"\"\"Selects a representative pixel from a block (top-left corner).\"\"\"\n    return block[\"pixels\"][0]\n\ndef transform(input_grid):\n    # Convert input_grid to a NumPy array\n    input_grid = np.array(input_grid)\n\n    # Determine target colors present in this example\n    target_colors = sorted(list(set([color for color in np.unique(input_grid) if color in [1, 2, 3, 7]])))\n\n    # Find colored blocks\n    colored_blocks = find_colored_blocks(input_grid, target_colors)\n    num_blocks = len(colored_blocks)\n\n    # Determine output grid size\n    if num_blocks == 0:\n        return np.array([[]])  # Return empty grid if no target blocks\n    elif num_blocks == 1:\n        output_grid = np.zeros((1, 1), dtype=int)\n        output_grid[0, 0] = colored_blocks[0][\"color\"]\n        return output_grid\n    else:\n        grid_size = num_blocks\n        output_grid = np.zeros((grid_size, grid_size), dtype=int)\n\n    # Create a mapping of representative pixels to their relative positions\n    positions = []\n    for block in colored_blocks:\n        r, c = get_representative_pixel(block)\n        positions.append(((r, c), block[\"color\"]))\n\n    # Sort positions based on row and then column to maintain relative positions\n    positions.sort()\n\n    # Place representative pixels in the output grid\n    for i, (pos, color) in enumerate(positions):\n        row = i // grid_size\n        col = i % grid_size\n        output_grid[row, col] = color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3407,
    "candidates_token_count": 785,
    "total_token_count": 4192,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.82816,
  "response_file": "014-response.json"
}