import numpy as np

def code_execution(input_grid, expected_output, transform_func):
    """Executes the transform function and compares the result with the expected output."""
    actual_output = transform_func(input_grid)
    comparison = np.array_equal(actual_output, np.array(expected_output))
    return actual_output, comparison

# Example usage (assuming train_data is a list of (input, output) pairs)
train_data = [
    ([[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7], [3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7], [3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7], [3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7], [3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7], [3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7]], [[0, 7, 7], [0, 7, 7], [0, 0, 0]]),
    ([[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]]),
    ([[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3], [8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3], [8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3], [8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3], [8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3], [8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3]], [[0, 0, 0], [8, 0, 0], [8, 0, 0]]),
    ([[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7], [3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7], [3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7], [3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7], [3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7], [3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7], [3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7]], [[0, 7, 7], [0, 7, 7], [0, 0, 0]]),
    ([[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]], [[8, 0, 0], [8, 0, 0], [8, 0, 0]])
]

for i, (input_grid, expected_output) in enumerate(train_data):
    actual_output, comparison = code_execution(input_grid, expected_output, transform)
    print(f"Example {i+1}:")
    print(f"  Input:\n{np.array(input_grid)}")
    print(f"  Expected Output:\n{np.array(expected_output)}")
    print(f"  Actual Output:\n{actual_output}")
    print(f"  Correct: {comparison}")
    print("-" * 20)