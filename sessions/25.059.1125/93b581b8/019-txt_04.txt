import numpy as np

def transform(input_grid):
    # Initialize the output grid with zeros, same size as input.
    output_grid = np.zeros_like(input_grid)

    # Get the dimensions of the grid
    rows, cols = input_grid.shape

    # 1. & 2. Preserve the central 2x2 block
    #    Adjusted indexing to work for odd and even dimensions
    center_row = rows // 2
    center_col = cols // 2
    output_grid[center_row-1:center_row+1, center_col-1:center_col+1] = input_grid[center_row-1:center_row+1, center_col-1:center_col+1]

    # 3. Mirror Top-Left:  Bottom-right of core to top-left of output.
    output_grid[0:2, 0:2] = input_grid[center_row, center_col]
    
    # 4. Mirror Top-Right: Bottom-left of core to top-right of output
    output_grid[0:2, cols-2:cols] = input_grid[center_row, center_col-1]

    # 5. Mirror Bottom-Left: Top-right of core to bottom-left
    output_grid[rows-2:rows, 0:2] = input_grid[center_row-1, center_col]

    # 6. Mirror Bottom-Right: Top-left of core to bottom-right
    output_grid[rows-2:rows, cols-2:cols] = input_grid[center_row-1, center_col-1]


    return output_grid

def compare_grids(grid1, grid2):
    return np.array_equal(grid1, grid2)

train_task = [
    {
        "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 2, 0, 0, 0, 0], [0, 0, 0, 3, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],
        "output": [[4, 0, 0, 0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 2, 0, 0, 0, 0], [0, 0, 0, 3, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0, 0, 0, 1]]
    },
    {
        "input": [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 7, 7, 0, 0, 0], [0, 0, 7, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]],
        "output": [[7, 7, 0, 0, 0, 7, 7], [7, 7, 0, 0, 0, 7, 7], [0, 0, 7, 7, 0, 0, 0], [0, 0, 7, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [7, 7, 0, 0, 0, 7, 7], [7, 7, 0, 0, 0, 7, 7]]
    },
    {
       "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        "output": [[5, 5, 0, 0, 0, 0, 0, 0, 0, 5, 5], [5, 5, 0, 0, 0, 0, 0, 0, 0, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 0, 0, 0, 0, 0, 0, 0, 5, 5], [5, 5, 0, 0, 0, 0, 0, 0, 0, 5, 5]]
    }
]

results = []
for example in train_task:
    input_grid = np.array(example["input"])
    expected_output = np.array(example["output"])
    actual_output = transform(input_grid)
    results.append(compare_grids(expected_output, actual_output))

print(results)

def find_2x2_core(grid):
    rows, cols = grid.shape
    for r in range(rows - 1):
        for c in range(cols - 1):
            subgrid = grid[r:r+2, c:c+2]
            if np.all(subgrid != 0):
                return (r, c)  # Return top-left coordinates
    return None
for i, ex in enumerate(train_task):
  print(f"{i=}: {find_2x2_core(np.array(ex['input']))=}")