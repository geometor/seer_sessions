import numpy as np

# Provided examples (replace with actual data loading if available)
train_examples = [
    {
        "input": np.array([
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        ]),
        "output": np.array([
            [0, 0, 0],
            [0, 8, 0],
            [0, 0, 0],
        ]),
    },
    {
        "input": np.array([
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8],
            [0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        ]),
        "output": np.array([
            [0, 0, 0],
            [8, 0, 0],
            [0, 0, 8],
        ]),
    },
     {
        "input": np.array([
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0],
            [0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0],
            [0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0],
            [0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        ]),
        "output": np.array([
            [0, 0, 0],
            [0, 8, 0],
            [0, 0, 0],
        ]),
    },
]

def transform(input_grid):
    # Initialize the output grid as a 3x3 array filled with white (0).
    output_grid = np.zeros((3, 3), dtype=int)

    # Iterate through the output grid's rows and columns.
    for row in range(3):
        for col in range(3):
            # Define the corresponding 4x4 region in the input grid.
            start_row = row * 4
            end_row = start_row + 4
            start_col = col * 4
            end_col = start_col + 4

            # Extract the 4x4 region from the input grid.
            region = input_grid[start_row:end_row, start_col:end_col]

            # Check if the 4x4 region contains any azure (8) pixels.
            if np.any(region == 8):
                # If azure pixels exist, set output to azure.
                output_grid[row, col] = 8

    return output_grid

results = []
for example in train_examples:
    input_grid = example['input']
    expected_output = example['output']
    predicted_output = transform(input_grid)
    results.append({
        'input': input_grid.tolist(),
        'expected_output': expected_output.tolist(),
        'predicted_output': predicted_output.tolist(),
        'correct': np.array_equal(expected_output, predicted_output)
    })

print(results)