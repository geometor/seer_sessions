import numpy as np

def analyze_dimensions(grid):
    """
    Analyzes the dimensions of the grid and any white (0) areas within it.
    Returns: (rows, cols, white_rows, white_cols)
    """
    rows, cols = grid.shape
    white_pixels = np.where(grid == 0)
    if len(white_pixels[0]) == 0:
        return rows, cols, 0, 0
    white_rows = np.max(white_pixels[0]) - np.min(white_pixels[0]) + 1
    white_cols = np.max(white_pixels[1]) - np.min(white_pixels[1]) + 1
    return rows, cols, white_rows, white_cols

examples = [
    {"input": np.array([[8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
       [8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
       [8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
       [8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
       [8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
       [8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
       [8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
       [8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
       [8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
       [8, 8, 8, 8, 8, 8, 8, 8, 8, 8]]), "output": np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 2, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 2, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 2, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 2, 0, 0, 0, 0, 0],
       [2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
       [0, 0, 0, 0, 2, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 2, 0, 0, 0, 0, 0]])},
    {"input": np.array([[8, 8, 8, 8, 8, 8, 8],
                       [8, 8, 8, 8, 8, 8, 8],
                       [8, 8, 8, 8, 8, 8, 8],
                       [8, 8, 8, 8, 8, 8, 8],
                       [8, 8, 8, 8, 8, 8, 8],
                       [8, 8, 8, 8, 8, 8, 8],
                       [8, 8, 8, 8, 8, 8, 8]]), "output": np.array([[0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 2, 0, 0, 0],
       [0, 0, 0, 2, 0, 0, 0],
       [0, 0, 0, 2, 0, 0, 0],
       [2, 2, 2, 2, 2, 2, 2],
       [0, 0, 0, 2, 0, 0, 0]])},
    {"input": np.array([[8, 8, 8, 8, 8],
                       [8, 8, 8, 8, 8],
                       [8, 8, 8, 8, 8],
                       [8, 8, 8, 8, 8],
                       [8, 8, 8, 8, 8]]), "output": np.array([[0, 0, 0, 0, 0],
       [0, 0, 2, 0, 0],
       [0, 0, 2, 0, 0],
       [2, 2, 2, 2, 2],
       [0, 0, 2, 0, 0]])},
]

results = []
for example in examples:
  input_rows, input_cols, input_white_rows, input_white_cols = analyze_dimensions(example['input'])
  output_rows, output_cols, output_white_rows, output_white_cols = analyze_dimensions(example['output'])
  results.append({
      "input_rows": input_rows,
      "input_cols": input_cols,
      "input_white_rows": input_white_rows,
      "input_white_cols": input_white_cols,
      "output_rows": output_rows,
      "output_cols": output_cols,
      "output_white_rows": output_white_rows,
      "output_white_cols": output_white_cols
  })

for i, result in enumerate(results):
    print(f"Example {i+1}:")
    print(f"  Input:  Rows={result['input_rows']}, Cols={result['input_cols']}, White Rows={result['input_white_rows']}, White Cols={result['input_white_cols']}")
    print(f"  Output: Rows={result['output_rows']}, Cols={result['output_cols']}, White Rows={result['output_white_rows']}, White Cols={result['output_white_cols']}")