{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. Identify Region of Interest: Find the smallest rectangular subgrid (bounding box) that contains all non-white pixels in the input grid.\n2. Identify Preserve and Fill Colors: Determine which non-white color within the bounding box is the \"preserve\" color and which is the \"fill\" color. The preserve color is the color of the top-left non-white pixel, and the fill color is the color immediately below it.\n3. Extract Subgrid: Create a new grid representing the identified subgrid.\n4. Translate and Fill: Copy pixels of the preserve color from the input subgrid to the output grid.  Fill all other pixels within the output grid with the fill color.\n5. Output: Return the subgrid.\n\"\"\"\n\nimport numpy as np\n\ndef find_bounding_box(grid):\n    \"\"\"Find the bounding box of non-white pixels.\"\"\"\n    rows, cols = np.where(grid != 0)\n    if len(rows) == 0:  # Handle empty grid case\n        return None\n    min_row, max_row = np.min(rows), np.max(rows)\n    min_col, max_col = np.min(cols), np.max(cols)\n    return min_row, max_row, min_col, max_col\n\ndef find_preserve_and_fill_colors(grid, bounding_box):\n    \"\"\"Determine the preserve and fill colors based on the top-left non-white pixel.\"\"\"\n    min_row, _, min_col, _ = bounding_box\n    \n    # Find the top-left non-white pixel\n    preserve_color = grid[min_row, min_col]\n\n    # Find next row with a different color\n    fill_color = None\n\n    for r in range(min_row + 1, grid.shape[0]):\n      if grid[r,min_col] != 0 and grid[r,min_col] != preserve_color:\n        fill_color = grid[r,min_col]\n        break\n    if fill_color is None:\n      fill_color = preserve_color\n\n    return preserve_color, fill_color\n\ndef transform(input_grid):\n    \"\"\"Extracts a subgrid, preserves one color, and fills the rest with another.\"\"\"\n    input_grid = np.array(input_grid)  # Ensure numpy array\n\n    # 1. Identify Region of Interest and Extract Subgrid\n    bounding_box = find_bounding_box(input_grid)\n    if bounding_box is None:\n      return []\n      \n    min_row, max_row, min_col, max_col = bounding_box\n    output_grid = input_grid[min_row:max_row+1, min_col:max_col+1].copy()\n\n    # 2. Identify Preserve and Fill Colors\n    preserve_color, fill_color = find_preserve_and_fill_colors(input_grid, bounding_box)\n\n\n    # 3. Translate and Fill (combined for efficiency)\n    output_grid[output_grid != preserve_color] = fill_color\n    \n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2272,
    "candidates_token_count": 710,
    "total_token_count": 2982,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.797261,
  "response_file": "022-response.json"
}