{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by extracting the largest contiguous region of non-background color and using it as the output grid.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef get_dominant_color(grid):\n    \"\"\"Finds the most frequent color in the grid.\"\"\"\n    flat_grid = grid.flatten()\n    color_counts = Counter(flat_grid)\n    dominant_color = color_counts.most_common(1)[0][0]\n    return dominant_color\n\ndef find_object(grid, target_color):\n    \"\"\"Finds the largest contiguous region of the target color.\"\"\"\n    rows, cols = len(grid), len(grid[0])\n    visited = set()\n    max_region = []\n\n    def dfs(row, col, current_region):\n        if (row < 0 or row >= rows or col < 0 or col >= cols or\n                grid[row][col] != target_color or (row, col) in visited):\n            return\n        visited.add((row, col))\n        current_region.append((row, col))\n        dfs(row + 1, col, current_region)\n        dfs(row - 1, col, current_region)\n        dfs(row, col + 1, current_region)\n        dfs(row, col - 1, current_region)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r][c] == target_color and (r, c) not in visited:\n                current_region = []\n                dfs(r, c, current_region)\n                if len(current_region) > len(max_region):\n                    max_region = current_region\n    return max_region\n\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the defined rules.\"\"\"\n    input_grid = np.array(input_grid)\n    rows, cols = input_grid.shape\n\n    # 1. Identify the background (dominant) color.\n    dominant_color = get_dominant_color(input_grid)\n\n    # 2. Check if the grid is uniform.\n    if np.all(input_grid == dominant_color):\n        return input_grid.tolist()  # Return input unchanged\n\n    # 3. Find the largest object of non-background color\n    target_colors = set(input_grid.flatten())\n    target_colors.discard(dominant_color)\n\n    # Find largest object amongst all target colors\n    largest_object = []\n    for color in target_colors:\n        object_coords = find_object(input_grid, color)\n        if len(object_coords) > len(largest_object):\n            largest_object = object_coords\n\n    # find min/max row/col\n    min_row, min_col = rows, cols\n    max_row, max_col = -1, -1\n\n    for r,c in largest_object:\n      if r < min_row:\n        min_row = r\n      if c < min_col:\n        min_col = c\n      if r > max_row:\n        max_row = r\n      if c > max_col:\n        max_col = c\n        \n    # 4. Create Output Grid based on the object dimensions\n    output_height = max_row - min_row + 1\n    output_width = max_col - min_col + 1\n    output_grid = np.full((output_height, output_width), dominant_color) # initialize\n    \n    # 5. Fill the output grid\n    for row, col in largest_object:\n        output_grid[row - min_row, col - min_col] = input_grid[row, col]\n\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6885,
    "candidates_token_count": 870,
    "total_token_count": 7755,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.34801,
  "response_file": "004-response.json"
}