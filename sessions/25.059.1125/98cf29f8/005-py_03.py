def code_execution(transform, grid):

    # Convert the input and output grids to NumPy arrays for easier manipulation
    input_grid = np.array(grid)

    transformed_grid = transform(input_grid)
    return transformed_grid

task = {
  "train": [
    {
      "input": [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 4, 4, 4, 0, 0, 0],
        [0, 0, 0, 0, 4, 4, 4, 0, 0, 0],
        [0, 0, 0, 0, 4, 4, 4, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      ],
      "output": [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 5, 5, 4, 4, 4, 0, 0, 0],
        [0, 0, 5, 5, 4, 4, 4, 0, 0, 0],
        [0, 0, 5, 5, 4, 4, 4, 0, 0, 0],
        [0, 0, 5, 5, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      ]
    },
      {
      "input": [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 4, 4, 4, 0, 0, 0, 0],
        [0, 0, 0, 4, 4, 4, 0, 0, 0, 0],
        [0, 0, 0, 4, 4, 4, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [5, 5, 5, 0, 0, 0, 0, 0, 0, 0]
      ],
      "output": [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 4, 4, 4, 0, 0, 0, 0],
        [5, 5, 5, 4, 4, 4, 0, 0, 0, 0],
        [5, 5, 5, 4, 4, 4, 0, 0, 0, 0],
        [5, 5, 5, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      ]
    },
    {
      "input": [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 4, 4, 4, 4, 0, 0, 0],
        [0, 0, 0, 4, 4, 4, 4, 0, 0, 0],
        [0, 0, 0, 4, 4, 4, 4, 0, 0, 0],
        [0, 0, 0, 4, 4, 4, 4, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [5, 5, 5, 5, 5, 0, 0, 0, 0, 0]
      ],
      "output": [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 4, 4, 4, 4, 0, 0, 0],
        [5, 5, 5, 4, 4, 4, 4, 0, 0, 0],
        [5, 5, 5, 4, 4, 4, 4, 0, 0, 0],
        [5, 5, 5, 4, 4, 4, 4, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      ]
    },
    {
      "input": [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 4, 4, 4, 4, 4, 0, 0],
        [0, 0, 0, 4, 4, 4, 4, 4, 0, 0],
        [0, 0, 0, 4, 4, 4, 4, 4, 0, 0],
        [0, 0, 0, 4, 4, 4, 4, 4, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [5, 5, 5, 5, 5, 5, 5, 0, 0, 0]
      ],
      "output": [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 4, 4, 4, 4, 4, 0, 0],
        [5, 5, 5, 4, 4, 4, 4, 4, 0, 0],
        [5, 5, 5, 4, 4, 4, 4, 4, 0, 0],
        [5, 5, 5, 4, 4, 4, 4, 4, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      ]
    }
  ]
}

import numpy as np

results = []
for example in task["train"]:
    input_grid = example['input']
    expected_output = example['output']
    actual_output = code_execution(transform, input_grid)
    results.append({
      'input': input_grid,
      'expected': expected_output,
      'actual': actual_output.tolist(),
      'correct': np.array_equal(actual_output, np.array(expected_output))
    })

for i, result in enumerate(results):
    print(f"Example {i+1}:")
    print(f"  Input:\n{np.array(result['input'])}")
    print(f"  Expected Output:\n{np.array(result['expected'])}")
    print(f"  Actual Output:\n{np.array(result['actual'])}")
    print(f"  Correct: {result['correct']}")