{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  Identify Objects: Identify all horizontal rows of pixels with the same color. Each row is a separate object.  All objects within a grid have the same width, and objects are separated vertically by one blank row.\n2.  Stack Objects: Stack the identified objects vertically in the output grid.\n3.  Preserve Order: Maintain the original vertical order of the objects from the input grid.\n4.  No Gaps: The objects in the output grid should be adjacent, with no intervening blank rows.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"Identifies distinct objects (horizontal rows of same color).\"\"\"\n    objects = []\n    visited = set()\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if (row, col) not in visited and grid[row, col] != 0:\n                color = grid[row, col]\n                # Find the end of the horizontal row\n                end_col = col\n                while end_col < grid.shape[1] and grid[row, end_col] == color:\n                    end_col += 1\n\n                # Extract the object (row)\n                obj_pixels = [(row, c) for c in range(col, end_col)]\n                objects.append((color, obj_pixels))\n\n                # Mark pixels as visited\n                for r, c in obj_pixels:\n                    visited.add((r, c))\n    return objects\n\ndef transform(input_grid):\n    # Initialize output grid with zeros (all white)\n    output_grid = np.zeros_like(input_grid)\n\n    # Find objects in the input grid\n    objects = find_objects(input_grid)\n\n    # Sort objects by their row index (preserve original order)\n    objects.sort(key=lambda x: x[1][0][0])  # Sort by row of the first pixel\n\n    # Stack objects vertically in the output grid\n    current_row = 0\n    for color, pixels in objects:\n        for r, c in pixels:\n            output_grid[current_row, c] = color\n        current_row += 1\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7854,
    "candidates_token_count": 501,
    "total_token_count": 8355,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.090685,
  "response_file": "020-response.json"
}