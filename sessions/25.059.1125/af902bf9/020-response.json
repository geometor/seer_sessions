{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by changing the central yellow (4) pixel of each contiguous yellow object to red (2) *only if* a blue (1) object is present in the input grid.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, color):\n    \"\"\"\n    Finds contiguous regions (objects) of a specified color in a grid.\n    Returns a list of lists, where each inner list contains the coordinates\n    of pixels belonging to a single object.\n    \"\"\"\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n\n    def dfs(row, col, current_object):\n        if (\n            row < 0\n            or row >= grid.shape[0]\n            or col < 0\n            or col >= grid.shape[1]\n            or visited[row, col]\n            or grid[row, col] != color\n        ):\n            return\n        visited[row, col] = True\n        current_object.append((row, col))\n        dfs(row + 1, col, current_object)\n        dfs(row - 1, col, current_object)\n        dfs(row, col + 1, current_object)\n        dfs(row, col - 1, current_object)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] == color and not visited[row, col]:\n                current_object = []\n                dfs(row, col, current_object)\n                objects.append(current_object)\n    return objects\n\ndef calculate_object_center(object_coordinates):\n    \"\"\"\n    Calculates the centroid (center) of an object given its pixel coordinates.\n    Returns (row_center, col_center) as floats.\n    \"\"\"\n    rows, cols = zip(*object_coordinates)\n    center_row = sum(rows) / len(rows)\n    center_col = sum(cols) / len(cols)\n\n    return center_row, center_col\n    \ndef get_nearest_pixel(float_coords, object_coords):\n    \"\"\"\n    Finds the nearest pixel to given float coordinates within object coordinates\n    \"\"\"\n    min_dist = float('inf')\n    nearest_pixel = None\n    for pixel in object_coords:\n        dist = (pixel[0] - float_coords[0])**2 + (pixel[1] - float_coords[1])**2\n        if dist < min_dist:\n            min_dist = dist\n            nearest_pixel = pixel\n    return nearest_pixel\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Find yellow objects\n    yellow_objects = find_objects(input_grid, 4)\n    \n    # Check for presence of blue object\n    blue_objects = find_objects(input_grid, 1)\n    blue_present = len(blue_objects) > 0\n\n    # change output pixels\n    for obj in yellow_objects:\n        # Calculate object center\n        center_row, center_col = calculate_object_center(obj)\n        \n        # Find the nearest pixel to the center\n        pixel_to_change = get_nearest_pixel((center_row, center_col), obj)\n\n        # Change center pixel to red, conditional on blue being present\n        if blue_present:\n            output_grid[pixel_to_change[0], pixel_to_change[1]] = 2\n    \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3925,
    "candidates_token_count": 834,
    "total_token_count": 4759,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.282085,
  "response_file": "020-response.json"
}