{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nMoves clusters of colored pixels. A green(3) cluster is moved down and left, and a new green cell is placed to its right.\nA cross-shaped cluster of orange(7) and blue(1) pixels is moved up by one, preserving the cross shape.\n\"\"\"\n\nimport numpy as np\n\ndef find_clusters(grid):\n    \"\"\"Finds clusters of connected non-zero pixels.\"\"\"\n    clusters = []\n    visited = set()\n    rows, cols = grid.shape\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def dfs(r, c, cluster):\n        if (r, c) in visited or not is_valid(r, c) or grid[r, c] == 0:\n            return\n        visited.add((r, c))\n        cluster.append((r, c, grid[r, c]))\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            dfs(r + dr, c + dc, cluster)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and (r, c) not in visited:\n                cluster = []\n                dfs(r, c, cluster)\n                clusters.append(cluster)\n    return clusters\n\ndef move_cluster(cluster, dr, dc):\n    \"\"\"Moves a cluster by (dr, dc).\"\"\"\n    moved_cluster = []\n    for r, c, val in cluster:\n        moved_cluster.append((r + dr, c + dc, val))\n    return moved_cluster\n\ndef transform(input_grid):\n    # Initialize output grid\n    output_grid = np.zeros_like(input_grid)\n    \n    clusters = find_clusters(input_grid)\n\n    for cluster in clusters:\n        first_cell_color = cluster[0][2]\n\n        if first_cell_color == 3:\n            # Move the first '3' cluster down and left.\n            moved_cluster = move_cluster(cluster, 1, -1)\n            for r, c, val in moved_cluster:\n                if 0 <= r < output_grid.shape[0] and 0 <= c < output_grid.shape[1]:\n                  output_grid[r,c] = val\n\n            # place an additional 3 to the right of the 2\n            for r, c, val in moved_cluster:\n                if val == 2:\n                    if 0 <= r < output_grid.shape[0] and 0 <= c+2 < output_grid.shape[1]:\n                        output_grid[r, c+2] = 3\n\n        elif first_cell_color in [1,7]:\n            # Find the blue(1) cell within the cross, check cluster contains color 1.\n            blue_cell = None\n            \n            is_cross = True\n            for r,c,val in cluster:\n                if val == 1:\n                    blue_cell = (r,c)\n            if blue_cell is None:\n                is_cross = False\n\n            if is_cross:      \n                # determine move, then apply to all\n                moved_cluster = move_cluster(cluster, -1, 0)\n                for r, c, val in moved_cluster:\n                    if 0 <= r < output_grid.shape[0] and 0 <= c < output_grid.shape[1]:\n                        output_grid[r, c] = val\n\n            \n        else:\n            # copy any others\n            for r, c, val in cluster:\n              if 0 <= r < output_grid.shape[0] and 0 <= c < output_grid.shape[1]:\n                output_grid[r,c] = val\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3217,
    "candidates_token_count": 895,
    "total_token_count": 4112,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.09794,
  "response_file": "004-response.json"
}