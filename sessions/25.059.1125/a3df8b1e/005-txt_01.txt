import numpy as np

def get_grid_info(grid):
    """Returns the unique values and their counts in a grid."""
    unique, counts = np.unique(grid, return_counts=True)
    return dict(zip(unique, counts))

examples = [
    {
        "input": np.array([[0, 0, 0], [0, 0, 0], [0, 0, 0]]),
        "output": np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]]),
    },
    {
        "input": np.array([[2, 2, 2], [2, 2, 2], [2, 2, 2]]),
        "output": np.array([[2, 3, 2], [3, 2, 3], [2, 3, 2]]),
    },
    {
        "input": np.array([[4, 4, 4], [4, 4, 4], [4, 4, 4]]),
        "output": np.array([[4, 5, 4], [5, 4, 5], [4, 5, 4]]),
    },
]

def transform(input_grid):
    # initialize output_grid
    rows, cols = input_grid.shape
    output_grid = np.zeros((rows, cols), dtype=int)

    # change output pixels 
    for c in range(cols):
        for r in range(rows):
            if c % 2 == 0:  # Even column
                output_grid[r, c] = r % 2
            else:  # Odd column
                output_grid[r, c] = 1 - (r % 2)

    return output_grid

results = []
for i, example in enumerate(examples):
    input_info = get_grid_info(example["input"])
    output_info = get_grid_info(example["output"])
    predicted_output = transform(example["input"])
    predicted_info = get_grid_info(predicted_output)
    match = np.array_equal(predicted_output, example["output"])
    results.append(
        {
            "example": i + 1,
            "input": input_info,
            "expected_output": output_info,
            "predicted_output": predicted_info,
            "match": match,
        }
    )

print(results)