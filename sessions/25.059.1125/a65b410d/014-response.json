{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid by expanding a horizontal red line into a pattern of green, red, and blue lines. The output grid has the same dimensions as the input. If no red line is found, output is identical to input.\n\"\"\"\n\nimport numpy as np\n\ndef find_red_line(grid):\n    # Iterate through rows to find a horizontal line of red pixels\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols - 1):  # Changed to cols - 1\n            if grid[r, c] == 2 and grid[r, c+1] == 2:\n                length = 0\n                for i in range(c,cols):\n                    if grid[r,i] == 2:\n                        length += 1\n                    else:\n                        break\n                return r, c, length  # row, start_col, length\n    return None, None, None\n\ndef transform(input_grid):\n    # Initialize output grid with the same dimensions and filled with white (0)\n    output_grid = np.copy(input_grid)  # Initialize with the input grid\n    \n    # Find the horizontal red line\n    red_row, red_col_start, red_length = find_red_line(input_grid)\n    \n    if red_row is not None:\n        # Create the red line in the output grid\n        output_grid[red_row, red_col_start:red_col_start + red_length] = 2\n\n        # Expand Upward (Green lines)\n        for i in range(1, min(3, red_row) + 1):  # Up to 3 lines, or until top edge\n             green_length = red_length + 1 - i\n             green_col_start = red_col_start\n             output_grid[red_row - i, green_col_start:min(green_col_start + green_length, output_grid.shape[1])] = 3\n\n        # Expand Downward (Blue lines)\n        for i in range(1, min(2, output_grid.shape[0] - red_row -1) + 1):\n            blue_length = red_length - i\n            blue_col_start = red_col_start\n            if blue_length>0:\n              output_grid[red_row + i, blue_col_start:min(blue_col_start + blue_length, output_grid.shape[1])] = 1\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4171,
    "candidates_token_count": 582,
    "total_token_count": 4753,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.608863,
  "response_file": "014-response.json"
}