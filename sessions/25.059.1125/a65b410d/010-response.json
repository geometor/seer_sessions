{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid by expanding a horizontal red line into a pattern of green, red, and blue lines.\n\"\"\"\n\nimport numpy as np\n\ndef find_red_line(grid):\n    # Iterate through rows to find a horizontal line of red pixels\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols - 2):\n            if grid[r, c] == 2 and grid[r, c+1] == 2 and grid[r, c+2] == 2:\n                return r, c, 3  # row, start_col, length\n    return None, None, None\n\ndef transform(input_grid):\n    # Initialize output grid with the same dimensions and filled with white (0)\n    output_grid = np.zeros_like(input_grid)\n    \n    # Find the horizontal red line\n    red_row, red_col_start, red_length = find_red_line(input_grid)\n    \n    if red_row is not None:\n        # Create the red line in the output grid\n        output_grid[red_row, red_col_start:red_col_start + red_length] = 2\n\n        # Expand Upward (Green lines)\n        for i in range(1, 4):\n            green_length = red_length + i\n            green_col_start = red_col_start - i\n            if green_col_start <0:\n                green_length = green_length + green_col_start\n                green_col_start = 0\n            output_grid[red_row - i, green_col_start:min(green_col_start + green_length, output_grid.shape[1])] = 3\n\n        # Expand Downward (Blue lines)\n        blue_length = red_length - 1\n        blue_col_start = red_col_start\n        output_grid[red_row + 1, blue_col_start:blue_col_start + blue_length] = 1\n        \n        output_grid[red_row + 2, blue_col_start:blue_col_start+1] = 1\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2266,
    "candidates_token_count": 512,
    "total_token_count": 2778,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.714205,
  "response_file": "010-response.json"
}