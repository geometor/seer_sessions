import numpy as np

def find_central_stripe(grid):
    """Finds the central vertical stripe of blue (1) pixels."""
    height, width = grid.shape
    center_col = width // 2
    stripe_cols = []

    # Check for blue(1) in the center columns
    for col_offset in range(-1,2):
        if all(grid[:, center_col+col_offset] == 1):
             stripe_cols.append(center_col + col_offset)
        
    return stripe_cols

def transform(input_grid):
    """Transforms the input grid according to the observed rules."""
    output_grid = input_grid.copy()
    height, width = input_grid.shape
    stripe_cols = find_central_stripe(input_grid)

    # Iterate through the grid
    for r in range(height):
        for c in range(width):
            # Handle central stripe mirroring and recoloring
            if c in stripe_cols:
                # implement stripe recoloring (blue to green or azure)
                if input_grid[r,c] == 1:

                    # Recolour to green, azure (somewhat pseudo-random for now - based on input pattern)
                    if (r+c) % 5 == 0:
                        output_grid[r,c] = 3 # Green
                    if (r+c) % 7 == 0:
                        output_grid[r, c] = 8 # Azure

                continue  #skip to next pixel
            # mirroring of central column across columns
            dist_to_center = abs(c - width // 2)

            if dist_to_center>0 and dist_to_center <= len(stripe_cols):
                # find mirrored color position
                mirrored_col = width // 2 + (width//2 - c)
                if mirrored_col < width and mirrored_col >= 0 :

                    new_val = input_grid[r,mirrored_col]

                    if input_grid[r, c] == 1:
                        if new_val != 8 and (r+c) % 4 == 0 :
                            output_grid[r,c] = 3
                        if new_val == 8 and (r+c) % 3 == 0:
                            output_grid[r,c] = 8

                    # chaotic downward movement
                    if input_grid[r, c] == 1:
                        if r+1<height :
                            if input_grid[r+1, c] != 8:
                                if (r*c)% 5 == 0:
                                    output_grid[r+1,c] = 3
                            if input_grid[r+1, c] == 8:
                                if (r+c)% 3 == 0:
                                    output_grid[r+1, c] = 8
            # Preserve Green
            if input_grid[r,c] == 3:

                # do something to highlight the isolated nature, surround

                if c>0 and output_grid[r, c-1] != 3:
                    output_grid[r, c-1] = 6
                if c+1 < width and output_grid[r, c+1] !=3:
                    output_grid[r, c+1] = 6



    return output_grid

def compare_grids(grid1, grid2):
    """Compares two grids and returns the differences."""
    return np.sum(grid1 != grid2)

# Load the training data (replace with actual data loading if necessary)
task_id = '63613498'
train_inputs = [np.array(x['input']) for x in training_examples]
train_outputs = [np.array(x['output']) for x in training_examples]

# Analyze each example
for i, (input_grid, expected_output) in enumerate(zip(train_inputs, train_outputs)):
    predicted_output = transform(input_grid.copy())  # Apply the transformation
    diff_count = compare_grids(predicted_output, expected_output)
    print(f"--- Example {i+1} ---")
    print(f"Differences: {diff_count}")
    print(f"Input:\n{input_grid}")
    print(f"Predicted Output:\n{predicted_output}")
    print(f"Expected Output:\n{expected_output}")