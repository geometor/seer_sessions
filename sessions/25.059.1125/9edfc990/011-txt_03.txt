def grid_diff(grid1, grid2):
    """
    Highlights the differences between two grids. Returns a grid where:
    - 0 indicates matching pixels
    - 1 indicates a difference
    """
    return (grid1 != grid2).astype(int)

def grid_report(grid,name="grid"):
    unique, counts = np.unique(grid, return_counts=True)
    report = f"{name} ({grid.shape}):\\n"
    report_d = {}
    for u, c in zip(unique, counts):
      report_d[str(u)] = int(c)
    return report, report_d

reports = []
report_diffs = []
details = {}

for idx,example in enumerate(task_data['train']):
  inp, out = example["input"], example["output"]
  pred = transform(np.array(inp))
  # diff = grid_diff(np.array(out), np.array(pred))

  inp_r, inp_d = grid_report(np.array(inp),f"input_{idx}")
  out_r, out_d = grid_report(np.array(out),f"output_{idx}")
  pred_r, pred_d = grid_report(np.array(pred),f"predict_{idx}")
  # diff_r = grid_report(np.array(diff),f"diff_{idx}")
  reports.append(inp_r)
  reports.append(out_r)
  reports.append(pred_r)

  diff_d = {}
  for k in out_d.keys():
    if k in pred_d:
      diff_d[k] = out_d[k] - pred_d[k]
    else:
      diff_d[k] = out_d[k]
  for k in pred_d.keys():
    if k not in out_d:
      diff_d[k] = -pred_d[k]

  report_diffs.append(diff_d)
  details[f"example_{idx}"] = {
      "input":inp_d,
      "output":out_d,
      "predict":pred_d,
      "diff":diff_d
  }
print(f"## METRICS")
print(f"```")
for r in reports:
  print(r)
print(f"```")
print(f"## Differences")
print(details)