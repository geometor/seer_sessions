{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. **Initialization:** Start with the output grid being a copy of the input grid.\n2. **Conditional Expansion:** Iterate through every pixel of the *input* grid.\n3. **Expansion Rule:**  If a pixel in the input grid is NOT blue (1), check its neighbors (up, down, left, right).\n    - If ANY neighbor is blue (1), change the *corresponding* pixel in the *output* grid to blue (1).\n4. **Additional Rule (Black Background):** If a non-blue pixel in the *input* grid is surrounded by black pixels (0) on all four sides, it *remains unchanged* in the output grid. This rule prevents blue from \"leaking\" into regions completely enclosed by black.  This takes precedence over the expansion rule.\n5. **Stopping criterion:** The iteration through the input grid is completed.\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, row, col):\n    \"\"\"\n    Returns a list of valid neighbors (up, down, left, right) for a given cell.\n    \"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    if row > 0:\n        neighbors.append((row - 1, col))\n    if row < rows - 1:\n        neighbors.append((row + 1, col))\n    if col > 0:\n        neighbors.append((row, col - 1))\n    if col < cols - 1:\n        neighbors.append((row, col + 1))\n    return neighbors\n\ndef is_surrounded_by_black(grid, row, col):\n    \"\"\"\n    Checks if a cell is surrounded by black (0) pixels on all four sides.\n    \"\"\"\n    neighbors = get_neighbors(grid, row, col)\n    for r, c in neighbors:\n        if grid[r, c] != 0:\n            return False\n    return True\n\ndef transform(input_grid):\n    # initialize output_grid as copy of input\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # loop for pixels in input and apply expansion rule\n    for r in range(rows):\n        for c in range(cols):\n            if input_grid[r,c] != 1:\n                # Check Black Background rule first\n                if is_surrounded_by_black(input_grid, r, c):\n                    continue # Remain unchanged\n\n                neighbors = get_neighbors(input_grid, r, c)\n                for nr, nc in neighbors:\n                    if input_grid[nr, nc] == 1:\n                        output_grid[r, c] = 1\n                        break  # expand only once\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 967,
            "end_index": 1220,
            "uri": "https://github.com/MaksymilianLosinski/minesweeper-solver",
            "license_": ""
          },
          {
            "start_index": 1043,
            "end_index": 1244,
            "uri": "https://github.com/SantikMaster/Maze-solver",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2401,
    "candidates_token_count": 621,
    "total_token_count": 3022,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.686861,
  "response_file": "012-response.json"
}