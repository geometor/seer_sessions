{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. **Identify Colored Lines:** In each input grid, identify horizontal lines of colors orange (7), blue (1), yellow (4), and magenta (6).\n2. **Identify Colored Shapes**: In each input grid, identify the azure(8) shape, and any other shapes of different colors that appear inside the space between the colored lines.\n3. **Determine Subgrid:** A region of interest exists between the horizontal lines.\n4. **Extract:** Extract the subgrid that encloses all pixels of the azure shape and any enclosed shapes, including the colored horizontal lines.\n5.  **Reduce**: Create output, collapsing the extracted subgrid by removing 0 value columns from sides.\n\"\"\"\n\nimport numpy as np\n\ndef find_horizontal_lines(grid, colors):\n    \"\"\"Finds horizontal lines of specified colors.\"\"\"\n    lines = {}\n    for color in colors:\n        rows = np.where(np.all(grid == color, axis=1))[0]\n        if rows.size > 0:\n            lines[color] = rows\n    return lines\n\ndef find_other_shapes(grid, line_colors):\n    \"\"\"Finds shapes of colors not in line_colors within the region of interest.\"\"\"\n\n    other_colors = [c for c in np.unique(grid) if c not in line_colors and c != 0] #Remove background color\n    shapes = {}\n    for color in other_colors:\n        shapes[color] = np.argwhere(grid == color)\n    return shapes\n    \n\ndef extract_subgrid(grid, lines, shapes):\n    \"\"\"Extracts the subgrid enclosing lines and shapes.\"\"\"\n\n    min_row = min(lines.values(), key=min)\n    if isinstance(min_row, np.ndarray):\n      min_row = min_row[0]\n\n    max_row = max(lines.values(), key=max)\n    if isinstance(max_row, np.ndarray):\n        max_row = max_row[0]\n    \n    all_coords = []\n\n    for shape_coords in shapes.values():\n        if len(shape_coords) > 0:  # Check if the array is not empty\n          all_coords.extend(shape_coords)\n\n    if len(all_coords) == 0: #If no shapes between lines, min and max should come from lines\n      min_col = 0\n      max_col = grid.shape[1]-1\n    else:\n      all_coords = np.array(all_coords)\n      min_col = np.min(all_coords[:, 1])\n      max_col = np.max(all_coords[:, 1])\n\n    #Extract the horizontal lines as well\n    min_col = min(min_col, 0)\n    max_col = max(max_col, grid.shape[1]-1)\n\n    return grid[min_row:max_row+1, min_col:max_col+1]\n\n\ndef transform(input_grid):\n    # Identify colored lines\n    line_colors = [7, 1, 4, 6]\n    lines = find_horizontal_lines(input_grid, line_colors)\n\n    # Identify other shapes\n    shapes = find_other_shapes(input_grid, line_colors)\n\n    # Extract the subgrid\n    subgrid = extract_subgrid(input_grid, lines, shapes)\n\n    # Remove 0 columns\n    non_zero_cols = np.any(subgrid != 0, axis=0)\n    output_grid = subgrid[:, non_zero_cols]\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4183,
    "candidates_token_count": 820,
    "total_token_count": 5003,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.21153,
  "response_file": "020-response.json"
}