{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nCreates a 6x6 grid representing the outline of an azure object within a frame.\n\n1.  **Create Output Grid:** Initialize a 6x6 grid filled with 0 (white).\n2.  **Draw Frame:** Draw a frame on the output grid:\n    *   Yellow (4) line across the top (columns 1-4).\n    *   Red (2) line down the left side (rows 1-4).\n    *   Blue (1) line down the right side (rows 1-4).\n    *   Green (3) line across the bottom (columns 1-4).\n3.  **Find Azure Object:** Identify the contiguous region of azure (8) pixels in the input grid.\n4.  **Trace Outline:** Trace the *outer* outline of the azure object, proceeding clockwise from the top-leftmost azure pixel. Consider only pixels on the external boundary.\n5.  **Scale and Map Outline:**\n    *   Determine the bounding box of the azure object in the input grid (min/max row and column).\n    *   Map the outline coordinates to the inner 4x4 region of the output grid (rows 1-4, columns 1-4). Scale proportionally based on the bounding box dimensions.\n6. **Place Azure:** set the value of the scaled and mapped outline coordinates to azure (8).\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, color):\n    \"\"\"Finds coordinates of objects with a specific color.\"\"\"\n    coords = []\n    for i in range(grid.shape[0]):\n        for j in range(grid.shape[1]):\n            if grid[i, j] == color:\n                coords.append((i, j))\n    return coords\n\ndef trace_outline(grid, start):\n    \"\"\"Traces the *outer* boundary of an object starting from a given point.\"\"\"\n    outline = []\n    visited = set()\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # Clockwise: Right, Down, Left, Up\n\n    def is_valid(x, y, grid):\n        return 0 <= x < grid.shape[0] and 0 <= y < grid.shape[1]\n\n    def is_outline(x, y, grid, color):\n        \"\"\"Checks if a pixel is on the outer boundary.\"\"\"\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if not is_valid(nx, ny, grid) or grid[nx, ny] != color:\n                return True\n        return False\n\n    def dfs(x, y, grid, color):\n        if (x, y) in visited or not is_valid(x, y, grid) or grid[x, y] != color:\n            return\n\n        visited.add((x, y))\n\n        if is_outline(x, y, grid, color):\n            outline.append((x, y))\n\n        # Continue DFS in clockwise order, prioritizing outline pixels\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if is_valid(nx, ny, grid) and grid[nx, ny] == color and is_outline(nx, ny, grid, color) and (nx, ny) not in visited:\n                dfs(nx, ny, grid, color) # explore neighbors\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if is_valid(nx,ny, grid) and grid[nx,ny] == color and (nx, ny) not in visited:\n               dfs(nx, ny, grid, color)\n\n\n    dfs(start[0], start[1], grid, grid[start[0], start[1]]) # use starting color\n    return outline\n\ndef draw_frame(grid):\n    \"\"\"Draws the frame on the output grid.\"\"\"\n    grid[0, 1:5] = 4  # Yellow top\n    grid[1:5, 0] = 2  # Red left\n    grid[1:5, 5] = 1  # Blue right\n    grid[5, 1:5] = 3  # Green bottom\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the defined rules.\"\"\"\n    output_grid = np.zeros((6, 6), dtype=int)\n\n    # Draw Frame\n    draw_frame(output_grid)\n\n    # Find Azure Object\n    azure_coords = find_objects(input_grid, 8)\n\n    # Trace Outline and Scale/Map\n    if azure_coords:\n        top_left_azure = min(azure_coords, key=lambda t: (t[0], t[1]))\n        outline = trace_outline(input_grid, top_left_azure)\n\n        if outline:\n            # Bounding Box\n            min_row = min(outline, key=lambda t: t[0])[0]\n            max_row = max(outline, key=lambda t: t[0])[0]\n            min_col = min(outline, key=lambda t: t[1])[1]\n            max_col = max(outline, key=lambda t: t[1])[1]\n\n            # Scale and map to inner 4x4\n            for r, c in outline:\n                out_r = int((r - min_row) * 3 / (max_row - min_row if max_row - min_row > 0 else 1)) + 1\n                out_c = int((c - min_col) * 3 / (max_col - min_col if max_col - min_col > 0 else 1)) + 1\n                if 1 <= out_r <= 4 and 1 <= out_c <=4: # ensure within bounds\n                  output_grid[out_r, out_c] = 8\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3879,
    "candidates_token_count": 1350,
    "total_token_count": 5229,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 12.070859,
  "response_file": "008-response.json"
}