{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid to an output grid based on a color mapping rule. \n\nThe rule is:\n1. White (0) in the input becomes Green (3) in the output.\n2. Gray (5) in the input becomes:\n    a. Red (2) if vertically adjacent to White (0).\n    b. Yellow (4) if horizontally adjacent to White (0).\n    c. Green (3) if adjacent to Gray(5)\n\"\"\"\n\nimport numpy as np\n\ndef get_adjacent(grid, i, j):\n    rows, cols = len(grid), len(grid[0])\n    adjacent_cells = []\n    if i > 0:\n        adjacent_cells.append((i - 1, j, grid[i-1][j])) # Up\n    if i < rows - 1:\n        adjacent_cells.append((i + 1, j, grid[i+1][j])) # Down\n    if j > 0:\n        adjacent_cells.append((i, j - 1, grid[i][j-1])) # Left\n    if j < cols - 1:\n        adjacent_cells.append((i, j + 1, grid[i][j+1])) # Right\n\n    return adjacent_cells\n\ndef transform(input_grid):\n    # initialize output_grid\n    rows, cols = len(input_grid), len(input_grid[0])\n    output_grid = np.zeros((rows, cols), dtype=int)\n\n    # change output pixels \n    for i in range(rows):\n        for j in range(cols):\n            if input_grid[i][j] == 0:\n                output_grid[i][j] = 3\n            elif input_grid[i][j] == 5:\n                is_vertically_adjacent_to_0 = False\n                is_horizontally_adjacent_to_0 = False\n                is_adjacent_to_5 = False\n\n                for x,y, val in get_adjacent(input_grid, i, j):\n                  if val == 0:\n                    if x == i:\n                        is_horizontally_adjacent_to_0 = True\n                    if y == j:\n                        is_vertically_adjacent_to_0 = True\n                  if val == 5:\n                    is_adjacent_to_5 = True\n\n\n                if is_vertically_adjacent_to_0:\n                    output_grid[i][j] = 2\n                elif is_horizontally_adjacent_to_0:\n                    output_grid[i][j] = 4\n                elif is_adjacent_to_5:\n                    output_grid[i][j] = 3\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1945,
    "candidates_token_count": 624,
    "total_token_count": 2569,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.211032
}