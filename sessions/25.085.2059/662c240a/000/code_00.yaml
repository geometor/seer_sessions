task_structure:
  input_grid_size: 9x3
  output_grid_size: 3x3
  input_composition: Three vertically stacked 3x3 subgrids (G1, G2, G3)
  output_composition: A copy of one of the input subgrids (G1, G2, or G3)

subgrid_properties:
  size: 3x3
  distinct_colors: 2
  color_distribution: One color appears 5 times, the other appears 4 times.

selection_rule_components:
  - Calculate the sum of pixel values for each subgrid (S1, S2, S3).
  - Identify the subgrids corresponding to the minimum (MinGrid), median (MedianGrid), and maximum (MaxGrid) sums.
  - Determine the minimum (S_min), median (S_med), and maximum (S_max) sums.
  - Calculate the range: R = S_max - S_min.
  - Compare R and S_med.
  - If R > S_med, calculate the ratio: Ratio = R / S_med.
  - Compare Ratio to a threshold (approximately 1.5).

selection_logic:
  - IF R <= S_med:
      Select MedianGrid.
  - ELSE (R > S_med):
      - IF Ratio < 1.5:
          Select MaxGrid.
      - ELSE (Ratio >= 1.5):
          Select MedianGrid.

examples_summary:
  example_1:
    sums: [21, 53, 37]
    min: 21 (G1), med: 37 (G3), max: 53 (G2)
    R: 32, S_med: 37
    condition: R <= S_med
    selected_grid: G3 (MedianGrid)
    output_matches: Yes
  example_2:
    sums: [25, 36, 43]
    min: 25 (G1), med: 36 (G2), max: 43 (G3)
    R: 18, S_med: 36
    condition: R <= S_med
    selected_grid: G2 (MedianGrid)
    output_matches: Yes
  example_3:
    sums: [48, 19, 26]
    min: 19 (G2), med: 26 (G3), max: 48 (G1)
    R: 29, S_med: 26
    condition: R > S_med
    ratio: 29 / 26 ~= 1.115
    sub_condition: Ratio < 1.5
    selected_grid: G1 (MaxGrid)
    output_matches: Yes
  example_4:
    sums: [74, 14, 32]
    min: 14 (G2), med: 32 (G3), max: 74 (G1)
    R: 60, S_med: 32
    condition: R > S_med
    ratio: 60 / 32 = 1.875
    sub_condition: Ratio >= 1.5
    selected_grid: G3 (MedianGrid)
    output_matches: Yes
