task_type: row_based_transformation
scope: grid
focus: pixels

input_elements:
  - type: grid
    properties:
      - height: variable (e.g., 4, 6)
      - width: variable (e.g., 4, 6)
      - pixels: color values (0-9)

output_elements:
  - type: grid
    properties:
      - height: same as input
      - width: same as input
      - pixels: color values (0-9), potentially modified from input

transformation:
  type: conditional_pixel_rearrangement
  level: row
  trigger:
    type: specific_adjacent_pixel_pair
    conditions:
      - pair: [8, 3] # azure, green
      - pair: [5, 0] # gray, white
    location: occurs horizontally within a row, starting at column 'c'
    constraint: affects only the first occurrence found per row (left-to-right scan)
  action:
    type: cyclic_permutation_right
    target: three adjacent pixels starting at the trigger column 'c'
    details: |
      Let the original pixel values at (row, c), (row, c+1), (row, c+2) be Vc, Vc+1, Vc+2.
      The new pixel values at these positions become Vc+2, Vc, Vc+1.
    affected_pixels: (row, c), (row, c+1), (row, c+2)
  unmodified_rows: Rows where no trigger pair is found remain unchanged.
  unmodified_pixels: Pixels outside the 3-pixel segment in modified rows remain unchanged.

relationships:
  - input grid dimensions == output grid dimensions
  - output grid is derived from input grid by applying the transformation rule row by row.

examples_summary:
  - example: 1
    trigger_pair: [8, 3]
    trigger_column: 1
    affected_rows: 1, 3
    affected_segment: columns 1, 2, 3
  - example: 2
    trigger_pair: [5, 0]
    trigger_column: 0
    affected_rows: 1, 3, 5
    affected_segment: columns 0, 1, 2