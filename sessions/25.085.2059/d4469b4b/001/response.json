{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies the unique non-white color in the 5x5 input grid and returns a \nfixed 3x3 output grid pattern based on that color.\n- If the input color is blue (1), output a gray (5) plus sign pattern.\n- If the input color is red (2), output a gray (5) 'T' shape pattern.\n- If the input color is green (3), output a gray (5) 'L' shape pattern.\nThe background color for the output is white (0).\n\"\"\"\n\nimport numpy as np\n\n# Define the fixed output patterns associated with each input foreground color\nCOLOR_PATTERN_MAP = {\n    1: np.array([\n        [0, 5, 0],\n        [5, 5, 5],\n        [0, 5, 0]\n    ]),\n    2: np.array([\n        [5, 5, 5],\n        [0, 5, 0],\n        [0, 5, 0]\n    ]),\n    3: np.array([\n        [0, 0, 5],\n        [0, 0, 5],\n        [5, 5, 5]\n    ])\n}\n\ndef find_unique_foreground_color(grid):\n    \"\"\"\n    Finds the single unique non-zero color in the input grid.\n    Returns None if no non-zero color is found or if multiple are found.\n    \"\"\"\n    unique_colors = set()\n    for row in grid:\n        for cell in row:\n            if cell != 0:\n                unique_colors.add(cell)\n    \n    if len(unique_colors) == 1:\n        return unique_colors.pop()\n    elif len(unique_colors) == 0:\n         # Handle case where input grid might be all white (though not seen in examples)\n         # Based on the task description, we expect exactly one foreground color.\n         # If this happens, it's an unexpected state based on training data.\n         print(\"Warning: No foreground color found in input grid.\")\n         return None \n    else:\n        # Handle case where multiple foreground colors are found (unexpected)\n        print(f\"Warning: Multiple foreground colors found: {unique_colors}\")\n        return None\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on its unique foreground color.\n\n    Args:\n        input_grid (list of lists or numpy array): The input 5x5 grid.\n\n    Returns:\n        numpy array: The corresponding 3x3 output grid pattern, or None if\n                     the input color is invalid or not found.\n    \"\"\"\n    # Convert input to numpy array for easier processing if it's not already\n    input_grid_np = np.array(input_grid)\n\n    # 1. Identify the unique non-white color present in the input grid.\n    foreground_color = find_unique_foreground_color(input_grid_np)\n\n    # Check if a valid foreground color was found\n    if foreground_color is None:\n        # Return a default or indicate an error, depending on requirements.\n        # For now, let's return an empty grid or raise an error.\n        # Returning None might be better to signal failure.\n        print(f\"Could not determine a unique foreground color for input.\")\n        # Return a default 3x3 white grid maybe? Or handle error upstream.\n        return np.zeros((3, 3), dtype=int) # Or return None\n\n    # 2-4. Retrieve the corresponding 3x3 pattern based on the identified color.\n    output_grid = COLOR_PATTERN_MAP.get(foreground_color)\n\n    # 5. Return the generated 3x3 grid.\n    if output_grid is None:\n        # This case handles if find_unique_foreground_color returns a color\n        # not in our map keys (e.g., 4, 6, etc.), which shouldn't happen based on examples.\n        print(f\"Error: Input color {foreground_color} does not have a defined output pattern.\")\n        # Return a default 3x3 white grid or handle error upstream.\n        return np.zeros((3, 3), dtype=int) # Or return None\n\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2458,
    "candidates_token_count": 977,
    "total_token_count": 3435,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.579354,
  "retries": null
}