- task_description: Modify a copy of the input grid by adding colored pixels/blocks to corners based on a central 2x2 non-white block.
- examples:
    - id: 1
      input_grid_size: [6, 6]
      objects:
        - type: block
          shape: [2, 2]
          location: [1, 1] # Top-left coordinate
          pixels: [[yellow, magenta], [red, blue]] # [[4, 6], [2, 1]]
          properties:
            - is_centered: False # (Not at [2, 2] in 6x6 grid)
      action:
        - type: copy_grid
          source: input
          destination: output
        - type: place_pixels
          target_grid: output
          pixels:
            - { location: [0, 0], color: blue }   # From input block BR
            - { location: [0, 3], color: red }    # From input block BL
            - { location: [3, 0], color: magenta } # From input block TR
            - { location: [3, 3], color: yellow }  # From input block TL
      output_grid_pattern: 1x1 pixels at specific coordinates [(0,0), (0,3), (3,0), (3,3)]
      # Note: The 'expected output' provided in the prompt for Ex1 seems inconsistent with this pattern and with the Ex1 failure message. Proceeding based on the derived pattern.

    - id: 2
      input_grid_size: [6, 6]
      objects:
        - type: block
          shape: [2, 2]
          location: [2, 2] # Top-left coordinate
          pixels: [[maroon, green], [orange, azure]] # [[9, 3], [7, 8]]
          properties:
            - is_centered: True # (At [2, 2] in 6x6 grid)
      action:
        - type: copy_grid
          source: input
          destination: output
        - type: fill_blocks
          target_grid: output
          blocks:
            - { location: [0:2, 0:2], color: azure }   # From input block BR
            - { location: [0:2, 4:6], color: orange }  # From input block BL
            - { location: [4:6, 0:2], color: green }   # From input block TR
            - { location: [4:6, 4:6], color: maroon }  # From input block TL
      output_grid_pattern: 2x2 blocks at corner locations [(0:2,0:2), (0:2,4:6), (4:6,0:2), (4:6,4:6)]

    - id: 3
      input_grid_size: [6, 6]
      objects:
        - type: block
          shape: [2, 2]
          location: [2, 2] # Top-left coordinate
          pixels: [[green, magenta], [gray, red]] # [[3, 6], [5, 2]]
          properties:
            - is_centered: True # (At [2, 2] in 6x6 grid)
      action:
        - type: copy_grid
          source: input
          destination: output
        - type: fill_blocks
          target_grid: output
          blocks:
            - { location: [0:2, 0:2], color: red }    # From input block BR
            - { location: [0:2, 4:6], color: gray }   # From input block BL
            - { location: [4:6, 0:2], color: magenta } # From input block TR
            - { location: [4:6, 4:6], color: green }  # From input block TL
      output_grid_pattern: 2x2 blocks at corner locations [(0:2,0:2), (0:2,4:6), (4:6,0:2), (4:6,4:6)]

- common_rule:
    - Identify the unique 2x2 block of non-white pixels in the input grid.
    - Determine its top-left coordinate `(r, c)`.
    - Store the colors of its pixels: `color_TL`, `color_TR`, `color_BL`, `color_BR`.
    - Create the output grid by copying the input grid.
    - Check if the block is centered (assuming 6x6 grid, this means `r=2` and `c=2`).
    - Conditional action based on centeredness:
        - If centered: Fill four 2x2 areas in the output grid corners.
            - `output[0:2, 0:2] = color_BR`
            - `output[0:2, 4:6] = color_BL`
            - `output[4:6, 0:2] = color_TR`
            - `output[4:6, 4:6] = color_TL`
        - If not centered: Modify four single pixels in the output grid.
            - `output[0, 0] = color_BR`
            - `output[0, 3] = color_BL`
            - `output[3, 0] = color_TR`
            - `output[3, 3] = color_TL`