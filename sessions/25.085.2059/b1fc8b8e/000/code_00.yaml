task_elements:
  - name: input_grid
    type: grid
    properties:
      height: 6
      width: 6
      pixels:
        - color: white (0)
          role: background
        - color: azure (8)
          role: foreground_shape
  - name: output_grid
    type: grid
    properties:
      height: 5
      width: 5
      pixels:
        - color: white (0)
        - color: azure (8)
      notes: Seems to be one of two predefined patterns.

derived_properties:
  - name: non_white_bounding_box
    on: input_grid
    description: The smallest rectangular area enclosing all azure (8) pixels.
    properties:
      - width: The horizontal extent (number of columns) of the box.

relationships:
  - type: selection_condition
    condition: non_white_bounding_box.width == 6
    action: select_pattern_A
  - type: selection_condition
    condition: non_white_bounding_box.width == 5
    action: select_pattern_B

output_patterns:
  - name: pattern_A
    grid:
      - [8, 8, 0, 8, 8]
      - [8, 8, 0, 8, 8]
      - [0, 0, 0, 0, 0]
      - [8, 8, 0, 8, 8]
      - [8, 8, 0, 8, 8]
  - name: pattern_B
    grid:
      - [0, 8, 0, 0, 8]
      - [8, 8, 0, 8, 8]
      - [0, 0, 0, 0, 0]
      - [0, 8, 0, 0, 8]
      - [8, 8, 0, 8, 8]

transformation:
  - action: determine_bounding_box
    input: input_grid
    criteria: pixels with color azure (8)
    output: box_properties (min_row, max_row, min_col, max_col)
  - action: calculate_width
    input: box_properties
    formula: max_col - min_col + 1
    output: box_width
  - action: select_output
    based_on: box_width
    cases:
      - condition: box_width == 6
        result: pattern_A
      - condition: box_width == 5
        result: pattern_B