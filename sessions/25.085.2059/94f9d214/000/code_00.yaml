task_description: Compare the top and bottom halves of an input grid to generate an output grid highlighting positions where both halves have the background color.

definitions:
  - object: grid
    properties:
      - type: input
        height: H
        width: W
        comment: In examples, H=8, W=4. H is always even.
      - type: output
        height: H/2
        width: W
        comment: In examples, 4x4.

  - object: subgrid
    properties:
      - type: top_half
        source: input grid
        rows: 0 to (H/2 - 1)
        columns: 0 to (W - 1)
        pixels: Contains various colors, including background (white=0).
      - type: bottom_half
        source: input grid
        rows: H/2 to (H - 1)
        columns: 0 to (W - 1)
        pixels: Contains various colors, including background (white=0).

relationships:
  - type: correspondence
    from: output grid pixel at (r, c)
    to:
      - top_half pixel at (r, c)
      - bottom_half pixel at (r, c) # Note: This corresponds to input grid pixel at (r + H/2, c)
    comment: Each output pixel maps to one pixel in the top half and one in the bottom half at the same (r, c) coordinates relative to their respective subgrids.

actions:
  - action: generate_output
    actor: system
    steps:
      - Create an output grid of size H/2 x W, initialized to white (0).
      - Iterate through each coordinate (r, c) from (0, 0) to (H/2 - 1, W - 1).
      - Get the color `color_top` from the input grid at `(r, c)`.
      - Get the color `color_bottom` from the input grid at `(r + H/2, c)`.
      - Check if `color_top` is white (0) AND `color_bottom` is white (0).
      - If true, set the output grid pixel at `(r, c)` to red (2).
      - If false, ensure the output grid pixel at `(r, c)` remains white (0). # Default state

constants:
  - background_color: white (0)
  - output_marker_color: red (2)

observations:
  - The specific non-background colors (green=3, blue=1) in the input halves do not influence the output color, only whether a pixel is background or not.
  - The transformation rule is a pixel-wise logical AND operation on the "is background" status of corresponding pixels in the two halves.