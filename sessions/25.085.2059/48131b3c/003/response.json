{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransforms an input grid according to the following rules:\n1. Identifies the single non-white color (C) in the input grid.\n2. Creates an intermediate 'tile_grid' of the same dimensions (H x W) as the input.\n3. Handles the first two rows:\n    - If H >= 2, swaps the first two rows (index 0 and 1) from the input and places them into the 'tile_grid' (input row 1 -> tile row 0, input row 0 -> tile row 1).\n    - If H == 1, copies the single input row to the 'tile_grid'.\n4. For rows from index 2 onwards in the input grid:\n    - Copies them to the corresponding rows in 'tile_grid', but inverts the colors:\n        - Pixels with the dominant color C become white (0).\n        - White pixels (0) become the dominant color C.\n5. Creates the final output grid, which is twice the height and twice the width of the input grid.\n6. Tiles the 'tile_grid' into the output grid in a 2x2 pattern.\n\"\"\"\n\ndef find_dominant_color(grid):\n    \"\"\"\n    Finds the single non-white (non-zero) color present in the grid.\n    Assumes exactly one non-white color exists besides white (0).\n\n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        int: The dominant color value. Returns 0 if only white is found (shouldn't happen based on task constraints).\n    \"\"\"\n    unique_colors = np.unique(grid)\n    for color in unique_colors:\n        if color != 0:\n            return color\n    return 0 # Fallback, though constraints suggest a non-white color always exists\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid (list of lists): The input grid represented as a list of lists.\n\n    Returns:\n        list of lists: The transformed output grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_array = np.array(input_grid, dtype=int)\n    H, W = input_array.shape\n\n    # 1. Identify the dominant non-white color (C)\n    dominant_color = find_dominant_color(input_array)\n\n    # 2. Create the intermediate tile_grid, initialized with zeros (or any value, will be overwritten)\n    tile_grid = np.zeros_like(input_array)\n\n    # 3. Handle the first two rows (swap if H >= 2, copy if H == 1)\n    if H >= 2:\n        # Swap row 0 and row 1 from input into tile_grid\n        tile_grid[0, :] = input_array[1, :] # Input row 1 goes to tile_grid row 0\n        tile_grid[1, :] = input_array[0, :] # Input row 0 goes to tile_grid row 1\n    elif H == 1:\n        # Copy the single row\n        tile_grid[0, :] = input_array[0, :]\n\n    # 4. Process subsequent rows (index 2 onwards) with color inversion\n    if H > 2:\n        for i in range(2, H):\n            # Get the current row from the input\n            input_row = input_array[i, :]\n            # Create a copy to modify for the tile_grid\n            output_row = np.copy(input_row)\n            # Apply inversion: C -> 0 and 0 -> C\n            is_dominant = (input_row == dominant_color)\n            is_white = (input_row == 0)\n            output_row[is_dominant] = 0 # Where input was C, output becomes 0\n            output_row[is_white] = dominant_color # Where input was 0, output becomes C\n            # Assign the modified row to the tile_grid\n            tile_grid[i, :] = output_row\n\n    # 5. & 6. Create the output grid and tile the tile_grid 2x2\n    # np.tile repeats the array `tile_grid` 2 times vertically and 2 times horizontally\n    output_array = np.tile(tile_grid, (2, 2))\n\n    # Convert the final numpy array back to a list of lists for the expected output format\n    return output_array.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4986,
    "candidates_token_count": 1034,
    "total_token_count": 6020,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 17.647768,
  "retries": null
}