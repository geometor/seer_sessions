{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms a 3x3 input grid containing white (0) and one other foreground color into a single integer output. \nThe transformation is based on two calculated properties of the foreground pixels:\n1. N: The number of connected components formed by the foreground pixels using 4-way adjacency (up, down, left, right).\n2. M: The maximum number of adjacent foreground neighbors (using 4-way adjacency) for any single foreground pixel.\n\nThe output integer is determined by the following rules mapping the pair (N, M):\n- If N=2 and M=2, output is 3.\n- If N=1 and M=4, output is 6.\n- If N=5 and M=0, output is 2.\n- If N=3 and M=2, output is 1.\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef _find_connected_components(grid):\n    \"\"\"\n    Finds the number of connected components of non-zero pixels using 4-way adjacency.\n    \n    Args:\n        grid (np.ndarray): The input grid.\n        \n    Returns:\n        int: The number of connected components.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    component_count = 0\n    \n    # Define 4-way directions (up, down, left, right)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] \n\n    for r in range(rows):\n        for c in range(cols):\n            # If it's a foreground pixel (non-zero) and not visited yet\n            if grid[r, c] != 0 and not visited[r, c]:\n                component_count += 1\n                # Start a Breadth-First Search (BFS) to find all connected pixels in this component\n                queue = deque([(r, c)])\n                visited[r, c] = True\n                while queue:\n                    row, col = queue.popleft()\n                    for dr, dc in directions:\n                        nr, nc = row + dr, col + dc\n                        # Check grid boundaries\n                        if 0 <= nr < rows and 0 <= nc < cols:\n                            # Check if the neighbor is a foreground pixel and not visited\n                            if grid[nr, nc] != 0 and not visited[nr, nc]:\n                                visited[nr, nc] = True\n                                queue.append((nr, nc))\n                            \n    return component_count\n\ndef _calculate_max_neighbors(grid):\n    \"\"\"\n    Calculates the maximum number of adjacent (4-way) foreground neighbors \n    for any single foreground pixel.\n    \n    Args:\n        grid (np.ndarray): The input grid.\n        \n    Returns:\n        int: The maximum neighbor count.\n    \"\"\"\n    rows, cols = grid.shape\n    max_neighbors = 0\n    \n    # Define 4-way directions\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    for r in range(rows):\n        for c in range(cols):\n            # Consider only foreground pixels\n            if grid[r, c] != 0:\n                current_neighbors = 0\n                # Check all 4 neighbors\n                for dr, dc in directions:\n                    nr, nc = r + dr, c + dc\n                    # Check grid boundaries\n                    if 0 <= nr < rows and 0 <= nc < cols:\n                         # Check if the neighbor is also a foreground pixel\n                        if grid[nr, nc] != 0:\n                            current_neighbors += 1\n                # Update the maximum count found so far\n                max_neighbors = max(max_neighbors, current_neighbors)\n                \n    return max_neighbors\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on connected components (N) and \n    maximum neighbor counts (M) of foreground pixels.\n    \n    Args:\n        input_grid (list of lists or np.ndarray): The input 3x3 grid.\n        \n    Returns:\n        int: The output integer based on the transformation rules.\n    \"\"\"\n    # Ensure input is a numpy array\n    grid = np.array(input_grid, dtype=int)\n    \n    # Calculate the number of connected components (N)\n    num_components = _find_connected_components(grid)\n    \n    # Calculate the maximum neighbor count (M)\n    max_neighbors = _calculate_max_neighbors(grid)\n    \n    # Apply the transformation rules based on N and M\n    if num_components == 2 and max_neighbors == 2:\n        return 3\n    elif num_components == 1 and max_neighbors == 4:\n        return 6\n    elif num_components == 5 and max_neighbors == 0:\n        return 2\n    elif num_components == 3 and max_neighbors == 2:\n        return 1\n    else:\n        # Fallback for unexpected combinations, although based on examples, \n        # one of the above should always match.\n        print(f\"Warning: Unhandled case - N={num_components}, M={max_neighbors}\")\n        # Returning a distinct value to indicate an issue during testing/validation\n        return -999 \n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4514,
    "candidates_token_count": 1225,
    "total_token_count": 5739,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.741821,
  "retries": null
}