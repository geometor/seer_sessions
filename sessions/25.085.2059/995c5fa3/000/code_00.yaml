task_description: Analyze 4x14 input grids divided into three 4x4 blocks and generate a 3x3 output grid where each row's color depends on the corresponding input block's content.

definitions:
  - &white 0
  - &red 2
  - &green 3
  - &yellow 4
  - &gray 5
  - &azure 8

input_grid:
  type: Grid
  properties:
    height: 4
    width: 14
  structure:
    - component: separator_columns
      columns: [4, 9]
      color: *white
    - component: blocks
      count: 3
      definition: Sections of the grid separated by separator_columns.
      properties:
        height: 4
        width: 4
      indices:
        - block_1: columns 0-3
        - block_2: columns 5-8
        - block_3: columns 10-13

block_analysis:
  for_each: block in [block_1, block_2, block_3]
  determine: block_state
  possible_states:
    - state: has_unique_color
      condition: Contains exactly one color C != *gray AND C != *white.
      value: C
    - state: all_gray
      condition: Contains only *gray pixels.
    - state: gray_white_only
      condition: Contains only *gray and *white pixels.

transformation_rules:
  - rule: Map block state to output color based on state and block index.
    mappings:
      - input_state: has_unique_color C
        output_color: C
      - input_state: all_gray
        output_color: *red
      - input_state: gray_white_only
        conditions:
          - block_index: 0 # (Block 1)
            output_color: *green
          - block_index: 1 # (Block 2)
            output_color: *azure
          # - block_index: 2 # (Block 3) - Rule not observed in examples

output_grid:
  type: Grid
  properties:
    height: 3
    width: 3
  construction:
    - process: Determine the output color for each input block using transformation_rules.
      - color_1: result for block_1
      - color_2: result for block_2
      - color_3: result for block_3
    - process: Fill the output grid rows with the determined colors.
      - row_0: fill with color_1
      - row_1: fill with color_2
      - row_2: fill with color_3
