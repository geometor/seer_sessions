{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nSimulates gravity on non-white, non-azure objects in a grid.\nObjects are defined implicitly by pixels of colors 1-7 and 9.\nThese mobile pixels fall downwards through white space (color 0) \nuntil they are directly above a non-white pixel (any color 1-9, including \nthe static azure color 8) or until they reach the bottom boundary of the grid. \nThe azure (color 8) pixels are considered static and do not move.\nThe simulation continues iteratively until no more pixels can move downwards \nin a full pass over the grid.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Applies gravity simulation to the input grid.\n\n    Args:\n        input_grid: A list of lists representing the input grid.\n\n    Returns:\n        A list of lists representing the output grid after gravity simulation.\n    \"\"\"\n    # Convert input list of lists to a NumPy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    height, width = input_np.shape\n    \n    # Create a copy to modify, representing the grid state during simulation\n    output_grid = input_np.copy()\n    \n    # Define background color and static colors\n    background_color = 0\n    static_colors = {8} # Azure (8) is static\n\n    # Iteratively simulate pixel falling until the grid stabilizes\n    while True:\n        moved = False # Flag to track if any pixel moved in the current pass\n        \n        # Iterate through the grid cells, starting from the second-to-last row and moving upwards.\n        # This ensures that pixels lower down move first, creating space for pixels above them.\n        # We iterate row by row from bottom (height-2) to top (0).\n        for r in range(height - 2, -1, -1): \n            # Iterate through columns left to right\n            for c in range(width):\n                current_color = output_grid[r, c]\n\n                # Check if the current pixel is mobile \n                # (i.e., not background and not a static color)\n                if current_color != background_color and current_color not in static_colors:\n                    \n                    # Check if the cell directly below is empty (background color)\n                    if output_grid[r + 1, c] == background_color:\n                        # If empty, move the current pixel down\n                        output_grid[r + 1, c] = current_color\n                        output_grid[r, c] = background_color\n                        # Mark that a movement occurred in this pass\n                        moved = True \n\n        # If no pixels moved during a full pass over the grid, the simulation is stable\n        if not moved:\n            break\n\n    # Convert the final NumPy array back to a list of lists for the expected output format\n    return output_grid.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2370,
    "candidates_token_count": 658,
    "total_token_count": 3028,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 129.383969,
  "retries": null
}