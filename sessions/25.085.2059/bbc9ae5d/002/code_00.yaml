InputGrid:
  Type: 2D Array (Grid)
  Properties:
    Height: H (Variable, >1 based on errors)
    Width: W (Variable)
    Pixels: Integer values 0-9 (Colors)
OutputGrid:
  Type: 2D Array (Grid)
  Properties:
    Height: H (Same as Input)
    Width: W (Same as Input)
    Pixels: Integer values 0-9 (Colors)
Objects:
  - Type: HorizontalBlock
    Definition: A maximal contiguous sequence of identical non-white pixels (C) in a single row, immediately followed by at least one white pixel (0).
    Properties:
      Color: C (Non-white)
      Length: N
      RowIndex: r
      EndColumnIndex: N-1
      Identifier: The *first* such block found when scanning rows top-to-bottom.
  - Type: BackgroundPixel
    Definition: A pixel with value 0 (white).
Actions:
  - Name: FindFirstHorizontalBlock
    Input: InputGrid
    Output: The identified HorizontalBlock (Color C, Length N, RowIndex r)
  - Name: CopyGrid
    Input: InputGrid
    Output: OutputGrid (initial state)
  - Name: AddDiagonalPixels
    Input: 
      - OutputGrid (current state)
      - HorizontalBlock (C, N, r)
      - InputGrid (to check original pixel values)
    Process:
      1. Iterate with step `k` starting from 1.
      2. Calculate target coordinates: `(target_r, target_c) = (r + k, (N-1) + k + 1) = (r + k, N + k -1)`. NO, wait, the index *after* the block is N. So it should be `(target_r, target_c) = (r + k, N + k)`. Let's recheck. Previous code: `change_index = initial_non_white_count + (i - 1)`. If `initial_non_white_count` is N, and `i` is the step (starting from 1), then the column index is `N + k - 1`. The row index is `r + k`. So, `(target_r, target_c) = (r + k, N + k - 1)`.
      3. Check if `target_r` < H and `target_c` < W.
      4. Check if `InputGrid[target_r][target_c]` is white (0).
      5. If both checks pass, set `OutputGrid[target_r][target_c] = C`.
      6. Stop iterating when checks fail.
    Output: Modified OutputGrid