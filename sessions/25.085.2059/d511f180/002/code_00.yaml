task_description: Update pixel colors based on neighborhood interactions between gray and azure.
grid_properties:
  dimensionality: 2
  cell_values: Integers 0-9 representing colors.
colors_of_interest:
  - gray: 5
  - azure: 8
objects:
  - type: pixel
    properties:
      - color: The integer value (0-9) of the pixel.
      - position: (row, column) coordinates.
      - neighbors: The set of 8 adjacent pixels (including diagonals).
actions:
  - name: evaluate_pixel
    inputs: pixel (current pixel in input grid), input_grid
    outputs: new_color (for the corresponding pixel in the output grid)
    conditions:
      - If pixel color is gray (5):
          - Check neighbors in input_grid:
              - If any neighbor is azure (8) -> new_color is azure (8).
              - Else if any neighbor is gray (5) -> new_color is azure (8).
              - Else -> new_color is gray (5).
      - If pixel color is azure (8):
          - Check neighbors in input_grid:
              - If any neighbor is gray (5) -> new_color is gray (5).
              - Else -> new_color is azure (8).
      - If pixel color is neither gray (5) nor azure (8):
          - new_color is the original pixel color.
transformation_logic:
  type: simultaneous_update
  description: |
    All pixel evaluations are based on the state of the original input grid.
    The output grid is constructed based on these evaluations.