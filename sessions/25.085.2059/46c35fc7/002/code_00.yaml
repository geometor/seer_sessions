Context:
  Input: 2D grid of pixels (integers 0-9).
  Output: 2D grid of pixels (integers 0-9).
  Background_Color: Orange (7).
  Rule_Trigger: Presence of connected components of non-orange pixels whose bounding box is exactly 3x3.

Objects:
  - type: Grid
    properties:
      - dimensions (height, width)
      - pixel values (colors)
  - type: Pixel
    properties:
      - position (row, column)
      - color (value 0-9)
  - type: Component
    description: A group of connected non-background pixels.
    properties:
      - pixels (set of (row, col) tuples)
      - connectivity: 8-way adjacency (includes diagonals)
      - bounding_box: ((min_r, min_c), (max_r, max_c))
      - dimensions (height, width derived from bounding_box)
  - type: Subgrid_3x3
    description: A 3x3 section of the main grid, defined by a bounding box.
    properties:
      - pixels: 9 pixels within the bounding box.
      - position: Top-left corner (min_r, min_c) of the bounding box.

Actions:
  - Find connected components of non-orange pixels.
  - Calculate the bounding box for each component.
  - Filter components where bounding box dimensions are exactly 3x3.
  - For each filtered 3x3 bounding box:
    - Extract the corresponding 3x3 subgrid from the input.
    - Apply a specific pixel rearrangement transformation to this subgrid.
      - Mapping (Input(r,c) -> Output(nr,nc), relative to top-left of 3x3 block):
        - (0,0) -> (2,0)
        - (0,1) -> (1,2)
        - (0,2) -> (0,0)
        - (1,0) -> (0,1)
        - (1,1) -> (1,1)
        - (1,2) -> (2,1)
        - (2,0) -> (0,2)
        - (2,1) -> (1,0)
        - (2,2) -> (2,2)
    - Place the transformed 3x3 subgrid into the output grid at the original bounding box location.
  - Pixels outside the identified 3x3 bounding boxes remain unchanged from the input grid.
  - Initialize the output grid as a copy of the input grid.