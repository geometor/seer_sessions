{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n# -*- coding: utf-8 -*-\n\"\"\"\nTransforms the input grid by identifying specific 3x3 subgrids and applying one \nof two possible permutations based on the colors in the subgrid's bottom corners.\n\n1.  Initialize the output grid as a copy of the input grid.\n2.  Define the background color as orange (7).\n3.  Iterate through all possible 3x3 subgrids in the input grid by considering \n    their top-left corner coordinates (r, c).\n4.  For each 3x3 subgrid:\n    a.  Check if the non-orange pixels within the subgrid span a 3x3 \n        bounding box relative to the subgrid itself (the criterion).\n    b.  If the criterion is met:\n        i.  Examine the colors of the pixels at relative coordinates (2,0) \n            (bottom-left) and (2,2) (bottom-right) within the 3x3 subgrid.\n        ii. If Input[2,0] == Input[2,2], apply Permutation P1.\n        iii. If Input[2,0] != Input[2,2], apply Permutation P2.\n        iv. Apply the selected permutation to rearrange the pixels from the \n            input 3x3 subgrid into a new 3x3 subgrid.\n        v.  Place the resulting permuted 3x3 subgrid into the output grid at \n            the corresponding location (r, c).\n5.  Return the final output grid.\n\"\"\"\n\nimport numpy as np\n\ndef _check_criterion(subgrid_3x3, bg_color):\n    \"\"\"\n    Checks if the non-background pixels within the 3x3 subgrid\n    span a 3x3 bounding box relative to the subgrid.\n\n    Args:\n        subgrid_3x3 (np.array): The 3x3 subgrid.\n        bg_color (int): The background color to ignore.\n\n    Returns:\n        bool: True if the criterion is met, False otherwise.\n    \"\"\"\n    non_bg_coords = []\n    # Find coordinates of non-background pixels relative to the 3x3 subgrid\n    for r in range(3):\n        for c in range(3):\n            if subgrid_3x3[r, c] != bg_color:\n                non_bg_coords.append((r, c))\n\n    # If there are no non-background pixels, criterion is not met\n    if not non_bg_coords:\n        return False\n\n    # Calculate bounding box relative to the 3x3 subgrid\n    min_r = min(r for r, c in non_bg_coords)\n    max_r = max(r for r, c in non_bg_coords)\n    min_c = min(c for r, c in non_bg_coords)\n    max_c = max(c for r, c in non_bg_coords)\n\n    # Calculate height and width of the bounding box\n    height = max_r - min_r + 1\n    width = max_c - min_c + 1\n\n    # Check if the bounding box is exactly 3x3\n    return height == 3 and width == 3\n\ndef _apply_conditional_permutation(subgrid_3x3):\n    \"\"\"\n    Applies one of two pixel rearrangements to a 3x3 subgrid based on its\n    bottom corner pixels.\n\n    Args:\n        subgrid_3x3 (np.array): A 3x3 numpy array.\n\n    Returns:\n        np.array: The rearranged 3x3 numpy array.\n    \"\"\"\n    # Create a new 3x3 array to store the result, preserving dtype\n    permuted_subgrid = np.zeros_like(subgrid_3x3)\n\n    # Apply the common mappings (Input Row, Input Col) -> (Output Row, Output Col)\n    permuted_subgrid[2, 0] = subgrid_3x3[0, 0]\n    permuted_subgrid[1, 2] = subgrid_3x3[0, 1]\n    permuted_subgrid[0, 0] = subgrid_3x3[0, 2]\n    permuted_subgrid[0, 1] = subgrid_3x3[1, 0]\n    permuted_subgrid[1, 1] = subgrid_3x3[1, 1] # Center pixel remains\n    permuted_subgrid[2, 1] = subgrid_3x3[1, 2]\n    permuted_subgrid[1, 0] = subgrid_3x3[2, 1]\n\n    # Apply conditional mappings based on bottom corners\n    if subgrid_3x3[2, 0] == subgrid_3x3[2, 2]:\n        # Permutation P1 (bottom corners are same)\n        permuted_subgrid[0, 2] = subgrid_3x3[2, 0]\n        permuted_subgrid[2, 2] = subgrid_3x3[2, 2]\n    else:\n        # Permutation P2 (bottom corners are different)\n        permuted_subgrid[2, 2] = subgrid_3x3[2, 0]\n        permuted_subgrid[0, 2] = subgrid_3x3[2, 2]\n\n    return permuted_subgrid\n\ndef transform(input_grid):\n    \"\"\"\n    Applies a conditional permutation to 3x3 subgrids based on the spatial \n    extent of their non-orange pixels and the colors of their bottom corners.\n    \"\"\"\n    # Convert input list of lists to a numpy array\n    input_np = np.array(input_grid, dtype=int)\n    # Initialize output grid as a copy of the input\n    output_np = np.copy(input_np)\n    rows, cols = input_np.shape\n\n    # Define the background color (orange)\n    bg_color = 7\n\n    # Iterate through all possible top-left corners (r, c) of 3x3 subgrids\n    for r in range(rows - 2):\n        for c in range(cols - 2):\n            # Extract the 3x3 subgrid from the *input* grid\n            subgrid = input_np[r : r + 3, c : c + 3]\n\n            # Check if this subgrid meets the spatial criterion\n            if _check_criterion(subgrid, bg_color):\n                # If criterion met, apply the conditional permutation\n                permuted_subgrid = _apply_conditional_permutation(subgrid)\n\n                # Place the permuted subgrid into the *output* grid\n                output_np[r : r + 3, c : c + 3] = permuted_subgrid\n\n    # Convert the final numpy array back to a list of lists\n    return output_np.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7610,
    "candidates_token_count": 1599,
    "total_token_count": 9209,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.051517,
  "retries": null
}