{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nProcesses each row of the input grid independently.\nIf a row contains exactly two non-white pixels, P1 (left, color C1, col1) and P2 (right, color C2, col2),\nand the pair of colors (C1, C2) is one of {(1, 8), (8, 1), (4, 7), (7, 4)} (blue/azure or yellow/orange pairs),\nthen the right pixel P2 moves immediately to the right of the left pixel P1.\nSpecifically, the pixel at (row, col2) becomes white (0), and the pixel at (row, col1 + 1) becomes color C2.\nRows that do not meet these criteria remain unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef find_non_white_pixels(row):\n    \"\"\"Finds the indices and colors of non-white pixels in a row.\"\"\"\n    pixels = []\n    for col_idx, color in enumerate(row):\n        if color != 0:\n            pixels.append({'col': col_idx, 'color': color})\n    # Ensure pixels are sorted by column index (they should be already, but good practice)\n    pixels.sort(key=lambda p: p['col'])\n    return pixels\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n    Moves the right pixel leftward next to the left pixel if they form an active color pair\n    in a row with exactly two non-white pixels.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_np)\n    \n    num_rows, num_cols = input_np.shape\n\n    # Define the active color pairs\n    active_pairs = {(1, 8), (8, 1), (4, 7), (7, 4)} # (blue, azure), (azure, blue), (yellow, orange), (orange, yellow)\n\n    # Iterate through each row\n    for r in range(num_rows):\n        row_data = output_grid[r, :]\n        \n        # Find non-white pixels in the current row\n        non_white_pixels = find_non_white_pixels(row_data)\n        \n        # Check if there are exactly two non-white pixels\n        if len(non_white_pixels) == 2:\n            # Get the properties of the two pixels\n            p1 = non_white_pixels[0] # Left pixel\n            p2 = non_white_pixels[1] # Right pixel\n            \n            color1 = p1['color']\n            col1 = p1['col']\n            color2 = p2['color']\n            col2 = p2['col']\n            \n            # Check if the color pair is one of the active pairs\n            if (color1, color2) in active_pairs:\n                # Apply the transformation: move the right pixel next to the left one\n                # Ensure the target position is within bounds (should be, as col1 < col2)\n                if col1 + 1 < num_cols:\n                    output_grid[r, col2] = 0      # Make original position of right pixel white\n                    output_grid[r, col1 + 1] = color2 # Move right pixel's color next to left pixel\n                    \n    # Convert back to list of lists if necessary, depending on expected output format\n    return output_grid.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3155,
    "candidates_token_count": 817,
    "total_token_count": 3972,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.650782,
  "retries": null
}