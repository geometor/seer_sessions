task_description: Modify a grid by changing the color of specific red pixels to blue based on their local neighborhood.
grid_properties:
  - dimensions: Vary between examples (e.g., 5x4, 4x4, 3x3).
  - colors_present_input: Primarily white (0) and red (2).
  - colors_present_output: Primarily white (0), red (2), and blue (1).
objects:
  - type: Pixel
    properties:
      - color: Integer value (0-9), representing white, red, blue, etc.
      - position: (row, column) coordinates.
      - neighbors: Adjacent pixels (up, down, left, right) and diagonal pixels.
actions:
  - name: Color Change
    input_object: Red pixel (color 2)
    output_object: Blue pixel (color 1)
    condition: The red pixel must not have any red neighbors in the four cardinal directions (up, down, left, right). The state of diagonal neighbors or neighbors of other colors does not affect the condition.
    scope: Apply to each pixel individually. The output grid has the same dimensions as the input grid. Pixels that do not meet the condition retain their original color.
observations_from_metrics:
  - All red pixels that change to blue satisfy the condition of having no adjacent (4-direction) red neighbors ('4_neighbor_isolated': true).
  - All red pixels that do *not* change to blue violate the condition, meaning they have at least one adjacent (4-direction) red neighbor ('4_neighbor_isolated': false).
  - The failed examples (3 and 4) show that the previous code failed specifically on red pixels that *should* have changed (i.e., they meet the 4-neighbor isolation condition) but were incorrectly evaluated by the old 8-neighbor rule.