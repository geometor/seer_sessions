{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentify the largest contiguous non-white object (main_shape) and a \nsingle-pixel non-white object (target_pixel) in the input grid.\nRecolor the main_shape with the color of the target_pixel.\nSet the original location of the target_pixel to white (0).\n\"\"\"\n\ndef find_objects(grid):\n    \"\"\"\n    Finds all contiguous objects of the same color in the grid.\n\n    Args:\n        grid: A 2D numpy array representing the input grid.\n\n    Returns:\n        A list of dictionaries, where each dictionary represents an object\n        and contains 'color', 'coords' (list of (r, c) tuples), and 'size'.\n        Returns an empty list if no non-white objects are found.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n\n    for r in range(rows):\n        for c in range(cols):\n            # If the pixel is non-white and not visited yet\n            if grid[r, c] != 0 and not visited[r, c]:\n                color = grid[r, c]\n                obj_coords = []\n                q = deque([(r, c)])\n                visited[r, c] = True\n\n                while q:\n                    row, col = q.popleft()\n                    obj_coords.append((row, col))\n\n                    # Check neighbors (4-directional)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        # Check bounds, color match, and visited status\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] == color and not visited[nr, nc]:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n                \n                objects.append({\n                    'color': color,\n                    'coords': obj_coords,\n                    'size': len(obj_coords)\n                })\n                \n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the specified rules.\n\n    Args:\n        input_grid: A 2D numpy array representing the input grid.\n\n    Returns:\n        A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    # Find all non-white objects in the input grid\n    objects = find_objects(input_grid)\n\n    if not objects:\n        return input_grid.copy() # Return copy if no objects found\n\n    # Identify the main shape (largest object) and the target pixel (single pixel object)\n    main_shape = None\n    target_pixel_obj = None\n    \n    # Find the object with the maximum size\n    max_size = 0\n    for obj in objects:\n        if obj['size'] > max_size:\n            max_size = obj['size']\n            \n    # Separate objects into potential main shapes and potential target pixels\n    potential_main_shapes = [obj for obj in objects if obj['size'] == max_size]\n    potential_target_pixels = [obj for obj in objects if obj['size'] == 1 and obj['size'] != max_size]\n\n    # Assuming exactly one main shape and one target pixel based on examples\n    if len(potential_main_shapes) == 1 and len(potential_target_pixels) == 1:\n        main_shape = potential_main_shapes[0]\n        target_pixel_obj = potential_target_pixels[0]\n    else:\n        # Fallback or error handling if assumptions don't hold\n        # For now, let's try finding the largest and *any* single pixel object\n        # if the strict condition fails, but prefer the distinct color one if multiple singles exist\n        objects.sort(key=lambda x: x['size'], reverse=True)\n        if len(objects) >= 2:\n            main_shape = objects[0]\n            single_pixel_candidates = [obj for obj in objects[1:] if obj['size'] == 1]\n            if len(single_pixel_candidates) == 1:\n                 target_pixel_obj = single_pixel_candidates[0]\n            elif len(single_pixel_candidates) > 1:\n                 # If multiple single pixels, maybe pick one not adjacent? Or first one?\n                 # Based on examples, it seems unique. Let's just pick the first.\n                 target_pixel_obj = single_pixel_candidates[0]\n\n    # Check if both main_shape and target_pixel_obj were found\n    if main_shape is None or target_pixel_obj is None:\n        # If we couldn't identify the objects as expected, return the original grid\n        # This might happen if there's only one object, or multiple large objects, etc.\n        return input_grid.copy()\n\n    # Get the target color from the target pixel object\n    target_color = target_pixel_obj['color']\n\n    # Get the coordinates of the target pixel\n    target_pixel_loc = target_pixel_obj['coords'][0] # It's a list containing one tuple\n\n    # Initialize the output grid as a copy of the input\n    output_grid = input_grid.copy()\n\n    # Recolor the main shape in the output grid\n    for r, c in main_shape['coords']:\n        output_grid[r, c] = target_color\n\n    # Change the original location of the target pixel to white\n    output_grid[target_pixel_loc[0], target_pixel_loc[1]] = 0\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2275,
    "candidates_token_count": 1316,
    "total_token_count": 3591,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.139885,
  "retries": null
}