{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransforms the input grid according to the following rules:\n\n1.  Create an intermediate grid by changing all blue (1) pixels in the input grid to red (2), keeping white (0) pixels unchanged.\n2.  Let H be the height of the input grid and calculate `half_h = H // 2`.\n3.  Compare row `half_h - 1` and row `half_h` of the *original input grid*.\n4.  Determine the slice of rows to append based on the comparison:\n    *   If row `half_h - 1` and row `half_h` are identical: The slice consists of the top `half_h` rows (indices 0 to `half_h - 1`) of the `intermediate_grid`.\n    *   If row `half_h - 1` and row `half_h` are different: The slice consists of `half_h` rows starting from index `half_h - 1` (indices `half_h - 1` to `half_h - 1 + half_h - 1`) of the `intermediate_grid`.\n5.  Construct the final output grid by vertically stacking the `intermediate_grid` on top of the determined slice.\n6.  The final output grid has a height of `H + half_h` and the same width as the input grid.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the conditional slicing and stacking transformation.\n\n    Args:\n        input_grid (list[list[int]]): A 2D list representing the input grid.\n\n    Returns:\n        list[list[int]]: A 2D list representing the transformed output grid.\n    \"\"\"\n    # Convert input grid to a numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    H, W = input_np.shape\n\n    # Handle edge case H < 2 where comparison indices are invalid\n    if H < 2:\n         # Default behavior for H<2: just change color? Or return input?\n         # Based on logic derived, it relies on H>=2. Let's assume H>=2\n         # or define a specific behavior.\n         # For now, let's perform the color change and return.\n         # A more robust solution might need clarification for H<2 cases.\n         output_np = input_np.copy()\n         output_np[output_np == 1] = 2\n         return output_np.tolist()\n\n\n    # 1. Create an intermediate grid by copying the input and changing colors\n    intermediate_grid = input_np.copy()\n    intermediate_grid[intermediate_grid == 1] = 2\n\n    # 2. Calculate half height\n    half_h = H // 2\n\n    # 3. Compare rows half_h - 1 and half_h of the ORIGINAL input grid\n    row_index_1 = half_h - 1\n    row_index_2 = half_h\n    rows_are_identical = np.array_equal(input_np[row_index_1], input_np[row_index_2])\n\n    # 4. Determine the slice to append based on the comparison\n    if rows_are_identical:\n        # Slice is the top half_h rows of the intermediate grid\n        start_index = 0\n        end_index = half_h # Slice goes up to end_index - 1\n        slice_to_append = intermediate_grid[start_index:end_index, :]\n    else:\n        # Slice is half_h rows starting from index half_h - 1 of the intermediate grid\n        start_index = half_h - 1\n        end_index = start_index + half_h # e.g., H=6, half_h=3. start=2, end=2+3=5. Indices 2, 3, 4.\n        slice_to_append = intermediate_grid[start_index:end_index, :]\n\n    # 5. Construct the final output grid by stacking\n    output_np = np.vstack((intermediate_grid, slice_to_append))\n\n    # Convert the final numpy array back to a list of lists\n    output_grid = output_np.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2118,
    "candidates_token_count": 984,
    "total_token_count": 3102,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 50.799268,
  "retries": null
}