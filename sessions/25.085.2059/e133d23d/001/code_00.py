import numpy as np

"""
Transform a 3x7 input grid into a 3x3 output grid.

The input grid is conceptually divided into two 3x3 regions by a vertical yellow
(4) line in the 4th column (index 3).
The 'left region' consists of columns 0-2.
The 'right region' consists of columns 4-6.

The output grid is generated by iterating through each corresponding cell (r, c)
in the left and right regions.
If the cell at (r, c) in the left region contains magenta (6) OR the cell at
(r, c) in the right region contains azure (8), the corresponding cell (r, c)
in the output grid is set to red (2).
Otherwise, the output cell is set to white (0).
"""

def transform(input_grid):
    """
    Applies the transformation rule to the input grid.

    Args:
        input_grid (list[list[int]]): A 3x7 grid represented as a list of lists.

    Returns:
        list[list[int]]: The transformed 3x3 grid.
    """
    # Convert input list of lists to a numpy array for easier slicing
    input_array = np.array(input_grid, dtype=int)

    # Define constants for colors and dimensions
    rows, cols = input_array.shape
    output_rows, output_cols = 3, 3
    magenta_color = 6
    azure_color = 8
    red_color = 2
    white_color = 0
    separator_col_index = 3

    # Extract the left region (columns 0, 1, 2)
    left_region = input_array[:, 0:separator_col_index]

    # Extract the right region (columns 4, 5, 6)
    right_region = input_array[:, separator_col_index + 1:cols]

    # Initialize the output grid with the inactive color (white)
    output_grid = np.full((output_rows, output_cols), white_color, dtype=int)

    # Iterate through each cell of the 3x3 output grid dimensions
    for r in range(output_rows):
        for c in range(output_cols):
            # Get the color of the corresponding pixel in the left region
            left_pixel_color = left_region[r, c]
            # Get the color of the corresponding pixel in the right region
            right_pixel_color = right_region[r, c]

            # Apply the transformation rule
            # If left pixel is magenta OR right pixel is azure
            if left_pixel_color == magenta_color or right_pixel_color == azure_color:
                # Set the output pixel to red
                output_grid[r, c] = red_color
            # Otherwise, it remains white (already initialized)

    # Convert the numpy array back to a list of lists before returning
    return output_grid.tolist()