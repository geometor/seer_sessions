task_type: transformation
grid_properties:
  size: constant (3x3 in examples)
  colors_present_input: variable, includes red(2), blue(1), green(3), yellow(4), azure(8)
  colors_present_output: variable, includes gray(5) and one other color from the input.
objects:
  - type: pixels
    properties:
      - color: integer value 0-9
transformation_rule:
  - action: identify_frequency
    target: all pixels in the input grid
    filter: exclude colors azure(8) and white(0)
    result: find the color with the highest frequency (let's call it 'preserved_color')
  - action: generate_output_grid
    based_on: input_grid
    details: |
      Iterate through each pixel of the input grid.
      If the pixel color matches the 'preserved_color', keep it.
      Otherwise, change the pixel color to gray(5).
relationship:
  - input pixel color frequency (excluding azure and white) determines which color is preserved in the output. All other pixels become gray.