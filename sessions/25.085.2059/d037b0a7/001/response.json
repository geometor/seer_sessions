{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransforms the input grid based on the following rule:\nFor each column, find the topmost non-white pixel. If found, fill all pixels\nin that column from that row downwards with the color of that topmost pixel.\nIf a column contains only white pixels, it remains unchanged.\n\"\"\"\n\n# Imports\nimport numpy as np\n\n# Helper function to find the topmost non-white pixel in a column\ndef _find_topmost_non_white(grid, col_index):\n    \"\"\"\n    Finds the topmost non-white pixel in a specific column of the grid.\n\n    Args:\n        grid (np.array): The input grid.\n        col_index (int): The index of the column to search.\n\n    Returns:\n        tuple: A tuple containing (row_index, color) of the topmost non-white pixel.\n               Returns (-1, None) if no non-white pixel is found in the column.\n    \"\"\"\n    height = grid.shape[0]\n    # Iterate through rows from top to bottom\n    for r in range(height):\n        color = grid[r, col_index]\n        # Check if the pixel color is not white (0)\n        if color != 0:\n            return r, color  # Return the row index and color\n    # Return default values if no non-white pixel is found\n    return -1, None\n\ndef transform(input_grid):\n    \"\"\"\n    Applies a column-wise downward fill transformation to the input grid.\n\n    For each column:\n    1. Finds the first non-white pixel from the top.\n    2. If found, it fills all cells in that column from that pixel's row down\n       to the bottom with the color of that first non-white pixel.\n    3. If a column contains only white pixels, it remains unchanged.\n\n    Args:\n        input_grid (list of lists): A 2D list representing the input grid.\n\n    Returns:\n        list of lists: A 2D list representing the transformed output grid.\n    \"\"\"\n    # Convert input list of lists to a numpy array for efficient processing\n    grid = np.array(input_grid, dtype=int)\n    height, width = grid.shape\n\n    # Initialize the output grid as a copy of the input grid.\n    # Modifications will be made directly to this copy.\n    output_grid = grid.copy()\n\n    # Iterate through each column index 'c' from 0 to width - 1\n    for c in range(width):\n        # Use the helper function to find the topmost non-white pixel and its row\n        found_row, found_color = _find_topmost_non_white(grid, c)\n\n        # Check if a non-white pixel was actually found in the column\n        if found_row != -1:\n            # If found, iterate through the rows starting from the 'found_row'\n            # down to the last row ('height' - 1)\n            for r_fill in range(found_row, height):\n                # Set the color of the pixel at (r_fill, c) in the output grid\n                # to the 'found_color'\n                output_grid[r_fill, c] = found_color\n        # If found_row is -1 (column is all white), no action is needed\n        # because output_grid started as a copy of the input grid.\n\n    # Convert the final numpy array back to a list of lists before returning\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2220,
    "candidates_token_count": 791,
    "total_token_count": 3011,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.142202,
  "retries": null
}