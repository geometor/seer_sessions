task_type: geometric_transformation
description: The task involves rotating the input grid.

observations:
  - grid_properties:
      - All example input grids are square (3x3).
      - All example output grids are square (3x3).
      - The output grid dimensions are identical to the input grid dimensions.
      - The set of colors present in the input grid is identical to the set of colors in the corresponding output grid.
      - The total number of pixels remains constant.
  - transformation:
      - The transformation applied is consistent across all examples.
      - The transformation is a spatial rearrangement of the pixels.
      - The position of a pixel in the output grid depends on its position in the input grid.
      - The transformation corresponds to a 90-degree counter-clockwise rotation of the entire input grid.
  - coordinate_mapping:
      - Let the input grid have dimensions Height x Width (H x W).
      - Let the output grid have dimensions H' x W'.
      - For this task, H' = H and W' = W because the grids are square.
      - A pixel at input coordinates (row `r`, column `c`) moves to output coordinates (row `r'`, column `c'`).
      - The specific mapping is `r' = W - 1 - c`, `c' = r`.

objects:
  - type: grid
    attributes:
      - pixels: The grid is composed of individual pixels, each with a color value.
      - dimensions: Height and Width.
  - type: pixel
    attributes:
      - position: (row, column) coordinates.
      - color: Integer value from 0-9.

actions:
  - name: rotate_grid_counter_clockwise_90_degrees
    input: input_grid (H x W)
    output: output_grid (W x H) # Note: For square grids, W x H = H x W
    steps:
      - Determine input grid dimensions (H, W).
      - Create a new output grid with dimensions W x H.
      - For each pixel at input coordinates (r, c) with color value `v`:
        - Calculate the new coordinates (r', c') = (W - 1 - c, r).
        - Place the value `v` at output coordinates (r', c') in the new grid.