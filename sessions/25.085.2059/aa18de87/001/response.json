{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nFor each row in the input grid:\n1. Identify all unique non-white colors present.\n2. For each unique non-white color found:\n   a. Find the leftmost (minimum column index) and rightmost (maximum column index) \n      occurrences of this color in the row.\n   b. If the color appears at least twice (i.e., min and max indices are different \n      or there are multiple occurrences), fill all white (0) pixels located \n      horizontally strictly between these leftmost and rightmost occurrences \n      with red (2).\n3. Leave all other pixels unchanged.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Applies a horizontal fill transformation based on color spans within each row.\n\n    Args:\n        input_grid (np.ndarray): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.ndarray: A 2D numpy array representing the transformed grid.\n    \"\"\"\n    # Initialize output_grid as a copy of the input grid\n    output_grid = np.copy(input_grid)\n    num_rows, num_cols = input_grid.shape\n    \n    # Define the background color and the fill color\n    background_color = 0\n    fill_color = 2\n\n    # Iterate through each row of the grid\n    for r in range(num_rows):\n        row_data = input_grid[r, :]\n        \n        # Find unique non-background colors in the current row\n        unique_colors = np.unique(row_data[row_data != background_color])\n        \n        # Process each unique non-background color found in the row\n        for color in unique_colors:\n            # Find all column indices where this color appears\n            indices = np.where(row_data == color)[0]\n            \n            # Check if the color appears at least twice in the row\n            if len(indices) >= 2:\n                # Determine the minimum and maximum column index for this color\n                min_col = np.min(indices)\n                max_col = np.max(indices)\n                \n                # Iterate through the columns between the min and max indices (exclusive)\n                for c in range(min_col + 1, max_col):\n                    # If the pixel in the output grid at this position is the background color,\n                    # change it to the fill color.\n                    if output_grid[r, c] == background_color:\n                        output_grid[r, c] = fill_color\n                        \n    # Return the modified grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2698,
    "candidates_token_count": 591,
    "total_token_count": 3289,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.512951,
  "retries": null
}