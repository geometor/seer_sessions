task_description: "Identify a horizontal red segment and a vertical azure segment in the input grid. Modify the grid by extending the red segment across its entire row and filling the azure segment's entire column with azure. Mark the intersection of this new red row and azure column with yellow."

grid_properties:
  - input_grid: numpy.ndarray (height H, width W)
  - output_grid: numpy.ndarray (height H, width W) # same dimensions as input
  - colors_present: [white(0), blue(1), red(2), green(3), yellow(4), gray(5), magenta(6), orange(7), azure(8), maroon(9)] # subset of these may be used

objects:
  - object: red_segment
    definition: A horizontal contiguous sequence of one or more red(2) pixels.
    properties:
      - row_index: The row where the segment is located.
      - initial_columns: The original columns occupied by the segment.
  - object: azure_segment
    definition: A vertical contiguous sequence of one or more azure(8) pixels.
    properties:
      - column_index: The column where the segment is located.
      - initial_rows: The original rows occupied by the segment.
  - object: intersection_point
    definition: The pixel located at the intersection of the `red_segment`'s row and the `azure_segment`'s column.
    properties:
      - row_index: Same as `red_segment.row_index`.
      - column_index: Same as `azure_segment.column_index`.

actions:
  - action: identify_segments
    description: Locate the `red_segment` and `azure_segment` in the input grid. Determine `red_segment.row_index` and `azure_segment.column_index`.
  - action: initialize_output
    description: Create the output grid as a copy of the input grid.
  - action: fill_azure_column
    inputs: [output_grid, azure_segment.column_index]
    outputs: [modified_output_grid]
    description: Change all pixels in the column identified by `azure_segment.column_index` to azure(8) in the output grid. This overwrites any existing pixels in that column.
  - action: fill_red_row
    inputs: [output_grid, red_segment.row_index]
    outputs: [modified_output_grid]
    description: Change all pixels in the row identified by `red_segment.row_index` to red(2) in the output grid. This overwrites any existing pixels in that row, including the pixel potentially set to azure in the previous step.
  - action: mark_intersection
    inputs: [output_grid, intersection_point.row_index, intersection_point.column_index]
    outputs: [final_output_grid]
    description: Change the pixel at the `intersection_point` coordinates (`red_segment.row_index`, `azure_segment.column_index`) to yellow(4) in the output grid. This overwrites the red pixel placed in the previous step at this location.

sequence:
  1. Perform `identify_segments` on the input grid.
  2. Perform `initialize_output`.
  3. Perform `fill_azure_column` on the output grid.
  4. Perform `fill_red_row` on the modified output grid.
  5. Perform `mark_intersection` on the modified output grid.
  6. Return the final output grid.