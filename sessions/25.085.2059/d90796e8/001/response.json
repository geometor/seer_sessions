{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\ndef check_neighbors(grid, r, c, target_color):\n    \"\"\"\n    Checks the adjacent (up, down, left, right) neighbors of a cell (r, c)\n    in the grid to see if any match the target_color.\n\n    Args:\n        grid (np.array): The input grid.\n        r (int): The row index of the cell.\n        c (int): The column index of the cell.\n        target_color (int): The color value to look for in neighbors.\n\n    Returns:\n        bool: True if any adjacent neighbor has the target_color, False otherwise.\n    \"\"\"\n    height, width = grid.shape\n    # Define offsets for adjacent neighbors (up, down, left, right)\n    neighbor_offsets = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    for dr, dc in neighbor_offsets:\n        nr, nc = r + dr, c + dc\n        # Check if the neighbor coordinates are within the grid bounds\n        if 0 <= nr < height and 0 <= nc < width:\n            # Check if the neighbor's color matches the target color\n            if grid[nr, nc] == target_color:\n                return True\n    return False\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on adjacency rules between green (3) and red (2) pixels.\n    - If a green (3) pixel is adjacent (up, down, left, right) to a red (2) pixel in the *input* grid, it becomes azure (8) in the output grid.\n    - If a red (2) pixel is adjacent (up, down, left, right) to a green (3) pixel in the *input* grid, it becomes white (0) in the output grid.\n    - All other pixels retain their original color in the output grid.\n    The transformation considers only the adjacencies present in the original input grid.\n    \"\"\"\n    # Convert input list of lists to a numpy array for easier handling\n    input_array = np.array(input_grid, dtype=int)\n    height, width = input_array.shape\n\n    # Initialize output_grid as a deep copy of the input grid\n    # This ensures pixels not meeting the conditions retain their original color\n    output_array = np.copy(input_array)\n\n    # Iterate through each pixel of the input grid\n    for r in range(height):\n        for c in range(width):\n            current_color = input_array[r, c]\n\n            # Check if the current pixel is green (3)\n            if current_color == 3:\n                # Check if any adjacent neighbor in the *input* grid is red (2)\n                if check_neighbors(input_array, r, c, 2):\n                    # If yes, change the corresponding pixel in the output grid to azure (8)\n                    output_array[r, c] = 8\n\n            # Check if the current pixel is red (2)\n            elif current_color == 2:\n                # Check if any adjacent neighbor in the *input* grid is green (3)\n                if check_neighbors(input_array, r, c, 3):\n                    # If yes, change the corresponding pixel in the output grid to white (0)\n                    output_array[r, c] = 0\n\n    # Convert the resulting numpy array back to a list of lists for the standard output format\n    output_grid = output_array.tolist()\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2371,
    "candidates_token_count": 808,
    "total_token_count": 3179,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.503961,
  "retries": null
}