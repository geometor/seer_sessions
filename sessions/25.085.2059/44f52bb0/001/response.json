{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nTransformation Rule Natural Language Description:\n\n1. Find all distinct groups of connected red pixels (color 2) in the input grid. Connectivity includes horizontal, vertical, and diagonal neighbors (8-way connectivity).\n2. Count the number of these distinct groups (connected components).\n3. If the number of groups is greater than one, the output is a 1x1 grid containing a single blue pixel (color 1).\n4. If there is exactly one group:\n    a. Isolate the shape formed by the red pixels of this single group, creating a minimal bounding box representation where red pixels are 2 and others are 0.\n    b. Check if this isolated shape possesses any of the following symmetries:\n        i. 180-degree rotational symmetry (looks the same when rotated 180 degrees).\n        ii. Horizontal reflectional symmetry (looks the same when flipped top-to-bottom).\n        iii. Vertical reflectional symmetry (looks the same when flipped left-to-right).\n    c. If the shape has at least one of these symmetries, the output is a 1x1 grid containing a single blue pixel (color 1).\n    d. If the shape has none of these symmetries, the output is a 1x1 grid containing a single orange pixel (color 7).\n\"\"\"\n\ndef find_connected_components(grid, target_color):\n    \"\"\"\n    Finds all connected components of a specified color in a grid using 8-way connectivity.\n\n    Args:\n        grid (np.array): The input grid.\n        target_color (int): The color of the pixels to form components.\n\n    Returns:\n        list: A list of components, where each component is a list of (row, col) tuples.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    components = []\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == target_color and not visited[r, c]:\n                # Start BFS for a new component\n                component = []\n                q = deque([(r, c)])\n                visited[r, c] = True\n\n                while q:\n                    curr_r, curr_c = q.popleft()\n                    component.append((curr_r, curr_c))\n\n                    # Check 8 neighbors (including diagonals)\n                    for dr in [-1, 0, 1]:\n                        for dc in [-1, 0, 1]:\n                            if dr == 0 and dc == 0:\n                                continue # Skip self\n\n                            nr, nc = curr_r + dr, curr_c + dc\n\n                            # Check bounds, target color, and visited status\n                            if 0 <= nr < rows and 0 <= nc < cols and \\\n                               grid[nr, nc] == target_color and not visited[nr, nc]:\n                                visited[nr, nc] = True\n                                q.append((nr, nc))\n                \n                if component:\n                    components.append(component)\n    return components\n\ndef extract_component_shape(grid, component):\n    \"\"\"\n    Extracts the minimal bounding box shape of a component.\n\n    Args:\n        grid (np.array): The original input grid (needed for color).\n        component (list): A list of (row, col) tuples for the component.\n\n    Returns:\n        np.array: A minimal grid representing the component's shape.\n                  Pixels belonging to the component have their original color (usually 2), others are 0.\n    \"\"\"\n    if not component:\n        return np.array([[]])\n\n    rows = [r for r, c in component]\n    cols = [c for r, c in component]\n    \n    min_r, max_r = min(rows), max(rows)\n    min_c, max_c = min(cols), max(cols)\n    \n    height = max_r - min_r + 1\n    width = max_c - min_c + 1\n    \n    shape_grid = np.zeros((height, width), dtype=int)\n    \n    for r, c in component:\n        # Use the original color from the grid, assuming it's the target color\n        shape_grid[r - min_r, c - min_c] = grid[r, c] \n        \n    return shape_grid\n\ndef check_rotational_symmetry_180(shape):\n    \"\"\"Checks for 180-degree rotational symmetry.\"\"\"\n    return np.array_equal(shape, np.rot90(shape, 2))\n\ndef check_horizontal_symmetry(shape):\n    \"\"\"Checks for horizontal reflectional symmetry (flip top-to-bottom).\"\"\"\n    return np.array_equal(shape, np.flipud(shape))\n\ndef check_vertical_symmetry(shape):\n    \"\"\"Checks for vertical reflectional symmetry (flip left-to-right).\"\"\"\n    return np.array_equal(shape, np.fliplr(shape))\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule based on connected components of red pixels and their symmetry.\n\n    Args:\n        input_grid (np.array): The input grid as a NumPy array.\n\n    Returns:\n        np.array: A 1x1 output grid containing either 1 (blue) or 7 (orange).\n    \"\"\"\n    \n    # Convert input list of lists to numpy array if it's not already\n    if not isinstance(input_grid, np.ndarray):\n        input_grid = np.array(input_grid, dtype=int)\n        \n    red_color = 2\n    blue_color = 1\n    orange_color = 7\n\n    # 1. Find connected components of red pixels\n    components = find_connected_components(input_grid, red_color)\n\n    # 2. Count the components\n    num_components = len(components)\n\n    # 3. If more than one component, output blue\n    if num_components > 1:\n        output_grid = np.array([[blue_color]], dtype=int)\n    # 4. If exactly one component, check symmetry\n    elif num_components == 1:\n        # a. Isolate the shape\n        single_component = components[0]\n        shape = extract_component_shape(input_grid, single_component)\n\n        # b. Check symmetries\n        has_rot_sym = check_rotational_symmetry_180(shape)\n        has_hor_sym = check_horizontal_symmetry(shape)\n        has_ver_sym = check_vertical_symmetry(shape)\n\n        # c. If any symmetry exists, output blue\n        if has_rot_sym or has_hor_sym or has_ver_sym:\n            output_grid = np.array([[blue_color]], dtype=int)\n        # d. If no symmetry exists, output orange\n        else:\n            output_grid = np.array([[orange_color]], dtype=int)\n    # Handle the case where there are no red pixels (although not present in examples, good practice)\n    else: \n        # Default or based on further rules if needed. Let's assume blue based on multi-component logic extension.\n        # Or maybe it should be an empty grid or a specific color? The examples don't cover this.\n        # Given the pattern, >1 is blue, 1 with symmetry is blue, 1 without is orange. 0 could be argued as blue (not asymmetric single).\n        # Let's default to blue for now.\n        output_grid = np.array([[blue_color]], dtype=int) \n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2264,
    "candidates_token_count": 1755,
    "total_token_count": 4019,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 19.795075,
  "retries": null
}