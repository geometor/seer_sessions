{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nIdentify the two most frequent colors in the input grid. These colors, and any others with the same frequency count as either of the top two, are considered 'special'. Create the output grid by iterating through the input grid. If a pixel's color is one of the 'special' colors, keep it the same. If a pixel's color is not 'special', change its color to orange (7).\n\"\"\"\n\ndef find_special_colors(grid):\n    \"\"\"\n    Finds the colors with the two highest frequencies in the grid.\n    Includes colors tied for the first or second highest frequency.\n    Handles cases with fewer than two unique colors.\n    \"\"\"\n    # Flatten the grid to get a list of all pixel values\n    pixels = grid.flatten()\n    \n    # Handle empty grid case\n    if pixels.size == 0:\n        return set()\n        \n    # Count occurrences of each color\n    color_counts = Counter(pixels)\n    \n    # If no colors were found (e.g., empty counter from empty grid, though handled above)\n    if not color_counts:\n        return set()\n\n    # Get unique frequency counts and sort them in descending order\n    sorted_unique_counts = sorted(list(set(color_counts.values())), reverse=True)\n    \n    special_colors = set()\n    \n    # Determine the target frequencies (top one or top two)\n    target_frequencies = set()\n    if len(sorted_unique_counts) >= 1:\n        target_frequencies.add(sorted_unique_counts[0]) # Add the highest frequency\n    if len(sorted_unique_counts) >= 2:\n        target_frequencies.add(sorted_unique_counts[1]) # Add the second highest frequency\n        \n    # Collect all colors that have these target frequencies\n    for color, count in color_counts.items():\n        if count in target_frequencies:\n            special_colors.add(color)\n            \n    return special_colors\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on color frequency.\n    Keeps the two most frequent colors (and ties) and changes others to orange (7).\n    \"\"\"\n    # Convert input list of lists to a numpy array for efficient processing\n    input_array = np.array(input_grid, dtype=int)\n    \n    # Handle empty input grid\n    if input_array.size == 0:\n        return []\n        \n    # Find the set of 'special' colors (the two most frequent, including ties)\n    special_colors = find_special_colors(input_array)\n    \n    # Create an output grid, initially as a copy of the input\n    output_array = np.copy(input_array)\n    \n    # Get the dimensions of the grid\n    height, width = input_array.shape\n    \n    # Iterate through each pixel of the grid\n    for r in range(height):\n        for c in range(width):\n            # Get the color of the current pixel\n            current_color = input_array[r, c]\n            \n            # Check if the current color is NOT one of the special colors\n            if current_color not in special_colors:\n                # If it's not special, change its color to orange (7)\n                output_array[r, c] = 7\n                \n    # Convert the resulting numpy array back to a list of lists\n    output_grid = output_array.tolist()\n    \n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1578,
    "candidates_token_count": 804,
    "total_token_count": 2382,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 43.433298,
  "retries": null
}