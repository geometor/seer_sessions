{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid based on color frequency. \n1. Calculate the frequency of each color in the input grid.\n2. Identify the highest frequency count (`max_freq`).\n3. If more than one color shares this `max_freq`, these tied colors are the 'special' colors to keep.\n4. If only one color has the `max_freq`:\n    a. Identify the second highest frequency count (`second_max_freq`).\n    b. The 'special' colors are the unique color with `max_freq` and all colors sharing `second_max_freq`.\n5. Iterate through the input grid. If a pixel's color is 'special', keep it. Otherwise, change it to orange (7).\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef find_special_colors_revised(grid):\n    \"\"\"\n    Finds the 'special' colors to keep based on the revised frequency rules.\n    Handles ties for the highest frequency differently.\n    \"\"\"\n    # Flatten the grid to get a list of all pixel values\n    pixels = grid.flatten()\n    \n    # Handle empty grid case\n    if pixels.size == 0:\n        return set()\n        \n    # Count occurrences of each color\n    color_counts = Counter(pixels)\n    \n    # If no colors were found (e.g., empty counter from empty grid)\n    if not color_counts:\n        return set()\n\n    # Sort colors by frequency in descending order\n    sorted_colors = sorted(color_counts.items(), key=lambda item: item[1], reverse=True)\n\n    # If there are no colors after sorting (should not happen if color_counts is not empty)\n    if not sorted_colors:\n        return set()\n\n    # Find the highest frequency\n    max_freq = sorted_colors[0][1]\n    \n    # Find all colors with the highest frequency\n    colors_with_max_freq = {color for color, count in color_counts.items() if count == max_freq}\n    \n    special_colors = set()\n\n    # Check if there's a tie for the highest frequency\n    if len(colors_with_max_freq) > 1:\n        # Rule 3: Keep only colors tied for the highest frequency\n        special_colors = colors_with_max_freq\n    else:\n        # Rule 4: Unique highest frequency color. Keep it.\n        unique_max_freq_color = sorted_colors[0][0]\n        special_colors.add(unique_max_freq_color)\n        \n        # Find the second highest frequency\n        second_max_freq = 0\n        # Iterate through the sorted list starting from the second element\n        for i in range(1, len(sorted_colors)):\n            current_freq = sorted_colors[i][1]\n            # Find the first frequency that is lower than max_freq\n            if current_freq < max_freq:\n                second_max_freq = current_freq\n                break # Found the second highest frequency value\n        \n        # If a second highest frequency exists (i.e., there are other colors)\n        if second_max_freq > 0:\n            # Find all colors with the second highest frequency\n            colors_with_second_max_freq = {color for color, count in color_counts.items() if count == second_max_freq}\n            # Add them to the special colors\n            special_colors.update(colors_with_second_max_freq)\n            \n    return special_colors\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on the revised color frequency rules.\n    \"\"\"\n    # Convert input list of lists to a numpy array for efficient processing\n    input_array = np.array(input_grid, dtype=int)\n    \n    # Handle empty input grid\n    if input_array.size == 0:\n        return []\n        \n    # Find the set of 'special' colors based on the revised logic\n    special_colors = find_special_colors_revised(input_array)\n    \n    # Create an output grid, initially as a copy of the input\n    output_array = np.copy(input_array)\n    \n    # Define the replacement color\n    replacement_color = 7 # Orange\n    \n    # Get the dimensions of the grid\n    height, width = input_array.shape\n    \n    # Iterate through each pixel of the grid\n    for r in range(height):\n        for c in range(width):\n            # Get the color of the current pixel\n            current_color = input_array[r, c]\n            \n            # Check if the current color is NOT one of the special colors\n            if current_color not in special_colors:\n                # If it's not special, change its color to orange (7)\n                output_array[r, c] = replacement_color\n                \n    # Convert the resulting numpy array back to a list of lists\n    output_grid = output_array.tolist()\n    \n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7086,
    "candidates_token_count": 1146,
    "total_token_count": 8232,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.974596,
  "retries": null
}