{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nSimulates gravity acting independently within each column of the grid. \nNon-white pixels (values 1-9) fall downwards in their respective columns \nuntil they hit the bottom of the grid or another non-white pixel. \nThe relative vertical order of non-white pixels within a column is preserved. \nWhite pixels (value 0) act as empty space.\n\"\"\"\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies gravity to non-white pixels within each column of the grid.\n\n    Args:\n        input_grid: A 2D numpy array representing the input grid.\n\n    Returns:\n        A 2D numpy array representing the output grid after gravity is applied.\n    \"\"\"\n    # Get the dimensions of the input grid\n    height, width = input_grid.shape\n\n    # Initialize the output grid with the same dimensions, filled with white (0)\n    output_grid = np.zeros_like(input_grid)\n\n    # Process each column independently\n    for col_idx in range(width):\n        # Create a list to store the colors of non-white pixels in this column\n        non_white_pixels = []\n\n        # Iterate through the rows of the current column from bottom to top\n        # to collect non-white pixels in their bottom-up order\n        for row_idx in range(height - 1, -1, -1):\n            pixel_color = input_grid[row_idx, col_idx]\n            # If the pixel is non-white, add its color to the list\n            if pixel_color != 0:\n                non_white_pixels.append(pixel_color)\n\n        # Place the collected non-white pixels at the bottom of the \n        # corresponding column in the output grid, maintaining their order.\n        # Iterate through the collected pixels (which are in bottom-up order)\n        for i, color in enumerate(non_white_pixels):\n            # Calculate the target row index in the output grid, starting from the bottom\n            target_row = height - 1 - i\n            # Place the color in the output grid\n            output_grid[target_row, col_idx] = color\n            \n            # Check if we have filled all available spots from the bottom\n            if target_row < 0:\n                 # This case should ideally not happen if grid dimensions are valid\n                 # and the logic is correct, but serves as a safeguard.\n                 print(f\"Warning: Exceeded grid bounds in column {col_idx}\")\n                 break \n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2271,
    "candidates_token_count": 585,
    "total_token_count": 2856,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 21.391405,
  "retries": null
}