elements:
  - role: input_grid
    description: A 2D grid of pixels with height H and width W.
  - role: cross
    description: An object within the input grid composed of a single horizontal line spanning width W and a single vertical line spanning height H.
    properties:
      - color: A single color C_cross, consistent for both lines.
      - location: The lines intersect at a central point (r_cross, c_cross).
      - function: Divides the grid into four quadrants (excluding the cross lines themselves).
  - role: background
    description: The pixels filling the quadrants, not part of the cross or the unique pixel.
    properties:
      - color: A single color C_bg, distinct from C_cross.
  - role: unique_pixel
    description: A single pixel within the input grid.
    properties:
      - color: A single color C_unique, distinct from C_cross and C_bg.
      - count: Exactly one pixel of this color exists in the grid.
      - location: Resides within one of the four quadrants defined by the cross at coordinates (r_unique, c_unique).
  - role: output_grid
    description: A 2D grid of pixels, representing a subgrid of the input_grid.
    properties:
      - content: Matches the pixels of the input_grid quadrant containing the unique_pixel.
      - size: Determined by the dimensions of the quadrant containing the unique_pixel.

relationships:
  - type: identifies
    subject: cross
    object: quadrants
    details: The horizontal line at r_cross and vertical line at c_cross define the boundaries between the top-left, top-right, bottom-left, and bottom-right quadrants.
  - type: determines
    subject: unique_pixel
    object: output_grid
    details: The location (quadrant) of the unique_pixel dictates which quadrant subgrid from the input becomes the output_grid.

actions:
  - step: 1
    action: Identify_Cross
    inputs: input_grid
    outputs: r_cross, c_cross, C_cross
    description: Find the row index (r_cross) of the full horizontal line and the column index (c_cross) of the full vertical line, and their color (C_cross).
  - step: 2
    action: Identify_Unique_Pixel
    inputs: input_grid, C_cross
    outputs: r_unique, c_unique, C_unique
    description: Find the coordinates (r_unique, c_unique) and color (C_unique) of the pixel whose color appears exactly once and is not C_cross.
  - step: 3
    action: Determine_Quadrant
    inputs: r_cross, c_cross, r_unique, c_unique
    outputs: quadrant_boundaries
    description: Compare (r_unique, c_unique) with (r_cross, c_cross) to determine which quadrant the unique pixel is in (top-left, top-right, bottom-left, bottom-right) and calculate the row/column boundaries of that quadrant.
      - Top-Left: [0, r_cross), [0, c_cross)
      - Top-Right: [0, r_cross), [c_cross + 1, W)
      - Bottom-Left: [r_cross + 1, H), [0, c_cross)
      - Bottom-Right: [r_cross + 1, H), [c_cross + 1, W)
  - step: 4
    action: Extract_Subgrid
    inputs: input_grid, quadrant_boundaries
    outputs: output_grid
    description: Extract the subgrid from the input_grid defined by the calculated quadrant_boundaries.