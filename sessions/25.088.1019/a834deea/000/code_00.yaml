Grid_Properties:
  - BackgroundColor: 8 (azure)
  - ActiveRegionColor1: 0 (white)
  - ActiveRegionColor2: 8 (azure)
  - TransformationColors: [1, 2, 3, 4, 5, 6, 7, 9] # blue, red, green, yellow, gray, magenta, orange, maroon

Objects:
  - Type: Background/Border
    Color: 8 (azure)
    Location: Typically forms the outer edges, sometimes fills larger areas.
    Persistence: Generally static, does not change during transformation.
  - Type: ActiveRegionBoundary
    Color: 0 (white)
    Location: Encloses areas containing patterns of color 8.
    Persistence: Mostly static, but can be modified if part of a recognized 3x3 pattern.
  - Type: PatternElement
    Color: 8 (azure)
    Location: Forms structures within the ActiveRegionBoundary (color 0).
    Persistence: Can be modified if part of a recognized 3x3 pattern.
  - Type: PatternElement
    Color: 0 (white)
    Location: Fills space within the ActiveRegionBoundary, surrounding color 8 elements.
    Persistence: Can be modified to other colors (1-7, 9) if part of a recognized 3x3 pattern.

Relationships:
  - The ActiveRegionBoundary (0) encloses PatternElements (0 and 8).
  - The Background/Border (8) typically surrounds the ActiveRegionBoundary (0).

Actions:
  - Identify: Scan the input grid for all possible 3x3 subgrids.
  - Filter: Select only those 3x3 subgrids composed entirely of pixels with colors 0 (white) or 8 (azure).
  - Match: Compare each selected 3x3 subgrid (InputPattern) against a predefined set of known patterns.
  - Transform: If an InputPattern matches a known pattern:
      - Retrieve the corresponding output modification rules for that pattern.
      - These rules specify which pixels relative to the center of the 3x3 subgrid should be changed and to which new color.
      - Apply these changes to a copy of the input grid. Pixels outside matched patterns, the background border, and unchanged pixels within patterns remain the same.

Pattern_Map (Derived from examples):
  - Pattern1: Input=[[0,0,0],[0,8,0],[0,0,0]] -> Changes={(-1,-1):1, (-1,0):7, (-1,+1):6, (0,-1):4, (0,0):8, (0,+1):5, (+1,-1):2, (+1,0):9, (+1,+1):3}
  - Pattern2: Input=[[8,0,8],[0,0,0],[8,0,8]] -> Changes={(-1,0):7, (0,-1):4, (0,+1):5, (+1,0):9}
  - Pattern3: Input=[[0,8,8],[0,0,8],[0,8,8]] -> Changes={(-1,-1):1, (0,-1):4, (+1,-1):2}
  - Pattern4: Input=[[8,8,8],[8,8,8],[8,8,8]] -> Changes={(0,-1):4, (0,+1):9, (+1,-1):2, (+1,0):9}
  - Pattern5: Input=[[8,8,8],[0,0,0],[8,0,8]] -> Changes={(0,-1):4, (0,+1):9}
  - Pattern6: Input=[[8,8,0],[0,0,0],[8,8,8]] -> Changes={(-1,+1):6, (0,-1):4, (0,+1):5}
  # Note: Coordinates in Changes are (relative_row, relative_col) from the center of the 3x3 pattern.