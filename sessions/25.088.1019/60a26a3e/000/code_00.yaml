task_description: Add blue lines connecting the centers of aligned red shapes.
elements:
  - element_type: background
    color: white (0)
  - element_type: object
    color: red (2)
    description: Contiguous shapes made of red pixels. These are the primary input objects.
    properties:
      - shape: Variable, often resembling a plus sign.
      - center: Geometric center (average row/column index) of the pixels in the shape.
      - bounding_box: Minimum rectangle enclosing the shape.
  - element_type: added_object
    color: blue (1)
    description: Straight lines (horizontal or vertical) added in the output.
    properties:
      - location: Positioned in the white space between pairs of red shapes.
      - alignment: Connects the centers of red shapes that share either the same row or the same column index.
      - extent: Fills the gap exactly between the bounding boxes of the connected shapes along the line connecting their centers.
relationships:
  - type: alignment
    description: Pairs of red shapes are identified based on whether their centers share the same row index (horizontal alignment) or the same column index (vertical alignment).
  - type: connection
    description: Aligned pairs of red shapes are connected by a blue line segment.
    conditions:
      - The line is drawn along the shared row/column index of the centers.
      - The line fills the white space between the bounding boxes of the two shapes.
transformation:
  - action: identify_objects
    input: input grid
    output: list of red shapes (coordinates, center, bounding box)
  - action: find_pairs
    input: list of red shapes
    output: pairs of shapes aligned horizontally (same center row) and vertically (same center column)
  - action: draw_lines
    input: aligned pairs, input grid
    output: new grid with blue lines added
    details:
      - For horizontal pairs (ShapeA, ShapeB) on row 'r' with centers (r, cA) and (r, cB), fill pixels (r, c) with blue where max_col(ShapeA) < c < min_col(ShapeB).
      - For vertical pairs (ShapeA, ShapeB) in column 'c' with centers (rA, c) and (rB, c), fill pixels (r, c) with blue where max_row(ShapeA) < r < min_row(ShapeB).
  - action: combine
    input: input grid, grid with blue lines
    output: final output grid (overlaying blue lines onto input grid)
