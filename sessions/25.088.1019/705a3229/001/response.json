{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nDraw L-shaped lines from each non-white pixel to its two nearest cardinal edges.\nThe vertical segment extends from the pixel's row to the nearest horizontal edge (top or bottom).\nThe horizontal segment extends from the pixel's column to the nearest vertical edge (left or right).\nIf distances to opposite edges are equal, the top/left edge is chosen.\nThe lines inherit the color of the source pixel.\nIf multiple source pixels exist, their resulting L-shapes are overlaid on the output grid.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by drawing L-shaped lines from each non-white pixel\n    towards the two nearest cardinal edges.\n\n    Args:\n        input_grid (list of lists): A 2D list representing the input grid.\n\n    Returns:\n        list of lists: A 2D list representing the transformed output grid.\n    \"\"\"\n    # Convert input list of lists to a NumPy array for easier manipulation\n    input_array = np.array(input_grid, dtype=int)\n    H, W = input_array.shape\n\n    # Initialize the output grid with the background color (white, 0)\n    output_array = np.zeros_like(input_array)\n\n    # Find the coordinates and colors of all non-white source pixels\n    source_pixels = []\n    for r in range(H):\n        for c in range(W):\n            color = input_array[r, c]\n            if color != 0:\n                source_pixels.append(((r, c), color))\n\n    # Process each source pixel\n    for (r, c), color in source_pixels:\n        # Determine the nearest horizontal edge (top or bottom)\n        dist_top = r\n        dist_bottom = H - 1 - r\n        if dist_top <= dist_bottom:\n            r_target = 0  # Target is the top edge\n        else:\n            r_target = H - 1 # Target is the bottom edge\n\n        # Determine the nearest vertical edge (left or right)\n        dist_left = c\n        dist_right = W - 1 - c\n        if dist_left <= dist_right:\n            c_target = 0  # Target is the left edge\n        else:\n            c_target = W - 1 # Target is the right edge\n\n        # Draw the vertical line segment in the output array\n        # Ensure correct slicing regardless of whether r or r_target is smaller\n        row_start = min(r, r_target)\n        row_end = max(r, r_target)\n        output_array[row_start : row_end + 1, c] = color\n\n        # Draw the horizontal line segment in the output array\n        # Ensure correct slicing regardless of whether c or c_target is smaller\n        col_start = min(c, c_target)\n        col_end = max(c, c_target)\n        output_array[r, col_start : col_end + 1] = color\n\n    # Convert the final NumPy array back to a list of lists\n    output_grid = output_array.tolist()\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4433,
    "candidates_token_count": 721,
    "total_token_count": 5154,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.245006,
  "retries": null
}