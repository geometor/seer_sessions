{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nIdentify all unique pixels in the input grid whose colors are not white (0), red (2), or yellow (4). Record these colors in a list ('fill_colors') in the order they are first encountered when scanning the grid top-to-bottom, left-to-right.\nIdentify all distinct, contiguous, vertical segments composed only of red (2) pixels. Store each segment's column index, start row, and end row.\nSort these red line segments first by their start row index (ascending) and then by their column index (ascending).\nIterate through the sorted red line segments and the 'fill_colors' list simultaneously. For the i-th segment, use the i-th fill color.\nFor each red segment, change the color of the pixels immediately to its right (in the column col+1) for all rows spanned by the segment, using the corresponding fill color. All other pixels remain unchanged.\n\"\"\"\n\ndef find_fill_colors(grid):\n    \"\"\"\n    Finds unique fill colors (not 0, 2, or 4) in scan order.\n    \"\"\"\n    fill_colors = []\n    seen_colors = set()\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            color = grid[r, c]\n            if color not in {0, 2, 4} and color not in seen_colors:\n                fill_colors.append(color)\n                seen_colors.add(color)\n    return fill_colors\n\ndef find_red_segments(grid):\n    \"\"\"\n    Finds all vertical red (2) segments and returns them as a list of tuples:\n    (column, start_row, end_row).\n    \"\"\"\n    rows, cols = grid.shape\n    segments = []\n    visited = np.zeros_like(grid, dtype=bool)\n\n    for r in range(rows):\n        for c in range(cols):\n            # Check if the cell is red and not yet part of a found segment\n            if grid[r, c] == 2 and not visited[r, c]:\n                # Found the potential start of a vertical segment\n                start_row = r\n                end_row = r\n                # Explore downwards to find the end of the segment\n                while end_row + 1 < rows and grid[end_row + 1, c] == 2:\n                    end_row += 1\n                \n                # Mark the cells of this segment as visited\n                for row_idx in range(start_row, end_row + 1):\n                    visited[row_idx, c] = True\n                \n                # Store the segment information\n                segments.append({'col': c, 'start_row': start_row, 'end_row': end_row})\n                \n    # Sort segments primarily by start_row, secondarily by col\n    segments.sort(key=lambda s: (s['start_row'], s['col']))\n    return segments\n\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule based on red lines and fill colors.\n    \"\"\"\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # 1. Find fill colors in scan order\n    fill_colors = find_fill_colors(input_grid)\n\n    # 2. Find vertical red segments\n    red_segments = find_red_segments(input_grid)\n\n    # 3. Associate segments with fill colors and modify the output grid\n    num_segments = len(red_segments)\n    num_colors = len(fill_colors)\n\n    for i in range(min(num_segments, num_colors)): # Process only pairs we have colors for\n        segment = red_segments[i]\n        fill_color = fill_colors[i]\n\n        col = segment['col']\n        start_row = segment['start_row']\n        end_row = segment['end_row']\n\n        # Check if the column to the right is within grid bounds\n        target_col = col + 1\n        if target_col < cols:\n            # Modify the pixels to the right of the segment\n            for r in range(start_row, end_row + 1):\n                 # Only modify if the target cell exists (redundant check with target_col < cols but safe)\n                 if r < rows:\n                    # Apply the fill color to the pixel immediately right of the red segment\n                    output_grid[r, target_col] = fill_color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4186,
    "candidates_token_count": 1050,
    "total_token_count": 5236,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.492151,
  "retries": null
}