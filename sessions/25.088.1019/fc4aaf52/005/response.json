{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter, deque\n\n\"\"\"\nIdentifies the single non-background object in the input grid.\nCreates a new grid based on the input grid.\nErases the original object from the new grid by replacing its pixels with the background color.\nCopies the original object, preserving its colors and structure, onto the new grid such that its leftmost column is positioned \none column to the right of the original object's rightmost column.\nThe vertical position remains unchanged. Pixels shifted outside the grid boundary are discarded.\n\"\"\"\n\ndef find_background_color(grid):\n    \"\"\"Finds the most frequent color in the grid, assumed to be the background.\"\"\"\n    # Use Counter for efficiency\n    counts = Counter(grid.flatten())\n    # Handle empty or single-color grids\n    if not counts:\n        return 0 # Default background\n    # Background is the most frequent color\n    background_color = counts.most_common(1)[0][0]\n    return background_color\n\ndef find_connected_object(grid, start_r, start_c, background_color, visited):\n    \"\"\"Finds all connected non-background pixels starting from (start_r, start_c) using BFS.\"\"\"\n    rows, cols = grid.shape\n    # Use deque for efficient queue operations\n    q = deque([(start_r, start_c)])\n    object_coords = set()\n    \n    # Check if starting point is valid and not background\n    if not (0 <= start_r < rows and 0 <= start_c < cols) or grid[start_r, start_c] == background_color:\n        return object_coords # Return empty set if start is invalid or background\n\n    while q:\n        r, c = q.popleft() # Use popleft for BFS\n\n        # Boundary and visited checks\n        if not (0 <= r < rows and 0 <= c < cols) or (r, c) in visited:\n            continue\n        \n        # Check if current pixel is part of the object (not background)\n        if grid[r, c] == background_color:\n            continue\n\n        # Mark as visited and add to object coordinates\n        visited.add((r, c))\n        object_coords.add((r, c))\n\n        # Explore neighbors (4-connectivity: up, down, left, right)\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n            # Add valid, unvisited neighbors that are not background to the queue\n            if 0 <= nr < rows and 0 <= nc < cols and (nr, nc) not in visited and grid[nr, nc] != background_color:\n                 q.append((nr, nc))\n\n    return object_coords\n\n\ndef find_the_object(grid, background_color):\n    \"\"\"Finds the single non-background object in the grid.\"\"\"\n    rows, cols = grid.shape\n    visited = set()\n    # Iterate through grid to find the first non-background pixel\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != background_color and (r, c) not in visited:\n                # Found the start of an object, find all connected parts\n                object_coords = find_connected_object(grid, r, c, background_color, visited)\n                # Assuming only one object per task description\n                if object_coords: \n                    return object_coords\n    # Return None if no non-background object is found\n    return None\n\n\ndef get_object_properties(object_coords):\n    \"\"\"Calculates bounding box of the object.\"\"\"\n    if not object_coords:\n        return None, None, None, None\n\n    # Extract row and column coordinates\n    rows = [r for r, c in object_coords]\n    cols = [c for r, c in object_coords]\n\n    # Calculate bounding box limits\n    min_row, max_row = min(rows), max(rows)\n    min_col, max_col = min(cols), max(cols)\n    \n    return min_row, max_row, min_col, max_col\n\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule: find object, erase original, \n    place an identical copy (preserving colors) immediately to the right.\n    \"\"\"\n    # Convert input list of lists to a NumPy array for efficient manipulation\n    grid = np.array(input_grid, dtype=int)\n    rows, cols = grid.shape\n\n    # 1. Identify the background color (most frequent color)\n    background_color = find_background_color(grid)\n\n    # 2. Find the single connected non-background object\n    object_coords = find_the_object(grid, background_color)\n\n    # If no object is found (e.g., grid is all background), return the original grid\n    if not object_coords:\n        return input_grid\n\n    # 3. Determine object boundaries (bounding box)\n    min_row, max_row, min_col, max_col = get_object_properties(object_coords)\n\n    # 4. Calculate the horizontal shift required to place the copy\n    # The new copy's minimum column (left edge) should be one column past the original's maximum column\n    new_copy_min_col = max_col + 1\n    # The shift amount is the difference between the new start column and the original start column\n    shift = new_copy_min_col - min_col\n\n    # 5. Initialize the output grid as a copy of the input grid\n    output_grid = np.copy(grid)\n\n    # 6. Erase the original object from the output grid\n    # Iterate through the coordinates of the original object\n    for r, c in object_coords:\n        # Set the corresponding pixel in the output grid to the background color\n        output_grid[r, c] = background_color\n\n    # 7. Draw the shifted copy onto the output grid, preserving original colors\n    # Iterate through the coordinates of the original object again\n    for r, c in object_coords:\n        # Get the original color of the pixel from the *input* grid\n        original_color = grid[r, c] \n        \n        # Calculate the destination coordinates for the copied pixel\n        r_dest, c_dest = r, c + shift\n\n        # Check if the destination coordinates are within the grid boundaries\n        if 0 <= r_dest < rows and 0 <= c_dest < cols:\n            # Set the pixel at the destination in the output grid to the original color\n            output_grid[r_dest, c_dest] = original_color\n        # else: If the copied pixel falls outside the grid, it's simply not drawn\n\n    # Convert the final NumPy array output grid back to a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7421,
    "candidates_token_count": 1578,
    "total_token_count": 8999,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 17.304009,
  "retries": null
}