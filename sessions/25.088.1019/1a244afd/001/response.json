{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport math\n\n\"\"\"\nTransforms the input grid according to the following rules:\n1. Identify all Magenta (6) and Blue (1) pixels.\n2. For each Magenta pixel (M), find the Blue pixel (B) closest to it using Manhattan distance.\n3. Calculate the vector V from M to B (V = B - M).\n4. Determine a new target coordinate (O) relative to B based on a rotation of V:\n    - If V is horizontal (change in row is 0), rotate V 90 degrees counter-clockwise to get V'. O = B + V'.\n    - If V is vertical (change in column is 0), rotate V 90 degrees clockwise to get V'. O = B + V'.\n5. Create the output grid by copying the input grid.\n6. In the output grid, change the color of the original Magenta pixel M to Azure (8).\n7. If the calculated target coordinate O is within the grid boundaries, change the color of the pixel at O in the output grid to Orange (7).\n\"\"\"\n\ndef find_pixels(grid, color):\n    \"\"\"Finds all pixels of a specific color in the grid.\"\"\"\n    points = []\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] == color:\n                points.append((r, c))\n    return points\n\ndef manhattan_distance(p1, p2):\n    \"\"\"Calculates the Manhattan distance between two points (r1, c1) and (r2, c2).\"\"\"\n    return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n    \"\"\"\n    # Convert input list of lists to a numpy array for easier manipulation\n    grid = np.array(input_grid, dtype=int)\n    output_grid = np.copy(grid)\n    height, width = grid.shape\n\n    # Find coordinates of Magenta (6) and Blue (1) pixels\n    magenta_pixels = find_pixels(grid, 6)\n    blue_pixels = find_pixels(grid, 1)\n\n    # If there are no magenta or no blue pixels, no transformation happens beyond removing magenta\n    if not magenta_pixels or not blue_pixels:\n        for mr, mc in magenta_pixels:\n             # Change original magenta location to background color (8) in output\n            output_grid[mr, mc] = 8\n        return output_grid.tolist()\n\n\n    orange_coords_to_place = []\n\n    # Process each Magenta pixel\n    for mr, mc in magenta_pixels:\n        m_pos = (mr, mc)\n\n        # Find the closest Blue pixel\n        min_dist = float('inf')\n        closest_blue = None\n        for br, bc in blue_pixels:\n            b_pos = (br, bc)\n            dist = manhattan_distance(m_pos, b_pos)\n            if dist < min_dist:\n                min_dist = dist\n                closest_blue = b_pos\n\n        # If a closest blue was found (should always happen if blue_pixels is not empty)\n        if closest_blue:\n            br_c, bc_c = closest_blue\n\n            # Calculate the vector V from M to B_closest\n            dr = br_c - mr\n            dc = bc_c - mc\n\n            # Determine the target coordinate O based on V's rotation\n            or_target, oc_target = -1, -1 # Initialize with invalid coordinates\n\n            # Check if vector is purely horizontal\n            if dr == 0 and dc != 0:\n                # Rotate 90 degrees counter-clockwise: V' = (0, dc)\n                # O = B + V' = (br_c + 0, bc_c + dc)\n                or_target, oc_target = br_c, bc_c + dc\n            # Check if vector is purely vertical\n            elif dc == 0 and dr != 0:\n                # Rotate 90 degrees clockwise: V' = (dr, 0)\n                # O = B + V' = (br_c + dr, bc_c + 0)\n                or_target, oc_target = br_c + dr, bc_c\n\n            # Check if the target Orange coordinate is within grid bounds\n            if 0 <= or_target < height and 0 <= oc_target < width:\n                 orange_coords_to_place.append((or_target, oc_target))\n\n        # Change original magenta location to background color (8) in output\n        # Do this regardless of whether a valid orange target was found\n        output_grid[mr, mc] = 8\n\n\n    # Place the Orange (7) pixels at the calculated valid coordinates\n    for or_coord, oc_coord in orange_coords_to_place:\n        output_grid[or_coord, oc_coord] = 7\n\n    # Convert the result back to a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4544,
    "candidates_token_count": 1167,
    "total_token_count": 5711,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 178.581069,
  "retries": null
}