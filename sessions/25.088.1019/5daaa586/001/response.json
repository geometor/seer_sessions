{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nIdentify the row indices of the two horizontal lines and the column indices of the two vertical lines in the input grid. \nA line is characterized by a row or column that consists predominantly (>50%) of a single non-white color and spans the grid's dimension.\nDetermine the bounding box defined by these lines: top_row = min(horizontal_indices), bottom_row = max(horizontal_indices), \nleft_col = min(vertical_indices), right_col = max(vertical_indices).\nExtract the subgrid from the input grid corresponding to this bounding box (inclusive).\n\"\"\"\n\ndef _find_lines(grid):\n    \"\"\"\n    Identifies the indices of the two horizontal and two vertical lines.\n\n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        tuple: A tuple containing two lists: (horizontal_line_indices, vertical_line_indices).\n               Returns None if exactly two of each are not found.\n    \"\"\"\n    height, width = grid.shape\n    horizontal_lines = []\n    vertical_lines = []\n    \n    # Check rows for horizontal lines\n    for r in range(height):\n        row = grid[r, :]\n        # Count non-white pixels\n        non_white_count = np.sum(row != 0)\n        # Require a significant portion to be non-white\n        if non_white_count > width / 2: \n            counts = Counter(c for c in row if c != 0)\n            # Check if one non-white color is dominant\n            if counts:\n                most_common_color, count = counts.most_common(1)[0]\n                # Check if this most common non-white color makes up most of the non-white pixels\n                # Or simply check if it's the majority of the whole row\n                if count > width / 2: \n                    horizontal_lines.append(r)\n\n    # Check columns for vertical lines\n    for c in range(width):\n        col = grid[:, c]\n         # Count non-white pixels\n        non_white_count = np.sum(col != 0)\n        # Require a significant portion to be non-white\n        if non_white_count > height / 2:\n            counts = Counter(p for p in col if p != 0)\n            # Check if one non-white color is dominant\n            if counts:\n                most_common_color, count = counts.most_common(1)[0]\n                 # Check if this most common non-white color makes up most of the non-white pixels\n                 # Or simply check if it's the majority of the whole column\n                if count > height / 2:\n                    vertical_lines.append(c)\n\n    # Validate that we found exactly two of each type\n    if len(horizontal_lines) == 2 and len(vertical_lines) == 2:\n        return horizontal_lines, vertical_lines\n    else:\n        # This case shouldn't happen based on the problem description, but good practice\n        print(f\"Warning: Found {len(horizontal_lines)} horizontal and {len(vertical_lines)} vertical lines. Expected 2 of each.\")\n        # Attempt to return if possible, otherwise signal error maybe?\n        # For now, let's be strict as per the observed pattern.\n        if len(horizontal_lines) >= 2 and len(vertical_lines) >= 2:\n             # If more than 2 found, perhaps take the first two? Or based on intensity?\n             # Let's stick to the strict interpretation first. If tests fail, reconsider.\n             pass # Fall through to return None or raise error if strictness is desired\n        return None # Indicate failure to find exactly two of each\n\ndef transform(input_grid):\n    \"\"\"\n    Extracts a subgrid defined by the bounding box formed by two horizontal \n    and two vertical lines present in the input grid.\n    \"\"\"\n    input_grid_np = np.array(input_grid)\n\n    # 1. Identify Lines\n    lines_info = _find_lines(input_grid_np)\n    if lines_info is None:\n        # Handle error case: lines not found as expected\n        # Based on examples, this shouldn't occur. If it does, the assumptions are wrong.\n        # Returning the input or an empty grid might be options depending on requirements.\n        print(\"Error: Could not find exactly two horizontal and two vertical lines.\")\n        return np.array([[]]) # Return empty grid as placeholder for error\n\n    horizontal_indices, vertical_indices = lines_info\n    \n    # 2. Determine Boundaries\n    top_row = min(horizontal_indices)\n    bottom_row = max(horizontal_indices)\n    left_col = min(vertical_indices)\n    right_col = max(vertical_indices)\n\n    # 3. Extract Subgrid\n    # Slicing is exclusive of the end index, so add 1\n    output_grid = input_grid_np[top_row : bottom_row + 1, left_col : right_col + 1]\n\n    return output_grid.tolist() # Convert back to list of lists if required by framework\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4431,
    "candidates_token_count": 1186,
    "total_token_count": 5617,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 96.373876,
  "retries": null
}