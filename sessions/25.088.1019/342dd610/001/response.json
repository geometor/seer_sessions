{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransformation Rule:\n1. Create the output grid as a copy of the input grid.\n2. Identify the background color (azure, 8).\n3. Find all pixels in the input grid that are *not* the background color (foreground pixels). Record their positions (row, column) and their color. Assume all these foreground pixels have the same color.\n4. Determine the shift amount (delta_row, delta_col) based on the foreground color:\n    - Orange (7): (-2, 0) (Up 2)\n    - Red (2): (0, -2) (Left 2)\n    - Maroon (9): (+2, 0) (Down 2)\n    - Blue (1): (0, +1) (Right 1)\n5. Iterate through the original positions of the foreground pixels.\n6. For each original position (row, col):\n    a. Set the pixel at (row, col) in the output grid to the background color (azure, 8).\n    b. Calculate the new position: new_row = row + delta_row, new_col = col + delta_col.\n    c. Set the pixel at (new_row, new_col) in the output grid to the foreground color.\n7. Return the final output grid.\n\"\"\"\n\ndef find_foreground_pixels(grid, background_color):\n    \"\"\"Finds all pixels not matching the background color.\"\"\"\n    foreground_pixels = []\n    foreground_color = -1 # Sentinel value\n    coords = np.argwhere(grid != background_color)\n    if coords.size > 0:\n        foreground_color = grid[coords[0, 0], coords[0, 1]]\n        for r, c in coords:\n            foreground_pixels.append(((r, c), foreground_color))\n    return foreground_pixels, foreground_color\n\ndef determine_shift(color):\n    \"\"\"Determines the (delta_row, delta_col) shift based on color.\"\"\"\n    if color == 7:  # orange\n        return (-2, 0)\n    elif color == 2:  # red\n        return (0, -2)\n    elif color == 9:  # maroon\n        return (+2, 0)\n    elif color == 1:  # blue\n        return (0, +1)\n    else:\n        # Default shift if color not recognized (or no foreground found)\n        return (0, 0) \n\ndef transform(input_grid):\n    \"\"\"\n    Shifts foreground pixels within a grid based on their color.\n    The background color (azure, 8) remains static, filling the original\n    positions of the moved foreground pixels.\n    \"\"\"\n    # Convert input list of lists to numpy array for easier manipulation\n    input_grid_np = np.array(input_grid, dtype=int)\n    \n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid_np)\n    \n    # Define the background color\n    background_color = 8\n    \n    # Find all foreground pixels and their color\n    foreground_pixels, foreground_color = find_foreground_pixels(input_grid_np, background_color)\n\n    # If no foreground pixels are found, return the original grid\n    if not foreground_pixels:\n        return output_grid.tolist() # Convert back to list of lists\n\n    # Determine the shift based on the foreground color\n    delta_row, delta_col = determine_shift(foreground_color)\n\n    # Store the new positions before modifying the grid\n    new_positions = []\n    for (r, c), color in foreground_pixels:\n        new_row = r + delta_row\n        new_col = c + delta_col\n        new_positions.append(((new_row, new_col), color))\n\n    # Clear the original positions of foreground pixels in the output grid\n    for (r, c), _ in foreground_pixels:\n         # Check bounds just in case, although not strictly necessary if input follows pattern\n        if 0 <= r < output_grid.shape[0] and 0 <= c < output_grid.shape[1]:\n           output_grid[r, c] = background_color\n\n    # Place the foreground pixels at their new positions in the output grid\n    for (new_r, new_c), color in new_positions:\n        # Check if the new position is within the grid boundaries\n        if 0 <= new_r < output_grid.shape[0] and 0 <= new_c < output_grid.shape[1]:\n            output_grid[new_r, new_c] = color\n        # else: # Handle cases where pixels move off-grid if necessary (not seen in examples)\n        #     pass \n\n    # Return the modified grid as a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3724,
    "candidates_token_count": 1110,
    "total_token_count": 4834,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.492708,
  "retries": null
}