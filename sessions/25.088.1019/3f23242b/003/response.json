{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransforms the input grid based on the locations of green pixels (3).\nThe transformation involves two main stages applied sequentially:\n\n1.  **Initial Row Fill**:\n    *   Identify all unique rows that are exactly 2 rows below any green pixel in the input grid.\n    *   For each such identified row, fill the entire row in the output grid with Red pixels (color 2).\n\n2.  **Pattern Application**:\n    *   For each green pixel found in the input grid (at `r_center`, `c_center`):\n        *   Apply a fixed 5-row high pattern onto the output grid, conceptually centered at (`r_center`, `c_center`).\n        *   The pattern is defined by relative coordinates (`dr`, `dc`) and specific colors (Gray=5, Red=2, Green=3, Azure=8).\n        *   The pattern definition:\n            *   Row dr=-2: Gray pixels from dc=-2 to dc=+2.\n            *   Row dr=-1: Red at dc=-2, Gray at dc=0, Red at dc=+2.\n            *   Row dr=0:  Red at dc=-2, Green at dc=0, Red at dc=+2.\n            *   Row dr=+1: Red at dc=-2 and dc=+2.\n            *   Row dr=+2: Red at dc=-4,-3, Azure from dc=-2 to dc=+2, Red at dc=+3,+4,+5.\n        *   When applying the pattern, calculate the absolute coordinates (`target_r = r_center + dr`, `target_c = c_center + dc`).\n        *   If the absolute coordinates are within the grid boundaries, place the pattern's color at that location in the output grid.\n        *   This pattern application overwrites any pixels previously placed, including the initial Red fill from Stage 1 (specifically where `dr=+2` pattern elements fall) and any pixels from patterns centered on other green pixels.\n\nThe final output grid reflects the result after both stages are completed for all green pixels.\n\"\"\"\n\n\ndef transform(input_grid):\n    \"\"\"\n    Applies a pattern centered on each green pixel, first filling the 'dr=+2'\n    rows with red, then drawing the specific patterns.\n\n    Args:\n        input_grid (list of lists of int): The input grid.\n\n    Returns:\n        list of lists of int: The transformed grid.\n    \"\"\"\n    # Convert input grid to numpy array for easier handling\n    input_np = np.array(input_grid, dtype=int)\n    height, width = input_np.shape\n\n    # Initialize output grid with white pixels (0)\n    output_np = np.zeros_like(input_np)\n\n    # Find coordinates of all green pixels (color 3)\n    green_pixels = np.argwhere(input_np == 3)\n\n    # Define the full pattern as a dictionary: { (relative_row, relative_col): color }\n    # This defines the specific shape to be drawn centered on each green pixel.\n    pattern_map = {\n        # Row -2 relative to green center\n        (-2, -2): 5, (-2, -1): 5, (-2, 0): 5, (-2, 1): 5, (-2, 2): 5,\n        # Row -1 relative to green center\n        (-1, -2): 2, (-1, 0): 5, (-1, 2): 2,\n        # Row 0 (at green center)\n        (0, -2): 2, (0, 0): 3, (0, 2): 2,\n        # Row +1 relative to green center\n        (1, -2): 2, (1, 2): 2,\n        # Row +2 relative to green center\n        (2, -4): 2, (2, -3): 2, (2, -2): 8, (2, -1): 8, (2, 0): 8,\n        (2, 1): 8, (2, 2): 8, (2, 3): 2, (2, 4): 2, (2, 5): 2,\n    }\n\n    # --- Stage 1: Initial Red Fill for all 'dr=+2' rows ---\n    # Identify all unique row indices that correspond to r_center + 2\n    # for any green pixel, ensuring they are within grid height.\n    dr_plus_2_rows = set()\n    for r_center, c_center in green_pixels:\n        target_r = r_center + 2\n        if 0 <= target_r < height:\n            dr_plus_2_rows.add(target_r)\n\n    # Fill these identified rows entirely with Red (2) in the output grid.\n    # This provides the background for the dr=+2 pattern row extension.\n    for row_idx in dr_plus_2_rows:\n        output_np[row_idx, :] = 2\n\n    # --- Stage 2: Apply the specific pattern for each green pixel ---\n    # Iterate through each green pixel found in the input\n    for r_center, c_center in green_pixels:\n        # Apply the full pattern defined in pattern_map, centered at this green pixel\n        for (dr, dc), color in pattern_map.items():\n            # Calculate absolute target coordinates in the output grid\n            target_r = r_center + dr\n            target_c = c_center + dc\n\n            # Check if the calculated coordinates are within the grid boundaries\n            if 0 <= target_r < height and 0 <= target_c < width:\n                # Place the pattern pixel onto the output grid.\n                # This overwrites any existing pixel, including the initial Red fill\n                # from Stage 1 where dr=+2 pattern elements fall, and handles\n                # overlaps between patterns from different green centers correctly\n                # due to the sequential processing and overwrite nature.\n                output_np[target_r, target_c] = color\n\n    # Convert the final output numpy array back to a standard list of lists\n    output_grid = output_np.tolist()\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 10637,
    "candidates_token_count": 1411,
    "total_token_count": 12048,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 48.396064,
  "retries": null
}