{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentify the single connected non-white object in the input grid.\nDetermine the object's bounding box top-left corner (min_row, min_col).\nDetermine the object's actual top-leftmost pixel (top_pixel_row, top_pixel_col).\nCalculate the horizontal shift amount (delta_c):\n- If the top-left corner of the bounding box contains an object pixel (min_col == top_pixel_col), then delta_c = min_col.\n- Otherwise, delta_c = min_row.\nCreate an output grid initialized with the background color (white, 0).\nPlace the object in the output grid, shifted horizontally to the left by delta_c pixels. The vertical position remains unchanged.\n\"\"\"\n\ndef find_colored_object(grid):\n    \"\"\"\n    Finds the first connected non-background object in the grid.\n\n    Args:\n        grid: A numpy array representing the input grid.\n\n    Returns:\n        A tuple containing:\n        - set of (row, col) tuples for the object's pixels.\n        - the color of the object (int).\n        Returns (None, None) if no object is found.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = set()\n    background_color = 0\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != background_color and (r, c) not in visited:\n                object_color = grid[r, c]\n                object_pixels = set()\n                q = deque([(r, c)])\n                visited.add((r, c))\n\n                while q:\n                    row, col = q.popleft()\n                    object_pixels.add((row, col))\n\n                    # Check 4 neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] == object_color and (nr, nc) not in visited:\n                            visited.add((nr, nc))\n                            q.append((nr, nc))\n                \n                # Found the first (and assumed only) object\n                return object_pixels, object_color\n\n    return None, None # No object found\n\n\ndef get_object_properties(pixels):\n    \"\"\"\n    Calculates bounding box and top-left pixel properties.\n\n    Args:\n        pixels: A set of (row, col) tuples representing the object pixels.\n\n    Returns:\n        A tuple (min_row, min_col, top_pixel_row, top_pixel_col).\n    \"\"\"\n    if not pixels:\n        return None, None, None, None\n\n    min_row = min(r for r, c in pixels)\n    min_col = min(c for r, c in pixels)\n    \n    # top_pixel_row is the same as min_row by definition\n    top_pixel_row = min_row \n    \n    # Find the minimum column among pixels in the top_pixel_row\n    top_pixel_col = min(c for r, c in pixels if r == top_pixel_row)\n\n    return min_row, min_col, top_pixel_row, top_pixel_col\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by shifting the single colored object left.\n    The shift amount depends on the object's position relative to its bounding box.\n    \"\"\"\n    input_np = np.array(input_grid, dtype=int)\n    rows, cols = input_np.shape\n    \n    # Initialize output_grid with background color (0)\n    output_grid = np.zeros_like(input_np)\n\n    # 1. Identify the single connected non-white object\n    object_pixels, object_color = find_colored_object(input_np)\n\n    if object_pixels is None:\n        # No object found, return background grid\n        return output_grid.tolist() \n\n    # 2. Determine bounding box top-left corner (min_row, min_col)\n    # 3. Identify the top-leftmost pixel (top_pixel_row, top_pixel_col)\n    min_row, min_col, top_pixel_row, top_pixel_col = get_object_properties(object_pixels)\n\n    # 4. & 5. & 6. Calculate shift amount delta_c\n    if min_col == top_pixel_col:\n        delta_c = min_col\n    else:\n        delta_c = min_row\n        \n    # 7. Create the output grid (already done - initialized to background)\n\n    # 8. Place the shifted object onto the output grid\n    for r, c in object_pixels:\n        new_r = r\n        new_c = c - delta_c\n        \n        # Ensure the new coordinates are within the grid bounds\n        if 0 <= new_r < rows and 0 <= new_c < cols:\n            output_grid[new_r, new_c] = object_color\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4218,
    "candidates_token_count": 1219,
    "total_token_count": 5437,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 94.770477,
  "retries": null
}