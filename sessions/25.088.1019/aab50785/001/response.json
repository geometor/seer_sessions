{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import defaultdict\n\n\"\"\"\nTransformation Rule:\n1. Identify all 2x2 squares composed entirely of gray pixels (color 8) in the input grid.\n2. Group these gray squares into pairs where both squares in a pair share the exact same starting row index. Within each pair, one square is to the left of the other.\n3. For each identified pair of gray squares located at top-left corners (r, c_left) and (r, c_right), extract the rectangular region from the input grid. This region spans the same two rows as the squares (rows r and r+1) and the columns strictly between the right edge of the left square and the left edge of the right square (columns c_left + 2 to c_right - 1).\n4. Sort these pairs based on their row index 'r' in ascending order.\n5. Vertically stack the extracted regions corresponding to the sorted pairs to form the final output grid.\n\"\"\"\n\ndef find_2x2_squares(grid_np, color):\n    \"\"\"\n    Finds the top-left coordinates of all 2x2 squares of a specific color.\n\n    Args:\n        grid_np (np.array): The input grid as a numpy array.\n        color (int): The color value to search for.\n\n    Returns:\n        list: A list of tuples (row, col) representing the top-left coordinates.\n    \"\"\"\n    squares = []\n    height, width = grid_np.shape\n    if height < 2 or width < 2:\n        return squares\n\n    # Create the target 2x2 pattern\n    pattern = np.full((2, 2), color, dtype=grid_np.dtype)\n\n    # Iterate through possible top-left corners\n    for r in range(height - 1):\n        for c in range(width - 1):\n            # Extract the 2x2 subgrid\n            subgrid = grid_np[r:r+2, c:c+2]\n            # Check if it matches the pattern\n            if np.array_equal(subgrid, pattern):\n                squares.append((r, c))\n    return squares\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid (list[list[int]]): The input grid.\n\n    Returns:\n        list[list[int]]: The transformed output grid.\n    \"\"\"\n    input_np = np.array(input_grid, dtype=int)\n    height, width = input_np.shape\n    gray_color = 8\n\n    # 1. Identify all 2x2 gray squares\n    gray_squares_coords = find_2x2_squares(input_np, gray_color)\n\n    # 2. Group squares by row to find pairs\n    squares_by_row = defaultdict(list)\n    for r, c in gray_squares_coords:\n        squares_by_row[r].append(c)\n\n    pairs = []\n    for r, cols in squares_by_row.items():\n        # We are looking for exactly two squares per row to form a pair\n        if len(cols) == 2:\n            c_left = min(cols)\n            c_right = max(cols)\n            # Ensure the squares are indeed 2x2 gray squares starting at these coords\n            # (already confirmed by find_2x2_squares)\n            # Store the pair information: (row, left_col, right_col)\n            pairs.append((r, c_left, c_right))\n\n    # 4. Sort pairs by row index\n    pairs.sort(key=lambda x: x[0])\n\n    # 3. & 5. Extract regions and prepare for stacking\n    extracted_regions = []\n    for r, c_left, c_right in pairs:\n        # Define the columns for extraction: between the squares\n        start_col = c_left + 2\n        end_col = c_right  # Slicing is exclusive on the end index\n\n        # Check if there are columns between the squares\n        if start_col < end_col:\n            # Extract the region (height is always 2)\n            region = input_np[r : r + 2, start_col : end_col]\n            extracted_regions.append(region)\n\n    # Handle cases where no valid pairs/regions were found\n    if not extracted_regions:\n         # Determine expected output for no pairs - likely an empty grid\n         # Based on ARC common patterns, returning an empty list or specific small grid might be needed.\n         # Let's assume an empty list represents an empty grid for now.\n         return [] # Or potentially np.array([[]]).tolist() for a 0-row grid\n\n    # 5. Vertically stack the extracted regions\n    output_np = np.vstack(extracted_regions)\n\n    # Convert back to list of lists\n    output_grid = output_np.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3850,
    "candidates_token_count": 1139,
    "total_token_count": 4989,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 22.510685,
  "retries": null
}