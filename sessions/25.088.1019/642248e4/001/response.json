{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\ndef find_borders(grid):\n    \"\"\"\n    Identifies the location and colors of the two border lines.\n\n    Args:\n        grid (np.ndarray): The input grid.\n\n    Returns:\n        tuple: A tuple containing:\n            - border_type (str): 'horizontal' or 'vertical'.\n            - border1_color (int): Color of the first border (top or left).\n            - border1_direction (tuple): Relative direction vector for border 1.\n            - border2_color (int): Color of the second border (bottom or right).\n            - border2_direction (tuple): Relative direction vector for border 2.\n        Returns None if two distinct borders are not found as expected.\n    \"\"\"\n    height, width = grid.shape\n    \n    # Define directions\n    UP = (-1, 0)\n    DOWN = (1, 0)\n    LEFT = (0, -1)\n    RIGHT = (0, 1)\n\n    # Check for horizontal borders (top/bottom)\n    top_row = grid[0, :]\n    bottom_row = grid[height - 1, :]\n    is_top_border = len(np.unique(top_row)) == 1 and top_row[0] != 0\n    is_bottom_border = len(np.unique(bottom_row)) == 1 and bottom_row[0] != 0\n\n    if is_top_border and is_bottom_border:\n        return 'horizontal', top_row[0], UP, bottom_row[0], DOWN\n\n    # Check for vertical borders (left/right)\n    left_col = grid[:, 0]\n    right_col = grid[:, width - 1]\n    is_left_border = len(np.unique(left_col)) == 1 and left_col[0] != 0\n    is_right_border = len(np.unique(right_col)) == 1 and right_col[0] != 0\n\n    if is_left_border and is_right_border:\n        return 'vertical', left_col[0], LEFT, right_col[0], RIGHT\n\n    # Should not happen based on examples, but handle unexpected cases\n    return None \n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by placing colored pixels adjacent to blue pixels.\n    The color and direction of placement are determined by the two border lines\n    (either top/bottom or left/right). A new pixel is placed only if the\n    target adjacent cell in the input grid is white (0).\n    \"\"\"\n    input_grid_np = np.array(input_grid)\n    height, width = input_grid_np.shape\n    \n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid_np)\n\n    # Identify borders and their properties\n    border_info = find_borders(input_grid_np)\n    if border_info is None:\n        # If borders aren't as expected, return the original grid or handle error\n        print(\"Warning: Could not identify standard borders.\")\n        return input_grid # Or raise an error\n\n    border_type, color1, direction1, color2, direction2 = border_info\n\n    # Define the range to iterate over (excluding borders)\n    if border_type == 'horizontal':\n        row_start, row_end = 1, height - 1\n        col_start, col_end = 0, width\n    else: # vertical\n        row_start, row_end = 0, height\n        col_start, col_end = 1, width - 1\n\n    # Iterate through the inner part of the grid\n    for r in range(row_start, row_end):\n        for c in range(col_start, col_end):\n            # Check if the current cell is blue (1)\n            if input_grid_np[r, c] == 1:\n                # Check adjacency for the first border\n                r1, c1 = r + direction1[0], c + direction1[1]\n                # Check bounds and if the target cell in the *input* was white (0)\n                if 0 <= r1 < height and 0 <= c1 < width and input_grid_np[r1, c1] == 0:\n                    # Place the first border's color in the *output* grid\n                    output_grid[r1, c1] = color1\n\n                # Check adjacency for the second border\n                r2, c2 = r + direction2[0], c + direction2[1]\n                # Check bounds and if the target cell in the *input* was white (0)\n                if 0 <= r2 < height and 0 <= c2 < width and input_grid_np[r2, c2] == 0:\n                    # Place the second border's color in the *output* grid\n                    output_grid[r2, c2] = color2\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4108,
    "candidates_token_count": 1153,
    "total_token_count": 5261,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.622399,
  "retries": null
}