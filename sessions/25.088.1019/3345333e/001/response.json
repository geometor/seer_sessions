{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentify and remove a solid rectangular object from the input grid.\nThe output grid contains only the pixels belonging to the non-rectangular\nobject(s) placed on the background color (0).\n\"\"\"\n\n# Helper function to find connected components (objects) of a specific color using 4-way connectivity (neighbors: up, down, left, right)\ndef find_connected_components(grid, target_color):\n    \"\"\"\n    Finds all connected components of a specific color in the grid.\n\n    Args:\n        grid (np.ndarray): The input grid.\n        target_color (int): The color of the components to find.\n\n    Returns:\n        list[set]: A list where each element is a set of (row, col) tuples\n                   representing the coordinates of a connected component.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n\n    for r in range(rows):\n        for c in range(cols):\n            # Start search if pixel is the target color and not yet visited\n            if grid[r, c] == target_color and not visited[r, c]:\n                component_coords = set()\n                q = deque([(r, c)])\n                visited[r, c] = True\n                component_coords.add((r, c))\n\n                # Breadth-First Search (BFS) to find all connected pixels\n                while q:\n                    row, col = q.popleft()\n                    # Check 4 neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        # Check bounds and if neighbor has the target color and hasn't been visited\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] == target_color and not visited[nr, nc]:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n                            component_coords.add((nr, nc))\n                # Add the found component to the list if it's not empty\n                if component_coords:\n                    objects.append(component_coords)\n    return objects\n\n# Helper function to check if a set of coordinates forms a solid rectangle\ndef is_solid_rectangle(object_coords):\n    \"\"\"\n    Checks if a set of coordinates represents a solid rectangle.\n\n    Args:\n        object_coords (set): A set of (row, col) tuples representing the object's pixels.\n\n    Returns:\n        bool: True if the coordinates form a solid rectangle, False otherwise.\n    \"\"\"\n    if not object_coords:\n        return False # An empty set is not a rectangle\n\n    # Find the bounding box of the coordinates\n    rows = [r for r, c in object_coords]\n    cols = [c for r, c in object_coords]\n    min_r, max_r = min(rows), max(rows)\n    min_c, max_c = min(cols), max(cols)\n\n    # Calculate the expected number of pixels if it were a solid rectangle\n    expected_size = (max_r - min_r + 1) * (max_c - min_c + 1)\n\n    # Compare the actual number of pixels with the expected size\n    return len(object_coords) == expected_size\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by removing the solid rectangular object\n    and keeping only the non-rectangular object(s).\n\n    Args:\n        input_grid (list[list[int]]): The input grid as a 2D list.\n\n    Returns:\n        list[list[int]]: The transformed grid as a 2D list.\n    \"\"\"\n    # Convert input list of lists to a NumPy array for easier processing\n    input_np = np.array(input_grid, dtype=int)\n    rows, cols = input_np.shape\n    background_color = 0\n\n    # Find unique colors present in the grid, excluding the background\n    unique_colors = np.unique(input_np)\n    object_colors = [c for c in unique_colors if c != background_color]\n\n    persistent_colors = []\n    masking_colors = [] # Although not directly used in output creation, useful for classification\n\n    # Iterate through each unique non-background color found\n    for color in object_colors:\n        # Find all distinct objects (connected components) of this color\n        objects = find_connected_components(input_np, color)\n        is_mask_color = False\n        # Check if any object of this color is a solid rectangle\n        for obj_coords in objects:\n            if is_solid_rectangle(obj_coords):\n                is_mask_color = True\n                break # Found a rectangle for this color, no need to check other objects of same color\n        \n        # Classify the color based on whether it formed a solid rectangle\n        if is_mask_color:\n            masking_colors.append(color)\n        else:\n            persistent_colors.append(color)\n\n    # Based on examples, assume exactly one persistent color group.\n    # Handle potential edge cases where this assumption might fail.\n    if not persistent_colors:\n        # If no non-rectangular object is found, return an empty grid (all background)\n        # This covers cases where the input might only contain rectangles or be empty.\n        print(\"Warning: No persistent (non-rectangular) color found. Returning empty grid.\")\n        return np.full_like(input_np, background_color).tolist()\n\n    # If multiple persistent colors are found, the logic might need adjustment based on task specifics.\n    # For now, proceed assuming the first one found is the target.\n    if len(persistent_colors) > 1:\n         print(f\"Warning: Multiple persistent colors found: {persistent_colors}. Using first: {persistent_colors[0]}.\")\n    \n    persistent_color = persistent_colors[0]\n\n    # Initialize the output grid with the background color\n    output_np = np.full_like(input_np, background_color)\n\n    # Populate the output grid: copy only the pixels that belong to the persistent color\n    # from the input grid to the output grid.\n    for r in range(rows):\n        for c in range(cols):\n            if input_np[r, c] == persistent_color:\n                output_np[r, c] = persistent_color\n\n    # Convert the final NumPy array back to a list of lists for the expected output format\n    return output_np.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4022,
    "candidates_token_count": 1527,
    "total_token_count": 5549,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 38.506714,
  "retries": null
}