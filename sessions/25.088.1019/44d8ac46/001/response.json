{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport collections\n\n\"\"\"\nIdentifies contiguous regions of white pixels (0) in the input grid.\nFor each white region, determines if it is completely enclosed by gray pixels (5).\nA region is considered enclosed if all its adjacent pixels (including diagonals)\nthat are not part of the region itself are gray pixels. Regions touching the\ngrid boundary are not considered enclosed.\nIf a white region is fully enclosed, all pixels within that region are changed\nto red (2) in the output grid. Otherwise, the region remains white.\nThe output grid is otherwise identical to the input grid.\n\"\"\"\n\ndef find_connected_regions(grid, target_color):\n    \"\"\"\n    Finds all connected regions of a specific color using BFS.\n\n    Args:\n        grid (np.array): The input grid.\n        target_color (int): The color of the pixels to form regions.\n\n    Returns:\n        list[set]: A list where each element is a set of (row, col) tuples\n                   representing a connected region.\n    \"\"\"\n    height, width = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    regions = []\n\n    for r in range(height):\n        for c in range(width):\n            if grid[r, c] == target_color and not visited[r, c]:\n                # Start BFS for a new region\n                region_coords = set()\n                q = collections.deque([(r, c)])\n                visited[r, c] = True\n                region_coords.add((r, c))\n\n                while q:\n                    curr_r, curr_c = q.popleft()\n\n                    # Check 8 neighbors (including diagonals)\n                    for dr in [-1, 0, 1]:\n                        for dc in [-1, 0, 1]:\n                            if dr == 0 and dc == 0:\n                                continue  # Skip self\n\n                            nr, nc = curr_r + dr, curr_c + dc\n\n                            # Check bounds\n                            if 0 <= nr < height and 0 <= nc < width:\n                                # Check color and visited status\n                                if grid[nr, nc] == target_color and not visited[nr, nc]:\n                                    visited[nr, nc] = True\n                                    q.append((nr, nc))\n                                    region_coords.add((nr, nc))\n\n                if region_coords:\n                    regions.append(region_coords)\n    return regions\n\ndef check_enclosure(grid, region_coords):\n    \"\"\"\n    Checks if a given region is fully enclosed by gray (5) pixels.\n\n    Args:\n        grid (np.array): The input grid.\n        region_coords (set): A set of (row, col) tuples for the region.\n\n    Returns:\n        bool: True if the region is enclosed, False otherwise.\n    \"\"\"\n    height, width = grid.shape\n    \n    # Iterate through each pixel in the region\n    for r, c in region_coords:\n        # Check its 8 neighbors\n        for dr in [-1, 0, 1]:\n            for dc in [-1, 0, 1]:\n                if dr == 0 and dc == 0:\n                    continue # Skip self\n\n                nr, nc = r + dr, c + dc\n\n                # Check if neighbor is out of bounds\n                if not (0 <= nr < height and 0 <= nc < width):\n                    return False # Touches edge, not enclosed\n\n                # Check if neighbor is outside the current region\n                if (nr, nc) not in region_coords:\n                    # If an external neighbor is not gray (5), it's not enclosed\n                    if grid[nr, nc] != 5:\n                        return False\n                        \n    # If all external neighbors checked were gray (5) and no edge was touched\n    return True\n\n\ndef transform(input_grid):\n    \"\"\"\n    Fills white regions (0) enclosed by gray pixels (5) with red (2).\n\n    Args:\n        input_grid (np.array): The input grid.\n\n    Returns:\n        np.array: The transformed grid.\n    \"\"\"\n    # Make a copy to modify\n    output_grid = np.copy(input_grid)\n    \n    # Find all connected regions of white pixels (0)\n    white_regions = find_connected_regions(input_grid, 0)\n\n    # Check each white region for enclosure\n    for region in white_regions:\n        # Determine if the region is enclosed by gray (5)\n        is_enclosed = check_enclosure(input_grid, region)\n\n        # If enclosed, fill the region with red (2) in the output grid\n        if is_enclosed:\n            for r, c in region:\n                output_grid[r, c] = 2 # Red\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4325,
    "candidates_token_count": 1100,
    "total_token_count": 5425,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 23.213934,
  "retries": null
}