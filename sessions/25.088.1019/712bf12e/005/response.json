{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nPaint upwards from red pixels in the input grid.\nInitialize the output grid as a copy of the input grid.\nIdentify all red (2) pixels in the input grid. These are 'source' pixels.\nFor each source pixel at (r_source, c):\nIterate upwards from the row directly above the source (r = r_source - 1) towards row 0.\nAt each step (row, c), check the color of the pixel in the *input* grid.\nIf the input pixel at (row, c) is white (0), change the corresponding pixel in the *output* grid to red (2).\nIf the input pixel at (row, c) is not white (any non-zero color), stop the upward painting process for this specific source pixel and column.\nContinue this process for all identified source pixels.\nPixels not painted retain their original color from the input grid. Obstacle pixels (non-white) block painting but remain unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef find_pixels_by_color(grid, color_value):\n    \"\"\"\n    Finds the coordinates of all pixels with a specific color value.\n\n    Args:\n        grid (np.array): The input grid.\n        color_value (int): The color value to search for.\n\n    Returns:\n        list: A list of tuples, where each tuple is (row, column) coordinate.\n    \"\"\"\n    rows, cols = np.where(grid == color_value)\n    return list(zip(rows, cols))\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the upward painting transformation based on red pixels in the input grid.\n\n    Args:\n        input_grid (np.array): A 2D NumPy array representing the input grid.\n\n    Returns:\n        np.array: A 2D NumPy array representing the transformed output grid.\n    \"\"\"\n    # Initialize output_grid as a copy of the input grid\n    output_grid = np.copy(input_grid)\n    num_rows, num_cols = input_grid.shape\n\n    # Find all red (2) pixels (source pixels) in the input grid\n    source_pixel_coords = find_pixels_by_color(input_grid, 2)\n\n    # Iterate through each found source pixel\n    for r_source, c in source_pixel_coords:\n        # Start checking from the row directly above the source pixel\n        current_row = r_source - 1\n\n        # Paint upwards as long as we are within the grid bounds (row >= 0)\n        while current_row >= 0:\n            # Check the color of the cell in the *input* grid at the current position\n            if input_grid[current_row, c] == 0:\n                # If it's white (0) in the input, paint it red (2) in the output grid\n                output_grid[current_row, c] = 2\n                # Move to the next row above\n                current_row -= 1\n            else:\n                # If it's not white (it's an obstacle in the input grid), stop painting upwards for this column/source\n                break\n        # Loop terminates if current_row becomes < 0 (top edge reached) or if an obstacle was hit (break called)\n\n    # Return the modified grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 13440,
    "candidates_token_count": 749,
    "total_token_count": 14189,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.910268,
  "retries": null
}