{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies all red (2) pixels in the input grid. \nFor each identified red pixel, it 'paints' upwards in the same column, starting from the cell directly above the red pixel. \nPainting changes white (0) pixels in the output grid to red (2).\nThis painting process stops for a given column (initiated by a specific red pixel) when a non-white pixel (value > 0) is encountered in the input grid in that column, or when the top edge of the grid (row 0) is reached and painted.\nPixels that are not red sources and are not painted remain their original color. Obstacle pixels block the painting process but retain their original color.\n\"\"\"\n\nimport numpy as np\n\ndef find_pixels_by_color(grid, color_value):\n    \"\"\"\n    Finds the coordinates of all pixels with a specific color value.\n\n    Args:\n        grid (np.array): The input grid.\n        color_value (int): The color value to search for.\n\n    Returns:\n        list: A list of tuples, where each tuple is (row, column) coordinate.\n    \"\"\"\n    rows, cols = np.where(grid == color_value)\n    return list(zip(rows, cols))\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the upward painting transformation based on all red pixels in the input grid.\n\n    Args:\n        input_grid (np.array): A 2D NumPy array representing the input grid.\n\n    Returns:\n        np.array: A 2D NumPy array representing the transformed output grid.\n    \"\"\"\n    # Initialize output_grid as a copy of the input grid\n    output_grid = np.copy(input_grid)\n    num_rows, num_cols = input_grid.shape\n\n    # Find all red (2) pixels in the input grid\n    red_pixel_coords = find_pixels_by_color(input_grid, 2)\n\n    # Iterate through each found red pixel\n    for r_start, c in red_pixel_coords:\n        # Start painting from the row directly above the red pixel\n        row_to_paint = r_start - 1\n\n        # Paint upwards as long as we are within the grid bounds\n        while row_to_paint >= 0:\n            # Check the color of the cell in the *input* grid\n            if input_grid[row_to_paint, c] == 0:\n                # If it's white (0), change it to red (2) in the output grid\n                output_grid[row_to_paint, c] = 2\n                # Move to the next row above\n                row_to_paint -= 1\n            else:\n                # If it's not white (it's an obstacle), stop painting for this column/source\n                break\n        # Loop terminates if row_to_paint becomes < 0 (top reached) or if break is called\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8399,
    "candidates_token_count": 667,
    "total_token_count": 9066,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.742487,
  "retries": null
}