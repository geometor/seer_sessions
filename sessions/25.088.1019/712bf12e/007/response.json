{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nPerform a flood fill starting from all red (color 2) pixels in the input grid.\nThe fill spreads to adjacent (up, down, left, right) white (color 0) pixels, turning them red.\nAny non-white pixel (colors 1, 3-9) acts as a barrier, stopping the fill in that direction.\nBarrier pixels and the original red pixels retain their original colors.\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef find_pixels_by_color(grid, color_value):\n    \"\"\"\n    Finds the coordinates of all pixels with a specific color value.\n\n    Args:\n        grid (np.array): The input grid.\n        color_value (int): The color value to search for.\n\n    Returns:\n        list: A list of tuples, where each tuple is (row, column) coordinate.\n    \"\"\"\n    rows, cols = np.where(grid == color_value)\n    return list(zip(rows, cols))\n\ndef transform(input_grid):\n    \"\"\"\n    Applies a flood fill transformation starting from red pixels.\n\n    Args:\n        input_grid (np.array): A 2D NumPy array representing the input grid.\n\n    Returns:\n        np.array: A 2D NumPy array representing the transformed output grid.\n    \"\"\"\n    # Initialize output_grid as a copy of the input grid\n    output_grid = np.copy(input_grid)\n    num_rows, num_cols = input_grid.shape\n    \n    # Define the target fill color (red) and the background color to fill (white)\n    fill_color = 2\n    background_color = 0\n\n    # Find all initial red (2) pixels (source pixels) in the input grid\n    source_pixel_coords = find_pixels_by_color(input_grid, fill_color)\n\n    # Initialize a queue for Breadth-First Search (BFS)\n    queue = deque()\n    # Initialize a set to keep track of visited coordinates to avoid cycles and redundant checks\n    visited = set()\n\n    # Add all source pixels to the queue and mark them as visited\n    # Note: We don't change the source pixels themselves, but start the fill *from* them.\n    # The visited set prevents us from adding neighbors of already processed cells unnecessarily.\n    # We will process neighbors *of* these source pixels.\n    for r, c in source_pixel_coords:\n        # Add neighbors of source pixels if they are white (0)\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]: # Right, Left, Down, Up\n            nr, nc = r + dr, c + dc\n            \n            # Check boundaries\n            if 0 <= nr < num_rows and 0 <= nc < num_cols:\n                # Check if the neighbor is white and not visited\n                if input_grid[nr, nc] == background_color and (nr, nc) not in visited:\n                    # Mark as visited\n                    visited.add((nr, nc))\n                    # Change color in the output grid\n                    output_grid[nr, nc] = fill_color\n                    # Add to the queue to process its neighbors later\n                    queue.append((nr, nc))\n\n    # Perform BFS starting from the neighbors of the initial red pixels\n    while queue:\n        # Get the next coordinate from the queue\n        r, c = queue.popleft()\n\n        # Explore its 4-directional neighbors\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]: # Right, Left, Down, Up\n            nr, nc = r + dr, c + dc\n\n            # Check boundaries\n            if 0 <= nr < num_rows and 0 <= nc < num_cols:\n                # Check if the neighbor is white (background) in the *input* grid\n                # and hasn't been visited/added to the queue yet.\n                # We check input_grid because non-white pixels are barriers.\n                if input_grid[nr, nc] == background_color and (nr, nc) not in visited:\n                    # Mark as visited\n                    visited.add((nr, nc))\n                    # Change color in the output grid\n                    output_grid[nr, nc] = fill_color\n                    # Add to the queue to process its neighbors later\n                    queue.append((nr, nc))\n\n    # Return the modified grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5241,
    "candidates_token_count": 1021,
    "total_token_count": 6262,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 206.829738,
  "retries": null
}