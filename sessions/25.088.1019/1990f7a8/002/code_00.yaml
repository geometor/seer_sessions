task_structure:
  input_grid:
    description: A grid of arbitrary size (within ARC limits) containing primarily white pixels (0) and scattered patterns of red pixels (2).
    properties:
      height: variable
      width: variable
      colors: [0, 2] # Primarily white and red
  output_grid:
    description: A fixed-size 7x7 grid.
    properties:
      height: 7
      width: 7
      colors: [0, 2] # White and red
      structure: Four 3x3 areas separated by a central cross (row 3, col 3) of white pixels.

objects:
  - object: red_pixel_group
    description: A collection of one or more red pixels (2) located within a quadrant of the input grid.
    properties:
      color: 2 (red)
      location: Contained within one of the four input quadrants.
      count: variable (can be zero)
  - object: bounding_box
    description: The minimal axis-aligned rectangle containing all red pixels within a quadrant.
    properties:
      defined_by: red_pixel_group
      location: Relative to the quadrant or absolute within the input grid.
      size: variable, but the relevant extracted area is always 3x3.
      anchor_point: top-left corner coordinates (row, col).
  - object: pattern
    description: A 3x3 grid segment extracted from the input grid.
    properties:
      size: 3x3
      source: Input grid
      location_rule: Anchored at the top-left corner of the bounding_box of red pixels in the corresponding input quadrant.
      content: Pixels (colors 0 or 2) from the input grid.
  - object: output_quadrant_area
    description: One of the four 3x3 areas in the output grid designated to receive a pattern.
    properties:
      size: 3x3
      location: Fixed positions in the 7x7 output grid (TL: 0:3,0:3; TR: 0:3,4:7; BL: 4:7,0:3; BR: 4:7,4:7).
      default_fill: white (0)

actions:
  - action: divide_input
    description: Split the input grid into four equal or near-equal quadrants.
    inputs: input_grid
    outputs: four grid segments (quadrants)
  - action: locate_red_pixels
    description: Find the coordinates of all red pixels within a given quadrant.
    inputs: quadrant
    outputs: list of coordinates, or empty list
  - action: calculate_bounding_box
    description: Determine the minimum and maximum row and column indices of the red pixels found.
    inputs: list of red pixel coordinates
    outputs: bounding box coordinates (min_row, min_col, max_row, max_col), or None if no red pixels.
  - action: extract_pattern
    description: Copy a 3x3 segment from the input grid.
    inputs: input_grid, top-left coordinates (from bounding box)
    outputs: 3x3 pattern (numpy array or list of lists)
    condition: Only if red pixels were found in the quadrant.
  - action: place_pattern
    description: Place the extracted 3x3 pattern into the designated 3x3 area in the output grid.
    inputs: output_grid, 3x3 pattern, target output coordinates (based on input quadrant)
    outputs: modified output_grid
    condition: Only if a pattern was extracted.
  - action: initialize_output
    description: Create a 7x7 grid filled with white (0).
    outputs: 7x7 grid

relationships:
  - relationship: mapping
    description: Each input quadrant maps to a specific 3x3 area in the output grid.
    details:
      - Input Top-Left -> Output Top-Left (0:3, 0:3)
      - Input Top-Right -> Output Top-Right (0:3, 4:7)
      - Input Bottom-Left -> Output Bottom-Left (4:7, 0:3)
      - Input Bottom-Right -> Output Bottom-Right (4:7, 4:7)