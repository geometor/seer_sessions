{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef find_horizontal_line(grid, color):\n    \"\"\"Finds the row index of the first complete horizontal line of a given color.\"\"\"\n    height, width = grid.shape\n    for r in range(height):\n        if np.all(grid[r, :] == color):\n            return r\n    return -1 # Return -1 if no such line is found\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on the following rules:\n    1. Find the row index of the solid gray (5) horizontal line ('gray_row').\n    2. Determine the 'height' parameter by counting the number of azure (8) pixels in the first row (row 0).\n    3. Identify the 'data_row', which is two rows below the 'gray_row'.\n    4. Count the occurrences of each non-white (0) color in the 'data_row'.\n    5. For each color 'c' whose count in the 'data_row' equals the 'height' parameter:\n       a. Identify the column indices where 'c' appears in the 'data_row'.\n       b. In the output grid, draw vertical lines of color 'c' and length 'height' in these columns.\n       c. These vertical lines start from the row immediately above the 'gray_row' (gray_row - 1) and extend upwards for 'height' rows.\n    6. The output grid is initialized as a copy of the input grid, and the vertical lines are drawn onto this copy.\n    \"\"\"\n    \n    input_grid_np = np.array(input_grid, dtype=int)\n    output_grid = np.copy(input_grid_np)\n    height_grid, width_grid = input_grid_np.shape\n\n    # 1. Find the gray line row index\n    gray_color = 5\n    gray_row = find_horizontal_line(input_grid_np, gray_color)\n    if gray_row == -1:\n        # Handle cases where the gray line might not exist as expected\n        # For this specific task based on examples, assume it always exists.\n        print(\"Warning: Gray line not found.\")\n        return output_grid.tolist() \n\n    # 2. Determine the height parameter from the first row\n    azure_color = 8\n    draw_height = np.count_nonzero(input_grid_np[0, :] == azure_color)\n    if draw_height == 0:\n         # If no azure pixels, no drawing happens based on the observed pattern\n         return output_grid.tolist()\n\n    # 3. Identify the data row (assuming it's 2 rows below the gray line)\n    data_row_index = gray_row + 2\n    if data_row_index >= height_grid:\n        # Handle cases where data row is outside grid bounds\n        print(\"Warning: Data row index out of bounds.\")\n        return output_grid.tolist()\n    data_row = input_grid_np[data_row_index, :]\n\n    # 4. Count occurrences of each non-white color in the data row\n    color_counts = Counter(c for c in data_row if c != 0)\n\n    # 5. Iterate through colors, check counts, and draw lines\n    for color, count in color_counts.items():\n        if count == draw_height:\n            # Find columns where this color appears\n            color_indices = np.where(data_row == color)[0]\n            \n            # Determine the rows for drawing\n            start_row = gray_row - draw_height\n            end_row = gray_row # Exclusive endpoint for slicing\n\n            # Ensure drawing rows are within grid bounds\n            if start_row < 0:\n                print(f\"Warning: Drawing starts above grid for color {color}.\")\n                start_row = 0 # Clamp to top edge if necessary\n            \n            if start_row >= end_row:\n                print(f\"Warning: Invalid drawing row range for color {color}.\")\n                continue # Skip drawing if range is invalid\n\n            # Draw the vertical lines\n            for col in color_indices:\n                output_grid[start_row:end_row, col] = color\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3578,
    "candidates_token_count": 974,
    "total_token_count": 4552,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 26.61771,
  "retries": null
}