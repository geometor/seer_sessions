{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport collections\n\n\"\"\"\nTransformation Rule:\n1. Identify the background color (most frequent color).\n2. Find all distinct, contiguous objects (groups of pixels) with colors different from the background.\n3. Determine the topmost row index for each object.\n4. Sort the objects based on their topmost row index (top to bottom).\n5. Create an output grid filled with the background color.\n6. Iterate through the sorted objects:\n    - If the object is at an odd position (1st, 3rd, ...) in the sorted list, shift it one column to the left.\n    - If the object is at an even position (2nd, 4th, ...) in the sorted list, shift it one column to the right.\n7. Draw the shifted objects onto the output grid. Pixels shifted off the grid boundaries are discarded.\n\"\"\"\n\ndef find_objects(grid, bg_color):\n    \"\"\"\n    Finds all contiguous objects of non-background color in the grid.\n\n    Args:\n        grid (np.array): The input grid.\n        bg_color (int): The background color.\n\n    Returns:\n        list: A list of dictionaries, where each dictionary represents an object\n              and contains 'color', 'pixels' (list of (r, c) tuples), and \n              'top_row' (minimum row index).\n    \"\"\"\n    objects = []\n    h, w = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n\n    for r in range(h):\n        for c in range(w):\n            if grid[r, c] != bg_color and not visited[r, c]:\n                object_color = grid[r, c]\n                current_object_pixels = []\n                q = collections.deque([(r, c)])\n                visited[r, c] = True\n                min_r = r\n\n                # Breadth-First Search (BFS) to find all connected pixels of the same color\n                while q:\n                    curr_r, curr_c = q.popleft()\n                    current_object_pixels.append((curr_r, curr_c))\n                    min_r = min(min_r, curr_r) # Keep track of the topmost row\n\n                    # Check neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = curr_r + dr, curr_c + dc\n\n                        # Check boundaries and if neighbor is part of the object and not visited\n                        if 0 <= nr < h and 0 <= nc < w and \\\n                           not visited[nr, nc] and \\\n                           grid[nr, nc] == object_color:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n                \n                if current_object_pixels:\n                    objects.append({\n                        'color': object_color,\n                        'pixels': current_object_pixels,\n                        'top_row': min_r\n                    })\n    return objects\n\ndef get_background_color(grid):\n    \"\"\"\n    Determines the background color (most frequent color) in the grid.\n\n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        int: The background color.\n    \"\"\"\n    colors, counts = np.unique(grid, return_counts=True)\n    return colors[np.argmax(counts)]\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the alternating horizontal shift transformation to objects in the grid.\n\n    Args:\n        input_grid (list[list[int]]): The input grid represented as a list of lists.\n\n    Returns:\n        list[list[int]]: The transformed grid as a list of lists.\n    \"\"\"\n    # Convert input to numpy array for easier processing\n    grid_np = np.array(input_grid, dtype=int)\n    h, w = grid_np.shape\n\n    # 1. Identify the background color\n    bg_color = get_background_color(grid_np)\n\n    # 2. Identify all distinct objects and their topmost rows\n    objects = find_objects(grid_np, bg_color)\n\n    # 3. Sort the objects based on their topmost row index\n    sorted_objects = sorted(objects, key=lambda obj: obj['top_row'])\n\n    # 4. Initialize the output grid with the background color\n    output_grid = np.full_like(grid_np, bg_color)\n\n    # 5. Iterate through the sorted objects and apply shifts\n    for i, obj in enumerate(sorted_objects):\n        color = obj['color']\n        pixels = obj['pixels']\n        \n        # Determine shift direction: left (-1) for odd index (0, 2, ...), right (+1) for even index (1, 3, ...)\n        # The description uses 1-based indexing (1st, 2nd), so adjust:\n        # 1st (index 0) -> odd -> shift left (-1)\n        # 2nd (index 1) -> even -> shift right (+1)\n        # 3rd (index 2) -> odd -> shift left (-1)\n        shift = -1 if (i + 1) % 2 != 0 else 1 \n\n        # 6. Draw the shifted object onto the output grid\n        for r, c in pixels:\n            new_c = c + shift\n            # Ensure the new column is within the grid boundaries\n            if 0 <= new_c < w:\n                output_grid[r, new_c] = color\n\n    # Convert the output numpy array back to a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4138,
    "candidates_token_count": 1309,
    "total_token_count": 5447,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 23.647227,
  "retries": null
}