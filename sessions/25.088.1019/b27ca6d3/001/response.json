{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentifies clusters of red (2) pixels in the input grid where clusters are defined by 8-directional adjacency (including diagonals). For each cluster containing two or more red pixels, calculates the bounding box that encompasses all pixels in the cluster *plus* all of their 8-directional neighbors. Fills this bounding box area in the output grid with green (3). Finally, restores the original red pixels belonging to the cluster within the filled area back to red (2). Isolated red pixels (clusters of size 1) and the background remain unchanged.\n\"\"\"\n\ndef get_neighbors(grid_shape, r, c, connectivity=8):\n    \"\"\"Gets valid neighbor coordinates for a pixel.\"\"\"\n    neighbors = []\n    rows, cols = grid_shape\n    for dr in [-1, 0, 1]:\n        for dc in [-1, 0, 1]:\n            if dr == 0 and dc == 0:\n                continue\n            if connectivity == 4 and abs(dr) + abs(dc) > 1: # Skip diagonals for 4-connectivity\n                 continue\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < rows and 0 <= nc < cols:\n                neighbors.append((nr, nc))\n    return neighbors\n\ndef find_clusters(grid, color):\n    \"\"\"Finds connected components (clusters) of a given color using 8-way adjacency.\"\"\"\n    rows, cols = grid.shape\n    visited = set()\n    clusters = []\n    \n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == color and (r, c) not in visited:\n                # Start BFS for a new cluster\n                current_cluster = []\n                q = deque([(r, c)])\n                visited.add((r, c))\n                \n                while q:\n                    curr_r, curr_c = q.popleft()\n                    current_cluster.append((curr_r, curr_c))\n                    \n                    # Check 8 neighbors\n                    for nr, nc in get_neighbors((rows, cols), curr_r, curr_c, connectivity=8):\n                        if grid[nr, nc] == color and (nr, nc) not in visited:\n                            visited.add((nr, nc))\n                            q.append((nr, nc))\n                            \n                if current_cluster:\n                    clusters.append(current_cluster)\n                    \n    return clusters\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on red pixel clusters.\n\n    1. Finds clusters of red pixels (color 2).\n    2. Filters clusters to keep only those with size >= 2.\n    3. For each valid cluster:\n       a. Determines the region including cluster pixels and their neighbors.\n       b. Calculates the bounding box of this region.\n       c. Fills the bounding box with green (color 3) in the output grid.\n       d. Restores the original red pixels of the cluster within the bounding box.\n    \"\"\"\n    \n    # Initialize output_grid as a copy of input_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n    \n    # Define the target color (red)\n    target_color = 2\n    fill_color = 3\n    \n    # Find all clusters of the target color\n    clusters = find_clusters(input_grid, target_color)\n    \n    # Filter clusters to keep only those with size 2 or more\n    valid_clusters = [cluster for cluster in clusters if len(cluster) >= 2]\n    \n    # Process each valid cluster\n    for cluster in valid_clusters:\n        # Determine the region of interest (cluster pixels + neighbors)\n        region_coords = set()\n        for r, c in cluster:\n            region_coords.add((r, c)) # Add the cluster pixel itself\n            # Add all 8 neighbors\n            for nr, nc in get_neighbors((rows, cols), r, c, connectivity=8):\n                 region_coords.add((nr, nc))\n\n        # If no region coords found (should not happen for valid clusters), skip\n        if not region_coords:\n             continue\n\n        # Calculate the bounding box of the region\n        min_r = min(r for r, c in region_coords)\n        max_r = max(r for r, c in region_coords)\n        min_c = min(c for r, c in region_coords)\n        max_c = max(c for r, c in region_coords)\n        \n        # Fill the bounding box area in the output grid with the fill color (green)\n        for r in range(min_r, max_r + 1):\n            for c in range(min_c, max_c + 1):\n                # Ensure we don't go out of bounds (although bounding box should be within bounds)\n                if 0 <= r < rows and 0 <= c < cols:\n                     output_grid[r, c] = fill_color\n                     \n        # Restore the original target color pixels (red) belonging to this cluster\n        for r, c in cluster:\n             # Check bounds just in case, though cluster pixels should be valid\n             if 0 <= r < rows and 0 <= c < cols:\n                output_grid[r, c] = target_color\n                \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4097,
    "candidates_token_count": 1237,
    "total_token_count": 5334,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 18.007178,
  "retries": null
}