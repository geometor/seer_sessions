task_description: Reflects one object through the center of another object's bounding box.

definitions:
  object: A group of all connected pixels of the same non-background color.
  background_color: white (0)
  bounding_box: The smallest rectangle enclosing all pixels of an object. (min_row, max_row, min_col, max_col)
  bbox_center_sum: A tuple (min_row + max_row, min_col + max_col) derived from the bounding box.

input_features:
  grid: A 2D array of color pixels.
  objects: Exactly two distinct non-background color objects are present.

transformation:
  - step: Identify the two non-background objects by grouping all pixels of the same color.
  - step: Determine the 'pivot' and 'mobile' objects.
    - rule: The object with the smaller size (fewer pixels) is the pivot.
    - rule: If sizes are equal, the object with the higher color index is the pivot.
    - result: One pivot object, one mobile object.
  - step: Calculate the bounding box of the pivot object.
  - step: Calculate the pivot's center sum (min_row + max_row, min_col + max_col). Let this be (sum_r, sum_c).
  - step: For each pixel (r, c) of the mobile object:
    - calculate_reflection: Compute the reflected coordinates (r', c') using the formula r' = sum_r - r, c' = sum_c - c.
  - step: Construct the output grid.
    - start_with: A copy of the input grid.
    - add_pixels: For each calculated reflected coordinate (r', c') that falls within the grid boundaries, set the pixel at (r', c') to the color of the mobile object. (Note: This may overwrite background pixels or potentially pixels of the original objects if the reflection overlaps).

output_features:
  grid: The output grid contains the original two objects plus the reflected version of the mobile object.
  reflected_object: Has the same color as the mobile object and its shape is determined by the reflection formula.