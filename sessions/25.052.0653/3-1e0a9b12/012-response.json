{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nMoves all non-zero single-cell objects to the last row of the grid,\nmaintaining their relative horizontal order.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by moving non-zero single-cell objects to the last row,\n    maintaining their relative horizontal order.\n    \"\"\"\n    # Convert input_grid to a NumPy array\n    input_grid = np.array(input_grid)\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Iterate through each cell\n    for r in range(rows):\n        for c in range(cols):\n            if input_grid[r, c] != 0:\n                # Check for single-cell object\n                is_single = True\n                for i in range(-1, 2):\n                    for j in range(-1, 2):\n                        if (i != 0 or j != 0) and 0 <= r + i < rows and 0 <= c + j < cols:\n                            if input_grid[r + i, c + j] == input_grid[r, c]:\n                                is_single = False\n                                break\n                    if not is_single:\n                        break\n\n                # Move single-cell object to last row\n                if is_single:\n                    output_grid[rows - 1, c] = input_grid[r, c]\n                    if r != rows -1:\n                        output_grid[r,c] = 0\n\n    return output_grid.tolist()  # Convert back to list for consistency\n\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3095,
    "candidates_token_count": 369,
    "total_token_count": 3464,
    "cached_content_token_count": 0
  },
  "timing": {
    "response_time": 3.524961
  },
  "response_file": "012-response.json"
}