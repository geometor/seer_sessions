{
  "response_report": [
    {
      "response_file": "001-response.json",
      "token_usage": {
        "prompt": 1849,
        "candidates": 588,
        "total": 2437,
        "cached": 0
      },
      "response_time": 8.863226
    },
    {
      "response_file": "002-response.json",
      "token_usage": {
        "prompt": 2299,
        "candidates": 485,
        "total": 2784,
        "cached": 0
      },
      "response_time": 6.083777
    },
    {
      "response_file": "003-response.json",
      "token_usage": {
        "prompt": 1736,
        "candidates": 1298,
        "total": 3034,
        "cached": 0
      },
      "response_time": 16.678458
    },
    {
      "response_file": "004-response.json",
      "token_usage": {
        "prompt": 2830,
        "candidates": 431,
        "total": 3261,
        "cached": 0
      },
      "response_time": 5.762799
    },
    {
      "response_file": "005-response.json",
      "token_usage": {
        "prompt": 1682,
        "candidates": 1968,
        "total": 3650,
        "cached": 0
      },
      "response_time": 21.807525
    },
    {
      "response_file": "006-response.json",
      "token_usage": {
        "prompt": 3444,
        "candidates": 666,
        "total": 4110,
        "cached": 0
      },
      "response_time": 7.198238
    },
    {
      "response_file": "007-response.json",
      "token_usage": {
        "prompt": 1849,
        "candidates": 714,
        "total": 2563,
        "cached": 0
      },
      "response_time": 10.779223
    },
    {
      "response_file": "008-response.json",
      "token_usage": {
        "prompt": 2424,
        "candidates": 492,
        "total": 2916,
        "cached": 0
      },
      "response_time": 5.467373
    },
    {
      "response_file": "009-response.json",
      "token_usage": {
        "prompt": 1744,
        "candidates": 1093,
        "total": 2837,
        "cached": 0
      },
      "response_time": 11.124754
    },
    {
      "response_file": "010-response.json",
      "token_usage": {
        "prompt": 2643,
        "candidates": 424,
        "total": 3067,
        "cached": 0
      },
      "response_time": 4.125163
    },
    {
      "response_file": "011-response.json",
      "token_usage": {
        "prompt": 1677,
        "candidates": 2019,
        "total": 3696,
        "cached": 0
      },
      "response_time": 18.489186
    },
    {
      "response_file": "012-response.json",
      "token_usage": {
        "prompt": 3493,
        "candidates": 607,
        "total": 4100,
        "cached": 0
      },
      "response_time": 6.423032
    },
    {
      "response_file": "013-response.json",
      "token_usage": {
        "prompt": 1849,
        "candidates": 740,
        "total": 2589,
        "cached": 0
      },
      "response_time": 10.995489
    },
    {
      "response_file": "014-response.json",
      "token_usage": {
        "prompt": 2453,
        "candidates": 471,
        "total": 2924,
        "cached": 0
      },
      "response_time": 5.984822
    },
    {
      "response_file": "015-response.json",
      "token_usage": {
        "prompt": 1722,
        "candidates": 2912,
        "total": 4634,
        "cached": 0
      },
      "response_time": 32.219227
    },
    {
      "response_file": "016-response.json",
      "token_usage": {
        "prompt": 2824,
        "candidates": 976,
        "total": 3800,
        "cached": 0
      },
      "response_time": 14.383829
    },
    {
      "response_file": "017-response.json",
      "token_usage": {
        "prompt": 3596,
        "candidates": 580,
        "total": 4176,
        "cached": 0
      },
      "response_time": 5.158203
    },
    {
      "response_file": "018-response.json",
      "token_usage": {
        "prompt": 4422,
        "candidates": 604,
        "total": 5026,
        "cached": 0
      },
      "response_time": 7.638167
    }
  ],
  "test_report": {
    "002-py_01-train": [
      {
        "example": 1,
        "input": "1 1 2 5 0 0 0 5 0 0 0\n4 1 1 5 0 0 0 5 0 0 0\n4 4 1 5 0 0 0 5 0 0 0",
        "expected_output": "1 1 2 5 4 4 1 5 1 4 4\n4 1 1 5 4 1 1 5 1 1 4\n4 4 1 5 1 1 2 5 2 1 1",
        "transformed_output": "",
        "match": "ERROR: could not broadcast input array from shape (3,7) into shape (3,3)",
        "size_correct": "N/A",
        "color_palette_correct": "N/A",
        "correct_pixel_counts": "N/A",
        "pixels_off": "N/A",
        "percent_correct": "N/A"
      },
      {
        "example": 2,
        "input": "6 3 3 5 0 0 0 5 0 0 0\n6 3 3 5 0 0 0 5 0 0 0\n6 3 2 5 0 0 0 5 0 0 0",
        "expected_output": "6 3 3 5 6 6 6 5 2 3 6\n6 3 3 5 3 3 3 5 3 3 6\n6 3 2 5 2 3 3 5 3 3 6",
        "transformed_output": "",
        "match": "ERROR: could not broadcast input array from shape (3,7) into shape (3,3)",
        "size_correct": "N/A",
        "color_palette_correct": "N/A",
        "correct_pixel_counts": "N/A",
        "pixels_off": "N/A",
        "percent_correct": "N/A"
      },
      {
        "example": 3,
        "input": "2 7 8 5 0 0 0 5 0 0 0\n7 7 8 5 0 0 0 5 0 0 0\n8 8 8 5 0 0 0 5 0 0 0",
        "expected_output": "2 7 8 5 8 7 2 5 8 8 8\n7 7 8 5 8 7 7 5 8 7 7\n8 8 8 5 8 8 8 5 8 7 2",
        "transformed_output": "",
        "match": "ERROR: could not broadcast input array from shape (3,7) into shape (3,3)",
        "size_correct": "N/A",
        "color_palette_correct": "N/A",
        "correct_pixel_counts": "N/A",
        "pixels_off": "N/A",
        "percent_correct": "N/A"
      }
    ],
    "004-py_02-train": [
      {
        "example": 1,
        "input": "1 1 2 5 0 0 0 5 0 0 0\n4 1 1 5 0 0 0 5 0 0 0\n4 4 1 5 0 0 0 5 0 0 0",
        "expected_output": "1 1 2 5 4 4 1 5 1 4 4\n4 1 1 5 4 1 1 5 1 1 4\n4 4 1 5 1 1 2 5 2 1 1",
        "transformed_output": "0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 33,
        "percent_correct": 0.0
      },
      {
        "example": 2,
        "input": "6 3 3 5 0 0 0 5 0 0 0\n6 3 3 5 0 0 0 5 0 0 0\n6 3 2 5 0 0 0 5 0 0 0",
        "expected_output": "6 3 3 5 6 6 6 5 2 3 6\n6 3 3 5 3 3 3 5 3 3 6\n6 3 2 5 2 3 3 5 3 3 6",
        "transformed_output": "0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 33,
        "percent_correct": 0.0
      },
      {
        "example": 3,
        "input": "2 7 8 5 0 0 0 5 0 0 0\n7 7 8 5 0 0 0 5 0 0 0\n8 8 8 5 0 0 0 5 0 0 0",
        "expected_output": "2 7 8 5 8 7 2 5 8 8 8\n7 7 8 5 8 7 7 5 8 7 7\n8 8 8 5 8 8 8 5 8 7 2",
        "transformed_output": "0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 33,
        "percent_correct": 0.0
      }
    ],
    "005-py_03-train": [
      {
        "code_execution_error": "transform function not found"
      }
    ],
    "006-py_04-train": [
      {
        "example": 1,
        "input": "1 1 2 5 0 0 0 5 0 0 0\n4 1 1 5 0 0 0 5 0 0 0\n4 4 1 5 0 0 0 5 0 0 0",
        "expected_output": "1 1 2 5 4 4 1 5 1 4 4\n4 1 1 5 4 1 1 5 1 1 4\n4 4 1 5 1 1 2 5 2 1 1",
        "transformed_output": "1 1 2 5 0 0 0 0 5 0 0 0 0\n4 1 1 5 0 0 0 0 5 0 0 0 0\n4 4 1 5 0 0 0 0 5 0 0 0 0",
        "match": false,
        "size_correct": false,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": "N/A",
        "percent_correct": "N/A"
      },
      {
        "example": 2,
        "input": "6 3 3 5 0 0 0 5 0 0 0\n6 3 3 5 0 0 0 5 0 0 0\n6 3 2 5 0 0 0 5 0 0 0",
        "expected_output": "6 3 3 5 6 6 6 5 2 3 6\n6 3 3 5 3 3 3 5 3 3 6\n6 3 2 5 2 3 3 5 3 3 6",
        "transformed_output": "6 3 3 5 0 0 0 0 5 0 0 0 0\n6 3 3 5 0 0 0 0 5 0 0 0 0\n6 3 2 5 0 0 0 0 5 0 0 0 0",
        "match": false,
        "size_correct": false,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": "N/A",
        "percent_correct": "N/A"
      },
      {
        "example": 3,
        "input": "2 7 8 5 0 0 0 5 0 0 0\n7 7 8 5 0 0 0 5 0 0 0\n8 8 8 5 0 0 0 5 0 0 0",
        "expected_output": "2 7 8 5 8 7 2 5 8 8 8\n7 7 8 5 8 7 7 5 8 7 7\n8 8 8 5 8 8 8 5 8 7 2",
        "transformed_output": "2 7 8 5 0 0 0 0 5 0 0 0 0\n7 7 8 5 0 0 0 0 5 0 0 0 0\n8 8 8 5 0 0 0 0 5 0 0 0 0",
        "match": false,
        "size_correct": false,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": "N/A",
        "percent_correct": "N/A"
      }
    ],
    "008-py_05-train": [
      {
        "example": 1,
        "input": "1 1 2 5 0 0 0 5 0 0 0\n4 1 1 5 0 0 0 5 0 0 0\n4 4 1 5 0 0 0 5 0 0 0",
        "expected_output": "1 1 2 5 4 4 1 5 1 4 4\n4 1 1 5 4 1 1 5 1 1 4\n4 4 1 5 1 1 2 5 2 1 1",
        "transformed_output": "1 1 2 5 0 0 0 5 5 5 5\n4 1 1 5 0 0 0 5 5 5 5\n4 4 1 5 0 0 0 5 5 5 5",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 18,
        "percent_correct": 45.45454545454545
      },
      {
        "example": 2,
        "input": "6 3 3 5 0 0 0 5 0 0 0\n6 3 3 5 0 0 0 5 0 0 0\n6 3 2 5 0 0 0 5 0 0 0",
        "expected_output": "6 3 3 5 6 6 6 5 2 3 6\n6 3 3 5 3 3 3 5 3 3 6\n6 3 2 5 2 3 3 5 3 3 6",
        "transformed_output": "6 3 3 5 0 0 0 5 5 5 5\n6 3 3 5 0 0 0 5 5 5 5\n6 3 2 5 0 0 0 5 5 5 5",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 18,
        "percent_correct": 45.45454545454545
      },
      {
        "example": 3,
        "input": "2 7 8 5 0 0 0 5 0 0 0\n7 7 8 5 0 0 0 5 0 0 0\n8 8 8 5 0 0 0 5 0 0 0",
        "expected_output": "2 7 8 5 8 7 2 5 8 8 8\n7 7 8 5 8 7 7 5 8 7 7\n8 8 8 5 8 8 8 5 8 7 2",
        "transformed_output": "2 7 8 5 0 0 0 5 5 5 5\n7 7 8 5 0 0 0 5 5 5 5\n8 8 8 5 0 0 0 5 5 5 5",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 18,
        "percent_correct": 45.45454545454545
      }
    ],
    "010-py_06-train": [
      {
        "example": 1,
        "input": "1 1 2 5 0 0 0 5 0 0 0\n4 1 1 5 0 0 0 5 0 0 0\n4 4 1 5 0 0 0 5 0 0 0",
        "expected_output": "1 1 2 5 4 4 1 5 1 4 4\n4 1 1 5 4 1 1 5 1 1 4\n4 4 1 5 1 1 2 5 2 1 1",
        "transformed_output": "1 1 2 5 0 0 0 5 1 1 2\n4 1 1 5 0 0 0 5 4 1 1\n4 4 1 5 0 0 0 5 4 4 1",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 15,
        "percent_correct": 54.54545454545454
      },
      {
        "example": 2,
        "input": "6 3 3 5 0 0 0 5 0 0 0\n6 3 3 5 0 0 0 5 0 0 0\n6 3 2 5 0 0 0 5 0 0 0",
        "expected_output": "6 3 3 5 6 6 6 5 2 3 6\n6 3 3 5 3 3 3 5 3 3 6\n6 3 2 5 2 3 3 5 3 3 6",
        "transformed_output": "6 3 3 5 0 0 0 5 6 3 3\n6 3 3 5 0 0 0 5 6 3 3\n6 3 2 5 0 0 0 5 6 3 2",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 15,
        "percent_correct": 54.54545454545454
      },
      {
        "example": 3,
        "input": "2 7 8 5 0 0 0 5 0 0 0\n7 7 8 5 0 0 0 5 0 0 0\n8 8 8 5 0 0 0 5 0 0 0",
        "expected_output": "2 7 8 5 8 7 2 5 8 8 8\n7 7 8 5 8 7 7 5 8 7 7\n8 8 8 5 8 8 8 5 8 7 2",
        "transformed_output": "2 7 8 5 0 0 0 5 2 7 8\n7 7 8 5 0 0 0 5 7 7 8\n8 8 8 5 0 0 0 5 8 8 8",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 15,
        "percent_correct": 54.54545454545454
      }
    ],
    "011-py_07-train": [
      {
        "code_execution_error": "transform function not found"
      }
    ],
    "012-py_08-train": [
      {
        "example": 1,
        "input": "1 1 2 5 0 0 0 5 0 0 0\n4 1 1 5 0 0 0 5 0 0 0\n4 4 1 5 0 0 0 5 0 0 0",
        "expected_output": "1 1 2 5 4 4 1 5 1 4 4\n4 1 1 5 4 1 1 5 1 1 4\n4 4 1 5 1 1 2 5 2 1 1",
        "transformed_output": "1 1 2 5 1 1 2 5 1 1 2\n4 1 1 5 4 1 1 5 4 1 1\n4 4 1 5 4 4 1 5 4 4 1",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": true,
        "pixels_off": 12,
        "percent_correct": 63.63636363636363
      },
      {
        "example": 2,
        "input": "6 3 3 5 0 0 0 5 0 0 0\n6 3 3 5 0 0 0 5 0 0 0\n6 3 2 5 0 0 0 5 0 0 0",
        "expected_output": "6 3 3 5 6 6 6 5 2 3 6\n6 3 3 5 3 3 3 5 3 3 6\n6 3 2 5 2 3 3 5 3 3 6",
        "transformed_output": "6 3 3 5 6 3 3 5 6 3 3\n6 3 3 5 6 3 3 5 6 3 3\n6 3 2 5 6 3 2 5 6 3 2",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": true,
        "pixels_off": 11,
        "percent_correct": 66.66666666666666
      },
      {
        "example": 3,
        "input": "2 7 8 5 0 0 0 5 0 0 0\n7 7 8 5 0 0 0 5 0 0 0\n8 8 8 5 0 0 0 5 0 0 0",
        "expected_output": "2 7 8 5 8 7 2 5 8 8 8\n7 7 8 5 8 7 7 5 8 7 7\n8 8 8 5 8 8 8 5 8 7 2",
        "transformed_output": "2 7 8 5 2 7 8 5 2 7 8\n7 7 8 5 7 7 8 5 7 7 8\n8 8 8 5 8 8 8 5 8 8 8",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": true,
        "pixels_off": 10,
        "percent_correct": 69.6969696969697
      }
    ],
    "014-py_09-train": [
      {
        "example": 1,
        "input": "1 1 2 5 0 0 0 5 0 0 0\n4 1 1 5 0 0 0 5 0 0 0\n4 4 1 5 0 0 0 5 0 0 0",
        "expected_output": "1 1 2 5 4 4 1 5 1 4 4\n4 1 1 5 4 1 1 5 1 1 4\n4 4 1 5 1 1 2 5 2 1 1",
        "transformed_output": "5 0 0 1 1 2 5 1 1 2 5\n5 0 0 4 1 1 5 4 1 1 5\n5 0 0 4 4 1 5 4 4 1 5",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 27,
        "percent_correct": 18.181818181818183
      },
      {
        "example": 2,
        "input": "6 3 3 5 0 0 0 5 0 0 0\n6 3 3 5 0 0 0 5 0 0 0\n6 3 2 5 0 0 0 5 0 0 0",
        "expected_output": "6 3 3 5 6 6 6 5 2 3 6\n6 3 3 5 3 3 3 5 3 3 6\n6 3 2 5 2 3 3 5 3 3 6",
        "transformed_output": "5 0 0 6 3 3 5 6 3 3 5\n5 0 0 6 3 3 5 6 3 3 5\n5 0 0 6 3 2 5 6 3 2 5",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 27,
        "percent_correct": 18.181818181818183
      },
      {
        "example": 3,
        "input": "2 7 8 5 0 0 0 5 0 0 0\n7 7 8 5 0 0 0 5 0 0 0\n8 8 8 5 0 0 0 5 0 0 0",
        "expected_output": "2 7 8 5 8 7 2 5 8 8 8\n7 7 8 5 8 7 7 5 8 7 7\n8 8 8 5 8 8 8 5 8 7 2",
        "transformed_output": "5 0 0 2 7 8 5 2 7 8 5\n5 0 0 7 7 8 5 7 7 8 5\n5 0 0 8 8 8 5 8 8 8 5",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 29,
        "percent_correct": 12.121212121212121
      }
    ],
    "015-py_10-train": [
      {
        "code_execution_error": "transform function not found"
      }
    ],
    "017-py_11-train": [
      {
        "example": 1,
        "input": "1 1 2 5 0 0 0 5 0 0 0\n4 1 1 5 0 0 0 5 0 0 0\n4 4 1 5 0 0 0 5 0 0 0",
        "expected_output": "1 1 2 5 4 4 1 5 1 4 4\n4 1 1 5 4 1 1 5 1 1 4\n4 4 1 5 1 1 2 5 2 1 1",
        "transformed_output": "0 0 0 5 0 0 0 5 0 0 5\n0 0 0 5 0 0 0 5 0 0 5\n0 0 0 5 0 0 0 5 0 0 5",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 27,
        "percent_correct": 18.181818181818183
      },
      {
        "example": 2,
        "input": "6 3 3 5 0 0 0 5 0 0 0\n6 3 3 5 0 0 0 5 0 0 0\n6 3 2 5 0 0 0 5 0 0 0",
        "expected_output": "6 3 3 5 6 6 6 5 2 3 6\n6 3 3 5 3 3 3 5 3 3 6\n6 3 2 5 2 3 3 5 3 3 6",
        "transformed_output": "0 0 0 5 0 0 0 5 0 0 5\n0 0 0 5 0 0 0 5 0 0 5\n0 0 0 5 0 0 0 5 0 0 5",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 27,
        "percent_correct": 18.181818181818183
      },
      {
        "example": 3,
        "input": "2 7 8 5 0 0 0 5 0 0 0\n7 7 8 5 0 0 0 5 0 0 0\n8 8 8 5 0 0 0 5 0 0 0",
        "expected_output": "2 7 8 5 8 7 2 5 8 8 8\n7 7 8 5 8 7 7 5 8 7 7\n8 8 8 5 8 8 8 5 8 7 2",
        "transformed_output": "0 0 0 5 0 0 0 5 0 0 5\n0 0 0 5 0 0 0 5 0 0 5\n0 0 0 5 0 0 0 5 0 0 5",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 27,
        "percent_correct": 18.181818181818183
      }
    ],
    "018-py_12-train": [
      {
        "example": 1,
        "input": "1 1 2 5 0 0 0 5 0 0 0\n4 1 1 5 0 0 0 5 0 0 0\n4 4 1 5 0 0 0 5 0 0 0",
        "expected_output": "1 1 2 5 4 4 1 5 1 4 4\n4 1 1 5 4 1 1 5 1 1 4\n4 4 1 5 1 1 2 5 2 1 1",
        "transformed_output": "1 1 2 5 0 0 0 5 0 0 0\n4 1 1 5 0 0 0 5 0 0 0\n4 4 1 5 0 0 0 5 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 18,
        "percent_correct": 45.45454545454545
      },
      {
        "example": 2,
        "input": "6 3 3 5 0 0 0 5 0 0 0\n6 3 3 5 0 0 0 5 0 0 0\n6 3 2 5 0 0 0 5 0 0 0",
        "expected_output": "6 3 3 5 6 6 6 5 2 3 6\n6 3 3 5 3 3 3 5 3 3 6\n6 3 2 5 2 3 3 5 3 3 6",
        "transformed_output": "6 3 3 5 0 0 0 5 0 0 0\n6 3 3 5 0 0 0 5 0 0 0\n6 3 2 5 0 0 0 5 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 18,
        "percent_correct": 45.45454545454545
      },
      {
        "example": 3,
        "input": "2 7 8 5 0 0 0 5 0 0 0\n7 7 8 5 0 0 0 5 0 0 0\n8 8 8 5 0 0 0 5 0 0 0",
        "expected_output": "2 7 8 5 8 7 2 5 8 8 8\n7 7 8 5 8 7 7 5 8 7 7\n8 8 8 5 8 8 8 5 8 7 2",
        "transformed_output": "2 7 8 5 0 0 0 5 0 0 0\n7 7 8 5 0 0 0 5 0 0 0\n8 8 8 5 0 0 0 5 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 18,
        "percent_correct": 45.45454545454545
      }
    ]
  },
  "best_train_results": {
    "passed": 0,
    "total": 0
  },
  "best_test_results": {
    "passed": 0,
    "total": 0
  },
  "test_solved": false
}