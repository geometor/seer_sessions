{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid containing white (0) pixels on a gray (5) background into a 3x3 output grid. The output grid represents the presence and orientation of white pixels: red (2) for horizontal, yellow (4) for vertical, and white (0) if no white pixels are present.\n\"\"\"\n\nimport numpy as np\n\ndef find_white_pixels(grid):\n    \"\"\"Finds the coordinates of all white pixels in the grid.\"\"\"\n    return np.argwhere(grid == 0)\n\ndef has_horizontal_line(white_pixels):\n    \"\"\"Checks if the white pixels form a horizontal line (at least two adjacent).\"\"\"\n    if len(white_pixels) < 2:\n        return False\n    rows = white_pixels[:, 0]\n    cols = white_pixels[:, 1]\n    \n    # Check for adjacent columns in same row\n    for row in np.unique(rows):\n        cols_in_row = sorted(cols[rows == row])\n        for i in range(len(cols_in_row) - 1):\n            if cols_in_row[i+1] - cols_in_row[i] == 1:\n                return True\n    return False\n\n\ndef has_vertical_line(white_pixels):\n    \"\"\"Checks if the white pixels form a vertical line (at least two adjacent).\"\"\"\n    if len(white_pixels) < 2:\n        return False\n    rows = white_pixels[:, 0]\n    cols = white_pixels[:, 1]\n    \n    # Check for adjacent rows with same col\n    for col in np.unique(cols):\n        rows_in_col = sorted(rows[cols == col])\n        for i in range(len(rows_in_col) - 1):\n            if rows_in_col[i+1] - rows_in_col[i] == 1:\n                return True\n    return False\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.zeros((3, 3), dtype=int)\n\n    # Find white pixels\n    white_pixels = find_white_pixels(input_grid)\n\n    # If no white pixels, return all-white grid\n    if len(white_pixels) == 0:\n        return output_grid\n\n    # Check for horizontal and vertical lines\n    if has_horizontal_line(white_pixels):\n        output_grid[1, 1] = 2  # Center for horizontal\n    if has_vertical_line(white_pixels):\n        output_grid[1, 1] = 4 # Center for vertical\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5102,
    "candidates_token_count": 606,
    "total_token_count": 5708,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.991044,
  "response_file": "024-response.json"
}