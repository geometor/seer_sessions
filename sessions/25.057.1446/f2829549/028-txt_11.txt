import numpy as np

def analyze_example(input_grid, output_grid):
    input_grid = np.array(input_grid)
    output_grid = np.array(output_grid)

    input_shape = input_grid.shape
    output_shape = output_grid.shape
    analysis = {
        'input_shape': input_shape,
        'output_shape': output_shape,
        'columns': []
    }

    for j in range(input_shape[1]):
        column = input_grid[:, j]
        counts = {}
        for x in column:
            counts[x] = counts.get(x, 0) + 1

        predominant_color = None
        predominant_count = 0
        for color, count in counts.items():
            if count > predominant_count:
                predominant_count = count
                predominant_color = color

        column_analysis = {
            'index': j,
            'colors': list(counts.keys()),
            'predominant_color': predominant_color,
            'predominant_count': predominant_count,
            'output_column': output_grid[:, j].tolist() if j < output_shape[1] else None
        }
        analysis['columns'].append(column_analysis)

    return analysis

example_inputs = [
    [[0, 0, 5], [0, 1, 5], [0, 0, 5]],
    [[0, 0, 2], [0, 0, 2], [0, 0, 2]],
    [[0, 0, 0], [0, 2, 0], [0, 0, 0]],
]

example_outputs = [
    [[3, 3, 3], [3, 3, 3], [3, 3, 3]],
    [[3, 3, 3], [3, 3, 3], [3, 3, 3]],
    [[0, 0, 0], [3, 0, 0], [0, 0, 0]],
]

results = []
for i in range(len(example_inputs)):
    analysis = analyze_example(example_inputs[i], example_outputs[i])
    results.append(analysis)

print(results)
