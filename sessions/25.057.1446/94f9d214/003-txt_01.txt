import numpy as np

def transform(input_grid):
    """Transforms an input grid to an output grid based on the defined rule."""

    # Get dimensions of the input grid
    rows, cols = input_grid.shape

    # Initialize the output grid with the same width and half the height, filled with white (0)
    output_grid = np.zeros((rows // 2, cols), dtype=int)

    # Iterate through the top half of the input grid
    for i in range(rows // 2):
        for j in range(cols):
            # Check if the pixel in the input grid is not white (0)
            if input_grid[i, j] != 0:
                # If not white, set the corresponding output pixel to red (2)
                output_grid[i, j] = 2

    return output_grid

# Example grids from the prompt (assuming they are defined as numpy arrays)
example_grids = [
  (np.array([[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 0, 0]]), np.array([[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])),
  (np.array([[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [4, 0, 0, 0], [0, 0, 0, 0], [0, 0, 9, 0]]), np.array([[0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 0, 0]])),
    (np.array([[7, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 3, 0, 0], [0, 0, 0, 0]]), np.array([[2, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])),
]

for i, (input_grid, expected_output) in enumerate(example_grids):
    predicted_output = transform(input_grid)
    print(f"Example {i+1}:")
    print(f"  Input:\n{input_grid}")
    print(f"  Expected Output:\n{expected_output}")
    print(f"  Predicted Output:\n{predicted_output}")
    print(f"  Match: {np.array_equal(predicted_output, expected_output)}")
    print("-" * 20)

# check that test input provides same result
task_data = {
    "train": [
        {
            "input": [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 0, 0]],
            "output": [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
        },
        {
            "input": [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [4, 0, 0, 0], [0, 0, 0, 0], [0, 0, 9, 0]],
            "output": [[0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 0, 0]],
        },
        {
            "input": [[7, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 3, 0, 0], [0, 0, 0, 0]],
            "output": [[2, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
        },
    ],
    "test": [
        {
            "input": [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 8, 0, 0], [0, 0, 0, 0]],
            "output": [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
        }
    ],
}
test_input = np.array(task_data["test"][0]["input"])
print("Test Input Predicted Output:")
print(transform(test_input))