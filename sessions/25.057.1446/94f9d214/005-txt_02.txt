import numpy as np

# Example 1 data (from the previous prompt)
input_grid1 = np.array([
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 7, 7, 0, 0, 0, 0],
    [0, 0, 0, 0, 7, 7, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
])
output_grid1 = np.array([
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
])

# Example from a failure case (if available - assuming a different input/output)

input_grid2 = np.array([
    [0, 0, 0, 0, 0, 0],
    [0, 5, 5, 5, 0, 0],
    [0, 5, 5, 5, 0, 0],
    [0, 5, 5, 5, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0]
])

output_grid2 = np.array([
    [0, 0, 0, 0, 0, 0],
    [0, 2, 2, 2, 0, 0],
    [0, 2, 2, 2, 0, 0],
    [0, 2, 2, 2, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
])


def analyze_grid(grid, name):
    unique, counts = np.unique(grid, return_counts=True)
    color_counts = dict(zip(unique, counts))
    print(f"Analysis of {name}:")
    print(f"  Dimensions: {grid.shape}")
    print(f"  Color Counts: {color_counts}")

analyze_grid(input_grid1, "Input Grid 1")
analyze_grid(output_grid1, "Output Grid 1")
analyze_grid(input_grid2, "Input Grid 2")
analyze_grid(output_grid2, "Output Grid 2")
