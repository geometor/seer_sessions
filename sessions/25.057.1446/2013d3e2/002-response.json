{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nExtracts the central non-zero colored region from the input grid.\n\"\"\"\n\nimport numpy as np\n\ndef get_core_region_bounds(grid):\n    \"\"\"\n    Finds the min/max row and col indices of non-zero pixels.\n    \"\"\"\n    rows, cols = np.where(grid != 0)\n    if len(rows) == 0:  # Handle empty grid case (all zeros)\n        return None, None, None, None\n    min_row, max_row = np.min(rows), np.max(rows)\n    min_col, max_col = np.min(cols), np.max(cols)\n    return min_row, max_row, min_col, max_col\n\ndef transform(input_grid):\n    \"\"\"\n    Extracts the smallest subgrid containing all non-zero pixels.\n    \"\"\"\n    # Convert input grid to a NumPy array for easier manipulation\n    grid = np.array(input_grid)\n\n    # 1. Identify the Core Region & Determine Boundaries:\n    min_row, max_row, min_col, max_col = get_core_region_bounds(grid)\n    \n    # Handle the case where the input grid contains only zeros\n    if min_row is None:\n        return [[]] # Return an empty grid\n\n    # 2. Extract Subgrid:\n    output_grid = grid[min_row:max_row+1, min_col:max_col+1].tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2279,
    "candidates_token_count": 349,
    "total_token_count": 2628,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 5.305296,
  "response_file": "002-response.json"
}