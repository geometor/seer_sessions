{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies distinct colored regions in the input grid, preserves their original colors, and reconstructs an output grid preserving the relative positions and shapes of these regions. The output grid's size is determined dynamically based on the maximum relative row and column indices of the starting positions of the regions.\n\"\"\"\n\nimport numpy as np\n\ndef find_regions(grid):\n    \"\"\"Finds all distinct connected regions (objects) in the grid.\"\"\"\n    regions = {}\n    visited = set()\n    rows, cols = grid.shape\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def dfs(r, c, color, region_coords):\n        if (r, c) in visited or not is_valid(r, c) or grid[r, c] != color:\n            return\n        visited.add((r, c))\n        region_coords.append((r, c))\n        for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            dfs(r + dr, c + dc, color, region_coords)\n\n    for r in range(rows):\n        for c in range(cols):\n            if (r, c) not in visited:\n                color = grid[r, c]\n                if color != 0:  # Ignore white\n                    region_coords = []\n                    dfs(r, c, color, region_coords)\n                    # Use top-left as key\n                    min_r = min(coord[0] for coord in region_coords)\n                    min_c = min(coord[1] for coord in region_coords)\n                    regions[(min_r, min_c)] = (color, region_coords)\n    return regions\n\ndef determine_output_size(regions):\n    \"\"\"Determines the output grid size based on region positions.\"\"\"\n    if not regions:\n        return 0, 0\n    max_r = 0\n    max_c = 0\n    for r, c in regions:\n        max_r = max(max_r, r)\n        max_c = max(max_c, c)\n    return max_r + 1, max_c + 1\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the ARC task rules.\"\"\"\n    # Find regions in the input grid\n    regions = find_regions(np.array(input_grid))\n\n    # Determine output size dynamically\n    output_rows, output_cols = determine_output_size(regions)\n    output_grid = np.zeros((output_rows, output_cols), dtype=int)\n\n    # Reconstruct the output grid\n    for (start_r, start_c), (color, region_coords) in regions.items():\n        for r, c in region_coords:\n            # Calculate relative position\n            rel_r = r - start_r\n            rel_c = c - start_c\n\n            # Check if the relative position is within the output bounds\n            if start_r + rel_r < output_rows and start_c + rel_c < output_cols:\n              output_grid[start_r + rel_r, start_c + rel_c] = color\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2957,
    "candidates_token_count": 747,
    "total_token_count": 3704,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.319235,
  "response_file": "016-response.json"
}