import numpy as np

def find_blue_column(grid):
    # Find the column index where all elements are blue (1)
    rows, cols = grid.shape
    for j in range(cols):
        if all(grid[:, j] == 1):
            return j
    return -1  # Return -1 if no such column is found

def transform(input_grid):
    # initialize output_grid
    rows, cols = input_grid.shape
    output_grid = np.zeros((rows, 3), dtype=int)

    # Find the central blue column
    blue_column_index = find_blue_column(input_grid)

    if blue_column_index != -1:
        # Iterate through each row
        for i in range(rows):
            # Set pixels adjacent to the blue column to azure (8), handling edge cases.
            if i > 0:
              if blue_column_index > 0 :
                  output_grid[i, 1 - (3- (blue_column_index-0)) ] = 8
              if blue_column_index < cols - 1:
                  output_grid[i, 1 + (blue_column_index + 1 - blue_column_index) ] = 8


    return output_grid

def show_result(input_grid, expected_output, actual_output):
    print("Input:")
    print(input_grid)
    print("Expected Output:")
    print(expected_output)
    print("Actual Output:")
    print(actual_output)
    print("Match:", np.array_equal(expected_output, actual_output))
    print("-" * 20)

# Provided training examples
train_tasks = [
    {
        "input": np.array([[8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
                           [8, 8, 8, 1, 8, 8, 8, 8, 8, 8],
                           [8, 8, 8, 1, 8, 8, 8, 8, 8, 8],
                           [8, 8, 8, 8, 8, 8, 8, 8, 8, 8]]),
        "output": np.array([[0, 0, 0],
                           [0, 8, 0],
                           [0, 8, 0],
                           [0, 0, 0]])
    },
    {
        "input": np.array([[8, 8, 8, 8, 8, 8, 8],
                           [8, 8, 8, 8, 1, 8, 8],
                           [8, 8, 8, 8, 1, 8, 8],
                           [8, 8, 8, 8, 8, 8, 8]]),
        "output": np.array([[0, 0, 0],
                           [0, 8, 0],
                           [0, 8, 0],
                           [0, 0, 0]])
    },
    {
        "input": np.array([[8, 8, 8, 8, 8, 8],
                           [8, 1, 8, 8, 8, 8],
                           [8, 1, 8, 8, 8, 8],
                           [8, 8, 8, 8, 8, 8]]),
        "output": np.array([[0, 0, 0],
                           [0, 8, 0],
                           [0, 8, 0],
                           [0, 0, 0]])
    },
    {
          "input": np.array([[7, 8, 7, 8, 7, 8, 8, 8, 7, 7],
                            [8, 7, 8, 7, 8, 7, 8, 8, 8, 8],
                            [7, 7, 7, 7, 7, 1, 8, 8, 8, 8],
                            [7, 8, 7, 8, 7, 8, 8, 8, 7, 8],
                            [8, 7, 8, 7, 8, 7, 8, 8, 7, 7]]),
          "output": np.array([[0, 0, 0],
                            [0, 0, 0],
                            [0, 8, 0],
                            [0, 0, 0],
                            [0, 0, 0]])
    }
]

# Analyze each training example
for i, task in enumerate(train_tasks):
    input_grid = task["input"]
    expected_output = task["output"]
    actual_output = transform(input_grid)
    print(f"Training Example {i + 1}:")
    show_result(input_grid, expected_output, actual_output)