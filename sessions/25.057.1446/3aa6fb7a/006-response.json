{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid by changing one pixel in each azure (8) cluster to blue (1).\nThe changed pixel is the right-most pixel of the top row if the cluster spans only one or two rows. If the cluster spans more than two rows, the right-most pixel of the bottom row is changed.\n\"\"\"\n\nimport numpy as np\n\ndef find_clusters(grid, color):\n    \"\"\"\n    Finds clusters of a specific color in the grid.\n    \"\"\"\n    visited = np.zeros_like(grid, dtype=bool)\n    clusters = []\n\n    def dfs(row, col, current_cluster):\n        if (row < 0 or row >= grid.shape[0] or col < 0 or col >= grid.shape[1] or\n                visited[row, col] or grid[row, col] != color):\n            return\n        visited[row, col] = True\n        current_cluster.append((row, col))\n        dfs(row + 1, col, current_cluster)\n        dfs(row - 1, col, current_cluster)\n        dfs(row, col + 1, current_cluster)\n        dfs(row, col - 1, current_cluster)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] == color and not visited[row, col]:\n                current_cluster = []\n                dfs(row, col, current_cluster)\n                clusters.append(current_cluster)\n    return clusters\n\ndef get_cluster_top_rightmost(cluster):\n    \"\"\"\n    Finds the right-most pixel in the top row of a cluster.\n    \"\"\"\n    top_row = min(pixel[0] for pixel in cluster)\n    top_row_pixels = [pixel for pixel in cluster if pixel[0] == top_row]\n    rightmost_pixel = max(top_row_pixels, key=lambda x: x[1])\n    return rightmost_pixel\n  \ndef get_cluster_bottom_rightmost(cluster):\n    \"\"\"\n    Finds the right-most pixel in the bottom row of a cluster.\n    \"\"\"\n    bottom_row = max(pixel[0] for pixel in cluster)\n    bottom_row_pixels = [pixel for pixel in cluster if pixel[0] == bottom_row]\n    rightmost_pixel = max(bottom_row_pixels, key=lambda x: x[1])\n    return rightmost_pixel\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n\n    # find azure clusters\n    azure_clusters = find_clusters(input_grid, 8)\n\n    # change output pixels\n    for cluster in azure_clusters:\n        # determine row span of the cluster\n        rows = set([pixel[0] for pixel in cluster])\n        row_span = len(rows)\n        \n        # Get the right-most pixel on the top or bottom row based on row span\n        if row_span <= 2:\n            change_pixel = get_cluster_top_rightmost(cluster)\n        else:\n           # find rightmost pixel on *bottom* row\n            change_pixel = get_cluster_bottom_rightmost(cluster)\n\n        output_grid[change_pixel] = 1\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3352,
    "candidates_token_count": 774,
    "total_token_count": 4126,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.618566,
  "response_file": "006-response.json"
}