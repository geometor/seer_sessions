import numpy as np

def find_clusters(grid, color):
    """
    Finds clusters of a specific color in the grid.  (Copied from provided code)
    """
    visited = np.zeros_like(grid, dtype=bool)
    clusters = []

    def dfs(row, col, current_cluster):
        if (row < 0 or row >= grid.shape[0] or col < 0 or col >= grid.shape[1] or
                visited[row, col] or grid[row, col] != color):
            return
        visited[row, col] = True
        current_cluster.append((row, col))
        dfs(row + 1, col, current_cluster)
        dfs(row - 1, col, current_cluster)
        dfs(row, col + 1, current_cluster)
        dfs(row, col - 1, current_cluster)

    for row in range(grid.shape[0]):
        for col in range(grid.shape[1]):
            if grid[row, col] == color and not visited[row, col]:
                current_cluster = []
                dfs(row, col, current_cluster)
                clusters.append(current_cluster)
    return clusters

def analyze_example(input_grid, output_grid):
    """
    Analyzes a single input/output pair to identify the changed pixel.
    """
    input_grid = np.array(input_grid)
    output_grid = np.array(output_grid)
    diff = output_grid - input_grid
    changed_pixels = np.argwhere(diff != 0)

    if len(changed_pixels) == 0:
        return "No change", None, None

    if len(changed_pixels) > 1:
        return "Multiple changes", None, None #should not happen with this task

    changed_pixel = changed_pixels[0]
    row, col = changed_pixel
    original_color = input_grid[row, col]
    new_color = output_grid[row, col]

    #find the clusters
    clusters = find_clusters(input_grid, 8)

    #find the cluster with the changed pixel
    changed_cluster = None
    for cluster in clusters:
      for pixel in cluster:
        if pixel[0] == row and pixel[1] == col:
          changed_cluster = cluster
          break

    if changed_cluster is None:
      return "Change not in cluster", None, None

    #relative position
    top_left = min(changed_cluster)
    relative_position = (row-top_left[0], col-top_left[1])

    return original_color, new_color, relative_position

task_data = {
    "train": [
        {
            "input": [[8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 8, 8]],
            "output": [[8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 1, 0, 0, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 8, 8]],
        },
        {
            "input": [[0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 1, 0, 0, 0, 0, 0, 0]],
            "output": [[0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0]],
        },
        {
            "input": [[0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1]],
            "output": [[0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]],
        },
]
}

reports = []
for example in task_data['train']:
  input_grid = example['input']
  output_grid = example['output']
  original_color, new_color, relative_position = analyze_example(input_grid, output_grid)
  reports.append(
      {
          'original_color': original_color,
          'new_color': new_color,
          'relative_position': relative_position
      }
  )

for i, report in enumerate(reports):
  print(f"Example {i+1}:")
  print(report)
  print("-" * 20)