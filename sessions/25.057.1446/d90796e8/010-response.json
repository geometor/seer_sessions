{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Rows:** Examine each row of the input grid.\n2.  **Identify Green Rows**: Find any horizontal row containing one or more green (3) pixels.\n3.  **Check for Vertical Adjacency:** For each green row identified, inspect the rows directly above and below it.\n4.  **Conditional Row Transformation:** If *any* red pixel (2) is found in a vertically adjacent row (directly above or below any green pixel in the green row), change *all* green pixels (3) in that identified green row to azure (8).\n5.  **Preserve Other Pixels:** All other pixels in the grid that are not part of a transformed green row retain their original values.\n6.  **Output:** Create an output grid reflecting these changes.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of input\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Iterate through each row\n    for row_index in range(rows):\n        row = input_grid[row_index]\n\n        # Check if the row contains any green pixels (3)\n        if 3 in row:\n            # Check for vertically adjacent red pixels\n            red_adjacent = False\n            if row_index > 0:\n                above_row = input_grid[row_index - 1]\n                if 2 in above_row:\n                    red_adjacent = True\n            if row_index < rows - 1:\n                below_row = input_grid[row_index + 1]\n                if 2 in below_row:\n                    red_adjacent = True\n\n            # If red is vertically adjacent, change all greens in the row to azure\n            if red_adjacent:\n                for col_index in range(cols):\n                    if output_grid[row_index, col_index] == 3:\n                        output_grid[row_index, col_index] = 8\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2530,
    "candidates_token_count": 462,
    "total_token_count": 2992,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 4.8311,
  "response_file": "010-response.json"
}