{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid by placing blue cells (color 1) near isolated azure cells (color 8).\nThe topmost isolated azure cell gets a blue cell to its right, and all other isolated azure cells get a blue cell to their left.\n\"\"\"\n\nimport numpy as np\n\ndef find_contiguous_objects(grid, color):\n    \"\"\"\n    Finds contiguous objects of a given color in the grid.\n\n    Args:\n    grid (numpy.ndarray): The input grid.\n    color (int): The color to look for.\n\n    Returns:\n    list: A list of lists, where each inner list contains (row, col) tuples\n          representing a contiguous object.\n    \"\"\"\n    objects = []\n    visited = set()\n    rows, cols = grid.shape\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def dfs(r, c, current_object):\n        if (r, c) in visited or not is_valid(r, c) or grid[r, c] != color:\n            return\n        visited.add((r, c))\n        current_object.append((r, c))\n        # Check all 8 neighbors (including diagonals)\n        for dr in [-1, 0, 1]:\n            for dc in [-1, 0, 1]:\n                if dr == 0 and dc == 0:\n                    continue\n                dfs(r + dr, c + dc, current_object)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == color and (r, c) not in visited:\n                current_object = []\n                dfs(r, c, current_object)\n                objects.append(current_object)\n    return objects\n\ndef find_isolated_cells(grid, color):\n    \"\"\"Finds isolated cells of a given color, considering diagonal adjacency.\"\"\"\n    objects = find_contiguous_objects(grid, color)\n    isolated_cells = []\n    for obj in objects:\n        if len(obj) == 1:\n            isolated_cells.extend(obj)  # Use extend since obj is a list of tuples\n    return isolated_cells\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the specified rule.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = output_grid.shape\n\n    # Find isolated azure (color 8) cells\n    isolated_azure_cells = find_isolated_cells(input_grid, 8)\n\n    # Sort isolated cells by row\n    isolated_azure_cells.sort()\n\n    # Apply the transformation based on the position of isolated azure cells\n    if isolated_azure_cells:\n        # Top isolated azure cell: place blue cell to the right\n        top_azure_row, top_azure_col = isolated_azure_cells[0]\n        if top_azure_col + 1 < cols:  # Check bounds\n            output_grid[top_azure_row, top_azure_col + 1] = 1  # Assign the value\n\n        # All other isolated azure cells: place blue cell to the left\n        for i in range(1, len(isolated_azure_cells)):\n            azure_row, azure_col = isolated_azure_cells[i]\n            if azure_col - 1 >= 0:  # Check bounds\n                output_grid[azure_row, azure_col - 1] = 1  # Assign the value\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3004,
    "candidates_token_count": 814,
    "total_token_count": 3818,
    "cached_content_token_count": 0
  },
  "timing": {
    "response_time": 7.190435
  },
  "response_file": "008-response.json"
}