{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\ndef find_objects(grid, color):\n    \"\"\"Finds objects of a specific color in the grid.\"\"\"\n    objects = []\n    visited = set()\n\n    def dfs(row, col):\n        \"\"\"Depth-first search to find contiguous regions.\"\"\"\n        if (row, col) in visited or not (0 <= row < grid.shape[0] and 0 <= col < grid.shape[1]) or grid[row, col] != color:\n            return []\n        visited.add((row, col))\n        region = [(row, col)]\n        region.extend(dfs(row + 1, col))\n        region.extend(dfs(row - 1, col))\n        region.extend(dfs(row, col + 1))\n        region.extend(dfs(row, col - 1))\n        return region\n\n    for i in range(grid.shape[0]):\n        for j in range(grid.shape[1]):\n            if grid[i, j] == color and (i, j) not in visited:\n                objects.append(dfs(i, j))\n    return objects\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the described rule.  Azure (color 8) objects are identified, and blue (color 1) cells are placed adjacent to specific azure objects based on their shape and location. The logic prioritizes placements to avoid duplicates.\"\"\"\n    output_grid = np.copy(input_grid)\n    azure_objects = find_objects(input_grid, 8)\n    blue_placed = set()  # Keep track of where blue cells have been placed.\n\n    # Iterate through azure objects to find L-shapes and single cells\n    for obj in azure_objects:\n        min_row = min(r for r, c in obj)\n        min_col = min(c for r, c in obj)\n        max_row = max(r for r,c in obj)\n        max_col = max(c for r,c in obj)\n\n        # Check for \"L\" shape:  [[8, 8], [0, 8]] or [[0,8],[8,8]] (top of L)\n        if ( (min_row, min_col) in obj and (min_row, min_col + 1) in obj and\n             (min_row + 1, min_col) not in obj and (min_row +1, min_col + 1) in obj\n             and (min_row, min_col-1) not in obj ):\n\n            if (min_row+1, min_col-1) not in blue_placed:\n              output_grid[min_row+1, min_col - 1] = 1\n              blue_placed.add((min_row+1, min_col -1))\n              continue #Prioritize\n\n        # Check for \"L\" shape: [[8, 8], [8, 0]] (top of L)\n        if ( (min_row, min_col) in obj and (min_row, min_col + 1) in obj and\n             (min_row + 1, min_col) in obj and (min_row +1, min_col + 1) not in obj\n             and (min_row, min_col+2) not in obj ):\n             if (min_row, min_col+2) not in blue_placed:\n                output_grid[min_row, min_col + 2] = 1\n                blue_placed.add((min_row, min_col+2))\n                continue #Prioritize\n\n\n        # Check for single azure cells\n        if len(obj) == 1:\n            row, col = obj[0]\n            # Check left neighbor, then right neighbor. Prioritize left placement\n            if col > 0 and input_grid[row, col - 1] == 0:\n                if (row, col - 1) not in blue_placed:\n                    output_grid[row, col - 1] = 1\n                    blue_placed.add((row, col - 1))\n                    continue #Prioritize\n\n            elif col < input_grid.shape[1] - 1 and input_grid[row, col + 1] == 0:\n                if (row, col + 1) not in blue_placed:\n                    output_grid[row, col + 1] = 1\n                    blue_placed.add((row, col + 1))\n                    continue #Prioritize\n\n\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4496,
    "candidates_token_count": 1040,
    "total_token_count": 5536,
    "cached_content_token_count": 0
  },
  "timing": {
    "response_time": 9.912349
  },
  "response_file": "006-response.json"
}