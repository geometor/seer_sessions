{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies clusters of azure (8) pixels in the input grid and changes\nthe color of all pixels in the column of the left-most azure pixel in the\nvertical middle of each cluster to blue (1), but only for the rows that are\npart of the cluster.\n\"\"\"\n\nimport numpy as np\n\ndef get_clusters(grid, color):\n    \"\"\"\n    Finds clusters of connected pixels with the specified color.\n    \"\"\"\n    visited = np.zeros_like(grid, dtype=bool)\n    clusters = []\n\n    def dfs(row, col, current_cluster):\n        if (row < 0 or row >= grid.shape[0] or col < 0 or col >= grid.shape[1] or\n                visited[row, col] or grid[row, col] != color):\n            return\n        visited[row, col] = True\n        current_cluster.append((row, col))\n        dfs(row + 1, col, current_cluster)\n        dfs(row - 1, col, current_cluster)\n        dfs(row, col + 1, current_cluster)\n        dfs(row, col - 1, current_cluster)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] == color and not visited[row, col]:\n                current_cluster = []\n                dfs(row, col, current_cluster)\n                clusters.append(current_cluster)\n    return clusters\n\ndef find_target_column(cluster):\n    \"\"\"\n    Finds the column index of the left-most pixel in the vertical middle of a cluster.\n    \"\"\"\n    if not cluster:\n        return None\n\n    # Find min and max row\n    min_row = min(p[0] for p in cluster)\n    max_row = max(p[0] for p in cluster)\n\n    # Calculate vertical middle\n    vertical_mid = (min_row + max_row) // 2\n\n    # Get all pixels in the middle row\n    middle_pixels = [p for p in cluster if p[0] == vertical_mid]\n\n    # Sort middle pixels by column to find the left-most and return its column\n    if middle_pixels:\n        leftmost_pixel = sorted(middle_pixels, key=lambda x: x[1])[0]\n        return leftmost_pixel[1], min_row, max_row\n    else:\n        return None, None, None\n\n\ndef transform(input_grid):\n    # Initialize output_grid\n    output_grid = np.copy(input_grid)\n\n    # Find clusters of azure pixels\n    azure_clusters = get_clusters(input_grid, 8)\n\n    # Find and change color of the target pixels in each cluster\n    for cluster in azure_clusters:\n        target_column, min_row, max_row = find_target_column(cluster)\n        if target_column is not None:\n            # Change color of all pixels in the target column within the cluster's vertical extent\n            for row in range(min_row, max_row + 1):\n                if (row, target_column) in cluster:\n                    output_grid[row, target_column] = 1\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3041,
    "candidates_token_count": 749,
    "total_token_count": 3790,
    "cached_content_token_count": 0
  },
  "response_time": 7.248029,
  "response_file": "012-response.json"
}