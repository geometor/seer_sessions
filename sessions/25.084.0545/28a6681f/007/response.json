{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Preserve Boundaries:** The top and bottom rows of the input grid remain unchanged in the output grid.\n\n2.  **Inner Row Transformation:** For each row from the second row to the second-to-last row:\n    *   Iterate through the row from left to right.\n    *   Identify contiguous segments of pixels with the same color.\n    *   For each segment:\n        *   Check if there is space available to the left (the segment is *not* at the beginning of the row).\n        *   If the left adjacent pixel has a different color AND there is at least one pixel with a different color to the right of the segment:\n            *   Shift every pixel within the segment to the left by one position.\n            *   The vacated position to the far right of the shifted segment will now contain the value immediately to the right of the original segment.\n            *  After shifting the segment one position to the left, the next position to evaluate for shifting should be one less than the previous start position.\n    * If no different color exists to the right of the segment (all values to the right until the end of row are the same color) do not shift.\n\n3. Repeat Step 2 for every inner row.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the observed rule.\"\"\"\n    rows, cols = input_grid.shape\n    output_grid = np.copy(input_grid)\n\n    # Iterate through inner rows\n    for i in range(1, rows - 1):\n        j = 0\n        while j < cols:\n            # Find consecutive same-color segments\n            start = j\n            while j + 1 < cols and input_grid[i, j] == input_grid[i, j + 1]:\n                j += 1\n            end = j\n\n            # Check for shifting conditions\n            while True:\n                if start > 0 and input_grid[i, start-1] != input_grid[i, start] and end + 1 < cols:\n                    #Different color exists on the right side\n                    \n                    # Shift the segment to the left\n                    for k in range(start, end + 1):\n                        output_grid[i, k - 1] = input_grid[i, k]\n                    output_grid[i, end] = input_grid[i, end + 1]\n                    start -= 1\n                    end -= 1\n                else:\n                    break\n            \n            j = start + 1 # start evaluating for shift from the new position\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2993,
    "candidates_token_count": 585,
    "total_token_count": 3578,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.485952
}