{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  Find the Outer Yellow Boundary: Locate the largest rectangular region formed by yellow (color 4) pixels. If no such region exists, no changes are performed.\n2.  Identify Connected Blue Regions: Starting from the yellow boundary, find all blue (color 1) pixels that are directly connected (up, down, left, or right) to the boundary or to other connected blue pixels. Orange pixels are considered a \"wall\". Any blue pixels that are not connected, or their connection is broken by orange, are not included.\n3.  Construct Output: Create a new grid, copying only the yellow boundary and the connected blue regions identified.\n4. The output grid is obtained from a subgrid that is the outer boundary from the original input grid.\n\"\"\"\n\nimport numpy as np\n\ndef find_outer_rectangle(grid, color):\n    \"\"\"Finds the coordinates of the largest outer rectangle of the specified color.\"\"\"\n    rows, cols = np.where(grid == color)\n    if len(rows) == 0:\n        return None  # No rectangle found\n    min_row, max_row = np.min(rows), np.max(rows)\n    min_col, max_col = np.min(cols), np.max(cols)\n    return (min_row, min_col), (max_row, max_col)\n\ndef get_connected_component(grid, start_row, start_col, color, boundary):\n    \"\"\"Gets all pixels connected to the start using Breadth First Search, considering orange as a wall.\"\"\"\n\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    pixels = []\n    queue = [(start_row, start_col)]\n    visited[start_row, start_col] = True\n    (min_row, min_col), (max_row, max_col) = boundary\n\n    while queue:\n        row, col = queue.pop(0)\n        pixels.append((row,col))\n\n        # Check neighbors (up, down, left, right)\n        neighbors = []\n        if row > 0:\n            neighbors.append( (row - 1, col))\n        if row < rows - 1:\n            neighbors.append( (row + 1, col) )\n        if col > 0:\n            neighbors.append( (row, col - 1))\n        if col < cols - 1:\n            neighbors.append( (row, col + 1) )\n\n        for n_row, n_col in neighbors:\n            if not visited[n_row, n_col]:\n                if grid[n_row, n_col] == color: #check same color\n                    visited[n_row, n_col] = True\n                    queue.append((n_row, n_col))\n                elif grid[n_row,n_col] == 4: #check if is yellow\n                    visited[n_row, n_col] = True\n                    queue.append((n_row,n_col))\n                elif grid[n_row,n_col] != 7 and min_row <= n_row <= max_row and min_col <= n_col <= max_col:  # Check if is not orange and within boundary\n                    visited[n_row,n_col] = True #mark as visited so we don't check it again\n                    \n\n\n    return pixels\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid by keeping the outer yellow rectangle and connected blue pixels, treating orange as a wall.\"\"\"\n\n    input_grid = np.array(input_grid)\n    yellow_rect = find_outer_rectangle(input_grid, 4)\n\n    if yellow_rect is None:\n        return input_grid.tolist()  # No transformation if no yellow rectangle\n\n    (min_row, min_col), (max_row, max_col) = yellow_rect\n    output_grid = np.zeros((max_row - min_row + 1, max_col - min_col + 1), dtype=int)\n\n    #fill output grid with yellow and blue pixels\n    for i in range(min_row, max_row+1):\n        for j in range(min_col, max_col + 1):\n            if input_grid[i,j] == 4:\n                output_grid[i-min_row,j-min_col] = 4\n            elif input_grid[i,j] == 1:\n                 # Get connected component from the boundary.\n                connected_pixels = []\n\n                #check top\n                if i > 0 and input_grid[i-1,j] == 4:\n                    connected_pixels.extend(get_connected_component(input_grid,i,j,1, yellow_rect))\n\n                #check bottom\n                if i < input_grid.shape[0]-1 and input_grid[i+1,j] == 4:\n                    connected_pixels.extend(get_connected_component(input_grid, i, j, 1, yellow_rect))\n\n                #check left\n                if j > 0 and input_grid[i, j-1] == 4:\n                    connected_pixels.extend(get_connected_component(input_grid, i, j, 1, yellow_rect))\n\n                #check right\n                if j < input_grid.shape[1]-1 and input_grid[i,j+1] == 4:\n                        connected_pixels.extend(get_connected_component(input_grid, i, j, 1, yellow_rect))\n\n\n                if len(connected_pixels) > 0:\n                    for r,c in connected_pixels:\n                         if min_row <= r <= max_row and min_col <= c <= max_col: #check that the pixels are within the boundary, otherwise can write outside bounds\n                            output_grid[r-min_row,c-min_col] = 1\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 1003,
            "end_index": 1159,
            "uri": "https://github.com/LostXine/LLaRA",
            "license_": ""
          },
          {
            "start_index": 1696,
            "end_index": 1986,
            "uri": "https://github.com/MaksymilianLosinski/minesweeper-solver",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3098,
    "candidates_token_count": 1365,
    "total_token_count": 4463,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 16.671244
}