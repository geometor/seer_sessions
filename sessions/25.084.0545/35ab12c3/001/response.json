{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe program identifies objects in the input grid, then selectively expands\nsome of them while copying others. Expansion occurs outwards from each object\npixel until a non-background color is encountered. The background (white/0) is\nimplicitly handled by not being expanded or changed.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"\n    Identifies distinct objects in a grid.\n\n    Args:\n        grid: A 2D numpy array representing the grid.\n\n    Returns:\n        A dictionary where keys are colors and values are lists of (row, col)\n        tuples representing the object's pixels.\n    \"\"\"\n    objects = {}\n    visited = set()\n\n    def dfs(row, col, color):\n        if (\n            row < 0\n            or row >= grid.shape[0]\n            or col < 0\n            or col >= grid.shape[1]\n            or (row, col) in visited\n            or grid[row, col] != color\n        ):\n            return []\n\n        visited.add((row, col))\n        pixels = [(row, col)]\n        pixels.extend(dfs(row + 1, col, color))\n        pixels.extend(dfs(row - 1, col, color))\n        pixels.extend(dfs(row, col + 1, color))\n        pixels.extend(dfs(row, col - 1, color))\n        return pixels\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            color = grid[row, col]\n            if (row, col) not in visited and color != 0:\n                if color not in objects:\n                    objects[color] = []\n                objects[color].extend(dfs(row, col, color))\n\n    return objects\n\ndef expand_object(grid, pixels, color):\n    \"\"\"\n    Expands an object outwards in all directions until it encounters a non-zero\n    color.\n\n    Args:\n       grid: grid to perform expansion in\n       pixels: object pixel coordinates\n       color: object color\n    \"\"\"\n    expanded_pixels = set(pixels)\n    queue = list(pixels)\n\n    while queue:\n        row, col = queue.pop(0)\n\n        neighbors = [\n            (row + 1, col),\n            (row - 1, col),\n            (row, col + 1),\n            (row, col - 1),\n        ]\n\n        for r, c in neighbors:\n            if (\n                0 <= r < grid.shape[0]\n                and 0 <= c < grid.shape[1]\n                and grid[r,c] == 0\n                and (r, c) not in expanded_pixels\n            ):\n                expanded_pixels.add((r, c))\n                queue.append((r, c))\n    return list(expanded_pixels)\n\n\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.zeros_like(input_grid)\n\n    # change output pixels\n    # 1. Find objects in the input grid.\n    input_objects = find_objects(input_grid)\n\n    # 2. Iterate through objects and expand or copy.\n    for color, pixels in input_objects.items():\n        expanded_pixels = expand_object(input_grid, pixels, color)\n        # first see if expanded object is in output\n        for r, c in expanded_pixels:\n          output_grid[r,c] = color\n\n    for r in range(input_grid.shape[0]):\n      for c in range(input_grid.shape[1]):\n        if output_grid[r,c] == 0 and input_grid[r,c] != 0:\n          output_grid[r,c] = input_grid[r,c]\n\n    # 3. Background remains unchanged (implicitly handled).\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5536,
    "candidates_token_count": 896,
    "total_token_count": 6432,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.35613
}