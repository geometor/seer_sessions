{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by replacing '0' pixels with the color of adjacent non-zero pixels, stopping propagation at the boundaries of different colored regions.  Handles contested pixels (those with multiple different colored neighbors) by prioritizing colors that create closed \"islands\".\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, r, c):\n    \"\"\"Gets the valid neighbors of a cell (up, down, left, right).\"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    if r > 0:\n        neighbors.append((r - 1, c))\n    if r < rows - 1:\n        neighbors.append((r + 1, c))\n    if c > 0:\n        neighbors.append((r, c - 1))\n    if c < cols - 1:\n        neighbors.append((r, c + 1))\n    return neighbors\n\ndef is_closed_island(grid, r, c, color):\n    \"\"\"\n    Checks if a '0' pixel at (r, c) is completely surrounded by 'color' pixels\n    in the input_grid, forming a closed \"island.\"\n    \"\"\"\n    rows, cols = grid.shape\n    visited = set()\n    queue = [(r, c)]\n    visited.add((r,c))\n\n    while queue:\n        curr_r, curr_c = queue.pop(0)\n\n        neighbors = get_neighbors(grid, curr_r, curr_c)\n        for nr, nc in neighbors:\n            if (nr, nc) not in visited:\n                if grid[nr, nc] == 0:\n                  queue.append((nr,nc))\n                  visited.add((nr, nc))\n                elif grid[nr, nc] != color:\n                    # If a neighbor isn't the target color or 0, it is not closed.\n                    return False\n    return True\n    \n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the described rule.\n\n    Args:\n        input_grid: A 2D numpy array representing the input grid.\n\n    Returns:\n        A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    input_grid = np.array(input_grid)\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n    \n    # Iterative Filling (Single Neighbor)\n    for _ in range(max(rows, cols)):  # Max iterations to ensure full propagation\n        new_output_grid = np.copy(output_grid)\n        for r in range(rows):\n            for c in range(cols):\n                if output_grid[r, c] == 0:\n                    neighbors = get_neighbors(output_grid, r, c)\n                    neighboring_colors = set()\n                    for nr, nc in neighbors:\n                        if output_grid[nr, nc] != 0:\n                            neighboring_colors.add(output_grid[nr, nc])\n\n                    if len(neighboring_colors) == 1:\n                        new_output_grid[r, c] = neighboring_colors.pop()\n        output_grid = new_output_grid\n\n    # Contested Pixel Resolution (Multiple Neighbors)\n    for r in range(rows):\n        for c in range(cols):\n            if output_grid[r, c] == 0:\n                neighbors = get_neighbors(output_grid, r, c)\n                neighboring_colors = set()\n                for nr, nc in neighbors:\n                    if output_grid[nr, nc] != 0:\n                        neighboring_colors.add(output_grid[nr, nc])\n\n                if len(neighboring_colors) > 1:\n                    for color in neighboring_colors:\n                        if is_closed_island(input_grid, r, c, color):\n                            output_grid[r,c] = color\n                            break #prioritize first island color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 463,
            "end_index": 721,
            "uri": "https://github.com/Anuj-cs20/IIITDMK_CSE_Coursework",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 11578,
    "candidates_token_count": 908,
    "total_token_count": 12486,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 15.169204
}