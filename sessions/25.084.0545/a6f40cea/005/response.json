{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransform the input grid by identifying objects of each color and representing them in the output grid.\nThe output grid seems to capture a simplified representation of the top and bottom rows of selected objects,\narranged based on color, with a specific spatial relationship.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, background_color):\n    \"\"\"\n    Finds contiguous regions of the same color (objects) in the grid.\n    \"\"\"\n    objects = {}\n    visited = set()\n    rows, cols = grid.shape\n\n    def get_neighbors(r, c):\n        neighbors = []\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < rows and 0 <= nc < cols:\n                neighbors.append((nr, nc))\n        return neighbors\n\n    def dfs(r, c, color, object_coords):\n        if (r, c) in visited or grid[r, c] != color:\n            return\n        visited.add((r, c))\n        object_coords.append((r, c))\n        for nr, nc in get_neighbors(r, c):\n            dfs(nr, nc, color, object_coords)\n\n    for r in range(rows):\n        for c in range(cols):\n            color = grid[r, c]\n            if color != background_color and (r, c) not in visited:\n                object_coords = []\n                dfs(r, c, color, object_coords)\n                if color not in objects:\n                    objects[color] = []\n                objects[color].append(object_coords)\n    return objects\n\ndef get_bounding_box(coords):\n    \"\"\"\n    Returns the bounding box of a set of coordinates.\n    \"\"\"\n    if not coords:\n        return (0, 0), (0, 0)\n    min_r = min(r for r, c in coords)\n    max_r = max(r for r, c in coords)\n    min_c = min(c for r, c in coords)\n    max_c = max(c for r, c in coords)\n    return (min_r, min_c), (max_r, max_c)\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on identified objects and their properties. The output seems\n    to represent a summary of the tops and bottoms of some of the input objects.\n    \"\"\"\n    grid = np.array(input_grid)\n    background_color = grid[0, 0]  # Assume top-left pixel is background\n\n    objects = find_objects(grid, background_color)\n\n    # Initialize the output grid.  Start with a reasonable, but potentially too-large, size.\n    # The examples suggest a fixed number of output rows, related to object properties, but not all.\n    \n    output_rows = 0\n    object_widths = []\n\n    for color in objects:\n      for obj_coords in objects[color]:\n        (min_r, min_c), (max_r, max_c) = get_bounding_box(obj_coords)\n        height = max_r - min_r + 1\n        width = max_c - min_c + 1\n        output_rows = max(output_rows, height)\n        object_widths.append(width)\n    \n    # output grid will have a column per object\n    \n    output_grid = np.full((output_rows, sum(object_widths)), background_color, dtype=int)\n\n    # Report key objects.\n    col_offset = 0\n    for color in sorted(objects.keys()):  # Process colors in sorted order for consistency\n      for i, obj_coords in enumerate(objects[color]):\n        (min_r, min_c), (max_r, max_c) = get_bounding_box(obj_coords)\n        height = max_r - min_r + 1\n        width = max_c - min_c + 1\n        \n        # output top row\n        for c in range(width):\n          if 0 < output_grid.shape[0] and c + col_offset < output_grid.shape[1]:\n            output_grid[0, c + col_offset] = grid[min_r, min_c + c]\n\n\n        # output the bottom, conditionally, based on height\n        if height > 1:\n            bottom_row_index = min(height -1, output_grid.shape[0]-1) # ensure within output bounds\n            for c in range(width):                \n                if bottom_row_index < output_grid.shape[0] and c + col_offset < output_grid.shape[1]:\n                  output_grid[bottom_row_index, c + col_offset] = grid[max_r, min_c + c]\n\n        col_offset += width\n\n    # remove extra columns/rows\n    \n    # Find the last row with a non-background pixel\n    last_row = -1\n    for r in range(output_grid.shape[0]):\n        for c in range(output_grid.shape[1]):\n            if output_grid[r, c] != background_color:\n                last_row = max(last_row, r)\n\n    # Find the last column with a non-background pixel\n    last_col = -1\n    for c in range(output_grid.shape[1]):\n        for r in range(output_grid.shape[0]):\n            if output_grid[r, c] != background_color:\n                last_col = max(last_col, c)\n\n    if last_row == -1:\n      output_grid = np.array([[background_color]]) # return single background\n    else:\n      output_grid = output_grid[:last_row+1, :last_col+1]\n      \n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 1587,
            "end_index": 1752,
            "uri": "https://github.com/Rijgersberg/advent-of-code-2020",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8877,
    "candidates_token_count": 1383,
    "total_token_count": 10260,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 22.639073
}