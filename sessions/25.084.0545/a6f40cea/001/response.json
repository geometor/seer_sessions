{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransform the input grid by extracting regions defined by key colors and their neighbors, then compressing and arranging these regions into a smaller output grid.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, background_color):\n    objects = {}\n    visited = set()\n    rows, cols = grid.shape\n\n    def get_neighbors(r, c):\n        neighbors = []\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < rows and 0 <= nc < cols:\n                neighbors.append((nr, nc))\n        return neighbors\n    \n    def dfs(r, c, color, object_coords):\n        if (r, c) in visited or grid[r, c] != color:\n            return\n        visited.add((r, c))\n        object_coords.append((r, c))\n        for nr, nc in get_neighbors(r, c):\n            dfs(nr, nc, color, object_coords)\n\n    for r in range(rows):\n        for c in range(cols):\n            color = grid[r, c]\n            if color != background_color and (r, c) not in visited:\n                object_coords = []\n                dfs(r, c, color, object_coords)\n                if color not in objects:\n                    objects[color] = []\n                objects[color].append(object_coords)\n\n    return objects\n\ndef compress_object(object_coords):\n    rows = sorted(list(set([r for r, c in object_coords])))\n    cols = sorted(list(set([c for r, c in object_coords])))\n    \n    compressed_rows = []\n    compressed_cols = []\n    \n    \n    i = 0\n    while i < len(rows):\n        compressed_rows.append(rows[i])\n        i += 1\n            \n    i = 0\n    while i < len(cols):\n        compressed_cols.append(cols[i])\n        i += 1\n\n    row_map = {r: i for i, r in enumerate(compressed_rows)}\n    col_map = {c: i for i, c in enumerate(compressed_cols)}\n\n    compressed_coords = []\n\n    for r, c in object_coords:\n        compressed_coords.append( (row_map[r], col_map[c]) )\n    \n    \n    return compressed_coords, len(compressed_rows), len(compressed_cols)\n\ndef get_bounding_box(coords):\n    min_r = min(r for r, c in coords)\n    max_r = max(r for r, c in coords)\n    min_c = min(c for r, c in coords)\n    max_c = max(c for r, c in coords)\n    return (min_r, min_c), (max_r, max_c)\n\ndef transform(input_grid):\n    grid = np.array(input_grid)\n    rows, cols = grid.shape\n    background_color = grid[0, 0]\n\n    objects = find_objects(grid, background_color)\n    \n    output_regions = {}\n    max_row_offset = 0\n    \n    for color in sorted(objects.keys()):\n        color_objects = objects[color]\n        \n        for obj_coords in color_objects:      \n            compressed_coords, num_rows, num_cols = compress_object(obj_coords)\n\n            if color not in output_regions:\n               output_regions[color] =  (compressed_coords, num_rows, num_cols)\n            else:\n              # update\n              prev_coords, prev_rows, prev_cols = output_regions[color]\n\n              all_coords = prev_coords + compressed_coords\n\n              _, updated_rows, updated_cols = compress_object(all_coords)\n              updated_coords,_,_ = compress_object(all_coords)\n\n              output_regions[color] = (updated_coords, updated_rows, updated_cols)\n\n    \n    total_rows = 0\n    max_width = 0\n    for color in output_regions:\n        _, num_rows, num_cols = output_regions[color]\n        total_rows = max(total_rows, num_rows)\n        max_width += num_cols\n\n\n    output_grid = np.full((total_rows, max_width), background_color, dtype=int)\n\n\n    col_offset = 0\n    for color in sorted(output_regions.keys()):\n      compressed_coords, num_rows, num_cols = output_regions[color]\n      for r, c in compressed_coords:\n          output_grid[r, c + col_offset] = color\n      col_offset += num_cols\n\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 2001,
            "end_index": 2179,
            "uri": "https://github.com/Rijgersberg/advent-of-code-2020",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6559,
    "candidates_token_count": 1139,
    "total_token_count": 7698,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 20.376261
}