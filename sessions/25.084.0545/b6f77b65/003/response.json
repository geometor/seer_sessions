{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Identify all contiguous, non-zero colored regions in the input grid as distinct objects. Record their color, initial position (top-left corner), and shape.\n\n2.  **Examine Row 5:** Determine if Row 5 of the input grid contains any non-zero pixels.\n\n3.  **Conditional Object Removal/Duplication:**\n    *   **If Row 5 has non-zero pixels:** Remove all objects that are entirely *above* row 5 in the input grid.\n    *  **If and only if Row 5 is all zeros:** Duplicate all of the objects from above row 5 to row 5 downwards, until row 5 is filled with non-zero entries.\n\n4.  **Move and Merge (Objects at or below Row 5):**\n     * Iterate through the objects that were originally located at or below Row 5 in the input grid, preserving their original order (row-major order: top-to-bottom, then left-to-right).\n\n5. **Fill available space:**\n    * Find empty spaces, defined as runs of zeros.\n    * For each object identified in step 4:\n      *   Place it in the first available empty space in the output grid that can accommodate its shape, starting from the top-left corner (0,0) and proceeding in row-major order.\n      * Do not split objects.\n\n6. **Output:** The filled output array.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"Finds contiguous objects in a grid.\"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n    objects = []\n\n    def dfs(row, col, color, obj_pixels):\n        if (row < 0 or row >= rows or col < 0 or col >= cols or\n                visited[row, col] or grid[row, col] != color):\n            return\n        visited[row, col] = True\n        obj_pixels.append((row, col))\n        dfs(row + 1, col, color, obj_pixels)\n        dfs(row - 1, col, color, obj_pixels)\n        dfs(row, col + 1, color, obj_pixels)\n        dfs(row, col - 1, color, obj_pixels)\n\n    for r in range(rows):\n        for c in range(cols):\n            if not visited[r, c] and grid[r, c] != 0:\n                obj_pixels = []\n                dfs(r, c, grid[r, c], obj_pixels)\n                # find top-left\n                min_row = min(p[0] for p in obj_pixels)\n                min_col = min(p[1] for p in obj_pixels)\n\n                objects.append({\n                    'color': grid[r, c],\n                    'initial_position': (min_row, min_col),\n                    'pixels': obj_pixels,\n                    'shape': 'contiguous' # for this task all objects are contiguous\n                })\n    return objects\n\ndef find_empty_spaces(grid):\n    \"\"\"\n    Finds contiguous blocks of zeros (empty spaces) in the grid.\n    Returns a list of tuples, where each tuple contains the (row, col) of\n    the top-left corner of the empty space, and its size (rows, cols).\n    \"\"\"\n    rows, cols = grid.shape\n    empty_spaces = []\n    visited = np.zeros_like(grid, dtype=bool)\n\n    def dfs(r, c, current_space):\n        if (r < 0 or r >= rows or c < 0 or c >= cols or\n                visited[r, c] or grid[r, c] != 0):\n            return\n        visited[r, c] = True\n        current_space.append((r,c))\n        dfs(r + 1, c, current_space)\n        dfs(r - 1, c, current_space)\n        dfs(r, c + 1, current_space)\n        dfs(r, c - 1, current_space)\n\n    for r in range(rows):\n        for c in range(cols):\n            if not visited[r,c] and grid[r,c] == 0:\n                current_space = []\n                dfs(r, c, current_space)\n                if current_space:\n                    # calculate size of empty space\n                    min_row = min(p[0] for p in current_space)\n                    min_col = min(p[1] for p in current_space)\n                    max_row = max(p[0] for p in current_space)\n                    max_col = max(p[1] for p in current_space)\n\n                    empty_spaces.append(((min_row, min_col), (max_row - min_row + 1, max_col - min_col + 1)))\n    return empty_spaces\n\ndef can_place(grid, object_pixels, start_row, start_col):\n    \"\"\"Checks if an object can be placed at the given location without overlapping.\"\"\"\n    rows, cols = grid.shape\n    for r, c in object_pixels:\n        new_r, new_c = start_row + (r-object_pixels[0][0]), start_col + (c - object_pixels[0][1]) # offset based on topleft\n        if (new_r < 0 or new_r >= rows or new_c < 0 or new_c >= cols or\n                grid[new_r, new_c] != 0):\n            return False\n    return True\n\ndef place_object(grid, object_pixels, color, start_row, start_col):\n    \"\"\"Places the object onto the grid at the specified location.\"\"\"\n    for r, c in object_pixels:\n        new_r, new_c = start_row + (r - object_pixels[0][0]), start_col + (c - object_pixels[0][1])  # offset based on topleft\n        grid[new_r, new_c] = color\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the observed rules.\"\"\"\n    input_grid = np.array(input_grid)\n    rows, cols = input_grid.shape\n    output_grid = np.zeros_like(input_grid)\n\n    # 1. Identify Objects\n    objects = find_objects(input_grid)\n\n    # 2. Examine Row 5\n    row_5_has_non_zero = np.any(input_grid[min(4, rows-1), :] != 0)  # min handles edge case\n\n    # 3. Conditional Object Removal / Duplication\n    objects_above_row_5 = [obj for obj in objects if obj['initial_position'][0] < min(5,rows)]\n    objects_at_or_below_row_5 = [obj for obj in objects if obj['initial_position'][0] >= min(5,rows)]\n    \n    if row_5_has_non_zero:\n      pass # objects above row 5 removed by not adding to output\n    else:\n        # Duplicate objects above row 5\n        row_index = min(4, rows-1)\n        \n        while row_index < rows and not np.any(output_grid[row_index,:] != 0):\n          for obj in objects_above_row_5:\n            fill_row = row_index\n            fill_col = 0\n            for r, c in obj['pixels']:\n              if fill_row < rows:\n                output_grid[fill_row,fill_col] = obj['color']\n                fill_col += 1\n                if fill_col == cols:\n                    fill_col = 0\n                    fill_row += 1\n\n\n            row_index += (max(r for r, c in obj['pixels']) - min(r for r, c in obj['pixels'])) + 1\n          \n            \n\n    # 4 & 5. Move and Merge (Objects at or below Row 5) and place remaining from above\n    \n    \n    empty_spaces = find_empty_spaces(output_grid)\n    empty_space_index = 0\n\n    \n    for obj in objects_at_or_below_row_5:\n      placed = False\n      while empty_space_index < len(empty_spaces) and not placed:\n            (start_row, start_col), (space_rows, space_cols) = empty_spaces[empty_space_index]\n            if can_place(output_grid, obj['pixels'], start_row, start_col):\n                place_object(output_grid, obj['pixels'], obj['color'], start_row, start_col)\n                placed = True\n\n                # update empty spaces\n                new_empty_spaces = find_empty_spaces(output_grid)\n                empty_spaces = new_empty_spaces\n                empty_space_index = 0 # start from the beginning to fill any gaps made by the placement\n\n            else:\n                empty_space_index += 1\n\n      if not placed:\n        # no more space, drop the object, in theory this should not occur based\n        # on the problem definition.\n        pass\n\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 12819,
    "candidates_token_count": 2137,
    "total_token_count": 14956,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 30.593625
}