{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation identifies connected regions of the same color within the input grid and represents them in a smaller output grid. Connectivity is defined along edges (not diagonals). The output grid's size and content reflect the arrangement and colors of these connected regions. The top-left cell of each detected region is used to place color in output grid, preserving relative positions, and condensing the overall size.\n\"\"\"\n\nimport numpy as np\n\ndef get_connected_component(grid, start_r, start_c, color, visited):\n    \"\"\"\n    Finds a connected component of the same color starting from a given cell.\n    \"\"\"\n    rows, cols = grid.shape\n    component = []\n    stack = [(start_r, start_c)]\n\n    while stack:\n        r, c = stack.pop()\n        if r < 0 or r >= rows or c < 0 or c >= cols or visited[r, c] or grid[r, c] != color:\n            continue\n\n        visited[r, c] = True\n        component.append((r, c))\n\n        # Check neighbors (up, down, left, right)\n        stack.append((r - 1, c))\n        stack.append((r + 1, c))\n        stack.append((r, c - 1))\n        stack.append((r, c + 1))\n\n    return component\n\ndef find_all_connected_regions(grid):\n    \"\"\"\n    Finds all connected regions and their top-left cells in the grid.\n    Returns a list of tuples: (color, top_left_row, top_left_col).\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n    connected_regions = []\n\n    for r in range(rows):\n        for c in range(cols):\n            if not visited[r, c]:\n                color = grid[r, c]\n                component = get_connected_component(grid, r, c, color, visited)\n                connected_regions.append((color, r, c))  # Store color and top-left\n    return connected_regions\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on connected regions' top-left pixels.\n    \"\"\"\n    grid = np.array(input_grid)\n\n    # 1. Identify Connected Regions and Their Top-Left Pixels\n    connected_regions = find_all_connected_regions(grid)\n\n    # 2. Find the Overall Top-Leftmost Point\n    if not connected_regions:\n        return []\n\n    min_r = min(r for _, r, _ in connected_regions)\n    min_c = min(c for _, _, c in connected_regions)\n\n    # 3. Determine Output Grid Size\n    max_r = max(r for _, r, _ in connected_regions)\n    max_c = max(c for _, _, c in connected_regions)\n    \n    output_height = max_r - min_r + 1\n    output_width = max_c - min_c + 1\n\n    # 4. Create and Populate Output Grid\n    output_grid = np.zeros((output_height, output_width), dtype=int)\n    for color, r, c in connected_regions:\n        output_r = r - min_r\n        output_c = c - min_c\n        output_grid[output_r, output_c] = color\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7451,
    "candidates_token_count": 795,
    "total_token_count": 8246,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.147469
}