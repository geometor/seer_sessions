{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. Identify Contiguous Regions: Find all contiguous regions (connected areas) of pixels that share the same color.\n2. Blue region check: If current region contains color 1 (blue), all color 0 (white) and color 2 (red) within the region will be changed to color 1.\n3. Green Preservation: Color 3 (green) pixels are never changed.\n4. No Other Changes: Colors other than white, red that are connected to blue remain unchanged.\n\"\"\"\n\nimport numpy as np\nfrom scipy.ndimage import label\n\ndef find_contiguous_regions(grid):\n    \"\"\"\n    Finds all contiguous regions in the grid, regardless of color.\n\n    Args:\n        grid: The input grid (numpy array).\n\n    Returns:\n        A labeled array where each contiguous region has a unique integer label.\n    \"\"\"\n    labeled_regions, num_regions = label(grid)\n    return labeled_regions, num_regions\n\ndef region_contains_color(grid, labeled_regions, region_label, color):\n    \"\"\"\n    Checks if a specific contiguous region contains a specified color.\n\n    Args:\n        grid: The original grid.\n        labeled_regions: The labeled regions array.\n        region_label: The label of the region to check.\n        color: The color to check for.\n\n    Returns:\n        True if the region contains the color, False otherwise.\n    \"\"\"\n    region_pixels = grid[labeled_regions == region_label]\n    return color in region_pixels\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the defined rule.\n    \"\"\"\n    # Initialize output grid as a copy of the input grid\n    output_grid = np.copy(input_grid)\n\n    # Find all contiguous regions\n    labeled_regions, num_regions = find_contiguous_regions(input_grid)\n\n    # Iterate through all regions\n    for region_label in range(1, num_regions + 1):  # Region labels start from 1\n        # Check if the region contains blue (color 1)\n        if region_contains_color(input_grid, labeled_regions, region_label, 1):\n            # Iterate through the pixels in the region\n            for r in range(input_grid.shape[0]):\n                for c in range(input_grid.shape[1]):\n                    # Apply transformation rules based on label and if the region has blue\n                    if labeled_regions[r, c] == region_label:\n                        if output_grid[r,c] == 0 or output_grid[r,c] == 2:\n                            output_grid[r,c] = 1\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2334,
    "candidates_token_count": 609,
    "total_token_count": 2943,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.579251
}