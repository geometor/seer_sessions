{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Objects are contiguous blocks of the same color, including single pixels.\n2.  **Color 9 Removal:**\n    *   If a pixel of color 9 is adjacent to a non-zero, non-9 color on its immediate left or immediate right, remove the color 9 (replace with 0)\n3.  **Enclosed Region Color Change:**\n     - If an object of one color is adjacent to an object of a second color, and any parts of the first object touch only 0 or the second color, replace every pixel in the first object with the second color\n4.  **Vertical Line Replacement**\n    -   scan each column, from top to bottom\n    -   if find color C != 0 and no other color between the top and C\n        -   If find any other non-zero color in the column below the top, replace the top color with 0.\n\"\"\"\n\nimport numpy as np\n\ndef find_contiguous_block(grid, start_row, start_col, color):\n    \"\"\"\n    Finds a contiguous block of the given color starting from a given cell.\n    Uses a depth-first search approach.\n    \"\"\"\n    rows, cols = grid.shape\n    block_pixels = []\n    visited = set()\n    stack = [(start_row, start_col)]\n\n    while stack:\n        r, c = stack.pop()\n        if (r, c) in visited:\n            continue\n        visited.add((r, c))\n\n        if 0 <= r < rows and 0 <= c < cols and grid[r, c] == color:\n            block_pixels.append((r, c))\n            # Add adjacent cells to the stack\n            stack.append((r + 1, c))\n            stack.append((r - 1, c))\n            stack.append((r, c + 1))\n            stack.append((r, c - 1))\n    return block_pixels\n\ndef get_adjacent_colors(grid, r, c):\n    rows, cols = grid.shape\n    adjacent_colors = set()\n    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n        nr, nc = r + dr, c + dc\n        if 0 <= nr < rows and 0 <= nc < cols:\n            adjacent_colors.add(grid[nr, nc])\n    return adjacent_colors\n\ndef transform(input_grid):\n    input_grid = np.array(input_grid)\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Color 9 Removal\n    for r in range(rows):\n        for c in range(cols):\n            if input_grid[r, c] == 9:\n                adjacent_colors = get_adjacent_colors(input_grid, r, c)\n                if any(color != 0 and color != 9 for color in adjacent_colors):\n                     if (c > 0 and input_grid[r,c-1] != 0 and input_grid[r,c-1] !=9 ) or (c < cols-1 and input_grid[r,c+1] !=0 and input_grid[r,c+1] != 9):\n                        output_grid[r, c] = 0\n\n    # Enclosed Region Color Change and Vertical Line Replacement\n    visited = set()\n\n    for r in range(rows):\n        for c in range(cols):\n            if (r,c) not in visited and output_grid[r,c] != 0:\n                color = output_grid[r,c]\n                block = find_contiguous_block(output_grid, r, c, output_grid[r,c])\n                visited.update(block)\n\n                adjacent_block_colors = set()\n                for br,bc in block:\n                    adjacent_block_colors.update(get_adjacent_colors(output_grid, br, bc))\n\n                adjacent_block_colors.discard(color)\n                if len(adjacent_block_colors) == 1:\n                    adj_color = adjacent_block_colors.pop()\n                    if adj_color != 0:\n\n                        bordering = set()\n                        for br,bc in block:\n                            bordering.update(get_adjacent_colors(output_grid, br,bc))\n                        if all(x == adj_color or x==0 for x in bordering if x != color):\n                            for (br, bc) in block:\n                                output_grid[br, bc] = adj_color\n\n    #Vertical Scan\n\n    for c in range(cols):\n      first_color = 0\n      first_color_row = -1\n      for r in range(rows):\n        if output_grid[r,c] != 0:\n          if first_color == 0:\n            first_color = output_grid[r,c]\n            first_color_row = r\n          elif first_color != output_grid[r,c]:\n            first_color = -1 #signal to stop\n\n      if first_color > 0:\n          output_grid[first_color_row,c] = 0\n\n\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8424,
    "candidates_token_count": 1204,
    "total_token_count": 9628,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 15.336125
}