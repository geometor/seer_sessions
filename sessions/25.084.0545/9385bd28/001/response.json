{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms input grids by expanding certain colored regions based on specific rules,\noften involving adjacency and overwriting.  The process generally involves\nidentifying \"anchor\" regions of a specific color, then expanding those regions,\nreplacing other colors in their path based on a set of rules that may involve\nadjacency and stopping conditions (e.g., encountering a specific color).\n\"\"\"\n\nimport numpy as np\n\ndef find_regions(grid, color):\n    \"\"\"Finds contiguous regions of a given color in the grid.\"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n    regions = []\n\n    def dfs(row, col):\n        \"\"\"Depth-first search to find contiguous region.\"\"\"\n        if (row < 0 or row >= rows or col < 0 or col >= cols or\n                visited[row, col] or grid[row, col] != color):\n            return []\n\n        visited[row, col] = True\n        region = [(row, col)]\n\n        region.extend(dfs(row + 1, col))\n        region.extend(dfs(row - 1, col))\n        region.extend(dfs(row, col + 1))\n        region.extend(dfs(row, col - 1))\n        return region\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == color and not visited[r, c]:\n                regions.append(dfs(r, c))\n    return regions\n\ndef expand_region(grid, region, fill_color, overwrite_colors, stop_colors):\n    \"\"\"Expands a region, replacing specified colors and stopping at others.\"\"\"\n    expanded_region = set(region)  # Use a set for efficient membership checking\n    queue = region[:]\n    rows, cols = grid.shape\n\n    while queue:\n        row, col = queue.pop(0)\n        # Consider neighbors (up, down, left, right)\n        neighbors = [(row + 1, col), (row - 1, col), (row, col + 1), (row, col - 1)]\n        for nr, nc in neighbors:\n            if (0 <= nr < rows and 0 <= nc < cols and\n                (nr, nc) not in expanded_region):\n                pixel_color = grid[nr, nc]\n                if pixel_color in overwrite_colors:\n                    expanded_region.add((nr, nc))\n                    queue.append((nr, nc))\n                elif pixel_color in stop_colors:  #stop the spread, dont add to queue\n                    continue\n\n    return list(expanded_region)\n\n\ndef apply_transformation_pass(input_grid, anchor_color, fill_color, overwrite_colors, stop_colors):\n    \"\"\"Applies a single pass of the transformation.\"\"\"\n    output_grid = np.copy(input_grid)\n    anchor_regions = find_regions(input_grid, anchor_color)\n\n    for region in anchor_regions:\n      expanded = expand_region(input_grid, region, fill_color, overwrite_colors, stop_colors)\n      for r, c in expanded:\n        output_grid[r,c] = fill_color\n\n    return output_grid\n    \n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the observed rules.\"\"\"\n    input_grid = np.array(input_grid)  # Ensure numpy array\n    output_grid = np.copy(input_grid)\n\n    # From observation, transformations often involve multiple \"passes\".\n    # We'll try a few different passes based on the training examples.\n\n    # Pass 1:  Based on Examples 1, 2, and 3's general behavior.\n    #       Expand some color, overwriting others but stopping at specific colors.\n\n    # determine if \"2 pass transform\" based on distinct regions\n    # top half of the grid\n    output_grid_top = apply_transformation_pass(input_grid[:input_grid.shape[0]//2, :], 3, 3, [0], [1,2,4,5,6,7,8,9])\n\n    # bottom half of the grid\n    output_grid_bottom = apply_transformation_pass(input_grid[input_grid.shape[0]//2:, :], 7, 7, [0], [1,2,3,4,5,6,8,9])\n\n    if not np.array_equal(output_grid_top, input_grid[:input_grid.shape[0]//2, :]):\n      # overwrite top half\n      output_grid[:input_grid.shape[0]//2, :] = output_grid_top\n\n    if not np.array_equal(output_grid_bottom, input_grid[input_grid.shape[0]//2:, :]):\n        # overwrite bottom half\n        output_grid[input_grid.shape[0]//2:, :] = output_grid_bottom\n\n    # Pass 2 (global, whole array, overwrite all but 1 and 2)\n    output_grid = apply_transformation_pass(output_grid, 6, 6, [0,3,4,5,7,8,9], [1,2])\n    \n    # Pass 3 (global, whole array, overwrite all but 1 and 3)\n    output_grid = apply_transformation_pass(output_grid, 4, 4, [0,5,6,7,8,9], [1,2,3])\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4587,
    "candidates_token_count": 1266,
    "total_token_count": 5853,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 21.703548
}