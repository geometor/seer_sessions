{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nExtracts and rearranges contiguous color regions (excluding 0, 1, and 2) from the input grid, forming a smaller output grid.\nThe first two rows of the input grid are ignored. The spatial relationship\nof the extracted color regions are maintained as they are arranged into\nthe output grid, in order of top to bottom, then left to right. For each set of same-color pixels that touch either\nside-by-side or diagonally, two rows are added to the output with identical\ncolors.\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, r, c):\n    \"\"\"Gets the valid neighbors of a cell (including diagonals).\"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    for i in range(max(0, r - 1), min(rows, r + 2)):\n        for j in range(max(0, c - 1), min(cols, c + 2)):\n            if (i, j) != (r, c):\n                neighbors.append((i, j))\n    return neighbors\n\ndef extract_regions(grid):\n    \"\"\"Extracts contiguous color regions (excluding 0, 1, and 2), ordered by top-left corner.\"\"\"\n    rows, cols = grid.shape\n    visited = set()\n    regions = []\n\n    for r in range(2, rows):  # Start from the third row\n        for c in range(cols):\n            color = grid[r, c]\n            if (r, c) not in visited and color not in [0, 1, 2]:\n                region = []\n                queue = [(r, c)]\n                visited.add((r, c))\n\n                while queue:\n                    curr_r, curr_c = queue.pop(0)\n                    region.append((curr_r, curr_c))\n                    for nr, nc in get_neighbors(grid, curr_r, curr_c):\n                        if (nr, nc) not in visited and grid[nr, nc] == color:\n                            queue.append((nr, nc))\n                            visited.add((nr, nc))\n                if region:\n                    regions.append((color, region))\n\n    # Sort regions by top-left corner (row first, then column)\n    regions.sort(key=lambda x: (min(coord[0] for coord in x[1]), min(coord[1] for coord in x[1])))\n    return regions\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the described rule.\"\"\"\n    \n    input_grid = np.array(input_grid)\n    regions = extract_regions(input_grid)\n\n    # Calculate output grid dimensions\n    output_rows = 0\n    max_width = 0\n    for color, region_coords in regions:\n        min_row = min(r for r, c in region_coords)\n        max_row = max(r for r, c in region_coords)\n        min_col = min(c for r, c in region_coords)\n        max_col = max(c for r, c in region_coords)\n        \n        output_rows += 2 * (max_row - min_row + 1)\n        max_width = max(max_width, max_col - min_col + 1)\n\n    output_grid = np.zeros((output_rows, max_width), dtype=int)\n\n    # Fill output grid\n    current_row = 0\n    for color, region_coords in regions:\n        min_row = min(r for r, c in region_coords)\n        max_row = max(r for r, c in region_coords)\n        min_col = min(c for r, c in region_coords)\n        \n        for r in range(min_row, max_row + 1):\n            row_coords = [coord for coord in region_coords if coord[0] == r]\n            \n            # adjust for zero based and min_col\n            col_indices = [coord[1] - min_col for coord in row_coords]\n\n            for col_index in col_indices:   # Fill in a row pair in output grid\n              output_grid[current_row, col_index] = color\n              output_grid[current_row+1, col_index] = color\n\n            current_row += 2  # Increment by two rows (duplication)\n\n    return output_grid.tolist()\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 13155,
    "candidates_token_count": 1013,
    "total_token_count": 14168,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 12.690118
}