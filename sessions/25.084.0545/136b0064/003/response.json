{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation identifies vertical stripes of different colors in the input grid, filters out yellow stripes and single-pixel stripes, and then rearranges and resizes these stripes into a new output grid. The output grid has a fixed width of 7, and a variable height. The order and placement of stripes in the output grid are determined by their color and, in some cases, their original position in the input.\n\"\"\"\n\nimport numpy as np\n\ndef get_non_yellow_stripes(grid):\n    \"\"\"\n    Identifies and returns non-yellow and non-single-black colored vertical stripes.\n    \"\"\"\n    stripes = []\n    height, width = grid.shape\n    visited = np.zeros((height, width), dtype=bool)\n\n    for x in range(width):\n        for y in range(height):\n            if not visited[y, x] and grid[y, x] != 0 and grid[y,x] != 4:\n                color = grid[y, x]\n                stripe = []\n                \n                # Check for adjacent cells, skip if adjacent to a yellow\n                # Assume it must be vertical stripe\n                yy = y\n                valid = True\n                while yy < height and grid[yy, x] == color:\n                    if x > 0 and grid[yy, x-1] == 4:\n                        valid = False\n                        break\n\n                    if x < width-1 and grid[yy, x+1] == 4:\n                        valid = False\n                        break\n                    \n                    stripe.append((yy, x))\n                    visited[yy, x] = True\n                    yy += 1\n                \n                if valid and len(stripe) > 1:\n                    # double check that this isn't part of a yellow adjacent stripe\n                    okay = True\n                    for yy, xx in stripe:\n                        if xx > 1 and grid[yy, xx-2] == 4:\n                            okay = False\n                        if xx < width - 2 and grid[yy, xx+2] == 4:\n                            okay = False\n                    if okay:\n                        stripes.append((color, stripe))\n    return stripes\n\ndef find_adjacent_stripes(stripes, color):\n    \"\"\"Finds adjacent stripes of the specified color.\"\"\"\n    adjacent_groups = []\n    current_group = []\n\n    # Sort stripes by starting x coordinate\n    color_stripes = sorted([s for c, s in stripes if c == color], key=lambda s: s[0][1])\n\n\n    for stripe in color_stripes:\n        x = stripe[0][1]\n        if not current_group:\n            current_group.append((x, stripe))\n        else:\n            last_x, _ = current_group[-1]\n            if x == last_x + 1:  # Adjacent\n                current_group.append((x, stripe))\n            else:\n                 # Check for adjacent with space\n                if len(current_group) > 0:\n                    adjacent_groups.append(current_group)\n                    current_group = []\n                current_group.append((x, stripe))\n    if len(current_group) > 0:\n        adjacent_groups.append(current_group)\n    \n    return adjacent_groups\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the observed rules.\n    \"\"\"\n    input_grid = np.array(input_grid)\n    stripes = get_non_yellow_stripes(input_grid)\n\n    # Determine output grid size.\n    output_width = 7\n    output_height = input_grid.shape[0] # use input height\n    output_grid = np.zeros((output_height, output_width), dtype=int)\n\n    # Determine stripe order.  Create a mapping\n    stripe_order = {\n      5: 0, # Gray\n      2: 1, # Red\n      1: 2, # Blue\n      6: 3,  # Magenta\n      3: 4, # Green\n    }\n\n    # Place the transformed stripes.\n    \n    # Gray\n    gray_stripes = [s for c, s in stripes if c == 5]\n    if gray_stripes:\n       output_grid[0, stripe_order[5]] = 5\n\n    # Red\n    red_stripes = [s for c, s in stripes if c == 2]\n    red_col = stripe_order[2]\n    if len(red_stripes) > 0:\n        output_grid[1:3, red_col] = 2\n\n    # Blue\n    blue_groups = find_adjacent_stripes(stripes, 1)\n    blue_col = stripe_order[1]\n    for group in blue_groups:\n      if len(group) >= 2: # two adjacent blue stripes\n        output_grid[2:4, blue_col:blue_col+3] = np.array([[1,1,1],[0,1,1]])\n        blue_col += 4\n      elif len(group) > 0:\n        output_grid[1, blue_col:blue_col+3] = 1 # horizontal 3\n        blue_col += 3\n    \n    # Magenta\n    magenta_col = stripe_order[6]\n    magenta_stripes = [s for c, s in stripes if c == 6]\n\n    if len(magenta_stripes) > 1:\n      output_grid[4:6, magenta_col] = 6\n      output_grid[5:7, magenta_col+1] = 6 # second stripe\n    else:\n        for color, stripe in magenta_stripes:\n            for i in range(min(2, len(stripe))):\n                output_grid[4+i, magenta_col] = 6\n\n    # Green\n    green_col = stripe_order[3]\n    green_stripes = [s for c, s in stripes if c == 3]\n\n    \n    for i, (color, stripe) in enumerate(green_stripes):\n        for j in range(min(4, len(stripe))):\n            output_grid[8, green_col ] = 3\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 15308,
    "candidates_token_count": 1430,
    "total_token_count": 16738,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 16.562501
}