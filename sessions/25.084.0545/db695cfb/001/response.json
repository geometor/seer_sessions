{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. **Identify the Background:** Determine the most frequent color in the input grid. This color is considered the background and remains unchanged in the output grid.\n\n2. **Locate Non-Background Pixels:** Identify the pixels in the input grid that have colors different from the background color.\n\n3. **Expand the Non-Background colors:**\n    *   If there are *two different* non-background colors (for example blue=1 and magenta=6), construct the following expansion:\n      *   Starting from each of the original non-background pixel locations, create an outward spiral or diagonal pattern in 4 directions. Each step of expansion, places a pixel of that original color one unit cell up, down, left and right. The expansion continues until there are no more empty slots that share the side with the currently expanded figure.\n    * If there is only *one* non-background color (for example blue=1), construct the following expansion:\n        * Starting from the non-background color pixel location, shift it diagonally (up and right) by one. Repeat until the end of the grid.\n\n4. **Construct Output Grid:** Create a new grid (the output grid) with the same dimensions and background color as the input grid.\n\n5. **Populate Output:** Place the expanded non-background pixels into the output grid, based on their expanded positions determined in step 3.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef get_background_color(grid):\n    # Flatten the grid and count color occurrences\n    flat_grid = grid.flatten()\n    color_counts = Counter(flat_grid)\n    # Return the most common color\n    return color_counts.most_common(1)[0][0]\n\ndef get_non_background_pixels(grid, background_color):\n    # Find coordinates and colors of non-background pixels\n    non_background_pixels = []\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != background_color:\n                non_background_pixels.append(((r, c), grid[r, c]))\n    return non_background_pixels\n\ndef expand_pattern(grid, start_pos, color, bg_color):\n  # expands pattern of one non-background color pixel\n    rows, cols = grid.shape\n    r, c = start_pos\n    \n    if len(set([p[1] for p in get_non_background_pixels(grid, bg_color)])) > 1:\n        # Two different non-background colors\n        # one unit cell expansion\n        if r - 1 >= 0 and grid[r-1,c] == bg_color:\n            grid[r-1,c] = color\n        if r + 1 < rows and grid[r+1, c] == bg_color:\n            grid[r+1,c] = color\n        if c - 1 >= 0 and grid[r,c-1] == bg_color:\n            grid[r,c-1] = color\n        if c + 1 < cols and grid[r,c+1] == bg_color:\n            grid[r,c+1] = color\n    else:\n        # One non-background color\n        # expand diagonally\n        while r < rows and c < cols:\n            if grid[r,c] == bg_color:\n               grid[r,c] = color\n            r += 1\n            c += 1\n\n\ndef transform(input_grid):\n    # Convert input_grid to numpy array\n    input_grid = np.array(input_grid)\n\n    # 1. Identify the Background\n    background_color = get_background_color(input_grid)\n\n    # 2. Locate Non-Background Pixels\n    non_background_pixels = get_non_background_pixels(input_grid, background_color)\n\n    # 3. Construct Output Grid\n    output_grid = np.full(input_grid.shape, background_color)\n    \n    # copy input grid\n    output_grid = np.copy(input_grid)\n    \n    # check number of non-bg pixels:\n    num_non_bg_pixels = len(set([p[1] for p in non_background_pixels]))\n\n    # 4. Expand and Populate\n    for (r, c), color in non_background_pixels:\n        # initial expansion\n        expand_pattern(output_grid, (r,c), color, background_color)\n    \n    # additional expansion, until no change\n    if num_non_bg_pixels > 1:\n        prev_grid = np.copy(output_grid)\n        current_grid = np.copy(output_grid)\n        while True:\n            for (r, c), color in get_non_background_pixels(current_grid, background_color):\n                expand_pattern(current_grid,(r,c), color, background_color)\n            if np.array_equal(current_grid, prev_grid):\n                break;\n            else:\n                prev_grid = np.copy(current_grid)\n        output_grid = np.copy(current_grid)\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4698,
    "candidates_token_count": 1188,
    "total_token_count": 5886,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 15.254649
}