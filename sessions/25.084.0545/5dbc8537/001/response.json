{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. **Identify Frame:** Find the values and locations of the border of the input image.\n2. **Identify inside Clusters:** Find all clusters/objects inside the frame\n3.  **Invert location**: transpose frame and inside clusters - if input frame is along the x and y axis, it is only along the x axis in the output, with the contents displayed to it's side, preserving order of the rows, and the contents of each cluster rotated -90 degrees, and their order preserved and presented based on the order on the input grid\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"\n    Finds contiguous objects (regions of the same color) in a grid.\n    Returns a list of objects, where each object is a list of (row, col) coordinates.\n    \"\"\"\n    objects = []\n    visited = set()\n    rows, cols = grid.shape\n\n    def dfs(row, col, color, current_object):\n        if (row, col) in visited or not (0 <= row < rows and 0 <= col < cols) or grid[row, col] != color:\n            return\n        visited.add((row, col))\n        current_object.append((row, col))\n        for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            dfs(row + dr, col + dc, color, current_object)\n\n    for r in range(rows):\n        for c in range(cols):\n            if (r, c) not in visited:\n                current_object = []\n                dfs(r, c, grid[r, c], current_object)\n                if current_object:\n                    objects.append(current_object)\n    return objects\n\ndef get_frame(grid):\n    \"\"\"Extracts the frame (outermost rows and columns) of the grid.\"\"\"\n    rows, cols = grid.shape\n    frame = []\n    for r in range(rows):\n        if r == 0 or r == rows -1:\n            for c in range(cols):\n                frame.append((r,c))\n        else:\n            frame.append((r, 0))\n            frame.append((r, cols-1))\n            \n    return frame\n\ndef get_inside_clusters_location(input_grid, frame_coords):\n    \"\"\"\n    Identifies objects located inside the area of the frame.\n\n    Args:\n        input_grid: The input grid as a NumPy array.\n        frame: list of frame locations\n\n    Returns:\n        A list of objects inside frame.\n    \"\"\"\n    \n    inside_objects_coords = []\n    input_rows, input_cols = input_grid.shape\n\n    all_coords = set()\n    for r in range(input_rows):\n        for c in range(input_cols):\n            all_coords.add((r,c))\n    \n    inside_coords = all_coords - set(frame_coords)\n    inside_objects = []\n    \n    \n    inside_grid = np.full(input_grid.shape, -1)\n    for r,c in inside_coords:\n        inside_grid[r,c] = input_grid[r,c]\n\n    return inside_grid, inside_coords\n\ndef transform(input_grid):\n    # Convert input grid to numpy array\n    input_grid = np.array(input_grid)\n    \n    \n    # 1. Identify Frame:\n    frame_coords = get_frame(input_grid)\n    frame_grid = np.full(input_grid.shape, -1)\n    for r,c in frame_coords:\n      frame_grid[r,c] = input_grid[r,c]\n    \n    # 2. Identify inside Clusters:\n    inside_grid, inside_coords = get_inside_clusters_location(input_grid, frame_coords)\n    \n    # 3. Invert location:\n    output_height = max(input_grid.shape[0], len(find_objects(inside_grid))) #find number of objects as proxy for height\n    output_width = max(input_grid.shape[1], len(find_objects(frame_grid))) # find number of objects as proxy for width\n    output_grid = np.full((output_height, output_width), -1)  # Initialize with -1 (empty)\n\n    # Place frame elements along the x and y axis\n    frame_objects = find_objects(frame_grid)\n\n    # frame elements will make up x and y axis\n    frame_row_index = 0\n    for obj in frame_objects:\n        for r, c in obj:\n          if frame_row_index < output_grid.shape[0]:\n              output_grid[frame_row_index,0] = input_grid[r,c]\n              frame_row_index+=1\n\n    # Place inside cluster elements to side of frame\n    inside_objects = find_objects(inside_grid)\n    inside_object_col = 1 # start one to side of frame\n    for obj in inside_objects:\n        for r, c in obj:\n            if inside_object_col < output_grid.shape[1]:\n              output_grid[r, inside_object_col] = input_grid[r,c]\n        inside_object_col += 1\n        \n    output_grid = np.where(output_grid == -1, 9, output_grid)\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3493,
    "candidates_token_count": 1266,
    "total_token_count": 4759,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 19.531552
}