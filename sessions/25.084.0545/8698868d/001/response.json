{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe input grid is divided into four quadrants. Each quadrant is processed separately.\nWithin each quadrant, a dominant color is identified (background color). Only pixels of this\ndominant color are retained; others are discarded.  A color substitution is applied\nto remaining pixels based on predefined patterns, and then the quadrants are combined to\nform the reduced-size output grid.\n\"\"\"\n\nimport numpy as np\n\ndef get_quadrant(grid, quadrant_name):\n    rows, cols = grid.shape\n    mid_row = rows // 2\n    mid_col = cols // 2\n\n    if quadrant_name == \"top_left\":\n        return grid[:mid_row, :mid_col]\n    elif quadrant_name == \"top_right\":\n        return grid[:mid_row, mid_col:]\n    elif quadrant_name == \"bottom_left\":\n        return grid[mid_row:, :mid_col]\n    elif quadrant_name == \"bottom_right\":\n        return grid[mid_row:, mid_col:]\n    else:\n        raise ValueError(\"Invalid quadrant name\")\n\ndef get_background_color(quadrant):\n    return quadrant[0, 0]\n\ndef preserve_background(quadrant):\n     background_color = get_background_color(quadrant)\n     rows, cols = quadrant.shape\n     new_quadrant = np.zeros((rows, cols), dtype=int)\n     for i in range(rows):\n         for j in range(cols):\n             if quadrant[i,j] == background_color:\n                 new_quadrant[i,j] = quadrant[i,j]\n     return new_quadrant\n    \n\ndef substitute_pixels(quadrant, input_quadrant):\n    rows, cols = quadrant.shape\n    new_quadrant = quadrant.copy()\n    \n    # Create a mapping based on unique colors present, and assign a distinct color to colors that appear multiple times.\n    color_counts = {}\n    \n    for i in range(rows):\n        for j in range(cols):\n           color = input_quadrant[i,j]\n           if color not in color_counts:\n               color_counts[color] = 0\n           color_counts[color] += 1\n\n    # Find the new distinct colors for each quadrant. If there are colors that appear more than once, assign a unique color\n    available_colors = [1, 2, 3, 4, 5, 6, 7, 8, 9]  # All possible ARC colors\n    used_colors = set(color_counts.keys())\n    available_colors = [color for color in available_colors if color not in used_colors]\n    new_colors = {}\n\n    color_index = 0\n    for color,count in color_counts.items():\n        if count > 1:\n          if color not in new_colors:\n            new_colors[color] = available_colors[color_index]\n            color_index = (color_index + 1 ) % len(available_colors)\n\n    # Apply color substitution inside regions\n    for r in range(rows):\n      for c in range(cols):\n        original_color = input_quadrant[r,c]\n        if quadrant[r,c] != 0:  # check for preserved cells\n          if original_color in new_colors:\n              new_quadrant[r,c] = new_colors[original_color]\n\n    return new_quadrant\n\ndef transform(input_grid):\n    # Divide the input grid into four quadrants\n    top_left = get_quadrant(input_grid, \"top_left\")\n    top_right = get_quadrant(input_grid, \"top_right\")\n    bottom_left = get_quadrant(input_grid, \"bottom_left\")\n    bottom_right = get_quadrant(input_grid, \"bottom_right\")\n\n    # Preserve background colors\n    top_left_bg = preserve_background(top_left)\n    top_right_bg = preserve_background(top_right)\n    bottom_left_bg = preserve_background(bottom_left)\n    bottom_right_bg = preserve_background(bottom_right)    \n\n    # Apply pixel substitution based on the original input quadrants.\n    top_left_transformed = substitute_pixels(top_left_bg, top_left)\n    top_right_transformed = substitute_pixels(top_right_bg, top_right)\n    bottom_left_transformed = substitute_pixels(bottom_left_bg, bottom_left)\n    bottom_right_transformed = substitute_pixels(bottom_right_bg, bottom_right)\n\n    # Combine the quadrants to form the output grid\n    rows_tl, cols_tl = top_left_transformed.shape\n    rows_tr, cols_tr = top_right_transformed.shape\n    rows_bl, cols_bl = bottom_left_transformed.shape\n    rows_br, cols_br = bottom_right_transformed.shape\n\n    output_rows = max(rows_tl + rows_bl, rows_tr + rows_br)\n    output_cols = max(cols_tl + cols_tr, cols_bl + cols_br)\n\n    output_grid = np.zeros((output_rows, output_cols), dtype=int)\n    output_grid[:rows_tl, :cols_tl] = top_left_transformed\n    output_grid[:rows_tr, cols_tl:] = top_right_transformed\n    output_grid[rows_tl:, :cols_bl] = bottom_left_transformed\n    output_grid[rows_tl:, cols_bl:] = bottom_right_transformed\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4963,
    "candidates_token_count": 1299,
    "total_token_count": 6262,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 19.751091
}