{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by modifying specific subgrids based on their neighboring colors.\nIsolated pixels are identified but not modified.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef find_subgrids(grid):\n    \"\"\"Finds all maximal rectangular subgrids of a single non-zero color.\"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n    subgrids = []\n\n    def is_valid(r, c, color):\n        return 0 <= r < rows and 0 <= c < cols and grid[r, c] == color and not visited[r, c]\n\n    def expand_subgrid(r, c, color):\n        \"\"\"Expands a subgrid from a starting cell.\"\"\"\n        min_r, max_r = r, r\n        min_c, max_c = c, c\n\n        # Expand vertically\n        while min_r > 0 and is_valid(min_r - 1, c, color):\n            min_r -= 1\n        while max_r < rows - 1 and is_valid(max_r + 1, c, color):\n            max_r += 1\n\n        # Expand horizontally\n        for row in range(min_r, max_r + 1):\n            while min_c > 0 and is_valid(row, min_c - 1, color):\n                min_c -= 1\n            while max_c < cols - 1 and is_valid(row, max_c + 1, color):\n                max_c += 1\n        \n        pixels = []\n        for row in range(min_r, max_r+1):\n            for col in range(min_c, max_c + 1):\n                visited[row,col] = True\n                pixels.append( ((row,col), grid[row,col]) )\n\n        return {'top_left': (min_r, min_c), 'bottom_right': (max_r, max_c),\n                'height': max_r - min_r + 1, 'width': max_c - min_c + 1,\n                'color': color, 'pixels': pixels}\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and not visited[r, c]:\n                subgrids.append(expand_subgrid(r, c, grid[r, c]))\n    return subgrids\n\ndef find_isolated_pixels(grid):\n    \"\"\"Finds isolated non-zero pixels surrounded by zeros (cardinal directions only).\"\"\"\n    rows, cols = grid.shape\n    isolated_pixels = []\n\n    def is_isolated(r, c):\n        if grid[r,c] == 0:\n            return False\n        for dr in [-1, 0, 1]:\n            for dc in [-1, 0, 1]:\n                if (dr, dc) == (0, 0):\n                    continue\n                nr, nc = r + dr, c + dc\n                if 0 <= nr < rows and 0 <= nc < cols:\n                    if nr == r or nc == c:  # Check immediate neighbors only\n                        if grid[nr, nc] != 0:\n                            return False\n        return True\n\n    for r in range(rows):\n        for c in range(cols):\n            if is_isolated(r, c):\n                isolated_pixels.append( {'position':(r,c), 'color':grid[r,c]} )\n    return isolated_pixels\n\ndef get_cardinal_neighbors(grid, r, c):\n    \"\"\"Gets the cardinal neighbors (up, down, left, right) of a cell.\"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n        nr, nc = r + dr, c + dc\n        if 0 <= nr < rows and 0 <= nc < cols:\n            neighbors.append(grid[nr, nc])\n    return neighbors\n\ndef process_subgrid(grid, subgrid):\n    \"\"\"Processes a subgrid, potentially changing its color.\"\"\"\n    top_left = subgrid['top_left']\n    bottom_right = subgrid['bottom_right']\n    subgrid_color = subgrid['color']\n\n    # Collect all cardinal neighbors of the subgrid\n    neighboring_colors = []\n    for r in range(top_left[0], bottom_right[0] + 1):\n        neighboring_colors.extend(get_cardinal_neighbors(grid, r, top_left[1] - 1))  # Left side\n        neighboring_colors.extend(get_cardinal_neighbors(grid, r, bottom_right[1] + 1))  # Right side\n    for c in range(top_left[1], bottom_right[1] + 1):\n        neighboring_colors.extend(get_cardinal_neighbors(grid, top_left[0] - 1, c))  # Top side\n        neighboring_colors.extend(get_cardinal_neighbors(grid, bottom_right[0] + 1, c))  # Bottom side\n\n    # Count neighboring color occurrences (excluding 0)\n    neighbor_counts = Counter(color for color in neighboring_colors if color != 0)\n\n    if len(neighbor_counts) > 1:  # More than one neighboring color\n        most_common_color = neighbor_counts.most_common(1)[0][0]\n        if most_common_color != subgrid_color:\n            # Fill the subgrid with the most common neighboring color\n            for r in range(top_left[0], bottom_right[0] + 1):\n                for c in range(top_left[1], bottom_right[1] + 1):\n                    grid[r, c] = most_common_color\n    return grid\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the defined rules.\n    \"\"\"\n    grid = np.array(input_grid)  # Convert to NumPy array\n\n    # Find subgrids and isolated pixels\n    subgrids = find_subgrids(grid)\n    isolated_pixels = find_isolated_pixels(grid)  # Identified but not used\n\n    # Process subgrids\n    for subgrid in subgrids:\n        grid = process_subgrid(grid, subgrid)\n\n    # Isolated pixels are not processed\n\n    return grid.tolist()  # Convert back to list\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 9382,
    "candidates_token_count": 1512,
    "total_token_count": 10894,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 20.577434
}