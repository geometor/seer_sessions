{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by expanding connected regions of foreground pixels horizontally to the right, until a different color or the edge of the grid is encountered.\n\"\"\"\n\nimport numpy as np\n\ndef get_foreground_color(grid):\n    \"\"\"\n    Determines the foreground color by excluding the most frequent (background) color.\n    \"\"\"\n    unique_colors, counts = np.unique(grid, return_counts=True)\n    background_color = unique_colors[np.argmax(counts)]\n    foreground_colors = [color for color in unique_colors if color != background_color]\n    # Handles multi-foreground\n    if foreground_colors:\n       return foreground_colors[0] if len(foreground_colors) == 1 else foreground_colors\n    return None\n\ndef transform(input_grid):\n    \"\"\"\n    Expands connected regions of a foreground color horizontally to the right within a grid.\n    \"\"\"\n    # Convert input grid to a NumPy array for easier manipulation.\n    grid = np.array(input_grid)\n    output_grid = np.copy(grid)  # Start with a copy of the input grid.\n    rows, cols = grid.shape\n    \n    foreground_color = get_foreground_color(grid)\n    if foreground_color is None:\n       return output_grid\n\n    if not isinstance(foreground_color, list):\n       foreground_color = [foreground_color]\n    # Iterate through each row of the grid.\n    for r in range(rows):\n        # Iterate over 'runs' of foreground\n        in_run = False\n        start_run = -1\n        for c in range(cols):\n          if grid[r,c] in foreground_color:\n             if not in_run:\n                in_run = True\n                start_run = c\n          elif in_run:\n            in_run = False\n            # check if needs expanding\n            if start_run != -1 and c-1 > start_run:\n               for i in range(start_run + 1, c):\n                  output_grid[r,i] = output_grid[r,start_run]\n        if in_run and start_run != -1: # expand to end of row if necessary\n               for i in range(start_run+1, cols):\n                  output_grid[r,i] = output_grid[r,start_run]\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 22066,
    "candidates_token_count": 551,
    "total_token_count": 22617,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.515172
}