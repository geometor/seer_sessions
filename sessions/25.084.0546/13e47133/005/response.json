{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid into an output grid based on anchor-based (red=2, gray=5) horizontal propagation and mirroring.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    # initialize output_grid\n    input_grid = np.array(input_grid)\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Find anchor pixels (red = 2)\n    anchor_positions = np.where(input_grid == 2)\n    anchor_rows = anchor_positions[0]\n    anchor_cols = anchor_positions[1]\n\n    anchor_col_map = {}  # map row number to list of anchor column positions\n    for r,c in zip(anchor_rows, anchor_cols):\n        if r not in anchor_col_map:\n            anchor_col_map[r] = []\n        anchor_col_map[r].append(c)\n\n    # Iterate through rows\n    for row in range(rows):\n        if row in anchor_col_map:\n            anchors = sorted(anchor_col_map[row])\n\n            # process to left of first anchor\n            first_anchor = anchors[0]\n            for col in range(first_anchor):\n                 # Check for gray anchor to the left, stop propagation\n                if 5 in input_grid[row, :col+1]:\n                    gray_anchor_pos = np.where(input_grid[row, :col+1] == 5)[0][-1] # get the rightmost gray\n                    output_grid[row,col] = output_grid[row, col] # no change\n                else:\n                    output_grid[row, col] = _transform_left(input_grid[row, col])\n\n            # process between anchors (mirroring)\n            for i in range(len(anchors)-1):\n                anchor1 = anchors[i]\n                anchor2 = anchors[i+1]\n                for col in range(anchor1+1, anchor2):\n                    # mirrored position\n                    input_val_index = anchor1 + (anchor2 - col)\n                    # use transform_right rules for mirroring, but with corrected index\n                    output_grid[row,col] = _transform_right(input_grid[row, input_val_index], input_grid, row, input_val_index)\n\n            # process to right of last anchor\n            last_anchor = anchors[-1]\n            for col in range(last_anchor+1, cols):\n                # Check for gray anchor to right, stop propagation\n                gray_anchors_right = np.where(input_grid[row, last_anchor+1:] == 5)[0]\n                if len(gray_anchors_right) > 0:\n                    first_gray_anchor_right = gray_anchors_right[0] + last_anchor + 1\n                    if col >= first_gray_anchor_right:\n                        output_grid[row, col] = input_grid[row, col]  # No change past gray\n                        continue  # Skip to the next column\n\n                output_grid[row, col] = _transform_right(input_grid[row, col], input_grid, row, col)\n\n\n        # Rows without red anchors remain unchanged (already handled by initializing output as a copy)\n\n    return output_grid.tolist()\n\ndef _transform_left(input_val):\n    # Transformation rules for left of anchor\n    if input_val == 1:\n        return 8\n    elif input_val == 3:\n        return 3\n    elif input_val == 4:\n        return 4\n    elif input_val == 7:\n        return 7\n    else:\n        return input_val\n\ndef _transform_right(input_val, input_grid, row, col):\n    # Transformation rules for right of anchor\n    if input_val == 1:\n        return 8\n    elif input_val == 4:\n        # Check for any red anchors to the left within the current segment\n        red_to_left = False\n        for c in range(col):\n          if input_grid[row, c] == 2:\n            red_to_left = True\n            break\n\n        if red_to_left:\n            return 4\n        else:\n            return 8\n    elif input_val == 8:\n        return 8\n    elif input_val == 0:\n        return 0\n    elif input_val == 5:\n        return 5\n    else:\n        return input_val\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 20215,
    "candidates_token_count": 1055,
    "total_token_count": 21270,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 13.481955
}