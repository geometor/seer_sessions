{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by mirroring objects across a central blue line and recoloring some of them.\nObjects above the blue line are mirrored below, and vice-versa.  Specific recoloring rules are applied.\n\"\"\"\n\nimport numpy as np\n\ndef find_blue_line(grid):\n    # Find the row index of the horizontal blue line (all 1s)\n    for i, row in enumerate(grid):\n        if np.all(row == 1):\n            return i\n    return -1  # Return -1 if no blue line is found\n\ndef get_objects(grid):\n    \"\"\"\n    Identifies contiguous objects in the grid.\n    Returns a list of objects, where each object is a list of (row, col) tuples.\n    \"\"\"\n    objects = []\n    visited = set()\n    rows, cols = grid.shape\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def dfs(r, c, color, current_object):\n        if (r, c) in visited or not is_valid(r, c) or grid[r, c] != color:\n            return\n        visited.add((r, c))\n        current_object.append((r, c))\n\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            dfs(r + dr, c + dc, color, current_object)\n\n    for r in range(rows):\n        for c in range(cols):\n            if (r, c) not in visited:\n                current_object = []\n                dfs(r, c, grid[r, c], current_object)\n                if current_object:\n                    objects.append(current_object)\n    return objects\n\ndef get_object_centroid(obj):\n    \"\"\"Calculates the centroid (center of mass) of an object.\"\"\"\n    row_sum = sum(r for r, _ in obj)\n    col_sum = sum(c for _, c in obj)\n    return row_sum / len(obj), col_sum / len(obj)\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.full_like(input_grid, 4) # Fill with background color (4)\n    rows, cols = input_grid.shape\n    \n    # Find the blue line\n    blue_line_row = find_blue_line(input_grid)\n    if blue_line_row == -1:\n      return input_grid\n\n    # insert the blue line\n    output_grid[blue_line_row, :] = 1\n\n    # Get objects\n    objects = get_objects(input_grid)\n\n    # Mirror and recolor\n    for obj in objects:\n        # Skip the blue line itself\n        if all(input_grid[r,c] == 1 for r, c in obj):\n           continue\n\n        for r, c in obj:\n\n            if r < blue_line_row: # Above the blue line\n                dist = blue_line_row - r\n                new_r = blue_line_row + dist\n\n                if new_r < rows: # prevent out of range\n                   output_grid[new_r,c] = input_grid[r,c]\n            elif r > blue_line_row:\n                dist = r - blue_line_row\n                new_r = blue_line_row - dist\n\n                if new_r >= 0:  # prevent out of range\n                    output_grid[new_r,c] = input_grid[r,c]\n\n    # Recolor based on original and mirrored position (Example 2 specific logic)\n    for obj in objects:\n        if all(input_grid[r,c] == 1 for r, c in obj):\n           continue\n        \n        for r, c in obj:\n\n            if r < blue_line_row:\n                dist = blue_line_row - r\n                new_r = blue_line_row + dist\n                if new_r < rows:\n                    original_color = input_grid[r,c]\n                    if original_color == 2:\n                        output_grid[new_r, c] = 2\n                    if original_color == 3:\n                        if new_r > blue_line_row and new_r < rows -1 :\n                            output_grid[new_r+1,c] = 3\n                    if original_color == 8:\n                        output_grid[new_r,c] = 8\n                    if original_color == 9:\n                        output_grid[new_r,c] = 9\n\n            elif r > blue_line_row:\n                dist = r-blue_line_row\n                new_r = blue_line_row - dist\n                if new_r >= 0:\n                    original_color = input_grid[r,c]\n                    if original_color == 2:\n                        output_grid[new_r,c] = 2\n                    if original_color == 3:\n                      if new_r > 0:\n                          output_grid[new_r-1,c] = 3\n                    if original_color == 8:\n                        output_grid[new_r,c] = 8\n                    if original_color == 9:\n                        output_grid[new_r,c] = 9\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 32120,
    "candidates_token_count": 1253,
    "total_token_count": 33373,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 16.027216
}