{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by mirroring objects across a central blue line and\nrecoloring/shifting some of them. Objects are mirrored based on their distance\nfrom the blue line. Specific recoloring and shifting rules are applied based on\nthe object's original color and position relative to the blue line.\n\"\"\"\n\nimport numpy as np\n\ndef find_blue_line(grid):\n    # Find the row index of the horizontal blue line (all 1s)\n    for i, row in enumerate(grid):\n        if np.all(row == 1):\n            return i\n    return -1  # Return -1 if no blue line is found\n\ndef get_objects(grid):\n    \"\"\"\n    Identifies contiguous objects in the grid.\n    Returns a list of objects, where each object is a list of (row, col) tuples.\n    \"\"\"\n    objects = []\n    visited = set()\n    rows, cols = grid.shape\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def dfs(r, c, color, current_object):\n        if (r, c) in visited or not is_valid(r, c) or grid[r, c] != color:\n            return\n        visited.add((r, c))\n        current_object.append((r, c))\n\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            dfs(r + dr, c + dc, color, current_object)\n\n    for r in range(rows):\n        for c in range(cols):\n            if (r, c) not in visited:\n                current_object = []\n                dfs(r, c, grid[r, c], current_object)\n                if current_object:\n                    objects.append(current_object)\n    return objects\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid) # Start with a copy of the input\n    rows, cols = input_grid.shape\n\n    # Find the blue line\n    blue_line_row = find_blue_line(input_grid)\n    if blue_line_row == -1:\n        return input_grid  # Return original if no blue line\n\n    # Get objects\n    objects = get_objects(input_grid)\n\n    # Mirror and recolor/shift\n    for obj in objects:\n        # Skip the blue line itself\n        if all(input_grid[r, c] == 1 for r, c in obj):\n            continue\n\n        for r, c in obj:\n            original_color = input_grid[r,c]\n\n            if r < blue_line_row:  # Above the blue line\n                dist = blue_line_row - r\n                new_r = blue_line_row + dist\n\n                if new_r < rows: # prevent out of range\n                    output_grid[new_r, c] = original_color # default mirror\n\n                    # Specific color/shifting rules\n                    if original_color == 3:\n                        output_grid[new_r, c] = 3\n                        if new_r < rows-1:\n                           output_grid[new_r + 1, c] = 3  # shift down by one\n                    elif original_color == 2:\n                        output_grid[new_r, c] = 2\n\n\n            elif r > blue_line_row:  # Below the blue line\n                dist = r - blue_line_row\n                new_r = blue_line_row - dist\n                if new_r >=0:\n                   output_grid[new_r,c] = original_color\n\n                   if original_color == 3 :\n                      output_grid[new_r,c] = 3\n                      if new_r > 0:\n                         output_grid[new_r - 1, c] = 3  # Shift up by one\n\n                   elif original_color == 2:\n                        output_grid[new_r,c] = 2\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 11549,
    "candidates_token_count": 945,
    "total_token_count": 12494,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 14.489801
}