{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Regions:** Divide the input grid into distinct regions. A region is a group of connected pixels of the same color. Pixels are considered connected if they are adjacent horizontally, vertically, or diagonally.\n2.  **Identify Boundary Pixels:** A boundary pixel is a pixel that belongs to a region and is directly adjacent (horizontally, vertically, or diagonally) to a pixel of a *different* color. White pixels act act as boundary _except_ when the white pixels make a straight line between regions.\n3. **Line Completion Rule**: Examine the boundaries between colored regions (excluding white, except where a white line separates). If a pixel at the boundary, when changed to azure (8), would *complete a continuous, straight line of azure* of length greater than one, then make the transformation based on these additional constraints:\n   * If the changed pixel has only one adjacent non-white neighbor in the target region, it changes to azure (8).\n   * If the changed pixel has 3 or more adjacent non-white neighbors in the adjacent region, _and_ is part of the other color region, it changes to azure (8).\n\n4. Never change the color of a white (0) pixel.\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, r, c, include_white=False):\n    \"\"\"Gets the valid neighbors of a pixel, including diagonals.\"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    for dr in [-1, 0, 1]:\n        for dc in [-1, 0, 1]:\n            if dr == 0 and dc == 0:\n                continue  # Skip the pixel itself\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < rows and 0 <= nc < cols:\n                if include_white or grid[nr, nc] != 0:\n                  neighbors.append((nr, nc))\n    return neighbors\n\ndef would_complete_line(grid, r, c, color=8):\n    \"\"\"\n    Checks if changing the pixel at (r, c) to 'color' would complete a line.\n    \"\"\"\n    rows, cols = grid.shape\n    \n    # Check horizontal line\n    if c > 0 and c < cols - 1 and grid[r, c-1] == color and grid[r, c+1] == color:\n        return True\n    # Check vertical line\n    if r > 0 and r < rows - 1 and grid[r-1, c] == color and grid[r+1, c] == color:\n        return True\n      \n    #check diagonal line\n    if r > 0 and r < rows -1 and c > 0 and c < cols - 1:\n\n        if grid[r-1,c-1] == color and grid[r+1,c+1] == color:\n            return True\n\n        if grid[r-1,c+1] == color and grid[r+1, c-1] == color:\n            return True\n\n    return False\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by changing the color of boundary pixels.\n    \"\"\"\n    rows, cols = input_grid.shape\n    output_grid = np.copy(input_grid)\n\n    # Iterate through each pixel to find boundary pixels\n    for r in range(rows):\n        for c in range(cols):\n            current_color = input_grid[r, c]\n\n            # Skip white pixels\n            if current_color == 0:\n                continue\n\n            neighbors = get_neighbors(input_grid, r, c)\n            for nr, nc in neighbors:\n                neighbor_color = input_grid[nr, nc]\n\n                # Check for boundary and color difference\n                if neighbor_color != current_color and neighbor_color != 0:\n                    # Check Line Completion Rule\n                    if would_complete_line(output_grid, r, c):\n                        \n                        non_white_neighbors_target = 0\n                        for nnr, nnc in get_neighbors(input_grid,r,c, include_white = False):\n                            if input_grid[nnr,nnc] == current_color:\n                                non_white_neighbors_target += 1\n\n                        non_white_neighbors_adjacent = 0\n                        for nnr, nnc in get_neighbors(input_grid, r,c, include_white=False):\n                            if input_grid[nnr,nnc] == neighbor_color:\n                                non_white_neighbors_adjacent+=1\n                            \n                        if non_white_neighbors_target == 1:\n                            output_grid[r,c] = 8\n\n                        elif non_white_neighbors_adjacent >=3 and input_grid[r,c] != current_color:\n                           output_grid[r,c] = 8\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 13685,
    "candidates_token_count": 1098,
    "total_token_count": 14783,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 12.069761
}