{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIterate through the input grid columns from right to left.  Within each column, identify clusters of contiguous, identical, non-zero pixels. Shift these clusters one position to the left if there are any clusters in the column to its left. Preserve the original background (0-value pixels) unless overwritten by shifted clusters.\n\"\"\"\n\nimport numpy as np\n\ndef find_clusters(grid):\n    \"\"\"Finds clusters of contiguous non-zero pixels of the same color.\"\"\"\n    clusters = []\n    visited = np.zeros_like(grid, dtype=bool)\n\n    def dfs(row, col, color, cluster):\n        \"\"\"Depth-first search to find contiguous pixels.\"\"\"\n        if (\n            row < 0\n            or row >= grid.shape[0]\n            or col < 0\n            or col >= grid.shape[1]\n            or visited[row, col]\n            or grid[row, col] != color\n            or grid[row, col] == 0\n        ):\n            return\n        visited[row, col] = True\n        cluster.append((row, col))\n        dfs(row + 1, col, color, cluster)\n        dfs(row - 1, col, color, cluster)\n        dfs(row, col + 1, color, cluster)\n        dfs(row, col - 1, color, cluster)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if not visited[row, col] and grid[row, col] != 0:\n                cluster = []\n                dfs(row, col, grid[row, col], cluster)\n                if cluster:\n                    clusters.append(cluster)\n    return clusters\n\ndef shift_cluster_left(grid, cluster):\n    \"\"\"Shifts a cluster one position to the left, if possible.\"\"\"\n    new_grid = np.copy(grid)\n    \n    #check if we can move cluster, exit early\n    can_move = True\n    for row, col in cluster:\n        if col == 0:\n            can_move = False\n            break\n\n    if not can_move: return new_grid\n\n    # clear cells\n    for row, col in cluster:\n        new_grid[row, col] = 0\n\n    # move cluster\n    for row, col in cluster:\n        new_grid[row, col - 1] = grid[row, col]\n    return new_grid\n    \n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the observed rule.\"\"\"\n    \n    output_grid = np.copy(input_grid)\n    \n    # iterate by columns, right to left\n    for col in range(output_grid.shape[1] - 1, -1, -1):\n        clusters_in_col = []\n        \n        # any clusters in the column?\n        for row in range(output_grid.shape[0]):\n             if output_grid[row, col] != 0:\n                 #get the object and try to shift\n                 for cluster in find_clusters(output_grid):\n                     for r,c in cluster:\n                         if r == row and c == col:\n                             clusters_in_col.append(cluster)\n                             \n        # check if there are any other clusters to the left, and\n        #   we have clusters to shift\n        if col > 0 and len(clusters_in_col) > 0:\n            left_cells = output_grid[:, :col]\n            if np.any(left_cells != 0):\n              for cluster in clusters_in_col:\n                output_grid = shift_cluster_left(output_grid, cluster)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4293,
    "candidates_token_count": 848,
    "total_token_count": 5141,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 13.847229
}