{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid by extracting rectangular blocks of non-white pixels,\nreordering them based on their width, and stacking them vertically in the output grid.\n\"\"\"\n\nimport numpy as np\n\ndef get_rectangles(grid):\n    \"\"\"\n    Identifies and extracts rectangular blocks of non-white pixels from the input grid.\n    \"\"\"\n    rectangles = []\n    visited = set()\n    rows, cols = grid.shape\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def dfs(r, c, color, rect_coords):\n        if (r, c) in visited or not is_valid(r, c) or grid[r, c] != color:\n            return\n        visited.add((r, c))\n        rect_coords.append((r, c))\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            dfs(r + dr, c + dc, color, rect_coords)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and (r, c) not in visited:\n                rect_coords = []\n                dfs(r, c, grid[r, c], rect_coords)\n                if rect_coords:\n                    min_r = min(coord[0] for coord in rect_coords)\n                    max_r = max(coord[0] for coord in rect_coords)\n                    min_c = min(coord[1] for coord in rect_coords)\n                    max_c = max(coord[1] for coord in rect_coords)\n                    rectangles.append({\n                        'color': grid[r, c],\n                        'min_r': min_r,\n                        'max_r': max_r,\n                        'min_c': min_c,\n                        'max_c': max_c,\n                        'height': max_r - min_r + 1,\n                        'width': max_c - min_c + 1,\n                        'coords': rect_coords\n                    })\n    return rectangles\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by extracting, reordering, and stacking rectangular blocks.\n    \"\"\"\n    input_grid = np.array(input_grid)  # Ensure input is a NumPy array\n    rectangles = get_rectangles(input_grid)\n\n    # Group rectangles by repeating width pattern\n    groups = {}\n    for rect in rectangles:\n        width = rect['width']\n        if width not in groups:\n            groups[width] = []\n        groups[width].append(rect)\n    \n    # Sort groups by their first appearance in original rectangle order\n    sorted_group_keys = sorted(groups.keys(), key=lambda k: min(rectangles.index(r) for r in groups[k]))\n    \n    output_height = 0\n    for key in sorted_group_keys:\n        output_height += len(groups[key])\n\n    output_width = 0\n\n    for g in sorted_group_keys:\n      output_width += groups[g][0]['width']\n    \n    output_grid = np.zeros((output_height, output_width), dtype=int)\n    \n    curr_row = 0\n    curr_col = 0\n\n    for group_key in sorted_group_keys:\n        group = groups[group_key]\n        group_width = groups[group_key][0]['width']\n\n        for rect in group:\n          # Place rectangles based on type\n          for r in range(rect['height']):\n              for c in range(rect['width']):\n                  output_grid[curr_row + r, curr_col + c] = rect['color']\n          curr_row += rect['height']\n        \n        #increment current column\n        curr_col += group_width\n\n        curr_row = 0 #reset current row\n\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6216,
    "candidates_token_count": 930,
    "total_token_count": 7146,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 12.90032
}