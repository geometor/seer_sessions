{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nAdd a vertical magenta (color 6) border on the left side of the grid. Then, starting from the left, replace orange (color 7) pixels with magenta (6) in a way that creates proximity to or fills in gaps around the red shapes, expanding until no more red shapes can be immediately filled.\n\"\"\"\n\nimport numpy as np\n\ndef get_objects(grid):\n    \"\"\"Find contiguous regions of the same color.\"\"\"\n    objects = {}\n    visited = np.zeros_like(grid, dtype=bool)\n    rows, cols = grid.shape\n\n    def dfs(r, c, color, obj_id):\n        if (r < 0 or r >= rows or c < 0 or c >= cols or\n                visited[r, c] or grid[r, c] != color):\n            return []\n\n        visited[r, c] = True\n        coords = [(r, c)]\n\n        coords.extend(dfs(r + 1, c, color, obj_id))\n        coords.extend(dfs(r - 1, c, color, obj_id))\n        coords.extend(dfs(r, c + 1, color, obj_id))\n        coords.extend(dfs(r, c - 1, color, obj_id))\n        return coords\n\n    obj_id = 0\n    for r in range(rows):\n        for c in range(cols):\n            if not visited[r, c]:\n                color = grid[r, c]\n                coords = dfs(r, c, color, obj_id)\n                if coords:\n                    objects[obj_id] = {\n                        'color': color,\n                        'coords': coords\n                    }\n                    obj_id += 1\n    return objects\n\ndef is_adjacent_to_color(grid, coord, target_color):\n    \"\"\"Checks if the given coordinate is adjacent to a cell of the target color.\"\"\"\n    rows, cols = grid.shape\n    r, c = coord\n    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n        nr, nc = r + dr, c + dc\n        if 0 <= nr < rows and 0 <= nc < cols and grid[nr, nc] == target_color:\n            return True\n    return False\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the described rule.\"\"\"\n    \n    # Initialize output grid as a copy of the input grid.\n    output_grid = np.copy(input_grid)\n    rows, cols = output_grid.shape\n\n    # Add Left Magenta Border\n    for r in range(rows):\n        output_grid[r, 0] = 6\n\n    # Overlay/Fill with Magenta\n    objects = get_objects(input_grid)  # Use input_grid to identify initial red regions.\n\n    # Find initial red coordinates\n    red_coords = []\n    for obj_id, obj_data in objects.items():\n      if obj_data['color'] == 2:\n        red_coords.extend(obj_data['coords'])\n\n    # Iteratively fill around Red\n    \n    visited = np.zeros_like(input_grid,dtype=bool)   \n    queue = [(r,0) for r in range(rows)] # Start expanding from left border.\n    for r,c in queue:\n        visited[r,c] = True\n        \n    while queue:\n      new_queue = []\n      for r,c in queue:\n        if output_grid[r,c] == 7:\n          if any(is_adjacent_to_color(output_grid,(r+dr,c+dc),2) \n                for dr,dc in [(0,1),(0,-1),(1,0),(-1,0)]):\n              output_grid[r,c] = 6\n              \n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < rows and 0 <= nc < cols and not visited[nr,nc]:\n              visited[nr,nc]=True\n              new_queue.append((nr,nc))\n      queue = new_queue\n    \n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5550,
    "candidates_token_count": 993,
    "total_token_count": 6543,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 18.427963
}