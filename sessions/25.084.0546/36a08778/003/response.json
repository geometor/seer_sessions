{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nReplace orange pixels on the left edge with magenta.\nPropagate magenta color from the left, replacing orange pixels.\nPropagation requires adjacency to both existing magenta and red pixels.\nStop when no more orange pixels meet the adjacency condition.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of the input grid.\n    output_grid = np.copy(input_grid)\n    rows, cols = output_grid.shape\n\n    # Replace leftmost orange with magenta.\n    for r in range(rows):\n        if output_grid[r, 0] == 7:\n            output_grid[r, 0] = 6\n\n    # Iterative propagation of magenta.\n    while True:\n        changed = False\n        new_grid = np.copy(output_grid)  # Work on a copy to avoid in-place modification issues.\n        for r in range(rows):\n            for c in range(cols):\n                if new_grid[r, c] == 7:  # Check if it's orange.\n                    # Check for adjacency to magenta and red.\n                    adjacent_to_magenta = False\n                    adjacent_to_red = False\n\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = r + dr, c + dc\n                        if 0 <= nr < rows and 0 <= nc < cols:\n                            if new_grid[nr, nc] == 6:\n                                adjacent_to_magenta = True\n                            if new_grid[nr, nc] == 2:\n                                adjacent_to_red = True\n\n                    if adjacent_to_magenta and adjacent_to_red:\n                        output_grid[r, c] = 6  # Replace orange with magenta.\n                        changed = True\n\n        if not changed:  # Stop if no changes occurred in this iteration.\n            break\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 11369,
    "candidates_token_count": 450,
    "total_token_count": 11819,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.180859
}