{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Object Definition:** An object is a group of one or more diagonally or orthogonally connected pixels of the same color. The background is color 8.\n\n2.  **Horizontal Extension:** For each row and each object within that row, if the object has a horizontal span greater than one, extend the object's color horizontally to any *directly adjacent* background (color 8) pixels *to the immediate left or right*. This extension happens only *one pixel* at a time.\n\n3.  **Conditional Object Disappearance:**\n    *   Iterate through each row from top to bottom (except the last row).\n    *   For each multi-pixel horizontal object (span > 1) in the current row (N):\n        *   Check if an object of the *same color* and *same horizontal span* exists directly below it on row (N+1).\n        *   If no such object exists on row (N+1), then on row (N+1), create a new object of color 8 (background) with the *same horizontal span and x-coordinates* as the object from row N.\n\n4.  **Last Row Rule:** For each pixel in the last row:\n    *   If the pixel's color matches the color of *any* multi-pixel horizontal object (span > 1) found *anywhere* in the input grid, change the pixel's color to 8 (background). Otherwise, keep the original color.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"Finds contiguous objects of the same color in a grid, including diagonals.\"\"\"\n    objects = []\n    visited = set()\n    rows, cols = grid.shape\n\n    def dfs(row, col, color, obj):\n        if (row, col) in visited or not (0 <= row < rows and 0 <= col < cols) or grid[row, col] != color:\n            return\n        visited.add((row, col))\n        obj.append((row, col))\n        # Check all 8 neighbors\n        for dr in [-1, 0, 1]:\n            for dc in [-1, 0, 1]:\n                if dr == 0 and dc == 0:\n                    continue\n                dfs(row + dr, col + dc, color, obj)\n\n    for row in range(rows):\n        for col in range(cols):\n            if (row, col) not in visited and grid[row, col] != 8:\n                obj = []\n                dfs(row, col, grid[row, col], obj)\n                objects.append((grid[row, col], obj))\n    return objects\n\ndef get_horizontal_span(obj_pixels, row):\n    \"\"\"Calculates the horizontal span of an object on a specific row.\"\"\"\n    row_pixels = [c for r, c in obj_pixels if r == row]\n    if not row_pixels:\n        return 0, 0, 0  # No pixels on this row\n    min_col = min(row_pixels)\n    max_col = max(row_pixels)\n    return min_col, max_col, max_col - min_col + 1\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the specified rules.\"\"\"\n    input_grid = np.array(input_grid)\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    objects = find_objects(input_grid)\n\n    # Horizontal Extension (One Pixel at a Time)\n    for r in range(rows):\n        for color, obj_pixels in objects:\n            min_col, max_col, span = get_horizontal_span(obj_pixels, r)\n            if span > 1:\n                # Check left\n                if min_col > 0 and output_grid[r, min_col - 1] == 8:\n                    output_grid[r, min_col - 1] = color\n                # Check right\n                if max_col < cols - 1 and output_grid[r, max_col + 1] == 8:\n                    output_grid[r, max_col + 1] = color\n    \n    objects = find_objects(output_grid) #need to recalculate the objects\n\n    # Conditional Object Disappearance\n    for r in range(rows - 1):\n        for color, obj_pixels in objects:\n            min_col, max_col, span = get_horizontal_span(obj_pixels, r)\n            if span > 1:\n                # Check for same color and span on next row\n                next_row_min, next_row_max, next_row_span = get_horizontal_span(obj_pixels, r + 1)\n                if not (next_row_span == span and any(c == color for c, _ in objects if get_horizontal_span(_, r+1)[2] == span)):\n                    # Fill next row with 8 based on current row's span\n                    for c in range(min_col, max_col + 1):\n                        output_grid[r + 1, c] = 8\n\n    # Last Row Rule\n    for c in range(cols):\n        color = output_grid[rows - 1, c]\n        for other_color, other_obj_pixels in objects:\n            if other_color == color:\n                for rr in range(rows -1):\n                  _,_, other_span = get_horizontal_span(other_obj_pixels, rr)\n                  if other_span > 1:\n                    output_grid[rows - 1, c] = 8\n                    break # inner loop\n            if output_grid[rows - 1, c] == 8:\n              break; #outer loop\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 15150,
    "candidates_token_count": 1324,
    "total_token_count": 16474,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 17.086484
}