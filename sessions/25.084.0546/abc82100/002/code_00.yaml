example1:
  input_objects:
    - color: 1
      positions: [(0,0), (1,4), (2,3), (3,3), (4,4)]
    - color: 2
      positions: [(0,1)]
    - color: 8
      positions: [(0,2), (0,3), (0,4)]
    - color: 0
      positions:  [(1,0), (1,1), (1,2), (1,3), (2,0), (2,1), (2,2), (3,0), (3,1), (3,2), (4,0), (4,1), (4,2), (4,3)]
  output_objects:
    - color: 0
      positions: [(0,0), (0,1), (0,2), (0,3), (0,4), (1,0), (1,1), (1,2), (1,3), (2,0), (2,1), (2,2), (3,0), (3,1), (3,2), (4,0), (4,1), (4,2), (4,3)]
    - color: 2
      positions: [(1,4), (2,3), (2,4), (3,3),(3,4), (4,4)]
  transformations:
    - color: 1
      to: 2 # adjacent to 0
      where: adjacent_to_0
    - color: 1
      to: 0 # not adjacent to 0
      where: not_adjacent_to_0
    - color: 2
      to: 1 # always
    - color: 8
      to: 0 # always (in this example)

example2:
  input_objects:
    - color: 6
      positions: [(1,1), (1,3), (1,5), (1,7), (1,9), (1,11), (1,13)]
    - color: 2
      positions: [(3,1), (5,1), (7,1)]
    - color: 4
      positions: [(3,13), (5,13), (7,13), (10,2), (10,5)]
    - color: 8
      positions: [(6,4), (7,3), (7,5), (9,1), (9,7), (10,0), (10,8), (11,1), (11,7), (13,3), (13,5), (14,4)]
  output_objects:
    - color: 7
      positions: [(0,1), (0,3), (0,5), (0,7), (0,9), (0,11), (0,13), (1,0), (1,2), (1,4), (1,6), (1,8), (1,10), (1,12), (1,14)]
    - color: 4
      positions: [(2,1), (3,0), (4,1), (5,0), (6,1), (7,0), (8,1), (10,13), (11,12), (12,13)]
  transformations:
    - color: 6
      to: 7 # always
    - color: 7
      to: 6 # always
    - color: 2
      to: 4 # row index < 9, column index < 3
    - color: 2
      to: 1 # not applicable
    - color: 8
      to: 0
    - color: 8
      to: 6 # neighbor 7
    - color: 8
      to: 4 # neighbor is transformed to a 4
    - color: 4
      to: 2
    - color: 1
      to: 4
  notes: Complex. Vertical flips. Color transformations dependent on row and initial neighbors.
      
example3:
    transformations:
      - color: 1
        to: 7
      - color: 4
        to: 2
        where: column < 6 or column > 13
      - color: 8
        to: 0

example4:
  input_objects:
  output_objects:
  transformations:
    - color: 1
      to: 2 # adjacent to 2
      where: adjacent_to_2_input
    - color: 1
      to: 0 # not adjacent to 2
    - color: 2
      to: 1  # always
    - color: 8
      to: 0 # no neighbor transformed to 1
    - color: 8
      to: 2 # with neighbor 1 or transformed neighbor 2
