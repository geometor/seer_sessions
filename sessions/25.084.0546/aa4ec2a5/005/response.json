{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Blue Regions:** Find all contiguous regions (objects) of blue (1) pixels within the input grid.\n2.  **Create Red Outline:** For each identified blue region:\n    *   Examine the pixels immediately surrounding the blue region.\n    *   If a surrounding pixel is yellow (4) or is part of the input image boundary, change it to red (2).\n3.  **Create Light Blue Inner Border:**\n    *   For each identified blue region, find its inner border pixels (blue pixels adjacent to non-blue pixels). Change the inner border to light blue(8).\n4.  **Fill Central Area with Gray:** Replace all remaining blue (1) pixels within each original blue region with gray (5).\n5. **Preserve other colors** Pixels not part of the above transformations should remain unchanged\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, color):\n    \"\"\"Finds contiguous regions of the specified color.\"\"\"\n    mask = (grid == color)\n    rows, cols = grid.shape\n    labeled_grid = np.zeros_like(grid)\n    label_count = 0\n\n    def dfs(r, c, label):\n        \"\"\"Depth-first search to label connected components.\"\"\"\n        if r < 0 or r >= rows or c < 0 or c >= cols or grid[r, c] != color or labeled_grid[r, c] != 0:\n            return\n        labeled_grid[r, c] = label\n        dfs(r + 1, c, label)\n        dfs(r - 1, c, label)\n        dfs(r, c + 1, label)\n        dfs(r, c - 1, label)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == color and labeled_grid[r, c] == 0:\n                label_count += 1\n                dfs(r, c, label_count)\n\n    return labeled_grid, label_count\n\ndef get_neighbors(grid, r, c):\n    \"\"\"Gets the valid neighbors of a cell (up, down, left, right).\"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    if r > 0:\n        neighbors.append((r - 1, c))\n    if r < rows - 1:\n        neighbors.append((r + 1, c))\n    if c > 0:\n        neighbors.append((r, c - 1))\n    if c < cols - 1:\n        neighbors.append((r, c + 1))\n    return neighbors\n\ndef get_border(grid, labeled_array, object_label):\n    \"\"\"Gets the outer border pixels of a labeled object.\"\"\"\n    border_pixels = []\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            if labeled_array[r, c] == object_label:\n                for nr, nc in get_neighbors(grid, r, c):\n                    if labeled_array[nr, nc] != object_label:\n                        border_pixels.append((r, c))\n                        break  # Stop checking neighbors once a border is found\n    return border_pixels\n\ndef get_outer_border(input_grid, labeled_array, object_label):\n    \"\"\"\n    Find the pixels that immediately surround the current blue object, *and* are not part of the object.\n    \"\"\"\n    outer_border = []\n    rows, cols = input_grid.shape\n    object_pixels = []\n\n    # first, find all pixels of this object\n    for r in range(rows):\n        for c in range(cols):\n            if labeled_array[r,c] == object_label:\n                object_pixels.append((r,c))\n\n    # now find surrounding pixels, only if not part of the object\n    for r, c in object_pixels:\n        for nr, nc in get_neighbors(input_grid, r, c):\n            if labeled_array[nr, nc] != object_label:\n                outer_border.append((nr,nc))\n    return outer_border\n    \n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the observed rules.\"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = output_grid.shape\n\n    # 1. Identify Blue Regions\n    labeled_array, num_blue_objects = find_objects(input_grid, 1)\n\n    for i in range(1, num_blue_objects + 1):  # Iterate through each blue object\n        # 2. Create Red Outline\n        \n        outer_border = get_outer_border(input_grid, labeled_array, i)\n        for r, c in outer_border:\n            if input_grid[r,c] == 4 or r == 0 or r == rows-1 or c == 0 or c == cols-1:\n                output_grid[r, c] = 2\n\n        # 3. Create Light Blue Inner Border\n        \n        blue_border_pixels = get_border(input_grid, labeled_array, i) # get border of the original shape\n        for r, c in blue_border_pixels:\n           output_grid[r,c] = 8\n\n        # 4. Fill Central Area with Gray\n        for r in range(rows):\n            for c in range(cols):\n                if labeled_array[r, c] == i and output_grid[r,c] == 1: # still blue in the output\n                    output_grid[r, c] = 5\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 1735,
            "end_index": 1993,
            "uri": "https://github.com/Anuj-cs20/IIITDMK_CSE_Coursework",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 12150,
    "candidates_token_count": 1297,
    "total_token_count": 13447,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 15.689782
}