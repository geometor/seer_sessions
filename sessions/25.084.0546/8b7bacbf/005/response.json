{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Object Identification:** Identify distinct objects within the grid. An object is a contiguous group of pixels of the same color. Contiguous means connected horizontally or vertically. Ignore objects of color 7.\n\n2.  **Iterate:** For each identified object:\n\n3.  **Red Object Transformation:**\n    *   If the object's color is red (2):\n        *   Check if the object is adjacent (horizontally or vertically) to *another* object of color red (2).\n        *   If it *is* adjacent to another red (2) object, change all pixels within the object to yellow (4).\n\n4.  **Preservation:** All other objects maintain their colors and positions.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"Finds contiguous objects in the grid, excluding color 0.\"\"\"\n    objects = []\n    visited = set()\n    rows, cols = grid.shape\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def dfs(r, c, current_object):\n        if (r, c) in visited or not is_valid(r, c) or grid[r, c] == 0:\n            return\n        visited.add((r, c))\n        current_object.append((r, c))\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            dfs(r + dr, c + dc, current_object)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and (r, c) not in visited:\n                current_object = []\n                dfs(r, c, current_object)\n                if current_object:\n                    objects.append((grid[r,c], current_object)) # Store color and object pixels\n    return objects\n\ndef is_adjacent_to_object_of_color(grid, object_pixels, color, objects):\n    \"\"\"Checks if an object is adjacent to another object of a specific color.\"\"\"\n    rows, cols = grid.shape\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    for r, c in object_pixels:\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n            if is_valid(nr, nc):\n                for other_color, other_object_pixels in objects:\n                    if other_color == color and (nr, nc) in other_object_pixels and other_object_pixels != object_pixels:\n                        return True\n    return False\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n    objects = find_objects(input_grid)\n\n    # Iterate through all objects found\n    for color, object_pixels in objects:\n        # Ignore color 7\n        if color == 7:\n            continue\n\n        # Red (2) Object Transformation\n        if color == 2:\n            adjacent_to_red = is_adjacent_to_object_of_color(input_grid, object_pixels, 2, objects)\n\n            if adjacent_to_red:\n                for r, c in object_pixels:\n                    output_grid[r, c] = 4\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 9440,
    "candidates_token_count": 809,
    "total_token_count": 10249,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.56048
}