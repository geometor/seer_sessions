{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Scan the input grid and identify all contiguous blocks of non-zero pixels.  Consider each block as a separate object. Note the color, shape, and position of each object.\n2.  **Iterate Through Red (2) Objects:** For each object identified as having the color red (2):\n    *   **Check Adjacency to another Red Object:** Check adjacent pixels for any other red objects.\n        *   If another red object is adjacent:\n            *   **Check adjacent pixels for yellow:** Find adjacent pixels to the initial red object and check if any are yellow.\n                *   If yellow is present, keep original red color.\n                *   If yellow is not present, change the first red color object to yellow (4).\n        *   If not next to red, keep original color.\n3.  **Preserve Other Colors:** All other colors, except `7`, remain unchanged, unless they are adjacent to an object of color 7, in which case, it keeps its original color.\n4. **Color 7:** Preserve color `7`.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"Finds contiguous objects in the grid.\"\"\"\n    objects = []\n    visited = set()\n    rows, cols = grid.shape\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def dfs(r, c, current_object):\n        if (r, c) in visited or not is_valid(r, c) or grid[r, c] == 0:\n            return\n        visited.add((r, c))\n        current_object.append((r, c))\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            dfs(r + dr, c + dc, current_object)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and (r, c) not in visited:\n                current_object = []\n                dfs(r, c, current_object)\n                if current_object:\n                    objects.append((grid[r,c], current_object)) # Store color and object pixels\n    return objects\ndef is_adjacent_to_color(grid, object_pixels, color):\n    \"\"\"Checks if an object is adjacent to a pixel of a specific color.\"\"\"\n    rows, cols = grid.shape\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    for r, c in object_pixels:\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n            if is_valid(nr, nc) and grid[nr, nc] == color:\n                return True\n    return False\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n    objects = find_objects(input_grid)\n\n\n    # Iterate through all objects found\n    for color, object_pixels in objects:\n\n        # rule for color 7\n        if color == 7:\n          continue\n\n        if is_adjacent_to_color(input_grid, object_pixels, 7):\n          continue # keep color\n\n        # change 2 to 4 given the rule\n        if color == 2:\n            adjacent_to_red = False\n            for other_color, other_object_pixels in objects:\n                if other_color == 2 and object_pixels != other_object_pixels:\n                    if is_adjacent_to_color(input_grid, object_pixels, 2):\n                      adjacent_to_red = True\n                      break # another red object is adjacent\n            if adjacent_to_red:\n                if not is_adjacent_to_color(input_grid,object_pixels, 4):\n                    for r, c in object_pixels:\n                        output_grid[r, c] = 4\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6377,
    "candidates_token_count": 950,
    "total_token_count": 7327,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 12.243657
}