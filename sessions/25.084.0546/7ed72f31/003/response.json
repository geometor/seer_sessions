{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by identifying objects and applying mirroring/extension transformations based on their adjacency and color.\nSpecifically, objects adjacent to different colored objects on the right are absorbed by the object on the right expanding to the left. Color 2 has unique behavior of absorbing adjacent colors on its left.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef get_background_color(grid):\n    \"\"\"Determines the most frequent (background) color in the grid.\"\"\"\n    flattened = grid.flatten()\n    count = Counter(flattened)\n    return count.most_common(1)[0][0]\n\ndef find_objects(grid, background_color):\n    \"\"\"Identifies connected components (objects) of non-background colors.\"\"\"\n    visited = set()\n    objects = []\n\n    def dfs(row, col, current_object):\n        if (row, col) in visited or not (0 <= row < grid.shape[0] and 0 <= col < grid.shape[1]) or grid[row, col] == background_color:\n            return\n        visited.add((row, col))\n        current_object.append((row, col))\n        dfs(row + 1, col, current_object)\n        dfs(row - 1, col, current_object)\n        dfs(row, col + 1, current_object)\n        dfs(row, col - 1, current_object)\n        dfs(row + 1, col + 1, current_object)\n        dfs(row - 1, col - 1, current_object)\n        dfs(row + 1, col - 1, current_object)\n        dfs(row - 1, col + 1, current_object)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] != background_color and (row, col) not in visited:\n                current_object = []\n                dfs(row, col, current_object)\n                objects.append((grid[row,col], current_object))  # Store color and object\n    return objects\n\ndef get_neighbors(grid, pixel):\n    \"\"\"Get the neighbors, including diagonals\"\"\"\n    row,col = pixel\n    neighbors = []\n    for i in range(-1,2):\n        for j in range(-1,2):\n            if i==0 and j == 0:\n                continue\n            neighbor_row, neighbor_col = row+i, col+j\n            if 0 <= neighbor_row < grid.shape[0] and 0 <= neighbor_col < grid.shape[1]:\n                neighbors.append((neighbor_row, neighbor_col))\n    return neighbors\n    \ndef transform(input_grid):\n    \"\"\"Applies the transformation rules to the input grid.\"\"\"\n    grid = np.array(input_grid)\n    output_grid = np.copy(grid)\n    background_color = get_background_color(grid)\n    objects = find_objects(grid, background_color)\n\n    # Create a dictionary to store objects by color\n    objects_by_color = {}\n    for color, obj in objects:\n        if color not in objects_by_color:\n            objects_by_color[color] = []\n        objects_by_color[color].append(obj)\n\n\n    for color, object_pixels_list in objects_by_color.items():\n      for object_pixels in object_pixels_list:\n        for row, col in object_pixels:\n            neighbors = get_neighbors(grid, (row, col))\n            \n            # Right-side absorption\n            for n_row, n_col in neighbors:\n                if n_col > col and grid[n_row, n_col] != color and grid[n_row,n_col] != background_color:\n                    absorbing_color = grid[n_row, n_col]\n                    # output_grid[row, col] = absorbing_color # original position\n                    for r,c in object_pixels:\n                        output_grid[r,c] = absorbing_color\n\n            # Color 2 specific left-side absorption\n            if color == 2:\n              for n_row, n_col in neighbors:\n                if n_col < col and grid[n_row, n_col] != color and grid[n_row, n_col] != background_color:\n                  absorbing_color = grid[n_row,n_col]\n                  for r,c in object_pixels:\n                      output_grid[r,c] = 2\n\n    # Handle object 3 mirroring (horizontal)\n    if 3 in objects_by_color:\n      object3_pixels = []\n      for obj_list in objects_by_color[3]:\n          object3_pixels.extend(obj_list)\n      \n      for r,c in object3_pixels:\n          neighbors = get_neighbors(grid, (r,c))\n          for n_r, n_c in neighbors:\n              if grid[n_r, n_c] != background_color and grid[n_r,n_c] != 3:\n                 # horizontal mirroring\n                 if n_c < c:\n                    for i in range(c+1, min(grid.shape[1], c + (c - n_c) +1)):\n                        output_grid[r, i] = 3\n                 if n_c > c:\n                      for i in range(max(0, c - (n_c - c)), c):\n                        output_grid[r, i] = 3\n\n                 if n_r < r:\n                    for i in range(r+1, min(grid.shape[0], r + (r-n_r) + 1)):\n                        output_grid[i,c] = 3\n                 if n_r > r:\n                    for i in range(max(0, r - (n_r -r)), r):\n                        output_grid[i,c] = 3\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 12956,
    "candidates_token_count": 1390,
    "total_token_count": 14346,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 19.006296
}