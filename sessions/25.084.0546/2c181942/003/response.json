{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Regions:** Find all contiguous colored regions (non-azure pixels) in the input grid. Each region is defined by the (row, column) coordinates of its pixels and its color.\n\n2.  **Check for Empty Rows:** If a region's topmost row contains *only* azure pixels, the region does not change and is kept in the final output.\n\n3.  **Vertical Alignment and Combination**: For regions *not* handled in step 2, examine their vertical relationships with other regions:\n    - find regions that have at least one column in common with each other (vertically aligned, not necessarily adjacent).\n    - combine the vertically aligned regions into one by stacking them in the output from top to bottom based on color:\n      - The resulting combined region should be placed starting at the top-most row possible.\n\n4. **Output:** Generate the output grid by keeping the original regions from step 2 and by placing the shifted/combined regions from step 3. The azure background remains unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef get_colored_regions(grid):\n    \"\"\"\n    Identifies and returns a list of colored regions (non-azure pixels).\n    Each region is a list of (row, col) tuples.\n    \"\"\"\n    regions = []\n    visited = set()\n    rows, cols = grid.shape\n\n    def _dfs(row, col, current_region, color):\n        if (row, col) in visited or not (0 <= row < rows and 0 <= col < cols) or grid[row, col] != color:\n            return\n        visited.add((row, col))\n        current_region.append((row, col))\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            _dfs(row + dr, col + dc, current_region, color)\n\n    for row in range(rows):\n        for col in range(cols):\n            if grid[row, col] != 8 and (row, col) not in visited:\n                current_region = []\n                _dfs(row, col, current_region, grid[row, col])\n                regions.append((current_region, grid[row,col])) # Store color with region\n    return regions\n\ndef is_row_empty(grid, row, exclude_color=8):\n    \"\"\"Checks if a given row contains only the exclude_color.\"\"\"\n    for cell in grid[row]:\n        if cell != exclude_color:\n            return False\n    return True\n\ndef find_vertically_aligned_regions(regions):\n    \"\"\"\n    Finds and returns a list of vertically aligned regions.\n    Regions are vertically aligned if they share at least one column index.\n    \"\"\"\n    aligned_groups = []\n    for i in range(len(regions)):\n        region1, color1 = regions[i]\n        group = [regions[i]]\n        for j in range(i + 1, len(regions)):\n            region2, color2 = regions[j]\n            cols1 = set([col for row, col in region1])\n            cols2 = set([col for row, col in region2])\n            if len(cols1.intersection(cols2)) > 0:\n                group.append(regions[j])\n        if len(group) > 1:\n          aligned_groups.append(group)\n    return aligned_groups\n\ndef combine_regions(region_group, rows):\n    \"\"\"\n    Combines vertically aligned regions by stacking them.\n    \"\"\"\n    combined_pixels = []\n    current_row = 0\n    sorted_regions = sorted(region_group, key=lambda x: x[1]) # sort by color\n\n    for region, color in sorted_regions: # region is the list of coordinates\n      region_height = max(r for r, _ in region) - min(r for r, _ in region) + 1\n      for row, col in region:\n          new_row = row - min(r for r, _ in region) + current_row\n          combined_pixels.append((new_row,col,color))\n      current_row += region_height\n      #current_row = min(rows, current_row)  # Prevent exceeding grid bounds - this caused a bug\n\n    return combined_pixels\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the observed rules.\n    \"\"\"\n    grid = np.array(input_grid)\n    output_grid = np.full(grid.shape, 8, dtype=int) # init with azure\n    rows, cols = grid.shape\n\n    # 1. Identify colored regions\n    regions = get_colored_regions(grid)\n\n    # 2. Handle regions on empty rows\n    for region, color in regions:\n        first_row = region[0][0]\n        if is_row_empty(grid, first_row):\n            for row, col in region:\n                output_grid[row, col] = color\n\n    # 3. Vertical Alignment and Combination\n    aligned_groups = find_vertically_aligned_regions(regions)\n\n\n    for group in aligned_groups:\n      # check that regions in group are *not* all in empty rows\n      all_empty = True\n      for region, _ in group:\n        first_row = region[0][0]\n        if not is_row_empty(grid, first_row):\n          all_empty = False\n          break\n\n      if not all_empty:\n        combined = combine_regions(group, rows)\n        for row, col, color in combined:\n          if row < rows: # check to prevent out of bounds\n            output_grid[row, col] = color\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 11434,
    "candidates_token_count": 1311,
    "total_token_count": 12745,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 18.422903
}