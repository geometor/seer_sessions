{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransformation Rule:\n\n1.  **Identify Colored Regions:** Locate all contiguous regions of pixels that are *not* azure (8). These are our \"colored regions\".\n2.  **Analyze Relationships:** For each colored region, examine its relationship with *other* colored regions. Specifically, check for:\n    *   **Horizontal Alignment:** Are there other colored regions on the same row?\n    *   **Vertical Alignment:** Are there any other colored regions that are aligned on one or more of the same columns, possibly shifted up or down relative to the current one?\n3.  **Conditional Modification:**\n    *   Colored regions that exist on empty rows are kept.\n    *  Colored regions not on empty rows:\n       * keep regions of the same color that exist in vertical adjaceny.\n       * Move other colors to the rows according to some shift and alignment logic.\n4. **Background Preservation:** The azure (8) background remains unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef get_colored_regions(grid):\n    \"\"\"\n    Identifies and returns a list of colored regions (non-azure pixels).\n    Each region is a list of (row, col) tuples.\n    \"\"\"\n    regions = []\n    visited = set()\n    rows, cols = grid.shape\n\n    def _dfs(row, col, current_region, color):\n        if (row, col) in visited or not (0 <= row < rows and 0 <= col < cols) or grid[row, col] != color:\n            return\n        visited.add((row, col))\n        current_region.append((row, col))\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            _dfs(row + dr, col + dc, current_region, color)\n\n    for row in range(rows):\n        for col in range(cols):\n            if grid[row, col] != 8 and (row, col) not in visited:\n                current_region = []\n                _dfs(row, col, current_region, grid[row, col])\n                regions.append(current_region)\n    return regions\n\ndef is_row_empty(grid, row, exclude_color=8):\n    \"\"\"Checks if a given row contains only the exclude_color.\"\"\"\n    for cell in grid[row]:\n        if cell != exclude_color:\n            return False\n    return True\n\ndef find_vertically_adjacent_regions(regions):\n  \"\"\"Find and return same-colored regions, vertically adjacent\n  \"\"\"\n  vert_adj_regions = []\n  for i in range(len(regions)):\n        region1 = regions[i]\n        #color1 = region1[0][2]  # Assuming color is stored in the pixel tuple.\n        for j in range(i + 1, len(regions)):  # Compare with regions after i.\n            region2 = regions[j]\n            #color2 = region2[0][2]\n\n            #if color1 != color2:\n              #continue\n\n            for r1_row, r1_col in region1:\n                for r2_row, r2_col in region2:\n                    #if color1 != color2:\n                        #continue # colors must match\n                    if r1_col == r2_col and abs(r1_row - r2_row) == 1:\n                      # same color, same col, rows differ by one: vertically adjacent\n                      if region1 not in vert_adj_regions:\n                        vert_adj_regions.append(region1)\n                      if region2 not in vert_adj_regions:\n                        vert_adj_regions.append(region2)\n  return vert_adj_regions\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the observed rules.\n    \"\"\"\n    grid = np.array(input_grid)  # Ensure we're working with a NumPy array\n    output_grid = np.copy(grid)\n    rows, cols = grid.shape\n\n    # 1. Identify colored regions\n    regions = get_colored_regions(grid)\n\n    # 2. & 3. Conditional Modification\n    vert_adj = find_vertically_adjacent_regions(regions) # Identify vertically adjacent same-colored regions.\n\n    for region in regions:\n      first_row = region[0][0] #row of top of region\n\n      if not is_row_empty(grid, first_row): #check row is not empty\n\n        if region in vert_adj: # keep all pixels of vertically adjacent\n          continue\n        else: # blank all pixels of non-vertically adjacent\n          for row, col in region:\n            output_grid[row,col] = 8\n\n      # else keep region if on an \"empty\" row - implicit, since output grid is\n      # initiliazed with input_grid\n\n    # 4. Background Preservation (already handled by initializing output_grid with input_grid)\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7097,
    "candidates_token_count": 1136,
    "total_token_count": 8233,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 22.809521
}