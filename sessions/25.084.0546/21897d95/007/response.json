{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Object Identification:** Identify all contiguous regions of the same color in the input grid as distinct objects.\n\n2.  **Frame Candidate Selection:**\n    *   Identify objects in the *input* that could potentially be frames.  Frame candidates are objects that:\n        *   Are rectangular.\n        *   Have a large number of pixels relative to other objects.\n\n3.  **Framed Object Candidate Selection:** Consider objects within the bounding box of the potential frame. Candidates must:\n\n    *   Be a different color than the frame.\n    *   Have a bounding box smaller than the frame.\n\n4.  **Transformation Rule:**\n\n    *   Iterate through all pairs of frame and object\n    *   The largest identified rectangular object in the input grid becomes the \"frame\".\n    *   Determine the dimensions of the output grid based on the bounding box of the frame.  If there isn't a clearly defined frame, the dimensions match the largest object bounding box.\n    *   The second largest identified rectangular region becomes the framed object\n    *   Fill the output grid:\n        *   The \"frame\" object from the input is placed in the output.\n        *   The \"framed object\" is replaced by a filled rectangle of another color within the dimensions of its bounding box. The new color is present in the output but not the input OR it's a color that's consistent across multiple examples\n        *   Other objects that are rectangular are kept, with possible pixel changes but same color.\n\n5.  **Ambiguity Resolution:** If multiple frame/framed object combinations are possible, prioritize those where the framed object's color change is consistent with other examples, or a new color not in the input is introduced.\n\"\"\"\n\nimport numpy as np\nfrom collections import defaultdict\n\ndef find_objects(grid):\n    \"\"\"\n    Finds connected components (objects) in a grid.\n    Returns a dictionary: {color: [(r, c), ...], ...}.\n    \"\"\"\n    objects = defaultdict(list)\n    visited = set()\n    rows, cols = grid.shape\n\n    def dfs(r, c, color):\n        if (r, c) in visited or r < 0 or r >= rows or c < 0 or c >= cols or grid[r, c] != color:\n            return []\n        visited.add((r, c))\n        obj = [(r, c)]\n        obj.extend(dfs(r + 1, c, color))\n        obj.extend(dfs(r - 1, c, color))\n        obj.extend(dfs(r, c + 1, color))\n        obj.extend(dfs(r, c - 1, color))\n        return obj\n\n    for r in range(rows):\n        for c in range(cols):\n            if (r, c) not in visited:\n                color = grid[r, c]\n                objects[color].extend(dfs(r, c, color))\n    return dict(objects)\n\ndef bounding_box(pixels):\n    \"\"\"Calculates the bounding box of a set of pixels.\"\"\"\n    if not pixels:\n        return ((0, 0), (0, 0))\n    rows, cols = zip(*pixels)\n    return ((min(rows), min(cols)), (max(rows), max(cols)))\n\ndef is_rectangular(pixels, bbox):\n    \"\"\"Checks if a set of pixels forms a filled rectangle.\"\"\"\n    if not pixels:\n        return False\n\n    min_row, min_col = bbox[0]\n    max_row, max_col = bbox[1]\n    expected_pixels = (max_row - min_row + 1) * (max_col - min_col + 1)\n    return len(pixels) == expected_pixels\n\ndef get_rectangle_pixels(bbox):\n   \"\"\"Return a list of (r,c) tuples for a rectangle\"\"\"\n   pixels = []\n   min_row,min_col = bbox[0]\n   max_row,max_col = bbox[1]\n   for r in range(min_row,max_row+1):\n      for c in range(min_col,max_col+1):\n         pixels.append((r,c))\n   return pixels\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the identified rules.\"\"\"\n    input_objects = find_objects(input_grid)\n\n    # 1. Find potential frame objects (rectangular and large)\n    frame_candidates = []\n    for color, pixels in input_objects.items():\n        bbox = bounding_box(pixels)\n        if is_rectangular(pixels, bbox):\n            frame_candidates.append((color, pixels, bbox))\n\n    # Sort candidates by area (largest first)\n    frame_candidates.sort(key=lambda x: len(x[1]), reverse=True)\n\n    # Iterate through frame and framed object candidates\n    for frame_color, frame_pixels, frame_bbox in frame_candidates:\n        for framed_color, framed_pixels, framed_bbox in frame_candidates:\n           if frame_color == framed_color:\n              continue\n\n           # init grid based on frame bbox\n           min_row, min_col = frame_bbox[0]\n           max_row, max_col = frame_bbox[1]\n\n           output_grid = np.zeros((max_row+1,max_col+1),dtype=int)\n\n           # place frame\n           for r,c in frame_pixels:\n              output_grid[r,c] = frame_color # keep color for now\n\n           # find a color for the framed object, prioritize one not in input objects\n           output_colors = set()\n           for (r,c) in get_rectangle_pixels(framed_bbox):\n                if r < output_grid.shape[0] and c < output_grid.shape[1]: # bounds check\n                  output_colors.add(output_grid[r,c])\n           available_colors = [c for c in input_objects if c != frame_color]\n           new_framed_color = None\n\n           # use color not in original input if available\n           if len(available_colors) > 0:\n               new_framed_color = available_colors[0]\n\n           if new_framed_color is not None:\n              for (r,c) in get_rectangle_pixels(framed_bbox):\n                if r < output_grid.shape[0] and c < output_grid.shape[1]: # bounds check\n                  output_grid[r,c] = new_framed_color\n              return output_grid\n\n    # default case\n    return input_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 13797,
    "candidates_token_count": 1494,
    "total_token_count": 15291,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 21.878269
}