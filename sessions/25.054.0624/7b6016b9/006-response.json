{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Change Background:** Replace all white (0) pixels in the input grid with green (3).\n\n2.  **Identify Enclosed Objects:**\n    *   Find all contiguous objects (connected regions of the same color, excluding green).\n    *   For each object:\n        *   Perform an \"inverse flood fill\" starting from all edges of the grid, using the background color (green). This marks all background-connected pixels.\n        *   If *any* pixels of a color different than the object's color are *not* reached by the inverse flood fill, the object is considered \"enclosing\".\n\n3.  **Fill Enclosed Regions:**  For each object identified as \"enclosing\":\n    * Find all pixels within the grid that are:\n        * Not the same color as the enclosing object, AND\n        * Are not reachable by an \"inverse flood fill\" of the background.\n    * Change the color of *all* such pixels within the enclosed region to red (2).\n        * **Constraint:** The filling should stay inside the object.\n\"\"\"\n\nimport numpy as np\n\ndef get_objects(grid):\n    \"\"\"\n    Finds objects of all colors in the grid.\n\n    Args:\n        grid: The input grid (NumPy array).\n\n    Returns:\n        A dictionary of objects, where keys are colors and values are lists of objects.\n        Each object is a set of (row, col) coordinates.\n    \"\"\"\n    objects = {}\n    visited = set()\n    rows, cols = grid.shape\n\n    def dfs(row, col, color, current_object):\n        if (\n            row < 0\n            or row >= rows\n            or col < 0\n            or col >= cols\n            or grid[row, col] != color\n            or (row, col) in visited\n        ):\n            return\n        visited.add((row, col))\n        current_object.add((row, col))\n        dfs(row + 1, col, color, current_object)\n        dfs(row - 1, col, color, current_object)\n        dfs(row, col + 1, color, current_object)\n        dfs(row, col - 1, color, current_object)\n\n    for row in range(rows):\n        for col in range(cols):\n            color = grid[row, col]\n            if (row, col) not in visited:\n                current_object = set()\n                dfs(row, col, color, current_object)\n                if color not in objects:\n                    objects[color] = []\n                objects[color].append(current_object)\n    return objects\n\ndef inverse_flood_fill(grid, background_color):\n    \"\"\"\n    Performs an inverse flood fill from the edges of the grid.\n\n    Args:\n        grid: The input grid.\n        background_color: The color to flood with.\n\n    Returns:\n        A set of (row, col) coordinates that were reached by the flood fill.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = set()\n    q = []\n\n    # Add all edge pixels to the queue\n    for r in range(rows):\n        if grid[r, 0] == background_color:\n          q.append((r, 0))\n        if grid[r, cols - 1] == background_color:\n          q.append((r, cols - 1))\n    for c in range(1, cols - 1):\n        if grid[0, c] == background_color:\n          q.append((0, c))\n        if grid[rows - 1, c] == background_color:\n          q.append((rows - 1, c))\n    \n    def get_neighbors(row,col):\n        neighbors = []\n        if row > 0:\n            neighbors.append((row-1, col))\n        if row < rows - 1:\n            neighbors.append((row+1, col))\n        if col > 0:\n            neighbors.append((row, col-1))\n        if col < cols-1:\n            neighbors.append((row, col + 1))\n        return neighbors\n\n    # Perform BFS\n    while q:\n        row, col = q.pop(0)\n        if (row, col) in visited:\n            continue\n        visited.add((row, col))\n\n        for nr, nc in get_neighbors(row,col):\n            if grid[nr,nc] == background_color:\n                q.append((nr,nc))\n\n    return visited\n\n\ndef find_enclosed_pixels(grid, object_pixels, object_color, background_reachable):\n    \"\"\"\n    Finds pixels enclosed by the given object.\n    \"\"\"\n    enclosed_pixels = set()\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if (r, c) not in object_pixels and (r, c) not in background_reachable and grid[r,c] != object_color:\n                enclosed_pixels.add((r, c))\n    return enclosed_pixels\n\n\ndef flood_fill(grid, start_pixels, target_color, replacement_color):\n    \"\"\"\n    Performs a flood fill operation on the grid, starting from multiple seed pixels.\n    Now includes a check to make sure we don't replace the border pixels.\n    \"\"\"\n\n    rows, cols = grid.shape\n    output_grid = np.copy(grid)\n    q = list(start_pixels)\n    visited = set()\n\n    def get_neighbors(r, c):\n      neighbors = []\n      if r > 0:\n          neighbors.append((r-1,c))\n      if r < rows - 1:\n          neighbors.append((r+1, c))\n      if c > 0:\n        neighbors.append((r, c - 1))\n      if c < cols - 1:\n        neighbors.append((r, c+1))\n      return neighbors\n\n    while q:\n      row, col = q.pop(0)\n      if (row,col) in visited:\n          continue\n\n      if output_grid[row,col] == target_color:\n          visited.add((row,col))\n          output_grid[row,col] = replacement_color\n\n          for nr, nc in get_neighbors(row,col):\n            q.append((nr,nc))\n\n    return output_grid\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n\n    # change white background to green\n    output_grid[output_grid == 0] = 3\n    background_color = 3\n\n    # Find all objects\n    objects_by_color = get_objects(output_grid)\n\n    # Iterate through objects and fill interiors\n    for color, objects in objects_by_color.items():\n        if color == background_color:  # Skip background color\n            continue\n        for obj in objects:\n            # Inverse flood fill to find background-reachable pixels\n            background_reachable = inverse_flood_fill(output_grid, background_color)\n\n            # Find enclosed pixels\n            enclosed_pixels = find_enclosed_pixels(output_grid, obj, color, background_reachable)\n            \n            if enclosed_pixels:\n                #get the target color from the first enclosed pixel\n                first_enclosed_pixel = next(iter(enclosed_pixels))\n                target_color = output_grid[first_enclosed_pixel]\n\n                output_grid = flood_fill(output_grid, enclosed_pixels, target_color, 2)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 3191,
            "end_index": 3410,
            "uri": "https://github.com/SantikMaster/Maze-solver",
            "license_": ""
          },
          {
            "start_index": 4531,
            "end_index": 4791,
            "uri": "https://github.com/Anuj-cs20/IIITDMK_CSE_Coursework",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 13868,
    "candidates_token_count": 1755,
    "total_token_count": 15623,
    "cached_content_token_count": 0
  },
  "response_time": 16.481849,
  "response_file": "006-response.json"
}