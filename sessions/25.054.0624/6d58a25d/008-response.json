{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Locate all red (2) and orange (7) pixels within the input grid. Consider the orange pixels as a single object.\n2.  **Horizontal Replication**: For every isolated red pixel not touching or adjacent to an orange pixel, create a duplicate red pixel immediately to its right.\n3.  **Vertical Expansion Based on Orange:** For every column that contains any part of the orange object, perform the following:\n    *   Find all of the existing red pixels from horizontal replication.\n    *   Fill every empty cell in that column between the minimum y coordinate to the maximum y coordinate containing existing red pixels from previous step.\n\"\"\"\n\nimport numpy as np\n\ndef get_objects(grid, color):\n    \"\"\"Finds coordinates of all pixels of a given color.\"\"\"\n    return np.argwhere(grid == color)\n\ndef is_adjacent_to_orange(coord, orange_coords):\n    \"\"\"Checks if a coordinate is adjacent to any orange pixel (including diagonally).\"\"\"\n    for orange_coord in orange_coords:\n        if abs(coord[0] - orange_coord[0]) <= 1 and abs(coord[1] - orange_coord[1]) <= 1:\n            return True\n    return False\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the described rules.\"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Identify Objects\n    red_coords = get_objects(input_grid, 2)\n    orange_coords = get_objects(input_grid, 7)\n\n    # Horizontal Replication (for isolated red pixels)\n    new_red_coords = []\n    for r, c in red_coords:\n        if not is_adjacent_to_orange((r,c), orange_coords):\n           new_red_coords.append((r, c+1)) #add pixel\n           output_grid[r,c+1] = 2 #horizontal replication\n        new_red_coords.append((r,c))\n\n\n    # Vertical Expansion Based on Orange\n    orange_cols = set([c for _, c in orange_coords])\n    \n    for col in orange_cols:\n        # Find all red pixels (original and replicated) in the current column\n        \n        red_in_col_coords = []\n        for r, c in new_red_coords:\n          if c == col:\n            red_in_col_coords.append((r,col))\n\n\n        if len(red_in_col_coords) > 0: #only if existing red\n            min_row = min([r for r, _ in red_in_col_coords])\n            max_row = max([r for r, _ in red_in_col_coords])\n\n            # Fill between min and max row\n            for row in range(min_row, max_row + 1):\n                output_grid[row, col] = 2\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3708,
    "candidates_token_count": 676,
    "total_token_count": 4384,
    "cached_content_token_count": 0
  },
  "response_time": 7.514042,
  "response_file": "008-response.json"
}