{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Green Rectangles:** Find all green (color 3) rectangles in the input grid.\n2.  **Locate Red Pixel:** Within each green rectangle, find the single red (color 2) pixel.\n3. **Determine Elongation Direction:**\n    *   If the rectangle is wider than or equal to its height, prepare for horizontal elongation.\n    *   If the rectangle is taller than its height, prepare for vertical elongation.\n4.  **Elongate Within Rectangle:**\n    *   **Horizontal Elongation**: Fill all empty (color 0) positions *within the rectangle* to the left and right of the red pixel with red, stopping at the rectangle's boundaries, or when a non-empty pixel is encountered.\n    *  **Vertical Elongation:** Fill all empty positions *within the rectangle* above and below the red pixel with red, stopping at the rectangle's boundaries, or when a non-empty pixel is encountered.\n    * **Square**: perform Both.\n5.  **Extend to Edges:**\n    * **Horizontal Elongation**: extend the bottom edge of the green rectangle to red, filling only empty spaces,\n    *   **Vertical Elongation**: extend the left edge of the green rectangle, filling only empty spaces to red.\n    * **Square:** perform Both.\n\"\"\"\n\nimport numpy as np\n\ndef find_rectangles(grid, color):\n    rectangles = []\n    visited = np.zeros_like(grid, dtype=bool)\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == color and not visited[r, c]:\n                # Found a potential start of a rectangle, try to expand\n                width = 0\n                while c + width < cols and grid[r, c + width] == color and not visited[r, c + width]:\n                    width += 1\n                height = 0\n                while r + height < rows and all(grid[r + height, c + i] == color for i in range(width)) and not any(visited[r + height, c + i] for i in range(width)):\n                    height += 1\n\n                # Mark as visited\n                for i in range(height):\n                    for j in range(width):\n                        visited[r + i, c + j] = True\n                rectangles.append((r, c, width, height))\n    return rectangles\n\ndef find_red_pixel(grid, rectangle, red_color=2):\n    r, c, width, height = rectangle\n    for i in range(height):\n        for j in range(width):\n            if grid[r + i, c + j] == red_color:\n                return r + i, c + j\n    return None\n\ndef transform(input_grid):\n    output_grid = np.copy(input_grid)\n    green_rectangles = find_rectangles(input_grid, 3)\n\n    for rect in green_rectangles:\n        red_pixel_pos = find_red_pixel(input_grid, rect)\n        if red_pixel_pos:\n            red_row, red_col = red_pixel_pos\n            r, c, width, height = rect\n\n            # Determine Elongation Direction\n            if width >= height:  # Horizontal or Square\n                # Elongate Within Rectangle (Horizontal)\n                for i in range(width):\n                    if output_grid[red_row, c + i] == 0:\n                        output_grid[red_row, c + i] = 2\n                # Extend to Bottom Edge\n                for i in range(output_grid.shape[1]):\n                    if output_grid[r + height - 1 ,i] == 0:\n                         output_grid[r + height - 1, i] = 2\n\n\n            if height > width:  # Vertical\n                # Elongate Within Rectangle (Vertical)\n                for i in range(height):\n                     if output_grid[r + i,red_col] == 0:\n                        output_grid[r + i, red_col] = 2\n                # Extend to Left Edge\n                for i in range(output_grid.shape[0]):\n                    if output_grid[i,c] == 0:\n                        output_grid[i, c] = 2\n            if height == width:\n                for i in range(height):\n                     if output_grid[r + i,red_col] == 0:\n                        output_grid[r + i, red_col] = 2\n                # Extend to Left Edge\n                for i in range(output_grid.shape[0]):\n                    if output_grid[i,c] == 0:\n                        output_grid[i, c] = 2\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 11264,
    "candidates_token_count": 1101,
    "total_token_count": 12365,
    "cached_content_token_count": 0
  },
  "response_time": 24.434767,
  "response_file": "012-response.json"
}