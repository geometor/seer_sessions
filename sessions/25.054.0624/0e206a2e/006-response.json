{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid by moving connected regions of non-white pixels vertically. Objects in the upper half of the grid move down, and objects in the lower half move up. The movement continues until an object hits the grid boundary or another object, causing objects to stack.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"\n    Finds all contiguous regions (objects) of non-white (non-zero) pixels in the grid.\n\n    Returns a list of objects, where each object is a list of (row, col) coordinates.\n    \"\"\"\n    visited = set()\n    objects = []\n\n    def dfs(row, col, current_object):\n        if (row, col) in visited or not (0 <= row < grid.shape[0] and 0 <= col < grid.shape[1]) or grid[row, col] == 0:\n            return\n        visited.add((row, col))\n        current_object.append((row, col))\n        dfs(row + 1, col, current_object)\n        dfs(row - 1, col, current_object)\n        dfs(row, col + 1, current_object)\n        dfs(row, col - 1, current_object)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] != 0 and (row, col) not in visited:\n                current_object = []\n                dfs(row, col, current_object)\n                objects.append(current_object)\n    return objects\n\ndef calculate_centroid(object_coords):\n    \"\"\"\n    Calculates the centroid (center of mass) of an object.\n    \"\"\"\n    rows, cols = zip(*object_coords)\n    return np.mean(rows), np.mean(cols)\n\ndef move_object_one_step(grid, object_coords, direction):\n    \"\"\"\n    Moves an object's coordinates by one step in the given direction, checking for collisions.\n\n    `direction`: 1 for down, -1 for up.\n    Returns: new object coordinates, and boolean indicating if move was possible\n    \"\"\"\n    new_object_coords = []\n    moved = True\n    for row, col in object_coords:\n        new_row = row + direction\n        if not (0 <= new_row < grid.shape[0]):\n          moved = False  # Hit grid boundary\n          break;\n        if grid[new_row, col] != 0 and (new_row, col) not in object_coords:\n          moved = False # Hit another object.\n          break;\n        new_object_coords.append((new_row, col))\n    \n    if not moved:\n      return object_coords, False # return original, not moved\n    return new_object_coords, True # return new and moved == True\n\n\ndef transform(input_grid):\n    # initialize output_grid\n    grid = np.array(input_grid)  # work with numpy array\n    output_grid = np.copy(grid)   # Start with a copy of input\n\n    # Find all objects\n    objects = find_objects(grid)\n    \n    # sort objects by their vertical position (centroid row)\n    objects.sort(key=lambda obj: calculate_centroid(obj)[0])\n\n    # Determine Movement Direction\n    vertical_center = grid.shape[0] / 2\n    \n    # Iterative Movement and Stacking\n    for obj in objects:\n        color = grid[obj[0][0], obj[0][1]] # save the color\n        centroid_row, _ = calculate_centroid(obj)\n        direction = 1 if centroid_row < vertical_center else -1\n\n        # clear object from the grid *before* moving, work directly with output_grid\n        for r, c in obj:\n            output_grid[r,c] = 0\n        \n        moved_object = obj\n        moved = True\n        while moved:\n            moved_object, moved = move_object_one_step(output_grid, moved_object, direction)\n\n        # add moved object to output\n        for row, col in moved_object:\n            output_grid[row, col] = color\n\n    return output_grid.tolist() # return as list\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7574,
    "candidates_token_count": 983,
    "total_token_count": 8557,
    "cached_content_token_count": 0
  },
  "response_time": 8.002151,
  "response_file": "006-response.json"
}