{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Green Pixels:** Note the locations of all green (3) pixels. These pixels will remain unchanged in the output.\n2.  **Identify Movable Groups:** Find separated groups of blue (1) and red (2) pixels.  If blue/red are surrounded by azure, they move as a unit.\n3. **Identify Yellow Pixels**: Find yellow (4) pixels. Delete them.\n4. **Determine Group Movement:** Each separated group of blue and red will be treated as a unit and moved. The vector of movement is not yet clear - more examples are needed.\n5.  **Reconstruct:** Create an output grid by keeping everything from the input grid except the yellow, and placing moving groups into the correct position in the output grid.\n\"\"\"\n\nimport numpy as np\n\ndef find_pixels_by_color(grid, color):\n    \"\"\"Finds the coordinates of all pixels of a specific color.\"\"\"\n    return np.argwhere(grid == color)\n\ndef find_adjacent_pixels(grid, pixels):\n    \"\"\"finds adjacent pixels of a given color\"\"\"\n    adjacent_pixels = set()\n    for r, c in pixels:\n        for dr in [-1, 0, 1]:\n            for dc in [-1, 0, 1]:\n                if dr == 0 and dc == 0:\n                    continue\n                nr, nc = r + dr, c + dc\n                if 0 <= nr < grid.shape[0] and 0 <= nc < grid.shape[1]:\n                    adjacent_pixels.add((nr, nc))\n    return adjacent_pixels\n\ndef find_connected_components(grid, colors):\n    \"\"\"Finds connected components of specified colors.\"\"\"\n    visited = set()\n    components = []\n\n    def dfs(r, c, component):\n        if (r, c) in visited or not (0 <= r < grid.shape[0] and 0 <= c < grid.shape[1]) or grid[r, c] not in colors:\n            return\n        visited.add((r, c))\n        component.append((r, c))\n        for dr in [-1, 0, 1]:\n            for dc in [-1, 0, 1]:\n                dfs(r + dr, c + dc, component)\n\n\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if (r, c) not in visited and grid[r, c] in colors:\n                component = []\n                dfs(r, c, component)\n                components.append(component)\n    return components\n\ndef calculate_centroid(pixels):\n    \"\"\"Calculates the centroid of a set of pixels.\"\"\"\n    if len(pixels) == 0:\n        return np.array([0, 0])\n    return np.mean(pixels, axis=0)\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n\n    # Identify and remove yellow pixels\n    yellow_pixels = find_pixels_by_color(input_grid, 4)\n    for r, c in yellow_pixels:\n        output_grid[r, c] = 0\n\n    # Find green pixels (they remain static).\n    # green_pixels = find_pixels_by_color(input_grid, 3)\n\n    # Find connected components of blue and red pixels.\n    blue_red_groups = find_connected_components(input_grid, [1, 2, 8])\n\n    # Determine Movement and place\n    for group in blue_red_groups:\n      #detect azure\n      has_azure = False\n      for r,c in group:\n         if input_grid[r,c] == 8:\n            has_azure = True\n            break;\n\n      if has_azure: # move as a group, use relative shift\n        # Find azure pixels.\n        azure_pixels = []\n        other_pixels = []\n        for r, c in group:\n            if input_grid[r,c] == 8:\n                azure_pixels.append((r,c))\n            if input_grid[r,c] == 1 or input_grid[r,c] == 2:\n                other_pixels.append((r,c))\n\n        # Find blue and red pixels NOT in azure\n        blue_red_not_azure = []\n        for r in range(input_grid.shape[0]):\n          for c in range(input_grid.shape[1]):\n             if input_grid[r,c] == 1 or input_grid[r,c] == 2:\n                is_found = False\n                for gr, gc in group:\n                  if r == gr and c == gc:\n                    is_found = True\n                    break\n                if is_found == False:\n                   blue_red_not_azure.append( (r,c) )\n\n\n        azure_centroid = calculate_centroid(np.array(azure_pixels))\n\n        blue_red_avg_pos = calculate_centroid(np.array(blue_red_not_azure))\n\n        if len(azure_pixels)>0 and len(blue_red_not_azure) >0:\n            relative_shift = blue_red_avg_pos - azure_centroid\n        else:\n            relative_shift = np.array([0,0]) #no shift\n\n\n        #remove old, place new at shifted pos\n        for r, c in group:\n          output_grid[r,c] = 0\n          new_r = int(round(r + relative_shift[0]))\n          new_c = int(round(c + relative_shift[1]))\n\n          if 0 <= new_r < output_grid.shape[0] and 0 <= new_c < output_grid.shape[1]:\n            output_grid[new_r, new_c] = input_grid[r,c]\n      else:\n         #move each blue/red\n         for r, c in group:\n          if input_grid[r,c] == 1:\n             output_grid[r,c] = 0\n             new_r = r + 1\n             new_c = c+1\n             if 0 <= new_r < output_grid.shape[0] and 0 <= new_c < output_grid.shape[1]:\n                output_grid[new_r, new_c] = 1\n          elif input_grid[r,c] == 2:\n             output_grid[r,c] = 0\n             new_r = r - 1\n             new_c = c-1\n             if 0 <= new_r < output_grid.shape[0] and 0 <= new_c < output_grid.shape[1]:\n                output_grid[new_r, new_c] = 2\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7791,
    "candidates_token_count": 1576,
    "total_token_count": 9367,
    "cached_content_token_count": 0
  },
  "response_time": 13.861691,
  "response_file": "018-response.json"
}