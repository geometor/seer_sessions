{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nCrops and overlays an azure shape and a red square from a large input grid onto a smaller 8x8 output grid, \nprioritizing the azure color where they overlap.\n\"\"\"\n\nimport numpy as np\n\ndef find_object(grid, color):\n    # Find coordinates of all pixels of the specified color\n    coords = np.argwhere(grid == color)\n    if coords.size == 0:\n        return None\n    # Calculate bounding box\n    min_row, min_col = coords.min(axis=0)\n    max_row, max_col = coords.max(axis=0)\n    return (min_row, min_col, max_row, max_col)\n\ndef crop_and_resize(grid, bbox, output_size=(8, 8)):\n  \n    min_row, min_col, max_row, max_col = bbox\n\n    #crop\n    cropped = grid[min_row:max_row+1, min_col:max_col+1]\n    \n    #resize\n    rows, cols = cropped.shape\n    resized = np.zeros(output_size, dtype=int)\n    \n    new_rows, new_cols = output_size\n\n    row_scale = rows / new_rows\n    col_scale = cols / new_cols\n    \n    for i in range(new_rows):\n      for j in range(new_cols):\n        orig_row = int(i * row_scale)\n        orig_col = int(j * col_scale)\n        resized[i, j] = cropped[orig_row, orig_col]\n\n    return resized    \n\ndef transform(input_grid):\n    # Find bounding boxes for azure and red objects\n    azure_bbox = find_object(input_grid, 8)\n    red_bbox = find_object(input_grid, 2)\n\n    # Determine combined bounding box\n    min_row = min(azure_bbox[0], red_bbox[0])\n    min_col = min(azure_bbox[1], red_bbox[1])\n    max_row = max(azure_bbox[2], red_bbox[2])\n    max_col = max(azure_bbox[3], red_bbox[3])\n    \n    combined_bbox = (min_row, min_col, max_row, max_col)\n\n    # Initialize output grid (8x8)\n    output_grid = np.zeros((8, 8), dtype=int)\n\n    # Crop and resize the combined region and then paste into output_grid\n    cropped_red = crop_and_resize(input_grid, red_bbox)\n    cropped_azure = crop_and_resize(input_grid, azure_bbox)\n\n    # Overlay red first, then azure\n    for i in range(8):\n        for j in range(8):\n            if cropped_red[i, j] == 2:\n                output_grid[i, j] = 2\n    for i in range(8):\n        for j in range(8):\n            if cropped_azure[i, j] == 8:\n                output_grid[i, j] = 8\n                \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3033,
    "candidates_token_count": 739,
    "total_token_count": 3772,
    "cached_content_token_count": 0
  },
  "response_time": 8.950849,
  "response_file": "002-response.json"
}