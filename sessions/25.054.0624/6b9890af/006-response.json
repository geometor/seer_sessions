{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nCrops and overlays colored rectangular regions (objects) from the input grid onto an output grid,\nmaintaining relative positions and scaling them to the output size. The first colored object forms\nthe background, and subsequent objects are overlaid on top, with the earlier object appearing\nin front in case of overlaps.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"\n    Identifies distinct rectangular regions of non-zero color.\n    \"\"\"\n    objects = []\n    visited = set()\n    rows, cols = grid.shape\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def dfs(r, c, color, object_coords):\n        if (r, c) in visited or not is_valid(r, c) or grid[r, c] != color:\n            return\n        visited.add((r, c))\n        object_coords.append((r, c))\n        dfs(r + 1, c, color, object_coords)\n        dfs(r - 1, c, color, object_coords)\n        dfs(r, c + 1, color, object_coords)\n        dfs(r, c - 1, color, object_coords)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and (r, c) not in visited:\n                object_coords = []\n                dfs(r, c, grid[r, c], object_coords)\n                # Find min and max row/col to define the rectangle\n                min_r = min(object_coords, key=lambda x: x[0])[0]\n                max_r = max(object_coords, key=lambda x: x[0])[0]\n                min_c = min(object_coords, key=lambda x: x[1])[1]\n                max_c = max(object_coords, key=lambda x: x[1])[1]\n                objects.append({\n                    'color': grid[r, c],\n                    'position': (min_r, min_c, max_r, max_c)  # (min_row, min_col, max_row, max_col)\n                })\n    return objects\n\ndef transform(input_grid, output_grid_shape):\n    # initialize output_grid\n    output_grid = np.zeros(output_grid_shape, dtype=int)\n\n    # find objects\n    objects = find_objects(np.array(input_grid))\n\n    # Scale and overlay objects onto the output grid\n    output_rows, output_cols = output_grid.shape\n\n    for obj in objects:\n      min_r, min_c, max_r, max_c = obj['position']\n      color = obj['color']\n\n      # Scale object dimensions to output grid size, maintaining aspect ratio\n      input_height = max_r - min_r + 1\n      input_width = max_c - min_c + 1\n\n      output_height = int(input_height * output_rows / input_grid.shape[0])\n      output_width = int(input_width *  output_cols / input_grid.shape[1])\n\n      # output can not be zero, at least size 1\n      output_height = max(1,output_height)\n      output_width = max(1, output_width)\n\n      # compute starting position on output\n      out_r_start = int(min_r * output_rows / input_grid.shape[0])\n      out_c_start = int(min_c * output_cols / input_grid.shape[1])\n\n      # overlay section on to output\n      for r in range(output_height):\n          for c in range(output_width):\n            output_row = out_r_start + r\n            output_col = out_c_start + c\n\n            if 0 <= output_row < output_rows and 0 <= output_col < output_cols:\n              output_grid[output_row, output_col] = color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 11495,
    "candidates_token_count": 949,
    "total_token_count": 12444,
    "cached_content_token_count": 0
  },
  "response_time": 10.315982,
  "response_file": "006-response.json"
}