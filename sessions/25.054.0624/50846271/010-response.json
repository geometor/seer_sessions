{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Identify all contiguous regions (objects) of pixels with the same color. Consider pixels cardinally adjacent (up, down, left, right) to be part of the same object. Diagonal adjacency does not connect objects.\n\n2.  **Find Gray Objects:** Iterate through the list of objects, selecting those that are gray (color value 5).\n\n3.  **Check for Red Adjacency:** For each gray object, check if *any* of its pixels are cardinally adjacent to a red pixel (color value 2).\n\n4.  **Conditional Color Change (Object-Based):** If a gray object is adjacent to a red object, change *all* pixels within that gray object to azure (color value 8).\n\n5.  **Preserve Other Pixels:** All pixels *not* part of a gray object that is adjacent to a red object retain their original color from the input grid.\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, row, col):\n    \"\"\"Gets the cardinal neighbors of a pixel.\"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    if row > 0:\n        neighbors.append((row - 1, col))  # Up\n    if row < rows - 1:\n        neighbors.append((row + 1, col))  # Down\n    if col > 0:\n        neighbors.append((row, col - 1))  # Left\n    if col < cols - 1:\n        neighbors.append((row, col + 1))  # Right\n    return neighbors\n\ndef flood_fill(grid, row, col, target_color, object_pixels):\n    \"\"\"Performs a flood fill to identify a contiguous object.\"\"\"\n    if (row, col) in object_pixels or grid[row, col] != target_color:\n        return\n    object_pixels.add((row, col))\n    neighbors = get_neighbors(grid, row, col)\n    for n_row, n_col in neighbors:\n        flood_fill(grid, n_row, n_col, target_color, object_pixels)\n\ndef find_objects(grid):\n    \"\"\"Finds all contiguous objects in the grid.\"\"\"\n    rows, cols = grid.shape\n    objects = []\n    visited = set()\n\n    for row in range(rows):\n        for col in range(cols):\n            if (row, col) not in visited:\n                object_pixels = set()\n                flood_fill(grid, row, col, grid[row, col], object_pixels)\n                if object_pixels:\n                    objects.append((grid[row,col], object_pixels)) # Store color and pixels\n                    visited.update(object_pixels)\n    return objects\n\ndef is_adjacent_to_red(grid, object_pixels):\n    \"\"\"Checks if a gray object is adjacent to a red pixel.\"\"\"\n    for row, col in object_pixels:\n        neighbors = get_neighbors(grid, row, col)\n        for n_row, n_col in neighbors:\n            if grid[n_row, n_col] == 2:\n                return True\n    return False\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the described rule.\"\"\"\n\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # 1. Identify Objects\n    objects = find_objects(input_grid)\n\n    # 2. & 3. Find Gray Objects and Check for Red Adjacency\n    for color, object_pixels in objects:\n        if color == 5:  # Gray object\n            if is_adjacent_to_red(input_grid, object_pixels):\n                # 4. Conditional Color Change\n                for row, col in object_pixels:\n                    output_grid[row, col] = 8\n\n    # 5. Preserve Other Pixels (already handled by initializing output_grid as a copy)\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 963,
            "end_index": 1255,
            "uri": "https://github.com/Kaeltherol/Minesweeper",
            "license_": ""
          },
          {
            "start_index": 1082,
            "end_index": 1288,
            "uri": "https://github.com/racynniv/avalanche",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 11108,
    "candidates_token_count": 899,
    "total_token_count": 12007,
    "cached_content_token_count": 0
  },
  "response_time": 8.741671,
  "response_file": "010-response.json"
}