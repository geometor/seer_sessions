{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by identifying objects, mirroring them across their \nhorizontal axis, and performing edge modifications based on the object's \nhorizontal axis.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"\n    Finds all contiguous blocks of non-white (non-zero) pixels.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n    objects = []\n\n    def dfs(r, c, color, obj_pixels):\n        if (r < 0 or r >= rows or c < 0 or c >= cols or\n                visited[r, c] or grid[r, c] != color):\n            return\n        visited[r, c] = True\n        obj_pixels.append((r, c))\n        dfs(r + 1, c, color, obj_pixels)\n        dfs(r - 1, c, color, obj_pixels)\n        dfs(r, c + 1, color, obj_pixels)\n        dfs(r, c - 1, color, obj_pixels)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and not visited[r, c]:\n                obj_pixels = []\n                dfs(r, c, grid[r, c], obj_pixels)\n                objects.append((grid[r,c], obj_pixels))  # Store color with object\n    return objects\n\ndef find_horizontal_axis(object_pixels):\n    \"\"\"\n    Finds the horizontal axis of an object (row with the most pixels).\n    \"\"\"\n    row_counts = {}\n    for r, c in object_pixels:\n        row_counts[r] = row_counts.get(r, 0) + 1\n    max_count = 0\n    axis_row = -1\n    for r, count in row_counts.items():\n        if count > max_count:\n            max_count = count\n            axis_row = r\n    return axis_row\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of the input_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # 1. Identify Objects\n    objects = find_objects(input_grid)\n\n    for color, obj_pixels in objects:\n        # 2. Find Object horizontal axis\n        axis_row = find_horizontal_axis(obj_pixels)\n\n        # 3. Mirror\n        for r, c in obj_pixels:\n            if r != axis_row:\n                dist = r - axis_row\n                mirrored_row = axis_row - dist\n                if 0 <= mirrored_row < rows:\n                    output_grid[mirrored_row, c] = color\n\n        # 4. Edge Modification\n        #   Find extent of axis:\n        axis_cols = [c for r, c in obj_pixels if r == axis_row]\n\n        if len(axis_cols) > 0 :\n\n          min_axis_col = min(axis_cols)\n          max_axis_col = max(axis_cols)\n\n          # 4a. Examine rows above and below\n          for row_offset in [-1, 1]:\n              check_row = axis_row + row_offset\n              if 0 <= check_row < rows:\n                  for c in range(min_axis_col, max_axis_col + 1):\n                      if (check_row,c) not in obj_pixels:\n                        output_grid[check_row, c] = color\n\n          # 4b. Add object color to axis row adjacent to edge.\n          if 0 in axis_cols:\n              output_grid[axis_row, 0] = color\n          if cols -1 in axis_cols:\n              output_grid[axis_row, cols-1] = color\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7849,
    "candidates_token_count": 917,
    "total_token_count": 8766,
    "cached_content_token_count": 0
  },
  "response_time": 9.090283,
  "response_file": "012-response.json"
}