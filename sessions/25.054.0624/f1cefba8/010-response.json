{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by preserving a central object's horizontal component,\nextending vertical lines with yellow pixels, and modifying borders based on\nthe central object's rows.\n\"\"\"\n\nimport numpy as np\n\ndef find_central_object(grid):\n    rows, cols = grid.shape\n    object_pixels = []\n    min_row, max_row = rows, -1\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0:\n                object_pixels.append((r, c))\n                min_row = min(min_row, r)\n                max_row = max(max_row, r)\n\n    horizontal_line_row = -1\n    horizontal_counts = {}\n\n    for r, c in object_pixels:\n      if r not in horizontal_counts:\n        horizontal_counts[r] = 0\n      horizontal_counts[r] += 1\n    \n    max_count = 0\n    for r in horizontal_counts:\n      if horizontal_counts[r] > max_count:\n        max_count = horizontal_counts[r]\n        horizontal_line_row = r\n\n    return object_pixels, horizontal_line_row\n\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of the input_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Find the central object and its core row (horizontal component)\n    object_pixels, horizontal_line_row = find_central_object(input_grid)\n\n    # Preserve Horizontal: keep pixels in the central horizontal line\n    for r, c in object_pixels:\n        if r == horizontal_line_row:\n          output_grid[r,c] = input_grid[r,c]\n           \n    # Vertical Line Extenstion: Add yellow pixels above and below vertical lines\n    vertical_cols = {}\n    for r, c in object_pixels:\n      if r != horizontal_line_row:\n        if c not in vertical_cols:\n          vertical_cols[c] = 0\n        vertical_cols[c] += 1\n\n    for c in vertical_cols:\n      output_grid[horizontal_line_row -1, c] = 4\n      output_grid[horizontal_line_row + 1, c] = 4      \n\n    # Central shape adjacent row\n    for r, c in object_pixels:\n        if r == horizontal_line_row:\n          if c > 0:\n            output_grid[r, c-1] = output_grid[r, c]\n          if c < cols - 1:\n            output_grid[r, c+1] = output_grid[r,c]\n\n    # Border Modification: change white columns to yellow on object rows.\n    for r in range(rows):\n        if input_grid[r, 0] == 0 and r >= horizontal_line_row - 1 and r <= horizontal_line_row + 1:\n              output_grid[r, 0] = 4\n        if input_grid[r, cols - 1] == 0 and r >= horizontal_line_row - 1 and r <= horizontal_line_row + 1:\n              output_grid[r, cols - 1] = 4\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7855,
    "candidates_token_count": 782,
    "total_token_count": 8637,
    "cached_content_token_count": 0
  },
  "response_time": 7.976184,
  "response_file": "010-response.json"
}