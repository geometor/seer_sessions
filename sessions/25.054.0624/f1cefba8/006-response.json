{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nPreserve azure (8) pixels and apply an alternating pattern to other color regions, with border pixels taking the color of adjacent objects of different colors.\n\"\"\"\n\nimport numpy as np\n\ndef get_objects(grid):\n    \"\"\"\n    Finds contiguous regions of the same color, excluding white (0).\n    Returns a dictionary: {color: [list of (row, col) coordinates]}.\n    \"\"\"\n    objects = {}\n    visited = set()\n    rows, cols = grid.shape\n\n    def dfs(r, c, color, coords):\n        if (r, c) in visited or r < 0 or r >= rows or c < 0 or c >= cols or grid[r, c] != color:\n            return\n        visited.add((r, c))\n        coords.append((r, c))\n        for dr in [-1, 0, 1]:\n            for dc in [-1, 0, 1]:\n                if dr == 0 and dc == 0:\n                    continue\n                dfs(r + dr, c + dc, color, coords)\n\n    for r in range(rows):\n        for c in range(cols):\n            color = grid[r, c]\n            if color != 0 and (r, c) not in visited:\n                coords = []\n                dfs(r, c, color, coords)\n                if color not in objects:\n                    objects[color] = []\n                objects[color].append(coords)\n    return objects\n\ndef get_bounding_box(coords):\n    \"\"\"\n    Calculates the bounding box for a set of coordinates.\n    Returns (min_row, min_col, max_row, max_col).\n    \"\"\"\n    min_r = min(r for r, c in coords)\n    max_r = max(r for r, c in coords)\n    min_c = min(c for r, c in coords)\n    max_c = max(c for r, c in coords)\n    return min_r, min_c, max_r, max_c\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the observed rule.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # 1. Identify Objects\n    objects = get_objects(input_grid)\n\n    # 2. Preserve Azure (8) - already handled\n\n    # 3. Process Other Colors\n    for color, obj_list in objects.items():\n        if color == 8:\n            continue\n\n        for obj_coords in obj_list:\n            # Border Handling\n            for r, c in obj_coords:\n                neighbor_color = None\n                for dr in [-1, 0, 1]:\n                    for dc in [-1, 0, 1]:\n                        if dr == 0 and dc == 0:\n                            continue\n                        nr, nc = r + dr, c + dc\n                        if 0 <= nr < rows and 0 <= nc < cols:\n                            if grid[nr, nc] != color and grid[nr,nc] != 0 and grid[nr,nc] != 8:\n                                neighbor_color = grid[nr, nc]\n                                break\n                    if neighbor_color is not None:\n                        break\n                if neighbor_color is not None:\n                    output_grid[r, c] = neighbor_color\n\n            # Interior Alternating Pattern (after border handling)\n            min_r, min_c, max_r, max_c = get_bounding_box(obj_coords)\n            for r, c in obj_coords:\n                if output_grid[r,c] == color: # Check if it's still the original color (not a border)\n                    if (r - min_r + c - min_c) % 2 == 1:\n                        output_grid[r, c] = 0\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 1349,
            "end_index": 1513,
            "uri": "https://github.com/Rijgersberg/advent-of-code-2020",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8728,
    "candidates_token_count": 902,
    "total_token_count": 9630,
    "cached_content_token_count": 0
  },
  "response_time": 8.863078,
  "response_file": "006-response.json"
}