{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nPreserves all yellow pixels and mirrors any blue shape to the top of the output grid.\n\"\"\"\n\nimport numpy as np\n\ndef find_blue_shapes(grid):\n    \"\"\"Finds all contiguous blue shapes in the grid.\"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n    blue_shapes = []\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def dfs(r, c, shape):\n        if not is_valid(r, c) or visited[r, c] or grid[r, c] != 1:\n            return\n        visited[r, c] = True\n        shape.append((r, c))\n        for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            dfs(r + dr, c + dc, shape)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == 1 and not visited[r, c]:\n                shape = []\n                dfs(r, c, shape)\n                if shape:\n                    blue_shapes.append(shape)\n    return blue_shapes\ndef get_shape_bounds(shape):\n    \"\"\"Calculates the bounding box of a shape.\"\"\"\n    min_row = min(p[0] for p in shape)\n    max_row = max(p[0] for p in shape)\n    min_col = min(p[1] for p in shape)\n    max_col = max(p[1] for p in shape)\n    return min_row, max_row, min_col, max_col\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.zeros_like(input_grid)\n    rows, cols = input_grid.shape\n    # Preserve yellow pixels\n    for r in range(rows):\n        for c in range(cols):\n            if input_grid[r, c] == 4:\n                output_grid[r, c] = 4\n\n    # Find blue shapes\n    blue_shapes = find_blue_shapes(input_grid)\n\n    # Mirror blue shapes to the top\n    for shape in blue_shapes:\n        min_row, max_row, min_col, max_col = get_shape_bounds(shape)\n        shape_height = max_row - min_row + 1\n        shape_width = max_col - min_col + 1\n\n        # Find a suitable top position\n        target_row = 0\n        for r_offset in range(rows - shape_height + 1):\n             target_col = min_col #start position\n             collision = False\n\n             # check rows from top to bottom to avoid overlap\n             for r in range(shape_height):\n                for c in range(shape_width):\n                   if output_grid[target_row+ r, target_col+c ] != 0:\n                       collision = True\n                       break\n                if collision:\n                  break\n\n             if not collision:\n                break\n             else:\n                target_row += 1\n\n        # Copy the shape to the target location\n        for r in range(shape_height):\n           for c in range(shape_width):\n                if input_grid[min_row +r, min_col+c] == 1:\n                    output_grid[target_row + r, target_col + c] = 1\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 15751,
    "candidates_token_count": 824,
    "total_token_count": 16575,
    "cached_content_token_count": 0
  },
  "response_time": 9.46138,
  "response_file": "010-response.json"
}