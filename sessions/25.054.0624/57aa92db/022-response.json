{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Object Identification:** Identify all contiguous objects (non-white pixels) in the input grid.\n2.  **Green Expansion (Conditional):** If a green object exists, expand it by one pixel *only* in the directions where it is directly adjacent (orthogonally) to another object.\n3.  **Yellow Expansion (Conditional):** If a yellow object exists, and it's orthogonally adjacent to a red object to its immediate left, extend left by one. If adjacent and down below, expand down by one.\n4. **Magenta Expansion (Conditional)**: If a magenta object exists and there is a red pixel to the immediate NW diagonal, extend left by one and up by one.\n5.  **Azure Expansion (Conditional)**: If an azure square is detected and it has space on either of its horizontal sides, expand in both directions.\n6.  **Preservation:** All other objects retain their original shape and position.\n7.  **Background:** White pixels (0) remain unchanged unless filled by an expanding object.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"Finds contiguous objects in a grid.\"\"\"\n    objects = []\n    visited = set()\n    rows, cols = grid.shape\n\n    def dfs(r, c, obj_color, current_object):\n        if (r, c) in visited or not (0 <= r < rows and 0 <= c < cols) or grid[r, c] != obj_color:\n            return\n        visited.add((r, c))\n        current_object.append((r, c))\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            dfs(r + dr, c + dc, obj_color, current_object)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and (r, c) not in visited:\n                current_object = []\n                dfs(r, c, grid[r, c], current_object)\n                objects.append((grid[r, c], current_object))  # Store color and object pixels\n    return objects\n\ndef is_adjacent(obj1_pixels, obj2_pixels):\n    \"\"\"Checks if two objects are orthogonally adjacent.\"\"\"\n    for r1, c1 in obj1_pixels:\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            if (r1 + dr, c1 + dc) in obj2_pixels:\n                return True\n    return False\n\ndef expand_adjacent(grid, object_pixels, color):\n    \"\"\"Expands object by one pixel in orthogonal directions adjacent to existing.\"\"\"\n    new_pixels = set(object_pixels)\n    rows, cols = grid.shape\n\n    for r, c in object_pixels:\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < rows and 0 <= nc < cols and grid[nr,nc] != 0:\n                new_pixels.add((nr,nc))\n    return list(new_pixels)\n    \ndef get_neighbors(grid, r, c):\n    \"\"\"Returns the orthogonal and diagonal neighbors of a cell.\"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    # Orthogonal\n    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n        nr, nc = r + dr, c + dc\n        if 0 <= nr < rows and 0 <= nc < cols:\n            neighbors.append((nr, nc, \"orthogonal\"))\n\n    # Diagonal\n    for dr, dc in [(-1, -1), (-1, 1), (1, -1), (1, 1)]:\n      nr, nc = r+dr, c+dc\n      if 0 <= nr < rows and 0 <= nc < cols:\n          neighbors.append((nr, nc, \"diagonal\"))\n    return neighbors\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.zeros_like(input_grid)\n    rows, cols = input_grid.shape\n\n    # Find all objects in the input grid\n    objects = find_objects(input_grid)\n\n    # Create a dictionary for easier access\n    object_dict = {}\n    for color, pixels in objects:\n        object_dict.setdefault(color, []).extend(pixels)\n\n    for color, obj_pixels in objects:\n        if color == 3:  # Green object (Conditional Expansion)\n            expanded_pixels = expand_adjacent(input_grid, obj_pixels, 3)\n            for r, c in expanded_pixels:\n              output_grid[r,c] = 3\n        elif color == 4: #yellow\n            output_pixels = obj_pixels[:]\n            for r,c in obj_pixels:\n              neighbors = get_neighbors(input_grid,r,c)\n              for nr, nc, ntype in neighbors:\n                if ntype == \"orthogonal\":\n                    if input_grid[nr,nc] == 2: #red\n                      if nr == r-1:\n                        output_pixels.append((nr-1, nc)) #fill up\n                      elif nr == r+1:\n                        output_pixels.append((nr+1, nc)) #fill down\n                      elif nc == c+1:\n                        output_pixels.append((nr, nc+1)) #fill right\n                      elif nc == c-1:\n                        output_pixels.append((nr, nc-1)) #fill left\n            for r, c in output_pixels:\n                output_grid[r,c] = 4\n        elif color == 6: #magenta\n            output_pixels = obj_pixels[:]\n            for r, c in obj_pixels:\n              neighbors = get_neighbors(input_grid, r,c)\n              for nr, nc, ntype in neighbors:\n                if input_grid[nr,nc] == 2 and ntype == \"diagonal\" and (nr, nc) == (r-1,c-1): #red NW\n                    output_pixels.append((r-1,c)) #fill up\n                    output_pixels.append((r,c-1)) #fill left\n            for r, c in output_pixels:\n                output_grid[r, c] = 6\n        elif color == 8:  # Azure (Conditional Expansion)\n            output_pixels = obj_pixels[:]\n            min_c = min(c for _, c in obj_pixels)\n            max_c = max(c for _, c in obj_pixels)\n            min_r = min(r for r, _ in obj_pixels)\n            max_r = max(r for r, _ in obj_pixels)\n\n            #check if square\n            if (max_c - min_c) == (max_r - min_r):\n                can_expand_left = True\n                can_expand_right = True\n                #check left\n                for r in range(min_r, max_r +1):\n                    if min_c -1 < 0 or input_grid[r, min_c-1] != 0:\n                        can_expand_left = False\n                        break\n\n                #check right\n                for r in range(min_r, max_r +1):\n                    if max_c+1 >=cols or input_grid[r, max_c+1] != 0:\n                        can_expand_right = False\n                        break\n\n                if can_expand_left:\n                    for r in range(min_r, max_r+1):\n                        output_pixels.append((r, min_c-1))\n                if can_expand_right:\n                     for r in range(min_r, max_r+1):\n                        output_pixels.append((r, max_c+1))\n            for r, c in output_pixels:\n                output_grid[r, c] = 8\n        else:  # Other objects - preserve\n            for r, c in obj_pixels:\n                output_grid[r, c] = color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 10246,
    "candidates_token_count": 1913,
    "total_token_count": 12159,
    "cached_content_token_count": 0
  },
  "response_time": 17.351071,
  "response_file": "022-response.json"
}