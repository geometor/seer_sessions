import numpy as np
from scipy.ndimage import label

# Provided code (copied here for execution context)
def find_red_shapes(grid):
    # Find all red pixels
    red_pixels = (grid == 2)
    # Label connected components
    labeled_array, num_features = label(red_pixels)
    return labeled_array, num_features

def find_hole(grid, shape_label, labeled_array):
    # Create a mask for the specific shape
    shape_mask = (labeled_array == shape_label)

    # Find the bounding box of the shape
    rows, cols = np.where(shape_mask)
    min_row, max_row = np.min(rows), np.max(rows)
    min_col, max_col = np.min(cols), np.max(cols)

    # Extract the region within the bounding box
    region = grid[min_row:max_row+1, min_col:max_col+1]
    region_mask = shape_mask[min_row:max_row+1, min_col:max_col+1]

    # Invert the shape mask within the region to find the hole
    hole_mask = (region == 0) & ~region_mask

    if not np.any(hole_mask):
      return None, None, None

    # Find all of the hole pixels
    hole_rows, hole_cols = np.where(hole_mask)
    
    # Transform back to full grid
    hole_rows = hole_rows + min_row
    hole_cols = hole_cols + min_col

    return hole_rows, hole_cols, (min_row, max_row, min_col, max_col)

def transform(input_grid):
    # initialize output_grid as all zeros
    output_grid = np.zeros_like(input_grid)

    # Find red shapes
    labeled_array, num_features = find_red_shapes(input_grid)

    # Iterate through each red shape
    for shape_label in range(1, num_features + 1):
        # Find the hole for the current shape
        hole_rows, hole_cols, bounding_box = find_hole(input_grid, shape_label, labeled_array)
        if hole_rows is not None:
          # Replace the hole pixels with green
          for r, c in zip(hole_rows, hole_cols):
            output_grid[r,c] = 3

        # change all red pixels in the input to white in the output
        min_row, max_row, min_col, max_col = bounding_box
        for r in range(min_row, max_row+1):
            for c in range(min_col, max_col+1):
                if input_grid[r,c] == 2:
                    output_grid[r,c] = 0
    return output_grid

# Example inputs (from the prompt)
input1 = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 2, 2, 2, 0, 0, 0, 0, 0, 0],
                   [0, 2, 0, 2, 0, 0, 0, 0, 0, 0],
                   [0, 2, 2, 2, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 2, 2, 2, 2, 0, 0],
                   [0, 0, 0, 0, 2, 0, 0, 2, 0, 0],
                   [0, 0, 0, 0, 2, 0, 0, 2, 0, 0],
                   [0, 0, 0, 0, 2, 0, 0, 2, 0, 0],
                   [0, 0, 0, 0, 2, 2, 2, 2, 0, 0]])

input2 = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 2, 2, 2, 0, 0, 0],
                   [0, 0, 0, 0, 2, 0, 2, 0, 0, 0],
                   [0, 0, 0, 0, 2, 0, 2, 0, 0, 0],
                   [0, 0, 0, 0, 2, 2, 2, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])

input3 = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])

# Run the transform function on the inputs and print results, including error handling
for i, inp in enumerate([input1, input2, input3]):
    print(f"Input {i+1}:\n{inp}")
    try:
        transformed = transform(inp)
        print(f"Transformed {i+1}:\n{transformed}")
    except Exception as e:
        print(f"Error transforming input {i+1}: {e}")

    # Let's inspect what find_red_shapes returns for each input
    labeled_array, num_features = find_red_shapes(inp)
    print(f"Labeled Array {i+1}:\n{labeled_array}")
    print(f"Number of features {i+1}: {num_features}")

    for shape_label in range(1, num_features + 1):
      hole_rows, hole_cols, bounding_box = find_hole(inp, shape_label, labeled_array)
      print(f'shape: {shape_label}')
      print(f'hole_rows: {hole_rows}')
      print(f'hole_cols: {hole_cols}')
      print(f'bounding_box: {bounding_box}')