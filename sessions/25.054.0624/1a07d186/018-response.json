{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Solid Rows:** Find all rows that consist of a single, uniform color across their entire width.\n2.  **Preserve Solid Rows:** All pixels belonging to these solid rows are kept unchanged in the output.\n3.  **Conditional Pixel Preservation:** For all other rows (non-solid rows):\n    *   A pixel is *kept* if and only if there exists a solid row *anywhere* in the grid that has the *same color* AND the *same column index* as the pixel in question.\n    *   A pixel directly below a solid line of the same color will extend that solid line color down.\n4. **Remove other Pixels:** Any pixel not meeting the conditions in steps 2 or 3 is removed (set to 0). This means the output grid will only contain pixels that were either part of a solid row or had a \"matching\" solid-row pixel in the same column.\n\"\"\"\n\nimport numpy as np\n\ndef find_solid_rows(grid):\n    # Find rows that are entirely of one color.\n    rows, cols = grid.shape\n    solid_rows = []\n    for r in range(rows):\n        unique_colors = np.unique(grid[r, :])\n        if len(unique_colors) == 1:\n            solid_rows.append((r, unique_colors[0]))  # (row_index, color)\n    return solid_rows\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of the input_grid.\n    output_grid = np.copy(input_grid)\n    rows, cols = output_grid.shape\n\n    # Find solid rows.\n    solid_rows = find_solid_rows(input_grid)\n\n    # Preserve solid rows.\n    for row_index, color in solid_rows:\n        output_grid[row_index, :] = color\n\n    # Conditional Pixel Preservation and Removal\n    for r in range(rows):\n        for c in range(cols):\n            if any(r == row_index for row_index, _ in solid_rows):\n                continue # Already handled solid rows\n\n            keep_pixel = False\n            for row_index, color in solid_rows:\n                if input_grid[r, c] == color:\n                    keep_pixel = True\n                    break\n\n            if not keep_pixel:\n                output_grid[r,c] = 0\n            elif not any(r == row_index and input_grid[r,c] == color for row_index, color in solid_rows):\n                solid_row_colors = [color for _, color in solid_rows]\n                if input_grid[r,c] not in solid_row_colors:\n                    output_grid[r,c] = 0\n\n    # final pass to extend solid line colors down.\n    for r in range(rows):\n        for c in range(cols):\n             for row_index, color in solid_rows:\n                if r > row_index and input_grid[r,c] == color and output_grid[row_index, c] == color:\n                  output_grid[r,c] = color\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8166,
    "candidates_token_count": 721,
    "total_token_count": 8887,
    "cached_content_token_count": 0
  },
  "response_time": 7.060824,
  "response_file": "018-response.json"
}