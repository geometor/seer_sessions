{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Horizontal Lines:** Find all horizontal lines in the input grid. A horizontal line is a sequence of two or more adjacent pixels of the same color.\n2.  **Identify Singletons:** Find all singleton pixels. A singleton is a pixel that is not horizontally or vertically adjacent to another pixel of the same color.\n3. **Process Singletons by Color:**\n   - Find horizontal lines that match the color of the singleton.\n   - Extend any matching horizontal lines to the column of the singleton, adding pixels of that color.\n   - Remove the singleton pixels from the grid.\n4.  **Output:** The modified grid, where singletons have either been removed or have extended existing same-colored horizontal lines.\n\"\"\"\n\nimport numpy as np\n\ndef find_horizontal_lines(grid):\n    lines = {}\n    for y, row in enumerate(grid):\n        for x, pixel in enumerate(row):\n            if pixel != 0:\n                if x == 0 or grid[y, x-1] != pixel:\n                    # Start of a potential line\n                    line_length = 0\n                    for x2 in range(x, grid.shape[1]):\n                        if grid[y, x2] == pixel:\n                            line_length += 1\n                        else:\n                            break\n                    if line_length > 1: # Consider it a line only if longer than 1 pixel\n                        if pixel not in lines:\n                            lines[pixel] = []\n                        lines[pixel].append((y, x, line_length))\n    return lines\n\ndef find_singletons(grid):\n    singletons = []\n    for y, row in enumerate(grid):\n        for x, pixel in enumerate(row):\n            if pixel != 0:\n                # Check if it's a singleton\n                is_singleton = True\n                if x > 0 and grid[y, x-1] == pixel:\n                    is_singleton = False\n                if x < grid.shape[1] - 1 and grid[y, x+1] == pixel:\n                    is_singleton = False\n                if y > 0 and grid[y-1, x] == pixel:\n                    is_singleton = False\n                if y < grid.shape[0] - 1 and grid[y+1, x] == pixel:\n                    is_singleton = False\n                if is_singleton:\n                    singletons.append((y, x, pixel))\n    return singletons\n\ndef transform(input_grid):\n    # Initialize output grid as a copy of the input grid\n    output_grid = np.copy(input_grid)\n\n    # Find horizontal lines\n    lines = find_horizontal_lines(input_grid)\n\n    # Find singletons\n    singletons = find_singletons(input_grid)\n\n    # Process singletons\n    for y_s, x_s, color_s in singletons:\n        # Find matching horizontal lines\n        if color_s in lines:\n            for y_l, x_l, length_l in lines[color_s]:\n                # Check if the singleton is on the same row as the line\n                if y_s == y_l:\n                    # Extend line to the left\n                    if x_s < x_l:\n                        for x in range(x_s,x_l):\n                            output_grid[y_s,x] = color_s\n                    # Extend line to the right\n                    elif x_s > x_l + length_l -1:\n                        for x in range(x_l + length_l, x_s + 1):\n                            output_grid[y_s, x] = color_s\n\n        output_grid[y_s, x_s] = 0 # remove singleton after extending line\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7683,
    "candidates_token_count": 857,
    "total_token_count": 8540,
    "cached_content_token_count": 0
  },
  "response_time": 7.875918,
  "response_file": "012-response.json"
}