{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nPreserves two complete horizontal lines of a single color, copies any unique colored pixels to their original location and fills adjacent areas of unique color pixels of the same color, except for preserved lines.\n\"\"\"\n\nimport numpy as np\n\ndef get_horizontal_lines(grid):\n    lines = []\n    for row_index, row in enumerate(grid):\n        first_pixel = row[0]\n        if all(pixel == first_pixel for pixel in row) and first_pixel != 0:\n            lines.append((row_index, first_pixel))\n    return lines\n\ndef get_unique_color_pixels(grid, preserved_color):\n    rows, cols = grid.shape\n    color_counts = {}\n    pixel_locations = {}\n\n    for r in range(rows):\n        for c in range(cols):\n            color = grid[r, c]\n            if color != 0 and color != preserved_color:\n                if color not in color_counts:\n                    color_counts[color] = 0\n                    pixel_locations[color] = []\n                color_counts[color] += 1\n                pixel_locations[color].append((r, c))\n\n    unique_pixels = {}\n    for color, count in color_counts.items():\n       if count > 0: # Just get colors that exist\n         unique_pixels[color] = pixel_locations[color]\n    return unique_pixels\n\ndef transform(input_grid):\n    # Initialize output grid\n    output_grid = np.copy(input_grid)\n    rows, cols = output_grid.shape\n\n    # Preserve horizontal lines\n    horizontal_lines = get_horizontal_lines(input_grid)\n    if len(horizontal_lines) == 2:\n        preserved_row1, color1 = horizontal_lines[0]\n        preserved_row2, color2 = horizontal_lines[1]\n\n        # Ensure they are same\n        if color1 != color2:\n          return input_grid # Not a valid task\n\n        preserved_color = color1\n\n        # if they aren't the same color - return input, since this isn't\n        # something our algorithm will handle\n\n        for c in range(cols):\n          output_grid[preserved_row1, c] = preserved_color\n          output_grid[preserved_row2, c] = preserved_color\n    else:\n        return input_grid # Not a valid task\n\n    # Get Unique Pixels\n    unique_color_pixels = get_unique_color_pixels(input_grid, preserved_color)\n\n    # Preserve unique color pixels, and Fill Rule\n    for color, locations in unique_color_pixels.items():\n        for r, c in locations:\n            output_grid[r, c] = color # Preserve\n\n            # Fill adjacent cells with same color\n            neighbors = [(r-1, c), (r+1, c), (r, c-1), (r, c+1)]\n            for nr, nc in neighbors:\n                if 0 <= nr < rows and 0 <= nc < cols:\n                    if nr != preserved_row1 and nr != preserved_row2:\n                      if output_grid[nr, nc] == 0:\n                        output_grid[nr, nc] = color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7966,
    "candidates_token_count": 747,
    "total_token_count": 8713,
    "cached_content_token_count": 0
  },
  "response_time": 8.079206,
  "response_file": "016-response.json"
}