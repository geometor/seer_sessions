{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Rectangles:** Find all maroon (9) colored rectangles in the input grid. Record their positions (top-left corner coordinates), widths, and heights.\n2.  **Create Green Outline:** For the top-left most rectangle, construct a 1 pixel thick green (3) outline around the maroon rectangle.\n3. **Create a complex outline:** For the rectangle at the right, create a 1-pixel green outline on its top, and 3-pixel on its right.\n4.  **Create Blue Outline:** Create an outline for the largest rectangle using blue, there is a gap of 1-pixel between the blue outline and the shape. The blue shape is one pixel thick.\n5.  **Create Green Filling:** Starting from the top left corner, fill every white region with green until it connects with any other color.\n\"\"\"\n\nimport numpy as np\n\ndef find_rectangles(grid, color):\n    rectangles = []\n    visited = np.zeros_like(grid, dtype=bool)\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == color and not visited[r, c]:\n                width = 0\n                height = 0\n                # Find width\n                for i in range(c, cols):\n                    if grid[r, i] == color:\n                        width += 1\n                        visited[r, i] = True\n                    else:\n                        break\n                # Find height\n                for j in range(r + 1, rows):\n                    if all(grid[j, c:c+width] == color):\n                        for i in range(c, c + width):\n                            visited[j, i] = True  # fixed missing\n                        height += 1\n                    else:\n                        break\n                rectangles.append((r, c, width, height + 1)) #  height was off by one.\n    return rectangles\n\ndef outline_rectangle(grid, r, c, width, height, color, thickness=1):\n    # Top outline\n    for i in range(max(0, r - thickness), r):\n        for j in range(max(0, c - thickness), min(grid.shape[1], c + width + thickness)):\n            grid[i, j] = color\n\n    # Bottom outline\n    for i in range(r + height, min(grid.shape[0], r + height + thickness)):\n        for j in range(max(0, c - thickness), min(grid.shape[1], c + width + thickness)):\n          grid[i,j] = color\n\n    # Left outline\n    for i in range(max(0, r - thickness), min(grid.shape[0], r + height + thickness)):\n        for j in range(max(0, c - thickness), c):\n          grid[i,j] = color\n\n    # Right outline\n    for i in range(max(0, r - thickness), min(grid.shape[0], r + height + thickness)):\n        for j in range(c + width, min(grid.shape[1], c + width + thickness)):\n            grid[i, j] = color\n\ndef outline_rectangle_complex(grid, r, c, width, height, color_top, thickness_top, color_right, thickness_right):\n    #top\n    for i in range(r - thickness_top, r):\n        for j in range(c, c + width):\n             grid[i,j] = color_top\n\n    #right\n    for i in range(r - thickness_top, r + height + thickness_top):\n      for j in range(c + width, c+ width + thickness_right):\n        if i >= 0 and i < grid.shape[0] and j >=0 and j < grid.shape[1]:\n          grid[i, j] = color_right\n\n\ndef outline_rectangle_with_gap(grid, r, c, width, height, color, gap=1):\n    # Top outline\n    for i in range(max(0, r - gap -1 ), r - gap):\n        for j in range(max(0, c - gap -1), min(grid.shape[1], c + width + gap + 1)):\n            if grid[i,j] == 0:\n              grid[i, j] = color\n\n    # Bottom outline\n    for i in range(r + height + gap, min(grid.shape[0], r + height + gap + 1)):\n        for j in range(max(0, c - gap -1), min(grid.shape[1], c + width + gap + 1)):\n          if grid[i,j] == 0:\n            grid[i,j] = color\n    # Left outline\n    for i in range(max(0, r - gap -1), min(grid.shape[0], r + height + gap + 1)):\n        for j in range(max(0, c - gap -1), c - gap):\n          if grid[i,j] == 0:\n            grid[i,j] = color\n    # Right outline\n    for i in range(max(0, r - gap -1), min(grid.shape[0], r + height + gap + 1)):\n        for j in range(c + width + gap, min(grid.shape[1], c + width + gap + 1)):\n          if grid[i,j] == 0:\n            grid[i, j] = color\n\ndef flood_fill(grid, r, c, target_color, replacement_color):\n    if r < 0 or r >= grid.shape[0] or c < 0 or c >= grid.shape[1] or grid[r, c] != target_color:\n        return\n    grid[r, c] = replacement_color\n    flood_fill(grid, r + 1, c, target_color, replacement_color)\n    flood_fill(grid, r - 1, c, target_color, replacement_color)\n    flood_fill(grid, r, c + 1, target_color, replacement_color)\n    flood_fill(grid, r, c - 1, target_color, replacement_color)\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n\n    # identify rectangles\n    rectangles = find_rectangles(input_grid, 9)\n    rectangles.sort() # sort by top-left y, then x\n\n    # create outlines\n    if len(rectangles) >= 1:\n      outline_rectangle(output_grid, rectangles[0][0], rectangles[0][1], rectangles[0][2], rectangles[0][3], 3) #green\n    if len(rectangles) >= 3:\n      outline_rectangle_complex(output_grid, rectangles[2][0], rectangles[2][1], rectangles[2][2], rectangles[2][3], 3, 1, 3, 3) # green complex\n    if len(rectangles) >= 2:\n        outline_rectangle_with_gap(output_grid, rectangles[1][0], rectangles[1][1], rectangles[1][2], rectangles[1][3], 1, 1)  # blue with gap\n\n    # create filling\n    flood_fill(output_grid, 0, 0, 0, 3)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3764,
    "candidates_token_count": 1714,
    "total_token_count": 5478,
    "cached_content_token_count": 0
  },
  "response_time": 16.148127,
  "response_file": "014-response.json"
}