{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Rectangles:** Find all maroon (9) colored rectangles in the input grid. Record their positions (top-left corner coordinates), widths, and heights.\n2.  **Create Green Outline:** For the top-left most rectangle, construct a 1 pixel thick green (3) outline around the maroon rectangle.\n3. **Create a complex outline:** For the rectangle at the right, create a 1-pixel green outline on its top, and 3-pixel on its right.\n4.  **Create Blue Outline:** Create an outline for the largest rectangle using blue, there is a gap of 1-pixel between the blue outline and the shape. The blue shape is one pixel thick.\n5.  **Create Green Filling:** Starting from the top left corner, fill every white region with green until it connects with any other color.\n\"\"\"\n\nimport numpy as np\n\ndef find_rectangles(grid, color):\n    rectangles = []\n    visited = np.zeros_like(grid, dtype=bool)\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == color and not visited[r, c]:\n                width = 0\n                height = 0\n                # Find width\n                for i in range(c, cols):\n                    if grid[r, i] == color:\n                        width += 1\n                        visited[r, i] = True\n                    else:\n                        break\n                # Find height\n                for j in range(r + 1, rows):\n                    if all(grid[j, c:c+width] == color):\n                        for i in range(c, c + width):\n                            visited[j, i] = True  # fixed missing\n                        height += 1\n                    else:\n                        break\n                rectangles.append((r, c, width, height + 1)) #  height was off by one.\n    return rectangles\n\ndef outline_rectangle_pixels(grid, r, c, width, height, color, thickness=1):\n    # Top\n    for i in range(c, c + width):\n        for t in range(thickness):\n            if r - 1 - t >= 0:\n                grid[r-1-t, i] = color\n\n    # Bottom\n    for i in range(c, c + width):\n        for t in range(thickness):\n            if r + height + t < grid.shape[0]:\n                grid[r + height + t, i] = color\n\n    # Left\n    for i in range(r, r + height):\n        for t in range(thickness):\n            if c - 1 - t >= 0:\n                grid[i, c - 1 - t] = color\n    # Right\n    for i in range(r, r + height):\n        for t in range(thickness):\n          if c + width + t < grid.shape[1]:\n            grid[i, c + width + t] = color\n\ndef outline_rectangle_complex_pixels(grid, r, c, width, height, color_top, thickness_top, color_right, thickness_right):\n    # Top\n    for i in range(c, c + width):\n        for t in range(thickness_top):\n            if r - 1 -t >= 0:\n                grid[r - 1 - t, i] = color_top\n    # Right\n    for i in range(r, r + height):\n        for t in range(thickness_right):\n            if c + width + t < grid.shape[1]:\n              grid[i, c + width + t] = color_right\n\n\ndef outline_rectangle_with_gap_pixels(grid, r, c, width, height, color, gap=1):\n   # Top\n    for i in range(c, c + width):\n        if r - 1 - gap >= 0 and grid[r-1-gap, i] == 0 :\n            grid[r - 1 - gap, i] = color\n\n    # Bottom\n    for i in range(c, c + width):\n        if r + height + gap < grid.shape[0] and grid[r+height+gap, i] == 0:\n            grid[r + height + gap, i] = color\n\n    # Left\n    for i in range(r, r + height):\n        if c - 1 - gap >= 0 and grid[i, c-1-gap] == 0:\n            grid[i, c - 1 - gap] = color\n\n    # Right\n    for i in range(r, r + height):\n        if c + width + gap < grid.shape[1] and grid[i, c+width+gap] == 0:\n            grid[i, c + width + gap] = color\n\ndef flood_fill_with_boundary(grid, r, c, target_color, replacement_color):\n    if r < 0 or r >= grid.shape[0] or c < 0 or c >= grid.shape[1] or grid[r, c] != target_color:\n        return\n    grid[r, c] = replacement_color\n    flood_fill_with_boundary(grid, r + 1, c, target_color, replacement_color)\n    flood_fill_with_boundary(grid, r - 1, c, target_color, replacement_color)\n    flood_fill_with_boundary(grid, r, c + 1, target_color, replacement_color)\n    flood_fill_with_boundary(grid, r, c - 1, target_color, replacement_color)\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n\n    # identify rectangles\n    rectangles = find_rectangles(input_grid, 9)\n\n    # sort by top-left (r, c)\n    rectangles_top_left = sorted(rectangles, key=lambda x: (x[0], x[1]))\n\n    # sort for largest\n    rectangles_largest = sorted(rectangles, key=lambda x: x[2] * x[3], reverse=True)\n\n    # sort by most right\n    rectangles_right = sorted(rectangles, key=lambda x: x[1], reverse=True)\n\n    # create outlines\n    if len(rectangles_top_left) >= 1:\n        outline_rectangle_pixels(output_grid, rectangles_top_left[0][0], rectangles_top_left[0][1], rectangles_top_left[0][2], rectangles_top_left[0][3], 3)  # green\n\n    if len(rectangles_right) >= 1:\n        outline_rectangle_complex_pixels(output_grid, rectangles_right[0][0], rectangles_right[0][1], rectangles_right[0][2], rectangles_right[0][3], 3, 1, 3, 3) # green complex\n\n    if len(rectangles_largest) >= 1:\n      outline_rectangle_with_gap_pixels(output_grid, rectangles_largest[0][0], rectangles_largest[0][1], rectangles_largest[0][2], rectangles_largest[0][3], 1, 1) #blue\n\n    # create filling\n    flood_fill_with_boundary(output_grid, 0, 0, 0, 3)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 18062,
    "candidates_token_count": 1715,
    "total_token_count": 19777,
    "cached_content_token_count": 0
  },
  "response_time": 15.107132,
  "response_file": "016-response.json"
}