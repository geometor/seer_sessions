import numpy as np
from collections import Counter

def analyze_results(input_grid, expected_output, transformed_output):
    """Analyzes the results and returns a report."""

    input_grid = np.array(input_grid)
    expected_output = np.array(expected_output)
    
    #convert empty lists to empty arrays
    if transformed_output == []:
        transformed_output = np.array([])
    else:
        transformed_output = np.array(transformed_output)

    report = {
        "match": np.array_equal(expected_output, transformed_output),
        "size_correct": expected_output.shape == transformed_output.shape if transformed_output.size>0 else False,
        "color_palette_correct": True,  # Placeholder, needs detailed check
        "correct_pixel_counts": True,  # Placeholder, needs detailed check
        "pixels_off": [],
    }
    
    if report["size_correct"] and not report["match"]:
      report["pixels_off"] = np.where(expected_output != transformed_output)

    # --- Detailed Color Palette and Pixel Count Checks ---
    if report["size_correct"]:
      expected_colors = Counter(expected_output.flatten())
      transformed_colors = Counter(transformed_output.flatten())
      
      all_colors = set(expected_colors.keys()).union(transformed_colors.keys())

      for color in all_colors:
        if expected_colors[color] != transformed_colors[color]:
          report["correct_pixel_counts"] = False
          break
        
      if set(expected_colors.keys()) != set(transformed_colors.keys()):
        report["color_palette_correct"] = False

    return report

#Example usage with provided data:
inputs = [
    # [Example 1 Input...],
    # [Example 2 Input...],
    # [Example 3 Input...],
    [
[0, 0, 2, 4, 8, 5, 0, 4, 2, 8, 0, 5, 0, 0, 2, 4, 0, 5, 0, 4, 2, 0, 0, 5],
[0, 0, 2, 4, 8, 5, 0, 4, 2, 8, 0, 5, 0, 0, 2, 4, 0, 5, 0, 4, 2, 0, 0, 5],
[2, 2, 2, 4, 2, 5, 2, 4, 2, 2, 2, 5, 2, 2, 2, 4, 2, 5, 2, 4, 2, 2, 2, 5],
[4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 5],
[8, 8, 2, 4, 8, 5, 8, 4, 2, 8, 8, 5, 8, 8, 2, 4, 8, 5, 8, 4, 2, 8, 8, 5],
[5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
[0, 0, 2, 4, 8, 3, 0, 4, 2, 8, 0, 3, 0, 0, 2, 4, 0, 5, 0, 4, 2, 0, 0, 5],
[4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 5],
[2, 2, 2, 4, 2, 3, 2, 4, 2, 2, 2, 3, 2, 2, 2, 4, 2, 5, 2, 4, 2, 2, 2, 5],
[8, 8, 2, 4, 8, 3, 8, 4, 2, 8, 8, 3, 8, 8, 2, 4, 8, 5, 8, 4, 2, 8, 8, 5],
[0, 0, 2, 4, 8, 3, 0, 4, 2, 8, 0, 3, 0, 0, 2, 4, 0, 5, 0, 4, 2, 0, 0, 5],
[5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
[0, 0, 2, 4, 8, 5, 0, 4, 2, 8, 0, 5, 0, 0, 2, 4, 0, 5, 0, 4, 2, 0, 0, 5],
[0, 0, 2, 4, 8, 5, 0, 4, 2, 8, 0, 5, 0, 0, 2, 4, 0, 5, 0, 4, 2, 0, 0, 5],
[2, 2, 2, 4, 2, 5, 2, 4, 2, 2, 2, 5, 2, 2, 2, 4, 2, 5, 2, 4, 2, 2, 2, 5],
[4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 5],
[0, 0, 2, 4, 8, 5, 0, 4, 2, 8, 0, 5, 0, 0, 2, 4, 0, 5, 0, 4, 2, 0, 0, 5],
[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
[0, 0, 2, 4, 8, 5, 0, 4, 2, 8, 0, 5, 0, 0, 2, 4, 0, 5, 0, 4, 2, 0, 0, 5],
[4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 5],
[2, 2, 2, 4, 2, 5, 2, 4, 2, 2, 2, 5, 2, 2, 2, 4, 2, 5, 2, 4, 2, 2, 2, 5],
[0, 0, 2, 4, 8, 5, 0, 4, 2, 8, 0, 5, 0, 0, 2, 4, 0, 5, 0, 4, 2, 0, 0, 5],
[0, 0, 2, 4, 8, 5, 0, 4, 2, 8, 0, 5, 0, 0, 2, 4, 0, 5, 0, 4, 2, 0, 0, 5],
[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
],
    # [Example 2 Input...],
    [
[0, 0, 8, 3, 1, 8, 0, 3, 8, 1, 0, 8, 0, 0, 8, 3, 0, 8, 0, 3, 8, 0, 0, 8, 1, 0],
[0, 0, 8, 3, 1, 8, 0, 3, 8, 1, 0, 8, 0, 0, 8, 3, 0, 8, 0, 3, 8, 0, 0, 8, 1, 0],
[8, 8, 2, 2, 2, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
[3, 3, 2, 3, 3, 8, 3, 3, 2, 3, 3, 8, 3, 3, 8, 3, 3, 8, 3, 3, 8, 3, 3, 8, 3, 3],
[1, 1, 2, 3, 1, 8, 1, 3, 2, 1, 1, 8, 1, 1, 8, 3, 1, 8, 1, 3, 8, 1, 1, 8, 1, 1],
[8, 8, 2, 8, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
[0, 0, 2, 3, 1, 8, 0, 3, 2, 1, 0, 8, 0, 0, 8, 3, 0, 8, 0, 3, 8, 0, 0, 8, 1, 0],
[3, 3, 2, 3, 3, 8, 3, 3, 2, 3, 3, 8, 3, 3, 8, 3, 3, 8, 3, 3, 8, 3, 3, 8, 3, 3],
[8, 8, 2, 2, 2, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
[1, 1, 8, 3, 1, 8, 1, 3, 8, 1, 1, 8, 1, 1, 8, 3, 1, 8, 1, 3, 8, 1, 1, 8, 1, 1],
[0, 0, 8, 3, 1, 8, 0, 3, 8, 1, 0, 8, 0, 0, 8, 3, 0, 8, 0, 3, 8, 0, 0, 8, 1, 0],
[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
[0, 0, 8, 3, 1, 8, 0, 3, 8, 1, 0, 8, 0, 0, 8, 3, 0, 8, 0, 3, 8, 0, 0, 8, 1, 0],
[0, 0, 8, 3, 1, 8, 0, 3, 8, 1, 0, 8, 0, 0, 8, 3, 0, 8, 0, 3, 8, 0, 0, 8, 1, 0],
[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
[3, 3, 8, 3, 3, 8, 3, 3, 8, 3, 3, 8, 3, 3, 8, 3, 3, 8, 3, 3, 8, 3, 3, 8, 3, 3],
[0, 0, 8, 3, 1, 8, 0, 3, 8, 1, 0, 8, 0, 0, 8, 3, 0, 8, 0, 3, 8, 0, 0, 8, 1, 0],
[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
[0, 0, 8, 3, 1, 8, 0, 3, 8, 1, 0, 8, 0, 0, 8, 3, 0, 8, 0, 3, 8, 0, 0, 8, 1, 0],
[3, 3, 8, 3, 3, 8, 3, 3, 8, 3, 3, 8, 3, 3, 8, 3, 3, 8, 3, 3, 8, 3, 3, 8, 3, 3],
[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
[0, 0, 8, 3, 1, 8, 0, 3, 8, 1, 0, 8, 0, 0, 8, 3, 0, 8, 0, 3, 8, 0, 0, 8, 1, 0],
[0, 0, 8, 3, 1, 8, 0, 3, 8, 1, 0, 8, 0, 0, 8, 3, 0, 8, 0, 3, 8, 0, 0, 8, 1, 0],
[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
[1, 1, 8, 3, 1, 8, 1, 3, 8, 1, 1, 8, 1, 1, 8, 3, 1, 8, 1, 3, 8, 1, 1, 8, 1, 1],
[0, 0, 8, 3, 1, 8, 0, 3, 8, 1, 0, 8, 0, 0, 8, 3, 0, 8, 0, 3, 8, 0, 0, 8, 1, 0]
],
    # [Example 3 Input...],
    [
[0, 0, 3, 1, 8, 5, 0, 1, 3, 8, 0, 5, 0, 0, 3, 1, 0, 5, 0, 8, 3, 0, 0, 5, 8, 0, 3, 1],
[0, 0, 3, 1, 8, 5, 0, 1, 3, 8, 0, 5, 0, 0, 3, 1, 0, 5, 0, 8, 3, 0, 0, 5, 8, 0, 3, 1],
[3, 3, 3, 3, 3, 5, 3, 3, 3, 3, 3, 5, 3, 3, 3, 3, 3, 5, 3, 3, 3, 3, 3, 5, 3, 3, 3, 3],
[1, 1, 3, 1, 8, 5, 1, 1, 3, 8, 1, 5, 1, 1, 3, 1, 1, 5, 1, 8, 3, 1, 1, 5, 8, 1, 3, 1],
[8, 8, 3, 8, 8, 5, 8, 8, 3, 8, 8, 5, 8, 8, 3, 8, 8, 5, 8, 8, 3, 8, 8, 5, 8, 8, 3, 8],
[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
[0, 0, 3, 1, 8, 5, 0, 1, 3, 8, 0, 5, 0, 0, 3, 1, 0, 5, 0, 8, 3, 0, 0, 5, 8, 0, 3, 1],
[1, 1, 3, 1, 8, 5, 1, 1, 3, 8, 1, 5, 1, 1, 3, 1, 1, 5, 1, 8, 3, 1, 1, 5, 8, 1, 3, 1],
[3, 3, 3, 3, 3, 5, 3, 3, 3, 3, 3, 5, 3, 3, 3, 3, 3, 5, 3, 3, 3, 3, 3, 5, 3, 3, 3, 3],
[8, 8, 3, 8, 8, 5, 8, 8, 3, 8, 8, 5, 8, 8, 3, 8, 8, 5, 8, 8, 3, 8, 8, 5, 8, 8, 3, 8],
[0, 0, 3, 1, 8, 5, 0, 1, 3, 8, 0, 5, 0, 0, 3, 1, 0, 5, 0, 8, 3, 0, 0, 5, 8, 0, 3, 1],
[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
[0, 0, 3, 1, 8, 5, 0, 1, 3, 8, 0, 5, 0, 0, 3, 1, 0, 5, 0, 8, 3, 0, 0, 5, 8, 0, 3, 1],
[0, 0, 3, 1, 8, 5, 0, 1, 3, 8, 0, 5, 0, 0, 3, 1, 0, 5, 0, 8, 3, 0, 0, 5, 8, 0, 3, 1],
[3, 3, 3, 3, 3, 5, 3, 3, 3, 3, 3, 5, 3, 3, 3, 3, 3, 5, 3, 3, 3, 3, 3, 5, 3, 3, 3, 3],
[1, 1, 3, 1, 8, 5, 1, 1, 3, 8, 1, 5, 1, 1, 3, 1, 1, 5, 1, 8, 3, 1, 1, 5, 8, 1, 3, 1],
[0, 0, 3, 1, 8, 5, 0, 1, 3, 8, 0, 5, 0, 0, 3, 1, 0, 5, 0, 8, 3, 0, 0, 5, 8, 0, 3, 1],
[5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
[0, 0, 3, 1, 8, 6, 0, 1, 3, 8, 0, 6, 0, 0, 3, 1, 0, 5, 0, 8, 3, 0, 0, 5, 8, 0, 3, 1],
[8, 8, 3, 8, 8, 6, 8, 8, 3, 8, 8, 6, 8, 8, 3, 8, 8, 5, 8, 8, 3, 8, 8, 5, 8, 8, 3, 8],
[3, 3, 3, 3, 3, 6, 3, 3, 3, 3, 3, 6, 3, 3, 3, 3, 3, 5, 3, 3, 3, 3, 3, 5, 3, 3, 3, 3],
[0, 0, 3, 1, 8, 6, 0, 1, 3, 8, 0, 6, 0, 0, 3, 1, 0, 5, 0, 8, 3, 0, 0, 5, 8, 0, 3, 1],
[0, 0, 3, 1, 8, 6, 0, 1, 3, 8, 0, 6, 0, 0, 3, 1, 0, 5, 0, 8, 3, 0, 0, 5, 8, 0, 3, 1],
[5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
[8, 8, 3, 8, 8, 5, 8, 8, 3, 8, 8, 5, 8, 8, 3, 8, 8, 5, 8, 8, 3, 8, 8, 5, 8, 8, 3, 8],
[0, 0, 3, 1, 8, 5, 0, 1, 3, 8, 0, 5, 0, 0, 3, 1, 0, 5, 0, 8, 3, 0, 0, 5, 8, 0, 3, 1],
[3, 3, 3, 3, 3, 5, 3, 3, 3, 3, 3, 5, 3, 3, 3, 3, 3, 5, 3, 3, 3, 3, 3, 5, 3, 3, 3, 3],
[1, 1, 3, 1, 8, 5, 1, 1, 3, 8, 1, 5, 1, 1, 3, 1, 1, 5, 1, 8, 3, 1, 1, 5, 8, 1, 3, 1]
],
]

expected_outputs = [
    # [Example 1 Expected Output...],
    # [Example 2 Expected Output...],
    # [Example 3 Expected Output...],
    [
[3, 3, 3, 3, 3, 3, 3],
[3, 0, 4, 2, 8, 0, 3],
[3, 4, 4, 4, 4, 4, 3],
[3, 2, 4, 2, 2, 2, 3],
[3, 8, 4, 2, 8, 8, 3],
[3, 0, 4, 2, 8, 0, 3],
[3, 3, 3, 3, 3, 3, 3]
],
    [
[2, 2, 2, 2, 2, 2, 2],
[2, 3, 3, 8, 3, 3, 2],
[2, 3, 1, 8, 1, 3, 2],
[2, 8, 8, 8, 8, 8, 2],
[2, 3, 1, 8, 0, 3, 2],
[2, 3, 3, 8, 3, 3, 2],
[2, 2, 2, 2, 2, 2, 2]
],
    [
[6, 6, 6, 6, 6, 6, 6],
[6, 0, 1, 3, 8, 0, 6],
[6, 8, 8, 3, 8, 8, 6],
[6, 3, 3, 3, 3, 3, 6],
[6, 0, 1, 3, 8, 0, 6],
[6, 0, 1, 3, 8, 0, 6],
[6, 6, 6, 6, 6, 6, 6]
]
]

transformed_outputs = [
    # [Example 1 Transformed Output...],
    # [Example 2 Transformed Output...],
    # [Example 3 Transformed Output...],
    [],
    [],
    [],
]


for i, (inp, exp, trans) in enumerate(zip(inputs, expected_outputs, transformed_outputs)):
    report = analyze_results(inp, exp, trans)
    print(f"## Example {i+1}:")
    print(f"match: {report['match']}")
    print(f"pixels_off: {report['pixels_off']}")
    print(f"size_correct: {report['size_correct']}")
    print(f"color_palette_correct: {report['color_palette_correct']}")
    print(f"correct_pixel_counts: {report['correct_pixel_counts']}")
    print("-" * 20)