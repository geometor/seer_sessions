Task: Generate a sequence of states by iteratively replacing zeros.

Input:
  type: string
  content: space-separated integers
  structure: list of integers (parsed_input)
  properties:
    - length (L): total number of integers
    - initial_non_zero_digit (D): the value of the first integer in the list
    - first_zero_index (I_zero): the index of the first occurrence of '0'

Output:
  type: string (multi-line)
  structure: sequence of lists, where each list represents a state
  properties:
    - number_of_lines: Derived property, calculated as ceiling(L / 2)

Transformation:
  actions:
    - parse_input: Convert input string to list of integers.
    - get_length: Determine L from the parsed list.
    - calculate_output_lines: Compute ceiling(L / 2).
    - get_replacement_digit: Identify D (the first element of the list).
    - find_first_zero: Determine I_zero.
    - generate_sequence: Create the output sequence iteratively.
  process:
    - Start with the initial parsed_input list as the first state.
    - Generate `ceiling(L / 2)` states in total.
    - For each subsequent state (after the first):
      - Modify the previous state.
      - The modification involves replacing the element at index `I_zero + (state_number - 1)` with D. (State numbers are 1-based). Ensure the index is within bounds.
    - Format each state (list of integers) back into a space-separated string for output.

Relationships:
  - The first output line is identical to the input.
  - The number of output lines is ceiling(input_length / 2).
  - Each output line `k` (k > 1) is generated from line `k-1` by changing the k-th zero (counting from the start of the original sequence) to the initial non-zero digit D.