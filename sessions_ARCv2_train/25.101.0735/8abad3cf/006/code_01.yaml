task_description: Transform a 2D input grid into a 2D output grid with different dimensions by extracting, transforming, and combining subgrids. The transformation rule for part of the output (O1) appears dependent on the parity of the input grid's column count.

elements:
  - object: input_grid
    alias: I
    properties:
      - type: 2D array of integers
      - dimensions: I_rows x I_cols
      - parity: I_cols % 2 (0 for even, 1 for odd)
  - object: output_grid
    alias: O
    properties:
      - type: 2D array of integers
      - dimensions: O_rows x O_cols
  - object: left_output_part
    alias: O1
    properties:
      - type: 2D array of integers
      - dimensions: O_rows x O1_cols
  - object: right_output_part
    alias: O2
    properties:
      - type: 2D array of integers
      - dimensions: O_rows x O2_cols
  - object: source_subgrid_for_O1 # Primary source identified for Even I_cols rule
    alias: S
    properties:
      - type: 2D array of integers
      - dimensions: O_rows x O1_cols

relationships:
  - type: dimension_calculation
    input: I_cols
    output: O_rows
    rule: O_rows = floor(I_cols / 2) + 1
  - type: dimension_calculation
    input: O_rows
    output: O2_cols
    rule: O2_cols = O_rows
  - type: dimension_calculation
    input: I_cols
    output: O1_cols
    rule: O1_cols = I_cols - 1
  - type: dimension_calculation
    input: [O1_cols, O2_cols]
    output: O_cols
    rule: O_cols = O1_cols + O2_cols
  - type: concatenation
    input: [O1, O2]
    output: O
    rule: O = horizontal_concatenate(O1, O2)

actions:
  - action: calculate_O2
    input: I
    parameters: O_rows
    output: O2
    rule: Tile the first O_rows elements of the first row of I (I[0, 0:O_rows]) vertically O_rows times.
  - action: extract_subgrid_S # Used by the Even I_cols rule for O1
    input: I
    parameters: [I_rows, I_cols, O_rows, O1_cols]
    output: S
    rule: Extract subgrid S = I[(I_rows - O_rows):I_rows, 1:I_cols]. S has dimensions O_rows x O1_cols.
  - action: calculate_O1 # Rule depends on I_cols parity
    input: [I, S] # Input now includes I for potential odd-rule
    parameters: [I_cols, O1_cols]
    output: O1
    conditional_rule:
      - condition: I_cols is even
        rule: >
          1. Flip the subgrid S vertically (upside-down) to create a temporary grid Temp.
          2. If Temp has 3 or more columns (O1_cols >= 3), swap its second column (index 1) and third column (index 2).
          3. The resulting grid is O1.
      - condition: I_cols is odd
        rule: >
          Rule undetermined. Observations from train_1 show pixel/block copying from specific locations (e.g., O1[0,:] from I[5, 0:6], O1[1:4, 2:5] from tiling I[6, 1:4], O1[3,0] from I[2,2]), but a general algorithm is not identified. The transformation does not simply use S.

derived_facts:
  - train_1: I (7x7, odd), O (4x10). Rule for O1 is undetermined.
  - train_2: I (7x4, even), O (3x6). Rule for O1 is flipud(S) + swap(1,2).
  - O2_calculation_verified: The rule for O2 matches both examples.
  - S_extraction_verified: The rule S = I[(I_rows - O_rows):I_rows, 1:I_cols] correctly identifies the source subgrid for the 'even I_cols' O1 rule.
  - O1_rule_parity_dependency: The transformation rule for O1 appears dependent on whether I_cols is odd or even. The rule for even I_cols is identified; the rule for odd I_cols is not.