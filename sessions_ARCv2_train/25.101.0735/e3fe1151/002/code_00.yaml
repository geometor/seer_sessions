grid_dimensions: [5, 5]
center_cell_coords: [2, 2] # 0-indexed
marker_digit: 7
invariant_cells:
  - type: central_cross # row 2 or column 2
  - type: non_marker_digit # cells not equal to 7
target_cells:
  - type: marker_digit_outside_cross # cells equal to 7 AND r != 2 AND c != 2
transformation_rule:
  description: Replace target cells based on input grid values at specific locations, determined by the target cell's coordinates and the value of its symmetrically opposite cell.
  primary_rule: # Applied when the symmetric cell value is NOT 7
    condition: input[4-r][4-c] != 7
    action:
      - if: (r, c) == (3, 3)
        then: output[r][c] = input[1][0] # Specific exception for BR inner cell
      - else:
        then: output[r][c] = input[4-r][4-c] # General case: use symmetric value
  fallback_rule: # Applied when the symmetric cell value IS 7
    condition: input[4-r][4-c] == 7
    action: Assign output[r][c] based on a prioritized lookup of values from specific input cells, depending on the target cell (r,c).
    source_mapping:
      (0,0): # TL corner target
        - input[0,4] # TR corner value
      (1,1): # TL inner target
        - input[4,0] # BL corner value
      (4,4): # BR corner target
        - input[3,3] # BR inner value
      (1,3): # TR inner target
        priority_check: # Check in order, use first non-7 value
          - input[4,4] # BR corner value
          - input[3,3] # BR inner value
      (3,1): # BL inner target
        priority_check: # Check in order, use first non-7 value
          - input[4,4] # BR corner value
          - input[0,4] # TR corner value
          - input[3,3] # BR inner value
      (3,3): # BR inner target
        priority_check: # Check in order, use first non-7 value
          - input[0,4] # TR corner value
          - input[3,3] # BR inner value
    default_value: 7 # If all checks result in 7, the value remains 7 (implicitly handled by copy)
