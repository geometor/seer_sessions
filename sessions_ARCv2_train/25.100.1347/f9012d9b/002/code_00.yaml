Input:
  type: grid
  description: A rectangular grid of single-digit integers (0-9).
  properties:
    - rows: integer
    - columns: integer
    - elements: integer digits

Output:
  type: grid
  description: >
    Either a 1x1 grid containing a single integer or a 2x2 grid
    of integers derived from the input.
  properties:
    - case_single: Represents a single element derived from the input, wrapped in a 1x1 grid.
    - case_grid: Represents a 2x2 subgrid derived from the input.

Transformation:
  action: analyze_subgrids
  object: 2x2 subgrids (patterns) within the input grid.
  steps:
    - identify: Find all unique 2x2 patterns and their frequency.
    - calculate: Compute the sum of elements for each unique 2x2 pattern.
    - filter_sum: Select pattern(s) with the maximum sum.
    - filter_frequency: Among selected patterns, select pattern(s) with the maximum frequency.
  decision_point:
    condition: Number of patterns remaining after filtering.
    branches:
      - if_unique:
          action: extract_element
          source: The unique remaining 2x2 pattern.
          element: Top-left corner value.
          result: 1x1 grid containing the element.
      - if_multiple:
          action: tie_break
          source: The set of tied 2x2 patterns.
          rule: >
            Select the single pattern from the tied set by comparing them based on
            element values in a specific priority order:
            1. Maximize the Bottom-Left element.
            2. If ties remain, maximize the Top-Right element.
            3. If ties remain, maximize the Top-Left element.
            (The Bottom-Right element comparison is usually not needed).
          result: The selected 2x2 grid.

Relationships:
  - Input grid contains multiple overlapping 2x2 subgrids.
  - Each 2x2 subgrid has properties: frequency, sum of elements.
  - The output is derived from the 2x2 subgrid(s) that maximize sum, then frequency.
  - Output format (1x1 vs. 2x2 grid) depends on whether the selection process yields a unique pattern or a tie.
  - Tie-breaking depends on comparing the content of the tied patterns element by element in priority order (BL, TR, TL).