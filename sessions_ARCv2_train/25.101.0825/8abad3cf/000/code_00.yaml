task_description: Rearrange pixels from the input grid into a new grid composed of solid rectangular blocks representing non-dominant colors, potentially including a single pixel element, arranged horizontally with gaps filled by the dominant color.

definitions:
  - &dominant_color The color with the highest pixel count in the input grid.
  - &pixel_color The color with a pixel count of exactly 1 in the input grid (if present).
  - &block_colors All colors in the input grid that are neither the dominant color nor the pixel color.
  - &output_height Calculated as the number of block colors + (1 if pixel_color exists else 0) + 1.
  - &block_width For a block color C with N pixels, its width W is floor(sqrt(N)).
  - &output_elements The pixel_color (if present) and the block_colors.

transformation_steps:
  - Identify unique colors and counts in the input grid.
  - Determine the dominant_color, pixel_color (if any), and block_colors.
  - Calculate the output_height H.
  - For each block_color, calculate its block_width W_i. Blocks are H x W_i.
  - Determine the horizontal placement order of output_elements:
    - If pixel_color exists: Sort block_colors by color index descending. Order = [pixel_color] + [sorted block_colors].
    - If no pixel_color: Sort block_colors by color index ascending. Order = [sorted block_colors].
  - Calculate the total output width W_total: Sum of widths (1 for pixel_color, W_i for block_colors) + (number of elements - 1) gaps.
  - Create an output grid of size H x W_total, filled with dominant_color.
  - Place the output_elements in the determined order, column by column:
    - Place pixel_color at (H-1, current_col). Advance current_col by 1.
    - Place block_color C_i (H x W_i) starting at (0, current_col). Advance current_col by W_i.
    - Between elements, leave a 1-column gap (already filled with dominant_color). Advance current_col by 1 after placing an element if it's not the last one.

example_1_specifics:
  dominant_color: 7 (Orange)
  pixel_color: 1 (Blue)
  block_colors: [4 (Yellow), 5 (Gray)]
  output_height: count(Yellow, Gray) + count(Blue) + 1 = 2 + 1 + 1 = 4
  block_widths: Yellow (W=4), Gray (W=3)
  order: [Blue, Gray, Yellow] (Blocks sorted desc: Gray, Yellow)
  output_width: W_Blue(1) + W_Gray(3) + W_Yellow(4) + 2 gaps = 1 + 3 + 4 + 2 = 10
  layout: Blue(pixel at 3,0) | Gap | Gray(4x3) | Gap | Yellow(4x4)

example_2_specifics:
  dominant_color: 7 (Orange)
  pixel_color: None
  block_colors: [6 (Magenta), 9 (Maroon)]
  output_height: count(Magenta, Maroon) + count(None) + 1 = 2 + 0 + 1 = 3
  block_widths: Magenta (W=2), Maroon (W=3)
  order: [Magenta, Maroon] (Blocks sorted asc: Magenta, Maroon)
  output_width: W_Magenta(2) + W_Maroon(3) + 1 gap = 2 + 3 + 1 = 6
  layout: Magenta(3x2) | Gap | Maroon(3x3)