{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport math\nfrom typing import List, Tuple, Set, FrozenSet\n\n\"\"\"\nIdentify the geometric pattern formed by non-zero cells in a 3x3 grid \nand return a specific integer code corresponding to that pattern.\n\nThe patterns considered are:\n- '+' shape: Output 6\n- 'X' shape: Output 2\n- 'L' shape (and its rotations/reflections): Output 3\n- 'S' or 'Z' shape (and its rotations/reflections): Output 1\n\nThe specific non-zero digit does not matter, only its presence.\nAll example inputs have exactly 5 non-zero cells forming one of these shapes.\n\"\"\"\n\n# Type alias for coordinates\nCoord = Tuple[int, int]\nCoordSet = FrozenSet[Coord]\n\n# Helper function to extract coordinates of non-zero cells\ndef get_non_zero_coords(grid: List[List[int]]) -> CoordSet:\n    \"\"\"Finds the (row, col) coordinates of all non-zero elements in the grid.\"\"\"\n    coords = set()\n    for r, row in enumerate(grid):\n        for c, val in enumerate(row):\n            if val != 0:\n                coords.add((r, c))\n    return frozenset(coords)\n\n# Helper functions for generating symmetric patterns (rotations and reflections)\n# Assume grid center is (1, 1) for rotation/reflection reference\n\ndef rotate_90_cw(coords: CoordSet) -> CoordSet:\n    \"\"\"Rotates a set of coordinates 90 degrees clockwise around (1, 1).\"\"\"\n    # Rotation formula: new_r = c, new_c = 2 - r\n    return frozenset((c, 2 - r) for r, c in coords)\n\ndef reflect_h(coords: CoordSet) -> CoordSet:\n    \"\"\"Reflects a set of coordinates horizontally across the center column (c=1).\"\"\"\n    # Reflection formula: new_r = r, new_c = 2 - c\n    return frozenset((r, 2 - c) for r, c in coords)\n\ndef generate_symmetries(base_coords: CoordSet) -> Set[CoordSet]:\n    \"\"\"Generates all 8 symmetries (rotations and reflections) of a base pattern.\"\"\"\n    symmetries = set()\n    current_coords = base_coords\n    for _ in range(4): # Rotations 0, 90, 180, 270\n        symmetries.add(current_coords)\n        symmetries.add(reflect_h(current_coords)) # Add reflection of current rotation\n        current_coords = rotate_90_cw(current_coords)\n    return symmetries\n\n# Define canonical patterns based on examples (using frozenset for hashability)\n# These are sets of (row, col) tuples for the non-zero cells.\n\n# From train_3: [[0, 5, 0], [5, 5, 5], [0, 5, 0]] -> Output 6\nPLUS_PATTERN: CoordSet = frozenset({(0,1), (1,0), (1,1), (1,2), (2,1)})\n\n# From train_4: [[8, 0, 8], [0, 8, 0], [8, 0, 8]] -> Output 2\nX_PATTERN: CoordSet = frozenset({(0,0), (0,2), (1,1), (2,0), (2,2)})\n\n# From train_1: [[0, 1, 1], [0, 1, 1], [1, 0, 0]] -> Output 3\nL_BASE: CoordSet = frozenset({(0,1), (0,2), (1,1), (1,2), (2,0)})\nL_SYMMETRIES: Set[CoordSet] = generate_symmetries(L_BASE)\n\n# From train_6: [[4, 4, 0], [4, 0, 4], [0, 4, 0]] -> Output 1\nS_BASE: CoordSet = frozenset({(0,0), (0,1), (1,0), (1,2), (2,1)})\nS_SYMMETRIES: Set[CoordSet] = generate_symmetries(S_BASE)\n\n\ndef transform(input_grid: list[list[int]]) -> int:\n    \"\"\"\n    Identifies the pattern of non-zero cells in the input grid and returns its code.\n\n    Args:\n        input_grid: A 3x3 list of lists containing integers.\n\n    Returns:\n        An integer code representing the identified pattern (1, 2, 3, or 6).\n        Returns -1 if the pattern is not recognized (though this shouldn't happen\n        based on the provided examples).\n    \"\"\"\n\n    # 1. Get the coordinates of non-zero cells from the input grid.\n    input_coords = get_non_zero_coords(input_grid)\n\n    # 2. Check against the defined patterns.\n    # Check fixed patterns first (no rotation needed)\n    if input_coords == PLUS_PATTERN:\n        return 6\n    if input_coords == X_PATTERN:\n        return 2\n\n    # Check against symmetric pattern families\n    if input_coords in L_SYMMETRIES:\n        return 3\n    if input_coords in S_SYMMETRIES:\n        return 1\n\n    # 3. Return default/error code if no match (optional, based on task spec)\n    # Based on examples, all inputs should match one pattern.\n    # You could raise an error or return a specific value if needed.\n    print(f\"Warning: Unrecognized pattern for coords: {input_coords}\")\n    return -1 # Or raise ValueError(\"Unrecognized pattern\")\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1461,
    "candidates_token_count": 4730,
    "total_token_count": 6191,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 41.160308,
  "retries": 1
}