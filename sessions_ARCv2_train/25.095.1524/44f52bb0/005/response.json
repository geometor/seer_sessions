{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms a 3x3 input grid containing 0s and 2s.\nOutputs 7 if and only if:\n1. There exists at least one pair of '2's that are 4-way adjacent (horizontally or vertically).\n2. All '2's in the grid form a single connected component using 8-way adjacency (including diagonals).\n3. There is more than one '2' present in the grid.\nOtherwise, outputs 1.\n\"\"\"\n\nfrom collections import deque\n\ndef _find_twos(grid: list[list[int]]) -> list[tuple[int, int]]:\n    \"\"\"Finds the coordinates of all cells containing '2'.\"\"\"\n    twos_coords = []\n    rows = len(grid)\n    cols = len(grid[0])\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r][c] == 2:\n                twos_coords.append((r, c))\n    return twos_coords\n\ndef _check_4way_adjacency(grid: list[list[int]], twos_coords: list[tuple[int, int]]) -> bool:\n    \"\"\"Checks if any two '2's are 4-way adjacent (up, down, left, right).\"\"\"\n    rows = len(grid)\n    cols = len(grid[0])\n    twos_set = set(twos_coords) # Faster lookups\n\n    for r, c in twos_coords:\n        # Define 4-way neighbors\n        neighbors = [\n            (r - 1, c),  # Up\n            (r + 1, c),  # Down\n            (r, c - 1),  # Left\n            (r, c + 1)   # Right\n        ]\n\n        for nr, nc in neighbors:\n            # Check if neighbor is within bounds and is also a '2'\n            if 0 <= nr < rows and 0 <= nc < cols and (nr, nc) in twos_set:\n                return True # Found a 4-way adjacent pair\n\n    return False # No 4-way adjacent pairs found\n\ndef _check_8way_connectivity(grid: list[list[int]], twos_coords: list[tuple[int, int]]) -> bool:\n    \"\"\"\n    Checks if all '2's form a single connected component using 8-way adjacency.\n    Assumes len(twos_coords) > 1.\n    \"\"\"\n    rows = len(grid)\n    cols = len(grid[0])\n    total_twos = len(twos_coords)\n    \n    # Should not be called if total_twos <= 1, but adding safety check\n    if total_twos <= 1:\n        return True # A single node is considered connected by convention, though the main func handles this\n\n    start_node = twos_coords[0]\n    q = deque([start_node])\n    visited = {start_node}\n    connected_count = 0\n    all_twos_set = set(twos_coords) # For efficient checking\n\n    while q:\n        r, c = q.popleft()\n        connected_count += 1\n\n        # Define 8 neighbors (horizontal, vertical, diagonal)\n        for dr in [-1, 0, 1]:\n            for dc in [-1, 0, 1]:\n                if dr == 0 and dc == 0: # Skip self\n                    continue\n                \n                nr, nc = r + dr, c + dc\n                neighbor_coord = (nr, nc)\n\n                # Check if neighbor is within bounds, is a '2', and not visited\n                if 0 <= nr < rows and 0 <= nc < cols and \\\n                   neighbor_coord in all_twos_set and \\\n                   neighbor_coord not in visited:\n                    \n                    visited.add(neighbor_coord)\n                    q.append(neighbor_coord)\n                            \n    # If the number of visited nodes equals the total number of '2's, they are all connected\n    return connected_count == total_twos\n\n\ndef transform(input_grid: list[list[int]]) -> int:\n    \"\"\"\n    Applies the transformation rule based on 4-way adjacency and 8-way connectivity of '2's.\n    \"\"\"\n    \n    # 1. Identify all cells containing the value '2'.\n    twos_coords = _find_twos(input_grid)\n    \n    # 2. Count the total number of cells containing '2'.\n    total_twos = len(twos_coords)\n\n    # 3. Handle edge cases: 0 or 1 '2's always result in output 1.\n    if total_twos <= 1:\n        return 1\n\n    # 4. Check for 4-way adjacency.\n    has_4way_adj = _check_4way_adjacency(input_grid, twos_coords)\n\n    # 5. Check for 8-way connectivity.\n    is_single_component_8way = _check_8way_connectivity(input_grid, twos_coords)\n\n    # 6. Determine Output based on both conditions.\n    #    Output 7 only if both conditions are true.\n    if has_4way_adj and is_single_component_8way:\n        return 7\n    else:\n        # Output 1 if either condition is false\n        return 1\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5559,
    "candidates_token_count": 1815,
    "total_token_count": 7374,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.64957,
  "retries": 1
}