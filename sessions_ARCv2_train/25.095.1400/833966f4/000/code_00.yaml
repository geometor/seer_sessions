objects:
  - name: input_sequence
    type: list
    description: A sequence of single-digit numbers derived from the input string, one number per line.
    properties:
      - order: significant
      - element_type: integer (single digit)
      - length: variable (can be odd or even)
  - name: output_sequence
    type: list
    description: A sequence containing the same numbers as the input_sequence but reordered.
    properties:
      - order: significant
      - element_type: integer (single digit)
      - length: same as input_sequence
  - name: number_pair
    type: tuple
    description: Two adjacent numbers from the input_sequence being processed together.
  - name: last_element
    type: integer
    description: The final number in the input_sequence, relevant only if the sequence length is odd.

actions:
  - name: parse_input
    description: Convert the multi-line input string into a list of integers.
  - name: iterate_in_pairs
    description: Process the input_sequence by taking elements two at a time (index 0 & 1, index 2 & 3, etc.).
  - name: swap_pair
    description: Reverse the order of the two elements within a number_pair.
  - name: append_to_output
    description: Add the processed pair (swapped) or the single last_element to the output_sequence.
  - name: handle_odd_length
    description: If the input_sequence has an odd number of elements, append the last_element directly to the output_sequence after processing all pairs.
  - name: format_output
    description: Convert the output_sequence back into a multi-line string, one number per line.

relationships:
  - type: transformation
    from: input_sequence
    to: output_sequence
    rule: Elements are reordered by swapping adjacent pairs.
  - type: correspondence
    description: The element at input index `2k` moves to output index `2k+1`.
  - type: correspondence
    description: The element at input index `2k+1` moves to output index `2k`.
  - type: condition
    description: If the length of input_sequence is odd, the element at the last index `n-1` remains at the relative end position in the output_sequence.