{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\n\n\"\"\"\nFill '0' cells downwards within each column based on the nearest non-zero value above them.\n\n1. Initialize the output grid as a copy of the input grid.\n2. Iterate through each column of the grid.\n3. Within each column, iterate through the rows from top to bottom.\n4. Maintain the last seen non-zero value for the current column.\n5. If the current cell in the input grid is non-zero, update the last seen non-zero value.\n6. If the current cell in the input grid is zero and a non-zero value has been seen above it in the same column, set the corresponding cell in the output grid to the last seen non-zero value.\n\"\"\"\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Transforms the input grid by filling zero cells downwards in each column\n    with the value of the nearest non-zero cell above them in that column.\n    \"\"\"\n    # Get grid dimensions\n    if not input_grid:\n        return []\n    rows = len(input_grid)\n    if rows == 0:\n        return [[]]\n    cols = len(input_grid[0])\n\n    # Initialize output_grid as a deep copy of the input grid\n    output_grid = copy.deepcopy(input_grid)\n\n    # Iterate through each column\n    for c in range(cols):\n        # Keep track of the last non-zero value encountered in this column\n        last_non_zero_value = 0\n        # Iterate through each row in the current column\n        for r in range(rows):\n            # Check the value in the original input grid\n            current_input_value = input_grid[r][c]\n\n            if current_input_value != 0:\n                # If the current cell is non-zero, update the last seen non-zero value\n                last_non_zero_value = current_input_value\n            elif last_non_zero_value != 0:\n                # If the current cell is zero AND we have seen a non-zero value above it,\n                # update the corresponding cell in the output grid\n                output_grid[r][c] = last_non_zero_value\n\n    # Return the transformed grid\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1249,
    "candidates_token_count": 752,
    "total_token_count": 2001,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 7.046889,
  "retries": 1
}