{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nIdentifies all distinct non-background colors present in the input grid. For each distinct \nnon-background color, calculates its total count (number of pixels of that color). \nDetermines the maximum count found among these colors. Identifies all non-background \ncolor(s) that have this maximum count (target colors). Initializes an output grid with \nthe same dimensions as the input grid, filled entirely with the background color (black, 0). \nIterates through each pixel coordinate (row, column) of the input grid. If the color of \nthe input pixel at the current coordinate is one of the target colors, sets the color of \nthe pixel at the corresponding coordinate in the output grid to this target color. Otherwise, \nthe corresponding output pixel remains the background color. The final state of the output \ngrid is the result.\n\"\"\"\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Transforms the input grid by retaining only the pixels corresponding to the\n    non-background color(s) that appear most frequently (highest total pixel count).\n\n    Args:\n        input_grid: A list of lists representing the input grid.\n\n    Returns:\n        A list of lists representing the output grid containing only the pixels\n        of the most frequent non-background color(s).\n    \"\"\"\n    # Convert input grid to a numpy array for efficient array operations\n    input_array = np.array(input_grid, dtype=int)\n    rows, cols = input_array.shape\n\n    # Define the background color (assumed to be 0)\n    background_color = 0\n\n    # Initialize the output grid with the same dimensions as the input,\n    # filled entirely with the background color.\n    output_array = np.full((rows, cols), background_color, dtype=int)\n\n    # --- Step 1 & 2: Calculate Color Frequencies for non-background pixels ---\n    # Select only the pixels that are not the background color\n    non_background_pixels = input_array[input_array != background_color]\n\n    # Edge case: If there are no non-background pixels, return the empty grid\n    if non_background_pixels.size == 0:\n        return output_array.tolist()\n\n    # Use collections.Counter to count occurrences of each color value\n    color_counts = Counter(non_background_pixels)\n\n    # --- Step 3: Determine the maximum count ---\n    # Find the highest frequency count among the non-background colors\n    # Check if color_counts is not empty (handles case if somehow non_background_pixels was empty despite size > 0)\n    max_count = 0\n    if color_counts:\n        max_count = max(color_counts.values())\n\n    # --- Step 4: Identify Target Color(s) ---\n    # Create a set of all colors that have the maximum count\n    # This handles potential ties for the most frequent color\n    target_colors = {color for color, count in color_counts.items() if count == max_count}\n\n    # --- Step 5 & 6 & 7 & 8: Filter Pixels ---\n    # Iterate through each pixel coordinate of the input grid\n    for r in range(rows):\n        for c in range(cols):\n            # Get the color of the pixel at the current coordinate\n            pixel_color = input_array[r, c]\n            # Check if this color is one of the identified target colors\n            if pixel_color in target_colors:\n                # If it's a target color, copy it to the output grid at the same coordinate\n                output_array[r, c] = pixel_color\n            # No 'else' needed because the output grid is already filled with the background color\n\n    # --- Step 9: Return the result ---\n    # Convert the output numpy array back to the required list of lists format\n    output_grid = output_array.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 15541,
    "candidates_token_count": 1051,
    "total_token_count": 16592,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 8.15869,
  "retries": 1
}