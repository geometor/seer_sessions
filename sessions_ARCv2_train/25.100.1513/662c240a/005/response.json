{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nCalculates the total count of pixels for each distinct non-background color present in the \ninput grid. Identifies the color(s) that have the maximum total pixel count. These are the \n\"target colors\". Initializes an output grid with the same dimensions as the input grid, \nfilled entirely with the background color (black, 0). Iterates through each pixel of the \ninput grid. If the color of the input pixel at a given coordinate is one of the target \ncolors, copies this color to the corresponding coordinate in the output grid. Otherwise, \nthe corresponding output pixel remains the background color. The final state of the \noutput grid is the result.\n\"\"\"\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Transforms the input grid by keeping only the pixels of the non-background color(s)\n    that appear most frequently (highest total pixel count).\n\n    Args:\n        input_grid: A list of lists representing the input grid.\n\n    Returns:\n        A list of lists representing the output grid containing only the pixels\n        of the most frequent non-background color(s).\n    \"\"\"\n    # Convert input grid to numpy array for efficient processing\n    input_array = np.array(input_grid, dtype=int)\n    rows, cols = input_array.shape\n\n    # Define the background color (conventionally 0)\n    background_color = 0\n\n    # Initialize the output grid with the background color\n    output_array = np.full((rows, cols), background_color, dtype=int)\n\n    # Select all pixels that are not the background color\n    non_background_pixels = input_array[input_array != background_color]\n\n    # Handle the edge case where the grid contains only background pixels\n    if non_background_pixels.size == 0:\n        # Return the grid filled with background color\n        return output_array.tolist()\n\n    # Count the occurrences of each non-background color\n    # Counter is efficient for this {color: count} mapping\n    color_counts = Counter(non_background_pixels)\n\n    # Find the maximum count among the non-background colors\n    # Check if color_counts is not empty before finding max\n    max_count = 0\n    if color_counts:\n        max_count = max(color_counts.values())\n\n    # Identify all colors that achieved this maximum count (handles ties)\n    # These are the colors we want to keep in the output\n    target_colors = {color for color, count in color_counts.items() if count == max_count}\n\n    # Iterate through the input grid coordinates\n    for r in range(rows):\n        for c in range(cols):\n            # Get the color of the current pixel in the input grid\n            pixel_color = input_array[r, c]\n            # Check if this pixel's color is one of the target colors\n            if pixel_color in target_colors:\n                # If it is a target color, copy it to the output grid\n                output_array[r, c] = pixel_color\n            # Otherwise, the output grid pixel remains the background color (already initialized)\n\n    # Convert the final output numpy array back to a list of lists format\n    output_grid = output_array.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 13362,
    "candidates_token_count": 1102,
    "total_token_count": 14464,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 8.712019,
  "retries": 1
}