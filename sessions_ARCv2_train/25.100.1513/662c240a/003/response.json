{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nCalculates the total count of pixels for each distinct non-background color in the input grid.\nIdentifies the color(s) with the maximum total pixel count (target color(s)). Initializes an \noutput grid of the same dimensions as the input, filled with the background color (black, 0). \nCopies only the pixels from the input grid whose color matches the target color(s) to the \noutput grid at their original locations.\n\"\"\"\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Transforms the input grid by keeping only the pixels of the color(s) that\n    appear most frequently (highest total pixel count) among non-background colors.\n\n    Args:\n        input_grid: A list of lists representing the input grid.\n\n    Returns:\n        A list of lists representing the output grid containing only the pixels\n        of the most frequent non-background color(s).\n    \"\"\"\n    # Convert input grid to numpy array for efficient processing\n    input_array = np.array(input_grid, dtype=int)\n    rows, cols = input_array.shape\n\n    # Define the background color\n    background_color = 0\n\n    # Initialize the output grid with the background color\n    output_array = np.full((rows, cols), background_color, dtype=int)\n\n    # Find all non-background pixels\n    non_background_pixels = input_array[input_array != background_color]\n\n    # Handle the edge case where the grid might only contain background pixels\n    if non_background_pixels.size == 0:\n        # If there are no non-background pixels, return the empty background grid\n        return output_array.tolist()\n\n    # Count the occurrences of each non-background color\n    color_counts = Counter(non_background_pixels)\n\n    # Find the maximum count\n    max_count = 0\n    if color_counts: # Check if color_counts is not empty\n        max_count = max(color_counts.values())\n\n    # Identify all colors that have the maximum count (handling ties)\n    target_colors = {color for color, count in color_counts.items() if count == max_count}\n\n    # Create a boolean mask for pixels in the input array that match any target color\n    # We iterate through target colors and combine masks using logical OR\n    # Start with a mask of all False\n    combined_mask = np.zeros_like(input_array, dtype=bool)\n    for color in target_colors:\n        combined_mask |= (input_array == color)\n\n    # Apply the combined mask: where the mask is True, copy the color from the\n    # input array to the output array\n    output_array[combined_mask] = input_array[combined_mask]\n\n    # Convert the output numpy array back to a list of lists\n    output_grid = output_array.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7944,
    "candidates_token_count": 1063,
    "total_token_count": 9007,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 7.869435,
  "retries": 1
}