{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by propagating the last seen non-zero value downwards within each column.\n1.  Creates a copy of the input grid to serve as the output grid.\n2.  Iterates through each column of the grid.\n3.  Within each column, iterates through the rows from top to bottom.\n4.  Keeps track of the 'last_non_zero_value' encountered in the current column.\n5.  If a cell in the input grid contains a non-zero value, updates 'last_non_zero_value'.\n6.  If a cell in the input grid contains zero and 'last_non_zero_value' is non-zero, \n    sets the corresponding cell in the output grid to 'last_non_zero_value'.\n7.  Returns the modified output grid.\n\"\"\"\n\nimport copy\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies the downward propagation transformation to the input grid.\n\n    Args:\n        input_grid: A list of lists representing the 2D integer grid.\n\n    Returns:\n        A new list of lists representing the transformed grid.\n    \"\"\"\n    # Ensure the input is not empty\n    if not input_grid or not input_grid[0]:\n        return []\n\n    # Get grid dimensions\n    height = len(input_grid)\n    width = len(input_grid[0])\n\n    # Initialize output_grid as a deep copy of the input grid\n    # This preserves original non-zero values and provides a canvas to modify zeros\n    output_grid = copy.deepcopy(input_grid)\n\n    # Iterate through each column\n    for c in range(width):\n        # Initialize the last non-zero value seen in this column\n        last_non_zero_value = 0\n        # Iterate through each row in the current column, from top to bottom\n        for r in range(height):\n            # Get the value from the original input grid for checking\n            input_value = input_grid[r][c]\n\n            # Check if the current cell in the input grid is non-zero\n            if input_value != 0:\n                # Update the last non-zero value seen in this column\n                last_non_zero_value = input_value\n            # Else, if the current cell in the input grid is zero AND we have seen a non-zero value above it\n            elif last_non_zero_value != 0:\n                # Update the corresponding cell in the output grid with the last non-zero value\n                output_grid[r][c] = last_non_zero_value\n\n    # Return the transformed grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1351,
    "candidates_token_count": 865,
    "total_token_count": 2216,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 7.8823,
  "retries": 1
}