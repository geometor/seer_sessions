{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\n\n\"\"\"\nTransforms a grid by propagating non-zero values downwards within each column. \nIf a cell contains 0 (background) and the cell directly above it (or any cell further up in the same column, with only 0s in between) contains a non-zero value, the 0 is replaced by that non-zero value. This process repeats downwards within each column independently.\n\"\"\"\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies downward propagation of non-zero values in each column of the grid.\n\n    Args:\n        input_grid: A 2D list of integers representing the input grid.\n\n    Returns:\n        A 2D list of integers representing the transformed grid.\n    \"\"\"\n    # Ensure input is not empty\n    if not input_grid or not input_grid[0]:\n        return []\n\n    # Get grid dimensions\n    num_rows = len(input_grid)\n    num_cols = len(input_grid[0])\n\n    # Initialize output_grid as a deep copy of the input grid\n    # We modify this grid based on the input grid's state\n    output_grid = copy.deepcopy(input_grid)\n\n    # Iterate through each column independently\n    for col_idx in range(num_cols):\n        # Keep track of the last non-zero color encountered in this column\n        last_color = 0\n        # Iterate through each row in the current column from top to bottom\n        for row_idx in range(num_rows):\n            # Get the value from the *original* input grid for decision making\n            current_input_value = input_grid[row_idx][col_idx]\n\n            # If the current cell in the input grid has a non-zero value (a color)\n            if current_input_value != 0:\n                # Update the last seen color for this column\n                last_color = current_input_value\n                # The output grid already has this value from the deepcopy\n            # If the current cell in the input grid is zero (background)\n            # AND we have seen a non-zero color above it in this column\n            elif current_input_value == 0 and last_color != 0:\n                # Set the corresponding cell in the output grid to the last seen color\n                output_grid[row_idx][col_idx] = last_color\n            # If the current cell is 0 and last_color is also 0 (start of column or only 0s above)\n            # The output grid cell remains 0 (already set by deepcopy)\n\n    # Return the modified grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1257,
    "candidates_token_count": 904,
    "total_token_count": 2161,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 8.884188,
  "retries": 1
}