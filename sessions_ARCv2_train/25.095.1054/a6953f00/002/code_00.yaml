objects:
  - name: input_grid
    type: grid  # Potentially a NumPy array based on runtime errors
    properties:
      - elements: integers
      - rows: variable number (R), R >= 2
      - columns: variable number (C), C >= 2
  - name: output_grid
    type: grid # Potentially a NumPy array
    properties:
      - elements: integers
      - rows: fixed number (2)
      - columns: fixed number (2)

relationships:
  - type: derivation
    from: input_grid
    to: output_grid
    details: output_grid is a 2x2 subgrid extracted from the top two rows of input_grid. The specific columns depend on the parity of the input_grid's column count.

actions:
  - name: determine_input_shape
    input: input_grid
    output: number_of_rows (R), number_of_columns (C)
    # Note: Need robust way to get shape, compatible with list or NumPy array.
    # If NumPy: input_grid.shape
    # If list: len(input_grid), len(input_grid[0])
  - name: check_column_parity
    input: number_of_columns (C)
    output: parity (even or odd)
  - name: extract_subgrid
    input: input_grid, parity, C
    output: output_grid
    logic: |
      If parity is 'odd':
        Extract the subgrid from rows 0-1 and columns 0-1.
        Requires R >= 2 and C >= 2.
        Output = input_grid[0:2, 0:2] # NumPy slicing syntax
               # or [[input[0][0], input[0][1]], [input[1][0], input[1][1]]] # List slicing
      If parity is 'even':
        Extract the subgrid from rows 0-1 and columns C-2 to C-1.
        Requires R >= 2 and C >= 2.
        Output = input_grid[0:2, C-2:C] # NumPy slicing syntax
               # or [[input[0][C-2], input[0][C-1]], [input[1][C-2], input[1][C-1]]] # List slicing

potential_issues:
  - type: type_handling
    details: The initial code assumed list-of-lists input, but runtime errors suggest NumPy arrays. Emptiness checks and potentially indexing/slicing need to be compatible with NumPy arrays. Specifically, `if not input_grid:` is problematic for NumPy arrays. Use `input_grid.size == 0` or check dimensions directly.