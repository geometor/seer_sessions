Task: Reorder sequence elements by swapping the first and last pairs.

Objects:
  - InputSequence:
      type: List[int]
      description: A vertical sequence of single-digit integers.
  - OutputSequence:
      type: List[int]
      description: A vertical sequence of single-digit integers derived from the input.
  - Element:
      type: int
      description: A single-digit integer within the sequence.
  - FirstPair:
      type: Tuple[int, int]
      description: The elements at index 0 and index 1.
      condition: Only exists if InputSequence.length >= 2.
  - LastPair:
      type: Tuple[int, int]
      description: The elements at index n-2 and index n-1, where n is the sequence length.
      condition: Only exists if InputSequence.length >= 2.
  - MiddleElement:
      type: int
      description: The element at index n // 2.
      condition: Only relevant if InputSequence.length is odd and >= 3.

Properties:
  - InputSequence.length: The number of elements in the input (n).
  - OutputSequence.length: The number of elements in the output.
  - Relationship: InputSequence.length == OutputSequence.length
  - Relationship: The multiset of elements in InputSequence is the same as the multiset of elements in OutputSequence.

Actions:
  - IdentifyPairs: Determine the FirstPair and LastPair based on sequence length.
  - SwapFirst: Exchange the positions of the elements in the FirstPair.
  - SwapLast: Exchange the positions of the elements in the LastPair.

Relationships:
  - The OutputSequence is generated by applying swaps to specific pairs in the InputSequence.
  - If n >= 2, the SwapFirst action is applied to the elements at indices 0 and 1.
  - If n >= 4, the SwapLast action is applied to the elements at indices n-2 and n-1. (Note: If n=2 or n=3, SwapLast doesn't apply independently or swaps the same as SwapFirst/doesn't apply).
  - If n is odd and >= 3, the MiddleElement at index n // 2 remains in its position relative to these swaps.