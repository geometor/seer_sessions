Task: Grid value propagation from multiple seed locations

Objects:
  - Input_Grid:
      Type: 2D integer array
      Contains: Background value (0), Seed value (7)
      Structure: Primarily background values with one or more occurrences of the seed value.
  - Output_Grid:
      Type: 2D integer array
      Dimensions: Same as Input_Grid
      Contains: Background value (0), Propagation values (7, 8)
      Structure: A pattern of alternating propagation values expanding outwards from all initial seed locations.
  - Seed_Cells:
      Identification: All cells in the Input_Grid containing the Seed value (7).
      Properties: Set of (Row index, Column index) tuples. Value (7).
  - Propagation_Pattern:
      Values: Alternating sequence (7, 8, 7, 8, ...) based on the value of the source cell.
      Mechanism: Spreads outwards orthogonally (up, down, left, right) simultaneously from all Seed_Cells via Breadth-First Search (BFS).

Relationships:
  - Origin: The Propagation_Pattern in the Output_Grid originates from *all* Seed_Cells identified in the Input_Grid.
  - Overwrite: The Propagation_Pattern overwrites the initial background content (0s) of the Output_Grid cells it covers during propagation.
  - Fixed_Seeds: Cells corresponding to the Seed_Cells in the Input_Grid are assigned the value 7 in the Output_Grid and are not overwritten during propagation.
  - Adjacency_Rule: During propagation, orthogonally adjacent cells added to the pattern have alternating values (if the source cell is 7, its newly filled neighbors are 8; if the source is 8, its newly filled neighbors are 7).

Action:
  - Find_Seeds: Locate the row and column of *all* cells containing the Seed value (7) in the Input_Grid.
  - Initialize_Output: Create an Output_Grid of the same size as the Input_Grid, filled with the background value (0).
  - Initialize_Propagation:
      - Initialize a BFS queue.
      - Initialize a `visited` data structure (e.g., set or boolean grid).
      - For each seed cell `(seed_row, seed_col)` found:
          - Set `Output_Grid[seed_row][seed_col]` to 7.
          - Add `(seed_row, seed_col)` to `visited`.
          - Add `(seed_row, seed_col, 7)` to the BFS queue.
  - Propagate:
      - While the BFS queue is not empty:
          - Dequeue `(current_row, current_col, current_value)`.
          - Determine `next_value` (8 if `current_value` is 7, 7 if `current_value` is 8).
          - For each orthogonal neighbor `(neighbor_row, neighbor_col)`:
              - If the neighbor is within bounds and has not been visited:
                  - Set `Output_Grid[neighbor_row][neighbor_col]` to `next_value`.
                  - Mark `(neighbor_row, neighbor_col)` as visited.
                  - Enqueue `(neighbor_row, neighbor_col, next_value)`.
      - Termination: Continue until the BFS queue is empty.