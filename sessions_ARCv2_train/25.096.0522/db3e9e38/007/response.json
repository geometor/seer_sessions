{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid based on a propagation pattern originating from the\ntopmost cell containing the value 7 (the seed). The pattern's extent is\ndetermined by the Manhattan distance between the topmost and bottommost\ncells containing 7 in the input. Within this distance limit, cells in the\noutput grid are assigned values 7 or 8 based on the parity of their\nhorizontal distance (absolute difference in column index) from the seed cell\n(7 for even horizontal distance, 8 for odd). Cells outside this distance\nlimit remain 0.\n\"\"\"\n\nimport numpy as np\nfrom typing import Optional, Tuple, List\n\ndef find_extremal_seeds(grid: np.ndarray) -> Optional[Tuple[Tuple[int, int], Tuple[int, int]]]:\n    \"\"\"\n    Finds the coordinates of the topmost (first encountered) and bottommost\n    (last encountered) cells containing the value 7.\n\n    Args:\n        grid: The input numpy array.\n\n    Returns:\n        A tuple containing two tuples: (topmost_coords, bottommost_coords),\n        or None if no 7 is found.\n    \"\"\"\n    rows, cols = grid.shape\n    seed_coords: Optional[Tuple[int, int]] = None\n    limit_coords: Optional[Tuple[int, int]] = None\n    found_coords: List[Tuple[int, int]] = []\n\n    # Find all '7' coordinates\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == 7:\n                found_coords.append((r, c))\n\n    if not found_coords:\n        return None # No '7' found\n\n    # Topmost is the first one found\n    seed_coords = found_coords[0]\n    # Bottommost is the last one found\n    limit_coords = found_coords[-1]\n\n    return seed_coords, limit_coords\n\ndef manhattan_distance(p1: Tuple[int, int], p2: Tuple[int, int]) -> int:\n    \"\"\"Calculates the Manhattan distance between two points.\"\"\"\n    r1, c1 = p1\n    r2, c2 = p2\n    return abs(r1 - r2) + abs(c1 - c2)\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Applies the distance-limited, column-parity-based value propagation.\n\n    Args:\n        input_grid: The input 2D list of integers.\n\n    Returns:\n        The transformed 2D list of integers.\n    \"\"\"\n    # Convert input to numpy array for easier handling\n    input_array = np.array(input_grid, dtype=int)\n    rows, cols = input_array.shape\n    if rows == 0 or cols == 0:\n        return input_grid # Handle empty grids\n\n    # Initialize output_grid with zeros\n    output_array = np.zeros_like(input_array)\n\n    # Find the coordinates of the topmost and bottommost seeds\n    extremal_seeds = find_extremal_seeds(input_array)\n\n    # If no seeds were found, return the grid of zeros\n    if extremal_seeds is None:\n        return output_array.tolist()\n\n    seed_coords, limit_coords = extremal_seeds\n    seed_row, seed_col = seed_coords\n\n    # Calculate the maximum propagation distance based on the extremal seeds\n    max_dist = manhattan_distance(seed_coords, limit_coords)\n\n    # Iterate through each cell of the grid\n    for r in range(rows):\n        for c in range(cols):\n            # Calculate the Manhattan distance from the current cell to the seed\n            current_coords = (r, c)\n            current_dist = manhattan_distance(seed_coords, current_coords)\n\n            # Check if the cell is within the maximum allowed distance\n            if current_dist <= max_dist:\n                # Calculate the absolute horizontal distance from the seed column\n                col_diff = abs(c - seed_col)\n\n                # Assign 7 for even horizontal distance, 8 for odd horizontal distance\n                if col_diff % 2 == 0:\n                    output_array[r, c] = 7\n                else:\n                    output_array[r, c] = 8\n            # Cells outside max_dist remain 0 (already initialized)\n\n    # Convert the result back to a list of lists\n    return output_array.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 10511,
    "candidates_token_count": 1326,
    "total_token_count": 11837,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.797416,
  "retries": 1
}