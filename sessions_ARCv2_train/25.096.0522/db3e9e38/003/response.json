{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by identifying all cells containing '7' as seeds.\nThese seed cells are marked as '7' in the output grid. A Breadth-First\nSearch (BFS) propagates outwards from all seeds simultaneously. Orthogonal\nneighbors of '7' cells are marked '8', and neighbors of '8' cells are\nmarked '7'. The propagation only affects cells not yet visited, starting\nfrom an initial grid of zeros.\n\"\"\"\n\nimport collections\n\ndef find_all_seeds(grid: list[list[int]]) -> list[tuple[int, int]]:\n    \"\"\"Finds the coordinates (row, col) of all '7's in the grid.\"\"\"\n    seeds = []\n    rows = len(grid)\n    if rows == 0:\n        return seeds\n    cols = len(grid[0])\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r][c] == 7:\n                seeds.append((r, c))\n    return seeds\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Performs the BFS propagation transformation from all seed locations.\n\n    Args:\n        input_grid: The input 2D list of integers.\n\n    Returns:\n        The transformed 2D list of integers.\n    \"\"\"\n    # Get grid dimensions\n    rows = len(input_grid)\n    if rows == 0:\n        return []\n    cols = len(input_grid[0])\n    if cols == 0:\n         return [[] for _ in range(rows)] # Return grid of empty rows if cols is 0\n\n    # Initialize output_grid with zeros\n    output_grid = [[0 for _ in range(cols)] for _ in range(rows)]\n\n    # Find all seed locations ('7's in the input)\n    seed_locations = find_all_seeds(input_grid)\n\n    # If no seeds are found, return the initialized grid\n    if not seed_locations:\n        return output_grid\n\n    # Initialize BFS queue and visited set\n    # The queue stores tuples of (row, col, value)\n    queue = collections.deque()\n    visited = set()\n\n    # Initialize the BFS with all seed locations\n    for r, c in seed_locations:\n        start_value = 7\n        if (r, c) not in visited: # Ensure seeds aren't added multiple times if input has duplicates? (Unlikely based on examples, but safe)\n            output_grid[r][c] = start_value\n            queue.append((r, c, start_value))\n            visited.add((r, c))\n\n    # Perform BFS propagation\n    while queue:\n        current_row, current_col, current_value = queue.popleft()\n\n        # Determine the value for neighbors (alternating 7 and 8)\n        next_value = 8 if current_value == 7 else 7\n\n        # Define orthogonal neighbor directions (up, down, left, right)\n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n        # Explore neighbors\n        for dr, dc in directions:\n            neighbor_row, neighbor_col = current_row + dr, current_col + dc\n\n            # Check if the neighbor is within grid bounds\n            if 0 <= neighbor_row < rows and 0 <= neighbor_col < cols:\n                # Check if the neighbor has not been visited\n                if (neighbor_row, neighbor_col) not in visited:\n                    # Update the output grid with the next value\n                    output_grid[neighbor_row][neighbor_col] = next_value\n                    # Mark the neighbor as visited\n                    visited.add((neighbor_row, neighbor_col))\n                    # Add the neighbor to the queue for further exploration\n                    queue.append((neighbor_row, neighbor_col, next_value))\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7760,
    "candidates_token_count": 1448,
    "total_token_count": 9208,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.239826,
  "retries": 1
}