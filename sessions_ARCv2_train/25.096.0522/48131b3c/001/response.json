{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport copy # Although numpy handles copies well, explicit copy might be clearer in some steps if not using numpy\n\n\"\"\"\n1. Analyze Input: Receive the input grid I (size N x N). Identify the unique non-zero digit d present in the grid.\n2. Initialize Pattern: Create a new empty grid P of the same dimensions as the input grid (N x N).\n3. Process First Two Rows:\n    * Copy row 1 of the input grid I to row 0 of the pattern grid P.\n    * Copy row 0 of the input grid I to row 1 of the pattern grid P.\n4. Process Remaining Rows: For each row index i from 2 up to N-1:\n    * For each column index j from 0 up to N-1:\n        * Examine the element I[i, j] in the input grid.\n        * If I[i, j] is 0, set the corresponding element P[i, j] in the pattern grid to the non-zero digit d.\n        * If I[i, j] is d, set the corresponding element P[i, j] in the pattern grid to 0.\n5. Construct Output: Create the output grid (size 2N x 2N) by tiling the completed pattern grid P in a 2x2 arrangement. Place P in the top-left, top-right, bottom-left, and bottom-right quadrants of the output grid.\n6. Return Output: Return the constructed 2N x 2N output grid.\n\"\"\"\n\ndef _find_non_zero_digit(grid: np.ndarray) -> int:\n    \"\"\"Finds the unique non-zero digit in the grid.\"\"\"\n    for row in grid:\n        for element in row:\n            if element != 0:\n                return element\n    # Should not happen based on problem description, but good practice\n    raise ValueError(\"No non-zero digit found in the input grid.\")\n\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Transforms an input grid according to the specified rules:\n    - Swaps the first two rows.\n    - Inverts digits (0 <-> non-zero) for rows from index 2 onwards.\n    - Tiles the resulting pattern grid 2x2 to create the output grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_array = np.array(input_grid, dtype=int)\n    n = input_array.shape[0]\n\n    # 1. Analyze Input: Identify the non-zero digit 'd'\n    non_zero_digit = _find_non_zero_digit(input_array)\n\n    # 2. Initialize Pattern grid P\n    pattern_grid = np.zeros_like(input_array)\n\n    # 3. Process First Two Rows (swap row 0 and row 1)\n    if n >= 1:\n        pattern_grid[0, :] = input_array[1, :]\n    if n >= 2:\n        pattern_grid[1, :] = input_array[0, :]\n\n    # 4. Process Remaining Rows (index 2 to N-1)\n    if n > 2:\n        for r in range(2, n):\n            for c in range(n):\n                if input_array[r, c] == 0:\n                    pattern_grid[r, c] = non_zero_digit\n                else: # it must be the non_zero_digit\n                    pattern_grid[r, c] = 0\n\n    # 5. Construct Output grid by tiling the pattern grid 2x2\n    # Initialize output grid with size 2N x 2N\n    output_n = 2 * n\n    output_grid_np = np.zeros((output_n, output_n), dtype=int)\n\n    # Tile the pattern_grid\n    # Top-left quadrant\n    output_grid_np[0:n, 0:n] = pattern_grid\n    # Top-right quadrant\n    output_grid_np[0:n, n:output_n] = pattern_grid\n    # Bottom-left quadrant\n    output_grid_np[n:output_n, 0:n] = pattern_grid\n    # Bottom-right quadrant\n    output_grid_np[n:output_n, n:output_n] = pattern_grid\n\n    # Alternatively using np.tile:\n    # output_grid_np = np.tile(pattern_grid, (2, 2))\n\n    # 6. Return Output grid as list of lists\n    output_grid = output_grid_np.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1890,
    "candidates_token_count": 1378,
    "total_token_count": 3268,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.986723,
  "retries": 1
}