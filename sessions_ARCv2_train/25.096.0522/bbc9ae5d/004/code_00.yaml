Objects:
  - Input_String:
      type: str
      description: A single string containing space-separated single digits.
  - Input_Sequence:
      type: List[int]
      description: A sequence of integers derived by parsing the Input_String.
  - Output_Sequence_List:
      type: List[List[int]]
      description: A list containing multiple sequences of digits (as lists of integers), representing the initial state and subsequent transformed states.
  - Output_String_List:
      type: List[str]
      description: The final output, where each sequence from Output_Sequence_List is formatted back into a space-separated string.

Properties:
  - dominant_digit (d):
      type: int
      description: The non-zero digit found at the beginning of the Input_Sequence.
  - initial_non_zero_count (N):
      type: int
      description: The number of times 'd' appears consecutively at the start of the Input_Sequence.
  - zero_count (Z):
      type: int
      description: The total number of zeros in the Input_Sequence.
  - total_length (L):
      type: int
      description: The total number of digits in the Input_Sequence (L = N + Z).
  - transformation_steps (C):
      type: int
      description: >
        The number of zeros to replace with the dominant_digit.
        Calculated based on N, Z, and L. It also equals the number of output lines minus one.

Relationships:
  - L = N + Z (based on typical input structure)
  - Calculation of C:
    - IF N > Z THEN C = Z
    - ELSE (N <= Z) THEN C = (L // 2) - 1  (integer division for floor)
    - C = max(0, min(C, Z)) # Ensure C is non-negative and doesn't exceed available zeros.
  - Output_Sequence_List[0] == Input_Sequence
  - For i from 1 to C:
      Output_Sequence_List[i] is derived from Output_Sequence_List[i-1] by changing the digit at index (N + i - 1) from 0 to 'd'.

Actions:
  - Parse: Convert the Input_String into Input_Sequence.
  - Analyze: Determine 'd', 'N', 'Z', 'L' from Input_Sequence.
  - Calculate_Steps: Compute 'C' using the conditional logic based on N, Z, L.
  - Generate_States:
    - Initialize Output_Sequence_List with Input_Sequence.
    - Create a working copy of Input_Sequence.
    - Iterate 'C' times (from step index `i = 0` to `C-1`):
      - Calculate modification index: `idx = N + i`.
      - Check if `idx` is within bounds (`idx < L`) and if the element at `idx` in the working copy is 0.
      - If checks pass, change the digit at `idx` in the working copy to 'd'.
      - Append a *new copy* of the modified working sequence to Output_Sequence_List.
      - If checks fail, stop iteration early.
  - Format_Output: Convert each sequence in Output_Sequence_List into a space-separated string and collect them into Output_String_List.