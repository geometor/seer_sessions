Objects:
  - Input_String:
      type: str
      description: A single string containing space-separated single digits.
  - Input_Sequence:
      type: List[int]
      description: A sequence of single digits derived by parsing the Input_String. It starts with N instances of a non-zero digit 'd', followed by Z zeros.
  - Output_Collection:
      type: List[List[int]]
      description: A list containing multiple sequences of digits (as lists of integers), representing the state at each step of the transformation.
  - Output_Strings:
      type: List[str]
      description: The final output, where each sequence in Output_Collection is formatted back into a space-separated string.

Properties:
  - dominant_digit (d):
      type: int
      description: The non-zero digit present at the beginning of the Input_Sequence.
  - initial_non_zero_count (N):
      type: int
      description: The number of occurrences of 'd' at the start of the Input_Sequence.
  - zero_count (Z):
      type: int
      description: The number of zeros in the Input_Sequence.
  - total_length (L):
      type: int
      description: The total number of digits in the Input_Sequence (L = N + Z).
  - transformation_steps (C):
      type: int
      description: The number of zeros that will be replaced by 'd'. Calculated based on N, Z, and L.
  - target_non_zero_count (target_N):
      type: int
      description: The final count of 'd' digits in the last sequence of Output_Collection. (target_N = N + C).

Relationships:
  - L = N + Z
  - Calculation of C:
      - if N > Z:
          C = Z
      - if N <= Z:
          C = (L // 2) + N - 1 - N  # simplified: C = (L // 2) - 1
          # Alternatively: target_N = (L // 2) + N - 1; C = target_N - N
  - C = max(0, min(C, Z)) # Ensure C is non-negative and doesn't exceed available zeros.
  - Output_Collection[0] == Input_Sequence
  - For i from 1 to C:
      Output_Collection[i] is derived from Output_Collection[i-1] by changing the digit at index (N + i - 1) from 0 to 'd'.
  - len(Output_Collection) == C + 1

Actions:
  - Parse: Convert the Input_String into Input_Sequence (list of integers).
  - Identify: Determine 'd', 'N', 'Z', 'L' from Input_Sequence.
  - Calculate_Steps: Compute 'C' using the conditional logic based on N, Z, L.
  - Generate_Transformations:
    - Initialize Output_Collection with a copy of Input_Sequence.
    - Create a working copy of Input_Sequence.
    - Iterate 'C' times (from step `i = 0` to `C-1`):
      - Modify the working copy by changing the digit at index (N + i) from 0 to 'd'.
      - Append a copy of the modified working copy to Output_Collection.
  - Format_Output: Convert each sequence in Output_Collection into a space-separated string and collect them into Output_Strings.