Objects:
  - Input_Data:
      type: Union[str, List[int], List[str]]
      description: Input sequence, potentially as a space-separated string or a pre-parsed list.
  - Input_Sequence:
      type: List[int]
      description: The sequence of digits derived from Input_Data, used for processing.
  - Output_Sequences:
      type: List[List[int]]
      description: A list storing the initial sequence and all transformed sequences as lists of integers.
  - Formatted_Output:
      type: List[str]
      description: The final output, where each sequence from Output_Sequences is formatted as a space-separated string.

Properties:
  - dominant_digit (d):
      type: int
      description: The non-zero digit present at the beginning of Input_Sequence.
  - initial_non_zero_count (N):
      type: int
      description: The number of occurrences of 'd' at the start of Input_Sequence.
  - zero_count (Z):
      type: int
      description: The total number of zeros in Input_Sequence.
  - total_length (L):
      type: int
      description: The total number of digits in Input_Sequence (L = N + Z).
  - transformation_steps (C):
      type: int
      description: The number of zeros to replace. Calculated based on N, Z, L.

Relationships:
  - L = N + Z (typically holds true for valid inputs)
  - Calculation of C:
    - if N > Z: C = Z
    - if N <= Z: C = (L // 2) - 1
  - Constraints on C: C = max(0, min(C, Z)) # Ensure C is non-negative and doesn't exceed available zeros.
  - Output_Sequences[0] == Input_Sequence
  - For i from 1 to C:
      Output_Sequences[i] is derived from a copy of Output_Sequences[i-1] by changing the digit at index (N + i - 1) from 0 to 'd'.

Actions:
  - Input_Normalization:
      description: Check the type of Input_Data. If it's a string, parse it into Input_Sequence (List[int]). If it's a list, use it directly (ensure elements are integers). Handle potential errors.
  - Analyze: Determine 'd', 'N', 'Z', 'L' from Input_Sequence.
  - Calculate_Steps: Compute 'C' using the conditional logic based on N, Z, L, applying constraints.
  - Generate_Transformations:
    - Initialize Output_Sequences with a copy of Input_Sequence.
    - Create a working copy of Input_Sequence.
    - Iterate 'C' times (from step index `i = 0` to `C-1`):
      - Calculate the target index: `idx = N + i`.
      - If `idx` is valid and `working_copy[idx]` is 0:
          - Modify `working_copy[idx]` to 'd'.
          - Append a new copy of `working_copy` to Output_Sequences.
      - Else (index invalid or not zero), break the loop.
  - Format_Output: Convert each sequence in Output_Sequences into a space-separated string for Formatted_Output.