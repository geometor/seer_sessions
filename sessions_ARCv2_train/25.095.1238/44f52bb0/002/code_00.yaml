task_elements:
  - object: input_grid
    properties:
      - type: numpy.ndarray # Updated based on execution error
      - dimensions: 3x3
      - cell_values: [0, 2]
      - dtype: int
  - object: output_value
    properties:
      - type: integer
      - possible_values: [1, 7]
  - object: pattern
    properties:
      - formed_by: cells with value 2 in the input_grid
      - evaluated_property: symmetry
      - types_of_symmetry_checked:
          - horizontal (reflection across the middle row)
          - vertical (reflection across the middle column)
          - point (180-degree rotation)
          - main_diagonal (reflection across top-left to bottom-right diagonal)
          - anti_diagonal (reflection across top-right to bottom-left diagonal)
relationships:
  - determines: The presence of any checked symmetry in the pattern of '2's within the input_grid determines the output_value.
actions:
  - identify: Treat the input_grid as a NumPy array.
  - analyze: Check the pattern formed by the '2' cells for symmetry against the background of '0's.
  - check_symmetry:
      - Test for horizontal symmetry (row 0 equals row 2).
      - Test for vertical symmetry (column 0 equals column 2).
      - Test for point symmetry (grid equals grid rotated 180 degrees).
      - Test for main diagonal symmetry (grid equals its transpose).
      - Test for anti-diagonal symmetry (grid equals its anti-transpose).
  - assign_output:
      - If *any* of the tested symmetries are present, output 1.
      - If *none* of the tested symmetries are present, output 7.