{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\nfrom collections import deque\n\n\"\"\"\nApplies a directional flood fill transformation to a 2D grid.\nThe transformation starts from cells with the value 3 (fill_value).\nThe fill propagates only downwards and horizontally (left/right) into \nadjacent cells containing the value 7 (target_value).\nPropagation is blocked by cells containing the value 8 (barrier_value) \nand the grid boundaries.\nThe fill does not propagate upwards.\nNewly filled cells (7s changed to 3s) can also propagate the fill \ndownwards and horizontally in subsequent steps.\n\"\"\"\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies a directional flood fill (down, left, right) where value 3 \n    propagates into adjacent 7s, stopping at 8s or boundaries.\n\n    Args:\n        input_grid: A 2D list of integers representing the input grid.\n\n    Returns:\n        A 2D list of integers representing the transformed grid.\n    \"\"\"\n    # Handle empty grid case\n    if not input_grid or not input_grid[0]:\n        return []\n\n    rows = len(input_grid)\n    cols = len(input_grid[0])\n\n    # Initialize output_grid as a deep copy of the input grid\n    # This ensures cells not affected by the fill retain their original value\n    output_grid = copy.deepcopy(input_grid)\n\n    # Define the specific values involved in the transformation\n    fill_value = 3\n    target_value = 7\n    barrier_value = 8 # Implicitly handled as they don't match target_value\n\n    # Initialize a queue for BFS (Breadth-First Search) propagation\n    # Store coordinates (row, col) of cells to process\n    queue = deque()\n\n    # Find initial fill cells (value 3) in the input grid \n    # and add their coordinates to the queue to start the process\n    for r in range(rows):\n        for c in range(cols):\n            if input_grid[r][c] == fill_value:\n                queue.append((r, c))\n\n    # Define neighbor directions: down, left, right (excluding up)\n    # (dr, dc): (1, 0) = down, (0, -1) = left, (0, 1) = right\n    directions = [(1, 0), (0, -1), (0, 1)]\n\n    # Keep track of target cells that have been processed (added to queue)\n    # to prevent infinite loops in case of cycles (though less likely with directional fill)\n    processed_target_cells = set() \n\n    # Add initial 3 locations to processed set to avoid reprocessing them if adjacent later\n    # (though they wouldn't be changed anyway)\n    # for r, c in queue:\n    #     processed_target_cells.add((r, c)) \n    # Correction: We only need to track processed *target* cells (7s) that get added to queue. \n    # Initial 3s start the process but aren't targets themselves.\n\n    # Perform the directional flood fill using BFS\n    while queue:\n        # Get the next cell coordinates from the queue\n        r, c = queue.popleft()\n\n        # Explore valid neighbors (down, left, right)\n        for dr, dc in directions:\n            nr, nc = r + dr, c + dc\n\n            # Check if the neighbor is within grid boundaries\n            if 0 <= nr < rows and 0 <= nc < cols:\n                # Check if the neighbor cell in the *current output grid state* \n                # contains the target value (7)\n                # And check if this target cell hasn't already been processed (added to queue)\n                if output_grid[nr][nc] == target_value and (nr, nc) not in processed_target_cells:\n                    # Change the target cell to the fill value in the output grid\n                    output_grid[nr][nc] = fill_value\n                    # Add the coordinates of the newly filled cell to the queue \n                    # so its neighbors can be explored\n                    queue.append((nr, nc))\n                    # Mark this target cell as processed to avoid adding it again\n                    processed_target_cells.add((nr, nc))\n                \n                # Note: barrier_value (8) cells implicitly stop propagation\n                # as they don't match target_value.\n                # Cells that are already fill_value (3) also don't match target_value.\n\n    # Return the modified grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 12077,
    "candidates_token_count": 1497,
    "total_token_count": 13574,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.392416,
  "retries": 1
}