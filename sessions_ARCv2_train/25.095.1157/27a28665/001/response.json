{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport collections\n\n\"\"\"\nIdentify all non-zero cells in the 3x3 input grid.\nDetermine the number of distinct connected components formed by these non-zero cells, \nconsidering cells connected only if they are adjacent horizontally or vertically (Von Neumann neighborhood).\nMap the resulting component count to a specific output value based on the observed examples:\n- 1 component -> 6\n- 2 components -> 3\n- 3 components -> 1\n- 5 components -> 2\n\"\"\"\n\ndef _find_neighbors(row: int, col: int, grid_rows: int, grid_cols: int) -> list[tuple[int, int]]:\n    \"\"\"Find valid Von Neumann neighbors within grid bounds.\"\"\"\n    neighbors = []\n    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n        nr, nc = row + dr, col + dc\n        if 0 <= nr < grid_rows and 0 <= nc < grid_cols:\n            neighbors.append((nr, nc))\n    return neighbors\n\ndef transform(input_grid: list[list[int]]) -> int:\n    \"\"\"\n    Transforms the input grid by finding connected components of non-zero cells\n    and mapping the component count to a specific output value.\n    \"\"\"\n    rows = len(input_grid)\n    cols = len(input_grid[0])\n    \n    # 1. Identify all non-zero cells\n    non_zero_cells = set()\n    for r in range(rows):\n        for c in range(cols):\n            if input_grid[r][c] != 0:\n                non_zero_cells.add((r, c))\n\n    # 2. Determine the number of connected components using BFS\n    visited = set()\n    component_count = 0\n    \n    for r, c in non_zero_cells:\n        if (r, c) not in visited:\n            # Start a new BFS for a new component\n            component_count += 1\n            queue = collections.deque([(r, c)])\n            visited.add((r, c))\n            \n            while queue:\n                current_r, current_c = queue.popleft()\n                \n                # Check neighbors\n                for nr, nc in _find_neighbors(current_r, current_c, rows, cols):\n                    if (nr, nc) in non_zero_cells and (nr, nc) not in visited:\n                        visited.add((nr, nc))\n                        queue.append((nr, nc))\n\n    # 3. Map the component count to the output value\n    mapping = {\n        1: 6,\n        2: 3,\n        3: 1,\n        5: 2\n    }\n    \n    # Handle cases where the component count might not be in the mapping\n    # Although based on examples, it should be one of these.\n    # Default to 0 or raise an error if unexpected count occurs.\n    output_value = mapping.get(component_count, 0) \n\n    return output_value\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1806,
    "candidates_token_count": 1034,
    "total_token_count": 2840,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.82331,
  "retries": 1
}