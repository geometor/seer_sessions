task_description: Extract a 2x2 subgrid from the top-left or top-right corner of an input grid based on the parity of the input grid's width, returning the result as a grid structure.
elements:
  - object: input_grid
    properties:
      - type: 2D array of integers (e.g., List[List[int]] or np.ndarray)
      - rows: variable number (R >= 2)
      - columns: variable number (N >= 2)
  - object: output_grid
    properties:
      - type: 2D array of integers (List[List[int]])
      - rows: 2
      - columns: 2
      - source: subgrid extracted from input_grid
actions:
  - action: parse_input
    input: raw input data
    output: input_grid (as List[List[int]] or np.ndarray)
    # Note: This parsing is assumed to happen before the transform function is called.
  - action: determine_grid_dimensions
    input: input_grid
    output: number of rows (R), number of columns (N)
  - action: determine_start_column
    input: number of columns (N)
    logic: >
      If N is even, start_column = N - 2.
      If N is odd, start_column = 0.
    output: start_column_index
  - action: extract_subgrid
    input:
      - input_grid
      - start_column_index
    logic: >
      Select elements from input_grid at rows 0 and 1,
      and columns start_column_index and start_column_index + 1.
    output: 2x2 output_grid (as List[List[int]])
relationships:
  - relationship: dependency
    subject: output_grid
    verb: is derived from
    object: input_grid
  - relationship: conditional_logic
    subject: start_column_index
    verb: depends on
    object: parity of the number of columns (N) in input_grid
  - relationship: positional_extraction
    subject: output_grid
    description: Always uses the first two rows (index 0 and 1) of the input_grid.
  - relationship: output_format
    subject: transform function return value
    description: Must be a nested list of integers (List[List[int]]) representing the 2x2 grid.