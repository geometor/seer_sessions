{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\nfrom collections import deque\n\n\"\"\"\nTransforms a 2D grid of integers based on connected components of non-7 values.\n\nThe transformation logic identifies connected components (using 4-directional adjacency) \nof identical numbers, excluding the number 7 which acts as a background. \nThe transformation applied to each component depends on its original value and its size \n(number of cells).\n\nRules:\n1. Cells with the value 7 remain unchanged.\n2. Isolated non-6 numbers (components of size 1) are changed to 7.\n3. Components of the number 6 are transformed based on their size:\n    - Size 1: Remains 6.\n    - Size 2: Changed to 3.\n    - Size 3: Remains 6.\n    - Size 4: Changed to 1.\n    - Size 5: Changed to 4.\n    - Other sizes (if any occur): Remain 6 (based on observed patterns and default assumption).\n4. Other components (non-6 value, size > 1) retain their original value (though not explicitly seen in examples, this is the default).\n\"\"\"\n\ndef _find_component(start_r: int, start_c: int, grid: list[list[int]], visited: list[list[bool]]) -> tuple[list[tuple[int, int]], int]:\n    \"\"\"\n    Finds a connected component of identical values starting from (start_r, start_c) using BFS.\n    Marks visited cells in the visited grid.\n\n    Args:\n        start_r: Starting row index.\n        start_c: Starting column index.\n        grid: The input grid.\n        visited: A grid tracking visited cells.\n\n    Returns:\n        A tuple containing:\n        - A list of (row, col) tuples representing the cells in the component.\n        - The integer value of the component.\n    \"\"\"\n    rows = len(grid)\n    cols = len(grid[0])\n    component_value = grid[start_r][start_c]\n    component_cells = []\n    q = deque([(start_r, start_c)])\n    visited[start_r][start_c] = True\n\n    while q:\n        r, c = q.popleft()\n        component_cells.append((r, c))\n\n        # Explore neighbors (up, down, left, right)\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n\n            # Check bounds, visited status, and matching value\n            if 0 <= nr < rows and 0 <= nc < cols and \\\n               not visited[nr][nc] and \\\n               grid[nr][nc] == component_value:\n                visited[nr][nc] = True\n                q.append((nr, nc))\n\n    return component_cells, component_value\n\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies the component-based transformation rules to the input grid.\n\n    Args:\n        input_grid: A list of lists representing the input 2D grid of integers.\n\n    Returns:\n        A list of lists representing the transformed 2D grid.\n    \"\"\"\n    if not input_grid or not input_grid[0]:\n        return []\n\n    rows = len(input_grid)\n    cols = len(input_grid[0])\n\n    # Initialize output_grid as a deep copy of the input\n    output_grid = copy.deepcopy(input_grid)\n    # Initialize visited grid to keep track of processed cells\n    visited = [[False for _ in range(cols)] for _ in range(rows)]\n\n    # Iterate through each cell of the input grid\n    for r in range(rows):\n        for c in range(cols):\n            # Skip if cell is background (7) or already part of a processed component\n            if input_grid[r][c] == 7 or visited[r][c]:\n                continue\n\n            # Found an unvisited, non-7 cell: start component search (BFS)\n            component_cells, component_value = _find_component(r, c, input_grid, visited)\n            component_size = len(component_cells)\n\n            # Determine the new value based on the component's value and size\n            new_value = component_value # Default to original value\n\n            if component_value != 6:\n                if component_size == 1:\n                    new_value = 7 # Isolated non-6 becomes 7\n                # else: keep original value (implicit default)\n            elif component_value == 6:\n                if component_size == 1:\n                    new_value = 6\n                elif component_size == 2:\n                    new_value = 3\n                elif component_size == 3:\n                    new_value = 6\n                elif component_size == 4:\n                    new_value = 1\n                elif component_size == 5:\n                    new_value = 4\n                else: # Handles sizes other than 1, 2, 3, 4, 5 for value 6\n                    new_value = 6 # Default for unlisted sizes of 6\n\n            # Update the output grid for all cells in the current component\n            for cell_r, cell_c in component_cells:\n                output_grid[cell_r][cell_c] = new_value\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2317,
    "candidates_token_count": 2300,
    "total_token_count": 4617,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 21.346467,
  "retries": 1
}