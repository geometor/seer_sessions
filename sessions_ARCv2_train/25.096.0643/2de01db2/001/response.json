{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport collections\n\n\"\"\"\nFor each row in the input grid:\n1. Identify the 'primary' non-zero number. This is the non-zero number that appears most frequently in the row.\n2. If there is a tie for the most frequent non-zero number, the smallest value among the tied numbers is chosen as the primary number.\n3. Create a corresponding output row based on the following rules applied to each element of the input row:\n    a. If the element is 0, replace it with the primary number.\n    b. If the element is the primary number, replace it with 0.\n    c. If the element is a non-zero number different from the primary number, replace it with the primary number.\n4. Collect the transformed rows to form the output grid.\n\"\"\"\n\ndef find_primary_number(row: list[int]) -> int | None:\n    \"\"\"\n    Finds the primary non-zero number in a row based on frequency.\n    Handles ties by selecting the smallest value among the most frequent.\n    Returns None if the row contains no non-zero numbers.\n    \"\"\"\n    # Filter out zeros and count frequencies of non-zero numbers\n    non_zero_counts = collections.Counter(num for num in row if num != 0)\n\n    if not non_zero_counts:\n        # Handle rows with only zeros (or empty rows)\n        return None # Or decide on a default behavior if needed\n\n    # Find the maximum frequency\n    max_freq = 0\n    for num in non_zero_counts:\n        if non_zero_counts[num] > max_freq:\n            max_freq = non_zero_counts[num]\n\n    # Find all numbers with the maximum frequency\n    most_frequent_numbers = []\n    for num in non_zero_counts:\n        if non_zero_counts[num] == max_freq:\n            most_frequent_numbers.append(num)\n\n    # Determine the primary number (smallest value in case of a tie)\n    primary_num = min(most_frequent_numbers)\n    \n    return primary_num\n\ndef transform_row(row: list[int], primary_num: int | None) -> list[int]:\n    \"\"\"Transforms a single row based on the primary number.\"\"\"\n    output_row = []\n    # If no primary number was found (e.g., all zeros), return the row unchanged or as all zeros.\n    # Based on the examples, it seems a primary number always exists. \n    # If it didn't, the transformation is undefined by the examples. Let's assume it always exists.\n    if primary_num is None:\n        # Assuming input rows always have non-zeros based on examples. \n        # If a row could be all zeros, this might need adjustment.\n        # Perhaps return a row of zeros matching the input length?\n        # For now, let's raise an error or return the row as is, though the logic below implicitly handles it if used.\n         return [0] * len(row) # Default to zeros if no primary found\n\n    for num in row:\n        if num == 0:\n            output_row.append(primary_num)\n        elif num == primary_num:\n            output_row.append(0)\n        else: # Non-zero number different from the primary number\n            output_row.append(primary_num)\n    return output_row\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Transforms the input grid row by row based on identifying and using a 'primary' number for each row.\n    The primary number is the most frequent non-zero number (smallest value wins ties).\n    Zeros are replaced by the primary number, the primary number is replaced by zero, \n    and other non-zeros are replaced by the primary number.\n    \"\"\"\n    output_grid = [] # Initialize the output grid\n\n    # Process each row independently\n    for input_row in input_grid:\n        # Find the primary number for the current row\n        primary_num = find_primary_number(input_row)\n        \n        # Transform the row using the identified primary number\n        # Note: Added handling in transform_row in case primary_num is None, \n        # although examples suggest it's always found.\n        output_row = transform_row(input_row, primary_num)\n        \n        # Add the transformed row to the output grid\n        output_grid.append(output_row)\n\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1041,
    "candidates_token_count": 3315,
    "total_token_count": 4356,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 27.460317,
  "retries": 1
}