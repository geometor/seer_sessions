{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\nimport numpy as np\n\n\"\"\"\nTransforms an input grid (N rows, M columns) containing a background color (0) and a single foreground color.\nThe transformation involves creating an intermediate grid (T) and then tiling it 2x2 to form the output grid (2N rows, 2M columns).\n\nSteps:\n1. Identify the unique non-zero foreground color in the input grid.\n2. Create an intermediate grid T (N x M) based on the input:\n   - If N < 2, T is a copy of the input.\n   - If N >= 2:\n     - Row 1 of T is a copy of Row 2 of the input.\n     - Row 2 of T is a copy of Row 1 of the input.\n     - For rows 3 to N of the input:\n       - Create the corresponding row in T by swapping the background color (0) and the foreground color.\n3. Create the final output grid (2N x 2M).\n4. Tile the intermediate grid T into the output grid in a 2x2 pattern.\n\"\"\"\n\ndef find_foreground_color(grid: list[list[int]]) -> int | None:\n    \"\"\"Finds the unique non-zero color in the grid.\"\"\"\n    foreground_color = None\n    for row in grid:\n        for cell in row:\n            if cell != 0:\n                if foreground_color is None:\n                    foreground_color = cell\n                elif foreground_color != cell:\n                    # This case shouldn't happen based on the problem description,\n                    # but good to acknowledge.\n                    # We'll just proceed with the first one found.\n                    return foreground_color\n        if foreground_color is not None:\n             # Optimization: stop searching once found\n             break\n    # If grid was all zeros, return 0 or a default. Based on examples,\n    # a foreground color seems guaranteed if grid is non-empty.\n    # If None is returned, it implies an all-zero grid or empty grid.\n    return foreground_color\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies the described transformation to the input grid.\n\n    Args:\n        input_grid: A list of lists representing the input grid of integers.\n\n    Returns:\n        A list of lists representing the transformed output grid.\n    \"\"\"\n    # --- Step 0: Handle edge cases and get dimensions ---\n    num_rows = len(input_grid)\n    if num_rows == 0:\n        return []  # Return empty list for empty input grid\n\n    num_cols = len(input_grid[0]) if num_rows > 0 else 0\n    if num_cols == 0:\n         # Return a grid with doubled rows but still zero columns\n        return [[] for _ in range(num_rows * 2)]\n\n    # --- Step 1: Identify Colors ---\n    background_color = 0\n    foreground_color = find_foreground_color(input_grid)\n    # Handle case where grid might be all zeros\n    if foreground_color is None:\n        foreground_color = background_color # Treat as if background is the only color\n\n    # --- Step 2: Create Intermediate Grid T ---\n    intermediate_grid = [[0] * num_cols for _ in range(num_rows)]\n\n    # Populate T based on input_grid rows\n    if num_rows == 1:\n        # Only one row, copy it directly\n        intermediate_grid[0] = copy.deepcopy(input_grid[0])\n    elif num_rows >= 2:\n        # Swap first two rows\n        intermediate_grid[0] = copy.deepcopy(input_grid[1])\n        intermediate_grid[1] = copy.deepcopy(input_grid[0])\n\n        # Process remaining rows (index 2 onwards, corresponding to input rows 3 onwards)\n        for r in range(2, num_rows):\n            input_row = input_grid[r]\n            transformed_row = []\n            for cell in input_row:\n                if cell == background_color:\n                    transformed_row.append(foreground_color)\n                elif cell == foreground_color:\n                    transformed_row.append(background_color)\n                else:\n                     # Should not happen with only two colors, but default to original\n                    transformed_row.append(cell)\n            intermediate_grid[r] = transformed_row\n\n    # --- Step 3 & 4: Create Output Grid and Tile T ---\n    output_num_rows = num_rows * 2\n    output_num_cols = num_cols * 2\n    output_grid = [[0] * output_num_cols for _ in range(output_num_rows)]\n\n    # Fill the output grid by tiling the intermediate grid\n    for r in range(output_num_rows):\n        for c in range(output_num_cols):\n            # Determine the corresponding row and column in the intermediate grid\n            source_row = r % num_rows\n            source_col = c % num_cols\n\n            # Assign the value from the intermediate grid to the output grid cell\n            output_grid[r][c] = intermediate_grid[source_row][source_col]\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5755,
    "candidates_token_count": 1600,
    "total_token_count": 7355,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.420866,
  "retries": 1
}