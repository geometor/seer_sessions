{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport collections\nimport copy\n\n\"\"\"\nTransforms an input grid by performing a flood fill operation starting from cells containing the digit 3. \nThe fill spreads to adjacent (horizontally and vertically) cells containing the digit 7. \nCells containing the digit 8 act as barriers and block the spread. The spread continues until no \nmore adjacent 7s can be reached from the spreading 3s.\n\"\"\"\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies a flood fill transformation to the input grid.\n\n    Args:\n        input_grid: A 2D list of integers representing the input grid.\n\n    Returns:\n        A 2D list of integers representing the transformed grid.\n    \"\"\"\n    # Make a deep copy to avoid modifying the original input and to store the result\n    output_grid = [row[:] for row in input_grid]\n    \n    # Get grid dimensions\n    rows = len(output_grid)\n    if rows == 0:\n        return [] # Handle empty grid case\n    cols = len(output_grid[0])\n    if cols == 0:\n        return [[] for _ in range(rows)] # Handle grids with empty rows\n\n    # Initialize a queue for the Breadth-First Search (BFS) flood fill\n    queue = collections.deque()\n\n    # Identify initial source cells (value 3) and add them to the queue\n    for r in range(rows):\n        for c in range(cols):\n            if output_grid[r][c] == 3:\n                # Add initial '3' positions to the queue.\n                # Note: We add them even though they are already 3, \n                # because their neighbors need to be checked.\n                queue.append((r, c))\n\n    # Define the four cardinal directions for checking neighbors\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] # Right, Left, Down, Up\n\n    # Perform the flood fill (spread loop) using BFS\n    while queue:\n        # Get the current cell coordinates from the front of the queue\n        r, c = queue.popleft()\n\n        # Check neighbors in all four directions\n        for dr, dc in directions:\n            nr, nc = r + dr, c + dc\n\n            # Check if the neighbor is within grid boundaries\n            if 0 <= nr < rows and 0 <= nc < cols:\n                # Check if the neighbor cell is fillable (contains 7)\n                if output_grid[nr][nc] == 7:\n                    # Fill the neighbor cell with 3\n                    output_grid[nr][nc] = 3\n                    # Add the newly filled cell to the queue to continue the spread from it\n                    queue.append((nr, nc))\n\n    # Return the modified grid after the spread is complete\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1490,
    "candidates_token_count": 1215,
    "total_token_count": 2705,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-preview-03-25",
  "response_time": 10.005151,
  "retries": 1
}