Input_Grid:
  type: object
  description: A 3x3 grid containing integer values.
  properties:
    height: 3
    width: 3
    cells:
      contain: integer values
      possible_values: [0, 2, 3]
  derived_properties:
    first_non_zero_cell:
      description: Coordinates (row, col) of the first cell with a value != 0, found by scanning row-by-row, then column-by-column. None if all cells are 0.
      type: tuple (int, int) or None
    last_non_zero_cell:
      description: Coordinates (row, col) of the last cell with a value != 0, found by scanning in reverse (last row to first, last col to first within a row). None if all cells are 0.
      type: tuple (int, int) or None

Output_Grid:
  type: object
  description: A 9x9 grid representing the transformed output state.
  properties:
    height: 9
    width: 9
    cells:
      contain: integer values [0, 3]
      initial_value: 0

Output_Block:
  type: object
  description: A fixed-size region within the Output_Grid filled with a specific value.
  properties:
    height: 4
    width: 4
    fill_value: 3
    top_left_corner:
      type: tuple (int, int)
      description: The starting coordinates (row, col) of the block in the Output_Grid.

Transformation:
  type: action
  description: Generates the Output_Grid based on the locations of the first and last non-zero cells in the Input_Grid.
  steps:
    - name: Initialize Output
      action: Create a 9x9 grid filled entirely with 0s.
    - name: Find First Non-Zero
      action: Scan Input_Grid row-by-row, column-by-column to find the coordinates `(r1, c1)` of the first cell with a value not equal to 0.
    - name: Place First Block
      condition: A first non-zero cell `(r1, c1)` was found.
      action: Define an Output_Block with `top_left_corner = (r1, c1)`. Fill the corresponding 4x4 region in the Output_Grid with the value 3.
    - name: Find Last Non-Zero
      action: Scan Input_Grid starting from the last cell (2,2) backwards (reverse row-major order) to find the coordinates `(r2, c2)` of the first non-zero cell encountered (which corresponds to the last non-zero cell in standard order).
    - name: Place Second Block
      condition: A last non-zero cell `(r2, c2)` was found.
      action: Calculate the coordinates for the second block's top-left corner as `(R2, C2) = (r2 + 3, c2 + 3)`. Define an Output_Block with `top_left_corner = (R2, C2)`. Fill the corresponding 4x4 region in the Output_Grid with the value 3. (Note: This fill operation overwrites any existing values, including potentially those from the first block if they overlap).

Relationships:
  - The Output_Grid size is fixed at 9x9.
  - The placement of the two 4x4 blocks of 3s in the Output_Grid is determined solely by the coordinates of the first and last non-zero cells found in the Input_Grid using specific offset rules.
  - If the Input_Grid contains no non-zero cells, the Output_Grid remains all zeros.