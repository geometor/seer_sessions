{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport collections\n\n\"\"\"\nProcesses a grid of numbers (represented as a list of lists) by removing duplicate numbers within each inner list (row) while preserving the original order of the first occurrence of each number.\n\"\"\"\n\ndef deduplicate_ordered_list(data_list: list[int]) -> list[int]:\n    \"\"\"\n    Removes duplicate integers from a list while preserving the order of the first occurrence.\n\n    Args:\n        data_list: A list of integers.\n\n    Returns:\n        A new list containing only the unique integers from the input list,\n        in the order they first appeared.\n    \"\"\"\n    seen = set()\n    result = []\n    # Iterate through the input list\n    for item in data_list:\n        # Check if the item has been seen before in this list\n        if item not in seen:\n            # If not seen, add it to the result list\n            result.append(item)\n            # Mark the item as seen\n            seen.add(item)\n    return result\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Transforms the input grid by applying ordered deduplication to each row.\n\n    Args:\n        input_grid: A list of lists, where each inner list contains integers.\n                    Represents the input lines, pre-parsed into numbers.\n\n    Returns:\n        A list of lists, where each inner list is the ordered, deduplicated\n        version of the corresponding input row.\n    \"\"\"\n    # Initialize the output grid which will store the processed rows\n    output_grid = []\n\n    # Iterate through each row (inner list) in the input grid\n    for row in input_grid:\n        # Apply the ordered deduplication logic to the current row\n        # using the helper function\n        deduplicated_row = deduplicate_ordered_list(row)\n        # Add the processed row to the output grid\n        output_grid.append(deduplicated_row)\n\n    # Return the grid containing all the processed rows\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1411,
    "candidates_token_count": 1082,
    "total_token_count": 2493,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.264235,
  "retries": 1
}