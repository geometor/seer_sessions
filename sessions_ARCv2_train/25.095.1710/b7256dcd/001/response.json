{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\nfrom collections import deque\n\n\"\"\"\nTransforms a 2D grid of integers based on connected components of non-7 values.\n\n1. Identifies connected components of cells with values other than 7 using 4-way adjacency (up, down, left, right). Cells with value 7 act as boundaries.\n2. For each component:\n    a. Calculates its size (number of cells).\n    b. Finds the set of unique values within the component.\n    c. Determines the minimum value within the component.\n    d. Applies specific rules to modify the cells within the component in the output grid:\n        - If size is 1, the cell's value becomes 7.\n        - If size is 4 and all values are 6, the cells remain 6.\n        - If size is 5 and all values are 6, the cells become 4.\n        - Otherwise:\n            - Cells originally holding the minimum value change to 7.\n            - All other cells in the component change to the minimum value.\n3. Cells with the value 7 remain unchanged throughout the process.\n\"\"\"\n\ndef _get_neighbors(r, c, rows, cols):\n    \"\"\"Yields valid neighbor coordinates (up, down, left, right).\"\"\"\n    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n        nr, nc = r + dr, c + dc\n        if 0 <= nr < rows and 0 <= nc < cols:\n            yield nr, nc\n\ndef _find_component(start_r, start_c, grid, visited):\n    \"\"\"Finds a connected component using BFS.\"\"\"\n    rows = len(grid)\n    cols = len(grid[0])\n    if visited[start_r][start_c] or grid[start_r][start_c] == 7:\n        return None, None # Already visited or a boundary cell\n\n    component_cells = []\n    component_values = []\n    q = deque([(start_r, start_c)])\n    visited[start_r][start_c] = True\n\n    while q:\n        r, c = q.popleft()\n        component_cells.append((r, c))\n        component_values.append(grid[r][c])\n\n        for nr, nc in _get_neighbors(r, c, rows, cols):\n            if not visited[nr][nc] and grid[nr][nc] != 7:\n                visited[nr][nc] = True\n                q.append((nr, nc))\n\n    return component_cells, component_values\n\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies the transformation rules to the input grid based on connected components.\n    \"\"\"\n    # Handle empty grid case\n    if not input_grid or not input_grid[0]:\n        return []\n\n    rows = len(input_grid)\n    cols = len(input_grid[0])\n\n    # Initialize output_grid as a deep copy of the input\n    output_grid = copy.deepcopy(input_grid)\n\n    # Keep track of visited cells to avoid reprocessing components\n    visited = [[False for _ in range(cols)] for _ in range(rows)]\n\n    # Iterate through each cell to find components\n    for r in range(rows):\n        for c in range(cols):\n            # If cell is active (not 7) and not yet visited, start a component search\n            if input_grid[r][c] != 7 and not visited[r][c]:\n                component_cells, component_values = _find_component(r, c, input_grid, visited)\n\n                if component_cells: # Check if a valid component was found\n                    # Determine component properties\n                    size = len(component_cells)\n                    unique_values = set(component_values)\n                    min_value = min(component_values)\n\n                    # Apply transformation rules to the cells in the component\n                    for cell_r, cell_c in component_cells:\n                        original_value = input_grid[cell_r][cell_c]\n\n                        # Rule 1 (Size 1):\n                        if size == 1:\n                            output_grid[cell_r][cell_c] = 7\n                        # Rule 2 (Size 4, only 6s): - No change needed as output started as copy\n                        elif size == 4 and unique_values == {6}:\n                            pass # Value remains 6\n                        # Rule 3 (Size 5, only 6s):\n                        elif size == 5 and unique_values == {6}:\n                            output_grid[cell_r][cell_c] = 4\n                        # Rule 4 (Minimum Value Cell in other components):\n                        elif original_value == min_value:\n                            output_grid[cell_r][cell_c] = 7\n                        # Rule 5 (Other Cells in other components):\n                        else: # original_value != min_value\n                            output_grid[cell_r][cell_c] = min_value\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1780,
    "candidates_token_count": 1791,
    "total_token_count": 3571,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.055977,
  "retries": 1
}