{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies the contiguous block of rows starting from the top row (row 0) of the input grid that contain at least one non-zero element (TopBlock).\nDetermines the number of rows in TopBlock (N).\nCreates an output grid initially identical to the input grid.\nCreates a vertically mirrored copy of TopBlock (MirroredBlock).\nReplaces the last N rows of the output grid with the rows from MirroredBlock.\n\"\"\"\n\nimport copy\n\n# Helper function to check if a row consists entirely of zeros\ndef _is_zero_row(row: list[int]) -> bool:\n    \"\"\"Checks if all elements in a list (row) are zero.\"\"\"\n    return all(cell == 0 for cell in row)\n\n# Helper function to find the top block of non-zero rows\ndef _find_top_non_zero_block(grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"Finds the contiguous block of rows from the top containing non-zeros.\"\"\"\n    top_block = []\n    for row in grid:\n        # Stop iterating if a row with only zeros is found\n        if _is_zero_row(row):\n            break\n        top_block.append(row)\n    return top_block\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Transforms the input grid by copying the top non-zero rows,\n    and placing a vertically mirrored version of these rows at the bottom\n    of the grid.\n\n    Args:\n        input_grid: A list of lists representing the input grid of integers.\n\n    Returns:\n        A list of lists representing the transformed grid.\n    \"\"\"\n    # Get grid dimensions\n    height = len(input_grid)\n    if height == 0:\n        return [] # Handle empty grid case\n\n    # 1. Identify the contiguous block of rows from the top (TopBlock)\n    #    containing at least one non-zero element.\n    top_block = _find_top_non_zero_block(input_grid)\n\n    # 2. Determine the number of rows in TopBlock (N).\n    n = len(top_block)\n\n    # 3. Create a new grid, OutputGrid, with the same dimensions as the input grid.\n    # 4. Copy all rows from the input grid to the OutputGrid.\n    #    Using deepcopy ensures that subsequent modifications don't affect\n    #    the original input or the top_block reference if needed later.\n    output_grid = copy.deepcopy(input_grid)\n\n    # Proceed only if there are non-zero rows to mirror (n > 0)\n    # and the mirror fits within the grid height (n <= height)\n    if n > 0 and n <= height:\n        # 5. Create a reversed copy of the rows in TopBlock (MirroredBlock).\n        #    Slicing [::-1] creates a reversed shallow copy of the list of rows.\n        mirrored_block = top_block[::-1]\n\n        # 6. Replace the last N rows of the OutputGrid with the rows from MirroredBlock.\n        for i in range(n):\n            # Calculate the target row index in the output grid\n            # The first row of mirrored_block goes to output_grid[height - n]\n            # The second row of mirrored_block goes to output_grid[height - n + 1]\n            # ...\n            # The last row (n-1) of mirrored_block goes to output_grid[height - 1]\n            target_row_index = height - n + i\n\n            # Assign the corresponding row from the mirrored block\n            # We assign the row directly. Since mirrored_block was derived from\n            # top_block which came from input_grid, and output_grid is a deepcopy,\n            # this assignment is safe.\n            output_grid[target_row_index] = mirrored_block[i]\n\n    # 7. The final OutputGrid is the result.\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1381,
    "candidates_token_count": 1944,
    "total_token_count": 3325,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 17.127766,
  "retries": 1
}