{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\n\n\"\"\"\nTransforms an input square grid (N x N) into an output grid (2N x 2N) using a specific pattern involving row swapping, value inversion, and tiling.\n\n1.  Determine the primary non-zero digit `P` present in the input grid.\n2.  Create a temporary base grid (N x N) based on the input:\n    *   If N >= 2, the first row of the base grid is the second row of the input, and the second row of the base grid is the first row of the input.\n    *   If N < 2, the base grid starts as a copy of the input grid.\n    *   For all rows in the base grid starting from index 2 (if N >= 2), modify the corresponding input row: replace every 0 with `P` and every `P` with 0. Place this modified row into the base grid at the same index.\n3.  Construct an intermediate grid (N x 2N) by horizontally duplicating each row of the temporary base grid (concatenate each row with itself).\n4.  Construct the final output grid (2N x 2N) by vertically duplicating the intermediate grid (stack the intermediate grid on top of itself).\n\"\"\"\n\ndef find_primary_non_zero(grid: list[list[int]]) -> int | None:\n    \"\"\"Finds the first non-zero digit encountered in the grid.\"\"\"\n    for row in grid:\n        for cell in row:\n            if cell != 0:\n                return cell\n    return None # Or potentially raise an error if a non-zero must exist\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid: A square list of lists representing the N x N input grid.\n\n    Returns:\n        A list of lists representing the 2N x 2N output grid.\n    \"\"\"\n    n = len(input_grid)\n    if n == 0:\n        return []\n\n    # --- Step 1: Find the primary non-zero digit ---\n    primary_non_zero = find_primary_non_zero(input_grid)\n    # If all zeros, the inversion step won't work as expected,\n    # but based on examples, there's always a non-zero.\n    # If primary_non_zero is None and n >= 2, the inversion below might need adjustment.\n    # For now, assume it's always found based on examples.\n    if primary_non_zero is None and n > 0 : # Handle all zero case gracefully - treat as P=0 for inversion?\n        primary_non_zero = 0 # If grid is all zeros, inversion does nothing.\n\n    # --- Step 2: Create the temporary base grid (N x N) ---\n    modified_base_grid = [[0] * n for _ in range(n)] # Initialize with zeros\n\n    # Handle row swapping for N >= 2\n    if n >= 2:\n        modified_base_grid[0] = copy.deepcopy(input_grid[1])\n        modified_base_grid[1] = copy.deepcopy(input_grid[0])\n    elif n == 1: # Handle N=1 case\n         modified_base_grid[0] = copy.deepcopy(input_grid[0])\n\n\n    # Handle rows from index 2 onwards with value inversion\n    for i in range(2, n):\n        processed_row = []\n        input_row = input_grid[i]\n        for val in input_row:\n            if val == 0:\n                processed_row.append(primary_non_zero)\n            elif val == primary_non_zero:\n                processed_row.append(0)\n            else:\n                # Assuming only 0 and the primary non-zero exist based on examples\n                # If other numbers could exist, rule needs clarification\n                processed_row.append(val) # Keep other values unchanged? Or default to 0?\n        modified_base_grid[i] = processed_row\n\n    # --- Step 3: Construct the intermediate grid (N x 2N) ---\n    # Horizontally duplicate each row of the modified_base_grid\n    tiled_rows_grid = []\n    for i in range(n):\n        row = modified_base_grid[i]\n        doubled_row = row + row\n        tiled_rows_grid.append(doubled_row)\n\n    # --- Step 4: Construct the final output grid (2N x 2N) ---\n    # Vertically duplicate the tiled_rows_grid\n    output_grid = tiled_rows_grid + tiled_rows_grid\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3831,
    "candidates_token_count": 4654,
    "total_token_count": 8485,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 36.45978,
  "retries": 1
}