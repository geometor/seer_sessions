{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport collections\nimport itertools\n\n\"\"\"\nTransforms an input grid of integers into an output grid based on the frequency of non-zero numbers in the input.\n\n1.  **Count Frequencies:** Count the occurrences of each unique non-zero integer in the entire input grid.\n2.  **Determine Column Order:** Identify the unique non-zero integers. Sort these integers in descending order based on their frequency count. This sorted list determines the order of columns in the output grid.\n3.  **Adjust Counts (Conditional):**\n    *   If the input grid has more columns than rows, find the smallest unique non-zero integer present in the input and increment its frequency count by 1.\n4.  **Determine Output Dimensions:**\n    *   The number of columns in the output grid is equal to the number of unique non-zero integers found in the input.\n    *   Calculate the maximum frequency count among all unique non-zero integers (after potential adjustment).\n    *   The number of rows in the output grid is `max_count + 1`, unless the input grid has exactly 4 columns, in which case the number of rows is `max_count + 2`.\n5.  **Construct Output Grid:**\n    *   Initialize an output grid with the calculated dimensions, filled with zeros.\n    *   Iterate through the sorted unique non-zero integers (from step 2). For each integer:\n        *   Fill the corresponding column in the output grid from top to bottom with that integer.\n        *   The number of times the integer is placed in the column is equal to its (potentially adjusted) frequency count.\n        *   The remaining cells in that column below the filled integers remain zero.\n\"\"\"\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Transforms the input grid based on non-zero integer frequencies.\n\n    Args:\n        input_grid: A list of lists representing the input grid of integers.\n\n    Returns:\n        A list of lists representing the transformed output grid.\n    \"\"\"\n    if not input_grid or not input_grid[0]:\n        return [] # Handle empty input\n\n    num_input_rows = len(input_grid)\n    num_input_cols = len(input_grid[0])\n\n    # 1. Count Frequencies\n    # Flatten the grid and count non-zero elements\n    all_elements = list(itertools.chain.from_iterable(input_grid))\n    counts = collections.Counter(el for el in all_elements if el != 0)\n\n    if not counts:\n        # Handle input grid with only zeros or empty\n         # Determine output rows based on rules even if counts are zero initially\n        max_count = 0\n        num_output_rows = max_count + 1\n        if num_input_cols == 4:\n            num_output_rows = max_count + 2\n        # If no non-zeros, output should likely be empty columns or based on row count?\n        # Based on examples, seems like columns require non-zeros. Return empty grid.\n        return []\n\n\n    # 2. Determine Column Order (Sort by frequency descending, then number ascending for ties)\n    # Get unique non-zero numbers sorted primarily by count (desc) and secondarily by value (asc)\n    sorted_unique_numbers = sorted(counts.keys(), key=lambda x: (-counts[x], x))\n\n    # 3. Adjust Counts (Conditional)\n    if num_input_cols > num_input_rows:\n        # Find the smallest unique non-zero number\n        if sorted_unique_numbers: # Ensure there are non-zero numbers\n             min_num = min(counts.keys())\n             counts[min_num] += 1 # Increment its count\n\n\n    # 4. Determine Output Dimensions\n    # Recalculate max_count after potential adjustment\n    max_count = 0\n    if counts:\n         max_count = max(counts.values())\n\n    num_output_rows = max_count + 1\n    # Special case for input with 4 columns\n    if num_input_cols == 4:\n        num_output_rows = max_count + 2\n\n    num_output_cols = len(sorted_unique_numbers)\n\n    # 5. Construct Output Grid\n    # Initialize output grid with zeros\n    output_grid = [[0] * num_output_cols for _ in range(num_output_rows)]\n\n    # Fill the output grid column by column based on sorted numbers and their counts\n    for col_index, number in enumerate(sorted_unique_numbers):\n        count = counts[number]\n        for row_index in range(count):\n             # Ensure we don't write past the allocated rows\n             if row_index < num_output_rows:\n                output_grid[row_index][col_index] = number\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1116,
    "candidates_token_count": 2028,
    "total_token_count": 3144,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 19.119469,
  "retries": 1
}