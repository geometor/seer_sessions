{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport math\n\n\"\"\"\nTransforms an input grid of integers based on repetition patterns.\n\n1. Checks for vertical repetition: If the number of rows (N) is even and the top half of the rows is identical to the bottom half, the output is the top half.\n2. If no vertical repetition is found (or N is odd), checks for horizontal repetition: If the number of columns (M) in each row is even and the left half of each row is identical to its right half for *all* rows, the output consists of the left half of each row.\n3. If neither repetition pattern is detected, the original input grid is returned (as a fallback, though examples imply a pattern will exist).\n\"\"\"\n\ndef _split_vertically(grid: list[list[int]]) -> tuple[list[list[int]], list[list[int]]]:\n    \"\"\"Splits the grid vertically into two halves.\"\"\"\n    n_rows = len(grid)\n    midpoint = n_rows // 2\n    top_half = grid[:midpoint]\n    bottom_half = grid[midpoint:]\n    return top_half, bottom_half\n\ndef _split_horizontally(row: list[int]) -> tuple[list[int], list[int]]:\n    \"\"\"Splits a single row horizontally into two halves.\"\"\"\n    n_cols = len(row)\n    midpoint = n_cols // 2\n    left_half = row[:midpoint]\n    right_half = row[midpoint:]\n    return left_half, right_half\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid: A list of lists of integers representing the input grid.\n\n    Returns:\n        A list of lists of integers representing the transformed output grid.\n    \"\"\"\n    \n    n_rows = len(input_grid)\n\n    # 1. Check for Vertical Repetition\n    if n_rows > 0 and n_rows % 2 == 0:\n        top_half, bottom_half = _split_vertically(input_grid)\n        # Compare the top and bottom blocks\n        if top_half == bottom_half:\n            # If identical, output is the top block\n            return top_half\n\n    # 2. Check for Horizontal Repetition (if vertical repetition was not found or N is odd)\n    # Assume consistent number of columns for horizontal check based on the first row\n    if n_rows > 0:\n        n_cols = len(input_grid[0]) if input_grid else 0 # Handle empty grid case\n        \n        # Check if columns are even and > 0 for potential horizontal split\n        if n_cols > 0 and n_cols % 2 == 0:\n            all_lines_repeat_horizontally = True\n            output_grid_horizontal = []\n\n            # Iterate through each line\n            for row in input_grid:\n                 # Check consistency of columns and if splitting is possible\n                 if len(row) != n_cols:\n                     all_lines_repeat_horizontally = False # Rows have different lengths, cannot apply horizontal rule consistently\n                     break \n                 \n                 left_half, right_half = _split_horizontally(row)\n                 # Compare left and right halves\n                 if left_half != right_half:\n                     all_lines_repeat_horizontally = False\n                     break # Stop checking rows if one doesn't repeat\n                 else:\n                     # Store the left half for potential output\n                     output_grid_horizontal.append(left_half)\n\n            # If all lines had horizontal repetition\n            if all_lines_repeat_horizontally:\n                return output_grid_horizontal\n\n    # 3. No repetition pattern detected (or input conditions not met for checks)\n    # Return the original grid as a fallback\n    return input_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1601,
    "candidates_token_count": 1394,
    "total_token_count": 2995,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.992328,
  "retries": 1
}