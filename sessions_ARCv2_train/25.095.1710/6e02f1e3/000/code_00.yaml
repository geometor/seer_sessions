task_description: Transform a 3x3 input grid of digits into a 3x3 output grid containing only 0s and 5s based on the distribution of numbers in the input.

grid_properties:
  - size: 3x3 (consistent across examples)
  - input_values: integers (observed: 2, 3, 4)
  - output_values: integers (0, 5)

transformation_rules:
  - condition: Input grid contains only one unique number (uniform grid).
    action: Create an output grid where the first row contains only 5s, and all other cells contain 0s.
    example_ref: [train_1, train_3]
  - condition: Input grid contains multiple unique numbers (non-uniform grid).
    sub_condition_1: There is a single most frequent number in the input grid.
      action: Create an output grid where cells on the main diagonal (top-left to bottom-right) contain 5s, and all other cells contain 0s.
      example_ref: [train_4, train_5]
    sub_condition_2: There is no single most frequent number (tie for highest frequency).
      action: Create an output grid where cells on the anti-diagonal (top-right to bottom-left) contain 5s, and all other cells contain 0s.
      example_ref: [train_2]

objects:
  - name: input_grid
    properties:
      - grid_elements: list of lists of integers
      - dimensions: rows, columns (e.g., 3x3)
      - unique_values: set of distinct numbers present
      - value_frequencies: count of occurrences for each unique value
  - name: output_grid
    properties:
      - grid_elements: list of lists of integers (0 or 5)
      - dimensions: rows, columns (same as input)

relationships:
  - The structure of the output_grid (placement of 5s) depends entirely on the properties (uniformity and value frequencies) of the input_grid.

derived_properties:
  - is_uniform: boolean (True if only one unique value in input_grid)
  - most_frequent_value: integer or list of integers (the value(s) with the highest frequency)
  - has_single_most_frequent: boolean (True if most_frequent_value is a single integer, False if it's a list due to a tie)