objects:
  - name: input_sequence
    type: list
    properties:
      - item_type: integer
      - ordering: significant
  - name: output_sequence
    type: list
    properties:
      - item_type: integer
      - ordering: derived from input_sequence
      - length: same as input_sequence
  - name: number_pair
    type: tuple
    properties:
      - element_count: 2
      - source: adjacent elements from input_sequence at specific indices (i, i+1) where i is 0, 3, 6, ...

actions:
  - name: receive_input_list
    description: Accept a list of integers as input.
  - name: iterate_and_identify_pairs
    description: >
      Iterate through the input list using an index `i` starting at 0 and incrementing by 3 in each step (`i = 0, 3, 6, ...`).
      In each step, consider the pair of elements at indices `(i, i+1)`, provided `i+1` is within the list bounds.
  - name: conditional_swap
    description: >
      For each identified pair at `(i, i+1)`:
      Calculate a pair index `p = i // 3`.
      If `p` is even (0, 2, 4, ...): swap the elements if `input_sequence[i] > input_sequence[i+1]`.
      If `p` is odd (1, 3, 5, ...): swap the elements if `input_sequence[i] < input_sequence[i+1]`.
  - name: preserve_elements
    description: Elements at indices not involved in the pairs (i.e., indices 2, 5, 8, ...) remain in their positions relative to the processed pairs.
  - name: return_output_list
    description: Return the modified list of integers.

relationships:
  - type: transformation
    source: input_sequence
    target: output_sequence
    rule: defined by iterate_and_identify_pairs and conditional_swap actions.
  - type: positional_dependency
    description: The swap condition (`>` or `<`) depends on the starting index `i` of the pair, specifically whether `i // 3` is even or odd.