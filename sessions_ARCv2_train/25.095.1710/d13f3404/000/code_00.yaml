objects:
  - name: input_grid
    properties:
      - type: grid
      - dimensions: 3x3
      - cell_type: integer
      - value_range: 0-9
  - name: output_grid
    properties:
      - type: grid
      - dimensions: 6x6
      - cell_type: integer
      - value_range: 0-9
relations:
  - type: mapping
    from: input_grid
    to: output_grid
    details: Each cell (r_out, c_out) in the output grid gets its value from a cell (r_in, c_in) in the input grid.
actions:
  - name: determine_output_cell_value
    inputs:
      - output_cell_coordinates: (r_out, c_out)
      - input_grid
    output:
      - cell_value
    logic: |
      Iterate backwards diagonally from (r_out, c_out) by an offset k, starting k=0.
      Calculate potential input coordinates (r_in = r_out - k, c_in = c_out - k).
      Check if (r_in, c_in) are valid coordinates within the 3x3 input_grid (0 <= r_in < 3 and 0 <= c_in < 3).
      If valid coordinates are found:
        Retrieve the value 'val' from input_grid[r_in][c_in].
        If 'val' is non-zero, this is the value for output_grid[r_out][c_out]. Stop searching for this output cell.
      If the diagonal trace goes out of input_grid bounds before finding a non-zero value, the output cell value is 0.
  - name: generate_output_grid
    inputs:
      - input_grid
    output:
      - output_grid
    logic: |
      Initialize a 6x6 grid with zeros.
      For each cell (r_out, c_out) in the 6x6 grid:
        Determine its value using the 'determine_output_cell_value' action.
        Assign the determined value to the output grid at (r_out, c_out).
      Return the completed 6x6 output grid.
