Input:
  type: list
  elements:
    type: integer
    range: single digit (0-9)
Output:
  type: list
  elements:
    type: integer
    content: same elements as input, reordered
Transformation:
  action: conditional pairwise swapping
  process:
    - Create a copy of the input list.
    - Iterate through the indices of the list.
    - Consider indices in groups of three: (0, 1, 2), (3, 4, 5), (6, 7, 8), ...
    - For each group starting at index `i` (where `i` is 0, 3, 6, ...):
      - If elements at index `i` and `i+1` exist:
        - Swap the elements at index `i` and `i+1`.
      - The element at index `i+2` (if it exists) remains in its position.
    - The iteration effectively swaps pairs `(0, 1)`, `(3, 4)`, `(6, 7)`, etc., while leaving elements at indices `2, 5, 8, ...` untouched.
  Relationship: Output is a permutation of the input based on specific non-contiguous adjacent swaps.