{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\nfrom collections import deque\n\n\"\"\"\nApply a flood fill transformation starting from cells with value 3. \nThe fill propagates horizontally and vertically to adjacent cells containing the value 7, changing them to 3. \nCells with value 8 act as barriers and stop the fill. \nCells initially containing 3 or 8, and 7s not reached by the fill, remain unchanged.\n\"\"\"\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Transforms the input grid based on a flood fill rule originating from '3' cells.\n\n    Args:\n        input_grid: A 2D list of integers representing the input grid.\n\n    Returns:\n        A 2D list of integers representing the transformed output grid.\n    \"\"\"\n\n    # Get grid dimensions\n    if not input_grid or not input_grid[0]:\n        return []\n    rows = len(input_grid)\n    cols = len(input_grid[0])\n\n    # Initialize output_grid as a deep copy of the input grid\n    # This ensures that 8s, initial 3s, and unreachable 7s are preserved\n    # unless explicitly changed by the flood fill.\n    output_grid = [row[:] for row in input_grid] # Sufficient for lists of ints\n\n    # Initialize a queue for the flood fill (BFS)\n    queue = deque()\n\n    # Find initial seed cells (value 3) and add them to the queue\n    # Note: Cells initially 3 don't need to be explicitly processed by the fill\n    # logic itself, but their neighbors do. We add neighbors of 3s that are 7s\n    # or we can just add the 3s and let the main loop handle neighbors.\n    # Adding the 3s themselves is simpler and covers all cases.\n    for r in range(rows):\n        for c in range(cols):\n            if input_grid[r][c] == 3:\n                 # Although the 3 itself doesn't change, it acts as a source.\n                 # We add its coords to potentially start filling adjacent 7s.\n                 # No need to explicitly mark visited, as we only change 7s to 3s\n                 # in the output_grid, and the check output_grid[nr][nc] == 7 handles this.\n                 queue.append((r, c))\n\n\n    # Perform the flood fill using Breadth-First Search (BFS)\n    while queue:\n        r, c = queue.popleft()\n\n        # Define potential neighbors (up, down, left, right)\n        neighbors = [\n            (r - 1, c),\n            (r + 1, c),\n            (r, c - 1),\n            (r, c + 1),\n        ]\n\n        for nr, nc in neighbors:\n            # Check if the neighbor is within the grid boundaries\n            if 0 <= nr < rows and 0 <= nc < cols:\n                # Check if the neighbor cell in the *input* grid contains 7\n                # AND if its corresponding cell in the *output* grid is still 7\n                # (meaning it hasn't been reached/processed by the fill yet).\n                # The condition input_grid[nr][nc] == 7 is technically redundant if\n                # we start correctly, as only 7s can become 3s, but it's safer\n                # to include, matching the natural language description precisely.\n                if input_grid[nr][nc] == 7 and output_grid[nr][nc] == 7:\n                    # Change the value in the output grid to 3\n                    output_grid[nr][nc] = 3\n                    # Add this newly changed cell to the queue to process its neighbors\n                    queue.append((nr, nc))\n\n    # The output_grid now contains the final state after the flood fill\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1852,
    "candidates_token_count": 1527,
    "total_token_count": 3379,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.525372,
  "retries": 1
}