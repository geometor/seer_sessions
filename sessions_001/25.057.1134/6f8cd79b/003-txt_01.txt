import numpy as np

def analyze_results(task_data):
    results = []
    for example in task_data['train']:
        input_grid = np.array(example['input'])
        output_grid = np.array(example['output'])
        predicted_output = transform(input_grid)  # Assuming 'transform' is the provided function

        rows, cols = input_grid.shape
        is_3x3 = rows == 3 and cols == 3
        passed = np.array_equal(predicted_output, output_grid)

        # Calculate the expected number of 3x3 subgrids
        num_subgrids = (rows - 2) * (cols - 2) if rows >= 3 and cols >= 3 else 0

        results.append({
            'input_shape': (rows, cols),
            'is_3x3': is_3x3,
            'passed': passed,
            'num_subgrids': num_subgrids
        })

    return results
task_data_0 = {
  "train": [
    {
      "input": [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
      "output": [[8, 8, 8], [8, 0, 8], [8, 8, 8]]
    },
    {
      "input": [[0, 5, 1], [7, 4, 9], [8, 2, 2]],
      "output": [[8, 8, 8], [8, 4, 8], [8, 8, 8]]
    },
     {
      "input": [[0, 5, 1, 4], [7, 4, 9, 4], [8, 2, 2, 4], [8, 2, 2, 4]],
      "output": [[8, 8, 8, 4], [8, 4, 8, 4], [8, 8, 8, 4], [8, 2, 2, 4]]
    }
  ]
}

task_data_1 = {
    "train":[
        {
            "input":[[0, 5, 1, 4, 5], [7, 4, 9, 4, 5], [8, 2, 2, 4, 5], [8, 2, 2, 4, 5]],
            "output":[[8, 8, 8, 8, 5], [8, 4, 8, 8, 5], [8, 8, 8, 8, 5], [8, 2, 2, 4, 5]]
        }
    ]
}

print("Analysis for task_data_0:")
results_0 = analyze_results(task_data_0)
for i, res in enumerate(results_0):
    print(f"Example {i+1}: {res}")

print("\\nAnalysis for task_data_1:")
results_1 = analyze_results(task_data_1)
for i, res in enumerate(results_1):
    print(f"Example {i+1}: {res}")