import numpy as np

def describe_grid(grid, grid_name):
    """Provides a description of a grid's properties."""
    print(f"--- {grid_name} ---")
    print(f"  Dimensions: {grid.shape}")
    unique, counts = np.unique(grid, return_counts=True)
    color_counts = dict(zip(unique, counts))
    print(f"  Color Counts: {color_counts}")
    print(f"  Grid Data:\n{grid}")

examples = [
    {
        "input": np.array([[5, 5, 5, 5, 5, 5, 5, 5, 5],
                           [5, 5, 5, 5, 5, 5, 5, 5, 5],
                           [5, 5, 5, 5, 5, 5, 5, 5, 5],
                           [5, 5, 5, 5, 5, 5, 5, 5, 5],
                           [5, 5, 5, 5, 5, 5, 5, 5, 5]]),
        "output": np.array([[5, 5],
                            [5, 5],
                            [5, 5],
                            [5, 5],
                            [5, 5]])
    },
    {
        "input": np.array([[8, 8, 8, 8, 8, 8, 8, 8],
                           [8, 8, 8, 8, 8, 8, 8, 8],
                           [8, 8, 8, 8, 8, 8, 8, 8],
                           [8, 8, 8, 8, 8, 8, 8, 8]]),
        "output": np.array([[8, 8, 8, 8],
                            [8, 8, 8, 8],
                            [8, 8, 8, 8],
                            [8, 8, 8, 8]])
    },
    {
        "input": np.array([[7, 7, 7, 7, 7, 7, 7],
                           [7, 7, 7, 7, 7, 7, 7],
                           [7, 7, 7, 7, 7, 7, 7],
                           [7, 7, 7, 7, 7, 7, 7],
                           [7, 7, 7, 7, 7, 7, 7],
                           [7, 7, 7, 7, 7, 7, 7]]),
        "output": np.array([[7, 7, 7],
                            [7, 7, 7],
                            [7, 7, 7],
                            [7, 7, 7],
                            [7, 7, 7],
                            [7, 7, 7]])
    }
]
for i, example in enumerate(examples):
  describe_grid(example["input"], f"Example {i+1} Input")
  describe_grid(example["output"], f"Example {i+1} Output")
