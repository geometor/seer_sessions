import numpy as np

def describe_grid(grid, grid_name):
    rows, cols = grid.shape
    unique_colors = np.unique(grid)
    color_counts = {color: np.count_nonzero(grid == color) for color in unique_colors}
    print(f'{grid_name}:')
    print(f'  Dimensions: {rows} x {cols}')
    print(f'  Unique Colors: {unique_colors}')
    print(f'  Color Counts: {color_counts}')
    
def describe_adjacent(grid, grid_name, r, c):
    rows, cols = grid.shape
    print(f'Adjacent to ({r},{c}) in {grid_name}:')

    adjacent_coords = [
        (r - 1, c - 1), (r - 1, c), (r - 1, c + 1),
        (r, c - 1),                (r, c + 1),
        (r + 1, c - 1), (r + 1, c), (r + 1, c + 1)
        ]

    for ar, ac in adjacent_coords:
        if 0 <= ar < rows and 0 <= ac < cols:
            print(f'  ({ar},{ac}): {grid[ar, ac]}')
        else:
            print(f' ({ar},{ac}): Out of Bounds')

example_inputs = [
np.array([[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,3,3,3,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]]),
np.array([[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,3,3,3,3,3,3,0],[0,0,0,0,0,0,0,0]]),
np.array([[0,0,3,3,0,0],[0,0,3,3,0,0],[0,0,3,3,0,0],[0,0,3,3,0,0]]),
np.array([[0,3,3,3,3,0],[0,3,3,3,3,0],[0,3,3,3,3,0],[0,3,3,3,3,0]]),
np.array([[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,3,3,3,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]]),
np.array([[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,3,3,3,3,3,3,0],[0,0,0,0,0,0,0,0]]),
np.array([[0,0,3,3,0,0],[0,0,3,3,0,0],[0,0,3,3,0,0],[0,0,3,3,0,0]]),
np.array([[0,3,3,3,3,0],[0,3,3,3,3,0],[0,3,3,3,3,0],[0,3,3,3,3,0]])
]
example_outputs = [
np.array([[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,8,8,3,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]]),
np.array([[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,8,8,8,8,8,3,0],[0,0,0,0,0,0,0,0]]),
np.array([[0,0,8,3,0,0],[0,0,8,3,0,0],[0,0,8,3,0,0],[0,0,8,3,0,0]]),
np.array([[0,8,8,8,8,0],[0,8,3,3,8,0],[0,8,3,3,8,0],[0,8,8,8,8,0]]),
np.array([[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,8,8,3,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]]),
np.array([[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,8,8,8,8,8,3,0],[0,0,0,0,0,0,0,0]]),
np.array([[0,0,8,3,0,0],[0,0,8,3,0,0],[0,0,8,3,0,0],[0,0,8,3,0,0]]),
np.array([[0,8,8,8,8,0],[0,8,3,3,8,0],[0,8,3,3,8,0],[0,8,8,8,8,0]])
]
example_results = [
np.array([[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,8,8,3,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]]),
np.array([[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,8,8,8,8,8,3,0],[0,0,0,0,0,0,0,0]]),
np.array([[0,0,8,8,0,0],[0,0,8,8,0,0],[0,0,8,8,0,0],[0,0,8,8,0,0]]),
np.array([[0,8,8,8,8,0],[0,8,8,8,8,0],[0,8,8,8,8,0],[0,8,8,8,8,0]]),
np.array([[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,8,8,3,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]]),
np.array([[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,8,8,8,8,8,3,0],[0,0,0,0,0,0,0,0]]),
np.array([[0,0,8,8,0,0],[0,0,8,8,0,0],[0,0,8,8,0,0],[0,0,8,8,0,0]]),
np.array([[0,8,8,8,8,0],[0,8,8,8,8,0],[0,8,8,8,8,0],[0,8,8,8,8,0]])
]

for i in range(len(example_inputs)):
    describe_grid(example_inputs[i], f'Example Input {i+1}')
    describe_grid(example_outputs[i], f'Example Output {i+1}')
    describe_grid(example_results[i], f'Example Result {i+1}')
    print("---")