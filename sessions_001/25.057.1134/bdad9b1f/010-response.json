{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Azure Object:** If an azure (8) object exists (initially a vertical line), extend it downwards. The extension stops at the bottom of the grid OR until one row before a red object. If no red object is present, extend to the bottom.\n\n2.  **Red Object:** If a red (2) object exists (initially a horizontal line), find its original leftmost x coordinate. Replace the leftmost red pixel with a yellow (4) pixel.\n\n3.  **Red Object Expansion (Conditional):** Then, extend the red object to the left and right edges of the grid *on the same row*.\n\n4. **Handle Missing Objects**: Ensure that the transformation handles cases where either the azure or red object (or both) are not present in the input.\n\n5.  **Background:** All other pixels remain white (0).\n\"\"\"\n\nimport numpy as np\n\ndef find_object(grid, color):\n    \"\"\"Finds coordinates of pixels with the specified color.\"\"\"\n    coords = np.argwhere(grid == color)\n    return coords\n\ndef extend_azure(grid, azure_coords, red_coords):\n    \"\"\"Extends the azure object downwards.\"\"\"\n    rows, _ = grid.shape\n    if len(azure_coords) > 0:\n        min_azure_row = np.min(azure_coords[:, 0])\n        max_azure_col = azure_coords[0][1]\n\n        # Determine stop row (bottom of grid or row before red object)\n        if len(red_coords) > 0:\n            stop_row = np.min(red_coords[:, 0]) -1\n        else:\n            stop_row = rows\n\n        for row in range(min_azure_row, stop_row):\n            grid[row, max_azure_col] = 8\n\ndef modify_red(grid, red_coords):\n   \"\"\"Modifies the red object, adding yellow and extending.\"\"\"\n   rows, cols = grid.shape\n   if len(red_coords) > 0:\n        min_red_row = np.min(red_coords[:, 0])\n        min_red_col = np.min(red_coords[:, 1])\n\n        # Replace leftmost red with yellow\n        grid[min_red_row, min_red_col] = 4\n        \n        # expand to full width\n        for col in range(0, cols):\n            if col != min_red_col: # don't overwrite\n               grid[min_red_row, col] = 2\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the described rules.\"\"\"\n\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Find object coordinates\n    azure_coords = find_object(input_grid, 8)\n    red_coords = find_object(input_grid, 2)\n\n    # 1. Azure Object Extension\n    extend_azure(output_grid, azure_coords, red_coords)\n\n    # 2 & 3. Red Object Modification and Expansion\n    modify_red(output_grid, red_coords)\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2881,
    "candidates_token_count": 718,
    "total_token_count": 3599,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.536745,
  "response_file": "010-response.json"
}