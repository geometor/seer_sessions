{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Key Maroon Object:** Within the input grid, identify a *specific* maroon (9) object.  The selection criteria varies:\n    *   If there's only one maroon object, select it.\n    *   If there are multiple maroon objects, and one is a distinct, longest horizontal line at the bottom, select it.\n    *   If there's a connected maroon structure with a central vertical line, select the vertical line.\n2.  **Extract Dimensions:** Determine the dimensions (height and width) of the *selected* maroon object.\n3.  **Color Change:** Change the color of the selected maroon object to red (2).\n4.  **Create Output:** Create an output grid with the dimensions of the selected and recolored object, filled entirely with the red (2) color.\n\"\"\"\n\nimport numpy as np\n\ndef find_all_objects(grid, color):\n    # Find the coordinates of all cells with the specified color.\n    coords = np.argwhere(grid == color)\n    if coords.size == 0:\n        return []  # Return empty list if color not found\n\n    objects = []\n    visited = set()\n\n    def dfs(row, col, current_object):\n        if (row, col) in visited or not (0 <= row < grid.shape[0] and 0 <= col < grid.shape[1]) or grid[row, col] != color:\n            return\n        visited.add((row, col))\n        current_object.append((row, col))\n        dfs(row + 1, col, current_object)\n        dfs(row - 1, col, current_object)\n        dfs(row, col + 1, current_object)\n        dfs(row, col - 1, current_object)\n\n    for row, col in coords:\n        if (row, col) not in visited:\n            current_object = []\n            dfs(row, col, current_object)\n            objects.append(current_object)\n    return objects\n\ndef get_object_dimensions(obj_coords):\n    if not obj_coords:\n        return 0, 0\n    rows, cols = zip(*obj_coords)\n    height = max(rows) - min(rows) + 1\n    width = max(cols) - min(cols) + 1\n    return height, width\n\ndef get_longest_horizontal_line(objects):\n    longest_line = []\n    max_width = 0\n    for obj in objects:\n        rows, cols = zip(*obj)\n        min_row, max_row = min(rows), max(rows)\n        min_col, max_col = min(cols), max(cols)\n        height = max_row - min_row + 1\n        width = max_col - min_col + 1\n        if height == 1 and width > max_width:  # Check if it's a horizontal line\n                max_width = width\n                longest_line = obj\n    return longest_line\n\n\ndef get_central_vertical_line(objects, input_grid):\n   #Find central vertical line. This one is the trickiest.\n    best_vertical_line = []\n    max_height = 0\n\n    for obj in objects:\n        rows, cols = zip(*obj)\n        min_row, max_row = min(rows), max(rows)\n        min_col, max_col = min(cols), max(cols)\n        height = max_row - min_row + 1\n        width = max_col - min_col + 1\n\n        # prioritize height and centeredness\n        if width == 1:  # Check if it's a vertical line\n            obj_center_col = (min_col + max_col) / 2\n            grid_center_col = input_grid.shape[1] / 2\n            if height > max_height:\n                max_height = height\n                best_vertical_line = obj\n    return best_vertical_line\n\n\ndef transform(input_grid):\n    # Find all maroon objects.\n    maroon_objects = find_all_objects(input_grid, 9)\n\n    if not maroon_objects:  # Handle cases with no maroon objects\n        return np.zeros((0, 0), dtype=int)\n\n    # Select the key maroon object.\n    if len(maroon_objects) == 1:\n        key_object = maroon_objects[0]\n    else:\n        longest_horizontal = get_longest_horizontal_line(maroon_objects)\n        if longest_horizontal:\n            key_object = longest_horizontal\n        else:\n            central_vertical = get_central_vertical_line(maroon_objects, input_grid)\n            if central_vertical:\n                key_object = central_vertical\n            else:\n                # default to first if the others don't exist.  This might\n                # happen if there are multiple small objects.\n                key_object = maroon_objects[0]\n\n    # Get dimensions of the key object.\n    height, width = get_object_dimensions(key_object)\n\n    # Create output grid and fill with red (2).\n    output_grid = np.full((height, width), 2, dtype=int)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3102,
    "candidates_token_count": 1211,
    "total_token_count": 4313,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.695138,
  "response_file": "006-response.json"
}