{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Non-Zero Clusters:** Find all clusters of adjacent, non-zero pixels. A cluster is defined as one or more non-zero pixels that are directly adjacent (not diagonally) to each other in the input grid.\n2. **Shift Down:** Move clusters of adjacent, non-zero, pixels down in the grid, 1 row at time.\n3. **Consolidate:** Merge moved pixels to the end of the non-zero, adjacent pixels.\n4. **Fill with Zeroes**: All other pixels in the grid are zero (white).\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, r, c):\n    neighbors = []\n    rows, cols = grid.shape\n    if r > 0 and grid[r-1, c] != 0:\n        neighbors.append((r - 1, c))\n    if r < rows - 1 and grid[r+1, c] != 0:\n        neighbors.append((r + 1, c))\n    if c > 0 and grid[r, c-1] != 0:\n        neighbors.append((r, c - 1))\n    if c < cols - 1 and grid[r, c+1] != 0:\n        neighbors.append((r, c + 1))\n    return neighbors\n\ndef find_clusters(grid):\n    clusters = []\n    visited = set()\n    rows, cols = grid.shape\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and (r, c) not in visited:\n                cluster = []\n                queue = [(r, c)]\n                visited.add((r, c))\n\n                while queue:\n                    curr_r, curr_c = queue.pop(0)\n                    cluster.append((curr_r, curr_c, grid[curr_r, curr_c]))\n                    for nr, nc in get_neighbors(grid, curr_r, curr_c):\n                        if (nr, nc) not in visited:\n                            visited.add((nr, nc))\n                            queue.append((nr, nc))\n                clusters.append(cluster)\n    return clusters\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.zeros_like(input_grid)\n    \n    # Find clusters in the input grid\n    clusters = find_clusters(input_grid)\n\n    # Shift and consolidate clusters\n    for cluster in clusters:\n            #sort by row, makes it easier\n            cluster.sort(key=lambda x: x[0])\n\n            for r, c, val in cluster:\n                #find rows where it can be moved\n                new_r = r\n                while new_r < input_grid.shape[0] -1 and output_grid[new_r + 1,c] == 0 and (input_grid[new_r+1,c] == 0 or (new_r+1,c) in [(cr,cc) for cr,cc,_ in cluster]):\n                    new_r += 1\n\n                output_grid[new_r,c] = val\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2139,
    "candidates_token_count": 726,
    "total_token_count": 2865,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.521697,
  "response_file": "014-response.json"
}