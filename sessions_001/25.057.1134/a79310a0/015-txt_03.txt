
    ```
    Input color counts: {0: 27, 8: 3}
    Output color counts: {0: 27, 2: 3}
    Input shape (5, 6)
    Output shape (5, 6)
    ```

*   **Observations:** A horizontal line of three azure pixels (8) is replaced by a horizontal line of three red pixels (2) one row below. All other pixels are white (0). The code works correctly for this case.

**Example 2**

*   **Input:**
    ```
    [[0 0 0 0 0 0 0]
     [0 8 8 8 0 0 0]
     [0 0 0 0 0 0 0]
     [0 0 0 0 0 1 0]
     [0 0 0 0 0 0 0]]
    ```
*   **Output:**
    ```
    [[0 0 0 0 0 0 0]
     [0 0 0 0 0 0 0]
     [0 2 2 2 0 0 0]
     [0 0 0 0 0 1 0]
     [0 0 0 0 0 0 0]]
    ```
    ```python
    import numpy as np

    input_grid = np.array([
        [0, 0, 0, 0, 0, 0, 0],
        [0, 8, 8, 8, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 0, 0, 0, 0]
    ])
    
    output_grid = np.array([
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0],
        [0, 2, 2, 2, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 0, 0, 0, 0]
    ])
    
    def count_colors(grid):
        unique, counts = np.unique(grid, return_counts=True)
        return dict(zip(unique, counts))
    
    print("Input color counts:", count_colors(input_grid))
    print("Output color counts:", count_colors(output_grid))
    print("Input shape", input_grid.shape)
    print("Output shape", output_grid.shape)
    ```

    ```
    Input color counts: {0: 31, 1: 1, 8: 3}
    Output color counts: {0: 31, 1: 1, 2: 3}
    Input shape (5, 7)
    Output shape (5, 7)
    ```

*   **Observations:**  Similar to Example 1, a line of three azure pixels (8) becomes a line of three red pixels (2) in the row below. Critically, the blue pixel (1) is *unchanged*. The initial program would incorrectly set this blue pixel to white.

**Example 3**

*   **Input:**
    ```
    [[0 0 0 0 0 0]
     [8 8 8 0 0 0]
     [8 8 8 0 0 0]
     [0 0 0 0 0 0]
     [0 0 0 0 0 0]]
    ```
*   **Output:**
    ```
    [[0 0 0 0 0 0]
     [0 0 0 0 0 0]
     [2 2 2 0 0 0]
     [2 2 2 0 0 0]
     [0 0 0 0 0 0]]
    ```

*   Code execution and metrics

    ```python
    import numpy as np
    
    input_grid = np.array([
    [0, 0, 0, 0, 0, 0],
    [8, 8, 8, 0, 0, 0],
    [8, 8, 8, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0]
    ])
    
    output_grid = np.array([
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [2, 2, 2, 0, 0, 0],
    [2, 2, 2, 0, 0, 0],
    [0, 0, 0, 0, 0, 0]
    ])
    
    def count_colors(grid):
        unique, counts = np.unique(grid, return_counts=True)
        return dict(zip(unique, counts))
    
    print("Input color counts:", count_colors(input_grid))
    print("Output color counts:", count_colors(output_grid))
    print("Input shape", input_grid.shape)
    print("Output shape", output_grid.shape)
    
    
    ```

    ```
    Input color counts: {0: 24, 8: 6}
    Output color counts: {0: 24, 2: 6}
    Input shape (5, 6)
    Output shape (5, 6)
    ```

*   **Observations:** There are *two* lines of three azure pixels. Both are transformed to red and moved down one row. This highlights that the transformation applies to *all* instances of the three-azure-pixel line.

**YAML Facts**
