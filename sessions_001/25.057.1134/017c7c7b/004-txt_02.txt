import numpy as np

example_data = [
    ([[5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 1, 1, 5, 5, 5], [5, 5, 5, 1, 1, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5]], [[5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 1, 1, 5, 5, 5], [5, 5, 5, 1, 1, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2]]),
    ([[5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5], [5, 5, 1, 1, 5, 5], [5, 5, 1, 1, 5, 5], [5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5]], [[5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5], [5, 5, 1, 1, 5, 5], [5, 5, 1, 1, 5, 5], [5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5], [2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2]]),
    ([[5, 1, 1, 5, 5, 5, 5], [5, 1, 1, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5]], [[5, 1, 1, 5, 5, 5, 5], [5, 1, 1, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5], [2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2]])
]

def analyze_grids(input_grid, output_grid):
    input_grid = np.array(input_grid)
    output_grid = np.array(output_grid)
    input_shape = input_grid.shape
    output_shape = output_grid.shape
    blue_positions_input = np.argwhere(input_grid == 1).tolist()
    red_positions_output = np.argwhere(output_grid == 2).tolist()
    added_rows = output_shape[0] - input_shape[0]
    added_cols = output_shape[1] - input_shape[1]

    # Detect blue rectangle
    if blue_positions_input:
        min_row = min(pos[0] for pos in blue_positions_input)
        max_row = max(pos[0] for pos in blue_positions_input)
        min_col = min(pos[1] for pos in blue_positions_input)
        max_col = max(pos[1] for pos in blue_positions_input)
        blue_rect_height = max_row - min_row + 1
        blue_rect_width = max_col - min_col + 1
    else:
        blue_rect_height = 0
        blue_rect_width = 0

    return {
        "input_shape": input_shape,
        "output_shape": output_shape,
        "blue_positions_input": blue_positions_input,
        "red_positions_output": red_positions_output,
        "added_rows": added_rows,
        "added_cols": added_cols,
        "blue_rect_height": blue_rect_height,
        "blue_rect_width": blue_rect_width,
    }

analysis_results = []
for i, (input_grid, output_grid) in enumerate(example_data):
    result = analyze_grids(input_grid, output_grid)
    analysis_results.append(f"Example {i+1}:\n{result}")

print("\n".join(analysis_results))