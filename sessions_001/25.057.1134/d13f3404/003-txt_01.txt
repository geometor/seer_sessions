import numpy as np

def transform(input_grid):
    # initialize output_grid with double the dimensions, filled with white (0)
    input_rows, input_cols = len(input_grid), len(input_grid[0])
    output_rows, output_cols = 2 * input_rows, 2 * input_cols
    output_grid = np.zeros((output_rows, output_cols), dtype=int)

    # iterate through each pixel of the input grid
    for i in range(input_rows):
        for j in range(input_cols):
            pixel_color = input_grid[i][j]
            # if the pixel is not white
            if pixel_color != 0:
                # calculate the starting position in the output grid (doubled coordinates)
                start_row, start_col = 2 * i, 2 * j
                # draw a diagonal line of the same color
                row, col = start_row, start_col
                while row < output_rows and col < output_cols:
                    output_grid[row][col] = pixel_color
                    row += 1
                    col += 1

    return output_grid

task_id = "6d75e8bb"

import json
with open(f'{task_id}.json', 'r') as f:
  task = json.load(f)

train_examples = task['train']
test_examples = task['test']

def are_grids_equal(grid1, grid2):
  return np.array_equal(grid1, grid2)
    
print(f"Train Set Results:")
for i, example in enumerate(train_examples):
    input_grid = np.array(example['input'])
    output_grid = np.array(example['output'])
    transformed_grid = transform(input_grid)
    grids_equal = are_grids_equal(transformed_grid, output_grid)
    print(f"Example {i + 1}:")
    print(f"  Input shape: {input_grid.shape}")
    print(f"  Output shape: {output_grid.shape}")
    print(f"  Transformed shape: {transformed_grid.shape}")
    print(f"  Correct? {grids_equal}")
    if not grids_equal:
      print("Transformed:")
      print(transformed_grid)
      print("Expected:")
      print(output_grid)