def analyze_example(input_grid, expected_output_grid, actual_output_grid):
    input_dims = input_grid.shape
    expected_output_dims = expected_output_grid.shape
    actual_output_dims = actual_output_grid.shape if actual_output_grid is not None else None

    input_azure = np.where(input_grid == 8)
    expected_output_azure = np.where(expected_output_grid == 8)
    actual_output_azure = np.where(actual_output_grid == 8) if actual_output_grid is not None else None
    
    input_colors_count = {}
    for i in range(10):
        input_colors_count[i] = np.sum(input_grid == i)
        
    output_colors_count = {}
    for i in range(10):
        output_colors_count[i] = np.sum(expected_output_grid == i)

    return {
        "input_dims": input_dims,
        "expected_output_dims": expected_output_dims,
        "actual_output_dims": actual_output_dims,
        "input_azure_positions": list(zip(input_azure[0].tolist(), input_azure[1].tolist())),
        "expected_output_azure_positions": list(zip(expected_output_azure[0].tolist(), expected_output_azure[1].tolist())),
        "actual_output_azure_positions": list(zip(actual_output_azure[0].tolist(), actual_output_azure[1].tolist())) if actual_output_grid is not None else None,
        "input_colors_count":input_colors_count,
        "output_colors_count":output_colors_count,
    }

#Dummy data provided in problem, simulating the grids, not available.
example_data = [
    {
      "input":np.array([[8,0,0,8]]),
      "output":np.array([[8, 0, 0, 0, 0, 0, 8],
                         [0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0],
                         [8, 0, 0, 0, 0, 0, 8]]),
      "actual":None
    },
    {
      "input":np.array([[8,0,8]]),
      "output": np.array([[8, 0, 0, 0, 0, 8],
                          [0, 0, 0, 0, 0, 0],
                          [0, 0, 0, 0, 0, 0],
                          [8, 0, 0, 0, 0, 8]]),
       "actual":None
    },
    {
      "input":  np.array([[0,8,0,0],
                          [8,0,0,0]]),
      "output":  np.array([[0, 0, 0, 0, 0, 0, 8],
                           [0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0],
                           [8, 0, 0, 0, 0, 0, 0]]),
       "actual":None
    }
]

results = []
for example in example_data:
    if example['actual'] is None:
       example['actual'] = transform(example['input'])
    results.append(analyze_example(example['input'], example['output'], example['actual']))

for i, res in enumerate(results):
    print(f"Example {i+1}:")
    print(f"  Input Dimensions: {res['input_dims']}")
    print(f"  Expected Output Dimensions: {res['expected_output_dims']}")
    print(f"  Actual Output Dimensions: {res['actual_output_dims']}")
    print(f"  Input Azure Positions: {res['input_azure_positions']}")
    print(f"  Expected Output Azure Positions: {res['expected_output_azure_positions']}")
    print(f"  Actual Output Azure Positions: {res['actual_output_azure_positions']}")
    print(f"  Input colors count: {res['input_colors_count']}")
    print(f"  Output colors count: {res['output_colors_count']}")
    print("-" * 20)