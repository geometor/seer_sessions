{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nExtract a subgrid from the input, remove white pixels, and reconstruct the output grid, \npreserving the relative positions of red and blue pixels within the bounding box.\n\"\"\"\n\nimport numpy as np\n\ndef find_bounding_box(grid):\n    \"\"\"Find the bounding box of non-white pixels.\"\"\"\n    rows = np.any(grid != 0, axis=1)\n    cols = np.any(grid != 0, axis=0)\n    min_row, max_row = np.where(rows)[0][[0, -1]]\n    min_col, max_col = np.where(cols)[0][[0, -1]]\n    return min_row, max_row, min_col, max_col\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by extracting a subgrid, removing white pixels,\n    and reconstructing a new grid based on relative positions of non-white pixels.\n    \"\"\"\n    # 1. Identify the Bounding Box\n    min_row, max_row, min_col, max_col = find_bounding_box(input_grid)\n\n    # 2. Extract Subgrid\n    subgrid = input_grid[min_row:max_row+1, min_col:max_col+1]\n\n    # 3. Record Positions and Values (relative to the bounding box)\n    non_white_indices = np.argwhere(subgrid != 0)\n    non_white_values = subgrid[subgrid != 0]\n\n    # 4. Remove White (implicitly done by recording only non-white indices/values)\n\n    # 5. Reconstruct Output: Determine output grid size and populate\n    if len(non_white_indices) > 0:  #check if non-white pixels\n        #find min/max of non-white indices\n        min_output_row = np.min(non_white_indices[:, 0])\n        max_output_row = np.max(non_white_indices[:, 0])\n        min_output_col = np.min(non_white_indices[:, 1])\n        max_output_col = np.max(non_white_indices[:, 1])\n\n        #calc output grid dimensions\n        output_height = max_output_row - min_output_row + 1\n        output_width = max_output_col - min_output_col + 1\n\n        #initialize output grid filled with white (0)\n        output_grid = np.zeros((output_height, output_width), dtype=int)\n    \n        #adjust non-white indices to be relative to the min row/col\n        adjusted_indices = non_white_indices - [min_output_row, min_output_col]\n        \n        #populate output grid\n        for (row, col), value in zip(adjusted_indices, non_white_values):\n            output_grid[row, col] = value\n    else:\n        output_grid = np.array([[]], dtype=int)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3304,
    "candidates_token_count": 695,
    "total_token_count": 3999,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.670911,
  "response_file": "012-response.json"
}