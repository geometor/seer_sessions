import numpy as np

def describe_grid(grid, grid_name="Grid"):
    rows, cols = grid.shape
    unique_colors = np.unique(grid)
    color_counts = {color: np.sum(grid == color) for color in unique_colors}
    print(f"{grid_name}:")
    print(f"  Shape: {rows}x{cols}")
    print(f"  Unique Colors: {unique_colors}")
    print(f"  Color Counts: {color_counts}")
    print(grid)

# Example usage (replace with actual grids)
example_grids = {
 'train_input_0':  np.array([[6, 6, 6, 6, 6, 6, 6, 6, 0, 6, 6, 6],
        [6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 6, 6],
        [6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 6],
        [6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0],
        [6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 6],
        [6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 6, 6],
        [6, 6, 6, 6, 6, 6, 0, 0, 0, 6, 6, 6],
        [6, 6, 6, 6, 6, 6, 6, 0, 6, 6, 6, 6]]),
 'train_output_0': np.array([[6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],
        [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],
        [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],
        [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],
        [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],
        [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],
        [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],
        [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]]),
    'train_input_1': np.array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
        [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]),
    'train_output_1': np.array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]),
 'train_input_2': np.array([[8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
        [8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
        [8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
        [8, 8, 8, 0, 0, 0, 0, 8, 8, 8],
        [8, 8, 0, 0, 0, 0, 0, 0, 8, 8],
        [8, 8, 8, 0, 0, 0, 0, 8, 8, 8],
        [8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
        [8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
        [8, 8, 8, 8, 8, 8, 8, 8, 8, 8]]),
 'train_output_2': np.array([[8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
        [8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
        [8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
        [8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
        [8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
        [8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
        [8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
        [8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
        [8, 8, 8, 8, 8, 8, 8, 8, 8, 8]]),
 'train_input_3': np.array([[5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5],
       [0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0],
       [5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5],
       [0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0],
       [5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5],
       [0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0],
       [5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5],
       [0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0],
       [5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5],
       [0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0]]),
 'train_output_3': np.array([[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]])
}

for grid_name, grid in example_grids.items():
    describe_grid(grid, grid_name)