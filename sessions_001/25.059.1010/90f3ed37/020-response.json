{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe input grid is divided into two regions. The top region has a checkerboard pattern.\nThe bottom region is mostly white. The checkerboard pattern is extended into the\nbottom region, replacing white pixels with a color determined by the top region.\nOther colors are preserved.\n\"\"\"\n\nimport numpy as np\n\ndef get_checkerboard_colors(input_grid, transition_row):\n    \"\"\"\n    Identifies the two colors used in the checkerboard pattern.\n    Assumes the checkerboard pattern is present in the rows above transition_row.\n    \"\"\"\n    colors = set()\n    for r in range(min(2, transition_row)):  # Check first two rows, or fewer if transition_row is small\n        for c in range(input_grid.shape[1]):\n            color = input_grid[r, c]\n            if color != 0:  # Ignore white\n                colors.add(color)\n            if len(colors) == 2:\n                return list(colors)\n    return list(colors)  # Return whatever colors were found\n\ndef get_opposite_color(grid, r, c, colors):\n    \"\"\"\n    Determines the opposite color in a checkerboard pattern.\n    \"\"\"\n    if r > 0:\n        above_color = grid[r-1, c]\n        if above_color in colors:\n          return colors[0] if above_color == colors[1] else colors[1]\n\n    if c > 0:\n      left_color = grid[r,c-1]\n      if left_color in colors:\n        return colors[0] if left_color == colors[1] else colors[1]\n        \n    return colors[0]\n    \n\ndef find_transition_row(input_grid):\n    \"\"\"\n    Finds the row where the checkerboard pattern ends.\n    \"\"\"\n    rows, cols = input_grid.shape\n    for r in range(rows - 1):\n        # Check if the current row has a checkerboard pattern, but the next one doesn't.  This is\n        # a simplification, but captures the essence of the transition.\n        checkerboard_row = True\n        for c in range(cols - 1):\n            if input_grid[r, c] == input_grid[r, c + 1] and input_grid[r,c] != 0:\n                checkerboard_row = False\n                break\n        \n        next_row_mostly_white = True\n        non_white_count = 0\n        for c in range(cols):\n            if input_grid[r+1,c] != 0:\n                non_white_count +=1\n        if non_white_count > cols//2: # check if mostly not white\n            next_row_mostly_white = False\n\n        if checkerboard_row and next_row_mostly_white:\n            return r + 1\n    return rows  # If no transition found, assume it's the last row\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by extending a checkerboard pattern from the top\n    region to the bottom region, replacing white pixels.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = output_grid.shape\n\n    # Determine the transition row.\n    transition_row = find_transition_row(input_grid)\n\n    # Get the checkerboard colors\n    checkerboard_colors = get_checkerboard_colors(input_grid, transition_row)\n    if len(checkerboard_colors) != 2:\n      # default if can't determine - use previous\n      checkerboard_colors = [1,8]\n\n    # Iterate through the bottom region and apply the checkerboard pattern.\n    for r in range(transition_row, rows):\n        for c in range(cols):\n            # Check for white pixels and propagate the checkerboard.\n            if output_grid[r, c] == 0:\n                output_grid[r, c] = get_opposite_color(output_grid, r, c, checkerboard_colors)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2964,
    "candidates_token_count": 938,
    "total_token_count": 3902,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.879388,
  "response_file": "020-response.json"
}