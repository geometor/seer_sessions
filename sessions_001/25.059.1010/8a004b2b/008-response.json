{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Crop:** Remove the outer rows and columns of the input grid that consist entirely of white (0) pixels, stopping when a non-white pixel in any row or column is met.\n2.  **Condense Blue:** Within the cropped region, locate all blue (1) squares. If multiple blue squares are adjacent horizontally or vertically, condense or connect those. Horizontal blue blocks attempt to connect by filling a line between the blocks if all colors inbetween are white. Vertical condensation simply merges contiguous vertically aligned blocks. Diagonal and isolated squares do not get condensed.\n3. **Preserve other colors:** Other colored squares (red, green, yellow) are preserved from the cropped input to the output without modification to position or dimension, in the same absolute positions relative to each other.\n\"\"\"\n\nimport numpy as np\n\ndef crop_grid(grid):\n    rows, cols = grid.shape\n    top, bottom, left, right = 0, rows, 0, cols\n\n    # Find top boundary\n    for i in range(rows):\n        if np.any(grid[i, :] != 0):\n            top = i\n            break\n\n    # Find bottom boundary\n    for i in range(rows - 1, -1, -1):\n        if np.any(grid[i, :] != 0):\n            bottom = i + 1\n            break\n\n    # Find left boundary\n    for j in range(cols):\n        if np.any(grid[:, j] != 0):\n            left = j\n            break\n\n    # Find right boundary\n    for j in range(cols - 1, -1, -1):\n        if np.any(grid[:, j] != 0):\n            right = j + 1\n            break\n\n    return grid[top:bottom, left:right], top, left\n\ndef condense_blue(grid, top_offset, left_offset):\n    rows, cols = grid.shape\n    output_grid = np.copy(grid)\n    blue_pixels = np.argwhere(grid == 1)\n\n    # horizontal condensation\n    for r in range(rows):\n      blue_in_row = [bp for bp in blue_pixels if bp[0] == r]\n      if len(blue_in_row)>1:\n        blue_in_row.sort(key=lambda x: x[1])\n        for i in range(len(blue_in_row) - 1):\n          x1, y1 = blue_in_row[i]\n          x2, y2 = blue_in_row[i+1]\n          can_connect = True\n          for c in range(y1 + 1, y2):\n            if grid[r,c] != 0:\n              can_connect = False\n              break\n          if can_connect:\n            for c in range(y1,y2+1):\n              output_grid[r,c] = 1\n\n    # vertical condensation - check contiguous only\n    visited = np.zeros_like(grid, dtype=bool)\n    for r, c in blue_pixels:\n      if visited[r,c] == False:\n        visited[r,c] = True\n        count_v = 0\n        for i in range(r + 1, rows):\n            if grid[i, c] == 1:\n                count_v +=1\n                visited[i,c] = True\n            else:\n                break\n        if count_v>0: # there are vertical neighbors to merge\n          for v in range(count_v+1):\n            output_grid[r+v,c]=1\n\n    return output_grid\ndef transform(input_grid):\n    # Crop the input grid\n    cropped_grid, top_offset, left_offset = crop_grid(np.array(input_grid))\n\n    # Condense blue pixels and keep track of changes\n    condensed_grid = condense_blue(cropped_grid, top_offset, left_offset)\n\n    # initialize output\n    rows, cols = condensed_grid.shape\n    output_grid = np.zeros((rows,cols), dtype=int)\n    for r in range(rows):\n      for c in range(cols):\n        output_grid[r,c] = condensed_grid[r,c]\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2873,
    "candidates_token_count": 984,
    "total_token_count": 3857,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.711963,
  "response_file": "008-response.json"
}