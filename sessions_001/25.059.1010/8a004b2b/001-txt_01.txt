Example:

input:
0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 4 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 3 3 0 0 0 0 0 0 2 2 0 0 0 0
0 0 0 3 3 0 0 0 0 0 0 2 2 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0
0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 4 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 3 0 0 0 2 0 0 0 0 0 0 0 0 0 0
0 0 1 1 0 1 1 0 0 0 0 0 0 0 0 0 0
0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

1. The frame is defined by 4 at (0,2), (0, 15), (8, 2), (8, 15)

2. There are no corner pixels. Inner region goes from row 1 to 7, and cols 3 to 14. Size is 7 height, 12 width

3. Output will be of size 3 x 6

4. loop for row in range(1, 7, 2): # start, stop, step (exclusive of last, jump of 2)
      loop for col in range(3, 15, 2):
         region_to_reduce = input_grid[row:row+2, col:col+2]

5. For each region, combine adjacent cells:
Example 1:
row=1, col=3
0 0
0 0  -> output cell become 0
Example 2:
row=1, col=5
3 3
3 3 -> output cell is 3
Example 3:
row = 3, col= 7
0 0
1 1 -> output is 1
