{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Bounding Box:** Find the smallest rectangular region (bounding box) that encompasses all non-white (non-zero) pixels in the input grid. This is defined by the topmost, bottommost, leftmost, and rightmost non-white pixels.\n\n2.  **Horizontal Blue Connection:** Within the bounding box, locate all blue (1) rectangles. If two blue rectangles are on the same row and every pixel between them is white (0), connect them by filling the intermediate pixels with blue (1). If any pixel in between is not white, do not connect.\n\n3. **Vertical Blue Merge:** Within the bounding box, locate all blue (1) rectangles. If two blue rectangles are vertically contiguous, merge them.\n\n4.  **Preserve Other Colors:** All non-blue and non-white pixels within the bounding box must be preserved in the output grid, maintaining their exact relative positions and sizes.\n\n5.  **Output Grid:** Create a new grid based on the bounding box size. Populate it by performing the blue connection/merging, and preserving other colors as described above.\n\"\"\"\n\nimport numpy as np\n\ndef find_bounding_box(grid):\n    grid = np.array(grid)\n    rows, cols = grid.shape\n    top, bottom, left, right = rows, 0, cols, 0\n\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i, j] != 0:  # Non-white pixel found\n                top = min(top, i)\n                bottom = max(bottom, i)\n                left = min(left, j)\n                right = max(right, j)\n\n    return top, bottom + 1, left, right + 1  # Make inclusive\n\n\ndef connect_blue_horizontally(grid):\n    rows, cols = grid.shape\n    output_grid = np.copy(grid)\n    blue_pixels = np.argwhere(grid == 1)\n\n    for r in range(rows):\n        blue_in_row = [bp for bp in blue_pixels if bp[0] == r]\n        if len(blue_in_row) > 1:\n            blue_in_row.sort(key=lambda x: x[1])\n            for i in range(len(blue_in_row) - 1):\n                x1, y1 = blue_in_row[i]\n                x2, y2 = blue_in_row[i + 1]\n                can_connect = True\n                for c in range(y1 + 1, y2):\n                    if grid[r, c] != 0:\n                        can_connect = False\n                        break\n                if can_connect:\n                    for c in range(y1 + 1, y2):\n                        output_grid[r, c] = 1\n    return output_grid\n\ndef merge_blue_vertically(grid):\n    rows, cols = grid.shape\n    output_grid = np.copy(grid)\n    blue_pixels = np.argwhere(grid == 1)\n\n    visited = np.zeros_like(grid, dtype=bool)\n    for r, c in blue_pixels:\n      if visited[r,c] == False:\n        visited[r,c] = True\n        count_v = 0\n        for i in range(r + 1, rows):\n            if grid[i, c] == 1:\n                count_v +=1\n                visited[i,c] = True\n            else:\n                break\n        if count_v>0: # there are vertical neighbors to merge\n          for v in range(count_v+1):\n            output_grid[r+v,c]=1\n\n    return output_grid\n\ndef transform(input_grid):\n    # Find the bounding box\n    top, bottom, left, right = find_bounding_box(input_grid)\n    \n    # Extract the region of interest within bounding box\n    grid = np.array(input_grid)[top:bottom, left:right]\n\n    # Horizontal blue connection\n    grid = connect_blue_horizontally(grid)\n    \n    # Vertical blue merging\n    grid = merge_blue_vertically(grid)\n    \n\n    return grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5911,
    "candidates_token_count": 966,
    "total_token_count": 6877,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.240176,
  "response_file": "010-response.json"
}