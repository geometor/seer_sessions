{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Regions:** Locate all contiguous regions of non-zero colored pixels and single non-zero pixels within the input grid.\n2.  **Fill Rows:** For each row in the grid, find the right-most non-zero pixel. Fill all pixels to the left of this pixel with the same color.\n3.  **Reposition Yellow Pixels:** Find all single pixels of color 4 (yellow). Move these pixels to the corners of the grid. The corners are filled in this order: top-left, top-right, bottom-left, bottom-right. If there are more yellow pixels than corners, leave the extra yellow pixels in place. If a corner is not background, move to the next corner.\n\"\"\"\n\nimport numpy as np\n\ndef find_regions(grid):\n    \"\"\"Finds contiguous regions of non-zero colors and single non-zero pixels.\"\"\"\n    regions = []\n    visited = set()\n    rows, cols = grid.shape\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def dfs(r, c, color, region_type):\n        if (r, c) in visited or not is_valid(r, c) or grid[r, c] != color:\n            return []\n\n        visited.add((r, c))\n        region = [(r, c)]\n\n        neighbors = [(r + 1, c), (r - 1, c), (r, c + 1), (r, c - 1)]\n        for nr, nc in neighbors:\n            region.extend(dfs(nr, nc, color, region_type))\n        return region\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and (r, c) not in visited:\n                color = grid[r, c]\n                region = dfs(r, c, color, 'block' if any(grid[nr, nc] == color for nr, nc in [(r+1, c), (r-1, c), (r, c+1), (r, c-1)] if is_valid(nr,nc)) else 'single')\n                if(region):\n                    regions.append({'color': color, 'pixels': region, 'type': 'block' if len(region) > 1 else 'single'})\n    return regions\n\ndef fill_rows(grid):\n    \"\"\"Fills each row with the right-most non-zero color.\"\"\"\n    output_grid = np.copy(grid)\n    rows, cols = output_grid.shape\n    for r in range(rows):\n        rightmost_color = 0\n        for c in range(cols - 1, -1, -1):\n            if output_grid[r, c] != 0:\n                rightmost_color = output_grid[r, c]\n            elif rightmost_color != 0:\n                output_grid[r, c] = rightmost_color\n    return output_grid\n\ndef reposition_yellow_pixels(grid, regions):\n    \"\"\"Moves yellow (4) pixels to the corners of the grid.\"\"\"\n    output_grid = np.copy(grid)\n    yellow_pixels = [region['pixels'][0] for region in regions if region['color'] == 4 and region['type'] == 'single']\n    rows, cols = output_grid.shape\n    corners = [(0, 0), (0, cols - 1), (rows - 1, 0), (rows - 1, cols - 1)]\n\n    yellow_idx = 0\n    for cr, cc in corners:\n        if yellow_idx < len(yellow_pixels) and output_grid[cr,cc] == 0:\n            # Remove yellow pixel from its current position\n            output_grid[yellow_pixels[yellow_idx][0], yellow_pixels[yellow_idx][1]] = 0\n            # Place in new corner\n            output_grid[cr, cc] = 4\n            yellow_idx += 1\n\n    return output_grid\n\n\ndef transform(input_grid):\n    # Initialize output_grid\n    output_grid = np.copy(input_grid)\n\n    # 1. Find Regions\n    regions = find_regions(output_grid)\n\n    # 2. Fill Rows\n    output_grid = fill_rows(output_grid)\n    \n    # Need to find regions again after filling\n    regions = find_regions(output_grid)\n\n    # 3. Reposition Yellow Pixels\n    output_grid = reposition_yellow_pixels(output_grid, regions)\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4695,
    "candidates_token_count": 1056,
    "total_token_count": 5751,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.639501,
  "response_file": "022-response.json"
}