{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms a larger input grid with colored rectangular blocks into a smaller, condensed output grid, preserving the relative positions of the colored blocks. Combines overlapping colors, prioritizing yellow, red, green, and azure, in that order. The output grid's size is determined by the corners of the yellow blocks, if present, or by the minimum bounding rectangle of the other colored blocks.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"Finds distinct colored rectangular blocks in the grid.\"\"\"\n    objects = {}\n    visited = set()\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            color = grid[r, c]\n            if color != 0 and (r, c) not in visited:\n                if color not in objects:\n                    objects[color] = []\n                obj_coords = []\n                stack = [(r, c)]\n                while stack:\n                    curr_r, curr_c = stack.pop()\n                    if 0 <= curr_r < rows and 0 <= curr_c < cols and grid[curr_r, curr_c] == color and (curr_r, curr_c) not in visited:\n                        visited.add((curr_r, curr_c))\n                        obj_coords.append((curr_r, curr_c))\n                        stack.extend([(curr_r + 1, curr_c), (curr_r - 1, curr_c), (curr_r, curr_c + 1), (curr_r, curr_c - 1)])\n                objects[color].append(obj_coords)\n    return objects\n\ndef get_bounding_box(coords):\n    \"\"\"Calculates the bounding box of a list of coordinates.\"\"\"\n    min_r = min(c[0] for c in coords)\n    max_r = max(c[0] for c in coords)\n    min_c = min(c[1] for c in coords)\n    max_c = max(c[1] for c in coords)\n    return (min_r, min_c), (max_r, max_c)\n\ndef transform(input_grid):\n    # Find objects in the input grid\n    objects = find_objects(input_grid)\n\n    # Determine the output grid size and initialize\n    if 4 in objects:  # Yellow exists, use for bookends\n      yellow_coords = []\n      for obj in objects[4]: # account for multiple objects\n        yellow_coords.extend(obj)\n        \n      (min_r, min_c), (max_r, max_c) = get_bounding_box(yellow_coords)\n      output_height = max_r - min_r + 1\n      output_width = max_c - min_c + 1\n      output_grid = np.zeros((output_height, output_width), dtype=int)\n      \n      # adjust coordinates based on position of yellow objects\n      row_offset = min_r\n      col_offset = min_c\n\n    else:  # No yellow, base size on other objects\n      all_coords = []\n      for color in [2, 3, 8]:  # Consider only red, green, and azure\n          if color in objects:\n              for obj in objects[color]:\n                all_coords.extend(obj)\n      if all_coords:\n        (min_r, min_c), (max_r, max_c) = get_bounding_box(all_coords)\n        output_height = max_r - min_r + 1\n        output_width = max_c - min_c + 1\n        output_grid = np.zeros((output_height, output_width), dtype=int)\n        row_offset = min_r\n        col_offset = min_c\n      else:\n        return np.zeros((1,1), dtype=int) # nothing to draw\n\n    # Place objects with color priority\n    for color in [4, 2, 3, 8]:  # Iterate in priority order\n        if color in objects:\n            for obj_coords in objects[color]:\n                for r, c in obj_coords:\n                    # adjust the input grid coords to the output grid\n                    output_r = r - row_offset\n                    output_c = c - col_offset\n                    # check that adjusted coords are in bounds\n                    if 0 <= output_r < output_height and 0 <= output_c < output_width:\n                      output_grid[output_r, output_c] = color\n    \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3137,
    "candidates_token_count": 1048,
    "total_token_count": 4185,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.703296,
  "response_file": "016-response.json"
}