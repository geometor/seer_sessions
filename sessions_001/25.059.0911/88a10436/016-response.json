{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nRemove the grey pixel and move a complex of red, green, and blue pixels to the top, while preserving the structure.\n\"\"\"\n\nimport numpy as np\n\ndef find_cluster(grid, colors):\n    # Find the bounding box of a cluster of specified colors.\n    rows, cols = grid.shape\n    min_row, min_col = rows, cols\n    max_row, max_col = -1, -1\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] in colors:\n                min_row = min(min_row, r)\n                min_col = min(min_col, c)\n                max_row = max(max_row, r)\n                max_col = max(max_col, c)\n\n    if max_row == -1: # no cluster found\n      return None\n\n    cluster = []\n    for r in range(min_row, max_row + 1):\n        for c in range(min_col, max_col + 1):\n            if grid[r,c] in colors:\n              cluster.append( (r,c,grid[r,c]) )\n\n    return (min_row, min_col), cluster\n\ndef transform(input_grid):\n    # Initialize output grid with the same dimensions and default color (0).\n    output_grid = np.zeros_like(input_grid)\n\n    # Find the cluster of red, green, and blue pixels.\n    cluster_colors = [1, 2, 3]  # Blue, Red, Green\n    cluster_top_left, cluster = find_cluster(input_grid, cluster_colors)\n    \n    if cluster is None:\n      return output_grid\n\n    # Remove the gray pixel (5).\n    rows, cols = input_grid.shape\n    for r in range(rows):\n      for c in range(cols):\n        if input_grid[r,c] == 5:\n          input_grid[r,c] = 0\n          # print(f\"removed 5 at {r} {c}\")\n\n    # Calculate the vertical shift needed.\n    target_row = 1\n    target_col = 3\n    row_shift = target_row - cluster_top_left[0]\n    col_shift = target_col - cluster_top_left[1]\n    # print(f'shifting: row {row_shift} col {col_shift}')\n\n    # Move the cluster in the output grid.\n    for r,c,color in cluster:\n      new_r = r + row_shift\n      new_c = c + col_shift\n      if 0 <= new_r < rows and 0 <= new_c < cols:  # Check boundaries\n          output_grid[new_r, new_c] = color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2329,
    "candidates_token_count": 659,
    "total_token_count": 2988,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 27.612359,
  "response_file": "016-response.json"
}