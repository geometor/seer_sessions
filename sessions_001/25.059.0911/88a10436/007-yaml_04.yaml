observations:
  - example_0:
      input_colors: [black, gray]
      output_colors: [black]
      action: Remove gray pixels.
      objects:
        - object1:
            color: gray
            property: to_be_removed
        - object2:
            color: black
            property: to_be_kept
  - example_1:
      input_colors: [black, gray]
      output_colors: [black]
      action: Remove gray pixels.
      objects:
        - object1:
            color: gray
            property: to_be_removed
        - object2:
            color: black
            property: to_be_kept
  - example_2:
      input_colors: [red, green]
      output_colors: [green]
      action: Remove red pixels.
      objects:
        - object1:
            color: red
            property: to_be_removed
        - object2:
            color: green
            property: to_be_kept
  - example_3:
      input_colors: [blue, yellow]
      output_colors: [yellow]
      action: Remove blue pixels.
      objects:
          - object1:
              color: blue
              property: to_be_removed
          - object2:
              color: yellow
              property: to_be_kept
  - example_4:
      input_colors: [gray]
      output_colors: []
      action: Remove gray pixels.
      objects:
        - object1:
            color: gray
            property: to_be_removed
  - general_rule:
      action: "Remove the 'lowest' color present in the input, prioritizing gray if present. Other colors follow the sequence: blue, red, green, yellow, and so on, with the lowest numbered color being removed if gray isn't present."
      objects:
        - object_removed:
            property: "Lowest color, gray preferred"
        - object_kept:
            property: "All other colors"
