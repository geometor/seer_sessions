import numpy as np
from typing import List, Tuple, Dict, Any

def calculate_grid_stats(grid: np.ndarray) -> Dict[str, Any]:
    """Calculates statistics for a given grid.

    Args:
        grid: The input grid (2D numpy array).

    Returns:
        A dictionary containing grid statistics.
    """

    rows, cols = grid.shape
    unique_colors = np.unique(grid)
    num_unique_colors = len(unique_colors)
    color_counts = {int(color): int(np.sum(grid == color)) for color in unique_colors}

    return {
        "rows": rows,
        "cols": cols,
        "unique_colors": unique_colors.tolist(),
        "num_unique_colors": num_unique_colors,
        "color_counts": color_counts,
    }
def find_objects(grid):
    """Finds distinct objects in the grid."""
    objects = []
    visited = np.zeros_like(grid, dtype=bool)
    rows, cols = grid.shape

    def dfs(row, col, color, object_pixels):
        """Depth-first search to find contiguous pixels of the same color."""
        if (row < 0 or row >= rows or col < 0 or col >= cols or
                visited[row, col] or grid[row, col] != color):
            return
        visited[row, col] = True
        object_pixels.append((row, col))
        dfs(row + 1, col, color, object_pixels)
        dfs(row - 1, col, color, object_pixels)
        dfs(row, col + 1, color, object_pixels)
        dfs(row, col - 1, color, object_pixels)

    for row in range(rows):
        for col in range(cols):
            if not visited[row, col]:
                object_pixels = []
                dfs(row, col, grid[row, col], object_pixels)
                if object_pixels:
                    objects.append({
                        'color': grid[row, col],
                        'pixels': object_pixels
                    })
    return objects

def compare_grids(grid1: np.ndarray, grid2: np.ndarray) -> Dict[str, Any]:
    """Compares two grids and returns a dictionary of differences.

    Args:
        grid1: The first grid (2D numpy array).
        grid2: The second grid (2D numpy array).

    Returns:
        A dictionary indicating if the grids are equal and the number of differing pixels.
    """

    equal = np.array_equal(grid1, grid2)
    if not equal:
      num_diff_pixels = np.sum(grid1 != grid2)
    else:
      num_diff_pixels = 0

    return {
        "equal": equal,
        "num_diff_pixels": num_diff_pixels,
    }
def analyze_example(input_grid, output_grid, predicted_output):
    input_stats = calculate_grid_stats(input_grid)
    output_stats = calculate_grid_stats(output_grid)
    predicted_output_stats = calculate_grid_stats(predicted_output)
    comparison_result = compare_grids(output_grid, predicted_output)
    input_objects = find_objects(input_grid)
    output_objects = find_objects(output_grid)
    predicted_objects = find_objects(predicted_output)

    return {
        'input_grid': input_stats,
        'output_grid': output_stats,
        'predicted_output': predicted_output_stats,
        'comparison': comparison_result,
        'input_objects': input_objects,
        'output_objects': output_objects,
        'predicted_objects': predicted_objects
    }

def pretty_print_analysis(analysis_results):
  print("Input Grid Stats:")
  for k,v in analysis_results['input_grid'].items():
    print(f"\t{k}: {v}")
  print("Output Grid Stats:")
  for k,v in analysis_results['output_grid'].items():
    print(f"\t{k}: {v}")
  print("Predicted Grid Stats:")
  for k,v in analysis_results['predicted_output'].items():
    print(f"\t{k}: {v}")
  print("Comparison Results:")
  for k,v in analysis_results['comparison'].items():
    print(f"\t{k}: {v}")

  print("Input Objects:")
  for obj in analysis_results['input_objects']:
      print(f"\tColor: {obj['color']}, Pixels: {obj['pixels']}")
  print("Output Objects:")
  for obj in analysis_results['output_objects']:
      print(f"\tColor: {obj['color']}, Pixels: {obj['pixels']}")
  print("Predicted Objects:")
  for obj in analysis_results['predicted_objects']:
    print(f"\tColor: {obj['color']}, Pixels: {obj['pixels']}")

example_data = []
i = 0
for input_grid, output_grid in zip(task.train_input_grids, task.train_output_grids):
    predicted_output = transform(input_grid)
    analysis = analyze_example(input_grid, output_grid, predicted_output)
    print(f"Example {i}:")
    pretty_print_analysis(analysis)
    example_data.append(analysis)
    i += 1