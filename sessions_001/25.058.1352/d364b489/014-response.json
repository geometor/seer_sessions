{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Copy Grid:** Create a copy of the input grid to serve as the output grid.\n2.  **Iterative Expansion:** Repeat the following steps until no changes occur:\n    *   Iterate through *every* cell in the *output* grid.\n    *   If a cell is blue (1), or was colored in a previous iteration:\n        *   Examine its four immediate neighbors (Up, Down, Left, Right) in that order.\n        *   If a neighbor is white (0) in the *output grid*:\n            *   Change the white neighbor's color based on its direction relative to the current cell:\n                *   Up: Change to 2 (red).\n                *   Down: Change to 6 (magenta).\n                *   Left: Change to 7 (orange).\n                *   Right: Change to 8 (azure).\n            *   Mark that a change has occurred during this iteration.\n3. Return the final output grid.\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, row, col):\n    \"\"\"Gets the valid neighbors of a cell (up, down, left, right) in order.\"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    if row > 0:\n        neighbors.append((row - 1, col, \"Up\"))  # Up\n    if row < rows - 1:\n        neighbors.append((row + 1, col, \"Down\"))  # Down\n    if col > 0:\n        neighbors.append((row, col - 1, \"Left\"))  # Left\n    if col < cols - 1:\n        neighbors.append((row, col + 1, \"Right\"))  # Right\n    return neighbors\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of input_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n    \n    # Color map for expansion\n    color_map = {\n        \"Up\": 2,\n        \"Down\": 6,\n        \"Left\": 7,\n        \"Right\": 8\n    }\n\n    changed = True\n    while changed:\n        changed = False\n        new_grid = np.copy(output_grid) # work on a copy during each iteration\n        for r in range(rows):\n            for c in range(cols):\n                # If the cell is NOT white (it is either blue or colored)\n                if output_grid[r,c] != 0:\n                    neighbors = get_neighbors(output_grid, r, c)\n                    for nr, nc, direction in neighbors:\n                        if output_grid[nr, nc] == 0:  # Check if neighbor is white in output\n                            new_grid[nr, nc] = color_map[direction]  # Apply color\n                            changed = True  # Mark that a change occurred\n        output_grid = new_grid\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4961,
    "candidates_token_count": 675,
    "total_token_count": 5636,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.357419,
  "response_file": "014-response.json"
}