{
  "response_report": [
    {
      "response_file": "001-response.json",
      "token_usage": {
        "prompt": 1913,
        "candidates": 577,
        "total": 2490,
        "cached": 0
      },
      "response_time": 8.418922
    },
    {
      "response_file": "002-response.json",
      "token_usage": {
        "prompt": 2352,
        "candidates": 358,
        "total": 2710,
        "cached": 0
      },
      "response_time": 5.007493
    },
    {
      "response_file": "003-response.json",
      "token_usage": {
        "prompt": 1609,
        "candidates": 1084,
        "total": 2693,
        "cached": 0
      },
      "response_time": 14.036873
    },
    {
      "response_file": "004-response.json",
      "token_usage": {
        "prompt": 2488,
        "candidates": 501,
        "total": 2989,
        "cached": 0
      },
      "response_time": 6.587386
    },
    {
      "response_file": "005-response.json",
      "token_usage": {
        "prompt": 1752,
        "candidates": 845,
        "total": 2597,
        "cached": 0
      },
      "response_time": 12.607444
    },
    {
      "response_file": "006-response.json",
      "token_usage": {
        "prompt": 2389,
        "candidates": 345,
        "total": 2734,
        "cached": 0
      },
      "response_time": 4.320601
    },
    {
      "response_file": "007-response.json",
      "token_usage": {
        "prompt": 1913,
        "candidates": 535,
        "total": 2448,
        "cached": 0
      },
      "response_time": 7.760341
    },
    {
      "response_file": "008-response.json",
      "token_usage": {
        "prompt": 2310,
        "candidates": 402,
        "total": 2712,
        "cached": 0
      },
      "response_time": 5.374276
    },
    {
      "response_file": "009-response.json",
      "token_usage": {
        "prompt": 1653,
        "candidates": 1472,
        "total": 3125,
        "cached": 0
      },
      "response_time": 19.448736
    },
    {
      "response_file": "010-response.json",
      "token_usage": {
        "prompt": 1697,
        "candidates": 8192,
        "total": 9889,
        "cached": 0
      },
      "response_time": 68.256548
    },
    {
      "response_file": "011-response.json",
      "token_usage": {
        "prompt": 9684,
        "candidates": 810,
        "total": 10494,
        "cached": 0
      },
      "response_time": 8.509319
    },
    {
      "response_file": "012-response.json",
      "token_usage": {
        "prompt": 2921,
        "candidates": 386,
        "total": 3307,
        "cached": 0
      },
      "response_time": 4.38803
    },
    {
      "response_file": "013-response.json",
      "token_usage": {
        "prompt": 1913,
        "candidates": 625,
        "total": 2538,
        "cached": 0
      },
      "response_time": 8.993147
    },
    {
      "response_file": "014-response.json",
      "token_usage": {
        "prompt": 2401,
        "candidates": 230,
        "total": 2631,
        "cached": 0
      },
      "response_time": 3.416272
    },
    {
      "response_file": "015-response.json",
      "token_usage": {
        "prompt": 1481,
        "candidates": 924,
        "total": 2405,
        "cached": 0
      },
      "response_time": 10.240655
    },
    {
      "response_file": "016-response.json",
      "token_usage": {
        "prompt": 2201,
        "candidates": 245,
        "total": 2446,
        "cached": 0
      },
      "response_time": 3.315176
    },
    {
      "response_file": "017-response.json",
      "token_usage": {
        "prompt": 1496,
        "candidates": 978,
        "total": 2474,
        "cached": 0
      },
      "response_time": 26.646152
    },
    {
      "response_file": "018-response.json",
      "token_usage": {
        "prompt": 2269,
        "candidates": 416,
        "total": 2685,
        "cached": 0
      },
      "response_time": 4.961603
    }
  ],
  "test_report": {
    "002-py_01-train": [
      {
        "example": 1,
        "input": "2 8 3 0 0 0 0\n8 3 0 0 0 0 0\n3 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0",
        "expected_output": "2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2",
        "transformed_output": "2 8 3 2 8 3 3\n8 3 0 2 8 3 2\n3 0 0 8 3 0 2\n2 8 3 3 0 0 8\n8 3 0 2 8 3 3\n3 0 0 8 3 0 2\n2 8 3 3 0 0 8",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 31,
        "percent_correct": 36.734693877551024
      },
      {
        "example": 2,
        "input": "0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 1\n0 0 0 0 0 1 2\n0 0 0 0 1 2 4\n0 0 0 1 2 4 0\n0 0 1 2 4 0 0",
        "expected_output": "2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2",
        "transformed_output": "0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 49,
        "percent_correct": 0.0
      },
      {
        "example": 3,
        "input": "0 0 0 0 8 3 0\n0 0 0 8 3 0 0\n0 0 8 3 0 0 0\n0 8 3 0 0 0 4\n8 3 0 0 0 4 0\n3 0 0 0 4 0 0\n0 0 0 4 0 0 0",
        "expected_output": "4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4",
        "transformed_output": "0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 8 0 0 0 0\n0 0 0 0 0 8 0\n0 0 0 0 0 0 0\n0 0 8 0 0 0 0\n0 0 0 0 0 8 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 47,
        "percent_correct": 4.081632653061225
      }
    ],
    "004-py_02-train": [
      {
        "example": 1,
        "input": "2 8 3 0 0 0 0\n8 3 0 0 0 0 0\n3 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0",
        "expected_output": "2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2",
        "transformed_output": "2 2 2 2 2 2 2\n8 8 8 8 8 8 8\n3 3 3 3 3 3 3\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 40,
        "percent_correct": 18.367346938775512
      },
      {
        "example": 2,
        "input": "0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 1\n0 0 0 0 0 1 2\n0 0 0 0 1 2 4\n0 0 0 1 2 4 0\n0 0 1 2 4 0 0",
        "expected_output": "2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2",
        "transformed_output": "0 0 0 0 0 0 0\n1 1 1 1 1 1 1\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n1 1 1 1 1 1 1\n2 2 2 2 2 2 2\n0 0 0 0 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 43,
        "percent_correct": 12.244897959183673
      },
      {
        "example": 3,
        "input": "0 0 0 0 8 3 0\n0 0 0 8 3 0 0\n0 0 8 3 0 0 0\n0 8 3 0 0 0 4\n8 3 0 0 0 4 0\n3 0 0 0 4 0 0\n0 0 0 4 0 0 0",
        "expected_output": "4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4",
        "transformed_output": "0 0 0 0 0 0 0\n8 8 8 8 8 8 8\n3 3 3 3 3 3 3\n0 0 0 0 0 0 0\n8 8 8 8 8 8 8\n3 3 3 3 3 3 3\n0 0 0 0 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 37,
        "percent_correct": 24.489795918367346
      }
    ],
    "006-py_03-train": [
      {
        "example": 1,
        "input": "2 8 3 0 0 0 0\n8 3 0 0 0 0 0\n3 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0",
        "expected_output": "2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2",
        "transformed_output": "0 0 0 0 0 0 0\n2 8 3 0 0 0 0\n8 3 0 0 0 0 0\n3 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 49,
        "percent_correct": 0.0
      },
      {
        "example": 2,
        "input": "0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 1\n0 0 0 0 0 1 2\n0 0 0 0 1 2 4\n0 0 0 1 2 4 0\n0 0 1 2 4 0 0",
        "expected_output": "2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2",
        "transformed_output": "0 0 1 2 4 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 1\n0 0 0 0 0 1 2\n0 0 0 0 1 2 4\n0 0 0 1 2 4 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 46,
        "percent_correct": 6.122448979591836
      },
      {
        "example": 3,
        "input": "0 0 0 0 8 3 0\n0 0 0 8 3 0 0\n0 0 8 3 0 0 0\n0 8 3 0 0 0 4\n8 3 0 0 0 4 0\n3 0 0 0 4 0 0\n0 0 0 4 0 0 0",
        "expected_output": "4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4",
        "transformed_output": "0 0 0 4 0 0 0\n0 0 0 0 8 3 0\n0 0 0 8 3 0 0\n0 0 8 3 0 0 0\n0 8 3 0 0 0 4\n8 3 0 0 0 4 0\n3 0 0 0 4 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 48,
        "percent_correct": 2.0408163265306123
      }
    ],
    "008-py_04-train": [
      {
        "example": 1,
        "input": "2 8 3 0 0 0 0\n8 3 0 0 0 0 0\n3 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0",
        "expected_output": "2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2",
        "transformed_output": "3 3 8 3 3 8 3\n3 8 3 3 8 3 3\n8 3 3 8 3 3 8\n3 3 8 3 3 8 3\n3 8 3 3 8 3 3\n8 3 3 8 3 3 8\n3 3 8 3 3 8 3",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 49,
        "percent_correct": 0.0
      },
      {
        "example": 2,
        "input": "0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 1\n0 0 0 0 0 1 2\n0 0 0 0 1 2 4\n0 0 0 1 2 4 0\n0 0 1 2 4 0 0",
        "expected_output": "2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2",
        "transformed_output": "2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2",
        "match": true,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": true,
        "pixels_off": 0,
        "percent_correct": 100.0
      },
      {
        "example": 3,
        "input": "0 0 0 0 8 3 0\n0 0 0 8 3 0 0\n0 0 8 3 0 0 0\n0 8 3 0 0 0 4\n8 3 0 0 0 4 0\n3 0 0 0 4 0 0\n0 0 0 4 0 0 0",
        "expected_output": "4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4",
        "transformed_output": "3 8 8 3 8 8 3\n8 8 3 8 8 3 8\n8 3 8 8 3 8 8\n3 8 8 3 8 8 3\n8 8 3 8 8 3 8\n8 3 8 8 3 8 8\n3 8 8 3 8 8 3",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 33,
        "percent_correct": 32.6530612244898
      }
    ],
    "009-py_05-train": [
      {
        "code_execution_error": "transform function not found"
      }
    ],
    "010-py_06-train": [
      {
        "code_execution_error": "transform function not found"
      }
    ],
    "011-py_07-train": [
      {
        "example": 1,
        "input": "2 8 3 0 0 0 0\n8 3 0 0 0 0 0\n3 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0",
        "expected_output": "2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2",
        "transformed_output": "1 8 3 0 0 0 0\n8 3 0 0 0 0 0\n3 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 44,
        "percent_correct": 10.204081632653061
      },
      {
        "example": 2,
        "input": "0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 1\n0 0 0 0 0 1 2\n0 0 0 0 1 2 4\n0 0 0 1 2 4 0\n0 0 1 2 4 0 0",
        "expected_output": "2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2",
        "transformed_output": "0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 1\n0 0 0 0 0 1 2\n0 0 0 0 1 2 4\n0 0 0 1 2 4 0\n0 0 1 1 4 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 38,
        "percent_correct": 22.448979591836736
      },
      {
        "example": 3,
        "input": "0 0 0 0 8 3 0\n0 0 0 8 3 0 0\n0 0 8 3 0 0 0\n0 8 3 0 0 0 4\n8 3 0 0 0 4 0\n3 0 0 0 4 0 0\n0 0 0 4 0 0 0",
        "expected_output": "4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4",
        "transformed_output": "0 0 0 0 8 3 0\n0 0 0 8 3 0 0\n0 0 8 3 0 0 0\n0 8 3 0 0 0 4\n8 3 0 0 0 4 0\n3 0 0 0 4 0 0\n0 0 0 4 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 34,
        "percent_correct": 30.612244897959183
      }
    ],
    "012-py_08-train": [
      {
        "example": 1,
        "input": "2 8 3 0 0 0 0\n8 3 0 0 0 0 0\n3 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0",
        "expected_output": "2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2",
        "transformed_output": "3 8 2 3 8 2 3\n8 2 3 8 2 3 8\n2 3 8 2 3 8 2\n3 8 2 3 8 2 3\n8 2 3 8 2 3 8\n2 3 8 2 3 8 2\n3 8 2 3 8 2 3",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 33,
        "percent_correct": 32.6530612244898
      },
      {
        "example": 2,
        "input": "0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 1\n0 0 0 0 0 1 2\n0 0 0 0 1 2 4\n0 0 0 1 2 4 0\n0 0 1 2 4 0 0",
        "expected_output": "2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2",
        "transformed_output": "2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2",
        "match": true,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": true,
        "pixels_off": 0,
        "percent_correct": 100.0
      },
      {
        "example": 3,
        "input": "0 0 0 0 8 3 0\n0 0 0 8 3 0 0\n0 0 8 3 0 0 0\n0 8 3 0 0 0 4\n8 3 0 0 0 4 0\n3 0 0 0 4 0 0\n0 0 0 4 0 0 0",
        "expected_output": "4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4",
        "transformed_output": "4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4",
        "match": true,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": true,
        "pixels_off": 0,
        "percent_correct": 100.0
      }
    ],
    "014-py_09-train": [
      {
        "example": 1,
        "input": "2 8 3 0 0 0 0\n8 3 0 0 0 0 0\n3 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0",
        "expected_output": "2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2",
        "transformed_output": "4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 17,
        "percent_correct": 65.3061224489796
      },
      {
        "example": 2,
        "input": "0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 1\n0 0 0 0 0 1 2\n0 0 0 0 1 2 4\n0 0 0 1 2 4 0\n0 0 1 2 4 0 0",
        "expected_output": "2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2",
        "transformed_output": "4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 49,
        "percent_correct": 0.0
      },
      {
        "example": 3,
        "input": "0 0 0 0 8 3 0\n0 0 0 8 3 0 0\n0 0 8 3 0 0 0\n0 8 3 0 0 0 4\n8 3 0 0 0 4 0\n3 0 0 0 4 0 0\n0 0 0 4 0 0 0",
        "expected_output": "4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4",
        "transformed_output": "4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4",
        "match": true,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": true,
        "pixels_off": 0,
        "percent_correct": 100.0
      }
    ],
    "016-py_10-train": [
      {
        "example": 1,
        "input": "2 8 3 0 0 0 0\n8 3 0 0 0 0 0\n3 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0",
        "expected_output": "2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2",
        "transformed_output": "4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 17,
        "percent_correct": 65.3061224489796
      },
      {
        "example": 2,
        "input": "0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 1\n0 0 0 0 0 1 2\n0 0 0 0 1 2 4\n0 0 0 1 2 4 0\n0 0 1 2 4 0 0",
        "expected_output": "2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2",
        "transformed_output": "4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 49,
        "percent_correct": 0.0
      },
      {
        "example": 3,
        "input": "0 0 0 0 8 3 0\n0 0 0 8 3 0 0\n0 0 8 3 0 0 0\n0 8 3 0 0 0 4\n8 3 0 0 0 4 0\n3 0 0 0 4 0 0\n0 0 0 4 0 0 0",
        "expected_output": "4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4",
        "transformed_output": "4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4",
        "match": true,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": true,
        "pixels_off": 0,
        "percent_correct": 100.0
      }
    ],
    "018-py_11-train": [
      {
        "example": 1,
        "input": "2 8 3 0 0 0 0\n8 3 0 0 0 0 0\n3 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0",
        "expected_output": "2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2",
        "transformed_output": "4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 17,
        "percent_correct": 65.3061224489796
      },
      {
        "example": 2,
        "input": "0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 1\n0 0 0 0 0 1 2\n0 0 0 0 1 2 4\n0 0 0 1 2 4 0\n0 0 1 2 4 0 0",
        "expected_output": "2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2",
        "transformed_output": "4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 49,
        "percent_correct": 0.0
      },
      {
        "example": 3,
        "input": "0 0 0 0 8 3 0\n0 0 0 8 3 0 0\n0 0 8 3 0 0 0\n0 8 3 0 0 0 4\n8 3 0 0 0 4 0\n3 0 0 0 4 0 0\n0 0 0 4 0 0 0",
        "expected_output": "4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4",
        "transformed_output": "4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4",
        "match": true,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": true,
        "pixels_off": 0,
        "percent_correct": 100.0
      }
    ]
  },
  "best_train_results": {
    "passed": 2,
    "total": 3
  },
  "best_test_results": {
    "passed": 0,
    "total": 0
  },
  "test_solved": false
}