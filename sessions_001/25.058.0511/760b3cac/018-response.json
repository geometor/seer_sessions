{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation involves identifying an azure (8) shape and a yellow (4) shape. The yellow shape is preserved. The original azure shape is removed. A new azure shape is created based on these rules: 1) If there's a yellow shape, and the row below it is empty, the new azure shape is placed there, with the width of the original azure shape. 2) If there's a yellow shape, and the row above it is empty, the new azure shape is placed there, with the width of the yellow shape.\n\"\"\"\n\nimport numpy as np\n\ndef find_shape(grid, color):\n    \"\"\"Finds the coordinates of a shape of a specific color.\"\"\"\n    coords = np.argwhere(grid == color)\n    return coords if coords.size > 0 else None\n\ndef get_shape_dimensions(coords):\n    \"\"\"Calculates the bounding box dimensions of a shape.\"\"\"\n    if coords is None:\n        return None\n    min_row, min_col = np.min(coords, axis=0)\n    max_row, max_col = np.max(coords, axis=0)\n    width = max_col - min_col + 1\n    height = max_row - min_row + 1\n    return {'min_row': min_row, 'max_row': max_row, 'min_col': min_col, 'max_col': max_col, 'width': width, 'height': height}\n\ndef is_row_empty(grid, row):\n    \"\"\"Checks if a given row is empty (all 0s).\"\"\"\n    return np.all(grid[row] == 0)\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the defined rules.\"\"\"\n    output_grid = np.copy(input_grid)\n\n    # Identify objects.\n    azure_coords = find_shape(input_grid, 8)\n    yellow_coords = find_shape(input_grid, 4)\n\n    # Preserve yellow shape.\n    if yellow_coords is not None:\n        for r, c in yellow_coords:\n            output_grid[r, c] = 4\n\n    # Remove original azure shape.\n    if azure_coords is not None:\n        for r, c in azure_coords:\n            output_grid[r, c] = 0\n\n    # Conditional azure placement.\n    if yellow_coords is not None:\n        yellow_dims = get_shape_dimensions(yellow_coords)\n        azure_dims = get_shape_dimensions(azure_coords)\n\n        row_below = yellow_dims['max_row'] + 1\n        row_above = yellow_dims['min_row'] - 1\n        \n        if row_below < output_grid.shape[0] and is_row_empty(output_grid, row_below):\n            # Place below, matching original azure width.\n            for c in range(azure_dims['min_col'], azure_dims['max_col'] + 1):\n                if 0 <= c < output_grid.shape[1]: # added bounds check\n                    output_grid[row_below, c] = 8\n        elif row_above >= 0 and is_row_empty(output_grid, row_above):\n            # Place above, matching yellow width.\n            for c in range(yellow_dims['min_col'], yellow_dims['max_col'] + 1):\n                output_grid[row_above, c] = 8\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5303,
    "candidates_token_count": 801,
    "total_token_count": 6104,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.474914,
  "response_file": "018-response.json"
}