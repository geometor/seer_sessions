import numpy as np

def analyze_grids(input_grid, output_grid, output_grid_computed):
    input_shape = input_grid.shape
    output_shape = output_grid.shape
    computed_output_shape = output_grid_computed.shape if output_grid_computed is not None else (0, 0)
    correct = np.array_equal(output_grid, output_grid_computed)

    return {
        'input_shape': input_shape,
        'output_shape': output_shape,
        'computed_output_shape': computed_output_shape,
        'correct': correct
    }

task_data = [
    {
        "input": np.array([[4, 4, 8, 0, 0, 8, 4, 4, 0, 8, 8, 8, 4, 4, 8],
                           [1, 1, 8, 0, 0, 8, 9, 9, 0, 8, 8, 8, 1, 1, 8],
                           [8, 8, 8, 9, 9, 8, 9, 9, 0, 8, 8, 8, 9, 9, 8],
                           [8, 8, 8, 9, 9, 8, 0, 0, 0, 8, 8, 8, 9, 9, 8],
                           [8, 8, 8, 0, 0, 8, 9, 9, 0, 8, 8, 8, 9, 9, 8]]),
        "output": np.array([[4, 0, 0, 4, 0, 8],
                            [1, 0, 0, 9, 0, 8],
                            [8, 9, 9, 9, 0, 8],
                            [8, 9, 9, 0, 0, 8],
                            [8, 0, 0, 9, 0, 8]]),
        "output_computed": np.array([[4, 0, 0, 4, 0],
                [1, 0, 0, 9, 0],
                [8, 9, 9, 9, 0],
                [8, 9, 9, 0, 0],
                [8, 0, 0, 9, 0]])
    },
     {
        "input": np.array([[4, 5, 7, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 1, 0, 7, 7, 9, 7, 8, 7, 7],
       [4, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 1, 0, 5, 5, 9, 5, 5, 5, 5],
       [4, 5, 7, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 1, 0, 7, 7, 9, 7, 8, 7, 7],
       [4, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 1, 0, 5, 5, 9, 5, 5, 5, 5],
       [4, 5, 7, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 1, 0, 7, 7, 9, 7, 8, 7, 7]]),
        "output": np.array([[4, 0, 1, 0, 9, 8],
       [4, 0, 1, 0, 9, 5],
       [4, 0, 1, 0, 9, 8],
       [4, 0, 1, 0, 9, 5],
       [4, 0, 1, 0, 9, 8]]),
        "output_computed": np.array([[4, 0, 1, 0, 9, 8],
       [4, 0, 1, 0, 9, 5],
       [4, 0, 1, 0, 9, 8],
       [4, 0, 1, 0, 9, 5],
       [4, 0, 1, 0, 9, 8]])
    },
    {
        "input": np.array([[4, 3, 3, 6, 3, 0, 3, 1, 3, 3, 3, 9, 3, 3, 7, 3, 3, 3, 8, 3, 3],
       [4, 3, 3, 6, 3, 0, 3, 1, 3, 3, 3, 9, 3, 3, 7, 3, 3, 3, 8, 3, 3],
       [4, 3, 3, 6, 3, 0, 3, 1, 3, 3, 3, 9, 3, 3, 7, 3, 3, 3, 8, 3, 3],
       [4, 3, 3, 6, 3, 0, 3, 1, 3, 3, 3, 9, 3, 3, 7, 3, 3, 3, 8, 3, 3],
       [4, 3, 3, 6, 3, 0, 3, 1, 3, 3, 3, 9, 3, 3, 7, 3, 3, 3, 8, 3, 3]]),
        "output": np.array([[4, 0, 1, 9, 8],
       [4, 0, 1, 9, 8],
       [4, 0, 1, 9, 8],
       [4, 0, 1, 9, 8],
       [4, 0, 1, 9, 8]]),
           "output_computed": np.array([[4, 0, 1, 9, 8],
       [4, 0, 1, 9, 8],
       [4, 0, 1, 9, 8],
       [4, 0, 1, 9, 8],
       [4, 0, 1, 9, 8]])
    }
]

results = [analyze_grids(ex["input"], ex["output"], ex["output_computed"]) for ex in task_data]
for i, res in enumerate(results):
    print(f"Example {i+1}:")
    print(f"  Input shape: {res['input_shape']}")
    print(f"  Output shape: {res['output_shape']}")
    print(f"  Computed output shape: {res['computed_output_shape']}")
    print(f"  Correct: {res['correct']}")