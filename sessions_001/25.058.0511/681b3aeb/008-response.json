{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation identifies distinct colored objects in the input grid, determines a bounding box encompassing these objects, and crops the input grid to this bounding box, rearranging the objects within a new, smaller grid.\n\"\"\"\n\nimport numpy as np\n\ndef get_objects(grid):\n    \"\"\"\n    Identifies and returns a list of distinct colored objects in the grid.\n    Each object is represented as a list of (row, col) coordinates.\n    \"\"\"\n    objects = {}\n    visited = set()\n    rows, cols = grid.shape\n\n    def dfs(row, col, color, obj):\n        if (row, col) in visited or row < 0 or row >= rows or col < 0 or col >= cols or grid[row, col] != color:\n            return\n        visited.add((row, col))\n        obj.append((row, col))\n        dfs(row + 1, col, color, obj)\n        dfs(row - 1, col, color, obj)\n        dfs(row, col + 1, color, obj)\n        dfs(row, col - 1, color, obj)\n\n    for row in range(rows):\n        for col in range(cols):\n            color = grid[row, col]\n            if color != 0 and (row, col) not in visited:\n                obj = []\n                dfs(row, col, color, obj)\n                if color not in objects:\n                    objects[color] = []\n                objects[color].append(obj)\n    return objects\n                \n\ndef bounding_box(objects):\n    \"\"\"\n    Calculates the smallest rectangular bounding box encompassing all objects.\n    Returns (min_row, min_col, max_row, max_col).\n    \"\"\"\n    min_row, min_col = float('inf'), float('inf')\n    max_row, max_col = float('-inf'), float('-inf')\n\n    for color, object_groups in objects.items():\n        for obj in object_groups:\n            for row, col in obj:\n                min_row = min(min_row, row)\n                min_col = min(min_col, col)\n                max_row = max(max_row, row)\n                max_col = max(max_col, col)\n    return min_row, min_col, max_row, max_col\n\ndef get_object_bounding_box(obj):\n    \"\"\"Calculates the bounding box for a single object.\"\"\"\n    min_row, min_col = float('inf'), float('inf')\n    max_row, max_col = float('-inf'), float('-inf')\n    for row, col in obj:\n        min_row = min(min_row, row)\n        min_col = min(min_col, col)\n        max_row = max(max_row, row)\n        max_col = max(max_col, col)\n    return min_row, min_col, max_row, max_col\n\n\ndef transform(input_grid):\n    # Identify distinct colored objects\n    objects = get_objects(input_grid)\n\n    # Determine the bounding box encompassing all objects\n    min_row, min_col, max_row, max_col = bounding_box(objects)\n    \n    # Determine dimension of new array\n    rows, cols = max_row - min_row + 1, max_col-min_col+1\n    output_grid = np.zeros((rows, cols), dtype=int)\n    \n    # sort by top left corner\n    sorted_objects = []\n    for color, obj_list in objects.items():\n        for obj in obj_list:\n           ob_min_row, ob_min_col, ob_max_row, ob_max_col = get_object_bounding_box(obj)\n           sorted_objects.append((color, obj, (ob_min_row, ob_min_col, ob_max_row, ob_max_col) ))\n\n    sorted_objects.sort(key=lambda x: (x[3][0], x[3][1])) # sort by topleft corner of each object's bounding box\n\n    \n    # blit object to output grid\n    # translate to new origin\n    # keep track of grid size\n    \n    \n    output_grid_rows = 0\n    output_grid_cols = 0\n    \n    for color, obj, obj_bb in sorted_objects:\n      # get object bounding box\n      ob_min_row, ob_min_col, ob_max_row, ob_max_col = obj_bb\n      \n      # blit object to grid\n      o_rows = ob_max_row - ob_min_row + 1\n      o_cols = ob_max_col - ob_min_col + 1\n\n      for r in range(o_rows):\n          for c in range(o_cols):\n              output_grid[r,c] = input_grid[ob_min_row+r, ob_min_col+c]\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 1684,
            "end_index": 1887,
            "uri": "https://github.com/waltman/advent-of-code-2022",
            "license_": ""
          },
          {
            "start_index": 2119,
            "end_index": 2298,
            "uri": "https://github.com/waltman/advent-of-code-2022",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2275,
    "candidates_token_count": 1160,
    "total_token_count": 3435,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 12.229834,
  "response_file": "008-response.json"
}