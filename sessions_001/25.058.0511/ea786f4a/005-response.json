{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentify the largest contiguous rectangle of a single, *non-black* color in the input grid. Create an output grid with the dimensions of the bounding box containing this rectangle. Copy the largest rectangle to the top-left corner of the output grid.\n\"\"\"\n\nimport numpy as np\n\ndef find_largest_rectangle(grid):\n    \"\"\"\n    Finds the largest rectangle of a single non-black color in a grid.\n    \"\"\"\n    grid = np.array(grid)\n    rows, cols = grid.shape\n    max_area = 0\n    best_rect = None\n\n    for color in np.unique(grid):\n        if color == 0:  # Skip black\n            continue\n\n        # Create a binary mask for the current color\n        color_mask = (grid == color)\n\n        # Find the largest rectangle within the binary mask\n        for r1 in range(rows):\n            for c1 in range(cols):\n                if color_mask[r1, c1]:\n                    for r2 in range(r1, rows):\n                        for c2 in range(c1, cols):\n                            if not color_mask[r1:r2+1, c1:c2+1].all():\n                                break  # Not a rectangle of the current color\n\n                            area = (r2 - r1 + 1) * (c2 - c1 + 1)\n                            if area > max_area:\n                                max_area = area\n                                best_rect = {\n                                    'color': color,\n                                    'top_left': (r1, c1),\n                                    'height': r2 - r1 + 1,\n                                    'width': c2 - c1 + 1,\n                                }\n    return best_rect\n\ndef transform(input_grid):\n    # Find the largest non-black rectangle\n    largest_rect = find_largest_rectangle(input_grid)\n\n    if largest_rect is None:\n        return [] # Return empty grid if no non-black rectangle is found\n\n    # Extract rectangle information\n    color = largest_rect['color']\n    top_left_row, top_left_col = largest_rect['top_left']\n    height = largest_rect['height']\n    width = largest_rect['width']\n\n    # Create the output grid\n    output_grid = np.full((height, width), color)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3955,
    "candidates_token_count": 544,
    "total_token_count": 4499,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 5.607779,
  "response_file": "005-response.json"
}