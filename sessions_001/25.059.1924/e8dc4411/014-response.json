{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentify all contiguous regions of green pixels in the input grid and expand\nthem downwards to the bottom of the grid, maintaining the original width of\neach region. If a green region is a single pixel, extend it downward by one.\n\"\"\"\n\nimport numpy as np\n\ndef get_green_regions(grid):\n    \"\"\"Identifies contiguous regions of green pixels.\"\"\"\n    green_coords = np.argwhere(grid == 3)\n    regions = []\n    visited = set()\n\n    def is_adjacent(coord1, coord2):\n        \"\"\"Checks if two coordinates are adjacent (horizontally or vertically).\"\"\"\n        return (abs(coord1[0] - coord2[0]) <= 1 and coord1[1] == coord2[1]) or \\\n               (abs(coord1[1] - coord2[1]) <= 1 and coord1[0] == coord2[0])\n\n    def dfs(coord, current_region):\n        \"\"\"Depth-first search to find all connected green pixels.\"\"\"\n        visited.add(tuple(coord))\n        current_region.append(coord)\n        for other_coord in green_coords:\n            if tuple(other_coord) not in visited and is_adjacent(coord, other_coord):\n                dfs(other_coord, current_region)\n\n    for coord in green_coords:\n        if tuple(coord) not in visited:\n            current_region = []\n            dfs(coord, current_region)\n            regions.append(current_region)\n\n    return regions\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of the input_grid\n    output_grid = np.copy(input_grid)\n    \n    # Find all green regions\n    green_regions = get_green_regions(input_grid)\n    \n    # Expand each green region downwards\n    for region in green_regions:\n        # Get the columns occupied by the region\n        cols = sorted(list(set([coord[1] for coord in region])))\n        \n        #find the highest row\n        topmost_row = min(coord[0] for coord in region)\n        \n        if len(region) == 1:\n            #if only 1 pixel, extend it by 1\n            if topmost_row + 1 < output_grid.shape[0]:\n                output_grid[topmost_row + 1, cols[0]] = 3\n        else:        \n            #expand down\n            for row in range(topmost_row, output_grid.shape[0]):\n                for col in cols:\n                    output_grid[row, col] = 3\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3604,
    "candidates_token_count": 604,
    "total_token_count": 4208,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.40802,
  "response_file": "014-response.json"
}