import numpy as np

def grid_info(grid):
    shape = grid.shape
    colors = np.unique(grid)
    return f"Shape: {shape}, Colors: {colors}"

def transform(input_grid):
    # initialize output_grid
    input_rows, input_cols = input_grid.shape
    output_rows, output_cols = (2 * input_rows) + 3, (2 * input_cols) + 3
    output_grid = np.zeros((output_rows, output_cols), dtype=int)
    
    # Add white border
    output_grid[:] = 0

    # fill remaining cells with azure (8)
    output_grid[1:output_rows-1, 1:output_cols-1] = 8

    # replace the original colors in the expanded grid, keeping the relative position
    for r in range(input_rows):
        for c in range(input_cols):
            output_grid[2*r + 2, 2*c + 2] = input_grid[r,c]


    return output_grid

task_data = {'train': [{'input': [[5]], 'output': [[0, 0, 0, 0, 0], [0, 8, 8, 8, 0], [0, 8, 5, 8, 0], [0, 8, 8, 8, 0], [0, 0, 0, 0, 0]]}, {'input': [[5, 5], [5, 5]], 'output': [[0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0], [0, 8, 5, 5, 8, 8, 0], [0, 8, 5, 5, 8, 8, 0], [0, 8, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0]]}, {'input': [[5, 5, 5], [5, 5, 5], [5, 5, 5]], 'output': [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 8, 0], [0, 8, 5, 5, 5, 8, 8, 8, 0], [0, 8, 5, 5, 5, 8, 8, 8, 0], [0, 8, 5, 5, 5, 8, 8, 8, 0], [0, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]}], 'test': [{'input': [[5, 5, 5, 5], [5, 5, 5, 5], [5, 5, 5, 5], [5, 5, 5, 5]], 'output': [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 8, 5, 5, 5, 5, 8, 8, 8, 8, 0], [0, 8, 5, 5, 5, 5, 8, 8, 8, 8, 0], [0, 8, 5, 5, 5, 5, 8, 8, 8, 8, 0], [0, 8, 5, 5, 5, 5, 8, 8, 8, 8, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}]}

reports = []
for i, pair in enumerate(task_data["train"]):
    input_grid = np.array(pair['input'])
    output_grid = np.array(pair['output'])
    predicted_output = transform(input_grid)
    comparison = np.array_equal(output_grid, predicted_output)

    report = f"""
Example {i + 1}:
Input Info: {grid_info(input_grid)}
Output Info: {grid_info(output_grid)}
Predicted Output Info: {grid_info(predicted_output)}
Match: {comparison}
"""
    reports.append(report)

print(*reports, sep='\n')