{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation rule is as follows:\n\n1.  **Initialization:** Create an output grid of the same dimensions as the input grid, initially filled with white pixels (value 0).\n\n2.  **Magenta Preservation:** For every pixel in the input grid, if the pixel is magenta (value 6), set the corresponding pixel in the output grid to magenta.\n\n3.  **Conditional Magenta Propagation:** If a pixel in the input grid is gray (value 5) *and* is diagonally adjacent to a magenta pixel, set the corresponding pixel in the output grid to magenta.\n\n4.  **Default to White:** All other pixels in the input grid, that means, pixels that are neither magenta, nor gray that are diagonally adjacent to a magenta pixel, set the corresponding pixels in the output grid to white (value 0). This includes all non-magenta colors and gray pixels that are not diagonally adjacent to any magenta pixels.\n\"\"\"\n\nimport numpy as np\n\ndef get_diagonally_adjacent_indices(row, col, height, width):\n    \"\"\"\n    Returns a list of valid diagonally adjacent indices to a given cell.\n    \"\"\"\n    adjacent_indices = []\n    for dr, dc in [(-1, -1), (-1, 1), (1, -1), (1, 1)]:\n        new_row, new_col = row + dr, col + dc\n        if 0 <= new_row < height and 0 <= new_col < width:\n            adjacent_indices.append((new_row, new_col))\n    return adjacent_indices\n\ndef transform(input_grid):\n    # initialize output_grid\n    input_grid = np.array(input_grid)\n    output_grid = np.zeros_like(input_grid)\n    height, width = input_grid.shape\n\n    # find magenta pixels\n    magenta_pixels = []\n    for r in range(height):\n        for c in range(width):\n            if input_grid[r,c] == 6:\n                magenta_pixels.append((r,c))\n\n\n    # change output pixels based on input\n    for r in range(height):\n        for c in range(width):\n            if input_grid[r,c] == 6:\n                # Magenta Preservation\n                output_grid[r,c] = 6\n            elif input_grid[r,c] == 5:\n                # Conditional Magenta Propagation\n                is_diagonally_adjacent = False\n                for mr, mc in magenta_pixels:\n                    if (r,c) in get_diagonally_adjacent_indices(mr, mc, height, width):\n                       is_diagonally_adjacent = True\n                       break\n\n                if is_diagonally_adjacent:\n                   output_grid[r,c] = 6\n                else:\n                    output_grid[r,c] = 0\n            else:\n                # Default to White\n                output_grid[r,c] = 0\n\n    return output_grid.tolist()\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2709,
    "candidates_token_count": 676,
    "total_token_count": 3385,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 62.648014,
  "response_file": "012-response.json"
}