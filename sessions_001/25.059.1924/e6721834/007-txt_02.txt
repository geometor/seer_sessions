def grid_to_string(grid):
    return '\n'.join([''.join(map(str, row)) for row in grid])

def analyze_example(example):
    input_grid = example['input']
    output_grid = example['output']
    predicted_grid = transform(input_grid)

    input_str = grid_to_string(input_grid)
    output_str = grid_to_string(output_grid)
    predicted_str = grid_to_string(predicted_grid)

    print(f"Example Analysis:")
    print(f"Input:\n{input_str}")
    print(f"Expected Output:\n{output_str}")
    print(f"Predicted Output:\n{predicted_str}")
    print(f"Input Dimensions: {len(input_grid)}x{len(input_grid[0])}")
    print(f"Output Dimensions: {len(output_grid)}x{len(output_grid[0])}")
    print(f"Predicted Dimensions: {len(predicted_grid)}x{len(predicted_grid[0])}")

    input_colors = set(np.array(input_grid).flatten())
    output_colors = set(np.array(output_grid).flatten())
    predicted_colors = set(np.array(predicted_grid).flatten())

    print(f"Input Colors: {input_colors}")
    print(f"Output Colors: {output_colors}")
    print(f"Predicted Colors: {predicted_colors}")
    print("---")

for i, example in enumerate(task["train"]):
  print(f"Example: {i}")
  analyze_example(example)

print("TEST")
analyze_example(task['test'][0])