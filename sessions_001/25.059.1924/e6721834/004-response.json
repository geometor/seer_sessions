{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Regions:** Divide the input grid into two primary regions based on the background color (azure and white, respectively, top and bottom).\n2.  **Isolate Foreground:** Within each region, identify all non-background colored pixels (the \"foreground\").\n3. **Move Foreground Up**: Within the first region the non-azure pixels are moved to the top rows starting with the non zero and are placed starting from the right hand side of the azure background, maintaining their relative horizontal positions.\n4. **Move Foregound Up.** Within the second region the non-white pixels are moved to the top rows starting with the non zero and are placed starting from the left hand side of the white background, maintaining their relative horizontal positions.\n5.  **Create Output:** The output grid consists of the moved foreground pixels on the 0-background.\n\"\"\"\n\nimport numpy as np\n\ndef get_regions(grid):\n    \"\"\"Divides the grid into regions based on background color changes.\"\"\"\n    # in this case we can look for the row with all 0's\n    \n    height = len(grid)\n    width = len(grid[0])\n    \n    empty_row = -1\n    for i in range(height):\n      is_empty = True\n      for j in range(width):\n        if grid[i][j] != 0:\n          is_empty = False\n          break\n      if is_empty:\n        empty_row = i\n        break\n\n    if empty_row == -1:\n        return [grid] # no split\n    else:\n      region1 = grid[:empty_row]\n      region2 = grid[empty_row:]\n      return region1, region2\n\ndef move_foreground(region, direction=\"left\"):\n    \"\"\"Moves non-background pixels to the top, maintaining relative order.\"\"\"\n    rows, cols = region.shape\n    background_color = region[0,0] # get background\n    if background_color==0:\n        background_color = region[-1,-1] # or last\n    foreground_pixels = []\n    \n    # get list of just the pixels that are not the background\n    for r in range(rows):\n        for c in range(cols):\n            if region[r, c] != background_color:\n                foreground_pixels.append((region[r, c], c))\n\n    # create a blank region to hold the shifted pixels\n    new_region = np.zeros((rows, cols), dtype=int)\n\n    # Sort by column to maintain horizontal order.  \n    foreground_pixels.sort(key=lambda x: x[1])\n    if direction == \"right\":\n        foreground_pixels.reverse()\n\n    # put them back in, but shifted up\n    pixel_index = 0\n    \n    target_row=0\n    if direction == \"right\":\n        target_col = cols-1\n    else:\n        target_col=0\n            \n    while pixel_index < len(foreground_pixels):\n      color, original_col = foreground_pixels[pixel_index]\n      \n      new_region[target_row, target_col] = color\n      pixel_index+=1\n      \n      if direction == \"right\":\n          target_col -= 1\n          if target_col<0:\n            target_col = cols-1\n            target_row+=1\n      else:\n        target_col += 1\n        if target_col>=cols:\n            target_col=0\n            target_row+=1          \n    return new_region\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the observed rules.\"\"\"\n    # initialize output_grid\n    input_grid = np.array(input_grid)\n    output_grid = np.zeros_like(input_grid)\n\n    # Divide the grid into regions\n    regions = get_regions(input_grid)\n    \n    # process per region\n    start_row = 0\n    if len(regions)==2:\n\n        region1, region2 = regions\n\n        # Move foreground up within each region.\n        new_region1 = move_foreground(region1, direction=\"right\")\n        new_region2 = move_foreground(region2, direction=\"left\")\n\n        # put back into output grid in correct spot\n        output_grid[:new_region1.shape[0], :new_region1.shape[1]] = new_region1\n        output_grid[new_region1.shape[0]:, :new_region2.shape[1]] = new_region2\n\n    else: # only one region\n        region = regions[0]\n        new_region = move_foreground(region)\n        output_grid[:new_region.shape[0], :new_region.shape[1]] = new_region\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3706,
    "candidates_token_count": 1094,
    "total_token_count": 4800,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.719053,
  "response_file": "004-response.json"
}