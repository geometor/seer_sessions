{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Regions:** Divide the input grid into one or two regions. A dividing line exists if a row is entirely composed of a single color. If no such line exists, the entire grid is considered one region.\n\n2.  **Determine Background:** For each region, determine the background color.  This could be done by using the color in any corner of the region.\n\n3.  **Identify Foreground:** Within each region, identify all pixels that *do not* match the region's background color. These are the foreground pixels.\n\n4.  **Move First Region Foreground (Right to Left):**\n    *   Collect all non-background pixels in the first identified region.\n    *   Maintain their relative horizontal order.\n    *   Place these pixels in the top rows of the output grid, starting from the top-right corner and moving left.\n    *    If a row is full, continue placing on the next row down, again starting from the right.\n\n5.  **Move Second Region Foreground (Left to Right):**\n    *   Collect all non-background pixels in the second region (if one exists).\n    *   Maintain their relative horizontal order.\n    *   Place these pixels in the output grid, starting immediately below any pixels placed from the first region. Fill from left to right.\n    *    If a row is full, continue placing on the next row down, starting from the left.\n\n6.  **Remaining Pixels**: Ensure that any unfilled grid locations are set to 0.\n\n7.  **Output:** The output grid is the result of these operations.\n\"\"\"\n\nimport numpy as np\n\ndef get_regions(grid):\n    \"\"\"Divides the grid into regions based on a full row of a single color.\"\"\"\n    height = len(grid)\n    width = len(grid[0])\n    \n    empty_row = -1\n    for i in range(height):\n      is_empty = True\n      first_color = grid[i][0]\n      for j in range(width):\n        if grid[i][j] != first_color:\n          is_empty = False\n          break\n      if is_empty:\n        empty_row = i\n        break\n\n    if empty_row == -1:\n        return [grid] # no split\n    else:\n      region1 = grid[:empty_row]\n      region2 = grid[empty_row:]\n      return region1, region2\n\ndef get_background_color(region):\n    \"\"\"Determines the background color of a region.\"\"\"\n    return region[0, 0]  # Use top-left corner\n\ndef move_foreground(region, direction=\"left\"):\n    \"\"\"Moves non-background pixels to the top, maintaining relative horizontal order.\"\"\"\n    rows, cols = region.shape\n    background_color = get_background_color(region)\n    foreground_pixels = []\n    \n    # get list of just the pixels that are not the background\n    for r in range(rows):\n        for c in range(cols):\n            if region[r, c] != background_color:\n                foreground_pixels.append((region[r, c], c))\n\n    # create a blank region to hold the shifted pixels\n    new_region = np.zeros((rows, cols), dtype=int)\n\n    # Sort by column to maintain horizontal order.  \n    foreground_pixels.sort(key=lambda x: x[1])\n    if direction == \"right\":\n        foreground_pixels.reverse()\n\n    # put them back in, but shifted up\n    pixel_index = 0\n    \n    target_row=0\n    if direction == \"right\":\n        target_col = cols-1\n    else:\n        target_col=0\n            \n    while pixel_index < len(foreground_pixels):\n      color, original_col = foreground_pixels[pixel_index]\n      \n      new_region[target_row, target_col] = color\n      pixel_index+=1\n      \n      if direction == \"right\":\n          target_col -= 1\n          if target_col<0:\n            target_col = cols-1\n            target_row+=1\n      else:\n        target_col += 1\n        if target_col>=cols:\n            target_col=0\n            target_row+=1          \n    return new_region\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the observed rules.\"\"\"\n    # initialize output_grid\n    input_grid = np.array(input_grid)\n    output_grid = np.zeros_like(input_grid)\n\n    # Divide the grid into regions\n    regions = get_regions(input_grid)\n    \n    # process per region\n    start_row = 0\n    if len(regions)==2:\n\n        region1, region2 = regions\n\n        # Move foreground up within each region.\n        new_region1 = move_foreground(region1, direction=\"right\")\n        new_region2 = move_foreground(region2, direction=\"left\")\n\n        # put back into output grid in correct spot\n        output_grid[:new_region1.shape[0], :new_region1.shape[1]] = new_region1\n        output_grid[new_region1.shape[0]:, :new_region2.shape[1]] = new_region2\n\n    else: # only one region\n        region = regions[0]\n        new_region = move_foreground(region, direction=\"left\") # Default to left for single region\n        output_grid[:new_region.shape[0], :new_region.shape[1]] = new_region\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4136,
    "candidates_token_count": 1278,
    "total_token_count": 5414,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.867041,
  "response_file": "006-response.json"
}