import numpy as np

def calculate_diff(grid1, grid2):
    """Calculates the difference between two grids."""
    grid1 = np.array(grid1)
    grid2 = np.array(grid2)
    if grid1.shape != grid2.shape:
        return "Shapes are different", -1
    else:
        diff = np.sum(grid1 != grid2)
        return diff, (diff == 0)

def analyze_results(examples, transform_function):
   
    print("Example Analysis:")
    for i, example in enumerate(examples):
        input_grid = example['input']
        expected_output = example['output']
        actual_output = transform_function(input_grid)
        diff, same = calculate_diff(expected_output, actual_output)
        print(f"\\nExample {i + 1}:")
        print(f"  Pixel Error Count: {diff}")
        print(f"  Outputs Match: {same}")

# Provided examples
examples = [
    {
        "input": [[8, 8, 8, 8, 8], [8, 0, 0, 0, 8], [8, 0, 7, 0, 8], [8, 0, 0, 0, 8], [8, 8, 8, 8, 8]],
        "output": [[0, 1, 0, 1, 0], [1, 0, 0, 0, 1], [0, 0, 7, 0, 0], [1, 0, 0, 0, 1], [0, 1, 0, 1, 0]]
    },
    {
        "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],
        "output": [[1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 7, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1, 0, 1]]
    },
    {
        "input": [[6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 2, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6]],
        "output": [[1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 2, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1]]
    },
    {
        "input" : [[0, 0, 5, 0, 0], [0, 0, 5, 0, 0], [0, 0, 7, 0, 0], [0, 0, 5, 0, 0], [0, 0, 5, 0, 0]],
        "output" : [[1, 0, 5, 0, 1], [0, 1, 5, 1, 0], [1, 0, 7, 0, 1], [0, 1, 5, 1, 0], [1, 0, 5, 0, 1]],
    }
]

import numpy as np

def transform(input_grid):
    """Transforms the input grid according to the defined rules."""

    rows = len(input_grid)
    cols = len(input_grid[0])
    output_grid = np.zeros((rows, cols), dtype=int)

    #Preserve Center
    center_row = rows // 2
    center_col = cols // 2
    output_grid[center_row, center_col] = input_grid[center_row][center_col]


    #Checkerboard surrounding
    for i in range(rows):
        for j in range(cols):
            if (i,j) != (center_row, center_col): #Skip the center
                if (i + j) % 2 == 0: # Even sum, set to white (0)
                    output_grid[i,j] = 0

                else:   #Odd sum
                    output_grid[i, j] = 1

    return output_grid

analyze_results(examples, transform)