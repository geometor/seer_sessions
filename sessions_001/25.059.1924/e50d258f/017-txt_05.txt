def analyze_example(example):
    input_grid = example['input']
    expected_output = example['output']
    actual_output = transform(input_grid)

    input_grid_np = np.array(input_grid)
    expected_output_np = np.array(expected_output)
    actual_output_np = np.array(actual_output)

    input_dims = input_grid_np.shape
    expected_dims = expected_output_np.shape
    actual_dims = actual_output_np.shape

    input_bbox = find_non_white_subgrid(input_grid_np)
    expected_bbox = find_non_white_subgrid(expected_output_np) if expected_output_np.size > 0 else (0, 0, 0, 0) # prevent error on empty grids
    actual_bbox = find_non_white_subgrid(actual_output_np) if actual_output_np.size > 0 else (0, 0, 0, 0)

    return {
        'input_dims': input_dims,
        'expected_dims': expected_dims,
        'actual_dims': actual_dims,
        'input_bbox': input_bbox,
        'expected_bbox': expected_bbox,
        'actual_bbox': actual_bbox,
        'input_grid': input_grid_np.tolist(),  # Ensure serializable
        'expected_output' : expected_output_np.tolist(),
        'actual_output': actual_output_np.tolist(),
    }

task_data = {}  # provided by the environment
results = [analyze_example(example) for example in task_data['train']]
print(results)