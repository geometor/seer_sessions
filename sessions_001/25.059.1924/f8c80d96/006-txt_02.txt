"""
The azure (8) pixels in the input grid act as "seed" points.  A checkerboard pattern is generated in the output grid, but the color and starting point of the checkerboard is determined by the parity of the row and column indices of the *first* azure pixel encountered. If the sum of the row and column of the first azure pixel is even, the checkerboard starts with azure at that location. If the sum is odd, the checkerboard uses the second color, and begins at the seed location. The second color in each example is taken from the background color of the input, which can be determined by the top left corner.
"""

import numpy as np

def transform(input_grid):
    # Initialize output grid with the same dimensions as the input.
    output_grid = np.full(input_grid.shape, -1)

    # Find seed points (azure pixels in input)
    seed_points = np.argwhere(input_grid == 8)
    
    # Determine background/second color
    second_color = input_grid[0,0]

    # Fill first seed point and mark as visited
    if len(seed_points)>0:
        first_seed = tuple(seed_points[0])
        
        # determine start color from first seed
        if (first_seed[0] + first_seed[1]) % 2 == 0:
            start_color = 8
        else:
            start_color = second_color
        output_grid[first_seed] = start_color

        # Checkerboard fill, based on parity of the first azure seed
        for r in range(output_grid.shape[0]):
            for c in range(output_grid.shape[1]):
                if (r, c) == first_seed:
                    continue  # Already filled
                
                if (r + c) % 2 == (first_seed[0] + first_seed[1]) % 2:
                    output_grid[r, c] = start_color  # Same as first seed
                else:
                    output_grid[r, c] = 8 if start_color == second_color else second_color # Opposite of first seed.
    else: # added to handle no seed
        output_grid[:] = input_grid[0,0]

    return output_grid