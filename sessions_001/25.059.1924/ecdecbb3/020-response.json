{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Red Column Extension:** Identify all columns in the input grid that contain at least one red (2) pixel. For each of these identified columns, create a corresponding column in the output grid filled entirely with red pixels. This red column spans the full height of the output grid.\n\n2.  **Azure Line Identification:** Identify all rows in the input grid that consist of a complete horizontal line of azure (8) pixels.\n\n3.  **Azure Pixel Placement:**\n    *   For each identified azure line (row):\n        *   Check each column of the grid, starting from the leftmost column (index 0).\n        *   If a column does *not* contain a red pixel (i.e., it's not one of the extended red columns), place a single azure pixel at the intersection of the current azure row and that column.\n        *   Stop after placing one azure pixel for the current azure line.\n        *   If all columns are red columns, no azure pixel is placed for the current azure line.\n\n4.  Fill the rest of the output grid that does not contain a red or azure pixel with the background color 0/white.\n\"\"\"\n\nimport numpy as np\n\ndef get_red_pixel_columns(input_grid):\n    \"\"\"Finds the columns containing red pixels.\"\"\"\n    red_cols = []\n    for col in range(input_grid.shape[1]):\n        for row in range(input_grid.shape[0]):\n            if input_grid[row, col] == 2:\n                red_cols.append(col)\n                break  # Move to the next column after finding a red pixel\n    return red_cols\n\ndef get_azure_lines(input_grid):\n    \"\"\"Finds the rows containing azure lines.\"\"\"\n    azure_rows = []\n    for row in range(input_grid.shape[0]):\n        if all(input_grid[row, :] == 8):\n            azure_rows.append(row)\n    return azure_rows\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the described rules.\"\"\"\n\n    output_grid = np.zeros_like(input_grid)\n    rows, cols = input_grid.shape\n\n    # 1. Red Column Extension\n    red_columns = get_red_pixel_columns(input_grid)\n    for col in red_columns:\n        for row in range(rows):\n            output_grid[row, col] = 2\n\n    # 2. Azure Line Identification\n    azure_lines = get_azure_lines(input_grid)\n\n    # 3. Azure Pixel Placement\n    for azure_row in azure_lines:\n        for col in range(cols):\n            if col not in red_columns:\n                output_grid[azure_row, col] = 8\n                break  # Stop after placing one azure pixel\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5664,
    "candidates_token_count": 647,
    "total_token_count": 6311,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 5.438646,
  "response_file": "020-response.json"
}