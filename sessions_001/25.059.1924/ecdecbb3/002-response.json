{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Locate all red (2) pixels and azure (8) lines within the input grid.\n2.  **For each red pixel:**\n    *   Find the nearest azure line. The nearest line is determined by the shortest number of steps in cardinal directions that are required to reach a pixel that is part of the line\n    *   Extend the red pixel towards that line. Do so by replacing the pixels along the shortest path to the azure line by red pixels.\n3. **Preserve the existing:** Keep existing azure lines.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, color):\n    \"\"\"Finds coordinates of all pixels of a given color.\"\"\"\n    return np.argwhere(grid == color)\n\ndef is_line(grid, coord, color):\n    \"\"\"Checks if a coordinate is part of a horizontal or vertical line of a given color.\"\"\"\n    row, col = coord\n    # Check horizontal\n    if col > 0 and grid[row, col - 1] == color:\n        return True\n    if col < grid.shape[1] - 1 and grid[row, col + 1] == color:\n        return True\n    # Check vertical\n    if row > 0 and grid[row - 1, col] == color:\n        return True\n    if row < grid.shape[0] - 1 and grid[row + 1, col] == color:\n        return True\n    return False\n\ndef find_nearest_line(grid, start_coord, line_color):\n    \"\"\"Finds the nearest coordinate of a line of the specified color.\"\"\"\n    min_dist = float('inf')\n    nearest_line_coord = None\n\n    line_coords = find_objects(grid, line_color)\n    for line_coord in line_coords:\n      if is_line(grid, line_coord, line_color):\n        row_dist = abs(start_coord[0] - line_coord[0])\n        col_dist = abs(start_coord[1] - line_coord[1])\n        dist = row_dist + col_dist  # Manhattan distance\n\n        if dist < min_dist:\n            min_dist = dist\n            nearest_line_coord = line_coord\n    return nearest_line_coord\n    \n\ndef extend_pixel(grid, start_coord, end_coord, color):\n    \"\"\"Extends a pixel from start_coord to end_coord (inclusive) with the given color.\"\"\"\n    row1, col1 = start_coord\n    row2, col2 = end_coord\n\n    # Determine direction of extension\n    row_step = 0 if row1 == row2 else (1 if row1 < row2 else -1)\n    col_step = 0 if col1 == col2 else (1 if col1 < col2 else -1)\n    \n    # Extend vertically or horizontally only - not diagonally\n    if row_step != 0 and col_step != 0: # should never happen\n        return\n\n    current_row, current_col = row1, col1\n    while (current_row, current_col) != (row2 + row_step, col2+col_step):\n      grid[current_row, current_col] = color\n      current_row += row_step\n      current_col += col_step\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n\n    # find red pixels\n    red_pixels = find_objects(input_grid, 2)\n\n    # change output pixels by extending red pixels to nearest azure\n    for red_pixel in red_pixels:\n        nearest_azure_line_coord = find_nearest_line(input_grid, red_pixel, 8)\n        if nearest_azure_line_coord is not None:\n            extend_pixel(output_grid, red_pixel, nearest_azure_line_coord, 2)\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5892,
    "candidates_token_count": 904,
    "total_token_count": 6796,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.560547,
  "response_file": "002-response.json"
}