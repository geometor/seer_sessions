{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  Preserve Gray: All gray pixels in the input grid remain unchanged in the output grid.\n2.  Background Fill: If the input has a solid filled shape in the center composed of white pixels, replace all the white pixels with blue.\n3.  Checkerboard Pattern: If the input has checkerboard pattern of white and grey pixels, replace the white pixels by a series of rotating colors - red, blue and green - starting from the top left.\n\"\"\"\n\nimport numpy as np\n\ndef is_solid_fill(grid, color):\n    \"\"\"Checks if the grid has a solid filled shape of the given color.\"\"\"\n    rows, cols = grid.shape\n    # Find bounding box of the color\n    coords = np.argwhere(grid == color)\n    if len(coords) == 0:\n        return False\n    min_row, min_col = np.min(coords, axis=0)\n    max_row, max_col = np.max(coords, axis=0)\n\n    # Check if the shape is solid within the bounding box\n    for r in range(min_row, max_row + 1):\n        for c in range(min_col, max_col + 1):\n            if grid[r, c] != color:\n                return False\n    return True\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Check for solid fill of white\n    if is_solid_fill(input_grid, 0):\n        # change output pixels - Background Fill\n        for r in range(rows):\n            for c in range(cols):\n                if input_grid[r][c] == 0:\n                    output_grid[r][c] = 1  # Blue\n    else: # Checkerboard Pattern\n        color_sequence = [2, 1, 3]  # Red, Blue, Green\n        color_index = 0\n        for r in range(rows):\n            for c in range(cols):\n                if input_grid[r][c] == 0:\n                    output_grid[r][c] = color_sequence[color_index % 3]\n                    color_index += 1\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4639,
    "candidates_token_count": 524,
    "total_token_count": 5163,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 5.458303,
  "response_file": "020-response.json"
}