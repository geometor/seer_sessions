import numpy as np

def analyze_example(input_grid, output_grid):
    input_grid = np.array(input_grid)
    output_grid = np.array(output_grid)
    initial_red_pixels = np.argwhere(input_grid == 2)
    gray_to_red_pixels = np.argwhere((input_grid == 5) & (output_grid == 2))
    
    print(f"Input grid size: {input_grid.shape}")
    print(f"Initial red pixels: {initial_red_pixels.tolist()}")
    print(f"Gray pixels changed to red: {gray_to_red_pixels.tolist()}")
    
    # Verify that all changed pixels are neighbors of initial red pixels
    for gr_row, gr_col in gray_to_red_pixels:
        is_neighbor = False
        for r_row, r_col in initial_red_pixels:
            if abs(gr_row - r_row) <= 1 and abs(gr_col - r_col) <= 1:
                is_neighbor = True
                break
        print(f"Pixel ({gr_row}, {gr_col}) is a neighbor of an initial red pixel: {is_neighbor}")
    print("---")
    
examples = [
    ([[5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 2, 2, 2], [5, 5, 5, 5, 5, 5, 5, 2, 5, 2], [5, 5, 5, 5, 5, 5, 5, 2, 2, 2], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]], [[5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 2, 2, 2], [5, 5, 5, 5, 5, 5, 5, 2, 2, 2], [5, 5, 5, 5, 5, 5, 5, 2, 2, 2], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]]),
    ([[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]], [[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]]),
    ([[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]], [[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]])
]
for ex_in, ex_out in examples:
  analyze_example(ex_in, ex_out)