import numpy as np

def analyze_grids(input_grid, output_grid, predicted_output_grid):
    """Analyzes input, expected output, and actual output grids."""

    def get_grid_info(grid):
        """Gets information about a single grid."""
        green_pixels = np.where(grid == 3)
        green_coords = list(zip(green_pixels[0], green_pixels[1]))

        if not green_coords:
            min_row, max_row, min_col, max_col = None, None, None, None
            center_row, center_col = None, None
        else:
            min_row = min(green_coords, key=lambda p: p[0])[0]
            max_row = max(green_coords, key=lambda p: p[0])[0]
            min_col = min(green_coords, key=lambda p: p[1])[1]
            max_col = max(green_coords, key=lambda p: p[1])[1]
            center_row, center_col = (min_row + max_row) / 2, (min_col + max_col) / 2
        grid_center_row, grid_center_col = (grid.shape[0] -1) /2, (grid.shape[1] -1) / 2

        return {
            "green_pixels": green_coords,
            "min_row": min_row,
            "max_row": max_row,
            "min_col": min_col,
            "max_col": max_col,
            "green_center_row": center_row,
            "green_center_col": center_col,
            "grid_center_row": grid_center_row,
            "grid_center_col": grid_center_col,
        }
    input_info = get_grid_info(input_grid)
    output_info = get_grid_info(output_grid)
    predicted_output_info = get_grid_info(predicted_output_grid)

    return {
      "input": input_info,
      "output": output_info,
      "predicted_output": predicted_output_info
    }

def compare(task):
    print(f"{task['name']}")
    for i, (input_grid, output_grid) in enumerate(task["train"]):
      input_grid_np = np.array(input_grid)
      output_grid_np = np.array(output_grid)
      predicted_output_grid_np = transform(input_grid_np)
      print(f"example {i}:")
      analysis = analyze_grids(input_grid_np, output_grid_np, predicted_output_grid_np)
      print(analysis)

tasks = [
    {
        "name":
            "Task 1",
        "train": [
            [
                [[0, 0, 3, 0, 0, 0], [0, 0, 3, 0, 0, 0], [0, 0, 3, 0, 0, 0],
                 [0, 0, 3, 0, 0, 0], [0, 0, 3, 0, 0, 0], [0, 0, 3, 0, 0, 0]],
                [[0, 0, 6, 0, 0, 0], [0, 0, 6, 0, 0, 0], [0, 0, 6, 0, 0, 0],
                 [0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0], [0, 0, 2, 0, 0, 0]],
            ],
            [
                [[0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 0, 3],
                 [0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 0, 3]],
                [[0, 0, 0, 0, 0, 6], [0, 0, 0, 0, 0, 6], [0, 0, 0, 0, 0, 6],
                 [0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 2]],
            ],
            [
                [[0, 3, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0],
                 [0, 3, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0]],
                [[0, 6, 0, 0, 0, 0], [0, 6, 0, 0, 0, 0], [0, 6, 0, 0, 0, 0],
                 [0, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0]],
            ],
        ],
    },
]

for task in tasks:
    compare(task)