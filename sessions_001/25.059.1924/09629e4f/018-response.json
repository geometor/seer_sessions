{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Gray Lines:** Examine the input grid for horizontal lines composed entirely of gray pixels (value 5). These lines define the boundaries between regions.\n\n2.  **Handle Missing Lines:**\n    *   If *no* complete gray lines are found, the transformation is not applicable - return an empty result or zero.\n\n3.  **Define Regions:**\n    *   If one gray line is found, there are two regions: above the line and below the line.\n    *   If two gray lines are found, there are three regions: above the first line, between the lines, and below the second line.\n    *   If more than two gray lines are detected, use the first two found.\n\n4. **Determine Fill Color for Each Region:** For each region:\n    *   Find all pixels *adjacent* (including diagonals) to the gray line(s) that define(s) the region's boundary.\n    *   Determine the most frequent color among these adjacent pixels.\n    *   If there's a tie, and one of the colors is NOT white (0), choose a non-white color.\n        If all tied colors are white (0), the fill color is white.\n        If there are no adjacent colors, the fill color is white.\n\n5.  **Fill Regions:**\n    *   Fill each region of the output grid with the determined fill color.\n    *   Preserve the identified Gray lines.\n\n6. **Return:** The result is the transformed output grid.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef get_adjacent_colors(grid, row_index, col_index):\n    \"\"\"Gets colors adjacent to a given cell, handling boundaries.\"\"\"\n    rows, cols = grid.shape\n    adjacent_colors = []\n\n    if row_index > 0:\n        adjacent_colors.append(grid[row_index - 1, col_index])  # Up\n    if row_index < rows - 1:\n        adjacent_colors.append(grid[row_index + 1, col_index])  # Down\n    if col_index > 0:\n        adjacent_colors.append(grid[row_index, col_index - 1])  # Left\n    if col_index < cols - 1:\n        adjacent_colors.append(grid[row_index, col_index + 1])  # Right\n    #diagonals\n    if row_index > 0 and col_index > 0:\n        adjacent_colors.append(grid[row_index - 1, col_index - 1]) #Up-Left\n    if row_index > 0 and col_index < cols - 1:\n        adjacent_colors.append(grid[row_index - 1, col_index + 1]) # Up-Right\n    if row_index < rows - 1 and col_index > 0:\n        adjacent_colors.append(grid[row_index+1, col_index-1]) # Down-Left\n    if row_index < rows - 1 and col_index < cols - 1:\n        adjacent_colors.append(grid[row_index+1, col_index+1]) # Down-Right\n\n\n    return adjacent_colors\n\ndef most_frequent_color(colors):\n    \"\"\"Returns the most frequent color, defaulting to 0 if the list is empty or tied.\"\"\"\n    counts = Counter(colors)\n    \n    # Remove 0 from counts if other colors exist\n    if 0 in counts and len(counts) > 1:\n        del counts[0]    \n    \n    if not counts:\n        return 0\n    \n    max_count = max(counts.values())\n    most_frequent = [color for color, count in counts.items() if count == max_count]\n    \n    return most_frequent[0] if most_frequent else 0  # Return 0 if empty, or the first most frequent\n\n\ndef get_adjacent_to_line(grid, line_row):\n    \"\"\" get the colors from grid adjacent to line_row \"\"\"\n    adjacent_colors = []\n    for col in range(grid.shape[1]):\n        if grid[line_row,col] == 5:\n            adjacent_colors.append(get_adjacent_colors(grid,line_row,col))\n    adjacent_colors = [item for sublist in adjacent_colors for item in sublist] #flatten\n    return adjacent_colors\n\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the described rule.\"\"\"\n    \n    input_grid = np.array(input_grid)  # Ensure numpy array\n    output_grid = np.zeros_like(input_grid)\n    rows, cols = input_grid.shape\n\n    # Find the gray lines (rows with all 5s)\n    gray_lines = [r for r in range(rows) if np.all(input_grid[r] == 5)]\n\n    # Fill the regions\n    if len(gray_lines) >= 1:\n        # Top Region\n        top_line = gray_lines[0]\n      \n        colors = get_adjacent_to_line(input_grid, top_line)\n        fill_color = most_frequent_color(colors)\n        output_grid[:top_line, :] = fill_color\n\n        # Preserve the first gray line\n        output_grid[top_line, :] = 5\n\n    if len(gray_lines) >= 2:\n        middle_line = gray_lines[1]\n        # Middle Region\n        colors = get_adjacent_to_line(input_grid, middle_line)\n        fill_color = most_frequent_color(colors)\n        output_grid[top_line + 1:middle_line, :] = fill_color\n\n        #Preserve the second gray line\n        output_grid[middle_line,:] = 5\n        \n        # Bottom Region\n        colors = get_adjacent_to_line(input_grid, middle_line)\n\n        fill_color = most_frequent_color(colors)\n\n        output_grid[middle_line + 1:, :] = fill_color\n    elif len(gray_lines)==0:\n        return []\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3923,
    "candidates_token_count": 1423,
    "total_token_count": 5346,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.639967,
  "response_file": "018-response.json"
}