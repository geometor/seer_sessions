objects:
  - name: input_grid
    type: grid
    properties:
      colors: [white, red] # Based on examples
      height: variable
      width: variable

  - name: output_grid
    type: grid
    properties:
      colors: [white, red, azure]
      height: "2 * input_grid.height - (input_grid.height % 2)"
      width: "2 * input_grid.width"

  - name: red_pixel_original
    type: pixel
    properties:
      color: red
      location: (row, col) # Within input_grid

  - name: red_pixel_1
    type: pixel
    properties:
      color: red
      location: (red_pixel_original.row * 2 - (red_pixel_original.row%2) , red_pixel_original.col * 2)

  - name: red_pixel_2
    type: pixel
    properties:
      color: red
      location: (output_grid.height - 1 - (red_pixel_original.row * 2 - (red_pixel_original.row%2)), red_pixel_1.col)

  - name: azure_fill_pixels
    type: pixel_collection
    properties:
      color: azure
      pattern: "rows containing red pixels, every other column starting from 0"

actions:
  - name: double_grid_size
    input: input_grid
    output: output_grid
    description: "Create output_grid with adjusted height and double width of input_grid."

  - name: locate_red_pixel
    input: input_grid
    output: red_pixel_original
    description: "Find the coordinates of the red pixel in the input_grid."

  - name: place_red_pixel_1
    input: red_pixel_original, output_grid
    output: output_grid
    description: "Place a red pixel in the output_grid based on red_pixel_original location."

  - name: place_red_pixel_2
    input: red_pixel_1, output_grid
    output: output_grid
    description: "Place another red pixel in the output grid, mirrored vertically from red_pixel_1."

  - name: fill_azure
    input: output_grid, red_pixel_1, red_pixel_2
    output: output_grid
    description: "Fill specific cells in the output_grid with azure."
  
  - name: retain_background
    input: input_grid, output_grid
    output: output_grid
    description: "ensure all white pixels are present"
