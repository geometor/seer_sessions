import numpy as np

def describe_grid(grid):
    colors = np.unique(grid)
    desc = f"Grid ({grid.shape[0]}x{grid.shape[1]}): Colors = {colors}"
    return desc

def analyze_example(example_num, input_grid, output_grid, predicted_grid):
    print(f"--- Example {example_num} ---")
    print(f"Input: {describe_grid(input_grid)}")
    print(f"Expected Output: {describe_grid(output_grid)}")
    print(f"Predicted Output: {describe_grid(predicted_grid)}")
    print(f"Correct: {np.array_equal(output_grid, predicted_grid)}")

    # Check for existing lines in input
    input_lines = []
    rows, cols = input_grid.shape
    for r in range(rows):
        if len(np.unique(input_grid[r, :])) > 1:
            colors = [c for c in np.unique(input_grid[r, :]) if c != 8 and c!= 0] # ignore background
            if len(colors) > 0: # consider only if different than background
                input_lines.append(f"Row {r}: colors={colors}")
    for c in range(cols):
        if len(np.unique(input_grid[:, c])) > 1:
            colors = [c for c in np.unique(input_grid[:, c]) if c != 8 and c!= 0]
            if len(colors) > 0:
                input_lines.append(f"Col {c}: colors={colors}")
    if (len(input_lines) > 0):
        print(f"Input Lines: {input_lines}")

examples = task_data['train']
for i, ex in enumerate(examples):
    input_grid = np.array(ex['input'])
    output_grid = np.array(ex['output'])
    predicted_grid = transform(input_grid)  # Assuming 'transform' is defined
    analyze_example(i + 1, input_grid, output_grid, predicted_grid)
