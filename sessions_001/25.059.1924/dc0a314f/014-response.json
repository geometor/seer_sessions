{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. **Identify Target Object:** Find the contiguous region (object) in the input grid that contains pixels of color orange (7) and/or red (2). This is the \"target object.\"  Pixels of other colors, and the background (0), are ignored when identifying this object.\n\n2.  **Determine Target Object Bounding Box:** Calculate the bounding box of the target object. This is the smallest rectangle that encloses all pixels of the target object.  The bounding box is defined by:\n    *   `min_row`: The smallest row index of any pixel in the target object.\n    *   `min_col`: The smallest column index of any pixel in the target object.\n    *   `max_row`: The largest row index of any pixel in the target object.\n    *   `max_col`: The largest column index of any pixel in the target object.\n\n3.  **Extract Subgrid (Output):** Extract the rectangular subgrid defined by the target object's bounding box. The extracted subgrid has:\n\n    *   Height: `max_row - min_row + 1`\n    *   Width: `max_col - min_col + 1`\n    *   Top-left corner coordinates: (`min_row`, `min_col`)\n    * get data from `input_grid` using these coordinates\n\n4.  **Output:** The extracted subgrid is the output.\n\"\"\"\n\nimport numpy as np\n\ndef find_target_object(grid):\n    # Find the contiguous region containing colors 7 and 2\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n    target_object = []\n\n    def is_target_color(color):\n        return color == 7 or color == 2\n\n    def dfs(row, col):\n        if (\n            row < 0\n            or row >= rows\n            or col < 0\n            or col >= cols\n            or visited[row, col]\n            or not is_target_color(grid[row, col])\n        ):\n            return []\n\n        visited[row, col] = True\n        region = [(row, col)]\n\n        region.extend(dfs(row + 1, col))\n        region.extend(dfs(row - 1, col))\n        region.extend(dfs(row, col + 1))\n        region.extend(dfs(row, col - 1))\n        return region\n\n    for r in range(rows):\n        for c in range(cols):\n            if is_target_color(grid[r, c]) and not visited[r, c]:\n                target_object = dfs(r, c)\n                # Return after finding the first target object.  We assume there is only one\n                return target_object\n    return target_object\n\ndef get_bounding_box(target_object):\n    # input is list of (row, col) tuples\n    if not target_object:\n        return (0, 0, -1, -1) # Handle empty target object case\n\n    rows, cols = zip(*target_object) # separate row and col\n    min_row, max_row = min(rows), max(rows)\n    min_col, max_col = min(cols), max(cols)\n    return (min_row, min_col, max_row, max_col)\n\ndef transform(input_grid):\n    # Convert input to numpy array\n    input_grid = np.array(input_grid)\n\n    # Find the target object (contiguous region of colors 7 and 2)\n    target_object = find_target_object(input_grid)\n\n    # if nothing found, return empty grid\n    if not target_object: return [[]]\n\n    # Get the bounding box\n    min_row, min_col, max_row, max_col = get_bounding_box(target_object)\n\n    # Extract subgrid\n    output_grid = input_grid[min_row:max_row+1, min_col:max_col+1].tolist()\n    \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5586,
    "candidates_token_count": 929,
    "total_token_count": 6515,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.633199,
  "response_file": "014-response.json"
}