{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify** all white pixels (value 0) in the input grid.\n2.  **Identify** all red pixels (value 2) in the input grid.\n3.  **Check** the edges of the grid for any white pixels adjacent (horizontally or vertically, but *not* diagonally) to a red pixel.\n4.  **If** a white pixel is at the edge and adjacent to a red pixel, change its color to maroon (value 9).\n5.  **Check** for any white pixels located *between* two red pixels either horizontally or vertically.\n6.  **If** a white pixel is located between two red pixels, change its color to maroon (value 9)\n7.  **If** a white pixel doesn't meet the above conditions, leave as original color(0).\n8.  **Output** the modified grid.\n\"\"\"\n\nimport numpy as np\n\ndef get_adjacent_pixels(grid, row, col):\n    \"\"\"Gets the adjacent pixels of a given cell (horizontally and vertically).\"\"\"\n    rows, cols = grid.shape\n    adjacent_pixels = []\n\n    if row > 0:\n        adjacent_pixels.append((row - 1, col))  # Up\n    if row < rows - 1:\n        adjacent_pixels.append((row + 1, col))  # Down\n    if col > 0:\n        adjacent_pixels.append((row, col - 1))  # Left\n    if col < cols - 1:\n        adjacent_pixels.append((row, col + 1))  # Right\n\n    return adjacent_pixels\n\ndef is_on_edge(grid, row, col):\n    \"\"\"Checks if a pixel is on the edge of the grid.\"\"\"\n    rows, cols = grid.shape\n    return row == 0 or row == rows - 1 or col == 0 or col == cols - 1\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of input_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Iterate through each pixel in the input grid\n    for row in range(rows):\n        for col in range(cols):\n            # Identify white pixels (value 0)\n            if input_grid[row, col] == 0:\n                adjacent = get_adjacent_pixels(input_grid, row, col)\n                is_adjacent_to_red = False\n                for r, c in adjacent:\n                    if input_grid[r, c] == 2:\n                        is_adjacent_to_red = True\n                        break\n\n                # Check if it's on an edge and adjacent to red\n                if is_on_edge(input_grid, row, col) and is_adjacent_to_red:\n                    output_grid[row, col] = 9\n                elif is_adjacent_to_red: #check if it's between two reds\n                    #check horizontal\n                    red_count = 0\n                    for c in range(cols):\n                        if input_grid[row, c] == 2:\n                            red_count = red_count + 1\n                    if red_count >= 2:\n                        output_grid[row,col] = 9\n                    #check vertical\n                    red_count = 0\n                    for r in range(rows):\n                        if input_grid[r, col] == 2:\n                            red_count = red_count + 1\n                    if red_count >= 2:\n                        output_grid[row,col] = 9\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4315,
    "candidates_token_count": 823,
    "total_token_count": 5138,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.031247,
  "response_file": "020-response.json"
}