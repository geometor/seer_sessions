        import numpy as np

        input_grid = np.array([
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 4, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 4, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 4, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        ])

        output_grid = np.array([
            [4, 4, 4],
            [4, 4, 4],
            [4, 4, 4],
        ])
        
        # Find the min and max row/col indices of yellow pixels in input
        yellow_pixels = np.argwhere(input_grid == 4)
        min_row, min_col = np.min(yellow_pixels, axis=0)
        max_row, max_col = np.max(yellow_pixels, axis=0)
        print(f"{min_row=}, {min_col=}")
        print(f"{max_row=}, {max_col=}")
        #check output size
        print(f"{output_grid.shape=}")
        ```
        ```tool_result
        min_row=4, min_col=4
        max_row=6, max_col=6
        output_grid.shape=(3, 3)
        ```
        The code needs to create a `(3,3)` grid.  It fails because it's looking for a "cross".
*   **Example 3:**
    *    Input: A "plus" sign of yellow.
    *   Expected output: a filled square.
    *    Actual Output: Incorrect - returns a cross, not a filled rectangle.
        ```tool_code
        import numpy as np

        input_grid = np.array([
            [0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 4, 0, 0, 0],
            [0, 0, 0, 4, 0, 0, 0],
            [0, 4, 4, 4, 4, 4, 0],
            [0, 0, 0, 4, 0, 0, 0],
            [0, 0, 0, 4, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0]
        ])

        output_grid = np.array([
            [4, 4, 4],
            [4, 4, 4],
            [4, 4, 4]
        ])
        
        # Find the min and max row/col indices of yellow pixels in input
        yellow_pixels = np.argwhere(input_grid == 4)
        min_row, min_col = np.min(yellow_pixels, axis=0)
        max_row, max_col = np.max(yellow_pixels, axis=0)
        print(f"{min_row=}, {min_col=}")
        print(f"{max_row=}, {max_col=}")
        #check output size
        print(f"{output_grid.shape=}")
        ```
        ```tool_result
        min_row=1, min_col=1
        max_row=5, max_col=5
        output_grid.shape=(3, 3)
        ```
        The correct output should be `(5,5)`.

**YAML Facts**
