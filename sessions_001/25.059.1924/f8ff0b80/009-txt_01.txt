import numpy as np

def analyze_grid(grid):
    """Analyzes a single grid and returns relevant properties."""
    if not grid:
        return {
            "height": 0,
            "width": 0,
            "colors": [],
            "unique_colors": 0,
            "color_counts": {}
        }
    array = np.array(grid)
    colors = array.flatten().tolist()
    unique_colors = np.unique(array)
    color_counts = {color: colors.count(color) for color in unique_colors}
    return {
        "height": array.shape[0],
        "width": array.shape[1],
        "colors": colors,
        "unique_colors": unique_colors.tolist(),
        "color_counts": color_counts
    }

def analyze_example(example):
    """Analyzes a single example (input and output grids)."""
    input_analysis = analyze_grid(example["input"])
    output_analysis = analyze_grid(example["output"])
    return {
        "input": input_analysis,
        "output": output_analysis
    }

def analyze_task(task):
   return [analyze_example(example) for example in task['train']]
    

examples = [
    {
        "input": [[5, 5, 5], [5, 5, 5], [5, 5, 5]],
        "output": []
    },
    {
        "input": [[5, 5, 5, 5], [5, 1, 5, 5], [5, 5, 5, 5]],
        "output": [[1], [7], [2]]
    },
    {
        "input": [[5, 5, 5, 5], [5, 5, 5, 7], [5, 5, 5, 5]],
        "output": [[1], [7], [2]]
    },
    {
        "input": [[0, 0, 0, 2], [0, 0, 0, 0], [0, 0, 0, 0]],
        "output": [[1], [7], [2]]
    }

]
task_analysis = analyze_task({'train': examples})

print(task_analysis)