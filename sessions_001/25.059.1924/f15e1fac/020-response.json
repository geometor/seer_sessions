{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Vertical Azure Groups:** Find all groups of *exactly three* vertically contiguous azure (8) pixels in the input grid.\n2.  **Horizontal Extension:** For each identified group, extend it horizontally to a total length of four azure pixels. The extension starts from the leftmost edge of the input grid if the azure group is on the leftmost edge, otherwise extends to right. The extension includes the original 3 pixels.\n3.  **Preserve Red Pixels:** All red (2) pixels must remain in their original positions in the output grid.\n4. **Background:** All other cells will remain white/empty (0).\n\"\"\"\n\nimport numpy as np\n\ndef find_vertical_groups(grid, color, length):\n    \"\"\"Finds vertically contiguous groups of a specified color and length.\"\"\"\n    rows, cols = grid.shape\n    groups = []\n    visited = np.zeros((rows, cols), dtype=bool)\n\n    def dfs(row, col, current_group):\n        if (row < 0 or row >= rows or col < 0 or col >= cols or\n                visited[row, col] or grid[row, col] != color):\n            return\n        visited[row, col] = True\n        current_group.append((row, col))\n        dfs(row + 1, col, current_group)  # Check only downwards\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == color and not visited[r, c]:\n                group = []\n                dfs(r, c, group)\n                if len(group) == length: #check length\n                    groups.append(group)\n    return groups\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the defined rules.\"\"\"\n    input_grid = np.array(input_grid)\n    output_grid = np.zeros_like(input_grid) #initialize to all white\n    rows, cols = output_grid.shape\n\n    #copy red pixels\n    for r in range(rows):\n      for c in range(cols):\n        if(input_grid[r,c] == 2):\n            output_grid[r,c] = 2\n\n    # Find azure pixel groups of length 3\n    azure_groups = find_vertical_groups(input_grid, 8, 3)\n\n    # Extend azure pixels horizontally\n    for group in azure_groups:\n        min_col = min(c for _, c in group) #find left-most column\n        max_col = max(c for _, c in group) #find right-most col (same)\n        row = group[0][0] #any row (they all have the same)\n\n        #extend to length 4, starting at the edge\n        if(min_col == 0):\n            for i in range(4):\n                output_grid[row,i] = 8\n        else:\n            for i in range(4):\n                output_grid[row,min_col+i] = 8\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6297,
    "candidates_token_count": 701,
    "total_token_count": 6998,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 5.757252,
  "response_file": "020-response.json"
}