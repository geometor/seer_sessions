{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransformation Rule:\n\n1. **Identify Azure and Red Pixels:** Locate all azure (8) and red (2) pixels in the input grid.\n\n2. **Row-wise Processing:** Iterate through each row of the grid.\n\n3. **Conditional Azure Extension:**\n    *   If a row contains at least one red (2) pixel: Extend *all* azure (8) pixels in that row downwards to the bottom of the grid.\n    *   If a row does *not* contain any red (2) pixels: Find the lowest azure (8) pixel in each column and extend it downwards to the bottom of the grid.  Other azure pixels in these columns *not* in red-containing rows are *not* extended.\n\n4. **Preserve Red**: Red Pixels remain in place, regardless of the changes.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the described rule.\"\"\"\n\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Iterate through each row\n    for r in range(rows):\n        row_has_red = False\n        for c in range(cols):\n            if input_grid[r, c] == 2:\n                row_has_red = True\n                break\n\n        if row_has_red:\n            # Extend all azure pixels in this row downwards\n            for c in range(cols):\n                if input_grid[r, c] == 8:\n                    for r_below in range(r + 1, rows):\n                        output_grid[r_below, c] = 8\n        else:\n            # Extend only the lowest azure pixel in each column downwards\n            for c in range(cols):\n                azure_indices = [row_index for row_index in range(r, rows) if input_grid[row_index, c] == 8]\n                if azure_indices:\n                    lowest_azure = max(azure_indices)\n                    for r_below in range(lowest_azure + 1, rows):\n                        output_grid[r_below, c] = 8\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2351,
    "candidates_token_count": 491,
    "total_token_count": 2842,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.688563,
  "response_file": "006-response.json"
}