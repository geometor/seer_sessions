import numpy as np

def find_grey_column(grid):
    """Finds the index of the column that is entirely grey (5)."""
    rows, cols = grid.shape
    for j in range(cols):
        if np.all(grid[:, j] == 5):
            return j
    return -1  # Return -1 if no grey column is found

def describe_grid(grid):
  rows, cols = grid.shape
  return f'{rows}x{cols}'

def analyze_example(input_grid, output_grid, predicted_grid):
    """Analyzes a single example and returns relevant properties."""
    input_grey_col = find_grey_column(input_grid)
    output_grey_col = find_grey_column(output_grid)
    
    results = {
        "input_grid": describe_grid(input_grid),
        "output_grid": describe_grid(output_grid),
        "predicted_output_grid": describe_grid(predicted_grid),
        "input_grey_col": input_grey_col,
        "output_grey_col": output_grey_col,        
        "grids_match": np.array_equal(output_grid, predicted_grid)
    }
    return results

# Example data (replace with actual data from the task)
examples = [
    (np.array([[5, 2, 6, 2, 6, 2, 6],
               [5, 6, 2, 6, 2, 6, 2],
               [5, 2, 6, 2, 6, 2, 6]]),
     np.array([[2, 6, 2, 6, 2, 6],
               [6, 2, 6, 2, 6, 2],
               [2, 6, 2, 6, 2, 6]])),
     
    (np.array([[5, 2, 2, 2],
               [5, 2, 2, 2],
               [5, 2, 2, 2]]),
     np.array([[2, 2, 2],
               [2, 2, 2],
               [2, 2, 2]])),
    
    (np.array([[5, 6, 6, 6, 6],
              [5, 6, 6, 6, 6],
              [5, 6, 6, 6, 6],
              [5, 6, 6, 6, 6]]),
     np.array([[6, 6, 6, 6],
              [6, 6, 6, 6],
              [6, 6, 6, 6],
              [6, 6, 6, 6]])),
      
    (np.array([[5, 1, 1, 1, 1],
               [5, 1, 4, 4, 1],
               [5, 4, 1, 1, 4],
               [5, 4, 4, 1, 1]]),
    np.array([[1, 1, 1, 1],
              [1, 4, 4, 1],
              [4, 1, 1, 4],
              [4, 4, 1, 1]])),    
]

# get predictions using the provided transform method

def transform(input_grid):
    """Transforms the input grid by extracting a subgrid around a grey column."""
    # Find the grey column
    grey_col_index = find_grey_column(input_grid)

    # Initialize the output grid
    rows, cols = input_grid.shape
    
    if grey_col_index == -1:
        output_grid = np.zeros_like(input_grid)
        return output_grid
        

    # Define extraction boundaries.
    start_col = grey_col_index + 1

    # find end of contiguous non-grey section
    end_col = start_col
    while end_col < cols and input_grid[0,end_col] != 5 and input_grid[0,end_col] != 0:
       end_col +=1

    # Extract the sub-grid, and create as all zeros
    output_grid = np.zeros((rows, end_col - start_col))

    # change relevant pixels to values from input, excluding 5
    for r in range(rows):
      for c in range(start_col,end_col):
        if input_grid[r,c] != 5:
          output_grid[r,c-start_col] = input_grid[r,c]

    return output_grid

predicted_outputs = [transform(input_grid) for input_grid, _ in examples]

analysis_results = [analyze_example(inp, outp, pred) for (inp, outp), pred in zip(examples, predicted_outputs)]

for i, result in enumerate(analysis_results):
    print(f"Example {i+1}:")
    for key, value in result.items():
        print(f"  {key}: {value}")