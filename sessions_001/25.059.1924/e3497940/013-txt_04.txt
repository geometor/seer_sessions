import numpy as np

def describe_grid(grid):
    rows, cols = grid.shape
    unique_colors = np.unique(grid)
    color_counts = {color: np.sum(grid == color) for color in unique_colors}
    return {
        "rows": rows,
        "cols": cols,
        "unique_colors": unique_colors.tolist(),
        "color_counts": color_counts,
    }

def examine_example(input_grid, output_grid, predicted_grid):
    input_desc = describe_grid(input_grid)
    output_desc = describe_grid(output_grid)
    predicted_desc = describe_grid(predicted_grid)

    return {
        "input": input_desc,
        "output": output_desc,
        "predicted": predicted_desc,
        "correct": np.array_equal(output_grid, predicted_grid),
    }

# Example data (replace with actual data from the task)
examples = [
    (
        np.array([[5, 5, 5, 2, 2, 6, 6],[5, 5, 5, 2, 2, 6, 6],[5, 5, 5, 2, 2, 6, 6]]),
        np.array([[2, 2, 6, 6],[2, 2, 6, 6],[2, 2, 6, 6]]),
        np.array([[2, 2, 6, 6],[2, 2, 6, 6],[2, 2, 6, 6]])
    ),
    (
        np.array([[5, 5, 5, 1, 1, 1, 1, 1],[5, 5, 5, 1, 1, 1, 1, 1],[5, 5, 5, 1, 1, 1, 1, 1],[5, 5, 5, 1, 1, 1, 1, 1]]),
        np.array([[1, 1, 1, 1, 1],[1, 1, 1, 1, 1],[1, 1, 1, 1, 1],[1, 1, 1, 1, 1]]),
        np.array([[1, 1, 1, 1, 1],[1, 1, 1, 1, 1],[1, 1, 1, 1, 1],[1, 1, 1, 1, 1]])
    ),
     (
        np.array([[5, 5, 5, 4, 4, 4, 4],[5, 5, 5, 4, 4, 4, 4],[5, 5, 5, 4, 4, 4, 4],[5, 5, 5, 4, 4, 4, 4]]),
        np.array([[4, 4, 4, 4],[4, 4, 4, 4],[4, 4, 4, 4],[4, 4, 4, 4]]),
        np.array([[4, 4, 4, 4],[4, 4, 4, 4],[4, 4, 4, 4],[4, 4, 4, 4]])
    ),
      (
        np.array([[1, 2, 3, 4, 5],[6, 7, 8, 9, 0]]),
        np.array([[0, 0, 0, 0, 0],[0, 0, 0, 0, 0]]),
        np.array([[0, 0, 0, 0, 0],[0, 0, 0, 0, 0]])
    ),
    (
        np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 5, 5, 5, 0, 0, 3, 3, 0],[0, 5, 5, 5, 0, 0, 3, 3, 0],[0, 5, 5, 5, 0, 0, 3, 3, 0],[0, 5, 5, 5, 0, 0, 3, 3, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0]]),
        np.array([[3, 3],[3, 3],[3, 3],[3, 3]]),
        np.array([[0, 0, 3, 3, 0],[0, 0, 3, 3, 0],[0, 0, 3, 3, 0],[0, 0, 3, 3, 0],[0, 0, 0, 0, 0]])
    )
]

results = [examine_example(inp, outp, pred) for inp, outp, pred in examples]
for i, result in enumerate(results):
    print(f"Example {i+1}:")
    print(f"  Correct: {result['correct']}")
    print(f"  Input: {result['input']}")
    print(f"  Output: {result['output']}")
    print(f"  Predicted: {result['predicted']}")
    print("-" * 20)