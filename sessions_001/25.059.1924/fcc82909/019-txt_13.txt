import numpy as np

# Provided transform function
def transform(input_grid):
    # Initialize output grid as a copy of the input
    output_grid = np.copy(input_grid)
    rows, cols = output_grid.shape

    # Iterate through all pixels
    for r in range(rows):
        for c in range(cols):
            # If the pixel is white (0), change it to green (3)
            if output_grid[r, c] == 0:
                output_grid[r, c] = 3

    return output_grid

COLOR_MAP = {
    0: (238, 238, 238),  # white
    1: (30, 147, 255),  # blue
    2: (220, 50, 40),  # red
    3: (79, 204, 48),  # green
    4: (230, 200, 0),  # yellow
    5: (85, 85, 85),  # gray
    6: (229, 58, 163),  # magenta
    7: (230, 120, 20),  # orange
    8: (135, 216, 241),  # azure
    9: (146, 18, 49),  # maroon
}
COLOR_NAMES = {
    0: "white",
    1: "blue",
    2: "red",
    3: "green",
    4: "yellow",
    5: "gray",
    6: "magenta",
    7: "orange",
    8: "azure",
    9: "maroon",
}

def compare_grids(input_grid, transformed_grid, expected_output):
   
    input_changes = []
    transformed_changes = []
    
    rows, cols = input_grid.shape
    for r in range(rows):
        for c in range(cols):
            if input_grid[r,c] != transformed_grid[r,c]:
                transformed_changes.append(f'({r},{c}) {COLOR_NAMES[input_grid[r,c]]} -> {COLOR_NAMES[transformed_grid[r,c]]}')
            if input_grid[r,c] != expected_output[r,c]:
                input_changes.append(f'({r},{c}) {COLOR_NAMES[input_grid[r,c]]} -> {COLOR_NAMES[expected_output[r,c]]}')
                
    return input_changes, transformed_changes
                

# Example data (replace with actual data from the task)
task_id = '3906de3d'
train_examples = [
    {
        "input": np.array([[8, 8, 8, 8, 8, 8, 8, 8, 8],
                           [8, 8, 0, 0, 0, 0, 0, 8, 8],
                           [8, 0, 0, 0, 0, 0, 0, 0, 8],
                           [8, 8, 0, 0, 0, 0, 0, 8, 8],
                           [8, 8, 8, 8, 8, 8, 8, 8, 8]]),
        "output": np.array([[8, 8, 8, 8, 8, 8, 8, 8, 8],
                            [8, 8, 3, 3, 3, 3, 3, 8, 8],
                            [8, 3, 3, 3, 3, 3, 3, 3, 8],
                            [8, 8, 3, 3, 3, 3, 3, 8, 8],
                            [8, 8, 8, 8, 8, 8, 8, 8, 8]]),
    },
    {
        "input": np.array([[8, 8, 8, 8, 8, 8, 8, 8],
                           [8, 8, 0, 0, 0, 8, 8, 8],
                           [8, 0, 0, 0, 0, 0, 8, 8],
                           [8, 8, 0, 0, 0, 8, 8, 8],
                           [8, 8, 8, 8, 8, 8, 8, 8]]),
        "output": np.array([[8, 8, 8, 8, 8, 8, 8, 8],
                            [8, 8, 3, 3, 3, 8, 8, 8],
                            [8, 3, 3, 3, 3, 3, 8, 8],
                            [8, 8, 3, 3, 3, 8, 8, 8],
                            [8, 8, 8, 8, 8, 8, 8, 8]]),
    },
    {
         "input": np.array([[8, 8, 8, 8, 8, 8, 8],
                            [8, 8, 8, 0, 8, 8, 8],
                            [8, 8, 0, 0, 0, 8, 8],
                            [8, 0, 0, 0, 0, 0, 8],
                            [8, 8, 0, 0, 0, 8, 8],
                            [8, 8, 8, 0, 8, 8, 8],
                            [8, 8, 8, 8, 8, 8, 8]]),
        "output": np.array([[8, 8, 8, 8, 8, 8, 8],
                            [8, 8, 8, 3, 8, 8, 8],
                            [8, 8, 3, 3, 3, 8, 8],
                            [8, 3, 3, 3, 3, 3, 8],
                            [8, 8, 3, 3, 3, 8, 8],
                            [8, 8, 8, 3, 8, 8, 8],
                            [8, 8, 8, 8, 8, 8, 8]]),
    }
]

for i, example in enumerate(train_examples):
  transformed_grid = transform(example["input"])
  input_changes, transformed_changes = compare_grids(example["input"], transformed_grid, example["output"])
  print(f"Example {i+1}:")
  print(f"  Expected Changes: {input_changes}")
  print(f"  Transform Changes: {transformed_changes}")
  print("-" * 20)