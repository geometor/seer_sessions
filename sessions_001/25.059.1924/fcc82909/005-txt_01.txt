import numpy as np

def analyze_grid(grid, grid_name):
    objects = {}
    unique_colors = np.unique(grid)
    for color in unique_colors:
        if color != 0:
            objects[color] = {
                'count': 0,
                'heights': [],
                'widths': []
             }

    visited = np.zeros_like(grid, dtype=bool)

    def dfs(row, col, color):
        if (row < 0 or row >= grid.shape[0] or col < 0 or col >= grid.shape[1] or
                visited[row, col] or grid[row, col] != color):
            return []
        visited[row, col] = True
        pixels = [(row,col)]

        pixels.extend(dfs(row + 1, col, color))
        pixels.extend(dfs(row - 1, col, color))
        pixels.extend(dfs(row, col + 1, color))
        pixels.extend(dfs(row, col - 1, color))
        return pixels

    for row in range(grid.shape[0]):
        for col in range(grid.shape[1]):
            if not visited[row, col] and grid[row, col] != 0:
                object_pixels = dfs(row, col, grid[row, col])
                if object_pixels:
                    rows, cols = zip(*object_pixels)
                    height = max(rows) - min(rows) + 1
                    width = max(cols) - min(cols) + 1
                    color = grid[row,col]
                    objects[color]['count'] += 1
                    objects[color]['heights'].append(height)
                    objects[color]['widths'].append(width)

    print(f"Analysis of {grid_name}:")
    for color, data in objects.items():
        print(f"  Color {color}:")
        print(f"    Count: {data['count']}")
        print(f"    Heights: {data['heights']}")
        print(f"    Widths: {data['widths']}")


# Provided examples in the prompt:
train_ex_inputs = [
np.array([[7, 0, 7, 7, 7, 0, 7, 7, 7],
          [0, 0, 0, 0, 0, 0, 0, 0, 0],
          [6, 0, 6, 0, 6, 0, 6, 0, 6],
          [6, 0, 6, 0, 6, 0, 6, 0, 6],
          [0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0],
          [9, 9, 9, 9, 9, 9, 9, 9, 9]]),

np.array([[8, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [8, 8, 0, 0, 0, 0, 0, 0, 0, 0],
          [8, 8, 8, 0, 0, 0, 0, 0, 0, 0],
          [8, 8, 8, 8, 0, 0, 0, 0, 0, 0],
          [8, 8, 8, 8, 8, 0, 0, 0, 0, 0],
          [8, 8, 8, 8, 8, 8, 0, 0, 0, 0],
          [8, 8, 8, 8, 8, 8, 8, 0, 0, 0],
          [8, 8, 8, 8, 8, 8, 8, 8, 0, 0],
          [8, 8, 8, 8, 8, 8, 8, 8, 8, 0],
          [8, 8, 8, 8, 8, 8, 8, 8, 8, 8]]),

np.array([[5, 0, 5, 0, 5, 0, 5, 0, 5],
          [0, 0, 0, 0, 0, 0, 0, 0, 0],
          [5, 0, 5, 0, 5, 0, 5, 0, 5],
          [0, 0, 0, 0, 0, 0, 0, 0, 0],
          [5, 0, 5, 0, 5, 0, 5, 0, 5],
          [0, 0, 0, 0, 0, 0, 0, 0, 0],
          [5, 0, 5, 0, 5, 0, 5, 0, 5],
          [0, 0, 0, 0, 0, 0, 0, 0, 0],
          [5, 0, 5, 0, 5, 0, 5, 0, 5],
          [0, 0, 0, 0, 0, 0, 0, 0, 0],
          [5, 0, 5, 0, 5, 0, 5, 0, 5]]),

np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 7, 0, 0, 7, 0, 0, 7, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 6, 6, 0, 0, 6, 6, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 9, 0, 0, 9, 0, 0, 9, 0, 0]]),
]

train_ex_outputs = [
np.array([[7, 0, 7, 7, 7, 0, 7, 7, 7],
          [3, 3, 3, 3, 3, 3, 3, 3, 3],
          [3, 3, 3, 3, 3, 3, 3, 3, 3],
          [3, 3, 3, 3, 3, 3, 3, 3, 3],
          [6, 0, 6, 0, 6, 0, 6, 0, 6],
          [6, 0, 6, 0, 6, 0, 6, 0, 6],
          [3, 3, 3, 3, 3, 3, 3, 3, 3],
          [3, 3, 3, 3, 3, 3, 3, 3, 3],
          [3, 3, 3, 3, 3, 3, 3, 3, 3]]),

np.array([[8, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [8, 8, 0, 0, 0, 0, 0, 0, 0, 0],
          [8, 8, 8, 0, 0, 0, 0, 0, 0, 0],
          [8, 8, 8, 8, 0, 0, 0, 0, 0, 0],
          [8, 8, 8, 8, 8, 0, 0, 0, 0, 0],
          [8, 8, 8, 8, 8, 8, 0, 0, 0, 0],
          [8, 8, 8, 8, 8, 8, 8, 0, 0, 0],
          [8, 8, 8, 8, 8, 8, 8, 8, 0, 0],
          [8, 8, 8, 8, 8, 8, 8, 8, 8, 0],
          [8, 8, 8, 8, 8, 8, 8, 8, 8, 8]]),

np.array([[5, 0, 5, 0, 5, 0, 5, 0, 5],
          [0, 0, 0, 0, 0, 0, 0, 0, 0],
          [5, 0, 5, 0, 5, 0, 5, 0, 5],
          [0, 0, 0, 0, 0, 0, 0, 0, 0],
          [5, 0, 5, 0, 5, 0, 5, 0, 5],
          [0, 0, 0, 0, 0, 0, 0, 0, 0],
          [5, 0, 5, 0, 5, 0, 5, 0, 5],
          [0, 0, 0, 0, 0, 0, 0, 0, 0],
          [5, 0, 5, 0, 5, 0, 5, 0, 5],
          [0, 0, 0, 0, 0, 0, 0, 0, 0],
          [5, 0, 5, 0, 5, 0, 5, 0, 5]]),

np.array([[3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
          [3, 7, 3, 3, 7, 3, 3, 7, 3, 3],
          [3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
          [3, 3, 6, 6, 3, 3, 6, 6, 3, 3],
          [3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
          [3, 9, 3, 3, 9, 3, 3, 9, 3, 3]]),
]

for i in range(len(train_ex_inputs)):
  analyze_grid(train_ex_inputs[i],f"train_input_{i}")
  analyze_grid(train_ex_outputs[i],f"train_output_{i}")