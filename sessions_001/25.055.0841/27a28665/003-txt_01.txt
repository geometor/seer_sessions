import numpy as np

def transform(input_grid):
    # initialize output_grid
    output_grid = np.zeros((1, 1), dtype=int)

    # Count gray pixels
    gray_count = np.sum(input_grid == 5)
    
    # Count white pixels
    white_count = np.sum(input_grid == 0)

    # change output pixels 
    if gray_count > white_count:
        output_grid[0, 0] = 1

    return output_grid

# Define the train and test examples as dictionaries
train_examples = [
    {
        "input": np.array([[5, 5, 5, 5, 5, 5, 5, 5, 0],
                           [5, 5, 5, 5, 5, 5, 5, 5, 0],
                           [5, 5, 5, 5, 5, 5, 5, 5, 0],
                           [5, 5, 5, 5, 5, 5, 5, 5, 0],
                           [5, 5, 5, 5, 5, 5, 5, 5, 0],
                           [5, 5, 5, 5, 5, 5, 5, 5, 0],
                           [5, 5, 5, 5, 5, 5, 5, 5, 0],
                           [5, 5, 5, 5, 5, 5, 5, 5, 0],
                           [5, 5, 5, 5, 5, 5, 5, 5, 0]]),
        "output": np.array([[1]])
    },
    {
        "input": np.array([[0, 5, 5, 5, 5, 5, 5, 5, 0],
                           [0, 5, 5, 5, 5, 5, 5, 5, 0],
                           [0, 5, 5, 5, 5, 5, 5, 5, 0],
                           [0, 5, 5, 5, 5, 5, 5, 5, 0],
                           [0, 5, 5, 5, 5, 5, 5, 5, 0],
                           [0, 5, 5, 5, 5, 5, 5, 5, 0],
                           [0, 5, 5, 5, 5, 5, 5, 5, 0],
                           [0, 5, 5, 5, 5, 5, 5, 5, 0],
                           [0, 5, 5, 5, 5, 5, 5, 5, 0]]),
        "output": np.array([[0]])
    },
    {
        "input": np.array([[0, 5, 5, 5, 0, 5, 5, 5, 0],
                           [0, 5, 5, 5, 0, 5, 5, 5, 0],
                           [0, 5, 5, 5, 0, 5, 5, 5, 0],
                           [0, 5, 5, 5, 0, 5, 5, 5, 0],
                           [0, 5, 5, 5, 0, 5, 5, 5, 0],
                           [0, 5, 5, 5, 0, 5, 5, 5, 0],
                           [0, 5, 5, 5, 0, 5, 5, 5, 0],
                           [0, 5, 5, 5, 0, 5, 5, 5, 0],
                           [0, 5, 5, 5, 0, 5, 5, 5, 0]]),
        "output": np.array([[0]])
    }
]


# Function to execute the transformation and compare with expected output
def execute_and_compare(examples, transform_func):
    results = []
    for i, example in enumerate(examples):
        input_grid = example["input"]
        expected_output = example["output"]
        predicted_output = transform_func(input_grid)
        
        # Ensure predicted output is a numpy array for comparison
        if not isinstance(predicted_output, np.ndarray):
            predicted_output = np.array(predicted_output)
        
        comparison = np.array_equal(predicted_output, expected_output)
        results.append({
            "example_index": i,
            "input_shape": input_grid.shape,
            "output_shape": expected_output.shape,
            "predicted_output": predicted_output.tolist(),
            "expected_output": expected_output.tolist(),
            "match": comparison
        })
    return results

train_results = execute_and_compare(train_examples, transform)
print (train_results)