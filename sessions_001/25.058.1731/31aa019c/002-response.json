{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid by identifying the largest contiguous cluster of non-white pixels,\nreplacing all but one pixel in the cluster with red (2), keeping the original color of a single pixel,\nand clearing all other pixels to white (0).\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef find_largest_cluster(grid):\n    \"\"\"Finds the largest contiguous cluster of non-white pixels.\"\"\"\n    rows, cols = len(grid), len(grid[0])\n    visited = set()\n    max_cluster = []\n\n    def get_neighbors(r, c):\n        \"\"\"Gets valid neighbors of a cell.\"\"\"\n        neighbors = []\n        for dr in [-1, 0, 1]:\n            for dc in [-1, 0, 1]:\n                if dr == 0 and dc == 0:\n                    continue\n                nr, nc = r + dr, c + dc\n                if 0 <= nr < rows and 0 <= nc < cols:\n                    neighbors.append((nr, nc))\n        return neighbors\n\n    def bfs(start_r, start_c):\n        \"\"\"Performs Breadth-First Search to find a cluster.\"\"\"\n        queue = deque([(start_r, start_c)])\n        visited.add((start_r, start_c))\n        cluster = [(start_r, start_c)]\n        colors = {}\n        colors[grid[start_r][start_c]] = 1\n\n        while queue:\n            r, c = queue.popleft()\n            for nr, nc in get_neighbors(r, c):\n                if (nr, nc) not in visited and grid[nr][nc] != 0:\n                    visited.add((nr, nc))\n                    queue.append((nr, nc))\n                    cluster.append((nr, nc))\n                    if grid[nr][nc] not in colors:\n                        colors[grid[nr][nc]] = 0\n                    colors[grid[nr][nc]]+=1\n        return cluster, colors\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r][c] != 0 and (r, c) not in visited:\n                cluster, colors = bfs(r, c)\n                if len(cluster) > len(max_cluster):\n                    max_cluster = cluster\n                    max_colors = colors\n\n    return max_cluster, max_colors\n\ndef select_center_pixel(grid, cluster, colors):\n    \"\"\" selects a single pixel within the cluster to remain to original color \"\"\"\n\n    # if only one color exists other than 0(white), then return the first\n    if len(colors) == 1:\n       return cluster[0]\n\n    # find coordinate of pixel that has max count\n    max_count = 0\n    max_color = -1\n\n    for color in colors:\n        if colors[color] > max_count:\n            max_count = colors[color]\n            max_color = color\n\n    for (r,c) in cluster:\n       if grid[r][c] == max_color:\n          return (r,c)\n\n    return cluster[0] # default\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the described rule.\"\"\"\n    grid = np.array(input_grid)\n    rows, cols = len(grid), len(grid[0])\n    output_grid = np.zeros((rows, cols), dtype=int)\n\n    # Find the largest contiguous cluster\n    cluster, colors = find_largest_cluster(grid)\n\n    # if no cluster found, return all white grid\n    if not cluster:\n       return output_grid\n\n    # select center pixel\n    center_pixel = select_center_pixel(grid, cluster, colors)\n\n\n    # Recolor the cluster to red (2), except center pixel\n    for r, c in cluster:\n        output_grid[r, c] = 2\n    output_grid[center_pixel] = grid[center_pixel]\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4803,
    "candidates_token_count": 918,
    "total_token_count": 5721,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.868924,
  "response_file": "002-response.json"
}