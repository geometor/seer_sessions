{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nInsert a single pixel of a specific color to the left of each object of the target colors magenta (6), orange (7), green (3), blue (1), and red (2), according to a specific color mapping.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, color):\n    \"\"\"Finds all distinct objects of a given color in the grid.\"\"\"\n    mask = (grid == color)\n    labeled_mask, num_labels = ndimage.label(mask)\n    objects = []\n    for i in range(1, num_labels + 1):\n        coords = np.argwhere(labeled_mask == i)\n        objects.append(coords)\n    return objects\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid by inserting colored pixels to the left of target-colored objects.\"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Color mapping for insertion\n    color_map = {\n        6: 2,  # Magenta -> Red\n        7: 1,  # Orange -> Blue\n        3: 6,  # Green -> Magenta\n        1: 3,  # Blue -> Green\n        2: 7,  # Red -> Orange\n    }\n\n    # Iterate through target colors\n    for target_color, insert_color in color_map.items():\n        # Find all objects of the target color\n        target_objects = find_objects(input_grid, target_color)\n\n        # Iterate through each target object\n        for obj_coords in target_objects:\n            # Find the leftmost x-coordinate\n            leftmost_x = min(coord[1] for coord in obj_coords)\n\n            # Insert the pixel if within bounds\n            insert_x = leftmost_x - 1\n            if insert_x >= 0:\n                insert_y = obj_coords[0][0]  # Row of the first pixel in the object\n                output_grid[insert_y, insert_x] = insert_color\n\n    return output_grid\n\nfrom scipy import ndimage\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2953,
    "candidates_token_count": 475,
    "total_token_count": 3428,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.071553,
  "response_file": "012-response.json"
}