{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation rule involves identifying a vertical or horizontal line of uniform, non-zero colored pixels in the input grid. This line is then treated as an object and moved to the top-left of the output grid, maintaining its orientation. The output grid's dimensions are determined by the length of the line and the dimensions of the input grid, with empty cells filled with zeros.\n\"\"\"\n\nimport numpy as np\n\ndef find_line(grid):\n    \"\"\"\n    Finds a vertical or horizontal line of uniform, non-zero colored pixels.\n    Returns the line as a list of (color, (row, col)) tuples, and its orientation ('v' or 'h').\n    \"\"\"\n    rows, cols = len(grid), len(grid[0])\n\n    # Check for horizontal lines\n    for r in range(rows):\n        first_color = grid[r][0]\n        if first_color == 0:\n            continue\n        is_line = True\n        line = []\n        for c in range(cols):\n            if grid[r][c] != first_color:\n                is_line = False\n                break\n            line.append((first_color, (r, c)))\n        if is_line:\n            return line, 'h'\n\n    # Check for vertical lines\n    for c in range(cols):\n        first_color = grid[0][c]\n        if first_color == 0:\n            continue\n        is_line = True\n        line = []\n        for r in range(rows):\n            if grid[r][c] != first_color:\n                is_line = False\n                break\n            line.append((first_color, (r, c)))\n        if is_line:\n            return line, 'v'\n\n    return None, None\n\ndef transform(input_grid):\n    # Convert to numpy array\n    input_grid = np.array(input_grid)\n    \n    # Find object\n    line, orientation = find_line(input_grid)\n\n    # If no line return blank grid\n    if line is None:\n        return np.zeros_like(input_grid)\n\n    # Determine output dimensions.\n    line_length = len(line)\n    if orientation == 'h':\n        output_grid = np.zeros((input_grid.shape[1],input_grid.shape[0]), dtype=int)\n        output_height = 1\n        output_width = line_length\n          # Place the line in the output grid.\n        for i, (color, _) in enumerate(line):\n            output_grid[0,i] = color\n    else:  # orientation == 'v'\n        output_grid = np.zeros((input_grid.shape[1],input_grid.shape[0]), dtype=int)\n\n        output_height = line_length\n        output_width = 1\n\n        # Place the line in the output grid.\n        for i, (color, _) in enumerate(line):\n            output_grid[i, 0] = color\n\n    output_grid = output_grid[:max(output_height, input_grid.shape[1]), :max(output_width, input_grid.shape[0])]\n\n\n    return output_grid[:input_grid.shape[1], :input_grid.shape[0]]\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4683,
    "candidates_token_count": 752,
    "total_token_count": 5435,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.001791,
  "response_file": "020-response.json"
}