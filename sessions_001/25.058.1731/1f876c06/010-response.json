{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentify all non-zero (colored) pixels in the input grid.\nFor each non-zero pixel, shift its position diagonally down and to the left.\nThe amount of left shift is determined by the number of non-zero pixels above it.\nCreate the output grid with the shifted pixels, maintaining original colors.\n\"\"\"\n\nimport numpy as np\n\ndef get_nonzero_pixels(grid):\n    # Find the indices of non-zero elements\n    rows, cols = np.nonzero(grid)\n    # Create a list of (row, col, value) tuples\n    return [(r, c, grid[r, c]) for r, c in zip(rows, cols)]\n\ndef transform(input_grid):\n    # initialize output_grid as a copy of the input grid\n    output_grid = np.zeros_like(input_grid)\n    input_pixels = get_nonzero_pixels(input_grid)\n\n    # Build a map of original row to list of non-zero colors in that row\n    row_to_colors = {}\n    for r, c, val in input_pixels:\n        if r not in row_to_colors:\n          row_to_colors[r] = []\n        row_to_colors[r].append(val)\n\n    # calculate the shifts\n    shifts = {}\n    for row_index in sorted(row_to_colors.keys()):\n      colors = row_to_colors[row_index]\n      for color in colors:\n          if color not in shifts:\n            shifts[color] = 0\n          else:\n             shifts[color] +=1\n\n    #print(f\"Shifts: {shifts}\")\n\n    # Apply the shifts.\n    for r, c, val in input_pixels:\n      shift = shifts[val]\n      #print(f\"val {val} r {r} c {c} shift {shift}\")\n      new_r = r + shift\n      new_c = c - shift\n      #print(f\"  new_r {new_r} new_c {new_c}\")\n\n      output_grid[new_r, new_c] = val\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2499,
    "candidates_token_count": 491,
    "total_token_count": 2990,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.014669,
  "response_file": "010-response.json"
}