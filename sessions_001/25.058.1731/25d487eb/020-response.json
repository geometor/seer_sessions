{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. Find Green Regions: Identify all contiguous regions of green pixels (value 3).\n2. Find Red Pixels within Green: Locate all red pixels (value 2) that are contained *within* the boundaries of any green region.\n3. Extend Red Downwards or Upwards: For the red pixel within a green region, check if it is closer to top or bottom of the grid, and extend the red color in the closest direction, creating a filled column of red pixels. If the red pixel is in the vertical center of the grid, don't do anything with it.\n\"\"\"\n\nimport numpy as np\n\ndef find_green_regions(grid):\n    \"\"\"Finds contiguous regions of green pixels.\"\"\"\n    green_regions = []\n    visited = np.zeros_like(grid, dtype=bool)\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] == 3 and not visited[r, c]:\n                region = []\n                stack = [(r, c)]\n                visited[r, c] = True\n                while stack:\n                    row, col = stack.pop()\n                    region.append((row, col))\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        if 0 <= nr < grid.shape[0] and 0 <= nc < grid.shape[1] and grid[nr, nc] == 3 and not visited[nr, nc]:\n                            stack.append((nr, nc))\n                            visited[nr, nc] = True\n                green_regions.append(region)\n    return green_regions\n\ndef find_red_in_green(grid, green_regions):\n    \"\"\"Finds red pixels within green regions.\"\"\"\n    red_pixels = np.argwhere(grid == 2).tolist()\n    red_in_green = []\n    for red_pixel in red_pixels:\n        for region in green_regions:\n            if red_pixel in region:\n                red_in_green.append(red_pixel)\n                break\n    return red_in_green\n\ndef transform(input_grid):\n    # Initialize output_grid\n    output_grid = np.copy(input_grid)\n    \n    # Find green regions\n    green_regions = find_green_regions(input_grid)\n    \n    # Find red pixels within green regions\n    red_pixels_in_green = find_red_in_green(input_grid, green_regions)\n\n    # Extend red downwards or upwards\n    for red_pixel in red_pixels_in_green:\n        row, col = red_pixel\n        \n        # Check whether to extend upwards of downwards, by computing the vertical center of the grid.\n        grid_center = input_grid.shape[0] / 2\n        if row < grid_center:\n          #extend upwards\n          for r in range(0, row):\n            output_grid[r,col] = 2\n        elif row > grid_center:\n           # Extend downwards\n           for r in range(row + 1, output_grid.shape[0]):\n              output_grid[r, col] = 2\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5270,
    "candidates_token_count": 759,
    "total_token_count": 6029,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.969672,
  "response_file": "020-response.json"
}