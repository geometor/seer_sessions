{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Green Regions:** Find all contiguous regions of green pixels.\n2.  **Identify Red Pixels within Green Regions:** Find all red pixels that are located *inside* a green region.\n3.  **Conditional Extension:** Iterate through each red pixel within the green area. Extend the red color upwards, overwriting only background pixels.\n\"\"\"\n\nimport numpy as np\n\ndef find_green_regions(grid):\n    \"\"\"Finds contiguous regions of green pixels.\"\"\"\n    green_regions = []\n    visited = np.zeros_like(grid, dtype=bool)\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] == 3 and not visited[r, c]:\n                region = []\n                stack = [(r, c)]\n                visited[r, c] = True\n                while stack:\n                    row, col = stack.pop()\n                    region.append((row, col))\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        if 0 <= nr < grid.shape[0] and 0 <= nc < grid.shape[1] and grid[nr, nc] == 3 and not visited[nr, nc]:\n                            stack.append((nr, nc))\n                            visited[nr, nc] = True\n                green_regions.append(region)\n    return green_regions\n\ndef is_inside_green(row, col, green_regions):\n    \"\"\"Checks if a given pixel is within any of the green regions.\"\"\"\n    for region in green_regions:\n        if (row, col) in region:\n            return True\n    return False\n    \ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n    \n    # Find green regions\n    green_regions = find_green_regions(input_grid)\n\n    # Iterate through each pixel to find red pixels inside green regions and extend upwards\n    for r in range(input_grid.shape[0]):\n      for c in range(input_grid.shape[1]):\n        if input_grid[r,c] == 2 and is_inside_green(r, c, green_regions):\n          # extend red color upwards\n          for ur in range(r -1, -1, -1):\n            if output_grid[ur,c] == 0:\n               output_grid[ur,c] = 2\n            else:\n               break\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5102,
    "candidates_token_count": 606,
    "total_token_count": 5708,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 5.954299,
  "response_file": "022-response.json"
}