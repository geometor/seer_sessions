{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies azure (color 8) lines and blocks in the input grid. Extends azure lines\ninto adjacent white (color 0) pixels. Azure blocks (more than one pixel wide in\nboth directions, including single pixels) remain unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef find_azure_elements(grid):\n    \"\"\"\n    Finds and classifies azure elements as lines or blocks.\n    Returns a list of lines and a list of blocks.\n    Lines are represented as a list of (row, col) coordinates.\n    Blocks are represented as a list of (row, col) coordinates.\n    \"\"\"\n    azure_pixels = np.argwhere(grid == 8)\n    lines = []\n    blocks = []\n    \n    visited = set()\n\n    for r, c in azure_pixels:\n        if (r, c) in visited:\n            continue\n\n        element = []\n        queue = [(r, c)]\n        visited.add((r,c))\n\n        while queue:\n            curr_r, curr_c = queue.pop(0)\n            element.append((curr_r, curr_c))\n\n            neighbors = [(curr_r - 1, curr_c), (curr_r + 1, curr_c),\n                         (curr_r, curr_c - 1), (curr_r, curr_c + 1)]\n\n            for nr, nc in neighbors:\n                if 0 <= nr < grid.shape[0] and 0 <= nc < grid.shape[1] and grid[nr, nc] == 8 and (nr, nc) not in visited:\n                    queue.append((nr, nc))\n                    visited.add((nr, nc))\n        \n        #Classify\n        is_line = True\n        if len(element) > 1:\n          rows, cols = zip(*element)\n          min_row, max_row = min(rows), max(rows)\n          min_col, max_col = min(cols), max(cols)\n\n          if max_row - min_row > 0 and max_col - min_col > 0:\n            is_line = False\n        \n        if is_line:\n          lines.append(element)\n        else:\n          blocks.append(element)      \n\n    return lines, blocks\n\ndef extend_lines(grid, lines):\n    \"\"\"\n    Extends azure lines into adjacent white pixels.\n    \"\"\"\n    output_grid = np.copy(grid)\n    extended = True\n    \n    while extended:\n        extended = False\n        new_lines = []\n        for line in lines:\n          \n          new_line = line.copy()\n          for r, c in line:\n              neighbors = [(r - 1, c), (r + 1, c), (r, c - 1), (r, c + 1)]\n              for nr, nc in neighbors:\n                  if 0 <= nr < grid.shape[0] and 0 <= nc < grid.shape[1] and output_grid[nr, nc] == 0:\n                      output_grid[nr, nc] = 8\n                      if (nr,nc) not in new_line:\n                        new_line.append((nr,nc))\n                      extended = True\n          new_lines.append(new_line)\n        lines = new_lines\n\n    return output_grid\n\ndef transform(input_grid):\n    # Initialize output grid\n    output_grid = np.copy(input_grid)\n\n    # Find azure lines and blocks\n    lines, blocks = find_azure_elements(output_grid)\n\n    # Extend azure lines into adjacent white pixels\n    output_grid = extend_lines(output_grid, lines)\n    \n    # blocks are implicitly preserved because extend_lines only modifies the grid\n    # based on the 'lines' data\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5078,
    "candidates_token_count": 880,
    "total_token_count": 5958,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.881074,
  "response_file": "008-response.json"
}