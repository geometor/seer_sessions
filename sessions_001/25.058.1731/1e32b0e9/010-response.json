{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation rule is as follows:\n1. Identify horizontal and vertical lines of red (2) pixels.\n2. Identify clusters of blue (1) pixels.\n3. For each blue pixel, change any directly adjacent (up, down, left, right) red pixel to white (0).\n4. Propagate blue color on red pixels if they are connected to other blue pixels\n5. Preserve red line and overwrite previous rule at the intersection with a blue cluster\n\"\"\"\n\nimport numpy as np\nfrom scipy.ndimage import label, find_objects\n\ndef get_neighbors(r, c, grid_shape):\n    \"\"\"Returns the valid neighbors of a cell in a grid.\"\"\"\n    rows, cols = grid_shape\n    neighbors = []\n    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n        nr, nc = r + dr, c + dc\n        if 0 <= nr < rows and 0 <= nc < cols:\n            neighbors.append((nr, nc))\n    return neighbors\n  \ndef get_8_way_connected_neighbors(r,c,grid_shape):\n    rows, cols = grid_shape\n    neighbors = []\n    for dr in [-1,0,1]:\n        for dc in [-1,0,1]:\n            if dr == 0 and dc == 0:\n                continue\n            nr, nc = r+dr, c+dc\n            if 0 <= nr < rows and 0 <= nc < cols:\n                neighbors.append((nr,nc))\n    return neighbors\n    \n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the described rule.\"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # 1. Identify blue pixels and their connected components\n    blue_pixels = np.where(input_grid == 1)\n    blue_coords = list(zip(blue_pixels[0], blue_pixels[1]))\n\n    # Find connected components of blue pixels\n    blue_mask = (input_grid == 1).astype(int)\n    labeled_blue, num_blue_features = label(blue_mask)\n\n\n    # 2. Modify red pixels near blue pixels and propagate blue\n    for i in range(1,num_blue_features+1):\n        object_slices = find_objects(labeled_blue == i)\n        for r,c in np.ndindex(object_slices[0][0].stop - object_slices[0][0].start , object_slices[0][1].stop - object_slices[0][1].start):\n             real_r = r + object_slices[0][0].start\n             real_c = c + object_slices[0][1].start\n             if labeled_blue[real_r,real_c] == i :\n\n                for nr,nc in get_8_way_connected_neighbors(real_r, real_c, (rows,cols)):\n                     if output_grid[nr,nc] == 2:\n                            output_grid[nr,nc] = 1\n\n    for r, c in blue_coords:\n        for nr, nc in get_neighbors(r, c, (rows, cols)):\n            if output_grid[nr, nc] == 2:\n                output_grid[nr, nc] = 0\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3290,
    "candidates_token_count": 780,
    "total_token_count": 4070,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.952658,
  "response_file": "010-response.json"
}