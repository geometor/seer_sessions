{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation identifies distinct colored regions in the input grid and expands them horizontally and vertically until the edges of the regions are adjacent.\n\"\"\"\n\nimport numpy as np\n\ndef find_colored_regions(grid):\n    # Find all distinct, contiguous blocks of non-zero pixels.\n    visited = np.zeros_like(grid, dtype=bool)\n    regions = []\n\n    def dfs(row, col, color, region):\n        if (\n            row < 0\n            or row >= grid.shape[0]\n            or col < 0\n            or col >= grid.shape[1]\n            or visited[row, col]\n            or grid[row, col] != color\n        ):\n            return\n        visited[row, col] = True\n        region.append((row, col))\n        dfs(row + 1, col, color, region)\n        dfs(row - 1, col, color, region)\n        dfs(row, col + 1, color, region)\n        dfs(row, col - 1, color, region)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] != 0 and not visited[row, col]:\n                color = grid[row, col]\n                region = []\n                dfs(row, col, color, region)\n                regions.append((color, region))\n    return regions\n\ndef expand_region(grid, region, color):\n  # Expand the region horizontally and vertically.\n  new_region = region.copy()\n  for r, c in region:\n    # Expand up\n    if r > 0 and grid[r-1,c] == 0:\n        new_region.append((r - 1, c))\n    # Expand down\n    if r < grid.shape[0] - 1 and grid[r+1,c] == 0:\n        new_region.append((r + 1, c))\n    # Expand left\n    if c > 0 and grid[r,c-1] == 0:\n        new_region.append((r, c - 1))\n    # Expand right\n    if c < grid.shape[1] -1 and grid[r,c+1] == 0:\n        new_region.append((r, c+1))\n\n  return new_region\n\ndef check_adjacency(regions):\n  # returns true if all regions are adjacent\n    for i in range(len(regions)):\n        color1, region1 = regions[i]\n        for r1, c1 in region1:\n            adjacent = False\n            for j in range(len(regions)):\n                if i == j:\n                    continue\n                color2, region2 = regions[j]\n\n                for r2, c2 in region2:\n                  # check up, down, left, right\n                  if (r1 == r2 + 1 and c1 == c2):\n                      adjacent = True\n                  if (r1 == r2 - 1 and c1 == c2):\n                      adjacent = True\n                  if (r1 == r2 and c1 == c2 + 1):\n                      adjacent = True\n                  if (r1 == r2 and c1 == c2 - 1):\n                      adjacent = True\n            if not adjacent:\n              return False\n    return True\n\n\ndef transform(input_grid):\n    # Initialize output grid as a copy of the input grid.\n    output_grid = np.copy(input_grid)\n\n    # Find colored regions.\n    regions = find_colored_regions(input_grid)\n    \n    # Continue to expand and ceck until all are adjacent\n    adjacent = False\n    while(not adjacent):\n        \n        new_regions = []\n        # Expand each regions\n        for color, region in regions:\n            new_region = expand_region(output_grid, region, color)\n            new_regions.append((color, new_region))\n\n        # Update output grid\n        output_grid = np.zeros_like(input_grid)\n\n        # Set color values in output\n        for color, region in new_regions:\n            for r, c in region:\n                output_grid[r, c] = color\n\n        # Check for full adjacency between regions\n        adjacent = check_adjacency(new_regions)\n\n        # update regions\n        regions = new_regions\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4489,
    "candidates_token_count": 1014,
    "total_token_count": 5503,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.006665,
  "response_file": "002-response.json"
}