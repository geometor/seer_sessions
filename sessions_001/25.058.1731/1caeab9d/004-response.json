{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation rule takes colored rectangular objects from the input grid and arranges them into a single row in the output grid. The objects are ordered from top to bottom and then left to right as they appear in the input. The objects maintain their original shape and color, and are separated by a single white pixel in the output row. Objects of color 0 (white) are ignored. Each object is vertically centered in the output grid.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"\n    Identifies distinct objects within the grid.  An object is a contiguous\n    region of non-zero pixels of the same color. Uses a simple flood-fill\n    algorithm. Ignores objects of color 0.\n    \"\"\"\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n    rows, cols = grid.shape\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def flood_fill(r, c, color, object_coords):\n        if not is_valid(r, c) or visited[r, c] or grid[r, c] != color:\n            return\n        visited[r, c] = True\n        object_coords.append((r, c))\n        flood_fill(r + 1, c, color, object_coords)\n        flood_fill(r - 1, c, color, object_coords)\n        flood_fill(r, c + 1, color, object_coords)\n        flood_fill(r, c - 1, color, object_coords)\n\n    for r in range(rows):\n        for c in range(cols):\n            if not visited[r, c] and grid[r, c] != 0:\n                object_coords = []\n                flood_fill(r, c, grid[r, c], object_coords)\n                objects.append({\n                    'color': grid[r, c],\n                    'coords': object_coords\n                })\n    return objects\n\ndef get_object_dimensions(object_coords):\n    \"\"\"\n    Calculates the dimensions (width and height) of an object given its coordinates.\n    \"\"\"\n    min_row = min(r for r, _ in object_coords)\n    max_row = max(r for r, _ in object_coords)\n    min_col = min(c for _, c in object_coords)\n    max_col = max(c for _, c in object_coords)\n    return (max_row - min_row + 1), (max_col - min_col + 1)\n\ndef transform(input_grid):\n    # initialize output_grid\n    input_grid = np.array(input_grid)  # Convert to NumPy array for easier manipulation\n    objects = find_objects(input_grid)\n\n    # determine necessary output grid height, and total width\n    output_height = max(get_object_dimensions(obj['coords'])[0] for obj in objects)\n    output_width = sum(get_object_dimensions(obj['coords'])[1] for obj in objects) + len(objects) -1\n\n    output_grid = np.zeros((output_height, output_width), dtype=int)\n\n\n    # Reorder objects: top-to-bottom, then left-to-right\n    ordered_objects = sorted(objects, key=lambda obj: (min(r for r, _ in obj['coords']), min(c for _, c in obj['coords'])))\n\n    # Place objects on the output grid\n    current_col = 0\n    for obj in ordered_objects:\n       # find object height, and center in output row\n       obj_height = get_object_dimensions(obj['coords'])[0]\n       row_offset = (output_height - obj_height) // 2\n\n       min_row = min(r for r, _ in obj['coords'])\n       min_col = min(c for _, c in obj['coords'])\n\n       for r, c in obj['coords']:\n            output_grid[row_offset + (r-min_row), current_col + (c - min_col)] = obj['color']\n       current_col += get_object_dimensions(obj['coords'])[1] + 1 # +1 for the space\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4962,
    "candidates_token_count": 986,
    "total_token_count": 5948,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.645228,
  "response_file": "004-response.json"
}