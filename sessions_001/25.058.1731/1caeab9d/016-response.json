{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. **Identify Objects:** Find all distinct rectangular regions of uniform color within the input grid, ignoring the background color (0/white).\n2. **Determine the Target Row:** Identify, in the Input Grid, the lowest row index *above* each colored object.  Add 1 to find the target row index.\n3.  **Translate Vertically:** Move each identified object downwards. The top row of each object will be placed at the target row index determined in the previous step. Preserve the object's original width and horizontal position.\n4.  **Output:** Create an output grid of the same dimensions as the input grid, initially filled with the background color (0). Place the translated objects onto this grid at their new positions.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    # Find rectangular blocks of uniform color (excluding 0/white)\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            if not visited[r, c] and grid[r, c] != 0:\n                color = grid[r, c]\n                # Explore the connected region\n                stack = [(r, c)]\n                visited[r, c] = True\n                min_row, max_row = r, r\n                min_col, max_col = c, c\n\n                while stack:\n                    curr_row, curr_col = stack.pop()\n                    min_row = min(min_row, curr_row)\n                    max_row = max(max_row, curr_row)\n                    min_col = min(min_col, curr_col)\n                    max_col = max(max_col, curr_col)\n\n                    # Check neighbors (up, down, left, right)\n                    neighbors = []\n                    if curr_row > 0:\n                        neighbors.append((curr_row - 1, curr_col))\n                    if curr_row < rows - 1:\n                        neighbors.append((curr_row + 1, curr_col))\n                    if curr_col > 0:\n                        neighbors.append((curr_row, curr_col - 1))\n                    if curr_col < cols - 1:\n                        neighbors.append((curr_row, curr_col + 1))\n\n                    for nr, nc in neighbors:\n                        if not visited[nr, nc] and grid[nr, nc] == color:\n                            stack.append((nr, nc))\n                            visited[nr, nc] = True\n                objects.append({\n                    'color': color,\n                    'min_row': min_row,\n                    'max_row': max_row,\n                    'min_col': min_col,\n                    'max_col': max_col,\n                })\n    return objects\n\ndef get_target_row(grid, obj):\n    # Find the lowest row index above the object\n    min_row = obj['min_row']\n    target_row = min_row - 1\n    return target_row\n\ndef transform(input_grid):\n    # Initialize output_grid as all zeros\n    output_grid = np.zeros_like(input_grid)\n    rows, cols = input_grid.shape\n\n    # Find objects in the input grid\n    objects = find_objects(input_grid)\n\n    # Move each object to the target row\n    for obj in objects:\n        # Determine target row\n        target_row = get_target_row(input_grid, obj)\n\n        # Calculate the height of the object\n        obj_height = obj['max_row'] - obj['min_row'] + 1\n\n        # Calculate start and end columns\n        start_col = obj['min_col']\n        end_col = obj['max_col']\n\n        # Place the object in the output grid\n        for c in range(start_col, end_col + 1):\n            for r in range(obj_height):\n                if target_row >= 0:  # Ensure we don't go out of bounds\n                    output_grid[target_row - obj_height + 1 + r, c] = obj['color']\n    \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4218,
    "candidates_token_count": 966,
    "total_token_count": 5184,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.434865,
  "response_file": "016-response.json"
}