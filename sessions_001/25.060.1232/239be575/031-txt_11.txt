import numpy as np

COLOR_MAP = {
    0: (238, 238, 238),  # white
    1: (30, 147, 255),  # blue
    2: (220, 50, 40),  # red
    3: (79, 204, 48),  # green
    4: (230, 200, 0),  # yellow
    5: (85, 85, 85),  # gray
    6: (229, 58, 163),  # magenta
    7: (230, 120, 20),  # orange
    8: (135, 216, 241),  # azure
    9: (146, 18, 49),  # maroon
}

def get_color_name(value):
    for name, val in COLOR_MAP.items():
        if val == value:
            return name
    # Return the key (integer value) if color name not found
    return str(value)

def transform(input_grid):
    # initialize output_grid - single value of 0
    output_grid = np.array([[0]])

    # Count occurrences of '0' (white) pixels. This is a placeholder and likely
    # needs adjustment after viewing more training examples.  The single example
    # suggests a count might be involved, but the actual rule is unknown.
    # white_count = np.sum(input_grid == 0)

    # Other counting or feature detection logic would go here, based on further examples.

    return output_grid

def describe_grid(grid):
    """Provides a basic description of a grid."""
    height, width = grid.shape
    unique_colors = np.unique(grid)
    color_names = [get_color_name(c) for c in unique_colors]
    print(f"  Dimensions: {width}x{height}")
    print(f"  Unique Colors: {', '.join(color_names)}")

def show_grid(grid, title="Grid"):
    """Displays a grid for visual inspection (placeholder)."""
    print(title + ":")
    print(grid)
    describe_grid(grid)

# Provided training examples
train_input_output_pairs = [
    (np.array([[8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
               [8, 8, 0, 0, 0, 0, 0, 0, 8, 8],
               [8, 0, 0, 0, 0, 0, 0, 0, 0, 8],
               [8, 0, 0, 0, 0, 0, 0, 0, 0, 8],
               [8, 0, 0, 0, 0, 0, 2, 0, 0, 8],
               [8, 0, 0, 0, 0, 0, 0, 0, 0, 8],
               [8, 8, 0, 0, 0, 0, 0, 0, 8, 8],
               [8, 8, 8, 8, 8, 8, 8, 8, 8, 8]]),
     np.array([[0]])),
    (np.array([[8, 8, 8, 8, 8, 8, 8, 8, 8],
              [8, 8, 8, 8, 8, 8, 8, 8, 8],
              [8, 8, 0, 0, 0, 0, 0, 0, 8],
              [8, 8, 0, 0, 0, 0, 0, 0, 8],
              [8, 8, 0, 0, 0, 0, 2, 0, 8],
              [8, 8, 0, 0, 0, 0, 0, 0, 8],
              [8, 8, 8, 8, 8, 8, 8, 8, 8]]),
    np.array([[2]])),
    (np.array([[8, 8, 8, 8, 8, 8, 8, 8],
               [8, 8, 8, 8, 8, 8, 8, 8],
               [8, 8, 0, 0, 0, 0, 0, 8],
               [8, 8, 0, 0, 0, 0, 0, 8],
               [8, 8, 0, 0, 0, 2, 0, 8],
               [8, 8, 0, 0, 0, 0, 0, 8],
               [8, 8, 8, 8, 8, 8, 8, 8]]),
     np.array([[4]])),
    (np.array([[8, 8, 8, 8, 8, 8, 8],
               [8, 8, 8, 8, 8, 8, 8],
               [8, 8, 0, 0, 0, 0, 8],
               [8, 8, 0, 0, 0, 0, 8],
               [8, 8, 0, 0, 2, 0, 8],
               [8, 8, 0, 0, 0, 0, 8],
               [8, 8, 8, 8, 8, 8, 8]]),
     np.array([[6]])),
     (np.array([[8, 8, 8, 8, 8, 8],
               [8, 8, 8, 8, 8, 8],
               [8, 8, 0, 0, 0, 8],
               [8, 8, 0, 0, 0, 8],
               [8, 8, 0, 2, 0, 8],
               [8, 8, 0, 0, 0, 8],
               [8, 8, 8, 8, 8, 8]]),
     np.array([[8]]))
]

# Iterate through each example pair
for i, (input_grid, expected_output) in enumerate(train_input_output_pairs):
    print(f"--- Example {i + 1} ---")
    print("Input:")
    show_grid(input_grid, "Input Grid")

    print("\nExpected Output:")
    show_grid(expected_output, "Expected Output Grid")

    actual_output = transform(input_grid)
    print("\nActual Output:")
    show_grid(actual_output, "Actual Output Grid")

    print("\nAnalysis:")
    # Analyze the relationship between input and output
    if expected_output.shape == actual_output.shape and np.array_equal(expected_output, actual_output):
        print("  Transform function produced the expected output.")
    else:
        print("  Transform function DID NOT produce the expected output.")
    print("-" * 20)