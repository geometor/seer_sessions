import numpy as np

def analyze_grid(grid):
    """Analyzes a grid and returns color counts and grid size."""
    grid = np.array(grid)
    color_counts = {color: 0 for color in range(10)}
    for row in grid:
        for cell in row:
            color_counts[cell] += 1
    return {
        "size": grid.shape,
        "color_counts": color_counts,
    }

# Example data (replace with the actual data from the problem)
examples = [
    {
        "input": [[8, 1, 8], [5, 8, 5], [8, 1, 8]],
        "output": [[4]],
    },
    {
        "input": [[0, 8, 3, 8, 5, 8], [5, 8, 7, 8, 8, 3], [5, 0, 7, 8, 9, 9], [9, 7, 8, 8, 1, 4], [8, 6, 9, 6, 8, 0]],
        "output": [[6]],
    },
    {
       "input": [[8, 4, 8, 8, 8, 3], [7, 0, 6, 9, 8, 5], [6, 6, 8, 8, 8, 6], [9, 8, 8, 6, 0, 8], [7, 5, 2, 8, 1, 0], [8, 7, 8, 9, 0, 9]],
        "output": [[9]],
    },
        {
       "input": [[1, 8, 1, 1, 8, 1, 1, 8], [1, 1, 1, 1, 1, 1, 1, 1], [8, 1, 1, 8, 1, 1, 8, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 1, 1, 8, 1, 1, 8], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [8, 1, 1, 8, 1, 1, 8, 1]],
        "output": [[4]]
    },
       {
        "input" : [[5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 8, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 8, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5], [8, 5, 5, 5, 5, 5, 5, 5, 5]],
        "output": [[1]]

    }
]
current_code_output = []
for example in examples:
    input_grid = example["input"]
    input_array = np.array(input_grid)
    grid_size = input_array.shape[0]
    azure_count = 0
    for i in range(grid_size):
        if input_array[i, i] == 8:
            azure_count += 1
    current_code_output.append(azure_count)

results = []
for i, example in enumerate(examples):
    analysis = analyze_grid(example["input"])
    results.append({
        "example": i + 1,
        "input_size": f"{analysis['size'][0]}x{analysis['size'][1]}",
        "expected_output": example["output"][0][0],
        "current_code_output": current_code_output[i],
        "color_counts": analysis["color_counts"],
    })

for result in results:
    print(f"Example {result['example']}:")
    print(f"  Input Size: {result['input_size']}")
    print(f"  Expected Output: {result['expected_output']}")
    print(f"  Current Code Output: {result['current_code_output']}")
    print(f"  Color Counts: {result['color_counts']}")
    print("-" * 20)