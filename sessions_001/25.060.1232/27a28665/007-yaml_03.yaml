observations:
  - example_set: train
    description: |
      Analysis of the training examples reveals a consistent pattern related to color dominance.
      A color is considered dominant if its count is greater than or equal to the sum of all other colors minus 1.
      If a dominant color is present in the input grid, the output is a 1x1 grid with the value 1.
      If not, there is no transformation.

  - object_types:
      - grid: A 2D array of pixels, each with a color value (0-9).
      - color: An integer value (0-9) representing a specific color.
      - count: The number of occurrences of a specific color in a grid.
      - dominant_color: The color with the highest count, which also satisfies the dominance condition.

  - actions:
      - count_colors: Determine the number of occurrences of each color in the input grid.
      - identify_dominant_color: Find the color with the maximum count.
      - check_dominance: Determine if the dominant color's count is greater than or equal to the sum of all other colors minus 1.
      - create_output: If a dominant color exists, create a 1x1 output grid containing '1'. Otherwise return None.

  - properties:
      - color_counts: A dictionary mapping each color to its count in the grid.
      - max_count: The highest count among all colors.
      - sum_other_colors: The sum of the counts of all colors *except* the dominant color.
      - is_dominant: A boolean value indicating whether a dominant color exists.
      - output_present: A boolean value indicating whether the output grid should exist based on the dominance condition.