import numpy as np

def analyze_results(examples, transform_function):
    results = []
    for i, (input_grid, expected_output) in enumerate(examples):
        input_grid = np.array(input_grid)
        expected_output = np.array(expected_output)
        predicted_output = transform_function(input_grid)
        
        # Check if the shapes are the same
        shape_match = predicted_output.shape == expected_output.shape
        
        # Check how many pixel values match
        values_match = np.sum(predicted_output == expected_output)
        total_pixels = expected_output.size
        values_match_percent = (values_match / total_pixels) * 100 if total_pixels else 0

        results.append({
            "example": i + 1,
            "shape_match": shape_match,
            "values_match_percent": values_match_percent,
        })
    return results

# Assuming 'train_input_output_pairs' and 'transform' are defined elsewhere
# Example Usage (replace with your actual data):
examples = [
  ([
    [6, 0, 8, 8, 8, 6]
    ],
    [
    [6, 0, 8, 8, 8, 6],
    [6, 0, 8, 8, 8, 6],
    [6, 0, 8, 8, 8, 6]
    ]),
  ([
    [1, 0, 8, 0, 0, 0],
    [0, 0, 0, 0, 0, 6]
    ],
    [
    [1, 0, 8, 0, 0, 0],
    [1, 0, 8, 0, 0, 0],
    [1, 0, 8, 0, 0, 0]
    ]),
([
    [0, 0, 7, 7, 0, 0],
    [0, 0, 7, 7, 0, 0],
    [0, 0, 7, 7, 0, 0]
    ],
    [
    [0, 0, 7, 7, 0, 0],
    [0, 0, 7, 7, 0, 0],
    [0, 0, 7, 7, 0, 0]
    ]),
([
    [0, 3, 3, 0, 0, 3],
    [0, 3, 3, 0, 3, 3],
    [0, 3, 3, 0, 0, 3]
    ],
    [
      [0, 3, 3, 0, 0, 3],
      [0, 3, 3, 0, 0, 3],
      [0, 3, 3, 0, 0, 3]
    ]),
([
    [6, 0, 0, 6, 0, 0],
    [6, 0, 0, 6, 0, 0],
    [0, 0, 0, 0, 0, 6]
    ],
    [
      [6, 0, 0, 6, 0, 0],
      [6, 0, 0, 6, 0, 0],
      [6, 0, 0, 6, 0, 0]
    ])
]
results = analyze_results(examples, transform)
for result in results:
  print(result)
