{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid into a grid with a green (3) spiral pattern, starting from the top-left corner and moving inwards. Non-white cells in the input grid are preserved.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms an input grid to create a green spiral pattern, preserving non-white cells.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = output_grid.shape\n    row, col = 0, 0\n    dr, dc = 0, 1  # Initial direction: moving right\n\n    def is_valid(r, c, grid):\n        #check if row and col are within grid boundary\n        return 0 <= r < grid.shape[0] and 0 <= c < grid.shape[1]\n\n    for _ in range(rows * cols):  # Maximum possible steps in the spiral\n        if is_valid(row, col, output_grid):\n            if output_grid[row, col] == 0: #only change if current cell is white\n                output_grid[row, col] = 3\n\n            #check next direction\n            next_row, next_col = row + dr, col + dc\n\n            #if the next position is not valid, OR if it is valid and NOT white, turn\n            if not is_valid(next_row, next_col, output_grid) or output_grid[next_row, next_col] != 0:\n                #turn right\n                dr, dc = dc, -dr # Rotate direction: (0,1)->(1,0)->(0,-1)->(-1,0)\n\n        row += dr\n        col += dc\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3321,
    "candidates_token_count": 396,
    "total_token_count": 3717,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 3.744078,
  "response_file": "006-response.json"
}