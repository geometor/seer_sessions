{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe input is a single-row grid containing a single non-zero pixel. The output is a square grid.\nThe size (width and height) of the output grid is determined by the value of the non-zero pixel\nin the input grid.  If the input pixel's value is 'n', the output grid will be 'n x n'.\nThe output grid contains a diagonal line of pixels, all of which have the same color as the\nnon-zero pixel in the input. This diagonal runs from the top-right corner to the bottom-left\ncorner of the square grid. All other pixels in the output grid are black (0).\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid (single-row) into a square output grid with a diagonal.\n\n    Args:\n        input_grid: A 2D numpy array representing the input grid (single row).\n\n    Returns:\n        A 2D numpy array representing the square output grid.\n    \"\"\"\n    # Find the non-zero pixel and its value.\n    non_zero_indices = np.nonzero(input_grid)\n    if len(non_zero_indices[0]) == 0:\n        return input_grid.copy()  # Return input if no non-zero pixel\n\n    non_zero_value = input_grid[non_zero_indices[0][0], non_zero_indices[1][0]]\n\n    # Determine the size of the output grid.\n    grid_size = non_zero_value\n\n    # Create an output grid filled with zeros.\n    output_grid = np.zeros((grid_size, grid_size), dtype=int)\n\n    # Fill the diagonal with the non-zero element.\n    for i in range(grid_size):\n        output_grid[i, grid_size - 1 - i] = non_zero_value\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3407,
    "candidates_token_count": 431,
    "total_token_count": 3838,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 4.054925,
  "response_file": "032-response.json"
}