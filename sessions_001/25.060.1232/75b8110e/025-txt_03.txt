import numpy as np

def find_bottom_right_nonzero(grid):
    """Finds the coordinates of the bottom-rightmost non-zero pixel."""
    rows, cols = grid.shape
    for r in range(rows - 1, -1, -1):
        for c in range(cols - 1, -1, -1):
            if grid[r, c] != 0:
                return r, c
    return None  # Return None if no non-zero pixel is found

def transform(input_grid):
    # initialize input_grid
    input_grid = np.array(input_grid)
    rows, cols = input_grid.shape
    
    # find start of diagonal
    start_row, start_col = find_bottom_right_nonzero(input_grid)

    # handle cases where there is no non-zero pixel
    if start_row is None:
        return [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]

    # determine dimensions of diagonal
    diag_len = min(start_row + 1, start_col + 1, 4) # cannot exceed 4

    # initialize output grid
    output_grid = np.zeros((4, 4), dtype=int)

    # copy diagonal to output
    for i in range(diag_len):
        output_grid[diag_len - 1 - i, i] = input_grid[start_row - i, start_col - i]

    return output_grid.tolist()

def analyze_example(example):
    input_grid = np.array(example['input'])
    output_grid = np.array(example['output'])
    predicted_output = transform(example['input'])
    correct = np.array_equal(predicted_output, output_grid)

    print(f"Input shape: {input_grid.shape}, Output shape: {output_grid.shape}")
    print(f"Non-zero input pixels: {np.argwhere(input_grid != 0).tolist()}")
    print(f"Non-zero output pixels: {np.argwhere(output_grid != 0).tolist()}")
    print(f"Correct: {correct}")
    print("---")


task = task
for i, example in enumerate(task['train']):
    print(f"Example {i+1}:")
    analyze_example(example)
