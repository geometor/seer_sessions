task:
  name: Grid Intersection Reduction
  description: The input grid is reduced based on intersections of colored regions.
  examples:
    - input_shape: [8, 8]
      output_shape: [4, 4]
      intersection_colors: [0, 4, 5]
      output_rule: "Each 2x2 block of the input grid is represented by a single pixel in the output. The color is the upper left pixel of the input 2x2 block if it contains colors [0,4,5]."
    - input_shape: [6, 15]
      output_shape: [4, 7]
      intersection_colors: [0, 4, 5]
      output_rule: "Each 2x2 block of the input grid is represented by a single pixel in the output. The color is the upper left pixel of the input 2x2 block if it contains colors [0,4,5]."
    - input_shape: [4, 6]
      output_shape: [2, 3]
      intersection_colors: [0, 4, 5]
      output_rule: "Each 2x2 block of the input grid is represented by a single pixel in the output. The color is the upper left pixel of the input 2x2 block if it contains colors [0,4,5]."
objects:
  - name: grid
    description: A 2D array of integer values representing colors.
  - name: pixel
    description: A single cell in the grid.
  - name: color_region
    description: A contiguous block of pixels of the same color.
  - name: intersection
    description: A location where at least two different colored regions meet or overlap.
actions:
  - name: identify_regions
    description: Find contiguous regions of specified colors.
  - name: find_intersections
    description: Locate intersections of different colored regions.
  - name: create_output
    description: Construct the output grid based on the locations and colors of intersections.
  - name: check_neighborhood_2x2
    description: look for intersection of colors in 2x2 windows