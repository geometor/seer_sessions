{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. **Identify Blue Regions:** Find all distinct connected regions of blue (1) pixels in the input grid.  Two blue pixels are considered connected if they are adjacent horizontally or vertically (not diagonally).\n\n2.  **Recolor Regions based on shapes:**\n      - Recolor the \"L\"-shaped region blue (1) pixels to orange (7).\n      - Recolor the solid rectangular region blue (1) pixels to red (2).\n\n3. **Preserve Background:**  All white (0) pixels in the input grid remain unchanged in the output grid.\n\"\"\"\n\nimport numpy as np\n\ndef find_connected_regions(grid, color):\n    \"\"\"Finds connected regions of a specific color in a grid.\"\"\"\n    visited = np.zeros_like(grid, dtype=bool)\n    regions = []\n\n    def dfs(row, col, current_region):\n        \"\"\"Depth-first search to explore a connected region.\"\"\"\n        if (\n            row < 0\n            or row >= grid.shape[0]\n            or col < 0\n            or col >= grid.shape[1]\n            or visited[row, col]\n            or grid[row, col] != color\n        ):\n            return\n\n        visited[row, col] = True\n        current_region.append((row, col))\n\n        # Explore adjacent cells\n        dfs(row + 1, col, current_region)\n        dfs(row - 1, col, current_region)\n        dfs(row, col + 1, current_region)\n        dfs(row, col - 1, current_region)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] == color and not visited[row, col]:\n                current_region = []\n                dfs(row, col, current_region)\n                regions.append(current_region)\n\n    return regions\n\ndef is_l_shaped(region, grid):\n    \"\"\"Checks if a region is L-shaped.\"\"\"\n    # Convert region to a set of tuples for easier lookup\n    region_set = set(region)\n\n    # Find the bounding box of the region\n    min_row = min(r for r, _ in region)\n    max_row = max(r for r, _ in region)\n    min_col = min(c for _, c in region)\n    max_col = max(c for _, c in region)\n\n    # Calculate the expected size of a filled rectangle\n    expected_size = (max_row - min_row + 1) * (max_col - min_col + 1)\n\n    # if total grid elements for region are less than the element count of it's bounding box, then its L shaped.\n    if len(region) < expected_size:\n      return True\n\n    return False\n\ndef transform(input_grid):\n    # Initialize output grid as a copy of the input grid\n    output_grid = np.copy(input_grid)\n\n    # Find connected regions of blue (color 1)\n    blue_regions = find_connected_regions(input_grid, 1)\n\n    # Recolor regions based on shape\n    for region in blue_regions:\n        if is_l_shaped(region, input_grid):\n            # Recolor L-shaped regions to orange (7)\n            for row, col in region:\n                output_grid[row, col] = 7\n        else:\n            # Recolor other blue regions (assumed to be rectangular) to red (2)\n            for row, col in region:\n                output_grid[row, col] = 2\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2530,
    "candidates_token_count": 834,
    "total_token_count": 3364,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.155537,
  "response_file": "022-response.json"
}