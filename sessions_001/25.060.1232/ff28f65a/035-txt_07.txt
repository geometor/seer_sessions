import numpy as np

def get_region_bounds(input_grid, row_index, col_index):
    rows, cols = input_grid.shape
    region_height = rows // 3
    region_width = cols // 3
    row_start = row_index * region_height
    row_end = row_start + region_height
    if row_index == 2:
        row_end = rows
    col_start = col_index * region_width
    col_end = col_start + region_width
    if col_index == 2:
        col_end = cols
    return row_start, row_end, col_start, col_end

def check_region_for_color(input_grid, row_start, row_end, col_start, col_end, color):
    for r in range(row_start, row_end):
        for c in range(col_start, col_end):
            if input_grid[r, c] == color:
                return True
    return False

def transform(input_grid):
    output_grid = np.zeros((3, 3), dtype=int)
    for row_index in range(3):
        for col_index in range(3):
            row_start, row_end, col_start, col_end = get_region_bounds(input_grid, row_index, col_index)
            if check_region_for_color(input_grid, row_start, row_end, col_start, col_end, 2):
                output_grid[row_index, col_index] = 1
    return output_grid

# Example grids (replace with actual data from the task)
train_pairs = [
    ({'input': np.array([[7, 7, 7, 7, 7, 7, 7, 7, 7],
       [7, 7, 7, 7, 7, 7, 7, 7, 7],
       [7, 7, 7, 7, 7, 7, 7, 7, 7],
       [7, 7, 7, 7, 7, 7, 7, 7, 7],
       [7, 7, 7, 7, 7, 7, 7, 7, 7],
       [7, 7, 7, 7, 7, 7, 7, 7, 7],
       [2, 2, 2, 2, 2, 2, 2, 2, 2],
       [2, 2, 2, 2, 2, 2, 2, 2, 2],
       [2, 2, 2, 2, 2, 2, 2, 2, 2]]), 'output': np.array([[0, 0, 0],
       [0, 0, 0],
       [1, 1, 1]])},),
    ({'input': np.array([[7, 7, 7, 7, 7, 7, 7, 7, 7],
       [7, 7, 7, 7, 7, 7, 7, 7, 7],
       [7, 7, 7, 7, 7, 7, 7, 7, 7],
       [7, 7, 7, 7, 7, 7, 7, 7, 7],
       [7, 7, 7, 7, 7, 7, 7, 7, 7],
       [7, 7, 7, 7, 7, 7, 7, 7, 7],
       [2, 2, 2, 2, 2, 2, 2, 2, 2],
       [2, 2, 2, 2, 2, 2, 2, 2, 2],
       [2, 2, 2, 2, 2, 2, 2, 2, 2]]), 'output': np.array([[0, 0, 0],
       [0, 0, 0],
       [1, 1, 1]])},),
    ({'input': np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0],
       [2, 2, 2, 2, 2, 2, 2, 2, 2],
       [2, 2, 2, 2, 2, 2, 2, 2, 2],
       [2, 2, 2, 2, 2, 2, 2, 2, 2]]), 'output': np.array([[0, 0, 0],
       [0, 0, 0],
       [1, 1, 1]])},),
    ({'input': np.array([[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],
       [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],
       [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],
       [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
       [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
       [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]]), 'output': np.array([[0, 0, 0],
       [1, 1, 1],
       [0, 0, 0]])},),
    ({'input': np.array([[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],
       [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],
       [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],
       [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],
       [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],
       [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],
       [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
       [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
       [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]]), 'output': np.array([[0, 0, 0],
       [0, 0, 0],
       [1, 1, 1]])},),
]

def compare_grids(grid1, grid2):
    return np.array_equal(grid1, grid2)

results = []
for i, pair in enumerate(train_pairs):
    input_grid = pair['input']
    expected_output = pair['output']
    predicted_output = transform(input_grid)
    correct = compare_grids(predicted_output, expected_output)
    results.append((i, correct, predicted_output.tolist(), expected_output.tolist()))

print(results)