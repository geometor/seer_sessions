{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Find the Green Pixel:** Locate the first instance of a green pixel (value 3) within the input grid. If no green pixel is found, the output is identical to the input.\n2.  **Check for Adjacent Zero Rows:** Once the green pixel is found, check for the presence of an all-zero row immediately *above* the green pixel. Also check for the presence of an all-zero row immediately *below* the green pixel.\n3.  **Conditional Row Removal:**\n    *   If an all-zero row is found *above* the green pixel, remove that row.\n    *   Otherwise, if an all-zero row is found *below* the green pixel, remove that row.\n    *    If neither condition is met, do not modify the grid.\n4.  **Output:** Return the resulting grid.\n\"\"\"\n\nimport numpy as np\n\ndef find_pixel(grid, color):\n    \"\"\"Finds the coordinates of the first occurrence of a specified color.\"\"\"\n    coords = np.where(grid == color)\n    if len(coords[0]) > 0:\n        return coords[0][0], coords[1][0]  # Return row, col\n    return None\n\ndef check_row_zeros(grid, row_index):\n    \"\"\"Checks if all elements in a specified row are zero.\"\"\"\n    if row_index < 0 or row_index >= grid.shape[0]:\n        return False  # Row index out of bounds\n    return np.all(grid[row_index] == 0)\n\ndef remove_row(grid, row_index):\n    \"\"\"Removes a row from the grid.\"\"\"\n    return np.delete(grid, row_index, axis=0)\n\ndef transform(input_grid):\n    # Find the green pixel (value 3).\n    green_pixel_coords = find_pixel(input_grid, 3)\n\n    if green_pixel_coords is None:\n        return input_grid  # No green pixel, return input as is\n\n    row_above_green = green_pixel_coords[0] - 1\n    row_below_green = green_pixel_coords[0] + 1\n\n    # Check for adjacent zero rows and remove if necessary.\n    if check_row_zeros(input_grid, row_above_green):\n        output_grid = remove_row(input_grid, row_above_green)\n    elif check_row_zeros(input_grid, row_below_green):\n        output_grid = remove_row(input_grid, row_below_green)\n    else:\n        output_grid = input_grid.copy() # No adjacent zero row, return a copy of input.\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3608,
    "candidates_token_count": 617,
    "total_token_count": 4225,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 5.65218,
  "response_file": "036-response.json"
}