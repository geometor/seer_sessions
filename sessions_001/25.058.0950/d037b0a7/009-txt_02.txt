import numpy as np

def get_cell_by_value(grid, value):
    # Find the coordinates of a cell with a specific value.
    coords = np.where(grid == value)
    if len(coords[0]) > 0:
       return (coords[0][0], coords[1][0])
    return None
    

def transform(input_grid):
    """Transforms the input grid according to the observed rule."""
    output_grid = np.copy(input_grid)
    rows, cols = output_grid.shape

    # Find the cell with value 6 (magenta).
    magenta_cell = get_cell_by_value(input_grid, 6)
    if magenta_cell:

      # Propagate '6' downwards.
      for row in range(magenta_cell[0] + 1, rows):
          output_grid[row, magenta_cell[1]] = 6

    #Find cell with value 4
    yellow_cell = get_cell_by_value(input_grid, 4)
    if yellow_cell:
       #propagate 4 down
       for row in range(yellow_cell[0] + 1, rows):
          output_grid[row, yellow_cell[1]] = 4

    return output_grid

def compare_grids(grid1, grid2):
    """Compares two grids and returns a grid showing the differences."""
    if grid1.shape != grid2.shape:
        return "Grids have different shapes"
    diff_grid = np.where(grid1 != grid2, -1, 0)  # -1 where different, 0 where same
    num_diffs = np.sum(diff_grid == -1)
    return diff_grid, num_diffs

# Example grids (replace with actual data from the task)

example_grids = [
    {
        "input": np.array([[0, 0, 6], [0, 4, 0], [0, 0, 0]]),
        "output": np.array([[0, 0, 6], [0, 4, 6], [0, 4, 6]]),
    },
    {
        "input": np.array([[0, 6, 0], [0, 0, 0], [4, 0, 0]]),
        "output": np.array([[0, 6, 0], [4, 6, 0], [4, 6, 0]]),
    },
     {
        "input": np.array([[0, 0, 0], [0, 6, 4], [0, 0, 0]]),
        "output": np.array([[0, 6, 4], [0, 6, 4], [0, 6, 4]]),
    },
]

for i, example in enumerate(example_grids):
    transformed_grid = transform(example["input"])
    diff_grid, num_diffs = compare_grids(transformed_grid, example["output"])
    print(f"Example {i+1}:")
    print(f"  Differences:\n{diff_grid}")
    print(f"{num_diffs=}")
