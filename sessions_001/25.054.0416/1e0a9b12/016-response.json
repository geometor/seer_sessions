{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nPixels of certain colors move downwards until they encounter another non-zero pixel or the bottom of the grid. \nPixels in lower rows have precedence.\n\"\"\"\n\nimport numpy as np\n\ndef get_movable_pixels(grid):\n    \"\"\"\n    Identify pixels that are not white (color value 0).\n    Returns a list of (row, col) tuples.\n    \"\"\"\n    movable_pixels = []\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] != 0:\n                movable_pixels.append((r, c))\n    return movable_pixels\n\ndef can_move_down(grid, r, c):\n    \"\"\"\n    Checks if the pixel at (r, c) can move down.\n    Returns True if there's a clear path downwards, False otherwise.\n    \"\"\"\n    for next_r in range(r + 1, grid.shape[0]):\n        if grid[next_r, c] != 0:\n            return False\n    return True\n\ndef move_pixel_down(grid, r, c):\n    \"\"\"\n    Moves the pixel at (r, c) down to the lowest available white cell in its column.\n    \"\"\"\n    new_r = r\n    while new_r + 1 < grid.shape[0] and grid[new_r + 1, c] == 0:\n        new_r += 1\n    grid[new_r, c] = grid[r, c]\n    grid[r, c] = 0\n    return grid\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by moving non-white pixels downwards until they \n    encounter an obstacle or the bottom of the grid, with precedence to lower rows.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    movable_pixels = get_movable_pixels(output_grid)\n\n    # Sort movable pixels by row in reverse order (bottom-up)\n    movable_pixels.sort(reverse=True)\n\n    for r, c in movable_pixels:\n        if can_move_down(output_grid, r, c):\n            output_grid = move_pixel_down(output_grid, r, c)\n    \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3056,
    "candidates_token_count": 535,
    "total_token_count": 3591,
    "cached_content_token_count": 0
  },
  "response_time": 5.20555,
  "response_file": "016-response.json"
}