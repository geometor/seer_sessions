{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Regions:** Locate all contiguous regions of color '9' (maroon) in the input grid.\n2.  **Contextual Replacement:** For each maroon region:\n    *   If the maroon region is part of a horizontal or vertical series of 9s, replace the maroon pixels with color '1' (blue).\n    *   Otherwise, replace each maroon pixel in the identified region with the most frequent color that borders the *entire* region. If there is no border, replace it with '0' (white/blank).\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef get_neighbors(grid, row, col):\n    \"\"\"Gets the valid neighbor coordinates and values for a given cell.\"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    for i in range(max(0, row - 1), min(rows, row + 2)):\n        for j in range(max(0, col - 1), min(cols, col + 2)):\n            if (i, j) != (row, col):\n                neighbors.append((i, j, grid[i, j]))\n    return neighbors\n\ndef get_region(grid, start_row, start_col, color):\n    \"\"\"\n    Finds a contiguous region of the specified color, starting from a given cell.\n    Uses Depth-First Search (DFS).\n    \"\"\"\n    rows, cols = grid.shape\n    region = []\n    stack = [(start_row, start_col)]\n    visited = set()\n\n    while stack:\n        row, col = stack.pop()\n        if (row, col) not in visited and 0 <= row < rows and 0 <= col < cols and grid[row, col] == color:\n            visited.add((row, col))\n            region.append((row, col))\n\n            # Add neighbors to the stack (DFS)\n            for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                stack.append((row + dr, col + dc))\n    return region\n            \ndef most_common_border_color(grid, region):\n    \"\"\"\n    Finds the most common color along the border of the identified region.\n    Excludes the color of the region itself.\n    \"\"\"\n\n    border_colors = []\n    region_set = set(region) # convert for fast look ups\n    region_color = grid[region[0][0]][region[0][1]] # we know the first element exists\n\n    for row, col in region:\n        neighbors = get_neighbors(grid, row, col)\n        for n_row, n_col, n_color in neighbors:\n            if (n_row, n_col) not in region_set:\n                border_colors.append(n_color)\n\n    if not border_colors:\n        return 0 # default if no border\n\n    most_common = Counter(border_colors).most_common(1)\n    return most_common[0][0]\n\ndef is_series(grid, region):\n    \"\"\"\n    Checks if the region is part of a horizontal or vertical series of 9s.\n    \"\"\"\n    rows, cols = grid.shape\n    if not region:\n      return False\n\n    # Check if all cells in the region are in same row or same col\n    first_row, first_col = region[0]\n    same_row = all(r == first_row for r, _ in region)\n    same_col = all(c == first_col for _, c in region)\n\n    if not (same_row or same_col):\n        return False\n    \n    # Expand the region in horizontal/vertical to check for a series\n    if same_row:\n      min_col = min(c for _, c in region)\n      max_col = max(c for _, c in region)\n      for c in range(min_col -1, -1, -1):\n          if grid[first_row, c] == 9:\n            continue\n          else:\n            break\n      else: # loop completed without breaking - series extended all way to left side\n        return True\n      for c in range(max_col + 1, cols):\n          if grid[first_row, c] == 9:\n            continue\n          else:\n             break\n      else:  # series extends to right side\n        return True\n\n    if same_col: # check vertical\n        min_row = min(r for r, _ in region)\n        max_row = max(r for r, _ in region)\n\n        for r in range(min_row -1, -1, -1):\n          if grid[r, first_col] == 9:\n            continue\n          else:\n              break\n        else: # loop finished, series goes to the top\n          return True\n        for r in range(max_row + 1, rows):\n          if grid[r, first_col] == 9:\n            continue\n          else:\n              break\n        else: # series goes to bottom\n          return True\n    \n    return False\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of the input_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = output_grid.shape\n\n    # Identify all '9' regions\n    maroon_regions = []\n    visited = set()\n    for i in range(rows):\n        for j in range(cols):\n            if input_grid[i,j] == 9 and (i,j) not in visited:\n                region = get_region(input_grid, i, j, 9)\n                maroon_regions.append(region)\n                visited.update(region) # add all cells in region to visited\n\n    # Iterate over '9' regions and replace them\n    for region in maroon_regions:\n      # check for series\n      if is_series(input_grid, region):\n        replacement_color = 1\n      else:\n        # find the most common bordering color\n        replacement_color = most_common_border_color(input_grid, region)\n      \n      # set all pixels in region to the replacement color\n      for row, col in region:\n          output_grid[row, col] = replacement_color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3308,
    "candidates_token_count": 1454,
    "total_token_count": 4762,
    "cached_content_token_count": 0
  },
  "response_time": 13.501177,
  "response_file": "012-response.json"
}