{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIterate through each pixel in the input grid. If a pixel is white (color 0)\nand has at most one neighbor of the same color (white), change its color to\nthe most frequent color among its neighbors (excluding the pixel's own color,\nif there are other colors). If the pixel is not white or has more than one\nwhite neighbor, keep its original color. The output is the modified grid.\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, row, col):\n    \"\"\"Gets the 8 neighbors of a pixel, handling boundary conditions.\"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    for i in range(max(0, row - 1), min(rows, row + 2)):\n        for j in range(max(0, col - 1), min(cols, col + 2)):\n            if (i, j) != (row, col):\n                neighbors.append(grid[i, j])\n    return neighbors\n\ndef most_common_neighbor(grid, row, col):\n    \"\"\"Finds most frequent color among neighbors, excluding the pixel's own color.\"\"\"\n    neighbors = get_neighbors(grid, row, col)\n    if not neighbors:\n       return grid[row,col]\n\n    counts = {}\n    my_color = grid[row,col]\n\n    for color in neighbors:\n        if color != my_color:\n            counts[color] = counts.get(color,0) + 1\n    \n    if not counts:\n        return grid[row,col]\n\n    most_common = max(counts, key=counts.get)\n    return most_common\n\ndef transform(input_grid):\n    \"\"\"Applies the transformation rule to the input grid.\"\"\"\n    input_grid = np.array(input_grid)\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Iterate through each pixel\n    for row in range(rows):\n        for col in range(cols):\n            my_color = input_grid[row, col]\n            neighbors = get_neighbors(input_grid, row, col)\n            same_color_count = neighbors.count(my_color)\n\n            # Check if the pixel is white and has at most one white neighbor\n            if my_color == 0 and same_color_count <= 1:\n                # Change color to the most frequent neighbor color\n                output_grid[row, col] = most_common_neighbor(input_grid, row, col)\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7395,
    "candidates_token_count": 588,
    "total_token_count": 7983,
    "cached_content_token_count": 0
  },
  "response_time": 5.516705,
  "response_file": "024-response.json"
}