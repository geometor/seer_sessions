examples:
  - example_0:
      objects:
        - color: red (2)
          shape: rectangle
          position: centered horizontally, spanning multiple rows
          action: changes color to green (3) where adjacent to green, otherwise remains red
        - color: green(3)
          shape: inferred, adjacent to the red object
          position: adjacent pixels
          action: modifies adjacent red pixels to green
      transformation: "Iterative color change based on adjacency."
  - example_1:
      objects:
        - color: yellow (4)
          shape: rectangle
          position: centered horizontally, spanning multiple rows
          action: changes to green when adjacent to green
        - color: green (3)
          shape: inferred, adjacent to the red object
          position: adjacent pixels
          action: modifies adjacent yellow pixels to green
      transformation: "Iterative color change based on adjacency."
  - example_2:
      objects:
        - color: red (2)
          shape: rectangle
          position: Centered horizontally, spanning most of a row. One instance has a yellow (4) pixel adjacent.
          action: Color changes to green (3) when adjacent to green, otherwise remains red
        - color: yellow (4)
          shape: single pixel
          position: adjacent to the red rectangle
          action:  changes to red when adjacent to red
        - color: green(3)
          shape: inferred, adjacent to the red object
          position: adjacent pixels
          action: modifies adjacent red pixels to green
      transformation: "Iterative color change based on adjacency."
  - example_3:
      objects:
        - color: red (2)
          shape: rectangle
          position: Centered horizontally, broken by a yellow (4) rectangle
          action: changes to green adjacent to green
        - color: yellow(4)
          shape: rectangle
          position: Within the red rectangle, spanning 4 columns.
          action: changes to green when adjacent to the created green, and red when adjacent to red
        - color: green (3)
          shape: inferred, adjacent to the red object
          position: adjacent pixels
          action: modifies adjacent red and yellow pixels
      transformation: "Iterative color change based on adjacency."

overall_transformation: |
    The transformation rule involves iteratively changing the color of pixels
    based on the color of their adjacent neighbors.  Red (2) pixels change to
    green (3) if adjacent to green (3). Yellow (4) pixels change to green (3)
    if adjacent to green (3), Yellow (4) changes to Red (2) if adjacent to red(2). It's a cascading effect, where the
    green "spreads" from its initial inferred position, converting adjacent
    red and yellow pixels. The green color does not exist in the input, but exists in the output.