{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe input grid is duplicated vertically. The rows of the input grid are then\ncopied to specific positions in the output grid according to a fixed mapping.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    # Create output_grid with double the height and same width, filled with zeros.\n    output_grid = np.zeros((input_grid.shape[0] * 2, input_grid.shape[1]), dtype=int)\n\n    # Row mapping (based on examples 2, 3, and 4)\n    row_mapping = {\n        0: [2, 3],\n        1: [1, 4],\n        2: [0, 5]\n    }\n\n    # Copy rows based on the mapping.\n    for input_row_index, output_row_indices in row_mapping.items():\n        if input_row_index < input_grid.shape[0]:  # Make sure the input row index is valid\n          for output_row_index in output_row_indices:\n              output_grid[output_row_index] = input_grid[input_row_index]\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3998,
    "candidates_token_count": 266,
    "total_token_count": 4264,
    "cached_content_token_count": 0
  },
  "response_time": 3.495965,
  "response_file": "006-response.json"
}