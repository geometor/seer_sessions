{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation involves adding a blue (1) pixel adjacent to each connected component (object) of azure (8) pixels. The placement of the blue pixel prioritizes the right, down, up, and left sides of the right-most, bottom-most, top-most, then left-most azure pixel of the object.\n\"\"\"\n\nimport numpy as np\n\ndef get_connected_components(grid, color):\n    \"\"\"\n    Finds connected components of a given color in the grid.\n    Uses a depth-first search approach.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n    components = []\n\n    def dfs(row, col, current_component):\n        if (row < 0 or row >= rows or col < 0 or col >= cols or\n                visited[row, col] or grid[row, col] != color):\n            return\n        visited[row, col] = True\n        current_component.append((row, col))\n        dfs(row + 1, col, current_component)\n        dfs(row - 1, col, current_component)\n        dfs(row, col + 1, current_component)\n        dfs(row, col - 1, current_component)\n\n    for row in range(rows):\n        for col in range(cols):\n            if grid[row, col] == color and not visited[row, col]:\n                current_component = []\n                dfs(row, col, current_component)\n                components.append(current_component)\n    return components\n\ndef get_neighbors(grid, row, col):\n    \"\"\"\n    Gets the coordinates of the neighbors of a cell (no diagonals).\n    \"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    if row > 0:\n        neighbors.append((row - 1, col))  # Up\n    if row < rows - 1:\n        neighbors.append((row + 1, col))  # Down\n    if col > 0:\n        neighbors.append((row, col - 1))  # Left\n    if col < cols - 1:\n        neighbors.append((row, col + 1))  # Right\n    return neighbors\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by placing a blue pixel adjacent to each azure object.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # 1. Identify Objects (Connected Components of Azure)\n    azure_objects = get_connected_components(input_grid, 8)\n\n    # 2. Process Each Object\n    for obj in azure_objects:\n        # Find right-most, bottom-most, top-most and left-most pixels\n        obj_array = np.array(obj)\n        \n        # Sort by x-coordinate (col) descending to find right-most, then y ascending.\n        right_most_pixels = obj_array[obj_array[:, 1].argsort()[::-1]]\n        right_most_pixel = right_most_pixels[0]\n\n        # Sort by x coordinate (col) ascending to find left-most.\n        left_most_pixels = obj_array[obj_array[:,1].argsort()]\n        left_most_pixel = left_most_pixels[0]\n\n        # Sort by y coordinate (row) descending\n        bottom_most_pixels = obj_array[obj_array[:,0].argsort()[::-1]]\n        bottom_most_pixel = bottom_most_pixels[0]\n        \n        # Sort by y coordinate (row) ascending\n        top_most_pixels = obj_array[obj_array[:,0].argsort()]\n        top_most_pixel = top_most_pixels[0]\n\n        priority_pixels = [right_most_pixel, bottom_most_pixel, top_most_pixel, left_most_pixel]\n        \n        placed = False\n        for pixel in priority_pixels:\n            if placed:\n                break\n\n            row, col = pixel\n                \n            # Prioritized neighbor checking (Right, Down, Up, Left)\n            priority_neighbors = [\n                (row, col + 1),  # Right\n                (row + 1, col),  # Down\n                (row - 1, col),  # Up\n                (row, col - 1),  # Left\n            ]\n\n            for neighbor_row, neighbor_col in priority_neighbors:\n                if 0 <= neighbor_row < rows and 0 <= neighbor_col < cols:\n                    if output_grid[neighbor_row, neighbor_col] == 0:\n                        output_grid[neighbor_row, neighbor_col] = 1\n                        placed = True #placed once\n                        break  # Move to the next object\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 1468,
            "end_index": 1760,
            "uri": "https://github.com/Kaeltherol/Minesweeper",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3587,
    "candidates_token_count": 1105,
    "total_token_count": 4692,
    "cached_content_token_count": 0
  },
  "response_time": 10.89426,
  "response_file": "012-response.json"
}