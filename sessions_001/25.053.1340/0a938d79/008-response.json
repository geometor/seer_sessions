{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid based on the presence and arrangement of non-white \"seed\" pixels.\n\n1. Find Seed Pixels: Identify all non-white pixels (pixels with values other than 0) in the input grid. These are the \"seed pixels.\"\n\n2. Determine Layout and Transformation Type:\n   - If all seed pixels are in the same column, the layout is considered \"vertical,\" and the transformation is \"row copy and following white rows.\"\n   - If seed pixels appear in different columns, the layout is considered \"horizontal,\" and the transformation is \"alternating columns.\"\n\n3. Horizontal Layout - Alternating Columns:\n   - Identify the two leftmost seed pixels.\n   - Starting from the column of the *leftmost* seed pixel, fill the entire grid to the *right*, alternating the colors of the two identified seed pixels column by column.\n\n4. Vertical Layout - Row Copy and Following White Rows:\n    - Sort the seed pixels by their row index.\n    - For each seed pixel row (from top to bottom, from the first seed pixel down):\n        - Copy the entire seed pixel row to the output grid.\n        - Continue copying the content of the original seed row to subsequent rows in the output grid.\n        - Stop copying when you encounter a row in the *input* grid that contains any non-white pixel.\n        - Continue with next seed row.\n    - Copy all other rows to the output grid, matching input.\n\"\"\"\n\nimport numpy as np\n\ndef find_seed_pixels(grid):\n    \"\"\"Finds non-white pixels in the grid and returns their coordinates and color.\"\"\"\n    seeds = []\n    for r, row in enumerate(grid):\n        for c, pixel in enumerate(row):\n            if pixel != 0:\n                seeds.append((r, c, pixel))\n    return seeds\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the rules described above.\"\"\"\n    input_grid = np.array(input_grid)\n    rows, cols = input_grid.shape\n    output_grid = np.zeros((rows, cols), dtype=int)\n\n    # Find seed pixels.\n    seed_pixels = find_seed_pixels(input_grid)\n\n    if not seed_pixels:  # Handle empty input.\n        return output_grid.tolist()\n\n    # Determine transformation type based on column arrangement.\n    first_seed_col = min(pixel[1] for pixel in seed_pixels)\n    different_columns = any(pixel[1] != first_seed_col for pixel in seed_pixels)\n\n    if different_columns:\n        # Alternating Column Fill.\n        colors = [pixel[2] for pixel in sorted(seed_pixels, key=lambda p: p[1])][:2]  # Get colors of the leftmost two.\n\n        color_index = 0\n        for c in range(first_seed_col, cols):\n            for r in range(rows):\n                output_grid[r, c] = colors[color_index % 2]\n            color_index += 1\n\n    else:\n        # Row Copy and following white rows.\n        seed_rows = sorted(list(set([pixel[0] for pixel in seed_pixels])))\n\n        row_idx = 0\n        while row_idx < rows:\n          if row_idx in seed_rows:\n             # copy the seed row\n            seed_row = row_idx\n            for c in range(cols):\n              output_grid[row_idx,c] = input_grid[seed_row,c]\n\n            # Copy downward until a non-white row is encountered in input_grid.\n            row_idx += 1\n            while row_idx < rows and all(input_grid[row_idx, c] == 0 for c in range(cols)):\n                for c in range(cols):\n                    output_grid[row_idx, c] = input_grid[seed_row,c]\n                row_idx += 1\n\n          else:\n            # copy other rows\n            for c in range(cols):\n                output_grid[row_idx,c] = input_grid[row_idx,c]\n            row_idx+=1          \n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8265,
    "candidates_token_count": 953,
    "total_token_count": 9218,
    "cached_content_token_count": 0
  },
  "response_time": 8.118601,
  "response_file": "008-response.json"
}