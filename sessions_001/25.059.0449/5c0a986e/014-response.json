{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Find all contiguous regions (objects) of red (2) and blue (1) pixels in the input grid.\n2. **Conditional Transformation:**\n   - If there's exactly one red object and one blue object:\n     - Check relative postion of Red and Blue objects.\n       - Sometimes a line is drawn between the objects using pixels of color blue (1).\n       - Sometimes no changes are made.\n   - Otherwise: No transformation.\n3. **Preservation:** The original red and blue objects always remain.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, color):\n    \"\"\"Finds contiguous regions of a specific color.\"\"\"\n    objects = []\n    visited = set()\n\n    def dfs(row, col):\n        if (row, col) in visited or not (0 <= row < grid.shape[0] and 0 <= col < grid.shape[1]) or grid[row, col] != color:\n            return []\n\n        visited.add((row, col))\n        region = [(row, col)]\n\n        region.extend(dfs(row + 1, col))\n        region.extend(dfs(row - 1, col))\n        region.extend(dfs(row, col + 1))\n        region.extend(dfs(row, col - 1))\n        return region\n\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] == color and (r, c) not in visited:\n                objects.append(dfs(r, c))\n    return objects\n\ndef find_extrema(object_pixels):\n    \"\"\"Finds the top-left and bottom-right pixels of an object.\"\"\"\n    if not object_pixels:\n        return None, None\n\n    min_row = min(pixel[0] for pixel in object_pixels)\n    max_row = max(pixel[0] for pixel in object_pixels)\n    min_col = min(pixel[1] for pixel in object_pixels)\n    max_col = max(pixel[1] for pixel in object_pixels)\n\n    top_left = (min_row, min_col)\n    bottom_right = (max_row, max_col)\n\n    for r, c in object_pixels:\n      if r == min_row and c < top_left[1]:\n        top_left = (r,c)\n      if r == max_row and c > bottom_right[1]:\n        bottom_right = (r, c)\n\n    return top_left, bottom_right\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n    grid = np.array(input_grid)\n\n    # Find red and blue objects\n    red_objects = find_objects(grid, 2)\n    blue_objects = find_objects(grid, 1)\n\n    # Conditional Transformation based on number of red/blue objects\n    if len(red_objects) == 1 and len(blue_objects) == 1:\n        red_object = red_objects[0]\n        blue_object = blue_objects[0]\n        \n        # find extrema\n        _, red_bottom_right = find_extrema(red_object)\n        blue_top_left, _ = find_extrema(blue_object)\n        red_top_left, _ = find_extrema(red_object)\n\n        r_row, r_col = red_bottom_right\n        b_row, b_col = blue_top_left\n        \n        # Example 1: Connect with a diagonal\n        if r_row < b_row and r_col < b_col:\n            # draw diagonal line\n            current_row = r_row + 1\n            current_col = r_col + 1\n\n            row_step = 1\n            col_step = 1\n            while current_row <= b_row and current_col <= b_col:\n               if 0 <= current_row < output_grid.shape[0] and 0 <= current_col < output_grid.shape[1]:\n                  output_grid[current_row, current_col] = 1\n               current_row += row_step\n               current_col += col_step\n        # Example 3: Add one blue\n        elif r_row > b_row and r_col < b_col:\n           output_grid[red_top_left[0]-1, red_top_left[1]] = 1\n        # examples 2 and 4 - do nothing\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8522,
    "candidates_token_count": 1067,
    "total_token_count": 9589,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.852472,
  "response_file": "014-response.json"
}