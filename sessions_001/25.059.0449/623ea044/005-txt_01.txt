import numpy as np

def describe_grid(grid):
    """Provides a concise description of a grid."""
    height, width = grid.shape
    unique_values = np.unique(grid)
    value_counts = {val: np.count_nonzero(grid == val) for val in unique_values}
    return {
        "dimensions": (height, width),
        "unique_values": unique_values.tolist(),
        "value_counts": value_counts
    }

def analyze_example(input_grid, expected_output_grid, predicted_output_grid):
    """Analyzes a single example, comparing expected and predicted outputs."""
    input_desc = describe_grid(input_grid)
    expected_desc = describe_grid(expected_output_grid)
    predicted_desc = describe_grid(predicted_output_grid)

    discrepancy = np.where(expected_output_grid != predicted_output_grid)
    discrepancy_count = discrepancy[0].size

    analysis = {
        "input": input_desc,
        "expected_output": expected_desc,
        "predicted_output": predicted_desc,
        "discrepancy_count": discrepancy_count,
        "discrepancy_coordinates": list(zip(discrepancy[0].tolist(), discrepancy[1].tolist()))
    }
    return analysis

# Example data (replace with actual grid data from the task)
task_id = "6b6a7a6f"
examples = [
  {
      "input": [
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 2, 0, 0],
        [0, 0, 0, 0, 0, 0],
      ],
      "output": [
        [0, 0, 2, 0, 0, 2],
        [0, 0, 2, 0, 0, 2],
        [2, 2, 2, 2, 2, 2]
      ]
  },
  {
      "input": [
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 2, 0, 0],
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0],
      ],
      "output":[
        [0, 0, 0, 2, 0, 0, 2],
        [0, 0, 0, 2, 0, 0, 2],
        [0, 0, 0, 2, 0, 0, 2],
        [2, 2, 2, 2, 2, 2, 2]
      ]
  },
  {
      "input": [
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 2, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
      ],
       "output": [
        [0, 0, 0, 0, 2, 0, 0, 2],
        [0, 0, 0, 0, 2, 0, 0, 2],
        [0, 0, 0, 0, 2, 0, 0, 2],
        [0, 0, 0, 0, 2, 0, 0, 2],
        [2, 2, 2, 2, 2, 2, 2, 2]
       ]
  }
]

results = []
for i, ex in enumerate(examples):
    input_grid = np.array(ex["input"])
    expected_output_grid = np.array(ex["output"])
    predicted_output_grid = transform(input_grid)
    analysis = analyze_example(input_grid, expected_output_grid, predicted_output_grid)
    results.append({f"example_{i+1}": analysis})

print(results)