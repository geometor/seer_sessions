import numpy as np

def find_object(grid, color):
    coords = np.argwhere(grid == color)
    if coords.size == 0:
        return None
    return coords

def find_leftmost_x(coords):
    return np.min(coords[:, 1])

def analyze_example(input_grid, output_grid):
    red_coords = find_object(input_grid, 2)
    green_coords = find_object(input_grid, 3)
    azure_coords = find_object(output_grid, 8)
    
    red_leftmost_x = find_leftmost_x(red_coords) if red_coords is not None else None
    azure_leftmost_x = find_leftmost_x(azure_coords) if azure_coords is not None else None

    analysis = {
        'red_exists': red_coords is not None,
        'red_leftmost_x': red_leftmost_x,
        'azure_exists': azure_coords is not None,
        'azure_leftmost_x': azure_leftmost_x,
        'expected_azure_x': red_leftmost_x - 2 if red_leftmost_x is not None else None,
    }
    
    if analysis['expected_azure_x'] is not None and analysis['expected_azure_x'] >= 0:
      expected_output = np.copy(input_grid)
      expected_output[:, analysis['expected_azure_x']] = 8
      analysis['correct'] = np.array_equal(expected_output, output_grid)
    elif analysis['expected_azure_x'] is not None and analysis['expected_azure_x'] < 0:
        analysis['correct'] = np.array_equal(input_grid, output_grid) # should not modify
    else:
       analysis['correct'] = False


    return analysis

def analyze_task(task):
    analyses = []
    for example in task['train']:
        input_grid = np.array(example['input'])
        output_grid = np.array(example['output'])
        analyses.append(analyze_example(input_grid, output_grid))
    return analyses

task = {
    'train': [
        {'input': [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], 'output': [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 3, 0, 0], [0, 0, 0, 0, 0, 0, 8, 3, 0, 0], [0, 0, 0, 0, 0, 0, 8, 3, 0, 0], [0, 0, 0, 0, 0, 0, 8, 3, 0, 0], [0, 0, 0, 0, 0, 0, 8, 3, 0, 0], [0, 0, 0, 0, 0, 0, 8, 3, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]},
        {'input': [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], 'output': [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]},
        {'input': [[0, 0, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], 'output': [[0, 0, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]},
        {'input': [[0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], 'output': [[0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}
    ]
}

results = analyze_task(task)
print(results)