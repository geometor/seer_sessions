{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Row Selection:** Select rows from the input that contain a specific, non-zero color, and possibly 0's. Other colors should not be present. The specific color varies across examples (8, 3, 5, 6, and 7).\n2.  **Zero Removal:** Remove all 0's from the selected rows.\n3.  **Target Color Preservation:** Keep all instances of the target color.\n4.  **Separator Insertion (Conditional):** If the target color is 8 or 6, insert a '4' between adjacent pixels of the target color *after* removing the zeros. Do not insert 4 if there are not adjacent pixels.\n5. **Output:** The output grid consists of the modified selected rows. Each row becomes one row in the output.\n\"\"\"\n\nimport numpy as np\n\ndef get_target_color(grid):\n    \"\"\"\n    Identifies the target color for a given grid.\n    The target color is a non-zero color that appears in the grid,\n    and all non-zero cells must have this color. If multiple different\n    non-zero colors are present, it returns None.\n    \"\"\"\n    grid = np.array(grid)\n    unique_colors = np.unique(grid)\n    non_zero_colors = unique_colors[unique_colors != 0]\n    if len(non_zero_colors) == 1:\n        return non_zero_colors[0]\n    else:\n        return None\n\ndef select_row(row, target_color):\n    \"\"\"\n    Checks if a row should be selected based on the target color.\n    A row is selected if it contains the target color and only 0s otherwise.\n    \"\"\"\n    row = np.array(row)\n    unique_colors = np.unique(row)\n    for color in unique_colors:\n      if color != 0 and color != target_color:\n        return False\n    return target_color in unique_colors\n    \n\ndef process_row(row, target_color):\n    \"\"\"\n    Processes a single row according to the rules: removes 0s,\n    and inserts 4s if the target color is 8 or 6.\n    \"\"\"\n    row = np.array(row)\n    # Zero Removal\n    row = row[row != 0]\n\n    # Separator Insertion (Conditional)\n    if target_color == 8 or target_color == 6:\n        new_row = []\n        for i in range(len(row)):\n            new_row.append(row[i])\n            if i < len(row) - 1:\n                new_row.append(4)\n        return new_row\n    else:\n        return list(row)  # Convert back to list\n\n\ndef transform(input_grid):\n    # Convert input to numpy array\n    input_grid = np.array(input_grid)\n    output_rows = []\n\n    # Get Target color for row selection\n    target_color = get_target_color(input_grid)\n\n    if target_color is None:\n      return np.array([])\n\n    # Iterate over each row\n    for row in input_grid:\n        # Select Row\n        if select_row(row, target_color):\n            # Process the row\n            processed_row = process_row(row, target_color)\n            if len(processed_row) > 0:\n              output_rows.append(processed_row)\n\n    # Convert to a numpy array\n    if len(output_rows) > 0:\n      output_grid = np.array(output_rows)\n    else:\n      output_grid = np.array([])\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6034,
    "candidates_token_count": 842,
    "total_token_count": 6876,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.056269,
  "response_file": "020-response.json"
}