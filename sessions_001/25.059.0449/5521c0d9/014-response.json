{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation identifies distinct objects in the input grid and stacks them vertically in the output grid. The stacking order is determined by the horizontal position of the objects in the input grid, from left to right. The objects maintain their original shapes and sizes. Background (white/0) pixels are removed to eliminate empty rows.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"\n    Finds all distinct objects in the grid.\n    Returns a list of (object, top_left) tuples.\n    \"\"\"\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n\n    def dfs(row, col, color, object_pixels):\n        if (row < 0 or row >= grid.shape[0] or col < 0 or col >= grid.shape[1] or\n                visited[row, col] or grid[row, col] != color):\n            return\n        visited[row, col] = True\n        object_pixels.append((row, col))\n        dfs(row + 1, col, color, object_pixels)\n        dfs(row - 1, col, color, object_pixels)\n        dfs(row, col + 1, color, object_pixels)\n        dfs(row, col - 1, color, object_pixels)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if not visited[row, col] and grid[row, col] != 0:\n                object_pixels = []\n                dfs(row, col, grid[row, col], object_pixels)\n                if object_pixels:\n                    # Find top-left coordinate of the object\n                    top_left = (min(p[0] for p in object_pixels), min(p[1] for p in object_pixels))\n                    # create object using a minimal bounding box\n                    obj_rows, obj_cols = zip(*object_pixels)\n                    obj_height = max(obj_rows) - min(obj_rows) + 1\n                    obj_width = max(obj_cols) - min(obj_cols) + 1\n                    obj = np.zeros((obj_height, obj_width), dtype=int)\n                    for r, c in object_pixels:\n                        obj[r - top_left[0], c - top_left[1]] = grid[r, c]\n                    objects.append((obj, top_left))\n\n    return objects\n\ndef remove_empty_rows(grid):\n    \"\"\"Removes rows that are entirely filled with 0s.\"\"\"\n    non_empty_rows = np.any(grid != 0, axis=1)\n    filtered_grid = grid[non_empty_rows]\n    return filtered_grid\n\ndef transform(input_grid):\n    # Find all objects\n    objects = find_objects(input_grid)\n\n    # Sort objects by their top-left x-coordinate (column)\n    objects.sort(key=lambda x: x[1][1])\n\n    # initialize output_grid with the correct dimensions, filled with 0s.\n    # It is difficult to know the correct dimension before processing all the\n    # objects so we will start large\n    output_grid = np.zeros((30, 30), dtype=int)\n\n    # Stack objects vertically\n    current_row = 0\n    for obj, _ in objects:\n        height, width = obj.shape\n        output_grid[current_row:current_row + height, 0:width] = obj\n        current_row += height\n\n    #remove white space\n    output_grid = remove_empty_rows(output_grid)\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2729,
    "candidates_token_count": 841,
    "total_token_count": 3570,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.664508,
  "response_file": "014-response.json"
}