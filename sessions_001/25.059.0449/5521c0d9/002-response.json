{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation rule involves identifying colored blocks (non-white pixels) in the input grid, considering them as single combined shape, and rotating this shape 90 degrees counter-clockwise.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"\n    Identifies contiguous blocks of non-white pixels.\n    \"\"\"\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n\n    def dfs(row, col, color, object_pixels):\n        if (\n            row < 0\n            or row >= grid.shape[0]\n            or col < 0\n            or col >= grid.shape[1]\n            or visited[row, col]\n            or grid[row, col] != color\n        ):\n            return\n        visited[row, col] = True\n        object_pixels.append((row, col))\n        dfs(row + 1, col, color, object_pixels)\n        dfs(row - 1, col, color, object_pixels)\n        dfs(row, col + 1, color, object_pixels)\n        dfs(row, col - 1, color, object_pixels)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] != 0 and not visited[row, col]:\n                object_pixels = []\n                dfs(row, col, grid[row, col], object_pixels)\n                objects.append(\n                    {\"color\": grid[row, col], \"pixels\": object_pixels}\n                )\n    return objects\n\ndef rotate_point(point, center):\n    \"\"\"Rotates a point counter-clockwise by 90 degrees around a center.\"\"\"\n    row, col = point\n    center_row, center_col = center\n    new_row = center_row - (col - center_col)\n    new_col = center_col + (row - center_row)\n    return new_row, new_col\n    \n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the rotation rule.\n    \"\"\"\n    # initialize output_grid\n    output_grid = np.zeros_like(input_grid)\n\n    # Find colored objects\n    objects = find_objects(input_grid)\n\n    # Combine all object pixels for rotation\n    all_pixels = []\n    for obj in objects:\n        all_pixels.extend(obj[\"pixels\"])\n\n    if not all_pixels:  # Handle empty input (no objects)\n       return output_grid\n\n    # Calculate the centroid of the combined shape\n    rows, cols = zip(*all_pixels)\n    center_row = sum(rows) / len(rows)\n    center_col = sum(cols) / len(cols)\n    center = (center_row, center_col)\n\n\n    # Rotate and place objects in the output grid\n    for obj in objects:\n      for row, col in obj[\"pixels\"]:\n        rotated_row, rotated_col = rotate_point((row, col), center)\n        #check that rotated object is not out of bounds\n        if 0 <= int(rotated_row) < output_grid.shape[0] and 0 <= int(rotated_col) < output_grid.shape[1]:\n          output_grid[int(rotated_row), int(rotated_col)] = obj[\"color\"]\n          \n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6145,
    "candidates_token_count": 785,
    "total_token_count": 6930,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.853438,
  "response_file": "002-response.json"
}