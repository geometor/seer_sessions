{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Move the yellow rectangle:** Move the top edge of the yellow rectangle up by six rows, keeping its original width.\n2.  **Move the red rectangle**: Move the top of the red rectangle up 5 rows. Decrease red rectangle height by 1.\n3.  **Move the blue rectangle:** Move the top of the blue rectangle up 2 rows.\n4.  **Delete some rows and columns:** Delete white rows above and below colored blocks and shift the remaining blocks upwards, compacting the non-zero elements vertically.\n\"\"\"\n\nimport numpy as np\n\ndef find_object(grid, color):\n    \"\"\"Finds the top-left and bottom-right coordinates of a colored object.\"\"\"\n    rows, cols = np.where(grid == color)\n    if len(rows) == 0:\n        return None\n    top_left = (min(rows), min(cols))\n    bottom_right = (max(rows), max(cols))\n    return top_left, bottom_right\n\ndef get_object_shape(top_left, bottom_right):\n    \"\"\"Calculates the shape of the rectangle.\"\"\"\n    height = bottom_right[0] - top_left[0] + 1\n    width = bottom_right[1] - top_left[1] + 1\n    return height, width\n\ndef move_object(grid, top_left, bottom_right, new_top_left):\n    \"\"\"Moves an object to a new location and returns a new grid.\"\"\"\n   \n    color = grid[top_left]\n    height, width = get_object_shape(top_left, bottom_right)\n\n    new_grid = np.copy(grid)\n\n    #clear old\n    new_grid[top_left[0]:bottom_right[0]+1, top_left[1]:bottom_right[1]+1] = 0    \n    #add to new location\n    new_grid[new_top_left[0]:new_top_left[0] + height, new_top_left[1]:new_top_left[1] + width] = color\n  \n    return new_grid\n\ndef shrink_object(grid, top_left, bottom_right, axis, amount):\n    \"\"\"Shrinks the object from bottom up. \"\"\"\n\n    color = grid[top_left]\n    height, width = get_object_shape(top_left, bottom_right)\n\n    new_grid = np.copy(grid)\n\n    #clear old\n    new_grid[top_left[0]:bottom_right[0]+1, top_left[1]:bottom_right[1]+1] = 0\n\n    new_top_left = top_left\n    new_height = height\n    \n    if axis == 'vertical':\n      new_height = height-amount\n\n    #add to new location\n    new_grid[new_top_left[0]:new_top_left[0] + new_height, new_top_left[1]:new_top_left[1] + width] = color\n\n    return new_grid\n\ndef remove_empty_rows(grid):\n    \"\"\"Removes rows that are entirely filled with 0s.\"\"\"\n    # Find rows that are not all zeros\n    non_empty_rows = np.any(grid != 0, axis=1)\n    # Filter the grid to keep only non-empty rows\n    filtered_grid = grid[non_empty_rows]\n    return filtered_grid\n\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n\n    # Find yellow rectangle\n    yellow_top_left, yellow_bottom_right = find_object(output_grid, 4)\n    if yellow_top_left is not None:\n        new_yellow_top_left = (yellow_top_left[0] - 6, yellow_top_left[1])\n        output_grid = move_object(output_grid, yellow_top_left, yellow_bottom_right, new_yellow_top_left)\n\n\n    # Find and move red rectangle\n    red_top_left, red_bottom_right = find_object(output_grid, 2)\n    if red_top_left is not None:\n        new_red_top_left = (red_top_left[0] - 5, red_top_left[1])\n        output_grid = move_object(output_grid, red_top_left, red_bottom_right, new_red_top_left)\n        red_top_left, red_bottom_right = find_object(output_grid, 2) #find again after move\n        output_grid = shrink_object(output_grid, red_top_left, red_bottom_right, 'vertical', 1)\n\n    # Find and move blue rectangle\n    blue_top_left, blue_bottom_right = find_object(output_grid, 1)\n    if blue_top_left is not None:\n        new_blue_top_left = (blue_top_left[0] - 2, blue_top_left[1])\n        output_grid = move_object(output_grid, blue_top_left, blue_bottom_right, new_blue_top_left)\n\n    output_grid = remove_empty_rows(output_grid)\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3128,
    "candidates_token_count": 1229,
    "total_token_count": 4357,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.920523,
  "response_file": "010-response.json"
}