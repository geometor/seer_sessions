{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. **Identify Red Clusters:** Find all connected groups of red pixels (value 2) in the input grid. Consider pixels connected if they are adjacent horizontally, vertically, or diagonally (8-connectivity).\n\n2. **Calculate Centroids:** For each red cluster, calculate its centroid. The centroid is the average row and average column of all pixels within the cluster.\n\n3. **Scale and Map:**  Scale down the input grid dimensions to a 3x3 grid.  Calculate scaling factors: `scale_row = input_rows / 3` and `scale_col = input_cols / 3`. Map each centroid to the output grid by dividing its row and column coordinates by the respective scaling factors. Round the result down to the nearest integer to get the row and column indices in the 3x3 output grid.\n\n4. **Handle Collisions**: If two or more cluster centroids map to the same cell in the output, prioritize the cluster with more pixels.\n\n5. **Create Output:** Create a 3x3 output grid, initially filled with zeros (white/0).  Set the pixels corresponding to the mapped and adjusted centroid positions to red (2).\n\"\"\"\n\nimport numpy as np\n\ndef find_connected_components(input_grid):\n    \"\"\"\n    Finds connected components of red pixels (value 2) in the input grid.\n    Uses 8-connectivity (includes diagonals).\n    \"\"\"\n    visited = set()\n    components = []\n\n    def dfs(row, col, current_component):\n        if (\n            row < 0\n            or row >= input_grid.shape[0]\n            or col < 0\n            or col >= input_grid.shape[1]\n            or (row, col) in visited\n            or input_grid[row, col] != 2\n        ):\n            return\n\n        visited.add((row, col))\n        current_component.append((row, col))\n\n        # Explore all 8 neighbors (including diagonals)\n        for dr in [-1, 0, 1]:\n            for dc in [-1, 0, 1]:\n                if dr == 0 and dc == 0:\n                    continue\n                dfs(row + dr, col + dc, current_component)\n\n    for row in range(input_grid.shape[0]):\n        for col in range(input_grid.shape[1]):\n            if input_grid[row, col] == 2 and (row, col) not in visited:\n                current_component = []\n                dfs(row, col, current_component)\n                components.append(current_component)\n    return components\n\ndef calculate_centroid(coordinates):\n    \"\"\"Calculates the centroid of a list of (row, col) coordinates.\"\"\"\n    if not coordinates:\n        return None\n    return (\n        sum([c[0] for c in coordinates]) / len(coordinates),\n        sum([c[1] for c in coordinates]) / len(coordinates),\n    )\n\ndef transform(input_grid):\n    # 1. Identify Red Clusters\n    red_clusters = find_connected_components(input_grid)\n\n    # 2. Calculate Centroids\n    centroids = [calculate_centroid(cluster) for cluster in red_clusters]\n\n    # 3. Scale and Map & 4. Handle Collisions (combined)\n    output_grid = np.zeros((3, 3), dtype=int)\n    scale_row = input_grid.shape[0] / 3\n    scale_col = input_grid.shape[1] / 3\n\n    # Keep track of which output cells are occupied and the size of the cluster that occupies it.\n    occupied = {}  # (row, col): size_of_cluster\n\n    for i, centroid in enumerate(centroids):\n      if centroid: #handle empty cluster\n        output_row = int(centroid[0] / scale_row)\n        if output_row > 2: output_row = 2\n        output_col = int(centroid[1] / scale_col)\n        if output_col > 2: output_col = 2\n\n        cluster_size = len(red_clusters[i])\n\n        if (output_row, output_col) not in occupied:\n            occupied[(output_row, output_col)] = cluster_size\n            output_grid[output_row, output_col] = 2\n        elif occupied[(output_row, output_col)] < cluster_size:\n              # Replace if current cluster size is greater.\n            occupied[(output_row, output_col)] = cluster_size\n            output_grid[output_row, output_col] = 2 #need to iterate and clear previous\n\n    # 5. Create Output (already done within the mapping loop)\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4305,
    "candidates_token_count": 1073,
    "total_token_count": 5378,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.090704,
  "response_file": "012-response.json"
}