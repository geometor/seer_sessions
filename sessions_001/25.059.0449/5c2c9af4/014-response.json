{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms a grid with sparse red pixels into a grid with red squares,\nwhere the corners of the squares are determined by the locations of the red pixels.\n\"\"\"\n\nimport numpy as np\n\ndef find_red_pixels(grid):\n    \"\"\"Finds the coordinates of red pixels in the grid.\"\"\"\n    return np.argwhere(grid == 2)\n\ndef draw_filled_square(grid, top_left, bottom_right):\n    \"\"\"Draws a filled square on the grid, given top-left and bottom-right corners.\"\"\"\n    output_grid = np.copy(grid)\n    for r in range(top_left[0], bottom_right[0] + 1):\n        for c in range(top_left[1], bottom_right[1] + 1):\n            output_grid[r, c] = 2  # Set to red\n    return output_grid\n    \ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by identifying red pixels and drawing a filled\n    red square whose corners are determined by the min and max coordinates of the red pixels.\n    \"\"\"\n    # Find red pixels\n    red_pixels = find_red_pixels(input_grid)\n\n    # If no red pixels, return the input grid\n    if len(red_pixels) == 0:\n        return np.copy(input_grid)\n\n    # Initialize output_grid as all zeros (white)\n    output_grid = np.zeros_like(input_grid)\n\n    # Determine top-left and bottom-right corners for the bounding box\n    top_left = red_pixels.min(axis=0)\n    bottom_right = red_pixels.max(axis=0)\n\n    # Draw the filled square\n    output_grid = draw_filled_square(output_grid, top_left, bottom_right)\n    \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2390,
    "candidates_token_count": 427,
    "total_token_count": 2817,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 4.876886,
  "response_file": "014-response.json"
}