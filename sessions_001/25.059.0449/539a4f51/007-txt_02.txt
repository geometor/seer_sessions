import numpy as np

def analyze_results(task):
    results = []
    for example in task['train']:
        input_grid = np.array(example['input'])
        expected_output_grid = np.array(example['output'])
        predicted_output_grid = transform(input_grid)

        height, width = expected_output_grid.shape

        correct_pixels = np.sum(predicted_output_grid == expected_output_grid)
        incorrect_pixels = height * width - correct_pixels
        total_pixels = height * width

        metrics = {
            'example_id': example.get('id', 'N/A'),
            'input_shape': input_grid.shape,
            'output_shape': expected_output_grid.shape,
            'correct_pixels': int(correct_pixels),
            'incorrect_pixels': int(incorrect_pixels),
            'total_pixels': int(total_pixels),
            'accuracy': float(correct_pixels / total_pixels) if total_pixels else 0.0,
        }
        results.append(metrics)
        # compare the expected and transformed
        comparison = predicted_output_grid == expected_output_grid
        print(f"Comparison for example: {metrics['example_id']}")
        print(comparison)
    return results

# Assuming 'task' is a global variable containing the task data
task_data = {
  "train": [
    {
      "input": [[0, 1, 0], [0, 0, 0], [0, 3, 0]],
      "output": [[2, 2, 1, 1, 2, 2], [2, 2, 1, 1, 2, 2], [2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2], [2, 2, 3, 3, 2, 2], [2, 2, 3, 3, 2, 2]]
    },
    {
      "input": [[5, 0, 0], [0, 0, 7], [0, 0, 0]],
      "output": [[5, 5, 0, 0, 0, 0], [5, 5, 0, 0, 0, 0], [0, 0, 0, 0, 7, 7], [0, 0, 0, 0, 7, 7], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]
    },
    {
      "input": [[0, 0, 0, 4], [0, 0, 0, 0], [0, 6, 0, 0], [0, 0, 0, 0]],
      "output": [[0, 0, 0, 0, 0, 0, 4, 4], [0, 0, 0, 0, 0, 0, 4, 4], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 6, 0, 0, 0, 0], [0, 0, 6, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]
    }
  ]
}
analysis_results = analyze_results(task_data)
print(analysis_results)
