def compare_grids(grid1, grid2):
    if grid1.shape != grid2.shape:
        return {
            'equal': False,
            'accuracy': 0,
            'incorrect_pixels': []
        }
    else:
        comparison = grid1 == grid2
        equal = np.all(comparison)
        accuracy = np.sum(comparison) / grid1.size if grid1.size >0 else 0
        incorrect_pixels = []
        if not equal:
            indices = np.where(comparison == False)
            for i in range(len(indices[0])):
                row = indices[0][i]
                col = indices[1][i]
                incorrect_pixels.append((row, col, int(grid2[row, col]), int(grid1[row,col])))

        return {
            'equal': equal,
            'accuracy': round(accuracy,4),
            'incorrect_pixels': incorrect_pixels
        }

results = []
for i, example in enumerate(task_data['train']):
    input_grid = np.array(example['input'])
    expected_output = np.array(example['output'])
    actual_output = transform(input_grid)
    comparison_results = compare_grids(actual_output, expected_output)
    results.append({
        'example': i,
        'input_shape': input_grid.shape,
        'expected_output_shape': expected_output.shape,
        'actual_output_shape': actual_output.shape,
        'accuracy': comparison_results['accuracy'],
        'incorrect_pixels': comparison_results['incorrect_pixels']
    })
print(results)