{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentify all contiguous regions (objects) of non-black pixels within the input grid. If the bounding box containing all objects has the same dimensions as the input grid, the output is identical to the input. Otherwise, create a new grid with dimensions based on the bounding box of all objects. Copy all objects from the input grid to the new grid, maintaining the relative positions of the objects, and translate the objects to the top-left of the output grid.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    # Find all contiguous regions of non-zero color in the grid.\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n\n    def dfs(r, c, color, obj_pixels):\n        if (r < 0 or r >= grid.shape[0] or c < 0 or c >= grid.shape[1] or\n                visited[r, c] or grid[r, c] != color):\n            return\n        visited[r, c] = True\n        obj_pixels.append((r, c))\n        dfs(r + 1, c, color, obj_pixels)\n        dfs(r - 1, c, color, obj_pixels)\n        dfs(r, c + 1, color, obj_pixels)\n        dfs(r, c - 1, color, obj_pixels)\n\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] != 0 and not visited[r, c]:\n                obj_pixels = []\n                dfs(r, c, grid[r, c], obj_pixels)\n                objects.append(obj_pixels)\n    return objects\n\ndef get_bounding_box(objects):\n    # Determine bounding box that encompasses all objects\n    min_r, min_c = float('inf'), float('inf')\n    max_r, max_c = float('-inf'), float('-inf')\n\n    for obj in objects:\n      for r,c in obj:\n        min_r = min(min_r, r)\n        min_c = min(min_c, c)\n        max_r = max(max_r, r)\n        max_c = max(max_c, c)\n    return (min_r, min_c), (max_r, max_c)\n    \n\ndef transform(input_grid):\n    input_grid = np.array(input_grid)\n    # Find all contiguous regions (objects) of non-zero color.\n    objects = find_objects(input_grid)\n    \n    # get the bounding box\n    (min_r, min_c), (max_r, max_c) = get_bounding_box(objects)\n    bounding_box_height = max_r - min_r + 1\n    bounding_box_width = max_c - min_c + 1\n    \n    # Check if bounding box fills the entire input grid\n    if (bounding_box_height == input_grid.shape[0] and\n        bounding_box_width == input_grid.shape[1]):\n        return input_grid\n    \n    # initialize output_grid\n    output_grid = np.zeros((bounding_box_height, bounding_box_width), dtype=int)\n    \n    # Place objects in output grid, removing empty space.\n    for obj_pixels in objects:\n        # sort the current obj_pixels \n        obj_pixels.sort()\n        # get the current object color from the original grid\n        color = input_grid[obj_pixels[0]]\n        \n        for r, c in obj_pixels:\n            # translate the object to the top-left of the output_grid\n            output_grid[r - min_r, c - min_c] = color\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4928,
    "candidates_token_count": 882,
    "total_token_count": 5810,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.824864,
  "response_file": "010-response.json"
}