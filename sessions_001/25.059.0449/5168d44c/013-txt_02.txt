def get_metrics(input_grid, output_grid, predicted_output):
    import numpy as np

    input_grid = np.array(input_grid)
    output_grid = np.array(output_grid)
    predicted_output = np.array(predicted_output)
    
    red_squares_input = find_object(input_grid, 2, "rectangle")
    red_squares_output = find_object(output_grid, 2, "rectangle")
    red_squares_predicted = find_object(predicted_output, 2, "rectangle")

    metrics = {
      "input_red_squares": len(red_squares_input),
      "output_red_squares": len(red_squares_output),
      "predicted_red_squares": len(red_squares_predicted),
      "diff_output_predicted": np.sum(output_grid != predicted_output)
    }

    if len(red_squares_input) > 0:
       #assuming only one square
       rows, cols = zip(*red_squares_input[0])
       min_row, max_row = min(rows), max(rows)
       min_col, max_col = min(cols), max(cols)
       center_row = (min_row + max_row) // 2
       center_col = (min_col + max_col) // 2
       metrics["original_center_color"] = int(input_grid[center_row, center_col])

    if len(red_squares_output) > 0:
        rows, cols = zip(*red_squares_output[0])
        min_row, max_row = min(rows), max(rows)
        min_col, max_col = min(cols), max(cols)
        center_row = (min_row + max_row) // 2
        center_col = (min_col + max_col) // 2
        metrics["moved_center_color"] = int(output_grid[center_row,center_col])


    return metrics

print("Example 0:")
print(get_metrics(task_data["train"][0]["input"], task_data["train"][0]["output"], transform(task_data["train"][0]["input"])))
print("\\nExample 1:")
print(get_metrics(task_data["train"][1]["input"], task_data["train"][1]["output"], transform(task_data["train"][1]["input"])))
print("\\nExample 2:")
print(get_metrics(task_data["train"][2]["input"], task_data["train"][2]["output"], transform(task_data["train"][2]["input"])))