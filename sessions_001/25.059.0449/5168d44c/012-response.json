{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify the Red Square:** Locate the red square object within the input grid.\n2.  **Find Original Center and Color:** Determine the original center coordinates of the red square and the color of the pixel at that center.\n3.  **Move the Red Square:** Move the entire red square upwards by two rows.\n4.  **Preserve Center Color:** At the new center location of the moved red square, set the pixel's color to the *original* color of the center pixel (from step 2).  All other pixels of the red square will be red.\n5. **Output**: Return the modified grid.\n\"\"\"\n\nimport numpy as np\n\ndef find_object(grid, color, shape_type=None):\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n\n    def is_valid(r, c):\n        return 0 <= r < grid.shape[0] and 0 <= c < grid.shape[1]\n\n    def dfs(r, c, current_object):\n        if not is_valid(r, c) or visited[r, c] or grid[r, c] != color:\n            return\n        visited[r, c] = True\n        current_object.append((r, c))\n        dfs(r + 1, c, current_object)\n        dfs(r - 1, c, current_object)\n        dfs(r, c + 1, current_object)\n        dfs(r, c - 1, current_object)\n\n\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] == color and not visited[r, c]:\n                current_object = []\n                dfs(r, c, current_object)\n                if shape_type == \"rectangle\":\n                    rows, cols = zip(*current_object)\n                    min_row, max_row = min(rows), max(rows)\n                    min_col, max_col = min(cols), max(cols)\n                    if len(current_object) == (max_row - min_row + 1) * (max_col-min_col + 1):\n                      objects.append(current_object)\n\n                else:\n                  objects.append(current_object)\n\n    return objects\n\ndef move_object(grid, object_coords, dr, dc):\n    new_object_coords = []\n    for r, c in object_coords:\n        new_object_coords.append((r + dr, c + dc))\n    return new_object_coords\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n\n    # Find the red square.\n    red_squares = find_object(input_grid, 2, \"rectangle\")\n    red_square = None\n    for square in red_squares:\n        #check if it is really a square/rectangle\n        rows, cols = zip(*square)\n        min_row, max_row = min(rows), max(rows)\n        min_col, max_col = min(cols), max(cols)\n\n        if (max_row - min_row + 1) * (max_col - min_col + 1) == len(square):\n            red_square = square\n            break\n\n    # Move the red square up by two rows, and preserve center color.\n    if red_square:\n       # Find original center and color\n       rows, cols = zip(*red_square)\n       min_row, max_row = min(rows), max(rows)\n       min_col, max_col = min(cols), max(cols)\n       center_row = (min_row + max_row) // 2\n       center_col = (min_col + max_col) // 2\n       original_center_color = input_grid[center_row, center_col]\n\n       new_red_square = move_object(input_grid, red_square, -2, 0)\n\n       #clear previous position from output\n       for r,c in red_square:\n          output_grid[r,c] = 0\n\n\n       #apply to the new position\n       for r, c in new_red_square:\n        if 0 <= r < output_grid.shape[0] and 0 <= c < output_grid.shape[1]:\n            output_grid[r, c] = 2 #set as red\n\n       # Preserve the original center color\n       new_center_row = center_row - 2\n       if 0 <= new_center_row < output_grid.shape[0] and 0 <= center_col < output_grid.shape[1]:\n            output_grid[new_center_row, center_col] = original_center_color\n\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5504,
    "candidates_token_count": 1119,
    "total_token_count": 6623,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.443563,
  "response_file": "012-response.json"
}