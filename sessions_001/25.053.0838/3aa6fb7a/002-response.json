{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. Identify all contiguous groups of azure (8) pixels. Each group is an \"azure object\".\n2. For each \"azure object\", find all white (0) pixels that are directly adjacent (up, down, left, or right) to any pixel in the azure object.\n3. Locate the white pixel adjacent to the top-most, left-most azure pixel of each azure object.\n4. Change the color of those located white pixels to blue (1).\n\"\"\"\n\nimport numpy as np\n\ndef get_objects(grid, color):\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n\n    def dfs(r, c, current_object):\n        if (r < 0 or r >= grid.shape[0] or c < 0 or c >= grid.shape[1] or\n                visited[r, c] or grid[r, c] != color):\n            return\n        visited[r, c] = True\n        current_object.append((r, c))\n        dfs(r + 1, c, current_object)\n        dfs(r - 1, c, current_object)\n        dfs(r, c + 1, current_object)\n        dfs(r, c - 1, current_object)\n\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] == color and not visited[r, c]:\n                current_object = []\n                dfs(r, c, current_object)\n                objects.append(current_object)\n    return objects\n\ndef get_adjacent_pixels(grid, object_pixels, adj_color):\n    adjacent = []\n    for r, c in object_pixels:\n        neighbors = [\n            (r - 1, c), (r + 1, c), (r, c - 1), (r, c + 1)\n        ]\n        for nr, nc in neighbors:\n            if (0 <= nr < grid.shape[0] and 0 <= nc < grid.shape[1] and\n                    grid[nr, nc] == adj_color):\n                adjacent.append((nr, nc))\n    # remove duplicates\n    adjacent = list(dict.fromkeys(adjacent))\n    return adjacent\n\ndef get_top_left_adjacent(grid, object_pixels, adj_color):\n    adjacent_pixels = get_adjacent_pixels(grid, object_pixels, adj_color)\n    if not adjacent_pixels:\n        return None\n    # find top-most, then left-most\n    adjacent_pixels.sort()\n    return adjacent_pixels[0]\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n    # Identify azure objects\n    azure_objects = get_objects(input_grid, 8)\n    # find adjacent white pixels and change the color\n    for obj in azure_objects:\n      adjacent_white = get_top_left_adjacent(input_grid, obj, 0)\n      if adjacent_white:\n        output_grid[adjacent_white] = 1\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3288,
    "candidates_token_count": 731,
    "total_token_count": 4019,
    "cached_content_token_count": 0
  },
  "response_time": 6.346692,
  "response_file": "002-response.json"
}