{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation adds a colored border around each non-zero pixel in the input grid. The color of the border pixels, and the relative positions, depends on the color of the original, central pixel.\n\"\"\"\n\nimport numpy as np\n\ndef get_border_positions(grid, row, col, relative_positions):\n    \"\"\"Calculates the absolute positions of border pixels, checking bounds.\"\"\"\n    border_positions = []\n    rows, cols = grid.shape\n    for dr, dc in relative_positions:\n        new_row, new_col = row + dr, col + dc\n        if 0 <= new_row < rows and 0 <= new_col < cols:\n            border_positions.append((new_row, new_col))\n    return border_positions\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid by adding colored borders around non-zero pixels.\"\"\"\n    # Initialize output grid with zeros (white)\n    output_grid = np.zeros_like(input_grid)\n\n    # Define the color mapping and relative positions for borders.\n    color_mapping = {\n        1: (7, [(1, 0), (0, 1), (-1, 0), (0, -1)]),  # Blue -> Orange border\n        2: (4, [(1, 0), (-1, 0)]),  # Red -> Yellow border\n        6: (7, [(-1, 0)]),  # Magenta -> Orange border\n    }\n\n    # Iterate through each cell in the input grid\n    rows, cols = input_grid.shape\n    for row in range(rows):\n        for col in range(cols):\n            pixel_value = input_grid[row, col]\n\n            # Copy existing pixel to output grid\n            output_grid[row,col] = pixel_value\n\n            # If the pixel is a \"seed\" (non-zero)\n            if pixel_value != 0:\n                # Get border color and relative positions from the mapping\n                if pixel_value in color_mapping:\n                    border_color, relative_positions = color_mapping[pixel_value]\n\n                    # Calculate border positions and set border pixels in output\n                    border_positions = get_border_positions(input_grid, row, col, relative_positions)\n                    for b_row, b_col in border_positions:\n                        output_grid[b_row, b_col] = border_color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2517,
    "candidates_token_count": 550,
    "total_token_count": 3067,
    "cached_content_token_count": 0
  },
  "response_time": 6.42532,
  "response_file": "006-response.json"
}