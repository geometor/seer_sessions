import numpy as np

def find_subgrids(grid):
    rows, cols = grid.shape
    divider_row = -1
    for i in range(1, rows):
      if all(grid[i,:] == 0) and not all(grid[i-1,:]==0):
          divider_row = i
          break
    if divider_row == -1:
      return None
    
    top_subgrid = grid[:divider_row, :]
    bottom_subgrid = grid[divider_row+1:, :]
    return top_subgrid, bottom_subgrid

def find_first_white_pixel_col(grid):
    for j in range(grid.shape[1]):
        if grid[0, j] == 0:
            return j
    return -1  # Should not happen in our examples

def transform(input_grid):
    grid = np.array(input_grid)

    # Identify Subgrids
    subgrids = find_subgrids(grid)
    if not subgrids:
      return [[0]] # default return, should make testing flag an issue
    top_subgrid, bottom_subgrid = subgrids

    # Locate First White Pixel in Top Subgrid and get its column index, used as a row selector
    top_white_col = find_first_white_pixel_col(top_subgrid)
    selected_row = top_white_col

    # Locate First White Pixel in Bottom Subgrid and get its col index
    bottom_white_col = find_first_white_pixel_col(bottom_subgrid)
    selected_col = bottom_white_col

    # initialize output grid size, determined using max of indices.
    output_size = max(selected_row+1, selected_col +1)
    output_grid = np.zeros((output_size, output_size), dtype=int)
    
    # handle case where either selected index is -1
    if selected_row ==-1 or selected_col == -1:
      return output_grid

    # copy colour from top grid to output grid.
    output_grid[selected_row, selected_col] = top_subgrid[selected_row,selected_col] #get_pixel(input_grid, selected_row,selected_col) #input_grid[selected_row][selected_col]

    return output_grid.tolist()

task_id = "6f8cd79b"

train_examples = [
    {
        "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        "output": [[2]]
    },
    {
        "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        "output": [[1]]
    },
    {
        "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        "output": [[4]]
    },
    {
        "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        "output": [[3]]
    },
    {
        "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        "output": [[5]]
    }
]

def compare_grids(grid1, grid2):
    return np.array_equal(np.array(grid1), np.array(grid2))

print("Train Set Results:")
for i, example in enumerate(train_examples):
  input_grid = example["input"]
  expected_output = example["output"]
  actual_output = transform(input_grid)
  match = compare_grids(actual_output,expected_output)
  print(f"Example {i+1}:")
  print(f"  Input:\n{np.array(input_grid)}")
  print(f"  Expected Output:\n{np.array(expected_output)}")
  print(f"  Actual Output:\n{np.array(actual_output)}")
  print(f"  Match: {match}")