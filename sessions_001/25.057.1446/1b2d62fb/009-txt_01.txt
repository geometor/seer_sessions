import numpy as np

def transform(input_grid):
    # initialize output_grid
    rows = len(input_grid)
    cols = 3
    output_grid = np.zeros((rows, cols), dtype=int)
    
    # Extract and check first element
    first_row_element = input_grid[0]

    for i in range(len(first_row_element)):
        # fill with the new color if not 0
        if first_row_element[i] != 0:
          if first_row_element[i] == 1:
            new_color = 8
          else:
            new_color = first_row_element[i]
          
          col_index = i % 3
          
          output_grid[:, col_index] = new_color

    return output_grid

task = {
    "train": [
        {
            "input": [[1, 0, 2, 0, 3, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 6, 6, 6, 0, 0, 0, 0, 7, 7, 7, 7, 0, 0, 0], [1, 0, 2, 0, 3, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 6, 6, 6, 0, 0, 0, 0, 7, 7, 7, 7, 0, 0, 0], [1, 0, 2, 0, 3, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 6, 6, 6, 0, 0, 0, 0, 7, 7, 7, 7, 0, 0, 0], [1, 0, 2, 0, 3, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 6, 6, 6, 0, 0, 0, 0, 7, 7, 7, 7, 0, 0, 0], [1, 0, 2, 0, 3, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 6, 6, 6, 0, 0, 0, 0, 7, 7, 7, 7, 0, 0, 0], [1, 0, 2, 0, 3, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 6, 6, 6, 0, 0, 0, 0, 7, 7, 7, 7, 0, 0, 0], [1, 0, 2, 0, 3, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 6, 6, 6, 0, 0, 0, 0, 7, 7, 7, 7, 0, 0, 0]],
            "output": [[8, 0, 2], [8, 0, 2], [8, 0, 2], [8, 0, 2], [8, 0, 2], [8, 0, 2], [8, 0, 2]]
        },
        {
            "input": [[0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0]],
            "output": [[8, 0, 0], [8, 0, 0], [8, 0, 0], [8, 0, 0], [8, 0, 0], [8, 0, 0], [8, 0, 0], [8, 0, 0], [8, 0, 0]]
        },
        {
            "input": [[5, 0, 0, 0, 0, 4, 0, 3, 0], [5, 0, 0, 0, 0, 4, 0, 3, 0], [5, 0, 0, 0, 0, 4, 0, 3, 0], [5, 0, 0, 0, 0, 4, 0, 3, 0], [5, 0, 0, 0, 0, 4, 0, 3, 0]],
            "output": [[5, 0, 4], [5, 0, 4], [5, 0, 4], [5, 0, 4], [5, 0, 4]]
        },
        {
            "input": [[0, 0, 0, 0, 4, 0, 0, 0, 1], [0, 0, 0, 0, 4, 0, 0, 0, 1], [0, 0, 0, 0, 4, 0, 0, 0, 1], [0, 0, 0, 0, 4, 0, 0, 0, 1], [0, 0, 0, 0, 4, 0, 0, 0, 1], [0, 0, 0, 0, 4, 0, 0, 0, 1]],
            "output": [[0, 4, 8], [0, 4, 8], [0, 4, 8], [0, 4, 8], [0, 4, 8], [0, 4, 8]]
        }
    ],
    "test": [
        {
            "input": [[0, 0, 0, 7, 0, 0, 0, 0, 6, 5, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 1, 0, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 0, 0, 6, 5, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 1, 0, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 0, 0, 6, 5, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 1, 0, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 0, 0, 6, 5, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 1, 0, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 0, 0, 6, 5, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 1, 0, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 0, 0, 6, 5, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 1, 0, 0, 0, 0, 0]],
            "output": [[7, 0, 6], [7, 0, 6], [7, 0, 6], [7, 0, 6], [7, 0, 6], [7, 0, 6]]
        }
    ]
}

def evaluate_transform(task):
  for example_index, example in enumerate(task["train"]):
        input_grid = example['input']
        expected_output = example['output']
        
        # Convert to numpy arrays for easier handling
        input_grid = np.array(input_grid)
        expected_output = np.array(expected_output)

        # Transform the input grid
        actual_output = transform(input_grid)
        print(f"Example: {example_index + 1}: \n")
        print(f"Input: \n {input_grid} \n")
        print(f"Expected Output: \n {expected_output} \n")
        print(f"Actual Output: \n {actual_output} \n")
        
        
        # Compare the expected and actual outputs
        if actual_output.shape == expected_output.shape:
            if np.array_equal(actual_output, expected_output):
                print("✅ Transformation successful")

            else:
                print("❌ Transformation failed")
        else:
            print(f"❌ shape not match, expected shape: {expected_output.shape}, actual shape: {actual_output.shape}")
        print("-" * 30)

evaluate_transform(task)
