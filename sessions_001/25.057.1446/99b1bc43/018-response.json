{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies distinct colored regions in the input grid, preserves their original colors, and reconstructs an output grid preserving the relative positions and shapes of these regions. The output grid's size is determined dynamically based on the maximum row and column indices of *all* pixels within the regions.\n\"\"\"\n\nimport numpy as np\n\ndef find_regions(grid):\n    \"\"\"Finds all distinct connected regions (objects) in the grid.\"\"\"\n    regions = {}\n    visited = set()\n    rows, cols = grid.shape\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def dfs(r, c, color, region_coords):\n        if (r, c) in visited or not is_valid(r, c) or grid[r, c] != color:\n            return\n        visited.add((r, c))\n        region_coords.append((r, c))\n        for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            dfs(r + dr, c + dc, color, region_coords)\n\n    for r in range(rows):\n        for c in range(cols):\n            if (r, c) not in visited:\n                color = grid[r, c]\n                if color != 0:  # Ignore white\n                    region_coords = []\n                    dfs(r, c, color, region_coords)\n                    # Use top-left as key\n                    min_r = min(coord[0] for coord in region_coords)\n                    min_c = min(coord[1] for coord in region_coords)\n                    regions[(min_r, min_c)] = (color, region_coords)\n    return regions\n\ndef determine_output_size(regions):\n    \"\"\"Determines the output grid size based on *all* region pixel positions.\"\"\"\n    if not regions:\n        return 0, 0\n\n    max_r = 0\n    max_c = 0\n    for _, (_, region_coords) in regions.items():\n        for r, c in region_coords:\n            max_r = max(max_r, r)\n            max_c = max(max_c, c)\n\n    return max_r + 1, max_c + 1\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the ARC task rules.\"\"\"\n    # Find regions in the input grid\n    regions = find_regions(np.array(input_grid))\n\n    # Determine output size dynamically, based on ALL pixels in ALL regions\n    output_rows, output_cols = determine_output_size(regions)\n    output_grid = np.zeros((output_rows, output_cols), dtype=int)\n\n    # Reconstruct the output grid, iterating through ALL pixels of each region\n    for (start_r, start_c), (color, region_coords) in regions.items():\n        for r, c in region_coords:\n            output_grid[r, c] = color  # Place pixel at its absolute position\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2913,
    "candidates_token_count": 711,
    "total_token_count": 3624,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.247303,
  "response_file": "018-response.json"
}