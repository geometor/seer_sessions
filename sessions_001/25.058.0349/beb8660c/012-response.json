{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation involves rearranging rows based on whether they contain objects or not. Empty rows at the top of the input grid are preserved. Rows containing objects (non-background pixels) are moved below the empty rows, maintaining their original relative order.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the row rearrangement rule.\"\"\"\n    input_grid = np.array(input_grid)\n    rows, cols = input_grid.shape\n    output_grid = np.zeros_like(input_grid)\n\n    # 1. Identify Empty Rows and Object Rows\n    empty_rows = []\n    object_rows = []\n    for i, row in enumerate(input_grid):\n        if np.all(row == 0):  # Check if the row is all background color\n            empty_rows.append(i)\n        else:\n            object_rows.append(i)\n\n    # 2. Preserve Top Empty Rows\n    top_empty_count = 0\n    for i in empty_rows:\n        if i == top_empty_count:\n          top_empty_count += 1\n        else:\n          break;\n\n    # 3. Reorder Object Rows (preserving relative order)\n    new_row_index = top_empty_count\n    for row_index in object_rows:\n        output_grid[new_row_index] = input_grid[row_index]\n        new_row_index += 1\n\n    return output_grid.tolist()\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3604,
    "candidates_token_count": 347,
    "total_token_count": 3951,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 4.143322,
  "response_file": "012-response.json"
}