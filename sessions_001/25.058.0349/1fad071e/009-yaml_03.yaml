observations:
  - example_1:
      input_grid: [[0, 1, 0], [0, 1, 0], [0, 1, 0]]
      output_grid: [1, 1, 1]
      blue_objects:
        - area: 3
          bounding_box: (0, 1, 3, 2)  # (min_row, min_col, max_row, max_col)
      rule: "A blue object of area 3 results in a blue pixel in the corresponding column of the output."
  - example_2:
      input_grid: [[0, 0, 0], [0, 1, 0], [0, 1, 0]]
      output_grid: [0, 1, 0]
      blue_objects:
        - area: 2
          bounding_box: (1, 1, 3, 2)
      rule: "A blue object of area 2 results in a blue pixel in the corresponding column of the output."
  - example_3:
      input_grid: [[0, 0, 0], [0, 0, 0], [0, 1, 0]]
      output_grid: [0, 0, 0]
      blue_objects:
        - area: 1
          bounding_box: (2, 1, 3, 2)
      rule: "A blue object of area 1 results in a white pixel in the corresponding column of the output."
  - example_4:
      input_grid: [[1, 0, 0], [1, 0, 0], [1, 0, 1]]
      output_grid: [1, 0, 1]
      blue_objects:
        - area: 3
          bounding_box: (0, 0, 3, 1)
        - area: 1
          bounding_box: (2, 2, 3, 3)
      rule: "If a column contains a blue object, check area, and output blue (1) if >= 2. In columns with blue objects of areas 3 and 1, the output is blue for area 3 and white for area 1."
  - example_5:
    input_grid: [[0, 0, 1, 0, 0], [0, 0, 1, 0, 0], [0, 0, 1, 0, 0], [0, 0, 1, 0, 0]]
    output_grid: [0, 0, 1, 0, 0]
    blue_objects:
      - area: 4
        bounding_box: (0, 2, 4, 3)
    rule: "A blue object occupying an entire column and area 4 results in a blue pixel."

  - summary: |
      The output is a 1xN grid, where N is the number of columns in the input grid. Each cell in the
      output grid corresponds to a column in the input grid. An output cell is blue (1) if the
      corresponding input column contains a contiguous blue object with an area greater than or equal to 2.
      Otherwise, the output cell is white (0).
