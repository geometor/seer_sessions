import numpy as np

def analyze_grid(grid, grid_name):
    rows, cols = grid.shape
    print(f"{grid_name}:")
    print(f"  Dimensions: {rows}x{cols}")
    zeros = []
    threes = []
    fives = []
    for r in range(rows):
        for c in range(cols):
            if grid[r, c] == 0:
                zeros.append((r, c))
            elif grid[r, c] == 3:
                threes.append((r, c))
            elif grid[r, c] == 5:
                fives.append((r, c))
    print(f"  Zeros: {zeros}")
    print(f"  Threes: {threes}")
    print(f"  Fives: {fives}")

def analyze_example(example):
    input_grid = np.array(example['input'])
    output_grid = np.array(example['output'])
    analyze_grid(input_grid, "Input Grid")
    analyze_grid(output_grid, "Output Grid")
    print("---")
    # verify the transform
    transformed_grid = transform(input_grid)
    if not np.array_equal(transformed_grid, output_grid):
        print("TRANSFORM MISMATCH")
        analyze_grid(transformed_grid, "Transformed")
    else:
        print("TRANSFORM OK")
    print("\n")

task = {
  "train": [
    {
      "input": [
        [0, 5, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      ],
      "output": [
        [3, 5, 0, 0, 0, 0, 0, 0, 0, 0],
        [3, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [3, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [3, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [3, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      ]
    },
    {
      "input": [
        [0, 5, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 5, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      ],
      "output": [
        [3, 5, 0, 0, 0, 0, 0, 0, 0, 0],
        [3, 0, 0, 5, 0, 0, 0, 0, 0, 0],
        [3, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [3, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [3, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      ]
    },
    {
      "input": [
        [0, 5, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 5, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 5, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      ],
      "output": [
        [3, 5, 0, 0, 0, 0, 0, 0, 0, 0],
        [3, 0, 0, 5, 0, 0, 0, 0, 0, 0],
        [3, 0, 0, 5, 0, 0, 0, 0, 0, 0],
        [3, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [3, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      ]
    },
    {
      "input": [
        [0, 5, 0, 0, 0, 5, 0, 0, 0, 0],
        [0, 0, 0, 5, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 5, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      ],
      "output": [
        [3, 5, 0, 0, 0, 5, 0, 0, 0, 0],
        [3, 0, 0, 5, 0, 0, 0, 0, 0, 0],
        [3, 0, 0, 5, 0, 0, 0, 0, 0, 0],
        [3, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [3, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      ]
    },
        {
      "input": [
        [0, 5, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0],
        [0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 0],
        [0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      ],
      "output": [
        [3, 5, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0],
        [3, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 0],
        [3, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0],
        [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      ]
    }
  ]
}

for example in task["train"]:
    analyze_example(example)