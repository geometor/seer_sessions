{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  Identify all 2x2 yellow squares in the input grid.\n2.  If a 2x2 yellow square is found, select it as the output.\n3.  If no 2x2 yellow square is present, but there is a single, unique 2x2 square of any color, select the unique 2x2 square.\n4.  The extracted square object becomes the output grid. All other regions are discarded.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    objects = []\n    visited = set()\n\n    def dfs(row, col):\n        if (row, col) in visited or not (0 <= row < grid.shape[0] and 0 <= col < grid.shape[1]):\n            return []\n\n        visited.add((row, col))\n        object_pixels = [(row, col)]\n        color = grid[row, col]\n\n        object_pixels.extend(dfs(row + 1, col))\n        object_pixels.extend(dfs(row - 1, col))\n        object_pixels.extend(dfs(row, col + 1))\n        object_pixels.extend(dfs(row, col - 1))\n\n        # Check if all pixels have same color.\n        if all(grid[r][c] == color for r, c in object_pixels):\n          return object_pixels\n        else:\n          return []\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            result = dfs(row, col)\n            if len(result)>0:\n              objects.append(result)\n\n    return objects\n\n\ndef get_object_bounds(object_pixels):\n    min_row = min(p[0] for p in object_pixels)\n    max_row = max(p[0] for p in object_pixels)\n    min_col = min(p[1] for p in object_pixels)\n    max_col = max(p[1] for p in object_pixels)\n    return min_row, max_row, min_col, max_col\n\ndef transform(input_grid):\n    # Find all yellow objects\n    yellow_objects = find_objects(input_grid)\n\n    # Find all 2x2 yellow squares\n    target_objects = []\n    for obj in yellow_objects:\n        min_row, max_row, min_col, max_col = get_object_bounds(obj)\n        if (max_row - min_row + 1) == 2 and (max_col - min_col + 1) == 2 and input_grid[min_row, min_col] == 4:\n            target_objects.append(obj)\n\n    # Extract the first 2x2 yellow square, if any.\n    if target_objects:\n        min_row, max_row, min_col, max_col = get_object_bounds(target_objects[0])\n        output_grid = input_grid[min_row:max_row+1, min_col:max_col+1]\n        return output_grid\n\n    # find all 2x2 squares\n    squares = []\n    all_objects = find_objects(input_grid)\n    for obj in all_objects:\n      min_row, max_row, min_col, max_col = get_object_bounds(obj)\n      if (max_row - min_row + 1) == 2 and (max_col - min_col + 1) == 2:\n          squares.append(obj)\n\n    # If no 2x2 yellow square, return unique 2x2 square\n    if len(squares) == 1:\n      min_row, max_row, min_col, max_col = get_object_bounds(squares[0])\n      output_grid = input_grid[min_row:max_row + 1, min_col:max_col + 1]\n      return output_grid\n      \n    return None\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5799,
    "candidates_token_count": 927,
    "total_token_count": 6726,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.913674,
  "response_file": "012-response.json"
}