import numpy as np

def find_object_bounding_box(grid, color):
    rows, cols = np.where(grid == color)
    if len(rows) == 0:
        return None
    top_left = (min(rows), min(cols))
    bottom_right = (max(rows), max(cols))
    return top_left, bottom_right

def get_object_details(grid):
  objects = {}
  grid_array = np.array(grid)
  for color in np.unique(grid_array):
    bounding_box = find_object_bounding_box(grid_array, color)
    if bounding_box:
      top_left, bottom_right = bounding_box
      objects[color] = {
          'top_left': top_left,
          'bottom_right': bottom_right,
          'width': bottom_right[1] - top_left[1] + 1,
          'height': bottom_right[0] - top_left[0] + 1
      }
  return objects

def analyze_example(example):
    input_grid = example['input']
    expected_output_grid = example['output']
    predicted_output_grid = transform(input_grid)  # Uses the existing transform function.

    input_objects = get_object_details(input_grid)
    expected_output_objects = get_object_details(expected_output_grid)
    predicted_output_objects = get_object_details(predicted_output_grid)

    print(f"Input Objects: {input_objects}")
    print(f"Expected Output Objects: {expected_output_objects}")
    print(f"Predicted Output Objects: {predicted_output_objects}")
    print(f"Predicted vs Expected Output: {predicted_output_grid == expected_output_grid}")
    print("---")

train_examples = task["train"]
for i, example in enumerate(train_examples):
  print(f"Example {i+1}:")
  analyze_example(example)