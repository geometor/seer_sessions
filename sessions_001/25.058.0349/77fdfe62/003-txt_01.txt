def analyze_results(task):
    results = []
    for example in task['train']:
        input_grid = example['input']
        expected_output = example['output']
        predicted_output = transform(input_grid)
        top_row, left_col, bottom_row, right_col = get_inner_region(np.array(input_grid))
        corners = []
        for r in range(top_row, bottom_row + 1):
            for c in range(left_col, right_col + 1):
                if is_corner(np.array(input_grid), r, c, top_row, left_col, bottom_row, right_col):
                    corners.append((r, c, np.array(input_grid)[r, c]))

        results.append({
            'input': input_grid,
            'expected_output': expected_output,
            'predicted_output': predicted_output.tolist(),
            'corners': corners,
            'inner_region': (top_row, left_col, bottom_row, right_col)
        })
    return results

task = {
    "train": [
        {
            "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 1, 3, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],
            "output": [[0, 3, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
        },
        {
            "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 1, 3, 3, 3, 1, 0, 0], [0, 0, 0, 1, 3, 3, 3, 1, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
            "output": [[0, 3, 0, 3], [0, 0, 0, 0], [0, 0, 3, 0], [0, 0, 0, 0]]
        },
        {
            "input": [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 8, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 7, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 2, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 6, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]],
            "output": [[0, 8, 0, 0], [0, 0, 0, 7], [0, 0, 2, 0], [6, 0, 0, 0]]
        },
       {
            "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                      [0, 0, 0, 0, 1, 1, 1, 0, 0, 0],
                      [0, 0, 0, 0, 1, 4, 1, 0, 0, 0],
                      [0, 0, 0, 0, 1, 1, 1, 0, 0, 0],
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
            "output": [[0, 4, 0, 0],
                       [0, 0, 0, 0],
                       [0, 0, 0, 0],
                       [0, 0, 0, 0]]}
    ]
}

results = analyze_results(task)
for i, res in enumerate(results):
    print(f"Example {i+1}:")
    print(f"  Corners: {res['corners']}")
    print(f"  Inner Region: {res['inner_region']}")
    print(f"  Predicted Output: {res['predicted_output']}")
    print(f"  Expected Output: {res['expected_output']}")
    print("-" * 20)