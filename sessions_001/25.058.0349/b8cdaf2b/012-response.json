{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nFor each green pixel in the input grid, check if the color of the pixel directly above it is the same as the color of the pixel directly below it. If they are the same color, create a vertical line of green pixels extending upwards from the original green pixel to the top edge of the grid. Pixels not meeting this condition remain unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef find_pixels_by_color(grid, color):\n    # Find the coordinates of all pixels of the specified color.\n    coords = np.argwhere(grid == color)\n    return coords\n\ndef check_above_below_same_color(grid, row, col):\n    # Check if the pixel is at the top or bottom edge\n    if row == 0 or row == grid.shape[0] - 1:\n        return False\n\n    # Check if the colors above and below are the same\n    return grid[row - 1, col] == grid[row + 1, col]\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of input_grid\n    output_grid = np.copy(input_grid)\n\n    # Find all green pixels (color 3)\n    green_pixel_coords = find_pixels_by_color(input_grid, 3)\n\n    if len(green_pixel_coords) > 0:\n        for green_pixel_coord in green_pixel_coords:\n            row, col = green_pixel_coord\n\n            # Check if the colors above and below the green pixel are the same\n            if check_above_below_same_color(input_grid, row, col):\n                # Extend green color upwards\n                for r in range(row - 1, -1, -1):\n                    output_grid[r, col] = 3\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4330,
    "candidates_token_count": 413,
    "total_token_count": 4743,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 4.209799,
  "response_file": "012-response.json"
}