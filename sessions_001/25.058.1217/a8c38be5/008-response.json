{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies all distinct, colored objects in the input grid. Determines the\nrelative row and column offsets between these objects. Creates a new grid whose\ndimensions are determined by the maximum relative offsets of any two objects.\nRecreates the objects in the new grid, maintaining their relative positions and\nfilling any gaps created with the background color (0).\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"\n    Identifies contiguous regions (objects) of the same color in a grid, excluding the background (0).\n    Returns a list of objects, where each object is a tuple: (color, [(r, c), ...]).\n    \"\"\"\n    objects = []\n    visited = set()\n    rows, cols = len(grid), len(grid[0])\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def dfs(r, c, color, obj_coords):\n        if (r, c) in visited or not is_valid(r, c) or grid[r][c] != color:\n            return\n        visited.add((r, c))\n        obj_coords.append((r, c))\n        for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            dfs(r + dr, c + dc, color, obj_coords)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r][c] != 0 and (r, c) not in visited:\n                color = grid[r][c]\n                obj_coords = []\n                dfs(r, c, color, obj_coords)\n                objects.append((color, obj_coords))\n\n    return objects\n\ndef transform(input_grid):\n    # Find objects\n    input_grid = np.array(input_grid)\n    objects = find_objects(input_grid)\n\n    if not objects:  # Handle the case where there are no objects\n      return input_grid.tolist()\n\n    # Get object coordinates\n    object_coords = [obj[1] for obj in objects]\n\n    # calculate the min/max row and col for all objects\n    min_row = min([min([r for r, _ in obj]) for obj in object_coords])\n    max_row = max([max([r for r, _ in obj]) for obj in object_coords])\n    min_col = min([min([c for _, c in obj]) for obj in object_coords])\n    max_col = max([max([c for _, c in obj]) for obj in object_coords])\n\n    # determine output grid size\n    height = max_row - min_row + 1\n    width = max_col - min_col + 1\n    output_grid = np.zeros((height, width), dtype=int)\n\n    # Place objects into output grid\n    for color, coords in objects:\n      for r,c in coords:\n        output_row = r - min_row\n        output_col = c - min_col\n        output_grid[output_row, output_col] = color\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3661,
    "candidates_token_count": 730,
    "total_token_count": 4391,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.294688,
  "response_file": "008-response.json"
}