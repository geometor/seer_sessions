{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by identifying contiguous regions of non-background colors (objects),\nand placing these objects into a new output grid. The output grid's dimensions are determined by the\nnumber of objects found. Objects are placed either in a single row or a single column, depending\non whether they all originated on the same row in the input grid.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"\n    Identifies contiguous regions (objects) of the same color in a grid, excluding the background (0).\n    Returns a dictionary where keys are colors and values are lists of (row, col) coordinates.\n    \"\"\"\n    objects = {}\n    visited = set()\n    rows, cols = len(grid), len(grid[0])\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def dfs(r, c, color, obj_coords):\n        if (r, c) in visited or not is_valid(r, c) or grid[r][c] != color:\n            return\n        visited.add((r, c))\n        obj_coords.append((r, c))\n        for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:  # only 4-connected\n            dfs(r + dr, c + dc, color, obj_coords)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r][c] != 0 and (r, c) not in visited:\n                color = grid[r][c]\n                obj_coords = []\n                dfs(r, c, color, obj_coords)\n                if color not in objects:\n                    objects[color] = []\n                objects[color].append(obj_coords)\n\n    return objects\n\ndef transform(input_grid):\n    # initialize output_grid\n    input_grid = np.array(input_grid)\n    objects = find_objects(input_grid)\n\n    # create a flat list of objects\n    flat_objects = []\n    for color, object_groups in objects.items():\n        for obj in object_groups:\n            flat_objects.append((color, obj[0][0], obj[0][1])) # color, first_row, first_col\n\n    num_objects = len(flat_objects)\n\n    # Determine if objects are on the same row\n    same_row = True\n    if num_objects > 1:\n      first_row = flat_objects[0][1]\n      for _,row,_ in flat_objects[1:]:\n        if row != first_row:\n          same_row = False\n          break\n\n    # determine output grid size\n    if same_row:\n      output_grid = np.full((1, num_objects), -1, dtype=int)\n    else:\n      output_grid = np.full((num_objects, 1), -1, dtype=int)\n\n    # Place objects in the output grid\n    if same_row:\n      for i, (color, _,_) in enumerate(flat_objects):\n        output_grid[0, i] = color\n    else:\n      for i, (color,_,_) in enumerate(flat_objects):\n        output_grid[i, 0] = color\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8026,
    "candidates_token_count": 777,
    "total_token_count": 8803,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.414079,
  "response_file": "006-response.json"
}