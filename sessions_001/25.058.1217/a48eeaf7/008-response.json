{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nMoves one gray pixel to a position adjacent to a red object, and removes other gray pixels.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, color):\n    # Find coordinates of pixels with the specified color.\n    return np.argwhere(grid == color).tolist()\n\ndef find_adjacent_empty(grid, object_pixels):\n    # Find an empty cell adjacent to any of the object pixels.\n    rows, cols = grid.shape\n    for r, c in object_pixels:\n        # Check adjacent cells (up, down, left, right).\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < rows and 0 <= nc < cols and grid[nr, nc] == 0:\n                return (nr, nc)\n    return None\n\ndef distance(pos1, pos2):\n    # Manhattan distance\n    return abs(pos1[0] - pos2[0]) + abs(pos1[1]-pos2[1])\n\n\ndef transform(input_grid):\n    # Initialize the output grid as a copy of the input grid.\n    output_grid = np.copy(input_grid)\n\n    # Find gray pixels.\n    gray_pixels = find_objects(input_grid, 5)\n\n    # Find red pixels.\n    red_pixels = find_objects(input_grid, 2)\n\n    if not red_pixels or not gray_pixels:\n        return output_grid # No change if no red or grey pixels\n\n    # Determine the target position (adjacent empty cell).\n    target_pos = find_adjacent_empty(output_grid, red_pixels)\n\n\n    # Move one gray pixel to the target position and remove the others\n    if target_pos:\n        # find closest grey pixel\n        min_dist = float('inf')\n        closest_grey = None\n        for grey in gray_pixels:\n            d = distance(target_pos, grey)\n            if d < min_dist:\n                min_dist = d\n                closest_grey = grey\n        if closest_grey:\n          # Move one gray pixel\n          old_r, old_c = closest_grey\n          output_grid[target_pos[0], target_pos[1]] = 5  # Move to target position\n          output_grid[old_r, old_c] = 0  # clear old position\n\n\n    # Remove any other gray pixels\n    for i in range(len(gray_pixels)):\n      if gray_pixels[i] != closest_grey:\n        old_r, old_c = gray_pixels[i]\n        output_grid[old_r, old_c] = 0\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2722,
    "candidates_token_count": 645,
    "total_token_count": 3367,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 5.658428,
  "response_file": "008-response.json"
}