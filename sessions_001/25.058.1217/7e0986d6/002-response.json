{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIterates through each pixel in the input grid. Preserves pixels of colors that are orthogonally adjacent to at least one 0 (white pixel). Colors not adjacent to 0 are changed to 0 in the output grid.\n\"\"\"\n\nimport numpy as np\n\ndef is_adjacent_to_zero(grid, row, col):\n    # Check if a cell is within bounds and adjacent to a zero\n    rows, cols = grid.shape\n    # Check up\n    if row > 0 and grid[row-1, col] == 0:\n        return True\n    # Check down\n    if row < rows - 1 and grid[row+1, col] == 0:\n        return True\n    # Check left\n    if col > 0 and grid[row, col-1] == 0:\n        return True\n    # Check right\n    if col < cols - 1 and grid[row, col+1] == 0:\n        return True\n    return False\n\ndef transform(input_grid):\n    # Initialize output grid as a copy of the input grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Iterate through each pixel in the input grid\n    for row in range(rows):\n        for col in range(cols):\n            # Check if the current pixel's color is not 0\n            if input_grid[row, col] != 0:\n                # Check if the pixel is adjacent to a 0 pixel\n                if not is_adjacent_to_zero(input_grid, row, col):\n                    # If not adjacent to 0, change to 0\n                    output_grid[row, col] = 0\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4428,
    "candidates_token_count": 396,
    "total_token_count": 4824,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 5.096148,
  "response_file": "002-response.json"
}