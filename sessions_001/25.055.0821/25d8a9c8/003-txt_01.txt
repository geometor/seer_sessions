import numpy as np

def calculate_difference_area(predicted_grid, actual_grid):
    """Calculates the area where the predicted grid differs from the actual grid."""
    if predicted_grid.shape != actual_grid.shape:
        return -1 # Indicate shape mismatch

    difference_mask = predicted_grid != actual_grid
    return np.sum(difference_mask)
def show_grid(grid):
        print(np.array(grid))
tasks = {
    "task_1": {
        "input": [
            [[4, 4, 4, 4, 4, 4, 4, 4, 4],
             [4, 4, 4, 4, 4, 4, 4, 4, 4],
             [4, 4, 4, 4, 4, 4, 4, 4, 4],
             [4, 4, 4, 4, 4, 4, 4, 4, 4],
             [4, 4, 4, 4, 4, 4, 4, 4, 4],
             [4, 4, 4, 4, 4, 4, 4, 4, 4]],

            [[2, 2, 2, 2, 2, 2, 2, 2, 2],
             [2, 2, 2, 2, 2, 2, 2, 2, 2],
             [2, 2, 2, 2, 2, 2, 2, 2, 2],
             [2, 2, 2, 2, 2, 2, 2, 2, 2],
             [2, 2, 2, 2, 2, 2, 2, 2, 2],
             [2, 2, 2, 2, 2, 2, 2, 2, 2]],
            [[3, 3, 3, 3, 3, 3, 3, 3, 3],
             [3, 3, 3, 3, 3, 3, 3, 3, 3],
             [3, 3, 3, 3, 3, 3, 3, 3, 3],
             [3, 3, 3, 3, 3, 3, 3, 3, 3],
             [3, 3, 3, 3, 3, 3, 3, 3, 3],
             [3, 3, 3, 3, 3, 3, 3, 3, 3]]
        ],
        "output": [
            [[5, 5, 5, 5, 5, 5, 5, 5, 5],
             [5, 5, 5, 5, 5, 5, 5, 5, 5],
             [5, 5, 5, 5, 5, 5, 5, 5, 5],
             [5, 5, 5, 5, 5, 5, 5, 5, 5],
             [5, 5, 5, 5, 5, 5, 5, 5, 5],
             [5, 5, 5, 5, 5, 5, 5, 5, 5]],
            [[0, 0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0, 0]],
           [[0, 0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0, 0]]
        ]
    },
    "task_2": {
      "input": [
        [[4, 4, 4, 4],
         [4, 4, 4, 4],
         [4, 4, 4, 4],
         [4, 4, 4, 4]],
        [[2, 2, 2, 2],
         [2, 2, 2, 2],
         [2, 2, 2, 2],
         [2, 2, 2, 2]],
        [[3, 3, 3, 3],
         [3, 3, 3, 3],
         [3, 3, 3, 3],
         [3, 3, 3, 3]]
      ],
      "output": [
        [[5, 5, 5, 5],
         [5, 5, 5, 5],
         [5, 5, 5, 5],
         [5, 5, 5, 5]],
        [[0, 0, 0, 0],
         [0, 0, 0, 0],
         [0, 0, 0, 0],
         [0, 0, 0, 0]],
        [[0, 0, 0, 0],
         [0, 0, 0, 0],
         [0, 0, 0, 0],
         [0, 0, 0, 0]]
      ]
    },
"task_3": {
        "input": [
            [[4, 4, 4],
             [4, 4, 4],
             [4, 4, 4]],
            [[2, 2, 2],
             [2, 2, 2],
             [2, 2, 2]],
            [[3, 3, 3],
             [3, 3, 3],
             [3, 3, 3]]
        ],
        "output": [
             [[5, 5, 5],
             [5, 5, 5],
             [5, 5, 5]],
            [[0, 0, 0],
             [0, 0, 0],
             [0, 0, 0]],
            [[0, 0, 0],
             [0, 0, 0],
             [0, 0, 0]]
        ]
    }
}
from  typing import List
def transform(input_grid: List[List[int]])-> List[List[int]]:
    """Transforms the input grid according to the specified color mapping."""
    # Initialize output_grid with the same dimensions as the input_grid
    output_grid = np.copy(input_grid)

    # Iterate through each cell of the input grid and apply color changes
    for i in range(output_grid.shape[0]):
        for j in range(output_grid.shape[1]):
            if input_grid[i, j] == 4:  # Yellow to grey
                output_grid[i, j] = 5
            elif input_grid[i, j] == 2 or input_grid[i, j] == 3:  # Red or Green to white
                output_grid[i, j] = 0

    return output_grid

results = {}
for task_name, task_data in tasks.items():
  results[task_name]={}
  for i, (input_grid, output_grid) in enumerate(zip(task_data["input"], task_data["output"])):
    input_grid_np = np.array(input_grid)
    output_grid_np = np.array(output_grid)
    predicted_output = transform(input_grid_np)
    diff_area = calculate_difference_area(predicted_output, output_grid_np)
    results[task_name][f'example_{i+1}'] = {"diff_area": diff_area,
                                        "predicted": predicted_output.tolist(),
                                        "actual":    output_grid
                                        }
for task, task_results in results.items():
    print (f"--- {task} ---")
    for example, example_results in task_results.items():
      if example_results['diff_area'] > 0:
        print(f" {example}:")
        print(f"  Difference Area: {example_results['diff_area']}")
        print("  Predicted:")
        show_grid(example_results['predicted'])
        print("  Actual")
        show_grid(example_results['actual'])
      else:
        print(f"{example} - Pass")