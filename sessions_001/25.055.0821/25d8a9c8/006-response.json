{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Yellow Transformation:** All yellow (4) pixels in the input grid are transformed to gray (5) pixels in the output grid.\n\n2.  **Red and Green Preservation:** If there are distinct rectangular regions of Red (2) *and* Green (3) in the input, do *not* change their colors.\n\n3.  **Red and Green Transformation (Conditional):** If either Red (2) or Green (3) are absent, or are not separated, then transform all instances of both of those colors to White (0).\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"Finds distinct rectangular regions of the same color.\"\"\"\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n\n    def is_valid(x, y):\n        return 0 <= x < grid.shape[0] and 0 <= y < grid.shape[1]\n\n    def dfs(x, y, color, object_coords):\n        if not is_valid(x, y) or visited[x, y] or grid[x, y] != color:\n            return\n        visited[x, y] = True\n        object_coords.append((x, y))\n        dfs(x + 1, y, color, object_coords)\n        dfs(x - 1, y, color, object_coords)\n        dfs(x, y + 1, color, object_coords)\n        dfs(x, y - 1, color, object_coords)\n\n    for i in range(grid.shape[0]):\n        for j in range(grid.shape[1]):\n            if not visited[i, j]:\n                color = grid[i, j]\n                object_coords = []\n                dfs(i, j, color, object_coords)\n                if object_coords:\n                    # Check if it forms a rectangle\n                    xs, ys = zip(*object_coords)\n                    min_x, max_x = min(xs), max(xs)\n                    min_y, max_y = min(ys), max(ys)\n                    if len(object_coords) == (max_x - min_x + 1) * (max_y - min_y + 1):\n                      objects.append({\"color\": color, \"coords\": object_coords})\n    return objects\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the specified color mapping.\"\"\"\n    output_grid = np.copy(input_grid)\n    objects = find_objects(input_grid)\n    \n    # Extract colors and their counts from the objects.  Much more reliable\n    # than a raw count.\n    colors = [obj['color'] for obj in objects]\n    color_counts = {}\n    for c in colors:\n        color_counts[c] = color_counts.get(c,0) + 1\n    \n    # Yellow Transformation\n    for i in range(output_grid.shape[0]):\n        for j in range(output_grid.shape[1]):\n            if input_grid[i, j] == 4:\n                output_grid[i, j] = 5\n\n    # Red and Green Transformation\n    red_present = 2 in color_counts\n    green_present = 3 in color_counts\n    \n    separate_regions = True # assume true unless we find evidence below\n\n    if red_present and green_present:\n        # check for overlap\n\n        red_coords = []\n        green_coords = []\n\n        for obj in objects:\n          if obj['color'] == 2:\n            red_coords.extend(obj['coords'])\n          if obj['color'] == 3:\n            green_coords.extend(obj['coords'])\n        \n        # brute force check if red and green share the same coordinates\n        for r_coord in red_coords:\n            for g_coord in green_coords:\n                if r_coord == g_coord:\n                    separate_regions = False\n                    break\n\n    if red_present or green_present:\n        if not (red_present and green_present and separate_regions):\n          for i in range(input_grid.shape[0]):\n              for j in range(input_grid.shape[1]):\n                  if input_grid[i,j] == 2 or input_grid[i,j] == 3:\n                      output_grid[i,j] = 0\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2832,
    "candidates_token_count": 1017,
    "total_token_count": 3849,
    "cached_content_token_count": 0
  },
  "response_time": 10.190271,
  "response_file": "006-response.json"
}