{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid based on observed patterns. The transformation involves identifying objects, checking for grid uniformity, and applying a conditional rotation or transposition to non-black objects based on their size and position.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"\n    Identifies distinct objects within the grid.  Returns a list of objects,\n    where each object is a dictionary containing 'color', 'pixels', and 'shape'.\n    \"\"\"\n    rows, cols = len(grid), len(grid[0])\n    visited = set()\n    objects = []\n\n    def dfs(r, c, color, pixels):\n        if (r < 0 or r >= rows or c < 0 or c >= cols or\n                (r, c) in visited or grid[r][c] != color):\n            return\n        visited.add((r, c))\n        pixels.append((r, c))\n        dfs(r + 1, c, color, pixels)\n        dfs(r - 1, c, color, pixels)\n        dfs(r, c + 1, color, pixels)\n        dfs(r, c - 1, color, pixels)\n\n    for r in range(rows):\n        for c in range(cols):\n            if (r, c) not in visited:\n                color = grid[r][c]\n                pixels = []\n                dfs(r, c, color, pixels)\n                if pixels:\n                    # Determine shape\n                    min_r, min_c = min(pixels, key=lambda x: (x[0], x[1]))\n                    max_r, max_c = max(pixels, key=lambda x: (x[0], x[1]))\n                    height = max_r - min_r + 1\n                    width = max_c - min_c + 1\n                    shape = f\"{height}x{width}\"\n\n                    objects.append({'color': color, 'pixels': pixels, 'shape': shape, 'min_row':min_r, 'min_col':min_c})\n    return objects\n\ndef rotate_point(point, rows, cols):\n    \"\"\"Rotates a single point 90 degrees clockwise within a grid.\"\"\"\n    r, c = point\n    return c, rows - 1 - r\n\ndef transpose_pixels(pixels, min_row, min_col):\n    \"\"\"Transposes a list of pixel coordinates (for 90-degree rotation).\"\"\"\n      # Determine dimensions of the object's bounding box.\n    height = max(p[0] for p in pixels) - min_row + 1\n    width = max(p[1] for p in pixels) - min_col + 1\n    \n    transposed_pixels = []\n    for r, c in pixels:\n      new_r = min_row + (c-min_col)\n      new_c = min_col + (r - min_row) #was: (height-1) - (r-min_row)\n      transposed_pixels.append((new_r,new_c))\n\n    return transposed_pixels\n\ndef transform(input_grid):\n    # 1. Identify Objects\n    objects = find_objects(input_grid)\n\n    # 2. Check for Uniformity\n    if len(objects) == 1 and objects[0]['color'] != 0:\n        return input_grid\n\n    # Initialize output grid with black (0)\n    rows, cols = len(input_grid), len(input_grid[0])\n    output_grid = [[0] * cols for _ in range(rows)]\n\n    # 3. Conditional Rotation/Transformation and Output\n    for obj in objects:\n        if obj['color'] != 0:  # Non-black object\n            if len(obj['pixels']) == 1:  # Single-pixel object\n                # Rotate the position of the single pixel\n                rotated_r, rotated_c = rotate_point(obj['pixels'][0], rows, cols)\n                output_grid[rotated_r][rotated_c] = obj['color']\n            else: #rotate just object, maintain overall location\n                rotated_pixels = transpose_pixels(obj['pixels'], obj['min_row'], obj['min_col'])\n                for r, c in rotated_pixels:\n                    if 0 <= r < rows and 0<= c < cols:\n                        output_grid[r][c] = obj['color']\n        else:\n            for r,c in obj['pixels']:\n                output_grid[r][c] = obj['color']\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3998,
    "candidates_token_count": 1043,
    "total_token_count": 5041,
    "cached_content_token_count": 0
  },
  "response_time": 11.592448,
  "response_file": "006-response.json"
}