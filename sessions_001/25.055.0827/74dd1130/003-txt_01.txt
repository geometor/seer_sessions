import numpy as np

def analyze_results(examples, transform_function):
    results = []
    for example in examples:
        input_grid = example['input']
        expected_output = example['output']
        predicted_output = transform_function(input_grid)

        input_array = np.array(input_grid)
        expected_array = np.array(expected_output)
        predicted_array = np.array(predicted_output)
        
        correct_pixels = np.sum(predicted_array == expected_array)
        total_pixels = input_array.size  # rows * cols

        results.append({
            'input_shape': input_array.shape,
            'output_shape': expected_array.shape,
            'correct_pixels': correct_pixels,
            'total_pixels': total_pixels,
            'accuracy': correct_pixels / total_pixels if total_pixels > 0 else 0
        })
    return results

#the previous transform function is used here

# the train set should be included in the prompt - but must be manually copied here
train_examples = [
    {'input': [[0, 0, 0], [0, 1, 0], [0, 0, 0]], 'output': [[0, 0, 0], [0, 1, 0], [0, 0, 0]]},
    {'input': [[8, 8, 8], [8, 8, 8], [8, 8, 8]], 'output': [[8, 8, 8], [8, 8, 8], [8, 8, 8]]},
    {'input': [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 1]], 'output': [[0, 0, 0], [0, 0, 0], [0, 0, 0], [1, 0, 0]]}
]
results = analyze_results(train_examples, transform)
print(results)
