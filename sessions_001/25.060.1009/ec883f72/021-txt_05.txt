import numpy as np

def analyze_grid(grid):
    """Analyzes a grid and returns relevant metrics."""
    yellow_coords = np.argwhere(grid == 4)
    red_coords = np.argwhere(grid == 2)
    
    metrics = {
        "yellow_exists": len(yellow_coords) > 0,
        "red_exists": len(red_coords) > 0,
        "yellow_highest_row": np.min(yellow_coords[:, 0]) if len(yellow_coords) > 0 else None,
        "yellow_lowest_row": np.max(yellow_coords[:, 0]) if len(yellow_coords) > 0 else None,
        "red_rows": np.unique(red_coords[:, 0]).tolist() if len(red_coords) > 0 else [],
        "red_cols": np.unique(red_coords[:, 1]).tolist() if len(red_coords) > 0 else [],
        "grid_height": grid.shape[0],
        "grid_width": grid.shape[1]
    }
    return metrics

def compare_grids(input_grid, output_grid, predicted_output_grid):
  return not np.array_equal(output_grid, predicted_output_grid)

task_data = {
    "train": [
        {
            "input": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 4, 4, 0, 0, 0, 0],
                [0, 0, 0, 0, 4, 4, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            "output": [
                [2, 0, 0, 0, 0, 0, 0, 0, 0, 2],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 4, 4, 0, 0, 0, 0],
                [0, 0, 0, 0, 4, 4, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            ]
        },
        {
            "input": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 4, 4, 4, 0, 0, 0, 0],
                [0, 0, 0, 4, 4, 4, 0, 0, 0, 0],
                [0, 0, 0, 4, 4, 4, 0, 0, 0, 0]
            ],
            "output": [
                [2, 0, 0, 0, 0, 0, 0, 0, 0, 2],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 4, 4, 4, 0, 0, 0, 0],
                [0, 0, 0, 4, 4, 4, 0, 0, 0, 0],
                [0, 0, 0, 4, 4, 4, 0, 0, 0, 0]
            ]
        },
        {
            "input": [
                [4, 4, 0, 0, 0, 0, 0, 0, 0, 0],
                [4, 4, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            "output": [
                [2, 0, 0, 0, 0, 0, 0, 0, 0, 2],
                [4, 4, 0, 0, 0, 0, 0, 0, 0, 0],
                [4, 4, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            ]
        },
        {
            "input": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 4]
            ],
            "output": [
                [2, 0, 0, 0, 0, 0, 0, 0, 0, 2],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 4]
            ]
        },
        {
            "input": [[0]],
            "output": [[2,2]]
        }
    ]
}

results = []
for i, example in enumerate(task_data['train']):
  input_grid = np.array(example['input'])
  output_grid = np.array(example['output'])
  predicted_output_grid = transform(input_grid)
  metrics_input = analyze_grid(input_grid)
  metrics_output = analyze_grid(output_grid)
  metrics_predicted = analyze_grid(predicted_output_grid)
  results.append(
      {
          'example': i,
          'correct': not compare_grids(input_grid, output_grid, predicted_output_grid),
          'input': metrics_input,
          'output': metrics_output,
          'predicted' : metrics_predicted
      }
  )

for result in results:
    print(result)