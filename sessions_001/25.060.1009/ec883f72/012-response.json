{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nCopy the azure shape one row down. Any column that *was* filled to any depth by azure in the original shape, \nreceives a magenta color vertically, starting at the bottom of the azure shape, all the way down until the last \nnon-white cell. The rest of the output cells from the input are unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef find_azure_shape(grid):\n    \"\"\"Finds the coordinates of all azure (8) pixels.\"\"\"\n    azure_coords = np.argwhere(grid == 8)\n    return azure_coords\n\ndef translate_shape(coords, rows_to_move):\n    \"\"\"Translates a set of coordinates down by a specified number of rows.\"\"\"\n    translated_coords = []\n    for r, c in coords:\n        translated_coords.append((r + rows_to_move, c))\n    return np.array(translated_coords)\n\ndef find_magenta_endpoints(grid):\n    \"\"\" find endpoints for the columns to fill, by iterating original columns\"\"\"\n    endpoints = []\n    \n    azure_coords = find_azure_shape(grid)\n    \n    if len(azure_coords) > 0: # check to prevent errors\n      min_azure_row = np.min(azure_coords[:, 0])\n      max_azure_row = np.max(azure_coords[:, 0])\n\n      # iterate each column that contains any azure\n      azure_cols = np.unique(azure_coords[:, 1])\n\n      for col in azure_cols:\n          # bottom of translated azure shape, in this column\n          endpoints.append( (max_azure_row + 1, col) )\n\n    magenta_coords = np.argwhere(grid == 6)      \n    for r, c in magenta_coords:\n        endpoints.append( (r,c))\n    return endpoints\n\ndef find_lowest_non_white_row(grid):\n    \"\"\"Finds the lowest row index that contains a non-white pixel.\"\"\"\n    rows, cols = grid.shape\n    for r in range(rows - 1, -1, -1):\n        for c in range(cols):\n            if grid[r, c] != 0:\n                return r\n    return 0\n    \n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the observed rule.\"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # 1. Identify the Azure Shape\n    azure_coords = find_azure_shape(input_grid)\n\n    # 2. Translate the Azure Shape (one row down)\n    translated_azure_coords = translate_shape(azure_coords, 1)\n    for r, c in translated_azure_coords:\n        if 0 <= r < rows and 0 <= c < cols: # check bounds\n           output_grid[r, c] = 8\n\n    # 3. find fill endpoints\n    magenta_endpoints = find_magenta_endpoints(input_grid)\n\n    # 4. fill endpoints down to lowest non-white cell\n    lowest_non_white = find_lowest_non_white_row(input_grid)\n\n    for r,c in magenta_endpoints:\n      for row_index in range(r, lowest_non_white + 1):\n          output_grid[row_index,c] = 6\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2378,
    "candidates_token_count": 778,
    "total_token_count": 3156,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 16.83829,
  "response_file": "012-response.json"
}