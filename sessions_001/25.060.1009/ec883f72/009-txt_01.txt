import numpy as np

def analyze_example(input_grid, output_grid, predicted_output):
    input_grid = np.array(input_grid)
    output_grid = np.array(output_grid)

    results = {}

    results['input_height'] = input_grid.shape[0]
    results['input_width'] = input_grid.shape[1]
    results['output_height'] = output_grid.shape[0]
    results['output_width'] = output_grid.shape[1]
    results['predicted_output_height'] = predicted_output.shape[0] if predicted_output is not None else 'Error'
    results['predicted_output_width'] = predicted_output.shape[1] if predicted_output is not None else 'Error'    
    results['input_colors'] = np.unique(input_grid).tolist()
    results['output_colors'] = np.unique(output_grid).tolist()
    results['shapes_added'] = 'L' if 3 in np.unique(output_grid) else 'None'

    return results

task = {
    "train": [
        {
            "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],
            "output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        },
        {
            "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
            "output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        },
        {
            "input": [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]],
            "output": [[0, 0, 0, 0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],
        },
    ]
}

import json
def execute_transform(input_grid):
  # initialize output_grid
  output_grid = np.copy(input_grid)
  
  # get dimensions
  height = output_grid.shape[0]
  width = output_grid.shape[1]

  # Find the lowest, rightmost available position for the "L"
  for r in range(height - 1, -1, -1):
      for c in range(width - 1, -1, -1):
          # Check if we can place the "L" here without overwriting
          if output_grid[r, c] == 0 and output_grid[r-1,c] == 0: # Check current and above
              output_grid[r, c] = 3
              output_grid[r-1, c] = 3
              return output_grid

  return output_grid
results_list = []
for example in task['train']:
    predicted_output = execute_transform(example['input'])
    results = analyze_example(example['input'], example['output'], predicted_output)
    results_list.append(results)
print(json.dumps(results_list, indent=2))