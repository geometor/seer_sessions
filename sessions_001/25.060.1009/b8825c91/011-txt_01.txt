import numpy as np

def analyze_results(input_grids, output_grids, predicted_grids):
    results = []
    for i, (input_grid, output_grid, predicted_grid) in enumerate(zip(input_grids, output_grids, predicted_grids)):
        input_grid = np.array(input_grid)
        output_grid = np.array(output_grid)
        predicted_grid = np.array(predicted_grid)

        changed_correctly = np.sum((predicted_grid != input_grid) & (predicted_grid == output_grid))
        changed_incorrectly = np.sum((predicted_grid != input_grid) & (predicted_grid != output_grid))
        unchanged_incorrectly = np.sum((predicted_grid == input_grid) & (predicted_grid != output_grid))
        total_changed_in_output = np.sum(output_grid != input_grid)
        total_pixels = input_grid.size


        results.append({
            "example_index": i,
            "changed_correctly": int(changed_correctly),
            "changed_incorrectly": int(changed_incorrectly),
            "unchanged_incorrectly": int(unchanged_incorrectly),
            "total_changed_in_output": int(total_changed_in_output),
            "total_pixels": int(total_pixels)
        })

    return results

# dummy data for demonstration - replace with actual task data
input_grids = [
    [[4, 0, 4, 4], [4, 4, 4, 4], [0, 4, 0, 4]],
    [[4, 4, 4, 4], [0, 0, 0, 0], [4, 4, 4, 4]],
    [[4, 4, 4, 4, 4], [4, 4, 4, 4, 4], [4, 0, 0, 4, 4], [0, 0, 0, 0, 4]]
]
output_grids = [
    [[4, 0, 1, 4], [4, 4, 4, 4], [0, 4, 0, 4]],
    [[1, 1, 1, 1], [0, 0, 0, 0], [4, 4, 4, 4]],
    [[4, 4, 4, 4, 4], [4, 4, 4, 4, 4], [4, 0, 0, 4, 4], [0, 0, 0, 0, 4]]
]
predicted_grids = [
    [[4, 0, 1, 4], [4, 4, 1, 4], [0, 4, 0, 4]],
    [[1, 1, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1]],
    [[4, 4, 4, 4, 1], [4, 4, 4, 4, 4], [4, 0, 0, 4, 1], [0, 0, 0, 0, 4]]

]

analysis = analyze_results(input_grids, output_grids, predicted_grids)
print(analysis)
