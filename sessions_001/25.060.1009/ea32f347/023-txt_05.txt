import numpy as np

def get_shape_pixels(grid, shape_color=5):
    # returns a list of (row, col) tuples representing the shape
    shape_pixels = []
    for r in range(grid.shape[0]):
        for c in range(grid.shape[1]):
            if grid[r, c] == shape_color:
                shape_pixels.append((r, c))
    return shape_pixels

def segment_shape(shape_pixels):
    # segments shape to vertical and horizontal parts
    vertical_segment = []
    horizontal_segments_top = []
    horizontal_segments_bottom = []

    # Find min and max row for vertical segment
    min_row = min(p[0] for p in shape_pixels)
    max_row = max(p[0] for p in shape_pixels)

    # Find the main vertical line
    col_counts = {}
    for r, c in shape_pixels:
        if c not in col_counts:
            col_counts[c] = 0
        col_counts[c] += 1

    vertical_col = None
    for col, count in col_counts.items():
        if count > 2:  # Assuming vertical line has more than 2 pixels
            vertical_col = col
            break

    if vertical_col is not None:
      for r,c in shape_pixels:
        if c == vertical_col:
          vertical_segment.append((r,c))

    # divide horizontal components

    for r, c in shape_pixels:
      if (r,c) not in vertical_segment:
        if r < vertical_segment[0][0]:
          horizontal_segments_top.append((r, c))
        elif r > vertical_segment[0][0]:
          horizontal_segments_bottom.append((r,c))

    return vertical_segment, horizontal_segments_top, horizontal_segments_bottom

def report(task, input_grid):
    shape_pixels = get_shape_pixels(input_grid)
    vertical, top, bottom = segment_shape(shape_pixels)
    print(f"{task=}")
    print(f"{shape_pixels=}")
    print(f"{vertical=}")
    print(f"{top=}")
    print(f"{bottom=}")

examples = [
    {
        "input": np.array([[0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 5, 0, 0, 0],
                           [0, 0, 5, 5, 5, 0, 0],
                           [0, 0, 0, 5, 0, 0, 0],
                           [0, 0, 0, 5, 0, 0, 0],
                           [0, 5, 5, 5, 5, 5, 0],
                           [0, 0, 0, 5, 0, 0, 0]]),
        "output": np.array([[0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 1, 0, 0, 0],
                            [0, 0, 2, 1, 2, 0, 0],
                            [0, 0, 0, 1, 0, 0, 0],
                            [0, 0, 0, 1, 0, 0, 0],
                            [0, 4, 4, 1, 4, 4, 0],
                            [0, 0, 0, 1, 0, 0, 0]])
    },
    {
        "input": np.array([[0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 5, 0, 0, 0],
                           [0, 0, 0, 5, 5, 5, 0, 0],
                           [0, 0, 0, 0, 5, 0, 0, 0],
                           [0, 0, 0, 0, 5, 0, 0, 0],
                           [0, 0, 0, 0, 5, 0, 0, 0],
                           [0, 0, 5, 5, 5, 5, 5, 0],
                           [0, 0, 0, 0, 5, 0, 0, 0]]),
        "output": np.array([[0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 1, 0, 0, 0],
                            [0, 0, 0, 2, 1, 2, 0, 0],
                            [0, 0, 0, 0, 1, 0, 0, 0],
                            [0, 0, 0, 0, 1, 0, 0, 0],
                            [0, 0, 0, 0, 1, 0, 0, 0],
                            [0, 0, 4, 4, 1, 4, 4, 0],
                            [0, 0, 0, 0, 1, 0, 0, 0]])
    },
    {
        "input": np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 5, 0, 0, 0],
                           [0, 0, 0, 0, 5, 5, 5, 0, 0],
                           [0, 0, 0, 0, 0, 5, 0, 0, 0],
                           [0, 0, 0, 0, 0, 5, 0, 0, 0],
                           [0, 0, 0, 0, 0, 5, 0, 0, 0],
                           [0, 0, 0, 5, 5, 5, 5, 5, 0],
                           [0, 0, 0, 0, 0, 5, 0, 0, 0]]),
       "output": np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 1, 0, 0, 0],
                           [0, 0, 0, 0, 2, 1, 2, 0, 0],
                           [0, 0, 0, 0, 0, 1, 0, 0, 0],
                           [0, 0, 0, 0, 0, 1, 0, 0, 0],
                           [0, 0, 0, 0, 0, 1, 0, 0, 0],
                           [0, 0, 0, 4, 4, 1, 4, 4, 0],
                           [0, 0, 0, 0, 0, 1, 0, 0, 0]])
    }
]

for i, example in enumerate(examples):
  report(f"example_{i+1}", example["input"])