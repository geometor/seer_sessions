{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid based on the presence and position of grey (5) pixels.\n\n1.  **Grey Pixel Transformation:**\n    *   IF a vertical line of grey pixels exists:\n        *   Change the color of the vertical line pixels to blue.\n        *   Change the color of grey pixels to the *left* of the line to yellow.\n        *   Change the color of grey pixels to the *right* of the line to red.\n    *   ELSE IF there are ANY grey pixels (but no vertical line):\n        *   change all grey pixels to blue.\n    *    ELSE:\n        *   make no change.\n\n2.  **Other color transformations**\n    *   No other colors should change.\n\"\"\"\n\nimport numpy as np\n\ndef find_vertical_line(grid):\n    \"\"\"\n    Finds the longest vertical line of grey pixels in the grid.\n    Returns a list of (row, col) tuples for the line, or an empty list if none found.\n    \"\"\"\n    rows, cols = grid.shape\n    grey_pixels = np.argwhere(grid == 5)\n    if len(grey_pixels) == 0:\n        return []\n\n    col_counts = {}  # Count grey pixels in each column\n    for r, c in grey_pixels:\n        if c not in col_counts:\n            col_counts[c] = []\n        col_counts[c].append(r)\n\n    longest_col = -1\n    longest_col_len = 0\n\n    for col, row_list in col_counts.items():\n        row_list.sort()\n        local_max_len = 0\n        max_len = 0\n        for i in range(len(row_list)):\n            if i == 0:\n                local_max_len = 1\n            elif row_list[i] == row_list[i - 1] + 1:\n                local_max_len += 1\n            else:\n                local_max_len = 1\n            max_len = max(max_len, local_max_len)\n            \n        if max_len > longest_col_len:\n            longest_col_len = max_len\n            longest_col = col\n\n    if longest_col_len == 0:\n        return []\n\n    # Build vertical segment from longest column\n    vertical_segment = []\n\n    # find the starting row of the longest segment in the column\n    row_list = col_counts[longest_col]\n    row_list.sort()\n    start_row = -1\n    for i in range(len(row_list)):\n        if i == 0:\n            start_row = row_list[i]\n        elif row_list[i] == row_list[i-1] + 1:\n          pass # continue\n        else:\n            if (row_list[i-1] - start_row + 1) == longest_col_len:\n                break # found it\n            else:\n              start_row = row_list[i]\n\n    for r in range(start_row, start_row + longest_col_len):\n        vertical_segment.append((r, longest_col))\n\n    return vertical_segment\n\ndef transform(input_grid):\n    # Initialize output grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Find vertical line of grey pixels\n    vertical_line = find_vertical_line(input_grid)\n\n    # Check if a vertical line exists\n    if vertical_line:\n        # Color vertical line pixels blue\n        for r, c in vertical_line:\n            output_grid[r, c] = 1\n\n        # Color other grey pixels based on position relative to vertical line\n        grey_pixels = np.argwhere(input_grid == 5)\n        vertical_col = vertical_line[0][1]\n        for r, c in grey_pixels:\n            if c < vertical_col:\n                output_grid[r, c] = 4  # Yellow for left\n            elif c > vertical_col:\n                output_grid[r, c] = 2  # Red for right\n    else:\n        # If no vertical line, check for any grey pixels\n        grey_pixels = np.argwhere(input_grid == 5)\n        if len(grey_pixels) > 0:\n            # Change all grey pixels to blue\n            for r, c in grey_pixels:\n                output_grid[r, c] = 1\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2982,
    "candidates_token_count": 1054,
    "total_token_count": 4036,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.11853,
  "response_file": "014-response.json"
}