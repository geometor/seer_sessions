{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation identifies non-white \"seed\" pixels and propagates their color vertically within their respective columns. Red seeds propagate downwards, and yellow seeds propagate upwards. Propagation stops at grid edges or other non-white pixels.\n\"\"\"\n\nimport numpy as np\n\ndef get_seed_pixels(grid):\n    \"\"\"Finds coordinates and colors of non-white pixels.\"\"\"\n    coords = np.argwhere(grid != 0)\n    seed_pixels = []\n    for r, c in coords:\n        seed_pixels.append((r, c, grid[r, c]))\n    return seed_pixels\n\ndef fill_column(grid, start_row, col, color, direction):\n    \"\"\"Fills a column with the given color, starting from start_row and moving in the specified direction, within the column only.\"\"\"\n    rows = grid.shape[0]\n    if direction == \"down\":\n        for i in range(start_row, rows):\n            if grid[i, col] == 0:\n                grid[i, col] = color\n            else:\n                break  # Stop if a non-white pixel is encountered\n    elif direction == \"up\":\n        for i in range(start_row, -1, -1):\n            if grid[i, col] == 0:\n                grid[i, col] = color\n            else:\n                break  # Stop if a non-white pixel is encountered\n    return grid\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the color propagation rule.\n    \"\"\"\n    # Initialize output grid as a copy of the input grid.\n    output_grid = np.copy(input_grid)\n    rows, cols = output_grid.shape\n\n    # Get seed pixels (non-white pixels).\n    seed_pixels = get_seed_pixels(input_grid)\n\n    # Propagate color for each seed pixel.\n    for r, c, color in seed_pixels:\n        # determine fill direction\n        if color == 2:  # Red propagates down\n            direction = \"down\"\n        elif color == 4: # Yellow propagates up\n             direction = \"up\"\n        else:\n            continue # ignore other colors\n\n        # propagate only within the same column 'c' of the seed, starting at the seed row 'r'\n        output_grid = fill_column(output_grid, r, c, color, direction)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2480,
    "candidates_token_count": 550,
    "total_token_count": 3030,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 5.063655,
  "response_file": "020-response.json"
}