import numpy as np

def transform(input_grid):
    # Initialize output_grid with the same dimensions as the input
    output_grid = np.zeros_like(input_grid)
    rows, cols = output_grid.shape

    # Create Checkerboard
    for r in range(rows):
        for c in range(cols):
            if (r + c) % 2 == 0:
                output_grid[r, c] = 3  # Green

    # Find initial azure cell
    azure_start = None
    for r in range(rows):
        for c in range(cols):
            if input_grid[r, c] == 8:  # Azure
                azure_start = (r, c)
                break
        if azure_start:
            break

    # Flood Fill Azure
    if azure_start:
        queue = [azure_start]
        while queue:
            r, c = queue.pop(0)
            if output_grid[r, c] == 0:  # Only fill white cells
                output_grid[r, c] = 8  # Azure
                # Add neighbors to queue (8-connectivity)
                neighbors = [
                    (r + 1, c), (r - 1, c), (r, c + 1), (r, c - 1),
                    (r + 1, c + 1), (r - 1, c - 1), (r + 1, c - 1), (r - 1, c + 1)
                ]
                for nr, nc in neighbors:
                    if 0 <= nr < rows and 0 <= nc < cols:  # Check bounds
                        queue.append((nr, nc))

    return output_grid

# Example Data (replace with your actual task data)
train_ex = [
    {
"input": [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],
"output": [[3, 8, 3, 8, 3, 8, 3, 8, 3], [8, 8, 8, 8, 3, 8, 3, 8, 3], [3, 8, 3, 8, 8, 8, 3, 8, 3], [8, 8, 8, 8, 3, 8, 8, 8, 3], [3, 8, 3, 8, 8, 8, 3, 8, 3], [8, 8, 8, 8, 3, 8, 8, 8, 3], [3, 8, 3, 8, 8, 8, 3, 8, 3], [8, 8, 8, 8, 3, 8, 3, 8, 3], [3, 8, 3, 8, 3, 8, 3, 8, 3]]
    },
    {
"input": [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]],
"output": [[3, 0, 3, 0, 3, 0, 3], [0, 3, 0, 3, 0, 3, 0], [3, 0, 3, 0, 3, 0, 3], [0, 3, 0, 3, 8, 3, 0], [3, 0, 3, 0, 3, 0, 3], [0, 3, 0, 3, 0, 3, 0], [3, 0, 3, 0, 3, 0, 3]]
    },
    {
"input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
"output": [[3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 8], [0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 8, 8], [3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 8]]
    }
]

results = []
for ex in train_ex:
    input_grid = np.array(ex["input"])
    expected_output = np.array(ex["output"])
    actual_output = transform(input_grid)
    comparison = np.array_equal(actual_output, expected_output)
    results.append({
        "comparison": comparison,
        "diff": None if comparison else (expected_output - actual_output).tolist()
    })

print(results)