{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  Examine Input: Inspect the input grid for blue (1) pixels.\n2.  Categorize Blue:\n    *   If there's a *full* vertical blue line, create an azure segment at row 0, columns 1 and 2 in the output grid.\n    *   If there's a *partial* vertical blue line, create an azure segment at row 0, columns 0 and 1.\n    * If there is a 2x1 blue rectangle, create an azure segment only at row 0, column 2.\n    *   If there are *no* blue pixels, create an azure segment at row 0, columns 1 and 2.\n3. Output size: Make the output a 5x3 grid\n4.  Fill Remaining:** Fill all other cells in the output grid with white (0).\n\"\"\"\n\nimport numpy as np\n\ndef find_vertical_line(grid, color):\n    # Find the column index where the vertical line of the specified color exists.\n    # Return -1 for partial lines, -2 for no lines, and the column index for full lines.\n    rows, cols = grid.shape\n    for j in range(cols):\n        is_line = True\n        is_partial = False\n        for i in range(rows):\n            if grid[i, j] != color:\n                if np.any(grid[:,j] == color):\n                     is_partial = True\n                is_line = False\n                \n        if is_line:\n            return j\n    if is_partial:\n        return -1\n    return -2\n    \ndef find_blue_rectangle(grid):\n    #find 2x1 blue rectangle\n    rows, cols = grid.shape\n    for i in range(rows -1):\n        for j in range(cols):\n            if grid[i,j] == 1 and grid[i+1, j] == 1:\n                return True\n    return False\n\ndef transform(input_grid):\n    # Initialize output_grid with white (0) and fixed size 5x3.\n    output_grid = np.zeros((5, 3), dtype=int)\n\n    # Find the vertical blue (1) line.\n    blue_line_col = find_vertical_line(input_grid, 1)\n    \n    blue_rect = find_blue_rectangle(input_grid)\n\n    # Categorize and create azure segment\n    if blue_line_col >= 0 :\n        output_grid[0, 1] = 8\n        output_grid[0, 2] = 8\n    elif blue_line_col == -1:\n        output_grid[0,0] = 8\n        output_grid[0,1] = 8\n    elif blue_rect:\n        output_grid[0,2] = 8\n    elif blue_line_col == -2:\n        output_grid[0,1] = 8\n        output_grid[0,2] = 8\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2575,
    "candidates_token_count": 697,
    "total_token_count": 3272,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 5.863437,
  "response_file": "012-response.json"
}