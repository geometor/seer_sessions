{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Copy Grid:** Begin by creating a copy of the input grid. This copy will be modified to produce the output grid.\n\n2.  **Single Red Pixel Rule:** Locate any \"single\" red pixels. A red pixel is considered \"single\" if it has *no* adjacent red pixels (horizontally, vertically, or diagonally). If a single red pixel is found, and if there are three pixels directly above it in the grid, change those three pixels to the sequence: green, red, green (3, 2, 3).\n\n3.  **Conditional Green to Red Transform:** After applying the single red pixel rule, iterate through all the green pixels in the grid.\n    *   A green pixel will change to red if and only if:\n        *   It has *at least* one red neighbor (horizontally, vertically, or diagonally).\n        *   It does *not* have two or more red neighbors.\n\n4.  **Preserve Other Colors:** Pixels that are not red or green, and do not meet the single red pixel condition remain unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, r, c, include_diagonal=True):\n    \"\"\"Gets the neighbors of a cell, optionally including diagonals.\"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if (i == 0 and j == 0):\n                continue\n            if not include_diagonal and (abs(i) + abs(j) != 1):\n                continue\n\n            nr, nc = r + i, c + j\n            if 0 <= nr < rows and 0 <= nc < cols:\n                neighbors.append((nr, nc))\n    return neighbors\n\ndef is_single_red(grid, r, c):\n    \"\"\"Checks if a red pixel is isolated (not adjacent to other red pixels).\"\"\"\n    if grid[r, c] != 2:\n        return False\n    neighbors = get_neighbors(grid, r, c, include_diagonal=True)\n    for nr, nc in neighbors:\n        if grid[nr, nc] == 2:\n            return False\n    return True\n\ndef count_red_neighbors(grid, r, c):\n    \"\"\"Counts the number of red neighbors for a given pixel.\"\"\"\n    neighbors = get_neighbors(grid, r, c, include_diagonal=True)\n    count = 0\n    for nr, nc in neighbors:\n        if grid[nr, nc] == 2:\n            count += 1\n    return count\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Single Red Pixel Rule\n    for r in range(rows):\n        for c in range(cols):\n            if is_single_red(input_grid, r, c):\n                if r > 2:  # Ensure there are three pixels above\n                    output_grid[r - 3, c] = 3\n                    output_grid[r - 2, c] = 2\n                    output_grid[r - 1, c] = 3\n\n    # Conditional Green to Red Transform\n    temp_grid = np.copy(output_grid) # work from a copy to prevent changes\n    for r in range(rows):\n        for c in range(cols):\n            if temp_grid[r, c] == 3:\n                red_neighbors = count_red_neighbors(temp_grid, r, c)\n                if 0 < red_neighbors < 2:\n                    output_grid[r,c] = 2\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5578,
    "candidates_token_count": 846,
    "total_token_count": 6424,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.230877,
  "response_file": "014-response.json"
}