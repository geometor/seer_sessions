{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Copy Grid:** Create a copy of the input grid as the output grid.\n2.  **Preserve White:** White pixels in the input remain white in the output (this is implicit in the copy).\n3.  **Single Red Pixel Rule:** If there's a *single* red pixel (not adjacent to other red pixels), change the three pixels directly above it to the pattern `3 2 3` (green, red, green), *if those three pixels exist*.\n4.  **Green to Red Conversion:** Convert any green pixel to a red pixel if it has any neighboring red pixel.\n5.  **Preserve Non-adjacent Green:** If a green is NOT adjacent to any red, it does not change.\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, r, c, include_diagonal=False):\n    \"\"\"Gets the neighbors of a cell, optionally including diagonals.\"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if (i == 0 and j == 0) or (not include_diagonal and (abs(i) + abs(j) != 1)):\n                continue\n            nr, nc = r + i, c + j\n            if 0 <= nr < rows and 0 <= nc < cols:\n                neighbors.append((nr, nc))\n    return neighbors\n\ndef is_single_red(grid, r, c):\n    \"\"\"Checks if a red pixel is isolated (not adjacent to other red pixels).\"\"\"\n    if grid[r, c] != 2:\n        return False\n    neighbors = get_neighbors(grid, r, c, include_diagonal=True)\n    for nr, nc in neighbors:\n        if grid[nr, nc] == 2:\n            return False\n    return True\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the defined rules.\"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Single Red Pixel Rule\n    for r in range(rows):\n        for c in range(cols):\n            if is_single_red(input_grid, r, c):\n                if r > 2:  # Ensure there are three pixels above\n                    output_grid[r - 3, c] = 3\n                    output_grid[r - 2, c] = 2\n                    output_grid[r - 1, c] = 3\n\n    # Green to Red Conversion and Preserve Non-adjacent Green\n    #  Need a copy to avoid cascading effects during iteration.\n    temp_grid = np.copy(output_grid)\n    for r in range(rows):\n        for c in range(cols):\n            if temp_grid[r,c] == 3: # check temp grid for what WAS green\n                neighbors = get_neighbors(output_grid, r, c)\n                is_adjacent_to_red = False\n                for nr, nc in neighbors:\n                    if output_grid[nr, nc] == 2:\n                        is_adjacent_to_red = True\n                        break\n                if is_adjacent_to_red:\n                    output_grid[r,c] = 2 # apply changes to real output\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2695,
    "candidates_token_count": 759,
    "total_token_count": 3454,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.092157,
  "response_file": "012-response.json"
}