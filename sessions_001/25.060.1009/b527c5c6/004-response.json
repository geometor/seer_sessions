{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Find the green (3) \"cross\" shape and the red (2) pixels within it.\n2.  **Red Pixel Duplication:** The red pixels are duplicated. For each original red pixel in the input, create four more copies in the output: One directly above, one directly below, one to the left, and one to the right. If green occupies the copy location, maintain green, only copy to white space.\n3.  **Green Cross Expansion:** The green cross expands. From each exist green pixel, examine the spaces to it's left and right, and duplicate if white.\n4. **Vertical Fill:** From each green pixel on the cross, scan upwards and downwards to any 0 and replace with a 3. Stop before other non-zero pixels.\n\"\"\"\n\nimport numpy as np\n\ndef get_objects(grid, color):\n    \"\"\"Finds coordinates of all pixels of a specific color.\"\"\"\n    return np.array(np.where(grid == color)).T\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Identify red pixels\n    red_pixels = get_objects(input_grid, 2)\n    \n    # Duplicate red pixels\n    for r, c in red_pixels:\n        neighbors = [(r-1, c), (r+1, c), (r, c-1), (r, c+1)]\n        for nr, nc in neighbors:\n            if 0 <= nr < rows and 0 <= nc < cols and output_grid[nr, nc] == 0:\n                output_grid[nr, nc] = 2\n\n    # Identify green pixels\n    green_pixels = get_objects(input_grid, 3)\n\n    # Expand green cross to the left and right\n    for r, c in green_pixels:\n        if c > 0 and output_grid[r,c-1] == 0:\n            output_grid[r,c-1] = 3\n        if c < cols -1 and output_grid[r, c+1] == 0:\n            output_grid[r, c+1] = 3\n\n    green_pixels = get_objects(output_grid, 3)\n\n    # Vertical fill for green pixels\n    for r, c in green_pixels:\n        # Upwards\n        for ur in range(r - 1, -1, -1):\n            if output_grid[ur, c] == 0:\n                output_grid[ur, c] = 3\n            else:\n                break\n        # Downwards\n        for dr in range(r + 1, rows):\n            if output_grid[dr, c] == 0:\n                output_grid[dr, c] = 3\n            else:\n                break\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2494,
    "candidates_token_count": 662,
    "total_token_count": 3156,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.185162,
  "response_file": "004-response.json"
}