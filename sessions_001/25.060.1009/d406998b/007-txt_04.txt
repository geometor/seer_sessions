import numpy as np

def get_hv_adjacent_pixels(grid, row, col):
    """Gets values of horizontally/vertically adjacent pixels."""
    rows, cols = grid.shape
    adjacent = []
    if row > 0:
        adjacent.append(grid[row-1, col]) # Up
    if row < rows - 1:
        adjacent.append(grid[row+1, col]) # Down
    if col > 0:
        adjacent.append(grid[row, col-1]) # Left
    if col < cols - 1:
        adjacent.append(grid[row, col+1]) # Right
    return adjacent

def transform(input_grid):
    # initialize output_grid
    output_grid = np.copy(input_grid)
    rows, cols = input_grid.shape

    # change output pixels
    for row in range(rows):
        for col in range(cols):
            if input_grid[row, col] == 5:  # Check if the pixel is gray
                hv_adjacent = get_hv_adjacent_pixels(input_grid, row, col)
                gray_count = hv_adjacent.count(5)
                white_count = hv_adjacent.count(0)

                # if input_grid[row, col] == 5 is HV adjacent to exactly two 5 and one 0, or one 5 and two 0:
                if (gray_count == 2 and white_count == 1) or (gray_count == 1 and white_count == 2):
                    output_grid[row, col] = 3  # Change to green

    return output_grid

def calculate_metrics(task):
    """Calculates error metrics for the given task."""
    
    total_pixels_changed_correctly = 0
    total_pixels_changed_incorrectly = 0
    total_pixels_unchanged_correctly = 0
    total_pixels_unchanged_incorrectly = 0

    print(f"Task: {task['name']}")
    for example in task['train']:
        input_grid = np.array(example['input'])
        output_grid = np.array(example['output'])
        predicted_output = transform(input_grid.copy())

        changed_correctly = np.sum((predicted_output != input_grid) & (predicted_output == output_grid))
        changed_incorrectly = np.sum((predicted_output != input_grid) & (predicted_output != output_grid))
        unchanged_correctly = np.sum((predicted_output == input_grid) & (predicted_output == output_grid))
        unchanged_incorrectly = np.sum((predicted_output == input_grid) & (predicted_output != output_grid))

        total_pixels_changed_correctly += changed_correctly
        total_pixels_changed_incorrectly += changed_incorrectly
        total_pixels_unchanged_correctly += unchanged_correctly
        total_pixels_unchanged_incorrectly += unchanged_incorrectly

    print(f"  Pixels Changed Correctly: {total_pixels_changed_correctly}")
    print(f"  Pixels Changed Incorrectly: {total_pixels_changed_incorrectly}")
    print(f"  Pixels Unchanged Correctly: {total_pixels_unchanged_correctly}")
    print(f"  Pixels Unchanged Incorrectly: {total_pixels_unchanged_incorrectly}")
    print("-" * 30)

task = {
    "name": "Task 1",
    "train": [
        {
            "input": [[5, 0, 5], [0, 5, 0], [5, 0, 5]],
            "output": [[5, 0, 5], [0, 3, 0], [5, 0, 5]],
        },
        {
            "input": [[0, 5, 0, 5], [5, 5, 5, 0], [0, 5, 0, 5]],
            "output": [[0, 3, 0, 5], [5, 3, 5, 0], [0, 3, 0, 5]],
        },
        {
            "input": [[5, 5, 5, 5, 5], [5, 0, 5, 0, 5], [0, 5, 0, 5, 0], [5, 0, 5, 0, 5],[5, 5, 5, 5, 5]],
            "output": [[5, 5, 5, 5, 5], [5, 0, 5, 0, 5], [0, 5, 0, 5, 0], [5, 0, 5, 0, 5],[5, 5, 5, 5, 5]],
        },
    ],
     "test": [
        {"input": [[5, 5, 5, 5], [5, 0, 0, 5], [5, 5, 5, 5]],
         "output": [[5, 5, 5, 5], [5, 0, 0, 5], [5, 5, 5, 5]]},
    ]
}
calculate_metrics(task)

def show_grid(grid, title):
    print(title)
    for row in grid:
        print("".join(map(str,row)))
    print()

def show_diff(before, after, title):
    print(title)
    diff = np.where(before == after, '.', before-after)
    for row in diff:
         print("".join(map(str,row)))
    print()

for i, example in enumerate(task['train']):
  show_grid(np.array(example['input']), "Example " + str(i) + " input")
  show_grid(np.array(example['output']), "Example " + str(i) + " output")
  predicted = transform(np.array(example['input']))
  show_grid(predicted, "Example " + str(i) + " predicted")
  show_diff(np.array(example['output']), predicted, "Example " + str(i) + " diff")