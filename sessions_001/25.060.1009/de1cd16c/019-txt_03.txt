import numpy as np

def analyze_example(example_number, input_grid, expected_output, predicted_output):
    grid = np.array(input_grid)
    rows, cols = grid.shape

    print(f"--- Example {example_number} ---")
    print(f"Input Grid ({rows}x{cols}):\n{grid}")
    print(f"Expected Output: {expected_output}")
    print(f"Predicted Output: {predicted_output}")

    # Find distinct colors and their bounding boxes
    unique_colors = np.unique(grid)
    print("Distinct Colors:", unique_colors)
    for color in unique_colors:
        pixels = np.argwhere(grid == color)
        if pixels.size > 0:
           min_row, min_col = np.min(pixels, axis=0)
           max_row, max_col = np.max(pixels, axis=0)
           print(f"  Color {color}: Bounding Box - Top-Left: ({min_row},{min_col}), Bottom-Right: ({max_row},{max_col}), height: {max_row - min_row + 1}, width: {max_col - min_col + 1}")

# Provide the data from the training set.
train_data = [
    {
        "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1]],
        "output": [[1]]
    },
    {
        "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2]],
        "output": [[2]]
    },
    {
        "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3]],
        "output": [[3]]
    },
    {
        "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4]],
        "output": [[4]]
    },
    {
        "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5]],
        "output": [[5]]
    }
]
def find_bottom_region_color(grid):
    # Find the last row index where any change occurs (start of the bottom region).
    rows, cols = grid.shape
    last_change_row = 0
    # Find the index where color from the border changes.
    for i in range(1,rows):
      if not np.array_equal(grid[i], grid[0]):
        last_change_row = i
        break

    if last_change_row != 0:
      return grid[last_change_row,0]
    else:
        return grid[0,0]

def transform(input_grid):
    """
    Identifies the bottom region and output its color value.
    """
    # Convert the input grid to a NumPy array for easier manipulation.
    grid = np.array(input_grid)

    # Find the color of the bottom region
    bottom_color = find_bottom_region_color(grid)

    # Create a 1x1 output grid with the identified color
    output_grid = np.array([[bottom_color]])

    return output_grid
for i, example in enumerate(train_data):
    predicted_output = transform(example["input"])
    analyze_example(i + 1, example["input"], example["output"], predicted_output.tolist())