{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Maroon Rectangles:** Locate all rectangular objects of color 9 (maroon) in the input grid.\n2.  **Create Green Outline:** For each identified maroon rectangle, create a 1-pixel thick outline of color 3 (green) around it. The outline expands the rectangle by one cell in all directions (up, down, left, right).\n3.  **Create Blue Infill:** The fill color is 1 (blue).\n    *   It fills under the area defined by the green outline, on the bottom\n    *   The infill area has the width of the green outline.\n    *   The blue infill extends all the way down to the bottom of the output.\n    *   If maroon is in the top two rows, create an infill block the width of the green outline all the way up to the top.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, color):\n    # Find all objects of a specific color in the grid.\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n\n    def dfs(row, col):\n        # Depth-first search to find contiguous regions of the same color.\n        if (row < 0 or row >= grid.shape[0] or col < 0 or col >= grid.shape[1] or\n                visited[row, col] or grid[row, col] != color):\n            return []\n\n        visited[row, col] = True\n        region = [(row, col)]\n\n        region.extend(dfs(row + 1, col))\n        region.extend(dfs(row - 1, col))\n        region.extend(dfs(row, col + 1))\n        region.extend(dfs(row, col - 1))\n        return region\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] == color and not visited[row, col]:\n                region = dfs(row, col)\n                # Approximate a rectangle.\n                if region:\n                  min_row = min(r for r, _ in region)\n                  max_row = max(r for r, _ in region)\n                  min_col = min(c for _, c in region)\n                  max_col = max(c for _, c in region)\n\n                  objects.append(((min_row, min_col), (max_row, max_col)))\n    return objects\n\ndef create_outline(output_grid, top_left, bottom_right, color):\n    # Create a 1-pixel thick outline around the specified rectangle.\n    min_row, min_col = top_left\n    max_row, max_col = bottom_right\n\n    for r in range(min_row - 1, max_row + 2):\n        for c in range(min_col - 1, max_col + 2):\n            if (0 <= r < output_grid.shape[0] and 0 <= c < output_grid.shape[1] and\n                (r == min_row - 1 or r == max_row + 1 or c == min_col - 1 or c == max_col + 1)):\n                output_grid[r, c] = color\n\ndef create_infill(output_grid, top_left, bottom_right, color):\n    # Create a rectangular infill below (and optionally above) the outlined object.\n    min_row, min_col = top_left\n    max_row, max_col = bottom_right\n\n    # Infill below\n    for r in range(max_row + 1, output_grid.shape[0]):\n        for c in range(min_col -1, max_col + 2):\n            if 0 <= r < output_grid.shape[0] and 0 <= c < output_grid.shape[1]:\n                output_grid[r,c] = color\n    # Infill above if in top two rows.\n    if min_row <= 2:\n        for r in range(0, min_row -1):\n             for c in range(min_col -1, max_col + 2):\n                if 0 <= r < output_grid.shape[0] and 0 <= c < output_grid.shape[1]:\n                    output_grid[r,c] = color\n\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.zeros_like(input_grid)\n\n    # Find maroon rectangles.\n    maroon_objects = find_objects(input_grid, 9)\n\n    # Apply transformations for each maroon rectangle.\n    for top_left, bottom_right in maroon_objects:\n      # Create green outline.\n      create_outline(output_grid, top_left, bottom_right, 3)\n\n    for top_left, bottom_right in maroon_objects:\n\n      #create blue infill based upon outline\n      create_infill(output_grid, top_left, bottom_right, 1)\n\n    #copy existing pixels - all of them\n    for r in range(input_grid.shape[0]):\n      for c in range(input_grid.shape[1]):\n        if output_grid[r,c] == 0 and input_grid[r,c] == 9:\n          output_grid[r,c] = 9\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8465,
    "candidates_token_count": 1243,
    "total_token_count": 9708,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 12.951858,
  "response_file": "002-response.json"
}