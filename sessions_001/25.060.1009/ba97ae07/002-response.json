{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation rule identifies a vertical and a horizontal line within the input grid.\nIt then replaces the color of the cell where these lines intersect with the color of the vertical line, but only within the horizontal line.\n\"\"\"\n\nimport numpy as np\n\ndef find_line(grid, direction):\n    \"\"\"\n    Finds a horizontal or vertical line in the grid.\n    direction: 'horizontal' or 'vertical'\n    \"\"\"\n    if direction == 'horizontal':\n        for r_idx, row in enumerate(grid):\n            unique_colors = np.unique(row)\n            for color in unique_colors:\n                if color != 0 and np.all(row[row != 0] == color):\n                    return r_idx, color\n    elif direction == 'vertical':\n        for c_idx in range(grid.shape[1]):\n            col = grid[:, c_idx]\n            unique_colors = np.unique(col)\n            for color in unique_colors:\n                if color != 0 and np.all(col[col != 0] == color):\n                    return c_idx, color\n    return None, None\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n    \n    # Find the horizontal and vertical lines\n    h_row_idx, h_color = find_line(input_grid, 'horizontal')\n    v_col_idx, v_color = find_line(input_grid, 'vertical')\n\n    # check if h_row_idx and v_col_idx exist before proceeding.\n    if h_row_idx is not None and v_col_idx is not None:      \n        # Apply transformation: replace color at intersection within horizontal line\n        output_grid[h_row_idx, v_col_idx] = v_color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5374,
    "candidates_token_count": 428,
    "total_token_count": 5802,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 5.573089,
  "response_file": "002-response.json"
}