import numpy as np

def check_output(expected_output_grid, generated_output_grid):
    """
    Compares the expected output grid with the generated output grid.
    Returns True if they are identical, False otherwise.
    """
    return np.array_equal(expected_output_grid, generated_output_grid)
    

def calculate_metrics(input_grid, expected_output_grid, generated_output_grid):
    """
    Calculates metrics to compare the input, expected output, and generated output.

    Args:
        input_grid: The input grid as a NumPy array.
        expected_output_grid: The expected output grid as a NumPy array.
        generated_output_grid: The output grid generated by the transform function.

    Returns:
        A dictionary containing the metrics.
    """

    correct = check_output(expected_output_grid, generated_output_grid)
    input_height, input_width = input_grid.shape
    expected_output_height, expected_output_width = expected_output_grid.shape
    generated_output_height, generated_output_width = generated_output_grid.shape

    metrics = {
        "correct": correct,
        "input_shape": (input_height, input_width),
        "expected_output_shape": (expected_output_height, expected_output_width),
        "generated_output_shape": (generated_output_height, generated_output_width),
        "input_colors": np.unique(input_grid).tolist(),
        "expected_output_colors": np.unique(expected_output_grid).tolist(),
        "generated_output_colors": np.unique(generated_output_grid).tolist()
    }

    return metrics