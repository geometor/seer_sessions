import numpy as np

def get_neighbors(grid, row, col, diagonal = False):
    """Gets the valid neighbors of a cell in the grid."""
    rows, cols = grid.shape
    neighbors = []
    deltas = [(-1, 0), (1, 0), (0, -1), (0, 1)]
    if diagonal:
      deltas = deltas + [(-1, -1), (-1, 1), (1, -1), (1, 1)]
    for dr, dc in deltas:  # Up, Down, Left, Right
        new_row, new_col = row + dr, col + dc
        if 0 <= new_row < rows and 0 <= new_col < cols:
            neighbors.append((new_row, new_col))
    return neighbors

def transform(input_grid):
    """Transforms the input grid according to the described rule."""
    output_grid = np.copy(input_grid)
    rows, cols = input_grid.shape

    # Find all blue pixels
    blue_pixels = [(r, c) for r in range(rows) for c in range(cols) if input_grid[r, c] == 1]

    for r, c in blue_pixels:
        neighbors = get_neighbors(input_grid, r, c)
        adjacent_blues = []
        for nr, nc in neighbors:
          if input_grid[nr,nc] == 1:
            adjacent_blues.append( (nr, nc) )

        if len(adjacent_blues) > 0:
            output_grid[r,c] = 8
            for nr, nc in adjacent_blues:
              output_grid[nr, nc] = 8
        else:
          #if no adjacent, then we add azure pixels
          for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            new_row, new_col = r + dr, c + dc
            if 0 <= new_row < rows and 0 <= new_col < cols and input_grid[new_row,new_col] == 0:
                output_grid[new_row, new_col] = 8
    return output_grid

def analyze_example(input, expected_output, calculated_output):
    input_grid = np.array(input)
    expected_grid = np.array(expected_output)
    calculated_grid = np.array(calculated_output)

    blue_pixels_input = np.sum(input_grid == 1)
    azure_pixels_input = np.sum(input_grid == 8)
    blue_pixels_expected = np.sum(expected_grid == 1)
    azure_pixels_expected = np.sum(expected_grid == 8)
    blue_pixels_calculated = np.sum(calculated_grid == 1)
    azure_pixels_calculated = np.sum(calculated_grid == 8)

    print(f"  Input: Blue={blue_pixels_input}, Azure={azure_pixels_input}")
    print(f"  Expected: Blue={blue_pixels_expected}, Azure={azure_pixels_expected}")
    print(f"  Calculated: Blue={blue_pixels_calculated}, Azure={azure_pixels_calculated}")

    match = np.array_equal(expected_grid, calculated_grid)
    print(f"{'Correct' if match else 'Incorrect Transformation'}")

    if not match:

      diff = expected_grid - calculated_grid

      print("difference:")
      print(diff)

      for r in range(diff.shape[0]):
        for c in range(diff.shape[1]):
          if diff[r,c] != 0:
            neighbors_expected = get_neighbors(expected_grid, r, c, True)
            neighbor_values_expected = [expected_grid[nr,nc] for nr,nc in neighbors_expected]
            neighbors_input = get_neighbors(input_grid, r, c, True)
            neighbor_values_input = [input_grid[nr,nc] for nr,nc in neighbors_input]

            print(f"error at [{r}][{c}]")
            print(f"input: value: {input_grid[r,c]} neighbors: {neighbor_values_input}")
            print(f"expected: value: {expected_grid[r,c]} neighbors: {neighbor_values_expected}")

example_pairs = [
([
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
],
[
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 8, 0, 0, 0, 0, 0],
    [0, 0, 0, 8, 1, 8, 0, 0, 0, 0],
    [0, 0, 0, 0, 8, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
]),
([
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 1, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0]
],
[
    [0, 0, 8, 0, 0, 0, 0, 0],
    [0, 8, 1, 8, 0, 0, 0, 0],
    [0, 0, 8, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 8, 0, 0, 0],
    [0, 0, 0, 0, 8, 8, 1, 8],
    [0, 0, 0, 0, 0, 0, 8, 0],
    [0, 0, 0, 0, 0, 0, 0, 0]
]),
([
    [1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1]
],
[
    [8, 0, 0, 0, 0, 0, 0, 0, 8],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [8, 0, 0, 0, 0, 0, 0, 0, 8]
]),
([
    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 2, 2]
],
[
    [0, 0, 0, 0, 0, 0, 8, 1, 8, 0],
    [0, 0, 0, 0, 0, 8, 1, 8, 0, 0],
    [0, 0, 0, 0, 0, 0, 8, 0, 0, 0],
    [0, 8, 1, 8, 0, 0, 0, 0, 0, 0],
    [0, 0, 8, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [8, 1, 8, 0, 0, 0, 0, 0, 0, 0],
    [0, 8, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 2, 2]
])
]

for i, (input, expected) in enumerate(example_pairs):
    calculated = transform(input)
    print(f"Example {i + 1}:")
    analyze_example(input, expected, calculated)
    print("-" * 20)