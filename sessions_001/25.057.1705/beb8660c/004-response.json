{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid by identifying horizontal segments of non-white pixels in each row, consolidating segments of the same color within a row, and right-aligning the resulting segments in the output grid, maintaining the original row order.\n\"\"\"\n\nimport numpy as np\n\ndef find_segments(grid):\n    \"\"\"Finds all horizontal segments of non-white pixels in the grid.\"\"\"\n    segments = []\n    for row_index, row in enumerate(grid):\n        col_index = 0\n        while col_index < len(row):\n            if row[col_index] != 0:\n                color = row[col_index]\n                start_col = col_index\n                length = 0\n                while col_index < len(row) and row[col_index] == color:\n                    length += 1\n                    col_index += 1\n                segments.append({'color': color, 'length': length, 'row': row_index, 'start_col': start_col})\n            else:\n                col_index += 1\n    return segments\n\ndef consolidate_segments(segments):\n    \"\"\"Consolidates segments of the same color within each row.\"\"\"\n    consolidated = {}\n    for segment in segments:\n        row = segment['row']\n        color = segment['color']\n        if (row, color) not in consolidated:\n            consolidated[(row, color)] = 0\n        consolidated[(row, color)] += segment['length']\n    return consolidated\n\ndef transform(input_grid):\n    # Initialize output grid\n    output_grid = np.zeros_like(input_grid)\n    grid_height, grid_width = input_grid.shape\n\n    # Find all horizontal segments\n    segments = find_segments(input_grid)\n\n    # Consolidate segments by row and color\n    consolidated_segments = consolidate_segments(segments)\n\n    # Place consolidated segments in the output grid\n    for (row, color), length in consolidated_segments.items():\n        start_col = grid_width - length\n        output_grid[row, start_col:start_col + length] = color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2909,
    "candidates_token_count": 487,
    "total_token_count": 3396,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.370765,
  "response_file": "004-response.json"
}