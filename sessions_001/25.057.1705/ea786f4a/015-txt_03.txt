import numpy as np

def describe_grid(grid):
    rows, cols = grid.shape
    description = f"Grid Size: {rows}x{cols}\\n"
    unique, counts = np.unique(grid, return_counts=True)
    color_counts = dict(zip(unique, counts))
    description += "Color Counts: " + str(color_counts) + "\\n"

    white_pixels = np.where(grid == 0)
    if len(white_pixels[0]) > 0:
      for r, c in zip(white_pixels[0], white_pixels[1]):
          description += f"White Pixel at: ({r}, {c})\\n"
    else:
      description += "No White Pixels Found\\n"

    return description

def compare_grids(grid1, grid2):
    if grid1.shape != grid2.shape:
        return "Grids have different shapes."
    else:
        return np.array_equal(grid1, grid2)

# Load the training examples
examples = task_data['train']
reports = []

for i, ex in enumerate(examples):
    input_grid = np.array(ex['input'])
    output_grid = np.array(ex['output'])

    report = f"Example {i+1}:\\n"
    report += "Input Grid:\\n"
    report += describe_grid(input_grid)
    report += "\\nOutput Grid:\\n"
    report += describe_grid(output_grid)
    report += "\\nComparison:\\n"
    report += str(compare_grids(output_grid, transform(input_grid)))

    reports.append(report)

print("\\n---\\n".join(reports))