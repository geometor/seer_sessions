{
  "response_report": [
    {
      "response_file": "001-response.json",
      "token_usage": {
        "prompt": 1913,
        "candidates": 660,
        "total": 2573,
        "cached": 0
      },
      "response_time": 9.364577
    },
    {
      "response_file": "002-response.json",
      "token_usage": {
        "prompt": 2435,
        "candidates": 217,
        "total": 2652,
        "cached": 0
      },
      "response_time": 3.218697
    },
    {
      "response_file": "003-response.json",
      "token_usage": {
        "prompt": 1468,
        "candidates": 3379,
        "total": 4847,
        "cached": 0
      },
      "response_time": 29.114025
    },
    {
      "response_file": "004-response.json",
      "token_usage": {
        "prompt": 4330,
        "candidates": 890,
        "total": 5220,
        "cached": 0
      },
      "response_time": 11.659893
    },
    {
      "response_file": "005-response.json",
      "token_usage": {
        "prompt": 5014,
        "candidates": 216,
        "total": 5230,
        "cached": 0
      },
      "response_time": 2.94004
    },
    {
      "response_file": "006-response.json",
      "token_usage": {
        "prompt": 4647,
        "candidates": 262,
        "total": 4909,
        "cached": 0
      },
      "response_time": 3.508915
    },
    {
      "response_file": "007-response.json",
      "token_usage": {
        "prompt": 1913,
        "candidates": 616,
        "total": 2529,
        "cached": 0
      },
      "response_time": 9.429525
    },
    {
      "response_file": "008-response.json",
      "token_usage": {
        "prompt": 2391,
        "candidates": 224,
        "total": 2615,
        "cached": 0
      },
      "response_time": 2.879009
    },
    {
      "response_file": "009-response.json",
      "token_usage": {
        "prompt": 1475,
        "candidates": 1898,
        "total": 3373,
        "cached": 0
      },
      "response_time": 18.328888
    },
    {
      "response_file": "010-response.json",
      "token_usage": {
        "prompt": 1425,
        "candidates": 1612,
        "total": 3037,
        "cached": 0
      },
      "response_time": 20.680664
    },
    {
      "response_file": "011-response.json",
      "token_usage": {
        "prompt": 2834,
        "candidates": 364,
        "total": 3198,
        "cached": 0
      },
      "response_time": 5.007695
    },
    {
      "response_file": "012-response.json",
      "token_usage": {
        "prompt": 3172,
        "candidates": 297,
        "total": 3469,
        "cached": 0
      },
      "response_time": 3.529896
    },
    {
      "response_file": "013-response.json",
      "token_usage": {
        "prompt": 1913,
        "candidates": 447,
        "total": 2360,
        "cached": 0
      },
      "response_time": 8.09379
    },
    {
      "response_file": "014-response.json",
      "token_usage": {
        "prompt": 2222,
        "candidates": 312,
        "total": 2534,
        "cached": 0
      },
      "response_time": 4.856319
    },
    {
      "response_file": "015-response.json",
      "token_usage": {
        "prompt": 1564,
        "candidates": 1174,
        "total": 2738,
        "cached": 0
      },
      "response_time": 12.584737
    },
    {
      "response_file": "016-response.json",
      "token_usage": {
        "prompt": 2535,
        "candidates": 1257,
        "total": 3792,
        "cached": 0
      },
      "response_time": 14.513131
    },
    {
      "response_file": "017-response.json",
      "token_usage": {
        "prompt": 2508,
        "candidates": 2349,
        "total": 4857,
        "cached": 0
      },
      "response_time": 27.899585
    },
    {
      "response_file": "018-response.json",
      "token_usage": {
        "prompt": 4662,
        "candidates": 1565,
        "total": 6227,
        "cached": 0
      },
      "response_time": 17.67277
    }
  ],
  "test_report": {
    "002-py_01-train": [
      {
        "example": 1,
        "input": "2 8 3 0 0 0 0\n8 3 0 0 0 0 0\n3 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0",
        "expected_output": "2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2",
        "transformed_output": "2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2",
        "match": true,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": true,
        "pixels_off": 0,
        "percent_correct": 100.0
      },
      {
        "example": 2,
        "input": "0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 1\n0 0 0 0 0 1 2\n0 0 0 0 1 2 4\n0 0 0 1 2 4 0\n0 0 1 2 4 0 0",
        "expected_output": "2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2",
        "transformed_output": "2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 32,
        "percent_correct": 34.69387755102041
      },
      {
        "example": 3,
        "input": "0 0 0 0 8 3 0\n0 0 0 8 3 0 0\n0 0 8 3 0 0 0\n0 8 3 0 0 0 4\n8 3 0 0 0 4 0\n3 0 0 0 4 0 0\n0 0 0 4 0 0 0",
        "expected_output": "4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4",
        "transformed_output": "2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 17,
        "percent_correct": 65.3061224489796
      }
    ],
    "003-py_02-train": [
      {
        "code_execution_error": "transform function not found"
      }
    ],
    "005-py_03-train": [
      {
        "example": 1,
        "input": "2 8 3 0 0 0 0\n8 3 0 0 0 0 0\n3 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0",
        "expected_output": "2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2",
        "transformed_output": "2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2",
        "match": true,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": true,
        "pixels_off": 0,
        "percent_correct": 100.0
      },
      {
        "example": 2,
        "input": "0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 1\n0 0 0 0 0 1 2\n0 0 0 0 1 2 4\n0 0 0 1 2 4 0\n0 0 1 2 4 0 0",
        "expected_output": "2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2",
        "transformed_output": "2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 32,
        "percent_correct": 34.69387755102041
      },
      {
        "example": 3,
        "input": "0 0 0 0 8 3 0\n0 0 0 8 3 0 0\n0 0 8 3 0 0 0\n0 8 3 0 0 0 4\n8 3 0 0 0 4 0\n3 0 0 0 4 0 0\n0 0 0 4 0 0 0",
        "expected_output": "4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4",
        "transformed_output": "2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 17,
        "percent_correct": 65.3061224489796
      }
    ],
    "006-py_04-train": [
      {
        "example": 1,
        "input": "2 8 3 0 0 0 0\n8 3 0 0 0 0 0\n3 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0",
        "expected_output": "2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2",
        "transformed_output": "2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2",
        "match": true,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": true,
        "pixels_off": 0,
        "percent_correct": 100.0
      },
      {
        "example": 2,
        "input": "0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 1\n0 0 0 0 0 1 2\n0 0 0 0 1 2 4\n0 0 0 1 2 4 0\n0 0 1 2 4 0 0",
        "expected_output": "2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2",
        "transformed_output": "2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 1\n2 8 3 2 8 1 2\n8 3 2 8 1 2 4\n3 2 8 1 2 4 3\n2 8 1 2 4 3 2",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 24,
        "percent_correct": 51.02040816326531
      },
      {
        "example": 3,
        "input": "0 0 0 0 8 3 0\n0 0 0 8 3 0 0\n0 0 8 3 0 0 0\n0 8 3 0 0 0 4\n8 3 0 0 0 4 0\n3 0 0 0 4 0 0\n0 0 0 4 0 0 0",
        "expected_output": "4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4",
        "transformed_output": "2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 4\n8 3 2 8 3 4 8\n3 2 8 3 4 8 3\n2 8 3 4 8 3 2",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 13,
        "percent_correct": 73.46938775510205
      }
    ],
    "008-py_05-train": [
      {
        "example": 1,
        "input": "2 8 3 0 0 0 0\n8 3 0 0 0 0 0\n3 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0",
        "expected_output": "2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2",
        "transformed_output": "2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 32,
        "percent_correct": 34.69387755102041
      },
      {
        "example": 2,
        "input": "0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 1\n0 0 0 0 0 1 2\n0 0 0 0 1 2 4\n0 0 0 1 2 4 0\n0 0 1 2 4 0 0",
        "expected_output": "2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2",
        "transformed_output": "2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2",
        "match": true,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": true,
        "pixels_off": 0,
        "percent_correct": 100.0
      },
      {
        "example": 3,
        "input": "0 0 0 0 8 3 0\n0 0 0 8 3 0 0\n0 0 8 3 0 0 0\n0 8 3 0 0 0 4\n8 3 0 0 0 4 0\n3 0 0 0 4 0 0\n0 0 0 4 0 0 0",
        "expected_output": "4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4",
        "transformed_output": "2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 49,
        "percent_correct": 0.0
      }
    ],
    "009-py_06-train": [
      {
        "code_execution_error": "transform function not found"
      }
    ],
    "009-py_07-train": [
      {
        "code_execution_error": "transform function not found"
      }
    ],
    "009-py_08-train": [
      {
        "code_execution_error": "transform function not found"
      }
    ],
    "011-py_09-train": [
      {
        "example": 1,
        "input": "2 8 3 0 0 0 0\n8 3 0 0 0 0 0\n3 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0",
        "expected_output": "2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2",
        "transformed_output": "2 8 3 0 0 0 0\n8 3 0 0 0 0 0\n3 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 43,
        "percent_correct": 12.244897959183673
      },
      {
        "example": 2,
        "input": "0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 1\n0 0 0 0 0 1 2\n0 0 0 0 1 2 4\n0 0 0 1 2 4 0\n0 0 1 2 4 0 0",
        "expected_output": "2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2",
        "transformed_output": "0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 4\n0 0 0 0 0 2 2\n0 0 0 0 1 2 4\n0 0 0 1 2 4 0\n0 0 1 2 4 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 39,
        "percent_correct": 20.408163265306122
      },
      {
        "example": 3,
        "input": "0 0 0 0 8 3 0\n0 0 0 8 3 0 0\n0 0 8 3 0 0 0\n0 8 3 0 0 0 4\n8 3 0 0 0 4 0\n3 0 0 0 4 0 0\n0 0 0 4 0 0 0",
        "expected_output": "4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4",
        "transformed_output": "0 0 0 0 8 3 0\n0 0 0 8 3 0 0\n0 0 8 3 0 0 0\n0 8 3 0 0 0 4\n8 3 0 0 0 4 0\n3 0 0 0 4 0 0\n0 0 0 4 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 34,
        "percent_correct": 30.612244897959183
      }
    ],
    "012-py_10-train": [
      {
        "example": 1,
        "input": "2 8 3 0 0 0 0\n8 3 0 0 0 0 0\n3 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0",
        "expected_output": "2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2",
        "transformed_output": "2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 32,
        "percent_correct": 34.69387755102041
      },
      {
        "example": 2,
        "input": "0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 1\n0 0 0 0 0 1 2\n0 0 0 0 1 2 4\n0 0 0 1 2 4 0\n0 0 1 2 4 0 0",
        "expected_output": "2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2",
        "transformed_output": "2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2",
        "match": true,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": true,
        "pixels_off": 0,
        "percent_correct": 100.0
      },
      {
        "example": 3,
        "input": "0 0 0 0 8 3 0\n0 0 0 8 3 0 0\n0 0 8 3 0 0 0\n0 8 3 0 0 0 4\n8 3 0 0 0 4 0\n3 0 0 0 4 0 0\n0 0 0 4 0 0 0",
        "expected_output": "4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4",
        "transformed_output": "2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 49,
        "percent_correct": 0.0
      }
    ],
    "014-py_11-train": [
      {
        "example": 1,
        "input": "2 8 3 0 0 0 0\n8 3 0 0 0 0 0\n3 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0",
        "expected_output": "2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2",
        "transformed_output": "2 8 3 8 3 3 2\n8 3 8 3 3 2 8\n3 8 3 3 2 8 3\n8 3 3 2 8 3 8\n3 3 2 8 3 8 3\n3 2 8 3 8 3 3\n2 8 3 8 3 3 2",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 16,
        "percent_correct": 67.3469387755102
      },
      {
        "example": 2,
        "input": "0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 1\n0 0 0 0 0 1 2\n0 0 0 0 1 2 4\n0 0 0 1 2 4 0\n0 0 1 2 4 0 0",
        "expected_output": "2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2",
        "transformed_output": "1 1 2 1 2 4 1\n1 2 1 2 4 1 2\n2 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 49,
        "percent_correct": 0.0
      },
      {
        "example": 3,
        "input": "0 0 0 0 8 3 0\n0 0 0 8 3 0 0\n0 0 8 3 0 0 0\n0 8 3 0 0 0 4\n8 3 0 0 0 4 0\n3 0 0 0 4 0 0\n0 0 0 4 0 0 0",
        "expected_output": "4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4",
        "transformed_output": "8 3 8 3 8 3 8\n3 8 3 8 3 8 3\n8 3 8 3 8 3 4\n3 8 3 8 3 4 8\n8 3 8 3 4 8 3\n3 8 3 4 8 3 4\n8 3 4 8 3 4 3",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 38,
        "percent_correct": 22.448979591836736
      }
    ],
    "016-py_12-train": [
      {
        "example": 1,
        "input": "2 8 3 0 0 0 0\n8 3 0 0 0 0 0\n3 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0",
        "expected_output": "2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2",
        "transformed_output": "2 8 3 8 3 3 2\n8 3 8 3 3 2 8\n3 8 3 3 2 8 3\n8 3 3 2 8 3 8\n3 3 2 8 3 8 3\n3 2 8 3 8 3 3\n2 8 3 8 3 3 2",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 16,
        "percent_correct": 67.3469387755102
      },
      {
        "example": 2,
        "input": "0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 1\n0 0 0 0 0 1 2\n0 0 0 0 1 2 4\n0 0 0 1 2 4 0\n0 0 1 2 4 0 0",
        "expected_output": "2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2",
        "transformed_output": "1 1 2 1 2 4 1 2 4 1 2 4\n1 1 2 1 2 4 1 2 4 1 2 4\n1 1 2 1 2 4 1 2 4 1 2 4\n1 1 2 1 2 4 1 2 4 1 2 4\n1 1 2 1 2 4 1 2 4 1 2 4\n1 1 2 1 2 4 1 2 4 1 2 4\n1 1 2 1 2 4 1 2 4 1 2 4",
        "match": false,
        "size_correct": false,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": "N/A",
        "percent_correct": "N/A"
      },
      {
        "example": 3,
        "input": "0 0 0 0 8 3 0\n0 0 0 8 3 0 0\n0 0 8 3 0 0 0\n0 8 3 0 0 0 4\n8 3 0 0 0 4 0\n3 0 0 0 4 0 0\n0 0 0 4 0 0 0",
        "expected_output": "4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4",
        "transformed_output": "8 3 8 3 8 3 8\n3 8 3 8 3 8 3\n8 3 8 3 8 3 4\n3 8 3 8 3 4 8\n8 3 8 3 4 8 3\n3 8 3 4 8 3 4\n8 3 4 8 3 4 3",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 38,
        "percent_correct": 22.448979591836736
      }
    ],
    "017-py_13-train": [
      {
        "code_execution_error": "transform function not found"
      }
    ],
    "018-py_14-train": [
      {
        "example": 1,
        "input": "2 8 3 0 0 0 0\n8 3 0 0 0 0 0\n3 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0",
        "expected_output": "2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2\n8 3 2 8 3 2 8\n3 2 8 3 2 8 3\n2 8 3 2 8 3 2",
        "transformed_output": "2 8 3 0 0 0 0\n8 3 0 0 0 0 0\n3 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 43,
        "percent_correct": 12.244897959183673
      },
      {
        "example": 2,
        "input": "0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 1\n0 0 0 0 0 1 2\n0 0 0 0 1 2 4\n0 0 0 1 2 4 0\n0 0 1 2 4 0 0",
        "expected_output": "2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2\n4 1 2 4 1 2 4\n1 2 4 1 2 4 1\n2 4 1 2 4 1 2",
        "transformed_output": "0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 1\n0 0 0 0 0 1 2\n0 0 0 0 1 2 4\n0 0 0 1 2 4 0\n0 0 1 2 4 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 37,
        "percent_correct": 24.489795918367346
      },
      {
        "example": 3,
        "input": "0 0 0 0 8 3 0\n0 0 0 8 3 0 0\n0 0 8 3 0 0 0\n0 8 3 0 0 0 4\n8 3 0 0 0 4 0\n3 0 0 0 4 0 0\n0 0 0 4 0 0 0",
        "expected_output": "4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4\n8 3 4 8 3 4 8\n3 4 8 3 4 8 3\n4 8 3 4 8 3 4",
        "transformed_output": "0 0 0 0 8 3 0\n0 0 0 8 3 0 0\n0 0 8 3 0 0 0\n0 8 3 0 0 0 4\n8 3 0 0 0 4 0\n3 0 0 0 4 0 0\n0 0 0 4 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 34,
        "percent_correct": 30.612244897959183
      }
    ]
  },
  "best_train_results": {
    "passed": 1,
    "total": 3
  },
  "best_test_results": {
    "passed": 0,
    "total": 0
  },
  "test_solved": false
}