observations:
  - example_1:
      input:
        shape: [4, 5]
        unique_values: [1, 4]
        first_column: [4, 4, 4, 1]
      output:
        shape: [4, 4]
        unique_values: [1, 4, 9]
        first_column: [1, 9, 9, 4]
  - example_2:
      input:
        shape: [4, 7]
        unique_values: [0, 4]
        first_column: [4, 4, 4, 0]
      output:
        shape: [4, 4]
        unique_values: [0, 4, 9]
        first_column: [0, 9, 9, 4]
  - example_3:
      input:
        shape: [4, 4]
        unique_values: [4, 5]
        first_column: [4, 5, 4, 4]
      output:
        shape: [4, 4]
        unique_values: [4, 5, 9]
        first_column: [5, 9, 9, 4]
  - example_4:
      input:
        shape: [4, 5]
        unique_values: [3, 4, 6]
        first_column: [6, 4, 4, 3]
      output:
        shape: [4, 4]
        unique_values: [3, 4, 6, 9]
        first_column: [6, 3, 9, 4]
  - example_5:
      input:
        shape: [6, 6]
        unique_values: [2, 4, 8]
        first_column: [2, 4, 4, 4, 4, 8]
      output:
        shape: [4, 4]
        unique_values: [2, 4, 8, 9]
        first_column: [2, 8, 9, 4]
  - general:
    - consistent_output_shape: [4, 4]
    - output_always_contains: [4,9] #yellow and maroon
    - input_first_column_relation: "The first column of the output is composed of, in order: any non-yellow pixels from the first column of the input, followed by the required number of 9s to make it length match the number of non-yellow pixels from the input first column, and then filled up with yellow to output size"
