{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Background:** Initialize the output grid with a white background.\n2.  **Gray Line:** Copy the horizontal gray line at row index 3 from the input grid to the output grid.\n3.  **Identify Regions:** Find all connected regions (contiguous blocks of pixels) of the same color in the input grid, *excluding* gray and white pixels.\n4.  **Transform Regions:** For each identified region:\n    *   Find its bounding box (the smallest rectangle containing all pixels of the region).\n    *   Determine the output color based on the region's color: blue becomes azure, red becomes maroon, green becomes orange, yellow becomes magenta.\n    *   In the output grid, replace the entire bounding box area with the corresponding output color.\n5. **Output:** Return the modified output grid.\n\"\"\"\n\nimport numpy as np\nfrom scipy.ndimage import label, find_objects\n\nCOLOR_MAP = {\n    0: (238, 238, 238),  # white\n    1: (30, 147, 255),  # blue\n    2: (220, 50, 40),  # red\n    3: (79, 204, 48),  # green\n    4: (230, 200, 0),  # yellow\n    5: (85, 85, 85),  # gray\n    6: (229, 58, 163),  # magenta\n    7: (230, 120, 20),  # orange\n    8: (135, 216, 241),  # azure\n    9: (146, 18, 49),  # maroon\n}\n\nOUTPUT_COLOR_MAPPING = {\n    1: 8,  # blue -> azure\n    2: 9,  # red -> maroon\n    3: 7,  # green -> orange\n    4: 6,  # yellow -> magenta\n}\n\ndef get_connected_regions(grid):\n    \"\"\"\n    Finds connected regions (blobs) of the same color, excluding gray and white.\n    Returns a list of bounding box tuples: (row_start, row_end, col_start, col_end, color)\n    \"\"\"\n    # Create a mask for non-gray and non-white pixels\n    filtered_grid = np.where((grid != 5) & (grid != 0), grid, 0)\n    # Label connected regions in the filtered grid\n    labeled_grid, num_labels = label(filtered_grid)\n    # Find the bounding boxes of the labeled regions\n    regions = find_objects(labeled_grid)\n\n    region_data = []\n    for i, region_slice in enumerate(regions):\n        if region_slice is not None:\n            # Extract bounding box coordinates\n            row_start, row_end = region_slice[0].start, region_slice[0].stop\n            col_start, col_end = region_slice[1].start, region_slice[1].stop\n            # Extract a representative color from the region (assuming homogeneity)\n            color = grid[row_start, col_start]\n            region_data.append((row_start, row_end, col_start, col_end, color))\n\n    return region_data\n\ndef transform(input_grid):\n    # Initialize output_grid with white background\n    output_grid = np.full_like(input_grid, 0)\n\n    # Preserve the gray line\n    output_grid[3, :] = input_grid[3, :]\n\n    # Get connected regions\n    regions = get_connected_regions(input_grid)\n\n    # Transform each region\n    for row_start, row_end, col_start, col_end, color in regions:\n        output_color = OUTPUT_COLOR_MAPPING.get(color)\n        if output_color:\n            # Fill the bounding box with the transformed color\n            output_grid[row_start:row_end, col_start:col_end] = output_color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7294,
    "candidates_token_count": 953,
    "total_token_count": 8247,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.834923,
  "response_file": "024-response.json"
}