import numpy as np

def analyze_pairs(pairs):
    analysis = []
    for pair_num, (input_grid, expected_output, actual_output) in enumerate(pairs):
        input_grid = np.array(input_grid)
        expected_output = np.array(expected_output)
        
        # Find unique values in input and output
        input_unique = np.unique(input_grid)
        output_unique = np.unique(expected_output)

        # Find differences
        diff = expected_output - input_grid
        unique_diff = np.unique(diff)

        mismatches = np.sum(expected_output != actual_output)

        analysis.append({
            "pair_number": pair_num + 1,
            "input_shape": input_grid.shape,
            "output_shape": expected_output.shape,
            "input_unique_values": input_unique.tolist(),
            "output_unique_values": output_unique.tolist(),
            "unique_differences": unique_diff.tolist(),
            "mismatches": mismatches,
            "notes": ""
        })
        
    for a in analysis:
       print(a)

pairs = [
    (
        [[1, 1, 1, 5, 2, 2, 2, 5, 3, 3, 3],
         [1, 1, 1, 5, 2, 2, 2, 5, 3, 3, 3],
         [1, 1, 1, 5, 2, 2, 2, 5, 3, 3, 3]],
        [[7, 7, 7, 5, 8, 8, 8, 5, 6, 6, 6],
         [7, 7, 7, 5, 8, 8, 8, 5, 6, 6, 6],
         [7, 7, 7, 5, 8, 8, 8, 5, 6, 6, 6]],
        [[7, 7, 7, 5, 7, 7, 7, 5, 7, 7, 7],
         [7, 7, 7, 5, 7, 7, 7, 5, 7, 7, 7],
         [7, 7, 7, 5, 7, 7, 7, 5, 7, 7, 7]]
    ),
    (
        [[1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0],
         [0, 1, 0, 0, 0, 5, 0, 0, 0, 0, 0],
         [0, 0, 1, 0, 0, 5, 0, 0, 0, 6, 0],
         [0, 0, 0, 1, 0, 5, 0, 0, 6, 0, 6],
         [0, 0, 0, 0, 1, 5, 0, 6, 0, 6, 0],
         [0, 0, 0, 0, 0, 5, 6, 0, 6, 0, 0],
         [0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0],
         [0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0],
         [0, 0, 4, 0, 0, 5, 0, 0, 0, 0, 0],
         [0, 4, 0, 0, 0, 5, 0, 0, 0, 0, 0],
         [4, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0]],
        [[7, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0],
         [0, 7, 0, 0, 0, 5, 0, 0, 0, 0, 0],
         [0, 0, 7, 0, 0, 5, 0, 0, 0, 8, 0],
         [0, 0, 0, 7, 0, 5, 0, 0, 8, 0, 8],
         [0, 0, 0, 0, 7, 5, 0, 8, 0, 8, 0],
         [0, 0, 0, 0, 0, 5, 8, 0, 8, 0, 0],
         [0, 0, 0, 0, 0, 5, 0, 8, 0, 0, 0],
         [0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0],
         [0, 0, 6, 0, 0, 5, 0, 0, 0, 0, 0],
         [0, 6, 0, 0, 0, 5, 0, 0, 0, 0, 0],
         [6, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0]],
        [[7, 7, 7, 5, 7, 7, 7, 5, 7, 7, 7],
         [7, 7, 7, 5, 7, 7, 7, 5, 7, 7, 7],
         [7, 7, 7, 5, 7, 7, 7, 5, 7, 7, 7],
        ]
    ),
    (
        [[0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0],
         [0, 5, 0, 0, 4, 0, 0, 5, 0, 0, 0],
         [5, 0, 0, 4, 0, 4, 5, 0, 0, 2, 0],
         [0, 0, 4, 0, 4, 0, 0, 0, 2, 0, 2],
         [0, 4, 0, 4, 0, 4, 0, 2, 0, 2, 0],
         [0, 0, 4, 0, 4, 0, 2, 0, 2, 0, 0],
         [0, 0, 5, 4, 0, 4, 0, 2, 0, 5, 0],
         [0, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0],
         [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        [[0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0],
         [0, 5, 0, 0, 7, 0, 0, 5, 0, 0, 0],
         [5, 0, 0, 7, 0, 7, 5, 0, 0, 8, 0],
         [0, 0, 7, 0, 7, 0, 0, 0, 8, 0, 8],
         [0, 7, 0, 7, 0, 7, 0, 8, 0, 8, 0],
         [0, 0, 7, 0, 7, 0, 8, 0, 8, 0, 0],
         [0, 0, 5, 7, 0, 7, 0, 8, 0, 5, 0],
         [0, 0, 0, 0, 7, 0, 0, 0, 5, 0, 0],
         [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        [[7, 7, 7, 5, 7, 7, 7, 5, 7, 7, 7],
         [7, 7, 7, 5, 7, 7, 7, 5, 7, 7, 7],
         [7, 7, 7, 5, 7, 7, 7, 5, 7, 7, 7],
        ]
    )

]

analyze_pairs(pairs)
