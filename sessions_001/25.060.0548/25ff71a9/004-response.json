{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  Identify Objects: Find the single rectangle of color other than black (0) in the input grid. A rectangle is defined as a contiguous block of pixels of the same color.\n2.  Determine Movement:** Identify the position of the rectangle within the input.\n    - if the rectangle is in the top third of input, move to the bottom third of the grid\n    - if the rectangle is in the bottom third of input, move to the center third of the grid\n    - if the rectangle is in the center third of input, move to the top third of the grid\n3.  Preserve Shape and size:** Maintain the rectangle's original dimensions (width and height) and color during the move.\n4. Clear previous location:** Set all pixels in the original location to black (color 0).\n5.  Output:** Create an output grid where the identified rectangle is in the determined location with it's original size and shape.\n\"\"\"\n\nimport numpy as np\n\ndef find_rectangle(grid):\n    \"\"\"Finds the single rectangle in the grid.\"\"\"\n    rows, cols = len(grid), len(grid[0])\n    non_zero_pixels = []\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r][c] != 0:\n                non_zero_pixels.append((r, c, grid[r][c]))\n\n    if not non_zero_pixels:\n        return None  # No rectangle found\n\n    # Check if the non-zero pixels form a rectangle\n    color = non_zero_pixels[0][2]\n    rows, cols = zip(*[(r, c) for r, c, val in non_zero_pixels if val == color])\n    min_row, max_row = min(rows), max(rows)\n    min_col, max_col = min(cols), max(cols)\n\n    # Verify contiguity and same color\n    for r in range(min_row, max_row + 1):\n        for c in range(min_col, max_col + 1):\n            if grid[r][c] != color:\n                return None  # Not a rectangle\n\n    return {\n        \"top_left\": (min_row, min_col),\n        \"bottom_right\": (max_row, max_col),\n        \"color\": color,\n        \"height\": max_row - min_row + 1,\n        \"width\": max_col - min_col + 1\n    }\ndef move_rectangle(input_grid):\n    \"\"\"Moves the rectangle according to the rules.\"\"\"\n    rectangle = find_rectangle(input_grid)\n    if rectangle is None:\n      return input_grid\n    \n    rows, cols = len(input_grid), len(input_grid[0])\n    output_grid = [[0] * cols for _ in range(rows)] #initialize to all 0\n    \n    # determine third\n    row_third = rows // 3\n    \n    # determine center row\n    center_row = rectangle['top_left'][0] + rectangle['height'] // 2\n\n    #  Determine Movement:** Identify the position of the rectangle within the input.\n    if center_row < row_third:\n      # top third - move to bottom third\n      target_row_start = rows - row_third - rectangle[\"height\"]\n      \n    elif center_row >= 2 * row_third:\n      #bottom third - move to center\n      target_row_start = row_third\n    \n    else:\n      # center third - move to top\n      target_row_start = 0\n\n    # Copy the rectangle to the new position\n    for r in range(rectangle[\"height\"]):\n        for c in range(rectangle[\"width\"]):\n            output_grid[target_row_start + r][rectangle[\"top_left\"][1] + c] = rectangle[\"color\"]\n    return output_grid\n  \n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the specified rules.\"\"\"\n    return move_rectangle(input_grid)\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8358,
    "candidates_token_count": 921,
    "total_token_count": 9279,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.213426,
  "response_file": "004-response.json"
}