{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe input grid contains a connected shape formed by blue pixels. This shape is rotated 90 degrees clockwise. The output grid's dimensions are determined by the rotated shape, and the shape is placed in the top-left corner of the output grid. The rest of the output grid is filled with white pixels.\n\"\"\"\n\nimport numpy as np\n\ndef rotate_clockwise(grid):\n    \"\"\"Rotates a grid 90 degrees clockwise.\"\"\"\n    return np.rot90(grid, k=-1)\n\ndef get_blue_shape(grid):\n    \"\"\"Extracts the connected blue shape from the grid.\"\"\"\n    blue_pixels = np.argwhere(grid == 1)\n    if blue_pixels.size == 0:\n        return np.array([[]])  # Return an empty grid\n    min_row = np.min(blue_pixels[:, 0])\n    max_row = np.max(blue_pixels[:, 0])\n    min_col = np.min(blue_pixels[:, 1])\n    max_col = np.max(blue_pixels[:, 1])\n    return grid[min_row:max_row+1, min_col:max_col+1]\n\ndef transform(input_grid):\n    # Extract the blue shape\n    blue_shape = get_blue_shape(input_grid)\n\n    # Rotate the blue shape\n    rotated_shape = rotate_clockwise(blue_shape)\n\n    # Create a new output grid filled with white, with dimensions of the rotated shape\n    output_grid = np.zeros(rotated_shape.shape, dtype=input_grid.dtype)\n\n    # Place the rotated shape in the top-left corner\n    output_grid[:rotated_shape.shape[0], :rotated_shape.shape[1]] = rotated_shape\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2745,
    "candidates_token_count": 412,
    "total_token_count": 3157,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 4.025313,
  "response_file": "024-response.json"
}