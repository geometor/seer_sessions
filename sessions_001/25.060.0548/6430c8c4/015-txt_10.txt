import numpy as np

def get_object_dimensions(grid):
    """Find the dimensions of top-left colored object."""
    rows, cols = grid.shape
    first_color = grid[0,0]
    height = 0
    width = 0

    for r in range(rows):
        if grid[r,0] == first_color:
            height+=1
        else:
            break

    for c in range(cols):
        if grid[0,c] == first_color:
            width +=1
        else:
            break
    return height, width

def report(task_examples):
    for i, example in enumerate(task_examples):
        input_grid = np.array(example['input'])
        output_grid = np.array(example['output'])
        height, width = get_object_dimensions(input_grid)
        print(f"Example {i+1}:")
        print(f"  Input Dimensions: {input_grid.shape}")
        print(f"  Output Dimensions: {output_grid.shape}")
        print(f"  Top-Left Object Dimensions: ({height}, {width})")
        output_height, output_width = output_grid.shape
        print(f"Top left object height, width correct? {height == output_height and width == output_width}")

#this is just a placeholder - need the actual task data
task_examples = [
    {'input': [[1, 1, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 7, 7, 7, 7], [0, 0, 0, 0, 7, 7, 7, 7], [0, 0, 0, 0, 7, 7, 7, 7], [0, 0, 0, 0, 7, 7, 7, 7]], 'output': [[3, 3, 3, 3], [3, 3, 3, 3], [3, 3, 3, 3], [3, 3, 3, 3]]},
    {'input': [[2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], 'output': [[3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3]]},
    {'input': [[8, 8, 8, 8, 0, 0, 0, 0], [8, 8, 8, 8, 0, 0, 0, 0], [8, 8, 8, 8, 0, 0, 0, 0], [8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 4, 4, 4, 4], [0, 0, 0, 0, 4, 4, 4, 4], [0, 0, 0, 0, 4, 4, 4, 4], [0, 0, 0, 0, 4, 4, 4, 4]], 'output': [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]},
    {'input': [[5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5]], 'output': [[3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3]]},
    {'input': [[6, 6, 6, 6], [6, 6, 6, 6], [6, 6, 6, 6], [6, 6, 6, 6]], 'output': [[3, 3, 3, 3], [3, 3, 3, 3], [3, 3, 3, 3], [3, 3, 3, 3]]}
]
report(task_examples)