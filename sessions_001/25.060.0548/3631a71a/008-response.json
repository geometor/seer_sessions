{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify and Remove the Maroon Block:** Locate the contiguous block of maroon (9) colored pixels in the input grid.  Remove all pixels within this block, setting their color to the background color (0).\n\n2.  **Column-wise Conditional Shift:** For each column, iterate through the pixels from top to bottom. If a pixel is *not* the background color (0), check if there are any empty spaces (pixels with color 0) below it *within the same column*. If empty spaces exist below, shift the pixel downward to fill the *closest* empty space.  Maintain the relative vertical order of non-background pixels within each column. This means if pixel A was above pixel B before the shift, pixel A should remain above pixel B after the shift, unless they occupy the same vertical position.\n\"\"\"\n\nimport numpy as np\n\ndef find_maroon_block(grid):\n    \"\"\"\n    Finds the contiguous block of maroon pixels using a breadth-first search.\n    \"\"\"\n    maroon_pixels = np.argwhere(grid == 9)\n    if maroon_pixels.size == 0:\n        return []\n\n    start_pixel = tuple(maroon_pixels[0])\n    block = set()\n    queue = [start_pixel]\n\n    while queue:\n        current_pixel = queue.pop(0)\n        if current_pixel in block:\n            continue\n        block.add(current_pixel)\n        row, col = current_pixel\n\n        # Check adjacent pixels (up, down, left, right)\n        neighbors = [(row - 1, col), (row + 1, col), (row, col - 1), (row, col + 1)]\n        for r, c in neighbors:\n            if 0 <= r < grid.shape[0] and 0 <= c < grid.shape[1] and grid[r, c] == 9 and (r, c) not in block:\n                queue.append((r, c))\n\n    return list(block)\n\ndef shift_pixels_down(column):\n    \"\"\"\n    Shifts non-zero pixels down to the nearest empty space within a column,\n    maintaining relative order.\n    \"\"\"\n    new_column = np.zeros_like(column)\n    non_zero_indices = np.nonzero(column)[0]\n    non_zero_values = column[non_zero_indices]\n\n    # Iterate from top to bottom\n    target_index = 0\n    for value in non_zero_values:\n        while target_index < len(new_column) and new_column[target_index] != 0:\n            target_index += 1\n        if target_index < len(new_column):\n             new_column[target_index] = value\n             target_index+=1\n\n    return new_column\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = input_grid.copy()\n\n    # Find and remove the maroon block\n    maroon_block = find_maroon_block(output_grid)\n    for row, col in maroon_block:\n        output_grid[row, col] = 0  # Set to background color\n\n    # Column-wise conditional shift\n    for col in range(output_grid.shape[1]):\n        # Extract the column\n        column = output_grid[:, col]\n\n        #Shift pixels in column\n        new_column = shift_pixels_down(column)\n        output_grid[:,col] = new_column\n\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8441,
    "candidates_token_count": 800,
    "total_token_count": 9241,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.418998,
  "response_file": "008-response.json"
}