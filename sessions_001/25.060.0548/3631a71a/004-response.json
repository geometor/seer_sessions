{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify:** Locate the large, contiguous block of maroon (9) pixels in the input grid.\n2.  **Remove:** Delete all pixels belonging to this maroon block.\n3. **Shift:** Blocks and partial blocks of the same color above the removed area are maintained at their relative locations, shifting downwards the correct number of spaces to recompact the space, only pixels that are above other pixels that are removed are shifted. All other pixels remain in their original locations.\n\"\"\"\n\nimport numpy as np\n\ndef find_maroon_block(grid):\n    # Find all maroon (9) pixels\n    maroon_pixels = np.argwhere(grid == 9)\n    if maroon_pixels.size == 0:\n        return []\n\n    # Start with the first maroon pixel\n    start_pixel = tuple(maroon_pixels[0])\n    block = set()\n    queue = [start_pixel]\n\n    while queue:\n        current_pixel = queue.pop(0)\n        if current_pixel in block:\n            continue\n        block.add(current_pixel)\n        row, col = current_pixel\n\n        # Check adjacent pixels (up, down, left, right)\n        neighbors = [(row - 1, col), (row + 1, col), (row, col - 1), (row, col + 1)]\n        for r, c in neighbors:\n            if 0 <= r < grid.shape[0] and 0 <= c < grid.shape[1] and grid[r, c] == 9 and (r, c) not in block:\n                queue.append((r, c))\n\n    return list(block)\n\ndef transform(input_grid):\n    # Create a copy of the input grid to modify\n    output_grid = input_grid.copy()\n\n    # Find the maroon block\n    maroon_block = find_maroon_block(output_grid)\n\n    # Convert the block to a NumPy array for easier manipulation\n    maroon_block_arr = np.array(maroon_block)\n    \n    # if there is no maroon block skip this step\n    if len(maroon_block_arr) != 0:\n\n        # Find the minimum and maximum row indices of the maroon block\n        min_row = np.min(maroon_block_arr[:, 0])\n        max_row = np.max(maroon_block_arr[:, 0])\n\n\n        # Remove the maroon block\n        for row, col in maroon_block:\n            output_grid[row, col] = -1  # Mark as removed temporarily\n\n        # Shift down pixels above the removed block\n        for col in range(output_grid.shape[1]):\n          empty_rows = []\n          for row in range(output_grid.shape[0]):\n            if output_grid[row, col] == -1:\n              empty_rows.append(row)\n            elif len(empty_rows) > 0:\n              output_grid[empty_rows[0],col] = output_grid[row,col]\n              output_grid[row,col] = -1\n              empty_rows.pop(0)\n              empty_rows.append(row)\n    \n    # remove the -1 markers\n    output_grid[output_grid == -1] = 0\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5632,
    "candidates_token_count": 759,
    "total_token_count": 6391,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.446709,
  "response_file": "004-response.json"
}