{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation rule identifies contiguous shapes of non-zero colored pixels in the input grid.\nFor each shape, it creates a copy and swaps places with the first object.\nFinally, it outputs the grid with the replicated and translated shapes.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"Finds contiguous objects (shapes) in the grid.\"\"\"\n    objects = []\n    visited = set()\n    rows, cols = grid.shape\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def dfs(r, c, color, current_object):\n        if (r, c) in visited or not is_valid(r, c) or grid[r, c] != color:\n            return\n        visited.add((r, c))\n        current_object.append((r, c))\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            dfs(r + dr, c + dc, color, current_object)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and (r, c) not in visited:\n                current_object = []\n                dfs(r, c, grid[r, c], current_object)\n                objects.append((grid[r, c], current_object))\n    return objects\n\ndef transform(input_grid):\n    # initialize output_grid\n    input_grid = np.array(input_grid)\n    output_grid = np.zeros_like(input_grid)\n\n    # Find objects in the input grid.\n    objects = find_objects(input_grid)\n\n    # if only one shape, return input\n    if len(objects) <= 1:\n        return input_grid.tolist()\n\n    # Copy the original grid to output first\n    for color, obj_pixels in objects:\n          for r,c in obj_pixels:\n            output_grid[r,c] = color\n\n    # replicate and translate\n    if len(objects) >= 2:\n\n        obj1_color, obj1_pixels = objects[0]\n        obj2_color, obj2_pixels = objects[1]\n\n\n        # swap pixel locations\n        for r, c in obj1_pixels:\n          output_grid[r,c] = 0\n        for r, c in obj2_pixels:\n          output_grid[r,c] = 0\n\n        for r, c in obj1_pixels:\n            # find corresponding pixel in obj2, if its a single pixel\n            if len(obj2_pixels) == 1:\n              r2, c2 = obj2_pixels[0]\n              output_grid[r2,c2] = obj1_color\n            else:\n              # find matching pixel from first object and move it to second object\n              min_r1 = min(r for r, _ in obj1_pixels)\n              min_c1 = min(c for _, c in obj1_pixels)\n              min_r2 = min(r for r, _ in obj2_pixels)\n              min_c2 = min(c for _, c in obj2_pixels)\n\n              delta_r = r - min_r1\n              delta_c = c - min_c1\n\n              new_r = min_r2 + delta_r\n              new_c = min_c2 + delta_c\n              output_grid[new_r, new_c] = obj1_color\n\n\n        for r, c in obj2_pixels:\n            if len(obj1_pixels) == 1:\n                r1,c1 = obj1_pixels[0]\n                output_grid[r1,c1] = obj2_color\n            else:\n                # Find matching pixel and copy to object 1\n                min_r1 = min(r for r, _ in obj1_pixels)\n                min_c1 = min(c for _, c in obj1_pixels)\n                min_r2 = min(r for r, _ in obj2_pixels)\n                min_c2 = min(c for _, c in obj2_pixels)\n\n                delta_r = r - min_r2\n                delta_c = c - min_c2\n\n                new_r = min_r1 + delta_r\n                new_c = min_c1 + delta_c\n\n                output_grid[new_r,new_c] = obj2_color\n    \n    # handle 3 objects\n    if len(objects) == 3:\n        obj3_color, obj3_pixels = objects[2]\n\n        for r, c in obj3_pixels:\n           output_grid[r,c] = 0 # reset to blank\n\n        # place object 3 at end of object 2\n        for r, c in obj3_pixels:\n           output_grid[r - 1, c - len(obj3_pixels)] = obj3_color\n\n    if len(objects) > 3:\n        # copy remaining colors\n        for i in range(3, len(objects)):\n          obj_color, obj_pixels = objects[i]\n          # add new colors\n          for r,c in obj_pixels:\n            output_grid[r,c] = obj_color\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6737,
    "candidates_token_count": 1244,
    "total_token_count": 7981,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 13.664666,
  "response_file": "002-response.json"
}