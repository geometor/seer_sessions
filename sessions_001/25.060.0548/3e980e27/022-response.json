{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nReplicates and repositions colored regions within the grid. Yellow and a neighboring red structure is copied and moved down-left; a blue/green structure is copied, expanded, and moved up.\n\"\"\"\n\nimport numpy as np\n\ndef find_object(grid, colors):\n    \"\"\"Finds a connected region of specified colors and returns its bounding box and pixels.\"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n    object_pixels = []\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def dfs(r, c):\n        if not is_valid(r, c) or visited[r, c] or grid[r, c] not in colors:\n            return\n        visited[r, c] = True\n        object_pixels.append((r, c))\n        dfs(r + 1, c)\n        dfs(r - 1, c)\n        dfs(r, c + 1)\n        dfs(r, c - 1)\n        dfs(r + 1, c + 1)\n        dfs(r - 1, c-1)\n        dfs(r+1, c-1)\n        dfs(r-1,c+1)\n\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] in colors and not visited[r, c]:\n                dfs(r, c)\n                if object_pixels:  # Ensure object was found\n                    min_r = min(p[0] for p in object_pixels)\n                    max_r = max(p[0] for p in object_pixels)\n                    min_c = min(p[1] for p in object_pixels)\n                    max_c = max(p[1] for p in object_pixels)\n                    return (min_r, min_c, max_r, max_c), object_pixels\n    return None, []\n\ndef get_neighbor_pixel(grid, object_pixels, neighbor_color):\n    rows, cols = grid.shape\n    neighbor = None\n    for r,c in object_pixels:\n        for dr, dc in [(0,1),(1,0), (0,-1),(-1,0),(1,1),(-1,1),(1,-1),(-1,-1)]:\n            nr, nc = r+dr, c + dc\n            if 0<= nr < rows and 0 <= nc < cols and grid[nr, nc] == neighbor_color:\n                neighbor = (nr, nc)\n                return neighbor\n    return None\n\ndef translate_object(grid_shape, object_pixels, dr, dc):\n    \"\"\"Translates object pixels by dr, dc.\"\"\"\n    translated_pixels = []\n    for r, c in object_pixels:\n        translated_pixels.append((r + dr, c + dc))\n    return translated_pixels\n\ndef place_object(grid, object_pixels, color_map):\n    for r, c in object_pixels:\n        if 0 <= r < grid.shape[0] and 0 <= c < grid.shape[1]:\n            grid[r,c] = color_map[(r,c)]\n\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.zeros_like(input_grid)\n\n    # 1. Identify Objects\n    yellow_bbox, yellow_pixels = find_object(input_grid, [4])\n    red_pixel = get_neighbor_pixel(input_grid, yellow_pixels, 2)\n    if red_pixel:\n        yellow_pixels.append(red_pixel)\n    \n    color_map_yellow = {}\n    for r,c in yellow_pixels:\n        color_map_yellow[(r,c)] = input_grid[r,c]\n\n    blue_green_bbox, blue_green_pixels = find_object(input_grid, [1, 3])\n    color_map_bg = {}\n    for r,c in blue_green_pixels:\n        color_map_bg[(r,c)] = input_grid[r,c]\n\n    # 2. Replicate and Translate Yellow\n    yellow_dr = (blue_green_bbox[2] - yellow_bbox[0] + 1 )\n    yellow_dc = -(yellow_bbox[1]-blue_green_bbox[1] )\n\n    translated_yellow_pixels = translate_object(input_grid.shape, yellow_pixels, yellow_dr, yellow_dc)\n    \n    new_color_map_yellow={}\n    for (orow, ocol), (nrow, ncol) in zip(yellow_pixels, translated_yellow_pixels):\n        new_color_map_yellow[(nrow,ncol)] = color_map_yellow[(orow, ocol)]\n    \n    place_object(output_grid, translated_yellow_pixels, new_color_map_yellow)\n\n    # 3. Replicate, Insert, Translate Blue/Green\n    #   Replicate\n    \n    blue_green_pixels_expanded = []\n    min_c = min(c for _,c in blue_green_pixels)\n    new_color_map_bg = {}\n\n    for r,c in blue_green_pixels:\n        new_color_map_bg[(r,c)] = color_map_bg[(r,c)]\n        if c == min_c:\n           blue_green_pixels_expanded.append((r,c))\n           new_color_map_bg[(r, c - 1)] = 1 #insert blue to left of every left-most column element\n           blue_green_pixels_expanded.append((r, c - 1))\n\n        else:\n           blue_green_pixels_expanded.append((r,c))\n\n\n    blue_green_dr = -(blue_green_bbox[0] - yellow_bbox[2] + 1) # move up to below original yellow\n    blue_green_dc =  - (yellow_bbox[3] - yellow_bbox[1] + 1) * 2 #align to left edge of new yellow structure\n\n    translated_blue_green_pixels = translate_object(input_grid.shape, blue_green_pixels_expanded, blue_green_dr, blue_green_dc)\n    new_translated_bg_map = {}\n\n    for (orow, ocol), (nrow, ncol) in zip(blue_green_pixels_expanded, translated_blue_green_pixels):\n      if (orow, ocol) in new_color_map_bg:\n          new_translated_bg_map[(nrow, ncol)] = new_color_map_bg[(orow, ocol)]\n\n    place_object(output_grid, translated_blue_green_pixels, new_translated_bg_map )\n\n\n\n    # 4. Background (fill in unchanged pixels)\n    for r in range(output_grid.shape[0]):\n        for c in range(output_grid.shape[1]):\n            if output_grid[r,c] == 0:\n              output_grid[r,c] = input_grid[r,c]\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 715,
            "end_index": 958,
            "uri": "https://github.com/Saan26/6Companies30Days-Challenge",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2944,
    "candidates_token_count": 1661,
    "total_token_count": 4605,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 17.177735,
  "response_file": "022-response.json"
}