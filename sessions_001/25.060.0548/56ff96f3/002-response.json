{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation rule identifies non-zero pixels in the input grid and expands them horizontally and, conditionally, vertically to form rectangular blocks. Horizontal expansion is primary, extending to the maximum possible extent within the grid. Vertical expansion appears conditional, based on neighboring blocks or boundaries.\n\"\"\"\n\nimport numpy as np\n\ndef get_nonzero_pixels(grid):\n    \"\"\"Finds the coordinates of all non-zero pixels in a grid.\"\"\"\n    pixels = []\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] != 0:\n                pixels.append((r, c, grid[r, c]))\n    return pixels\n\ndef expand_horizontally(grid, pixels):\n    \"\"\"Expands pixels horizontally to the maximum extent.\"\"\"\n    expanded_grid = np.zeros_like(grid)\n    for r, c, color in pixels:\n        # Find leftmost boundary\n        left = c\n        while left > 0 and grid[r, left - 1] == 0:\n            left -= 1\n\n        # Find rightmost boundary\n        right = c\n        while right < grid.shape[1] - 1 and grid[r, right + 1] == 0:\n            right += 1\n\n        # Fill horizontally\n        expanded_grid[r, left:right+1] = color\n    return expanded_grid\n    \n\ndef expand_vertically(input_grid, expanded_grid):\n    \"\"\"Expands blocks vertically based on some complex rule.\"\"\"\n    final_grid = np.copy(expanded_grid)\n    \n    pixels = get_nonzero_pixels(input_grid)\n    if not pixels:\n        return final_grid\n\n    #find top and bottom edges of each colour\n    color_extents = {}\n    for r,c, color in pixels:\n        if color not in color_extents:\n            color_extents[color] = {'top':input_grid.shape[0], 'bottom':-1, 'left':input_grid.shape[1], 'right': -1}\n        color_extents[color]['top'] = min(color_extents[color]['top'], r)\n        color_extents[color]['bottom'] = max(color_extents[color]['bottom'], r)\n        color_extents[color]['left'] = min(color_extents[color]['left'], c)\n        color_extents[color]['right'] = max(color_extents[color]['right'], c)\n\n    # expand each object vertically, up to existing edges\n    for color in color_extents:\n        top_edge = color_extents[color]['top']\n        bottom_edge = color_extents[color]['bottom']\n        \n        leftmost = color_extents[color]['left']\n        rightmost = color_extents[color]['right']\n      \n        # find horizontal extent in expanded grid\n        for r in range(input_grid.shape[0]):\n            if expanded_grid[r, leftmost] == color:\n              left_edge = r\n              while left_edge > 0 and expanded_grid[left_edge-1, leftmost] == color:\n                  left_edge-=1\n            if expanded_grid[r, rightmost] == color:    \n              right_edge = r\n              while right_edge < input_grid.shape[0] -1 and expanded_grid[right_edge+1,rightmost] == color:\n                right_edge+=1\n\n        # expand the color within its boundaries\n        for r in range(input_grid.shape[0]):\n            if expanded_grid[r, leftmost] == color:\n                # find connected regions of the color\n                top = r\n                while top > 0 and expanded_grid[top-1, leftmost] == color:\n                    top-=1\n                bottom = r\n                while bottom < input_grid.shape[0]-1 and expanded_grid[bottom+1, leftmost] == color:\n                    bottom+=1\n\n                #find new top\n                new_top = top\n                while new_top > 0 and expanded_grid[new_top-1, leftmost] == 0:\n                    new_top -= 1\n                if new_top < top_edge:\n                  new_top = top_edge\n                new_bottom = bottom\n                while new_bottom < input_grid.shape[0]-1 and expanded_grid[new_bottom+1, leftmost] == 0:\n                    new_bottom +=1\n                #fill the section, if it contains original colored pixel\n                for rr in range(top, bottom+1):\n                  final_grid[new_top:new_bottom+1,:] = np.where(expanded_grid[rr:rr+1,:]==color, color, final_grid[new_top:new_bottom+1,:])\n    return final_grid\n        \n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.zeros_like(input_grid)\n\n    # Find non-zero pixels\n    nonzero_pixels = get_nonzero_pixels(input_grid)\n\n    # Expand horizontally\n    expanded_grid = expand_horizontally(input_grid, nonzero_pixels)\n    \n    # expand vertically\n    output_grid = expand_vertically(input_grid, expanded_grid)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5315,
    "candidates_token_count": 1227,
    "total_token_count": 6542,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 12.415326,
  "response_file": "002-response.json"
}