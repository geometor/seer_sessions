{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Find all non-zero pixels (colored pixels) in the input grid. Each contiguous block of the same color is considered an object.\n2.  **Horizontal Expansion (Primary):** Each object expands horizontally to the maximum extent possible within the grid. This expansion stops if it encounters a non-zero pixel of a *different* color or the edge of the grid.\n3.  **Vertical Expansion (Secondary):** After horizontal expansion, each object expands vertically. The expansion occurs across the *entire height* of the grid. The vertical expansion maintains the horizontal width achieved in step 2. Vertical expansion happens for *all* colored objects.\n\"\"\"\n\nimport numpy as np\n\ndef get_nonzero_pixels(grid):\n    \"\"\"Finds the coordinates of all non-zero pixels in a grid.\"\"\"\n    pixels = []\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] != 0:\n                pixels.append((r, c, grid[r, c]))\n    return pixels\n\ndef expand_horizontally(grid, pixels):\n    \"\"\"Expands pixels horizontally to the maximum extent.\"\"\"\n    expanded_grid = np.zeros_like(grid)\n    for r, c, color in pixels:\n        # Find leftmost boundary\n        left = c\n        while left > 0 and grid[r, left - 1] == 0:\n            left -= 1\n\n        # Find rightmost boundary\n        right = c\n        while right < grid.shape[1] - 1 and grid[r, right + 1] == 0:\n            right += 1\n\n        # Fill horizontally\n        expanded_grid[r, left:right+1] = color\n    return expanded_grid\n\ndef expand_vertically(grid, expanded_grid):\n    \"\"\"Expands blocks vertically across the entire grid height.\"\"\"\n    final_grid = np.copy(expanded_grid)  # Start with the horizontally expanded grid\n    rows, cols = grid.shape\n\n    for c in range(cols):\n        for r in range(rows):\n            color = expanded_grid[r,c]\n            if color != 0:\n                final_grid[:,c] = color # fill column\n                break # move onto next column\n\n    return final_grid\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.zeros_like(input_grid)\n\n    # Find non-zero pixels\n    nonzero_pixels = get_nonzero_pixels(input_grid)\n\n    # Expand horizontally\n    expanded_grid = expand_horizontally(input_grid, nonzero_pixels)\n\n    # Expand vertically\n    output_grid = expand_vertically(input_grid, expanded_grid)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5650,
    "candidates_token_count": 633,
    "total_token_count": 6283,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 5.295311,
  "response_file": "004-response.json"
}