import numpy as np

def find_objects(grid):
    """
    Finds connected components in a grid.
    Returns a list of objects, where each object is a set of (row, col) tuples.
    """
    visited = set()
    objects = []

    def dfs(row, col, color, current_object):
        if (
            row < 0
            or row >= grid.shape[0]
            or col < 0
            or col >= grid.shape[1]
            or (row, col) in visited
            or grid[row, col] != color
        ):
            return
        visited.add((row, col))
        current_object.add((row, col))
        dfs(row + 1, col, color, current_object)
        dfs(row - 1, col, color, current_object)
        dfs(row, col + 1, color, current_object)
        dfs(row, col - 1, color, current_object)

    for row in range(grid.shape[0]):
        for col in range(grid.shape[1]):
            if (row, col) not in visited and grid[row,col]!=0:
                current_object = set()
                dfs(row, col, grid[row, col], current_object)
                objects.append(current_object)
    return objects

def array_to_string(arr):
    return np.array2string(arr, separator=',', formatter={'int': lambda x: f'{x:d}'})


def analyze_example(input_grid, expected_output, actual_output):

    input_objects = find_objects(input_grid)
    expected_objects = find_objects(expected_output)
    actual_objects = find_objects(actual_output)

    report = {
        'input': array_to_string(input_grid),
        'input_objects': [{'color': int(input_grid[list(obj)[0][0], list(obj)[0][1]]), 'size': len(obj)} for obj in input_objects],
        'expected_output': array_to_string(expected_output),
        'expected_objects': [{'color': int(expected_output[list(obj)[0][0], list(obj)[0][1]]), 'size': len(obj)} for obj in expected_objects],
        'actual_output': array_to_string(actual_output),
        'actual_objects': [{'color': int(actual_output[list(obj)[0][0], list(obj)[0][1]]), 'size': len(obj)} for obj in actual_objects],
        'error': not np.array_equal(expected_output, actual_output)
    }
    return report
task = {
  "train": [
    {
      "input": [
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [4, 4, 4, 4, 4, 4, 4, 4, 4],
        [0, 0, 0, 0, 0, 0, 0, 0, 2]
      ],
      "output": [
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0]
      ]
    },
    {
      "input": [
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [4, 4, 4, 4, 4, 4, 4, 4, 4],
        [0, 0, 0, 0, 0, 0, 0, 2, 2],
        [0, 0, 0, 0, 0, 0, 0, 0, 0]
      ],
      "output": [
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 3, 3]
      ]
    },
    {
      "input": [
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0],
        [4, 4, 4, 4, 4, 4, 4],
        [0, 0, 0, 0, 2, 0, 0],
        [0, 0, 0, 0, 0, 0, 0]
      ],
      "output": [
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0]
      ]
    }
  ]
}

def transform(input_grid):
    # 1. Remove the Yellow Row
    grid_no_yellow = []
    for row in input_grid:
        if not all(pixel == 4 for pixel in row):
            grid_no_yellow.append(row)
    grid_no_yellow = np.array(grid_no_yellow)

    # 2. Crop/Resize: take the top 6 rows
    cropped_grid = grid_no_yellow[:6]

    # 3 & 4. find objects and Color Transformation
    output_grid = np.copy(cropped_grid) # Initialize with cropped grid
    objects = find_objects(cropped_grid)

    for obj in objects:
      color = cropped_grid[list(obj)[0][0], list(obj)[0][1]]
      if color == 2: # Red Object
        if len(obj) == 1:
            for row, col in obj:
                output_grid[row, col] = 0  # Remove (change to white)
        elif len(obj) > 1:
            for row, col in obj:
                output_grid[row, col] = 3  # Change to green

    return output_grid

results = []
for example in task["train"]:
  input_grid = np.array(example["input"])
  expected_output = np.array(example["output"])
  actual_output = transform(input_grid)
  results.append(analyze_example(input_grid, expected_output, actual_output))

for i, result in enumerate(results):
    print(f"Example {i+1}:")
    print(f"  Input:\n{result['input']}")
    print(f"    Input Objects: {result['input_objects']}")
    print(f"  Expected Output:\n{result['expected_output']}")
    print(f"    Expected Objects: {result['expected_objects']}")
    print(f"  Actual Output:\n{result['actual_output']}")
    print(f"    Actual Objects: {result['actual_objects']}")
    print(f"  Error: {result['error']}")
    print("-" * 20)