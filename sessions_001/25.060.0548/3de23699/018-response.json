{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nCopies a contiguous shape of magenta (6) pixels from the input grid and\npositions it at the top-left corner of an output grid. The output grid's\nsize is dynamically determined based on the bounding box of the magenta shape.\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, r, c, color):\n    rows, cols = grid.shape\n    neighbors = []\n    # Check adjacent cells (up, down, left, right)\n    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n        nr, nc = r + dr, c + dc\n        if 0 <= nr < rows and 0 <= nc < cols and grid[nr, nc] == color:\n            neighbors.append((nr, nc))\n    return neighbors\n\ndef find_contiguous_magenta(grid):\n    # Find all magenta pixels and their contiguous neighbors\n    magenta_pixels = []\n    visited = set()\n\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == 6 and (r, c) not in visited:\n                # Start a new contiguous group\n                group = []\n                queue = [(r, c)]\n                visited.add((r,c))\n\n                while queue:\n                    current_r, current_c = queue.pop(0)\n                    group.append((current_r, current_c))\n\n                    neighbors = get_neighbors(grid, current_r, current_c, 6)\n                    for nr, nc in neighbors:\n                        if (nr, nc) not in visited:\n                            visited.add((nr, nc))\n                            queue.append((nr, nc))\n                magenta_pixels.extend(group) #add all in group\n    return magenta_pixels\n\ndef bounding_box(pixels):\n    # Calculate bounding box of a list of pixels\n    if not pixels:\n        return 0, 0, 0, 0  # Empty case\n    min_r, min_c = pixels[0]\n    max_r, max_c = pixels[0]\n    for r, c in pixels:\n        min_r = min(min_r, r)\n        min_c = min(min_c, c)\n        max_r = max(max_r, r)\n        max_c = max(max_c, c)\n    return min_r, min_c, max_r, max_c\n\ndef transform(input_grid):\n    # Convert input grid to numpy array\n    input_grid = np.array(input_grid)\n\n    # Find all contiguous magenta pixels\n    magenta_pixels = find_contiguous_magenta(input_grid)\n\n    # Determine bounding box\n    min_r, min_c, max_r, max_c = bounding_box(magenta_pixels)\n    width = max_c - min_c + 1\n    height = max_r - min_r + 1\n\n    # Initialize output grid\n    output_grid = np.zeros((height, width), dtype=int)\n\n    # Copy magenta pixels to output grid\n    for r, c in magenta_pixels:\n        output_grid[r - min_r, c - min_c] = 6\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2502,
    "candidates_token_count": 766,
    "total_token_count": 3268,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.316083,
  "response_file": "018-response.json"
}