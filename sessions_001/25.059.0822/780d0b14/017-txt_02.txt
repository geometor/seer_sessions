import numpy as np

def get_regions(grid):
    # Find the boundaries of the colored regions.
    rows, cols = grid.shape
    h_lines = []
    v_lines = []

    # Find horizontal lines
    for r in range(1, rows):
        if np.all(grid[r] != grid[r-1]):
            h_lines.append(r)

    # Find vertical lines
    for c in range(1, cols):
        if np.all(grid[:, c] != grid[:, c-1]):
            v_lines.append(c)
    
    regions = []
    r_start = 0
    for r_end in h_lines:
        c_start = 0
        for c_end in v_lines:
            region_color = grid[r_start, c_start]
            regions.append(((r_start, c_start, r_end, c_end), region_color))
            c_start = c_end
        r_start = r_end
    #account for the last region
    if r_start < rows:
        c_start = 0
        for c_end in v_lines:
            region_color = grid[r_start, c_start]
            regions.append(((r_start, c_start, rows, c_end), region_color))
            c_start = c_end
        if c_start < cols:
            region_color = grid[r_start,c_start]
            regions.append(((r_start, c_start, rows, cols), region_color))

    return regions
            

def transform(input_grid):
    # Convert input to numpy array
    grid = np.array(input_grid)

    # Get the distinct regions and their colors
    regions = get_regions(grid)
    
    # Create the output grid
    output_grid = np.zeros((3, 2), dtype=int)

    # sort regions
    regions.sort(key=lambda x: (x[0][0], x[0][1]))  # Sort by row, then column

    # iterate in pairs
    for i in range(0, len(regions), 2):
        output_grid[i // 2, 0] = regions[i][1]
        output_grid[i // 2, 1] = regions[i+1][1]

    return output_grid.tolist()

def analyze_example(input_grid, expected_output, actual_output):
    grid = np.array(input_grid)
    regions = get_regions(grid)
    num_regions = len(regions)
    input_shape = grid.shape
    expected_shape = np.array(expected_output).shape if isinstance(expected_output, list) else None
    actual_shape = np.array(actual_output).shape if isinstance(actual_output, list) else None
    correct = actual_output == expected_output

    print(f"  Input Shape: {input_shape}")
    print(f"  Number of Regions: {num_regions}")
    print(f"  Expected Output Shape: {expected_shape}")
    print(f"  Actual Output Shape: {actual_shape}")
    print(f"Regions: {regions}")
    print(f"  Correct: {correct}")

tasks = [
    {
        "input": [
            [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
            [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
            [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
            [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
            [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
            [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        ],
        "output": [[8, 8], [5, 5], [1, 1]],
    },
    {
        "input": [
            [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
            [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
            [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
            [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
            [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
            [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        ],
        "output": [[8, 8], [5, 5], [1, 1]],
    },
    {
        "input": [
            [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
            [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
            [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
            [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
            [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
            [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
            [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
            [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
            [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
        ],
        "output": [[8, 8], [5, 5]],
    },
    {
       "input":  [[0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3],
 [0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3],
 [0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3],
 [0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3],
 [0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3],
 [0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3],
 [1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5],
 [1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5],
 [1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5]],
       "output": [[0, 3], [1, 5]]
    }
]

for i, task in enumerate(tasks):
    print(f"Example {i+1}:")
    input_grid = task["input"]
    expected_output = task["output"]
    actual_output = transform(input_grid)
    analyze_example(input_grid, expected_output, actual_output)
    print("-" * 20)