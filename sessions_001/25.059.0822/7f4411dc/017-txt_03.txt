results = [
    {   # Example 0
        "input_gray_objects": 1,
        "output_gray_objects": 1,
        "predicted_gray_objects": 1,
        "input_gray_pixels": 24,
        "output_gray_pixels": 20,
        "predicted_gray_pixels": 20,
        "num_errors": 0,  # Correct for the first example
        "error_positions": []
    },
    {   # Example 1
        "input_gray_objects": 4,  # multiple disconnected grey
        "output_gray_objects": 1,
        "predicted_gray_objects": 1,
        "input_gray_pixels": 14,
        "output_gray_pixels": 9,
        "predicted_gray_pixels": 16,  # bounding box too large
        "num_errors": 7,
        "error_positions": [(1,1),(1,2), ... ]
    },
    {   # Example 2
        "input_gray_objects": 2, # One large object, one stray pixel
        "output_gray_objects": 1,
        "predicted_gray_objects": 1,
        "input_gray_pixels": 21,
        "output_gray_pixels": 16,
        "predicted_gray_pixels": 16,
        "num_errors": 0, # this one works by coincidence of position and size of noise
        "error_positions": []
    },
    {   # Example 3
        "input_gray_objects": 3,
        "output_gray_objects": 1,
        "predicted_gray_objects": 1,
        "input_gray_pixels": 34,
        "output_gray_pixels": 25,
        "predicted_gray_pixels": 36,  # bounding box too large
        "num_errors": 13,
        "error_positions": [(4, 7), (4, 8), ... ]
    },
    {   # Example 4
        "input_gray_objects": 3, # One L, one I one stray
        "output_gray_objects": 1, #solid block
        "predicted_gray_objects": 1,
        "input_gray_pixels": 13,
        "output_gray_pixels": 9,
        "predicted_gray_pixels": 16,  # bounding box too large
        "num_errors": 7,
        "error_positions": [(2, 6), (2, 7), ...]
    }
]