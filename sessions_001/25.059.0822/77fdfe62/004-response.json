{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe input grid is transformed into a smaller output grid by extracting the corner pixels of distinct objects within the input grid.\nObjects are contiguous regions of the same color. Corner pixels of these objects are identified and their colors are placed into corresponding\nquadrants in the output grid, maintaining relative positioning. Empty regions in the input result in empty (white, 0) cells in the output.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"\n    Finds distinct objects in the grid.\n    Returns a list of objects, where each object is a list of (row, col) coordinates.\n    \"\"\"\n    objects = []\n    visited = set()\n    rows, cols = grid.shape\n\n    def dfs(r, c, color, current_object):\n        if (r, c) in visited or r < 0 or r >= rows or c < 0 or c >= cols or grid[r, c] != color:\n            return\n        visited.add((r, c))\n        current_object.append((r, c))\n        dfs(r + 1, c, color, current_object)\n        dfs(r - 1, c, color, current_object)\n        dfs(r, c + 1, color, current_object)\n        dfs(r, c - 1, color, current_object)\n\n    for r in range(rows):\n        for c in range(cols):\n            if (r, c) not in visited and grid[r, c] != 0:\n                current_object = []\n                dfs(r, c, grid[r, c], current_object)\n                objects.append(current_object)\n    return objects\n\ndef find_corners(object_coords):\n    \"\"\"\n    Finds the corner pixels of an object.\n    Returns a dictionary with keys 'tl', 'tr', 'bl', 'br' representing top-left, top-right, bottom-left, and bottom-right corners.\n    \"\"\"\n    min_row = min(r for r, _ in object_coords)\n    max_row = max(r for r, _ in object_coords)\n    min_col = min(c for _, c in object_coords)\n    max_col = max(c for _, c in object_coords)\n\n    corners = {\n        'tl': (min_row, min_col),\n        'tr': (min_row, max_col),\n        'bl': (max_row, min_col),\n        'br': (max_row, max_col),\n    }\n    return corners\n\n\ndef transform(input_grid):\n    # initialize output_grid\n    input_rows, input_cols = input_grid.shape\n    output_rows, output_cols = input_rows // 2, input_cols // 2\n    output_grid = np.zeros((output_rows, output_cols), dtype=int)\n\n    # Find distinct objects\n    objects = find_objects(input_grid)\n\n    # Find corners for each object\n    for obj in objects:\n        corners = find_corners(obj)\n\n        # Place corner colors into output grid\n        for corner_type, (r, c) in corners.items():\n            color = input_grid[r, c]\n\n            # Determine quadrant in output grid\n            if corner_type == 'tl':\n                out_r, out_c = r // 2, c // 2\n\n            elif corner_type == 'tr':\n                out_r, out_c = r // 2 , (c - output_cols) //2 + output_cols//2\n\n            elif corner_type == 'bl':\n                out_r, out_c = (r- output_rows) // 2 + output_rows//2, c // 2\n\n            elif corner_type == 'br':\n                out_r, out_c = (r- output_rows)// 2 + output_rows//2 , (c - output_cols) //2 + output_cols//2\n\n            if 0 <= out_r < output_rows and 0 <= out_c < output_cols:\n                output_grid[out_r, out_c] = color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2380,
    "candidates_token_count": 958,
    "total_token_count": 3338,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.934294,
  "response_file": "004-response.json"
}