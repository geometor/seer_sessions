{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Red Regions:** Find all contiguous groups of red (2) pixels in the input grid.  These can be single pixels or larger connected shapes.\n2.  **For Each Red Region:**\n    *   **Find Connected White Regions:** Identify all white (0) pixels that are directly *or indirectly* connected to the red region.  Connectivity includes horizontal, vertical, and diagonal adjacency. This forms a \"white region\" connected to the \"red region\".\n    *   **Flood Fill:** Change the color of all pixels within the connected white region to yellow (4). This is a recursive process:\n        *   Start with white pixels directly adjacent to the red region.\n        *   For each newly colored yellow pixel, check its neighbors.\n        *   Continue until no more connected white pixels are found.\n3. **Repeat:** Perform steps 2.1 and 2.2 for *each* distinct red region found in the grid.\n4.  **Output:** The resulting grid, with white regions adjacent to red regions now filled with yellow, is the output.\n\"\"\"\n\nimport numpy as np\n\ndef get_red_regions(grid):\n    \"\"\"\n    Finds all contiguous red regions in the grid.\n    Uses a depth-first search approach.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n    red_regions = []\n\n    def dfs(row, col, current_region):\n        if (row < 0 or row >= rows or col < 0 or col >= cols or\n                visited[row, col] or grid[row, col] != 2):\n            return\n        visited[row, col] = True\n        current_region.append((row, col))\n        # Explore all 8 neighbors\n        for dr in [-1, 0, 1]:\n            for dc in [-1, 0, 1]:\n                if dr == 0 and dc == 0:\n                    continue\n                dfs(row + dr, col + dc, current_region)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == 2 and not visited[r, c]:\n                current_region = []\n                dfs(r, c, current_region)\n                red_regions.append(current_region)\n    return red_regions\n\ndef flood_fill(grid, start_row, start_col, target_color, replacement_color):\n    \"\"\"\n    Performs a flood fill operation on the grid.\n    \"\"\"\n    rows, cols = grid.shape\n    if (start_row < 0 or start_row >= rows or start_col < 0 or start_col >= cols or\n            grid[start_row, start_col] != target_color):\n        return\n    grid[start_row, start_col] = replacement_color\n    # Explore all 8 neighbors\n    for dr in [-1, 0, 1]:\n        for dc in [-1, 0, 1]:\n            if dr == 0 and dc == 0:\n                continue\n            flood_fill(grid, start_row + dr, start_col + dc, target_color, replacement_color)\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the observed rule.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    red_regions = get_red_regions(output_grid)\n\n    for region in red_regions:\n        # Find adjacent white pixels for each red region\n        adjacent_whites = set()\n        for r, c in region:\n            rows, cols = output_grid.shape\n            for dr in [-1, 0, 1]:\n                for dc in [-1, 0, 1]:\n                    if dr == 0 and dc == 0:\n                        continue  # Skip the cell itself\n                    nr, nc = r + dr, c + dc\n                    if 0 <= nr < rows and 0 <= nc < cols and output_grid[nr, nc] == 0:\n                        adjacent_whites.add((nr, nc))\n        # Flood fill from the adjacent white pixels\n        for r, c in adjacent_whites:\n            flood_fill(output_grid, r, c, 0, 4)\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2616,
    "candidates_token_count": 987,
    "total_token_count": 3603,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.560196,
  "response_file": "006-response.json"
}