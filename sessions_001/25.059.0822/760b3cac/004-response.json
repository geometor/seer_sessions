{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by moving vertically stacked azure (8) pixels to a horizontal line at the top of the output grid, preserving yellow (4) and white (0) pixels.\n\"\"\"\n\nimport numpy as np\n\ndef get_vertical_stacks(grid, color):\n    \"\"\"\n    Finds contiguous vertical stacks of a specified color.\n\n    Args:\n        grid: The input grid.\n        color: The color to search for.\n\n    Returns:\n        A list of tuples, where each tuple contains (start_row, start_col, height).\n    \"\"\"\n    stacks = []\n    visited = set()\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == color and (r, c) not in visited:\n                height = 0\n                for r2 in range(r, rows):\n                    if grid[r2, c] == color:\n                        height += 1\n                        visited.add((r2, c))\n                    else:\n                        break\n                if height > 0:\n                  stacks.append((r, c, height))\n    return stacks\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of the input_grid\n    output_grid = input_grid.copy()\n    rows, cols = output_grid.shape\n\n    # Identify vertical stacks of azure (8) pixels\n    azure_stacks = get_vertical_stacks(input_grid, 8)\n\n    # Calculate total height of azure stacks\n    total_height = sum(stack[2] for stack in azure_stacks)\n\n    # Construct horizontal line at the top\n    \n    col_index = 0\n    \n    for r, c, h in azure_stacks:\n        #remove stacks from output grid\n        for i in range(r,r+h):\n          output_grid[i,c] = 0\n\n    \n    for r, c, h in azure_stacks:\n      \n      if (col_index + h) <= cols:\n        #add to line from left to right\n        for i in range(h):\n          output_grid[0, col_index] = 8\n          col_index+=1\n      else:\n          #add to line from right to left\n          second_col_index = cols - 1\n          for i in range(h):\n            if output_grid[0,second_col_index] != 8:\n              output_grid[0, second_col_index] = 8\n            second_col_index -= 1\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2238,
    "candidates_token_count": 598,
    "total_token_count": 2836,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.371487,
  "response_file": "004-response.json"
}