{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Connected Components:** Find all distinct, contiguous regions (connected components) of yellow (4) pixels within the input grid.  Two yellow pixels are considered connected if they are adjacent horizontally, vertically, *or diagonally*.\n2.  **Determine Bounding Boxes:** For *each* connected component identified in step 1, find the smallest rectangle (bounding box) that encloses all pixels within that component.\n3.  **Crop and Output:** For *each* bounding box found in step 2, extract the corresponding region from the input grid.  Each extracted region becomes a separate output grid.\n4. **Handle Empty Case:** If there are no yellow pixels, return an empty output list (or a single empty grid, depending on the desired output format).\n\"\"\"\n\nimport numpy as np\nfrom scipy.ndimage import label\n\ndef find_connected_components(grid):\n    # Label connected regions of yellow pixels\n    labeled_grid, num_labels = label(grid == 4)\n    return labeled_grid, num_labels\n\ndef find_bounding_boxes(labeled_grid, num_labels):\n    bounding_boxes = []\n    for i in range(1, num_labels + 1):  # Iterate through each labeled region\n        # Find row and column indices of the current labeled region\n        rows, cols = np.where(labeled_grid == i)\n        \n        # Calculate min and max row/col to define the bounding box\n        min_row, max_row = np.min(rows), np.max(rows)\n        min_col, max_col = np.min(cols), np.max(cols)\n        \n        bounding_boxes.append((min_row, max_row, min_col, max_col))\n    return bounding_boxes\n\ndef transform(input_grid):\n    # Find connected components of yellow pixels\n    labeled_grid, num_labels = find_connected_components(input_grid)\n    \n    # If there are no yellow pixels, return an empty list\n    if num_labels == 0:\n        return []\n    \n    # Find bounding boxes for each connected component\n    bounding_boxes = find_bounding_boxes(labeled_grid, num_labels)\n    \n    output_grids = []\n    # Crop the input grid to each bounding box\n    for min_row, max_row, min_col, max_col in bounding_boxes:\n        output_grid = input_grid[min_row:max_row+1, min_col:max_col+1]\n        output_grids.append(output_grid)\n\n    return output_grids\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2380,
    "candidates_token_count": 587,
    "total_token_count": 2967,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 5.863202,
  "response_file": "012-response.json"
}