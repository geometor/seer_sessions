{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nChange white pixels to blue if and only if they are diagonally adjacent to a red pixel.\n\"\"\"\n\nimport numpy as np\n\ndef get_diagonally_adjacent_pixels(grid, row, col):\n    # get all valid diagonally adjacent pixel coordinates for a given cell\n    rows, cols = grid.shape\n    adjacent_pixels = []\n    for i in [-1, 1]:\n        for j in [-1, 1]:\n            new_row, new_col = row + i, col + j\n            if 0 <= new_row < rows and 0 <= new_col < cols:\n                adjacent_pixels.append((new_row, new_col))\n    return adjacent_pixels\n\ndef transform(input_grid):\n    # Initialize the output grid as a copy of the input grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Iterate through each pixel of the input grid\n    for row in range(rows):\n        for col in range(cols):\n            # Identify red pixels\n            if input_grid[row, col] == 2:\n                # Get diagonally adjacent pixels\n                adjacent_pixels = get_diagonally_adjacent_pixels(input_grid, row, col)\n                # Check if any adjacent pixels are white\n                for r, c in adjacent_pixels:\n                    if input_grid[r, c] == 0:\n                        # change output pixels\n                        output_grid[r, c] = 1\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6077,
    "candidates_token_count": 351,
    "total_token_count": 6428,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 3.732254,
  "response_file": "013-response.json"
}