import numpy as np

def describe_grid(grid):
    """Provides a description of the grid, focusing on red and blue pixels."""
    red_pixels = np.argwhere(grid == 2)
    blue_pixels = np.argwhere(grid == 1)
    return {
        "shape": grid.shape,
        "red_pixels": red_pixels.tolist(),
        "blue_pixels": blue_pixels.tolist(),
    }

def analyze_example(input_grid, output_grid):
    """Analyzes the input and output grids, highlighting the differences."""
    input_desc = describe_grid(input_grid)
    output_desc = describe_grid(output_grid)

    diff = input_grid != output_grid
    changed_pixels = np.argwhere(diff)
    change_details = []
    for pixel in changed_pixels:
        change_details.append({
            "location": pixel.tolist(),
            "from": int(input_grid[pixel[0], pixel[1]]),
            "to": int(output_grid[pixel[0], pixel[1]]),
        })

    return {
        "input": input_desc,
        "output": output_desc,
        "changes": change_details,
    }

# Assuming the task_data dictionary is available as described in the problem
task_data = {
  "train": [
    {
      "input": [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 2, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      ],
      "output": [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      ],
    },
    {
      "input": [
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 2, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
      ],
      "output": [
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
      ],
    },
    {
      "input": [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 2, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      ],
      "output": [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      ],
    },
  ]
}

for i, example in enumerate(task_data['train']):
    analysis = analyze_example(np.array(example['input']), np.array(example['output']))
    print(f"Example {i+1}:")
    print(analysis)
    print("-" * 20)