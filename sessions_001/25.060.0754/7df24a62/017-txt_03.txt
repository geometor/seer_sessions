import numpy as np

def get_neighbors(grid, row, col):
    """Gets the 3x3 neighborhood around a pixel."""
    rows, cols = grid.shape
    neighbors = []
    for i in range(max(0, row - 1), min(rows, row + 2)):
        for j in range(max(0, col - 1), min(cols, col + 2)):
            neighbors.append(grid[i, j])
    return neighbors
    
def summarize_diff(grid1, grid2, r, c):
    """
        Summarizes a difference at location r,c between two numpy arrays
        args:
            grid1, grid2: 2d numpy arrays
            r: row index
            c: column index
        returns:
            string describing the difference
    """
    summary = []
    summary.append(f"pixel at: ({r},{c})")
    summary.append(f"grid1: {grid1[r,c]}")
    summary.append(f"grid2: {grid2[r,c]}")
    
    neighbors1 = get_neighbors(grid1, r, c)
    counts1 = {}
    for n in neighbors1:
        if n not in counts1:
            counts1[n] = 0
        counts1[n] += 1

    neighbors2 = get_neighbors(grid2, r, c)
    counts2 = {}
    for n in neighbors2:
        if n not in counts2:
            counts2[n] = 0
        counts2[n] += 1        

    summary.append(f"grid1 neighbors:")
    for n, count in counts1.items():
      summary.append(f"  {n}:{count}")
    
    summary.append(f"grid2 neighbors:")
    for n, count in counts2.items():
      summary.append(f"  {n}:{count}")    
    
    return "\\n".join(summary)    

def compare_grids(grid1, grid2):
    """Compares two grids and reports differences."""
    if grid1.shape != grid2.shape:
        return "Shapes are different: {} vs {}".format(grid1.shape, grid2.shape)

    differences = []
    rows, cols = grid1.shape
    for r in range(rows):
        for c in range(cols):
            if grid1[r, c] != grid2[r, c]:
                differences.append(summarize_diff(grid1, grid2, r, c))
    return differences

def transform(input_grid):
    # initialize output_grid
    output_grid = np.copy(input_grid)
    rows, cols = input_grid.shape

    # 1. Identify yellow and blue pixels
    yellow_pixels = []
    blue_pixels = []
    for r in range(rows):
        for c in range(cols):
            if input_grid[r, c] == 4:
                yellow_pixels.append((r, c))
            elif input_grid[r, c] == 1:
                blue_pixels.append((r, c))

    # 2. Iterate through yellow pixels and check neighborhood
    for r, c in yellow_pixels:
        neighbors = get_neighbors(input_grid, r, c)
        if 1 in neighbors:
              output_grid[r,c] = 1

    # 3. Iterate all output pixels and fill
    for r in range(rows):
        for c in range(cols):
            neighbors = get_neighbors(input_grid, r, c)
            if (1 in neighbors) and (4 in neighbors):
                output_grid[r,c] = 1

    return output_grid

task_id = "6f8cd795"

# Load the task data
import json
with open(f"{task_id}.json", 'r') as f:
    task = json.load(f)

train_examples = task['train']
test_examples = task['test']

# Compare results
results = []
for i, example in enumerate(train_examples):
  input_grid = np.array(example['input'])
  expected_output = np.array(example['output'])
  test = transform(input_grid)
  diff = compare_grids(expected_output, test)
  results.append(
      {
          'example_num': i,
          'diff': diff
      }
  )
  
print(json.dumps(results, indent=2))