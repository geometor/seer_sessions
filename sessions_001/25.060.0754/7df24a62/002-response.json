{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThis program identifies blue rectangles in a grid. If a blue rectangle contains yellow pixels,\nit fills the interior of the rectangle with yellow and surrounds the yellow with a blue frame the\nsame width of the sides of the blue rectangle. Otherwise, the blue rectangle remains unchanged.\nIsolated yellow pixels outside of any blue rectangle are preserved.\n\"\"\"\n\nimport numpy as np\n\ndef get_objects(grid, color):\n    # find contiguous regions of the specified color\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == color and not visited[r, c]:\n                obj = []\n                stack = [(r, c)]\n                visited[r, c] = True\n\n                while stack:\n                    curr_r, curr_c = stack.pop()\n                    obj.append((curr_r, curr_c))\n\n                    for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n                        new_r, new_c = curr_r + dr, curr_c + dc\n                        if 0 <= new_r < rows and 0 <= new_c < cols and \\\n                           grid[new_r, new_c] == color and not visited[new_r, new_c]:\n                            stack.append((new_r, new_c))\n                            visited[new_r, new_c] = True\n                objects.append(obj)\n    return objects\n\ndef get_bounding_box(obj):\n    # calculate bounding box for an object\n    min_r, min_c = float('inf'), float('inf')\n    max_r, max_c = float('-inf'), float('-inf')\n\n    for r, c in obj:\n        min_r = min(min_r, r)\n        min_c = min(min_c, c)\n        max_r = max(max_r, r)\n        max_c = max(max_c, c)\n\n    return (min_r, min_c), (max_r, max_c)\n\ndef contains_color(grid, obj, color):\n    # check if object contains specified color\n    for r, c in obj:\n        if grid[r,c] == color:\n            return True\n    return False\n  \ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # get blue objects\n    blue_objects = get_objects(input_grid, 1)\n    \n    # iterate and transform each blue rectangle object\n    for blue_obj in blue_objects:\n        # if object contains color yellow, switch it\n        if contains_color(input_grid, blue_obj, 4):\n            # get the top-left and bottom-right of the bounding box\n            (min_r, min_c), (max_r, max_c) = get_bounding_box(blue_obj)\n            # get side length of blue rectangle\n            side_width = (max_r - min_r + 1) - (len([pt for pt in blue_obj if pt[0] == min_r]) -1)\n\n            # convert blue object to have yellow center and blue border\n            for r in range(min_r, max_r + 1):\n                for c in range(min_c, max_c + 1):\n                  # change every cell within bounding box to yellow\n                    output_grid[r,c] = 4\n            # create a blue frame of width `side_width`\n            # create outer bounds for frame based on the side_width and original bounding box\n            outer_min_r = min_r - side_width\n            outer_min_c = min_c - side_width\n            outer_max_r = max_r + side_width\n            outer_max_c = max_c + side_width\n\n            # set all within outer frame and not in original bounds to be blue.\n            for r in range(outer_min_r, outer_max_r + 1):\n              for c in range(outer_min_c, outer_max_c + 1):\n                if (r < min_r or r > max_r) or (c < min_c or c > max_c):\n                  # check bounds\n                  if 0 <= r < rows and 0 <= c < cols:\n                    output_grid[r,c] = 1\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 12541,
    "candidates_token_count": 1068,
    "total_token_count": 13609,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 13.256369,
  "response_file": "002-response.json"
}