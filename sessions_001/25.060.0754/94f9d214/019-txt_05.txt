import numpy as np

# Example data (replace with actual data from the task)
train_examples = [
    {
        "input": np.array([[0, 0, 0], [0, 3, 0], [0, 0, 0]]),
        "output": np.array([[0, 0, 0], [0, 2, 0], [0, 0, 0]]),
    },
    {
        "input": np.array([[0, 3, 0, 0], [0, 0, 0, 0], [0, 0, 0, 3]]),
        "output": np.array([[0, 2, 0, 0], [0, 0, 0, 0], [0, 0, 0, 2]]),
    },
    {
        "input": np.array([[0, 0, 0, 0], [0, 0, 3, 0], [0, 0, 0, 0]]),
        "output": np.array([[0, 0, 0, 0], [0, 0, 2, 0], [0, 0, 0, 0]]),
    },
    {
        "input": np.array([[0, 0, 0, 3], [0, 0, 0, 0], [3, 0, 0, 0], [0, 0, 0, 0]]),
        "output": np.array([[0, 0, 0, 2], [0, 0, 0, 0], [2, 0, 0, 0], [0, 0, 0, 0]]),
    }

]

for example_index, example in enumerate(train_examples):
    input_grid = example['input']
    output_grid = example['output']
    print(f"Example {example_index + 1}:")
    print(f"  Input shape: {input_grid.shape}")
    print(f"  Output shape: {output_grid.shape}")

    # Find unique colors in input and output
    input_colors = np.unique(input_grid)
    output_colors = np.unique(output_grid)
    print(f"  Input colors: {input_colors}")
    print(f"  Output colors: {output_colors}")

    # Check color changes
    for color in input_colors:
        if color in output_colors:
          if color != 3:
            print(f"  Color {color} present in both input and output.")
          else:
            print(f"    Color {color} present input, but not output unchanged.")
        else:
            print(f"  Color {color} only in input.")
    for color in output_colors:
        if color not in input_colors:
            print(f"  Color {color} only in output.")

    # Check where the changes happened.
    changes = input_grid != output_grid
    change_coords = np.where(changes)
    for row, col in zip(*change_coords):
      print(f"    Changed at: ({row}, {col}) from {input_grid[row,col]} to {output_grid[row,col]}")