import numpy as np

def analyze_results(task_examples, transform_function):
    results_summary = []
    for example in task_examples:
        input_grid = example['input']
        expected_output = example['output']
        actual_output = transform_function(input_grid)
        
        input_grid_np = np.array(input_grid)
        expected_output_np = np.array(expected_output)
        actual_output_np = np.array(actual_output)

        correct = np.array_equal(actual_output_np, expected_output_np)


        results_summary.append({
            'input_shape': input_grid_np.shape,
            'output_shape': expected_output_np.shape,
            'actual_output_shape': actual_output_np.shape,
            'correct': correct,
            'actual_output': actual_output_np.tolist(),
            'expected_output':expected_output

        })
    return results_summary

#Dummy data and function - need to replace with real data when available.
task_examples_dummy = [
    {'input': [[3, 3, 3, 3], [0, 3, 3, 0], [0, 0, 3, 3], [3, 0, 0, 0], [0,0,0,1],[0,0,0,1],[0,1,0,0],[1,0,0,1]], 'output': [[0, 0], [2, 0],[0,2]]},
    {'input': [[1, 1, 1, 1], [1, 1, 1, 1], [2, 2, 2, 2], [2, 2, 2, 2]], 'output': [[2, 2], [2, 2]]},
    {'input': [[0, 0, 0, 0], [0, 5, 5, 0], [0, 5, 5, 0], [0, 0, 0, 0]], 'output': [[0, 0], [0, 2]]}
]

def transform_dummy(input_grid):
    input_grid = np.array(input_grid)
    rows, cols = input_grid.shape
    output_grid = np.zeros((rows // 2, cols // 2), dtype=int)

    # Iterate through the input grid, checking for 2x2 squares.
    for i in range(rows - 1):
        for j in range(cols - 1):
            # Extract 2x2 subgrid
            subgrid = input_grid[i:i+2, j:j+2]

            # Check if all elements in the subgrid are the same
            if np.all(subgrid == subgrid[0, 0]):
                # Map the position to the output grid
                output_row = i // 2
                output_col = j // 2
                if output_row < output_grid.shape[0] and output_col < output_grid.shape[1]:
                  output_grid[output_row, output_col] = 2

    return output_grid.tolist()

analysis = analyze_results(task_examples_dummy, transform_dummy)
for a in analysis:
    print(a)