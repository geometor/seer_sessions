import numpy as np

def get_bounding_box(grid):
    """Finds the bounding box of the non-white pixels in a grid."""
    grid = np.array(grid)
    rows, cols = np.where(grid != 0)
    if len(rows) == 0:
        return None  # Handle cases with no non-white pixels

    min_row, min_col = np.min(rows), np.min(cols)
    max_row, max_col = np.max(rows), np.max(cols)
    return (min_row, min_col, max_row - min_row + 1, max_col - min_col + 1)

def transform(input_grid):
    """
    Extracts a 3x3 subgrid based on the bounding box of non-white pixels.
    """
    input_array = np.array(input_grid)
    bounding_box = get_bounding_box(input_array)

    if bounding_box:
        min_row, min_col, _, _ = bounding_box
        # Extract up to a 3x3 subgrid, handling boundary conditions
        output_grid = input_array[min_row:min_row+3, min_col:min_col+3]

    else: #if no bounding box, return all white
        output_grid = np.zeros((3, 3), dtype=int)

    # Pad with zeros if the extracted subgrid is smaller than 3x3.
    rows, cols = output_grid.shape
    if rows < 3 or cols < 3:
        padded_grid = np.zeros((3, 3), dtype=int)
        padded_grid[:rows,:cols] = output_grid
        output_grid = padded_grid

    return output_grid.tolist()

task = {
  "train": [
    {
      "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
      "output": [[8, 0, 0], [0, 8, 0], [0, 0, 8]]
    },
    {
      "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
      "output": [[0, 0, 0], [1, 0, 0], [0, 1, 0]]
    },
    {
      "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
      "output": [[0, 0, 0], [2, 0, 0], [0, 0, 2]]
    },
        {
      "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
      "output": [[0, 0, 0], [0, 3, 0], [0, 0, 3]]
    }

  ],
  "test": [
    {
      "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
      "output": [[4, 0, 0], [0, 4, 0], [0, 0, 4]]
    }
  ]
}

results = []
for example in task["train"]:
    input_grid = example["input"]
    expected_output = example["output"]
    actual_output = transform(input_grid)
    bounding_box = get_bounding_box(input_grid)
    results.append({
        "input_grid": input_grid,
        "expected_output": expected_output,
        "actual_output": actual_output,
        "bounding_box": bounding_box,
        "correct": actual_output == expected_output
    })

for i, result in enumerate(results):
    print(f"Example {i+1}:")
    print(f"  Input bounding box: {result['bounding_box']}")
    print(f"  Correct: {result['correct']}")