{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid by rotating a connected red (2) object 90 degrees clockwise and shifting it down by one row. Green (3) pixels remain in their original positions.\n\"\"\"\n\nimport numpy as np\n\ndef find_object(grid, color):\n    # Find coordinates of all pixels with the specified color.\n    coords = np.argwhere(grid == color)\n    return coords\n\ndef rotate_coords(coords):\n    # Rotate coordinates 90 degrees clockwise\n    if len(coords) == 0:\n        return np.array([])\n\n    #find top left\n    min_row = np.min(coords[:, 0])\n    min_col = np.min(coords[:, 1])\n    \n    rotated_coords = []\n\n    for r, c in coords:\n      new_r = (c - min_col) + min_row\n      new_c = -(r - min_row) + min_col\n      rotated_coords.append([new_r, new_c])\n    return np.array(rotated_coords)\n\n\n\ndef shift_down(coords, rows):\n    # Shift coordinates down by one row.\n    return coords + np.array([1, 0])\n\ndef transform(input_grid):\n    # Initialize output grid with the same dimensions and filled with white (0).\n    output_grid = np.zeros_like(input_grid)\n\n    # Find green and red pixels.\n    green_pixels = find_object(input_grid, 3)\n    red_pixels = find_object(input_grid, 2)\n\n    # Rotate red pixels.\n    rotated_red_pixels = rotate_coords(red_pixels)\n\n    #Shift down one row\n    shifted_red_pixels = shift_down(rotated_red_pixels, output_grid.shape[0])\n\n    # Place green pixels in the output grid.\n    for r, c in green_pixels:\n        output_grid[r, c] = 3\n\n    # Place rotated and shifted red pixels in the output grid, handling out-of-bounds errors.\n    for r, c in shifted_red_pixels:\n        if 0 <= r < output_grid.shape[0] and 0 <= c < output_grid.shape[1]:\n            output_grid[r, c] = 2\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5852,
    "candidates_token_count": 535,
    "total_token_count": 6387,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 5.424598,
  "response_file": "018-response.json"
}