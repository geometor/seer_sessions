{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid by rotating a connected red (2) object 90 degrees clockwise. Green (3) pixels remain in their original positions.\n\"\"\"\n\nimport numpy as np\n\ndef find_connected_objects(grid, color):\n    \"\"\"\n    Finds connected components of a given color in a grid.\n\n    Args:\n        grid: A numpy array representing the grid.\n        color: The color to find connected components for.\n\n    Returns:\n        A list of lists, where each inner list contains the coordinates of\n        a connected component.\n    \"\"\"\n    visited = set()\n    objects = []\n\n    def dfs(r, c, current_object):\n        if (r, c) in visited or not (0 <= r < grid.shape[0] and 0 <= c < grid.shape[1]) or grid[r, c] != color:\n            return\n        visited.add((r, c))\n        current_object.append((r, c))\n        dfs(r + 1, c, current_object)\n        dfs(r - 1, c, current_object)\n        dfs(r, c + 1, current_object)\n        dfs(r, c - 1, current_object)\n\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] == color and (r, c) not in visited:\n                current_object = []\n                dfs(r, c, current_object)\n                objects.append(current_object)\n    return objects\n\ndef rotate_object_90(object_coords):\n    \"\"\"Rotates a set of coordinates 90 degrees clockwise around its centroid.\"\"\"\n    if not object_coords:\n        return []\n\n    # Convert to numpy array for easier calculations\n    coords = np.array(object_coords)\n\n    # Calculate the centroid\n    centroid = coords.mean(axis=0)\n\n    # Rotate each point around the centroid\n    rotated_coords = []\n    for r, c in coords:\n        # Translate to origin, rotate, then translate back\n        translated_r = r - centroid[0]\n        translated_c = c - centroid[1]\n        rotated_r = translated_c + centroid[0]\n        rotated_c = -translated_r + centroid[1]\n        rotated_coords.append((rotated_r, rotated_c))\n\n    return rotated_coords\n\ndef transform(input_grid):\n    # Initialize output grid with the same dimensions, filled with white (0).\n    output_grid = np.zeros_like(input_grid)\n\n    # Find connected objects for green and red pixels.\n    green_objects = find_connected_objects(input_grid, 3)\n    red_objects = find_connected_objects(input_grid, 2)\n\n    # Place green pixels in the output grid (invariant).\n    for obj in green_objects:\n        for r, c in obj:\n            output_grid[int(r), int(c)] = 3\n\n    # Rotate red object (only one red object is expected).\n    for red_object in red_objects:  # Should ideally be just one\n       rotated_red_object = rotate_object_90(red_object)\n       for r, c in rotated_red_object:\n            r = int(round(r))  #important - round to the nearest integer\n            c = int(round(c))\n            if 0 <= r < output_grid.shape[0] and 0 <= c < output_grid.shape[1]:\n                output_grid[r,c] = 2\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4276,
    "candidates_token_count": 838,
    "total_token_count": 5114,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.945779,
  "response_file": "020-response.json"
}