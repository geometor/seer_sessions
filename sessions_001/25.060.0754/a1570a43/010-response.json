{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation rotates the red (2) block 90 degrees clockwise, \nwhile keeping the green (3) pixels in the same position.\n\"\"\"\n\nimport numpy as np\n\ndef get_red_block(grid):\n    # Find coordinates of all red pixels\n    red_pixels = np.argwhere(grid == 2)\n    return red_pixels\n\ndef rotate_coordinates(coords, center, angle_degrees):\n    # Rotate coordinates around a center point\n    angle_radians = np.radians(angle_degrees)\n    rotation_matrix = np.array([\n        [np.cos(angle_radians), -np.sin(angle_radians)],\n        [np.sin(angle_radians), np.cos(angle_radians)]\n    ])\n    centered_coords = coords - center\n    rotated_coords = np.dot(centered_coords, rotation_matrix)\n    return rotated_coords + center\n\ndef transform(input_grid):\n    # Initialize output grid with zeros\n    output_grid = np.zeros_like(input_grid)\n\n    # Get the red block coordinates\n    red_block = get_red_block(input_grid)\n\n    # Calculate the center of the grid (assuming it is the center of rotation)\n    center = np.array([input_grid.shape[0] // 2, input_grid.shape[1] // 2])\n\n    # Rotate the red block coordinates 90 degrees clockwise\n    rotated_red_block = rotate_coordinates(red_block, center, 90)\n\n    # Round the rotated coordinates and convert to integers to use as indices\n    rotated_red_block = np.round(rotated_red_block).astype(int)\n\n    # Place the rotated red block into the output grid\n    for x, y in rotated_red_block:\n        if 0 <= x < output_grid.shape[0] and 0 <= y < output_grid.shape[1]:  # Boundary check\n          output_grid[x, y] = 2\n\n    # Copy the green pixels to the output grid\n    green_pixels = np.argwhere(input_grid == 3)\n    for x, y in green_pixels:\n        output_grid[x, y] = 3\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 399,
            "end_index": 581,
            "uri": "https://mycodeuniverse.com/snowflake",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2353,
    "candidates_token_count": 518,
    "total_token_count": 2871,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 5.99194,
  "response_file": "010-response.json"
}