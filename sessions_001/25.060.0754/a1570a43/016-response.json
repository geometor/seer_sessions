{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid by rotating a cross shape formed by red (2) pixels 90 degrees clockwise and maintaining the positions of green (3) pixels. The bounding box of the red cross is shifted one pixel down.\n\"\"\"\n\nimport numpy as np\n\ndef find_object(grid, color):\n    # Find coordinates of all pixels with the specified color.\n    coords = np.argwhere(grid == color)\n    return coords\n\ndef rotate_cross(coords):\n    # Rotate the coordinates of red cross 90 degrees clockwise around its center.\n    if len(coords) == 0:\n      return []\n    \n    center = np.mean(coords, axis=0)\n    rotated_coords = []\n    for coord in coords:\n        # Translate to origin\n        x = coord[1] - center[1]\n        y = coord[0] - center[0]\n        # Rotate 90 degrees clockwise\n        new_x = -y\n        new_y = x\n        # Translate back to original position\n        rotated_coords.append([int(new_y + center[0]+1), int(new_x + center[1])])\n    return np.array(rotated_coords)\n\n\ndef transform(input_grid):\n    # Initialize output grid with the same dimensions and filled with white (0).\n    output_grid = np.zeros_like(input_grid)\n\n    # Find green and red pixels.\n    green_pixels = find_object(input_grid, 3)\n    red_pixels = find_object(input_grid, 2)\n    \n    #rotate and shift red pixels\n    rotated_red_pixels = rotate_cross(red_pixels)\n\n    # Place green pixels in the output grid.\n    for r, c in green_pixels:\n        output_grid[r, c] = 3\n\n    # Place rotated red pixels in the output grid, handling out-of-bounds errors.\n    for r, c in rotated_red_pixels:\n        if 0 <= r < output_grid.shape[0] and 0 <= c < output_grid.shape[1]:\n          output_grid[r,c] = 2\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2350,
    "candidates_token_count": 503,
    "total_token_count": 2853,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 5.996279,
  "response_file": "016-response.json"
}