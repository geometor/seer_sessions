{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:**\n    *   Find the contiguous \"red block\" (color 2).\n    *   Find all \"green pixels\" (color 3).\n\n2.  **Transformation Rule:**\n    *   If the green pixels form a surrounding frame and there is a single green pixel in the direct center of the red block, and the red block forms a horizontal line, the red block rotates 90 degrees clockwise around that center green pixel.\n    *  If the green pixels form a surrounding frame and the red block forms a horizontal line segment and its center aligns with a green center, rotate the segment.\n    *   If the green pixels form a surrounding frame and the red block is a vertical line, the red block translates horizontally such that its leftmost pixel aligns with the column where the original rightmost red pixel was present.\n    *   All green pixels remain in their original positions.\n\n3. **Output:** create a new grid with the red block after the transformation and preserve original green pixels\n\"\"\"\n\nimport numpy as np\n\ndef get_red_block(grid):\n    # Find coordinates of all red pixels\n    return np.argwhere(grid == 2)\n\ndef get_green_pixels(grid):\n    # Find coordinates of all green pixels\n    return np.argwhere(grid == 3)\n\ndef is_horizontal(coords):\n  #check that all coordinates are on the same row\n  return all([coords[0][0] == c[0] for c in coords])\n\ndef is_vertical(coords):\n    #check that all coordinates are on the same column\n    return all([coords[0][1] == c[1] for c in coords])\n\ndef rotate_90(coords, center):\n    # Rotate coordinates 90 degrees clockwise around a center point\n    centered_coords = coords - center\n    rotated_coords = np.array([[-y, x] for x, y in centered_coords])\n    return rotated_coords + center\n\ndef transform(input_grid):\n    # Initialize output grid with the green pixels in the same positions\n    output_grid = np.copy(input_grid)\n    output_grid[output_grid == 2] = 0 # remove original red\n\n    # Get the red block and green pixels coordinates\n    red_block = get_red_block(input_grid)\n    green_pixels = get_green_pixels(input_grid)\n\n    # 1. Horizontal line, single center green pixel\n    if is_horizontal(red_block) and len(red_block) > 1:\n      \n        #find center of the red block\n        min_x = min(red_block[:,0])\n        max_x = max(red_block[:,0])\n        min_y = min(red_block[:,1])\n        max_y = max(red_block[:,1])\n\n        center = np.array([(min_x + max_x)/2 , (min_y + max_y)/2])\n        \n        rotated_red_block = rotate_90(red_block, center)\n        rotated_red_block = np.round(rotated_red_block).astype(int) #convert back\n\n        #place back into array\n        for x, y in rotated_red_block:\n           if 0 <= x < output_grid.shape[0] and 0 <= y < output_grid.shape[1]:\n               output_grid[x,y] = 2\n\n    #3 vertical line translate horizontally\n    elif is_vertical(red_block) and len(red_block) > 1:\n        #get rightmost pixel coordinate column\n        rightmost_col = max(red_block[:,1])\n        #shift each x\n        \n        translated_red_block = []\n        for x,y in red_block:\n            new_y = rightmost_col\n            translated_red_block.append( (x,new_y) )\n\n        for x, y in translated_red_block:\n          if 0 <= x < output_grid.shape[0] and 0 <= y < output_grid.shape[1]:\n              output_grid[x,y]=2\n    \n    #else don't move anything\n    else:\n        for x, y in red_block:\n            output_grid[x,y] = 2\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5570,
    "candidates_token_count": 986,
    "total_token_count": 6556,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.318659,
  "response_file": "012-response.json"
}