import numpy as np

def analyze_example(input_grid, output_grid):
    """
    Analyzes a single input-output pair and generates a report.
    """
    rows, cols = input_grid.shape
    white_pixels_input = np.sum(input_grid == 0)
    red_pixels_input = np.sum(input_grid == 2)
    white_pixels_output = np.sum(output_grid == 0)
    red_pixels_output = np.sum(output_grid == 2)

    # Verify the rule
    rule_followed = True
    for r in range(rows):
        white_indices = np.where(input_grid[r, :] == 0)[0]
        if white_indices.size > 0:
            rightmost_white_index = white_indices[-1]
            for c in range(rightmost_white_index):
                if input_grid[r, c] == 2 and output_grid[r,c] != 0:
                    rule_followed = False
                    break

            if not rule_followed:
              break

        elif white_indices.size == 0:
          if not np.array_equal(input_grid[r,:], output_grid[r,:]):
            rule_followed = False
            break

    return {
        "rows": rows,
        "cols": cols,
        "white_pixels_input": white_pixels_input,
        "red_pixels_input": red_pixels_input,
        "white_pixels_output": white_pixels_output,
        "red_pixels_output": red_pixels_output,
        "rule_followed": rule_followed,
    }

#the input and output grids from the training examples
examples = [
([
    [4, 4, 0, 4, 4, 4, 4, 4, 4, 4],
    [4, 4, 4, 4, 4, 2, 4, 4, 0, 4],
    [4, 4, 4, 4, 4, 4, 4, 4, 4, 4],
    [4, 4, 4, 4, 4, 2, 4, 4, 4, 4],
    [4, 4, 4, 4, 0, 4, 4, 4, 4, 4],
    [4, 4, 4, 4, 4, 4, 4, 4, 4, 2],
],
[
    [4, 4, 0, 4, 4, 4, 4, 4, 4, 4],
    [4, 4, 4, 4, 4, 0, 4, 4, 0, 4],
    [4, 4, 4, 4, 4, 4, 4, 4, 4, 4],
    [4, 4, 4, 4, 4, 2, 4, 4, 4, 4],
    [4, 4, 4, 4, 0, 4, 4, 4, 4, 4],
    [4, 4, 4, 4, 4, 4, 4, 4, 4, 2]
]),
([
    [4, 4, 4, 4, 4, 4, 4, 0, 4, 4],
    [4, 4, 4, 4, 4, 2, 2, 4, 2, 4],
    [4, 4, 4, 4, 4, 4, 4, 4, 4, 4],
    [4, 4, 4, 4, 0, 2, 4, 4, 4, 4],
],
[
    [4, 4, 4, 4, 4, 4, 4, 0, 4, 4],
    [4, 4, 4, 4, 4, 2, 2, 4, 2, 4],
    [4, 4, 4, 4, 4, 4, 4, 4, 4, 4],
    [4, 4, 4, 4, 0, 2, 4, 4, 4, 4],
]),
([
  [4, 4, 4, 4, 4, 4, 4, 4, 4, 4],
  [4, 4, 4, 4, 4, 2, 4, 4, 4, 4],
  [4, 4, 4, 4, 4, 4, 4, 4, 4, 4],
  [4, 4, 4, 4, 4, 2, 4, 0, 4, 4],
  [4, 4, 4, 4, 0, 4, 4, 4, 4, 4],
],
[
  [4, 4, 4, 4, 4, 4, 4, 4, 4, 4],
  [4, 4, 4, 4, 4, 2, 4, 4, 4, 4],
  [4, 4, 4, 4, 4, 4, 4, 4, 4, 4],
  [4, 4, 4, 4, 4, 0, 4, 0, 4, 4],
  [4, 4, 4, 4, 0, 4, 4, 4, 4, 4],
]),
([
    [0, 4, 4, 4, 4, 4, 4, 4, 4, 4],
    [4, 4, 4, 4, 4, 2, 4, 4, 4, 4],
    [4, 4, 4, 4, 4, 4, 4, 4, 4, 4],
    [4, 4, 4, 4, 4, 2, 4, 4, 4, 4],
],
[
    [0, 4, 4, 4, 4, 4, 4, 4, 4, 4],
    [4, 4, 4, 4, 4, 2, 4, 4, 4, 4],
    [4, 4, 4, 4, 4, 4, 4, 4, 4, 4],
    [4, 4, 4, 4, 4, 2, 4, 4, 4, 4],
]),
([
  [4, 4, 0, 4, 4, 4, 4, 4, 4, 4],
  [4, 4, 4, 4, 4, 2, 4, 4, 4, 4],
  [4, 4, 4, 4, 4, 4, 4, 4, 4, 4],
  [4, 4, 4, 4, 4, 2, 4, 4, 4, 4],
  [4, 4, 4, 4, 4, 4, 4, 4, 4, 2],
],
[
  [4, 4, 0, 4, 4, 4, 4, 4, 4, 4],
  [4, 4, 4, 4, 4, 2, 4, 4, 4, 4],
  [4, 4, 4, 4, 4, 4, 4, 4, 4, 4],
  [4, 4, 4, 4, 4, 2, 4, 4, 4, 4],
  [4, 4, 4, 4, 4, 4, 4, 4, 4, 2],
])
]

reports = []
for input_grid, output_grid in examples:
  report = analyze_example(np.array(input_grid), np.array(output_grid))
  reports.append(report)
print(reports)