import numpy as np

def find_grey_lines(grid):
    grey_lines = []
    for i, row in enumerate(grid):
        if all(pixel == 5 for pixel in row):
            grey_lines.append(i)
    return grey_lines

def process_section(input_section):
    output_section = np.zeros_like(input_section)
    for i, row in enumerate(input_section):
      output_section[i] = [5 if x == 5 else 0 for x in row]
      non_grey_non_zero = [x for x in row if x != 5 and x!= 0]
      
      j = 0
      for k in range(len(output_section[i])):
        if output_section[i][k] == 0:
          if (j < len(non_grey_non_zero)):
            output_section[i][k] = non_grey_non_zero[j]
            j += 1
    return output_section
      

def transform(input_grid):
    input_grid = np.array(input_grid)
    output_grid = np.zeros_like(input_grid)
    grey_lines = find_grey_lines(input_grid)
    
    # Process top section
    top_section = input_grid[:grey_lines[0]]
    output_grid[:grey_lines[0]] = process_section(top_section)
    
    # Copy first grey line
    output_grid[grey_lines[0]] = input_grid[grey_lines[0]]
    
    # Process middle section
    middle_section = input_grid[grey_lines[0]+1:grey_lines[1]]
    output_grid[grey_lines[0]+1:grey_lines[1]] = process_section(middle_section)
    
    # Copy second grey line
    output_grid[grey_lines[1]] = input_grid[grey_lines[1]]

    # Process bottom section
    bottom_section = input_grid[grey_lines[1]+1:]
    output_grid[grey_lines[1]+1:] = process_section(bottom_section)


    return output_grid.tolist()

def analyze_example(input_grid, output_grid, predicted_grid):
    input_grid = np.array(input_grid)
    output_grid = np.array(output_grid)
    predicted_grid = np.array(predicted_grid)

    grey_lines_input = find_grey_lines(input_grid)
    grey_lines_output = find_grey_lines(output_grid)
    grey_lines_predicted = find_grey_lines(predicted_grid)

    print(f"Input Grey Lines: {grey_lines_input}")
    print(f"Output Grey Lines: {grey_lines_output}")
    print(f"Predicted Grey Lines: {grey_lines_predicted}")
    print(f"Input Shape: {input_grid.shape}")
    print(f"Output Shape: {output_grid.shape}")
    print(f"Predicted Shape: {predicted_grid.shape}")
    
    correct = np.array_equal(output_grid, predicted_grid)
    print(f"Correct: {correct}")
    if not correct:
        diff = output_grid != predicted_grid
        print(f"Number of differing pixels = {np.sum(diff)}")
    # Additional analysis can be added here as needed (e.g., object counting)

# Example usage (replace with actual data from each example)
task_examples = task["train"]
for i in range(len(task_examples)):
    input_grid = task_examples[i]["input"]
    output_grid = task_examples[i]["output"]
    predicted_grid = transform(input_grid)
    print(f"--- Example {i+1} ---")
    analyze_example(input_grid, output_grid, predicted_grid)