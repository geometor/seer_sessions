{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Find Separators**: Identify all gray pixels (value 5) in the input grid. These act as horizontal and vertical separators.\n\n2.  **Define All Segments**: Create a list of all rectangular segments defined by all combinations of adjacent horizontal and vertical separators.  A segment is defined by its top-left and bottom-right corner coordinates.\n\n3.  **Iterate Through Segments**: For each segment in the list, from top to bottom and left to right:\n    *   Find the unique, non-zero, non-gray colors within the segment, recording the location (row, column) of the *first* appearance of each color (scanning top to bottom, then left to right).\n\n4.  **Iterate through horizontal separators** For each horizontal separator, find the associated segments.\n\n5.  **Copy Colors**: For each color found in a source segment, copy the color to the row *immediately below* the horizontal separator line that defines the lower boundary of the segment.\n    *   Maintain the *original column* of the color's first appearance within the source segment.\n    *   *Do not* overwrite gray pixels (value 5) in the destination row. If the target cell is gray, skip the copy for that cell.\n\n6.  **Preserve Separators:** All gray separator pixels from the input grid must be present in the output grid at their original positions.\n\n7.  **Clear Remnants:** After copying colors, all pixels in each segment that don't contain the copied colors or the gray separators, should be set to white color(value=0).\n\"\"\"\n\nimport numpy as np\n\ndef find_gray_separators(grid):\n    \"\"\"Finds the row and column indices of gray (5) pixels.\"\"\"\n    gray_pixels = np.where(grid == 5)\n    return gray_pixels[0], gray_pixels[1]\n\ndef define_segments(gray_rows, gray_cols):\n    \"\"\"Defines all segments based on horizontal and vertical separators.\"\"\"\n    horizontal_separators = sorted(list(set(gray_rows)))\n    vertical_separators = sorted(list(set(gray_cols)))\n    segments = []\n    for i in range(len(horizontal_separators)):\n        for j in range(len(vertical_separators)):\n          #get row start\n          row_start = 0 if i == 0 else horizontal_separators[i-1] + 1\n          #get row end\n          row_end = horizontal_separators[i]\n          #get col start\n          col_start = 0 if j == 0 else vertical_separators[j-1] +1\n          #get col end\n          col_end = vertical_separators[j]\n          segments.append(((row_start, col_start), (row_end, col_end)))\n    return segments\n\ndef get_segment_colors(grid, row_start, row_end, col_start, col_end):\n    \"\"\"Extracts unique colors and their first occurrence in a segment.\"\"\"\n    segment_colors = {}\n    for r in range(row_start, row_end):\n        for c in range(col_start, col_end):\n            color = grid[r, c]\n            if color != 0 and color != 5 and color not in segment_colors:\n                segment_colors[color] = (r, c)  # Store first occurrence\n    return segment_colors\n\ndef transform(input_grid):\n    # Initialize output grid with zeros.\n    output_grid = np.zeros_like(input_grid)\n    rows, cols = input_grid.shape\n\n    # Find gray separator positions.\n    gray_rows, gray_cols = find_gray_separators(input_grid)\n\n    # Preserve gray separators in the output grid.\n    for r, c in zip(gray_rows, gray_cols):\n        output_grid[r, c] = 5\n\n    # Define all segments.\n    segments = define_segments(gray_rows, gray_cols)\n    horizontal_separators = sorted(list(set(gray_rows)))\n\n    #create dictionary to hold segments by horizontal separator\n    segments_by_h_sep = {}\n    for h_sep in horizontal_separators:\n      segments_by_h_sep[h_sep] = []\n\n    #add segments\n    for segment in segments:\n      segments_by_h_sep[segment[1][0]].append(segment)\n\n    # Iterate through horizontal separators and segments.\n    for h_sep in horizontal_separators:\n        dest_row = h_sep + 1\n        if dest_row < rows: # Check if destination row is valid\n            for segment in segments_by_h_sep[h_sep]:\n              # Extract color information from each segment.\n              row_start, col_start = segment[0]\n              row_end, col_end = segment[1]              \n              segment_colors = get_segment_colors(input_grid, row_start, row_end, col_start, col_end)\n\n              # Copy colors to the destination row.\n              for color, (orig_r, orig_c) in segment_colors.items():\n                  if output_grid[dest_row, orig_c] == 0:  # Don't overwrite gray\n                      output_grid[dest_row, orig_c] = color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4894,
    "candidates_token_count": 1221,
    "total_token_count": 6115,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.014921,
  "response_file": "030-response.json"
}