import numpy as np

def transform(input_grid):
    # initialize output_grid
    output_grid = np.copy(input_grid)
    rows, cols = input_grid.shape

    # Find columns containing gray pixels
    gray_columns = set()
    for r in range(rows):
        for c in range(cols):
            if input_grid[r, c] == 5:
                gray_columns.add(c)

    # Iterate through the grid and apply the transformation
    for r in range(rows):
        for c in range(cols):
            # Maintain gray pixels
            if input_grid[r, c] == 5:
                continue  # Already gray, no change needed
            # Maintain non-gray pixels in gray columns
            elif c in gray_columns:
                continue # Pixel in same column as gray, no change
            # Replace other pixels with gray
            else:
                output_grid[r, c] = 5

    return output_grid

def compare_grids(grid1, grid2):
    if grid1.shape != grid2.shape:
        return "Different Shapes"
    else:
        return np.array_equal(grid1, grid2)

# Task examples (replace with actual data from the task)
examples = [
    {
        'input': np.array([[8, 5, 8, 8, 8, 8, 8, 8, 5, 5],
                           [8, 5, 8, 8, 8, 8, 8, 8, 5, 5],
                           [8, 5, 8, 8, 8, 8, 8, 8, 5, 5],
                           [8, 5, 8, 8, 8, 8, 8, 8, 5, 5],
                           [8, 5, 8, 8, 8, 8, 8, 8, 5, 5],
                           [8, 5, 8, 8, 8, 8, 8, 8, 5, 5],
                           [8, 5, 8, 8, 8, 8, 8, 8, 5, 5],
                           [8, 5, 8, 8, 8, 8, 8, 8, 5, 5],
                           [8, 5, 8, 8, 8, 8, 8, 8, 5, 5],
                           [8, 5, 8, 8, 8, 8, 8, 8, 5, 5]]),
        'output': np.array([[5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                            [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                            [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                            [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                            [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                            [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                            [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                            [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                            [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                            [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]]),
    },
    {
        'input': np.array([[8, 5, 8, 8, 8, 8, 8, 8, 5, 5],
                           [8, 5, 8, 8, 8, 8, 8, 8, 5, 5],
                           [8, 5, 8, 8, 8, 8, 8, 8, 5, 5],
                           [8, 5, 8, 8, 8, 8, 8, 8, 5, 5],
                           [8, 5, 8, 8, 8, 8, 8, 8, 5, 5],
                           [8, 5, 8, 8, 8, 8, 8, 8, 5, 5],
                           [8, 5, 8, 8, 8, 8, 8, 8, 5, 5],
                           [8, 5, 8, 8, 8, 8, 8, 8, 5, 5],
                           [8, 5, 8, 8, 8, 8, 8, 8, 5, 5],
                           [8, 5, 8, 8, 8, 8, 8, 8, 5, 5]]),
        'output': np.array([[8, 5, 8, 8, 8, 8, 8, 8, 5, 5],
                            [8, 5, 8, 8, 8, 8, 8, 8, 5, 5],
                            [8, 5, 8, 8, 8, 8, 8, 8, 5, 5],
                            [8, 5, 8, 8, 8, 8, 8, 8, 5, 5],
                            [8, 5, 8, 8, 8, 8, 8, 8, 5, 5],
                            [8, 5, 8, 8, 8, 8, 8, 8, 5, 5],
                            [8, 5, 8, 8, 8, 8, 8, 8, 5, 5],
                            [8, 5, 8, 8, 8, 8, 8, 8, 5, 5],
                            [8, 5, 8, 8, 8, 8, 8, 8, 5, 5],
                            [8, 5, 8, 8, 8, 8, 8, 8, 5, 5]]),
    },
   {
        'input': np.array([[5, 1, 5, 5, 1, 5, 5, 5, 1, 5],
                           [5, 1, 5, 5, 1, 5, 5, 5, 1, 5],
                           [5, 1, 5, 5, 1, 5, 5, 5, 1, 5],
                           [5, 1, 5, 5, 1, 5, 5, 5, 1, 5],
                           [5, 1, 5, 5, 1, 5, 5, 5, 1, 5],
                           [5, 1, 5, 5, 1, 5, 5, 5, 1, 5],
                           [5, 1, 5, 5, 1, 5, 5, 5, 1, 5],
                           [5, 1, 5, 5, 1, 5, 5, 5, 1, 5],
                           [5, 1, 5, 5, 1, 5, 5, 5, 1, 5],
                           [5, 1, 5, 5, 1, 5, 5, 5, 1, 5]]),
        'output': np.array([[5, 1, 5, 5, 1, 5, 5, 5, 1, 5],
                            [5, 1, 5, 5, 1, 5, 5, 5, 1, 5],
                            [5, 1, 5, 5, 1, 5, 5, 5, 1, 5],
                            [5, 1, 5, 5, 1, 5, 5, 5, 1, 5],
                            [5, 1, 5, 5, 1, 5, 5, 5, 1, 5],
                            [5, 1, 5, 5, 1, 5, 5, 5, 1, 5],
                            [5, 1, 5, 5, 1, 5, 5, 5, 1, 5],
                            [5, 1, 5, 5, 1, 5, 5, 5, 1, 5],
                            [5, 1, 5, 5, 1, 5, 5, 5, 1, 5],
                            [5, 1, 5, 5, 1, 5, 5, 5, 1, 5]]),
    },
    {
        'input': np.array([[5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                           [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                           [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                           [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                           [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                           [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                           [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                           [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                           [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                           [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]]),
        'output': np.array([[5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                           [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                           [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                           [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                           [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                           [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                           [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                           [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                           [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                           [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]]),
    }
]

results = []
for example in examples:
  transformed_grid = transform(example['input'])
  comparison_result = compare_grids(transformed_grid, example['output'])
  results.append(
      {
          "input_shape": example['input'].shape,
          "output_shape": example['output'].shape,
          "match": comparison_result,
          "transformed_grid": transformed_grid.tolist()
      }
    )
print (results)