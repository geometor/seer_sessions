import numpy as np

def find_plus_shapes(grid, color):
    plus_centers = []
    rows, cols = grid.shape
    for r in range(1, rows - 1):
        for c in range(1, cols - 1):
            if (grid[r, c] == color and
                grid[r - 1, c] == color and
                grid[r + 1, c] == color and
                grid[r, c - 1] == color and
                grid[r, c + 1] == color):
                plus_centers.append((r, c))
    return plus_centers

def analyze_grid(grid):
    blue_plus_centers = find_plus_shapes(grid, 1)
    red_plus_centers = find_plus_shapes(grid, 2)
    rows, cols = grid.shape
    
    valid_blue_plus_centers = []
    for r, c in blue_plus_centers:
        if 1 <= r < rows - 1 and 1 <= c < cols - 1:
           valid_blue_plus_centers.append((r,c))

    return {
        'grid_shape': grid.shape,
        'blue_plus_count': len(blue_plus_centers),
        'red_plus_count': len(red_plus_centers),
        'valid_blue_plus_centers': valid_blue_plus_centers,
    }

task_data = {
    'train': [
        {'input': [[5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 0, 0, 0, 1, 0, 0, 0, 0, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 0, 1, 0, 1, 0, 1, 0, 0, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 0, 0, 0, 1, 0, 0, 0, 0, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]], 'output': [[5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 0, 0, 0, 2, 0, 0, 0, 0, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 0, 1, 0, 2, 0, 1, 0, 0, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 0, 0, 0, 2, 0, 0, 0, 0, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]]},
        {'input': [[5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 0, 1, 0, 1, 0, 1, 0, 0, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]], 'output': [[5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 0, 1, 0, 1, 0, 1, 0, 0, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]]},
        {'input': [[5, 5, 5, 5, 5, 5, 5], [5, 0, 0, 0, 0, 0, 5], [5, 0, 1, 0, 0, 0, 5], [5, 0, 0, 0, 0, 0, 5], [5, 0, 1, 0, 1, 0, 5], [5, 0, 0, 0, 0, 0, 5], [5, 0, 0, 0, 1, 0, 5], [5, 0, 0, 0, 0, 0, 5], [5, 5, 5, 5, 5, 5, 5]], 'output': [[5, 5, 5, 5, 5, 5, 5], [5, 0, 0, 0, 0, 0, 5], [5, 0, 1, 0, 0, 0, 5], [5, 0, 0, 0, 0, 0, 5], [5, 0, 1, 0, 1, 0, 5], [5, 0, 0, 0, 0, 0, 5], [5, 0, 0, 0, 1, 0, 5], [5, 0, 0, 0, 0, 0, 5], [5, 5, 5, 5, 5, 5, 5]]},
        {'input': [[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]], 'output': [[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]]},
        ],
    'test': [
        {'input': [[5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 0, 1, 0, 1, 0, 0, 0, 0, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 0, 0, 0, 1, 0, 0, 0, 0, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]]},
        ]
}

train_results = []
for example in task_data['train']:
    train_results.append(analyze_grid(np.array(example['input'])))

print(train_results)