import numpy as np

def analyze_example(input_grid, output_grid):
    input_grid = np.array(input_grid)
    output_grid = np.array(output_grid)
    rows, cols = input_grid.shape

    # Identify the core region (remove potential azure border, if it exists)
    if 8 in [input_grid[0,0], input_grid[0,-1], input_grid[-1,0], input_grid[-1,-1]]:
        core_grid = input_grid[1:rows-1, 1:cols-1]
    else:
        core_grid = input_grid
        
    core_rows, core_cols = core_grid.shape
    
    output_rows, output_cols = output_grid.shape

    report = {
        'input_shape': (rows, cols),
        'core_shape': (core_rows, core_cols),
        'output_shape':(output_rows, output_cols),
        'output_mapping': []
    }
    
    for i in range(output_rows):
        for j in range(output_cols):
            #input block size is always core size / output size, and it is an integer, so the division is safe.
            block = input_grid[i*(rows//output_rows):(i+1)*(rows//output_rows), j*(cols//output_cols):(j+1)*(cols//output_cols)]
            has_magenta = 6 in block
            output_color = output_grid[i,j]
            report['output_mapping'].append({
                'output_coords': (i, j),
                'input_block_shape': block.shape,
                'has_magenta': has_magenta,
                'output_color': output_color
            })

    return report

#Provided examples from prompt history
examples = [
    ([
        [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
        [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8],
        [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8],
        [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8],
        [8, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 8],
        [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8],
        [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8],
        [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8],
        [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8],
        [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8],
        [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]
    ], [
        [0, 0, 0],
        [0, 1, 0],
        [0, 0, 0]
    ]),
    ([
        [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
        [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8],
        [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8],
        [8, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 8],
        [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8],
        [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8],
        [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8],
        [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]
    ], [
        [0, 0, 0],
        [1, 0, 0],
        [0, 0, 0]
    ]),
    ([
        [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
        [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8],
        [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8],
        [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8],
        [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8],
        [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8],
        [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 8],
        [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]
    ], [
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 1]
    ]),
    ([
        [8,8,8,8,8,8],
        [8,6,0,0,0,8],
        [8,0,0,0,0,8],
        [8,0,0,0,0,8],
        [8,8,8,8,8,8]],
     [[1,0],
      [0,0]]
    )
]

reports = []
for input_grid, output_grid in examples:
    reports.append(analyze_example(input_grid, output_grid))

for i, report in enumerate(reports):
    print(f"Example {i+1}:")
    print(report)
    print("-" * 20)