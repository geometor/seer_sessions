import numpy as np

def transform(input_grid):
    """
    Transforms the input grid to the output grid based on the presence of orange.
    """
    # Initialize output_grid
    output_grid = np.zeros((3, 3), dtype=int)

    # Check for orange (7) in the input grid
    orange_present = 7 in input_grid

    # Conditional Fill
    if orange_present:
        # Fill the corner and center pixels of output grid with orange (7)
        output_grid[0, 0] = 7
        output_grid[0, 2] = 7
        output_grid[1, 1] = 7
        output_grid[2, 0] = 7
        output_grid[2, 2] = 7
        # The rest of the pixels are already initialized to 0 (white)
    else:
        # All pixels remain 0 (white) as initialized
        pass

    return output_grid

# Example data (replace with your actual task data)
train_examples = [
    {
        "input": np.array([[0, 0, 0], [0, 7, 0], [0, 0, 0]]),
        "output": np.array([[7, 0, 7], [0, 7, 0], [7, 0, 7]]),
    },
    {
        "input": np.array([[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 7]]),
        "output": np.array([[7, 0, 7], [0, 7, 0], [7, 0, 7]]),
    },
    {
        "input": np.array([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]),
        "output": np.array([[0, 0, 0], [0, 0, 0], [0, 0, 0]]),
    },
    {
        "input": np.array([[7, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]),
        "output": np.array([[7, 0, 7], [0, 7, 0], [7, 0, 7]]),
    },
]
test_examples = [
    {
        "input": np.array([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 7, 0]]),
    },
    {
      "output": None
    }
]

def assess(examples,transform):
    results = []
    for i, example in enumerate(examples):
        input_grid = example["input"]
        expected_output = example.get("output",None)
        predicted_output = transform(input_grid)
        results.append(
            {
                "example": i,
                "orange_present": 7 in input_grid,
                "predicted_output": predicted_output.tolist(),
                "expected_output": expected_output.tolist() if expected_output is not None else "undefined",
                "match": np.array_equal(predicted_output, expected_output) if expected_output is not None else "undefined"
            }
        )
    return results

print("TRAIN RESULTS")
print(assess(train_examples, transform))
print("TEST RESULTS")
print(assess(test_examples, transform))