import numpy as np

def analyze_example(input_grid, expected_output, predicted_output):
    input_grid = np.array(input_grid)
    expected_output = np.array(expected_output)
    predicted_output = np.array(predicted_output)
    
    print("Input Grid:")
    print(input_grid)
    print("Expected Output Grid:")
    print(expected_output)
    print("Predicted Output Grid:")
    print(predicted_output)
    print("Shape - Input:", input_grid.shape)
    print("Shape - Expected:", expected_output.shape)
    print("Shape - Predicted:", predicted_output.shape)
    
    correct = np.array_equal(expected_output, predicted_output)
    print("Correct:", correct)
    if not correct:
        diff = expected_output != predicted_output
        print("Number of differences", np.sum(diff))
        print("Differences (Expected vs Predicted):")
        
        diff_indices = np.where(diff)
        for i in range(len(diff_indices[0])):
            row, col = diff_indices[0][i], diff_indices[1][i]
            print(f"  Row: {row}, Col: {col}, Expected: {expected_output[row, col]}, Predicted: {predicted_output[row, col]}")
    
# Example from the first training pair where result is false
task = {
    "train": [
        {
            "input": [[5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5]],
            "output": [[5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5]],
            "result": False
        },
        {
            "input": [[8, 5, 1, 5, 8, 5, 1], [3, 6, 8, 6, 3, 6, 8], [5, 3, 8, 3, 5, 3, 8], [2, 6, 2, 6, 2, 6, 2], [8, 5, 1, 5, 8, 5, 1], [3, 6, 8, 6, 3, 6, 8], [5, 3, 8, 3, 5, 3, 8]],
            "output": [[5, 8, 5, 1, 5, 8, 5], [6, 3, 6, 8, 6, 3, 6], [3, 5, 3, 8, 3, 5, 3], [6, 2, 6, 2, 6, 2, 6], [5, 8, 5, 1, 5, 8, 5], [6, 3, 6, 8, 6, 3, 6], [3, 5, 3, 8, 3, 5, 3]],
            "result": True
        },
        {
            "input": [[6, 6, 6, 5, 6, 6, 6], [6, 6, 6, 5, 6, 6, 6], [6, 6, 6, 5, 6, 6, 6], [5, 5, 5, 5, 5, 5, 5], [6, 6, 6, 5, 6, 6, 6], [6, 6, 6, 5, 6, 6, 6], [6, 6, 6, 5, 6, 6, 6]],
            "output": [[6, 6, 6, 5, 6, 6, 6], [6, 6, 6, 5, 6, 6, 6], [6, 6, 6, 5, 6, 6, 6], [5, 5, 5, 5, 5, 5, 5], [6, 6, 6, 5, 6, 6, 6], [6, 6, 6, 5, 6, 6, 6], [6, 6, 6, 5, 6, 6, 6]],
            "result": False
        },
        {
            "input": [[5, 8, 8, 8, 5, 8, 8], [8, 5, 8, 8, 8, 5, 8], [8, 8, 5, 8, 8, 8, 5], [8, 8, 8, 5, 8, 8, 8], [5, 8, 8, 8, 5, 8, 8], [8, 5, 8, 8, 8, 5, 8], [8, 8, 5, 8, 8, 8, 5]],
            "output": [[8, 5, 8, 8, 8, 5, 8], [5, 8, 8, 8, 5, 8, 8], [8, 8, 8, 5, 8, 8, 8], [8, 8, 5, 8, 8, 8, 5], [8, 5, 8, 8, 8, 5, 8], [5, 8, 8, 8, 5, 8, 8], [8, 8, 8, 5, 8, 8, 8]],
            "result": True
        }
    ]
}

analyze_example(task['train'][0]['input'], task['train'][0]['output'], transform(np.array(task['train'][0]['input'])))
analyze_example(task['train'][2]['input'], task['train'][2]['output'], transform(np.array(task['train'][2]['input'])))
