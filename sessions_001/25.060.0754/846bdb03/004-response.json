{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation extracts the connected red, the adjacent blue, and the specific yellow pixels from the input grid, maintaining their relative positions (though scaled down), and discards everything else. It then reconstructs a smaller grid based on these extracted elements. The program focuses on specific color clusters and their spatial relationship within the structure.\n\"\"\"\n\nimport numpy as np\n\ndef find_object(grid, color):\n    \"\"\"Finds coordinates of pixels of a specific color.\"\"\"\n    coords = np.argwhere(grid == color)\n    return coords\n\ndef extract_connected_component(grid, start_coord, color):\n    \"\"\"Extracts a connected component of a given color using Breadth-First Search.\"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n    component = []\n    queue = [tuple(start_coord)]\n\n    while queue:\n        r, c = queue.pop(0)\n        if 0 <= r < rows and 0 <= c < cols and grid[r, c] == color and not visited[r, c]:\n            visited[r, c] = True\n            component.append((r, c))\n            # Add adjacent cells to the queue\n            queue.extend([(r + 1, c), (r - 1, c), (r, c + 1), (r, c - 1)])\n    return np.array(component)\n\ndef get_corners(grid):\n     \"\"\"returns the coordinates for the 4 corners of the grid\"\"\"\n     rows, cols = grid.shape\n     return [(0,0), (0, cols-1), (rows-1, 0), (rows-1, cols-1)]\n \n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.zeros((6, 8), dtype=int)\n    \n    # 1. Identify Key Structures\n    red_pixels = find_object(input_grid, 2)\n    blue_pixels = find_object(input_grid, 1)\n    yellow_pixels = find_object(input_grid, 4)\n\n    #2 & 3. extract connected components\n    if len(red_pixels) > 0:\n      red_component = extract_connected_component(input_grid, red_pixels[0], 2)\n      #normalize and add to output\n      min_red_row = np.min(red_component[:, 0])\n      min_red_col = np.min(red_component[:, 1])\n      for r, c in red_component:\n          output_grid[r - min_red_row, c - min_red_col] = 2\n    \n    if len(blue_pixels) > 0:\n      #find blue pixel adjacent to red\n      start_blue = None\n      for br, bc in blue_pixels:\n          for rr, rc in red_component:\n              if abs(br - rr) + abs(bc - rc) == 1:\n                  start_blue = (br, bc)\n                  break\n          if start_blue:\n              break\n      if start_blue:\n\n        blue_component = extract_connected_component(input_grid, start_blue, 1)\n        min_blue_row = np.min(red_component[:, 0]) #use red component min\n        min_blue_col = np.min(red_component[:, 1])\n        for r, c in blue_component:\n          output_grid[r - min_blue_row, c-min_blue_col] = 1\n\n    # 4. Extract Yellow Corners\n    corners = get_corners(input_grid)\n\n    yellow_corners = []\n    for yr, yc in yellow_pixels:\n        if (yr,yc) in corners:\n            yellow_corners.append((yr,yc))\n    \n    out_corners = get_corners(output_grid)\n\n    #find yellow at bottom of red structure\n    max_red_row = 0\n    if len(red_pixels) > 0:\n      max_red_row = np.max(red_component[:,0])\n    for yr, yc in yellow_pixels:\n      if yr > max_red_row: #check below\n        yellow_corners.append((yr,yc))\n\n    if len(yellow_corners) >=2 :\n      for i in range(min(len(yellow_corners),len(out_corners))):\n        in_r, in_c = yellow_corners[i]\n        out_r, out_c = out_corners[i]\n\n        #check which corner and scale to output\n        if in_r == corners[0][0] and in_c == corners[0][1]: #top left\n            output_grid[out_corners[0]] = 4\n        if in_r == corners[1][0] and in_c == corners[1][1]:#top right\n            output_grid[out_corners[1]] = 4\n\n        if in_r == corners[2][0] and in_c == corners[2][1]:#bottom left - not in output\n            output_grid[out_corners[2]] = 0\n        if in_r == corners[3][0] and in_c == corners[3][1]:#bottom right\n            output_grid[out_corners[3]] = 4\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2779,
    "candidates_token_count": 1238,
    "total_token_count": 4017,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 12.729237,
  "response_file": "004-response.json"
}