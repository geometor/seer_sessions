{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation extracts the connected red component, the adjacent blue component, and specific yellow pixels from the input grid. It determines the output grid size dynamically based on the bounding box of the red and blue components and places these components, maintaining their relative positions. Yellow pixels are included based on specific criteria related to the other components.\n\"\"\"\n\nimport numpy as np\n\ndef find_object(grid, color):\n    \"\"\"Finds coordinates of pixels of a specific color.\"\"\"\n    return np.argwhere(grid == color)\n\ndef extract_connected_component(grid, start_coord, color):\n    \"\"\"Extracts a connected component of a given color using Breadth-First Search.\"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n    component = []\n    queue = [tuple(start_coord)]\n\n    while queue:\n        r, c = queue.pop(0)\n        if 0 <= r < rows and 0 <= c < cols and grid[r, c] == color and not visited[r, c]:\n            visited[r, c] = True\n            component.append((r, c))\n            # Add adjacent cells to the queue\n            queue.extend([(r + 1, c), (r - 1, c), (r, c + 1), (r, c - 1)])\n    return np.array(component)\n\ndef get_corners(grid):\n     \"\"\"returns the coordinates for the 4 corners of the grid\"\"\"\n     rows, cols = grid.shape\n     return [(0,0), (0, cols-1), (rows-1, 0), (rows-1, cols-1)]\n\ndef transform(input_grid):\n    # 1. Identify Components\n    red_pixels = find_object(input_grid, 2)\n    blue_pixels = find_object(input_grid, 1)\n    yellow_pixels = find_object(input_grid, 4)\n\n    # 2. Extract Red and Blue Components\n    red_component = []\n    if len(red_pixels) > 0:\n        red_component = extract_connected_component(input_grid, red_pixels[0], 2)\n\n    blue_component = []\n    if len(blue_pixels) > 0 and len(red_component) > 0:\n        # Find blue pixel adjacent to red\n        start_blue = None\n        for br, bc in blue_pixels:\n            for rr, rc in red_component:\n                if abs(br - rr) + abs(bc - rc) == 1:\n                    start_blue = (br, bc)\n                    break\n            if start_blue:\n                break\n        if start_blue:\n            blue_component = extract_connected_component(input_grid, start_blue, 1)\n\n    # 3. Determine Output Size\n    if len(red_component) > 0 or len(blue_component) > 0:\n        all_points = np.concatenate((red_component, blue_component))\n        min_row = np.min(all_points[:, 0])\n        max_row = np.max(all_points[:, 0])\n        min_col = np.min(all_points[:, 1])\n        max_col = np.max(all_points[:, 1])\n\n        output_rows = max_row - min_row + 1\n        output_cols = max_col - min_col + 1\n    else:\n      output_rows = 0\n      output_cols = 0\n\n    # Initialize output_grid\n    output_grid = np.zeros((output_rows, output_cols), dtype=int)\n\n\n    # 4. Place Red and Blue\n    if len(red_component) >0:\n      for r, c in red_component:\n          output_grid[r - min_row, c - min_col] = 2\n    if len(blue_component) > 0:\n      for r, c in blue_component:\n          output_grid[r - min_row, c - min_col] = 1\n\n    # 5. Determine Yellow Pixel Placement\n    corners = get_corners(input_grid)\n    out_corners = get_corners(output_grid) if (output_rows > 0 and output_cols > 0) else []\n\n    yellow_corners = []\n    for yr, yc in yellow_pixels:\n        if (yr, yc) in corners:\n            yellow_corners.append((yr, yc))\n\n    max_red_row = 0\n    if len(red_pixels) > 0:\n        max_red_row = np.max(red_component[:, 0])\n\n    for yr, yc in yellow_pixels:\n        if yr > max_red_row:  # Check below\n            yellow_corners.append((yr, yc))\n\n    if len(yellow_corners) >= 2 and len(out_corners) > 0:\n        for i in range(min(len(yellow_corners), len(out_corners))):\n            in_r, in_c = yellow_corners[i]\n            #check which corner and scale to output\n            if in_r == corners[0][0] and in_c == corners[0][1]: #top left\n                if len(out_corners) > 0: output_grid[out_corners[0]] = 4\n            if in_r == corners[1][0] and in_c == corners[1][1]:#top right\n                if len(out_corners) > 1: output_grid[out_corners[1]] = 4\n            if in_r == corners[2][0] and in_c == corners[2][1]:#bottom left - not in output\n                if len(out_corners) > 2: output_grid[out_corners[2]] = 0\n            if in_r == corners[3][0] and in_c == corners[3][1]:#bottom right\n                if len(out_corners) > 3: output_grid[out_corners[3]] = 4\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3288,
    "candidates_token_count": 1409,
    "total_token_count": 4697,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.321979,
  "response_file": "006-response.json"
}