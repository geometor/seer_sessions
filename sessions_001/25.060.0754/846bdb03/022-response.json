{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe input grid is transformed into a smaller output grid by extracting and simplifying colored regions. Yellow (4) regions are reduced to their corner pixels. Orange (7) and Green (3) regions are merged if vertically adjacent or overlapping, forming simplified, connected shapes. The final output grid is condensed, removing empty white rows and adjusting the width.\n\"\"\"\n\nimport numpy as np\n\ndef get_regions(grid, color):\n    regions = []\n    visited = set()\n\n    def is_valid(r, c):\n        return 0 <= r < grid.shape[0] and 0 <= c < grid.shape[1]\n\n    def dfs(row, col):\n        if (row, col) in visited or not is_valid(row, col) or grid[row, col] != color:\n            return []\n\n        visited.add((row, col))\n        region = [(row, col)]\n\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            region.extend(dfs(row + dr, col + dc))\n        \n        return region\n\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r,c] == color and (r,c) not in visited:\n                regions.append(dfs(r,c))\n\n    return regions\n\ndef transform(input_grid):\n    # initialize output_grid\n    \n    # 1. Identify Colored Regions.\n    yellow_regions = get_regions(input_grid, 4)\n    orange_regions = get_regions(input_grid, 7)\n    green_regions = get_regions(input_grid, 3)\n\n    # Find min/max rows/cols\n    min_row = input_grid.shape[0]\n    max_row = -1\n    min_col = input_grid.shape[1]\n    max_col = -1\n\n    all_colored_pixels = []\n\n    for region in yellow_regions:\n      for r,c in region:\n        all_colored_pixels.append((r,c))\n    for region in orange_regions:\n      for r,c in region:\n        all_colored_pixels.append((r,c))\n    for region in green_regions:\n      for r,c in region:\n        all_colored_pixels.append((r,c))\n\n\n    for r,c in all_colored_pixels:\n        min_row = min(min_row, r)\n        max_row = max(max_row, r)\n        min_col = min(min_col, c)\n        max_col = max(max_col, c)\n\n    \n    output_grid = np.zeros((max_row - min_row + 1, max_col - min_col+1), dtype=int)\n\n    # 2. Condense and Extract:\n\n    # Yellow (4): Extract corners\n    for region in yellow_regions:\n        rows, cols = zip(*region)  # Unzip the (row, col) pairs\n        \n        # Find corners\n        \n        top_row_pixels = [(r,c) for r,c in region if r == min(rows)]\n        bottom_row_pixels = [(r,c) for r,c in region if r == max(rows)]\n        left_col_pixels = [(r,c) for r,c in region if c == min(cols)]\n        right_col_pixels = [(r,c) for r,c in region if c == max(cols)]\n    \n        # find intersection between them to find conrners\n        corners = set(top_row_pixels).intersection(set(left_col_pixels))\n        corners = corners.union(set(top_row_pixels).intersection(set(right_col_pixels)))\n        corners = corners.union(set(bottom_row_pixels).intersection(set(left_col_pixels)))\n        corners = corners.union(set(bottom_row_pixels).intersection(set(right_col_pixels)))\n\n        for r,c in corners:\n          output_grid[r - min_row, c - min_col] = 4\n\n\n    # Orange and Green: Merge\n    combined_orange = []\n    for region in orange_regions:\n      combined_orange.extend(region)\n\n    combined_green = []\n    for region in green_regions:\n        combined_green.extend(region)\n\n    orange_rows, orange_cols = zip(*combined_orange) if combined_orange else ([],[])\n    if orange_rows:  # Make sure there are elements\n        min_orange_row, max_orange_row = min(orange_rows), max(orange_rows)\n        min_orange_col, max_orange_col = min(orange_cols), max(orange_cols)\n        for r in range(min_orange_row, max_orange_row + 1):\n            for c in range(min_orange_col, max_orange_col + 1):\n                if (r,c) in combined_orange:\n                    output_grid[r - min_row, c-min_col] = 7\n                \n    \n    green_rows, green_cols = zip(*combined_green) if combined_green else ([],[])\n    if green_rows:  # Make sure there are elements\n      min_green_row, max_green_row = min(green_rows), max(green_rows)\n      min_green_col, max_green_col = min(green_cols), max(green_cols)\n      for r in range(min_green_row, max_green_row + 1):\n          for c in range(min_green_col, max_green_col + 1):\n            if (r,c) in combined_green:\n              output_grid[r - min_row, c-min_col] = 3\n    \n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2744,
    "candidates_token_count": 1377,
    "total_token_count": 4121,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 13.467597,
  "response_file": "022-response.json"
}