{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation extracts the connected red component, the adjacent blue component, and a specific yellow pixel from the input grid. It determines the output grid size dynamically based on the bounding box of the red and blue components and places these components, maintaining their relative positions. The yellow pixel from the bottom-right corner of the input is copied to the bottom-right corner of the output.\n\"\"\"\n\nimport numpy as np\n\ndef find_object(grid, color):\n    \"\"\"Finds coordinates of pixels of a specific color.\"\"\"\n    return np.argwhere(grid == color)\n\ndef extract_connected_component(grid, start_coord, color):\n    \"\"\"Extracts a connected component of a given color using Breadth-First Search.\"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n    component = []\n    queue = [tuple(start_coord)]\n\n    while queue:\n        r, c = queue.pop(0)\n        if 0 <= r < rows and 0 <= c < cols and grid[r, c] == color and not visited[r, c]:\n            visited[r, c] = True\n            component.append((r, c))\n            # Add adjacent cells to the queue\n            queue.extend([(r + 1, c), (r - 1, c), (r, c + 1), (r, c - 1)])\n    return np.array(component)\n\ndef get_corners(grid):\n     \"\"\"returns the coordinates for the 4 corners of the grid\"\"\"\n     rows, cols = grid.shape\n     return [(0,0), (0, cols-1), (rows-1, 0), (rows-1, cols-1)]\n\ndef transform(input_grid):\n    # 1. Identify Components\n    red_pixels = find_object(input_grid, 2)\n    blue_pixels = find_object(input_grid, 1)\n\n    # 2. Extract Red and Blue Components\n    red_component = []\n    if len(red_pixels) > 0:\n        red_component = extract_connected_component(input_grid, red_pixels[0], 2)\n\n    blue_component = []\n    if len(blue_pixels) > 0 and len(red_component) > 0:\n        # Find blue pixel adjacent to red\n        start_blue = None\n        for br, bc in blue_pixels:\n            for rr, rc in red_component:\n                if abs(br - rr) + abs(bc - rc) == 1:\n                    start_blue = (br, bc)\n                    break\n            if start_blue:\n                break\n        if start_blue:\n            blue_component = extract_connected_component(input_grid, start_blue, 1)\n\n    # 3. Determine Output Size and Initialize\n    if len(red_component) > 0 or len(blue_component) > 0:\n        all_points = np.concatenate((red_component, blue_component))\n        min_row, max_row = np.min(all_points[:, 0]), np.max(all_points[:, 0])\n        min_col, max_col = np.min(all_points[:, 1]), np.max(all_points[:, 1])\n\n        output_rows = max_row - min_row + 1\n        output_cols = max_col - min_col + 1\n    else:\n        output_rows = 0\n        output_cols = 0\n    output_grid = np.zeros((output_rows, output_cols), dtype=int)\n\n    # 4. Place Red and Blue Components\n    if len(red_component) > 0:\n        for r, c in red_component:\n            output_grid[r - min_row, c - min_col] = 2\n    if len(blue_component) > 0:\n        for r, c in blue_component:\n            output_grid[r - min_row, c - min_col] = 1\n            \n    # 5. Handle Yellow Pixel (Bottom-Right Corner)\n    input_rows, input_cols = input_grid.shape\n    if input_grid[input_rows - 1, input_cols - 1] == 4 and output_rows > 0 and output_cols>0:\n        output_grid[output_rows - 1, output_cols - 1] = 4\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5281,
    "candidates_token_count": 1027,
    "total_token_count": 6308,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.151946,
  "response_file": "008-response.json"
}