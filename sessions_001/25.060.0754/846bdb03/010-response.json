{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid by cropping, selecting, and rearranging objects of color 3 (green), 8 (azure), and 4 (yellow).\nThe output grid's boundaries are determined by the positions of the yellow objects. The green object is moved to the right,\nthe azure object to the left, and the yellow objects remain in the top-left and bottom-left corners.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, colors):\n    objects = {}\n    for color in colors:\n        objects[color] = []\n        visited = np.zeros_like(grid, dtype=bool)\n        rows, cols = grid.shape\n        for r in range(rows):\n            for c in range(cols):\n                if grid[r, c] == color and not visited[r, c]:\n                    object_coords = []\n                    stack = [(r, c)]\n                    while stack:\n                        cr, cc = stack.pop()\n                        if 0 <= cr < rows and 0 <= cc < cols and grid[cr, cc] == color and not visited[cr, cc]:\n                            visited[cr, cc] = True\n                            object_coords.append((cr, cc))\n                            stack.extend([(cr + 1, cc), (cr - 1, cc), (cr, cc + 1), (cr, cc - 1)])\n                    objects[color].append(object_coords)\n    return objects\n\ndef get_yellow_boundary(objects):\n     yellow_coords = objects.get(4, [])\n     if len (yellow_coords) < 2:\n         return (0,0), (0,0)\n\n     min_row = min(coord[0] for obj in yellow_coords for coord in obj)\n     max_row = max(coord[0] for obj in yellow_coords for coord in obj)\n\n     min_col = min(coord[1] for obj in yellow_coords for coord in obj)\n     \n     first = None\n     second = None\n     for obj in yellow_coords:\n         for r,c in obj:\n             if first is None:\n                first = (r,c)\n             elif c < first[1]:\n                 second = first\n                 first = (r,c)\n             elif second is None:\n                 second = (r,c)\n             elif c < second[1]:\n                 second = (r,c)\n\n     if first[0] > second[0]:\n        first, second = second, first\n     \n     return first, second\n\ndef transform(input_grid):\n    # Find objects of interest (colors 3, 8, and 4)\n    objects = find_objects(input_grid, [3, 8, 4])\n\n    # Determine output grid boundaries based on yellow objects\n    yellow_top, yellow_bottom = get_yellow_boundary(objects)\n\n    min_col = yellow_top[1]\n    max_col = min_col + 7\n    \n    \n    min_row = yellow_top[0] # objects[4][0][0][0]\n    max_row = yellow_bottom[0]\n\n    output_height = max_row - min_row + 1\n    output_width = max_col - min_col + 1\n\n    # Initialize output grid with white (0)\n    output_grid = np.zeros((output_height, output_width), dtype=int)\n\n\n    # place yellow pixels\n    output_grid[0,0] = 4\n    output_grid[-1,0] = 4\n\n    # Reposition and resize green object (3) - brute force fitting\n    green_objects = objects.get(3, [])\n    green_row_offset = min_row\n    green_col_offset = max_col - input_grid.shape[1] + min_col\n    \n    for obj in green_objects:\n      for r,c in obj:\n        out_r = r - green_row_offset\n        out_c = c + green_col_offset\n        if 0 <= out_r < output_height and 0 <= out_c < output_width:\n            output_grid[out_r,out_c] = 3\n\n\n    # Reposition and resize azure pixels (8) - brute force fit\n    azure_objects = objects.get(8,[])\n    azure_col_offset = min_col\n    azure_row_offset = min_row\n    \n    for obj in azure_objects:\n      for r,c in obj:\n        out_r = r - azure_row_offset\n        out_c = c - azure_col_offset\n        \n        if 0 <= out_r < output_height and 0 <= out_c < output_width:\n          output_grid[out_r,out_c] = 8\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2684,
    "candidates_token_count": 1111,
    "total_token_count": 3795,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.406866,
  "response_file": "010-response.json"
}