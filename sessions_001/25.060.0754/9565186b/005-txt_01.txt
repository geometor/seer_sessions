import numpy as np

def describe_grid(grid):
    """Provides a concise description of a grid."""
    return {
        'shape': grid.shape,
        'unique_colors': np.unique(grid).tolist(),
        'color_counts': {color: int(np.sum(grid == color)) for color in np.unique(grid)}
    }

def compare_grids(grid1, grid2):
    """Compares two grids and returns a description of differences."""
    if grid1.shape != grid2.shape:
        return {'shape_mismatch': True, 'shape1': grid1.shape, 'shape2': grid2.shape}
    diff = grid1 != grid2
    if not np.any(diff):
        return {'identical': True}
    diff_coords = np.where(diff)
    diff_values = [(int(grid1[i, j]), int(grid2[i, j])) for i, j in zip(*diff_coords)]

    return {
        'identical': False,
        'diff_coords': diff_coords,
        'diff_values': diff_values,
        'num_diffs': len(diff_values)
    }
examples = task_data['train']
previous_code = """
import numpy as np

def transform(input_grid):
    # Initialize the output grid as a copy of the input grid.
    output_grid = np.copy(input_grid)
    
    # Iterate through each cell of the grid.
    for i in range(output_grid.shape[0]):
        for j in range(output_grid.shape[1]):
            # Check if the pixel is blue (1) or azure (8).
            if output_grid[i, j] == 1 or output_grid[i, j] == 8:
                # Replace the pixel with gray (5).
                output_grid[i, j] = 5
    
    return output_grid
"""

results = []
for i, example in enumerate(examples):
  input_grid = np.array(example['input'])
  output_grid = np.array(example['output'])
  transformed_grid = eval(previous_code.split('def transform')[1].split('return output_grid')[0]).strip() + '\n  return output_grid')(input_grid)

  example_data = {
      'example_index':i,
      'input': describe_grid(input_grid),
      'output': describe_grid(output_grid),
      'transformed' : describe_grid(transformed_grid),
      'comparison_original': compare_grids(input_grid, output_grid),
      'comparison_transformed': compare_grids(transformed_grid, output_grid)
  }
  results.append(example_data)

print(results)