import numpy as np

def analyze_grid(grid):
    grid = np.array(grid)
    rows, cols = grid.shape
    unique, counts = np.unique(grid, return_counts=True)
    pixel_counts = dict(zip(unique, counts))
    dominant_color = unique[np.argmax(counts)] if counts.size > 0 else None
    return {
        'rows': rows,
        'cols': cols,
        'pixel_counts': pixel_counts,
        'dominant_color': dominant_color
    }

examples = [
    {
        "input": [[1, 1, 8, 8, 8, 8], [1, 0, 8, 8, 8, 8], [1, 1, 9, 9, 9, 9], [0, 1, 9, 9, 9, 9]],
        "output": [[0, 8, 8], [1, 9, 9]]
    },
    {
        "input": [[1, 0, 0, 7, 7, 7, 7, 7], [0, 0, 0, 7, 7, 7, 7, 7], [0, 0, 0, 7, 7, 7, 7, 7], [0, 0, 0, 7, 7, 7, 7, 7], [0, 0, 0, 7, 7, 7, 7, 7]],
        "output": [[3, 7, 7, 7, 7], [3, 7, 7, 7, 7], [3, 7, 7, 7, 7], [3, 7, 7, 7, 7]]
    },
    {
       "input": [[6, 6, 6, 6, 6, 1, 0, 0], [6, 6, 6, 6, 6, 0, 0, 0], [6, 6, 6, 6, 6, 0, 0, 0], [6, 6, 6, 6, 6, 0, 0, 0], [6, 6, 6, 6, 6, 0, 0, 0]],
       "output": [[6, 6, 6, 6, 3], [6, 6, 6, 6, 3], [6, 6, 6, 6, 3], [6, 6, 6, 6, 3], [6, 6, 6, 6, 3]]
    },
]

analysis_results = []
for example in examples:
    input_analysis = analyze_grid(example['input'])
    output_analysis = analyze_grid(example['output'])
    analysis_results.append({
        'input': input_analysis,
        'output': output_analysis
    })

for i, result in enumerate(analysis_results):
    print(f"Example {i+1}:")
    print(f"  Input:  Rows={result['input']['rows']}, Cols={result['input']['cols']}, Pixel Counts={result['input']['pixel_counts']}, Dominant Color={result['input']['dominant_color']}")
    print(f"  Output: Rows={result['output']['rows']}, Cols={result['output']['cols']}, Pixel Counts={result['output']['pixel_counts']}, Dominant Color={result['output']['dominant_color']}")
