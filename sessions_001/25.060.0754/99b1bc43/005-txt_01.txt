import numpy as np

def analyze_results(examples, transform_function):
    results = []
    for i, example in enumerate(examples):
        input_grid = example['input']
        expected_output = example['output']
        predicted_output = transform_function(input_grid)
        correct = np.array_equal(np.array(predicted_output), np.array(expected_output))
        input_grid_np = np.array(input_grid)
        yellow_present = 4 in input_grid_np
        input_height, input_width = input_grid_np.shape
        output_height, output_width = np.array(expected_output).shape
        results.append({
            'example_index': i,
            'input_dims': (input_height, input_width),
            'output_dims':(output_height, output_width),
            'yellow_present': yellow_present,
            'correct': correct
        })
    return results

# You'll need to define `train` and `transform` with your example data and the transformation function.
# I've created dummy data here. Replace with your actual data.
train = [
  {'input': [[0, 0, 0, 0], [0, 4, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], 'output': [[3]]},
  {'input': [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 4], [0, 0, 4, 4]], 'output': [[0, 3], [3, 3]]},
    {'input': [[1, 1, 1, 4], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 'output': [[1,3],[1,1]]},
    {'input': [[1,4],[1,1]], 'output': [[3]]},
    {'input': [[4]], 'output': [[3]]}

]

import json
print(json.dumps(analyze_results(train, transform), indent=2))
