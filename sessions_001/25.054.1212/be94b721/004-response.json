{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Find all contiguous regions of non-white pixels in the input grid. Each of these regions is an \"object\".\n2.  **Select Target:** Examine the objects, excluding any objects that are adjacent to the edge of the input grid. If, after excluding these edge objects, there are no objects, then pick the largest.\n3.  **Isolate:** Discard all pixels that are not part of the target object.\n4.  **Compress:** Remove all white (value '0') rows and columns that contain *only* white pixels. Effectively shrinking the grid to the bounding box that tightly encloses the target object. The result is the output grid.\n\"\"\"\n\nimport numpy as np\nfrom scipy.ndimage import label\n\ndef find_objects(grid):\n    \"\"\"\n    Finds contiguous regions of non-white pixels and returns their coordinates and colors.\n    \"\"\"\n    labeled_grid, num_objects = label(grid != 0)\n    objects = []\n    for i in range(1, num_objects + 1):  # Label 0 is background\n        coords = np.argwhere(labeled_grid == i)\n        if len(coords) > 0:\n            color = grid[coords[0][0], coords[0][1]] #get color of first pixel\n            objects.append((coords, color))\n    return objects\n\ndef is_edge_object(grid, object_coords):\n    \"\"\"\n    Checks if an object is adjacent to the edge of the grid.\n    \"\"\"\n    rows = object_coords[:, 0]\n    cols = object_coords[:, 1]\n    return np.min(rows) == 0 or np.max(rows) == grid.shape[0] - 1 or \\\n           np.min(cols) == 0 or np.max(cols) == grid.shape[1] - 1\n\ndef get_object_size(object_coords):\n    \"\"\"Calculates the number of pixels in the object\"\"\"\n    return len(object_coords)\n\ndef compress_object(grid, object_coords):\n    \"\"\"\n    Compresses the grid to the bounding box of the object.\n    \"\"\"\n    if len(object_coords) == 0:\n        return np.zeros((0,0), dtype=int)\n\n    min_row = np.min(object_coords[:, 0])\n    max_row = np.max(object_coords[:, 0])\n    min_col = np.min(object_coords[:, 1])\n    max_col = np.max(object_coords[:, 1])\n\n    cropped_grid = grid[min_row:max_row + 1, min_col:max_col + 1]\n    return cropped_grid\n\ndef transform(input_grid):\n    # Convert input grid to a NumPy array\n    input_grid = np.array(input_grid)\n\n    # 1. Identify Objects\n    objects = find_objects(input_grid)\n\n    # 2. Select Target\n    non_edge_objects = [(coords, color) for coords, color in objects if not is_edge_object(input_grid, coords)]\n\n    if len(non_edge_objects) >0:\n      target_object_coords, target_color = non_edge_objects[0] #just pick the first one\n    elif len(objects) > 0: #there were no non-edge_objects, so re-consider\n      #select largest\n      largest_object_size = -1\n      target_object_coords = None\n\n      for coords, color in objects:\n            object_size = get_object_size(coords)\n            if object_size > largest_object_size:\n                largest_object_size = object_size\n                target_object_coords = coords\n                target_color = color\n    else: #no objects\n      return np.zeros((0, 0), dtype=int).tolist()\n\n    # 3. Isolate (implicitly done by selecting coordinates) and 4. Compress\n    output_grid = compress_object(input_grid, target_object_coords)\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3805,
    "candidates_token_count": 940,
    "total_token_count": 4745,
    "cached_content_token_count": 0
  },
  "response_time": 9.07944,
  "response_file": "004-response.json"
}