{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentify objects in the grid. If the object is an \"L\" shape, rotate the \"L\" shape 90 degrees clockwise. If the object is a diagonal, reflect it over the anti-diagonal.\n\"\"\"\n\nimport numpy as np\n\ndef get_object(grid):\n    \"\"\"\n    Extracts the non-zero object from the grid.  Assumes a single object.\n    Returns coordinates and color.\n    \"\"\"\n    coords = []\n    color = 0\n    for r, row in enumerate(grid):\n        for c, val in enumerate(row):\n            if val != 0:\n                coords.append((r, c))\n                color = val\n    return coords, color\n\ndef rotate_point(point, rows, cols):\n    \"\"\"Rotates a point 90 degrees clockwise around the center of the grid.\"\"\"\n    r, c = point\n    center_r = (rows - 1) / 2\n    center_c = (cols - 1) / 2\n    new_r = c - center_c + center_r\n    new_c = -(r - center_r) + center_c\n    return int(new_r), int(new_c)\n    \ndef is_L_shape(coords, rows, cols):\n    \"\"\"Checks if the coordinates form an L shape (regular or mirrored).\"\"\"\n\n    if len(coords) != 3:\n        return False\n\n    # Convert coords to numpy array for easier manipulation\n    coords_np = np.array(coords)\n\n    # Calculate differences between coordinates\n    diffs = np.diff(coords_np, axis=0)\n    \n    if len(diffs) < 2:\n        return False\n\n    # Check if the differences indicate an L shape\n    # An L-shape will have two segments. The segments should be orthogonal.\n    \n    # Check for orthogonality by verifying one of the differences is zero\n    if (diffs[0][0] == 0 or diffs[0][1] == 0) and (diffs[1][0] == 0 or diffs[1][1] == 0) :\n        if (diffs[0][0] == 0 and diffs[1][1] == 0) or (diffs[0][1] == 0 and diffs[1][0] == 0):\n           return True\n\n    return False\n\ndef is_diagonal(coords, rows, cols):\n    if len(coords) != rows:\n      return False\n    \n    coords_set = set(coords)\n    \n    # Check for main diagonal\n    is_main_diagonal = all((i, i) in coords_set for i in range(rows))\n    if is_main_diagonal:\n        return \"main\"\n    \n    # check for anti diagonal\n    is_anti_diagonal = all((i, cols - 1 - i) in coords_set for i in range(rows))\n    if is_anti_diagonal:\n        return \"anti\"\n    \n    return False\n    \n\ndef reflect_anti_diagonal(point, rows, cols):\n    r, c = point\n    return c, r\n\ndef transform(input_grid):\n    # Convert the input list of lists to a NumPy array.\n    input_np = np.array(input_grid)\n    rows, cols = input_np.shape\n    \n    # Get object coordinates and color\n    coords, color = get_object(input_grid)\n\n    # initialize output grid\n    output_np = np.zeros_like(input_np)\n    \n    if len(coords) == 0:\n        return output_np.tolist()\n\n    if is_L_shape(coords, rows, cols):\n        # Rotate L shape\n        new_coords = [rotate_point(p, rows, cols) for p in coords]\n        for r, c in new_coords:\n            if 0 <= r < rows and 0 <= c < cols:\n                output_np[r, c] = color\n    elif is_diagonal(coords, rows, cols) == \"anti\":\n        # flip across anti-diagonal:\n        new_coords = [reflect_anti_diagonal(p, rows, cols) for p in coords]\n        for r,c in new_coords:\n            output_np[r,c] = color\n    elif is_diagonal(coords, rows, cols) == \"main\":\n        new_coords = [reflect_anti_diagonal(p, rows, cols) for p in coords]\n        for r, c in new_coords:\n          output_np[r,c] = color\n    else:\n        # default - no change\n        for r, c in coords:\n          output_np[r,c] = color\n            \n    # Convert the NumPy array back to a list of lists.\n    output_grid = output_np.tolist()\n    \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2854,
    "candidates_token_count": 1121,
    "total_token_count": 3975,
    "cached_content_token_count": 0
  },
  "response_time": 10.693958,
  "response_file": "016-response.json"
}