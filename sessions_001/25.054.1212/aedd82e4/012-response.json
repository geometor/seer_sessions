{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentify all red pixels within the input grid.\nIdentify all white pixels.\nIdentify all white pixels that are *diagonally adjacent* to red pixels, traveling down and to the right *from* the red pixels.\nChange the color of the selected white pixels from white (0) to blue (1).\nPreserve the color and position of all other pixels (red and the remaining white).\n\"\"\"\n\nimport numpy as np\n\ndef get_red_pixels(grid):\n    # Find coordinates of all red pixels (value 2).\n    red_pixels = []\n    for row_idx, row in enumerate(grid):\n        for col_idx, pixel in enumerate(row):\n            if pixel == 2:\n                red_pixels.append((row_idx, col_idx))\n    return red_pixels\n\ndef get_white_pixels(grid):\n    # Find coordinates of all white pixels\n    white_pixels = []\n    for row_idx, row in enumerate(grid):\n        for col_idx, pixel in enumerate(row):\n            if pixel == 0:\n                white_pixels.append((row_idx, col_idx))\n    return white_pixels\n\ndef get_diagonally_adjacent_down_right(grid, red_pixels):\n    # Find white pixels diagonally adjacent (down-right) to red pixels.\n\n    adjacent_pixels = []\n    rows = len(grid)\n    cols = len(grid[0])\n\n    for r_row, r_col in red_pixels:\n      target_row = r_row + 1\n      target_col = r_col + 1\n\n      if 0 <= target_row < rows and 0 <= target_col < cols:\n          adjacent_pixels.append((target_row, target_col))\n    return adjacent_pixels\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n    \n    # Find red pixels.\n    red_pixels = get_red_pixels(input_grid)\n\n    # find white pixels\n    white_pixels = get_white_pixels(input_grid)\n    \n    # Find diagonally adjacent pixels\n    down_right_adjacent = get_diagonally_adjacent_down_right(input_grid, red_pixels)\n\n    # change output pixels\n    for row, col in down_right_adjacent:\n        if output_grid[row, col] == 0:\n           output_grid[row, col] = 1\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4598,
    "candidates_token_count": 575,
    "total_token_count": 5173,
    "cached_content_token_count": 0
  },
  "response_time": 4.473583,
  "response_file": "012-response.json"
}