{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies 2x2 red squares and partial 2x2 red squares (3 red pixels in a 2x2 area).\nTransforms red pixels to blue based on their adjacency to these squares.\n\"\"\"\n\nimport numpy as np\n\ndef find_2x2_squares(grid, color):\n    \"\"\"Finds all 2x2 squares of the specified color.\"\"\"\n    rows, cols = grid.shape\n    squares = []\n    for i in range(rows - 1):\n        for j in range(cols - 1):\n            if (grid[i, j] == color and\n                grid[i + 1, j] == color and\n                grid[i, j + 1] == color and\n                grid[i + 1, j + 1] == color):\n                squares.append((i, j))\n    return squares\n\ndef find_partial_2x2_squares(grid, color):\n    \"\"\"Finds instances where three pixels of the specified color form a corner of a 2x2 square.\"\"\"\n    rows, cols = grid.shape\n    partials = []\n    for i in range(rows - 1):\n        for j in range(cols - 1):\n            count = 0\n            if grid[i, j] == color:\n                count += 1\n            if grid[i + 1, j] == color:\n                count += 1\n            if grid[i, j + 1] == color:\n                count += 1\n            if grid[i + 1, j + 1] == color:\n                count += 1\n            if count == 3:\n                partials.append((i, j))\n    return partials\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on 2x2 and partial 2x2 red squares.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    red_squares = find_2x2_squares(output_grid, 2)\n    partial_red_squares = find_partial_2x2_squares(output_grid, 2)\n\n    # Handle complete 2x2 squares (Example 3 logic)\n    for i, j in red_squares:\n        output_grid[i + 1, j + 1] = 1\n\n    # Handle partial 2x2 squares (Examples 2 and 4 logic)\n    for i, j in partial_red_squares:\n        # Check which corner is missing and change adjacent red pixels accordingly.\n        if output_grid[i, j] != 2:  # Top-left missing\n            if i > 0 and output_grid[i - 1, j] == 2 :\n                output_grid[i-1,j] = 1\n            if j > 0 and output_grid[i,j-1] == 2:\n                output_grid[i,j-1] = 1\n        if output_grid[i + 1, j] != 2:  # Bottom-left missing\n            if i + 2 < output_grid.shape[0] and output_grid[i + 2, j] == 2:\n                 output_grid[i+2,j] = 1\n            if j > 0 and output_grid[i+1,j-1] ==2:\n                output_grid[i+1,j-1] = 1\n\n        if output_grid[i, j + 1] != 2:  # Top-right missing\n            if i > 0 and output_grid[i -1, j+1] == 2:\n                output_grid[i-1,j+1] = 1\n            if j + 2 < output_grid.shape[1] and output_grid[i, j+2] == 2:\n                output_grid[i,j+2] = 1\n        if output_grid[i + 1, j + 1] != 2:  # Bottom-right missing\n            if i + 2 < output_grid.shape[0] and output_grid[i+2,j+1] ==2:\n                output_grid[i + 2, j+1] = 1\n            if j + 2 < output_grid.shape[1] and output_grid[i+1,j+2] == 2:\n                output_grid[i+1,j+2] = 1\n    \n    # handle example 1\n    for i,j in red_squares:\n        if i>0 and output_grid[i-1,j] == 2:\n             output_grid[i-1,j]=1\n        if i>0 and output_grid[i-1,j+1] == 2:\n             output_grid[i-1,j+1]=1\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3068,
    "candidates_token_count": 1118,
    "total_token_count": 4186,
    "cached_content_token_count": 0
  },
  "response_time": 9.976899,
  "response_file": "016-response.json"
}