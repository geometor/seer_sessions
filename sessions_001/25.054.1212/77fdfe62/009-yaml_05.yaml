objects:
  input_grid:
    type: grid
    properties:
      rows: variable
      cols: variable
      corner_pixels:
        top_left:
          value: input_grid[0, 0]
        top_right:
          value: input_grid[0, cols - 1]
        bottom_left:
          value: input_grid[rows - 1, 0]
        bottom_right:
          value: input_grid[rows - 1, cols - 1]
  output_grid:
    type: grid
    properties:
      rows: "input_grid.rows // 2 if input_grid.rows //2 <=4 else 4"
      cols: "input_grid.cols // 2 if input_grid.cols //2 <=4 else 4"
      top_left_quadrant:
        value: input_grid.corner_pixels.top_left.value
      top_right_quadrant:
        value: input_grid.corner_pixels.top_right.value
      bottom_left_quadrant:
        value: input_grid.corner_pixels.bottom_left.value
      bottom_right_quadrant:
        value: input_grid.corner_pixels.bottom_right.value

actions:
  - extract_corner_pixels:
      from: input_grid
      to: output_grid
  - create_output_grid:
      shape: (4,4)
      fill: based on corner pixel values
      quadrant_filling: |
        Each corner pixel's color from the input grid fills the corresponding quadrant in the output grid.
