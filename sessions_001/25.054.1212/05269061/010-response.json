{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nCopies non-zero pixels from the input grid to the output grid,\nthen fills zero-valued pixels by repeating nearby non-zero color sequences.\n\"\"\"\n\nimport numpy as np\n\ndef get_sequences(input_grid):\n    \"\"\"\n    Identifies sequences of non-zero pixels in the input grid.\n    \"\"\"\n    rows, cols = input_grid.shape\n    sequences = []\n\n    # Horizontal sequences\n    for r in range(rows):\n        current_sequence = []\n        for c in range(cols):\n            if input_grid[r, c] != 0:\n                current_sequence.append((r, c, input_grid[r, c]))\n            elif current_sequence:\n                sequences.append(current_sequence)\n                current_sequence = []\n        if current_sequence:  # Handle sequences at the end of rows\n            sequences.append(current_sequence)\n\n    # Vertical sequences\n    for c in range(cols):\n        current_sequence = []\n        for r in range(rows):\n            if input_grid[r, c] != 0:\n                current_sequence.append((r, c, input_grid[r, c]))\n            elif current_sequence:\n                sequences.append(current_sequence)\n                current_sequence = []\n        if current_sequence: # Handle sequences at the end of columns.\n            sequences.append(current_sequence)\n    return sequences\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of input_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Get the initial sequences\n    sequences = get_sequences(input_grid)\n    \n    # Fill the 0 pixels\n    for r in range(rows):\n        for c in range(cols):\n            if output_grid[r,c] == 0:\n                #find closest sequence and continue it\n\n                best_sequence = None\n                min_dist = float('inf')\n\n                for seq in sequences:\n                    for r_seq, c_seq, val_seq in seq:\n                        dist = abs(r - r_seq) + abs(c-c_seq)\n                        if dist < min_dist:\n                            min_dist = dist\n                            best_sequence = seq\n\n                if best_sequence:\n                    #calculate index in sequence\n                    seq_len = len(best_sequence)\n\n                    #find closest element index\n                    closest_index = -1\n                    min_seq_dist = float('inf')\n                    for i in range(seq_len):\n                        r_seq, c_seq, _ = best_sequence[i]\n\n                        dist =  abs(r-r_seq) + abs(c-c_seq)\n\n                        if dist < min_seq_dist:\n                            min_seq_dist = dist\n                            closest_index = i\n                    \n                    # extend based on direction, calculate offset\n                    r_seq_start, c_seq_start, _ = best_sequence[0]\n                    \n                    if r_seq_start == best_sequence[-1][0]: #horizontal\n                        offset = c - c_seq_start\n                    elif c_seq_start == best_sequence[-1][1]: #vertical\n                        offset = r - r_seq_start\n                    else: # single element, repeat value\n                        offset = 0\n\n\n                    index = (closest_index + offset) % seq_len\n                    output_grid[r,c] = best_sequence[abs(index)][2]\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4342,
    "candidates_token_count": 813,
    "total_token_count": 5155,
    "cached_content_token_count": 0
  },
  "response_time": 8.947794,
  "response_file": "010-response.json"
}