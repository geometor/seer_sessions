{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify** the red (2) pixels in the input grid.\n2.  Change the color of the red pixel at the top right to blue (1).\n3.  Change to blue(1) all white pixels (0) to the left.\n4. **Identify** the red (2) pixel in the input grid that is at the bottom-left\n5.  **Flood Fill:** Starting from the bottom red (2) pixel, change all directly adjacent or diagonally adjacent white (0) pixels to blue (1). Continue this expansion until no more directly or diagonally adjacent white pixels can be changed to blue.\n6.  **Preserve:** The green (3) and azure (8) pixels remain unchanged in their original positions and colors.\n\"\"\"\n\nimport numpy as np\n\ndef find_pixels_by_color(grid, color):\n    return np.argwhere(grid == color)\n\ndef flood_fill(grid, start_row, start_col, target_color, replacement_color):\n    rows, cols = grid.shape\n    if grid[start_row, start_col] != target_color:\n        return\n\n    stack = [(start_row, start_col)]\n    while stack:\n        row, col = stack.pop()\n        if grid[row, col] == target_color:\n            grid[row, col] = replacement_color\n\n            # Check adjacent and diagonal cells\n            for dr in [-1, 0, 1]:\n                for dc in [-1, 0, 1]:\n                    if dr == 0 and dc == 0:\n                        continue\n                    nr, nc = row + dr, col + dc\n                    if 0 <= nr < rows and 0 <= nc < cols:\n                        stack.append((nr, nc))\n\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of input_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = output_grid.shape\n\n    # Find all red pixels\n    red_pixels = find_pixels_by_color(input_grid, 2)\n\n    # Find the top-rightmost red pixel\n    if len(red_pixels) > 0:\n        top_right_red = max(red_pixels, key=lambda item: (item[1], -item[0]))\n\n      # change the color of top_right_red\n        output_grid[top_right_red[0], top_right_red[1]] = 1\n\n        # change to blue all white pixels to the left\n        for c in range(top_right_red[1]-1, -1, -1):\n          if output_grid[top_right_red[0],c] == 0:\n            output_grid[top_right_red[0], c] = 1\n          else:\n             break # stop at first non-white\n\n    #find other red pixel that is not the top_right\n    for red_pixel in red_pixels:\n        if not np.array_equal(red_pixel, top_right_red):\n\n            # Flood fill from the other red pixel\n            flood_fill(output_grid, red_pixel[0], red_pixel[1], 0, 1)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2345,
    "candidates_token_count": 744,
    "total_token_count": 3089,
    "cached_content_token_count": 0
  },
  "response_time": 7.36202,
  "response_file": "008-response.json"
}