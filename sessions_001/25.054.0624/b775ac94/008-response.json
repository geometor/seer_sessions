{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by expanding colored blocks horizontally and vertically.  Each colored block is duplicated a number of times corresponding to the number of pixels in that color.\n\"\"\"\n\nimport numpy as np\n\ndef get_objects(grid):\n    \"\"\"\n    Finds contiguous blocks of non-zero pixels in the grid.\n    Returns a dictionary of objects, keyed by color, with their bounding box coordinates.\n    \"\"\"\n    objects = {}\n    visited = set()\n    rows, cols = grid.shape\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def dfs(r, c, color, coords):\n        if (r, c) in visited or not is_valid(r, c) or grid[r, c] != color:\n            return\n        visited.add((r, c))\n        coords.append((r, c))\n        for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            dfs(r + dr, c + dc, color, coords)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and (r, c) not in visited:\n                coords = []\n                dfs(r, c, grid[r, c], coords)\n                if grid[r,c] not in objects:\n                    objects[grid[r,c]] = []\n\n                objects[grid[r,c]].append(coords)\n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the expansion rules.\n    \"\"\"\n    # initialize output_grid\n    output_grid = np.zeros_like(input_grid)\n    rows, cols = input_grid.shape\n    objects = get_objects(input_grid)\n\n    # print(objects)\n\n    # Find objects by color\n    red_coords_list = objects.get(2, [])\n    green_coords_list = objects.get(3, [])\n    azure_coords_list = objects.get(8,[])\n    yellow_coords_list = objects.get(4,[])\n\n    \n    # iterate through all red coords\n    for red_coords in red_coords_list:\n        # Number of copies of pixels\n        red_count = len(red_coords)\n        # iterate through all coordinates of red object\n        for i in range(len(red_coords)):\n            # get coordinates of red pixel\n            rx,ry = red_coords[i]\n            # change output pixels to red color\n            for j in range(red_count):\n                output_grid[rx+j][ry]=2\n        \n        # iterate through azure pixels\n        for azure_coords in azure_coords_list:\n            # Number of copies of pixels\n            azure_count = len(azure_coords)\n            ax,ay = azure_coords[0]   \n            # if the azure color is connected to red then expand that color\n            if (rx == ax) and (ry+1==ay):\n                for i in range(len(red_coords)):\n                    rx,ry = red_coords[i]\n                    for j in range(azure_count):\n                        output_grid[rx+j][ry+azure_count]=8\n\n\n    for green_coords in green_coords_list:\n        green_count = len(green_coords)\n        for i in range(len(green_coords)):\n            gx,gy = green_coords[i]\n            for j in range(green_count):\n                output_grid[gx+j][gy]=3\n        \n        for yellow_coords in yellow_coords_list:\n            # Number of copies of pixels\n            yellow_count = len(yellow_coords)\n            yx,yy = yellow_coords[0]   \n            # if the azure color is connected to red then expand that color\n            if (gx == yx) and (gy-1==yy):\n                for i in range(len(green_coords)):\n                    gx,gy = green_coords[i]\n                    for j in range(yellow_count):\n                        output_grid[gx+j][gy-yellow_count]=4\n        \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3685,
    "candidates_token_count": 976,
    "total_token_count": 4661,
    "cached_content_token_count": 0
  },
  "response_time": 10.963592,
  "response_file": "008-response.json"
}