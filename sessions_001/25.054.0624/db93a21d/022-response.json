{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThis program transforms an input grid containing two or three maroon rectangles into an output grid where the rectangles\nare partially recolored to blue and green, and surrounded by green and blue filling.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, color):\n    \"\"\"Finds all rectangular objects of a given color.\"\"\"\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n\n    def is_valid(r, c):\n        return 0 <= r < grid.shape[0] and 0 <= c < grid.shape[1]\n\n    def dfs(r, c, current_object):\n        if not is_valid(r, c) or visited[r, c] or grid[r, c] != color:\n            return\n        visited[r, c] = True\n        current_object.append((r, c))\n        dfs(r + 1, c, current_object)\n        dfs(r - 1, c, current_object)\n        dfs(r, c + 1, current_object)\n        dfs(r, c - 1, current_object)\n\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] == color and not visited[r, c]:\n                current_object = []\n                dfs(r, c, current_object)\n                # Get bounding box\n                min_row = min(cell[0] for cell in current_object)\n                max_row = max(cell[0] for cell in current_object)\n                min_col = min(cell[1] for cell in current_object)\n                max_col = max(cell[1] for cell in current_object)\n                objects.append(((min_row, min_col), (max_row, max_col)))\n\n    return objects\n\ndef get_top_left_rectangle(rectangles):\n    \"\"\"Returns the top-leftmost rectangle.\"\"\"\n    if not rectangles:\n        return None\n    return min(rectangles, key=lambda rect: (rect[0][0], rect[0][1]))\n\ndef get_bottom_right_rectangle(rectangles):\n    \"\"\"Returns the bottom-rightmost rectangle.\"\"\"\n    if not rectangles:\n        return None\n    return max(rectangles, key=lambda rect: (rect[1][0], rect[1][1]))\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of the input_grid\n    output_grid = np.copy(input_grid)\n\n    # Find the maroon rectangles\n    maroon_rectangles = find_objects(input_grid, 9)\n\n    for rect in maroon_rectangles:\n        top_left, bottom_right = rect\n        height = bottom_right[0] - top_left[0] + 1\n        width = bottom_right[1] - top_left[1] + 1\n        \n        #Inner recolor\n        if height > 1 and width > 1:\n            # Calculate quarter boundaries\n            row_mid = top_left[0] + height // 2\n            col_mid = top_left[1] + width // 2\n            #green quadrant\n            output_grid[top_left[0]:row_mid, top_left[1]:col_mid] = 3\n            #blue otherwise\n            output_grid[top_left[0]:bottom_right[0] + 1, top_left[1]:bottom_right[1] + 1] = 1\n            output_grid[top_left[0]:row_mid, top_left[1]:col_mid] = 3\n\n        #border recolor\n\n        #top two rows green\n        output_grid[top_left[0]:min(top_left[0] + 2, bottom_right[0] + 1), top_left[1]:bottom_right[1] + 1] = 3\n        #bottom two rows green\n        output_grid[max(bottom_right[0] - 1, top_left[0]):bottom_right[0] + 1, top_left[1]:bottom_right[1] + 1] = 3\n        #left two columns green\n        output_grid[top_left[0]:bottom_right[0] + 1, top_left[1]:min(top_left[1] + 2, bottom_right[1]+1)] = 3\n        #right two columns green\n        output_grid[top_left[0]:bottom_right[0] + 1, max(bottom_right[1] - 1, top_left[1]):bottom_right[1] + 1] = 3\n\n\n    #Surround with color\n    top_left_rect = get_top_left_rectangle(maroon_rectangles)\n    if top_left_rect:\n        # Fill right with green\n        output_grid[top_left_rect[0][0]:top_left_rect[1][0]+1, top_left_rect[1][1] + 1:top_left_rect[1][1] + 3] = 3\n        # Fill below with blue\n        output_grid[top_left_rect[1][0] + 1:top_left_rect[1][0] + 3, top_left_rect[0][1]:top_left_rect[1][1]+1] = 1\n        \n    bottom_right_rect = get_bottom_right_rectangle(maroon_rectangles)\n    \n    if bottom_right_rect:\n        # Fill left with blue\n        output_grid[bottom_right_rect[0][0]:bottom_right_rect[1][0]+1, bottom_right_rect[0][1]-2:bottom_right_rect[0][1]] = 1\n        #Fill above with green\n        output_grid[bottom_right_rect[0][0]-2:bottom_right_rect[0][0], bottom_right_rect[0][1]:bottom_right_rect[1][1]+1] = 3\n\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 10151,
    "candidates_token_count": 1421,
    "total_token_count": 11572,
    "cached_content_token_count": 0
  },
  "response_time": 13.39047,
  "response_file": "022-response.json"
}