{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify the Target Region:** Locate the largest rectangular region within the input grid that is completely enclosed by a continuous border of pixels with the value '2' (red).\n\n2.  **Extract Sub-grid:** Extract this framed region from the input grid.\n\n3. **Return extracted sub-grid**: The output is exactly equal to the extracted sub-grid, with no changes to colors, dimensions, or values.\n\"\"\"\n\nimport numpy as np\n\ndef find_framed_region(grid, frame_color=2):\n    \"\"\"Finds the largest rectangular region enclosed by a frame of the specified color.\"\"\"\n    rows, cols = grid.shape\n    top_left = None\n    bottom_right = None\n\n    # Find top-left corner of frame\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == frame_color:\n                # Check if this is a valid top-left corner\n                if (c + 1 < cols and grid[r, c+1] == frame_color) or (r + 1 < rows and grid[r+1,c] == frame_color):\n                    top_left = (r, c)\n                    break\n        if top_left:\n            break\n    \n    if not top_left:\n        return None, None\n\n    # Find bottom-right corner\n    r = top_left[0]\n    c = top_left[1]\n    \n    # get width\n    while c < cols and grid[r,c] == frame_color:\n      c += 1\n    width = c - top_left[1]\n\n    #get height\n    c = top_left[1]\n    while r < rows and grid[r, c] == frame_color:\n        r += 1\n    height = r - top_left[0]  \n    \n    bottom_right = (top_left[0] + height -1, top_left[1] + width -1 )\n\n    #check full frame is valid\n    for i in range(top_left[1], bottom_right[1] + 1):\n        if not (grid[top_left[0], i] == frame_color and grid[bottom_right[0],i] == frame_color):\n            return None, None\n    for i in range(top_left[0], bottom_right[0] + 1):\n      if not (grid[i, top_left[1]] == frame_color and grid[i, bottom_right[1]] == frame_color ):\n          return None, None\n    \n    return top_left, (bottom_right[0], bottom_right[1] )\n\n\ndef transform(input_grid):\n    \"\"\"Extracts the rectangular region enclosed by a red (2) frame.\"\"\"\n    # Convert to numpy array\n    grid = np.array(input_grid)\n\n    # Find the framed region\n    top_left, bottom_right = find_framed_region(grid)\n\n    # Extract the sub-grid\n    if top_left and bottom_right:\n        output_grid = grid[top_left[0]:bottom_right[0]+1, top_left[1]:bottom_right[1]+1].tolist()\n    else:\n        output_grid = []  # Return an empty grid if no framed region is found\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3428,
    "candidates_token_count": 769,
    "total_token_count": 4197,
    "cached_content_token_count": 0
  },
  "response_time": 8.04624,
  "response_file": "008-response.json"
}