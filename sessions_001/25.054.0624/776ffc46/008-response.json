{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation identifies disconnected shapes of blue (color 1) pixels.\nIf a blue shape has a shape of the same configuration and color directly above it,\nAND that same shape is green (color 3) and within a larger gray (color 5) shape,\nthen the blue shape's color is changed to green. Other objects and the background\nremain unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"\n    Identifies distinct, contiguous regions of non-background (non-zero) pixels.\n    Returns a list of objects, where each object is a list of (row, col) tuples.\n    \"\"\"\n    visited = set()\n    objects = []\n\n    def is_valid(r, c):\n        return 0 <= r < grid.shape[0] and 0 <= c < grid.shape[1]\n\n    def dfs(r, c, color, current_object):\n        if (r, c) in visited or not is_valid(r, c) or grid[r, c] != color:\n            return\n        visited.add((r, c))\n        current_object.append((r, c))\n        for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0), (1, 1), (-1, -1), (1, -1), (-1, 1)]:\n            dfs(r + dr, c + dc, color, current_object)\n\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] != 0 and (r, c) not in visited:\n                current_object = []\n                dfs(r, c, grid[r, c], current_object)\n                objects.append(current_object)\n    return objects\n\ndef get_shape_configuration(obj):\n    \"\"\"\n    Returns a simplified representation of the object's shape as a set of\n    relative (row, col) offsets from the top-left corner of its bounding box.\n    \"\"\"\n    min_row = min(r for r, _ in obj)\n    min_col = min(c for _, c in obj)\n    return {(r - min_row, c - min_col) for r, c in obj}\n\ndef object_at_location(objects, location):\n    \"\"\"\n    Checks if any object in the list of objects occupies the given location.\n\n    Args:\n    objects: A list of objects where each object is a list of (row, col) tuples.\n    location: A (row, col) tuple representing the location to check.\n\n    Returns:\n        The object at the given location if exists, otherwise None\n    \"\"\"\n    row, col = location\n    for obj in objects:\n        if (row,col) in obj:\n            return obj\n    return None\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the described rule.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    objects = find_objects(input_grid)\n\n    # Find the green shape inside the gray shape\n    gray_object = None\n    green_object = None\n    for obj in objects:\n        color = input_grid[obj[0]]  # Get color from a pixel in the object\n        if color == 5:\n            gray_object = obj\n        elif color == 3:\n            green_object = obj\n    \n    # Find the relative configuration of the green interior\n    if gray_object and green_object:\n        \n        gray_min_row = min(r for r, _ in gray_object)\n        gray_min_col = min(c for _, c in gray_object)\n        \n        green_relative_config = get_shape_configuration(green_object)\n\n\n        # Iterate through blue objects\n        for obj in objects:\n            if input_grid[obj[0]] == 1:  # if its blue\n                obj_config = get_shape_configuration(obj)  # calculate its relative configuration\n                \n                #Find object directly above\n                first_pixel_row, first_pixel_col = obj[0]\n                \n                #look up, assuming the configuration is the same size, find offset from first pixel\n                offset_r = 0\n                offset_c = 0\n                \n                if len(obj_config) == len(green_relative_config):  # quick size check for optimization\n                    for r, c in obj_config:\n                        if (r,c) in green_relative_config:\n                            offset_r += r\n                            offset_c += c\n                    # Check if there is a '3' colored shape above it\n                    potential_match_loc = (first_pixel_row - offset_r -1, first_pixel_col-offset_c) # -1 to go \"above\"\n                    \n                    obj_above = object_at_location(objects, potential_match_loc) #find pixel at location\n                \n                    if obj_above: #if something is there\n                        if input_grid[obj_above[0]] == 3: # check color\n                            if get_shape_configuration(obj_above) == green_relative_config:  # Correct Configuration Above\n\n                                #check if the shape above is inside a gray object\n                                obj_row, obj_col = obj_above[0]\n                                gray_check_loc = (obj_row - (gray_min_row - green_object[0][0]), obj_col - (gray_min_col - green_object[0][1]))\n\n                                if object_at_location(objects,gray_check_loc) == gray_object:\n\n                                    for r, c in obj:  # change all instances of this object\n                                        output_grid[r, c] = 3\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3655,
    "candidates_token_count": 1340,
    "total_token_count": 4995,
    "cached_content_token_count": 0
  },
  "response_time": 14.494155,
  "response_file": "008-response.json"
}