{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid by moving connected regions of non-white pixels vertically. Objects in the upper half of the grid move down, and objects in the lower half move up. The movement continues until an object hits the grid boundary or another object.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"\n    Finds all contiguous regions (objects) of non-white (non-zero) pixels in the grid.\n\n    Returns a list of objects, where each object is a list of (row, col) coordinates.\n    \"\"\"\n    visited = set()\n    objects = []\n\n    def dfs(row, col, current_object):\n        if (row, col) in visited or not (0 <= row < grid.shape[0] and 0 <= col < grid.shape[1]) or grid[row, col] == 0:\n            return\n        visited.add((row, col))\n        current_object.append((row, col))\n        dfs(row + 1, col, current_object)\n        dfs(row - 1, col, current_object)\n        dfs(row, col + 1, current_object)\n        dfs(row, col - 1, current_object)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] != 0 and (row, col) not in visited:\n                current_object = []\n                dfs(row, col, current_object)\n                objects.append(current_object)\n    return objects\n\ndef calculate_centroid(object_coords):\n    \"\"\"\n    Calculates the centroid (center of mass) of an object.\n    \"\"\"\n    rows, cols = zip(*object_coords)\n    return np.mean(rows), np.mean(cols)\n\ndef can_move(grid, object_coords, direction):\n    \"\"\"\n    Checks if an object can move in the given direction.\n\n    `direction`: 1 for down, -1 for up.\n    \"\"\"\n    for row, col in object_coords:\n        new_row = row + direction\n        if not (0 <= new_row < grid.shape[0]):\n            return False  # Hit grid boundary\n        if grid[new_row, col] != 0 and (new_row, col) not in object_coords:\n            return False  # Hit another object\n    return True\n\ndef move_object(grid, object_coords, direction):\n    \"\"\"\n    Moves an object in the given direction.\n\n    `direction`: 1 for down, -1 for up.\n    \"\"\"\n    new_object_coords = []\n    for row, col in object_coords:\n        new_object_coords.append((row + direction, col))\n    return new_object_coords\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the described rules.\n    \"\"\"\n    grid = np.array(input_grid)  # work with numpy array\n    output_grid = np.zeros_like(grid)  # Start with a blank grid\n\n    # copy the white pixels to output\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r,c] == 0:\n                output_grid[r,c] = 0\n            \n    objects = find_objects(grid)\n    vertical_center = grid.shape[0] / 2\n\n    for obj in objects:\n        centroid_row, _ = calculate_centroid(obj)\n        direction = 1 if centroid_row < vertical_center else -1\n\n        moved_object = obj\n        while can_move(grid, moved_object, direction):\n            moved_object = move_object(grid, moved_object, direction)\n\n        # Place moved object onto output grid\n        for row, col in moved_object:\n            output_grid[row, col] = grid[obj[0][0], obj[0][1]] # use original color from the input.\n\n    return output_grid.tolist() # return as list\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3148,
    "candidates_token_count": 938,
    "total_token_count": 4086,
    "cached_content_token_count": 0
  },
  "response_time": 9.994233,
  "response_file": "002-response.json"
}