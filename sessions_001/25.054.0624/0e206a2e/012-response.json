{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nColored objects from the input grid are reconstructed in the output grid.\nThe reconstruction maintains the shape, size, and color of each distinct object,\nbut changes their position. Objects are positioned based on their original\ncolor, creating an abstract shape that depends on objects found in the input, placing them near the bottom.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"\n    Finds and returns a dictionary of colored objects in the grid.\n    Each object is a list of (row, col) coordinates.\n    \"\"\"\n    objects = {}\n    visited = set()\n\n    def dfs(row, col, color, obj):\n        if (row, col) in visited or not (0 <= row < grid.shape[0] and 0 <= col < grid.shape[1]) or grid[row, col] != color:\n            return\n        visited.add((row, col))\n        obj.append((row, col))\n        dfs(row + 1, col, color, obj)\n        dfs(row - 1, col, color, obj)\n        dfs(row, col + 1, color, obj)\n        dfs(row, col - 1, color, obj)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            color = grid[row, col]\n            if color != 0 and (row, col) not in visited:\n                obj = []\n                dfs(row, col, color, obj)\n                if color not in objects:\n                    objects[color] = []\n                objects[color].append(obj)\n    return objects\n\ndef transform(input_grid):\n    # Initialize output grid with zeros (white)\n    output_grid_height = input_grid.shape[0]\n    output_grid_width = input_grid.shape[1]\n    output_grid = np.zeros((output_grid_height, output_grid_width), dtype=int)\n\n    # Find objects in the input grid\n    objects = find_objects(input_grid)\n\n    # Determine starting row for placement (start near the bottom)\n    current_row = output_grid_height - 1\n\n    # Reconstruct objects in output grid\n    for color in sorted(objects.keys()):  # Iterate through colors in a consistent order\n        for obj in objects[color]:\n            object_height = max(r for r, c in obj) - min(r for r, c in obj) + 1\n            \n            # Check for enough space, move up if needed\n            if current_row - object_height +1 < 0:\n                current_row = output_grid_height-1 # reset to bottom if no more room at top\n            \n            # Find the bounding box of object\n            min_row = min(r for r, c in obj)\n            min_col = min(c for c, c in obj)\n\n            # place object, using an offset for the new position            \n            for r, c in obj:\n                output_row = current_row - (max(r_temp for r_temp,c_temp in obj) - r)\n                output_col = c - min_col  # maintain the original column order relative to min_col\n                output_grid[output_row, output_col] = color\n            current_row -= object_height # move 'cursor' up by object height\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6991,
    "candidates_token_count": 780,
    "total_token_count": 7771,
    "cached_content_token_count": 0
  },
  "response_time": 8.388371,
  "response_file": "012-response.json"
}