{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentify all connected regions of white (0) pixels.\nFor each white region with more than two pixels:\n    Change white pixels to red (2) if they are directly adjacent (up, down, left, or right, *not diagonal*) to a gray (5) pixel.\nLeave all other pixels unchanged.\n\"\"\"\n\nimport numpy as np\nfrom scipy import ndimage\n\ndef get_white_regions(grid):\n    \"\"\"\n    Finds and returns a list of connected white regions in the grid.\n    \"\"\"\n    white_pixels = (grid == 0)\n    labeled_grid, num_labels = ndimage.label(white_pixels)\n    regions = []\n    for i in range(1, num_labels + 1):\n        region = np.where(labeled_grid == i)\n        regions.append(list(zip(region[0], region[1])))\n    return regions\n\ndef is_adjacent_to_gray(grid, r, c):\n    \"\"\"\n    Checks if a pixel at (r, c) is adjacent to a gray (5) pixel.\n    \"\"\"\n    rows, cols = grid.shape\n    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n        nr, nc = r + dr, c + dc\n        if 0 <= nr < rows and 0 <= nc < cols and grid[nr, nc] == 5:\n            return True\n    return False\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by selectively changing white pixels to red based on adjacency to gray pixels.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = output_grid.shape\n\n    # Get connected white regions\n    white_regions = get_white_regions(output_grid)\n\n    # Change white pixels to red if adjacent to gray\n    for region in white_regions:\n        if len(region) > 2:\n            for r, c in region:\n                if is_adjacent_to_gray(output_grid, r, c):\n                    output_grid[r, c] = 2\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8428,
    "candidates_token_count": 499,
    "total_token_count": 8927,
    "cached_content_token_count": 0
  },
  "response_time": 4.761649,
  "response_file": "016-response.json"
}