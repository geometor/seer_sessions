{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. Preserve: Keep the green region in the top-left corner of the input grid unchanged in the output grid.\n2. Preserve: Keep the single red pixel within the top left green region.\n3. Copy and Extend: Copy the red pixel in the upper green area and extend it downwards, creating a vertical red bar, copying green L shape from input. This fills parts of the originally white area.\n4. Replicate green region 2 from the input into the output.\n\"\"\"\n\nimport numpy as np\n\ndef find_object(grid, color):\n    \"\"\"Finds the coordinates of a contiguous object of the specified color.\"\"\"\n    coords = []\n    visited = set()\n\n    def is_valid(r, c):\n        return 0 <= r < grid.shape[0] and 0 <= c < grid.shape[1]\n\n    def dfs(r, c):\n        if (r, c) in visited or not is_valid(r, c) or grid[r, c] != color:\n            return []\n        visited.add((r, c))\n        region_coords = [(r, c)]\n        for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            region_coords.extend(dfs(r + dr, c + dc))\n        return region_coords\n\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] == color and (r, c) not in visited:\n                coords.extend(dfs(r,c))\n                return coords # return after first object\n    return coords\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the specified rules.\"\"\"\n\n    output_grid = np.copy(input_grid)\n    \n    # Find the single red pixel in the green region\n    top_left_green_coords = find_object(input_grid, 3)\n    red_pixel_coords = []\n    for r,c in top_left_green_coords:\n        if input_grid[r,c] == 2:\n            red_pixel_coords.append((r,c))\n\n    red_pixel = red_pixel_coords[0] if len(red_pixel_coords) > 0 else None\n\n    #Find green L\n    inverse_l_green = find_object(input_grid, 3)\n\n    # Replicate inverse L\n    if inverse_l_green:\n      for r,c in inverse_l_green:\n        if input_grid[r,c] == 3:\n          output_grid[r,c] = 3\n\n    # Extend red pixel downwards\n    if red_pixel:\n        red_row, red_col = red_pixel\n        for row in range(red_row, input_grid.shape[0]):\n            output_grid[row, red_col] = 2\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3902,
    "candidates_token_count": 679,
    "total_token_count": 4581,
    "cached_content_token_count": 0
  },
  "response_time": 7.113333,
  "response_file": "020-response.json"
}