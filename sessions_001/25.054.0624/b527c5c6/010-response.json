{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Green Rectangles:** Locate all green (3) rectangles in the input grid.\n2.  **Find Red Pixel:** Within each green rectangle, locate the single red (2) pixel.\n3.  **Horizontal Elongation (wider than tall):** if a rectangle is wider than tall, copy its red pixel to *all* positions to the left within that rectangle. Copy the red pixel to *all* empty positions along the bottom edge of the *entire* rectangle.\n4.  **Vertical Elongation (taller than wide)** If a rectangle is taller than wide, copy the red pixel to *all* positions directly above, within the bounds of that rectangle. copy the red pixel to *all* empty positions along the leftmost edge of the *entire* rectangle.\n5.  **Square elongation (equal height and width)** Perform both horizontal and\n    vertical actions.\n\"\"\"\n\nimport numpy as np\n\ndef find_rectangles(grid, color):\n    rectangles = []\n    visited = np.zeros_like(grid, dtype=bool)\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == color and not visited[r, c]:\n                # Found a potential start of a rectangle, try to expand\n                width = 0\n                while c + width < cols and grid[r, c + width] == color and not visited[r, c + width]:\n                    width += 1\n                height = 0\n                while r + height < rows and all(grid[r + height, c + i] == color for i in range(width)) and not any(visited[r + height, c + i] for i in range(width)):\n                    height += 1\n\n                # Mark as visited\n                for i in range(height):\n                    for j in range(width):\n                        visited[r + i, c + j] = True\n                rectangles.append((r, c, width, height))\n    return rectangles\n\ndef find_red_pixel(grid, rectangle, red_color=2):\n    r, c, width, height = rectangle\n    for i in range(height):\n        for j in range(width):\n            if grid[r + i, c + j] == red_color:\n                return r + i, c + j\n    return None\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of the input_grid\n    output_grid = np.copy(input_grid)\n    green_rectangles = find_rectangles(input_grid, 3)\n\n    for rect in green_rectangles:\n        red_pixel_pos = find_red_pixel(input_grid, rect)\n        if red_pixel_pos:\n            red_row, red_col = red_pixel_pos\n            r, c, width, height = rect\n\n            # Horizontal Elongation (wider than tall)\n            if width > height:\n                # Copy to the left\n                for i in range(c, red_col):\n                    output_grid[red_row, i] = 2\n                # Copy to the bottom edge\n                for i in range(width):\n                    output_grid[r + height - 1, c + i] = 2\n\n            # Vertical Elongation (taller than wide)\n            elif height > width:\n                # Copy above\n                for i in range(r, red_row):\n                    output_grid[i, red_col] = 2\n                #copy to the left edge\n                for i in range(height):\n                    output_grid[r+i,c]=2\n            # Square Elongation\n            else:\n                # Copy to the left\n                for i in range(c, red_col):\n                    output_grid[red_row, i] = 2\n                # Copy to the bottom edge\n                for i in range(width):\n                    output_grid[r + height - 1, c + i] = 2\n                # Copy above\n                for i in range(r, red_row):\n                    output_grid[i, red_col] = 2\n                #copy to the left edge\n                for i in range(height):\n                    output_grid[r+i,c]=2\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 11085,
    "candidates_token_count": 983,
    "total_token_count": 12068,
    "cached_content_token_count": 0
  },
  "response_time": 49.424926,
  "response_file": "010-response.json"
}