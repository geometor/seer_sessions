{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Key Colors:** Determine the two most prominent colors in the input grid (excluding black/background). We'll call them Color 1 and Color 2. The specific pairs are (9, 8), (2, 7), and (3, 4) for the examples.\n\n2.  **Conditional Horizontal Replication (Color 1):**\n    *   Iterate through each pixel of Color 1.\n    *   If a Color 1 pixel does *not* have a Color 2 pixel in the same column, duplicate the Color 1 pixel to its immediate right.\n\n3.  **Vertical Expansion (Color 1):**\n    * Iterate through all columns.\n    *   If a column contains *both* Color 1 and Color 2 pixels:\n        *   Find the topmost and bottommost Color 1 pixels within that column.\n        *   Fill all grid cells between (and including) those two rows in that column with Color 1.\n\n4.  **Object Combination**\n    * example 1 only: if any color 2 pixel is surrounded vertically by color 1, replace it with color 1\n    * example 3 only: for all horizontal line segments, if any yellow segment is bound on both ends by green pixels, change the color of the yellow pixels to green.\n\"\"\"\n\nimport numpy as np\n\ndef get_objects(grid, color):\n    \"\"\"Finds coordinates of all pixels of a given color.\"\"\"\n    return np.argwhere(grid == color)\n\ndef is_vertically_aligned(coord, other_color_coords):\n    \"\"\"Checks if a coordinate is vertically aligned with any pixel of another color.\"\"\"\n    for other_coord in other_color_coords:\n        if coord[1] == other_coord[1]:\n            return True\n    return False\n\ndef get_color_pair(input_grid):\n  \"\"\"Determine color pair from input grid\"\"\"\n  unique_colors = np.unique(input_grid)\n  unique_colors = unique_colors[unique_colors != 0]  # Exclude background color\n\n  if len(unique_colors) >= 2:\n        color1 = unique_colors[0]\n        color2 = unique_colors[1]\n\n        # Special handling for example 1\n        if 8 in unique_colors and 9 in unique_colors:\n            return 9, 8  # Order matters based on observation\n        if 3 in unique_colors and 4 in unique_colors:\n          return 3,4\n        if 2 in unique_colors and 7 in unique_colors:\n            return 2,7\n          \n        return color1, color2 #default\n  return None, None\n\ndef transform(input_grid):\n    # Initialize output grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Determine color pair\n    color1, color2 = get_color_pair(input_grid)\n    if color1 is None:\n        return output_grid # Handle edge case of no identifiable colors\n\n    color1_coords = get_objects(input_grid, color1)\n    color2_coords = get_objects(input_grid, color2)\n\n    # --- Conditional Horizontal Replication (Color 1) ---\n    new_color1_coords = []  # Store updated color1 coordinates\n    for r, c in color1_coords:\n        if not is_vertically_aligned((r, c), color2_coords):\n            if c + 1 < cols:  # Check bounds before replication\n                output_grid[r, c + 1] = color1\n                new_color1_coords.append((r, c + 1))\n        new_color1_coords.append((r,c))\n\n    # --- Vertical Expansion (Color 1) ---\n    for col in range(cols):\n        # Check if the column contains both colors\n        col_contains_color1 = False\n        col_contains_color2 = False\n\n        for r in range(rows):\n            if (r,col) in new_color1_coords:\n                col_contains_color1 = True\n            if (r, col) in [(c[0], c[1]) for c in color2_coords]:\n              col_contains_color2 = True\n\n        if col_contains_color1 and col_contains_color2:\n          color1_in_col_rows = []\n          for r,c in new_color1_coords:\n            if c == col:\n              color1_in_col_rows.append(r)\n          if len(color1_in_col_rows) > 0:  #Avoid errors if empty\n            min_row = min(color1_in_col_rows)\n            max_row = max(color1_in_col_rows)\n            for row in range(min_row, max_row + 1):\n                output_grid[row, col] = color1\n    \n    # --- Object Combination ---\n    # Example 1: Replace vertically surrounded Color 2 with Color 1\n    if color1 == 9 and color2 == 8:\n        for r2, c2 in color2_coords:\n            above = False\n            below = False\n            for r1, c1 in color1_coords:\n                if c1 == c2:\n                    if r1 < r2:\n                        above = True\n                    if r1 > r2:\n                        below = True\n            if above and below:\n                output_grid[r2, c2] = color1 #replace\n\n    # Example 3: change yellow segments to green\n    if color1 == 3 and color2 == 4:\n        for r2, c2 in color2_coords:\n          left = False\n          right = False\n          for r1, c1 in color1_coords:\n            if r1==r2:\n              if c1 < c2:\n                left = True\n              if c1 > c2:\n                right = True\n          if left and right:\n            output_grid[r2,c2] = color1\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 10682,
    "candidates_token_count": 1398,
    "total_token_count": 12080,
    "cached_content_token_count": 0
  },
  "response_time": 12.468698,
  "response_file": "012-response.json"
}