{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by expanding azure (8) pixels.  Azure pixels expand \nby one layer around existing azure pixels. If an azure pixel is adjacent to a \nred (2) pixel, the azure region expands by adding azure pixels to *all*\nadjacencies of the azure pixel.\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, row, col):\n    \"\"\"Gets the valid neighboring coordinates of a cell.\"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:  # Up, Down, Left, Right\n        new_row, new_col = row + dr, col + dc\n        if 0 <= new_row < rows and 0 <= new_col < cols:\n            neighbors.append((new_row, new_col))\n    return neighbors\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the described rules.\"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # 1. & 2. Iterate through existing azure pixels and expand\n    azure_pixels = np.argwhere(input_grid == 8)\n    for row, col in azure_pixels:\n        neighbors = get_neighbors(input_grid, row, col)\n        for nr, nc in neighbors:\n            if output_grid[nr, nc] == 0:  # If neighbor is white\n                output_grid[nr, nc] = 8\n\n    #3. & 4. Iterate through each red pixel\n    red_pixels = np.argwhere(input_grid == 2)\n    for row, col in red_pixels:\n      neighbors = get_neighbors(input_grid, row, col)\n      for nr, nc in neighbors:\n        if output_grid[nr, nc] == 8:\n          # 5. Expand azure, adjacent to red\n          azure_neighbors = get_neighbors(input_grid, nr, nc)\n          for anr, anc in azure_neighbors:\n            output_grid[anr, anc] = 8\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3297,
    "candidates_token_count": 508,
    "total_token_count": 3805,
    "cached_content_token_count": 0
  },
  "response_time": 5.80768,
  "response_file": "002-response.json"
}