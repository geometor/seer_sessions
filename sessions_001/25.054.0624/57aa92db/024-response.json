{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Object Identification:** Identify all contiguous objects (connected components of non-white pixels) in the input grid.\n2.  **Green Expansion:** For each green (color 3) object, expand it by one pixel in all orthogonal directions (up, down, left, right) where it is directly adjacent to *any* other non-white colored pixel.\n3.  **Yellow Expansion:** For each yellow (color 4) object, expand one pixel orthogonally in any direction where a red object is directly adjacent.\n4.  **Magenta Expansion:** For each magenta (color 6) object: if a red pixel exists diagonally up and to the left (NW), expand the magenta object by one pixel to the left and one pixel up.\n5. **Azure Expansion:** If there is an Azure colored square, expand one pixel to the left and one to the right.\n6.  **Preservation:** All other objects retain their original shape and position.\n7.  **Background:** White pixels (0) remain unchanged unless filled by an expanding object.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"Finds contiguous objects in a grid.\"\"\"\n    objects = []\n    visited = set()\n    rows, cols = grid.shape\n\n    def dfs(r, c, obj_color, current_object):\n        if (r, c) in visited or not (0 <= r < rows and 0 <= c < cols) or grid[r, c] != obj_color:\n            return\n        visited.add((r, c))\n        current_object.append((r, c))\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            dfs(r + dr, c + dc, obj_color, current_object)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and (r, c) not in visited:\n                current_object = []\n                dfs(r, c, grid[r, c], current_object)\n                objects.append((grid[r, c], current_object))\n    return objects\n\ndef expand_adjacent_to_any(grid, object_pixels):\n    \"\"\"Expands object by one pixel in orthogonal directions adjacent to any other object.\"\"\"\n    new_pixels = set(object_pixels)\n    rows, cols = grid.shape\n\n    for r, c in object_pixels:\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < rows and 0 <= nc < cols and grid[nr, nc] != 0:\n                new_pixels.add((nr, nc))\n    return list(new_pixels)\n    \ndef expand_adjacent_to_red(grid, object_pixels):\n    \"\"\"Expands yellow object by one pixel in orthogonal directions adjacent to red object.\"\"\"\n    new_pixels = set(object_pixels)\n    rows, cols = grid.shape\n    \n    for r,c in object_pixels:\n        for dr, dc in [(0,1), (0,-1), (1,0), (-1,0)]:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < rows and 0 <= nc < cols and grid[nr, nc] == 2:\n                new_pixels.add((nr, nc))\n    return list(new_pixels)\n\ndef expand_magenta(grid, object_pixels):\n    \"\"\"Expands magenta object left and up if red is NW.\"\"\"\n    new_pixels = set(object_pixels)\n    rows, cols = grid.shape\n\n    for r, c in object_pixels:\n        if r > 0 and c > 0 and grid[r-1, c-1] == 2:\n            new_pixels.add((r-1, c))  # Up\n            new_pixels.add((r, c-1))  # Left\n    return list(new_pixels)\n    \ndef expand_azure_square(grid, object_pixels):\n    \"\"\"Expands azure squares to the left and right.\"\"\"\n    new_pixels = set(object_pixels)\n    rows, cols = grid.shape\n\n    # Check if it's a square\n    rs, cs = zip(*object_pixels)\n    min_r, max_r = min(rs), max(rs)\n    min_c, max_c = min(cs), max(cs)\n\n    if (max_r - min_r) == (max_c - min_c):\n        # Expand left\n        if min_c > 0:\n            for r in range(min_r, max_r + 1):\n              if grid[r, min_c -1] == 0:\n                new_pixels.add((r, min_c - 1))\n        # Expand right\n        if max_c < cols - 1:\n            for r in range(min_r, max_r + 1):\n              if grid[r, max_c + 1] == 0:\n                new_pixels.add((r, max_c + 1))\n\n    return list(new_pixels)\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the specified rules.\"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Find all objects\n    objects = find_objects(input_grid)\n\n    for color, obj_pixels in objects:\n        if color == 3:  # Green\n            expanded_pixels = expand_adjacent_to_any(input_grid, obj_pixels)\n            for r, c in expanded_pixels:\n                output_grid[r, c] = 3\n        elif color == 4:  # Yellow\n            expanded_pixels = expand_adjacent_to_red(input_grid, obj_pixels)\n            for r, c in expanded_pixels:\n                output_grid[r,c] = 4\n        elif color == 6:  # Magenta\n            expanded_pixels = expand_magenta(input_grid, obj_pixels)\n            for r, c in expanded_pixels:\n                output_grid[r, c] = 6\n        elif color == 8:  # Azure\n            expanded_pixels = expand_azure_square(input_grid, obj_pixels)\n            for r, c in expanded_pixels:\n                output_grid[r, c] = 8\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 10603,
    "candidates_token_count": 1517,
    "total_token_count": 12120,
    "cached_content_token_count": 0
  },
  "response_time": 12.945246,
  "response_file": "024-response.json"
}