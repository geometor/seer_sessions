{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Azure Clusters:** Locate all clusters of azure (8) pixels within the input grid. A cluster is defined as one or more azure pixels that are contiguously connected (horizontally, vertically, or diagonally).\n\n2.  **Identify inner and outer Blue Pixels:** For each azure cluster locate the blue(1) pixels. For each cluster, blue pixels can be one of two types.\n    *   Inner Blue Pixels: Blue(1) pixels that are adjacent to *both* azure(8) pixels and to other blue(1) pixels that are *not* adjacent to any azure(8) pixel.\n    *   Outer Blue Pixels: Blue(1) pixels that are adjacent to azure(8) pixels, but are *not* \"Inner Blue Pixels\".\n\n3.  **Conditional Replacement:** Change all \"Inner Blue Pixels\" and \"Outer Blue Pixels\" adjacent to the azure cluster to green(3).\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef find_clusters(grid, color):\n    \"\"\"Finds clusters of a specific color in the grid.\"\"\"\n    visited = set()\n    clusters = []\n\n    def get_neighbors(r, c):\n        \"\"\"Returns valid neighbors (within bounds and same color).\"\"\"\n        rows, cols = grid.shape\n        neighbors = []\n        for dr in [-1, 0, 1]:\n            for dc in [-1, 0, 1]:\n                if dr == 0 and dc == 0:\n                    continue\n                nr, nc = r + dr, c + dc\n                if 0 <= nr < rows and 0 <= nc < cols and grid[nr, nc] == color:\n                    neighbors.append((nr, nc))\n        return neighbors\n\n    def bfs(start_r, start_c):\n        \"\"\"Performs Breadth-First Search to find a cluster.\"\"\"\n        queue = deque([(start_r, start_c)])\n        cluster = set()\n        visited.add((start_r, start_c))\n\n        while queue:\n            r, c = queue.popleft()\n            cluster.add((r, c))\n            for nr, nc in get_neighbors(r, c):\n                if (nr, nc) not in visited:\n                    visited.add((nr, nc))\n                    queue.append((nr, nc))\n        return cluster\n\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == color and (r, c) not in visited:\n                clusters.append(bfs(r, c))\n    return clusters\n\ndef get_adjacent_pixels(grid, cluster, color):\n    \"\"\"get pixels of a specific color adjacent to the cluster\"\"\"\n    rows, cols = grid.shape\n    adjacent_pixels = set()\n    \n    for r,c in cluster:\n        for dr in [-1, 0, 1]:\n            for dc in [-1, 0, 1]:\n                if dr == 0 and dc == 0:\n                    continue\n                nr, nc = r+dr, c+dc\n                if 0 <= nr < rows and 0 <= nc < cols and grid[nr,nc] == color:\n                    adjacent_pixels.add((nr,nc))\n    return adjacent_pixels\n\n\ndef get_blue_pixel_types(grid, azure_cluster):\n    \"\"\"Classifies blue pixels adjacent to an azure cluster.\"\"\"\n    \n    adjacent_blues = get_adjacent_pixels(grid, azure_cluster, 1)\n    \n    inner_blue_pixels = set()\n    outer_blue_pixels = set()\n\n    for b_r, b_c in adjacent_blues:\n        is_inner = False\n        \n        #check neighbors of this blue pixel\n        for dr in [-1, 0, 1]:\n            for dc in [-1, 0, 1]:\n                if dr == 0 and dc == 0: continue\n\n                nr, nc = b_r + dr, b_c + dc\n                if 0 <= nr < grid.shape[0] and 0 <= nc < grid.shape[1]:\n                    # key change: check if neighbor is blue AND not adjacent to ANY azure\n                    if grid[nr, nc] == 1 and not any((nr2, nc2) in azure_cluster for dr2 in [-1,0,1] for dc2 in [-1,0,1] if 0 <= nr+dr2 < grid.shape[0] and 0 <= nc+dc2 < grid.shape[1] and (dr2!=0 or dc2!=0)):\n                        is_inner = True\n                        break\n            if is_inner: break # optimization\n        if is_inner:\n            inner_blue_pixels.add((b_r,b_c))\n        else:\n            outer_blue_pixels.add((b_r,b_c))\n\n    return inner_blue_pixels, outer_blue_pixels\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the described rule.\"\"\"\n    grid = np.array(input_grid)  # Convert to NumPy array for easier manipulation\n    output_grid = grid.copy()\n\n    azure_clusters = find_clusters(grid, 8)\n\n    for cluster in azure_clusters:\n        inner_blue_pixels, outer_blue_pixels = get_blue_pixel_types(grid, cluster)\n\n        # change outer pixels\n        for r, c in outer_blue_pixels:\n            output_grid[r, c] = 3\n        # change inner pixels\n        for r,c in inner_blue_pixels:\n            output_grid[r,c] = 3\n            \n\n    return output_grid.tolist()  # Convert back to list\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 15974,
    "candidates_token_count": 1313,
    "total_token_count": 17287,
    "cached_content_token_count": 0
  },
  "response_time": 11.066464,
  "response_file": "018-response.json"
}