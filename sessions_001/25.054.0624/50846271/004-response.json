{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies red (2) pixels in the input grid. Changes isolated red pixels (those not\npart of a contiguous horizontal or vertical line of red pixels) and red pixels that form\na three-pixel L shape to azure (8). Other pixels remain unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef is_isolated(grid, row, col):\n    \"\"\"Checks if a red pixel at (row, col) is isolated.\"\"\"\n    rows, cols = grid.shape\n    color = grid[row, col]\n\n    # Check horizontal and vertical neighbors\n    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n        nr, nc = row + dr, col + dc\n        if 0 <= nr < rows and 0 <= nc < cols and grid[nr, nc] == color:\n            return False  # Has a same-color neighbor\n    return True\n\ndef is_l_shape(grid, row, col):\n    \"\"\"Checks if a red pixel at (row, col) is the center of a 3-pixel L-shape.\"\"\"\n    rows, cols = grid.shape\n    color = grid[row, col]\n    neighbors = 0\n    \n    #check the direct neighbors\n    neighbor_coords = []\n    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n        nr, nc = row + dr, col + dc\n        if 0 <= nr < rows and 0 <= nc < cols and grid[nr, nc] == color:\n            neighbors += 1\n            neighbor_coords.append((nr,nc))\n\n    if neighbors == 2:\n        #check if the two neighbors create a vertical or horizontal line, if so it's a line and not an L\n        if neighbor_coords[0][0] == neighbor_coords[1][0] or neighbor_coords[0][1] == neighbor_coords[1][1]:\n          return False #it's a line of three, not an L\n        return True\n    \n    return False\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of the input_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Iterate through each pixel of the grid\n    for row in range(rows):\n        for col in range(cols):\n            # Check if the pixel is red (2)\n            if input_grid[row, col] == 2:\n                # Check if the red pixel is isolated or part of an L-shape\n                if is_isolated(output_grid, row, col) or is_l_shape(output_grid, row, col):\n                    # Change isolated red pixels and L-shape centers to azure (8)\n                    output_grid[row, col] = 8\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 10323,
    "candidates_token_count": 664,
    "total_token_count": 10987,
    "cached_content_token_count": 0
  },
  "response_time": 7.115821,
  "response_file": "004-response.json"
}