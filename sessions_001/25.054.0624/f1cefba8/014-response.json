{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation identifies an outer red rectangle and an inner green rectangle. \nThe central vertical column of the inner rectangle is modified.\nGreen pixels are added (\"creep\") vertically from the center of the original green rectangle,\nstopping when encountering a different color.\n\"\"\"\n\nimport numpy as np\n\ndef find_object(grid, color):\n    \"\"\"Finds the bounding box of an object with a specific color.\"\"\"\n    rows, cols = np.where(grid == color)\n    if len(rows) == 0:\n        return None\n    min_row, max_row = np.min(rows), np.max(rows)\n    min_col, max_col = np.min(cols), np.max(cols)\n    return (min_row, min_col), (max_row, max_col)\n\ndef get_central_column(top_left, bottom_right):\n    \"\"\"Calculates the central column index.\"\"\"\n    _, min_col = top_left\n    _, max_col = bottom_right\n    central_col = (min_col + max_col) // 2\n    return central_col\n\ndef creeping(grid, start_row, start_col, color):\n    \"\"\"Adds pixels of a given color vertically from a starting point until non-matching color.\"\"\"\n    rows, cols = grid.shape\n    # Creep upwards\n    row = start_row -1\n    while row >= 0:\n        if grid[row,start_col] != 2:\n           break;\n\n        grid[row, start_col] = color\n        row -= 1\n\n    row = start_row + 1\n    while row < rows:\n        if grid[row,start_col] != 2:\n           break;\n\n        grid[row, start_col] = color\n        row += 1\n\n    return grid\n    \n\ndef transform(input_grid):\n    # Initialize output grid as a copy of the input grid\n    output_grid = np.copy(input_grid)\n\n    # Find the outer red rectangle\n    outer_top_left, outer_bottom_right = find_object(input_grid, 2)\n\n    # Find the inner green rectangle\n    inner_top_left, inner_bottom_right = find_object(input_grid, 3)\n   \n    if inner_top_left is None or outer_top_left is None:\n       return output_grid\n\n    # Get the central column of the green rectangle\n    central_col = get_central_column(inner_top_left, inner_bottom_right)\n    inner_min_row, _ = inner_top_left\n    inner_max_row, _ = inner_bottom_right\n\n    # modify the inner object\n    for row in range(inner_min_row, inner_max_row + 1):\n        output_grid[row, central_col] = 2\n\n    center_row = (inner_top_left[0] + inner_bottom_right[0]) // 2\n    \n    output_grid = creeping(output_grid, center_row, central_col, 3)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3213,
    "candidates_token_count": 716,
    "total_token_count": 3929,
    "cached_content_token_count": 0
  },
  "response_time": 8.068106,
  "response_file": "014-response.json"
}