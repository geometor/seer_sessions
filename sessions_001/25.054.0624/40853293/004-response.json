{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms single colored pixels into vertical or horizontal lines based on their color, with special handling for interactions between Gray/Magenta and Azure/Maroon, and shape completion for orange and green.\n\"\"\"\n\nimport numpy as np\n\ndef get_single_pixels(grid):\n    \"\"\"Finds isolated pixels of a given color.\"\"\"\n    single_pixels = []\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            color = grid[r, c]\n            if color != 0:\n                is_single = True\n                for dr in [-1, 0, 1]:\n                    for dc in [-1, 0, 1]:\n                        if dr == 0 and dc == 0:\n                            continue\n                        nr, nc = r + dr, c + dc\n                        if 0 <= nr < rows and 0 <= nc < cols and grid[nr, nc] == color:\n                            is_single = False\n                            break\n                    if not is_single:\n                        break\n                if is_single:\n                    single_pixels.append((r, c, color))\n    return single_pixels\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the rules.\"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = output_grid.shape\n    single_pixels = get_single_pixels(input_grid)\n\n    # Initial transformations based on single pixels\n    for r, c, color in single_pixels:\n        if color in [2, 3, 4, 7]:  # Red, Green, Blue, Orange: Vertical lines\n            for i in range(rows):\n                output_grid[i, c] = color\n        elif color == 6:  # Magenta: Horizontal lines\n             for j in range(cols):\n                output_grid[r,j] = color\n        elif color == 8: # Azure: Conditional Vertical Line\n            is_adjacent_to_maroon = False\n            for dr, dc in [(0, -1), (0, 1)]: # Check left/right\n                nr, nc = r + dr, c + dc\n                if 0 <= nr < rows and 0 <= nc < cols and input_grid[nr, nc] == 9:\n                    is_adjacent_to_maroon = True\n                    break\n            if not is_adjacent_to_maroon:\n                for i in range(rows):\n                    output_grid[i,c] = color\n\n\n    # Handle Gray(5) and Magenta(6) interaction:\n    for r in range(rows):\n        for c in range(cols):\n            if output_grid[r,c] == 5:\n                if r > 0 and output_grid[r-1,c] == 6: #magenta above\n                    for j in range(cols):\n                        output_grid[r-1,j] = 5 #change whole line to gray\n                if r < rows -1 and output_grid[r+1,c] == 6: #if magenta below\n                    for j in range(cols):\n                        output_grid[r+1,j] = 5 #change whole line to gray\n\n    # Handle shape completion for orange(7) and green(3)\n    for r in range(rows):\n        orange_positions = []\n        green_positions = []\n\n        for c in range(cols):\n            if output_grid[r,c] == 7:\n                orange_positions.append(c)\n            elif output_grid[r,c] == 3:\n                green_positions.append(c)\n\n        if len(orange_positions) >= 2:\n            for i in range(len(orange_positions)-1):\n                start_c = orange_positions[i]\n                end_c = orange_positions[i+1]\n                all_empty = True\n                for c in range(start_c +1, end_c):\n                   if output_grid[r,c] != 0:\n                       all_empty = False\n                       break\n                if all_empty:\n                    for c in range(start_c+1, end_c):\n                        output_grid[r,c] = 7\n\n        if len(green_positions) >= 2:\n             for i in range(len(green_positions)-1):\n                start_c = green_positions[i]\n                end_c = green_positions[i+1]\n                all_empty = True\n\n                for c in range(start_c + 1, end_c):\n                   if output_grid[r,c] != 0:\n                       all_empty = False\n                       break\n\n                if all_empty:\n                    for c in range(start_c + 1, end_c):\n                        output_grid[r,c] = 3\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7825,
    "candidates_token_count": 1118,
    "total_token_count": 8943,
    "cached_content_token_count": 0
  },
  "response_time": 10.045757,
  "response_file": "004-response.json"
}