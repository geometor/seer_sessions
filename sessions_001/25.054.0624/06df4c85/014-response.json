{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Horizontal Bands:** Locate the horizontal bands of solid yellow (4) pixels. These bands are three pixels high.\n\n2.  **Identify Islands:** Within each yellow band, identify \"islands\" of green (3) and red (2) pixels. These islands are 2x2 blocks.\n\n3.  **Propagate Colors (Conditional):**\n    *   If an island is green (3): Expand the green color horizontally to the left and right *within* the yellow band. The expansion fills the entire width of the yellow band, replacing any white (0) pixels, only if there is an existing green island withing the yellow row.\n    *   If an island is red (2): Expand the red color horizontally to the left and right *within* the yellow band, in place of white pixels (0), only if there is an existing red island. Furthermore, if the row immediately above has green, do not replace yellow with red.\n\n4.  **No Change Outside Bands:** Pixels outside the identified yellow bands remain unchanged.\nThe rows that don't contain any Green or Red colored pixels are not affected.\n\"\"\"\n\nimport numpy as np\n\ndef find_horizontal_bands(grid, band_color, band_height):\n    bands = []\n    rows, cols = grid.shape\n    for r in range(rows - band_height + 1):\n        is_band = True\n        for i in range(band_height):\n            if not np.all(grid[r + i, :] == band_color):\n                is_band = False\n                break\n        if is_band:\n            bands.append(r)\n    return bands\n\ndef propagate_color(grid, row_start, color):\n    rows, cols = grid.shape\n    for r in range(row_start, row_start+3):\n      for c in range(cols):\n        if grid[r,c] != 4: # propagate only within band\n          grid[r,c] = color\n\ndef transform(input_grid):\n    # Initialize output grid as a copy of the input grid\n    output_grid = np.copy(input_grid)\n    rows, cols = output_grid.shape\n\n    # Find horizontal bands of yellow (4) with height 3\n    yellow_bands = find_horizontal_bands(output_grid, 4, 3)\n\n    # Iterate through each yellow band\n    for band_start_row in yellow_bands:\n        has_green = False\n        has_red = False\n        # check for green and red\n        for r in range(band_start_row, band_start_row + 3):\n            if 3 in output_grid[r, :]:\n                has_green = True\n            if 2 in output_grid[r, :]:\n                has_red = True\n\n        # propagate colors\n\n        if has_green:\n            propagate_color(output_grid, band_start_row, 3)\n        if has_red:\n\n          for r in range(band_start_row, band_start_row + 3):\n              #skip row if row above contains green\n              if r > 0 and 3 in output_grid[r-1,:]:\n                continue\n\n              propagate_color(output_grid, band_start_row, 2)\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4235,
    "candidates_token_count": 757,
    "total_token_count": 4992,
    "cached_content_token_count": 0
  },
  "response_time": 8.215784,
  "response_file": "014-response.json"
}