{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nCrops and overlays colored regions from the input grid onto an output grid,\nmaintaining relative positions and scaling to the output size.\n\"\"\"\n\nimport numpy as np\n\ndef get_output_size(example_outputs):\n    \"\"\"Determines the output grid size from the example outputs.\"\"\"\n    first_output = example_outputs[0]\n    return (len(first_output), len(first_output[0]))\n\ndef find_colored_pixels(grid):\n    \"\"\"Finds all pixels with non-zero color.\"\"\"\n    colored_pixels = []\n    for i in range(grid.shape[0]):\n        for j in range(grid.shape[1]):\n            if grid[i, j] != 0:\n                colored_pixels.append((i, j, grid[i, j]))\n    return colored_pixels\n\ndef transform(input_grid, output_grid_shape):\n    # initialize output_grid\n    output_grid = np.zeros(output_grid_shape, dtype=int)\n\n    # find all colored pixels\n    colored_pixels = find_colored_pixels(input_grid)\n\n    # Scale and map colored pixels\n    input_rows, input_cols = input_grid.shape\n    output_rows, output_cols = output_grid.shape\n\n    for r, c, color in colored_pixels:\n        out_r = int(r * output_rows / input_rows)\n        out_c = int(c * output_cols / input_cols)\n        output_grid[out_r, out_c] = color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6295,
    "candidates_token_count": 363,
    "total_token_count": 6658,
    "cached_content_token_count": 0
  },
  "response_time": 4.974937,
  "response_file": "004-response.json"
}