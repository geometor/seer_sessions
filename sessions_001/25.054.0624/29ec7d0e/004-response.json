{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation identifies blue (1) regions and extends them by converting adjacent white (0) pixels to blue (1).\nNon-white and non-blue pixels are preserved. If two separate blue regions can be connected by setting only\nwhite pixels to blue, then change those white pixels to blue.\n\"\"\"\n\nimport numpy as np\nfrom scipy.ndimage import label, find_objects\n\ndef get_neighbors(r, c, rows, cols):\n    \"\"\"\n    Returns the valid neighbors of a cell (r, c) in a grid of size (rows, cols).\n    \"\"\"\n    neighbors = []\n    for i in range(max(0, r - 1), min(rows, r + 2)):\n        for j in range(max(0, c - 1), min(cols, c + 2)):\n            if (i, j) != (r, c):\n                neighbors.append((i, j))\n    return neighbors\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the described rule.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # 1. Preserve non-white pixels.\n    # (This is implicit since we're copying the input_grid and only modifying white pixels)\n\n    # 2. Identify blue regions and extend them.\n    for r in range(rows):\n        for c in range(cols):\n            if input_grid[r, c] == 0:  # Check if it's a white pixel\n                neighbors = get_neighbors(r, c, rows, cols)\n                for nr, nc in neighbors:\n                    if input_grid[nr, nc] == 1:  # If adjacent to blue\n                        output_grid[r, c] = 1  # Set to blue\n                        break  # Move to the next white pixel\n    \n    #3. Identify and Connect separate blue regions\n    labeled_grid, num_features = label(output_grid == 1)  \n    slices = find_objects(labeled_grid)\n\n    for i in range(len(slices)):\n        for j in range(i+1, len(slices)):\n            if slices[i] is not None and slices[j] is not None:  # if not none\n                # Bounding box coordinates\n                r1_min, c1_min = slices[i][0].start, slices[i][1].start\n                r1_max, c1_max = slices[i][0].stop -1, slices[i][1].stop -1\n                r2_min, c2_min = slices[j][0].start, slices[j][1].start\n                r2_max, c2_max = slices[j][0].stop -1, slices[j][1].stop -1\n\n                # calculate manhattan distance\n                dist_row = abs(r1_max-r2_min) + abs(r1_min - r2_max)\n                dist_col = abs(c1_max-c2_min) + abs(c1_min- c2_max)\n                dist =  min(dist_col, dist_row)\n\n                if dist < 10: # arbitrary small number to connect\n                    # Check for direct horizontal or vertical paths\n                    if r1_min <= r2_max and r1_max >= r2_min: # overlap in rows\n                        for c in range(min(c1_max,c2_max)+1, max(c1_min, c2_min)):\n                            all_white = True\n                            for r in range(min(r1_min,r2_min), max(r1_max, r2_max)+1):\n                                if output_grid[r,c] != 0 and output_grid[r,c] != 1:\n                                    all_white = False\n                                    break\n                            if all_white:\n                                for r in range(min(r1_min,r2_min), max(r1_max, r2_max)+1):\n                                     output_grid[r,c] = 1\n\n                    elif c1_min <= c2_max and c1_max >= c2_min: # col overlap\n                        for r in range(min(r1_max, r2_max)+1, max(r1_min, r2_min)):\n                            all_white = True\n                            for c in range(min(c1_min, c2_min), max(c1_max, c2_max)+1):\n                                if output_grid[r,c] != 0 and output_grid[r,c] != 1:\n                                    all_white = False\n                                    break\n                            if all_white:\n                                for c in range(min(c1_min, c2_min), max(c1_max, c2_max)+1):\n                                    output_grid[r,c] = 1\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 10390,
    "candidates_token_count": 1148,
    "total_token_count": 11538,
    "cached_content_token_count": 0
  },
  "response_time": 11.723293,
  "response_file": "004-response.json"
}