{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  Iterate through each pixel of the input grid.\n2.  For pixels that contain the color maroon(9).\n3.  Replace all instances of a 9 with a 0 except for the big maroon object in the center.\n4.  For pixel that contain the color green (3) in a 2x2 square shape, replace all it's neighbor pixels around of this 2x2 green pixel.\n5. Output the modified grid.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, color):\n    \"\"\"\n    Finds contiguous objects of a specific color in the grid.\n    \"\"\"\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n\n    def dfs(row, col, current_object):\n        if (row < 0 or row >= grid.shape[0] or col < 0 or col >= grid.shape[1] or\n                visited[row, col] or grid[row, col] != color):\n            return\n        visited[row, col] = True\n        current_object.append((row, col))\n        dfs(row + 1, col, current_object)\n        dfs(row - 1, col, current_object)\n        dfs(row, col + 1, current_object)\n        dfs(row, col - 1, current_object)\n        dfs(row + 1, col + 1, current_object)  # Check diagonals\n        dfs(row + 1, col - 1, current_object)\n        dfs(row - 1, col + 1, current_object)\n        dfs(row - 1, col - 1, current_object)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] == color and not visited[row, col]:\n                current_object = []\n                dfs(row, col, current_object)\n                objects.append(current_object)\n    return objects\n\ndef find_2x2_square(grid, color):\n    \"\"\"\n    Finds 2x2 squares of a specific color.\n    \"\"\"\n    squares = []\n    for r in range(grid.shape[0] - 1):\n        for c in range(grid.shape[1] - 1):\n            if (grid[r, c] == color and grid[r + 1, c] == color and\n                    grid[r, c + 1] == color and grid[r + 1, c + 1] == color):\n                squares.append((r,c))\n    return squares\n\ndef get_neighbors(grid, row, col):\n    \"\"\"Gets the 8 neighbors of a cell (diagonal included).\"\"\"\n    neighbors = []\n    for dr in [-1, 0, 1]:\n        for dc in [-1, 0, 1]:\n            if dr == 0 and dc == 0:\n                continue\n            nr, nc = row + dr, col + dc\n            if 0 <= nr < grid.shape[0] and 0 <= nc < grid.shape[1]:\n                neighbors.append((nr, nc))\n    return neighbors\n    \n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the rules.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n\n    # Find and replace maroon (9) with white(0)\n    maroon_objects = find_objects(input_grid, 9)\n    \n    # Find largest maroon object (approximation: largest area)\n    largest_maroon = []\n    if maroon_objects:  \n        largest_maroon = max(maroon_objects, key=len)\n    \n    for obj in maroon_objects:\n       if obj != largest_maroon: \n            for row, col in obj:\n                output_grid[row, col] = 0\n\n\n    # Find 2x2 green(3) squares\n    green_squares = find_2x2_square(input_grid, 3)\n\n    # Replace neighbors of 2x2 green squares\n    for r, c in green_squares:\n        for neighbor_row, neighbor_col in get_neighbors(input_grid, r, c):\n            output_grid[neighbor_row, neighbor_col] = input_grid[neighbor_row,neighbor_col] #get the original value\n        for neighbor_row, neighbor_col in get_neighbors(input_grid, r+1, c):\n            output_grid[neighbor_row, neighbor_col] = input_grid[neighbor_row,neighbor_col]\n        for neighbor_row, neighbor_col in get_neighbors(input_grid, r, c+1):\n            output_grid[neighbor_row, neighbor_col] = input_grid[neighbor_row,neighbor_col]   \n        for neighbor_row, neighbor_col in get_neighbors(input_grid, r+1, c+1):\n            output_grid[neighbor_row, neighbor_col] = input_grid[neighbor_row,neighbor_col]   \n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5628,
    "candidates_token_count": 1183,
    "total_token_count": 6811,
    "cached_content_token_count": 0
  },
  "response_time": 12.030246,
  "response_file": "020-response.json"
}