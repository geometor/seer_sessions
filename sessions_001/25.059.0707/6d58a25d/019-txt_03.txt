import numpy as np

def get_pixels_by_color(grid, color):
    return np.argwhere(grid == color)

def analyze_example(input_grid, output_grid):
    input_grid = np.array(input_grid)
    output_grid = np.array(output_grid)

    input_dims = input_grid.shape
    output_dims = output_grid.shape
    yellow_pixels_input = get_pixels_by_color(input_grid, 4)
    green_pixels_input = get_pixels_by_color(input_grid, 3)
    green_pixels_output = get_pixels_by_color(output_grid, 3)

    #find the columns where green pixels were added
    initial_green_cols = set(green_pixels_input[:, 1]) if green_pixels_input.size>0 else set()
    final_green_cols = set(green_pixels_output[:, 1]) if green_pixels_output.size>0 else set()
    transformed_columns = list(final_green_cols - initial_green_cols)
    transformed_columns.sort()

    #find bounding rows in transformed columns
    bounding_rows = {}
    for col in transformed_columns:
        rows_in_col = []

        for r,c in yellow_pixels_input:
            if c == col:
                rows_in_col.append(r)

        for r,c in green_pixels_input:
            if c == col:
              rows_in_col.append(r)

        if len(rows_in_col) > 0:
          bounding_rows[col] = (min(rows_in_col), max(rows_in_col))

    return {
        "input_dimensions": input_dims,
        "output_dimensions": output_dims,
        "yellow_pixels_input": yellow_pixels_input.tolist(),
        "green_pixels_input": green_pixels_input.tolist(),
        "green_pixels_output": green_pixels_output.tolist(),
        "transformed_columns": transformed_columns,
        "bounding_rows": bounding_rows
    }

task = {
    "train": [
        {
            "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 4, 4, 4, 4, 4, 0], [0, 4, 0, 0, 0, 0, 0, 0, 4, 0], [0, 4, 0, 3, 3, 3, 3, 0, 4, 0], [0, 4, 0, 0, 0, 0, 0, 0, 4, 0], [0, 4, 4, 4, 4, 4, 4, 4, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
            "output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 3, 3, 3, 3, 3, 0], [0, 3, 3, 3, 3, 3, 3, 3, 3, 0], [0, 3, 3, 3, 3, 3, 3, 3, 3, 0], [0, 3, 3, 3, 3, 3, 3, 3, 3, 0], [0, 3, 3, 3, 3, 3, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        },
        {
            "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 0, 3, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
            "output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        },
        {
            "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 3, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
            "output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        },
		{
            "input": [[4, 0, 0, 0, 4, 4, 4, 4, 0, 0, 4, 0, 4], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4], [0, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 0, 4], [0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0], [0, 4, 4, 4, 0, 4, 4, 0, 4, 0, 0, 0, 4], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0], [4, 4, 4, 4, 0, 4, 0, 4, 4, 4, 4, 0, 4]],
            "output": [[3, 0, 0, 0, 3, 3, 3, 3, 0, 0, 3, 0, 3], [3, 0, 0, 0, 3, 3, 3, 3, 0, 0, 3, 0, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]],
        },
    ],
    "test": [
        {
            "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0], [0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0], [0, 0, 4, 0, 4, 4, 4, 4, 0, 4, 0, 0], [0, 0, 4, 0, 4, 0, 0, 4, 0, 4, 0, 0], [0, 0, 4, 0, 4, 4, 4, 4, 0, 4, 0, 0], [0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0], [0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
            "output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        }
    ]
}

results = []
for example in task["train"]:
  results.append(analyze_example(example["input"], example["output"]))

for result in results:
  print(result)