{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation rule can be described as follows:\n\n1.  **Grid Scaling:** The output grid's dimensions are half the size of the input grid's dimensions in both height and width. Integer division is used, so any fractional part is discarded.\n\n2.  **Object Scaling:** Each object within the input grid is scaled down proportionally. An object's width and height in the output grid are calculated by dividing its original width and height by two. If the result has decimal, round up to the largest integer (e.g. 3 / 2 = 1.5 -> 2). The color of each object is preserved.\n\n3. **Object Placement** Objects maintain their relative positions within the grid.\n\n4.  **Identity Transform as a Special Case**: If scaling down, then back up by the scaling factor, results in an identical grid, keep the original, otherwise, scale down.\n\"\"\"\n\nimport numpy as np\nimport math\n\ndef find_objects(grid):\n    \"\"\"Finds non-white objects in the grid.\"\"\"\n    objects = []\n    visited = set()\n    rows, cols = grid.shape\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def dfs(r, c, obj_id, color):\n        if (r, c) in visited or not is_valid(r, c) or grid[r, c] != color:\n            return []\n\n        visited.add((r, c))\n        object_pixels = [(r, c)]\n\n        # Check adjacent pixels (horizontal and vertical)\n        neighbors = [(r, c + 1), (r, c - 1), (r+1, c), (r-1, c)]\n        for nr, nc in neighbors:\n             object_pixels.extend(dfs(nr, nc, obj_id, color))\n\n        return object_pixels\n\n    obj_id_counter = 0\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and (r, c) not in visited:\n                obj_pixels = dfs(r, c, obj_id_counter, grid[r, c])\n                if obj_pixels:\n                    objects.append({\n                        \"id\": obj_id_counter,\n                        \"color\": grid[r, c],\n                        \"pixels\": obj_pixels\n                    })\n                    obj_id_counter += 1\n\n    return objects\n\ndef get_object_dimensions(obj):\n    \"\"\"Calculates the width and height of an object.\"\"\"\n    pixels = np.array(obj[\"pixels\"])\n    min_row, min_col = np.min(pixels, axis=0)\n    max_row, max_col = np.max(pixels, axis=0)\n    width = max_col - min_col + 1\n    height = max_row - min_row + 1\n    return width, height, min_row, min_col\n\ndef scale_object(obj, scale_factor=2):\n    \"\"\"Scales down an object's dimensions.\"\"\"\n    width, height, _, _ = get_object_dimensions(obj)\n    new_width = math.ceil(width / scale_factor)\n    new_height = math.ceil(height / scale_factor)\n    return new_width, new_height\n\ndef transform(input_grid):\n    # Grid Scaling\n    input_rows, input_cols = input_grid.shape\n    output_rows = input_rows // 2\n    output_cols = input_cols // 2\n\n    # Check for Identity Transform\n    if input_rows == output_rows * 2 and input_cols == output_cols * 2:\n       \n        # Find objects and their scaled dimensions\n        objects = find_objects(input_grid)\n        all_scaled_objects = []\n        \n        for obj in objects:\n            scaled_width, scaled_height = scale_object(obj)\n            all_scaled_objects.append((scaled_width * 2, scaled_height * 2))\n\n        # if all the scaled objects fit within a 2x2 of original grid, then return copy of the input\n        if all((w,h) == (2,2) or (w,h) == (1,2) or (w,h) == (2,1) or (w,h) == (1,1) for w, h in all_scaled_objects):\n            return input_grid.copy()\n\n    # Initialize output grid\n    output_grid = np.zeros((output_rows, output_cols), dtype=int)\n\n\n    # Find and Scale Objects\n    objects = find_objects(input_grid)\n    for obj in objects:\n        # Object Scaling\n        new_width, new_height = scale_object(obj)\n\n        # Object Placement (maintain relative position)\n        _, _, min_row, min_col = get_object_dimensions(obj)\n        new_min_row = min_row // 2\n        new_min_col = min_col // 2\n\n        # Fill output grid with scaled object\n        for r in range(new_height):\n            for c in range(new_width):\n                if new_min_row + r < output_rows and new_min_col + c < output_cols:\n                  output_grid[new_min_row + r, new_min_col + c] = obj[\"color\"]\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5826,
    "candidates_token_count": 1244,
    "total_token_count": 7070,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 12.739173,
  "response_file": "014-response.json"
}