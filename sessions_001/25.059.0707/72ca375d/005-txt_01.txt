import numpy as np

def describe_grid(grid):
    """Provides a description of the grid's dimensions and unique colors."""
    grid = np.array(grid)
    height, width = grid.shape
    unique_colors = np.unique(grid)
    color_counts = {color: np.count_nonzero(grid == color) for color in unique_colors}
    return f"Dimensions: {width}x{height}, Unique Colors: {unique_colors}, Color Counts: {color_counts}"


task = {
    "train": [
        {
            "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 6, 6, 6, 0, 0, 0], [0, 0, 0, 0, 6, 6, 6, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
            "output": [[0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 6, 6, 0, 0], [0, 0, 6, 6, 6, 0, 0], [0, 0, 0, 0, 0, 0, 0]],
        },
        {
            "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
            "output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0], [0, 0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        },
        {
            "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 7, 7, 0, 0], [0, 0, 0, 0, 7, 7, 7, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],
            "output": [[0, 0, 0, 0, 0, 0, 0], [0, 0, 7, 7, 7, 0, 0], [0, 0, 7, 7, 7, 0, 0], [0, 0, 0, 0, 0, 0, 0]],
        },
    ],
    "test": [{"input": [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0]], "output": [[0, 0, 0, 0, 0], [0, 2, 2, 0, 0], [0, 0, 0, 0, 0]]}],
}

for i, example in enumerate(task["train"]):
    input_grid = example["input"]
    output_grid = example["output"]
    print(f"Example {i+1}:")
    print(f"  Input: {describe_grid(input_grid)}")
    print(f"  Output: {describe_grid(output_grid)}")

    # Test the existing transform function.
    transformed_grid = transform(input_grid)
    print(f"  Transformed: {describe_grid(transformed_grid)}")
    if transformed_grid == output_grid:
      print("  Transform Successful")
    else:
      print("  Transform Failed")
    print("-" * 20)

