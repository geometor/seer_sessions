{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. Find Objects: Identify all contiguous regions of non-white (non-0) pixels.  An object is defined by orthogonal contiguity.\n2. Isolate with Padding: Determine the bounding box for each object. Add one row of white (0) padding above and below, and one column of padding to the left and right.\n3. Extract: Extract the padded region. If multiple objects exist, extract each one individually.\n4. Combine: If multiple objects exist, combine them into one grid, with a single row and column of 0 padding.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    # Find coordinates of all non-zero pixels.\n    grid = np.array(grid)\n    non_zero_coords = np.argwhere(grid != 0)\n    if non_zero_coords.size == 0:\n        return []  # No objects found\n\n    objects = []\n    visited = set()\n\n    def get_neighbors(coord):\n        row, col = coord\n        neighbors = []\n        if row > 0:\n            neighbors.append((row - 1, col))  # Up\n        if row < grid.shape[0] - 1:\n            neighbors.append((row + 1, col))  # Down\n        if col > 0:\n            neighbors.append((row, col - 1))  # Left\n        if col < grid.shape[1] - 1:\n            neighbors.append((row, col + 1))  # Right\n        return neighbors\n\n    def dfs(coord, current_object):\n        visited.add(tuple(coord))\n        current_object.append(coord)\n        for neighbor in get_neighbors(coord):\n            if tuple(neighbor) not in visited and grid[neighbor[0], neighbor[1]] == grid[coord[0], coord[1]]:\n                dfs(neighbor, current_object)\n\n\n    for coord in non_zero_coords:\n        if tuple(coord) not in visited:\n            current_object = []\n            dfs(coord, current_object)\n            objects.append(current_object)\n\n    return objects\n\ndef get_object_bounds(object_coords):\n    min_row = np.min(object_coords[:, 0])\n    max_row = np.max(object_coords[:, 0])\n    min_col = np.min(object_coords[:, 1])\n    max_col = np.max(object_coords[:, 1])\n    return min_row, max_row, min_col, max_col\n\ndef transform(input_grid):\n    # Convert input grid to a NumPy array.\n    input_grid = np.array(input_grid)\n\n    # 1. Find Objects.\n    objects = find_objects(input_grid)\n\n    if not objects:\n        return [[]]\n\n    output_grids = []\n\n    for obj in objects:\n        obj_arr = np.array(obj)\n       # 2. Isolate with Padding.\n        min_row, max_row, min_col, max_col = get_object_bounds(obj_arr)\n\n        padded_min_row = max(0, min_row - 1)\n        padded_max_row = min(input_grid.shape[0], max_row + 2)\n        padded_min_col = max(0, min_col - 1)\n        padded_max_col = min(input_grid.shape[1], max_col + 2)\n\n        # 3. Extract the padded region.\n        extracted_grid = input_grid[padded_min_row:padded_max_row, padded_min_col:padded_max_col]\n        output_grids.append(extracted_grid)\n\n    # 4. Combine objects\n    if len(output_grids) == 1:\n        return output_grids[0].tolist()\n    else:\n        #determine max height and total width\n        max_height = max(grid.shape[0] for grid in output_grids)\n        total_width = sum(grid.shape[1] for grid in output_grids) + (len(output_grids) -1) # +1 for padding\n\n        combined_grid = np.zeros((max_height, total_width), dtype=int)\n        current_x = 0\n        for grid in output_grids:\n            h, w = grid.shape\n            combined_grid[:h, current_x:current_x+w] = grid\n            current_x += w + 1 #space between objects\n\n        return combined_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3169,
    "candidates_token_count": 1053,
    "total_token_count": 4222,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 12.640396,
  "response_file": "006-response.json"
}