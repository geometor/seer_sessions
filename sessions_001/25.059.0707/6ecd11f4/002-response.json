{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nExtracts a rectangular, non-white subgrid from the bottom area of a larger input grid.\n\"\"\"\n\nimport numpy as np\n\ndef find_non_white_rectangle(grid):\n    \"\"\"Finds the bounding box of the smallest rectangle of non-white pixels.\"\"\"\n    rows, cols = grid.shape\n    min_row, min_col = rows, cols\n    max_row, max_col = -1, -1\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0:\n                min_row = min(min_row, r)\n                min_col = min(min_col, c)\n                max_row = max(max_row, r)\n                max_col = max(max_col, c)\n\n    if max_row == -1:  # Handle the case where the grid is all white.\n      return None, None, None, None\n    return min_row, min_col, max_row + 1, max_col + 1\n\ndef transform(input_grid):\n    \"\"\"\n    Extracts a rectangular region of non-white pixels from the input grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    grid = np.array(input_grid)\n\n    # Find the bounding box of the non-white rectangle\n    min_row, min_col, max_row, max_col = find_non_white_rectangle(grid)\n    \n    if min_row is None: # if no rectangle is found, return empty grid.\n        return []\n\n    # Extract the subgrid using array slicing\n    output_grid = grid[min_row:max_row, min_col:max_col].tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7047,
    "candidates_token_count": 407,
    "total_token_count": 7454,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.366817,
  "response_file": "002-response.json"
}