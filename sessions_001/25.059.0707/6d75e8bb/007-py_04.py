import numpy as np

def analyze_results(examples, transform_func):
    results = []
    for i, (input_grid, output_grid) in enumerate(examples):
        transformed_grid = transform_func(input_grid.copy())
        is_correct = np.array_equal(transformed_grid, output_grid)
        results.append({
            "example_number": i + 1,
            "input_shape": input_grid.shape,
            "output_shape": output_grid.shape,
            "transform_correct": is_correct,
        })
    return results

#Dummy data to allow local execution of analyze_results
example_grids = [
    (np.array([[0,0,0,0,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,0,0,0,0],
              [0,0,0,8,8,8,8,8,0,0,0],
              [0,0,0,8,0,0,0,8,0,0,0],
              [0,0,0,8,0,0,0,8,0,0,0],
              [0,0,0,8,0,0,0,8,0,0,0],
              [0,0,0,8,8,8,8,8,0,0,0],
              [0,0,0,0,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,0,0,0,0]]),
     np.array([[0,0,0,0,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,0,0,0,0],
              [0,0,0,8,8,8,8,8,0,0,0],
              [0,0,0,8,2,2,2,8,0,0,0],
              [0,0,0,8,2,2,2,8,0,0,0],
              [0,0,0,8,2,2,2,8,0,0,0],
              [0,0,0,8,8,8,8,8,0,0,0],
              [0,0,0,0,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,0,0,0,0]])),

    (np.array([[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
              [0,0,0,0,0,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0],
              [0,0,0,0,0,8,0,0,0,0,0,8,0,0,0,0,0,0,0,0],
              [0,0,0,0,0,8,0,0,0,0,0,8,0,0,0,0,0,0,0,0],
              [0,0,0,0,0,8,0,0,0,0,0,8,0,0,0,0,0,0,0,0],
              [0,0,0,0,0,8,0,0,0,0,0,8,0,0,0,0,0,0,0,0],
              [0,0,0,0,0,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]),
     np.array([[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
              [0,0,0,0,0,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0],
              [0,0,0,0,0,8,2,2,2,2,2,8,0,0,0,0,0,0,0,0],
              [0,0,0,0,0,8,2,2,2,2,2,8,0,0,0,0,0,0,0,0],
              [0,0,0,0,0,8,2,2,2,2,2,8,0,0,0,0,0,0,0,0],
              [0,0,0,0,0,8,2,2,2,2,2,8,0,0,0,0,0,0,0,0],
              [0,0,0,0,0,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]])),

    (np.array([[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,8,0,0,0,0,0,0,8,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,8,0,0,0,0,0,0,8,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,8,0,0,0,0,0,0,8,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,8,0,0,0,0,0,0,8,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,8,0,0,0,0,0,0,8,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,8,0,0,0,0,0,0,8,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,8,0,0,0,0,0,0,8,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,8,0,0,0,0,0,0,8,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]),
     np.array([[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,8,2,2,2,2,2,2,8,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,8,2,2,2,2,2,2,8,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,8,2,2,2,2,2,2,8,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,8,2,2,2,2,2,2,8,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,8,2,2,2,2,2,2,8,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,8,2,2,2,2,2,2,8,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,8,2,2,2,2,2,2,8,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,8,2,2,2,2,2,2,8,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
              [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]])),
    (np.array([[0,0,0,0,0,0,0,0,0,0,0,0,0],
             [0,0,0,0,0,0,0,0,0,0,0,0,0],
             [0,0,0,0,0,0,0,0,0,0,0,0,0],
             [0,0,0,0,8,8,8,8,8,8,0,0,0],
             [0,0,0,0,8,0,0,0,0,8,0,0,0],
             [0,0,0,0,8,0,0,0,0,8,0,0,0],
             [0,0,0,0,8,8,8,8,8,8,0,0,0],
             [0,0,0,0,0,0,0,0,0,0,0,0,0],
             [0,0,0,5,5,5,5,5,5,5,5,0,0],
             [0,0,0,5,0,0,0,0,0,0,5,0,0],
             [0,0,0,5,0,0,0,0,0,0,5,0,0],
             [0,0,0,5,5,5,5,5,5,5,5,0,0],
             [0,0,0,0,0,0,0,0,0,0,0,0,0]]),
    np.array([[0,0,0,0,0,0,0,0,0,0,0,0,0],
             [0,0,0,0,0,0,0,0,0,0,0,0,0],
             [0,0,0,0,0,0,0,0,0,0,0,0,0],
             [0,0,0,0,8,8,8,8,8,8,0,0,0],
             [0,0,0,0,8,2,2,2,2,8,0,0,0],
             [0,0,0,0,8,2,2,2,2,8,0,0,0],
             [0,0,0,0,8,8,8,8,8,8,0,0,0],
             [0,0,0,0,0,0,0,0,0,0,0,0,0],
             [0,0,0,5,5,5,5,5,5,5,5,0,0],
             [0,0,0,5,0,0,0,0,0,0,5,0,0],
             [0,0,0,5,0,0,0,0,0,0,5,0,0],
             [0,0,0,5,5,5,5,5,5,5,5,0,0],
             [0,0,0,0,0,0,0,0,0,0,0,0,0]])),
    (np.array([[8,8,8,8,8,8],
              [8,8,8,8,8,8],
              [8,8,0,0,8,8],
              [8,8,0,0,8,8],
              [8,8,8,8,8,8],
              [8,8,8,8,8,8]]),
    np.array([[8,8,8,8,8,8],
              [8,8,8,8,8,8],
              [8,8,2,2,8,8],
              [8,8,2,2,8,8],
              [8,8,8,8,8,8],
              [8,8,8,8,8,8]]))
]

results = analyze_results(example_grids, transform)
for result in results:
    print(result)
