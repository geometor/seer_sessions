import numpy as np

def analyze_example(input_grid, output_grid, predicted_output_grid):
    """Analyzes an example and returns metrics."""
    input_grid = np.array(input_grid)
    output_grid = np.array(output_grid)
    predicted_output_grid = np.array(predicted_output_grid)

    input_plus_count = 0
    input_orange_count = 0
    input_red_count = 0
    
    rows, cols = input_grid.shape
    for r in range(rows):
      for c in range(cols):
        if input_grid[r,c] == 7:
          input_orange_count += 1
        elif input_grid[r,c] == 2:
          input_red_count += 1
    input_plus_count = len(find_plus_objects(input_grid))


    output_orange_count = 0
    output_red_count = 0

    rows, cols = output_grid.shape
    for r in range(rows):
       for c in range(cols):
          if output_grid[r,c] == 7:
            output_orange_count += 1
          elif output_grid[r,c] == 2:
            output_red_count += 1


    correct_pixels = np.sum(predicted_output_grid == output_grid)
    total_pixels = output_grid.size
    accuracy = correct_pixels / total_pixels if total_pixels > 0 else 0.0

    return {
        "input_plus_count": input_plus_count,
        "input_orange_count": input_orange_count,
        "input_red_count": input_red_count,
        "output_orange_count": output_orange_count,
        "output_red_count": output_red_count,        
        "accuracy": accuracy,
        "correct_pixels": correct_pixels,
        "total_pixels": total_pixels,
    }

# Example data (replace with actual data from the task)
task_examples = [
  (
        [[7, 0, 7, 0, 7, 0, 0, 0, 0, 0, 7, 0, 7, 0, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 2, 0, 7, 0, 0, 0, 0, 0, 7, 0, 2, 0, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 7, 0, 7, 0, 0, 0, 0, 0, 7, 0, 7, 0, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 7, 0, 7, 0, 0, 0, 0, 0, 7, 0, 7, 0, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 2, 0, 7, 0, 0, 0, 0, 0, 7, 0, 2, 0, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 7, 0, 7, 0, 0, 0, 0, 0, 7, 0, 7, 0, 7]],
        [[7, 2, 7, 2, 7, 0, 0, 0, 0, 0, 7, 2, 7, 2, 7], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2], [7, 2, 2, 2, 7, 0, 0, 0, 0, 0, 7, 2, 2, 2, 7], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2], [7, 2, 7, 2, 7, 0, 0, 0, 0, 0, 7, 2, 7, 2, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 2, 7, 2, 7, 0, 0, 0, 0, 0, 7, 2, 7, 2, 7], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2], [7, 2, 2, 2, 7, 0, 0, 0, 0, 0, 7, 2, 2, 2, 7], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2], [7, 2, 7, 2, 7, 0, 0, 0, 0, 0, 7, 2, 7, 2, 7]],
        [[7, 2, 7, 2, 7, 0, 0, 0, 0, 0, 7, 2, 7, 2, 7], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2], [7, 2, 2, 2, 7, 0, 0, 0, 0, 0, 7, 2, 2, 2, 7], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2], [7, 2, 7, 2, 7, 0, 0, 0, 0, 0, 7, 2, 7, 2, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 2, 7, 2, 7, 0, 0, 0, 0, 0, 7, 2, 7, 2, 7], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2], [7, 2, 2, 2, 7, 0, 0, 0, 0, 0, 7, 2, 2, 2, 7], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2], [7, 2, 7, 2, 7, 0, 0, 0, 0, 0, 7, 2, 7, 2, 7]]
    ),
   (
        [[7, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 7, 0, 7, 0, 0, 0, 0, 0, 7, 0, 7, 0, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 2, 0, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        [[7, 2, 7, 2, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 2, 2, 2, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 2, 7, 2, 7, 0, 0, 0, 0, 0, 7, 2, 7, 2, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 2, 2, 2, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 2, 7, 2, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        [[7, 2, 7, 2, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 2, 2, 2, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2], [7, 2, 7, 2, 7, 0, 0, 0, 0, 0, 7, 2, 7, 2, 7], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 7, 2, 2, 2, 7], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 7, 2, 7, 2, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
    ),
    (
       [[7, 0, 7, 0, 7, 0, 0, 0, 0, 0, 7, 0, 7, 0, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 2, 0, 7, 0, 0, 0, 0, 0, 7, 0, 2, 0, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 7, 0, 7, 0, 0, 0, 0, 0, 7, 0, 7, 0, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 7, 0, 7, 0, 0, 0, 0, 0, 7, 0, 7, 0, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 2, 0, 7, 0, 0, 0, 0, 0, 7, 0, 2, 0, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 7, 0, 7, 0, 0, 0, 0, 0, 7, 0, 7, 0, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        [[7, 2, 7, 2, 7, 0, 0, 0, 0, 0, 7, 2, 7, 2, 7], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2], [7, 2, 2, 2, 7, 0, 0, 0, 0, 0, 7, 2, 2, 2, 7], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2], [7, 2, 7, 2, 7, 0, 0, 0, 0, 0, 7, 2, 7, 2, 7], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2], [7, 2, 7, 2, 7, 0, 0, 0, 0, 0, 7, 2, 7, 2, 7], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2], [7, 2, 2, 2, 7, 0, 0, 0, 0, 0, 7, 2, 2, 2, 7], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2], [7, 2, 7, 2, 7, 0, 0, 0, 0, 0, 7, 2, 7, 2, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
       [[7, 2, 7, 2, 7, 0, 0, 0, 0, 0, 7, 2, 7, 2, 7], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2], [7, 2, 2, 2, 7, 0, 0, 0, 0, 0, 7, 2, 2, 2, 7], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2], [7, 2, 7, 2, 7, 0, 0, 0, 0, 0, 7, 2, 7, 2, 7], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2], [7, 2, 7, 2, 7, 0, 0, 0, 0, 0, 7, 2, 7, 2, 7], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2], [7, 2, 2, 2, 7, 0, 0, 0, 0, 0, 7, 2, 2, 2, 7], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2], [7, 2, 7, 2, 7, 0, 0, 0, 0, 0, 7, 2, 7, 2, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
    )

]


from SEER_utils import predict_and_report

results = []
for input_grid, output_grid in task_examples:
  predicted_output = transform(input_grid)
  metrics = analyze_example(input_grid, output_grid, predicted_output)
  results.append(metrics)
  print(predict_and_report(transform,input_grid,output_grid))


for i, metrics in enumerate(results):
    print(f"Example {i+1}:")
    for key, value in metrics.items():
        print(f"  {key}: {value}")