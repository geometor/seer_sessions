import numpy as np

def analyze_example(example):
    input_grid = np.array(example['input'])
    output_grid = np.array(example['output'])

    def count_objects(grid):
        objects = {}
        rows, cols = grid.shape
        visited = np.zeros((rows, cols), dtype=bool)

        def dfs(row, col, color):
            if (row < 0 or row >= rows or col < 0 or col >= cols or
                    visited[row, col] or grid[row, col] != color):
                return
            visited[row, col] = True
            count[0] += 1
            dfs(row + 1, col, color)
            dfs(row - 1, col, color)
            dfs(row, col + 1, color)
            dfs(row, col - 1, color)

        for row in range(rows):
            for col in range(cols):
                if not visited[row, col]:
                    color = grid[row, col]
                    count = [0]
                    dfs(row, col, color)
                    if color not in objects:
                        objects[color] = 0
                    objects[color] += count[0]
        return objects
    
    def has_lines(grid):
        rows, cols = grid.shape
        # Check for horizontal lines
        for row in range(rows):
            for col in range(cols - 1):
                if grid[row,col] != 0 and grid[row, col] == grid[row, col + 1]:
                    return True
        #check vertical lines
        for col in range(cols):
            for row in range(rows-1):
                if grid[row,col] != 0 and grid[row, col] == grid[row+1, col]:
                    return True
        #check diagonal lines
        for row in range(rows-1):
            for col in range(cols-1):
                #top-left to bottom-right
                if grid[row,col] != 0 and grid[row,col] == grid[row+1,col+1]:
                    return True
                #top-right to bottom-left
                if col > 0 and grid[row,col] != 0 and grid[row,col] == grid[row+1,col-1]:
                    return True

        return False

    input_objects = count_objects(input_grid)
    output_objects = count_objects(output_grid)
    input_has_lines = has_lines(input_grid)
    output_has_lines = has_lines(output_grid)
    

    print(f"  Input Objects: {input_objects}")
    print(f"  Output Objects: {output_objects}")
    print(f"  Input has Lines: {input_has_lines}")
    print(f"  Output has Lines: {output_has_lines}")

print("Example 1:")
analyze_example(task['train'][0])
print("\\nExample 2:")
analyze_example(task['train'][1])
print("\\nExample 3:")
analyze_example(task['train'][2])
print("\\nExample 4:")
analyze_example(task['train'][3])