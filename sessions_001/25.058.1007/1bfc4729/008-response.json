{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  Identify Non-Zero Pixels: Locate all pixels in the input grid that have a non-zero value.\n2.  Conditional Expansion:\n    *   If a non-zero pixel is the only non-zero pixel in its row, expand it *vertically* into a line of the same color, covering the entire column.  Then set original pixel to zero.\n    *   If a non-zero pixel is the only non-zero pixel in its column, expand it *horizontally* into a line of the same color, covering the entire row. Then set original pixel to zero.\n    *    If a non-zero pixel is the only non-zero pixel in both its row and its column, do *nothing*. Then set original pixel to zero.\n    * If there is more than one non-zero pixel in its row *and* its column - do nothing, but keep the original pixel.\n3. Output the result.\n\"\"\"\n\nimport numpy as np\n\ndef count_non_zero_in_row(grid, row):\n    \"\"\"Counts non-zero pixels in a given row.\"\"\"\n    return np.count_nonzero(grid[row, :])\n\ndef count_non_zero_in_column(grid, col):\n    \"\"\"Counts non-zero pixels in a given column.\"\"\"\n    return np.count_nonzero(grid[:, col])\n\ndef transform(input_grid):\n    # Initialize output_grid with zeros\n    output_grid = np.zeros_like(input_grid)\n    rows, cols = input_grid.shape\n\n    # Iterate through each cell in the input_grid\n    for r in range(rows):\n        for c in range(cols):\n            if input_grid[r, c] != 0:\n                value = input_grid[r, c]\n                # Check if it's the only non-zero pixel in its row and column\n                if count_non_zero_in_row(input_grid, r) == 1 and count_non_zero_in_column(input_grid,c) == 1:\n                  output_grid[r,c] = 0\n                # Check if it's the only non-zero pixel in its row\n                elif count_non_zero_in_row(input_grid, r) == 1:\n                    # Expand vertically\n                    for i in range(rows):\n                        output_grid[i, c] = value\n                # Check if it's the only non-zero pixel in its column\n                elif count_non_zero_in_column(input_grid, c) == 1:\n                    # Expand horizontally\n                    for i in range(cols):\n                        output_grid[r, i] = value\n                else: # Added condition where pixel exists\n                    output_grid[r,c] = value\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4173,
    "candidates_token_count": 637,
    "total_token_count": 4810,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.273891,
  "response_file": "008-response.json"
}