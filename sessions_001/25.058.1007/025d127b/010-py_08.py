import numpy as np

# ... (get_objects function from previous code) ...

def analyze_example(input_grid, expected_grid):
    """Analyzes a single example pair."""

    input_red_objects = get_objects(input_grid, 2)
    expected_red_objects = get_objects(expected_grid, 2)
    input_magenta_objects = get_objects(input_grid, 6)
    expected_magenta_objects = get_objects(expected_grid, 6)

    print("Red Objects (Input):", input_red_objects)
    print("Red Objects (Expected):", expected_red_objects)
    print("Magenta Objects (Input):", input_magenta_objects)
    print("Magenta Objects (Expected):", expected_magenta_objects)
    
    # use array comparison to see if there are differences
    diff = np.where(input_grid != expected_grid)
    print(f"changes: {list(zip(diff[0], diff[1]))}")

# Example data (from the prompt)
train = [
    (np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 0],
               [0, 0, 0, 0, 0, 6, 2, 2, 2, 2, 6, 0, 0, 0],
               [0, 0, 0, 0, 0, 6, 2, 2, 2, 2, 6, 0, 0, 0],
               [0, 0, 0, 0, 0, 6, 2, 2, 2, 2, 6, 0, 0, 0],
               [0, 0, 0, 0, 0, 6, 2, 2, 2, 2, 6, 0, 0, 0],
               [0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
     np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 0],
               [0, 0, 0, 0, 0, 6, 2, 2, 2, 2, 6, 0, 0, 0],
               [0, 0, 0, 0, 0, 6, 2, 2, 2, 2, 6, 0, 0, 0],
               [0, 0, 0, 0, 0, 6, 2, 2, 2, 2, 6, 0, 0, 0],
               [0, 0, 0, 0, 0, 6, 2, 2, 2, 2, 6, 0, 0, 0],
               [0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
     ),
    (np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 6, 6, 6, 6, 0, 0, 0],
               [0, 0, 0, 0, 6, 2, 2, 2, 6, 0, 0, 0],
               [0, 0, 0, 6, 2, 2, 2, 2, 6, 0, 0, 0],
               [0, 0, 6, 2, 2, 2, 2, 2, 6, 0, 0, 0],
               [0, 0, 6, 2, 2, 2, 2, 2, 6, 0, 0, 0],
               [0, 0, 0, 6, 2, 2, 2, 2, 6, 0, 0, 0],
               [0, 0, 0, 0, 6, 2, 2, 2, 6, 0, 0, 0],
               [0, 0, 0, 0, 0, 6, 6, 6, 6, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
     np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 6, 6, 6, 6, 6, 0, 0, 0],
               [0, 0, 0, 6, 2, 2, 2, 2, 6, 0, 0, 0],
               [0, 0, 6, 2, 2, 2, 2, 2, 6, 0, 0, 0],
               [0, 0, 6, 2, 2, 2, 2, 2, 6, 0, 0, 0],
               [0, 0, 6, 2, 2, 2, 2, 2, 6, 0, 0, 0],
               [0, 0, 6, 2, 2, 2, 2, 2, 6, 0, 0, 0],
               [0, 0, 0, 6, 2, 2, 2, 2, 6, 0, 0, 0],
               [0, 0, 0, 0, 6, 6, 6, 6, 6, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
     ),
    (np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 6, 6, 6, 0, 0, 0, 0],
               [0, 0, 0, 6, 2, 2, 6, 0, 0, 0, 0],
               [0, 0, 6, 2, 2, 2, 6, 0, 0, 0, 0],
               [0, 0, 6, 2, 2, 2, 6, 0, 0, 0, 0],
               [0, 0, 6, 2, 2, 2, 6, 0, 0, 0, 0],
               [0, 0, 0, 6, 2, 2, 6, 0, 0, 0, 0],
               [0, 0, 0, 0, 6, 6, 6, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
     np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 6, 6, 6, 6, 6, 0, 0, 0],
               [0, 0, 6, 2, 2, 2, 2, 6, 0, 0, 0],
               [0, 0, 6, 2, 2, 2, 2, 6, 0, 0, 0],
               [0, 0, 6, 2, 2, 2, 2, 6, 0, 0, 0],
               [0, 0, 6, 2, 2, 2, 2, 6, 0, 0, 0],
               [0, 0, 6, 2, 2, 2, 2, 6, 0, 0, 0],
               [0, 0, 0, 6, 6, 6, 6, 6, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
     )
]

for i, (input_grid, expected_grid) in enumerate(train):
    print(f"----- Example {i+1} -----")
    analyze_example(input_grid, expected_grid)