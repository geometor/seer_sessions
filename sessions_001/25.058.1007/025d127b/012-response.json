{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation maintains the red shape while modifying the magenta shape. Magenta pixels move inwards one unit towards the nearest edge, but only if the move does not disconnect the magenta shape and does not overlap with any red pixels.\n\"\"\"\n\nimport numpy as np\n\ndef get_objects(grid, color):\n    \"\"\"Find connected components of a specific color.\"\"\"\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n\n    def dfs(row, col):\n        \"\"\"Depth-first search to find connected pixels.\"\"\"\n        if (row < 0 or row >= grid.shape[0] or col < 0 or col >= grid.shape[1] or\n                visited[row, col] or grid[row, col] != color):\n            return []\n\n        visited[row, col] = True\n        object_pixels = [(row, col)]\n\n        object_pixels.extend(dfs(row + 1, col))\n        object_pixels.extend(dfs(row - 1, col))\n        object_pixels.extend(dfs(row, col + 1))\n        object_pixels.extend(dfs(row, col - 1))\n\n        return object_pixels\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] == color and not visited[row, col]:\n                objects.append(dfs(row, col))\n\n    return objects\n\ndef is_connected(pixels):\n    \"\"\"\n    Checks if a set of pixels form a connected component using a simple\n    adjacency check\n    \"\"\"\n    if not pixels:\n        return True  # Empty set is considered connected\n\n    # Create a set of pixel coordinates for quick lookup\n    pixel_set = set(pixels)\n\n    # Check if the set is connected\n    # Starting from the first pixel, do a depth-first search\n    visited = set()\n    stack = [pixels[0]]\n\n    while stack:\n        current = stack.pop()\n        if current in visited:\n            continue\n        visited.add(current)\n\n        # Add unvisited neighbors to the stack\n        row, col = current\n        neighbors = [(row-1, col), (row+1, col), (row, col-1), (row, col+1)]\n        for neighbor in neighbors:\n            if neighbor in pixel_set and neighbor not in visited:\n                stack.append(neighbor)\n\n    return len(visited) == len(pixel_set)\n\ndef transform(input_grid):\n    \"\"\"\n    Modify the magenta shape by shifting pixels inwards, avoiding red pixels and maintaining connectivity.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    magenta_objects = get_objects(input_grid, 6)\n    red_objects = get_objects(input_grid, 2)\n    red_pixels = set()\n    for obj in red_objects:\n      red_pixels.update(obj)\n    \n    for magenta_object in magenta_objects:\n      new_magenta_object = magenta_object.copy()\n      for pixel in magenta_object:\n        row, col = pixel\n        \n        # check neighbors\n        neighbors = [(row-1, col), (row+1, col), (row, col-1), (row, col+1)]\n        \n        for neighbor_row, neighbor_col in neighbors:\n          # check if move is within grid\n          if 0 <= neighbor_row < output_grid.shape[0] and 0 <= neighbor_col < output_grid.shape[1]:\n\n            # Check if neighbor cell is empty (not magenta or red)\n            if (neighbor_row,neighbor_col) not in red_pixels and output_grid[neighbor_row,neighbor_col] == 0:\n              # check if move breaks connectivity\n              temp_object = new_magenta_object.copy()\n              temp_object.remove(pixel)\n              temp_object.append((neighbor_row, neighbor_col))\n\n              if is_connected(temp_object):\n                  # move the pixel\n                  output_grid[row,col] = 0\n                  output_grid[neighbor_row,neighbor_col] = 6\n                  new_magenta_object.remove(pixel)\n                  new_magenta_object.append((neighbor_row,neighbor_col))\n                  break # move only one step at a time\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 10299,
    "candidates_token_count": 1002,
    "total_token_count": 11301,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.991614,
  "response_file": "012-response.json"
}