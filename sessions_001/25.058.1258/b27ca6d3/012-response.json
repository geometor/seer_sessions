{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Target Pixels:** Locate all pixels with the value '2' (red).\n\n2.  **Check Horizontal/Vertical Adjacency:** For each target pixel (red pixel):\n    *   Check for three or more horizontally or vertically adjacent red pixels.\n    *   If found, change *all* connected red pixels in that group to '3' (green).\n\n3.  **Check Diagonal Adjacency for Isolated Pairs:**\n    * Iterate through all of the `red` pixels\n    * If there exists two red_pixels, that are diagonally adjacent and they each are not adjacent to a third red pixel that is horizontally or vertically aligned with both, change the color of the upper-right red_pixel to be green.\n\n4. **Leave Unchanged:** Red pixels not matching the above cases stay red.  Non-red pixels are unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, row, col, include_diagonal=True):\n    \"\"\"Gets the neighbors of a cell, optionally including diagonals.\"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    for i in range(max(0, row - 1), min(rows, row + 2)):\n        for j in range(max(0, col - 1), min(cols, col + 2)):\n            if (i != row or j != col):  # Exclude the cell itself\n                if include_diagonal or (i == row or j == col): # Exclude diagonals if required\n                    neighbors.append((i, j))\n    return neighbors\n\ndef check_horizontal_vertical_adjacency(grid, row, col, target_color=2):\n    \"\"\"Checks for three or more horizontally or vertically adjacent pixels of target_color, returns all connected pixels.\"\"\"\n    rows, cols = grid.shape\n    connected_pixels = set()\n    \n    # Horizontal check\n    count = 0\n    pixels_to_check = []\n    for j in range(max(0, col - 2), min(cols, col + 3)):\n        if grid[row,j] == target_color:\n            count +=1\n            pixels_to_check.append((row,j))\n        else:\n            if count >= 3:\n                connected_pixels.update(pixels_to_check)\n            count = 0\n            pixels_to_check = []\n    if count >= 3:\n        connected_pixels.update(pixels_to_check)\n\n    # Vertical check\n    count = 0\n    pixels_to_check = []\n    for i in range(max(0, row - 2), min(rows, row + 3)):\n        if grid[i, col] == target_color:\n            count += 1\n            pixels_to_check.append((i, col))\n        else:\n            if count >= 3:\n                connected_pixels.update(pixels_to_check)\n            count = 0\n            pixels_to_check = []\n            \n    if count >=3:\n        connected_pixels.update(pixels_to_check)\n\n    return connected_pixels\n\n\ndef check_diagonal_adjacency(grid, row, col, target_color=2):\n    \"\"\"Checks for diagonally adjacent red pixels with no shared H/V neighbor and returns upper-right pixel.\"\"\"\n    rows, cols = grid.shape\n    neighbors = get_neighbors(grid, row, col, include_diagonal=True)\n    for r, c in neighbors:\n        if grid[r, c] == target_color:\n            # Check if it's a diagonal neighbor\n            if r != row and c != col:\n                # Get neighbors of both pixels\n                neighbors1 = get_neighbors(grid, row, col, include_diagonal=False)\n                neighbors2 = get_neighbors(grid, r, c, include_diagonal=False)\n\n                # Check for shared H/V neighbors\n                shared_neighbors = set(neighbors1).intersection(set(neighbors2))\n                third_red_neighbor = False\n                for sr, sc in shared_neighbors:\n                    if grid[sr, sc] == target_color:\n                         third_red_neighbor = True\n                         break\n                if not third_red_neighbor:\n                  if r < row:\n                      return (r,c) #return the upper right pixel\n                  else:\n                      return (row, col)\n    return None\n                \n\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the specified rules.\"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = output_grid.shape\n\n    # Horizontal/Vertical Adjacency Check and Transformation\n    pixels_to_change = set()\n    for row in range(rows):\n        for col in range(cols):\n            if output_grid[row, col] == 2:\n                connected_pixels = check_horizontal_vertical_adjacency(output_grid, row, col)\n                if connected_pixels:\n                    pixels_to_change.update(connected_pixels)\n    for r, c in pixels_to_change:\n        output_grid[r, c] = 3\n\n    # Diagonal Adjacency Check and Transformation\n    for row in range(rows):\n      for col in range(cols):\n        if output_grid[row, col] == 2:\n          upper_right_pixel = check_diagonal_adjacency(output_grid, row, col)\n          if upper_right_pixel:\n            output_grid[upper_right_pixel] = 3\n          \n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6533,
    "candidates_token_count": 1260,
    "total_token_count": 7793,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.570307,
  "response_file": "012-response.json"
}