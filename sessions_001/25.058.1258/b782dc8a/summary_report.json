{
  "response_report": [
    {
      "response_file": "001-response.json",
      "token_usage": {
        "prompt": 4301,
        "candidates": 767,
        "total": 5068,
        "cached": 0
      },
      "response_time": 11.303953
    },
    {
      "response_file": "002-response.json",
      "token_usage": {
        "prompt": 4925,
        "candidates": 572,
        "total": 5497,
        "cached": 0
      },
      "response_time": 6.891978
    },
    {
      "response_file": "003-response.json",
      "token_usage": {
        "prompt": 2773,
        "candidates": 605,
        "total": 3378,
        "cached": 0
      },
      "response_time": 8.272158
    },
    {
      "response_file": "004-response.json",
      "token_usage": {
        "prompt": 3239,
        "candidates": 481,
        "total": 3720,
        "cached": 0
      },
      "response_time": 5.777496
    },
    {
      "response_file": "005-response.json",
      "token_usage": {
        "prompt": 1732,
        "candidates": 1414,
        "total": 3146,
        "cached": 0
      },
      "response_time": 17.312333
    },
    {
      "response_file": "006-response.json",
      "token_usage": {
        "prompt": 2941,
        "candidates": 480,
        "total": 3421,
        "cached": 0
      },
      "response_time": 4.392718
    },
    {
      "response_file": "007-response.json",
      "token_usage": {
        "prompt": 1731,
        "candidates": 2714,
        "total": 4445,
        "cached": 0
      },
      "response_time": 25.942483
    },
    {
      "response_file": "008-response.json",
      "token_usage": {
        "prompt": 4229,
        "candidates": 502,
        "total": 4731,
        "cached": 0
      },
      "response_time": 4.205235
    },
    {
      "response_file": "009-response.json",
      "token_usage": {
        "prompt": 2445,
        "candidates": 551,
        "total": 2996,
        "cached": 0
      },
      "response_time": 7.984876
    },
    {
      "response_file": "010-response.json",
      "token_usage": {
        "prompt": 2857,
        "candidates": 1235,
        "total": 4092,
        "cached": 0
      },
      "response_time": 12.020492
    },
    {
      "response_file": "011-response.json",
      "token_usage": {
        "prompt": 2485,
        "candidates": 3603,
        "total": 6088,
        "cached": 0
      },
      "response_time": 33.21724
    },
    {
      "response_file": "012-response.json",
      "token_usage": {
        "prompt": 3755,
        "candidates": 3321,
        "total": 7076,
        "cached": 0
      },
      "response_time": 29.71808
    },
    {
      "response_file": "013-response.json",
      "token_usage": {
        "prompt": 6870,
        "candidates": 706,
        "total": 7576,
        "cached": 0
      },
      "response_time": 7.085248
    },
    {
      "response_file": "014-response.json",
      "token_usage": {
        "prompt": 5887,
        "candidates": 1235,
        "total": 7122,
        "cached": 0
      },
      "response_time": 10.756464
    }
  ],
  "test_report": {
    "002-py_01-train": [
      {
        "example": 1,
        "input": "8 0 0 0 0 0 8 8 8 8 8 8 0 8 8 8 0 8 8 0 8 8 8 0\n0 0 8 8 8 0 0 0 0 0 0 8 0 0 0 8 0 8 0 0 8 0 8 0\n8 8 8 0 8 0 8 8 8 8 0 8 8 8 0 8 0 8 8 8 8 0 8 0\n8 0 0 0 8 0 8 0 0 8 0 0 0 8 0 8 0 0 0 0 0 0 8 0\n8 0 8 8 8 0 8 8 0 8 0 8 8 8 0 8 8 0 8 8 8 8 8 0\n8 0 8 0 0 0 0 8 0 8 0 8 0 0 0 0 8 0 8 0 0 0 0 0\n8 0 8 8 8 8 8 8 0 8 0 8 8 8 8 8 8 3 8 8 8 8 8 0\n8 0 0 0 0 0 0 0 0 8 0 0 0 0 0 0 3 2 3 0 0 0 8 0\n8 8 0 8 8 8 0 8 8 8 0 8 8 8 8 8 8 3 8 8 8 0 8 0\n0 8 0 8 0 8 0 8 0 0 0 8 0 0 0 0 8 0 8 0 8 0 8 0\n0 8 8 8 0 8 8 8 0 8 8 8 0 8 8 0 8 8 8 0 8 8 8 0",
        "expected_output": "8 3 2 3 2 3 8 8 8 8 8 8 0 8 8 8 2 8 8 0 8 8 8 0\n3 2 8 8 8 2 3 2 3 2 3 8 0 0 0 8 3 8 0 0 8 2 8 0\n8 8 8 0 8 3 8 8 8 8 2 8 8 8 0 8 2 8 8 8 8 3 8 0\n8 0 0 0 8 2 8 0 0 8 3 2 3 8 0 8 3 2 3 2 3 2 8 0\n8 0 8 8 8 3 8 8 0 8 2 8 8 8 0 8 8 3 8 8 8 8 8 0\n8 0 8 2 3 2 3 8 0 8 3 8 0 0 0 0 8 2 8 0 0 0 0 0\n8 0 8 8 8 8 8 8 0 8 2 8 8 8 8 8 8 3 8 8 8 8 8 0\n8 0 0 0 0 0 0 0 0 8 3 2 3 2 3 2 3 2 3 2 3 2 8 0\n8 8 0 8 8 8 0 8 8 8 2 8 8 8 8 8 8 3 8 8 8 3 8 0\n0 8 0 8 0 8 0 8 3 2 3 8 0 0 0 0 8 2 8 0 8 2 8 0\n0 8 8 8 0 8 8 8 2 8 8 8 0 8 8 0 8 8 8 0 8 8 8 0",
        "transformed_output": "8 0 0 0 0 0 8 8 8 8 8 8 0 8 8 8 0 8 8 0 8 8 8 0\n0 0 8 8 8 0 0 0 0 0 0 8 0 0 0 8 0 8 0 0 8 0 8 0\n8 8 8 0 8 0 8 8 8 8 0 8 8 8 0 8 0 8 8 8 8 0 8 0\n8 0 0 0 8 0 8 0 0 8 0 0 0 8 0 8 0 0 0 0 0 0 8 0\n8 0 8 8 8 0 8 8 0 8 0 8 8 8 0 8 8 0 8 8 8 8 8 0\n8 0 8 0 0 0 0 8 0 8 0 8 0 0 0 0 8 0 8 0 0 0 0 0\n8 0 8 8 8 8 8 8 0 8 0 8 8 8 8 8 3 3 3 8 8 8 8 0\n8 0 0 0 0 0 0 0 0 8 0 0 0 0 0 0 3 2 3 0 0 0 8 0\n8 8 0 8 8 8 0 8 8 8 0 8 8 8 8 8 3 3 3 8 8 0 8 0\n0 8 0 8 0 8 0 8 0 0 0 8 0 0 0 0 8 0 8 0 8 0 8 0\n0 8 8 8 0 8 8 8 0 8 8 8 0 8 8 0 8 8 8 0 8 8 8 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 61,
        "percent_correct": 76.89393939393939
      },
      {
        "example": 2,
        "input": "0 0 0 8 0 0 0 8 0 0 0 0 0 8\n8 8 0 8 8 8 0 8 0 8 8 8 0 8\n0 8 0 0 0 8 0 8 0 8 0 8 8 8\n0 8 8 8 8 8 0 8 0 8 0 0 0 0\n0 0 0 0 0 0 0 8 0 8 8 8 0 8\n8 8 8 8 8 8 0 8 0 0 0 8 0 8\n8 0 0 0 0 8 0 8 8 8 0 8 0 8\n8 8 8 8 0 8 0 0 0 8 0 8 0 0\n0 0 0 8 1 8 8 8 8 8 0 8 8 0\n8 8 0 8 4 1 0 0 0 0 0 0 8 0\n0 8 0 8 1 8 8 8 8 8 8 8 8 0\n0 8 8 8 0 8 0 0 0 0 0 0 0 0\n0 0 0 0 0 8 0 8 8 8 8 8 8 8",
        "expected_output": "0 0 0 8 0 0 0 8 1 4 1 4 1 8\n8 8 0 8 8 8 0 8 4 8 8 8 4 8\n0 8 0 0 0 8 0 8 1 8 0 8 8 8\n0 8 8 8 8 8 0 8 4 8 0 0 0 0\n0 0 0 0 0 0 0 8 1 8 8 8 0 8\n8 8 8 8 8 8 0 8 4 1 4 8 0 8\n8 4 1 4 1 8 0 8 8 8 1 8 0 8\n8 8 8 8 4 8 0 0 0 8 4 8 0 0\n0 0 0 8 1 8 8 8 8 8 1 8 8 0\n8 8 0 8 4 1 4 1 4 1 4 1 8 0\n1 8 0 8 1 8 8 8 8 8 8 8 8 0\n4 8 8 8 4 8 0 0 0 0 0 0 0 0\n1 4 1 4 1 8 0 8 8 8 8 8 8 8",
        "transformed_output": "0 0 0 8 0 0 0 8 0 0 0 0 0 8\n8 8 0 8 8 8 0 8 0 8 8 8 0 8\n0 8 0 0 0 8 0 8 0 8 0 8 8 8\n0 8 8 8 8 8 0 8 0 8 0 0 0 0\n0 0 0 0 0 0 0 8 0 8 8 8 0 8\n8 8 8 8 8 8 0 8 0 0 0 8 0 8\n8 0 0 0 0 8 0 8 8 8 0 8 0 8\n8 8 8 8 0 8 0 0 0 8 0 8 0 0\n0 0 0 8 1 8 8 8 8 8 0 8 8 0\n8 8 0 8 4 1 0 0 0 0 0 0 8 0\n0 8 0 8 1 8 8 8 8 8 8 8 8 0\n0 8 8 8 0 8 0 0 0 0 0 0 0 0\n0 0 0 0 0 8 0 8 8 8 8 8 8 8",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 35,
        "percent_correct": 80.76923076923077
      }
    ],
    "004-py_02-train": [
      {
        "example": 1,
        "input": "8 0 0 0 0 0 8 8 8 8 8 8 0 8 8 8 0 8 8 0 8 8 8 0\n0 0 8 8 8 0 0 0 0 0 0 8 0 0 0 8 0 8 0 0 8 0 8 0\n8 8 8 0 8 0 8 8 8 8 0 8 8 8 0 8 0 8 8 8 8 0 8 0\n8 0 0 0 8 0 8 0 0 8 0 0 0 8 0 8 0 0 0 0 0 0 8 0\n8 0 8 8 8 0 8 8 0 8 0 8 8 8 0 8 8 0 8 8 8 8 8 0\n8 0 8 0 0 0 0 8 0 8 0 8 0 0 0 0 8 0 8 0 0 0 0 0\n8 0 8 8 8 8 8 8 0 8 0 8 8 8 8 8 8 3 8 8 8 8 8 0\n8 0 0 0 0 0 0 0 0 8 0 0 0 0 0 0 3 2 3 0 0 0 8 0\n8 8 0 8 8 8 0 8 8 8 0 8 8 8 8 8 8 3 8 8 8 0 8 0\n0 8 0 8 0 8 0 8 0 0 0 8 0 0 0 0 8 0 8 0 8 0 8 0\n0 8 8 8 0 8 8 8 0 8 8 8 0 8 8 0 8 8 8 0 8 8 8 0",
        "expected_output": "8 3 2 3 2 3 8 8 8 8 8 8 0 8 8 8 2 8 8 0 8 8 8 0\n3 2 8 8 8 2 3 2 3 2 3 8 0 0 0 8 3 8 0 0 8 2 8 0\n8 8 8 0 8 3 8 8 8 8 2 8 8 8 0 8 2 8 8 8 8 3 8 0\n8 0 0 0 8 2 8 0 0 8 3 2 3 8 0 8 3 2 3 2 3 2 8 0\n8 0 8 8 8 3 8 8 0 8 2 8 8 8 0 8 8 3 8 8 8 8 8 0\n8 0 8 2 3 2 3 8 0 8 3 8 0 0 0 0 8 2 8 0 0 0 0 0\n8 0 8 8 8 8 8 8 0 8 2 8 8 8 8 8 8 3 8 8 8 8 8 0\n8 0 0 0 0 0 0 0 0 8 3 2 3 2 3 2 3 2 3 2 3 2 8 0\n8 8 0 8 8 8 0 8 8 8 2 8 8 8 8 8 8 3 8 8 8 3 8 0\n0 8 0 8 0 8 0 8 3 2 3 8 0 0 0 0 8 2 8 0 8 2 8 0\n0 8 8 8 0 8 8 8 2 8 8 8 0 8 8 0 8 8 8 0 8 8 8 0",
        "transformed_output": "3 0 0 0 0 0 3 3 3 3 3 3 0 2 3 3 0 2 3 0 2 3 3 0\n0 0 3 3 3 0 0 0 0 0 0 2 0 0 0 2 0 3 0 0 2 0 2 0\n3 3 3 0 2 0 3 2 2 2 0 3 3 3 0 3 0 3 3 3 3 0 2 0\n3 0 0 0 2 0 3 0 0 3 0 0 0 2 0 3 0 0 0 0 0 0 2 0\n3 0 3 3 3 0 2 3 0 3 0 3 3 3 0 2 3 0 3 3 3 3 3 0\n3 0 2 0 0 0 0 2 0 3 0 3 0 0 0 0 2 0 3 0 0 0 0 0\n3 0 2 3 3 3 3 3 0 2 0 3 3 3 3 3 3 3 2 3 3 3 3 0\n2 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 3 2 3 0 0 0 3 0\n3 3 0 3 3 3 0 3 3 3 0 3 3 3 3 3 3 3 3 3 3 0 3 0\n0 2 0 2 0 3 0 2 0 0 0 2 0 0 0 0 3 0 2 0 3 0 2 0\n0 3 3 3 0 2 3 3 0 3 3 3 0 3 3 0 3 3 3 0 2 3 3 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 194,
        "percent_correct": 26.515151515151516
      },
      {
        "example": 2,
        "input": "0 0 0 8 0 0 0 8 0 0 0 0 0 8\n8 8 0 8 8 8 0 8 0 8 8 8 0 8\n0 8 0 0 0 8 0 8 0 8 0 8 8 8\n0 8 8 8 8 8 0 8 0 8 0 0 0 0\n0 0 0 0 0 0 0 8 0 8 8 8 0 8\n8 8 8 8 8 8 0 8 0 0 0 8 0 8\n8 0 0 0 0 8 0 8 8 8 0 8 0 8\n8 8 8 8 0 8 0 0 0 8 0 8 0 0\n0 0 0 8 1 8 8 8 8 8 0 8 8 0\n8 8 0 8 4 1 0 0 0 0 0 0 8 0\n0 8 0 8 1 8 8 8 8 8 8 8 8 0\n0 8 8 8 0 8 0 0 0 0 0 0 0 0\n0 0 0 0 0 8 0 8 8 8 8 8 8 8",
        "expected_output": "0 0 0 8 0 0 0 8 1 4 1 4 1 8\n8 8 0 8 8 8 0 8 4 8 8 8 4 8\n0 8 0 0 0 8 0 8 1 8 0 8 8 8\n0 8 8 8 8 8 0 8 4 8 0 0 0 0\n0 0 0 0 0 0 0 8 1 8 8 8 0 8\n8 8 8 8 8 8 0 8 4 1 4 8 0 8\n8 4 1 4 1 8 0 8 8 8 1 8 0 8\n8 8 8 8 4 8 0 0 0 8 4 8 0 0\n0 0 0 8 1 8 8 8 8 8 1 8 8 0\n8 8 0 8 4 1 4 1 4 1 4 1 8 0\n1 8 0 8 1 8 8 8 8 8 8 8 8 0\n4 8 8 8 4 8 0 0 0 0 0 0 0 0\n1 4 1 4 1 8 0 8 8 8 8 8 8 8",
        "transformed_output": "0 0 0 3 0 0 0 3 0 0 0 0 0 3\n3 3 0 3 3 3 0 3 0 3 3 3 0 2\n0 3 0 0 0 2 0 3 0 3 0 3 3 3\n0 3 3 3 3 3 0 2 0 3 0 0 0 0\n0 0 0 0 0 0 0 3 0 3 3 3 0 2\n3 3 3 3 3 3 0 3 0 0 0 3 0 3\n2 0 0 0 0 3 0 3 3 3 0 3 0 3\n3 3 3 3 0 3 0 0 0 2 0 3 0 0\n0 0 0 3 1 3 3 3 3 3 0 2 3 0\n2 3 0 3 4 1 0 0 0 0 0 0 2 0\n0 3 0 2 1 3 3 3 3 3 3 3 3 0\n0 3 3 3 0 2 0 0 0 0 0 0 0 0\n0 0 0 0 0 3 0 3 3 3 3 3 3 3",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 124,
        "percent_correct": 31.868131868131865
      }
    ],
    "006-py_03-train": [
      {
        "example": 1,
        "input": "8 0 0 0 0 0 8 8 8 8 8 8 0 8 8 8 0 8 8 0 8 8 8 0\n0 0 8 8 8 0 0 0 0 0 0 8 0 0 0 8 0 8 0 0 8 0 8 0\n8 8 8 0 8 0 8 8 8 8 0 8 8 8 0 8 0 8 8 8 8 0 8 0\n8 0 0 0 8 0 8 0 0 8 0 0 0 8 0 8 0 0 0 0 0 0 8 0\n8 0 8 8 8 0 8 8 0 8 0 8 8 8 0 8 8 0 8 8 8 8 8 0\n8 0 8 0 0 0 0 8 0 8 0 8 0 0 0 0 8 0 8 0 0 0 0 0\n8 0 8 8 8 8 8 8 0 8 0 8 8 8 8 8 8 3 8 8 8 8 8 0\n8 0 0 0 0 0 0 0 0 8 0 0 0 0 0 0 3 2 3 0 0 0 8 0\n8 8 0 8 8 8 0 8 8 8 0 8 8 8 8 8 8 3 8 8 8 0 8 0\n0 8 0 8 0 8 0 8 0 0 0 8 0 0 0 0 8 0 8 0 8 0 8 0\n0 8 8 8 0 8 8 8 0 8 8 8 0 8 8 0 8 8 8 0 8 8 8 0",
        "expected_output": "8 3 2 3 2 3 8 8 8 8 8 8 0 8 8 8 2 8 8 0 8 8 8 0\n3 2 8 8 8 2 3 2 3 2 3 8 0 0 0 8 3 8 0 0 8 2 8 0\n8 8 8 0 8 3 8 8 8 8 2 8 8 8 0 8 2 8 8 8 8 3 8 0\n8 0 0 0 8 2 8 0 0 8 3 2 3 8 0 8 3 2 3 2 3 2 8 0\n8 0 8 8 8 3 8 8 0 8 2 8 8 8 0 8 8 3 8 8 8 8 8 0\n8 0 8 2 3 2 3 8 0 8 3 8 0 0 0 0 8 2 8 0 0 0 0 0\n8 0 8 8 8 8 8 8 0 8 2 8 8 8 8 8 8 3 8 8 8 8 8 0\n8 0 0 0 0 0 0 0 0 8 3 2 3 2 3 2 3 2 3 2 3 2 8 0\n8 8 0 8 8 8 0 8 8 8 2 8 8 8 8 8 8 3 8 8 8 3 8 0\n0 8 0 8 0 8 0 8 3 2 3 8 0 0 0 0 8 2 8 0 8 2 8 0\n0 8 8 8 0 8 8 8 2 8 8 8 0 8 8 0 8 8 8 0 8 8 8 0",
        "transformed_output": "3 0 0 0 0 0 3 3 3 3 3 3 0 3 3 3 0 3 3 0 3 3 3 0\n0 0 3 3 3 0 0 0 0 0 0 3 0 0 0 3 0 3 0 0 3 0 3 0\n3 3 3 0 3 0 3 3 3 3 0 3 3 3 0 3 0 3 3 3 3 0 3 0\n3 0 0 0 3 0 3 0 0 3 0 0 0 3 0 3 0 0 0 0 0 0 3 0\n3 0 3 3 3 0 3 3 0 3 0 3 3 3 0 3 3 0 3 3 3 3 3 0\n3 0 3 0 0 0 0 3 0 3 0 3 0 0 0 0 3 0 3 0 0 0 0 0\n3 0 3 3 3 3 3 3 0 3 0 3 3 3 3 3 8 3 8 3 3 3 3 0\n3 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 3 2 3 0 0 0 3 0\n3 3 0 3 3 3 0 3 3 3 0 3 3 3 3 3 8 3 8 3 3 0 3 0\n0 3 0 3 0 3 0 3 0 0 0 3 0 0 0 0 3 0 3 0 3 0 3 0\n0 3 3 3 0 3 3 3 0 3 3 3 0 3 3 0 3 3 3 0 3 3 3 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 190,
        "percent_correct": 28.030303030303028
      },
      {
        "example": 2,
        "input": "0 0 0 8 0 0 0 8 0 0 0 0 0 8\n8 8 0 8 8 8 0 8 0 8 8 8 0 8\n0 8 0 0 0 8 0 8 0 8 0 8 8 8\n0 8 8 8 8 8 0 8 0 8 0 0 0 0\n0 0 0 0 0 0 0 8 0 8 8 8 0 8\n8 8 8 8 8 8 0 8 0 0 0 8 0 8\n8 0 0 0 0 8 0 8 8 8 0 8 0 8\n8 8 8 8 0 8 0 0 0 8 0 8 0 0\n0 0 0 8 1 8 8 8 8 8 0 8 8 0\n8 8 0 8 4 1 0 0 0 0 0 0 8 0\n0 8 0 8 1 8 8 8 8 8 8 8 8 0\n0 8 8 8 0 8 0 0 0 0 0 0 0 0\n0 0 0 0 0 8 0 8 8 8 8 8 8 8",
        "expected_output": "0 0 0 8 0 0 0 8 1 4 1 4 1 8\n8 8 0 8 8 8 0 8 4 8 8 8 4 8\n0 8 0 0 0 8 0 8 1 8 0 8 8 8\n0 8 8 8 8 8 0 8 4 8 0 0 0 0\n0 0 0 0 0 0 0 8 1 8 8 8 0 8\n8 8 8 8 8 8 0 8 4 1 4 8 0 8\n8 4 1 4 1 8 0 8 8 8 1 8 0 8\n8 8 8 8 4 8 0 0 0 8 4 8 0 0\n0 0 0 8 1 8 8 8 8 8 1 8 8 0\n8 8 0 8 4 1 4 1 4 1 4 1 8 0\n1 8 0 8 1 8 8 8 8 8 8 8 8 0\n4 8 8 8 4 8 0 0 0 0 0 0 0 0\n1 4 1 4 1 8 0 8 8 8 8 8 8 8",
        "transformed_output": "0 0 0 3 0 0 0 3 0 0 0 0 0 3\n3 3 0 3 3 3 0 3 0 3 3 3 0 3\n0 3 0 0 0 3 0 3 0 3 0 3 3 3\n0 3 3 3 3 3 0 3 0 3 0 0 0 0\n0 0 0 0 0 0 0 3 0 3 3 3 0 3\n3 3 3 3 3 3 0 3 0 0 0 3 0 3\n3 0 0 0 0 3 0 3 3 3 0 3 0 3\n3 3 3 3 0 3 0 0 0 3 0 3 0 0\n0 0 0 2 1 2 3 3 3 3 0 3 3 0\n3 3 0 3 4 1 0 0 0 0 0 0 3 0\n0 3 0 2 1 2 3 3 3 3 3 3 3 0\n0 3 3 3 0 3 0 0 0 0 0 0 0 0\n0 0 0 0 0 3 0 3 3 3 3 3 3 3",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 124,
        "percent_correct": 31.868131868131865
      }
    ],
    "007-py_04-train": [],
    "008-py_05-train": [
      {
        "example": 1,
        "input": "8 0 0 0 0 0 8 8 8 8 8 8 0 8 8 8 0 8 8 0 8 8 8 0\n0 0 8 8 8 0 0 0 0 0 0 8 0 0 0 8 0 8 0 0 8 0 8 0\n8 8 8 0 8 0 8 8 8 8 0 8 8 8 0 8 0 8 8 8 8 0 8 0\n8 0 0 0 8 0 8 0 0 8 0 0 0 8 0 8 0 0 0 0 0 0 8 0\n8 0 8 8 8 0 8 8 0 8 0 8 8 8 0 8 8 0 8 8 8 8 8 0\n8 0 8 0 0 0 0 8 0 8 0 8 0 0 0 0 8 0 8 0 0 0 0 0\n8 0 8 8 8 8 8 8 0 8 0 8 8 8 8 8 8 3 8 8 8 8 8 0\n8 0 0 0 0 0 0 0 0 8 0 0 0 0 0 0 3 2 3 0 0 0 8 0\n8 8 0 8 8 8 0 8 8 8 0 8 8 8 8 8 8 3 8 8 8 0 8 0\n0 8 0 8 0 8 0 8 0 0 0 8 0 0 0 0 8 0 8 0 8 0 8 0\n0 8 8 8 0 8 8 8 0 8 8 8 0 8 8 0 8 8 8 0 8 8 8 0",
        "expected_output": "8 3 2 3 2 3 8 8 8 8 8 8 0 8 8 8 2 8 8 0 8 8 8 0\n3 2 8 8 8 2 3 2 3 2 3 8 0 0 0 8 3 8 0 0 8 2 8 0\n8 8 8 0 8 3 8 8 8 8 2 8 8 8 0 8 2 8 8 8 8 3 8 0\n8 0 0 0 8 2 8 0 0 8 3 2 3 8 0 8 3 2 3 2 3 2 8 0\n8 0 8 8 8 3 8 8 0 8 2 8 8 8 0 8 8 3 8 8 8 8 8 0\n8 0 8 2 3 2 3 8 0 8 3 8 0 0 0 0 8 2 8 0 0 0 0 0\n8 0 8 8 8 8 8 8 0 8 2 8 8 8 8 8 8 3 8 8 8 8 8 0\n8 0 0 0 0 0 0 0 0 8 3 2 3 2 3 2 3 2 3 2 3 2 8 0\n8 8 0 8 8 8 0 8 8 8 2 8 8 8 8 8 8 3 8 8 8 3 8 0\n0 8 0 8 0 8 0 8 3 2 3 8 0 0 0 0 8 2 8 0 8 2 8 0\n0 8 8 8 0 8 8 8 2 8 8 8 0 8 8 0 8 8 8 0 8 8 8 0",
        "transformed_output": "3 0 0 0 0 0 3 3 3 3 3 3 0 3 3 3 0 3 3 0 3 3 3 0\n0 0 3 3 3 0 0 0 0 0 0 3 0 0 0 3 0 3 0 0 3 0 3 0\n3 3 3 0 3 0 3 3 3 3 0 3 3 3 0 3 0 3 3 3 3 0 3 0\n3 0 0 0 3 0 3 0 0 3 0 0 0 3 0 3 0 0 0 0 0 0 3 0\n3 0 3 3 3 0 3 3 0 3 0 3 3 3 0 3 3 0 3 3 3 3 3 0\n3 0 3 0 0 0 0 3 0 3 0 3 0 0 0 0 3 0 3 0 0 0 0 0\n3 0 3 3 3 3 3 3 0 3 0 3 3 3 3 3 8 3 8 3 3 3 3 0\n3 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 3 2 3 0 0 0 3 0\n3 3 0 3 3 3 0 3 3 3 0 3 3 3 3 3 8 3 8 3 3 0 3 0\n0 3 0 3 0 3 0 3 0 0 0 3 0 0 0 0 3 0 3 0 3 0 3 0\n0 3 3 3 0 3 3 3 0 3 3 3 0 3 3 0 3 3 3 0 3 3 3 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 190,
        "percent_correct": 28.030303030303028
      },
      {
        "example": 2,
        "input": "0 0 0 8 0 0 0 8 0 0 0 0 0 8\n8 8 0 8 8 8 0 8 0 8 8 8 0 8\n0 8 0 0 0 8 0 8 0 8 0 8 8 8\n0 8 8 8 8 8 0 8 0 8 0 0 0 0\n0 0 0 0 0 0 0 8 0 8 8 8 0 8\n8 8 8 8 8 8 0 8 0 0 0 8 0 8\n8 0 0 0 0 8 0 8 8 8 0 8 0 8\n8 8 8 8 0 8 0 0 0 8 0 8 0 0\n0 0 0 8 1 8 8 8 8 8 0 8 8 0\n8 8 0 8 4 1 0 0 0 0 0 0 8 0\n0 8 0 8 1 8 8 8 8 8 8 8 8 0\n0 8 8 8 0 8 0 0 0 0 0 0 0 0\n0 0 0 0 0 8 0 8 8 8 8 8 8 8",
        "expected_output": "0 0 0 8 0 0 0 8 1 4 1 4 1 8\n8 8 0 8 8 8 0 8 4 8 8 8 4 8\n0 8 0 0 0 8 0 8 1 8 0 8 8 8\n0 8 8 8 8 8 0 8 4 8 0 0 0 0\n0 0 0 0 0 0 0 8 1 8 8 8 0 8\n8 8 8 8 8 8 0 8 4 1 4 8 0 8\n8 4 1 4 1 8 0 8 8 8 1 8 0 8\n8 8 8 8 4 8 0 0 0 8 4 8 0 0\n0 0 0 8 1 8 8 8 8 8 1 8 8 0\n8 8 0 8 4 1 4 1 4 1 4 1 8 0\n1 8 0 8 1 8 8 8 8 8 8 8 8 0\n4 8 8 8 4 8 0 0 0 0 0 0 0 0\n1 4 1 4 1 8 0 8 8 8 8 8 8 8",
        "transformed_output": "0 0 0 3 0 0 0 3 0 0 0 0 0 3\n3 3 0 3 3 3 0 3 0 3 3 3 0 3\n0 3 0 0 0 3 0 3 0 3 0 3 3 3\n0 3 3 3 3 3 0 3 0 3 0 0 0 0\n0 0 0 0 0 0 0 3 0 3 3 3 0 3\n3 3 3 3 3 3 0 3 0 0 0 3 0 3\n3 0 0 0 0 3 0 3 3 3 0 3 0 3\n3 3 3 3 0 3 0 0 0 3 0 3 0 0\n0 0 0 2 1 2 3 3 3 3 0 3 3 0\n3 3 0 3 4 1 0 0 0 0 0 0 3 0\n0 3 0 2 1 2 3 3 3 3 3 3 3 0\n0 3 3 3 0 3 0 0 0 0 0 0 0 0\n0 0 0 0 0 3 0 3 3 3 3 3 3 3",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 124,
        "percent_correct": 31.868131868131865
      }
    ],
    "010-py_06-train": [
      {
        "example": 1,
        "input": "8 0 0 0 0 0 8 8 8 8 8 8 0 8 8 8 0 8 8 0 8 8 8 0\n0 0 8 8 8 0 0 0 0 0 0 8 0 0 0 8 0 8 0 0 8 0 8 0\n8 8 8 0 8 0 8 8 8 8 0 8 8 8 0 8 0 8 8 8 8 0 8 0\n8 0 0 0 8 0 8 0 0 8 0 0 0 8 0 8 0 0 0 0 0 0 8 0\n8 0 8 8 8 0 8 8 0 8 0 8 8 8 0 8 8 0 8 8 8 8 8 0\n8 0 8 0 0 0 0 8 0 8 0 8 0 0 0 0 8 0 8 0 0 0 0 0\n8 0 8 8 8 8 8 8 0 8 0 8 8 8 8 8 8 3 8 8 8 8 8 0\n8 0 0 0 0 0 0 0 0 8 0 0 0 0 0 0 3 2 3 0 0 0 8 0\n8 8 0 8 8 8 0 8 8 8 0 8 8 8 8 8 8 3 8 8 8 0 8 0\n0 8 0 8 0 8 0 8 0 0 0 8 0 0 0 0 8 0 8 0 8 0 8 0\n0 8 8 8 0 8 8 8 0 8 8 8 0 8 8 0 8 8 8 0 8 8 8 0",
        "expected_output": "8 3 2 3 2 3 8 8 8 8 8 8 0 8 8 8 2 8 8 0 8 8 8 0\n3 2 8 8 8 2 3 2 3 2 3 8 0 0 0 8 3 8 0 0 8 2 8 0\n8 8 8 0 8 3 8 8 8 8 2 8 8 8 0 8 2 8 8 8 8 3 8 0\n8 0 0 0 8 2 8 0 0 8 3 2 3 8 0 8 3 2 3 2 3 2 8 0\n8 0 8 8 8 3 8 8 0 8 2 8 8 8 0 8 8 3 8 8 8 8 8 0\n8 0 8 2 3 2 3 8 0 8 3 8 0 0 0 0 8 2 8 0 0 0 0 0\n8 0 8 8 8 8 8 8 0 8 2 8 8 8 8 8 8 3 8 8 8 8 8 0\n8 0 0 0 0 0 0 0 0 8 3 2 3 2 3 2 3 2 3 2 3 2 8 0\n8 8 0 8 8 8 0 8 8 8 2 8 8 8 8 8 8 3 8 8 8 3 8 0\n0 8 0 8 0 8 0 8 3 2 3 8 0 0 0 0 8 2 8 0 8 2 8 0\n0 8 8 8 0 8 8 8 2 8 8 8 0 8 8 0 8 8 8 0 8 8 8 0",
        "transformed_output": "8 0 0 0 0 0 8 8 8 8 8 8 0 8 8 8 0 8 8 0 8 8 8 0\n0 0 8 8 8 0 0 0 0 0 0 8 0 0 0 8 0 8 0 0 8 0 8 0\n8 8 8 0 8 0 8 8 8 8 0 8 8 8 0 8 0 8 8 8 8 0 8 0\n8 0 0 0 8 0 8 0 0 8 0 0 0 8 0 8 0 0 0 0 0 0 8 0\n8 0 8 8 8 0 8 8 0 8 0 8 8 8 0 8 8 0 8 8 8 8 8 0\n8 0 8 0 0 0 0 8 0 8 0 8 0 0 0 0 8 0 8 0 0 0 0 0\n8 0 8 8 8 8 8 8 0 8 0 8 8 8 8 8 8 3 8 8 8 8 8 0\n8 0 0 0 0 0 0 0 0 8 0 0 0 0 0 0 3 2 3 0 0 0 8 0\n8 8 0 8 8 8 0 8 8 8 0 8 8 8 8 8 8 3 8 8 8 0 8 0\n0 8 0 8 0 8 0 8 0 0 0 8 0 0 0 0 8 0 8 0 8 0 8 0\n0 8 8 8 0 8 8 8 0 8 8 8 0 8 8 0 8 8 8 0 8 8 8 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 57,
        "percent_correct": 78.4090909090909
      },
      {
        "example": 2,
        "input": "0 0 0 8 0 0 0 8 0 0 0 0 0 8\n8 8 0 8 8 8 0 8 0 8 8 8 0 8\n0 8 0 0 0 8 0 8 0 8 0 8 8 8\n0 8 8 8 8 8 0 8 0 8 0 0 0 0\n0 0 0 0 0 0 0 8 0 8 8 8 0 8\n8 8 8 8 8 8 0 8 0 0 0 8 0 8\n8 0 0 0 0 8 0 8 8 8 0 8 0 8\n8 8 8 8 0 8 0 0 0 8 0 8 0 0\n0 0 0 8 1 8 8 8 8 8 0 8 8 0\n8 8 0 8 4 1 0 0 0 0 0 0 8 0\n0 8 0 8 1 8 8 8 8 8 8 8 8 0\n0 8 8 8 0 8 0 0 0 0 0 0 0 0\n0 0 0 0 0 8 0 8 8 8 8 8 8 8",
        "expected_output": "0 0 0 8 0 0 0 8 1 4 1 4 1 8\n8 8 0 8 8 8 0 8 4 8 8 8 4 8\n0 8 0 0 0 8 0 8 1 8 0 8 8 8\n0 8 8 8 8 8 0 8 4 8 0 0 0 0\n0 0 0 0 0 0 0 8 1 8 8 8 0 8\n8 8 8 8 8 8 0 8 4 1 4 8 0 8\n8 4 1 4 1 8 0 8 8 8 1 8 0 8\n8 8 8 8 4 8 0 0 0 8 4 8 0 0\n0 0 0 8 1 8 8 8 8 8 1 8 8 0\n8 8 0 8 4 1 4 1 4 1 4 1 8 0\n1 8 0 8 1 8 8 8 8 8 8 8 8 0\n4 8 8 8 4 8 0 0 0 0 0 0 0 0\n1 4 1 4 1 8 0 8 8 8 8 8 8 8",
        "transformed_output": "0 0 0 8 0 0 0 8 0 0 0 0 0 8\n8 8 0 8 8 8 0 8 0 8 8 8 0 8\n0 8 0 0 0 8 0 8 0 8 0 8 8 8\n0 8 8 8 8 8 0 8 0 8 0 0 0 0\n0 0 0 0 0 0 0 8 0 8 8 8 0 8\n1 8 1 1 8 1 0 1 0 0 0 8 0 8\n1 0 0 0 0 8 0 8 8 1 0 8 0 8\n8 8 1 8 0 8 0 0 0 1 0 8 0 0\n0 0 0 4 1 4 1 8 8 8 0 8 8 0\n8 8 0 8 4 8 0 0 0 0 0 0 8 0\n0 1 0 4 1 4 1 8 1 8 8 8 8 0\n0 8 1 8 0 8 0 0 0 0 0 0 0 0\n0 0 0 0 0 8 0 8 8 8 8 8 8 8",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 54,
        "percent_correct": 70.32967032967034
      }
    ],
    "011-py_07-train": [
      {
        "example": 1,
        "input": "8 0 0 0 0 0 8 8 8 8 8 8 0 8 8 8 0 8 8 0 8 8 8 0\n0 0 8 8 8 0 0 0 0 0 0 8 0 0 0 8 0 8 0 0 8 0 8 0\n8 8 8 0 8 0 8 8 8 8 0 8 8 8 0 8 0 8 8 8 8 0 8 0\n8 0 0 0 8 0 8 0 0 8 0 0 0 8 0 8 0 0 0 0 0 0 8 0\n8 0 8 8 8 0 8 8 0 8 0 8 8 8 0 8 8 0 8 8 8 8 8 0\n8 0 8 0 0 0 0 8 0 8 0 8 0 0 0 0 8 0 8 0 0 0 0 0\n8 0 8 8 8 8 8 8 0 8 0 8 8 8 8 8 8 3 8 8 8 8 8 0\n8 0 0 0 0 0 0 0 0 8 0 0 0 0 0 0 3 2 3 0 0 0 8 0\n8 8 0 8 8 8 0 8 8 8 0 8 8 8 8 8 8 3 8 8 8 0 8 0\n0 8 0 8 0 8 0 8 0 0 0 8 0 0 0 0 8 0 8 0 8 0 8 0\n0 8 8 8 0 8 8 8 0 8 8 8 0 8 8 0 8 8 8 0 8 8 8 0",
        "expected_output": "8 3 2 3 2 3 8 8 8 8 8 8 0 8 8 8 2 8 8 0 8 8 8 0\n3 2 8 8 8 2 3 2 3 2 3 8 0 0 0 8 3 8 0 0 8 2 8 0\n8 8 8 0 8 3 8 8 8 8 2 8 8 8 0 8 2 8 8 8 8 3 8 0\n8 0 0 0 8 2 8 0 0 8 3 2 3 8 0 8 3 2 3 2 3 2 8 0\n8 0 8 8 8 3 8 8 0 8 2 8 8 8 0 8 8 3 8 8 8 8 8 0\n8 0 8 2 3 2 3 8 0 8 3 8 0 0 0 0 8 2 8 0 0 0 0 0\n8 0 8 8 8 8 8 8 0 8 2 8 8 8 8 8 8 3 8 8 8 8 8 0\n8 0 0 0 0 0 0 0 0 8 3 2 3 2 3 2 3 2 3 2 3 2 8 0\n8 8 0 8 8 8 0 8 8 8 2 8 8 8 8 8 8 3 8 8 8 3 8 0\n0 8 0 8 0 8 0 8 3 2 3 8 0 0 0 0 8 2 8 0 8 2 8 0\n0 8 8 8 0 8 8 8 2 8 8 8 0 8 8 0 8 8 8 0 8 8 8 0",
        "transformed_output": "8 0 0 0 0 0 8 8 8 8 8 8 0 8 8 8 0 8 8 0 8 8 8 0\n0 0 8 8 8 0 0 0 0 0 0 8 0 0 0 8 0 8 0 0 8 0 8 0\n8 8 8 0 8 0 8 8 8 8 0 8 8 8 0 8 0 8 8 8 8 0 8 0\n8 0 0 0 8 0 8 0 0 8 0 0 0 8 0 8 0 0 0 0 0 0 8 0\n8 0 8 8 8 0 8 8 0 8 0 8 8 8 0 8 8 0 8 8 8 8 8 0\n8 0 8 0 0 0 0 8 0 8 0 8 0 0 0 0 8 0 8 0 0 0 0 0\n8 0 8 8 8 8 8 8 0 8 0 8 8 8 8 8 8 3 8 8 8 8 8 0\n8 0 0 0 0 0 0 0 0 8 0 0 0 0 0 0 3 2 3 0 0 0 8 0\n8 8 0 8 8 8 0 8 8 8 0 8 8 8 8 8 8 3 8 8 8 0 8 0\n0 8 0 8 0 8 0 8 0 0 0 8 0 0 0 0 8 0 8 0 8 0 8 0\n0 8 8 8 0 8 8 8 0 8 8 8 0 8 8 0 8 8 8 0 8 8 8 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 57,
        "percent_correct": 78.4090909090909
      },
      {
        "example": 2,
        "input": "0 0 0 8 0 0 0 8 0 0 0 0 0 8\n8 8 0 8 8 8 0 8 0 8 8 8 0 8\n0 8 0 0 0 8 0 8 0 8 0 8 8 8\n0 8 8 8 8 8 0 8 0 8 0 0 0 0\n0 0 0 0 0 0 0 8 0 8 8 8 0 8\n8 8 8 8 8 8 0 8 0 0 0 8 0 8\n8 0 0 0 0 8 0 8 8 8 0 8 0 8\n8 8 8 8 0 8 0 0 0 8 0 8 0 0\n0 0 0 8 1 8 8 8 8 8 0 8 8 0\n8 8 0 8 4 1 0 0 0 0 0 0 8 0\n0 8 0 8 1 8 8 8 8 8 8 8 8 0\n0 8 8 8 0 8 0 0 0 0 0 0 0 0\n0 0 0 0 0 8 0 8 8 8 8 8 8 8",
        "expected_output": "0 0 0 8 0 0 0 8 1 4 1 4 1 8\n8 8 0 8 8 8 0 8 4 8 8 8 4 8\n0 8 0 0 0 8 0 8 1 8 0 8 8 8\n0 8 8 8 8 8 0 8 4 8 0 0 0 0\n0 0 0 0 0 0 0 8 1 8 8 8 0 8\n8 8 8 8 8 8 0 8 4 1 4 8 0 8\n8 4 1 4 1 8 0 8 8 8 1 8 0 8\n8 8 8 8 4 8 0 0 0 8 4 8 0 0\n0 0 0 8 1 8 8 8 8 8 1 8 8 0\n8 8 0 8 4 1 4 1 4 1 4 1 8 0\n1 8 0 8 1 8 8 8 8 8 8 8 8 0\n4 8 8 8 4 8 0 0 0 0 0 0 0 0\n1 4 1 4 1 8 0 8 8 8 8 8 8 8",
        "transformed_output": "0 0 0 8 0 0 0 8 0 0 0 0 0 8\n8 8 0 8 8 8 0 8 0 8 8 8 0 8\n0 8 0 0 0 8 0 8 0 8 0 8 8 8\n0 8 8 8 8 8 0 8 0 8 0 0 0 0\n0 0 0 0 0 0 0 8 0 8 8 8 0 8\n1 8 1 1 8 1 0 1 0 0 0 8 0 8\n1 0 0 0 0 8 0 8 8 1 0 8 0 8\n8 8 1 8 0 8 0 0 0 1 0 8 0 0\n0 0 0 4 1 4 1 8 8 8 0 8 8 0\n8 8 0 8 4 8 0 0 0 0 0 0 8 0\n0 1 0 4 1 4 1 8 1 8 8 8 8 0\n0 8 1 8 0 8 0 0 0 0 0 0 0 0\n0 0 0 0 0 8 0 8 8 8 8 8 8 8",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 54,
        "percent_correct": 70.32967032967034
      }
    ],
    "012-py_08-train": [
      {
        "example": 1,
        "input": "8 0 0 0 0 0 8 8 8 8 8 8 0 8 8 8 0 8 8 0 8 8 8 0\n0 0 8 8 8 0 0 0 0 0 0 8 0 0 0 8 0 8 0 0 8 0 8 0\n8 8 8 0 8 0 8 8 8 8 0 8 8 8 0 8 0 8 8 8 8 0 8 0\n8 0 0 0 8 0 8 0 0 8 0 0 0 8 0 8 0 0 0 0 0 0 8 0\n8 0 8 8 8 0 8 8 0 8 0 8 8 8 0 8 8 0 8 8 8 8 8 0\n8 0 8 0 0 0 0 8 0 8 0 8 0 0 0 0 8 0 8 0 0 0 0 0\n8 0 8 8 8 8 8 8 0 8 0 8 8 8 8 8 8 3 8 8 8 8 8 0\n8 0 0 0 0 0 0 0 0 8 0 0 0 0 0 0 3 2 3 0 0 0 8 0\n8 8 0 8 8 8 0 8 8 8 0 8 8 8 8 8 8 3 8 8 8 0 8 0\n0 8 0 8 0 8 0 8 0 0 0 8 0 0 0 0 8 0 8 0 8 0 8 0\n0 8 8 8 0 8 8 8 0 8 8 8 0 8 8 0 8 8 8 0 8 8 8 0",
        "expected_output": "8 3 2 3 2 3 8 8 8 8 8 8 0 8 8 8 2 8 8 0 8 8 8 0\n3 2 8 8 8 2 3 2 3 2 3 8 0 0 0 8 3 8 0 0 8 2 8 0\n8 8 8 0 8 3 8 8 8 8 2 8 8 8 0 8 2 8 8 8 8 3 8 0\n8 0 0 0 8 2 8 0 0 8 3 2 3 8 0 8 3 2 3 2 3 2 8 0\n8 0 8 8 8 3 8 8 0 8 2 8 8 8 0 8 8 3 8 8 8 8 8 0\n8 0 8 2 3 2 3 8 0 8 3 8 0 0 0 0 8 2 8 0 0 0 0 0\n8 0 8 8 8 8 8 8 0 8 2 8 8 8 8 8 8 3 8 8 8 8 8 0\n8 0 0 0 0 0 0 0 0 8 3 2 3 2 3 2 3 2 3 2 3 2 8 0\n8 8 0 8 8 8 0 8 8 8 2 8 8 8 8 8 8 3 8 8 8 3 8 0\n0 8 0 8 0 8 0 8 3 2 3 8 0 0 0 0 8 2 8 0 8 2 8 0\n0 8 8 8 0 8 8 8 2 8 8 8 0 8 8 0 8 8 8 0 8 8 8 0",
        "transformed_output": "8 0 0 0 0 0 8 8 8 8 8 8 0 8 8 8 0 8 8 0 8 8 8 0\n0 0 8 8 8 0 0 0 0 0 0 8 0 0 0 8 0 8 0 0 8 0 8 0\n8 8 8 0 8 0 8 8 8 8 0 8 8 8 0 8 0 8 8 8 8 0 8 0\n8 0 0 0 8 0 8 0 0 8 0 0 0 8 0 8 0 0 0 0 0 0 8 0\n8 0 8 8 8 0 8 8 0 8 0 8 8 8 0 8 8 0 8 8 8 8 8 0\n8 0 8 0 0 0 0 8 0 8 0 8 0 0 0 0 8 0 8 0 0 0 0 0\n8 0 8 8 8 8 8 8 0 8 0 8 8 8 8 8 8 3 8 8 8 8 8 0\n8 0 0 0 0 0 0 0 0 8 0 0 0 0 0 0 3 2 3 0 0 0 8 0\n8 8 0 8 8 8 0 8 8 8 0 8 8 8 8 8 8 3 8 8 8 0 8 0\n0 8 0 8 0 8 0 8 0 0 0 8 0 0 0 0 8 0 8 0 8 0 8 0\n0 8 8 8 0 8 8 8 0 8 8 8 0 8 8 0 8 8 8 0 8 8 8 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 57,
        "percent_correct": 78.4090909090909
      },
      {
        "example": 2,
        "input": "0 0 0 8 0 0 0 8 0 0 0 0 0 8\n8 8 0 8 8 8 0 8 0 8 8 8 0 8\n0 8 0 0 0 8 0 8 0 8 0 8 8 8\n0 8 8 8 8 8 0 8 0 8 0 0 0 0\n0 0 0 0 0 0 0 8 0 8 8 8 0 8\n8 8 8 8 8 8 0 8 0 0 0 8 0 8\n8 0 0 0 0 8 0 8 8 8 0 8 0 8\n8 8 8 8 0 8 0 0 0 8 0 8 0 0\n0 0 0 8 1 8 8 8 8 8 0 8 8 0\n8 8 0 8 4 1 0 0 0 0 0 0 8 0\n0 8 0 8 1 8 8 8 8 8 8 8 8 0\n0 8 8 8 0 8 0 0 0 0 0 0 0 0\n0 0 0 0 0 8 0 8 8 8 8 8 8 8",
        "expected_output": "0 0 0 8 0 0 0 8 1 4 1 4 1 8\n8 8 0 8 8 8 0 8 4 8 8 8 4 8\n0 8 0 0 0 8 0 8 1 8 0 8 8 8\n0 8 8 8 8 8 0 8 4 8 0 0 0 0\n0 0 0 0 0 0 0 8 1 8 8 8 0 8\n8 8 8 8 8 8 0 8 4 1 4 8 0 8\n8 4 1 4 1 8 0 8 8 8 1 8 0 8\n8 8 8 8 4 8 0 0 0 8 4 8 0 0\n0 0 0 8 1 8 8 8 8 8 1 8 8 0\n8 8 0 8 4 1 4 1 4 1 4 1 8 0\n1 8 0 8 1 8 8 8 8 8 8 8 8 0\n4 8 8 8 4 8 0 0 0 0 0 0 0 0\n1 4 1 4 1 8 0 8 8 8 8 8 8 8",
        "transformed_output": "0 0 0 8 0 0 0 8 0 0 0 0 0 8\n8 8 0 8 8 8 0 8 0 8 8 8 0 8\n0 8 0 0 0 8 0 8 0 8 0 8 8 8\n0 8 8 8 8 8 0 8 0 8 0 0 0 0\n0 0 0 0 0 0 0 8 0 8 8 8 0 8\n1 8 1 1 8 1 0 1 0 0 0 8 0 8\n1 0 0 0 0 8 0 8 8 1 0 8 0 8\n8 8 1 8 0 8 0 0 0 1 0 8 0 0\n0 0 0 4 1 4 1 8 8 8 0 8 8 0\n8 8 0 8 4 8 0 0 0 0 0 0 8 0\n0 1 0 4 1 4 1 8 1 8 8 8 8 0\n0 8 1 8 0 8 0 0 0 0 0 0 0 0\n0 0 0 0 0 8 0 8 8 8 8 8 8 8",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 54,
        "percent_correct": 70.32967032967034
      }
    ],
    "013-py_09-train": [
      {
        "example": 1,
        "input": "8 0 0 0 0 0 8 8 8 8 8 8 0 8 8 8 0 8 8 0 8 8 8 0\n0 0 8 8 8 0 0 0 0 0 0 8 0 0 0 8 0 8 0 0 8 0 8 0\n8 8 8 0 8 0 8 8 8 8 0 8 8 8 0 8 0 8 8 8 8 0 8 0\n8 0 0 0 8 0 8 0 0 8 0 0 0 8 0 8 0 0 0 0 0 0 8 0\n8 0 8 8 8 0 8 8 0 8 0 8 8 8 0 8 8 0 8 8 8 8 8 0\n8 0 8 0 0 0 0 8 0 8 0 8 0 0 0 0 8 0 8 0 0 0 0 0\n8 0 8 8 8 8 8 8 0 8 0 8 8 8 8 8 8 3 8 8 8 8 8 0\n8 0 0 0 0 0 0 0 0 8 0 0 0 0 0 0 3 2 3 0 0 0 8 0\n8 8 0 8 8 8 0 8 8 8 0 8 8 8 8 8 8 3 8 8 8 0 8 0\n0 8 0 8 0 8 0 8 0 0 0 8 0 0 0 0 8 0 8 0 8 0 8 0\n0 8 8 8 0 8 8 8 0 8 8 8 0 8 8 0 8 8 8 0 8 8 8 0",
        "expected_output": "8 3 2 3 2 3 8 8 8 8 8 8 0 8 8 8 2 8 8 0 8 8 8 0\n3 2 8 8 8 2 3 2 3 2 3 8 0 0 0 8 3 8 0 0 8 2 8 0\n8 8 8 0 8 3 8 8 8 8 2 8 8 8 0 8 2 8 8 8 8 3 8 0\n8 0 0 0 8 2 8 0 0 8 3 2 3 8 0 8 3 2 3 2 3 2 8 0\n8 0 8 8 8 3 8 8 0 8 2 8 8 8 0 8 8 3 8 8 8 8 8 0\n8 0 8 2 3 2 3 8 0 8 3 8 0 0 0 0 8 2 8 0 0 0 0 0\n8 0 8 8 8 8 8 8 0 8 2 8 8 8 8 8 8 3 8 8 8 8 8 0\n8 0 0 0 0 0 0 0 0 8 3 2 3 2 3 2 3 2 3 2 3 2 8 0\n8 8 0 8 8 8 0 8 8 8 2 8 8 8 8 8 8 3 8 8 8 3 8 0\n0 8 0 8 0 8 0 8 3 2 3 8 0 0 0 0 8 2 8 0 8 2 8 0\n0 8 8 8 0 8 8 8 2 8 8 8 0 8 8 0 8 8 8 0 8 8 8 0",
        "transformed_output": "8 0 0 0 0 0 8 8 8 8 8 8 0 8 8 8 0 8 8 0 8 8 8 0\n0 0 8 8 8 0 0 0 0 0 0 8 0 0 0 8 0 8 0 0 8 0 8 0\n8 8 8 0 8 0 8 8 8 8 0 8 8 8 0 8 0 8 8 8 8 0 8 0\n8 0 0 0 8 0 8 0 0 8 0 0 0 8 0 8 0 0 0 0 0 0 8 0\n8 0 8 8 8 0 8 8 0 8 0 8 8 8 0 8 8 0 8 8 8 8 8 0\n8 0 8 0 0 0 0 8 0 8 0 8 0 0 0 0 8 0 8 0 0 0 0 0\n8 0 8 8 8 8 8 8 0 8 0 8 8 8 8 8 8 3 8 8 8 8 8 0\n8 0 0 0 0 0 0 0 0 8 0 0 0 0 0 0 3 2 3 0 0 0 8 0\n8 8 0 8 8 8 0 8 8 8 0 8 8 8 8 8 8 3 8 8 8 0 8 0\n0 8 0 8 0 8 0 8 0 0 0 8 0 0 0 0 8 0 8 0 8 0 8 0\n0 8 8 8 0 8 8 8 0 8 8 8 0 8 8 0 8 8 8 0 8 8 8 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 57,
        "percent_correct": 78.4090909090909
      },
      {
        "example": 2,
        "input": "0 0 0 8 0 0 0 8 0 0 0 0 0 8\n8 8 0 8 8 8 0 8 0 8 8 8 0 8\n0 8 0 0 0 8 0 8 0 8 0 8 8 8\n0 8 8 8 8 8 0 8 0 8 0 0 0 0\n0 0 0 0 0 0 0 8 0 8 8 8 0 8\n8 8 8 8 8 8 0 8 0 0 0 8 0 8\n8 0 0 0 0 8 0 8 8 8 0 8 0 8\n8 8 8 8 0 8 0 0 0 8 0 8 0 0\n0 0 0 8 1 8 8 8 8 8 0 8 8 0\n8 8 0 8 4 1 0 0 0 0 0 0 8 0\n0 8 0 8 1 8 8 8 8 8 8 8 8 0\n0 8 8 8 0 8 0 0 0 0 0 0 0 0\n0 0 0 0 0 8 0 8 8 8 8 8 8 8",
        "expected_output": "0 0 0 8 0 0 0 8 1 4 1 4 1 8\n8 8 0 8 8 8 0 8 4 8 8 8 4 8\n0 8 0 0 0 8 0 8 1 8 0 8 8 8\n0 8 8 8 8 8 0 8 4 8 0 0 0 0\n0 0 0 0 0 0 0 8 1 8 8 8 0 8\n8 8 8 8 8 8 0 8 4 1 4 8 0 8\n8 4 1 4 1 8 0 8 8 8 1 8 0 8\n8 8 8 8 4 8 0 0 0 8 4 8 0 0\n0 0 0 8 1 8 8 8 8 8 1 8 8 0\n8 8 0 8 4 1 4 1 4 1 4 1 8 0\n1 8 0 8 1 8 8 8 8 8 8 8 8 0\n4 8 8 8 4 8 0 0 0 0 0 0 0 0\n1 4 1 4 1 8 0 8 8 8 8 8 8 8",
        "transformed_output": "0 0 0 8 0 0 0 8 0 0 0 0 0 8\n8 8 0 8 8 8 0 8 0 8 8 8 0 8\n0 8 0 0 0 8 0 8 0 8 0 8 8 8\n0 8 8 8 8 8 0 8 0 8 0 0 0 0\n0 0 0 0 0 0 0 8 0 8 8 8 0 8\n8 8 8 8 8 8 0 8 0 0 0 8 0 8\n8 0 0 0 0 8 0 8 8 8 0 8 0 8\n8 8 8 8 0 8 0 0 0 8 0 8 0 0\n0 0 0 8 1 8 8 8 8 8 0 8 8 0\n8 8 0 8 4 1 0 0 0 0 0 0 8 0\n0 8 0 8 1 8 8 8 8 8 8 8 8 0\n0 8 8 8 0 8 0 0 0 0 0 0 0 0\n0 0 0 0 0 8 0 8 8 8 8 8 8 8",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 35,
        "percent_correct": 80.76923076923077
      }
    ],
    "014-py_10-train": [
      {
        "example": 1,
        "input": "8 0 0 0 0 0 8 8 8 8 8 8 0 8 8 8 0 8 8 0 8 8 8 0\n0 0 8 8 8 0 0 0 0 0 0 8 0 0 0 8 0 8 0 0 8 0 8 0\n8 8 8 0 8 0 8 8 8 8 0 8 8 8 0 8 0 8 8 8 8 0 8 0\n8 0 0 0 8 0 8 0 0 8 0 0 0 8 0 8 0 0 0 0 0 0 8 0\n8 0 8 8 8 0 8 8 0 8 0 8 8 8 0 8 8 0 8 8 8 8 8 0\n8 0 8 0 0 0 0 8 0 8 0 8 0 0 0 0 8 0 8 0 0 0 0 0\n8 0 8 8 8 8 8 8 0 8 0 8 8 8 8 8 8 3 8 8 8 8 8 0\n8 0 0 0 0 0 0 0 0 8 0 0 0 0 0 0 3 2 3 0 0 0 8 0\n8 8 0 8 8 8 0 8 8 8 0 8 8 8 8 8 8 3 8 8 8 0 8 0\n0 8 0 8 0 8 0 8 0 0 0 8 0 0 0 0 8 0 8 0 8 0 8 0\n0 8 8 8 0 8 8 8 0 8 8 8 0 8 8 0 8 8 8 0 8 8 8 0",
        "expected_output": "8 3 2 3 2 3 8 8 8 8 8 8 0 8 8 8 2 8 8 0 8 8 8 0\n3 2 8 8 8 2 3 2 3 2 3 8 0 0 0 8 3 8 0 0 8 2 8 0\n8 8 8 0 8 3 8 8 8 8 2 8 8 8 0 8 2 8 8 8 8 3 8 0\n8 0 0 0 8 2 8 0 0 8 3 2 3 8 0 8 3 2 3 2 3 2 8 0\n8 0 8 8 8 3 8 8 0 8 2 8 8 8 0 8 8 3 8 8 8 8 8 0\n8 0 8 2 3 2 3 8 0 8 3 8 0 0 0 0 8 2 8 0 0 0 0 0\n8 0 8 8 8 8 8 8 0 8 2 8 8 8 8 8 8 3 8 8 8 8 8 0\n8 0 0 0 0 0 0 0 0 8 3 2 3 2 3 2 3 2 3 2 3 2 8 0\n8 8 0 8 8 8 0 8 8 8 2 8 8 8 8 8 8 3 8 8 8 3 8 0\n0 8 0 8 0 8 0 8 3 2 3 8 0 0 0 0 8 2 8 0 8 2 8 0\n0 8 8 8 0 8 8 8 2 8 8 8 0 8 8 0 8 8 8 0 8 8 8 0",
        "transformed_output": "8 0 0 0 0 0 8 8 8 8 8 8 0 8 8 8 0 8 8 0 8 8 8 0\n0 0 8 8 8 0 0 0 0 0 0 8 0 0 0 8 0 8 0 0 8 0 8 0\n8 8 8 0 8 0 8 8 8 8 0 8 8 8 0 8 0 8 8 8 8 0 8 0\n8 0 0 0 8 0 8 0 0 8 0 0 0 8 0 8 0 0 0 0 0 0 8 0\n8 0 8 8 8 0 8 8 0 8 0 8 8 8 0 8 8 0 8 8 8 8 8 0\n8 0 8 0 0 0 0 8 0 8 0 8 0 0 0 0 8 0 8 0 0 0 0 0\n8 0 8 8 8 8 8 8 0 8 0 8 8 8 8 8 8 3 8 8 8 8 8 0\n8 0 0 0 0 0 0 0 0 8 0 0 0 0 0 0 3 2 3 0 0 0 8 0\n8 8 0 8 8 8 0 8 8 8 0 8 8 8 8 8 8 3 8 8 8 0 8 0\n0 8 0 8 0 8 0 8 0 0 0 8 0 0 0 0 8 0 8 0 8 0 8 0\n0 8 8 8 0 8 8 8 0 8 8 8 0 8 8 0 8 8 8 0 8 8 8 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 57,
        "percent_correct": 78.4090909090909
      },
      {
        "example": 2,
        "input": "0 0 0 8 0 0 0 8 0 0 0 0 0 8\n8 8 0 8 8 8 0 8 0 8 8 8 0 8\n0 8 0 0 0 8 0 8 0 8 0 8 8 8\n0 8 8 8 8 8 0 8 0 8 0 0 0 0\n0 0 0 0 0 0 0 8 0 8 8 8 0 8\n8 8 8 8 8 8 0 8 0 0 0 8 0 8\n8 0 0 0 0 8 0 8 8 8 0 8 0 8\n8 8 8 8 0 8 0 0 0 8 0 8 0 0\n0 0 0 8 1 8 8 8 8 8 0 8 8 0\n8 8 0 8 4 1 0 0 0 0 0 0 8 0\n0 8 0 8 1 8 8 8 8 8 8 8 8 0\n0 8 8 8 0 8 0 0 0 0 0 0 0 0\n0 0 0 0 0 8 0 8 8 8 8 8 8 8",
        "expected_output": "0 0 0 8 0 0 0 8 1 4 1 4 1 8\n8 8 0 8 8 8 0 8 4 8 8 8 4 8\n0 8 0 0 0 8 0 8 1 8 0 8 8 8\n0 8 8 8 8 8 0 8 4 8 0 0 0 0\n0 0 0 0 0 0 0 8 1 8 8 8 0 8\n8 8 8 8 8 8 0 8 4 1 4 8 0 8\n8 4 1 4 1 8 0 8 8 8 1 8 0 8\n8 8 8 8 4 8 0 0 0 8 4 8 0 0\n0 0 0 8 1 8 8 8 8 8 1 8 8 0\n8 8 0 8 4 1 4 1 4 1 4 1 8 0\n1 8 0 8 1 8 8 8 8 8 8 8 8 0\n4 8 8 8 4 8 0 0 0 0 0 0 0 0\n1 4 1 4 1 8 0 8 8 8 8 8 8 8",
        "transformed_output": "8 0 0 8 0 0 8 8 0 0 0 0 0 8\n8 8 8 8 8 8 8 8 8 8 8 8 0 8\n8 8 8 0 0 8 0 8 8 8 0 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 0 8 0 8 0 8 8 8 0 8\n8 8 8 8 1 8 8 8 8 8 8 8 8 8\n8 8 8 8 4 1 0 8 8 8 0 8 8 8\n8 8 8 8 1 8 8 8 8 8 0 8 8 0\n8 8 8 1 1 1 8 8 8 8 0 8 8 0\n8 8 1 4 4 4 8 0 8 8 0 0 8 0\n8 8 8 1 1 1 8 8 8 8 8 8 8 0\n0 8 8 8 1 8 8 8 8 8 8 8 8 0\n8 8 8 8 4 1 0 8 8 8 8 8 8 8",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 80,
        "percent_correct": 56.043956043956044
      }
    ]
  },
  "best_train_results": {
    "passed": 0,
    "total": 0
  },
  "best_test_results": {
    "passed": 0,
    "total": 0
  },
  "test_solved": false
}