{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify the Reflection Axis:** Examine the input grid to determine the axis of reflection. This can be:\n    *   A **vertical line** of a single color that divides the grid into two symmetrical halves.\n    *   A **horizontal line** of a single color that divides the grid into two symmetrical halves.\n2.  **Reflect Across Axis:** For each cell not part of the reflection axis, find its corresponding position on the opposite side of the axis. The distance to the axis should be the same for both the original cell and its reflected counterpart. Copy the color of the original cell to the reflected position in the output grid.\n3.  **Maintain Axis:** The reflection axis itself remains unchanged in the output grid.\n\"\"\"\n\nimport numpy as np\n\ndef find_vertical_reflection_axis(grid):\n    \"\"\"Finds a vertical reflection axis if it exists.\"\"\"\n    rows, cols = grid.shape\n    for j in range(cols):\n        is_axis = True\n        for i in range(rows):\n            for k in range(1, min(j + 1, cols - j)):\n                if j - k >= 0 and j + k < cols and grid[i, j - k] != grid[i, j + k]:\n                    is_axis = False\n                    break\n            if not is_axis:\n                break\n        if is_axis:\n            return j, \"vertical\"\n    return -1, None\n\ndef find_horizontal_reflection_axis(grid):\n    \"\"\"Finds a horizontal reflection axis if it exists.\"\"\"\n    rows, cols = grid.shape\n    for i in range(rows):\n        is_axis = True\n        for j in range(cols):\n            for k in range(1, min(i + 1, rows - i)):\n                if i - k >= 0 and i + k < rows and grid[i - k, j] != grid[i + k, j]:\n                    is_axis = False\n                    break\n            if not is_axis:\n                break\n        if is_axis:\n            return i, \"horizontal\"\n    return -1, None\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Find reflection axis\n    v_axis_col, v_axis_type = find_vertical_reflection_axis(input_grid)\n    h_axis_row, h_axis_type = find_horizontal_reflection_axis(input_grid)\n\n    # Reflect based on detected axis\n    if v_axis_type == \"vertical\":\n        for i in range(rows):\n            for j in range(cols):\n                if j != v_axis_col:\n                    distance = v_axis_col - j\n                    new_col = v_axis_col + distance\n                    if 0 <= new_col < cols:\n                         output_grid[i, new_col] = input_grid[i, j]\n    elif h_axis_type == \"horizontal\":\n        for i in range(rows):\n            for j in range(cols):\n                if i != h_axis_row:\n                    distance = h_axis_row - i\n                    new_row = h_axis_row + distance\n                    if 0 <= new_row < rows:\n                        output_grid[new_row, j] = input_grid[i, j]\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5432,
    "candidates_token_count": 786,
    "total_token_count": 6218,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.864205,
  "response_file": "010-response.json"
}