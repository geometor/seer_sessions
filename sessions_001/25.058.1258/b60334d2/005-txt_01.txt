import numpy as np

def describe_grid(grid):
    grid = np.array(grid)
    rows, cols = grid.shape
    unique, counts = np.unique(grid, return_counts=True)
    color_counts = dict(zip(unique, counts))
    description = {
        "rows": rows,
        "cols": cols,
        "color_counts": color_counts,
    }
    return description

def compare_grids(grid1, grid2):
    grid1 = np.array(grid1)
    grid2 = np.array(grid2)
    if grid1.shape != grid2.shape:
        return "Different shapes"
    else:
        diff = grid1 != grid2
        return np.sum(diff)

examples = [
    {
        "input": [[8, 5, 8, 5, 8], [5, 8, 5, 8, 5], [8, 5, 8, 5, 8], [5, 8, 5, 8, 5], [8, 5, 8, 5, 8]],
        "output": [[8, 1, 8, 1, 8], [1, 8, 1, 8, 1], [8, 1, 8, 1, 8], [1, 8, 1, 8, 1], [8, 1, 8, 1, 8]],
    },
    {
        "input": [[5, 8, 8, 8, 8, 8, 8, 5], [8, 8, 5, 8, 8, 5, 8, 8], [8, 5, 8, 8, 8, 8, 5, 8], [8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 5, 5, 8, 8, 8], [8, 8, 8, 5, 8, 8, 5, 8], [8, 5, 8, 8, 8, 8, 8, 5]],
        "output": [[1, 8, 8, 8, 8, 8, 8, 1], [8, 8, 1, 8, 8, 1, 8, 8], [8, 1, 8, 8, 8, 8, 1, 8], [8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 1, 1, 8, 8, 8], [8, 8, 8, 1, 8, 8, 1, 8], [8, 1, 8, 8, 8, 8, 8, 1]],
    },
     {
        "input": [[8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 5, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8]],
        "output": [[8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 1, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8]]
    }
]

previous_code_output = []
for ex in examples:
    previous_code_output.append(transform(ex["input"]))

for i, ex in enumerate(examples):
  print(f"Example {i+1}:")
  print("Input Description:", describe_grid(ex["input"]))
  print("Output Description:", describe_grid(ex["output"]))
  print("Previous Code Output Description", describe_grid(previous_code_output[i]))
  print("Differences between Expected and Actual", compare_grids(ex["output"], previous_code_output[i]))
  print("---")