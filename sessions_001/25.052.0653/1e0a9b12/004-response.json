{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nMoves all non-zero single-cell objects to the last row of the grid,\nmaintaining their relative horizontal order. Single-cell objects are those\nthat have no adjacent cells (horizontally, vertically, or diagonally) with the\nsame color. Multi-cell objects already in the last row occupy their positions.\n\"\"\"\n\nimport numpy as np\n\ndef is_single_cell(grid, r, c):\n    \"\"\"Checks if a cell is a single-cell object (no neighbors of same color).\"\"\"\n    rows = len(grid)\n    cols = len(grid[0])\n    color = grid[r][c]\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if 0 <= r + i < rows and 0 <= c + j < cols:\n                if (i != 0 or j != 0) and grid[r + i][c + j] == color:\n                    return False\n    return True\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by moving non-zero single-cell objects to the last row,\n    maintaining their relative horizontal order.\n\n    Args:\n        input_grid (list of lists): The input grid.\n\n    Returns:\n        list of lists: The transformed output grid.\n    \"\"\"\n    rows = len(input_grid)\n    cols = len(input_grid[0])\n    output_grid = [row[:] for row in input_grid]  # Deep copy of the input grid\n    last_row = [0] * cols\n\n    # Occupy spaces in last row by multi-cell objects present in the last row\n    for c in range(cols):\n      if input_grid[rows-1][c] != 0:\n        if not is_single_cell(input_grid, rows-1, c):\n          last_row[c] = input_grid[rows-1][c]\n\n\n    # Find and move single-cell non-zero objects\n    for c in range(cols):\n        for r in range(rows):\n            if input_grid[r][c] != 0:\n                # Check if it's a single-cell object\n                if is_single_cell(input_grid, r, c):\n                    # If it's a single-cell object, move it to last row if space available\n                    if last_row[c] == 0:\n                      last_row[c] = input_grid[r][c]\n                      # Clear original position only if it wasn't already in the last row\n                      if r != rows -1:\n                        output_grid[r][c] = 0\n\n    # Replace the last row of the output grid with the processed last row\n    output_grid[rows - 1] = last_row\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3245,
    "candidates_token_count": 643,
    "total_token_count": 3888,
    "cached_content_token_count": 0
  },
  "timing": {
    "response_time": 6.440949
  },
  "response_file": "004-response.json"
}