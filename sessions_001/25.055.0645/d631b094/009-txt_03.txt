import numpy as np

def transform(input_grid):
    """
    Transforms the input grid by extracting all red cells (value 2) and
    creating a 1xN output grid where N is the number of red cells.
    """
    # Convert the input grid to a NumPy array for easier manipulation.
    input_array = np.array(input_grid)

    # Find all cells with the value 2 (red cells).
    red_cells = input_array[input_array == 2]

    # Create a new 1xN array where N is the number of red cells.
    output_grid = red_cells.reshape(1, -1)

    return output_grid.tolist()

task = {
  "train": [
    {
      "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],
      "output": [[2]]
    },
    {
      "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2]],
      "output": [[2]]
    },
    {
      "input": [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 0]],
      "output": [[2, 2]]
    },
    {
      "input": [[2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2]],
      "output": [[2, 2]]
    },
    {
      "input": [[0, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0]],
      "output": [[2, 2]]
    }
  ],
  "test": [
    {
      "input": [[0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2]],
      "output": [[2, 2]]
    }
  ]
}

print("Example\t| Input Shape\t| Output Shape\t| Expected Shape\t| Match")
print("--------|--------------|---------------|-----------------|-------")

for i, example in enumerate(task["train"]):
  input_grid = example["input"]
  expected_output = example["output"]
  actual_output = transform(input_grid)
  input_shape = np.array(input_grid).shape
  output_shape = np.array(actual_output).shape
  expected_shape = np.array(expected_output).shape
  match = output_shape == expected_shape

  print(f"Train {i+1}\t| {input_shape}\t| {output_shape}\t| {expected_shape}\t| {match}")