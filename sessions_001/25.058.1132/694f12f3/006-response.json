{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Rectangles:** Locate all rectangular regions of color '4' (yellow) in the input grid.\n2.  **Order Rectangles:** Sort the identified rectangles from top to bottom based on their top-left corner's row index.\n3.  **Fill Top Rectangle:** Fill the inner region (excluding the border) of the top-most rectangle with color '1' (blue).\n4.  **Fill Remaining Rectangles:** Fill the inner region (excluding the border) of all subsequent, lower rectangles with color '2' (red).\n5.  **Preserve Outline:** The outline of all rectangles (pixels with the initial color '4') should remain unchanged.\n6.  **Output:** The output is the modified grid reflecting these changes, preserving the background and the outlines of the rectangles.\n\"\"\"\n\nimport numpy as np\n\ndef get_objects(grid, color):\n    \"\"\"\n    Finds rectangular objects of a specified color in the grid.\n    Returns a list of (min_row, min_col, max_row, max_col) tuples for each object.\n    \"\"\"\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == color and not visited[r, c]:\n                min_row, min_col = r, c\n                max_row, max_col = r, c\n\n                # Expand horizontally\n                while max_col + 1 < cols and grid[r, max_col + 1] == color and not visited[r, max_col+1]:\n                    max_col += 1\n\n                # Expand vertically\n                while max_row + 1 < rows and all(grid[max_row + 1, min_col:max_col + 1] == color) and not any(visited[max_row+1, min_col:max_col+1]):\n                    max_row += 1\n\n                # Mark visited\n                for i in range(min_row, max_row+1):\n                    for j in range(min_col, max_col + 1):\n                        visited[i,j] = True\n                \n                objects.append((min_row, min_col, max_row, max_col))\n    return objects\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the specified rules.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    yellow_objects = get_objects(input_grid, 4)\n\n    # Sort objects by top-left corner's row.\n    yellow_objects.sort(key=lambda x: x[0])\n\n    for i, (min_row, min_col, max_row, max_col) in enumerate(yellow_objects):\n        # Fill inner area\n        if i == 0:  # Top-most rectangle\n            fill_color = 1\n        else:  # All other rectangles\n            fill_color = 2\n\n        for row in range(min_row + 1, max_row):\n            for col in range(min_col + 1, max_col):\n                output_grid[row, col] = fill_color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7091,
    "candidates_token_count": 756,
    "total_token_count": 7847,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.994584,
  "response_file": "006-response.json"
}