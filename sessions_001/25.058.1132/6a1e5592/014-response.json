{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Preservation:** All red pixels in the input grid remain unchanged in the output grid.\n2.  **Gray Removal:** All gray pixels in the input grid are replaced with white pixels in the output grid.\n3.  **Conditional White Transformation:**\n    *   White pixels that are *directly adjacent* (horizontally or vertically, but not diagonally) to a red pixel are transformed into blue pixels.\n    * White pixels that are *directly adjacent* (horizontally or vertically, but not diagonally) to a *blue* pixel *and* are on the same row, or the row immediately below the red pixels, are converted to blue.\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, row, col, include_diagonal=False):\n    \"\"\"\n    Get the valid neighbors of a cell in a grid.\n    \"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    for dr in [-1, 0, 1]:\n        for dc in [-1, 0, 1]:\n            if (dr == 0 and dc == 0) or (abs(dr) + abs(dc) > (1 if not include_diagonal else 2)):\n                continue\n            new_row, new_col = row + dr, col + dc\n            if 0 <= new_row < rows and 0 <= new_col < cols:\n                neighbors.append((new_row, new_col))\n    return neighbors\n\ndef transform(input_grid):\n    # initialize output_grid as a copy of input\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Gray Removal: replace all gray pixels (5) with white pixels (0)\n    for r in range(rows):\n        for c in range(cols):\n            if input_grid[r, c] == 5:\n                output_grid[r, c] = 0\n\n    # Conditional White Transformation\n    for r in range(rows):\n        for c in range(cols):\n            if output_grid[r,c] == 0:  # Check white pixels in the output_grid\n                neighbors = get_neighbors(output_grid, r, c)\n                is_next_to_red = any(input_grid[nr, nc] == 2 for nr, nc in get_neighbors(input_grid, r, c)) #check input grid for original red\n                if is_next_to_red:\n                     output_grid[r,c] = 1\n                else:\n                    is_next_to_blue = any(output_grid[nr,nc] == 1 for nr, nc in neighbors)\n                    # Find a red pixel to get the base row for blue extension\n                    red_row = -1\n                    for rr in range(rows):\n                      for cc in range(cols):\n                        if input_grid[rr,cc] == 2:\n                           red_row = rr\n                           break\n                      if red_row != -1:\n                         break\n                    if is_next_to_blue and (r == red_row or r == red_row+1):\n                        output_grid[r,c] = 1\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6365,
    "candidates_token_count": 730,
    "total_token_count": 7095,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.409461,
  "response_file": "014-response.json"
}