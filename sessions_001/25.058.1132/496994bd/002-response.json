{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation vertically flips the contiguous block of non-white rows in the input grid to produce the output grid. The white rows act as padding or a background that remains unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef _find_non_white_region(grid):\n    # Find the indices of the first and last non-white rows.\n    rows, cols = grid.shape\n    non_white_rows = []\n    for i in range(rows):\n        if np.any(grid[i] != 0):\n            non_white_rows.append(i)\n    if not non_white_rows:\n        return 0, 0  # Handle the case where the entire grid is white\n    start_row = non_white_rows[0]\n    end_row = non_white_rows[-1] + 1\n    return start_row, end_row\n\ndef transform(input_grid):\n    \"\"\"\n    Vertically flips the non-white region of the input grid.\n    \"\"\"\n    grid = np.array(input_grid)\n    rows, cols = grid.shape\n    output_grid = np.copy(grid)  # Initialize output grid\n\n    # Find the non-white region\n    start_row, end_row = _find_non_white_region(grid)\n\n    # Extract and flip the region\n    if start_row != end_row:\n        non_white_region = grid[start_row:end_row]\n        flipped_region = np.flipud(non_white_region)\n\n        # Replace the region in the output grid\n        output_grid[start_row:end_row] = flipped_region\n\n        # Calculate the new position after flipping\n        flipped_start_row = rows - end_row\n        flipped_end_row   = rows - start_row\n        output_grid[flipped_start_row:flipped_end_row] = flipped_region\n\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3223,
    "candidates_token_count": 448,
    "total_token_count": 3671,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 5.569844,
  "response_file": "002-response.json"
}