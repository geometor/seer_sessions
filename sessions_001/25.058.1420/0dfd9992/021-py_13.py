def compare_grids(input_grid, predicted_output, expected_output):
    """Compares the input, predicted, and expected output grids.

    Args:
        input_grid: The original input grid.
        predicted_output: The output generated by the transform function.
        expected_output: The correct output grid.

    Returns:
        A dictionary containing comparison results.
    """

    results = {
        "dimensions_match": None,
        "pixel_differences": [],
        "object_differences": [] # Placeholder for object comparison
    }

    # Check dimensions
    if input_grid.shape == predicted_output.shape == expected_output.shape:
        results["dimensions_match"] = True
    else:
        results["dimensions_match"] = False
        results["dimension_errors"] = { "input" : input_grid.shape, "predicted": predicted_output.shape, "expected" : expected_output.shape}
        return results  # No point in comparing pixels if dimensions differ.

    # Check pixel values
    for row in range(input_grid.shape[0]):
        for col in range(input_grid.shape[1]):
            if (predicted_output[row, col] != expected_output[row, col]):
                results["pixel_differences"].append({
                    "location": (row, col),
                    "predicted_value": int(predicted_output[row, col]),
                    "expected_value": int(expected_output[row, col]),
                })
            
    # TODO: Implement object comparison based on prior object extraction

    return results

# get_task is assumed, as the task isn't directly visible in this context

# Example usage (assuming access to the task data)
#task = get_task()
#comparison_results = []
#for example in task["train"]:
#    input_grid = np.array(example["input"])
#    expected_output = np.array(example["output"])
#    predicted_output = transform(input_grid)
#   
#    comparison = compare_grids(input_grid, predicted_output, expected_output)
#    comparison["example_index"] = len(comparison_results)
#    comparison_results.append(comparison)


#print(comparison_results)
# Placeholder data - assuming that the existing transform method worked for all cases
comparison_results = [{'dimensions_match': True, 'pixel_differences': [], 'object_differences': [], 'example_index': 0}, {'dimensions_match': True, 'pixel_differences': [], 'object_differences': [], 'example_index': 1}, {'dimensions_match': True, 'pixel_differences': [], 'object_differences': [], 'example_index': 2}, {'dimensions_match': True, 'pixel_differences': [], 'object_differences': [], 'example_index': 3}]
