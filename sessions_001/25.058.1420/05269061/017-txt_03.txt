import numpy as np

def grid_report(grid, grid_name="Grid"):
    rows, cols = grid.shape
    unique_colors = np.unique(grid)
    num_unique_colors = len(unique_colors)
    color_counts = {color: np.sum(grid == color) for color in unique_colors}

    report = f"{grid_name}:\n"
    report += f"  Dimensions: {rows}x{cols}\n"
    report += f"  Unique Colors: {unique_colors}\n"
    report += f"  Number of Unique Colors: {num_unique_colors}\n"
    report += f"  Color Counts: {color_counts}\n"

    return report

def analyze_example(example):
    input_grid = np.array(example['input'])
    output_grid = np.array(example['output'])

    print(grid_report(input_grid, "Input Grid"))
    print(grid_report(output_grid, "Output Grid"))
    print("---")

examples = [
    {
        "input": [[0, 0, 0, 0, 0, 0, 8], [0, 0, 0, 0, 0, 8, 0], [0, 0, 0, 0, 8, 0, 0], [0, 0, 0, 8, 0, 0, 0], [0, 0, 8, 0, 0, 0, 0], [0, 8, 0, 0, 0, 0, 0], [8, 0, 0, 0, 0, 0, 0]],
        "output": [[4, 0, 0, 0, 0, 0, 8], [0, 4, 0, 0, 0, 8, 3], [0, 0, 4, 0, 8, 3, 0], [0, 0, 0, 8, 3, 0, 4], [0, 0, 8, 3, 0, 4, 0], [0, 8, 3, 0, 4, 0, 0], [8, 3, 0, 4, 0, 0, 0]]
    },
    {
        "input": [[0, 0, 0, 0, 8, 0, 0], [0, 0, 0, 8, 0, 0, 0], [0, 0, 8, 0, 0, 0, 0], [0, 8, 0, 0, 0, 0, 0], [8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]],
        "output": [[0, 0, 0, 0, 8, 3, 0], [0, 0, 0, 8, 3, 0, 4], [0, 0, 8, 3, 0, 4, 0], [0, 8, 3, 0, 4, 0, 0], [8, 3, 0, 4, 0, 0, 0], [3, 0, 4, 0, 0, 0, 0], [0, 4, 0, 0, 0, 0, 0]]
    },
    {
        "input" : [[0, 0, 0, 8, 0, 0, 0], [0, 0, 8, 0, 0, 0, 0], [0, 8, 0, 0, 0, 0, 0], [8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]],
        "output": [[0, 0, 0, 8, 3, 0, 4], [0, 0, 8, 3, 0, 4, 0], [0, 8, 3, 0, 4, 0, 0], [8, 3, 0, 4, 0, 0, 0], [3, 0, 4, 0, 0, 0, 0], [0, 4, 0, 0, 0, 0, 0], [4, 0, 0, 0, 0, 0, 0]]
    }
]

for i, example in enumerate(examples):
    print(f"Example {i+1}:")
    analyze_example(example)
