{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify the green region:** Locate all green (3) pixels within the input grid.\n2.  **Determine the shape:** Analyze the shape formed by the green pixels. The shape may be a rectangle or a single pixel.\n3.  **Extract the green region:** Extract the green region. If the green region is surrounded by white, which is surrounded by red, extract the green pixels and the surrounding white pixels.\n4.  **Construct output:** Create the output grid. The output grid contains only the extracted green pixels. If the extracted shape has any missing cells to create a perfect rectangle or square, fill in those cells with the same green color.\n\"\"\"\n\nimport numpy as np\n\ndef find_contiguous_regions(grid, color):\n    \"\"\"Finds all contiguous regions of a given color.\"\"\"\n    visited = set()\n    regions = []\n\n    def dfs(row, col):\n        \"\"\"Depth-first search to find contiguous pixels.\"\"\"\n        if (row, col) in visited or not (0 <= row < grid.shape[0] and 0 <= col < grid.shape[1]) or grid[row, col] != color:\n            return []\n        \n        visited.add((row, col))\n        region = [(row, col)]\n        \n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            region.extend(dfs(row + dr, col + dc))\n        \n        return region\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if (row, col) not in visited and grid[row, col] == color:\n                regions.append(dfs(row, col))\n\n    return regions\n\ndef find_object_with_context(grid, color):\n    \"\"\"Finds objects and some context\"\"\"\n    regions = find_contiguous_regions(grid, color)\n    objects = []\n    for region in regions:\n        min_row = min(r[0] for r in region)\n        max_row = max(r[0] for r in region)\n        min_col = min(r[1] for r in region)\n        max_col = max(r[1] for r in region)\n\n        objects.append( {\n            \"coords\": region,\n            \"bounding_box\": (min_row, max_row, min_col, max_col)\n            } )\n    return objects\n\ndef extract_region(grid, region_coords):\n    \"\"\"Extracts a region from the grid given its coordinates.\"\"\"\n    rows, cols = zip(*region_coords)  # Unzip coordinates\n    min_row, max_row = min(rows), max(rows)\n    min_col, max_col = min(cols), max(cols)\n    return grid[min_row:max_row + 1, min_col:max_col + 1]\n\ndef pad_to_square(grid, color):\n    \"\"\"Pads a rectangular region to a square.\"\"\"\n    height, width = grid.shape\n    side = max(height, width)\n    padded_grid = np.full((side, side), color, dtype=grid.dtype)\n    row_offset = (side - height) // 2\n    col_offset = (side - width) // 2\n    padded_grid[row_offset:row_offset + height, col_offset:col_offset + width] = grid\n    return padded_grid\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the rules.\"\"\"\n    # Convert to numpy array\n    input_grid = np.array(input_grid)\n\n    # Find green objects.\n    green_objects = find_object_with_context(input_grid, 3)\n\n    # Handle no green objects\n    if not green_objects:\n        return [[]]\n        \n    # Extract and process.\n    extracted_grids = []\n    for obj in green_objects:\n        extracted_region = extract_region(input_grid, obj['coords'])\n        extracted_grids.append(extracted_region)\n\n    # Determine largest extracted shape and pad all to match.\n    if len(extracted_grids) > 0:\n        max_height = max(grid.shape[0] for grid in extracted_grids)\n        max_width = max(grid.shape[1] for grid in extracted_grids)\n        \n        if max_height != max_width:\n            #make square\n            target_size = max(max_height, max_width)\n            output_grid = np.full((target_size,target_size), 3, dtype=int) #fill square with green\n\n            #copy object to output_grid\n            obj_height = extracted_grids[0].shape[0]\n            obj_width = extracted_grids[0].shape[1]\n            row_start = (target_size - obj_height) // 2\n            col_start = (target_size - obj_width) // 2\n            output_grid[row_start:row_start+obj_height, col_start:col_start+obj_width] = extracted_grids[0]\n\n        else: #already square\n            output_grid = extracted_grids[0]\n    else:\n        return [[]] #nothing green\n    \n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4450,
    "candidates_token_count": 1229,
    "total_token_count": 5679,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 12.363661,
  "response_file": "012-response.json"
}