import numpy as np

def calculate_metrics(input_grid, predicted_output_grid, expected_output_grid):
    """Calculates pixel-wise accuracy and discrepancy details."""
    input_grid = np.array(input_grid)
    predicted_output_grid = np.array(predicted_output_grid)
    expected_output_grid = np.array(expected_output_grid)

    correct_pixels = np.sum(predicted_output_grid == expected_output_grid)
    total_pixels = input_grid.size  # Use input_grid size for consistency
    accuracy = correct_pixels / total_pixels

    discrepancies = []
    for r in range(expected_output_grid.shape[0]):
        for c in range(expected_output_grid.shape[1]):
            if predicted_output_grid[r, c] != expected_output_grid[r, c]:
                discrepancies.append({
                    "row": r,
                    "col": c,
                    "predicted": int(predicted_output_grid[r, c]),
                    "expected": int(expected_output_grid[r, c]),
                    "input": int(input_grid[r,c])
                })

    return accuracy, discrepancies

def show_grid(grid, label="Grid"):
  """
  prepare a grid for printing
  """
  print(f"\\n{label}:")
  for row in grid:
    print(row)

# input and output pairs
task_examples = [
    (
        [[0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 0], [0, 0, 0, 0, 0, 0, 0]],
        [[0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0], [0, 8, 2, 2, 8, 8, 0], [0, 8, 2, 2, 2, 8, 0], [0, 8, 8, 2, 8, 8, 0], [0, 8, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0]]
    ),
    (
        [[0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 0], [0, 0, 0, 0, 0, 0, 0]],
        [[0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0], [0, 8, 2, 2, 2, 8, 0], [0, 8, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0]]
    ),
    (
        [[0, 0, 0, 0, 0], [0, 5, 5, 5, 0], [0, 5, 5, 5, 0], [0, 5, 5, 5, 0], [0, 5, 5, 5, 0], [0, 0, 0, 0, 0]],
        [[0, 0, 0, 0, 0], [0, 8, 8, 8, 0], [0, 8, 2, 8, 0], [0, 8, 2, 8, 0], [0, 8, 8, 8, 0], [0, 0, 0, 0, 0]]
    ),
        (
        [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 5, 5, 0, 0, 0], [0, 0, 0, 5, 5, 5, 0, 0, 0], [0, 0, 0, 5, 5, 5, 0, 0, 0], [0, 0, 0, 5, 5, 5, 0, 0, 0], [0, 0, 0, 5, 5, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],
        [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 8, 0, 0, 0], [0, 0, 0, 8, 2, 8, 0, 0, 0], [0, 0, 0, 8, 2, 8, 0, 0, 0], [0, 0, 0, 8, 2, 8, 0, 0, 0], [0, 0, 0, 8, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]
    ),
    (
        [[0, 5, 5, 0], [0, 5, 5, 0], [0, 5, 5, 0], [0, 0, 0, 0]],
        [[0, 8, 8, 0], [0, 8, 8, 0], [0, 8, 8, 0], [0, 0, 0, 0]]
    )

]

# loop and report
for i, (input_grid, expected_output_grid) in enumerate(task_examples):
    predicted_output_grid = transform(input_grid)
    accuracy, discrepancies = calculate_metrics(input_grid, predicted_output_grid, expected_output_grid)
    print(f"\\n--- Example {i + 1} ---")
    # show_grid(input_grid, "Input")
    # show_grid(predicted_output_grid, "Predicted Output")
    # show_grid(expected_output_grid, "Expected Output")
    print(f"Accuracy: {accuracy:.4f}")
    if accuracy < 1.0:
        print(f"Discrepancies:")
        for d in discrepancies:
            print(f"  Row: {d['row']}, Col: {d['col']}, Predicted: {d['predicted']}, Expected: {d['expected']}, Input: {d['input']}")
