{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify contiguous regions** of blue (1), red (2), and magenta (6) pixels in the input grid.\n2.  **For each blue region:** Create orange (7) pixels in all cells directly adjacent (up, down, left, right, and diagonals) to *any* pixel in the blue region.\n3.  **For each red region:** Create yellow (4) pixels in all cells directly adjacent (up, down, left, and right, but *not* diagonal) to *any* pixel in the red region.\n4. **For each magenta Region:** Do not add any new pixels.\n5.  **Preserve** all original pixels in the input grid, including those within the identified regions.\n6.  **Return** the modified grid.\n\"\"\"\n\nimport numpy as np\nfrom scipy.ndimage import label\n\ndef get_regions(grid, color):\n    \"\"\"Identifies contiguous regions of a specific color in the grid.\"\"\"\n    colored_mask = (grid == color).astype(int)\n    labeled_array, num_features = label(colored_mask)\n    regions = []\n    for i in range(1, num_features + 1):  # Iterate through each labeled region\n        region_coords = np.where(labeled_array == i)\n        regions.append(list(zip(region_coords[0], region_coords[1])))\n    return regions\n\ndef get_all_adjacent_coords(region, grid_shape):\n    \"\"\"Gets all valid adjacent coordinates (including diagonals) for a region.\"\"\"\n    rows, cols = grid_shape\n    all_adjacent = set()\n    for r, c in region:\n        for dr in [-1, 0, 1]:\n            for dc in [-1, 0, 1]:\n                if dr == 0 and dc == 0:\n                    continue  # Skip the cell itself\n                nr, nc = r + dr, c + dc\n                if 0 <= nr < rows and 0 <= nc < cols:\n                    all_adjacent.add((nr, nc))\n    return list(all_adjacent)\n\ndef get_cross_adjacent_coords(region, grid_shape):\n    rows,cols = grid_shape\n    all_adjacent = set()\n    for r, c in region:\n        if r > 0:\n            all_adjacent.add((r-1,c)) # up\n        if r < rows-1:\n            all_adjacent.add((r+1, c)) # down\n        if c > 0:\n            all_adjacent.add((r,c-1)) #left\n        if c < cols-1:\n            all_adjacent.add((r, c+1)) # right\n\n    return list(all_adjacent)\n\ndef transform(input_grid):\n    # Initialize output grid with the same values as the input grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Identify regions of each color\n    blue_regions = get_regions(input_grid, 1)\n    red_regions = get_regions(input_grid, 2)\n    magenta_regions = get_regions(input_grid, 6)\n\n    # Apply transformations for each blue region\n    for region in blue_regions:\n        adjacent_coords = get_all_adjacent_coords(region, (rows, cols))\n        for nr, nc in adjacent_coords:\n            output_grid[nr, nc] = 7  # Orange\n\n    # Apply transformations for each red region\n    for region in red_regions:\n        adjacent_coords = get_cross_adjacent_coords(region, (rows,cols))\n        for nr, nc in adjacent_coords:\n            output_grid[nr, nc] = 4  # Yellow\n    \n    # magenta regions have no effect\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3467,
    "candidates_token_count": 878,
    "total_token_count": 4345,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.834536,
  "response_file": "018-response.json"
}