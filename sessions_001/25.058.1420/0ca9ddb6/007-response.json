{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Initialization:** Create a copy of the input grid to serve as the output grid.\n2.  **Red Expansion:** Locate all red (value 2) pixels in the input grid. For each red pixel, change all directly and diagonally contiguous pixels (the \"aura\") with a value of 0 to yellow (value 4). Stop when reaching the border or a non-zero value.\n3. **Blue Expansion:** Locate all blue (value 1) pixels. Fill their \"aura\" (contiguous zero-value region, directly or diagonally touching) with orange (value 7). Stop when the boundary or a non-zero value is hit.\n\"\"\"\n\nimport numpy as np\n\ndef get_all_neighbors(grid, row, col):\n    \"\"\"\n    Gets all 8 neighbors (including diagonals) of a cell.\n    \"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    for i in range(max(0, row - 1), min(rows, row + 2)):\n        for j in range(max(0, col - 1), min(cols, col + 2)):\n            if (i, j) != (row, col):  # Exclude the cell itself\n                neighbors.append((i, j))\n    return neighbors\n\ndef flood_fill(grid, row, col, target_color, replacement_color):\n    \"\"\"\n    Performs a flood fill, replacing contiguous target_color cells with replacement_color.\n    \"\"\"\n    if grid[row, col] != target_color:\n        return\n    grid[row, col] = replacement_color\n    neighbors = get_all_neighbors(grid, row, col)\n    for r, c in neighbors:\n        flood_fill(grid, r, c, target_color, replacement_color)\n\ndef transform(input_grid):\n    # Initialize output grid as a copy of the input grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Red Expansion\n    for row in range(rows):\n        for col in range(cols):\n            if input_grid[row, col] == 2:  # Red pixel\n                # Perform flood fill with yellow (4) for contiguous 0s\n                for r, c in get_all_neighbors(input_grid, row, col):\n                    flood_fill(output_grid, r, c, 0, 4)\n                output_grid[row,col] = 2 # ensure center pixel unchanged\n\n    # Blue Expansion\n    for row in range(rows):\n        for col in range(cols):\n            if input_grid[row, col] == 1:  # Blue pixel\n                # Perform flood fill with orange (7) for contiguous 0s\n                for r, c in get_all_neighbors(input_grid, row, col):\n                    flood_fill(output_grid, r, c, 0, 7)\n                output_grid[row,col] = 1 # ensure center pixel unchanged\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3079,
    "candidates_token_count": 691,
    "total_token_count": 3770,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.997383,
  "response_file": "007-response.json"
}