{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Red Pixels:** Locate all red pixels (value 2) in the input grid.\n\n2.  **Group Adjacent Red Pixels:** Identify groups of adjacent red pixels. Adjacency includes both horizontal and vertical neighbors. Diagonal pixels are *not* considered adjacent for the purpose of forming groups.\n\n3.  **Expand Red Groups:** For each group of adjacent red pixels:\n    *   **Extend Left:** Add one red pixel to the left of the leftmost pixel(s) in the group, if the extension is within the grid boundaries.\n    *   **Extend Right:** Add one red pixel to the right of the rightmost pixel(s) in the group, if within bounds.\n    *   **Extend Up:** Add one red pixel above the topmost pixel(s) in the group, if within bounds.\n    *   **Extend Down:** Add one red pixel below the bottommost pixel(s) in the group, if within bounds.\n\n4.  **Preserve Other Pixels:** Pixels that are not part of any expanded red group remain unchanged.\n\n5. **No Red Pixels**: If the input array contains no red pixels, the output should be identical to the input.\n\"\"\"\n\nimport numpy as np\n\ndef get_adjacent_pixels(grid, row, col):\n    \"\"\"Gets the valid adjacent pixels (up, down, left, right) of a given pixel.\"\"\"\n    rows, cols = grid.shape\n    adjacent = []\n    if row > 0:\n        adjacent.append((row - 1, col))  # Up\n    if row < rows - 1:\n        adjacent.append((row + 1, col))  # Down\n    if col > 0:\n        adjacent.append((row, col - 1))  # Left\n    if col < cols - 1:\n        adjacent.append((row, col + 1))  # Right\n    return adjacent\n\ndef group_red_pixels(grid):\n    \"\"\"Groups contiguously adjacent red pixels using Depth-First Search (DFS).\"\"\"\n    rows, cols = grid.shape\n    visited = set()\n    groups = []\n\n    def dfs(row, col, current_group):\n        if (row, col) in visited or grid[row, col] != 2:\n            return\n        visited.add((row, col))\n        current_group.append((row, col))\n        for r, c in get_adjacent_pixels(grid, row, col):\n            dfs(r, c, current_group)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == 2 and (r, c) not in visited:\n                current_group = []\n                dfs(r, c, current_group)\n                groups.append(current_group)\n    return groups\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Find and group red pixels\n    red_groups = group_red_pixels(input_grid)\n\n    # If no red pixels, return original grid\n    if not red_groups:\n        return output_grid\n\n    # Expand red groups\n    for group in red_groups:\n        # Collect all pixels to expand to\n        expansion_pixels = set()\n        for r, c in group:\n            for ar, ac in get_adjacent_pixels(input_grid, r, c):\n                expansion_pixels.add((ar,ac))\n\n        # expand to red\n        for r, c in expansion_pixels:\n          output_grid[r,c] = 2\n          \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2695,
    "candidates_token_count": 836,
    "total_token_count": 3531,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.700976,
  "response_file": "014-response.json"
}