{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms two clusters of pixels in an input grid to an output grid. The clusters maintain their relative\npositions (top-right and bottom-left). The top-right cluster expands horizontally, and the bottom-left cluster\nexpands vertically. The colors within each cluster are preserved.\n\"\"\"\n\nimport numpy as np\n\ndef get_clusters(grid):\n    \"\"\"Identifies and returns clusters of connected non-zero pixels.\"\"\"\n    visited = set()\n    clusters = []\n\n    def dfs(r, c, current_cluster):\n        \"\"\"Depth-First Search to find connected components.\"\"\"\n        if (r, c) in visited or not (0 <= r < grid.shape[0] and 0 <= c < grid.shape[1]) or grid[r, c] == 0:\n            return\n        visited.add((r, c))\n        current_cluster.append((r, c, grid[r,c]))\n        # Explore adjacent cells (including diagonals)\n        for dr in [-1, 0, 1]:\n            for dc in [-1, 0, 1]:\n                if dr == 0 and dc == 0:\n                    continue\n                dfs(r + dr, c + dc, current_cluster)\n\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] != 0 and (r, c) not in visited:\n                current_cluster = []\n                dfs(r, c, current_cluster)\n                clusters.append(current_cluster)\n    return clusters\n\ndef analyze_clusters(grid):\n    clusters = get_clusters(grid)\n    cluster_data = []\n    for i, cluster in enumerate(clusters):\n        rows, cols, colors = zip(*cluster)\n        min_row, max_row = min(rows), max(rows)\n        min_col, max_col = min(cols), max(cols)\n        size = len(cluster)\n        unique_colors = sorted(list(set(colors)))\n        cluster_data.append({\n            'cluster_id': i + 1,\n            'bounding_box': (min_row, max_row, min_col, max_col),\n            'size': size,\n            'colors': unique_colors\n        })\n    return cluster_data\n\ndef transform(input_grid):\n    # Initialize output grid with zeros\n    output_grid = np.zeros_like(input_grid)\n\n    # Get clusters and their bounding boxes from the input grid\n    clusters = get_clusters(input_grid)\n    cluster_data = analyze_clusters(input_grid)\n\n\n    # Process each cluster\n    for i, cluster in enumerate(cluster_data):\n\n        # Get bounding box and colors\n        min_row, max_row, min_col, max_col = cluster['bounding_box']\n        colors = cluster['colors']\n\n        # Determine relative position (top-right or bottom-left)\n        # using simple median of the grid, since there are only two objects\n        if min_col > input_grid.shape[1] // 2: # Top-right cluster\n            #horizontal expansion\n            width = (max_col-min_col+1) * 2 if (max_col-min_col+1) %2 != 0 else (max_col-min_col+1)\n            for r in range(3):\n              for c in range(width):\n                color_index = (r* width + c) % len(colors)\n                output_grid[r+2, (output_grid.shape[1]-width) + c] = colors[color_index]\n\n\n        else: # Bottom-left cluster\n            # vertical expansion\n            height = (max_row-min_row+1) * 2 if (max_row-min_row+1) %2 != 0 else (max_row-min_row+1)\n\n            for r in range(height):\n                for c in range(max_col - min_col + 1):\n                  color_index = (r * (max_col-min_col+1) + c) % len(colors)\n                  output_grid[9+r, min_col + c] = colors[color_index]\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 10159,
    "candidates_token_count": 981,
    "total_token_count": 11140,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.781069,
  "response_file": "007-response.json"
}