import numpy as np

def examine_example(input_grid, output_grid, expected_output_grid):
    input_rows, input_cols = input_grid.shape
    output_rows, output_cols = output_grid.shape
    expected_output_rows, expected_output_cols = expected_output_grid.shape

    input_blue_rows = [i for i in range(input_rows) if 1 in input_grid[i, :]]
    input_red_rows = [i for i in range(input_rows) if 2 in input_grid[i, :]]

    output_matches = np.array_equal(output_grid, expected_output_grid)
    
    print(f"  Input Dims: {input_rows}x{input_cols}, Blue Rows: {input_blue_rows}, Red Rows: {input_red_rows}")
    print(f"  Output Dims: {output_rows}x{output_cols}, Matches Expected: {output_matches}")
    print(f"  Expected Dims: {expected_output_rows}x{expected_output_cols}")

def find_row_with_color(grid, colors):
    """
    Finds the first row index containing any of the specified colors.
    Returns -1 if no row contains any of the colors.
    """
    rows, cols = grid.shape
    for i in range(rows):
        for j in range(cols):
            if grid[i, j] in colors:
                return i
    return -1

def transform(input_grid):
    # Find the row containing blue (1) or red (2) objects.
    row_index = find_row_with_color(input_grid, [1, 2])

    # If no such row is found, return a 1x1 empty grid.
    if row_index == -1:
        return np.zeros((1, 1), dtype=int)

    # Get the dimensions of the input grid.
    rows, cols = input_grid.shape

    # Initialize the output grid with dimensions 1 x cols.
    output_grid = np.zeros((1, cols), dtype=int)

    # Copy the selected row from the input grid to the output grid.
    output_grid[0, :] = input_grid[row_index, :]

    return output_grid

task = {
  "train": [
    {
      "input": [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 8, 8, 8, 8, 0, 0, 0, 0, 0],
        [0, 8, 8, 8, 8, 0, 0, 2, 0, 0],
        [0, 8, 8, 8, 8, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      ],
      "output": [
        [0, 8, 8, 8, 8, 0, 0, 2, 0, 0]
      ]
    },
    {
      "input": [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      ],
      "output": [
        [0, 0, 0, 0, 0, 0, 0, 0, 1, 0]
      ]
    },
    {
      "input": [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 4, 4, 4, 0, 0, 0],
        [0, 0, 0, 0, 4, 4, 4, 0, 0, 0],
        [0, 0, 0, 0, 4, 4, 4, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 2, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      ],
      "output": [
        [0, 0, 2, 0, 0, 0, 0, 0, 0, 0]
      ]
    },
    {
      "input": [
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
      ],
      "output": [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      ]
    }
  ],
  "test": [
    {
      "input": [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 7, 7, 7, 7, 0],
        [0, 0, 0, 0, 0, 7, 7, 7, 7, 0],
        [0, 0, 1, 0, 0, 7, 7, 7, 7, 0],
        [0, 0, 0, 0, 0, 7, 7, 7, 7, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      ],
      "output": [
        [0, 0, 1, 0, 0, 7, 7, 7, 7, 0]
      ]
    }
  ]
}

for i, example in enumerate(task["train"]):
    input_grid = np.array(example["input"])
    output_grid = transform(input_grid)
    expected_output_grid = np.array(example["output"])
    print(f"Example {i+1}:")
    examine_example(input_grid, output_grid, expected_output_grid)

for i, example in enumerate(task["test"]):
    input_grid = np.array(example["input"])
    output_grid = transform(input_grid)
    expected_output_grid = np.array(example["output"])
    print(f"Test {i+1}:")
    examine_example(input_grid, output_grid, expected_output_grid)