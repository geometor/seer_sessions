{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Preserve Reds:** All red pixels in the input grid remain red in the output grid.\n2.  **Initial Blue:** White pixels directly adjacent (horizontally or vertically) to a red pixel become blue. These initial blue pixels are \"spreading centers\".\n3. **Limited Propagation:** White pixels that are directly adjacent (horizontally and vertically) to any \"spreading center\" change to blue, becoming spreading centers *only* if they are adjacent to the original red or to pixels that were adjacent to red. The propagation only goes one step away from the initial blue created.\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, r, c):\n    \"\"\"Gets the valid neighbors (up, down, left, right) of a cell.\"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    if r > 0:\n        neighbors.append((r - 1, c))\n    if r < rows - 1:\n        neighbors.append((r + 1, c))\n    if c > 0:\n        neighbors.append((r, c - 1))\n    if c < cols - 1:\n        neighbors.append((r, c + 1))\n    return neighbors\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of input_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = output_grid.shape\n\n    # Create sets to store coordinates\n    red_pixels = set()\n    initial_blue_pixels = set()\n\n    # Identify red pixels and initial blue candidates\n    for r in range(rows):\n        for c in range(cols):\n            if output_grid[r, c] == 2:  # Red pixel\n                red_pixels.add((r, c))\n            elif output_grid[r, c] == 0: # White pixel\n                for nr, nc in get_neighbors(output_grid, r, c):\n                    if output_grid[nr, nc] == 2:\n                        initial_blue_pixels.add((r, c))\n                        break  # Once a white is adjacent to red, it's in the set\n\n    # Set initial blue pixels\n    for r, c in initial_blue_pixels:\n        output_grid[r, c] = 1\n        \n    # Propagate one step\n    new_blue_pixels = set()\n    for r, c in initial_blue_pixels:\n        for nr, nc in get_neighbors(output_grid, r, c):\n            if output_grid[nr, nc] == 0:\n                new_blue_pixels.add((nr,nc))\n\n    for r,c in new_blue_pixels:\n        output_grid[r,c] = 1\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 746,
            "end_index": 1004,
            "uri": "https://github.com/Anuj-cs20/IIITDMK_CSE_Coursework",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2907,
    "candidates_token_count": 635,
    "total_token_count": 3542,
    "cached_content_token_count": 0
  },
  "response_time": 13.845465,
  "response_file": "012-response.json"
}