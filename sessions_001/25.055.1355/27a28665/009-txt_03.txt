import numpy as np

def analyze_results(examples, transform_function):
    results = []
    for i, example in enumerate(examples):
        input_grid = example['input']
        expected_output = example['output']
        predicted_output = transform_function(input_grid)
        
        # Convert to numpy arrays for easier comparison
        expected_output = np.array(expected_output)
        predicted_output = np.array(predicted_output)

        correct = np.array_equal(expected_output, predicted_output)
        
        # Get most frequent color and counts (excluding 0)
        unique, counts = np.unique(input_grid, return_counts=True)
        color_counts = dict(zip(unique, counts))
        if 0 in color_counts:
            del color_counts[0]
        most_frequent_color = max(color_counts, key=color_counts.get) if color_counts else None
        most_frequent_count = color_counts.get(most_frequent_color, 0)

        results.append({
            'example_index': i,
            'input_grid': input_grid,
            'expected_output': expected_output.tolist(),
            'predicted_output': predicted_output.tolist(),
            'correct': correct,
            'most_frequent_color': most_frequent_color,
            'most_frequent_count': most_frequent_count,
            'all_colors': list(color_counts.keys()),
            'expected_value': expected_output.flatten()[0] if expected_output.size > 0 else None,
            'predicted_value': predicted_output.flatten()[0] if predicted_output.size > 0 else None,
        })
    return results

# Assuming 'train' contains the training examples and 'transform' is the function
# Replace this with the actual data loading mechanism if needed
examples = task['train']
analysis = analyze_results(examples, transform)

for result in analysis:
    print(f"Example {result['example_index'] + 1}:")
    print(f"  Input: {result['input_grid']}")
    print(f"  Expected: {result['expected_output']}, Predicted: {result['predicted_output']}, Correct: {result['correct']}")
    print(f"  Most Frequent Color: {result['most_frequent_color']}, Count: {result['most_frequent_count']}")
    print(f"  All Colors: {result['all_colors']}")
    print(f"  Expected Value: {result['expected_value']}, Predicted Value: {result['predicted_value']}")    
    print("-" * 20)