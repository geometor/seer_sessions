import numpy as np

def describe_grid(grid):
    rows, cols = grid.shape
    description = {
        'dimensions': f'{rows}x{cols}',
        'counts': {}
    }
    unique, counts = np.unique(grid, return_counts=True)
    for color, count in zip(unique, counts):
        description['counts'][int(color)] = int(count)  # Convert to native int
    return description

def analyze_example(example):

    input_grid = np.array(example['input'])
    output_grid = np.array(example['output'])
    predicted_grid = transform(input_grid)  # Assuming 'transform' is defined
    correct = np.array_equal(output_grid, predicted_grid)


    analysis = {
        'input': describe_grid(input_grid),
        'output': describe_grid(output_grid),
        'predicted_output': describe_grid(predicted_grid),
        'correct': correct
    }
    return analysis

task_data = {
    "train": [
        {
            "input": [[9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 0, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 9, 0, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9]],
            "output": [[9, 9, 9, 9, 9, 9, 9, 9, 0, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 9, 0, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 9, 0, 9, 9]]
        },
        {
            "input": [[9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 0, 9, 9, 9], [9, 9, 7, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9]],
            "output": [[9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 7, 9, 9, 9, 0, 9, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9]]
        },
        {
            "input": [[9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 3, 9, 9, 9, 4, 9, 9, 9, 7], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 0, 9, 5, 9, 9, 9, 9, 9]],
            "output": [[9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 0, 9, 9, 9, 9, 9, 9, 9], [9, 3, 9, 9, 9, 4, 9, 9, 9, 7], [9, 9, 9, 9, 5, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9]]
        },
        {
            "input": [[0, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 0, 9], [9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 9], [9, 0, 9, 9, 9, 9, 9]],
            "output": [[9, 9, 9, 9, 9, 9, 9], [0, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 0, 9], [9, 0, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 9]]
        }
    ]
}

results = [analyze_example(example) for example in task_data['train']]
for i, result in enumerate(results):
    print(f"Example {i + 1}:")
    print(f"  Input:     {result['input']['dimensions']}  Counts: {result['input']['counts']}")
    print(f"  Output:    {result['output']['dimensions']} Counts: {result['output']['counts']}")
    print(f"  Predicted: {result['predicted_output']['dimensions']} Counts: {result['predicted_output']['counts']}")
    print(f"  Correct:   {result['correct']}")
    print("-" * 20)