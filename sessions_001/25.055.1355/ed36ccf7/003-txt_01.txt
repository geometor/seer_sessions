import numpy as np

def analyze_results(examples, results):
    analysis = []
    for i, (example, result) in enumerate(zip(examples, results)):
        input_grid = np.array(example['input'])
        expected_output_grid = np.array(example['output'])
        actual_output_grid = np.array(result)

        correct = np.array_equal(expected_output_grid, actual_output_grid)
        
        white_pixels_input = np.sum(input_grid == 0)
        maroon_pixels_input = np.sum(input_grid == 9)
        
        white_pixels_expected = np.sum(expected_output_grid == 0)
        maroon_pixels_expected = np.sum(expected_output_grid == 9)
        
        white_pixels_actual = np.sum(actual_output_grid == 0)
        maroon_pixels_actual = np.sum(actual_output_grid == 9)

        analysis.append({
            'example_index': i,
            'correct': correct,
            'input_grid_shape': input_grid.shape,
            'white_pixels_input': int(white_pixels_input),
            'maroon_pixels_input': int(maroon_pixels_input),
            'white_pixels_expected': int(white_pixels_expected),
            'maroon_pixels_expected': int(maroon_pixels_expected),
            'white_pixels_actual': int(white_pixels_actual),
            'maroon_pixels_actual': int(maroon_pixels_actual),
        })

    return analysis

# get these from the environment
examples = task_data['train']
results = transform_results

analysis = analyze_results(examples, results)
print(analysis)
