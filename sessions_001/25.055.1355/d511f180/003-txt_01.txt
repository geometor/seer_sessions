import numpy as np
from typing import Dict

def analyze_grid(grid: np.ndarray) -> Dict:
    """Analyzes a single grid and returns relevant metrics."""
    unique, counts = np.unique(grid, return_counts=True)
    color_counts = dict(zip(unique, counts))
    return {
        "shape": grid.shape,
        "color_counts": color_counts,
    }

def compare_grids(input_grid: np.ndarray, output_grid: np.ndarray, predicted_grid: np.ndarray) -> Dict:
    """Compares input, output, and predicted grids, highlighting discrepancies."""
    input_analysis = analyze_grid(input_grid)
    output_analysis = analyze_grid(output_grid)
    predicted_analysis = analyze_grid(predicted_grid)

    return {
        "input": input_analysis,
        "output": output_analysis,
        "predicted": predicted_analysis,
        "match": np.array_equal(output_grid, predicted_grid)
    }

def report_results(task_examples):
    reports = []
    for example in task_examples:
        input_grid = np.array(example['input'])
        output_grid = np.array(example['output'])
        predicted_grid = transform(input_grid)  # Use the provided transform function

        comparison = compare_grids(input_grid, output_grid, predicted_grid)
        reports.append(comparison)

    for i, report in enumerate(reports):
        print(f"Example {i+1}:")
        print(f"  Input Shape: {report['input']['shape']}")
        print(f"  Output Shape: {report['output']['shape']}")
        print(f"  Predicted Shape: {report['predicted']['shape']}")
        print(f"  Input Colors: {report['input']['color_counts']}")
        print(f"  Output Colors: {report['output']['color_counts']}")
        print(f"  Predicted Colors: {report['predicted']['color_counts']}")
        print(f"  Match: {report['match']}")
        print("-" * 20)