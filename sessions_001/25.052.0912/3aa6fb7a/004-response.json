{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. Identify Azure (color 8) Objects: Find all connected components of azure-colored pixels.\n2. Filter L-Shapes: From the azure objects, select only those that form an \"L\" shape. An \"L\" shape is defined as a set of 3 pixels, where two pixels share an edge, and the third pixel shares an edge with only *one* of the first two.\n3. Identify Corner point for each L shape. Corner point is the pixel that has two neighbors with the same color.\n4. Change Pixel Colors at Corner Points: For *every* identified \"L\" shape, change the color of its corner point to blue (color 1).\n5. Copy everything. The output is the input grid, with the color modification.\n\"\"\"\n\nimport numpy as np\n\ndef is_l_shape(pixels, grid):\n    \"\"\"Checks if a set of pixels forms an L-shape.\"\"\"\n    if len(pixels) != 3:\n        return False, None\n\n    # Convert list of tuples to numpy array for easier manipulation\n    pixels_arr = np.array(pixels)\n\n    # Find the pixel that has two neighbors\n    for i, (x, y) in enumerate(pixels):\n        neighbors = 0\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            if (x + dx, y + dy) in pixels:\n                neighbors += 1\n        if neighbors == 2:\n            return True, (x, y)\n    return False, None\n\ndef find_objects(grid, color):\n    \"\"\"Finds connected components of a specific color.\"\"\"\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n\n    def is_valid(x, y):\n        return 0 <= x < grid.shape[0] and 0 <= y < grid.shape[1]\n\n    def dfs(x, y, current_object):\n        if not is_valid(x, y) or visited[x, y] or grid[x, y] != color:\n            return\n\n        visited[x, y] = True\n        current_object.append((x, y))\n\n        dfs(x + 1, y, current_object)\n        dfs(x - 1, y, current_object)\n        dfs(x, y + 1, current_object)\n        dfs(x, y - 1, current_object)\n\n    for x in range(grid.shape[0]):\n        for y in range(grid.shape[1]):\n            if grid[x, y] == color and not visited[x, y]:\n                current_object = []\n                dfs(x, y, current_object)\n                objects.append(current_object)\n    return objects\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the defined rule.\"\"\"\n\n    output_grid = np.copy(input_grid)\n    azure_objects = find_objects(output_grid, 8)\n\n    for obj in azure_objects:\n        is_l, corner_pixel = is_l_shape(obj, output_grid)\n        if is_l:\n            output_grid[corner_pixel] = 1\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3577,
    "candidates_token_count": 745,
    "total_token_count": 4322,
    "cached_content_token_count": 0
  },
  "timing": {
    "response_time": 6.297937
  },
  "response_file": "004-response.json"
}