{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Check for Identity:** If the input grid has a checkerboard or repeating color, then the output grid is identical to the input grid.\n2.  Check for adjacent pixels in multiple rows: Find if there is a color that fills three adjacent rows. If there is, fill the output with the color.\n3. **Otherwise, find adjacent and fill.** Scan the input grid to identify a color value that appears in at least two positions that are either horizontally, vertically, or diagonally adjacent.\n4. **Create output**: Create an output grid of the same dimensions as the input grid. Fill all cells in the output grid with this identified \"target\" color.\n5. **If not found:** If no such color is found in steps 2 and 3, return the input grid.\n\"\"\"\n\nimport numpy as np\n\ndef is_checkerboard(grid):\n    \"\"\"Checks if the grid has a checkerboard pattern.\"\"\"\n    if grid.size < 4:  # Minimum size for a checkerboard is 2x2\n        return False\n\n    color1 = grid[0, 0]\n    color2 = grid[0, 1] if grid.shape[1] > 1 else None\n\n    if color2 is None:  \n      return False\n\n    for i in range(grid.shape[0]):\n        for j in range(grid.shape[1]):\n            expected_color = color1 if (i + j) % 2 == 0 else color2\n            if grid[i,j] != expected_color and expected_color is not None:\n                return False\n    return True\n\ndef find_color_filling_rows(input_grid, num_rows):\n    \"\"\"\n    Finds a color that fills a specified number of consecutive rows.\n    \"\"\"\n    rows, cols = input_grid.shape\n    for color in np.unique(input_grid):\n        count = 0\n        for r in range(rows):\n            if all(input_grid[r, :] == color):\n                count += 1\n            else:\n                count = 0  # Reset count if the row is not filled with the color\n            if count == num_rows:\n                return color\n    return None\n    \n\ndef find_target_color(input_grid):\n    \"\"\"\n    Finds a color that appears in at least two adjacent positions (horizontally, vertically, or diagonally).\n    \"\"\"\n    # check horizontally or vertically adjacent\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            color = input_grid[i, j]\n            if j + 1 < input_grid.shape[1] and input_grid[i, j+1] == color:\n                return color\n            if i + 1 < input_grid.shape[0] and input_grid[i+1, j] == color:\n                return color\n\n    # check diagonal positions\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            color = input_grid[i, j]\n             # Check top-left to bottom-right diagonal\n            if i + 1 < input_grid.shape[0] and j + 1 < input_grid.shape[1] and input_grid[i + 1, j + 1] == color:\n                return color\n            # Check top-right to bottom-left diagonal\n            if i + 1 < input_grid.shape[0] and j - 1 >= 0 and input_grid[i + 1, j - 1] == color:\n                return color\n    return None\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n\n    # Check for Identity (Checkerboard)\n    if is_checkerboard(input_grid):\n        return output_grid\n\n    # Check for adjacent pixels in multiple rows\n    color_filling_rows = find_color_filling_rows(input_grid, 3)\n    if color_filling_rows is not None:\n        output_grid[:] = color_filling_rows\n        return output_grid\n        \n    # find the target color based on adjacency\n    target_color = find_target_color(input_grid)\n\n    if target_color is not None:\n        # change output pixels to target color\n      output_grid[:] = target_color\n    else:\n       # if no target color is found return input grid\n       output_grid = input_grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3280,
    "candidates_token_count": 1038,
    "total_token_count": 4318,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.318422,
  "response_file": "016-response.json"
}