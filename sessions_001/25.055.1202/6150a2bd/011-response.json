{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Find all contiguous blocks of pixels of the same color. Each of these blocks is an object.\n2.  **Find Single Pixel Objects**: From all objects, check if is there any object that consists of only one pixel.\n3.  **Move Single Pixel Objects**:\n   *   If a single-pixel object exists at the bottom-left corner, move it to the top-right corner.\n   *    If a single-pixel object exists at the bottom-right corner, move it to the bottom-left corner.\n4.  **Preserve Other Objects:** All other objects (non-single-pixel objects) remain unchanged in their original positions and colors.\n\"\"\"\n\nfrom skimage import measure\nimport numpy as np\n\ndef find_objects(grid):\n    # Find all contiguous blocks of pixels of the same color.\n    arr = np.array(grid)\n    unique_colors = np.unique(arr)\n    objects = []\n    for color in unique_colors:\n        color_arr = (arr == color).astype(int)\n        labeled_arr, num_labels = measure.label(color_arr, connectivity=1, return_num=True)\n        for i in range(1, num_labels + 1):\n            objects.append(labeled_arr == i)\n    return objects\n\ndef is_single_pixel_object(obj):\n    # check if the object is single pixel\n    return np.sum(obj) == 1\n\ndef get_object_position(obj):\n    # Get the (row, col) position of a single-pixel object.\n    rows, cols = np.where(obj)\n    return rows[0], cols[0]\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid).tolist()\n    input_grid = np.array(input_grid)\n    rows = input_grid.shape[0]\n    cols = input_grid.shape[1]\n\n    # Find all objects\n    objects = find_objects(input_grid)\n\n    # Find and move single-pixel objects\n    for obj in objects:\n        if is_single_pixel_object(obj):\n            row, col = get_object_position(obj)\n            color = input_grid[row, col]\n            # Move single-pixel objects based on their position.\n            if row == rows - 1 and col == 0:  # Bottom-left corner\n                output_grid[row][col] = input_grid[0][0] # change the original pixel to the color of top-left\n                output_grid[0][cols - 1] = color # Top-right corner\n            elif row == rows - 1 and col == cols - 1:  # Bottom-right corner\n                output_grid[row][col] = input_grid[0][0] # change the original pixel to the color of top-left\n                output_grid[rows - 1][0] = color # Bottom-left corner\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5129,
    "candidates_token_count": 692,
    "total_token_count": 5821,
    "cached_content_token_count": 0
  },
  "response_time": 7.228534,
  "response_file": "011-response.json"
}