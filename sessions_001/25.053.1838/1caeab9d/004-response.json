{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation aligns colored objects (red, blue, yellow) vertically while maintaining their relative horizontal positions. Objects move down by one row, unless this would cause them to overlap with an object of a different color.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"Finds contiguous regions of the same color.\"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n    objects = []\n\n    def dfs(r, c, color, obj_coords):\n        if (r < 0 or r >= rows or c < 0 or c >= cols or\n            visited[r, c] or grid[r, c] != color):\n            return\n        visited[r, c] = True\n        obj_coords.append((r, c))\n        dfs(r + 1, c, color, obj_coords)\n        dfs(r - 1, c, color, obj_coords)\n        dfs(r, c + 1, color, obj_coords)\n        dfs(r, c - 1, color, obj_coords)\n\n    for r in range(rows):\n        for c in range(cols):\n            if not visited[r, c] and grid[r, c] != 0:\n                color = grid[r, c]\n                obj_coords = []\n                dfs(r, c, color, obj_coords)\n                # Find top-left and dimensions\n                min_r = min(coord[0] for coord in obj_coords)\n                min_c = min(coord[1] for coord in obj_coords)\n                max_r = max(coord[0] for coord in obj_coords)\n                max_c = max(coord[1] for coord in obj_coords)\n                objects.append({\n                    'color': color,\n                    'position': (min_r, min_c),\n                    'shape': (max_r - min_r + 1, max_c - min_c + 1),\n                    'pixels': obj_coords\n                })\n    return objects\n\ndef transform(input_grid):\n    # initialize output_grid\n    input_grid = np.array(input_grid)\n    output_grid = np.zeros_like(input_grid)\n\n    # Find objects\n    objects = find_objects(input_grid)\n\n    # Group by color for easier processing\n    color_groups = {}\n    for obj in objects:\n        if obj['color'] not in color_groups:\n            color_groups[obj['color']] = []\n        color_groups[obj['color']].append(obj)\n\n\n    # Apply transformation rules\n    for color, objs in color_groups.items():\n      for obj in objs:\n            r, c = obj['position']\n            height, width = obj['shape']\n            new_r = r + 1\n\n            # Check for overlap\n            can_move = True\n            for pixel_r, pixel_c in obj['pixels']:\n                new_pixel_r = pixel_r + 1\n                if new_pixel_r >= input_grid.shape[0]:\n                    can_move = False #prevent it from going off the board\n                    break\n                if output_grid[new_pixel_r, pixel_c] != 0 and output_grid[new_pixel_r,pixel_c] != color:\n                    can_move = False #check if occupied by a different color.\n                    break\n\n            if can_move:\n                for pixel_r, pixel_c in obj['pixels']:\n                    output_grid[pixel_r + 1, pixel_c] = color\n\n            else: #it can't move, so keep it where it is.\n                for pixel_r, pixel_c in obj['pixels']:\n                    output_grid[pixel_r, pixel_c] = color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4197,
    "candidates_token_count": 889,
    "total_token_count": 5086,
    "cached_content_token_count": 0
  },
  "response_time": 9.057641,
  "response_file": "004-response.json"
}