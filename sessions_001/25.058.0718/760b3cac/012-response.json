{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies distinct azure (8) and yellow (4) regions. The azure\nregions expand in all directions to fill available space while maintaining a\nrectangular shape, constrained by yellow regions. Yellow regions remain unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef find_regions(grid, color):\n    \"\"\"Finds contiguous regions of a specific color.\"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n    regions = []\n\n    def dfs(r, c, current_region):\n        if (r < 0 or r >= rows or c < 0 or c >= cols or\n                visited[r, c] or grid[r, c] != color):\n            return\n        visited[r, c] = True\n        current_region.append((r, c))\n        dfs(r + 1, c, current_region)\n        dfs(r - 1, c, current_region)\n        dfs(r, c + 1, current_region)\n        dfs(r, c - 1, current_region)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == color and not visited[r, c]:\n                current_region = []\n                dfs(r, c, current_region)\n                regions.append(current_region)\n    return regions\n\ndef get_bounding_box(region):\n    \"\"\"Calculates the bounding box of a region.\"\"\"\n    min_r = min(r for r, c in region)\n    max_r = max(r for r, c in region)\n    min_c = min(c for r, c in region)\n    max_c = max(c for r, c in region)\n    return min_r, max_r, min_c, max_c\n\ndef expand_to_rectangle(grid, region):\n    \"\"\"Expands the region to the largest possible rectangle.\"\"\"\n    min_r, max_r, min_c, max_c = get_bounding_box(region)\n    rows, cols = grid.shape\n\n    # Expand up\n    while min_r > 0 and all(grid[min_r - 1, c] in [0, 8] for c in range(min_c, max_c + 1)):\n        min_r -= 1\n\n    # Expand down\n    while max_r < rows - 1 and all(grid[max_r + 1, c] in [0, 8] for c in range(min_c, max_c + 1)):\n        max_r += 1\n\n    # Expand left\n    while min_c > 0 and all(grid[r, min_c - 1] in [0, 8] for r in range(min_r, max_r + 1)):\n        min_c -= 1\n\n    # Expand right\n    while max_c < cols - 1 and all(grid[r, max_c + 1] in [0, 8] for r in range(min_r, max_r + 1)):\n        max_c += 1\n\n    return min_r, max_r, min_c, max_c\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of the input_grid\n    output_grid = np.copy(input_grid)\n\n    # Find azure and yellow regions\n    azure_regions = find_regions(input_grid, 8)\n    yellow_regions = find_regions(input_grid, 4)\n\n    # Expand azure regions\n    for azure_region in azure_regions:\n        min_r, max_r, min_c, max_c = expand_to_rectangle(input_grid, azure_region)\n\n        # Fill the expanded rectangle with azure\n        for r in range(min_r, max_r + 1):\n            for c in range(min_c, max_c + 1):\n                output_grid[r, c] = 8\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2751,
    "candidates_token_count": 931,
    "total_token_count": 3682,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.520412,
  "response_file": "012-response.json"
}