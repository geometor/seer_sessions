import numpy as np

def grid_to_string(grid):
    return np.array2string(grid)

def analyze_results(examples, transform_function):
    results = []
    for idx, (input_grid, output_grid) in enumerate(examples):
        transformed_grid = transform_function(input_grid)
        match = np.array_equal(transformed_grid, output_grid)

        # find bounding box
        non_white_pixels = np.where(input_grid != 0)
        if len(non_white_pixels[0]) == 0:  # if the tuples are empty, it is all white
            min_row, max_row, min_col, max_col = None, None, None, None
        else:
            min_row, max_row = np.min(non_white_pixels[0]), np.max(non_white_pixels[0])
            min_col, max_col = np.min(non_white_pixels[1]), np.max(non_white_pixels[1])

        results.append(
            {
                "example_index": idx + 1,
                "input_grid": grid_to_string(input_grid),
                "output_grid": grid_to_string(output_grid),
                "transformed_grid": grid_to_string(transformed_grid),
                "match": match,
                "bounding_box": (min_row, max_row, min_col, max_col)
            }
        )
    return results

# Example usage (replace with actual examples):
examples = [
    (np.array([[0,0,0,0,0],[0,2,2,2,0],[0,2,3,2,0],[0,2,2,2,0],[0,0,0,0,0]]), np.array([[0,0,0,0,0],[0,2,2,2,0],[0,2,2,2,0],[0,2,2,2,0],[0,0,0,0,0]])),
    (np.array([[0,0,0,0,0,0],[0,2,2,2,2,0],[0,2,3,3,2,0],[0,2,3,3,2,0],[0,2,2,2,2,0],[0,0,0,0,0,0]]), np.array([[0,0,0,0,0,0],[0,2,2,2,2,0],[0,2,2,2,2,0],[0,2,2,2,2,0],[0,2,2,2,2,0],[0,0,0,0,0,0]])),
    (np.array([[0,0,0,0,0,0,0],[0,2,2,2,2,2,0],[0,2,2,3,3,2,0],[0,2,3,3,2,2,0],[0,2,3,2,2,2,0],[0,2,2,2,2,0,0],[0,0,0,0,0,0,0]]), np.array([[0,0,0,0,0,0,0],[0,2,2,2,2,2,0],[0,2,2,3,3,2,0],[0,2,3,3,2,2,0],[0,2,3,2,2,2,0],[0,2,2,2,2,0,0],[0,0,0,0,0,0,0]])),
    (np.array([[0,0,0,0,0,0,0,0],[0,0,2,2,2,2,2,0],[0,2,2,3,3,3,2,0],[0,2,3,3,2,3,2,0],[0,2,3,2,2,2,2,0],[0,2,2,2,2,2,0,0],[0,0,0,0,0,0,0,0]]), np.array([[0,0,0,0,0,0,0,0],[0,0,2,2,2,2,2,0],[0,2,2,3,3,3,2,0],[0,2,3,3,2,3,2,0],[0,2,3,2,2,2,2,0],[0,2,2,2,2,2,0,0],[0,0,0,0,0,0,0,0]])),
    (np.array([[0,0,0,0,0,0,0,0,0],[0,0,0,2,2,2,2,0,0],[0,0,2,2,3,3,2,2,0],[0,0,2,3,3,2,2,0,0],[0,0,2,3,2,2,2,0,0],[0,0,2,2,2,2,0,0,0],[0,0,0,0,0,0,0,0,0]]), np.array([[0,0,0,0,0,0,0,0,0],[0,0,0,2,2,2,2,0,0],[0,0,2,2,3,3,2,2,0],[0,0,2,3,3,2,2,0,0],[0,0,2,3,2,2,2,0,0],[0,0,2,2,2,2,0,0,0],[0,0,0,0,0,0,0,0,0]])
]

from previous_code import transform

analysis_results = analyze_results(examples, transform)
for result in analysis_results:
    print(result)