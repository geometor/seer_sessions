{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms single pixels in the input grid into centered horizontal and vertical lines of the same color in the output grid.\nLines extend to include adjacent diagonal pixels of the same color.\n\"\"\"\n\nimport numpy as np\n\ndef get_non_black_pixels(grid):\n    # Find coordinates and colors of all non-black pixels\n    coords = np.argwhere(grid != 0)\n    colors = [grid[x, y] for x, y in coords]\n    return list(zip(coords, colors))\n\ndef extend_line(grid, start_x, start_y, color):\n    # Extend line horizontally, vertically, and including same-color diagonals\n    height, width = grid.shape\n\n    # Horizontal extension\n    for y in range(width):\n      if grid[start_x,y] == 0 or grid[start_x,y] == color:\n        grid[start_x, y] = color\n\n    # Vertical extension\n    for x in range(height):\n      if grid[x, start_y] == 0 or grid[x, start_y] == color:\n        grid[x, start_y] = color\n\n    # check diagonals\n    for x_offset, y_offset in [(-1,-1),(-1,1),(1,-1),(1,1)]:\n      x,y = start_x + x_offset, start_y + y_offset\n      while 0 <= x < height and 0 <= y < width:\n        if grid[x,y] == color:\n            grid[x,y] = color # set\n        else:\n            break # stop\n        x,y = x + x_offset, y+y_offset\n\n\ndef transform(input_grid):\n    # Initialize output grid with the same dimensions and all black pixels\n    output_grid = np.zeros_like(input_grid)\n\n    # Get non-black pixels and their colors\n    pixels = get_non_black_pixels(input_grid)\n\n\n    # Create lines for each non-black pixel\n    for (x, y), color in pixels:\n        extend_line(output_grid, x, y, color)\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5978,
    "candidates_token_count": 496,
    "total_token_count": 6474,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.124598,
  "response_file": "002-response.json"
}