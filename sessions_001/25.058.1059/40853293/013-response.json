{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Yellow Pixels:** Locate all pixels with a value of 4 (yellow).\n\n2.  **Vertical Expansion (Yellow):** For each yellow pixel, extend its color (4) downwards in its column. Stop when either the bottom edge of the grid is reached, or a pixel with a value other than 0 (background) or 4 (yellow) is encountered.\n\n3.  **Horizontal Expansion and Fill (Other Colors):** For each row, perform the following:\n\n    *   Check for the presence of both yellow pixels (4) and at least one other non-background pixel (not 0) with a different color.\n    *   If both conditions are met, find the leftmost and rightmost non-background pixels in that row.\n    *   Fill all background pixels (0) between the leftmost and rightmost non-background pixels with the color of the non-yellow, non-background pixel found in that row. If there are more than one non-yellow colors on a row, they act as 'stoppers' and independently cause filling from their side.\n\"\"\"\n\nimport numpy as np\n\ndef get_yellow_pixels(grid):\n    \"\"\"Finds the coordinates of all yellow (4) pixels.\"\"\"\n    yellow_pixels = []\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] == 4:\n                yellow_pixels.append((r, c))\n    return yellow_pixels\n\ndef expand_vertically(grid, start_row, col):\n    \"\"\"Expands yellow (4) pixels downwards until another object or edge.\"\"\"\n    rows = grid.shape[0]\n    current_row = start_row\n\n    while current_row < rows:\n        if grid[current_row,col] != 0 and grid[current_row,col] !=4:\n            break\n        grid[current_row, col] = 4\n        current_row += 1\n\ndef expand_horizontally_and_fill(grid):\n    \"\"\"Expands colored pixels horizontally in rows occupied by expanded yellow.\"\"\"\n    rows = grid.shape[0]\n    cols = grid.shape[1]\n\n    for r in range(rows):\n        # Find non-background pixels\n        non_background_pixels = []\n        for c in range(cols):\n            if grid[r, c] != 0:\n                non_background_pixels.append((r, c))\n\n        # Check if both yellow and other colors exist in the row\n        has_yellow = any(grid[r, c] == 4 for _, c in non_background_pixels)\n        other_colors = any(grid[r, c] != 4 for _, c in non_background_pixels)\n\n        if has_yellow and other_colors:\n            # Find leftmost and rightmost non-background pixel indices\n            non_yellow_pixels = [(row,col) for (row,col) in non_background_pixels if grid[row,col] != 4]\n\n            for (row,col) in non_yellow_pixels:\n                fill_color = grid[row,col]\n\n                # fill to the left\n                current_col = col - 1\n                while current_col >= 0 and grid[r,current_col] == 0:\n                    grid[r,current_col] = fill_color\n                    current_col -= 1\n                # fill to the right\n                current_col = col + 1\n                while current_col < cols and grid[r,current_col] == 0:\n                    grid[r,current_col] = fill_color\n                    current_col += 1\n\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n\n    # find yellow pixel coordinates\n    yellow_pixels = get_yellow_pixels(output_grid)\n\n    # expand the yellow pixels vertically\n    for r, c in yellow_pixels:\n        expand_vertically(output_grid, r, c)\n\n    # expand other colored pixels horizontally and fill\n    expand_horizontally_and_fill(output_grid)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4339,
    "candidates_token_count": 946,
    "total_token_count": 5285,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.201219,
  "response_file": "013-response.json"
}