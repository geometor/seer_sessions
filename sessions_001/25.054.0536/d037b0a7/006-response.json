{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Seed Colors:** Examine the first row (the seed row) of the input grid. Identify *all* distinct non-zero colors present in this row. These are the \"seed colors.\"\n\n2.  **Iterate through Seed Colors:** For *each* seed color found in the seed row:\n\n    a. **Identify Seed Columns:** Determine the column indices in the seed row where the current seed color appears.\n\n    b. **Vertical Downward Expansion:** For *each* column index identified in the previous step:\n\n        i. Start from the cell immediately below the seed row (row index 1).\n\n        ii. Proceed downwards, cell by cell, in the current column.\n\n        iii. If the current cell has a value of 0, replace it with the current seed color.\n\n        iv. If the current cell has a non-zero value, stop the expansion for the current column and current seed color.\n\"\"\"\n\nimport numpy as np\n\ndef get_seed_colors_and_columns(grid):\n    \"\"\"\n    Identifies all seed colors and their corresponding column indices in the first row.\n    \"\"\"\n    first_row = grid[0, :]\n    seed_colors = np.unique(first_row[first_row != 0])  # Get unique non-zero colors\n    seed_data = {}\n\n    for color in seed_colors:\n        seed_data[color] = np.where(first_row == color)[0]  # Store column indices for each color\n\n    return seed_data\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = input_grid.copy()\n    rows, cols = output_grid.shape\n\n    # Identify all seed colors and their columns\n    seed_data = get_seed_colors_and_columns(output_grid)\n    #print(f\"Seed data: {seed_data}\")\n\n    # Iterate through seed colors and perform downward expansion\n    for seed_color, seed_columns in seed_data.items():\n        for col in seed_columns:\n            for row in range(1, rows):  # Start from the second row\n                if output_grid[row, col] == 0:\n                    output_grid[row, col] = seed_color\n                else:\n                    break  # Stop at non-zero cell\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3171,
    "candidates_token_count": 527,
    "total_token_count": 3698,
    "cached_content_token_count": 0
  },
  "response_time": 5.141764,
  "response_file": "006-response.json"
}