from pathlib import Path
import json
import numpy as np

def get_grid_dims(grid):
    return (len(grid), len(grid[0]))

def get_metrics(task_file):
  with open(task_file, 'r') as f:
    task = json.load(f)

  results = []
  for i, example in enumerate(task['train']):
      input_grid = example['input']
      output_grid = example['output']
      input_dims = get_grid_dims(input_grid)
      output_dims = get_grid_dims(output_grid)
      results.append({
          'example': i,
          'input_dims': input_dims,
          'output_dims': output_dims
      })
  print(json.dumps(results, indent=2))

task_file = "985a2652.json"
get_metrics(Path(task_file))

def transform(input_grid):
    """
    Transforms the input grid according to the expansion rule.
    """
    input_grid = np.array(input_grid)  # Convert to NumPy array for easier manipulation
    rows, cols = input_grid.shape
    output_grid = np.zeros((rows * 3, cols * 3), dtype=int)  # Initialize output grid

    # Iterate through each cell of the input grid
    for r in range(rows):
        for c in range(cols):
            pixel_value = input_grid[r, c]
            
            # Calculate top-left coordinates of the 3x3 block in output grid
            output_row_start = r * 3
            output_col_start = c * 3

            # Expand non-zero pixels to 3x3 blocks
            if pixel_value != 0:
                output_grid[output_row_start:output_row_start+3, output_col_start:output_col_start+3] = pixel_value
            # Zero expansion to 3x3 is done by default because output grid is initialized with zeros.

    return output_grid.tolist() # convert back

def check_transform_on_task(task_file):
    with open(task_file, 'r') as f:
        task = json.load(f)

    results = []
    for i, example in enumerate(task['train']):
      input_grid = example['input']
      output_grid = example['output']
      transformed_grid = transform(input_grid)
      results.append({
        'example_index': i,
        'success': transformed_grid == output_grid,
        })
    print(json.dumps(results, indent=2))

check_transform_on_task(Path(task_file))
