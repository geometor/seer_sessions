import numpy as np

def describe_grid(grid):
    """Provides a concise description of a grid."""
    return {
        'shape': grid.shape,
        'unique_colors': np.unique(grid).tolist(),
        'color_counts': {color: int(np.sum(grid == color)) for color in np.unique(grid)}
    }

def compare_grids(grid1, grid2):
    """Compares two grids and returns differences."""
    if grid1.shape != grid2.shape:
        return "Shapes are different"

    diff = grid1 != grid2
    num_diffs = np.sum(diff)
    diff_indices = np.where(diff)
    diff_examples = []
    for i in range(min(5, num_diffs)):  # Limit to 5 examples for brevity
      r, c = diff_indices[0][i], diff_indices[1][i]
      diff_examples.append(f"at ({r},{c}) expected: {grid2[r, c]}, actual: {grid1[r, c]}")

    return {
        'num_differences': int(num_diffs),
        'example_differences': diff_examples
    }
task = {
    "train": [
        {
            "input": [[0, 0, 0], [0, 8, 0], [4, 0, 0]],
            "output": [[4, 0, 4, 0, 4, 0, 0, 0, 0], [0, 4, 0, 0, 0, 0, 0, 0, 0], [4, 0, 4, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],
        },
        {
            "input": [[0, 1, 0, 0], [8, 0, 0, 0], [0, 0, 0, 2]],
            "output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        },
        {
            "input": [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 2, 0, 0], [0, 0, 0, 0, 0], [0, 1, 0, 0, 8]],
            "output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        },
    ],
    "test": [
      {
          "input": [[0,0,1],[0,0,0],[8,0,0]],
          "output": [[0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }
    ],
}

import numpy as np

def transform(input_grid):
    # initialize output_grid as 9x9 filled with 0 (white)
    output_grid = np.zeros((9, 9), dtype=int)

    # iterate through the input grid
    for r in range(input_grid.shape[0]):
        for c in range(input_grid.shape[1]):
            color = input_grid[r, c]

            # skip azure (8) and white(0)
            if color == 8 or color == 0:
                continue

            # calculate the top-left corner coordinates for the 3x3 block
            out_r = r * 3
            out_c = c * 3

            # fill a 3x3 block and make it into a plus.
            for i in range(max(0, out_r -1), min(9, out_r + 2)):
              output_grid[i,out_c] = color
            for i in range(max(0, out_c -1), min(9, out_c + 2)):
              output_grid[out_r,i] = color

            output_grid[out_r, out_c] = color # center

    return output_grid

results = []
for i, example in enumerate(task["train"]):
    input_grid = np.array(example["input"])
    expected_output = np.array(example["output"])
    predicted_output = transform(input_grid)
    comparison = compare_grids(predicted_output, expected_output)
    results.append(
        {
            "example": i + 1,
            "input_description": describe_grid(input_grid),
            "expected_output_description": describe_grid(expected_output),
            "predicted_output_description": describe_grid(predicted_output),
            "comparison": comparison,
        }
    )

for result in results:
    print(f"Example {result['example']}:")
    print(f"  Input: {result['input_description']}")
    print(f"  Expected Output: {result['expected_output_description']}")
    print(f"  Predicted Output: {result['predicted_output_description']}")
    print(f"  Comparison: {result['comparison']}")
    print("-" * 40)