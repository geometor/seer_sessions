{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Source Pixels:** Identify all non-zero pixels in the input grid. These are the \"source\" pixels.\n2.  **Iterate by color, then by pixel:** loop through all of the non-zero colors, for each color loop through the source pixels.\n3.  **Horizontal Extension:** For each color, create a horizontal extension to the left and right.\n    *   extend one cell at a time\n    *   if a color is present at the cell location, check if the color matches the current color.\n        *  If colors match, stop extension\n        *  If colors do not match, continue to next cell\n4.  **Vertical Extension**\n    *  For colors 1 (blue), 2(red), 3 (green), 4 (yellow), and 8 (azure) repeat the horizontal extension vertically.\n        *   Use the same rules as the horizontal extension\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid by extending non-zero pixels diagonally.\"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # 1. Identify Source Pixels and 2. Iterate by Color\n    unique_colors = np.unique(input_grid)\n    for color in unique_colors:\n        if color == 0:\n            continue\n\n        # Iterate through each source pixel of the current color\n        for r in range(rows):\n            for c in range(cols):\n                if input_grid[r, c] == color:\n\n                    # 3. Horizontal Extension\n                    output_grid[r,:] = horizontal_extend(input_grid, r, c, color)\n\n                    # 4. Vertical Extension (only for specified colors)\n                    if color in [1, 2, 3, 4, 8]:\n                      for i in range(rows):\n                        output_grid[i,:] = horizontal_extend(output_grid, i, c, color)\n\n\n    return output_grid\n\n\ndef horizontal_extend(grid, row, col, color):\n  rows, cols = grid.shape\n  new_row = np.copy(grid[row,:])\n\n  # extend right\n  for c in range(cols):\n      if c < col:\n          continue\n      if c == col:\n          continue\n\n      if grid[row,c] == 0:\n        new_row[c] = color\n      elif grid[row,c] == color:\n        break # stop if colors match\n      else:\n          continue # continue to next if colors don't match\n\n  # extend left\n  for c in range(cols):\n      cc = cols - 1 - c\n      if cc > col:\n          continue\n      if cc == col:\n        continue\n      if grid[row,cc] == 0:\n        new_row[cc] = color\n      elif grid[row,cc] == color:\n        break # stop if colors match\n      else:\n          continue # continue to next if colors don't match\n\n  return new_row\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7853,
    "candidates_token_count": 702,
    "total_token_count": 8555,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.339796,
  "response_file": "002-response.json"
}