{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Azure Regions:** Find all connected regions of azure (color 8) pixels.\n\n2.  **Identify Target Pixels:** Find single, non-black, non-azure pixels directly adjacent (up, down, left, or right, but *not* diagonally) to the azure region(s).\n\n3. **Conditional Reposition target pixels:**\n   * If it is above the azure region, move it to the top row (index 1), preserving the original column.\n   * If the target pixel is *to the left* of the azure region, move it to the second-to-last row (index -2) of the grid, preserving the original column.\n    *  If the target pixel is *below* or *to the right* of the azure region, leave it at original location.\n\n4. **Clear original:** Set the original position to black (color 0) *only* if the pixel was moved.\n\"\"\"\n\nimport numpy as np\n\ndef find_azure_regions(grid):\n    # Find all connected regions of azure (8) pixels.\n    azure_pixels = np.where(grid == 8)\n    azure_coords = list(zip(azure_pixels[0], azure_pixels[1]))\n    if not azure_coords:\n        return []\n\n    regions = []\n    visited = set()\n\n    def _explore_region(row, col, current_region):\n      # recursively explore connected azure pixels\n        if (row, col) in visited or (row, col) not in azure_coords:\n            return\n        visited.add((row, col))\n        current_region.append((row, col))\n\n        # Check adjacent pixels (up, down, left, right)\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            new_row, new_col = row + dr, col + dc\n            if 0 <= new_row < grid.shape[0] and 0 <= new_col < grid.shape[1]:\n                _explore_region(new_row, new_col, current_region)\n\n    for row, col in azure_coords:\n        if (row, col) not in visited:\n            current_region = []\n            _explore_region(row, col, current_region)\n            regions.append(current_region)\n    return regions\n\ndef find_target_pixels(grid, azure_regions):\n    # Find single, non-black, non-azure pixels adjacent to azure regions.\n    target_pixels = []\n    for region in azure_regions:\n        for row, col in region:\n            # Check adjacent cells (up, down, left, right)\n            for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                new_row, new_col = row + dr, col + dc\n                if 0 <= new_row < grid.shape[0] and 0 <= new_col < grid.shape[1]:\n                    if grid[new_row, new_col] != 0 and grid[new_row, new_col] != 8:\n                        # Check if it's a single pixel (not part of a larger object)\n                        is_single = True\n                        for dr2, dc2 in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                            check_row, check_col = new_row + dr2, new_col + dc2\n                            if (0 <= check_row < grid.shape[0] and 0 <= check_col < grid.shape[1] and\n                                    (check_row, check_col) != (row, col) and\n                                    grid[check_row, check_col] == grid[new_row, new_col]):\n                                is_single = False\n                                break  # It's connected to another pixel of same color\n                        if is_single and ((new_row, new_col), grid[new_row,new_col]) not in target_pixels:\n                            target_pixels.append( ((new_row, new_col), grid[new_row,new_col]))\n    return target_pixels\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n\n    # find azure regions\n    azure_regions = find_azure_regions(input_grid)\n\n    # find target pixels\n    target_pixels = find_target_pixels(input_grid, azure_regions)\n\n    # reposition target pixels\n    for (row, col), color in target_pixels:\n        is_above = False\n        is_left = False\n        for a_row, a_col in azure_regions[0]: # only check against the first region...\n            if col == a_col and row < a_row:\n                is_above = True\n                break\n            if row == a_row and col < a_col:\n                is_left = True\n                break\n\n        if is_above or is_left:\n            output_grid[row,col] = 0 # clear original only if moved\n\n        if is_above:\n            output_grid[1, col] = color\n        elif is_left:\n            output_grid[-2, col] = color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4213,
    "candidates_token_count": 1227,
    "total_token_count": 5440,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.25873,
  "response_file": "008-response.json"
}