{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid by vertically re-ordering colored horizontal lines (blue, red, green) based on their initial order, while keeping the azure line fixed.\n\"\"\"\n\nimport numpy as np\n\ndef find_horizontal_lines(grid):\n    lines = []\n    rows, cols = grid.shape\n    for r in range(rows):\n        line_start = None\n        for c in range(cols):\n            if grid[r, c] != 0:\n                if line_start is None:\n                    line_start = (r, c)\n            elif line_start is not None:\n                color = grid[line_start[0], line_start[1]]\n                length = c - line_start[1]\n                lines.append({'color': color, 'start': line_start, 'length': length})\n                line_start = None\n        if line_start is not None:  # Handle lines ending at the last column\n            color = grid[line_start[0], line_start[1]]\n            length = cols - line_start[1]\n            lines.append({'color': color, 'start': line_start, 'length': length})\n    return lines\n\ndef transform(input_grid):\n    # Initialize output grid as a copy of the input grid\n    output_grid = np.copy(input_grid)\n\n    # Find all horizontal lines in the input grid\n    lines = find_horizontal_lines(input_grid)\n\n    # Separate azure lines and other colored lines\n    azure_lines = [line for line in lines if line['color'] == 8]\n    other_lines = [line for line in lines if line['color'] != 8 and line['color'] != 0]\n    \n    # Determine the target row indices for non-azure lines\n    rows, _ = input_grid.shape\n    target_rows = []\n\n    \n    other_line_colors_order = [line['color'] for line in sorted(other_lines, key=lambda x: x['start'][0])]\n\n    \n    # get the rows with no non-zero elements\n    available_rows = []\n    for r in range(rows):\n        if np.all(input_grid[r,:] == 0):\n            available_rows.append(r)\n\n    # get available rows for colored lines, avoid rows with all 0 and rows having 8\n    target_rows = []\n    for r in range(rows):\n        if not np.all(input_grid[r,:] == 0) and not np.any(input_grid[r,:] == 8):\n            target_rows.append(r)\n\n    if len(target_rows) < len(other_lines): # there are not enough rows with non-zero and non-8 values, get free rows, excluding those occupied by 8\n      for r in range(rows):\n          if r not in target_rows and not np.any(input_grid[r,:] == 8):\n              target_rows.append(r)\n              if len(target_rows) >= len(other_lines):\n                  break\n    \n\n    # Clear the original positions of the non-azure lines in the output grid\n    for line in other_lines:\n        r, c = line['start']\n        for i in range(line['length']):\n            output_grid[r, c + i] = 0\n\n    # Place the non-azure lines at their new positions\n    \n    sorted_other_lines = sorted(other_lines, key=lambda x: other_line_colors_order.index(x['color']))\n\n    for i, line in enumerate(sorted_other_lines):\n        if i < len(target_rows):\n          r = target_rows[i]\n          c = line['start'][1]  # Keep original column\n          for j in range(line['length']):\n            output_grid[r, c + j] = line['color']\n    \n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2229,
    "candidates_token_count": 908,
    "total_token_count": 3137,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.47825,
  "response_file": "010-response.json"
}