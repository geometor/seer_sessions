{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. **Identify Background Grid:** Find the lines of pixels that divide the input\n   grid into equal size rectangular subgrids. White (0) pixels may form a\n   background. Other background lines will all be of the same color and one\n   pixel wide.\n\n2. **Identify Subgrids:** the background grid creates equally sized rectangular\n   subgrids.\n\n3. **Locate Key Colors:** Within each sub-grid, locate the color of the pixel\n   in the upper-left corner.\n\n4. **Construct Output Grid:** Create a new grid where each cell corresponds to a\n   subgrid in the original input. The dimensions of output are based on number\n   of subgrids in each dimension.\n\n5.  **Populate Output Grid** Populate each cell of the output grid with the\n    \"key color\" of the corresponding subgrid in the input grid (found in step\n    3).\n\"\"\"\n\nimport numpy as np\n\ndef find_grid_lines(grid):\n    rows, cols = grid.shape\n    horizontal_lines = []\n    vertical_lines = []\n\n    # Find horizontal lines\n    for r in range(rows):\n        first_pixel = grid[r, 0]\n        all_same = True\n        for c in range(1, cols):\n            if grid[r, c] != first_pixel:\n                all_same = False\n                break\n        if all_same:\n            horizontal_lines.append((r, first_pixel))\n\n    # Find vertical lines\n    for c in range(cols):\n        first_pixel = grid[0, c]\n        all_same = True\n        for r in range(1, rows):\n            if grid[r, c] != first_pixel:\n                all_same = False\n                break\n        if all_same:\n            vertical_lines.append((c, first_pixel))\n\n    return horizontal_lines, vertical_lines\n\ndef find_subgrids(grid, horizontal_lines, vertical_lines):\n    rows, cols = grid.shape\n    subgrids = []\n\n    # Filter out lines that aren't part of the main dividing structure.  Look for repeating pattern.\n    horizontal_colors = [color for _, color in horizontal_lines]\n    vertical_colors = [color for _, color in vertical_lines]\n\n    # Find most common color, and assume this is the background grid color\n    horizontal_counts = np.bincount(horizontal_colors)\n    vertical_counts = np.bincount(vertical_colors)\n\n    h_grid_color = np.argmax(horizontal_counts)\n    v_grid_color = np.argmax(vertical_counts)\n\n    h_lines = [row for row, color in horizontal_lines if color == h_grid_color]\n    v_lines = [col for col, color in vertical_lines if color == v_grid_color]\n\n    # remove duplicates, which are not part of a grid structure.\n    h_lines = sorted(list(set(h_lines)))\n    v_lines = sorted(list(set(v_lines)))\n    \n    # calculate distances, look for repeating pattern of grid\n    h_diffs = np.diff(h_lines)\n    v_diffs = np.diff(v_lines)\n    \n    # Use most frequent distance.\n    if (len(h_diffs) > 0):\n       h_grid_size = np.bincount(h_diffs).argmax()\n    else:\n       h_grid_size = rows # default if no horizontal lines\n       h_lines = [0,rows] # add top and bottom\n\n    if (len(v_diffs) > 0):\n       v_grid_size = np.bincount(v_diffs).argmax()\n    else:\n        v_grid_size = cols\n        v_lines = [0, cols]\n\n    # ensure includes first and last row/col\n    if 0 not in h_lines:\n        h_lines.insert(0,0)\n    if rows not in h_lines:\n        h_lines.append(rows)\n    if 0 not in v_lines:\n        v_lines.insert(0,0)\n    if cols not in v_lines:\n        v_lines.append(cols)\n\n    # define subgrids based on final h_lines, v_lines\n    for i in range(len(h_lines) - 1):\n        for j in range(len(v_lines) - 1):\n            subgrids.append(((h_lines[i], v_lines[j]), (h_lines[i+1], v_lines[j+1]))) # (top-left), (bottom-right)\n\n    return subgrids, h_grid_size, v_grid_size\n\n\ndef transform(input_grid):\n    grid = np.array(input_grid)\n    rows, cols = grid.shape\n\n    # Find horizontal and vertical lines\n    horizontal_lines, vertical_lines = find_grid_lines(grid)\n\n    # Determine subgrids\n    subgrids, h_grid_size, v_grid_size = find_subgrids(grid, horizontal_lines, vertical_lines)\n   \n    # calculate output grid dimensions\n    output_rows = (rows-1) // h_grid_size\n    output_cols = (cols-1) // v_grid_size\n\n    # handle case where no subgrids detected\n    if output_rows == 0: output_rows = 1\n    if output_cols == 0: output_cols = 1\n    if h_grid_size == 0: h_grid_size = rows\n    if v_grid_size == 0: v_grid_size = cols\n\n    # Initialize output grid\n    output_grid = np.zeros((output_rows, output_cols), dtype=int)\n\n    # Populate output grid\n    for i in range(len(subgrids)):\n       \n        (r_start, c_start), (r_end, c_end) = subgrids[i]\n        \n        # identify key color\n        key_color = grid[r_start, c_start]\n\n        # determine output grid location based on subgrid\n        out_row = i // output_cols\n        out_col = i % output_cols\n        \n        output_grid[out_row, out_col] = key_color\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5305,
    "candidates_token_count": 1465,
    "total_token_count": 6770,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 14.924797,
  "response_file": "002-response.json"
}