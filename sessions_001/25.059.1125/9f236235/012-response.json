{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms a large grid containing colored rectangular blocks into a smaller grid,\nrepresenting the presence and relative positions of the colored blocks. The\ntransformation identifies red (2), blue (1), and green (3) blocks, selects a\nsingle pixel from each, and places them in the output grid, maintaining their\nrelative positions.\n\"\"\"\n\nimport numpy as np\n\ndef find_colored_blocks(grid):\n    \"\"\"Finds distinct colored blocks (2, 1, 3) in the grid.\"\"\"\n    blocks = {}\n    visited = set()\n    block_id = 0\n\n    def is_valid(r, c):\n        return 0 <= r < grid.shape[0] and 0 <= c < grid.shape[1]\n\n    def dfs(r, c, color, block):\n        if (r, c) in visited or not is_valid(r, c) or grid[r, c] != color:\n            return\n        visited.add((r, c))\n        block.append((r, c))\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            dfs(r + dr, c + dc, color, block)\n\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            color = grid[r, c]\n            if color in [2, 1, 3] and (r, c) not in visited:\n                block = []\n                dfs(r, c, color, block)\n                blocks[block_id] = {\"color\": color, \"pixels\": block}\n                block_id += 1\n    return blocks\n\ndef calculate_centroids(blocks):\n    \"\"\"Calculates the centroid for each block.\"\"\"\n    centroids = {}\n    for block_id, block_data in blocks.items():\n        pixels = block_data[\"pixels\"]\n        centroid_row = sum(r for r, _ in pixels) / len(pixels)\n        centroid_col = sum(c for _, c in pixels) / len(pixels)\n        centroids[block_id] = (centroid_row, centroid_col)\n    return centroids\n\ndef determine_output_grid_size(num_blocks):\n    \"\"\"Determine the output grid size\"\"\"\n    rows = int(np.ceil(np.sqrt(num_blocks)))\n    cols = int(np.ceil(num_blocks / rows))\n\n    return rows, cols\n\ndef transform(input_grid):\n    # Convert input_grid to a NumPy array\n    input_grid = np.array(input_grid)\n\n    # Find colored blocks (2, 1, 3)\n    colored_blocks = find_colored_blocks(input_grid)\n\n    # Calculate centroids\n    centroids = calculate_centroids(colored_blocks)\n    \n    # Determine Output Grid Size\n    num_blocks = len(colored_blocks)\n    rows, cols = determine_output_grid_size(num_blocks)\n    \n    # Initialize output_grid \n    output_grid = np.zeros((rows, cols), dtype=int)\n    \n\n    # Normalize centroids to output grid dimensions\n    normalized_centroids = {}\n    for block_id, (centroid_row, centroid_col) in centroids.items():\n        #Simple scaling, potential for improvement with relative comparisons\n        norm_row = int((centroid_row / input_grid.shape[0]) * rows)\n        norm_col = int((centroid_col / input_grid.shape[1]) * cols)\n        normalized_centroids[block_id] = (norm_row, norm_col)\n\n    # Place one representative pixel from each block into the output grid\n    for block_id, block_data in colored_blocks.items():\n        color = block_data[\"color\"]\n        row, col = normalized_centroids[block_id]\n        \n        #Handle potential collisions, ensure we stay in bounds\n        while output_grid[row,col] != 0:\n          col += 1\n          if col >= output_grid.shape[1]:\n            col = 0\n            row = (row + 1) % output_grid.shape[0]\n        \n        output_grid[row, col] = color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6269,
    "candidates_token_count": 976,
    "total_token_count": 7245,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.229668,
  "response_file": "012-response.json"
}