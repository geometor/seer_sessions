import numpy as np
from typing import List, Tuple, Dict, Any

def compare_grids(grid1: np.ndarray, grid2: np.ndarray) -> Tuple[bool, List[Tuple[int, int, Any, Any]]]:
    """Compares two grids and returns a boolean indicating if they are identical,
    and a list of differences if they are not.
    """
    if grid1.shape != grid2.shape:
        return False, []

    differences = []
    it = np.nditer(grid1, flags=['multi_index'], op_flags=['readonly'])
    while not it.finished:
        i, j = it.multi_index
        if grid1[i, j] != grid2[i, j]:
            differences.append((i, j, grid1[i, j], grid2[i, j]))
        it.iternext()

    return len(differences) == 0, differences

def show_task(task:Dict, example:int, train:bool=True, show_diff:bool=True)->None:
    if train:
        in_grid = np.array(task['train'][example]['input'])
        exp_grid = np.array(task['train'][example]['output'])
    else:
        in_grid = np.array(task['test'][example]['input'])
        exp_grid = np.array(task['test'][example]['output'])        
    out_grid = transform(in_grid)
    grids_identical, differences = compare_grids(out_grid, exp_grid)
    print(f"{'Train' if train else 'Test'} Example: {example}")
    print(f"Input:\n{in_grid}")
    print(f"Expected Output:\n{exp_grid}")
    print(f"Actual Output:\n{out_grid}")    
    if show_diff:
        print(f"Grids Identical: {grids_identical}")
        print(f"Differences: {differences}")

task = {
    "train": [
        {
            "input": [[0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0], [0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0], [0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 0, 0, 0, 0, 5, 5, 5, 5], [5, 5, 5, 0, 0, 0, 0, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0]],
            "output": [[1, 1, 1, 5, 5, 5, 5, 5, 0, 0, 0], [1, 1, 1, 5, 5, 5, 5, 5, 0, 0, 0], [1, 1, 1, 5, 5, 5, 5, 5, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 2, 2, 2, 2, 5, 5, 5, 5], [5, 5, 5, 2, 2, 2, 2, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3], [5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3], [5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3]],
        },
        {
            "input": [[0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0], [0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0], [0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 0, 0, 0, 0, 5, 5, 5, 5], [5, 5, 5, 0, 0, 0, 0, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0]],
            "output": [[1, 1, 1, 5, 5, 5, 5, 5, 0, 0, 0], [1, 1, 1, 5, 5, 5, 5, 5, 0, 0, 0], [1, 1, 1, 5, 5, 5, 5, 5, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 2, 2, 2, 2, 5, 5, 5, 5], [5, 5, 5, 2, 2, 2, 2, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3], [5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3], [5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3]],
        },
        {
            "input": [[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 0, 0, 5, 0, 0, 0, 5, 0, 0, 5], [5, 0, 0, 5, 0, 0, 0, 5, 0, 0, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 0, 0, 0, 5, 5, 5, 5], [5, 5, 5, 5, 0, 0, 0, 5, 5, 5, 5], [5, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0], [5, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]],
            "output": [[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 1, 1, 5, 0, 0, 0, 5, 0, 0, 5], [5, 1, 1, 5, 0, 0, 0, 5, 0, 0, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 2, 2, 2, 5, 5, 5, 5], [5, 5, 5, 5, 2, 2, 2, 5, 5, 5, 5], [5, 0, 0, 5, 5, 5, 5, 5, 3, 3, 3], [5, 0, 0, 5, 5, 5, 5, 5, 3, 3, 3], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]],
        },
    ],
    "test": [
        {
            "input": [[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 0, 0, 5, 0, 0, 0, 5, 0, 0, 5], [5, 0, 0, 5, 0, 0, 0, 5, 0, 0, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 0, 0, 0, 5, 5, 5, 5], [5, 5, 5, 5, 0, 0, 0, 5, 5, 5, 5], [5, 0, 0, 5, 5, 5, 5, 5, 0, 0, 5], [5, 0, 0, 5, 5, 5, 5, 5, 0, 0, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]],
            "output": [[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 1, 1, 5, 0, 0, 0, 5, 0, 0, 5], [5, 1, 1, 5, 0, 0, 0, 5, 0, 0, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 2, 2, 2, 5, 5, 5, 5], [5, 5, 5, 5, 2, 2, 2, 5, 5, 5, 5], [5, 0, 0, 5, 5, 5, 5, 5, 3, 3, 5], [5, 0, 0, 5, 5, 5, 5, 5, 3, 3, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]],
        }
    ],
}
show_task(task, 0)
show_task(task, 1)
show_task(task, 2)
show_task(task, 0, False)