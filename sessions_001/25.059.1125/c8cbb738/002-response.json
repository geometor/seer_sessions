{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms a large input grid into a smaller output grid by:\n1. Identifying the most frequent (dominant) color in the input.\n2. Identifying all other colors (target colors).\n3. Extracting an outer layer of non-dominant color pixels.\n4. Forming the output grid using the extracted and filtered pixels, where background color is replaced.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef get_dominant_color(grid):\n    \"\"\"Finds the most frequent color in the grid.\"\"\"\n    flat_grid = grid.flatten()\n    color_counts = Counter(flat_grid)\n    dominant_color = color_counts.most_common(1)[0][0]\n    return dominant_color\n\ndef get_target_colors(grid, dominant_color):\n    \"\"\"Gets a set of colors in the grid, excluding the dominant color.\"\"\"\n    unique_colors = set(grid.flatten())\n    unique_colors.remove(dominant_color)\n    return unique_colors\n    \ndef extract_outer_layer(grid, target_colors):\n    \"\"\"Extracts positions of pixels with target colors within the grid.\"\"\"\n    target_positions = []\n    for row_index, row in enumerate(grid):\n        for col_index, pixel in enumerate(row):\n            if pixel in target_colors:\n               target_positions.append((row_index, col_index, pixel))\n    return target_positions\n\ndef reduce_to_MxM(positions):\n  \"\"\"Reduces the list of positions into M x M by sorting by row and taking top M\"\"\"\n  # Sort by row\n  positions.sort()\n  # Calculate min and max values\n  min_row, min_col, _ = positions[0]\n  max_row, max_col, _ = positions[-1]\n  height = max_row-min_row+1\n  width = max_col-min_col+1\n  size = max(height,width)\n\n  rows = []\n  row_values = []\n  for r,c,p in positions:\n    if r not in row_values:\n      rows.append([])\n      row_values.append(r)\n    i = row_values.index(r)\n    rows[i].append([r,c,p])\n  \n  for i in range(len(rows)):\n    while len(rows[i]) > size:\n      # find center\n      dists = []\n      for j in range(len(rows[i])):\n        r, c, p = rows[i][j]\n        dist = abs((min_col + max_col) / 2 - c)\n        dists.append((dist, j))\n      # remove the furthest away\n      dists.sort(reverse=True)\n      rows[i].pop(dists[0][1])\n\n  # now flatten\n  final_positions = []\n  for i in range(len(rows)):\n    for j in range(len(rows[i])):\n      final_positions.append(rows[i][j])\n\n  if len(final_positions) > size*size:\n     final_positions = final_positions[:size*size]\n  \n  return size, final_positions\n\ndef create_output_grid(size, positions, dominant_color):\n    \"\"\"Creates the output grid based on extracted positions.\"\"\"\n    # initialize the output with all dominant\n    output_grid = np.full((size, size), dominant_color)\n    \n    # find origin\n    min_row = size -1\n    min_col = size - 1\n\n    for r,c,p in positions:\n      if r < min_row:\n        min_row = r\n      if c < min_col:\n        min_col = c\n    # apply the values\n    for r, c, p in positions:\n        output_grid[r-min_row, c-min_col] = p\n\n    return output_grid\n    \ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the defined rules.\"\"\"\n    # Convert input to numpy array\n    input_grid = np.array(input_grid)\n\n    # 1. Identify Dominant Color\n    dominant_color = get_dominant_color(input_grid)\n\n    # 2. Identify Target Colors\n    target_colors = get_target_colors(input_grid, dominant_color)\n\n    # 3. Extract colored pixel layer positions\n    target_positions = extract_outer_layer(input_grid, target_colors)\n\n    # 4. Reduce to MxM and get new size\n    size, reduced_positions = reduce_to_MxM(target_positions)\n\n    # 5. Form Output Grid\n    output_grid = create_output_grid(size, reduced_positions, dominant_color)\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4248,
    "candidates_token_count": 1103,
    "total_token_count": 5351,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 12.343439,
  "response_file": "002-response.json"
}