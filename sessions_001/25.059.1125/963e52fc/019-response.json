{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Target Rows:** Examine each row in the input grid. A row is a \"target row\" if it contains the colors blue (1) and red (2) in any sequence.\n2.  **Double Target Rows:** If a row is a target row, create a new row by concatenating the original row with itself. This doubles the row horizontally.\n3.  **Pad Non-Target Rows:** If a row is *not* a target row, create a new row of zeros with a length equal to twice the width of the original input grid.\n4.  **Assemble Output:** Create the output grid by stacking the newly created rows (either doubled target rows or zero-padded rows). The height of the output grid remains the same as the input grid, and the width is double.\n\"\"\"\n\nimport numpy as np\n\ndef _is_target_row(row):\n    \"\"\"Checks if a row contains both blue (1) and red (2).\"\"\"\n    return (1 in row) and (2 in row)\n\ndef transform(input_grid):\n    # Initialize output_grid with doubled width, same height, filled with 0s.\n    output_grid = np.zeros((input_grid.shape[0], input_grid.shape[1] * 2), dtype=int)\n\n    # Iterate through each row of the input grid.\n    for i, row in enumerate(input_grid):\n        # Check if the row is a target row (contains 1 and 2).\n        if _is_target_row(row):\n            # Double the row horizontally.\n            output_grid[i] = np.concatenate((row, row))\n        else:\n            # Pad with zeros to the correct width.\n            output_grid[i] = np.concatenate((row, np.zeros_like(row)))  # Use zeros_like for correct length\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3800,
    "candidates_token_count": 423,
    "total_token_count": 4223,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 4.386268,
  "response_file": "019-response.json"
}