{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation rule is to double the width of the input grid. The central colored rows (alternating red and azure) are replicated horizontally, while the white rows are extended to the new width.\n\"\"\"\n\nimport numpy as np\n\ndef get_colored_rows(grid):\n    # helper to find rows with non-zero values\n    colored_rows = []\n    for i, row in enumerate(grid):\n        if np.any(row != 0):\n            colored_rows.append(i)\n    return colored_rows\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by doubling its width. Colored rows are replicated, and white rows are extended.\n    \"\"\"\n    input_grid = np.array(input_grid)\n    rows, cols = input_grid.shape\n    output_grid = np.zeros((rows, cols * 2), dtype=int)\n\n    # Find the rows with colors (non-zero values)\n    colored_rows_indices = get_colored_rows(input_grid)\n\n    # Iterate through each row of input and perform transformations\n    for i in range(rows):\n      if i in colored_rows_indices:\n        # replicate colored row by concatenating it with itself\n        output_grid[i,:] = np.concatenate((input_grid[i,:], input_grid[i,:]))\n      else:\n        # extend white row\n        output_grid[i,:] = np.concatenate((input_grid[i,:], input_grid[i,:]))\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2327,
    "candidates_token_count": 356,
    "total_token_count": 2683,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 4.947778,
  "response_file": "004-response.json"
}