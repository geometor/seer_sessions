import numpy as np

def find_object(grid, color):
    positions = []
    for i in range(grid.shape[0]):
        for j in range(grid.shape[1]):
            if grid[i, j] == color:
                positions.append((i, j))
    return positions

def transform(input_grid):
    output_grid = np.zeros_like(input_grid)

    # gray diagonal
    for i in range(input_grid.shape[0]):
        output_grid[i,i] = input_grid[i,i] if input_grid[i, i] == 5 else 0

    # azure shift
    azure_positions = find_object(input_grid, 8)
    for pos in azure_positions:
        output_grid[pos[0], pos[1] + 2] = 8
    
    #red shift
    red_positions = find_object(input_grid, 2)
    for pos in red_positions:
      output_grid[1, pos[1]+2] = 2

    # blue(1)
    blue_positions = find_object(input_grid, 1)
    if (len(blue_positions) > 0 ):
      blue_pos = blue_positions[0]
      output_grid[blue_pos[0], blue_pos[1]] = 0 #clear position
      output_grid[blue_pos[0]-1, blue_pos[1]-1] = 1
      output_grid[blue_pos[0], blue_pos[1]] = 5

    return output_grid

def show_result(example_index, input, expected, actual, message):
    print(f"Example {example_index}:")
    print(f"Input:\n{input}")
    print(f"Expected Output:\n{expected}")
    print(f"Actual Output:\n{actual}")
    print(f"{message}\n")
    print("-" * 30)

def compare_grids(example_index, input_grid, expected_output, transform_func):
    """Compares the transformed grid with the expected output."""
    actual_output = transform_func(input_grid)
    message = "Match" if np.array_equal(actual_output, expected_output) else "Mismatch"
    show_result(example_index, input_grid, expected_output, actual_output, message)    
    return message == "Match"

task = task_data
train_examples = task['train']
results = []
for i, example in enumerate(train_examples):
    input_grid = np.array(example['input'])
    expected_output = np.array(example['output'])
    result = compare_grids(i, input_grid, expected_output, transform)
    results.append(result)
print(f"results {results}")
