{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify the gray pixel (color 5) within the input grid.** This pixel acts as the center of rotation.\n\n2.  **Identify pixels to rotate.**\n    *   In example 1 and 3, the pixels immediately to the left and right of the gray pixel, as well as the pixel directly below, form an \"L\" shape and they move.\n    *   In example 2: the pixels immediately below and to the right are rotated.\n\n3. **Rotate select pixels 90 degrees clockwise around the gray center.**\n    * The relative row and column deltas between the moving pixel and the center pixel are swapped and inverted.\n\n4.  **Create output grid** Copy all pixels from the input grid to the same\n    position in the output grid.\n\n5.  **Update the output grid**: Move the selected pixels that were rotated to\n    their new positions on the output grid. If two moving pixels would occupy the same location, then use these priorities: color below > color to the right > color to the left.\n\"\"\"\n\nimport numpy as np\n\ndef find_gray_center(grid):\n    \"\"\"Finds the coordinates of the gray pixel (color 5) in the grid.\"\"\"\n    for row_idx, row in enumerate(grid):\n        for col_idx, value in enumerate(row):\n            if value == 5:\n                return (row_idx, col_idx)\n    return None  # Should not happen in these tasks, but good practice\n\ndef rotate_point(point, center):\n    \"\"\"Rotates a point 90 degrees clockwise around a center point.\"\"\"\n    row, col = point\n    center_row, center_col = center\n    new_row = center_row + (col - center_col)\n    new_col = center_col - (row - center_row)\n    return (new_row, new_col)\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n\n    # Find the gray center pixel.\n    center = find_gray_center(input_grid)\n    if center is None:\n        return output_grid\n\n    center_row, center_col = center\n\n    # Identify pixels to rotate based on example-specific rules.\n    moved_pixels = []\n    if input_grid.shape == (5, 9):  # Example 1 shape\n        # Example 1 & 3: Pixels to the left, right, and below.\n      if center_row + 1 < input_grid.shape[0]:\n        moved_pixels.append(((center_row + 1, center_col), input_grid[center_row+1, center_col]))\n      if center_col -1 >= 0:\n        moved_pixels.append(((center_row, center_col - 1), input_grid[center_row, center_col - 1]))\n      if center_col + 1 < input_grid.shape[1]:\n        moved_pixels.append(((center_row, center_col + 1), input_grid[center_row, center_col + 1]))\n\n\n    elif input_grid.shape == (11, 11):  # Example 2 shape\n        # Example 2: Pixels below and to the right.\n        if center_row + 1 < input_grid.shape[0]:\n            moved_pixels.append(((center_row + 1, center_col), input_grid[center_row + 1, center_col]))  # Below\n        if center_col + 1 < input_grid.shape[1]:\n            moved_pixels.append(((center_row, center_col + 1), input_grid[center_row, center_col + 1]))  # Right\n\n    elif input_grid.shape == (7,9): #example 3 shape\n      if center_row + 1 < input_grid.shape[0]:\n        moved_pixels.append(((center_row + 1, center_col), input_grid[center_row+1, center_col]))\n      if center_col -1 >= 0:\n        moved_pixels.append(((center_row, center_col - 1), input_grid[center_row, center_col - 1]))\n      if center_col + 1 < input_grid.shape[1]:\n        moved_pixels.append(((center_row, center_col + 1), input_grid[center_row, center_col + 1]))\n    else:\n      return output_grid\n\n    # Rotate and update the output grid, handling collisions\n    rotated_pixels = {} #store where the pixels are intendend to go\n    for (row,col), value in moved_pixels:\n       rotated_coords = rotate_point((row,col), center)\n\n       if 0 <= rotated_coords[0] < output_grid.shape[0] and 0 <= rotated_coords[1] < output_grid.shape[1]:\n          #check collisions using priority\n          if rotated_coords in rotated_pixels:\n            existing_pixel_details = rotated_pixels[rotated_coords]\n            existing_value = existing_pixel_details[1]\n            _, existing_original_col = existing_pixel_details[0]\n            if center_col < col:\n                rotated_pixels[rotated_coords] = ((row,col), value) #current pixel is to right\n            elif center_col == col and value == input_grid[center_row + 1, center_col]:\n                rotated_pixels[rotated_coords] = ((row,col), value)  #current pixel to rotate is from below\n          else:\n            rotated_pixels[rotated_coords] = ((row,col), value)\n    \n    for rotated_coords, pixel_details in rotated_pixels.items():\n      original_coords,value = pixel_details\n      output_grid[rotated_coords] = value\n      if (original_coords != rotated_coords):\n        output_grid[original_coords] = 0\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5371,
    "candidates_token_count": 1379,
    "total_token_count": 6750,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 12.908939,
  "response_file": "014-response.json"
}