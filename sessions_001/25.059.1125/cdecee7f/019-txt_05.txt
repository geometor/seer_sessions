import numpy as np

def get_nonzero_by_column(input_grid):
    """Extracts non-zero pixels, preserving column order and removing duplicates within columns."""
    non_zero_pixels = []
    columns_added = set()

    for j in range(input_grid.shape[1]):
        for i in range(input_grid.shape[0]):
            value = input_grid[i,j]
            if value != 0 and j not in columns_added:
                non_zero_pixels.append(value)
                columns_added.add(j)
    return non_zero_pixels

def transform(input_grid):
    """Transforms a 10x10 input grid into a 3x3 output grid by extracting and
    rearranging non-zero pixels based on column order."""

    # Initialize an empty 3x3 output grid filled with zeros.
    output_grid = np.zeros((3, 3), dtype=int)

    # Find and order non-zero pixels by their column position.
    non_zero_pixels = get_nonzero_by_column(input_grid)

    # Fill the output grid with the ordered non-zero pixel values.
    k = 0
    for i in range(3):
        for j in range(3):
            if k < len(non_zero_pixels):
                output_grid[i, j] = non_zero_pixels[k]
                k += 1

    return output_grid

task_id = '55826771'
training_examples = [
  {'input': [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 6, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], 'output': [[4, 8, 6], [0, 0, 0], [0, 0, 0]]},
  {'input': [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], 'output': [[3, 7, 0], [0, 0, 0], [0, 0, 0]]},
  {'input': [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 9, 0, 0, 0, 0, 0, 0]], 'output': [[9, 5, 0], [0, 0, 0], [0, 0, 0]]}
]

print("task_id:", task_id)
for i, example in enumerate(training_examples):
    input_grid = np.array(example['input'])
    expected_output = np.array(example['output'])
    predicted_output = transform(input_grid)
    print(f"Example {i + 1}:")
    print("Input:\n", input_grid)
    print("Predicted Output:\n", predicted_output)
    print("Expected Output:\n", expected_output)
    print("Match:", np.array_equal(predicted_output, expected_output))
    print("-" * 20)