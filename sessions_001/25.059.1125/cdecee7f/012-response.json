{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Non-Zero Region:** Examine the input grid and determine the smallest bounding rectangle that contains all non-zero pixels.\n2. **Copy:** Create an output grid with the same dimensions as the bounding region.\n3. **Transfer Pixels:** Transfer pixels from the input grid's bounding region to the output grid. Copy pixel values to identical output locations.\n\"\"\"\n\nimport numpy as np\n\ndef find_bounding_box(grid):\n    # Find rows and columns with non-zero elements\n    rows = np.any(grid != 0, axis=1)\n    cols = np.any(grid != 0, axis=0)\n\n    # Get the indices of the first and last True values\n    min_row, max_row = np.where(rows)[0][[0, -1]] if np.any(rows) else (0, 0)\n    min_col, max_col = np.where(cols)[0][[0, -1]] if np.any(cols) else (0, 0)\n\n    return min_row, max_row, min_col, max_col\n\ndef transform(input_grid):\n    # Find the bounding box of non-zero pixels\n    min_row, max_row, min_col, max_col = find_bounding_box(input_grid)\n\n    # Create the output grid based on the bounding box dimensions\n    output_grid = np.zeros((max_row - min_row + 1, max_col - min_col + 1), dtype=int)\n\n    # Transfer pixels from the bounding region to the output grid\n    for r in range(min_row, max_row + 1):\n        for c in range(min_col, max_col + 1):\n            output_grid[r - min_row, c - min_col] = input_grid[r, c]\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2480,
    "candidates_token_count": 432,
    "total_token_count": 2912,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 18.039877,
  "response_file": "012-response.json"
}