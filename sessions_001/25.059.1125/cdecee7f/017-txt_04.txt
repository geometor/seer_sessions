import numpy as np

def transform(input_grid):
    """Transforms a 10x10 input grid into a 3x3 output grid by extracting and
    rearranging non-zero pixels."""

    # Initialize an empty 3x3 output grid filled with zeros.
    output_grid = np.zeros((3, 3), dtype=int)

    # Find all non-zero pixels in the input grid.
    non_zero_pixels = []
    for i in range(input_grid.shape[0]):
        for j in range(input_grid.shape[1]):
            if input_grid[i, j] != 0:
                non_zero_pixels.append(input_grid[i, j])

    # Flatten non_zero_pixel for linear fill
    non_zero_pixels = sorted(non_zero_pixels, key=lambda x: (non_zero_pixels.index(x)))

    # Fill the output grid with the non-zero pixel values.
    k=0
    for i in range(3):
      for j in range(3):
        if k < len(non_zero_pixels):
          output_grid[i,j] = non_zero_pixels[k]
          k+=1

    return output_grid

# Provided examples
train_examples = [
    {
        "input": np.array([
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 3, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 7, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ]),
        "output": np.array([
            [3, 0, 0],
            [7, 0, 0],
            [0, 0, 0]
        ])
    },
    {
        "input": np.array([
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 2, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ]),
        "output": np.array([
            [1, 0, 0],
            [2, 0, 0],
            [0, 0, 0]
        ])
    },
    {
        "input": np.array([
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 4, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 5, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ]),
        "output": np.array([
            [4, 0, 0],
            [5, 0, 0],
            [0, 0, 0]
        ])
    },
    {
       "input": np.array([
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 4, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 2, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ]),
        "output": np.array([
            [4, 0, 0],
            [2, 0, 0],
            [0, 0, 0]
        ])
    }
]

results = []
for i, example in enumerate(train_examples):
    input_grid = example["input"]
    expected_output = example["output"]
    actual_output = transform(input_grid)
    results.append({
        "example_index": i,
        "input_grid": input_grid.tolist(),
        "expected_output": expected_output.tolist(),
        "actual_output": actual_output.tolist(),
        "match": np.array_equal(expected_output, actual_output)
    })

for result in results:
    print(result)
