import numpy as np

def calculate_discrepancy(expected_grid, actual_grid):
    """Calculates the number of differing pixels between two grids."""
    return np.sum(expected_grid != actual_grid)

# Example Data (replace with actual data from the task)
examples = [
    {
        "input": np.array([[0,0,0],[0,1,0],[0,0,0]]),
        "expected": np.array([[0,0,0],[0,1,0],[0,0,0]]),
        "actual": np.array([[0,0,0],[0,1,0],[0,0,0]]),
    },
    {
        "input": np.array([[0,0,0,0,0],[0,0,5,0,0],[0,5,5,5,0],[0,0,5,0,0],[0,0,0,0,0]]),
        "expected": np.array([[0,0,0,0,0],[0,0,1,0,0],[0,1,1,1,0],[0,0,1,0,0],[0,0,0,0,0]]),
        "actual": np.array([[0,0,0,0,0],[0,0,1,0,0],[0,1,1,1,0],[0,0,1,0,0],[0,0,0,0,0]]),
    },
    {
        "input": np.array([[0,0,0,0,0,0,0],[0,0,0,5,0,0,0],[0,0,0,5,0,0,0],[0,0,0,5,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]]),
        "expected": np.array([[0,0,0,0,0,0,0],[0,0,0,1,0,0,0],[0,0,0,1,0,0,0],[0,0,0,1,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]]),
        "actual": np.array([[0,0,0,0,0,0,0],[0,0,0,1,0,0,0],[0,0,0,1,0,0,0],[0,0,0,1,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]]),
    },
    {
      "input": np.array([[0,0,0,0,0,0,0,0,0],[0,5,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,5,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,5,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0]]),
      "expected":  np.array([[0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0]]),
      "actual": np.array([[0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0]]),
    },
]


for i, example in enumerate(examples):
    discrepancy = calculate_discrepancy(example["expected"], example["actual"])
    print(f"Example {i+1}: Discrepancy = {discrepancy}")
    seed_pixels = np.where(example["input"] == 5)
    seed_rows = seed_pixels[0].tolist()
    seed_cols = seed_pixels[1].tolist()
   
    print(f'Seed Pixels at: {list(zip(seed_rows, seed_cols))}')

    fill_pixels = np.where(example["expected"] == 1)
    fill_rows = fill_pixels[0].tolist()
    fill_cols = fill_pixels[1].tolist()
    print(f'Fill Pixels at: {list(zip(fill_rows, fill_cols))}')