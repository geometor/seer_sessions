{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nCopies yellow pixels from the input grid to the output grid and adds a red rectangle in the output grid. The red rectangle's position and size are determined by the bounding box of the gray object in the input grid.\n\"\"\"\n\nimport numpy as np\n\ndef find_pixels_by_value(grid, value):\n    \"\"\"Finds the coordinates of pixels with a specific value.\"\"\"\n    return np.argwhere(grid == value).tolist()\n\ndef get_bounding_box(grid, value):\n    \"\"\"\n    Calculates the bounding box of a set of pixels with the specified color.\n    Returns (top_left, bottom_right) coordinates of the object\n    \"\"\"\n    pixels = find_pixels_by_value(grid, value)\n    if not pixels:\n        return None, None  # Handle cases where no object of specified color exists\n    min_row, min_col = np.min(pixels, axis=0)\n    max_row, max_col = np.max(pixels, axis=0)\n    return (min_row, min_col), (max_row, max_col)\n\ndef create_rectangle(grid, top_left, bottom_right, value):\n    \"\"\"Fills a rectangular region in the grid with a given value.\"\"\"\n    if top_left is None or bottom_right is None:\n        return grid\n\n    for r in range(top_left[0], bottom_right[0] + 1):\n        for c in range(top_left[1], bottom_right[1] + 1):\n            # Handle cases when rectangle goes outside the grid\n            if 0 <= r < grid.shape[0] and 0 <= c < grid.shape[1]:\n                grid[r, c] = value\n    return grid\n\ndef transform(input_grid):\n    # initialize output_grid as a copy of the input grid\n    output_grid = np.copy(input_grid)\n\n    # Find yellow pixels (value 4)\n    yellow_pixels = find_pixels_by_value(input_grid, 4)\n\n    # Preserve yellow pixels\n    for pixel in yellow_pixels:\n       output_grid[pixel[0], pixel[1]] = 4\n\n    # Find the bounding box of the gray object (value 5)\n    top_left, bottom_right = get_bounding_box(input_grid, 5)\n\n    # Create red rectangle (value 2) with the same dimensions and position as gray object\n    output_grid = create_rectangle(output_grid, top_left, bottom_right, 2)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1974,
    "candidates_token_count": 591,
    "total_token_count": 2565,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.590012,
  "response_file": "012-response.json"
}