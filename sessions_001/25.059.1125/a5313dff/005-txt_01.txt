import numpy as np

def describe_red_regions(grid):
    """
    Identifies and describes contiguous red regions in the grid.
    Returns a list of dictionaries, each describing a region.
    """
    red_regions = []
    visited = np.zeros_like(grid, dtype=bool)
    rows, cols = grid.shape

    def is_valid(r, c):
        return 0 <= r < rows and 0 <= c < cols

    def dfs(r, c, region_pixels):
        if not is_valid(r, c) or visited[r, c] or grid[r, c] != 2:
            return
        visited[r, c] = True
        region_pixels.append((r, c))
        # Explore adjacent cells (up, down, left, right)
        dfs(r + 1, c, region_pixels)
        dfs(r - 1, c, region_pixels)
        dfs(r, c + 1, region_pixels)
        dfs(r, c - 1, region_pixels)

    for r in range(rows):
        for c in range(cols):
            if grid[r, c] == 2 and not visited[r, c]:
                region_pixels = []
                dfs(r, c, region_pixels)
                if region_pixels:
                    # basic description
                    min_r = min(p[0] for p in region_pixels)
                    max_r = max(p[0] for p in region_pixels)
                    min_c = min(p[1] for p in region_pixels)
                    max_c = max(p[1] for p in region_pixels)
                    region_description = {
                        'pixels': region_pixels,
                        'min_row': min_r,
                        'max_row': max_r,
                        'min_col': min_c,
                        'max_col': max_c,
                        'height': max_r-min_r + 1,
                        'width' : max_c - min_c + 1,
                    }

                    red_regions.append(region_description)
    return red_regions

def calculate_iou(grid1, grid2):
  intersection = np.sum((grid1 == 1) & (grid2 == 1))
  union = np.sum((grid1 == 1) | (grid2 == 1))
  return intersection / union if union != 0 else 0.0

def compare_grids(grid1, grid2):
    """
    Compares two grids and reports element-wise differences.
    """
    if grid1.shape != grid2.shape:
        return "Grids have different shapes."
    diff = grid1 != grid2
    num_diff = np.sum(diff)
    return f"Number of differing elements: {num_diff}"

task_data = {
    'train': [
        {'input': np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 2, 2, 2, 0, 0, 0],
                            [0, 0, 0, 2, 0, 2, 0, 0, 0],
                            [0, 0, 0, 2, 2, 2, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
         'output': np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 2, 2, 2, 0, 0, 0],
                             [0, 0, 0, 2, 1, 2, 0, 0, 0],
                             [0, 0, 0, 2, 2, 2, 0, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]])},
        {'input': np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 2, 2, 2, 0, 0],
                            [0, 0, 0, 0, 0, 2, 0, 2, 0, 0],
                            [0, 0, 0, 0, 0, 2, 2, 2, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
         'output': np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, 2, 2, 2, 0, 0],
                             [0, 0, 0, 0, 0, 2, 1, 2, 0, 0],
                             [0, 0, 0, 0, 0, 2, 2, 2, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])},
        {'input': np.array([[0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 2, 2, 2, 0, 0],
                            [0, 0, 0, 2, 0, 2, 0, 0],
                            [0, 0, 0, 2, 0, 0, 0, 0],
                            [0, 0, 0, 2, 2, 2, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0]]),
         'output': np.array([[0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 2, 2, 2, 0, 0],
                             [0, 0, 0, 2, 1, 2, 0, 0],
                             [0, 0, 0, 2, 1, 1, 0, 0],
                             [0, 0, 0, 2, 2, 2, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0, 0]])},
        {'input': np.array([[2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0],
                            [2, 0, 0, 2, 0, 0, 0, 2, 2, 2, 2, 0],
                            [2, 0, 0, 2, 0, 0, 0, 2, 0, 0, 2, 0],
                            [2, 2, 2, 2, 0, 0, 0, 2, 0, 0, 2, 0],
                            [0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0]]),
         'output': np.array([[2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0],
                             [2, 1, 1, 2, 0, 0, 0, 2, 2, 2, 2, 0],
                             [2, 1, 1, 2, 0, 0, 0, 2, 1, 1, 2, 0],
                             [2, 2, 2, 2, 0, 0, 0, 2, 1, 1, 2, 0],
                             [0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0]])}
    ],
    'test': [
        {'input': np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])}
    ]
}

for i, example in enumerate(task_data['train']):
    input_grid = example['input']
    output_grid = example['output']
    predicted_output = transform(input_grid)
    red_regions_input = describe_red_regions(input_grid)
    red_regions_output = describe_red_regions(output_grid)
    grid_comparison = compare_grids(output_grid, predicted_output)
    iou = calculate_iou(output_grid, predicted_output)

    print(f"Example {i+1}:")
    print(f"  Input Red Regions: {red_regions_input}")
    print(f"  Output Red Regions: {red_regions_output}")
    print(f"  Grid Comparison with Predicted: {grid_comparison}")
    print(f"  IoU with Predicted Output: {iou:.4f}")
    print("---")