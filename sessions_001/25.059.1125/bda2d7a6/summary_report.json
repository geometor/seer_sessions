{
  "response_report": [
    {
      "response_file": "001-response.json",
      "token_usage": {
        "prompt": 3603,
        "candidates": 535,
        "total": 4138,
        "cached": 0
      },
      "response_time": 8.85718
    },
    {
      "response_file": "002-response.json",
      "token_usage": {
        "prompt": 4000,
        "candidates": 380,
        "total": 4380,
        "cached": 0
      },
      "response_time": 4.527167
    },
    {
      "response_file": "003-response.json",
      "token_usage": {
        "prompt": 1861,
        "candidates": 463,
        "total": 2324,
        "cached": 0
      },
      "response_time": 6.84321
    },
    {
      "response_file": "004-response.json",
      "token_usage": {
        "prompt": 2186,
        "candidates": 429,
        "total": 2615,
        "cached": 0
      },
      "response_time": 16.536789
    },
    {
      "response_file": "005-response.json",
      "token_usage": {
        "prompt": 1680,
        "candidates": 792,
        "total": 2472,
        "cached": 0
      },
      "response_time": 10.070849
    },
    {
      "response_file": "006-response.json",
      "token_usage": {
        "prompt": 2264,
        "candidates": 590,
        "total": 2854,
        "cached": 0
      },
      "response_time": 5.652594
    },
    {
      "response_file": "007-response.json",
      "token_usage": {
        "prompt": 1841,
        "candidates": 3359,
        "total": 5200,
        "cached": 0
      },
      "response_time": 29.162102
    },
    {
      "response_file": "008-response.json",
      "token_usage": {
        "prompt": 4997,
        "candidates": 642,
        "total": 5639,
        "cached": 0
      },
      "response_time": 5.769879
    },
    {
      "response_file": "009-response.json",
      "token_usage": {
        "prompt": 1861,
        "candidates": 707,
        "total": 2568,
        "cached": 0
      },
      "response_time": 8.994386
    },
    {
      "response_file": "010-response.json",
      "token_usage": {
        "prompt": 2425,
        "candidates": 524,
        "total": 2949,
        "cached": 0
      },
      "response_time": 5.664906
    },
    {
      "response_file": "011-response.json",
      "token_usage": {
        "prompt": 1773,
        "candidates": 1052,
        "total": 2825,
        "cached": 0
      },
      "response_time": 11.449192
    },
    {
      "response_file": "012-response.json",
      "token_usage": {
        "prompt": 2627,
        "candidates": 507,
        "total": 3134,
        "cached": 0
      },
      "response_time": 4.339552
    },
    {
      "response_file": "013-response.json",
      "token_usage": {
        "prompt": 1757,
        "candidates": 2770,
        "total": 4527,
        "cached": 0
      },
      "response_time": 25.20737
    },
    {
      "response_file": "014-response.json",
      "token_usage": {
        "prompt": 4323,
        "candidates": 634,
        "total": 4957,
        "cached": 0
      },
      "response_time": 5.788623
    },
    {
      "response_file": "015-response.json",
      "token_usage": {
        "prompt": 1973,
        "candidates": 369,
        "total": 2342,
        "cached": 0
      },
      "response_time": 6.101985
    },
    {
      "response_file": "016-response.json",
      "token_usage": {
        "prompt": 2204,
        "candidates": 513,
        "total": 2717,
        "cached": 0
      },
      "response_time": 5.681823
    },
    {
      "response_file": "017-response.json",
      "token_usage": {
        "prompt": 1764,
        "candidates": 2509,
        "total": 4273,
        "cached": 0
      },
      "response_time": 22.31504
    },
    {
      "response_file": "018-response.json",
      "token_usage": {
        "prompt": 4072,
        "candidates": 892,
        "total": 4964,
        "cached": 0
      },
      "response_time": 7.746509
    },
    {
      "response_file": "019-response.json",
      "token_usage": {
        "prompt": 2143,
        "candidates": 1354,
        "total": 3497,
        "cached": 0
      },
      "response_time": 14.592756
    },
    {
      "response_file": "020-response.json",
      "token_usage": {
        "prompt": 3295,
        "candidates": 566,
        "total": 3861,
        "cached": 0
      },
      "response_time": 5.323584
    }
  ],
  "test_report": {
    "002-py_01-train": [
      {
        "example": 1,
        "input": "3 3 3 3 3 3\n3 2 2 2 2 3\n3 2 0 0 2 3\n3 2 0 0 2 3\n3 2 2 2 2 3\n3 3 3 3 3 3",
        "expected_output": "0 0 0 0 0 0\n0 3 3 3 3 0\n0 3 2 2 3 0\n0 3 2 2 3 0\n0 3 3 3 3 0\n0 0 0 0 0 0",
        "transformed_output": "3 3 3 3 3 3\n3 0 0 0 0 3\n3 0 2 2 0 3\n3 0 2 2 0 3\n3 0 0 0 0 3\n3 3 3 3 3 3",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 32,
        "percent_correct": 11.11111111111111
      },
      {
        "example": 2,
        "input": "0 0 0 0 0 0\n0 7 7 7 7 0\n0 7 6 6 7 0\n0 7 6 6 7 0\n0 7 7 7 7 0\n0 0 0 0 0 0",
        "expected_output": "6 6 6 6 6 6\n6 0 0 0 0 6\n6 0 7 7 0 6\n6 0 7 7 0 6\n6 0 0 0 0 6\n6 6 6 6 6 6",
        "transformed_output": "0 0 0 0 0 0\n0 6 6 6 6 0\n0 6 7 7 6 0\n0 6 7 7 6 0\n0 6 6 6 6 0\n0 0 0 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 32,
        "percent_correct": 11.11111111111111
      },
      {
        "example": 3,
        "input": "8 8 8 8 8 8 8 8\n8 0 0 0 0 0 0 8\n8 0 5 5 5 5 0 8\n8 0 5 8 8 5 0 8\n8 0 5 8 8 5 0 8\n8 0 5 5 5 5 0 8\n8 0 0 0 0 0 0 8\n8 8 8 8 8 8 8 8",
        "expected_output": "5 5 5 5 5 5 5 5\n5 8 8 8 8 8 8 5\n5 8 0 0 0 0 8 5\n5 8 0 5 5 0 8 5\n5 8 0 5 5 0 8 5\n5 8 0 0 0 0 8 5\n5 8 8 8 8 8 8 5\n5 5 5 5 5 5 5 5",
        "transformed_output": "8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8\n8 8 5 5 5 5 8 8\n8 8 5 0 0 5 8 8\n8 8 5 0 0 5 8 8\n8 8 5 5 5 5 8 8\n8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 44,
        "percent_correct": 31.25
      }
    ],
    "004-py_02-train": [
      {
        "example": 1,
        "input": "3 3 3 3 3 3\n3 2 2 2 2 3\n3 2 0 0 2 3\n3 2 0 0 2 3\n3 2 2 2 2 3\n3 3 3 3 3 3",
        "expected_output": "0 0 0 0 0 0\n0 3 3 3 3 0\n0 3 2 2 3 0\n0 3 2 2 3 0\n0 3 3 3 3 0\n0 0 0 0 0 0",
        "transformed_output": "0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 2 2 0 0\n0 0 2 2 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 12,
        "percent_correct": 66.66666666666666
      },
      {
        "example": 2,
        "input": "0 0 0 0 0 0\n0 7 7 7 7 0\n0 7 6 6 7 0\n0 7 6 6 7 0\n0 7 7 7 7 0\n0 0 0 0 0 0",
        "expected_output": "6 6 6 6 6 6\n6 0 0 0 0 6\n6 0 7 7 0 6\n6 0 7 7 0 6\n6 0 0 0 0 6\n6 6 6 6 6 6",
        "transformed_output": "",
        "match": false,
        "size_correct": "N/A",
        "color_palette_correct": "N/A",
        "correct_pixel_counts": "N/A",
        "pixels_off": "N/A",
        "percent_correct": "N/A"
      },
      {
        "example": 3,
        "input": "8 8 8 8 8 8 8 8\n8 0 0 0 0 0 0 8\n8 0 5 5 5 5 0 8\n8 0 5 8 8 5 0 8\n8 0 5 8 8 5 0 8\n8 0 5 5 5 5 0 8\n8 0 0 0 0 0 0 8\n8 8 8 8 8 8 8 8",
        "expected_output": "5 5 5 5 5 5 5 5\n5 8 8 8 8 8 8 5\n5 8 0 0 0 0 8 5\n5 8 0 5 5 0 8 5\n5 8 0 5 5 0 8 5\n5 8 0 0 0 0 8 5\n5 8 8 8 8 8 8 5\n5 5 5 5 5 5 5 5",
        "transformed_output": "0 0 0 0 0 0 0 0\n0 8 8 8 8 8 8 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 8 5 5 5 5 8 0\n0 0 0 0 0 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 44,
        "percent_correct": 31.25
      }
    ],
    "006-py_03-train": [
      {
        "example": 1,
        "input": "3 3 3 3 3 3\n3 2 2 2 2 3\n3 2 0 0 2 3\n3 2 0 0 2 3\n3 2 2 2 2 3\n3 3 3 3 3 3",
        "expected_output": "0 0 0 0 0 0\n0 3 3 3 3 0\n0 3 2 2 3 0\n0 3 2 2 3 0\n0 3 3 3 3 0\n0 0 0 0 0 0",
        "transformed_output": "0 0 0 0 0 0\n0 2 2 2 2 0\n0 2 2 2 2 0\n0 2 2 2 2 0\n0 2 2 2 2 0\n0 0 0 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 12,
        "percent_correct": 66.66666666666666
      },
      {
        "example": 2,
        "input": "0 0 0 0 0 0\n0 7 7 7 7 0\n0 7 6 6 7 0\n0 7 6 6 7 0\n0 7 7 7 7 0\n0 0 0 0 0 0",
        "expected_output": "6 6 6 6 6 6\n6 0 0 0 0 6\n6 0 7 7 0 6\n6 0 7 7 0 6\n6 0 0 0 0 6\n6 6 6 6 6 6",
        "transformed_output": "0 0 0 0 0 0\n0 7 7 7 7 0\n0 7 6 6 7 0\n0 7 6 6 7 0\n0 7 7 7 7 0\n0 0 0 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 36,
        "percent_correct": 0.0
      },
      {
        "example": 3,
        "input": "8 8 8 8 8 8 8 8\n8 0 0 0 0 0 0 8\n8 0 5 5 5 5 0 8\n8 0 5 8 8 5 0 8\n8 0 5 8 8 5 0 8\n8 0 5 5 5 5 0 8\n8 0 0 0 0 0 0 8\n8 8 8 8 8 8 8 8",
        "expected_output": "5 5 5 5 5 5 5 5\n5 8 8 8 8 8 8 5\n5 8 0 0 0 0 8 5\n5 8 0 5 5 0 8 5\n5 8 0 5 5 0 8 5\n5 8 0 0 0 0 8 5\n5 8 8 8 8 8 8 5\n5 5 5 5 5 5 5 5",
        "transformed_output": "0 0 0 0 0 0 0 0\n0 8 8 8 8 8 8 0\n0 8 5 5 5 5 8 0\n0 8 5 8 8 5 8 0\n0 8 5 8 8 5 8 0\n0 8 5 5 5 5 8 0\n0 8 8 8 8 8 8 0\n0 0 0 0 0 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 44,
        "percent_correct": 31.25
      }
    ],
    "007-py_04-train": [],
    "008-py_05-train": [
      {
        "example": 1,
        "input": "3 3 3 3 3 3\n3 2 2 2 2 3\n3 2 0 0 2 3\n3 2 0 0 2 3\n3 2 2 2 2 3\n3 3 3 3 3 3",
        "expected_output": "0 0 0 0 0 0\n0 3 3 3 3 0\n0 3 2 2 3 0\n0 3 2 2 3 0\n0 3 3 3 3 0\n0 0 0 0 0 0",
        "transformed_output": "3 3 3 3 3 3\n3 2 2 2 2 3\n3 2 2 2 2 3\n3 2 2 2 2 3\n3 2 2 2 2 3\n3 3 3 3 3 3",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 32,
        "percent_correct": 11.11111111111111
      },
      {
        "example": 2,
        "input": "0 0 0 0 0 0\n0 7 7 7 7 0\n0 7 6 6 7 0\n0 7 6 6 7 0\n0 7 7 7 7 0\n0 0 0 0 0 0",
        "expected_output": "6 6 6 6 6 6\n6 0 0 0 0 6\n6 0 7 7 0 6\n6 0 7 7 0 6\n6 0 0 0 0 6\n6 6 6 6 6 6",
        "transformed_output": "0 0 0 0 0 0\n0 7 7 7 7 0\n0 7 6 6 7 0\n0 7 6 6 7 0\n0 7 7 7 7 0\n0 0 0 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 36,
        "percent_correct": 0.0
      },
      {
        "example": 3,
        "input": "8 8 8 8 8 8 8 8\n8 0 0 0 0 0 0 8\n8 0 5 5 5 5 0 8\n8 0 5 8 8 5 0 8\n8 0 5 8 8 5 0 8\n8 0 5 5 5 5 0 8\n8 0 0 0 0 0 0 8\n8 8 8 8 8 8 8 8",
        "expected_output": "5 5 5 5 5 5 5 5\n5 8 8 8 8 8 8 5\n5 8 0 0 0 0 8 5\n5 8 0 5 5 0 8 5\n5 8 0 5 5 0 8 5\n5 8 0 0 0 0 8 5\n5 8 8 8 8 8 8 5\n5 5 5 5 5 5 5 5",
        "transformed_output": "0 0 0 0 0 0 0 0\n0 8 8 8 8 8 8 0\n0 8 5 5 5 5 8 0\n0 8 5 8 8 5 8 0\n0 8 5 8 8 5 8 0\n0 8 5 5 5 5 8 0\n0 8 8 8 8 8 8 0\n0 0 0 0 0 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 44,
        "percent_correct": 31.25
      }
    ],
    "010-py_06-train": [
      {
        "example": 1,
        "input": "3 3 3 3 3 3\n3 2 2 2 2 3\n3 2 0 0 2 3\n3 2 0 0 2 3\n3 2 2 2 2 3\n3 3 3 3 3 3",
        "expected_output": "0 0 0 0 0 0\n0 3 3 3 3 0\n0 3 2 2 3 0\n0 3 2 2 3 0\n0 3 3 3 3 0\n0 0 0 0 0 0",
        "transformed_output": "3 3 3 3 3 3\n3 2 2 2 2 3\n3 2 0 0 2 3\n3 2 0 0 2 3\n3 2 2 2 2 3\n3 3 3 3 3 3",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 36,
        "percent_correct": 0.0
      },
      {
        "example": 2,
        "input": "0 0 0 0 0 0\n0 7 7 7 7 0\n0 7 6 6 7 0\n0 7 6 6 7 0\n0 7 7 7 7 0\n0 0 0 0 0 0",
        "expected_output": "6 6 6 6 6 6\n6 0 0 0 0 6\n6 0 7 7 0 6\n6 0 7 7 0 6\n6 0 0 0 0 6\n6 6 6 6 6 6",
        "transformed_output": "6 6 6 6 6 6\n6 0 0 0 0 6\n6 0 7 7 0 6\n6 0 7 7 0 6\n6 0 0 0 0 6\n6 6 6 6 6 6",
        "match": true,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": true,
        "pixels_off": 0,
        "percent_correct": 100.0
      },
      {
        "example": 3,
        "input": "8 8 8 8 8 8 8 8\n8 0 0 0 0 0 0 8\n8 0 5 5 5 5 0 8\n8 0 5 8 8 5 0 8\n8 0 5 8 8 5 0 8\n8 0 5 5 5 5 0 8\n8 0 0 0 0 0 0 8\n8 8 8 8 8 8 8 8",
        "expected_output": "5 5 5 5 5 5 5 5\n5 8 8 8 8 8 8 5\n5 8 0 0 0 0 8 5\n5 8 0 5 5 0 8 5\n5 8 0 5 5 0 8 5\n5 8 0 0 0 0 8 5\n5 8 8 8 8 8 8 5\n5 5 5 5 5 5 5 5",
        "transformed_output": "8 8 8 8 8 8 8 8\n8 0 0 0 0 6 6 8\n8 0 5 5 5 5 6 8\n8 0 5 8 8 5 6 8\n8 0 5 8 8 5 6 8\n8 6 5 5 5 5 6 8\n8 6 6 6 6 6 6 8\n8 8 8 8 8 8 8 8",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 64,
        "percent_correct": 0.0
      }
    ],
    "012-py_07-train": [
      {
        "example": 1,
        "input": "3 3 3 3 3 3\n3 2 2 2 2 3\n3 2 0 0 2 3\n3 2 0 0 2 3\n3 2 2 2 2 3\n3 3 3 3 3 3",
        "expected_output": "0 0 0 0 0 0\n0 3 3 3 3 0\n0 3 2 2 3 0\n0 3 2 2 3 0\n0 3 3 3 3 0\n0 0 0 0 0 0",
        "transformed_output": "3 3 3 3 3 3\n3 2 2 2 2 3\n3 2 0 0 2 3\n3 2 0 0 2 3\n3 2 2 2 2 3\n3 3 3 3 3 3",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 36,
        "percent_correct": 0.0
      },
      {
        "example": 2,
        "input": "0 0 0 0 0 0\n0 7 7 7 7 0\n0 7 6 6 7 0\n0 7 6 6 7 0\n0 7 7 7 7 0\n0 0 0 0 0 0",
        "expected_output": "6 6 6 6 6 6\n6 0 0 0 0 6\n6 0 7 7 0 6\n6 0 7 7 0 6\n6 0 0 0 0 6\n6 6 6 6 6 6",
        "transformed_output": "6 6 6 6 6 6\n6 7 7 7 7 6\n6 7 7 7 0 0\n6 7 7 7 0 0\n6 7 0 0 0 0\n6 6 0 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 14,
        "percent_correct": 61.111111111111114
      },
      {
        "example": 3,
        "input": "8 8 8 8 8 8 8 8\n8 0 0 0 0 0 0 8\n8 0 5 5 5 5 0 8\n8 0 5 8 8 5 0 8\n8 0 5 8 8 5 0 8\n8 0 5 5 5 5 0 8\n8 0 0 0 0 0 0 8\n8 8 8 8 8 8 8 8",
        "expected_output": "5 5 5 5 5 5 5 5\n5 8 8 8 8 8 8 5\n5 8 0 0 0 0 8 5\n5 8 0 5 5 0 8 5\n5 8 0 5 5 0 8 5\n5 8 0 0 0 0 8 5\n5 8 8 8 8 8 8 5\n5 5 5 5 5 5 5 5",
        "transformed_output": "8 8 8 8 8 8 8 8\n8 6 6 6 6 6 6 8\n8 6 5 5 5 5 6 8\n8 6 5 8 8 5 6 8\n8 6 5 8 8 5 6 8\n8 6 5 5 5 5 6 8\n8 6 6 6 6 6 6 8\n8 8 8 8 8 8 8 8",
        "match": false,
        "size_correct": true,
        "color_palette_correct": false,
        "correct_pixel_counts": false,
        "pixels_off": 64,
        "percent_correct": 0.0
      }
    ],
    "013-py_08-train": [],
    "014-py_09-train": [
      {
        "example": 1,
        "input": "3 3 3 3 3 3\n3 2 2 2 2 3\n3 2 0 0 2 3\n3 2 0 0 2 3\n3 2 2 2 2 3\n3 3 3 3 3 3",
        "expected_output": "0 0 0 0 0 0\n0 3 3 3 3 0\n0 3 2 2 3 0\n0 3 2 2 3 0\n0 3 3 3 3 0\n0 0 0 0 0 0",
        "transformed_output": "3 3 3 3 3 3\n3 2 2 2 2 3\n3 2 0 0 2 3\n3 2 0 0 2 3\n3 2 2 2 2 3\n3 3 3 3 3 3",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 36,
        "percent_correct": 0.0
      },
      {
        "example": 2,
        "input": "0 0 0 0 0 0\n0 7 7 7 7 0\n0 7 6 6 7 0\n0 7 6 6 7 0\n0 7 7 7 7 0\n0 0 0 0 0 0",
        "expected_output": "6 6 6 6 6 6\n6 0 0 0 0 6\n6 0 7 7 0 6\n6 0 7 7 0 6\n6 0 0 0 0 6\n6 6 6 6 6 6",
        "transformed_output": "6 6 6 6 6 6\n6 0 0 0 0 6\n6 0 7 7 0 6\n6 0 7 7 0 6\n6 0 0 0 0 6\n6 6 6 6 6 6",
        "match": true,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": true,
        "pixels_off": 0,
        "percent_correct": 100.0
      },
      {
        "example": 3,
        "input": "8 8 8 8 8 8 8 8\n8 0 0 0 0 0 0 8\n8 0 5 5 5 5 0 8\n8 0 5 8 8 5 0 8\n8 0 5 8 8 5 0 8\n8 0 5 5 5 5 0 8\n8 0 0 0 0 0 0 8\n8 8 8 8 8 8 8 8",
        "expected_output": "5 5 5 5 5 5 5 5\n5 8 8 8 8 8 8 5\n5 8 0 0 0 0 8 5\n5 8 0 5 5 0 8 5\n5 8 0 5 5 0 8 5\n5 8 0 0 0 0 8 5\n5 8 8 8 8 8 8 5\n5 5 5 5 5 5 5 5",
        "transformed_output": "8 8 8 8 8 8 8 8\n8 0 0 0 0 0 0 8\n8 0 5 5 5 5 0 8\n8 0 5 8 8 5 0 8\n8 0 5 8 8 5 0 8\n8 0 5 5 5 5 0 8\n8 0 0 0 0 0 0 8\n8 8 8 8 8 8 8 8",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 64,
        "percent_correct": 0.0
      }
    ],
    "016-py_10-train": [
      {
        "example": 1,
        "input": "3 3 3 3 3 3\n3 2 2 2 2 3\n3 2 0 0 2 3\n3 2 0 0 2 3\n3 2 2 2 2 3\n3 3 3 3 3 3",
        "expected_output": "0 0 0 0 0 0\n0 3 3 3 3 0\n0 3 2 2 3 0\n0 3 2 2 3 0\n0 3 3 3 3 0\n0 0 0 0 0 0",
        "transformed_output": "2 2 2 2 2 2\n2 3 3 3 3 2\n2 3 0 0 3 2\n2 3 0 0 3 2\n2 3 3 3 3 2\n2 2 2 2 2 2",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 24,
        "percent_correct": 33.33333333333333
      },
      {
        "example": 2,
        "input": "0 0 0 0 0 0\n0 7 7 7 7 0\n0 7 6 6 7 0\n0 7 6 6 7 0\n0 7 7 7 7 0\n0 0 0 0 0 0",
        "expected_output": "6 6 6 6 6 6\n6 0 0 0 0 6\n6 0 7 7 0 6\n6 0 7 7 0 6\n6 0 0 0 0 6\n6 6 6 6 6 6",
        "transformed_output": "7 7 7 7 7 7\n7 0 0 0 0 7\n7 0 6 6 0 7\n7 0 6 6 0 7\n7 0 0 0 0 7\n7 7 7 7 7 7",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 24,
        "percent_correct": 33.33333333333333
      },
      {
        "example": 3,
        "input": "8 8 8 8 8 8 8 8\n8 0 0 0 0 0 0 8\n8 0 5 5 5 5 0 8\n8 0 5 8 8 5 0 8\n8 0 5 8 8 5 0 8\n8 0 5 5 5 5 0 8\n8 0 0 0 0 0 0 8\n8 8 8 8 8 8 8 8",
        "expected_output": "5 5 5 5 5 5 5 5\n5 8 8 8 8 8 8 5\n5 8 0 0 0 0 8 5\n5 8 0 5 5 0 8 5\n5 8 0 5 5 0 8 5\n5 8 0 0 0 0 8 5\n5 8 8 8 8 8 8 5\n5 5 5 5 5 5 5 5",
        "transformed_output": "5 5 5 5 5 5 5 5\n5 0 0 0 0 0 0 5\n5 0 8 8 8 8 0 5\n5 0 8 8 8 8 0 5\n5 0 8 8 8 8 0 5\n5 0 8 8 8 8 0 5\n5 0 0 0 0 0 0 5\n5 5 5 5 5 5 5 5",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 36,
        "percent_correct": 43.75
      }
    ],
    "017-py_11-train": [],
    "017-py_12-train": [],
    "018-py_13-train": [
      {
        "example": 1,
        "input": "3 3 3 3 3 3\n3 2 2 2 2 3\n3 2 0 0 2 3\n3 2 0 0 2 3\n3 2 2 2 2 3\n3 3 3 3 3 3",
        "expected_output": "0 0 0 0 0 0\n0 3 3 3 3 0\n0 3 2 2 3 0\n0 3 2 2 3 0\n0 3 3 3 3 0\n0 0 0 0 0 0",
        "transformed_output": "3 3 3 3 3 3\n3 0 0 0 0 3\n3 0 2 2 0 3\n3 0 2 2 0 3\n3 0 0 0 0 3\n3 3 3 3 3 3",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 32,
        "percent_correct": 11.11111111111111
      },
      {
        "example": 2,
        "input": "0 0 0 0 0 0\n0 7 7 7 7 0\n0 7 6 6 7 0\n0 7 6 6 7 0\n0 7 7 7 7 0\n0 0 0 0 0 0",
        "expected_output": "6 6 6 6 6 6\n6 0 0 0 0 6\n6 0 7 7 0 6\n6 0 7 7 0 6\n6 0 0 0 0 6\n6 6 6 6 6 6",
        "transformed_output": "0 0 0 0 0 0\n0 6 6 6 6 0\n0 6 7 7 6 0\n0 6 7 7 6 0\n0 6 6 6 6 0\n0 0 0 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 32,
        "percent_correct": 11.11111111111111
      },
      {
        "example": 3,
        "input": "8 8 8 8 8 8 8 8\n8 0 0 0 0 0 0 8\n8 0 5 5 5 5 0 8\n8 0 5 8 8 5 0 8\n8 0 5 8 8 5 0 8\n8 0 5 5 5 5 0 8\n8 0 0 0 0 0 0 8\n8 8 8 8 8 8 8 8",
        "expected_output": "5 5 5 5 5 5 5 5\n5 8 8 8 8 8 8 5\n5 8 0 0 0 0 8 5\n5 8 0 5 5 0 8 5\n5 8 0 5 5 0 8 5\n5 8 0 0 0 0 8 5\n5 8 8 8 8 8 8 5\n5 5 5 5 5 5 5 5",
        "transformed_output": "8 8 8 8 8 8 8 8\n8 5 5 5 5 5 5 8\n8 5 0 0 0 0 5 8\n8 5 0 8 8 0 5 8\n8 5 0 8 8 0 5 8\n8 5 0 0 0 0 5 8\n8 5 5 5 5 5 5 8\n8 8 8 8 8 8 8 8",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 52,
        "percent_correct": 18.75
      }
    ],
    "019-py_14-train": [],
    "020-py_15-train": [
      {
        "example": 1,
        "input": "3 3 3 3 3 3\n3 2 2 2 2 3\n3 2 0 0 2 3\n3 2 0 0 2 3\n3 2 2 2 2 3\n3 3 3 3 3 3",
        "expected_output": "0 0 0 0 0 0\n0 3 3 3 3 0\n0 3 2 2 3 0\n0 3 2 2 3 0\n0 3 3 3 3 0\n0 0 0 0 0 0",
        "transformed_output": "3 3 3 3 3 3\n3 0 0 0 0 3\n3 0 2 2 0 3\n3 0 2 2 0 3\n3 0 0 0 0 3\n3 3 3 3 3 3",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 32,
        "percent_correct": 11.11111111111111
      },
      {
        "example": 2,
        "input": "0 0 0 0 0 0\n0 7 7 7 7 0\n0 7 6 6 7 0\n0 7 6 6 7 0\n0 7 7 7 7 0\n0 0 0 0 0 0",
        "expected_output": "6 6 6 6 6 6\n6 0 0 0 0 6\n6 0 7 7 0 6\n6 0 7 7 0 6\n6 0 0 0 0 6\n6 6 6 6 6 6",
        "transformed_output": "0 0 0 0 0 0\n0 6 6 6 6 0\n0 6 7 7 6 0\n0 6 7 7 6 0\n0 6 6 6 6 0\n0 0 0 0 0 0",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 32,
        "percent_correct": 11.11111111111111
      },
      {
        "example": 3,
        "input": "8 8 8 8 8 8 8 8\n8 0 0 0 0 0 0 8\n8 0 5 5 5 5 0 8\n8 0 5 8 8 5 0 8\n8 0 5 8 8 5 0 8\n8 0 5 5 5 5 0 8\n8 0 0 0 0 0 0 8\n8 8 8 8 8 8 8 8",
        "expected_output": "5 5 5 5 5 5 5 5\n5 8 8 8 8 8 8 5\n5 8 0 0 0 0 8 5\n5 8 0 5 5 0 8 5\n5 8 0 5 5 0 8 5\n5 8 0 0 0 0 8 5\n5 8 8 8 8 8 8 5\n5 5 5 5 5 5 5 5",
        "transformed_output": "8 8 8 8 8 8 8 8\n8 5 5 5 5 5 5 8\n8 5 0 0 0 0 5 8\n8 5 0 8 8 0 5 8\n8 5 0 8 8 0 5 8\n8 5 0 0 0 0 5 8\n8 5 5 5 5 5 5 8\n8 8 8 8 8 8 8 8",
        "match": false,
        "size_correct": true,
        "color_palette_correct": true,
        "correct_pixel_counts": false,
        "pixels_off": 52,
        "percent_correct": 18.75
      }
    ]
  },
  "best_train_results": {
    "passed": 1,
    "total": 3
  },
  "best_test_results": {
    "passed": 0,
    "total": 0
  },
  "test_solved": false
}