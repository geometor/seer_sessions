{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Determine Background:** The background color is the most frequent color in the input grid, *or* the color in the corners.\n2.  **Identify Colors to Swap:** Identify the two most frequent colors, excluding the background color. If fewer than two colors remain, do nothing.\n3.  **Swap Colors:** Iterate through all pixels of the input grid. If a pixel's color matches the first color to swap, change it to the second color. If it matches the second color, change it to the first.\n4.  **Preserve Background:** Do not change pixels that match the background color.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef get_background_color(grid):\n    # Check corners first, then most frequent\n    corners = [grid[0, 0], grid[0, -1], grid[-1, 0], grid[-1, -1]]\n    corner_counts = Counter(corners)\n    most_common_corner = corner_counts.most_common(1)\n    if most_common_corner:\n        return most_common_corner[0][0]\n    \n    # else return most frequent overall\n    all_colors = grid.flatten().tolist()\n    color_counts = Counter(all_colors)\n    return color_counts.most_common(1)[0][0]\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n    \n    # Determine Background\n    background_color = get_background_color(output_grid)\n\n    # Identify Colors to Swap\n    color_counts = Counter(output_grid.flatten())\n    color_counts.pop(background_color, None)  # Remove background color\n\n    if len(color_counts) < 2:\n        return output_grid  # Not enough colors to swap\n\n    most_common_colors = color_counts.most_common(2)\n    color1 = most_common_colors[0][0]\n    color2 = most_common_colors[1][0]\n\n    # Swap Colors\n    for row in range(output_grid.shape[0]):\n        for col in range(output_grid.shape[1]):\n            if output_grid[row, col] == color1:\n                output_grid[row, col] = color2\n            elif output_grid[row, col] == color2:\n                output_grid[row, col] = color1\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3295,
    "candidates_token_count": 566,
    "total_token_count": 3861,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 5.323584,
  "response_file": "020-response.json"
}