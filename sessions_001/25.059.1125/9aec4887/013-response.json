{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify the Input Line:** Find the contiguous vertical line of non-zero pixels in the input grid. If there are no such pixels return an empty 5x5 output. Note the color of the line. Note the length of the vertical line.\n2.  **Determine output size and separation:** The output grid is always 5x5. If the length of the input line is 1, the white space separating the output is three rows, making the colored pixels separated by a total of 4 rows and 2 columns. If the length of the input line is greater than one, then the white space separating the mirrored lines is 1 column.\n3. **Scale the Line:** Scale the input line so that the mirrored lines in the ouput will fit completely within the ouput grid.\n4.  **Mirror and Create Output:** Create a 5x5 output grid. Place a copy of the (scaled) input line in the output grid, centered vertically. Then using the rule about separation, create its mirror image.\n\"\"\"\n\nimport numpy as np\n\ndef get_vertical_line(grid):\n    \"\"\"\n    Finds the longest contiguous vertical line of non-zero pixels.\n    Returns a tuple: (color, [(row, col), ...]) or (None, []) if no line is found.\n    \"\"\"\n    max_len = 0\n    longest_line = []\n    line_color = None\n\n    for col in range(grid.shape[1]):\n        for start_row in range(grid.shape[0]):\n            color = grid[start_row, col]\n            if color != 0:\n                current_line = []\n                row = start_row\n                while row < grid.shape[0] and grid[row, col] == color:\n                    current_line.append((row, col))\n                    row += 1\n\n                if len(current_line) > max_len:\n                    max_len = len(current_line)\n                    longest_line = current_line\n                    line_color = color\n\n    return line_color, longest_line\n\ndef scale_line(line, max_length):\n    \"\"\"Scales a line to fit within a given maximum length.\"\"\"\n    if len(line) <= max_length:\n        return line\n    \n    # scale down to fit in the 5x5 output grid.\n    scale_factor = (max_length) / len(line)    \n    new_length = int(len(line) * scale_factor)\n    \n    # select equally spaced pixels\n    indices = np.linspace(0, len(line) - 1, new_length, dtype=int)\n    scaled_line = [line[i] for i in indices]\n    \n    return scaled_line\n    \n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the mirroring rule.\"\"\"\n\n    # initialize output grid\n    output_grid = np.zeros((5, 5), dtype=int)\n    \n    # find input line \n    color, line = get_vertical_line(input_grid)\n\n    # handle no line found\n    if not line:\n        return output_grid\n\n    # determine separation and output placement\n    if len(line) == 1:\n        separation = 3\n        line = scale_line(line, 1) # single pixel line\n        row_start = 0 # top of output\n        col_1 = 1\n        col_2 = 3\n        for r, c in line:\n            output_grid[row_start, col_1] = color\n            output_grid[row_start + 4, col_1] = color # other row\n\n            output_grid[row_start, col_2] = color\n            output_grid[row_start + 4, col_2] = color # other row\n    else:\n        separation = 1\n        \n        scaled_line = scale_line(line, 4) # fit the output grid\n            \n        # center line in 5x5\n        row_start = (5 - len(scaled_line)) // 2\n\n        \n        col_1 = 1\n        col_2 = 3\n        \n        for i, (r, c) in enumerate(scaled_line):\n            if row_start + i < 5:  # stay within 5x5 grid\n                output_grid[row_start + i, col_1] = color\n                output_grid[row_start + i, col_2] = color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5227,
    "candidates_token_count": 1027,
    "total_token_count": 6254,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.248401,
  "response_file": "013-response.json"
}