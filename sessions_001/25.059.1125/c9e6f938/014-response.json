{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Check Input Width:** Determine the width of the input grid.\n\n2.  **Conditional Transformation:**\n    *   **If** the input grid's width is exactly 3:\n        *   Create an output grid with double the width of the input grid and the same height.\n        *   Copy all pixels from the input grid to their corresponding positions in the output grid.\n        *   Identify all contiguous horizontal blocks of orange (7) pixels in the input grid.\n        *   For each identified orange block, extend it to the right in the output grid by a length equal to the original block's length. The cells to the right are filled.\n\n    *   **Otherwise (if the width is not 3):**\n        *   The output grid is identical to the input grid (identity transformation).\n\"\"\"\n\nimport numpy as np\n\ndef find_contiguous_blocks(grid, color):\n    \"\"\"Finds contiguous horizontal blocks of a given color.\"\"\"\n    blocks = []\n    rows, cols = grid.shape\n    for r in range(rows):\n        in_block = False\n        start_col = 0\n        for c in range(cols):\n            if grid[r, c] == color:\n                if not in_block:\n                    in_block = True\n                    start_col = c\n            elif in_block:\n                in_block = False\n                blocks.append((r, start_col, c - 1))\n        if in_block:\n            blocks.append((r, start_col, cols - 1))\n    return blocks\n\ndef transform(input_grid):\n    # Check Input Width\n    if input_grid.shape[1] == 3:\n        # Create output grid with double width\n        output_grid = np.zeros((input_grid.shape[0], input_grid.shape[1] * 2), dtype=int)\n\n        # Copy all pixels from input to output\n        for r in range(input_grid.shape[0]):\n            for c in range(input_grid.shape[1]):\n                output_grid[r, c] = input_grid[r, c]\n\n        # Identify orange blocks\n        orange_blocks = find_contiguous_blocks(input_grid, 7)\n\n        # Duplicate orange blocks\n        for block in orange_blocks:\n            row, start_col, end_col = block\n            block_length = end_col - start_col + 1\n            for i in range(block_length):\n                if start_col + block_length + i < output_grid.shape[1]:\n                    output_grid[row, start_col + block_length + i] = 7\n    else:\n        # Identity transformation\n        output_grid = input_grid.copy()\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3724,
    "candidates_token_count": 634,
    "total_token_count": 4358,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 5.729533,
  "response_file": "014-response.json"
}