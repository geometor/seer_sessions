import numpy as np

def describe_grid(grid, name):
    print(f"{name}:")
    print(f"  Shape: {grid.shape}")
    unique, counts = np.unique(grid, return_counts=True)
    color_counts = dict(zip(unique, counts))
    print(f"  Colors: {color_counts}")

examples = [
    {
        "input": np.array([[5, 3, 5], [5, 5, 3], [8, 5, 5]]),
        "output": np.array([[5, 3, 5], [5, 3, 5], [5, 3, 5], [5, 5, 3], [5, 5, 3], [5, 5, 3], [8, 5, 5], [8, 5, 5], [8, 5, 5]]),
    },
            {
        "input": np.array([[5, 3, 5, 5, 5, 3], [8, 5, 5, 5, 5, 5]]),
        "output": np.array([[5, 3, 5, 5, 5, 3], [5, 3, 5, 5, 5, 3], [5, 3, 5, 5, 5, 3], [8, 5, 5, 5, 5, 5], [8, 5, 5, 5, 5, 5], [8, 5, 5, 5, 5, 5]]),
    },
            {
        "input": np.array([[5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 0, 5]]),
        "output": np.array([[5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 0, 5], [5, 5, 5, 5, 0, 5], [5, 5, 5, 5, 0, 5]]),
    },
    {
        "input": np.array([[0, 5, 0, 5, 0, 5, 0, 5], [0, 5, 0, 5, 0, 5, 0, 5], [0, 5, 0, 5, 0, 5, 0, 5], [0, 5, 0, 5, 0, 5, 0, 5]]),
        "output": np.array([[0, 5, 0, 5, 0, 5, 0, 5], [0, 5, 0, 5, 0, 5, 0, 5], [0, 5, 0, 5, 0, 5, 0, 5], [0, 5, 0, 5, 0, 5, 0, 5], [0, 5, 0, 5, 0, 5, 0, 5], [0, 5, 0, 5, 0, 5, 0, 5], [0, 5, 0, 5, 0, 5, 0, 5], [0, 5, 0, 5, 0, 5, 0, 5], [0, 5, 0, 5, 0, 5, 0, 5], [0, 5, 0, 5, 0, 5, 0, 5], [0, 5, 0, 5, 0, 5, 0, 5], [0, 5, 0, 5, 0, 5, 0, 5]]),
    },

]

for i, example in enumerate(examples):
    print(f"Example {i+1}:")
    describe_grid(example["input"], "Input")
    describe_grid(example["output"], "Output")
    print("-" * 20)