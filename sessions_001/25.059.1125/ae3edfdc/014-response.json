{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Locate all orange (7) pixels and blue (1) pixels within the input grid. Empty cells are represented by 0.\n2.  **Orange Expansion:** Orange pixels expand into adjacent (up, down, left, right) empty (0) pixels, *but only if that empty pixel lies on a direct horizontal or vertical path between the expanding orange pixel and a blue pixel*.\n3.  **Expansion Target:** The expansion of orange pixels is directed towards blue pixels.\n4.  **Stopping Condition:** Orange expansion continues until *every* blue pixel has at least one orange pixel adjacent to it (horizontally or vertically).\n5.  **Immovable Objects:** Blue pixels, and any other non-orange and non-empty pixels, do not change their positions or colors. Orange pixels will grow *around* these obstacles.\n6. **Prioritization:** If an empty cell is adjacent to more than one orange pixel, each of which could lead toward a blue pixel on distinct paths, all such orange will grow.\n\"\"\"\n\nimport numpy as np\n\ndef find_pixels(grid, color):\n    \"\"\"Finds the coordinates of all pixels of a specific color.\"\"\"\n    return np.argwhere(grid == color)\n\ndef is_on_path(orange_pixel, blue_pixel, empty_pixel):\n    \"\"\"Checks if the empty pixel is on a direct path between orange and blue.\"\"\"\n    # Check if they are in the same row or column\n    if (orange_pixel[0] == blue_pixel[0] and orange_pixel[0] == empty_pixel[0]) or \\\n       (orange_pixel[1] == blue_pixel[1] and orange_pixel[1] == empty_pixel[1]):\n        \n        # Check if empty_pixel is between orange_pixel and blue_pixel\n        if orange_pixel[0] == blue_pixel[0]:  # Same row\n            col_min = min(orange_pixel[1], blue_pixel[1])\n            col_max = max(orange_pixel[1], blue_pixel[1])\n            return col_min < empty_pixel[1] < col_max\n        else:  # Same column\n            row_min = min(orange_pixel[0], blue_pixel[0])\n            row_max = max(orange_pixel[0], blue_pixel[0])\n            return row_min < empty_pixel[0] < row_max\n    return False\n\n\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the observed rule.\"\"\"\n\n    output_grid = np.copy(input_grid)\n    orange_pixels = find_pixels(input_grid, 7)\n    blue_pixels = find_pixels(input_grid, 1)\n\n    # Create a set for efficient checking of orange pixel locations\n    orange_set = set(tuple(p) for p in orange_pixels)\n\n    # Continue expanding until no more changes occur\n    while True:\n        new_orange_set = set(orange_set)  # Copy for iteration\n        expansion_occurred = False\n\n        for blue_pixel in blue_pixels:\n            # Check for adjacent empty cells to this blue pixel\n            for r, c in [(-1, 0), (1, 0), (0, -1), (0, 1)]:  # Adjacent positions\n                adj_row, adj_col = blue_pixel[0] + r, blue_pixel[1] + c\n\n                # Check bounds and if the adjacent cell is empty\n                if 0 <= adj_row < output_grid.shape[0] and 0 <= adj_col < output_grid.shape[1] and \\\n                   output_grid[adj_row, adj_col] == 0:\n\n                    # Check if there's an *existing* orange pixel next to *this* empty AND on the path\n                    for orow, ocol in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                        neighbor_row, neighbor_col = adj_row + orow, adj_col + ocol\n                        neighbor_pixel = (neighbor_row, neighbor_col)\n\n                        if neighbor_pixel in orange_set and is_on_path(neighbor_pixel, blue_pixel, (adj_row, adj_col)):\n                          #Found a neighbor, set it to orange\n                          new_orange_set.add((adj_row,adj_col))\n                          output_grid[adj_row, adj_col] = 7\n                          expansion_occurred = True\n\n        orange_set = new_orange_set\n        if not expansion_occurred:\n            break\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6127,
    "candidates_token_count": 1057,
    "total_token_count": 7184,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.811125,
  "response_file": "014-response.json"
}