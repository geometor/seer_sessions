{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. Identify Clusters: Find all contiguous clusters of non-black pixels.\n\n2. Green Cluster Transformation:\n    *   Move the entire green (3) cluster down one row and left one column.\n    *   Within the *moved* green cluster, find all red (2) pixels.\n    *   For each red pixel found in the moved cluster, add a new green (3) pixel immediately to its right.\n\n3.  Cross-Shaped Cluster (Orange/Blue) Transformation:\n    *   If a cluster forms a cross shape with orange (7) and blue (1) pixels, move the entire cluster up by one row.\n\n4.  All other clusters: These clusters are not moved. Copy to same location in output.\n\"\"\"\n\nimport numpy as np\n\ndef find_clusters(grid):\n    \"\"\"Finds clusters of connected non-zero pixels.\"\"\"\n    clusters = []\n    visited = set()\n    rows, cols = grid.shape\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def dfs(r, c, cluster):\n        if (r, c) in visited or not is_valid(r, c) or grid[r, c] == 0:\n            return\n        visited.add((r, c))\n        cluster.append((r, c, grid[r, c]))\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            dfs(r + dr, c + dc, cluster)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and (r, c) not in visited:\n                cluster = []\n                dfs(r, c, cluster)\n                clusters.append(cluster)\n    return clusters\n\ndef move_cluster(cluster, dr, dc):\n    \"\"\"Moves a cluster by (dr, dc).\"\"\"\n    moved_cluster = []\n    for r, c, val in cluster:\n        moved_cluster.append((r + dr, c + dc, val))\n    return moved_cluster\n\ndef is_cross_shape(cluster):\n    \"\"\"Checks if a cluster is cross-shaped (orange/blue/orange).\"\"\"\n    if len(cluster) != 5:\n        return False\n    \n    blue_count = sum(1 for _, _, val in cluster if val == 1)\n    if blue_count != 1:\n        return False\n\n    orange_count = sum(1 for _, _, val in cluster if val == 7)\n    if orange_count != 4:\n        return False\n\n    # Find the blue cell\n    blue_r, blue_c = None, None\n    for r, c, val in cluster:\n        if val == 1:\n            blue_r, blue_c = r, c\n            break\n    \n    # Check for orange cells around the blue\n    neighbors = [(blue_r - 1, blue_c), (blue_r + 1, blue_c), (blue_r, blue_c - 1), (blue_r, blue_c + 1)]\n    orange_neighbors = 0\n    for r, c, val in cluster:\n      if (r,c) in neighbors:\n        orange_neighbors +=1\n\n    return orange_neighbors == 4\n\ndef transform(input_grid):\n    # Initialize output grid\n    output_grid = np.zeros_like(input_grid)\n    \n    clusters = find_clusters(input_grid)\n\n    for cluster in clusters:\n        first_cell_color = cluster[0][2]\n\n        if first_cell_color == 3:\n            # Move the green cluster down and left.\n            moved_cluster = move_cluster(cluster, 1, -1)\n            # Find red cells *within the moved cluster*\n            red_cells = []\n            for r, c, val in moved_cluster:\n                if val == 2:\n                    red_cells.append((r, c))\n            # Copy the moved cluster to the output grid\n            for r, c, val in moved_cluster:\n                if 0 <= r < output_grid.shape[0] and 0 <= c < output_grid.shape[1]:\n                    output_grid[r,c] = val\n            # Place an additional 3 to the right of the red cells in *moved* cluster\n            for r, c in red_cells:\n                new_r, new_c = r, c + 1\n                if 0 <= new_r < output_grid.shape[0] and 0 <= new_c < output_grid.shape[1]:\n                    output_grid[new_r, new_c] = 3\n\n        elif is_cross_shape(cluster):\n            # Move cross-shaped cluster up.\n            moved_cluster = move_cluster(cluster, -1, 0)\n            for r, c, val in moved_cluster:\n                if 0 <= r < output_grid.shape[0] and 0 <= c < output_grid.shape[1]:\n                    output_grid[r, c] = val\n\n        else:\n            # Copy any others (no movement)\n            for r, c, val in cluster:\n                if 0 <= r < output_grid.shape[0] and 0 <= c < output_grid.shape[1]:\n                    output_grid[r,c] = val\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4006,
    "candidates_token_count": 1260,
    "total_token_count": 5266,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.883305,
  "response_file": "008-response.json"
}