import numpy as np

def find_objects(grid):
    """Finds objects (non-white connected pixels) in the grid."""
    objects = {}
    visited = set()

    def dfs(r, c, color, obj_coords):
        """Depth-first search to find connected components."""
        if (r, c) in visited or not (0 <= r < grid.shape[0] and 0 <= c < grid.shape[1]) or grid[r, c] != color:
            return
        visited.add((r, c))
        obj_coords.append((r, c))
        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
            dfs(r + dr, c + dc, color, obj_coords)

    for r in range(grid.shape[0]):
        for c in range(grid.shape[1]):
            color = grid[r, c]
            if color != 0 and (r, c) not in visited:
                obj_coords = []
                dfs(r, c, color, obj_coords)
                if color not in objects:
                    objects[color] = []
                objects[color].append(obj_coords)
    return objects

def object_centroid(obj_coords):
    """Calculates the centroid of an object."""
    return np.mean(obj_coords, axis=0)
def report(grid):
    report = ""
    objects = find_objects(grid)
    for color, object_list in objects.items():
        for i, obj_coords in enumerate(object_list):
            centroid = object_centroid(obj_coords)
            report += f"  Object {i+1} (Color {color}):\n"
            report += f"    Coordinates: {obj_coords}\n"
            report += f"    Centroid: {centroid}\n"

    return report
def compare(inp, out):
    report_str = "Input Grid Report:\n"
    report_str += report(inp)
    report_str += "\nOutput Grid Report:\n"
    report_str += report(out)
    return report_str

examples = task_data["train"]
reports = []
for i, example in enumerate(examples):
    inp = np.array(example["input"])
    out = np.array(example["output"])

    report_str = compare(inp, out)
    reports.append(f"Example {i +1}: \n" + report_str)
print("\\n---\\n".join(reports))