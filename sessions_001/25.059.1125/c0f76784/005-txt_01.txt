import numpy as np

# Provided transform function and helper functions (find_contiguous_regions, find_inner_pixels) would go here
# I am assuming those functions are correctly defined as in the problem description.

def analyze_example(input_grid, expected_output, transform_func):
    """Analyzes a single example and prints relevant information."""
    actual_output = transform_func(input_grid)
    print("Input Grid:")
    print(input_grid)
    print("Expected Output:")
    print(expected_output)
    print("Actual Output:")
    print(actual_output)
    print("Differences (Expected != Actual):")
    diff = (expected_output != actual_output)
    print(diff)
    print("Difference indices:", np.where(diff))
    print("Expected values at difference:", expected_output[diff])
    print("Actual values at difference:", actual_output[diff])
    gray_regions = find_contiguous_regions(input_grid, 5)
    print("Gray regions:", gray_regions)
    for region in gray_regions:
        inner_pixels = find_inner_pixels(region, input_grid)
        print("Inner pixels in region:", inner_pixels)


# Example grids (from the problem description - replace with actual data)
example_inputs = [
    np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0],
              [0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0],
              [0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0],
              [0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 5, 0],
              [0, 5, 5, 5, 5, 5, 0, 0, 0, 5, 5, 0],
              [0, 5, 5, 5, 5, 5, 0, 0, 5, 5, 5, 0],
              [0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 0],
              [0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
    np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 5, 5, 5, 0, 0, 0],
               [0, 0, 0, 0, 5, 5, 5, 0, 0, 0],
               [0, 0, 0, 0, 5, 5, 5, 0, 0, 0],
               [0, 0, 0, 0, 5, 5, 5, 0, 0, 0],
               [0, 5, 5, 5, 5, 5, 5, 5, 5, 0],
               [0, 5, 5, 5, 5, 5, 5, 5, 5, 0],
               [0, 5, 5, 5, 5, 5, 5, 5, 5, 0],
               [0, 5, 5, 5, 5, 5, 5, 5, 5, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
    np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])
]

example_outputs = [
    np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0],
              [0, 5, 8, 8, 8, 5, 0, 0, 0, 0, 0, 0],
              [0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0],
              [0, 5, 5, 5, 6, 5, 0, 0, 0, 0, 5, 0],
              [0, 5, 5, 5, 5, 5, 0, 0, 0, 5, 5, 0],
              [0, 5, 5, 5, 5, 5, 0, 0, 5, 5, 5, 0],
              [0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 0],
              [0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
    np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 5, 5, 5, 0, 0, 0],
              [0, 0, 0, 0, 5, 8, 5, 0, 0, 0],
              [0, 0, 0, 0, 5, 5, 5, 0, 0, 0],
              [0, 0, 0, 0, 5, 5, 5, 0, 0, 0],
              [0, 5, 5, 5, 5, 5, 5, 5, 5, 0],
              [0, 5, 5, 5, 5, 5, 5, 5, 5, 0],
              [0, 7, 7, 7, 7, 5, 5, 5, 5, 0],
              [0, 7, 7, 7, 7, 5, 5, 5, 5, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
    np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 5, 8, 8, 8, 5, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 5, 5, 6, 5, 5, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])
]

for i in range(len(example_inputs)):
    print(f"\n--- Example {i+1} ---")
    analyze_example(example_inputs[i], example_outputs[i], transform)
