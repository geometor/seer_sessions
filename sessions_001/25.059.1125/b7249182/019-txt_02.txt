import numpy as np

def find_non_zero_pixels(grid):
    """Finds the coordinates and values of non-zero pixels in a grid."""
    non_zero_pixels = []
    for row_index, row in enumerate(grid):
        for col_index, value in enumerate(row):
            if value != 0:
                non_zero_pixels.append(((row_index, col_index), value))
    return non_zero_pixels

def create_cross(grid, center, value):
    """Creates a cross shape in the grid centered at the given coordinates."""
    row, col = center
    height, width = grid.shape

    # Horizontal part of the cross (3 pixels wide)
    for i in range(max(0, col - 1), min(width, col + 2)):
        grid[row, i] = value

    # Vertical part of the cross (3 pixels high)
    for i in range(max(0, row - 1), min(height, row + 2)):
        grid[i, col] = value


def transform(input_grid):
    """Transforms the input grid according to the described rule."""

    # Initialize output grid as all zeros
    output_grid = np.zeros_like(input_grid)

    # Find non-zero pixels
    non_zero_pixels = find_non_zero_pixels(input_grid)

    # Create crosses for each non-zero pixel
    for (row, col), value in non_zero_pixels:
        create_cross(output_grid, (row, col), value)

    return output_grid

def calculate_metrics(input_grid, expected_output_grid, predicted_output_grid):
    input_grid = np.array(input_grid)
    expected_output_grid = np.array(expected_output_grid)
    predicted_output_grid = np.array(predicted_output_grid)

    input_non_zero_count = np.count_nonzero(input_grid)
    expected_non_zero_count = np.count_nonzero(expected_output_grid)
    predicted_non_zero_count = np.count_nonzero(predicted_output_grid)

    correct_pixels = np.sum(predicted_output_grid == expected_output_grid)
    total_pixels = expected_output_grid.size
    accuracy = correct_pixels / total_pixels if total_pixels > 0 else 0.0

    return {
        "input_non_zero_count": input_non_zero_count,
        "expected_non_zero_count": expected_non_zero_count,
        "predicted_non_zero_count": predicted_non_zero_count,
        "correct_pixels": correct_pixels,
        "total_pixels": total_pixels,
        "accuracy": accuracy,
    }

task = {
    "train": [
        {
            "input": [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]],
            "output": [[0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1], [0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0]],
        },
        {
            "input": [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0]],
            "output": [[0, 0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 2], [0, 0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 2, 0]],
        },
        {
            "input": [[8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8]],
            "output": [[8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8]],
        },
        {
            "input": [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]],
            "output": [[0, 0, 0, 0, 0, 0, 4, 0], [0, 0, 0, 0, 0, 0, 4, 0], [0, 0, 0, 0, 0, 0, 4, 0], [0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0]],
        },
    ]
}

results = []
for example in task['train']:
  input_grid = example['input']
  expected_output_grid = example['output']
  predicted_output_grid = transform(input_grid)
  metrics = calculate_metrics(input_grid, expected_output_grid, predicted_output_grid)
  results.append(metrics)
  print(f"Example: {len(results)}")
  print(f"Input:\n{np.array(input_grid)}")
  print(f"Expected Output:\n{np.array(expected_output_grid)}")
  print(f"Predicted Output:\n{predicted_output_grid}")
  print(f"Metrics: {metrics}")
  print("-" * 20)

print(results)