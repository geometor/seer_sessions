{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Non-Zero Pixels:** Find all pixels in the input grid that have a value other than 0.\n2.  **Horizontal Line Extension**: For each row containing a non-zero pixel, extend a horizontal line of the same color across the entire row in the output grid.\n3. **Vertical Line Extension (Limited):** If a non-zero pixel does not extend vertically beyond 1, it is extended.\n\n\"\"\"\n\nimport numpy as np\n\ndef find_non_zero_pixels(grid):\n    \"\"\"Finds the coordinates and values of non-zero pixels in a grid.\"\"\"\n    non_zero_pixels = []\n    for row_index, row in enumerate(grid):\n        for col_index, value in enumerate(row):\n            if value != 0:\n                non_zero_pixels.append(((row_index, col_index), value))\n    return non_zero_pixels\n\ndef extend_horizontally(grid, row, value):\n    \"\"\"Extends a horizontal line across the entire row.\"\"\"\n    for col_index in range(grid.shape[1]):\n        grid[row, col_index] = value\n\ndef extend_vertically(grid, col, value, start_row, end_row):\n    \"\"\"Extends a line vertically from a given column\"\"\"\n    for i in range(start_row, end_row + 1):\n       grid[i,col] = value\n    \n\ndef transform(input_grid):\n    # Initialize output grid as all zeros\n    output_grid = np.zeros_like(input_grid)\n    input_grid = np.array(input_grid)\n\n    non_zero_pixels = find_non_zero_pixels(input_grid)\n\n    # Extend lines horizontally\n    for (row, col), value in non_zero_pixels:\n      extend_horizontally(output_grid, row, value)\n    \n    # Extend some lines vertically\n    for (row, col), value in non_zero_pixels:\n      if output_grid[row,col] == value:\n        row_values = input_grid[row,:]\n        if np.count_nonzero(row_values) == 1:\n          # find extents for vertical line\n          found = False\n          for r_idx in range(input_grid.shape[0]):\n            if input_grid[r_idx,col] != 0:\n               if not found:\n                  start_row = r_idx\n                  found = True\n               end_row = r_idx\n          \n          extend_vertically(output_grid, col, value, start_row, end_row)\n        \n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3962,
    "candidates_token_count": 607,
    "total_token_count": 4569,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.075078,
  "response_file": "020-response.json"
}