{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Preserve Magenta:** Copy all magenta (6) pixels from the input to the output without changes.\n2.  **Identify Key Pixels**: A pixel is a \"key\" pixel if it is either blue (1) or red (2) AND has at least one adjacent (up, down, left, or right) white (0) pixel.\n3.  **Expand Around Key Pixels**:\n    *   If a key pixel is blue (1), change any adjacent white (0) pixels to orange (7).\n    *   If a key pixel is red (2), change any adjacent white (0) pixels to yellow (4).\n4.  **All Other Pixels**: Pixels that are not magenta and are not adjacent to a *key* pixel remain unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, row, col):\n    \"\"\"\n    Returns a list of valid neighbor coordinates (up, down, left, right).\n    \"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    if row > 0:\n        neighbors.append((row - 1, col))  # Up\n    if row < rows - 1:\n        neighbors.append((row + 1, col))  # Down\n    if col > 0:\n        neighbors.append((row, col - 1))  # Left\n    if col < cols - 1:\n        neighbors.append((row, col + 1))  # Right\n    return neighbors\n\ndef is_key_pixel(grid, row, col):\n    \"\"\"\n    Checks if a pixel is a \"key\" pixel (blue or red with at least one white neighbor).\n    \"\"\"\n    if grid[row, col] not in (1, 2):\n        return False\n\n    neighbors = get_neighbors(grid, row, col)\n    for r, c in neighbors:\n        if grid[r, c] == 0:\n            return True  # At least one white neighbor\n\n    return False\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the specified rules.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    for row in range(rows):\n        for col in range(cols):\n            # Preserve Magenta\n            if input_grid[row, col] == 6:\n                continue\n\n            if is_key_pixel(input_grid, row, col):\n                neighbors = get_neighbors(input_grid, row, col)\n                if input_grid[row, col] == 1:  # Blue key pixel\n                    for r, c in neighbors:\n                        if input_grid[r, c] == 0:\n                            output_grid[r, c] = 7  # Change to orange\n                elif input_grid[row, col] == 2:  # Red key pixel\n                    for r, c in neighbors:\n                        if input_grid[r, c] == 0:\n                            output_grid[r, c] = 4  # Change to yellow\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 779,
            "end_index": 1071,
            "uri": "https://github.com/Kaeltherol/Minesweeper",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6620,
    "candidates_token_count": 707,
    "total_token_count": 7327,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.706124,
  "response_file": "018-response.json"
}