{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nFills the area enclosed by a blue shape, starting from a red seed pixel, with red.\nCorrectly handles disjoint blue shapes by identifying the one containing the red seed.\nUses a ray-casting algorithm to accurately determine which pixels are inside the blue shape.\n\"\"\"\n\nimport numpy as np\n\ndef find_object(grid, color):\n    \"\"\"Finds coordinates of all pixels of the specified color.\"\"\"\n    coords = np.argwhere(grid == color)\n    return coords\n\ndef find_enclosing_shape(grid, seed_row, seed_col, shape_color):\n    \"\"\"\n    Finds the shape of a specific color that encloses the seed point.\n    Uses a flood-fill-like approach to identify connected components.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n    shape_coords = []\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def dfs(r, c):\n        if not is_valid(r, c) or visited[r, c] or grid[r, c] != shape_color:\n            return\n\n        visited[r, c] = True\n        shape_coords.append((r, c))\n\n        dfs(r + 1, c)\n        dfs(r - 1, c)\n        dfs(r, c + 1)\n        dfs(r, c - 1)\n\n    dfs(seed_row, seed_col)\n    return shape_coords\n\ndef is_within_shape(row, col, shape_coords):\n    \"\"\"\n    Checks if a given (row, col) is within the bounds of a shape defined by\n    shape_coords using the ray-casting algorithm.\n    \"\"\"\n    if (row, col) in shape_coords:\n        return False\n\n    intersections = 0\n    x, y = col, row  # For ray-casting, treat row as y and col as x\n\n    for i in range(len(shape_coords)):\n        x1, y1 = shape_coords[i][1], shape_coords[i][0]\n        x2, y2 = shape_coords[(i + 1) % len(shape_coords)][1], shape_coords[(i + 1) % len(shape_coords)][0]\n\n        if (y1 <= y < y2 or y2 <= y < y1) and \\\n           x < (x2 - x1) * (y - y1) / (y2 - y1) + x1:\n            intersections += 1\n\n    return intersections % 2 == 1\n\n\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of the input_grid.\n    output_grid = np.copy(input_grid)\n\n    # Find the red pixel (seed).\n    red_coords = find_object(input_grid, 2)\n    if len(red_coords) == 0:\n        return output_grid  # If no red pixel, return the original grid\n\n    red_row, red_col = red_coords[0]\n\n    # Find the blue shape containing the red seed.\n    enclosing_blue_shape_coords = find_enclosing_shape(input_grid, red_row, red_col, 1)\n\n    #if there is no blue shape containing the red seed, return grid\n    if not enclosing_blue_shape_coords:\n        return output_grid\n   \n    #Fill using ray-casting\n    rows, cols = output_grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            if output_grid[r, c] == 0 and is_within_shape(r, c, enclosing_blue_shape_coords):\n                output_grid[r,c] = 2\n\n    output_grid[red_row, red_col] = 2 #ensure that original red pixel is red\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4684,
    "candidates_token_count": 914,
    "total_token_count": 5598,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.447163,
  "response_file": "008-response.json"
}