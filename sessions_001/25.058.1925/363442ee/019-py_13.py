import numpy as np

def describe_grid(grid):
    """Provides a basic description of a grid."""
    height, width = grid.shape
    unique_colors = np.unique(grid)
    color_counts = {color: np.sum(grid == color) for color in unique_colors}
    return f"Dimensions: {height}x{width}, Unique Colors: {unique_colors}, Color Counts: {color_counts}"

def analyze_example(input_grid, output_grid):
    """Analyzes a single input-output pair."""
    print("Input Grid:")
    print(describe_grid(np.array(input_grid)))
    print("\nOutput Grid:")
    print(describe_grid(np.array(output_grid)))
    print("\nDifferences:")
    diff = np.array(input_grid) != np.array(output_grid)
    print(f"Number of differing pixels: {np.sum(diff)}")
    print("Locations of differing pixels (row, col):\n")
    if np.sum(diff) > 0:  # Only print if there are differences
        for r,c in np.array(np.where(diff)).T:
            print(f"({r},{c})")
    print("-" * 40)
    
def compare_with_previous_code(input, output):
    # run transform on input, and compare with expected output
    result = transform(input)
    print("Output From Previous Code:")
    print(describe_grid(np.array(result)))
    print("\nDifferences with expected output:")
    diff = np.array(result) != np.array(output)
    print(f"Number of differing pixels: {np.sum(diff)}")
    print("Locations of differing pixels (row, col):\n")
    if np.sum(diff) > 0:
        for r, c in np.array(np.where(diff)).T:
            print(f"({r},{c})")    
    print("-" * 40)

examples = [
    ([[5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]], [[5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]]),
    ([[8, 8, 8, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 8]], [[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]]),
    ([[6, 1, 2, 6, 1, 2, 6, 1, 2, 6, 1, 2], [1, 2, 6, 1, 2, 6, 1, 2, 6, 1, 2, 6], [2, 6, 1, 2, 6, 1, 2, 6, 1, 2, 6, 1], [6, 1, 2, 6, 1, 2, 6, 1, 2, 6, 1, 2], [1, 2, 6, 1, 2, 6, 1, 2, 6, 1, 2, 6], [2, 6, 1, 2, 6, 1, 2, 6, 1, 2, 6, 1], [6, 1, 2, 6, 1, 2, 6, 1, 2, 6, 1, 2], [1, 2, 6, 1, 2, 6, 1, 2, 6, 1, 2, 6], [2, 6, 1, 2, 6, 1, 2, 6, 1, 2, 6, 1]], [[6, 1, 2, 6, 1, 2, 6, 1, 2, 6, 1, 2], [1, 2, 6, 1, 2, 6, 1, 2, 6, 1, 2, 6], [2, 6, 1, 2, 6, 1, 2, 6, 1, 2, 6, 1], [6, 1, 2, 6, 1, 2, 6, 1, 2, 6, 1, 2], [1, 2, 6, 1, 2, 6, 1, 2, 6, 1, 2, 6], [2, 6, 1, 2, 6, 1, 2, 6, 1, 2, 6, 1], [6, 1, 2, 6, 1, 2, 6, 1, 2, 6, 1, 2], [1, 2, 6, 1, 2, 6, 1, 2, 6, 1, 2, 6], [2, 6, 1, 2, 6, 1, 2, 6, 1, 2, 6, 1]]),
    ([[1, 2, 3, 4, 5, 6, 7, 8, 9, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [9, 0, 1, 2, 3, 4, 5, 6, 7, 8], [8, 9, 0, 1, 2, 3, 4, 5, 6, 7], [7, 8, 9, 0, 1, 2, 3, 4, 5, 6], [6, 7, 8, 9, 0, 1, 2, 3, 4, 5], [5, 6, 7, 8, 9, 0, 1, 2, 3, 4], [4, 5, 6, 7, 8, 9, 0, 1, 2, 3], [3, 4, 5, 6, 7, 8, 9, 0, 1, 2], [2, 3, 4, 5, 6, 7, 8, 9, 0, 1]], [[2, 3, 4, 5, 6, 7, 8, 9, 0, 1], [3, 4, 5, 6, 7, 8, 9, 0, 1, 2], [4, 5, 6, 7, 8, 9, 0, 1, 2, 3], [5, 6, 7, 8, 9, 0, 1, 2, 3, 4], [6, 7, 8, 9, 0, 1, 2, 3, 4, 5], [7, 8, 9, 0, 1, 2, 3, 4, 5, 6], [8, 9, 0, 1, 2, 3, 4, 5, 6, 7], [9, 0, 1, 2, 3, 4, 5, 6, 7, 8], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]]),
    ([[2, 5, 2, 2, 2, 2, 2, 2, 2, 2], [5, 2, 5, 5, 5, 5, 5, 5, 5, 5], [2, 5, 2, 2, 2, 2, 2, 2, 2, 2], [2, 5, 2, 2, 2, 2, 2, 2, 2, 2], [2, 5, 2, 2, 2, 2, 2, 2, 2, 2], [2, 5, 2, 2, 2, 2, 2, 2, 2, 2], [2, 5, 2, 2, 2, 2, 2, 2, 2, 2], [2, 5, 2, 2, 2, 2, 2, 2, 2, 2], [2, 5, 2, 2, 2, 2, 2, 2, 2, 2], [2, 5, 2, 2, 2, 2, 2, 2, 2, 2]], [[2, 5, 2, 2, 2, 2, 2, 2, 2, 2], [5, 2, 5, 5, 5, 5, 5, 5, 5, 5], [2, 5, 2, 2, 2, 2, 2, 2, 2, 2], [2, 5, 2, 2, 2, 2, 2, 2, 2, 2], [2, 5, 2, 2, 2, 2, 2, 2, 2, 2], [2, 5, 2, 2, 2, 2, 2, 2, 2, 2], [2, 5, 2, 2, 2, 2, 2, 2, 2, 2], [2, 5, 2, 2, 2, 2, 2, 2, 2, 2], [2, 5, 2, 2, 2, 2, 2, 2, 2, 2], [2, 5, 2, 2, 2, 2, 2, 2, 2, 2]])
]

for i, (input_grid, output_grid) in enumerate(examples):
    print(f"Example {i + 1}:")
    analyze_example(input_grid, output_grid)
    compare_with_previous_code(input_grid, output_grid)