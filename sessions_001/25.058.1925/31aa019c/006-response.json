{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify the Target Pixel:** Find the *first* non-zero pixel in the input grid, scanning from top-to-bottom and left-to-right within each row. It doesn't matter *what* the non-zero value is, just that it is not zero.\n\n2.  **Create Highlighted Region:** Create a 3x3 square region centered on the target pixel.\n\n3.  **Color Highlighted Region:** Fill the entire 3x3 square with red (value 2), *except* for the center pixel.\n\n4.  **Preserve Center Pixel:** The center pixel of the 3x3 square retains its original color from the input grid.\n\n5.  **Clear Background:** Set all pixels outside the 3x3 square to 0 (white).\n\"\"\"\n\nimport numpy as np\n\ndef find_target_pixel(grid):\n    \"\"\"Finds the target pixel coordinates (top-left priority).\"\"\"\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0:\n                return (r, c)  # Return immediately when the first is found\n    return None\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the defined rules.\"\"\"\n    grid = np.array(input_grid)\n    output_grid = np.zeros_like(grid)\n\n    # 1. Find the target pixel (top-left priority)\n    target_pixel = find_target_pixel(grid)\n\n    if target_pixel is not None:\n        # 2. Create highlighted region (3x3 square)\n        r, c = target_pixel\n        min_r = max(0, r - 1)\n        max_r = min(grid.shape[0], r + 2)\n        min_c = max(0, c - 1)\n        max_c = min(grid.shape[1], c + 2)\n\n        # 3. & 4. Color highlighted region and preserve center\n        center_color = grid[r, c]\n        for i in range(min_r, max_r):\n            for j in range(min_c, max_c):\n                output_grid[i, j] = 2  # Red\n        output_grid[r, c] = center_color\n\n    # 5. Clear background (already done by initializing output_grid to zeros)\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4862,
    "candidates_token_count": 568,
    "total_token_count": 5430,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 5.255263,
  "response_file": "006-response.json"
}