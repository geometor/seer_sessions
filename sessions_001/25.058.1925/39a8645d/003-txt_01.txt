import numpy as np

def get_largest_object(grid):
    """
    Finds the largest connected component of a single non-zero color, excluding single pixels.
    """
    visited = np.zeros_like(grid, dtype=bool)
    max_size = 0
    max_object_color = 0
    max_object_coords = []

    def dfs(row, col, color, coords):
        if (
            row < 0
            or row >= grid.shape[0]
            or col < 0
            or col >= grid.shape[1]
            or visited[row, col]
            or grid[row, col] != color
        ):
            return 0
        visited[row, col] = True
        coords.append((row, col))
        size = 1
        size += dfs(row + 1, col, color, coords)
        size += dfs(row - 1, col, color, coords)
        size += dfs(row, col + 1, color, coords)
        size += dfs(row, col - 1, color, coords)
        return size

    for r in range(grid.shape[0]):
        for c in range(grid.shape[1]):
            if grid[r, c] != 0 and not visited[r, c]:
                coords = []
                size = dfs(r, c, grid[r, c], coords)
                if size > max_size and size > 1: # ignore isolated pixels
                  max_size = size
                  max_object_color = grid[r,c]
                  max_object_coords = coords
                elif size == max_size and size > 1: # there is only 1 prominent object.
                  pass

    return max_object_color, max_object_coords

def analyze_results(task_data):
  analysis = []
  for example in task_data['train']:
        input_grid = np.array(example['input'])
        output_grid = np.array(example['output'])
        
        pred_output = transform(input_grid.tolist())

        color, coords = get_largest_object(input_grid)
        centroid_row = 0
        centroid_col = 0
        if coords:
          centroid_row = int(sum(coord[0] for coord in coords) / len(coords))
          centroid_col = int(sum(coord[1] for coord in coords) / len(coords))


        analysis.append(
            {
                "input_shape": input_grid.shape,
                "output_shape": output_grid.shape,
                "largest_object_color": color,
                "largest_object_coords": coords,
                "largest_object_size": len(coords) if coords else 0,
                'centroid': (centroid_row, centroid_col),
                'correct': np.array_equal(output_grid,pred_output)
            }
        )
  return analysis

task_data_0 = {
    "train": [
        {
            "input": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            ],
            "output": [
                [0, 0, 0],
                [0, 8, 8],
                [0, 8, 8],
            ],
        }
    ]
}

task_data_1 = {
    "train": [
        {
            "input": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            ],
            "output": [
                [0, 0, 0],
                [0, 2, 2],
                [2, 2, 0],
            ],
        }
    ]
}

task_data_2 = {
    "train": [
        {
            "input": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            ],
            "output": [
                [0, 0, 0],
                [0, 4, 4],
                [4, 4, 0],
            ],
        }
    ]
}

task_data_3 = {
    "train": [
        {
            "input": [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 4, 4, 0, 0],
                [0, 0, 0, 0, 0, 0, 4, 4, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            ],
            "output": [
                [0, 4, 4],
                [0, 4, 4],
                [0, 0, 0],
            ],
        }
    ]
}

task_data_4 = {
    "train": [
        {
            "input": [
                [0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 6, 0, 0, 0, 0],
                [0, 0, 6, 6, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0],
            ],
            "output": [
                [0, 6, 0],
                [6, 6, 0],
                [0, 0, 0],
            ],
        }
    ]
}
all_task_data = [task_data_0, task_data_1, task_data_2, task_data_3, task_data_4]
reports = []
for task_data in all_task_data:
  report = analyze_results(task_data)
  reports.append(report)
print(reports)