observations:
  - example: 1
    input_objects:
      - color: 1
        shape: irregular
        center: [10, 10]
        neighbors: [[9,9], [9, 10], [9, 11], [10, 9], [10, 11], [11, 9], [11, 10], [11, 11]]
    output_objects:
      - color: 1
        shape: rectangle
        bounding_box: [9, 11, 9, 11]

  - example: 2
    input_objects:
      - color: 6
        shape: irregular
        center: [5, 5]
        neighbors: [] # empty - no neighbors
    output_objects:
      - color: 6
        shape: rectangle
        bounding_box: [5, 5, 5, 5]

  - example: 3
    input_objects:
      - color: 8
        shape: line
        center: [9, 9]
        neighbors: [[9,8], [9, 10]]

    output_objects: # output is framed input, with bounding box centered
      - color: 8
        shape: rectangle
        bounding_box: [9,10,9,10]

  - example: 4
    input_objects:
      - color: 2 # top left
        shape: rectangle
        center: [2,3]
        neighbors: []
      - color: 1 # bottom right
        shape: rectangle
        center: [10, 12]
        neighbors: []
    output_objects: # output is framed input with bounding box centered
      - color: 2
        shape: rectangle
        bounding_box: [2, 2, 3, 3]
      - color: 1
        shape: rectangle
        bounding_box: [10, 10, 12, 12]

transformation_rules:
  - rule: "Output grid is a framed version of the input grid."
  - rule: "Frame is one pixel wide and color yellow (4)."
  - rule: "Inside of the frame is filled with green (3)."
  - rule: "For each object in the input grid, find its bounding box."
  - rule: "Fill the corresponding bounding box in the output grid with the object's center color."
  - rule: "If bounding boxes overlap, the color from the object with the lowest and right-most center takes precedence."
  - rule: "If object does not have neighbors, bounding box is a single pixel - the center."