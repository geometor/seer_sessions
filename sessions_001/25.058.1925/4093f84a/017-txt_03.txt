import numpy as np

def compare_grids(grid1, grid2):
    """Compares two grids and returns a grid highlighting the differences."""
    if grid1.shape != grid2.shape:
        return "Grids have different shapes"
    diff_grid = np.where(grid1 == grid2, 0, grid1)
    return diff_grid

# Example Data (replace with actual data from the task)

examples = [
    {
        "input": np.array([[5, 5, 5, 5, 5, 5, 5, 5, 5],
                           [5, 5, 5, 5, 5, 5, 5, 5, 5],
                           [1, 1, 5, 5, 5, 5, 5, 1, 1],
                           [1, 1, 1, 5, 5, 5, 1, 1, 1],
                           [1, 1, 1, 1, 5, 1, 1, 1, 1],
                           [5, 5, 5, 5, 5, 5, 5, 5, 5],
                           [5, 5, 5, 5, 5, 5, 5, 5, 5]]),
        "output": np.array([[5, 5, 5, 5, 5, 5, 5, 5, 5],
                            [5, 5, 5, 5, 5, 5, 5, 5, 5],
                            [5, 5, 5, 5, 5, 5, 5, 5, 5],
                            [5, 5, 5, 5, 5, 5, 5, 5, 5],
                            [5, 5, 5, 5, 5, 5, 5, 5, 5],
                            [5, 5, 5, 5, 5, 5, 5, 5, 5],
                            [5, 5, 5, 5, 5, 5, 5, 5, 5]]),
    },
    {
        "input": np.array([[1, 1, 5, 5, 5, 5, 5, 1, 1],
                           [1, 1, 5, 5, 5, 5, 5, 1, 1],
                           [5, 5, 5, 5, 5, 5, 5, 5, 5],
                           [5, 5, 5, 5, 5, 5, 5, 5, 5],
                           [1, 1, 5, 5, 5, 5, 5, 1, 1],
                           [1, 1, 5, 5, 5, 5, 5, 1, 1],
                           [5, 5, 5, 5, 5, 5, 5, 5, 5]]),
        "output": np.array([[5, 5, 5, 5, 5, 5, 5, 5, 5],
                            [5, 5, 5, 5, 5, 5, 5, 5, 5],
                            [5, 5, 5, 5, 5, 5, 5, 5, 5],
                            [5, 5, 5, 5, 5, 5, 5, 5, 5],
                            [5, 5, 5, 5, 5, 5, 5, 5, 5],
                            [5, 5, 5, 5, 5, 5, 5, 5, 5],
                            [5, 5, 5, 5, 5, 5, 5, 5, 5]]),
    },
    {
        "input": np.array([[5, 5, 5, 5, 5],
                           [5, 1, 5, 1, 5],
                           [5, 5, 5, 5, 5],
                           [5, 1, 5, 1, 5],
                           [5, 5, 5, 5, 5]]),
        "output": np.array([[5, 5, 5, 5, 5],
                            [5, 5, 5, 5, 5],
                            [5, 5, 5, 5, 5],
                            [5, 5, 5, 5, 5],
                            [5, 5, 5, 5, 5]]),
    }

]

def transform(input_grid):
    """
    Transforms the input grid according to the observed rules.
    """
    output_grid = np.copy(input_grid).astype(int)

    # Find the two rows of gray pixels (assuming they are always present and full rows)
    rows_with_gray = []
    for i, row in enumerate(input_grid):
        if np.all(row == 5):
            rows_with_gray.append(i)

    # Copy the gray rows to the output grid
    for row_index in rows_with_gray:
        output_grid[row_index, :] = 5
        
    # Iterate through the input grid and replace blue with gray
    for i in range(input_grid.shape[0]):
        for j in range(input_grid.shape[1]):
            if input_grid[i, j] == 1:
                output_grid[i, j] = 5

    return output_grid

results = []
for i, example in enumerate(examples):
  generated_output = transform(example["input"])
  diff = compare_grids(example["output"], generated_output)
  results.append(
      {
          "example_index": i,
          "input_shape": example["input"].shape,
          "output_shape": example["output"].shape,
          "generated_output_shape": generated_output.shape,
          "diff_shape": diff.shape if isinstance(diff, np.ndarray) else "N/A",
          "diff_pixels": np.sum(diff != 0) if isinstance(diff, np.ndarray) else diff,
          "blue_pixels_input": np.sum(example["input"] == 1),
          "grey_pixels_input": np.sum(example["input"] == 5),
          "blue_pixels_output": np.sum(example["output"] == 1),
      }
  )
print(results)