{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. Identify Non-Background Pixels: Locate all pixels in the input grid that are not the background color (white, represented by 0).\n2. Rotate: Rotate the set of identified pixels 90 degrees clockwise.\n3. Construct output grid: Create output grid of sufficient size to contain the rotated pixels.\n4. Render Output: Place the rotated pixels, using their original colors, into the output grid.\n\"\"\"\n\nimport numpy as np\n\ndef get_non_background_pixels(grid):\n    \"\"\"Returns a list of (row, col, color) tuples for non-background pixels.\"\"\"\n    grid = np.array(grid)\n    non_background_indices = np.argwhere(grid != 0)\n    return [(row, col, grid[row, col]) for row, col in non_background_indices]\n\ndef rotate_point(point, origin, angle_degrees):\n    \"\"\"Rotate a point around an origin by a given angle in degrees.\"\"\"\n    angle_radians = np.radians(angle_degrees)\n    ox, oy = origin\n    px, py = point\n\n    qx = ox + np.cos(angle_radians) * (px - ox) - np.sin(angle_radians) * (py - oy)\n    qy = oy + np.sin(angle_radians) * (px - ox) + np.cos(angle_radians) * (py - oy)\n    return int(round(qx)), int(round(qy))\n\ndef transform(input_grid):\n    # 1. Identify Non-Background Pixels\n    input_pixels = get_non_background_pixels(input_grid)\n\n    # 2. Rotate\n    # Determine the centroid of the non-background pixels for rotation\n    if not input_pixels:  # Handle empty input\n        return np.zeros_like(input_grid).tolist()\n        \n    rows, cols, _ = zip(*input_pixels)\n    centroid_row = int(np.mean(rows))\n    centroid_col = int(np.mean(cols))\n    centroid = (centroid_row, centroid_col)\n    \n    rotated_pixels = []\n    for row, col, color in input_pixels:\n        rotated_row, rotated_col = rotate_point((row, col), centroid, 90)\n        rotated_pixels.append((rotated_row, rotated_col, color))\n\n    # 3. Construct output grid\n    rotated_rows, rotated_cols, _ = zip(*rotated_pixels)\n    min_row, max_row = min(rotated_rows), max(rotated_rows)\n    min_col, max_col = min(rotated_cols), max(rotated_cols)\n\n    output_grid_rows = max_row - min_row + 1\n    output_grid_cols = max_col - min_col + 1\n    output_grid = np.zeros((output_grid_rows, output_grid_cols), dtype=int)\n    \n    #4. Render Output\n    row_offset = 0 - min_row\n    col_offset = 0 - min_col\n    for rotated_row, rotated_col, color in rotated_pixels:\n      output_row = rotated_row + row_offset\n      output_col = rotated_col + col_offset\n      if 0 <= output_row < output_grid_rows and 0 <= output_col < output_grid_cols:\n        output_grid[output_row, output_col] = color\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7547,
    "candidates_token_count": 801,
    "total_token_count": 8348,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.165549,
  "response_file": "018-response.json"
}