{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Key Objects:** Find the blue rectangle. This object does not move.\n2.  **Identify moving objects:** Identify other rectangular objects and vertical lines, and their colors.\n3.  **Move Objects:** All rectangular objects of other colors below the blue rectangle should move, with the object closest to the blue one positioned immediately beneath it. The relative vertical positions of these moved objects should be maintained. Any vertical lines of other colors should move to maintain vertical order.\n4.  **Background Remains:** The background (color 0) remains unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef find_object(grid, color):\n    # Find coordinates of all pixels of the specified color.\n    coords = np.argwhere(grid == color)\n    if coords.size == 0:\n        return None  # Handle case where color is not found\n    return coords\n\ndef find_rectangle(grid, color):\n    # assumes rectangular object - returns top-left and bottom-right corners\n    coords = find_object(grid,color)\n    if coords is None:\n      return None\n    min_row, min_col = np.min(coords, axis=0)\n    max_row, max_col = np.max(coords, axis=0)\n    return (min_row, min_col), (max_row, max_col)\n\ndef is_vertical_line(coords):\n    # Check if the coordinates form a vertical line.\n    if len(coords) == 0:\n        return False\n    return len(np.unique(coords[:, 1])) == 1\n\ndef get_object_dimensions(coords):\n    # calculate width and height\n    min_row, min_col = np.min(coords, axis=0)\n    max_row, max_col = np.max(coords, axis=0)\n    width = max_col - min_col + 1\n    height = max_row - min_row + 1\n    return width, height\n\ndef move_object(grid, coords, delta_row, delta_col):\n    # move objects\n    new_coords = coords + np.array([delta_row, delta_col])\n    color = grid[coords[0][0],coords[0][1]]\n\n    # erase old\n    for r, c in coords:\n        grid[r,c] = 0\n        \n    #place in new spot\n    for r, c in new_coords:\n        grid[r,c] = color\n\n    return grid\n\ndef transform(input_grid):\n    # initialize output_grid as copy of input grid\n    output_grid = np.copy(input_grid)\n\n    # Find the blue rectangle.\n    blue_coords = find_rectangle(input_grid, 1)\n    if blue_coords is None: #handle no blue\n      return output_grid\n\n    # determine blue lowest extent\n    blue_bottom = blue_coords[1][0]\n\n    # find other objects and record\n    other_objects = []\n    for color in np.unique(input_grid):\n      if color != 0 and color !=1:\n        coords = find_object(input_grid,color)\n        width, height = get_object_dimensions(coords)\n        other_objects.append({\n            'color': color,\n            'coords': coords,\n            'width': width,\n            'height': height,\n            'top_row': np.min(coords[:, 0]),\n            'bottom_row':np.max(coords[:,0])\n        })\n\n    # sort objects by top row\n    other_objects = sorted(other_objects, key=lambda x: x['top_row'])\n\n    # move objects, preserving vertical order, stacking under the blue\n    current_row = blue_bottom + 1\n    for obj in other_objects:\n      delta_row = current_row - obj['top_row']\n      output_grid = move_object(output_grid, obj['coords'], delta_row, 0)\n      current_row += obj['height'] # move down height of this moved object\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5757,
    "candidates_token_count": 937,
    "total_token_count": 6694,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.844489,
  "response_file": "006-response.json"
}