import numpy as np

# Provided examples (replace with actual data from the prompt history)
examples = [
    {
        "input": np.array([[1, 0, 0], [1, 0, 0], [1, 1, 1], [0, 0, 0], [0, 2, 2], [0, 2, 0], [0, 2, 0]]),
        "output": np.array([[1, 0, 0], [2, 0, 0], [2, 2, 2], [0, 0, 0], [0, 1, 2], [0, 1, 0], [0, 2, 0]]),
        "predicted": np.array([[2, 0, 0], [2, 0, 0], [2, 2, 2], [0, 0, 0], [0, 1, 2], [0, 1, 0], [0, 2, 0]]),
    },
    {
        "input": np.array([[0, 0, 1, 0], [0, 1, 1, 0], [0, 0, 1, 0], [0, 0, 0, 0], [2, 2, 0, 0], [2, 0, 0, 0]]),
        "output": np.array([[0, 0, 1, 0], [0, 2, 2, 0], [0, 0, 2, 0], [0, 0, 0, 0], [1, 1, 0, 0], [1, 0, 0, 0]]),
        "predicted": np.array([[0, 0, 2, 0], [0, 2, 2, 0], [0, 0, 2, 0], [0, 0, 0, 0], [1, 1, 0, 0], [2, 0, 0, 0]]),
    },
        {
        "input": np.array([[0, 1, 0, 0], [1, 1, 0, 0], [0, 0, 0, 0], [0, 0, 2, 2], [0, 0, 2, 0]]),
        "output": np.array([[0, 1, 0, 0], [2, 2, 0, 0], [0, 0, 0, 0], [0, 0, 1, 2], [0, 0, 1, 0]]),
        "predicted": np.array([[0, 2, 0, 0], [2, 2, 0, 0], [0, 0, 0, 0], [0, 0, 1, 1], [0, 0, 2, 0]]),
    },
            {
        "input": np.array([[1, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 2, 2, 2, 0], [0, 2, 0, 0, 0]]),
        "output": np.array([[1, 0, 0, 0, 0], [2, 2, 2, 2, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 1, 0, 0, 0]]),
        "predicted": np.array([[2, 0, 0, 0, 0], [2, 2, 2, 2, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 2, 0, 0, 0]]),
    }
]


def analyze_example(example):
    input_grid = example['input']
    output_grid = example['output']
    predicted_grid = example['predicted']
    
    input_blue_pixels = np.sum(input_grid == 1)
    input_red_pixels = np.sum(input_grid == 2)
    input_white_pixels = np.sum(input_grid == 0)
    
    output_blue_pixels = np.sum(output_grid == 1)
    output_red_pixels = np.sum(output_grid == 2)
    output_white_pixels = np.sum(output_grid == 0)

    predicted_blue_pixels = np.sum(predicted_grid == 1)
    predicted_red_pixels = np.sum(predicted_grid == 2)
    predicted_white_pixels = np.sum(predicted_grid == 0)

    correct_swaps = np.sum((input_grid != output_grid) & (output_grid == predicted_grid))
    incorrect_swaps = np.sum((input_grid != output_grid) & (output_grid != predicted_grid))
    missed_swaps = np.sum((input_grid == output_grid) & (input_grid != predicted_grid))

    print(f"**Example Analysis:**")
    print(f"Input  - Blue: {input_blue_pixels}, Red: {input_red_pixels}, White: {input_white_pixels}")
    print(f"Output - Blue: {output_blue_pixels}, Red: {output_red_pixels}, White: {output_white_pixels}")
    print(f"Prediction - Blue: {predicted_blue_pixels}, Red: {predicted_red_pixels}, White: {predicted_white_pixels}")
    print(f"Correct Swaps: {correct_swaps}, Incorrect Swaps: {incorrect_swaps}, Missed Swaps: {missed_swaps}")
    print(f"Input:\n{input_grid}\nOutput:\n{output_grid}\nPredicted:\n{predicted_grid}\n---")


for example in examples:
    analyze_example(example)