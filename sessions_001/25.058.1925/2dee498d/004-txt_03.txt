import numpy as np

# Provided input and output grids for all examples
input_grids = [
    np.array([
        [7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    ]),
    np.array([
        [8, 8, 8, 8, 8, 8, 0, 0, 0],
        [8, 8, 8, 8, 8, 8, 0, 0, 0],
        [8, 8, 8, 8, 8, 8, 0, 0, 0],
        [8, 8, 8, 8, 8, 8, 0, 0, 0],
        [8, 8, 8, 8, 8, 8, 0, 0, 0],
        [8, 8, 8, 8, 8, 8, 0, 0, 0],
        [8, 8, 8, 8, 8, 8, 8, 8, 8],
        [8, 8, 8, 8, 8, 8, 8, 8, 8],
        [8, 8, 8, 8, 8, 8, 8, 8, 8]
    ]),
    np.array([
        [1, 1, 2, 2, 1, 1, 2, 2, 0, 0, 0, 0],
        [1, 1, 2, 2, 1, 1, 2, 2, 0, 0, 0, 0],
        [1, 1, 2, 2, 1, 1, 2, 2, 0, 0, 0, 0],
        [1, 1, 2, 2, 1, 1, 2, 2, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7],
        [0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7],

    ])
]
output_grids = [
    np.array([
        [7, 7, 0],
        [7, 7, 0],
        [7, 7, 0],
        [7, 7, 0],
        [7, 7, 0],
        [7, 7, 0],
    ]),
    np.array([
        [8, 8, 0],
        [8, 8, 0],
        [8, 8, 0],
        [8, 8, 0],
        [8, 8, 0],
        [8, 8, 0],
        [8, 8, 8],
        [8, 8, 8],
        [8, 8, 8]
    ]),
    np.array([
    [1, 2, 1, 2, 0],
    [1, 2, 1, 2, 0],
    [1, 2, 1, 2, 0],
    [1, 2, 1, 2, 0],
    [0, 0, 7],
    [0, 0, 7]
])
]
def transform(input_grid):
    # Initialize output grid dimensions.
    input_height = len(input_grid)
    input_width = len(input_grid[0])
    output_width = input_width // 3
    output_height = input_height
    output_grid = []

    # Iterate through rows to maintain height
    for row_index in range(output_height):
      new_row = []
      #take every third column starting at 0
      for col_index in range(0,input_width,3):
        new_row.append(input_grid[row_index][col_index])
      output_grid.append(new_row)


    return output_grid

for i, (input_grid, output_grid) in enumerate(zip(input_grids, output_grids)):
    predicted_output = transform(input_grid)
    match = np.array_equal(predicted_output, output_grid)
    print(f"Example {i+1}:")
    print(f"  Input shape: {input_grid.shape}")
    print(f"  Output shape: {output_grid.shape}")
    print(f"  Predicted output shape: {np.array(predicted_output).shape}")
    print(f"  Match: {match}")
    if not match:
        #find first row and first column that do not match
        row_diff = -1
        col_diff = -1
        for row in range(len(output_grid)):
            if row_diff > -1:
                break
            for col in range(len(output_grid[0])):
                if predicted_output[row][col] != output_grid[row][col]:
                    row_diff = row
                    col_diff = col
                    break
        print(f"  First mismatch at row: {row_diff} col: {col_diff}")

