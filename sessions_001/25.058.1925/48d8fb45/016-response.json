{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. Identify Red Clusters: Locate all contiguous clusters of red (2) pixels within the input grid.\n2. Focus on Top-Left Cluster: Select the red cluster located in the top-left region of the input grid.\n3. Determine Bounding Box: Find minimal bounding box of shape that encloses the cluster.\n4. Extract Subgrid: Extract the subgrid defined by the top-left red cluster's bounding box. This bounding box defines the output region from the input matrix. The top left starts from the first row, column.\n5. Output: The extracted subgrid is the output.\n\"\"\"\n\nimport numpy as np\n\ndef find_clusters(grid, color):\n    visited = np.zeros_like(grid, dtype=bool)\n    clusters = []\n\n    def dfs(row, col, current_cluster):\n        if (\n            row < 0\n            or row >= grid.shape[0]\n            or col < 0\n            or col >= grid.shape[1]\n            or visited[row, col]\n            or grid[row, col] != color\n        ):\n            return\n        visited[row, col] = True\n        current_cluster.append((row, col))\n        dfs(row + 1, col, current_cluster)\n        dfs(row - 1, col, current_cluster)\n        dfs(row, col + 1, current_cluster)\n        dfs(row, col - 1, current_cluster)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] == color and not visited[row, col]:\n                current_cluster = []\n                dfs(row, col, current_cluster)\n                clusters.append(current_cluster)\n    return clusters\n\ndef get_bounding_box(cluster):\n    min_row = min(cell[0] for cell in cluster)\n    max_row = max(cell[0] for cell in cluster)\n    min_col = min(cell[1] for cell in cluster)\n    max_col = max(cell[1] for cell in cluster)\n    return min_row, min_col, max_row, max_col\n\n\n\ndef transform(input_grid):\n    # 1. Identify Red Clusters\n    red_clusters = find_clusters(input_grid, 2)\n\n    # 2. Focus on Top-Left Cluster\n    if not red_clusters:\n        return np.zeros((0, 0), dtype=int)  # Return empty grid if no red clusters\n\n    top_left_cluster = min(red_clusters, key=lambda cluster: (cluster[0][0], cluster[0][1])) #find top left\n\n    # 3. Determine Bounding Box\n    min_row, min_col, max_row, max_col = get_bounding_box(top_left_cluster)\n\n    # 4. Extract Subgrid\n    output_grid = input_grid[min_row : max_row + 1, min_col : max_col + 1]\n\n    # 5. Output\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2456,
    "candidates_token_count": 715,
    "total_token_count": 3171,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.682945,
  "response_file": "016-response.json"
}