{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies 2x2 red squares and blue shapes in the input grid.\nFinds the shortest path between the centers of the red squares, \nincluding any existing blue cells.\nChanges all pixels along the shortest path to blue.\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef find_objects(grid, color):\n    \"\"\"Finds objects of a specific color in the grid.\"\"\"\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n\n    def dfs(row, col):\n        \"\"\"Depth-first search to find connected components.\"\"\"\n        if (row < 0 or row >= grid.shape[0] or col < 0 or col >= grid.shape[1] or\n                visited[row, col] or grid[row, col] != color):\n            return []\n\n        visited[row, col] = True\n        object_pixels = [(row, col)]\n\n        object_pixels.extend(dfs(row + 1, col))\n        object_pixels.extend(dfs(row - 1, col))\n        object_pixels.extend(dfs(row, col + 1))\n        object_pixels.extend(dfs(row, col - 1))\n        return object_pixels\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] == color and not visited[row, col]:\n                objects.append(dfs(row, col))\n    return objects\n\ndef find_red_squares(grid):\n    \"\"\"Finds 2x2 red squares and their centers.\"\"\"\n    red_squares = []\n    for r in range(grid.shape[0] - 1):\n        for c in range(grid.shape[1] - 1):\n            if (grid[r, c] == 2 and grid[r + 1, c] == 2 and\n                grid[r, c + 1] == 2 and grid[r + 1, c + 1] == 2):\n                center = (r + 0.5, c + 0.5)  # Calculate center\n                red_squares.append((center, [(r,c), (r+1, c), (r, c+1), (r+1, c+1)]))\n    return red_squares\n\ndef shortest_path(grid, start, end):\n    \"\"\"\n    Finds the shortest path between two points on a grid,\n    preferring existing blue cells.  Uses BFS.\n    start and end are tuples (row, col) of the *centers* of the red squares.\n    \"\"\"\n    queue = deque([(start, [start])])\n    visited = set()\n    visited.add(start)\n\n    while queue:\n        (row, col), path = queue.popleft()\n\n        # Check for Reaching Target - adjust for center vs pixel\n        if abs(row - end[0]) < 1 and abs(col - end[1]) < 1:\n            return path\n\n        # Explore Neighbors - allow diagonal\n        for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0), (1, 1), (-1, -1), (1, -1), (-1, 1)]:\n            nr, nc = int(round(row + dr)), int(round(col + dc))  # round for the path\n\n            if (0 <= nr < grid.shape[0] and 0 <= nc < grid.shape[1] and\n                (nr, nc) not in visited):\n\n                new_path = path + [(nr, nc)]\n\n                # prefer existing blue cells, but allow any color besides red\n                if grid[nr, nc] == 1:  # Blue\n                    queue.appendleft(((nr, nc), new_path)) # prioritize blue\n                    visited.add((nr,nc))\n                elif grid[nr,nc] != 2: # not red\n                    queue.append(((nr, nc), new_path))\n                    visited.add((nr,nc))\n\n    return None  # No path found\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by connecting 2x2 red squares with a blue path.\n    \"\"\"\n    # Initialize output_grid as a copy of the input_grid\n    output_grid = np.copy(input_grid)\n\n    # Find red squares and their centers\n    red_squares = find_red_squares(input_grid)\n\n    # Connect the red squares if there are exactly two\n    if len(red_squares) == 2:\n        center1, pixels1 = red_squares[0]\n        center2, pixels2 = red_squares[1]\n        path = shortest_path(input_grid, center1, center2)\n\n        if path:\n            for row, col in path:\n                output_grid[int(round(row)), int(round(col))] = 1  # Change to blue\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3043,
    "candidates_token_count": 1145,
    "total_token_count": 4188,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.480421,
  "response_file": "006-response.json"
}