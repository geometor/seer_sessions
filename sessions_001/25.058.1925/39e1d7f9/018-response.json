{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Find all contiguous regions (objects) of the same color in the input grid.\n2.  **Filter Objects**: Select only the 3x3 objects that have a color of 2 or 4.\n3. **Vertical Stacking**: Identify sets of 3x3 objects of color 2 or color 4 that are stacked vertically.\n4.  **Conditional Swap:** Within each set of vertically stacked 3x3 objects, swap colors 2 (red) and 4 (yellow). That is:\n    *   Change all pixels of color 2 within those objects to color 4.\n    *   Change all pixels of color 4 within those objects to color 2.\n5. **Other Pixels:** All other pixels in the grid remain unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"Finds all contiguous regions of the same color.\"\"\"\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n    rows, cols = grid.shape\n\n    def dfs(r, c, color, obj_coords):\n        if (r < 0 or r >= rows or c < 0 or c >= cols or\n                visited[r, c] or grid[r, c] != color):\n            return\n        visited[r, c] = True\n        obj_coords.append((r, c))\n        dfs(r + 1, c, color, obj_coords)\n        dfs(r - 1, c, color, obj_coords)\n        dfs(r, c + 1, color, obj_coords)\n        dfs(r, c - 1, color, obj_coords)\n\n    for r in range(rows):\n        for c in range(cols):\n            if not visited[r, c]:\n                color = grid[r, c]\n                obj_coords = []\n                dfs(r, c, color, obj_coords)\n                objects.append((color, obj_coords))\n    return objects\n\ndef is_3x3(obj_coords):\n    \"\"\"Checks if an object is 3x3.\"\"\"\n    rows, cols = zip(*obj_coords)\n    return (max(rows) - min(rows) + 1) == 3 and (max(cols) - min(cols) + 1) == 3\n\ndef are_vertically_stacked(obj1_coords, obj2_coords):\n    \"\"\"Checks if two 3x3 objects are vertically stacked.\"\"\"\n    # Find top-left corners\n    min_row1, min_col1 = min(obj1_coords), min(obj1_coords, key=lambda x: x[1])[1]\n    min_row2, min_col2 = min(obj2_coords), min(obj2_coords, key=lambda x: x[1])[1]\n\n    # Check if they are in the same columns and adjacent vertically\n    if min_col1 == min_col2:\n      if abs(min_row1-min_row2) == 3:\n        return True\n    return False\n    \n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of the input_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Find all objects\n    objects = find_objects(input_grid)\n\n    # Filter 3x3 objects of color 2 or 4\n    filtered_objects = [(color, coords) for color, coords in objects\n                         if is_3x3(coords) and color in (2, 4)]\n\n    # Group by column for vertical stacking check.  Use a dictionary keyed by the\n    # leftmost column of the object.\n    objects_by_column = {}\n    for color, coords in filtered_objects:\n        min_col = min(c for _, c in coords)\n        if min_col not in objects_by_column:\n            objects_by_column[min_col] = []\n        objects_by_column[min_col].append((color, coords))\n\n    # Check for vertical stacking and perform swaps\n    for col_objects in objects_by_column.values():\n        # Sort objects by row to check stacking in order\n        col_objects.sort(key=lambda x: min(r for r, _ in x[1]))\n        \n        for i in range(len(col_objects)):\n          for j in range(i + 1, len(col_objects)):\n            color1, coords1 = col_objects[i]\n            color2, coords2 = col_objects[j]\n            \n            if are_vertically_stacked(coords1, coords2):              \n              # Swap colors within the stacked objects\n              for r, c in coords1:\n                  if output_grid[r, c] == 2:\n                      output_grid[r, c] = 4\n                  elif output_grid[r, c] == 4:\n                      output_grid[r, c] = 2\n              for r, c in coords2:\n                  if output_grid[r, c] == 2:\n                      output_grid[r, c] = 4\n                  elif output_grid[r, c] == 4:\n                      output_grid[r, c] = 2\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 9336,
    "candidates_token_count": 1221,
    "total_token_count": 10557,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 13.85935,
  "response_file": "018-response.json"
}