examples:
  - example_1:
      objects:
        - color: 2  # Red
          positions: [(2, 2)]
        - color: 1  # Blue
          positions: [(6, 6)]
      transformation:
        - action: find_pairs
          condition: manhattan_distance == 3
        - action: place_yellow
          condition: adjacent to pair, horizontal or vertical
        - action: fill_orange
          condition: 3x3 centered on each original pixel of pair
        - result: "Yellow pixels at (2,1), (2,3), (6,5), (6,7). Orange 3x3 centered at (6,6)."

  - example_2:
      objects:
        - color: 8 # Azure
          positions: [(0,3)]
        - color: 2 # Red
          positions: [(2,6), (7,1)]
        - color: 1 # Blue
          positions: [(3,2), (6,6)]

      transformation:
        - action: find_pairs
        - condition: manhattan_distance == 3
        - action: place_yellow
          condition: adjacent to the pair, horizontal, vertical or diagonal
        - action: fill_orange
        - condition: 3x3 area, centered on original pixel of pair.
        - result: "Yellow at (1,5),(1,7),(3,7),(3,5),(5,2),(8,2),(5,6),(8,0) Orange filling around (3,2) and (6,6), (7,1) and (2,6)"

  - example_3:
      objects:
        - color: 2
          positions:  [(2,2)]
        - color: 6
          positions: [(5,6)]
        - color: 1
          positions: [(7,3)]
      transformation:
        - action: find_pairs
        - condition: manhattan_distance == 3
        - action: place_yellow
        - condition: adjacent to pair, horizontal, vertical or diagonal
        - action: fill_orange
        - condition: 3x3 area centered on original pixel in pair.