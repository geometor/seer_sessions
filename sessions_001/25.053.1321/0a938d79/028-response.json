{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Significant Rows:** Scan the input grid to find rows that contain exactly one non-zero (non-white) color value, with all other values in that row being zero (white).\n2.  **Expand Significant Rows:** For each \"significant row\" found, expand the single non-zero color to fill the entire row.\n3.  **Build the output:**\n   - determine order of the identified colors from significant rows, from\n     top to bottom\n    - create an output grid of the same dimensions as the input\n    - interleave the identified rows in the original order with rows of all\n      zeros, repeating this to the bottom of the grid\n\"\"\"\n\nimport numpy as np\n\ndef get_significant_rows(grid):\n    \"\"\"Finds rows with exactly one non-zero color.\"\"\"\n    significant_rows = []\n    for i, row in enumerate(grid):\n        non_zeros = row[row != 0]\n        if len(non_zeros) == 1:\n            significant_rows.append((i, non_zeros[0]))\n    return significant_rows\n\ndef transform(input_grid):\n    # initialize output_grid\n    input_grid = np.array(input_grid)\n    output_grid = np.zeros_like(input_grid)\n    \n    # Find significant rows (rows with only one non-zero color)\n    significant_rows = get_significant_rows(input_grid)\n    \n    # Expand significant rows and build the output pattern\n    output_row_index = 0\n    num_sig_rows = len(significant_rows)\n\n    while output_row_index < output_grid.shape[0]:\n        for i in range(num_sig_rows):\n            # fill the row with expanded color\n            color = significant_rows[i][1]\n\n            if output_row_index < output_grid.shape[0]:\n                output_grid[output_row_index, :] = color\n                output_row_index += 1\n\n            # interleave with a row of zeros\n            if output_row_index < output_grid.shape[0]:\n                output_row_index += 1\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7688,
    "candidates_token_count": 498,
    "total_token_count": 8186,
    "cached_content_token_count": 0
  },
  "response_time": 4.350929,
  "response_file": "028-response.json"
}