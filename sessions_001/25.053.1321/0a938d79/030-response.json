{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Significant Rows:** Scan the input grid to find rows that contain exactly one non-zero (non-white) color value. Record the row index and the color value for each.\n2.  **Expand Significant Rows:** For each significant row, the single non-zero color will fill an entire row in the output.\n3.  **Determine Output Row Pattern**: Create a repeating pattern of rows in this order:\n    - expanded row with color from first significant row\n    - a row of all zeros\n    - expanded row with color from second significant row\n    - a row of all zeros\n4. **Build output:** create rows in the output using the order from step 3, repeating as necessary to create an output with the same dimensions as the input.\n\"\"\"\n\nimport numpy as np\n\ndef get_significant_rows(grid):\n    \"\"\"Finds rows with exactly one non-zero color.\"\"\"\n    significant_rows = []\n    for i, row in enumerate(grid):\n        non_zeros = row[row != 0]\n        if len(non_zeros) == 1:\n            significant_rows.append((i, non_zeros[0]))\n    return significant_rows\n\ndef transform(input_grid):\n    # initialize output_grid\n    input_grid = np.array(input_grid)\n    output_grid = np.zeros_like(input_grid)\n    \n    # Find significant rows (rows with only one non-zero color)\n    significant_rows = get_significant_rows(input_grid)\n    \n    # Build the output pattern\n    output_row_index = 0\n    num_sig_rows = len(significant_rows)\n\n    if num_sig_rows > 0:  # Handle cases with no significant rows\n      pattern = []\n      for _, color in significant_rows:\n          pattern.append(np.full(input_grid.shape[1], color))  # Expanded row\n          pattern.append(np.zeros(input_grid.shape[1], dtype=int)) # Zero row\n\n      while output_row_index < output_grid.shape[0]:\n            for row in pattern:\n                if output_row_index < output_grid.shape[0]:\n                    output_grid[output_row_index, :] = row\n                    output_row_index += 1\n                else:\n                    break\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8031,
    "candidates_token_count": 542,
    "total_token_count": 8573,
    "cached_content_token_count": 0
  },
  "response_time": 4.751633,
  "response_file": "030-response.json"
}