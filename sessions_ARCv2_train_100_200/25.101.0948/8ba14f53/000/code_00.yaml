objects:
  - id: A # Left object
    description: A contiguous block of non-white pixels on the left half of the input grid.
    properties:
      color: C_A (variable)
      location: Left side, separated from B by white pixels.
      size: Bounding box height is typically 4.
      subgrid: Top-left 3x3 region of bounding box (A_sub) is relevant.
      pattern_trigger: Presence of white pixels in A_sub's second row (index 1) influences transformation.
  - id: B # Right object
    description: A contiguous block of non-white pixels on the right half of the input grid.
    properties:
      color: C_B (variable)
      location: Right side.
      size: Bounding box height is typically 4.
      subgrid: Top-left 3x3 region of bounding box (B_sub) is relevant.
      pattern_trigger: Presence of white pixels in B_sub's second row (index 1) influences transformation.
      bottom_row_content: Content of the 4th row (index 3) of B's bounding box influences the output's 3rd row.
output_grid:
  description: A 3x3 grid summarizing parts of A and B.
  properties:
    size: 3x3
    content: Pixels are either white(0), color C_A, or color C_B.
relationships:
  - type: derivation
    source: [A, B]
    target: output_grid
    details: Output rows are derived from specific rows of A_sub and B_sub, potentially modified based on cross-object pattern triggers. The 3rd output row can depend on B's 4th row or be padding.
actions:
  - action: identify_objects_and_bboxes
    inputs: [input_grid]
    outputs: [bbox_A, bbox_B]
    description: Locate the two main non-white objects and determine their minimal bounding boxes.
  - action: extract_subgrids
    inputs: [bbox_A, bbox_B]
    outputs: [A_sub, B_sub]
    description: Get the top-left 3x3 subgrids from bbox_A and bbox_B.
  - action: check_conditions
    inputs: [A_sub, B_sub, bbox_B]
    outputs: [A_row1_has_zero, B_row1_has_zero, B_row3_is_nonzero]
    description: Determine if A_sub[1] has zeros, if B_sub[1] has zeros, and if the first 3 cells of bbox_B[3] are non-zero.
  - action: select_and_modify_rows
    inputs: [A_sub, B_sub, bbox_B, conditions]
    outputs: [output_row_0, output_row_1, output_row_2]
    description: >
      Select base rows (A_sub[0], B_sub[0]).
      Modify base row A if B_row1_has_zero.
      Modify base row B if A_row1_has_zero.
      Determine output row 2 based on B_row3_is_nonzero (using bbox_B[3] or [0,0,0]).
      Modification involves setting the rightmost non-zero pixel (within the first 3) to zero.
  - action: assemble_output
    inputs: [output_row_0, output_row_1, output_row_2]
    outputs: [output_grid]
    description: Construct the 3x3 output grid from the three generated rows.