objects:
  - id: A # Left object
    description: A contiguous block of non-white pixels on the left half.
    properties:
      color: C_A (variable)
      location: Left side.
      subgrid: Top-left 3x3 region of bounding box (A_sub). Rows are A0, A1, A2.
      row_completeness: A0, A1, A2 are checked for containing zeros.
      A2_rightmost: The value of A2[2] is checked if A2 contains zeros.
      A1_pattern: The pattern [color, 0, 0] in A1 is checked.
  - id: B # Right object
    description: A contiguous block of non-white pixels on the right half.
    properties:
      color: C_B (variable)
      location: Right side.
      subgrid: Top-left 3x3 region of bounding box (B_sub). Rows B0, B1, B2.
      row_completeness: B2 is checked for containing zeros.
      fourth_row_slice: First 3 elements of the 4th row of B's bounding box (B3_slice).
output_grid:
  description: A 3x3 grid derived from A and B subgrids and B's 4th row.
  properties:
    size: 3x3
    rows: Out0, Out1, Out2.
relationships:
  - type: derivation
    source: [A, B]
    target: output_grid
    details: Output rows are derived conditionally based on patterns (presence/absence of zeros) in specific rows of A_sub and B_sub. Modification (erase rightmost) is applied conditionally. Out2 depends on B3_slice or is derived from B0.
actions:
  - action: identify_objects_and_bboxes
    inputs: [input_grid]
    outputs: [bbox_A, bbox_B]
    description: Locate the two main non-white objects and determine their minimal bounding boxes.
  - action: extract_subgrids_and_rows
    inputs: [input_grid, bbox_A, bbox_B]
    outputs: [A0, A1, A2, B0, B1, B2, B3_slice]
    description: Get rows 0, 1, 2 from A_sub and B_sub. Get first 3 elements of row 3 from B_bbox (padding if needed).
  - action: check_completeness
    inputs: [A1, A2, B2]
    outputs: [A1_has_zero, A2_is_complete, B2_is_complete]
    description: Determine if A1 has zeros, if A2 is complete (no zeros), if B2 is complete.
  - action: check_patterns
    inputs: [A1, A2]
    outputs: [A2_rightmost_is_zero, A1_is_cx00_pattern]
    description: If A2 has zeros, check if A2[2] is zero. Check if A1 matches the pattern [color, 0, 0].
  - action: apply_modification
    inputs: [row]
    outputs: [modified_row]
    description: Takes a 3-element row, finds the index k (0, 1, or 2) of the rightmost non-white pixel. If such a pixel exists, sets row[k] to 0. Returns the modified row.
  - action: determine_output_rows
    inputs: [A0, A1, A2, B0, B1, B2, B3_slice, checks_and_patterns]
    outputs: [Out0, Out1, Out2]
    description: Apply the derived conditional logic (based on completeness and patterns) to select and potentially modify rows A0, A1, B0, B1 to produce Out0 and Out1. Determine Out2 based on Out1's derivation source, B3_slice, and B0.
  - action: assemble_output
    inputs: [Out0, Out1, Out2]
    outputs: [output_grid]
    description: Construct the 3x3 output grid.