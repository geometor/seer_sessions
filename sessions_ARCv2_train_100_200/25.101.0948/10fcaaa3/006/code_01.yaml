task_type: transformation
grid_properties:
  - input_size: H x W (variable)
  - output_size: 2H x 2W
  - output_composition: 2x2 tiling of a generated base_tile
base_tile_generation:
  source: input_grid (I)
  target: base_tile (T), size H x W
  pixel_mapping:
    - condition: input pixel I[r][c] is non-white (1-9)
      action: copy input pixel value to base_tile T[r][c]
    - condition: input pixel I[r][c] is white (0)
      action: # Hypothesis 2 (Adjacency-Based Standard Checkerboard)
        - dependency: location of all non-white pixels in input I.
        - check_adjacency: determine if the white pixel at (r, c) is orthogonally or diagonally adjacent to *any* non-white pixel in I.
        - if adjacent:
            - check parity: (r + c) % 2
            - if parity is 0 (even): set base_tile pixel T[r][c] to azure (8)
            - if parity is 1 (odd): set base_tile pixel T[r][c] to white (0)
        - if not adjacent:
            - set base_tile pixel T[r][c] to white (0)
  hypothesis_validation:
    - status: Partially Correct
    - matches: train_3, train_4 (0 base tile errors)
    - mismatches:
        - train_1: 1 pixel difference in base tile (at T[3,2]; Expected=8, Generated=0); 4 pixels diff in output.
        - train_2: 5 pixel differences in base tile (at T[1,0], T[1,2], T[2,0], T[2,2], T[2,3]); 20 pixels diff in output.
    - conclusion: This rule works for inputs with a single non-white object (Ex3, Ex4). It fails for inputs with multiple non-white objects (Ex1, Ex2), suggesting the rule for background pixels is more complex and potentially depends on the number, colors, or arrangement of non-white pixels, or Example 2 follows a distinct rule variation (possibly related to color 6/magenta).
output_grid_construction:
  source: base_tile (T), size H x W
  target: output_grid (O), size 2H x 2W
  rule: O[r][c] = T[r % H][c % W] # Tiling
objects:
  - type: background_pixels
    color: white (0) in input
    properties: position (r, c), adjacency to non-white pixels.
    transformed_to: pattern of white (0) and azure (8) in the base tile, then tiled. Rule appears to be (Adj -> Std Checkboard; NonAdj -> 0) for Ex3, Ex4, but deviates for Ex1, Ex2.
  - type: foreground_pixels
    color: non-white (1-9) in input
    properties: position (r, c), color value.
    transformed_to: preserved color, tiled 2x2 in the output. Influences the transformation of adjacent background pixels.
relationships:
  - type: tiling
    description: Output grid is a 2x2 repeat of the generated base tile.
  - type: adjacency_influence
    description: The color (0 or 8) assigned to a background pixel in the base tile appears dependent on adjacency (including diagonals) to non-white pixels, but the exact rule varies or is incomplete based on current examples.
  - type: checkerboard_pattern
    description: A standard checkerboard pattern (8 for even r+c, 0 for odd) seems to apply to adjacent background pixels in Ex1, Ex3, Ex4. A different (possibly inverted) pattern or rule applies in Ex2. Non-adjacent background pixels mostly become 0, but exceptions exist (Ex1 T[3,2], Ex2 T[2,3]).