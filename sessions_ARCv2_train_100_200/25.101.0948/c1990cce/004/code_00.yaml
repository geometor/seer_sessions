task_type: pattern_generation
grid_properties:
  dimensionality: input 1D, output 2D
  input_width: variable (W)
  output_width: W (same as input)
  output_height: W (same as input)
  color_palette: [0, 1, 2] # white, blue, red
objects:
  - object_type: pixel
    properties:
      color: {0: white, 1: blue, 2: red}
      position: (row, column)
  - object_type: pattern
    description: Expanding diamond/triangle pattern originating from a single red pixel, exhibiting complex propagation and interaction rules.
    generation_rule: Cellular automaton based on diagonal neighbors, modified by color, propagation direction, distance from the center, and row number.
relationships:
  - type: spatial
    description: Output grid dimensions (WxW) determined by input grid width W.
  - type: positional
    description: The column index of the initial red pixel ('center_c') is crucial for rule application. Distance 'dist = abs(c - center_c)' is used in rules.
  - type: temporal
    description: Rules change based on the row index 'r'. A specific rule set applies for r=1, 2, and a different set for r>=3.
  - type: generation
    description: Each row (r > 0) in the output grid is generated based on the state of the row above (r-1).
    rule_summary: Value at (r, c) depends on L=output[r-1, c-1] and R=output[r-1, c+1], their colors, 'dist', and 'r'.
actions:
  - action: initialize_grid
    actor: system
    output: WxW grid filled with white (0)
  - action: copy_input
    actor: system
    source: input row
    target: output row 0
  - action: find_center
    actor: system
    input: output row 0
    output: column index 'center_c' of the red pixel (2)
  - action: generate_rows
    actor: system
    input: output row r-1, center_c, row_index r
    output: output row r (for r=1 to W-1)
    rule_details:
      - for each cell (r, c):
        - get parents L=output[r-1, c-1], R=output[r-1, c+1] (handle boundaries)
        - calculate dist = abs(c - center_c)
        - apply collision/propagation logic:
          - If L!=0 and R!=0: result = 0. # Collision
          - Else if L!=0 and R==0: # Propagate L
            - If L == 1: result = 1.
            - If L == 2:
              - If r <= 2: result = 2.
              - If r >= 3: result = 1 if dist == 1 else 2.
          - Else if L==0 and R!=0: # Propagate R
            - If R == 1: result = 0. # Blue annihilates when propagating right
            - If R == 2:
              - If r <= 2: result = 2.
              - If r >= 3: result = 0 if dist == 1 else 2.
          - Else (L==0 and R==0): result = 0. # No propagation
        - set output[r, c] = result