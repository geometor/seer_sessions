task_type: pattern_generation
grid_properties:
  dimensionality: input 1D, output 2D
  input_width: variable (W)
  output_width: W (same as input)
  output_height: W (same as input)
  color_palette: [0, 1, 2] # white, blue, red
objects:
  - object_type: pixel
    properties:
      color: {0: white, 1: blue, 2: red}
      position: (row, column)
  - object_type: pattern
    description: Expanding diamond/triangle pattern originating from a single red pixel.
    generation_rule: Cellular automaton based on diagonal neighbors in the previous row, modified by color, propagation direction, and distance from the initial pixel's column.
relationships:
  - type: spatial
    description: Output grid dimensions (WxW) determined by input grid width W.
  - type: positional
    description: The column index of the initial red pixel ('center_c') is crucial for rule application.
  - type: generation
    description: Each row (r > 0) in the output grid is generated based on the state of the row above (r-1).
    rule_summary: Value at (r, c) depends on (r-1, c-1) and (r-1, c+1), their colors, and distance abs(c - center_c).
actions:
  - action: initialize_grid
    actor: system
    output: WxW grid filled with white (0)
  - action: copy_input
    actor: system
    source: input row
    target: output row 0
  - action: find_center
    actor: system
    input: output row 0
    output: column index 'center_c' of the red pixel (2)
  - action: generate_rows
    actor: system
    input: output row r-1, center_c
    output: output row r (for r=1 to W-1)
    rule_details:
      - for each cell (r, c):
        - get parents L=output[r-1, c-1], R=output[r-1, c+1] (handle boundaries)
        - calculate dist = abs(c - center_c)
        - apply propagation/collision logic:
          - Collision (L!=0, R!=0): result is 0
          - Propagate L (L!=0, R==0):
            - if L=1: result is 1
            - if L=2: result is 1 if dist==1 else 2
          - Propagate R (L==0, R!=0):
            - if R=1: result is 1
            - if R=2: result is 0 if dist==1 else 2
          - No propagation (L==0, R==0): result is 0
        - set output[r, c] = result