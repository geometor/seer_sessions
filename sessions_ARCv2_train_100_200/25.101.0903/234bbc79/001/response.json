{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport copy\n\n\"\"\"\n1. Identify all gray pixels (color 5) in the input grid.\n2. For each gray pixel, examine its 8 neighbours (orthogonal and diagonal).\n3. Count the number of distinct non-white (0) and non-gray (5) colors among these neighbours.\n4. Based on the count:\n    a. If zero distinct colors: The gray pixel becomes white (0).\n    b. If one distinct color C: The gray pixel becomes color C.\n    c. If two or more distinct colors: The gray pixel becomes white (0), AND its column is marked for removal.\n5. Create a modified grid by applying the color changes from step 4.\n6. Construct the final output grid by removing the marked columns from the modified grid.\n\"\"\"\n\ndef get_neighbors(grid: np.ndarray, r: int, c: int) -> list[tuple[int, int, int]]:\n    \"\"\"\n    Gets the 8 neighbours (value, row, col) of a pixel at (r, c), handling grid boundaries.\n    \"\"\"\n    neighbours = []\n    rows, cols = grid.shape\n    for dr in [-1, 0, 1]:\n        for dc in [-1, 0, 1]:\n            if dr == 0 and dc == 0:\n                continue  # Skip the center pixel itself\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < rows and 0 <= nc < cols:\n                neighbours.append((grid[nr, nc], nr, nc))\n    return neighbours\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Transforms the input grid based on the rules derived from gray pixel neighbourhoods.\n    \"\"\"\n    input_array = np.array(input_grid, dtype=int)\n    working_grid = np.copy(input_array)\n    rows, cols = input_array.shape\n\n    columns_to_remove = set()\n    modifications = [] # Store modifications as (r, c, new_color)\n\n    # Iterate through each pixel to find gray pixels and determine modifications\n    for r in range(rows):\n        for c in range(cols):\n            if input_array[r, c] == 5: # Found a gray pixel\n                neighbours = get_neighbors(input_array, r, c)\n\n                # Filter for non-white, non-gray neighbours\n                colored_neighbours = [n for n in neighbours if n[0] != 0 and n[0] != 5]\n\n                # Get distinct colors of these neighbours\n                distinct_colors = set(n[0] for n in colored_neighbours)\n                num_distinct_colors = len(distinct_colors)\n\n                if num_distinct_colors == 0:\n                    # Case a: Isolated gray pixel or only white/gray neighbours\n                    modifications.append((r, c, 0)) # Becomes white\n                elif num_distinct_colors == 1:\n                    # Case b: One distinct neighbour color\n                    the_color = list(distinct_colors)[0]\n                    modifications.append((r, c, the_color)) # Becomes that color\n                else: # num_distinct_colors >= 2\n                    # Case c: Two or more distinct neighbour colors\n                    modifications.append((r, c, 0)) # Becomes white\n                    columns_to_remove.add(c) # Mark column for removal\n\n    # Apply all modifications to the working grid\n    for r, c, new_color in modifications:\n        working_grid[r, c] = new_color\n\n    # Construct the output grid by removing marked columns\n    output_cols = []\n    for c in range(cols):\n        if c not in columns_to_remove:\n            output_cols.append(working_grid[:, c])\n\n    # Handle the case where all columns might be removed\n    if not output_cols:\n        # If output_cols is empty, create an empty grid with the original number of rows\n        # Or potentially a grid of size rows x 0 depending on expected output format.\n        # Let's assume rows x 0 for now.\n         output_grid_array = np.empty((rows, 0), dtype=int)\n    else:\n        # Stack the kept columns horizontally\n        output_grid_array = np.stack(output_cols, axis=1)\n\n\n    # Convert the final numpy array back to a list of lists\n    output_grid = output_grid_array.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3132,
    "candidates_token_count": 1663,
    "total_token_count": 4795,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-preview-03-25",
  "response_time": 14.330514,
  "retries": 1
}