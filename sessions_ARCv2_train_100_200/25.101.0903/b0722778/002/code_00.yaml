Input Grid Structure:
  - Property: Partitioned by single rows/columns of white pixels (0).
  - Details: Creates a macro-grid of 2x2 cells separated by single white pixel borders.
  - Objects: Contiguous 2x2 blocks of non-white pixels (Input Blocks). Typically arranged 3 blocks horizontally per block row.

Output Grid Structure:
  - Property: Preserves input height and separator rows.
  - Property: Fixed width of 2 columns.
  - Objects: Contiguous 2x2 blocks of pixels (Output Blocks) arranged vertically, separated by white rows.

Relationship: Input -> Output
  - Action: Decomposition
    - Input: Input Grid
    - Output: List of Input Block Rows, where each row contains 3 Input Blocks (Left, Middle, Right).
  - Action: Selection (per Input Block Row)
    - Input: The three Input Blocks and the Block Row Index `br`.
    - Rule:
      - If `br == 1` (second row): Select the block with the minimum sum of pixel values.
      - Otherwise (for `br != 1`): Select the block with the maximum sum of pixel values.
    - Tie-breaking: If multiple blocks share the min/max sum, select the rightmost block (highest column index).
    - Output: One Selected Input Block per Block Row.
  - Action: Transformation (per Selected Input Block)
    - Input: Selected Input Block `[[a, b], [c, d]]`.
    - Rules (prioritized):
      1. If `a == c and b == d`: Output `[[b, b], [a, a]]`.
      2. Else if `a == b and c == d`: Output `[[c, a], [c, a]]`.
      3. Else if `a == c and c == d`: Output `[[b, a], [d, c]]`. # Handles Ex1 R0
      4. Else if `a == c`: Output `[[c, c], [c, b]]`. # Handles Ex1 R2
      5. Else if `c == d`: Output `[[a, b], [a, b]]`. # Handles Ex2 R0
      6. Else if `a == b`: Output `[[a, b], [b, c]]`. # Handles Ex2 R3
      7. Else (Fallback): Output `[[b, a], [d, c]]`. # Default Horizontal Reflection
    - Output: One Transformed Output Block per Selected Input Block.
  - Action: Construction
    - Input: List of Transformed Output Blocks and original Input Grid height.
    - Rule: Create an output grid of height H and width 2. Place each Transformed Output Block in the rows corresponding to its original Block Row Index, starting at column 0. Preserve white separator rows from input structure.
    - Output: Final Output Grid.

Anomaly:
  - Case: Example 1, Block Row 1 (br=1).
  - Observation: The selection rule (Min Sum) correctly identifies Input Block `[[2,1],[2,1]]`. The transformation rule (Rule 1) correctly transforms it to `[[1,1],[2,2]]`. However, the expected output block is `[[4,5],[4,5]]`. This case does not fit the general pattern observed.