{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Tuple, Dict, Set, Optional\n\n\"\"\"\nTransforms an input grid based on the following rules:\n\n1.  **Identify Blocks:** The grid is divided into horizontal blocks separated by rows consisting entirely of the number 4.\n2.  **Analyze First Block:** Determine the set of unique non-zero, non-4 numbers ('characteristic numbers') within the first block.\n3.  **Determine Mode:**\n    *   **Mode 1:** If the first block contains exactly one unique characteristic number.\n    *   **Mode 2:** If the first block contains zero or more than one unique characteristic number.\n4.  **Apply Transformation:**\n    *   **Mode 1:** For each block, find its unique characteristic number. Replace all instances of '1' within that block with its characteristic number.\n    *   **Mode 2:**\n        *   The first block remains unchanged.\n        *   Identify vertical regions defined by columns containing 4s.\n        *   For each vertical region in the first block, find its characteristic number (if any).\n        *   For all subsequent blocks, replace each '1' with the characteristic number found in the corresponding vertical region of the first block.\n5.  **Reconstruct Grid:** Combine the modified blocks and original separator rows to form the output grid.\n\"\"\"\n\ndef find_separator_rows(grid: np.ndarray) -> List[int]:\n    \"\"\"Finds the indices of rows consisting entirely of the number 4.\"\"\"\n    separator_indices = []\n    for r_idx, row in enumerate(grid):\n        if np.all(row == 4):\n            separator_indices.append(r_idx)\n    return separator_indices\n\ndef get_blocks(grid: np.ndarray, separator_indices: List[int]) -> List[Tuple[int, int, np.ndarray]]:\n    \"\"\"Splits the grid into blocks based on separator row indices.\"\"\"\n    blocks = []\n    start_row = 0\n    for sep_idx in separator_indices:\n        if start_row < sep_idx: # Avoid empty blocks if separators are consecutive\n             blocks.append((start_row, sep_idx -1, grid[start_row:sep_idx, :]))\n        # Add the separator row itself as a \"block\" to preserve it\n        blocks.append((sep_idx, sep_idx, grid[sep_idx:sep_idx+1, :]))\n        start_row = sep_idx + 1\n    # Add the last block if any rows remain after the last separator\n    if start_row < grid.shape[0]:\n        blocks.append((start_row, grid.shape[0] - 1, grid[start_row:, :]))\n    return blocks\n\ndef find_characteristic_numbers(block: np.ndarray) -> Set[int]:\n    \"\"\"Finds unique non-zero, non-4 numbers in a given block.\"\"\"\n    # Flatten the block, filter out 0s and 4s, and find unique values\n    unique_nums = np.unique(block)\n    # characteristic_nums = set(num for num in unique_nums if num != 0 and num != 4)\n    # Use explicit filtering compatible with numpy arrays\n    mask = (unique_nums != 0) & (unique_nums != 4)\n    characteristic_nums = set(unique_nums[mask])\n\n    return characteristic_nums\n\ndef find_vertical_separators_and_regions(grid: np.ndarray) -> List[Tuple[int, int]]:\n    \"\"\"Finds columns with 4s and defines the column ranges for vertical regions.\"\"\"\n    num_cols = grid.shape[1]\n    separator_cols = set()\n    for c_idx in range(num_cols):\n         # Check if the column contains any 4s (often aligned with horizontal separators)\n         # A stricter definition might be needed if 4s can appear elsewhere non-structurally\n         # For now, assume any 4 indicates a potential boundary\n         if np.any(grid[:, c_idx] == 4):\n              separator_cols.add(c_idx)\n\n    regions = []\n    start_col = 0\n    sorted_sep_cols = sorted(list(separator_cols))\n\n    for sep_c_idx in sorted_sep_cols:\n        if start_col < sep_c_idx: # Define region before the separator\n            regions.append((start_col, sep_c_idx - 1))\n        start_col = sep_c_idx + 1 # Start next region after the separator\n\n    # Add the last region if any columns remain after the last separator\n    if start_col < num_cols:\n        regions.append((start_col, num_cols - 1))\n\n    # If no separators were found, the whole width is one region\n    if not regions and num_cols > 0:\n         regions.append((0, num_cols -1))\n\n    return regions\n\n\ndef get_region_reference_numbers(block: np.ndarray, regions: List[Tuple[int, int]]) -> Dict[Tuple[int, int], Optional[int]]:\n    \"\"\"Maps vertical regions to the characteristic number found in that region within the given block.\"\"\"\n    reference_map = {}\n    for start_col, end_col in regions:\n        region_slice = block[:, start_col : end_col + 1]\n        char_nums = find_characteristic_numbers(region_slice)\n        # Assume only one characteristic number per region in the reference block for Mode 2\n        reference_map[(start_col, end_col)] = list(char_nums)[0] if len(char_nums) == 1 else None\n    return reference_map\n\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Transforms the input grid based on the identified mode derived from the first block's properties.\n    \"\"\"\n    input_np = np.array(input_grid, dtype=int)\n    output_np = np.copy(input_np) # Start with a copy to modify\n\n    # 1. Identify separator rows\n    separator_indices = find_separator_rows(input_np)\n\n    # 2. Split grid into blocks (including separator rows as blocks)\n    all_blocks_info = get_blocks(input_np, separator_indices)\n\n    # Filter out separator blocks to get actual content blocks\n    content_blocks_info = [(s, e, b) for s, e, b in all_blocks_info if not np.all(b == 4)]\n\n    if not content_blocks_info: # Handle grids with only separators or empty grids\n        return output_np.tolist()\n\n    # 3. Analyze First Block\n    first_block_start, first_block_end, first_block_data = content_blocks_info[0]\n    first_block_char_nums = find_characteristic_numbers(first_block_data)\n    num_unique_chars_first_block = len(first_block_char_nums)\n\n    # 4. Determine Mode and Apply Transformation\n    if num_unique_chars_first_block == 1:\n        # Execute Mode 1\n        mode1_char_num = list(first_block_char_nums)[0] # Get the single characteristic number\n\n        for start_row, end_row, block_data in content_blocks_info:\n            # Find the characteristic number for *this* block\n            current_block_char_nums = find_characteristic_numbers(block_data)\n            if len(current_block_char_nums) == 1:\n                replace_value = list(current_block_char_nums)[0]\n                # Iterate through cells in the current block of the *output* grid\n                for r in range(start_row, end_row + 1):\n                    for c in range(output_np.shape[1]):\n                        if output_np[r, c] == 1:\n                            output_np[r, c] = replace_value\n            # else: Block might not have a unique char num, leave 1s as is? Rule unclear, assume replace only if unique char found.\n            # Current implementation replaces based on first block's char num for all blocks in Mode 1\n            # Reread NL Program: Mode 1 says \"each block finds *its own* unique characteristic number\"\n            # Correction: Find char num per block.\n\n            # Find characteristic number for *this* block\n            current_block_char_nums = find_characteristic_numbers(block_data)\n            # If this block has *exactly one* characteristic number, use it for replacement\n            if len(current_block_char_nums) == 1:\n                 replace_value = list(current_block_char_nums)[0]\n                 for r in range(start_row, end_row + 1):\n                     for c in range(output_np.shape[1]):\n                         # Check original input value was 1 before replacing in output\n                         if input_np[r, c] == 1:\n                             output_np[r, c] = replace_value\n            # If the block doesn't have exactly one char num, its 1s remain unchanged per rule.\n\n\n    else:\n        # Execute Mode 2\n        # First block remains unchanged (already handled by copying to output_np)\n\n        # Identify vertical regions based on the *entire* grid's structure\n        vertical_regions = find_vertical_separators_and_regions(input_np)\n\n        # Find reference numbers from the first block for each region\n        region_reference_map = get_region_reference_numbers(first_block_data, vertical_regions)\n\n\n        # Process subsequent blocks (skip the first content block)\n        for i in range(1, len(content_blocks_info)):\n            start_row, end_row, block_data = content_blocks_info[i]\n\n            # Iterate through cells in the current block of the *output* grid\n            for r in range(start_row, end_row + 1):\n                for c in range(output_np.shape[1]):\n                    # Check original input value was 1 before replacing\n                    if input_np[r, c] == 1:\n                        # Determine which vertical region this cell belongs to\n                        found_region = False\n                        for region_start_col, region_end_col in vertical_regions:\n                            if region_start_col <= c <= region_end_col:\n                                # Find the reference number for this region\n                                reference_num = region_reference_map.get((region_start_col, region_end_col))\n                                if reference_num is not None:\n                                    output_np[r, c] = reference_num\n                                found_region = True\n                                break\n                        # If cell '1' is in a separator column (not in any defined region), it might remain unchanged.\n                        # Current logic implies it remains 1 if no reference number is found or it's not in a region.\n\n    # 5. Convert back to list of lists and return\n    return output_np.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2651,
    "candidates_token_count": 3131,
    "total_token_count": 5782,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 27.849872,
  "retries": 1
}