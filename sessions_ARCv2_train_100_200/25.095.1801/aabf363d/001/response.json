{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies a 'marker' color (appears once) and a 'target' color (most frequent non-zero color) in the input grid.\nCreates an output grid where all instances of the 'target' color are replaced by the 'marker' color,\nand the original cell containing the 'marker' color is replaced by 0 (background).\nBackground cells (0) remain unchanged.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef find_marker_and_target_colors(grid: np.ndarray) -> tuple[int, int]:\n    \"\"\"\n    Identifies the marker color (occurs once) and target color (most frequent non-zero, excluding marker).\n\n    Args:\n        grid: A numpy array representing the input grid.\n\n    Returns:\n        A tuple containing (marker_color, target_color).\n    \"\"\"\n    # Flatten the grid and filter out zeros\n    non_zero_elements = grid[grid != 0]\n\n    if non_zero_elements.size == 0:\n        # Handle case with no non-zero elements if necessary, though unlikely based on examples\n        return -1, -1 # Indicate error or default\n\n    # Count occurrences of each non-zero element\n    counts = Counter(non_zero_elements)\n\n    marker_color = -1\n    target_color = -1\n    max_freq = 0\n\n    # Find the marker color (frequency 1)\n    for color, count in counts.items():\n        if count == 1:\n            marker_color = color\n            break # Assume only one marker color based on description\n\n    # Find the target color (most frequent, excluding the marker)\n    for color, count in counts.items():\n        if color != marker_color:\n            if count > max_freq:\n                max_freq = count\n                target_color = color\n\n    # Handle edge cases like only marker color present\n    if target_color == -1 and marker_color != -1 and len(counts) == 1:\n         # If only the marker color exists, there's no target to replace.\n         # This case might need clarification based on desired behavior.\n         # For now, let's assume target requires frequency > 1 or > marker freq.\n         pass # No target color found based on criteria\n\n    return marker_color, target_color\n\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Transforms the input grid based on replacing the target color with the marker color\n    and zeroing out the original marker position.\n\n    Args:\n        input_grid: A list of lists representing the 2D input grid.\n\n    Returns:\n        A list of lists representing the transformed 2D output grid.\n    \"\"\"\n    # Convert input to numpy array for efficient processing\n    input_np = np.array(input_grid, dtype=int)\n\n    # Identify the marker and target colors\n    marker_color, target_color = find_marker_and_target_colors(input_np)\n\n    # Check if colors were found successfully (handle potential edge cases)\n    if marker_color == -1 or target_color == -1:\n        # If marker or target not found as expected, return a copy or handle error\n        # Based on examples, they should always be present.\n        # Returning a copy preserves the input if rules don't apply.\n        print(\"Warning: Marker or Target color not identified as expected.\")\n        return input_np.tolist()\n\n\n    # Initialize output_grid as a copy of the input grid\n    output_np = np.copy(input_np)\n\n    # Perform transformations using boolean indexing for efficiency\n\n    # Find where the input grid equals the target color\n    target_mask = (input_np == target_color)\n    # Replace those locations in the output grid with the marker color\n    output_np[target_mask] = marker_color\n\n    # Find where the input grid equals the marker color\n    marker_mask = (input_np == marker_color)\n    # Replace that location in the output grid with 0 (background)\n    output_np[marker_mask] = 0\n\n    # Convert the resulting numpy array back to a list of lists\n    output_grid = output_np.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1682,
    "candidates_token_count": 1346,
    "total_token_count": 3028,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.503503,
  "retries": 1
}