Input:
  type: grid
  rows: 6
  columns: 5
  cell_values: [0, 4, 9]
  structure:
    - top_half: rows 0-2, contains values [0, 9]
    - bottom_half: rows 3-5, contains values [0, 4]
Output:
  type: grid
  rows: 3
  columns: 5
  cell_values: [0, 6]
Transformation:
  dimensionality_change: Reduces rows from 6 to 3. Columns remain 5.
  value_mapping:
    - Input 9 -> Intermediate 1
    - Input 4 -> Intermediate 1
    - Input 0 -> Intermediate 0
  operation:
    - name: Element-wise comparison between top and bottom halves.
    - description: Compares cell (r, c) from top_half with cell (r+3, c) from bottom_half.
    - logic: Seems like an XOR operation on the mapped intermediate values (1 or 0).
      - (9, 0) or (0, 4) -> 6  (maps to 1 XOR 0 = 1 -> 6)
      - (0, 0) -> 0          (maps to 0 XOR 0 = 0 -> 0)
      - (9, 4) -> 0          (maps to 1 XOR 1 = 0 -> 0)
  output_construction:
    - If the result of the element-wise XOR operation is 1, the output cell value is 6.
    - If the result of the element-wise XOR operation is 0, the output cell value is 0.
    - The output grid row `r` corresponds to the input grid rows `r` and `r+3`.