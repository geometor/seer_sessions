task_elements:
  - name: input_grid
    type: 2D array of integers (0-9)
  - name: output_grid
    type: 2D array of integers (0-9)
    description: Same dimensions as input_grid.
  - name: transformation_rule
    type: conditional replacement
    description: Replaces certain digits based on global grid frequency statistics.
  - name: stable_set
    type: set of integers
    description: Digits that remain unchanged during transformation. Determined by frequency analysis and tie-breaking rules.
  - name: replacement_value
    type: integer
    value: 7
    description: The constant digit used to replace non-stable digits.

frequency_analysis:
  - name: digit_counts
    type: map (digit -> count)
    description: Frequency of each digit (0-9) in the input_grid.
  - name: grouped_by_frequency
    type: map (frequency -> list_of_digits)
    description: Digits grouped by their frequency count.
  - name: highest_frequency
    type: integer
    description: The maximum frequency found among all digits.
  - name: highest_frequency_digits
    type: list of integers
    description: Sorted list of all digits that occur with the highest_frequency.
  - name: M
    type: integer
    description: The smallest digit among highest_frequency_digits. (min(highest_frequency_digits)).
  - name: second_highest_frequency
    type: integer or None
    description: The second highest frequency count found. None if only one frequency level exists.
  - name: second_highest_frequency_digits
    type: list of integers or None
    description: Sorted list of digits occurring with the second_highest_frequency. None if fewer than two frequency levels exist.
  - name: D2
    type: integer or None
    description: The smallest digit among second_highest_frequency_digits. (min(second_highest_frequency_digits)). None if fewer than two frequency levels exist.

stable_set_determination:
  - step: Calculate digit_counts for the input_grid.
  - step: Determine highest_frequency and highest_frequency_digits.
  - step: Check if len(highest_frequency_digits) > 1 (tie for highest frequency).
  - step: >
      If tie exists: stable_set = set(highest_frequency_digits).
  - step: >
      If no tie exists:
        - Identify M (min(highest_frequency_digits)).
        - Determine second_highest_frequency and D2 (min digit with that frequency).
        - If D2 exists: stable_set = {M, D2}.
        - If D2 does not exist (only one frequency level): stable_set = {M}.

grid_transformation:
  - input: input_grid cell value (digit)
  - condition: digit IS IN stable_set
  - output: digit (no change)
  - condition: digit IS NOT IN stable_set
  - output: replacement_value (7)