{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport collections\nimport itertools\nfrom typing import List, Set, Dict, Tuple, Optional\n\n\"\"\"\nTransforms the input grid based on digit frequencies.\n\n1.  Analyze Frequencies: Scan the entire input grid and count the occurrences of each digit (0 through 9).\n2.  Identify Highest Frequency Digits: Determine the highest frequency achieved by any digit. Create a list, `H`, containing all digits that occur with this highest frequency.\n3.  Check for Ties: Examine the list `H`.\n    *   Case 1: Tie for Highest Frequency (List `H` contains more than one digit): Define the \"stable set\" `S` as the set containing all digits in `H`.\n    *   Case 2: No Tie for Highest Frequency (List `H` contains only one digit, `M`):\n        *   Find the second highest frequency present in the grid.\n        *   Identify `D2`, the *smallest* digit that occurs with this second highest frequency.\n        *   Define the \"stable set\" `S` as the set containing `M` and `D2`. (If there is no second highest frequency, meaning all digits present have the same frequency, the stable set `S` contains only `M`).\n4.  Transform Grid: Create the output grid with the same dimensions as the input grid. Iterate through each cell of the input grid:\n    *   If the digit in the input cell is present in the stable set `S`, copy that digit to the corresponding cell in the output grid.\n    *   If the digit in the input cell is *not* present in the stable set `S`, place the digit `7` in the corresponding cell in the output grid.\n5.  Output: Return the completed output grid.\n\"\"\"\n\ndef _analyze_frequencies(input_grid: List[List[int]]) -> Dict:\n    \"\"\"\n    Analyzes the frequency of digits in the grid.\n\n    Args:\n        input_grid: The 2D list of integers.\n\n    Returns:\n        A dictionary containing frequency analysis results:\n        - 'highest_freq': The highest frequency found.\n        - 'highest_freq_digits': Sorted list of digits with the highest frequency.\n        - 'M': Smallest digit with the highest frequency.\n        - 'second_highest_freq': Second highest frequency (or None).\n        - 'second_highest_freq_digits': Sorted list of digits with the second highest frequency (or None).\n        - 'D2': Smallest digit with the second highest frequency (or None).\n    \"\"\"\n    # Flatten the grid to easily count digits\n    all_digits = list(itertools.chain.from_iterable(input_grid))\n    if not all_digits:\n        # Handle empty grid case\n        return {\n            'highest_freq': 0, 'highest_freq_digits': [], 'M': None,\n            'second_highest_freq': None, 'second_highest_freq_digits': None, 'D2': None\n        }\n\n    # Count frequency of each digit\n    counts = collections.Counter(all_digits)\n\n    # Group digits by their frequency\n    grouped_by_freq = collections.defaultdict(list)\n    for digit, freq in counts.items():\n        grouped_by_freq[freq].append(digit)\n\n    # Sort frequencies in descending order to easily find highest and second highest\n    sorted_freqs = sorted(grouped_by_freq.keys(), reverse=True)\n\n    # Determine highest frequency and associated digits\n    highest_freq = sorted_freqs[0]\n    highest_freq_digits = sorted(grouped_by_freq[highest_freq])\n    m = highest_freq_digits[0] # Smallest digit with highest frequency\n\n    # Determine second highest frequency and associated digits (if they exist)\n    second_highest_freq = None\n    second_highest_freq_digits = None\n    d2 = None\n    if len(sorted_freqs) > 1:\n        second_highest_freq = sorted_freqs[1]\n        second_highest_freq_digits = sorted(grouped_by_freq[second_highest_freq])\n        d2 = second_highest_freq_digits[0] # Smallest digit with second highest frequency\n\n    return {\n        'highest_freq': highest_freq,\n        'highest_freq_digits': highest_freq_digits,\n        'M': m,\n        'second_highest_freq': second_highest_freq,\n        'second_highest_freq_digits': second_highest_freq_digits,\n        'D2': d2\n    }\n\ndef _determine_stable_set(freq_analysis: Dict) -> Set[int]:\n    \"\"\"\n    Determines the stable set based on frequency analysis results.\n\n    Args:\n        freq_analysis: Dictionary returned by _analyze_frequencies.\n\n    Returns:\n        A set of integers representing the stable digits.\n    \"\"\"\n    highest_freq_digits = freq_analysis['highest_freq_digits']\n    m = freq_analysis['M']\n    d2 = freq_analysis['D2']\n\n    stable_set = set()\n\n    # Case 1: Tie for the highest frequency\n    if len(highest_freq_digits) > 1:\n        stable_set = set(highest_freq_digits)\n    # Case 2: No tie for the highest frequency\n    else:\n        # Add M (the unique highest frequency digit)\n        if m is not None: # Check needed for potentially empty grids\n            stable_set.add(m)\n        # Add D2 (the smallest second highest frequency digit) if it exists\n        if d2 is not None:\n            stable_set.add(d2)\n        # If M is not None but D2 is None, the set correctly contains only M\n\n    return stable_set\n\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Applies the transformation rule based on digit frequencies.\n\n    Args:\n        input_grid: A list of lists representing the input grid of digits.\n\n    Returns:\n        A list of lists representing the transformed output grid.\n    \"\"\"\n    # Handle empty input grid\n    if not input_grid or not input_grid[0]:\n        return []\n\n    rows = len(input_grid)\n    cols = len(input_grid[0])\n\n    # 1. & 2. Analyze frequencies and identify key digits/frequencies\n    freq_analysis = _analyze_frequencies(input_grid)\n\n    # 3. Determine the stable set based on tie/no-tie rule\n    stable_set = _determine_stable_set(freq_analysis)\n\n    # Define the replacement value\n    replacement_value = 7\n\n    # 4. Initialize and construct the output grid\n    output_grid = [[0 for _ in range(cols)] for _ in range(rows)]\n    for r in range(rows):\n        for c in range(cols):\n            digit = input_grid[r][c]\n            # Check if the digit is stable\n            if digit in stable_set:\n                output_grid[r][c] = digit # Keep the digit\n            else:\n                output_grid[r][c] = replacement_value # Replace with 7\n\n    # 5. Return the transformed grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8700,
    "candidates_token_count": 2153,
    "total_token_count": 10853,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 18.606144,
  "retries": 1
}