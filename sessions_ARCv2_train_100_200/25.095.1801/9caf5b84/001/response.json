{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport collections\nimport itertools\n\n\"\"\"\nTransforms the input grid based on digit frequencies.\n\n1. Calculate the frequency of each digit (0-9) across the entire input grid.\n2. Identify 'M', the smallest digit with the highest frequency.\n3. Identify 'D2', the smallest digit with the second highest frequency.\n4. Create a \"stable set\" containing only M and D2.\n5. Iterate through the input grid:\n   - If a digit is in the stable set, keep it.\n   - Otherwise, replace it with 7.\n\"\"\"\n\ndef _find_m_d2(input_grid: list[list[int]]) -> tuple[int, int | None]:\n    \"\"\"\n    Finds M (smallest digit with highest frequency) and \n    D2 (smallest digit with second highest frequency).\n\n    Args:\n        input_grid: The 2D list of integers.\n\n    Returns:\n        A tuple (m, d2), where m is the most frequent digit (smallest tie-breaker)\n        and d2 is the second most frequent digit (smallest tie-breaker).\n        Returns (m, None) if there is only one frequency level.\n    \"\"\"\n    # Flatten the grid and count digit frequencies\n    all_digits = list(itertools.chain.from_iterable(input_grid))\n    if not all_digits:\n        return (None, None) # Handle empty grid case\n        \n    counts = collections.Counter(all_digits)\n    \n    # Group digits by frequency\n    grouped_by_freq = collections.defaultdict(list)\n    for digit, freq in counts.items():\n        grouped_by_freq[freq].append(digit)\n        \n    # Sort frequencies in descending order\n    sorted_freqs = sorted(grouped_by_freq.keys(), reverse=True)\n    \n    # Determine M (smallest digit with the highest frequency)\n    highest_freq = sorted_freqs[0]\n    m = min(grouped_by_freq[highest_freq])\n    \n    # Determine D2 (smallest digit with the second highest frequency)\n    d2 = None\n    if len(sorted_freqs) > 1:\n        second_highest_freq = sorted_freqs[1]\n        d2 = min(grouped_by_freq[second_highest_freq])\n        \n    # Handle edge case where M might be the only digit type\n    # If d2 wasn't found because only one frequency level exists,\n    # the logic implicitly handles this as d2 remains None.\n    # If the problem guarantees at least two frequency levels or digits,\n    # this check might be redundant, but it's safer.\n        \n    return m, d2\n\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies the transformation rule based on digit frequencies.\n\n    Args:\n        input_grid: A list of lists representing the input grid of digits.\n\n    Returns:\n        A list of lists representing the transformed output grid.\n    \"\"\"\n    \n    # Handle empty input grid\n    if not input_grid or not input_grid[0]:\n        return []\n\n    rows = len(input_grid)\n    cols = len(input_grid[0])\n    \n    # initialize output_grid with the same dimensions\n    output_grid = [[0 for _ in range(cols)] for _ in range(rows)]\n\n    # 1-3. Determine M (most frequent) and D2 (second most frequent) digits\n    m, d2 = _find_m_d2(input_grid)\n    \n    # Handle case where grid might be too small or uniform to find M and D2\n    if m is None: \n         # If no digits, return empty or copy? Let's return a grid of 7s of same size.\n         # Or maybe copy input? Based on rule, if stable set is empty, all become 7.\n         return [[7 for _ in range(cols)] for _ in range(rows)]\n\n    # 4. Create the stable set containing M and D2\n    stable_set = set()\n    stable_set.add(m)\n    if d2 is not None:\n        stable_set.add(d2)\n        \n    replacement_value = 7\n\n    # 5. Perform transformations\n    for r in range(rows):\n        for c in range(cols):\n            digit = input_grid[r][c]\n            # If the digit is in the stable set, keep it\n            if digit in stable_set:\n                output_grid[r][c] = digit\n            # Otherwise, replace it with 7\n            else:\n                output_grid[r][c] = replacement_value\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1673,
    "candidates_token_count": 5559,
    "total_token_count": 7232,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 45.442833,
  "retries": 1
}