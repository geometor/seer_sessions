{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport collections\n\n\"\"\"\nIdentify all distinct connected components of identical non-zero digits in the input grid.\nCalculate the size (number of cells) for each component.\nSelect the component with the largest size.\nDetermine the minimum bounding box (min/max row/col) for the largest component.\nExtract the subgrid defined by the bounding box from the input grid as the output.\n\"\"\"\n\ndef find_components(grid: list[list[int]]) -> list[dict]:\n    \"\"\"\n    Finds all connected components of non-zero digits in the grid.\n\n    Args:\n        grid: The input 2D list representing the grid.\n\n    Returns:\n        A list of dictionaries, where each dictionary represents a component\n        and contains 'digit', 'size', 'coords', and 'bbox'.\n        'bbox' is a tuple (min_row, max_row, min_col, max_col).\n    \"\"\"\n    if not grid or not grid[0]:\n        return []\n\n    rows = len(grid)\n    cols = len(grid[0])\n    visited = [[False for _ in range(cols)] for _ in range(rows)]\n    components = []\n\n    for r in range(rows):\n        for c in range(cols):\n            # If the cell is non-zero and not yet visited, start a search\n            if grid[r][c] != 0 and not visited[r][c]:\n                digit_value = grid[r][c]\n                component_coords = []\n                q = collections.deque([(r, c)])\n                visited[r][c] = True\n                min_r, max_r, min_c, max_c = r, r, c, c\n\n                # Breadth-First Search (BFS) to find connected cells\n                while q:\n                    row, col = q.popleft()\n                    component_coords.append((row, col))\n\n                    # Update bounding box\n                    min_r = min(min_r, row)\n                    max_r = max(max_r, row)\n                    min_c = min(min_c, col)\n                    max_c = max(max_c, col)\n\n                    # Check neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        # Check boundaries, if neighbor has the same digit, and not visited\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr][nc] == digit_value and not visited[nr][nc]:\n                            visited[nr][nc] = True\n                            q.append((nr, nc))\n                \n                # Store component information\n                components.append({\n                    'digit': digit_value,\n                    'size': len(component_coords),\n                    'coords': component_coords,\n                    'bbox': (min_r, max_r, min_c, max_c)\n                })\n\n    return components\n\ndef extract_subgrid(grid: list[list[int]], bbox: tuple[int, int, int, int]) -> list[list[int]]:\n    \"\"\"\n    Extracts a subgrid based on the bounding box coordinates.\n\n    Args:\n        grid: The input grid.\n        bbox: A tuple (min_row, max_row, min_col, max_col).\n\n    Returns:\n        The extracted subgrid as a 2D list.\n    \"\"\"\n    min_r, max_r, min_c, max_c = bbox\n    subgrid = []\n    for r in range(min_r, max_r + 1):\n        subgrid.append(grid[r][min_c : max_c + 1])\n    return subgrid\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    # Find all connected components of non-zero digits\n    components = find_components(input_grid)\n\n    # If no components are found, return an empty grid\n    if not components:\n        return []\n\n    # Find the component with the largest size\n    # The examples imply there's a unique largest component.\n    # If there are ties, max() will return the first one encountered.\n    largest_component = max(components, key=lambda comp: comp['size'])\n\n    # Get the bounding box of the largest component\n    bbox = largest_component['bbox']\n\n    # Extract the subgrid defined by the bounding box\n    output_grid = extract_subgrid(input_grid, bbox)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1950,
    "candidates_token_count": 1692,
    "total_token_count": 3642,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.048743,
  "retries": 1
}