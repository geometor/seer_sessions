{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\n\n\"\"\"\nTransforms an input grid based on the following rules:\n1. Create a new grid (output grid) identical in dimensions to the input grid.\n2. Iterate through each cell (identified by `row` and `col`) of the input grid.\n3. Get the value of the current cell (`input_value = input_grid[row][col]`).\n4. **Rule 1: Handle '8's:** If `input_value` is 8, set the corresponding cell in the output grid to 8 (`output_grid[row][col] = 8`).\n5. **Rule 2: Handle '0's:** If `input_value` is 0:\n   a. Find the coordinates of all neighboring cells (up to 8) that have a value of 8 in the input grid.\n   b. Count the number of these '8' neighbors (`count_8`).\n   c. **Check Condition 1:** Is `count_8` exactly equal to 3?\n   d. **Check Condition 2 (if Condition 1 is true):** Are the three '8' neighbors mutually adjacent? (Check if neighbor1 is adjacent to neighbor2 AND neighbor1 is adjacent to neighbor3 AND neighbor2 is adjacent to neighbor3).\n   e. **Apply Transformation:** If both Condition 1 (count is 3) and Condition 2 (mutual adjacency) are true, set the corresponding cell in the output grid to 1 (`output_grid[row][col] = 1`).\n   f. **Default for '0's:** Otherwise (if `input_value` is 0 but either condition is false), set the corresponding cell in the output grid to 0 (`output_grid[row][col] = 0`).\n6. After iterating through all cells, return the completed output grid.\n\"\"\"\n\ndef is_adjacent(coord1: tuple[int, int], coord2: tuple[int, int]) -> bool:\n    \"\"\"Checks if two coordinates are adjacent (horizontally, vertically, or diagonally).\"\"\"\n    r1, c1 = coord1\n    r2, c2 = coord2\n    return abs(r1 - r2) <= 1 and abs(c1 - c2) <= 1\n\ndef check_mutual_adjacency(coords: list[tuple[int, int]]) -> bool:\n    \"\"\"Checks if three coordinates are all mutually adjacent.\"\"\"\n    if len(coords) != 3:\n        # This function assumes exactly 3 coordinates\n        return False \n        \n    c1, c2, c3 = coords\n    \n    # Check adjacency between all pairs\n    adj12 = is_adjacent(c1, c2)\n    adj13 = is_adjacent(c1, c3)\n    adj23 = is_adjacent(c2, c3)\n    \n    return adj12 and adj13 and adj23\n\ndef get_neighbors_with_value(grid: list[list[int]], r: int, c: int, target_value: int) -> list[tuple[int, int]]:\n    \"\"\"Finds coordinates of neighbors of cell (r, c) with the target_value.\"\"\"\n    rows = len(grid)\n    cols = len(grid[0])\n    neighbor_coords = []\n    # Iterate through the 8 possible neighbors\n    for dr in [-1, 0, 1]:\n        for dc in [-1, 0, 1]:\n            # Skip the cell itself\n            if dr == 0 and dc == 0:\n                continue\n            \n            nr, nc = r + dr, c + dc\n            \n            # Check if the neighbor is within grid boundaries\n            if 0 <= nr < rows and 0 <= nc < cols:\n                if grid[nr][nc] == target_value:\n                    neighbor_coords.append((nr, nc))\n    return neighbor_coords\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies the transformation rule to the input grid.\n    \"\"\"\n    # Get grid dimensions\n    rows = len(input_grid)\n    if rows == 0:\n        return []\n    cols = len(input_grid[0])\n    if cols == 0:\n        return [[] for _ in range(rows)]\n\n    # Initialize output_grid as a deep copy of the input grid.\n    # This handles Rule 1 (8s stay 8s) and the default case for 0s (0s stay 0s).\n    output_grid = copy.deepcopy(input_grid)\n\n    # Iterate through each cell of the input grid\n    for r in range(rows):\n        for c in range(cols):\n            # Get the value of the current cell in the *input* grid\n            input_value = input_grid[r][c]\n\n            # Check if the input cell's value is 0 (Rule 2)\n            if input_value == 0:\n                # Find neighbors with value 8 in the input grid\n                neighbors_8_coords = get_neighbors_with_value(input_grid, r, c, 8)\n                \n                # Check Condition 1: Count is exactly 3\n                if len(neighbors_8_coords) == 3:\n                    # Check Condition 2: Mutual adjacency of the three neighbors\n                    if check_mutual_adjacency(neighbors_8_coords):\n                        # Apply Transformation: Change cell to 1 in the output grid\n                        output_grid[r][c] = 1\n            # If input_value is 8, output_grid[r][c] is already 8 from the deepcopy.\n            # If input_value is 0 and conditions are not met, output_grid[r][c] is already 0 from the deepcopy.\n\n    # Return the completed output grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6599,
    "candidates_token_count": 1819,
    "total_token_count": 8418,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.429638,
  "retries": 1
}