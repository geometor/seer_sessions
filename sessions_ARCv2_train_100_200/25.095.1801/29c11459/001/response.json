{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\n\ndef find_anchors(row: list[int]) -> list[tuple[int, int]]:\n    \"\"\"\n    Finds non-zero elements (anchors) in a row.\n\n    Args:\n        row: A list of integers representing a grid row.\n\n    Returns:\n        A list of tuples, where each tuple contains (value, column_index)\n        for a non-zero element, sorted by column_index.\n    \"\"\"\n    anchors = []\n    for c, value in enumerate(row):\n        if value != 0:\n            anchors.append((value, c))\n    # Anchors are naturally sorted by column index due to iteration order\n    return anchors\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Transforms the input grid by filling horizontal segments between non-zero \n    numbers (\"anchors\") based on proximity.\n\n    For each row with two or more anchors:\n    1. Identify the non-zero anchors and their positions.\n    2. For each segment between adjacent anchors (val1, c1) and (val2, c2):\n       - Iterate through the columns 'c' between c1 and c2.\n       - Calculate the distance from 'c' to c1 (dist_left) and to c2 (dist_right).\n       - If dist_left < dist_right, fill the cell (r, c) with val1.\n       - If dist_right < dist_left, fill the cell (r, c) with val2.\n       - If dist_left == dist_right, fill the cell (r, c) with 5.\n    3. Cells outside these segments and original anchor cells remain unchanged.\n    Rows with less than two anchors remain unchanged.\n    \"\"\"\n    # Initialize output_grid as a deep copy to preserve original values initially\n    output_grid = copy.deepcopy(input_grid)\n    midpoint_fill_value = 5\n\n    # Iterate through each row of the input grid\n    for r, row in enumerate(input_grid):\n        # Find all non-zero numbers (\"anchors\") in the current row\n        anchors = find_anchors(row)\n\n        # Only process rows with two or more anchors\n        if len(anchors) >= 2:\n            # Iterate through adjacent pairs of anchors\n            for i in range(len(anchors) - 1):\n                val1, c1 = anchors[i]\n                val2, c2 = anchors[i+1]\n\n                # Iterate through the columns strictly between the anchors\n                for c in range(c1 + 1, c2):\n                    # Calculate distances to the left and right anchors\n                    dist_left = c - c1\n                    dist_right = c2 - c\n\n                    # Apply the filling logic based on proximity\n                    if dist_left < dist_right:\n                        output_grid[r][c] = val1\n                    elif dist_right < dist_left:\n                        output_grid[r][c] = val2\n                    else:  # dist_left == dist_right\n                        output_grid[r][c] = midpoint_fill_value\n            \n            # Note: The anchor values themselves are already preserved\n            # because we started with a copy and only modified cells *between* them.\n            # Zeros outside the segments are also preserved from the copy.\n\n    # Return the completed output grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2316,
    "candidates_token_count": 1329,
    "total_token_count": 3645,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.261145,
  "retries": 1
}