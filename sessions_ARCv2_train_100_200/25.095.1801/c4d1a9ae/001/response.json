{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport collections\nimport copy\n\ndef get_neighbors(grid: list[list[int]], r: int, c: int) -> list[int]:\n    \"\"\"\n    Gets the values of the 8 neighbors for a given cell (r, c).\n    Handles boundary conditions.\n    \"\"\"\n    neighbors = []\n    rows = len(grid)\n    cols = len(grid[0])\n    for dr in [-1, 0, 1]:\n        for dc in [-1, 0, 1]:\n            if dr == 0 and dc == 0:\n                continue  # Skip the cell itself\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < rows and 0 <= nc < cols:\n                neighbors.append(grid[nr][nc])\n    return neighbors\n\ndef find_most_frequent(grid: list[list[int]]) -> int:\n    \"\"\"Finds the most frequent value in the grid.\"\"\"\n    counts = collections.Counter(val for row in grid for val in row)\n    # Find the maximum frequency\n    max_freq = 0\n    if counts:\n        max_freq = max(counts.values())\n    \n    # Find values with the maximum frequency\n    most_frequent_values = [val for val, freq in counts.items() if freq == max_freq]\n    \n    # Tie-breaking: return the smallest value if there's a tie\n    return min(most_frequent_values) if most_frequent_values else -1 # Or handle case with no elements? Assume grid is non-empty.\n\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Transforms the input grid based on the following rules:\n    1. Find the globally most frequent number in the input grid (target_value).\n    2. Iterate through each cell of the grid.\n    3. If a cell's value is the target_value:\n       a. Examine its 8 neighbors.\n       b. Collect the values of neighbors that are *not* the target_value.\n       c. Find the most frequent value among these valid neighbors (local_mode).\n       d. If there is a unique local_mode:\n          i. Apply a specific mapping based on the target_value and local_mode to get the replacement_value.\n             - If target_value is 4: {2: 6, 5: 2, 6: 5}\n             - If target_value is 0: {3: 9, 4: 3, 9: 4}\n          ii. Replace the cell's value with the replacement_value.\n       e. If there is no unique local_mode (no valid neighbors, or a tie for mode), the cell's value remains unchanged.\n    4. Cells whose initial value is not the target_value remain unchanged.\n    \"\"\"\n    if not input_grid or not input_grid[0]:\n        return []\n\n    rows = len(input_grid)\n    cols = len(input_grid[0])\n    output_grid = copy.deepcopy(input_grid)\n\n    # Find the globally most frequent value (target_value)\n    target_value = find_most_frequent(input_grid)\n\n    # Define the replacement mappings based on target_value\n    replacement_map = {}\n    if target_value == 4:\n        replacement_map = {2: 6, 5: 2, 6: 5}\n    elif target_value == 0:\n        replacement_map = {3: 9, 4: 3, 9: 4}\n    # Add more mappings here if needed for other potential target values\n\n    # Iterate through each cell in the grid\n    for r in range(rows):\n        for c in range(cols):\n            # Check if the current cell's value is the target value\n            if input_grid[r][c] == target_value:\n                # Get neighbors\n                all_neighbors = get_neighbors(input_grid, r, c)\n\n                # Filter out neighbors that are the target value\n                valid_neighbors = [n for n in all_neighbors if n != target_value]\n\n                if not valid_neighbors:\n                    continue # No valid neighbors, cell remains unchanged\n\n                # Find the mode of the valid neighbors\n                neighbor_counts = collections.Counter(valid_neighbors)\n                max_freq = 0\n                if neighbor_counts:\n                    max_freq = max(neighbor_counts.values())\n\n                modes = [val for val, freq in neighbor_counts.items() if freq == max_freq]\n\n                # Check if there is a unique mode\n                if len(modes) == 1:\n                    local_mode = modes[0]\n                    # Check if this local_mode has a mapping defined\n                    if local_mode in replacement_map:\n                        replacement_value = replacement_map[local_mode]\n                        output_grid[r][c] = replacement_value\n                # If there's a tie for mode or no valid neighbors, the cell value remains unchanged (already copied)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1452,
    "candidates_token_count": 3098,
    "total_token_count": 4550,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 26.514076,
  "retries": 1
}