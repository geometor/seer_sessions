task_description: "Transforms a grid of integers based on the neighborhood of the globally most frequent integer."
grid_properties:
  - type: 2D list of integers
  - dimensions: constant between input and output
objects:
  - name: grid
    properties:
      - elements: cells containing integers
      - size: rows x columns
  - name: cell
    properties:
      - value: integer
      - position: (row, column)
      - neighbors: list of 8 adjacent cell values (handling boundaries)
actions:
  - name: find_target_value
    inputs: input_grid
    outputs: target_value (integer)
    description: "Calculate frequency of each integer in the grid. Identify the highest frequency. If tie, select the smallest integer value."
  - name: process_cell
    inputs: cell_value, cell_neighbors, target_value
    outputs: new_cell_value
    description: >
      1. Check if cell_value equals target_value. If not, return original cell_value.
      2. Collect values of neighbors that are NOT equal to target_value (valid_neighbors).
      3. If valid_neighbors is empty, return original cell_value.
      4. Find the mode(s) of valid_neighbors. If multiple modes exist (tie), return original cell_value.
      5. If a unique mode exists:
         a. Define mapping based on target_value:
            - If target_value is 4: map = {2: 6, 5: 2, 6: 5}
            - If target_value is 0: map = {3: 9, 4: 3, 9: 4}
            - (Other target_values would require different maps)
         b. If the unique mode is a key in the corresponding map, return the mapped value.
         c. Otherwise (mode not in map keys), return original cell_value.
      6. Otherwise (no unique mode), return original cell_value.
  - name: generate_output_grid
    inputs: input_grid
    outputs: output_grid
    description: "Create a copy of the input grid. Iterate through each cell, apply process_cell logic using the original input grid state for neighbor lookups, and update the corresponding cell in the copied grid."
unexplained_behavior:
  - context: "In train_1 (target=4)"
    description: "Cells (0,2), (1,2), (0,5), (4,5), (5,5) have a unique mode among non-target neighbors, and the mode exists in the mapping, but these cells do NOT change value in the expected output, contrary to the general rule."
  - context: "In train_2 (target=0)"
    description: "Cell (1,3) has a unique mode (3) among non-target neighbors, and the mode exists in the mapping (3->9), but this cell does NOT change value (remains 0) in the expected output."
    description_alt: "Cell (2,1) has unique mode 4, map 4->3, but cell remains 0 in expected output." # Depends on exact neighbor implementation details.