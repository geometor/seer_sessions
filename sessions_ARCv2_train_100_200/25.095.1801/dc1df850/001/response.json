{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nInitialize the output grid as a copy of the input grid. Iterate through each cell\n(r, c) of the *input* grid. If the input cell's value at (r, c) is 2, identify its\n8 neighbors (Moore neighborhood). For each neighbor (nr, nc) within grid\nboundaries, if the *input* cell at (nr, nc) has a value of 0, set the corresponding\ncell's value in the *output* grid to 1. Non-zero cells from the input (including\nthe 2s) and zero cells not adjacent to a 2 retain their original values in the\noutput grid.\n\"\"\"\n\nimport copy\nimport numpy as np # Although not strictly needed for this logic, numpy is often useful for grid tasks\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Transforms the input grid by filling the neighbors of '2' cells.\n\n    Args:\n        input_grid: A 2D list of integers representing the input grid.\n\n    Returns:\n        A 2D list of integers representing the transformed output grid.\n    \"\"\"\n    # Get grid dimensions\n    if not input_grid:\n        return []\n    rows = len(input_grid)\n    if rows == 0:\n        return [[]]\n    cols = len(input_grid[0])\n    if cols == 0:\n        return [[] for _ in range(rows)]\n\n    # Initialize output_grid as a deep copy of the input grid\n    # This ensures non-'2' cells and original '2's are preserved unless overwritten later\n    # and prevents modifying the input grid directly during iteration.\n    output_grid = copy.deepcopy(input_grid)\n\n    # Define the 8 neighbor offsets (Moore neighborhood)\n    neighbor_offsets = [\n        (-1, -1), (-1, 0), (-1, 1),\n        ( 0, -1),          ( 0, 1),\n        ( 1, -1), ( 1, 0), ( 1, 1)\n    ]\n\n    # Iterate through each cell of the *input* grid\n    for r in range(rows):\n        for c in range(cols):\n            # Check if the current cell in the *input* grid contains a '2'\n            if input_grid[r][c] == 2:\n                # Iterate through the 8 neighbors\n                for dr, dc in neighbor_offsets:\n                    nr, nc = r + dr, c + dc\n\n                    # Check if the neighbor coordinates are within the grid boundaries\n                    if 0 <= nr < rows and 0 <= nc < cols:\n                        # Check if the neighbor cell in the *input* grid is '0'\n                        if input_grid[nr][nc] == 0:\n                            # Set the corresponding cell in the *output* grid to '1'\n                            output_grid[nr][nc] = 1\n\n    # Return the modified output grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1688,
    "candidates_token_count": 1029,
    "total_token_count": 2717,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.783891,
  "retries": 1
}