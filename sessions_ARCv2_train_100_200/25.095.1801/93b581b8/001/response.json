{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms a 6x6 input grid based on the parity of the position of a central 2x2 non-zero block.\n\n1. Find the Source Block: Locates the 2x2 block of non-zero digits in the 6x6 input grid. Extracts its top-left corner coordinates (r, c) and its four digit values A (top-left), B (top-right), C (bottom-left), D (bottom-right).\n2. Initialize Output Grid: Creates a deep copy of the input grid.\n3. Check Position Parity: Determines if both r and c are odd, or if both r and c are even.\n4. Generate and Place Corner Blocks based on Parity:\n    - If r and c are both odd:\n        - Places [[D, 0], [0, A]] at (r-1, c-1).\n        - Places [[C, C], [0, 0]] at (r-1, c+2).\n        - Places [[B, 0], [B, 0]] at (r+2, c-1).\n        - Places [[A, A], [A, A]] at (r+2, c+2).\n    - If r and c are both even:\n        - Places [[D, D], [D, D]] at (r-2, c-2).\n        - Places [[C, C], [C, C]] at (r-2, c+2).\n        - Places [[B, B], [B, B]] at (r+2, c-2).\n        - Places [[A, A], [A, A]] at (r+2, c+2).\n5. Return the modified grid.\n\"\"\"\n\nimport copy\n\ndef find_source_block(grid: list[list[int]]) -> tuple[int, int, int, int, int, int] | None:\n    \"\"\"\n    Finds the top-left corner (r, c) and values (A, B, C, D) of the 2x2 non-zero block.\n    Assumes exactly one such block exists.\n    \"\"\"\n    height = len(grid)\n    width = len(grid[0]) if height > 0 else 0\n    for r in range(height - 1):\n        for c in range(width - 1):\n            # Check if all four cells in the 2x2 block are non-zero\n            if (grid[r][c] != 0 and\n                    grid[r][c+1] != 0 and\n                    grid[r+1][c] != 0 and\n                    grid[r+1][c+1] != 0):\n                A = grid[r][c]\n                B = grid[r][c+1]\n                C = grid[r+1][c]\n                D = grid[r+1][c+1]\n                return r, c, A, B, C, D\n    return None # Should not happen based on problem description\n\ndef place_block(grid: list[list[int]], block: list[list[int]], top_r: int, top_c: int):\n    \"\"\"\n    Places a 2x2 block into the grid at the specified top-left coordinates.\n    Overwrites existing values. Assumes placement is within grid boundaries.\n    \"\"\"\n    height = len(grid)\n    width = len(grid[0])\n    for r_offset in range(2):\n        for c_offset in range(2):\n            target_r = top_r + r_offset\n            target_c = top_c + c_offset\n            # Basic boundary check (though problem implies valid placements)\n            if 0 <= target_r < height and 0 <= target_c < width:\n                 grid[target_r][target_c] = block[r_offset][c_offset]\n\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies the transformation rule based on the source block's position parity.\n    \"\"\"\n    # initialize output_grid as a deep copy\n    output_grid = copy.deepcopy(input_grid)\n    \n    # Find the source block details\n    find_result = find_source_block(input_grid)\n    if find_result is None:\n        # Handle error case or return original grid if no block found\n        return output_grid \n        \n    r, c, A, B, C, D = find_result\n\n    # Check parity and perform transformations\n    r_is_odd = r % 2 != 0\n    c_is_odd = c % 2 != 0\n    r_is_even = not r_is_odd\n    c_is_even = not c_is_odd\n\n    if r_is_odd and c_is_odd:\n        # Define and place corner blocks for odd/odd case\n        tl_block = [[D, 0], [0, A]]\n        tr_block = [[C, C], [0, 0]]\n        bl_block = [[B, 0], [B, 0]]\n        br_block = [[A, A], [A, A]] # Corrected train_1 example suggests A, not D\n\n        place_block(output_grid, tl_block, r - 1, c - 1)\n        place_block(output_grid, tr_block, r - 1, c + 2)\n        place_block(output_grid, bl_block, r + 2, c - 1)\n        place_block(output_grid, br_block, r + 2, c + 2)\n\n    elif r_is_even and c_is_even:\n         # Define and place corner blocks for even/even case\n        tl_block = [[D, D], [D, D]]\n        tr_block = [[C, C], [C, C]]\n        bl_block = [[B, B], [B, B]]\n        br_block = [[A, A], [A, A]]\n\n        place_block(output_grid, tl_block, r - 2, c - 2)\n        place_block(output_grid, tr_block, r - 2, c + 2)\n        place_block(output_grid, bl_block, r + 2, c - 2)\n        place_block(output_grid, br_block, r + 2, c + 2)\n        \n    # If parity is mixed (e.g., r odd, c even), do nothing additional based on examples\n    # (The problem description implies only odd/odd or even/even cases occur)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2590,
    "candidates_token_count": 2240,
    "total_token_count": 4830,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 19.355422,
  "retries": 1
}