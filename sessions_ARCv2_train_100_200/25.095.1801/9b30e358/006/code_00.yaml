InputSource: Assumed to be a pre-parsed 2D list of integers representing the second grid found in the raw input text (InputGrid2). Let's call this `InputGrid`.

Objects:
  - InputGrid:
      Type: List[List[int]]
      Properties:
        - content: 2D array of integers.
        - height: H (number of rows, len(InputGrid))
        - width: W (number of columns, len(InputGrid[0]) if H > 0 else 0)
  - OutputGrid:
      Type: List[List[int]]
      Properties:
        - content: 2D array of integers derived from InputGrid.
        - height: H_out
        - width: W

DerivedObjects: # Conditional based on InputGrid.height (H) parity
  - TopHalf: # Exists only if H is even
      Type: List[List[int]]
      Content: First H/2 rows of InputGrid.
  - BottomHalf: # Exists only if H is even
      Type: List[List[int]]
      Content: Last H/2 rows of InputGrid.

Relationships:
  - OutputGrid.width == InputGrid.width
  - OutputGrid.height (H_out) depends on InputGrid.height (H):
      - If H is odd, H_out = 2 * H
      - If H is even, H_out = 2.5 * H (or 5 * H / 2)

Actions:
  - Receive Pre-parsed InputGrid (List[List[int]]).
  - Check Height Parity: Determine if H (len(InputGrid)) is odd or even.
  - Construct OutputGrid:
      - If H is odd:
          - Create OutputGrid by concatenating InputGrid with itself vertically (OutputGrid = InputGrid + InputGrid).
      - If H is even:
          - Calculate Midpoint: midpoint = H // 2.
          - Create TopHalf: top_half = InputGrid[:midpoint].
          - Create BottomHalf: bottom_half = InputGrid[midpoint:].
          - Create OutputGrid by concatenating halves vertically: OutputGrid = bottom_half + top_half + bottom_half + top_half + bottom_half.
  - Return OutputGrid.