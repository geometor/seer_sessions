{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport math # Not strictly needed here, but good practice to import potential libraries\n\n\"\"\"\nTransforms an input grid (provided as a list of lists of integers) based on the \nparity of its height (number of rows).\n\nIf the input grid's height (H) is odd, the output grid is formed by \nvertically stacking the input grid on top of itself.\n\nIf the input grid's height (H) is even, the grid is conceptually split into a \ntop half (first H/2 rows) and a bottom half (last H/2 rows). The output grid \nis constructed by vertically stacking these halves in the sequence: \nBottomHalf, TopHalf, BottomHalf, TopHalf, BottomHalf.\n\"\"\"\n\n# No specific imports needed beyond standard list operations\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies the height-parity based stacking transformation to the input grid.\n\n    Args:\n        input_grid: A list of lists of integers representing the grid.\n\n    Returns:\n        A new list of lists of integers representing the transformed grid.\n    \"\"\"\n    # Initialize output_grid as an empty list\n    output_grid = []\n\n    # Determine the height (number of rows) of the input grid\n    h = len(input_grid)\n\n    # Handle the edge case of an empty input grid\n    if h == 0:\n        return [] # Return an empty list if the input is empty\n\n    # Check if the height H is odd or even\n    if h % 2 != 0:\n        # --- Odd height case ---\n        # Vertically stack the input_grid with itself\n        # List concatenation achieves vertical stacking for list of lists\n        output_grid = input_grid + input_grid\n    else:\n        # --- Even height case ---\n        # Calculate the midpoint row index (integer division)\n        midpoint = h // 2\n        \n        # Create the TopHalf by slicing the input grid\n        top_half = input_grid[:midpoint]\n        \n        # Create the BottomHalf by slicing the input grid\n        bottom_half = input_grid[midpoint:]\n\n        # Construct the OutputGrid by concatenating the halves in the sequence:\n        # BottomHalf, TopHalf, BottomHalf, TopHalf, BottomHalf\n        output_grid = bottom_half + top_half + bottom_half + top_half + bottom_half\n\n    # Return the final constructed output grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7222,
    "candidates_token_count": 864,
    "total_token_count": 8086,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 8.3683,
  "retries": 1
}