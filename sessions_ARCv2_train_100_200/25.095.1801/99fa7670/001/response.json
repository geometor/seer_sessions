{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\n\n\"\"\"\nProcesses a 2D grid of integers. For each non-zero cell in the input grid, \nit fills the cells to its right in the same row with its value. \nIt also fills the cells below it in the last column of the grid with its value. \nThe process iterates through the input grid row by row, then column by column. \nIf multiple non-zero cells influence the same output cell, the value from the \ncell processed later (based on the iteration order) prevails.\n\"\"\"\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies a fill transformation based on non-zero cells in the input grid.\n\n    Args:\n        input_grid: A list of lists representing the 2D input grid.\n\n    Returns:\n        A list of lists representing the transformed 2D output grid.\n    \"\"\"\n    # Handle empty or invalid input\n    if not input_grid or not input_grid[0]:\n        return []\n\n    # Get grid dimensions\n    height = len(input_grid)\n    width = len(input_grid[0])\n    \n    # Initialize output_grid as a deep copy of the input_grid\n    # This ensures the original input is not modified and the output starts correctly\n    output_grid = copy.deepcopy(input_grid)\n\n    # Iterate through each cell of the input grid to find non-zero sources\n    for r in range(height):\n        for c in range(width):\n            # Get the value of the current cell in the *original* input grid\n            source_value = input_grid[r][c]\n\n            # Check if the cell is a non-zero source\n            if source_value > 0:\n                \n                # Perform Horizontal Fill (to the right in the same row)\n                # Start from the column immediately to the right of the source\n                for j in range(c + 1, width):\n                    output_grid[r][j] = source_value\n                    \n                # Perform Vertical Fill (downwards in the last column)\n                # Start from the row immediately below the source\n                last_col_index = width - 1\n                for i in range(r + 1, height):\n                    output_grid[i][last_col_index] = source_value\n\n    # Return the modified output grid\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2040,
    "candidates_token_count": 874,
    "total_token_count": 2914,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 8.289507,
  "retries": 1
}