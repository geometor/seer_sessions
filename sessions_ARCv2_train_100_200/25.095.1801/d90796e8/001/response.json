{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid based on the adjacency of cells with value 2 and 3.\nIf a cell containing '2' is adjacent (up, down, left, or right) to a cell containing '3' in the input grid,\nthe cell originally containing '2' is changed to '0' in the output grid,\nand the cell originally containing '3' is changed to '8' in the output grid.\nAll changes are based on the initial adjacencies found in the input grid.\nCells not involved in such a '2'-'3' adjacency retain their original value.\n\"\"\"\n\nimport copy\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid: A list of lists representing the 2D integer grid.\n\n    Returns:\n        A new list of lists representing the transformed 2D grid.\n    \"\"\"\n    # Get grid dimensions\n    if not input_grid:\n        return []\n    rows = len(input_grid)\n    if rows == 0 or not input_grid[0]:\n         return [[] for _ in range(rows)] # Handle empty rows or empty grid\n    cols = len(input_grid[0])\n\n    # Initialize output_grid as a deep copy of the input grid\n    # This ensures cells not involved in the transformation retain their value\n    output_grid = copy.deepcopy(input_grid)\n\n    # Sets to store coordinates of cells that need to be changed\n    # Using sets automatically handles duplicates if a cell is adjacent to multiple partners\n    twos_to_zero = set()\n    threes_to_eight = set()\n\n    # Define relative coordinates for adjacent neighbors (Von Neumann neighborhood)\n    neighbors = [(0, 1), (0, -1), (1, 0), (-1, 0)] # right, left, down, up\n\n    # First pass: Identify all pairs of adjacent '2's and '3's based *only* on the input grid\n    for r in range(rows):\n        for c in range(cols):\n            # Check if the current cell is a '2'\n            if input_grid[r][c] == 2:\n                # Check its neighbors\n                for dr, dc in neighbors:\n                    nr, nc = r + dr, c + dc\n                    # Check if neighbor coordinates are within grid bounds\n                    if 0 <= nr < rows and 0 <= nc < cols:\n                        # Check if the neighbor is a '3' in the original input grid\n                        if input_grid[nr][nc] == 3:\n                            # Mark this '2' cell to be changed to '0'\n                            twos_to_zero.add((r, c))\n                            # Mark the adjacent '3' cell to be changed to '8'\n                            threes_to_eight.add((nr, nc))\n                            # Note: We don't need to break here, as sets handle duplicates.\n                            # If a '2' is next to multiple '3's, it's still just one change to 0.\n                            # If a '3' is next to multiple '2's, it's still just one change to 8.\n\n    # Second pass: Apply the identified changes to the output grid\n    for r, c in twos_to_zero:\n        output_grid[r][c] = 0\n\n    for r, c in threes_to_eight:\n        output_grid[r][c] = 8\n\n    # Return the modified grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2087,
    "candidates_token_count": 1669,
    "total_token_count": 3756,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.128753,
  "retries": 1
}