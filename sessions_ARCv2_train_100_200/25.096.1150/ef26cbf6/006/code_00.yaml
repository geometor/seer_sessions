task_elements:
  - type: grid
    properties:
      - numeric_cells
      - 2D_structure
objects:
  - object: cell
    properties:
      - value: digit (0-8)
      - position: (row, column)
  - object: horizontal_separator
    properties:
      - type: row
      - composition: all cells contain '4'
      - role: divides grid into horizontal segments
      - behavior: remains unchanged in output
  - object: vertical_separator
    properties:
      - type: column
      # Refined: Vertical separators are identified by columns containing '4' at the intersection with *any* horizontal_separator row.
      - composition: contains '4' in at least one horizontal_separator row
      - role: divides segments into vertical regions
  - object: horizontal_segment
    properties:
      - type: set_of_rows
      - location: between horizontal_separators (or grid edge and separator)
      - role: primary unit of processing
  - object: vertical_region
    properties:
      - type: set_of_columns
      - location: between vertical_separators (or grid edge and separator)
      - role: secondary unit for key association and replacement lookup
  - object: placeholder_digit
    properties:
      - value: 1
      - role: target for conditional replacement
  - object: key_digit
    properties:
      # Refined: Explicitly exclude 0, 1, 4
      - value: digit in {2, 3, 5, 6, 7, 8}
      - role: source value for replacement; defines region keys
  - object: region_key_map
    properties:
      - type: mapping (dictionary) {vertical_region_index: key_digit}
      - role: stores the first key_digit found per region within a segment
  - object: key_memory
    properties:
      - type: mapping (dictionary) {vertical_region_index: key_digit}
      - role: holds the region_key_map from the most recent segment that contained any key_digits
      - behavior: used for lookup when a segment has zero key_digits
relationships:
  - relationship: segment_contains_cells
  - relationship: region_contains_cells
  - relationship: cell_has_value
  - relationship: cell_has_position
  - relationship: key_digit_belongs_to_region
actions:
  - action: identify_separators
    target: input_grid
    output: horizontal_separator_rows, vertical_separator_columns
  - action: define_segments
    based_on: horizontal_separator_rows
  - action: define_regions
    based_on: vertical_separator_columns
  - action: process_segment
    target: each horizontal_segment (sequentially top-to-bottom)
    steps:
      - find_keys_and_map_regions: Identify all key_digits within the segment (from input) and create the segment's region_key_map.
      - count_unique_keys: Determine the number of unique key_digits in the segment.
      - apply_replacement_rule:
          - if count == 1: Replace '1's in the output_grid for this segment with the single unique key.
          - if count == 0: Replace '1's in the output_grid using the current key_memory map (looking up by region).
          - if count > 1: Do not replace '1's in the output_grid for this segment.
      - update_key_memory: If the segment contained any key_digits (count > 0), update the key_memory with the segment's region_key_map.
  - action: return_output_grid