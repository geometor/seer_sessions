task_elements:
  - type: grid
    properties:
      - numeric_cells
      - 2D_structure
objects:
  - object: cell
    properties:
      - value: digit (0-8)
      - position: (row, column)
  - object: horizontal_separator
    properties:
      - type: row
      - composition: all cells contain '4'
      - role: divides grid into segments
      - behavior: remains unchanged
  - object: vertical_separator
    properties:
      - type: column
      - composition: contains '4' at intersection with horizontal_separator rows
      - role: divides segments into regions
  - object: horizontal_segment
    properties:
      - type: set_of_rows
      - location: between horizontal_separators (or grid edge and separator)
      - role: primary unit of processing for replacement rules
  - object: vertical_region
    properties:
      - type: set_of_columns
      - location: between vertical_separators (or grid edge and separator)
      - role: sub-unit for key association (mapping keys to regions) and applying replacement in specific cases
  - object: placeholder_digit
    properties:
      - value: 1
      - role: target for replacement
  - object: key_digit
    properties:
      - value: non-zero digit, not '1' or '4' (i.e., 2, 3, 5, 6, 7, 8)
      - role: source value for replacement
relationships:
  - relationship: segment_contains_cells
  - relationship: region_contains_cells
  - relationship: cell_has_value
  - relationship: cell_has_position
  - relationship: key_digit_belongs_to_segment
  - relationship: key_digit_belongs_to_region (first key found defines the region's key for that segment)
state_variables:
  - variable: previous_segment_valid_region_keys
    description: A map storing {region_index: key_digit} from the last processed segment that contained at least one key digit. Persists across segments that lack key digits.
actions:
  - action: identify_separators
    target: grid
    output: horizontal_separator_rows, vertical_separator_columns
  - action: define_segments
    based_on: horizontal_separator_rows
  - action: define_regions
    based_on: vertical_separator_columns
  - action: process_segment
    target: each horizontal_segment (input)
    steps:
      - find_unique_keys_in_segment: Identify all distinct key digits within the current segment's input cells.
      - count_unique_keys: Determine the number of unique key digits found.
      - map_region_keys_in_segment: Create a map {region_index: key_digit} for the current segment (using the first key found per region).
      - apply_replacement_rule:
          condition: count_unique_keys == 1
          effect: Replace all '1's in the segment's output cells with the single unique key.
          condition: count_unique_keys == 0
          effect: For each '1' at (r, c) in the segment's output cells, find its region_index (v_idx) and replace the '1' with previous_segment_valid_region_keys[v_idx] (if the key exists).
          condition: count_unique_keys > 1
          effect: Do nothing (leave '1's unchanged in the segment's output cells).
      - update_previous_keys_memory:
          condition: map_region_keys_in_segment is not empty
          effect: Set previous_segment_valid_region_keys = map_region_keys_in_segment.