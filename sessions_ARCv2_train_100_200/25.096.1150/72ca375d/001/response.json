{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentify all distinct objects (connected components of the same non-zero digit) in the input grid.\nFor each object, calculate its bounding box (smallest rectangle containing all its cells).\nCalculate the object's \"mass\" (number of cells belonging to the object).\nCalculate the area of the object's bounding box (height * width).\nCalculate the object's density (mass / area).\nSelect the object with the highest density.\nReturn the subgrid from the input corresponding to the bounding box of the selected highest-density object.\n\"\"\"\n\nimport collections\n\ndef get_bounding_box(coords):\n    \"\"\"Calculates the bounding box for a set of coordinates.\"\"\"\n    if not coords:\n        return None\n    min_r = min(r for r, c in coords)\n    max_r = max(r for r, c in coords)\n    min_c = min(c for r, c in coords)\n    max_c = max(c for r, c in coords)\n    # Returns (min_row, max_row, min_col, max_col)\n    return min_r, max_r, min_c, max_c\n\ndef find_objects(grid: list[list[int]]) -> list[dict]:\n    \"\"\"Finds all connected components of non-zero cells in the grid.\"\"\"\n    rows = len(grid)\n    if rows == 0:\n        return []\n    cols = len(grid[0])\n    if cols == 0:\n        return []\n        \n    visited = set()\n    objects = [] # List to store dicts: {'color': color, 'coords': set_of_coords}\n\n    # Iterate through each cell to find starting points of objects\n    for r in range(rows):\n        for c in range(cols):\n            # If cell is non-zero and not yet visited, start a search (BFS)\n            if grid[r][c] != 0 and (r, c) not in visited:\n                color = grid[r][c]\n                current_object_coords = set()\n                # Use deque for efficient queue operations in BFS\n                queue = collections.deque([(r, c)]) \n                visited.add((r, c))\n                \n                while queue:\n                    row, col = queue.popleft() # Get next cell from queue\n                    current_object_coords.add((row, col))\n                    \n                    # Check orthogonal neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        # Check bounds, if neighbor has the same color, and not visited\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           (nr, nc) not in visited and \\\n                           grid[nr][nc] == color:\n                            visited.add((nr, nc))\n                            queue.append((nr, nc))\n                \n                # Store the found object if it has coordinates\n                if current_object_coords:\n                     objects.append({'color': color, 'coords': current_object_coords})\n    return objects\n\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Transforms the input grid by finding the object with the highest density\n    within its bounding box and returning that bounding box subgrid.\n    \"\"\"\n    \n    # 1. Find all distinct objects in the input grid\n    found_objects = find_objects(input_grid)\n    \n    # Handle edge case where no objects are found\n    if not found_objects:\n        return [] \n\n    object_details = []\n    # 2. For each object, calculate its properties (bounding box, mass, area, density)\n    for obj in found_objects:\n        coords = obj['coords']\n        # Calculate bounding box\n        bbox = get_bounding_box(coords)\n        if bbox is None: # Skip if object somehow has no coordinates\n            continue\n\n        min_r, max_r, min_c, max_c = bbox\n        # Calculate mass (number of cells)\n        mass = len(coords)\n        # Calculate bounding box dimensions\n        height = max_r - min_r + 1\n        width = max_c - min_c + 1\n        # Calculate bounding box area\n        area = height * width\n        # Calculate density, handle division by zero just in case (though area should be > 0)\n        density = mass / area if area > 0 else 0\n        \n        # Store calculated properties\n        object_details.append({\n            'color': obj['color'],\n            'coords': coords,\n            'bbox': bbox,\n            'mass': mass,\n            'area': area,\n            'density': density\n        })\n\n    # Handle edge case where no valid object details were generated\n    if not object_details:\n         return [] \n\n    # 3. Select the object with the maximum density\n    # The `max` function with a lambda key finds the dict with the highest 'density' value\n    target_object = max(object_details, key=lambda x: x['density'])\n\n    # 4. Extract the subgrid corresponding to the target object's bounding box\n    min_r, max_r, min_c, max_c = target_object['bbox']\n    output_grid = []\n    # Iterate through the rows of the bounding box\n    for r in range(min_r, max_r + 1):\n        # Append the slice of the row corresponding to the bounding box columns\n        output_grid.append(input_grid[r][min_c : max_c + 1])\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 3757,
            "end_index": 3914,
            "uri": "https://github.com/Rijgersberg/advent-of-code-2020",
            "license_": ""
          },
          {
            "start_index": 5103,
            "end_index": 5288,
            "uri": "https://github.com/Rijgersberg/advent-of-code-2020",
            "license_": ""
          },
          {
            "start_index": 8904,
            "end_index": 9064,
            "uri": "https://github.com/Rijgersberg/advent-of-code-2020",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2388,
    "candidates_token_count": 3581,
    "total_token_count": 5969,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 30.30681,
  "retries": 1
}