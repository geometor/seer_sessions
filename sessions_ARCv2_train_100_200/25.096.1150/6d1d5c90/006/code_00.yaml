Input:
  type: grid
  description: A grid of single-digit integers.
  elements:
    - object: row
      description: A sequence of single-digit integers within the grid.
      properties:
        - index: The original position (0-based) of the row in the input grid.
        - elements: The sequence of integers in the row.
        - first_element: The integer at the first position of the row.
    - object: control_value_1
      description: The integer located at the first row, first column (input[0][0]).
      properties:
        - value: The numerical value of the element.
    - object: control_value_2
      description: >
        The integer located at the second row, first column (input[1][0]),
        if the grid has at least two rows.
      properties:
        - value: The numerical value of the element, or None if fewer than 2 rows.

Output:
  type: grid
  description: A grid of single-digit integers derived from the input.
  elements:
    - object: transformed_row
      description: >
        A sequence of single-digit integers, derived from an input row by
        removing its first element.
      properties:
        - elements: The sequence of integers remaining after removal.
        - last_element: The integer at the last position of the transformed row (if not empty).

Transformation:
  actions:
    - name: remove_first_element
      input: row
      output: transformed_row
      description: Removes the element at the first position of an input row.
    - name: conditional_sort
      input: list_of_transformed_rows, control_value_1, control_value_2
      output: sorted_list_of_transformed_rows
      description: >
        Orders the list of transformed_rows based on control values.
        1. If control_value_1 is 2: Maintain the original relative order of rows.
        2. If control_value_1 is 6:
           a. If control_value_2 is also 6 (and exists):
              - Sort rows primarily by their last_element in DESCENDING order.
              - Break ties based on the value of the tied last_element:
                - If last_element is EVEN: Use lexicographical ASCENDING order.
                - If last_element is ODD: Use lexicographical DESCENDING order.
           b. Otherwise (control_value_2 is not 6 or doesn't exist):
              - Sort rows using standard lexicographical ASCENDING order.
        3. Default/Other cases (if control_value_1 is not 2 or 6): Assume lexicographical ASCENDING sort (based on observed behavior for 6).
  relationships:
    - The final order of rows in the output grid depends critically on the values of the first elements of the first two rows of the input grid.