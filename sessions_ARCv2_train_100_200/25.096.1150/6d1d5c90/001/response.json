{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\n\n\"\"\"\nTransforms an input grid of numbers based on the value of its top-left element.\nFor each row in the input grid, the first element is removed.\nIf the top-left element of the original input grid is 2, the resulting rows maintain their original relative order.\nOtherwise (e.g., if the top-left element is 6), the resulting rows are sorted lexicographically.\n\"\"\"\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies a transformation rule to a grid of integers.\n\n    Args:\n        input_grid: A list of lists representing the input grid of integers.\n\n    Returns:\n        A list of lists representing the transformed grid.\n    \"\"\"\n\n    # Check if the input grid is empty or if the first row is empty\n    if not input_grid or not input_grid[0]:\n        return [] # Return empty list for empty or invalid input\n\n    # Get the value of the top-left element (control value)\n    control_value = input_grid[0][0]\n\n    # Create a list to store the transformed rows\n    transformed_rows = []\n\n    # Iterate through each row in the input grid\n    for row in input_grid:\n        # Ensure the row has at least one element before slicing\n        if len(row) > 1:\n             # Remove the first element and add the rest to the list\n            transformed_rows.append(row[1:])\n        else:\n            # If a row has 0 or 1 element, removing the first results in an empty list\n             transformed_rows.append([])\n\n    # Conditionally sort the transformed rows\n    if control_value == 2:\n        # If control_value is 2, maintain the original order\n        output_grid = transformed_rows\n    else:\n        # Otherwise, sort the rows lexicographically\n        # Use sorted() to create a new sorted list without modifying transformed_rows in place\n        output_grid = sorted(transformed_rows)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1876,
    "candidates_token_count": 802,
    "total_token_count": 2678,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 8.371717,
  "retries": 1
}