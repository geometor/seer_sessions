{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\n\n\"\"\"\nTransforms a grid of digits based on the proximity of specific values (2 and 5) to a background value (7).\n\nIterates through each cell of the input grid. If a cell contains the value 7, it counts the number of its 8 neighbors (including diagonals) that contain the value 2 and the number of neighbors that contain the value 5.\n\nTransformation rules for a cell containing 7:\n- If it has neighbors with value 2 but no neighbors with value 5, it becomes 3.\n- If it has neighbors with value 5 but no neighbors with value 2, it becomes 4.\n- If it has neighbors with both values 2 and 5:\n    - If the count of neighbors with value 2 is greater than or equal to the count of neighbors with value 5, it becomes 3.\n    - Otherwise (count of 5s is greater), it becomes 4.\n- If it has no neighbors with value 2 or 5, it remains 7.\nCells not containing 7 remain unchanged.\n\"\"\"\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid: A list of lists representing the 2D input grid.\n\n    Returns:\n        A list of lists representing the 2D transformed output grid.\n    \"\"\"\n    # Get grid dimensions\n    rows = len(input_grid)\n    if rows == 0:\n        return []\n    cols = len(input_grid[0])\n    if cols == 0:\n        return [[] for _ in range(rows)]\n\n    # Initialize output_grid as a deep copy of the input\n    # This handles keeping non-7 values and 7s with no relevant neighbors\n    output_grid = copy.deepcopy(input_grid)\n\n    # Define the 8 neighbor directions (row_offset, col_offset)\n    neighbor_directions = [\n        (-1, -1), (-1, 0), (-1, 1),\n        ( 0, -1),          ( 0, 1),\n        ( 1, -1), ( 1, 0), ( 1, 1),\n    ]\n\n    # Iterate through each cell of the input grid\n    for r in range(rows):\n        for c in range(cols):\n            # Check if the current cell is a 7\n            if input_grid[r][c] == 7:\n                # Initialize counts for neighbors with values 2 and 5\n                count_2 = 0\n                count_5 = 0\n\n                # Examine the 8 neighbors\n                for dr, dc in neighbor_directions:\n                    nr, nc = r + dr, c + dc\n\n                    # Check if the neighbor is within grid boundaries\n                    if 0 <= nr < rows and 0 <= nc < cols:\n                        neighbor_value = input_grid[nr][nc]\n                        # Increment counts based on neighbor value\n                        if neighbor_value == 2:\n                            count_2 += 1\n                        elif neighbor_value == 5:\n                            count_5 += 1\n\n                # Apply transformation rules based on neighbor counts\n                if count_2 > 0 and count_5 == 0:\n                    output_grid[r][c] = 3\n                elif count_5 > 0 and count_2 == 0:\n                    output_grid[r][c] = 4\n                elif count_2 > 0 and count_5 > 0:\n                    if count_2 >= count_5:\n                        output_grid[r][c] = 3\n                    else:\n                        output_grid[r][c] = 4\n                # If count_2 == 0 and count_5 == 0, the value remains 7 (already set by deepcopy)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2548,
    "candidates_token_count": 1538,
    "total_token_count": 4086,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.101063,
  "retries": 1
}