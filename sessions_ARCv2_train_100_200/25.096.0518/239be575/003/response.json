{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport math\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nTransforms an input grid based on its shape and the number of 2x2 blocks of '2's.\n\n1.  Determine the grid dimensions (rows and columns).\n2.  Check if the grid is square (rows == columns).\n3.  If the grid is square, the output is 0.\n4.  If the grid is not square:\n    a.  Count the number of non-overlapping 2x2 subgrids consisting entirely of the digit 2.\n    b.  If the count of such 2x2 subgrids is exactly 1, the output is 8.\n    c.  Otherwise (count is 0 or greater than 1), the output is 0.\n\"\"\"\n\ndef count_2x2_of_twos(grid: list[list[int]]) -> int:\n    \"\"\"\n    Counts the number of non-overlapping 2x2 subgrids containing only the digit 2.\n\n    Args:\n        grid: A list of lists representing the 2D grid of integers.\n\n    Returns:\n        The integer count of 2x2 subgrids made entirely of '2's.\n    \"\"\"\n    rows = len(grid)\n    # Handle edge cases: grid too small or potentially malformed\n    if rows < 2:\n        return 0\n    if not grid[0]: # Check if the first row is empty\n        return 0\n    cols = len(grid[0])\n    if cols < 2:\n        return 0\n    # Ensure all rows have the same length for valid grid processing\n    if not all(len(r) == cols for r in grid):\n        # Or raise an error, depending on expected input guarantees\n        return 0 # Treat malformed grid as having 0 patterns\n\n    count = 0\n    # Iterate through all possible top-left corners of a 2x2 subgrid\n    for r in range(rows - 1):\n        for c in range(cols - 1):\n            # Check if the 2x2 subgrid starting at (r, c) consists only of 2s\n            if (grid[r][c] == 2 and\n                grid[r+1][c] == 2 and\n                grid[r][c+1] == 2 and\n                grid[r+1][c+1] == 2):\n                count += 1 # Found a pattern\n    return count\n\n\ndef transform(input_grid: list[list[int]]) -> int:\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid: A list of lists representing the 2D grid of integers.\n\n    Returns:\n        An integer (0 or 8) based on the transformation rules.\n    \"\"\"\n    # Get grid dimensions\n    rows = len(input_grid)\n    # Handle empty grid case\n    if rows == 0:\n        return 0\n    cols = len(input_grid[0])\n    if cols == 0:\n        return 0\n\n    # Check if the grid is square\n    is_square = (rows == cols)\n\n    # Apply transformation logic based on shape\n    if is_square:\n        # If the grid is square, the output is 0\n        output_value = 0\n    else:\n        # If the grid is not square, count the 2x2 pattern of 2s\n        pattern_count = count_2x2_of_twos(input_grid)\n\n        # Determine output based on the count\n        if pattern_count == 1:\n            # If exactly one pattern is found, the output is 8\n            output_value = 8\n        else:\n            # If zero or more than one pattern is found, the output is 0\n            output_value = 0\n\n    # The output is a single integer, not a grid\n    return output_value\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6116,
    "candidates_token_count": 2694,
    "total_token_count": 8810,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 21.989327,
  "retries": 1
}