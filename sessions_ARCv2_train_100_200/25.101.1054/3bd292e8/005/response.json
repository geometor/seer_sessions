{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nTransforms an input grid containing Red(2) and Orange(7) pixels.\nRed(2) pixels remain unchanged.\nOrange(7) pixels become Gray(5) if they are either 8-way adjacent to a Red(2) pixel \nor 8-way adjacent to another Orange pixel that becomes Gray(5). This creates a \npropagation effect where Gray 'spreads' from Red-adjacent Orange pixels.\nOrange(7) pixels not reached by this Gray propagation become Green(3).\n\nThe transformation follows these steps:\n1. Initialize an output grid, copying Red pixels and tentatively marking Orange pixels as Green.\n2. Identify initial 'seed' Gray pixels: Orange pixels directly 8-way adjacent to Red pixels. Mark them as Gray in the output and add them to a propagation queue.\n3. Propagate Gray: While the queue is not empty, take a Gray pixel coordinate, check its 8 neighbors. If a neighbor is currently marked Green, change it to Gray and add it to the queue.\n4. Final Output: The grid after propagation is complete.\n\"\"\"\n\ndef _is_valid(r, c, height, width):\n    \"\"\"Checks if coordinates are within grid bounds.\"\"\"\n    return 0 <= r < height and 0 <= c < width\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:  \n    \"\"\"\n    Applies the propagation-based transformation.\n\n    Args:\n        input_grid: The input grid as a list of lists.\n\n    Returns:\n        The transformed grid as a list of lists.\n    \"\"\"\n    input_np = np.array(input_grid, dtype=int)\n    height, width = input_np.shape\n    \n    # Initialize output grid: -1 for placeholder, will be filled\n    output_np = np.full_like(input_np, -1) \n    \n    # Queue for Breadth-First Search (BFS) propagation\n    queue = deque()\n    \n    # Deltas for 8-way neighbors\n    deltas = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]\n\n    # --- Step 1 & 2: Initialize Output and Identify Seed Gray Pixels ---\n    for r in range(height):\n        for c in range(width):\n            if input_np[r, c] == 2: # Red pixel\n                output_np[r, c] = 2\n            elif input_np[r, c] == 7: # Orange pixel\n                is_adjacent_to_red = False\n                # Check 8 neighbors in the *input* grid for Red\n                for dr, dc in deltas:\n                    nr, nc = r + dr, c + dc\n                    if _is_valid(nr, nc, height, width) and input_np[nr, nc] == 2:\n                        is_adjacent_to_red = True\n                        break\n                \n                if is_adjacent_to_red:\n                    # This Orange pixel is adjacent to Red -> Seed Gray pixel\n                    output_np[r, c] = 5 # Mark as Gray\n                    queue.append((r, c)) # Add to propagation queue\n                else:\n                    # Not adjacent to Red -> Tentatively mark as Green\n                    output_np[r, c] = 3 \n            else:\n                # Copy any other colors directly (though not expected based on examples)\n                 output_np[r, c] = input_np[r, c]\n\n    # --- Step 3: Propagate Gray using BFS ---\n    while queue:\n        r, c = queue.popleft() # Get coordinates of a Gray pixel\n        \n        # Examine 8 neighbors\n        for dr, dc in deltas:\n            nr, nc = r + dr, c + dc\n            \n            # Check if neighbor is valid and is currently marked as Green (3)\n            if _is_valid(nr, nc, height, width) and output_np[nr, nc] == 3:\n                # Propagate Gray: Change Green neighbor to Gray\n                output_np[nr, nc] = 5\n                # Add the newly Gray pixel to the queue to continue propagation\n                queue.append((nr, nc))\n\n    # --- Step 4: Final Output ---\n    # The output_np grid now holds the final state.\n    # Any pixel initially marked -1 should have been filled.\n    # Convert back to list of lists\n    output_grid = output_np.tolist()\n    \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 25466,
    "candidates_token_count": 1724,
    "total_token_count": 27190,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-preview-03-25",
  "response_time": 15.846523,
  "retries": 1
}