task_elements:
  - Input Grid:
      colors: [white (0), gray (5)]
  - Output Grid:
      colors: [white (0), gray (5), green (3)]
      size: same as input grid
  - Transformation Type: Local rule based on pixel neighborhood.
objects:
  - type: pixel
    properties:
      color: { value: 0..9 }
      position: { row: int, column: int }
actions:
  - name: analyze_pixel
    input: gray pixel P at (r, c) in input_grid
    operations:
      - Check color of diagonal neighbors (NW, NE, SW, SE), handling grid boundaries.
      - Count number of gray diagonal neighbors (num_diag).
      - Check if P is on top row (r == 0).
      - Check if P is on bottom row (r == height - 1).
      - Determine output color based on conditions.
    output: color for pixel P in output_grid (3 or 5)
conditions_for_gray_pixel_output:
  - condition: V-Top
    input_criteria: Input[SW] == 5 AND Input[SE] == 5
    output_color: 5 (Gray)
  - condition: Isolated
    input_criteria: num_diag == 0
    output_color: 5 (Gray) IF on bottom row ELSE 3 (Green)
  - condition: Anchor-1 # A single diagonal neighbor connection at grid edge
    input_criteria: num_diag == 1 AND ((is_top AND (Input[SW] == 5 OR Input[SE] == 5)) OR (is_bottom AND (Input[NW] == 5 OR Input[NE] == 5)))
    output_color: 5 (Gray)
  - condition: NonAnchor-1 # Single diagonal neighbor, not at edge anchor point
    input_criteria: num_diag == 1 AND NOT Anchor-1 criteria
    output_color: 3 (Green) # Note: Fails for Ex2 (1,0)
  - condition: Diag-2 # Two diagonal neighbors, but not V-Top
    input_criteria: num_diag == 2 AND NOT (Input[SW] == 5 AND Input[SE] == 5)
    output_color: 3 (Green) # Note: Fails for Ex2 (1,4)
  - condition: Diag-3+ # Three or more diagonal neighbors
    input_criteria: num_diag >= 3
    output_color: 5 (Gray) # Assumption based on lack of examples
static_rules:
  - If Input pixel color is white (0), Output pixel color is white (0).