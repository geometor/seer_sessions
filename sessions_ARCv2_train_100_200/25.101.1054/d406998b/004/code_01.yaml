task_elements:
  - Input Grid:
      colors: [white (0), gray (5)]
  - Output Grid:
      colors: [white (0), gray (5), green (3)]
      size: same as input grid
  - Transformation Type: Local rule based primarily on diagonal neighbors below the pixel.
objects:
  - type: pixel
    properties:
      color: { value: 0, 3, 5 }
      position: { row: int, column: int }
      neighbors: # Relative positions
        - sw: (row+1, col-1)
        - se: (row+1, col+1)
actions:
  - name: transform_pixel
    input: pixel P at (r, c) in input_grid
    output: color for pixel P at (r, c) in output_grid
    logic:
      - IF P is white (0), output is white (0).
      - IF P is gray (5):
          - Check if South-West neighbor exists within grid AND is gray (5). Store result as `has_sw_gray`.
          - Check if South-East neighbor exists within grid AND is gray (5). Store result as `has_se_gray`.
          - IF `has_sw_gray` is True AND `has_se_gray` is True:
              Output is gray (5). # Primary rule
          - ELSE:
              Output is green (3). # Default change
rule_notes:
  - This rule is based on the most frequent pattern observed but is known to be incomplete.
  - Known Failures (Rule predicts 3, should be 5): The rule incorrectly changes some gray pixels to green, particularly pixels near edges or those without the SW+SE support structure but which remain gray in the expected output (e.g., Ex1(0,7), Ex2(1,0), Ex4(0,0)).
  - Known Failures (Rule predicts 5, should be 3): In some cases (Ex3(0,9), Ex4(1,7)), pixels have SW+SE gray neighbors but still change to green in the expected output, contradicting the primary rule. The trigger for this override is unclear but might relate to the total number of neighbors.
