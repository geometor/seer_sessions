task_elements:
  - element: Grid
    properties:
      - type: 2D array
      - cells: integers 0-9 (colors)
      - background_color: Orange (7)
      - pattern_colors: [Red (2), Gray (5)]
      - structure: Top row has pattern, rows below are initially background color.

objects:
  - object: Pixel Pattern
    location: Top row (row 0) of the input grid.
    properties:
      - composition: Contains Red (2) and Gray (5) pixels, possibly Orange (7).
      - role: Acts as the initial state (seed) for the transformation process.
  - object: Generated Pixels
    location: Rows below the top row (row > 0) in the output grid.
    properties:
      - colors: Red (2) or Gray (5)
      - origin: Generated based on pixels in the row above.
      - condition: Only appear in cells that were initially Orange (7).

relationships:
  - relationship: Pixel Dependency
    from: Pixel at output `(row, col)` where `row > 0`
    to: Pixels at output `(row-1, col-1)` and output `(row-1, col+1)`
    details: The color of `(row, col)` is determined by the colors of the two specified pixels in the row above, provided `(row, col)` is currently Orange (7) and both source pixels are Red (2) or Gray (5).

actions:
  - action: Initialize Output
    actor: System
    target: Output Grid
    result: Output Grid is a copy of the Input Grid.
  - action: Iterate Rows
    actor: System
    target: Output Grid rows `r` from 1 to height-1
    process: For each row, iterate through columns `c` from 0 to width-1.
  - action: Apply Rule
    actor: System
    target: Pixel at output `(r, c)`
    condition: >
      Requires `output_grid[r, c]` to be Orange (7).
      Requires source pixels `output_grid[r-1, c-1]` and `output_grid[r-1, c+1]` (treating out-of-bounds as Orange 7) to be non-Orange (i.e., Red 2 or Gray 5).
    rule:
      - If `src1 == src2`: result = 5 if src1 == 2 else 2
      - If `src1 != src2`: result = src2 (color of right source)
    result: Updates `output_grid[r, c]` with the calculated result color.

constants:
  - name: Red
    value: 2
  - name: Gray
    value: 5
  - name: Orange
    value: 7
  - name: BoundaryColor
    value: 7 # Color to assume for out-of-bounds source pixels
