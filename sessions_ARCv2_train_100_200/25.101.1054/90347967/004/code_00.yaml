Transformation: Geometric Rotation

Grid Properties (Input & Output):
  - dimensions: Variable (H, W), preserved between input and output for each example.
  - background_color: white (0).
  - non_white_pixel_count: Preserved between input and output.
  - content_bounding_box_size: Preserved between input and output (e.g., T1: 3x2->3x2, T2: 3x4->3x4, T3: 3x4->3x4).

Objects:
  - The entire grid content can be considered a single object for this transformation.
  - Alternatively, the set of non-white pixels forms a sub-object or pattern.

Actions & Relationships (Hypothesized Rule based on T1, T2):
  - rule: Rotate the entire input grid by 180 degrees globally around the grid's center.
  - pixel_mapping: Each input pixel at (r, c) moves to output position (H - 1 - r, W - 1 - c).
  - color_preservation: The color of each pixel remains unchanged during the rotation.
  - scope: The rotation applies to every pixel in the grid, including the background.
  - bounding_box_transformation (Implied by rule): The bounding box of the non-white pixels is implicitly transformed along with the global rotation. Its new top-left corner becomes (H - 1 - max_r_in, W - 1 - max_c_in) and its new bottom-right becomes (H - 1 - min_r_in, W - 1 - min_c_in).

Discrepancy (Train 3):
  - The expected output for train_3 is inconsistent with the global 180-degree rotation rule.
  - Input BB: (2,0)-(4,3)
  - Expected Output BB: (0,3)-(2,6)
  - Transformed Output BB (using the rule): (4,5)-(6,8)
  - While the non-white pixel *pattern* within the bounding box of the train_3 expected output *is* a 180-degree rotation of the input pattern, its *position* differs significantly from the position predicted by the global rotation rule. The reason for this specific placement in the expected output is unclear and does not follow a pattern consistent with the other examples.

Conclusion: The global 180-degree rotation is the most consistent and simple rule explaining examples T1 and T2. T3's expected output appears anomalous under this rule.