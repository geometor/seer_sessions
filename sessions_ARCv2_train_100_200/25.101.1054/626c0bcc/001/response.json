{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransforms an input grid where azure (8) pixels are recolored based on the \npattern of azure pixels in their 2x2 neighborhood (starting at the pixel).\nWhite (0) pixels remain unchanged.\n\nThe specific mapping rules for the 2x2 neighborhood patterns (top-left, top-right, \nbottom-left, bottom-right) to the output color for the top-left pixel are:\n- (8,0,0,0) -> 3 (green)\n- (8,8,0,0) -> 1 (blue)\n- (8,0,8,0) -> 2 (red)\n- (8,0,0,8) -> 3 (green)\n- (8,8,8,0) -> 3 (green)\n- (8,8,0,8) -> 2 (red)\n- (8,0,8,8) -> 4 (yellow)\n- (8,8,8,8) -> 1 (blue)\n\"\"\"\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies a 2x2 neighborhood pattern-based color transformation to azure pixels.\n\n    Args:\n        input_grid: A list of lists representing the input grid.\n\n    Returns:\n        A list of lists representing the transformed output grid.\n    \"\"\"\n    input_array = np.array(input_grid, dtype=int)\n    height, width = input_array.shape\n\n    # Pad the input array with 0s (white) on the right and bottom edges \n    # to handle boundary conditions when extracting 2x2 neighborhoods.\n    # We need 1 layer of padding at the bottom and right.\n    padded_input = np.pad(input_array, ((0, 1), (0, 1)), mode='constant', constant_values=0)\n\n    # Initialize the output grid with the same dimensions as the input, filled with 0s (white)\n    output_array = np.zeros_like(input_array)\n\n    # Define the mapping from 2x2 patterns (flattened tuple) to output colors\n    # The pattern tuple represents (top-left, top-right, bottom-left, bottom-right)\n    pattern_map = {\n        (8, 0, 0, 0): 3,  # green\n        (8, 8, 0, 0): 1,  # blue\n        (8, 0, 8, 0): 2,  # red\n        (8, 0, 0, 8): 3,  # green (Corrected based on train_1 example: pixel (4,3) -> 3)\n        (8, 8, 8, 0): 3,  # green\n        (8, 8, 0, 8): 2,  # red   (Corrected based on train_2 example: pixel (2,2) -> 2)\n        (8, 0, 8, 8): 4,  # yellow\n        (8, 8, 8, 8): 1,  # blue\n    }\n\n    # Iterate through each pixel of the original input grid\n    for r in range(height):\n        for c in range(width):\n            # Check if the current pixel in the original input is azure (8)\n            if input_array[r, c] == 8:\n                # Extract the 2x2 neighborhood from the padded input\n                # The top-left of the neighborhood corresponds to (r, c) in the original grid\n                neighborhood = padded_input[r:r+2, c:c+2]\n\n                # Flatten the neighborhood into a tuple to use as a key for the map\n                pattern = tuple(neighborhood.flatten())\n\n                # Look up the corresponding output color from the pattern map\n                # Default to 0 (white) if the pattern is somehow not found (though should not happen if input[r,c] is 8)\n                output_color = pattern_map.get(pattern, 0) \n\n                # Assign the determined color to the output grid at the same position\n                output_array[r, c] = output_color\n            else:\n                # If the input pixel is not azure (i.e., it's white), keep it white in the output\n                output_array[r, c] = input_array[r, c] # which is 0\n\n    # Convert the output NumPy array back to a list of lists\n    output_grid = output_array.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2757,
    "candidates_token_count": 1800,
    "total_token_count": 4557,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-preview-03-25",
  "response_time": 13.505214,
  "retries": 1
}