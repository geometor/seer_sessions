{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nRotate non-zero digits clockwise within concentric layers of a 2D grid.\nFor each layer, identify the non-zero elements. The value for each non-zero\nposition in the output grid is taken from the next non-zero position clockwise\nin the input grid within that same layer. Zeroes remain stationary unless\noverwritten by a moving non-zero digit.\n\"\"\"\n\ndef get_layer_coords(layer_index, grid_size):\n    \"\"\"\n    Generates the coordinates of a specific concentric layer in clockwise order.\n\n    Args:\n        layer_index: The index of the layer (0 for outermost).\n        grid_size: The dimension of the square grid (N).\n\n    Returns:\n        A list of (row, col) tuples representing the coordinates of the layer.\n    \"\"\"\n    coords = []\n    min_idx = layer_index\n    max_idx = grid_size - 1 - layer_index\n\n    # Handle the center element for odd-sized grids\n    if min_idx == max_idx:\n        return [(min_idx, min_idx)]\n\n    # Top row (left to right, excluding last element)\n    for c in range(min_idx, max_idx):\n        coords.append((min_idx, c))\n    # Right column (top to bottom, excluding last element)\n    for r in range(min_idx, max_idx):\n        coords.append((r, max_idx))\n    # Bottom row (right to left, excluding last element)\n    for c in range(max_idx, min_idx, -1):\n        coords.append((max_idx, c))\n    # Left column (bottom to top, excluding last element)\n    for r in range(max_idx, min_idx, -1):\n        coords.append((r, min_idx))\n\n    return coords\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the clockwise rotation of non-zero digits within concentric layers.\n\n    Args:\n        input_grid: A list of lists representing the input 2D grid.\n\n    Returns:\n        A list of lists representing the transformed 2D grid.\n    \"\"\"\n    # Convert input to numpy array for easier handling\n    input_np = np.array(input_grid)\n    # Initialize output grid as a copy of the input\n    output_np = np.copy(input_np)\n    grid_size = input_np.shape[0]\n\n    # Determine the number of layers\n    num_layers = (grid_size + 1) // 2\n\n    # Iterate through each layer\n    for l in range(num_layers):\n        # Get the coordinates for the current layer\n        layer_coords = get_layer_coords(l, grid_size)\n\n        # Extract non-zero elements (value and original coordinate) from this layer\n        non_zero_elements = []\n        for r, c in layer_coords:\n            value = input_np[r, c]\n            if value != 0:\n                non_zero_elements.append(((r, c), value))\n\n        # If there are 2 or more non-zero elements, perform the rotation\n        num_non_zero = len(non_zero_elements)\n        if num_non_zero > 1:\n            # Iterate through the non-zero elements found\n            for i in range(num_non_zero):\n                # Get the coordinate where the rotated value should be placed (target)\n                target_coord, _ = non_zero_elements[i]\n\n                # Determine the index of the element whose value will move here (source)\n                # This is the *next* non-zero element clockwise in the input\n                source_index = (i + 1) % num_non_zero\n                _, source_value = non_zero_elements[source_index]\n\n                # Place the source value at the target coordinate in the output grid\n                output_np[target_coord[0], target_coord[1]] = source_value\n\n    # Convert the numpy array back to a list of lists\n    output_grid = output_np.tolist()\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2458,
    "candidates_token_count": 1615,
    "total_token_count": 4073,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.198363,
  "retries": 1
}