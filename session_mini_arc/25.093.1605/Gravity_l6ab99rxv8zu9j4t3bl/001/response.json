{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nApplies a 'gravity' effect independently to each column of the input grid.\nNon-zero numbers within each column fall downwards, maintaining their relative \nvertical order, until they stack up at the bottom of the column. \nCells left empty by this movement are filled with zeros.\n\n1. Initialize an output grid of the same dimensions as the input, filled with zeros.\n2. Iterate through each column of the input grid.\n3. For each column:\n    a. Extract all non-zero numbers from top to bottom, preserving their order.\n    b. Determine the starting row index in the output column where these non-zero numbers should be placed (bottom-justified).\n    c. Place the extracted non-zero numbers into the output grid column starting from the calculated row index downwards.\n4. Return the resulting output grid.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by applying columnar gravity.\n\n    Args:\n        input_grid: A list of lists representing the 2D input grid of integers.\n\n    Returns:\n        A list of lists representing the transformed 2D grid.\n    \"\"\"\n    # Convert input to numpy array for easier handling, though list operations are also possible\n    input_array = np.array(input_grid, dtype=int)\n    num_rows, num_cols = input_array.shape\n\n    # Initialize the output grid with zeros, same dimensions as input\n    output_array = np.zeros_like(input_array)\n\n    # Iterate through each column index\n    for c in range(num_cols):\n        # Extract non-zero elements from the current column in the input grid\n        # Maintain the original top-to-bottom order\n        non_zeros_in_col = []\n        for r in range(num_rows):\n            if input_array[r, c] != 0:\n                non_zeros_in_col.append(input_array[r, c])\n\n        # Determine the number of non-zero elements found\n        num_non_zeros = len(non_zeros_in_col)\n\n        # Calculate the row index in the output grid where the stack of non-zeros should start\n        # This ensures they are placed at the bottom of the column\n        start_row = num_rows - num_non_zeros\n\n        # Place the collected non-zero elements into the corresponding output column\n        # Start placing from 'start_row' downwards\n        for i in range(num_non_zeros):\n            output_array[start_row + i, c] = non_zeros_in_col[i]\n\n    # Convert the numpy array back to a list of lists for the final output\n    output_grid = output_array.tolist()\n    \n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1600,
    "candidates_token_count": 1894,
    "total_token_count": 3494,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 17.702434,
  "retries": 1
}