task_elements:
  - type: grid
    properties:
      - representation: 2D matrix (5x5)
      - cell_values: integers (0, 1, 3, 4)
      - value_interpretation: colors (0: background, 1: red, 3: blue, 4: yellow)
objects:
  - name: background_cell
    identifier: cell value is 0
    properties:
      - color: black (0)
  - name: red_cell
    identifier: cell value is 1
    properties:
      - color: red (1)
  - name: blue_cell
    identifier: cell value is 3
    properties:
      - color: blue (3)
  - name: yellow_cell
    identifier: cell value is 4
    properties:
      - color: yellow (4)
  - name: blue_configuration
    identifier: the set of all blue_cell coordinates in the input grid
  - name: red_yellow_presence
    identifier: boolean flag, true if any red_cell or yellow_cell exists in the input grid

actions:
  - name: remove_color
    target: red_cell
    new_value: 0
    condition: always applied if red_cell exists
  - name: remove_color
    target: yellow_cell
    new_value: 0
    condition: always applied if yellow_cell exists
  - name: preserve_blue_configuration
    target: blue_configuration
    condition: applied only if red_yellow_presence is false
  - name: transform_blue_configuration
    target: blue_configuration
    condition: applied only if red_yellow_presence is true
    details: Replaces the original blue_configuration with a new set of blue coordinates. The specific algorithm for this transformation (T) depends on the input blue_configuration and results in the patterns observed in examples train_2, train_3, and test_1.
  - name: create_output_grid
    properties:
      - dimensions: same as input grid
      - background: color 0
      - content: Populated based on the outcomes of remove_color, preserve_blue_configuration or transform_blue_configuration actions.

relationships:
  - input_grid and output_grid have the same dimensions.
  - The final output grid's blue cells depend conditionally on the presence of red or yellow cells in the input grid.

transformation_rule_summary:
  - If the input grid contains any red (1) or yellow (4) cells, remove them (set to 0). Then, replace all original blue (3) cells with a new configuration of blue cells determined by a specific transformation rule (T) applied to the original blue cell coordinates.
  - If the input grid contains *no* red (1) or yellow (4) cells, the output grid is identical to the input grid (inferred, needs confirmation example).
  - Based on Train_1: If red/yellow cells exist but are "separate" from blue cells, the blue cells might be preserved while red/yellow are removed. This adds ambiguity to the simple presence check. A more refined rule might involve proximity or bounding box overlap. However, sticking to the clearest pattern: presence of 1/4 triggers removal of 1/4 and transformation T of 3s. Absence of 1/4 preserves 3s. Train_1 might be a specific edge case of T where T(config) = config under certain separation conditions, or the simple presence rule is sufficient and Train_1's output implies T(input_3s) happens to equal input_3s in that case.