{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid by swapping adjacent columns. The specific pairs of columns swapped depend on the parity of the index of the first column (leftmost) containing a non-zero value.\n1. Find the index 'k' of the first column (0-indexed) containing any non-zero value.\n2. If 'k' is odd, swap adjacent column pairs starting from index 1 (i.e., swap columns (1,2), then (3,4), ...).\n3. If 'k' is even (including the case where the grid is all zeros, treated as k=0), swap adjacent column pairs starting from index 0 (i.e., swap columns (0,1), then (2,3), ...).\n\"\"\"\n\nimport copy\n\ndef find_first_non_zero_col_index(grid):\n    \"\"\"\n    Finds the index of the first column (leftmost) containing a non-zero value.\n\n    Args:\n        grid: A list of lists representing the 2D grid.\n\n    Returns:\n        The integer index of the first column with a non-zero value, \n        or -1 if the grid is empty or contains only zeros.\n    \"\"\"\n    # Check for empty grid or grid with no columns\n    if not grid or not grid[0]:\n        return -1 \n\n    num_rows = len(grid)\n    num_cols = len(grid[0])\n\n    # Iterate through columns first, then rows within each column\n    for j in range(num_cols):\n        for i in range(num_rows):\n            if grid[i][j] != 0:\n                return j  # Found the first non-zero column index\n    \n    # If no non-zero element is found after checking all columns\n    return -1 # Indicates all zeros or empty rows were present\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the conditional column swapping transformation to the input grid.\n\n    Args:\n        input_grid: A list of lists representing the input 2D grid.\n\n    Returns:\n        A list of lists representing the transformed 2D grid.\n    \"\"\"\n    # Handle empty grid case immediately\n    if not input_grid or not input_grid[0]:\n        return []\n\n    # Initialize output_grid as a deep copy to avoid modifying the input in place\n    output_grid = copy.deepcopy(input_grid)\n    num_rows = len(output_grid)\n    num_cols = len(output_grid[0])\n\n    # 1. Inspect Input Grid: Find the index of the first non-zero column\n    first_nz_col_idx = find_first_non_zero_col_index(input_grid)\n\n    # 2. Determine Swap Pattern: Set the starting column index for swapping\n    start_swap_index = 0 # Default for even index or all zeros\n    if first_nz_col_idx != -1 and first_nz_col_idx % 2 != 0:\n        # If the first non-zero column index is odd, start swapping from index 1\n        start_swap_index = 1 \n    # else: start_swap_index remains 0 (for even index or all zeros)\n\n    # 3. Perform Swaps: Iterate through column pairs and swap\n    # Loop starts from start_swap_index, increments by 2, and stops before exceeding grid bounds\n    for j in range(start_swap_index, num_cols - 1, 2):\n        # The loop condition `num_cols - 1` ensures j+1 is always a valid column index\n        \n        # Swap the entire contents of column j with column j+1\n        for i in range(num_rows):\n            # Perform the swap for the element in the current row i for columns j and j+1\n            output_grid[i][j], output_grid[i][j+1] = output_grid[i][j+1], output_grid[i][j]\n\n    # 4. Output: Return the modified grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6245,
    "candidates_token_count": 1234,
    "total_token_count": 7479,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.99282,
  "retries": 1
}