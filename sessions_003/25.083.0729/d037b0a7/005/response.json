{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies non-zero pixels in the input grid, determines a bounding rectangle\nusing these pixels, and fills the rectangle with the colors of the original\npixels, propagating those colors to the filled area of the rectangle.\n\"\"\"\n\nimport numpy as np\nimport scipy.ndimage\n\ndef find_objects(grid):\n    \"\"\"Identifies contiguous blocks of non-zero pixels.\"\"\"\n    labeled_grid, num_labels = scipy.ndimage.label(grid)\n    objects = []\n    for label in range(1, num_labels + 1):\n        block_indices = np.argwhere(labeled_grid == label)\n        objects.append(block_indices)\n    return objects\n\ndef find_bounding_rectangle(objects):\n    \"\"\"Finds the bounding rectangle from a list of objects.\"\"\"\n    all_points = np.concatenate(objects)\n    min_row = np.min(all_points[:, 0])\n    max_row = np.max(all_points[:, 0])\n    min_col = np.min(all_points[:, 1])\n    max_col = np.max(all_points[:, 1])\n\n    return (min_row, min_col), (max_row, max_col)\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = input_grid.copy()\n\n    # Find objects (contiguous non-zero pixels)\n    objects = find_objects(input_grid)\n    if not objects:  # Handle empty input\n      return output_grid\n    \n    # Find the bounding rectangle.\n    top_left, bottom_right = find_bounding_rectangle(objects)\n\n    # Fill the rectangle using colors of the existing objects\n    for obj in objects:\n       for point in obj:\n          output_grid[top_left[0]:bottom_right[0]+1, top_left[1]:bottom_right[1]+1] = input_grid[point[0],point[1]]\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4167,
    "candidates_token_count": 456,
    "total_token_count": 4623,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.523215
}