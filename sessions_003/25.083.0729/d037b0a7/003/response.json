{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies an \"L\" shape formed by non-zero pixels in the input grid, \nextends it to form a rectangle, and fills the newly occupied space with \nthe color from the top-right corner of the input grid. The filling logic\ndifferentiates between horizontal, and vertical orientations.\n\"\"\"\n\nimport numpy as np\n\ndef find_l_shape(grid):\n    \"\"\"\n    Finds the \"L\" shape, its corner, orientation, and extension color.\n    \"\"\"\n    rows, cols = grid.shape\n    non_zero_indices = np.argwhere(grid != 0)\n    if len(non_zero_indices) < 2:\n        return None, None, None, None\n\n    # Find top-right element color for extension\n    extension_color = grid[0, cols - 1]\n\n    # Determine corner and orientation\n    first = non_zero_indices[0]\n    last = non_zero_indices[-1]\n\n    if first[0] == last[0]:  # Horizontal L\n        corner_row, corner_col = first[0], last[1]\n        orientation = 'horizontal'\n        \n    elif first[1] == last[1]:  # Vertical L\n        corner_row, corner_col = last[0], first[1]\n        orientation = 'vertical'\n    else:\n        # check if its 2 points creating a diagonal\n        if(len(non_zero_indices)==2):\n            if first[1] < last[1]:\n                 corner_row, corner_col = first[0],last[1]\n            else:\n                corner_row, corner_col = last[0],first[1]\n           \n            orientation = 'horizontal'\n\n        else:\n            return None, None, None,None # Not a clear L\n    \n    return (corner_row, corner_col), orientation, extension_color\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by extending an \"L\" shape to a rectangle.\n    \"\"\"\n    # Initialize output_grid as a copy of the input_grid.\n    output_grid = input_grid.copy()\n    rows, cols = output_grid.shape\n\n    # Find the L shape and its properties.\n    l_shape_info = find_l_shape(input_grid)\n    if l_shape_info is None:\n        return output_grid  # No L shape found, return original grid\n\n    corner, orientation, extension_color = l_shape_info\n\n    # Extend the \"L\" and fill.\n    if orientation == 'horizontal':\n        # Extend downwards\n        for i in range(corner[0] + 1, rows):\n            for j in range(0, corner[1] + 1):\n                if j < corner[1]:\n                  output_grid[i, j] = output_grid[corner[0],j] # fill same color as top row of \"L\" until hitting corner column\n                else:\n                  output_grid[i,j] = extension_color # use extension_color for corner and beyond\n\n    elif orientation == 'vertical':\n        # Extend rightwards\n        for i in range(corner[0] + 1, rows):\n           for j in range(corner[1] + 1, cols):\n                if j <= corner[1]:\n                    output_grid[i, j] = output_grid[i,0] # fill from \"L\" column\n                else:\n                    output_grid[i,j] = extension_color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3651,
    "candidates_token_count": 812,
    "total_token_count": 4463,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.053828
}