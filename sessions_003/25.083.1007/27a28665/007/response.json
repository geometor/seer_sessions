{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Initialization:**\n    *   Set a counter `count` to 0.\n    *   Create an empty set `visited` to store the coordinates of pixels that have been processed.\n\n2.  **Iteration:**\n    *   Loop through each pixel in the input grid. Let the current pixel's row be `r` and column be `c`.\n\n3.  **Check and Skip:**\n    *   If the pixel at `(r, c)` is in the `visited` set, skip to the next pixel.\n    *   If the color of the pixel at `(r, c)` is 0 (background), skip to the next pixel.\n\n4.  **Object Detection and Counting:**\n    *   If the pixel at `(r, c)` is not in `visited` and its color is not 0, increment the `count`.\n\n5.  **4-Connected Depth-First Search (DFS):**\n    *   Start a DFS from the current pixel `(r, c)`:\n        *   Add `(r, c)` to the `visited` set.\n        *   Recursively visit the 4 neighbors (up, down, left, right) of the current pixel.\n        *   For each neighbor `(nr, nc)`:\n            *   If `(nr, nc)` is within the grid boundaries,\n            *   and `(nr, nc)` is not in the `visited` set,\n            *   and the color of the pixel at `(nr, nc)` is the same as the color of the initial pixel at `(r, c)`,\n            *   then recursively call DFS on `(nr, nc)`.\n\n6.  **Output:** After iterating through all pixels, the value of `count` represents the total number of distinct objects (4-connected regions of non-zero color) in the input grid. Return `count`.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    grid = np.array(input_grid)\n    visited = set()\n    count = 0\n\n    def is_valid(r, c):\n        return 0 <= r < len(grid) and 0 <= c < len(grid[0])\n\n    def dfs(r, c, color):\n        # Add current pixel to visited set\n        visited.add((r, c))\n\n        # Define 4-connected neighbors (up, down, left, right)\n        neighbors = [(r - 1, c), (r + 1, c), (r, c - 1), (r, c + 1)]\n\n        for nr, nc in neighbors:\n            if (is_valid(nr, nc) and\n                (nr, nc) not in visited and\n                grid[nr, nc] == color):\n                dfs(nr, nc, color)\n\n    # Iterate through each pixel in the grid\n    for r in range(len(grid)):\n        for c in range(len(grid[0])):\n            # If pixel is not visited and is not background (0)\n            if (r, c) not in visited and grid[r, c] != 0:\n                # Increment count and start DFS\n                count += 1\n                dfs(r, c, grid[r, c])\n\n    return count\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4358,
    "candidates_token_count": 734,
    "total_token_count": 5092,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.170596
}