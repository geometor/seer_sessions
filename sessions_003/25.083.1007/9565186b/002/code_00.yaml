examples:
  - id: 1
    input_colors: [1, 2, 8]
    output_colors: [2, 5]
    transform_rule: "Conditional change to 5.  Pixels of value 2 on the top row remain unchanged, while pixels of value 2 on other rows change to 5. Pixels of value 1 and 8 appear to always turn to 5.  The rule MUST consider row position."
    correct_changes: [[2,1], [2,2], [1,1], [1,2]]
    incorrect_changes: [[0,0], [0,1], [0,2], [1, 0]]

  - id: 2
    input_colors: [1, 2, 3, 8]
    output_colors: [1, 5]
    transform_rule: "Conditional change to 5. Pixels of value 1 in the first row remained unchanged, while pixels of value 1 on other rows became 5. The rule MUST consider row position"
    correct_changes: [ [1,0], [2,0], [2,1], [2,2], [1,2]]
    incorrect_changes:  [[0,0], [0,1], [0,2], [1,1]]

  - id: 3
    input_colors: [2, 8]
    output_colors: [2, 5]
    transform_rule: "Conditional change to 5. Pixels of value 2 on the edge remained unchanged, while all other pixels of value 8 became a 5. The rule MUST consider edge position."
    correct_changes: [[1,0], [1,1]]
    incorrect_changes: [[0,0], [0,1], [0,2], [1,2], [2,0], [2,1], [2,2]]

  - id: 4
    input_colors: [1, 3, 4, 8]
    output_colors: [4, 5]
    transform_rule: "Pixels of value 4 do not change to 5"
    correct_changes: [[0,0], [0,1], [0,2], [2,0], [2,1], [2,2]]
    incorrect_changes: []

general_observations:
    - "The original rule was too broad, changing all specified colors, when in fact there exists a hidden rule that only changes some pixels based on their location in the grid"
    - "The condition is not immediately obvious, but is definitely based on pixel location/position and other rules"
    - "Pixels with values of 4 always remain unchanged"
