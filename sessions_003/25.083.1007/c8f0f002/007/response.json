{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify '7's:** Find all pixels with the color orange (7).\n\n2.  **Conditional '7' Change:**\n    *   A '7' pixel changes to gray (5) if and only if it is directly adjacent (horizontally or vertically, *not* diagonally) to an azure (8) pixel or to any pixel of a different color, other than 1.\n\n3.  **Identify '1's:** Locate pixels colored blue (1).\n\n4.  **Conditional '1' change**\n    * A '1' pixel should be changed to gray (5) if and only if it is directly adjacent (horizontally or vertically, *not diagonally*) to any other color, including 8.\n\n5. **Identify '8's** Locate pixels colored azure (8).\n   \n6.  **Conditional '8' change**\n    * An '8' pixel *does not* change.\n\n7. **Preservation:** All other pixels retain their original colors.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    # initialize output_grid as a copy of input_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Helper function to check neighbors horizontally and vertically\n    def get_hv_neighbors(r, c):\n        neighbors = []\n        if r > 0:\n            neighbors.append((r - 1, c))  # Up\n        if r < rows - 1:\n            neighbors.append((r + 1, c))  # Down\n        if c > 0:\n            neighbors.append((r, c - 1))  # Left\n        if c < cols - 1:\n            neighbors.append((r, c + 1))  # Right\n        return neighbors\n\n    # Conditional '7' Change\n    for r in range(rows):\n        for c in range(cols):\n            if input_grid[r, c] == 7:\n                neighbors = get_hv_neighbors(r, c)\n                for nr, nc in neighbors:\n                    if input_grid[nr, nc] == 8 or (input_grid[nr,nc] != 7 and input_grid[nr,nc] != 1):\n                        output_grid[r, c] = 5\n                        break  # Change only once\n\n    # Conditional '1' change\n    for r in range(rows):\n      for c in range(cols):\n        if input_grid[r,c] == 1:\n          neighbors = get_hv_neighbors(r,c)\n          for nr, nc in neighbors:\n            if input_grid[nr, nc] != 1:\n              output_grid[r,c] = 5\n              break\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7929,
    "candidates_token_count": 637,
    "total_token_count": 8566,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.17899
}