{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nExtracts the unique colors forming the largest connected component in the order of their first appearance in the input grid and presents them vertically in the output.\n\"\"\"\n\nimport numpy as np\n\ndef get_largest_connected_component(grid, color):\n    \"\"\"\n    Finds the largest connected component of a given color in the grid.\n    Uses Depth First Search (DFS).\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n    max_component = []\n\n    def dfs(row, col, current_component):\n        if (\n            row < 0\n            or row >= rows\n            or col < 0\n            or col >= cols\n            or visited[row, col]\n            or grid[row, col] != color\n        ):\n            return\n\n        visited[row, col] = True\n        current_component.append((row, col))\n\n        # Explore adjacent cells\n        dfs(row + 1, col, current_component)\n        dfs(row - 1, col, current_component)\n        dfs(row, col + 1, current_component)\n        dfs(row, col - 1, current_component)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == color and not visited[r, c]:\n                current_component = []\n                dfs(r, c, current_component)\n                if len(current_component) > len(max_component):\n                    max_component = current_component\n\n    return max_component\n\ndef transform(input_grid):\n    # Convert input grid to numpy array\n    grid = np.array(input_grid)\n    rows, cols = grid.shape\n    \n    # Find unique colors and their order of first appearance, but only from largest components\n    unique_colors = []\n    for r in range(rows):\n        for c in range(cols):\n            color = grid[r,c]\n            if color not in [c[0] for c in unique_colors]:\n              component = get_largest_connected_component(grid, color)\n              if any([(r,c) in component for r in range(rows) for c in range(cols)]):\n                unique_colors.append((color, len(component)))\n    \n    # sort unique colors by largest component\n    unique_colors.sort(key=lambda x: next((i for i, val in enumerate(grid.flatten()) if val == x[0]), float('inf')))\n\n    # Create output grid\n    output_grid = np.zeros((len(unique_colors), 1), dtype=int)\n\n    # Fill output grid with ordered unique colors\n    for i in range(len(unique_colors)):\n        output_grid[i, 0] = unique_colors[i][0]\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2540,
    "candidates_token_count": 660,
    "total_token_count": 3200,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.736953
}