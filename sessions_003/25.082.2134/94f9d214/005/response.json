{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms green pixels in the top four rows of the input grid to red if they are adjacent to white pixels (in the input grid), otherwise to white.\n\"\"\"\n\nimport numpy as np\n\ndef get_adjacent_pixels(grid, r, c):\n    \"\"\"Gets the values of adjacent pixels (including diagonals).\"\"\"\n    rows, cols = grid.shape\n    adjacent = []\n    for dr in [-1, 0, 1]:\n        for dc in [-1, 0, 1]:\n            if dr == 0 and dc == 0:\n                continue  # Skip the cell itself\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < rows and 0 <= nc < cols:\n                adjacent.append(grid[nr, nc])\n    return adjacent\n\ndef transform(input_grid):\n    input_grid = np.array(input_grid)\n    rows, cols = input_grid.shape\n\n    # Create output grid using the top four rows of input grid\n    output_grid = np.copy(input_grid[:4,:])\n\n    # Iterate through the top four rows for transformation\n    for r in range(min(4,rows)): # to avoid error if the input height < 4\n        for c in range(cols):\n            if output_grid[r, c] == 3:  # If green\n                adjacent_pixels = get_adjacent_pixels(input_grid, r, c)\n                if 0 in adjacent_pixels:\n                    output_grid[r, c] = 2  # Change to red\n                else:\n                    output_grid[r, c] = 0  # Change to white\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3374,
    "candidates_token_count": 389,
    "total_token_count": 3763,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.016738
}