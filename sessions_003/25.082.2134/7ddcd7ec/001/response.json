{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nFinds the largest contiguous block of non-zero pixels in a grid, and extends a diagonal line of the same color from its bottom-right corner to the grid's edge.\n\"\"\"\n\nimport numpy as np\n\ndef find_largest_object(grid):\n    \"\"\"Finds the largest connected component in the grid.\"\"\"\n    visited = np.zeros_like(grid, dtype=bool)\n    max_size = 0\n    max_object_coords = []\n\n    def dfs(row, col, color, current_coords):\n        \"\"\"Depth-first search to find connected components.\"\"\"\n        if (\n            row < 0\n            or row >= grid.shape[0]\n            or col < 0\n            or col >= grid.shape[1]\n            or visited[row, col]\n            or grid[row, col] != color\n        ):\n            return 0\n\n        visited[row, col] = True\n        current_coords.append((row, col))\n        size = 1\n        size += dfs(row + 1, col, color, current_coords)\n        size += dfs(row - 1, col, color, current_coords)\n        size += dfs(row, col + 1, color, current_coords)\n        size += dfs(row, col - 1, color, current_coords)\n        size += dfs(row + 1, col + 1, color, current_coords)\n        size += dfs(row + 1, col - 1, color, current_coords)\n        size += dfs(row - 1, col + 1, color, current_coords)\n        size += dfs(row - 1, col - 1, color, current_coords)\n        return size\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] != 0 and not visited[row, col]:\n                current_coords = []\n                size = dfs(row, col, grid[row, col], current_coords)\n                if size > max_size:\n                    max_size = size\n                    max_object_coords = current_coords\n    return max_object_coords\n\ndef transform(input_grid):\n    # Create output grid\n    output_grid = np.zeros_like(input_grid)\n\n    # Find the largest object.\n    largest_object_coords = find_largest_object(input_grid)\n    \n    if not largest_object_coords:\n      return output_grid\n\n    # Get the color of the largest object.\n    color = input_grid[largest_object_coords[0]]\n    \n    # find bottom right of largest object\n    bottom_right_row = max(largest_object_coords, key=lambda item: item[0])[0]\n    bottom_right_col = max(largest_object_coords, key=lambda item: item[1])[1]\n\n\n    # Copy largest object to output\n    for row, col in largest_object_coords:\n        output_grid[row, col] = color\n\n    # Extend diagonal tail.\n    row, col = bottom_right_row, bottom_right_col\n    while row < output_grid.shape[0] and col < output_grid.shape[1]:\n        output_grid[row, col] = color\n        row += 1\n        col += 1\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2832,
    "candidates_token_count": 782,
    "total_token_count": 3614,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.46639
}