example1:
  input_objects:
    - color: 1
      shape: irregular
      position: (1,8), (1,9), (2,7), (2,8), (3,3), (3,8), (4,2), (4,3), (4,4), (5,3), (5,4), (7,6), (7,7), (8,5), (8,6), (8,7), (9,6), (9,7)
    - color: 5
      shape: single pixel
      position: (2,3)
  output_objects:
     - color:
        shape: 3x3 grid
        position: extracts from position of input objects
  transformation:
    - Identify non-black pixels.
    - Arrange them in a 3x3 grid based on the top-left corner of a bounding box that fit them with the rule that fills by row.
    - preserve colors
example2:
    input_objects:
      - color: 4
        shape: irregular
        position: (2,6), (2,7), (3,2), (3,8), (4,1), (4,3), (4,7), (5,2), (5,3)
      - color: 5
        shape: single pixel
        position: ( 1,7)
    output_objects:
      - color:
         shape: 3x3
         position: extract from the position of the input object, fit into the grid by row
    transformation:
      - Identify the non-black pixels.
      - Arrange them in 3x3 grid, fitting the pixels to the minimum box, filled by rows.
      - preserve colors
example3:
    input_objects:
      - color: 2
        shape: irregular
        position: (2,2), (2,3), (3,1), (3,3), (4,2), (5,7), (5,8), (6,6), (6,7), (7,7)
      - color: 5
        shape: single_pixel
        position: (4,7)
    output_objects:
      - color:
        shape: 3x3
        position: Extract from the position of the input objects to minimal bounding box by rows
    transformation:
      - identify all non-black pixels
      - arrange them in the 3x3 grid
      - preserve colors