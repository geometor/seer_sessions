examples:
  - id: 1
    objects:
      - type: pixel_group
        color_counts: {1: 7, 5: 1}  # Blue, Gray
        bounding_box: [1, 2, 9, 9] # min_row, min_col, max_row, max_col
        output_mapping: # simplified, conceptual - needs refinement
          - color: 1 # Blue
            positions: [[0,1], [1,0], [1,1], [1,2], [2,1], [2,2] ]
          - color: 5
            positions: [ [0,0] ]

    transformations:
      - type: bounding_box_mapping
        input: input_grid
        output: 3x3 grid
        rule: Map colors within input bounding box to the 3x3 output grid, prioritizing the order of colors as found in the input array.
  - id: 2
    objects:
      - type: pixel_group
        color_counts: { 4: 6, 5:1} # Yellow, Gray
        bounding_box: [ 1, 1, 5, 8 ]
        output_mapping:
          - color: 4 # Yellow
            positions: [ [0,0], [0,1], [1,2], [2,1]]
          - color: 5
            positions: [ [0,2]]

    transformations:
      - type: bounding_box_mapping
        input: input_grid
        output: 3x3 grid
        rule: Map colors within input bounding box to the 3x3 output grid.

  - id: 3
    objects:
      - type: pixel_group
        color_counts: { 2: 7, 5: 1}
        bounding_box: [ 2, 1, 7, 8 ]
        output_mapping:
            - color: 2
              positions: [[0,1], [0,2], [1,0], [1,1], [2,1]]
            - color: 5
              positions: [ [1, 2] ]

    transformations:
      - type: bounding_box_mapping
        input: input_grid
        output: 3x3 grid
        rule: Map colors within input bounding box to 3x3 output.