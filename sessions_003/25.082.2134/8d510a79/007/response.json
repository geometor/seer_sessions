{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Grey Row:** Identify the row containing only grey (5) pixels. Copy this row to the output grid at the same row index.\n2.  **Black Row:** A row with all black pixels acts as terminator.\n3.  **Pattern Identification:** In each non-grey row, identify \"pattern segments.\" A pattern segment starts when a pixel is horizontally adjacent (either before *or* after) to a blue (1) or red (2) pixel.\n4.  **Horizontal Pattern Duplication:** Duplicate the pattern, overwriting zeros, until the end of the row or non-zero pixels.\n5.  **Vertical Pattern Propagation:** If a non-grey row forms a pattern, copy the *entire* row's pattern to the next row in the output, *unless* the next input row is all zeros (black).\n6. **Vertical Propagation Termination:** Continue vertical propagation until an all-black input row is encountered or the end of the grid is reached.\n\"\"\"\n\nimport numpy as np\n\ndef find_grey_row(grid):\n    \"\"\"Finds the index of the row containing only grey pixels.\"\"\"\n    for i, row in enumerate(grid):\n        if all(pixel == 5 for pixel in row):\n            return i\n    return -1\n\ndef find_black_row(grid):\n    \"\"\"finds indexes of any rows that are all black pixels\"\"\"\n    black_rows = []\n    for i, row in enumerate(grid):\n        if all(pixel == 0 for pixel in row):\n            black_rows.append(i)\n    return black_rows\n\ndef has_adjacent_blue_or_red(grid, row_idx, col_idx):\n    \"\"\"Checks if a pixel has a blue (1) or red (2) neighbor horizontally.\"\"\"\n    if col_idx > 0 and (grid[row_idx][col_idx-1] in (1, 2)):\n        return True\n    if col_idx < len(grid[row_idx]) - 1 and (grid[row_idx][col_idx+1] in (1, 2)):\n        return True\n    return False\n\ndef transform(input_grid):\n    input_grid = np.array(input_grid)\n    rows, cols = input_grid.shape\n    output_grid = np.zeros_like(input_grid)\n\n    # 1. Grey Row\n    grey_row_index = find_grey_row(input_grid)\n    if grey_row_index != -1:\n        output_grid[grey_row_index] = input_grid[grey_row_index]\n\n    # 2. & 6. Black Rows (for termination) and Vertical Propagation\n    black_rows = find_black_row(input_grid)\n    \n    last_pattern_row = None\n\n    for i in range(rows):\n        if i == grey_row_index:\n            continue\n\n        # 3. Pattern Identification and 4. Horizontal Duplication\n        new_row = np.copy(input_grid[i]) # Start with the original row\n        \n        if not all(pixel == 0 for pixel in new_row): # if not a black row\n\n            for j in range(cols):\n                if has_adjacent_blue_or_red(input_grid, i, j):\n                    new_row[j] = input_grid[i,j]\n\n            # expand the pattern to the left\n            for j in range(cols):\n                if new_row[j] in (1,2):\n                    k=j-1\n                    while k >= 0 and new_row[k] == 0:\n                        new_row[k] = new_row[k+1]\n                        k -= 1\n            # expand to the right\n            for j in range(cols-1, -1, -1):\n                if new_row[j] in (1,2):\n                    k=j+1\n                    while k < cols and new_row[k] == 0:\n                        new_row[k] = new_row[k-1]\n                        k += 1\n            last_pattern_row = new_row\n\n\n        # 5. Vertical Propagation\n        if last_pattern_row is not None:\n            if i > 0 and not all(pixel == 0 for pixel in input_grid[i-1]) :\n                output_grid[i] = last_pattern_row\n                continue\n\n        output_grid[i] = new_row\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4174,
    "candidates_token_count": 1029,
    "total_token_count": 5203,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 12.502444
}