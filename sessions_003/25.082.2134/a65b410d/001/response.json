{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by adding rows of green and blue pixels above a horizontal line of red pixels. The length of the green rows is three more than the length of the red row. The length of the blue is equal to the difference between the length of the green and blue lines. The number of blue rows is determined by the original y-position of the red object minus the new y-position of the red object.\n\"\"\"\n\nimport numpy as np\n\ndef find_red_line(grid):\n    \"\"\"Finds the row index and length of the horizontal red line.\"\"\"\n    for i, row in enumerate(grid):\n        for j, pixel in enumerate(row):\n            if pixel == 2:\n                length = 0\n                while j + length < len(row) and row[j + length] == 2:\n                    length += 1\n                return i, j, length\n    return -1, -1, 0  # Return -1, -1 if no red line is found.\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the described rules.\"\"\"\n    input_grid = np.array(input_grid)\n    red_row_index, red_col_index, red_length = find_red_line(input_grid)\n    \n    if red_row_index == -1:  # no red pixels in grid\n      return input_grid\n\n    green_length = red_length + 3\n    blue_length = 1\n\n\n    # Initialize output grid with extra space at the top.\n    # We might add up to 2 green rows.  Blue rows depend on red_row_index\n    output_grid_height = len(input_grid) + 2\n    output_grid = np.zeros((output_grid_height, len(input_grid[0])), dtype=int)\n\n\n    # Add green rows, but only as many as fit\n    green_rows_added = 0\n    for i in range(min(2,output_grid_height)):\n        output_grid[i,:green_length] = 3\n        green_rows_added += 1\n\n    # Determine how many blue rows.\n    new_red_row = red_row_index + green_rows_added - 2 if (red_row_index + green_rows_added -2) >= 0 else 0\n\n    num_blue_rows = new_red_row #red_row_index - 2 if red_row_index >= 2 else 0\n    for i in range(green_rows_added, green_rows_added+num_blue_rows): # add before red\n        if i < output_grid_height: # fit within bounds\n          output_grid[i,:blue_length] = 1\n\n    # Copy red object to correct index.\n    output_grid[new_red_row, :red_length] = 2\n\n    # Copy other portions of the grid below this.\n    rows_to_copy = input_grid.shape[0] - red_row_index # original grid height - original red row\n    for i in range(rows_to_copy):\n      y = new_red_row + 1 + i # original red object index plus one plus counter\n      if y < output_grid.shape[0]: # check if y position is within new grid\n        row_size = input_grid.shape[1]\n        for j in range(row_size): # check for the original row\n          if input_grid[red_row_index+1+i,j] != 2: # do not add 2s\n            output_grid[y, j] = input_grid[red_row_index+1+i, j]\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2509,
    "candidates_token_count": 849,
    "total_token_count": 3358,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 16.704139
}