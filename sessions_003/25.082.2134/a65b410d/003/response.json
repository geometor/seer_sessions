{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by adding three rows of green pixels above a horizontal line of red pixels. The length of the green rows is three more than the length of the red row. The red row is then copied below the green rows, and the rest of the original image below the original red row is copied below the new red row.\n\"\"\"\n\nimport numpy as np\n\ndef find_red_line(grid):\n    \"\"\"Finds the row index and length of the horizontal red line.\"\"\"\n    for i, row in enumerate(grid):\n        for j, pixel in enumerate(row):\n            if pixel == 2:\n                length = 0\n                while j + length < len(row) and row[j + length] == 2:\n                    length += 1\n                return i, j, length\n    return -1, -1, 0\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the described rules.\"\"\"\n    input_grid = np.array(input_grid)\n    red_row_index, red_col_index, red_length = find_red_line(input_grid)\n    \n    if red_row_index == -1:\n        return input_grid\n\n    green_length = red_length + 3\n    num_green_rows = 3\n    new_red_row = 3\n\n    # Initialize output grid.\n    output_grid_height = input_grid.shape[0] + num_green_rows\n    if red_row_index < new_red_row:\n       output_grid_height = input_grid.shape[0] + (new_red_row-red_row_index)-1\n\n    output_grid = np.zeros((output_grid_height, max(input_grid.shape[1],green_length)), dtype=int)\n\n    # Add green rows.\n    for i in range(num_green_rows):\n        output_grid[i, :green_length] = 3\n\n    # Copy red object.\n    output_grid[new_red_row, :red_length] = 2\n\n    # Copy other portions of the grid below the original red line.\n    rows_to_copy = input_grid.shape[0] - red_row_index - 1\n    for i in range(rows_to_copy):\n      y = new_red_row + 1 + i\n      if y < output_grid.shape[0]:\n        row_size = input_grid.shape[1]\n        for j in range(row_size):\n            output_grid[y,j] = input_grid[red_row_index + 1 + i, j]\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6152,
    "candidates_token_count": 616,
    "total_token_count": 6768,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.734659
}