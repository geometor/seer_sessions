{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by replacing 0s adjacent to a '1' with '8's and all 9s with 0s.\n\"\"\"\n\nimport numpy as np\n\ndef find_marker(grid, marker_value=1):\n    # find the coordinates (row, col) of the marker value\n    rows, cols = np.where(grid == marker_value)\n    if len(rows) > 0:\n        return rows[0], cols[0]  # return first match\n    return None\n\ndef get_adjacent_indices(grid, row, col):\n    # Get indices of adjacent cells (up, down, left, right)\n    rows, cols = grid.shape\n    adjacent_indices = []\n    if row > 0:\n        adjacent_indices.append((row - 1, col))  # Up\n    if row < rows - 1:\n        adjacent_indices.append((row + 1, col))  # Down\n    if col > 0:\n        adjacent_indices.append((row, col - 1))  # Left\n    if col < cols - 1:\n        adjacent_indices.append((row, col + 1))  # Right\n    return adjacent_indices\n\ndef transform(input_grid):\n    # initialize output_grid with 0s\n    output_grid = np.zeros_like(input_grid)\n\n    rows, cols = input_grid.shape\n\n    # replace 9s with 0s, and copy all other values to output\n    for r in range(rows):\n        for c in range(cols):\n          if input_grid[r,c] == 9:\n            output_grid[r,c] = 0\n          else:\n            output_grid[r,c] = 0\n\n    # Find marker (value 1)\n    marker_coords = find_marker(input_grid, 1)\n    if marker_coords:\n        marker_row, marker_col = marker_coords\n\n        # Get adjacent cells\n        adjacent_indices = get_adjacent_indices(input_grid, marker_row, marker_col)\n\n        # change output pixels\n        for r, c in adjacent_indices:\n            if input_grid[r, c] == 0:\n                output_grid[r, c] = 8\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2346,
    "candidates_token_count": 537,
    "total_token_count": 2883,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.154643
}