{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by identifying horizontal lines of specific colors (2, 4, 6, 9, and 5) and inserting copies of\ntheir pixels at different y-coordinates with x-coordinate shifts, depending on the color. Lines of other colors are ignored.\n\"\"\"\n\nimport numpy as np\n\ndef find_horizontal_lines(grid):\n    lines = []\n    rows, cols = grid.shape\n    for r in range(rows):\n        start_c = -1\n        current_color = 0\n        for c in range(cols):\n            if grid[r, c] != 0:\n                if start_c == -1:\n                    start_c = c\n                    current_color = grid[r, c]\n                elif grid[r, c] != current_color:\n                    if c - start_c > 1:\n                        lines.append({'color': current_color, 'y': r, 'x_start': start_c, 'x_end': c - 1})\n                    start_c = c\n                    current_color = grid[r, c]\n            elif start_c != -1:\n                if c - start_c > 1:\n                    lines.append({'color': current_color, 'y': r, 'x_start': start_c, 'x_end': c - 1})\n                start_c = -1\n                current_color = 0\n        if start_c != -1 and cols - start_c > 1:  # Check for line at the end of the row\n            lines.append({'color': current_color, 'y': r, 'x_start': start_c, 'x_end': cols - 1})\n    return lines\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.zeros_like(input_grid)\n    rows, cols = output_grid.shape\n\n    # find horizontal lines\n    lines = find_horizontal_lines(input_grid)\n\n    # determine insertion color, x, and y coordinates and change output pixels\n    for line in lines:\n        if line['color'] == 9:\n            # Insert gray(3) lines below\n            for x in range(line['x_start'], min(line['x_end'] + 1, cols)): # Limit x to grid width.\n              if line['y'] + 1 < rows:\n                output_grid[line['y'] + 1, x] = 3\n              if line['y'] + 2 < rows:\n                output_grid[line['y'] + 2, x] = 3\n\n        elif line['color'] == 6:\n            # Insert two magenta pixels above.\n            x_shift = -2\n            y_shift1 = -3\n            y_shift2 = -4\n            if line['x_start'] + x_shift >= 0:\n                if line['y'] + y_shift1 >= 0 :\n                    output_grid[line['y'] + y_shift1, line['x_start'] + x_shift] = 6\n                if line['y'] + y_shift2 >= 0:\n                    output_grid[line['y'] + y_shift2, line['x_start'] + x_shift] = 6\n        elif line['color'] == 2:\n             # Insert color 2 with y offset and x shift\n            x_shift = -2\n            if line['x_start'] + x_shift >= 0:\n                if 3 < rows:\n                    output_grid[3, line['x_start'] + x_shift : min(line['x_end'] + x_shift +1, cols) ] = 2\n                if 4 < rows:\n                    output_grid[4, line['x_start'] + x_shift : min(line['x_end'] + x_shift +1, cols)] = 2\n        elif line['color'] == 4:\n            # Insert color 4 with y offset and x shift\n            x_shift = 2\n            y_offset = 2\n            for x in range(line['x_start'], line['x_end'] + 1):\n                insert_y = line['y']- y_offset\n                insert_x = x + x_shift\n\n                if insert_y >= 0 and insert_x < cols:\n\n                    output_grid[insert_y, insert_x]= 4\n                y_offset +=1\n\n    # copy the original image to output\n    for i in range(rows):\n        for j in range(cols):\n            if output_grid[i,j] == 0:\n                output_grid[i,j] = input_grid[i,j]\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5447,
    "candidates_token_count": 1093,
    "total_token_count": 6540,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 14.132344
}