{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by identifying horizontal lines of specific colors (2, 4, and 6) and inserting copies of\ntheir pixels at different y-coordinates with x-coordinate shifts, depending on the color. Lines of other colors are ignored.\n\"\"\"\n\nimport numpy as np\n\ndef find_horizontal_lines(grid):\n    lines = []\n    rows, cols = grid.shape\n    for r in range(rows):\n        start_c = -1\n        current_color = 0\n        for c in range(cols):\n            if grid[r, c] != 0:\n                if start_c == -1:\n                    start_c = c\n                    current_color = grid[r, c]\n                elif grid[r, c] != current_color:\n                    if c - start_c > 1:\n                        lines.append({'color': current_color, 'y': r, 'x_start': start_c, 'x_end': c - 1})\n                    start_c = c\n                    current_color = grid[r, c]\n            elif start_c != -1:\n                if c - start_c > 1:\n                    lines.append({'color': current_color, 'y': r, 'x_start': start_c, 'x_end': c - 1})\n                start_c = -1\n                current_color = 0\n        if start_c != -1 and cols - start_c > 1:  # Check for line at the end of the row\n            lines.append({'color': current_color, 'y': r, 'x_start': start_c, 'x_end': cols - 1})\n    return lines\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = output_grid.shape\n\n    # find horizontal lines\n    lines = find_horizontal_lines(input_grid)\n\n    # determine insertion color, x, and y coordinates and change output pixels\n    for line in lines:\n        if line['color'] == 6:\n            # Insert color 6 with y offset and x shift\n            for x in range(line['x_start'], line['x_end'] + 1):\n                y_offset = 3 if line['y'] == 0 else (3- (line['y'] -0 ))\n\n                #print(\"line 6:\", line['y'], y_offset)\n                insert_y = line['y'] + y_offset\n                insert_x = x - (x - 0)  if x > 0 else 0\n\n                if 0<= insert_y < rows:\n                  output_grid[insert_y ,insert_x]=6\n                y_offset = 4 if line['y'] == 0 else (4- (line['y'] -0 ))\n                insert_y = line['y'] + y_offset\n                insert_x = x - (x-1) if x > 1 else 0\n\n                if 0<= insert_y < rows:\n                  output_grid[insert_y ,insert_x]= 6\n        elif line['color'] == 2:\n             # Insert color 2 with y offset and x shift\n\n            for x in range(line['x_start'], line['x_end'] + 1):\n                y_offset = 3-(line['y'] - (line['y']-2)) if line['y'] > 2 else 3\n                insert_y =  y_offset\n                insert_x = x - 2\n\n                if 0<= insert_y < rows and 0 <= insert_x < cols:\n                    output_grid[insert_y, insert_x] = 2\n                y_offset = 4-(line['y'] - (line['y']-1)) if line['y'] > 1 else 4\n                insert_y =  y_offset\n                insert_x = x - 2\n\n                if 0<= insert_y < rows and 0 <= insert_x < cols:\n                    output_grid[insert_y, insert_x] = 2\n        elif line['color'] == 4:\n            # Insert color 4 with y offset and x shift\n            for x in range(line['x_start'], line['x_end'] + 1):\n                y_offset =  - (line['y'] -4) if line['y'] > 4 else 0\n                insert_y = y_offset\n\n                insert_x = x + 2\n                if 0 <= insert_y < rows and  0<= insert_x < cols :\n                  output_grid[insert_y,insert_x]=4\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5215,
    "candidates_token_count": 1084,
    "total_token_count": 6299,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 14.796864
}