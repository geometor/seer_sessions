{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify the Rectangle and Border:** In the input grid, locate the rectangular block of a single color in the top-left corner. Identify its bordering color to the right and below. The height of the block should always be one less that the width.\n2.  **Repeat Input Pattern:** Copy the original input grid twice horizontally to form the top-left 5x10 section of a new 10x10 grid.\n3.  **Extend inner rectangle:** Copy only the rectangle without the border to form a rectangle one row and one column smaller than the output, so, in this case, 9x9\n4.  **Fill the border**: Fill the remaining cells with the bordering colour to make a complete 10x10 output\n\"\"\"\n\nimport numpy as np\n\ndef find_rectangle(grid):\n    # Find the top-left corner color.\n    top_left_color = grid[0, 0]\n    if top_left_color == 0:\n        return None, None, None, None # No rectangle found\n\n    # Find width and height of the rectangle.\n    height = 0\n    for i in range(grid.shape[0]):\n        if grid[i, 0] == top_left_color:\n            height += 1\n        else:\n            break\n\n    width = 0\n    for j in range(grid.shape[1]):\n        if grid[0, j] == top_left_color:\n            width += 1\n        else:\n            break\n\n    # Find the border color\n\n    border_color = grid[0, width] if width < grid.shape[1] else grid[height,0]\n\n    return 0, 0, width, height, border_color\n\n\ndef transform(input_grid):\n    # Convert input to numpy array\n    input_grid = np.array(input_grid)\n\n    # Find the rectangle and its border color.\n    rect_row, rect_col, rect_width, rect_height, border_color = find_rectangle(input_grid)\n\n    # Initialize the output grid (10x10).\n    output_grid = np.zeros((10, 10), dtype=int)\n    \n    # 2. repeat input\n    input_height, input_width = input_grid.shape\n    output_grid[:input_height, :input_width] = input_grid\n    output_grid[:input_height, input_width:input_width*2] = input_grid\n\n    # 3. extend the rectangle\n    rect_color = input_grid[0,0]\n    output_grid[:9, :9] = rect_color\n\n    # 4. fill the remaining\n    output_grid[:9, 9] = border_color\n    output_grid[9, :10] = border_color\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2560,
    "candidates_token_count": 655,
    "total_token_count": 3215,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 29.821156
}