{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe input grid is transformed into a smaller output grid by:\n1. Identifying colors in the corners of the input grid.\n2. Extracting a subgrid from the top-left quadrant of the input grid (approximately half the size).\n3. Compressing connected components of the same color within the subgrid to a single pixel or smaller representation.\n4. Reconstructing the output grid using the compressed components, preserving spatial relationships.\n5. Placing identified corner colors at the corresponding corners of the output.\n6. Handling symmetry: If elements and their symmetries are present, place them in the output.\n\"\"\"\n\nimport numpy as np\n\ndef get_corners(grid):\n    \"\"\"Finds isolated single-pixel colors in the corners of the grid.\"\"\"\n    rows, cols = grid.shape\n    corners = {}\n\n    # Check top-left corner\n    if grid[0, 0] != 0:\n        corners[(0, 0)] = grid[0, 0]\n\n    # Check top-right corner\n    if grid[0, cols - 1] != 0:\n        corners[(0, cols - 1)] = grid[0, cols - 1]\n\n    # Check bottom-left corner\n    if grid[rows - 1, 0] != 0:\n        corners[(rows - 1, 0)] = grid[rows - 1, 0]\n\n    # Check bottom-right corner\n    if grid[rows - 1, cols - 1] != 0:\n        corners[(rows - 1, cols - 1)] = grid[rows - 1, cols - 1]\n\n    return corners\n\ndef get_subgrid(grid):\n     \"\"\"Extracts a subgrid from the top-left, approximately half the size.\"\"\"\n     rows, cols = grid.shape\n     subgrid_rows = rows // 2 + (rows % 2)  # Integer division, round up\n     subgrid_cols = cols // 2 + (cols % 2)\n     return grid[:subgrid_rows, :subgrid_cols], subgrid_rows, subgrid_cols\n\ndef find_connected_components(grid):\n    \"\"\"Identifies connected components (objects) in a grid.\"\"\"\n    visited = np.zeros_like(grid, dtype=bool)\n    components = []\n\n    def dfs(r, c, color, component):\n        if (r < 0 or r >= grid.shape[0] or c < 0 or c >= grid.shape[1] or\n                visited[r, c] or grid[r, c] != color):\n            return\n        visited[r, c] = True\n        component.append((r, c))\n        dfs(r + 1, c, color, component)\n        dfs(r - 1, c, color, component)\n        dfs(r, c + 1, color, component)\n        dfs(r, c - 1, color, component)\n\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] != 0 and not visited[r, c]:\n                component = []\n                dfs(r, c, grid[r, c], component)\n                components.append((grid[r, c], component))\n    return components\n\ndef compress_component(component):\n    \"\"\"Compresses a connected component to a single pixel or a small representation.\"\"\"\n    if len(component) <= 1:\n         return component  # Already compressed\n    else:\n        # get the position more to the top and left\n        min_row = min(p[0] for p in component)\n        min_col = min(p[1] for p in component)\n        return [(min_row, min_col)]\n\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the defined rules.\"\"\"\n\n    # 1. Identify Corner Colors\n    corners = get_corners(input_grid)\n\n    # 2. Extract Subgrid\n    subgrid, subgrid_rows, subgrid_cols = get_subgrid(input_grid)\n\n    # 3. Compress Connected Components\n    components = find_connected_components(subgrid)\n    compressed_components = []\n    for color, component in components:\n        compressed = compress_component(component)\n        compressed_components.append((color, compressed))\n\n    # 4 & 5. Reconstruct & place corners\n    output_grid = np.zeros((subgrid_rows, subgrid_cols), dtype=int)\n\n    for color, component in compressed_components:\n        for r, c in component:\n            if r < subgrid_rows and c < subgrid_cols:\n                 output_grid[r,c] = color\n\n    # placing corners\n    for corner, color in corners.items():\n      r, c = corner\n      if r == 0 and c == 0:\n        output_grid[0,0] = color\n      if r == 0 and c == input_grid.shape[1]-1 :\n        if subgrid_cols > 0:\n          output_grid[0, subgrid_cols-1] = color\n      if r == input_grid.shape[0]-1 and c == 0:\n        if subgrid_rows > 0:\n            output_grid[subgrid_rows-1, 0] = color\n      if r == input_grid.shape[0]-1 and c == input_grid.shape[1]-1:\n        if subgrid_rows > 0 and subgrid_cols > 0:\n          output_grid[subgrid_rows-1, subgrid_cols-1] = color\n    \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3484,
    "candidates_token_count": 1297,
    "total_token_count": 4781,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 22.380029
}