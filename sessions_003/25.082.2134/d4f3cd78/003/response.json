{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation identifies gray (5) objects in the input grid and fills\ninternal and adjacent \"empty\" (white, 0) spaces with azure (8) based on the\nshape and location of the gray objects. It also has a specific rule for filling\na row above horizontal gray objects in some cases.\n\"\"\"\n\nimport numpy as np\n\ndef get_objects(grid, color):\n    \"\"\"\n    Finds contiguous objects of a specific color in the grid.\n    Returns a list of lists, where each inner list contains the (row, col)\n    coordinates of pixels belonging to an object.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n    objects = []\n\n    def dfs(r, c, current_object):\n        if (r < 0 or r >= rows or c < 0 or c >= cols or\n            visited[r, c] or grid[r, c] != color):\n            return\n        visited[r, c] = True\n        current_object.append((r, c))\n        for i in range(-1, 2):\n            for j in range(-1, 2):\n                if i == 0 and j == 0:\n                    continue\n                dfs(r + i, c + j, current_object)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == color and not visited[r, c]:\n                current_object = []\n                dfs(r, c, current_object)\n                objects.append(current_object)\n    return objects\n\ndef is_inside(grid, r, c, object_pixels):\n    \"\"\"\n    Checks if a given white (0) cell is inside a gray object.\n    'Inside' means fully enclosed by gray pixels, including diagonals.\n    \"\"\"\n\n    rows, cols = grid.shape\n    \n    # Quick check for edge cases to avoid unnecessary checks\n    if r <= 0 or r >= rows - 1 or c <= 0 or c >= cols - 1:\n      return False\n\n    neighbors = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i == 0 and j == 0:\n                continue\n            nr, nc = r + i, c + j\n            neighbors.append((nr, nc))\n\n    # All neighbors must be gray or part of object.\n    for nr, nc in neighbors:\n      if (nr, nc) not in object_pixels and grid[nr,nc] != 5:\n            return False\n    return True\n\ndef is_adjacent(grid, r, c, object_pixels):\n    \"\"\"\n    Checks if a given white (0) cell is adjacent a gray object.\n    'Adjacent' a cell that has gray as a neighbour, including diagonals.\n    \"\"\"\n\n    rows, cols = grid.shape\n\n    neighbors = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i == 0 and j == 0:\n                continue\n            nr, nc = r + i, c + j\n            if 0 <= nr < rows and 0 <= nc < cols:\n                neighbors.append((nr, nc))\n\n    # neighbour must be gray or part of object.\n    for nr, nc in neighbors:\n      if (nr, nc) in object_pixels or grid[nr,nc] == 5:\n            return True\n    return False\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the described rule.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # 1. Identify Gray Objects\n    gray_objects = get_objects(input_grid, 5)\n\n    # Iterate through each gray object\n    for obj_pixels in gray_objects:\n        # 2. Fill Internal Spaces & 3. Fill Adjacent Cells\n        for r in range(rows):\n            for c in range(cols):\n                if input_grid[r, c] == 0:  # If white pixel\n                  if is_inside(input_grid, r, c, obj_pixels):\n                    output_grid[r, c] = 8 #fill azure\n                  elif is_adjacent(input_grid,r,c,obj_pixels):\n                    output_grid[r,c] = 8\n    \n    # 4. Fill Row Above (Example 2 Specific)\n    for obj_pixels in gray_objects:\n        # Find the top row of the object and its horizontal extent\n        min_row = min(r for r, _ in obj_pixels)\n        if min_row > 0:  # Ensure there's a row above\n            min_col = min(c for _, c in obj_pixels)\n            max_col = max(c for _, c in obj_pixels)\n            \n            # Check all cells for this object\n            is_horizontal = True\n            for r,c in obj_pixels:\n              if not (min_col <= c <= max_col):\n                is_horizontal = False\n                break\n\n            if is_horizontal:\n                for c in range(min_col, max_col + 1):\n                    if output_grid[min_row - 1, c] == 0:\n                        output_grid[min_row - 1, c] = 8\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3942,
    "candidates_token_count": 1256,
    "total_token_count": 5198,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 20.177174
}