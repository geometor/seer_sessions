{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation rule involves repositioning contiguous blocks of red (2) pixels to the rightmost possible position within their respective rows. The movement is constrained by green (3) pixels, other non-contiguous red pixels, and the grid's right edge.  Empty (0) pixels between blocks should be preserved.\n\"\"\"\n\nimport numpy as np\n\ndef _find_red_blocks(row):\n    \"\"\"\n    Identifies contiguous blocks of red pixels in a row.\n    Returns a list of tuples, where each tuple represents a block\n    as (start_index, end_index).\n    \"\"\"\n    blocks = []\n    in_block = False\n    start_index = -1\n    for i, pixel in enumerate(row):\n        if pixel == 2:\n            if not in_block:\n                in_block = True\n                start_index = i\n        elif in_block:\n            in_block = False\n            blocks.append((start_index, i - 1))\n    if in_block:\n        blocks.append((start_index, len(row) - 1))\n    return blocks\n\ndef _calculate_new_end_index(row, block):\n    \"\"\"\n    Calculates the new end index for a red block, considering constraints.\n    \"\"\"\n    start, end = block\n    new_end = end\n\n    for i in range(end + 1, len(row)):\n        if row[i] == 3 or row[i] == 2:\n            break\n        new_end = i\n    return new_end\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by moving blocks of red pixels to the right,\n    constrained by green pixels, other red pixels, and the grid edge,\n    preserving spaces.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    rows, _ = output_grid.shape\n\n    # Iterate through each row\n    for r in range(rows):\n        row = output_grid[r]\n        # Find red blocks in the current row\n        red_blocks = _find_red_blocks(row)\n\n        # Move each red block to the right\n        for block in reversed(red_blocks):  # Iterate in reverse to avoid interference\n            start, end = block\n            new_end = _calculate_new_end_index(row, block)\n            block_length = end - start + 1\n\n            if new_end - block_length +1 != start: #check if a move is needed\n                # Clear original block position\n                output_grid[r, start : end+1] = 0\n\n                # move to the right location\n                output_grid[r, new_end - block_length + 1 : new_end + 1] = 2\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4677,
    "candidates_token_count": 637,
    "total_token_count": 5314,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.782232
}