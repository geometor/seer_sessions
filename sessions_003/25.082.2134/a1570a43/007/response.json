{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation rule involves repositioning contiguous blocks of red (2) pixels to the rightmost possible position within their respective rows. The movement is constrained by green (3) pixels, other non-contiguous red pixels, and the grid's right edge.  Empty (0) pixels between blocks should be preserved.  The shift is cumulative, meaning all red blocks in a row are shifted together, maintaining their relative spacing.\n\"\"\"\n\nimport numpy as np\n\ndef _find_red_blocks(row):\n    \"\"\"\n    Identifies contiguous blocks of red pixels in a row.\n    Returns a list of tuples, where each tuple represents a block\n    as (start_index, end_index).\n    \"\"\"\n    blocks = []\n    in_block = False\n    start_index = -1\n    for i, pixel in enumerate(row):\n        if pixel == 2:\n            if not in_block:\n                in_block = True\n                start_index = i\n        elif in_block:\n            in_block = False\n            blocks.append((start_index, i - 1))\n    if in_block:\n        blocks.append((start_index, len(row) - 1))\n    return blocks\n\ndef _calculate_cumulative_shift(row, red_blocks):\n    \"\"\"\n    Calculates the total available shift for red blocks in a row.\n    \"\"\"\n    if not red_blocks:\n        return 0\n\n    last_red_index = red_blocks[-1][1]\n    shift = 0\n    for i in range(last_red_index + 1, len(row)):\n        if row[i] == 0:\n            shift += 1\n        else:\n            break # Stop at the first non-empty pixel\n    return shift\ndef _shift_blocks(row, red_blocks, shift):\n    \"\"\"\n        shift the blocks to preserve the spacing between them\n    \"\"\"\n    new_row = np.copy(row)\n\n    # clear all red cells\n    for start, end in red_blocks:\n        new_row[start:end+1] = 0\n\n    # move all blocks using cumulative shift\n    for start, end in reversed(red_blocks):\n        length = end - start + 1\n        new_end = end + shift\n        \n        #check for blocking\n        for i in range(end+1, new_end+1):\n            if i >= len(row) or row[i] != 0:\n                new_end = i-1\n                break\n                \n        new_start = new_end - length + 1\n\n        #check for valid move before assignment\n        if new_start >= 0:\n          new_row[new_start:new_end + 1] = 2\n        \n    return new_row\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by moving blocks of red pixels to the right,\n    constrained by green pixels, other red pixels, and the grid edge,\n    preserving spaces.  The shift is cumulative for all red blocks in a row.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    rows, _ = output_grid.shape\n\n    # Iterate through each row\n    for r in range(rows):\n        row = output_grid[r]\n        # Find red blocks in the current row\n        red_blocks = _find_red_blocks(row)\n\n        # Calculate the cumulative shift for all blocks\n        shift = _calculate_cumulative_shift(row, red_blocks)\n        \n        # shift with spacing\n        output_grid[r] = _shift_blocks(row, red_blocks, shift)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8552,
    "candidates_token_count": 841,
    "total_token_count": 9393,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.375868
}