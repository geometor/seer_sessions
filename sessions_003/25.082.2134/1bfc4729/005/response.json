{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify:** Locate all non-zero pixels within the input grid. These are the \"seed\" pixels.\n2. **Sort:** Order the seed pixels vertically, by row index from top to bottom.\n3.  **Iterate:** Loop through each seed pixel, considering its row index, column index, and color.\n4. **Midpoints**: Calculate the midpoint *row* between vertically adjacent seed pixels.\n5. **Top Rectangle:** For each seed pixel, create a horizontal bar of that seed pixel's color in every column of the grid. The bar starts at the top edge of the grid or the row below the midpoint row between this seed pixel and the one *above*, whichever is closer to the current seed. The bar extends to the seed pixel row.\n6.  **Bottom Rectangle:** Similarly, create a horizontal bar of the seed pixel's color in every column. The bar starts from one row below the seed pixel, and extend it *down* to the midpoint between this seed and the seed *below*, or the bottom edge of the grid, whichever is closer to the seed pixel row.\n\"\"\"\n\nimport numpy as np\n\ndef get_non_zero_pixels(grid):\n    \"\"\"Finds and returns a list of non-zero pixels with their positions and colors.\"\"\"\n    rows, cols = grid.shape\n    non_zero_pixels = []\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0:\n                non_zero_pixels.append((r, c, grid[r, c]))\n    return non_zero_pixels\n\ndef calculate_midpoint(row1, row2):\n    \"\"\"Calculates the midpoint between two row indices.\"\"\"\n    return (row1 + row2) // 2\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the observed rule.\"\"\"\n\n    output_grid = np.zeros_like(input_grid)\n    rows, cols = input_grid.shape\n\n    # 1. Identify and 2. Sort Non-Zero Pixels\n    non_zero_pixels = get_non_zero_pixels(input_grid)\n    non_zero_pixels.sort()  # Sorts by row index (ascending by default)\n\n    # 3. Iterate through non-zero pixels\n    for i, (r, c, value) in enumerate(non_zero_pixels):\n        # 4. & 5. Top Rectangle\n        start_row = 0\n        if i > 0:\n            midpoint = calculate_midpoint(non_zero_pixels[i-1][0], r)\n            start_row = midpoint + 1\n\n        for current_row in range(start_row, r + 1):\n            for col in range(cols):\n                output_grid[current_row, col] = value\n\n        # 4. & 6. Bottom Rectangle\n        end_row = rows -1\n        if i < len(non_zero_pixels) - 1:\n            midpoint = calculate_midpoint(r, non_zero_pixels[i+1][0])\n            end_row = midpoint\n\n        for current_row in range(r+1, end_row + 1):\n            for col in range(cols):\n                 output_grid[current_row,col] = value\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3794,
    "candidates_token_count": 756,
    "total_token_count": 4550,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.900946
}