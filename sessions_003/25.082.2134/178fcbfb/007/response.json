{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Colors and Positions:** For each color (excluding 0) in the input grid, record the rows and columns in which it appears.\n2.  **Fill Rows:** For each identified color, fill the *entire* row(s) where it appears in the *input* grid with that color in the *output* grid.\n3. **Identify rows that contain more than one instance of any color**: Record these colors.\n4. **Stretch:** If there are multiple rows with color c, then replicate columns from the original grid that contains color c in any of the identified rows into *all* rows in the output identified.\n\"\"\"\n\nimport numpy as np\n\ndef find_colors_and_positions(grid):\n    \"\"\"Finds all colors and their row/column indices in the grid.\"\"\"\n    grid = np.array(grid)\n    height, width = grid.shape\n    color_positions = {}\n    for r in range(height):\n        for c in range(width):\n            color = grid[r, c]\n            if color != 0:\n                if color not in color_positions:\n                    color_positions[color] = {\"rows\": [], \"columns\": []}\n                if r not in color_positions[color][\"rows\"]:\n                    color_positions[color][\"rows\"].append(r)\n                if c not in color_positions[color][\"columns\"]:\n                    color_positions[color][\"columns\"].append(c)\n    return color_positions\n\ndef find_replicating_colors(grid):\n    \"\"\"Find colors present in multiple rows.\"\"\"\n    color_positions = find_colors_and_positions(grid)\n    replicating_colors = {}\n\n    for color, positions in color_positions.items():\n        if len(positions[\"rows\"]) > 1:\n          replicating_colors[color] = positions[\"rows\"]\n    return replicating_colors\n    \n\ndef transform(input_grid):\n    # initialize output_grid\n    input_grid = np.array(input_grid)\n    output_grid = np.zeros_like(input_grid)\n    height, width = input_grid.shape\n\n    # Identify Colors and Positions\n    color_positions = find_colors_and_positions(input_grid)\n\n    # Fill Rows\n    for color, positions in color_positions.items():\n        for row in positions[\"rows\"]:\n            output_grid[row, :] = color\n\n    #Find replicating colors\n    replicating = find_replicating_colors(input_grid)\n\n    # Stretch\n    for color, rows in replicating.items():\n      for r in rows:\n        for c in color_positions[color][\"columns\"]:\n          for row_to_fill in rows:\n              output_grid[row_to_fill,c] = input_grid[r,c]\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4835,
    "candidates_token_count": 642,
    "total_token_count": 5477,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.111716
}