{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Target Color:** It appears that the last color from top to bottom in the original grid is repeated downwards on its original location.\n2.  **Replicate Down:** Make copies of the column of target color for all rows.\n3.  **Identify Other Colors:** Find all other colors present in the input grid.\n4.  **Fill Rows:** For each of the other colors, fill a single, complete row with that color. The chosen row index should be equal to the row index where each 'other color' first appears.\n\"\"\"\n\nimport numpy as np\n\ndef get_colored_pixels(grid):\n    \"\"\"Finds coordinates and colors of non-black pixels.\"\"\"\n    pixels = []\n    for r_idx, row in enumerate(grid):\n        for c_idx, color in enumerate(row):\n            if color != 0:\n                pixels.append(((r_idx, c_idx), color))\n    return pixels\n\n\ndef transform(input_grid):\n    # initialize output_grid\n    input_grid = np.array(input_grid)\n    output_grid = np.zeros_like(input_grid)\n    height, width = input_grid.shape\n\n    # get the colored pixels\n    colored_pixels = get_colored_pixels(input_grid)\n\n    # Identify Target Color (last color)\n    target_pixels = []\n    if colored_pixels:\n        target_pixels = [colored_pixels[-1]]\n\n        #find same color in the array\n        last_color = target_pixels[0][1]\n        for pixel in reversed(colored_pixels):\n            if pixel[1] == last_color:\n                target_pixels.append(pixel)\n            else:\n                break\n\n\n    # Replicate target color down\n    for ((r, c), color) in target_pixels:\n        for i in range(height):\n            output_grid[i, c] = color\n    \n    # Identify Other Colors, exclude target_color\n    other_colors = []\n    for ((r, c), color) in colored_pixels:\n        is_target = False\n        for ((tr, tc), tcolor) in target_pixels:\n          if color == tcolor:\n            is_target = True\n            break\n        if not is_target:\n          other_colors.append(((r,c), color))\n\n    # Fill Rows with Other Colors\n    for ((r, c), color) in other_colors:\n        output_grid[r, :] = color\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2686,
    "candidates_token_count": 576,
    "total_token_count": 3262,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.901022
}