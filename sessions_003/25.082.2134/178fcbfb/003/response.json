{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Target Column(s):** Find the column index (or indices) of the last non-black color(s) encountered when scanning the input grid from top to bottom. The target column is defined as the column where last color from top to bottom appears.\n\n2.  **Replicate Target Column:** Copy the target column(s) vertically, overwriting existing values so each identified target column has the same color pixels as original input on all rows.\n\n3.  **Identify Other Colors:** Identify all colors present in the input grid that are *not* the color of the target column(s). For each of these \"other colors,\" find the row index where it *first* appears in the input grid.\n\n4.  **Fill Rows:** For each \"other color,\" fill the *entire* row where it first appeared with that color.\n\"\"\"\n\nimport numpy as np\n\ndef find_target_columns(grid):\n    \"\"\"Finds the column indices of the last non-black color.\"\"\"\n    grid = np.array(grid)\n    height, width = grid.shape\n    target_columns = []\n    last_color = 0\n\n    #find the last color\n    for r in range(height -1, -1, -1):\n        for c in range(width):\n            if grid[r,c] != 0:\n                last_color = grid[r,c]\n                break;\n        if last_color !=0:\n            break;\n\n    #find the target columns\n    for c in range(width):\n        for r in range(height):\n            if grid[r,c] == last_color:\n                target_columns.append(c)\n                break;\n\n    return target_columns, last_color\n\ndef find_other_colors(grid, target_color):\n    \"\"\"Finds colors other than the target color and their first row index.\"\"\"\n    grid = np.array(grid)\n    height, width = grid.shape\n    other_colors = {}\n    for r in range(height):\n        for c in range(width):\n            color = grid[r, c]\n            if color != 0 and color != target_color and color not in other_colors:\n                other_colors[color] = r\n    return other_colors\n\ndef transform(input_grid):\n    # initialize output_grid\n    input_grid = np.array(input_grid)\n    output_grid = np.zeros_like(input_grid)\n    height, width = input_grid.shape\n\n    # Identify Target Column(s)\n    target_columns, target_color = find_target_columns(input_grid)\n\n    # Replicate Target Column\n    for c in target_columns:\n        for r in range(height):\n            output_grid[r,c] = input_grid[r,c]\n\n\n    # Identify Other Colors\n    other_colors = find_other_colors(input_grid, target_color)\n\n    # Fill Rows with Other Colors\n    for color, row_index in other_colors.items():\n        output_grid[row_index, :] = color\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7673,
    "candidates_token_count": 713,
    "total_token_count": 8386,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.559737
}