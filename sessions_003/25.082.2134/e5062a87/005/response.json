{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation identifies distinct red regions in the input grid and expands them iteratively. Gray pixels adjacent to each red region are converted to red in each step. The expansion is performed independently for each connected red region, preventing them from merging. The process continues until no more gray pixels can be converted.\n\"\"\"\n\nimport numpy as np\nfrom scipy.ndimage import label\n\ndef get_red_regions(grid):\n    \"\"\"\n    Identifies distinct connected regions of red pixels (value 2) in the grid.\n\n    Args:\n        grid: A 2D numpy array.\n\n    Returns:\n        A list of boolean masks, one for each connected red region.\n        Each mask has the same shape as the input grid, with 'True'\n        indicating membership in the region.\n    \"\"\"\n    red_pixels = (grid == 2)\n    labeled_array, num_features = label(red_pixels)\n    regions = []\n    for i in range(1, num_features + 1):  # Iterate through each labeled region\n        regions.append(labeled_array == i)\n    return regions\n\ndef expand_region(grid, region_mask):\n    \"\"\"\n    Expands a single red region by converting adjacent gray pixels to red.\n\n    Args:\n        grid: The 2D numpy array representing the entire grid.\n        region_mask: A boolean mask representing the red region to expand.\n\n    Returns:\n        A new boolean mask representing the expanded region, and\n        a numpy array representing the grid including the new red pixels.\n    \"\"\"\n    rows, cols = grid.shape\n    expanded_mask = np.copy(region_mask)\n    new_grid = np.copy(grid)\n\n    # Iterate through all pixels in the region mask.\n    for i in range(rows):\n        for j in range(cols):\n            if region_mask[i, j]:\n                # Check all 8 neighbors (horizontal, vertical, diagonal).\n                for x in range(max(0, i - 1), min(rows, i + 2)):\n                    for y in range(max(0, j - 1), min(cols, j + 2)):\n                        if (x != i or y != j) and grid[x, y] == 5: # if gray\n                            expanded_mask[x,y] = True # add to the region\n                            new_grid[x, y] = 2 # change the gray pixel to red\n\n    return expanded_mask, new_grid\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by iteratively expanding connected red regions.\n\n    Args:\n        input_grid: A 2D numpy array representing the input grid.\n\n    Returns:\n        A 2D numpy array representing the output grid.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    red_regions = get_red_regions(output_grid)\n    changes_made = True\n\n    while changes_made:\n        changes_made = False\n        new_red_regions = []\n        \n        for region_mask in red_regions:\n            expanded_mask, output_grid = expand_region(output_grid, region_mask)\n            \n            # if expanded mask is different than original mask\n            if not np.array_equal(expanded_mask, region_mask):\n                changes_made = True\n            new_red_regions.append(expanded_mask)  # Use updated mask for next iteration\n        \n        # use the collected expanded masks for the next iteration    \n        red_regions = new_red_regions\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8196,
    "candidates_token_count": 811,
    "total_token_count": 9007,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 13.123941
}