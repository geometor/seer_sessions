{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe program uses the red (2) pixels in the lower half of the input grid as markers for removal, \nand the red (2) pixels in the upper half as a template to \"paint\" adjacent blue pixels red \nin the output grid. Blue pixels not adjacent to these upper-half red pixels are kept.\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, row, col):\n    \"\"\"\n    Gets the 8 neighbors of a cell (including diagonals).\n    \"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    for i in range(max(0, row - 1), min(rows, row + 2)):\n        for j in range(max(0, col - 1), min(cols, col + 2)):\n            if (i, j) != (row, col):\n                neighbors.append((i, j))\n    return neighbors\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the described rule.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n    mid_row = rows // 2\n\n    # 1. Remove red pixels in the lower half.\n    for r in range(mid_row, rows):\n        for c in range(cols):\n            if input_grid[r, c] == 2:\n                output_grid[r, c] = 0\n\n    # 2. Find red pixels in top half.\n    top_red_pixels = []\n    for r in range(0, mid_row):\n        for c in range(cols):\n            if input_grid[r,c] == 2:\n                top_red_pixels.append((r,c))\n\n    # 3 & 4. Propagate red to adjacent blue pixels.\n    for r, c in top_red_pixels:\n        neighbors = get_neighbors(input_grid, r, c)\n        for nr, nc in neighbors:\n            if input_grid[nr, nc] == 1:\n                output_grid[nr, nc] = 2\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2995,
    "candidates_token_count": 492,
    "total_token_count": 3487,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.663345
}