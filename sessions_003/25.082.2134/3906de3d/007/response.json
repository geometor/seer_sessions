{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Divide:** Split the input grid vertically into two halves (top and bottom).\n2.  **Top Half Fill:** In the top half, identify all red pixels. Expand this red region to fill any *completely enclosed* blue pixels. \"Enclosed\" means surrounded by red or the edge of the top half grid in all directions (up, down, left, right, and diagonals).\n3.  **Bottom Half Clear:**  In the bottom half, remove all red pixels.\n4.  **Copy and Shift:** Copy the filled red region from the top half.\n5.  **Paste to Bottom.** Paste this copy into the bottom half of the *output* grid using a consistent vertical offset based on original red pixel locations. The exact offset is determined by the number of rows between top red and bottom red.\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef get_neighbors(grid, row, col):\n    \"\"\"Gets the 8 neighbors of a cell (including diagonals).\"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    for i in range(max(0, row - 1), min(rows, row + 2)):\n        for j in range(max(0, col - 1), min(cols, col + 2)):\n            if (i, j) != (row, col):\n                neighbors.append((i, j))\n    return neighbors\n\ndef fill_enclosed(grid, start_color=1, fill_color=2):\n    \"\"\"Fills enclosed regions of start_color with fill_color.\"\"\"\n    rows, cols = grid.shape\n    visited = set()\n    \n    # Find all pixels of start_color to potentially start filling from\n    start_pixels = []\n    for r in range(rows):\n        for c in range(cols):\n          if grid[r,c] == start_color:\n            start_pixels.append((r,c))\n\n    for start_row, start_col in start_pixels:\n        if (start_row, start_col) in visited:\n            continue\n\n        q = deque([(start_row, start_col)])\n        region = []\n        enclosed = True\n\n        while q:\n            row, col = q.popleft()\n\n            if (row, col) in visited:\n                continue\n            visited.add((row, col))\n\n            if grid[row, col] == start_color:\n                region.append((row, col))\n                neighbors = get_neighbors(grid, row, col)\n                for nr, nc in neighbors:\n                    if not (0 <= nr < rows and 0 <= nc < cols): # Check the boundary\n                        enclosed = False\n                    elif grid[nr, nc] != start_color and grid[nr, nc] != fill_color: #check that the neighbor is one of the two colors\n                        enclosed = False\n                    elif (nr, nc) not in visited:\n                        q.append((nr, nc))\n\n        if enclosed:\n            for row, col in region:\n                grid[row, col] = fill_color\n\n    return grid\n\ndef get_top_red(input_grid, mid_row):\n    top_red_pixels = []\n    rows, cols = input_grid.shape\n    for r in range(0, mid_row):\n        for c in range(cols):\n            if input_grid[r, c] == 2:\n                top_red_pixels.append((r, c))\n    return top_red_pixels\n\ndef get_bottom_red_row(input_grid):\n  rows, _ = input_grid.shape\n  for r in range(rows-1, -1, -1): # efficient search from bottom\n      for c in range(input_grid.shape[1]):\n          if input_grid[r,c] == 2:\n              return r\n  return -1\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n    mid_row = rows // 2\n\n    # 1. Divide (Implicit in the loop ranges)\n\n    # 2. Top Half Fill\n    top_half = output_grid[:mid_row, :]\n    fill_enclosed(top_half)\n    output_grid[:mid_row, :] = top_half\n    \n    # find the lowest row of top red\n    top_red_pixels = get_top_red(output_grid, mid_row)\n    if len(top_red_pixels) > 0:\n        top_red_row = max(r for r, _ in top_red_pixels)\n    else:\n      top_red_row = -1\n\n    # 3. Bottom Half Clear\n    output_grid[mid_row:, :] = np.where(output_grid[mid_row:, :] == 2, 0, output_grid[mid_row:, :])\n\n    # Find offset\n    bottom_red_row = get_bottom_red_row(input_grid)\n\n    # 4. Copy and Shift & 5. Paste to Bottom.\n    if top_red_row != -1 and bottom_red_row != -1:\n      row_offset = bottom_red_row - top_red_row\n      \n      for r,c in top_red_pixels:\n          new_r = r + row_offset\n          if 0 <= new_r < rows:\n              output_grid[new_r,c] = 2\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8332,
    "candidates_token_count": 1269,
    "total_token_count": 9601,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 14.822771
}