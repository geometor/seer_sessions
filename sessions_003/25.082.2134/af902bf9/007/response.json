{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Yellow Pixels:** Locate all yellow (4) pixels in the input grid.\n\n2.  **Horizontal Connection:** For each row, examine pairs of yellow pixels. If all pixels *between* a pair of yellow pixels in that row are white (0), *and* there is a corresponding pair of yellow pixels in at least one other row forming vertical edges of a potential rectangle with only white pixels between them vertically, change the white pixels between the original pair of yellow pixels to red (2).\n\n3.  **Vertical Connection:** For each column, examine pairs of yellow pixels. If all pixels *between* a pair of yellow pixels in that column are white (0), *and* there is a corresponding pair of yellow pixels in at least one other column forming the horizontal edges of a potential rectangle with only white pixels between them horizontally, change the white pixels between the original pair of yellow pixels to red (2).\n\n4. **Complete Rectangle Fill:** If four yellow pixels form a rectangle (i.e. yellow pixels exist at (r1,c1), (r1,c2), (r2,c1), and (r2,c2) with r1!=r2 and c1!=c2 ), fill the entire rectangular area (including boundaries) with red (2). Note that steps 2 & 3 can create parts of the rectangle, this rule can override.\n\n5.  **Preservation:** All other pixels (those that are not yellow and were not changed to red) retain their original color.\n\"\"\"\n\nimport numpy as np\n\ndef get_yellow_pixels(grid):\n    # Find coordinates of all yellow pixels (value 4).\n    yellow_pixels = np.where(grid == 4)\n    return list(zip(yellow_pixels[0], yellow_pixels[1]))\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n    yellow_pixels = get_yellow_pixels(input_grid)\n\n    # Horizontal Connection\n    for row_index in range(input_grid.shape[0]):\n        yellow_in_row = [pos for pos in yellow_pixels if pos[0] == row_index]\n        yellow_in_row.sort(key=lambda x: x[1])  # Sort by column index\n        for i in range(len(yellow_in_row) - 1):\n            col1 = yellow_in_row[i][1]\n            col2 = yellow_in_row[i+1][1]\n            if col1 + 1 != col2:  # not adjacent\n               if all(input_grid[row_index, col1 + 1:col2] == 0):\n                   # check for corresponding vertical pairs\n                   found_vertical = False\n                   for other_row in range(input_grid.shape[0]):\n                       if other_row != row_index:\n                           if (other_row, col1) in yellow_pixels and (other_row, col2) in yellow_pixels:\n                               if all(input_grid[min(row_index,other_row)+1:max(row_index, other_row), col1] == 0) and \\\n                                  all(input_grid[min(row_index,other_row)+1:max(row_index, other_row), col2] == 0):\n                                    found_vertical = True\n                                    break\n                   if found_vertical:\n                        output_grid[row_index, col1 + 1:col2] = 2\n\n    # Vertical Connection\n    for col_index in range(input_grid.shape[1]):\n        yellow_in_col = [pos for pos in yellow_pixels if pos[1] == col_index]\n        yellow_in_col.sort(key=lambda x: x[0])  # Sort by row index\n        for i in range(len(yellow_in_col) - 1):\n            row1 = yellow_in_col[i][0]\n            row2 = yellow_in_col[i+1][0]\n            if row1 + 1 != row2:  # not adjacent\n               if all(input_grid[row1 + 1:row2, col_index] == 0):\n                    # check for corresponding horizontal pairs\n                    found_horizontal = False\n                    for other_col in range(input_grid.shape[1]):\n                        if other_col != col_index:\n                           if (row1, other_col) in yellow_pixels and (row2, other_col) in yellow_pixels:\n                                if all(input_grid[row1, min(col_index, other_col)+1:max(col_index, other_col)] == 0) and \\\n                                   all(input_grid[row2, min(col_index, other_col)+1:max(col_index, other_col)] == 0):\n                                    found_horizontal = True\n                                    break\n                    if found_horizontal:\n                        output_grid[row1 + 1:row2, col_index] = 2\n\n    # Complete Rectangle Fill\n    for (row1, col1) in yellow_pixels:\n        for (row2, col2) in yellow_pixels:\n            if row1 < row2 and col1 < col2: # Check for top-left and bottom-right corners\n                # check for other two corners\n                if (row1, col2) in yellow_pixels and (row2, col1) in yellow_pixels:\n                    output_grid[row1:row2+1, col1:col2+1] = 2 #fill including boundaries\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5211,
    "candidates_token_count": 1284,
    "total_token_count": 6495,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 15.708056
}