{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify the Gray Line:** Find the vertical column composed entirely of gray (5) pixels.\n\n2.  **Locate Objects:** Identify all contiguous blocks of non-black, non-gray pixels to the *left* of the gray line.\n\n3.  **Preserve based on Adjacency and Connectedness to object adjacent to the gray line:**\n    *   Iterate through each object to the left of the gray line\n    *   If the object contains any pixels adjacent to the gray line, keep *only* the connected component of pixels of that object which are connected to the part of the object adjacent to the gray line.\n    *  If the object has no pixels adjacent, remove the whole object.\n\n4.  **Construct Output:** Create a new grid with the same height as the input grid.\n\n5. **Determine output width:** The output grid width is determined by the distance from column 0 to the gray line.\n\n6. **Populate the Output Grid:** Copy the *preserved* parts of objects from the input grid to the output grid, maintaining their original row positions and column positions relative to the gray line.\n\"\"\"\n\nimport numpy as np\nfrom scipy.ndimage import label\n\ndef find_gray_line(grid):\n    \"\"\"Finds the vertical line of gray (5) pixels.\"\"\"\n    rows, cols = grid.shape\n    for j in range(cols):\n        is_gray_line = True\n        for i in range(rows):\n            if grid[i, j] != 5:\n                is_gray_line = False\n                break\n        if is_gray_line:\n            return j\n    return -1  # Should not happen\n\ndef get_objects(grid, gray_line_col):\n    \"\"\"Identifies objects to the left of the gray line.\"\"\"\n    mask = (grid != 0) & (grid != 5)\n    mask[:, gray_line_col:] = False  # Only consider pixels to the left\n    labeled_array, num_features = label(mask)\n    objects = []\n    for i in range(1, num_features + 1):\n        objects.append((labeled_array == i).astype(int))\n    return objects\n\ndef is_adjacent_to_gray_line(object_mask, gray_line_col):\n    \"\"\"Checks if an object is adjacent to the gray line.\"\"\"\n    rows, cols = object_mask.shape\n    for r in range(rows):\n        for c in range(cols):\n            if object_mask[r, c] == 1:\n                for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                    nr, nc = r + dr, c + dc\n                    if 0 <= nr < rows and nc == gray_line_col:\n                        return True\n    return False\n\ndef get_connected_component(object_mask, gray_line_col):\n    \"\"\"\n    Gets the connected component of an object that's adjacent to the gray\n    line, by using a seed fill.\n    \"\"\"\n    rows, cols = object_mask.shape\n    seed_row, seed_col = -1, -1 # initialize\n\n    # find the seed point in the object - adjacent to gray\n    for r in range(rows):\n        for c in range(cols):\n            if object_mask[r,c] == 1:\n                for dr, dc in [(0,1), (0,-1), (1,0), (-1,0)]:\n                    nr, nc = r + dr, c + dc\n                    if 0 <= nr < rows and nc == gray_line_col:\n                        seed_row, seed_col = r, c\n                        break\n        if seed_row != -1:\n            break\n\n    # now flood fill\n    if seed_row == -1:\n        return np.zeros_like(object_mask)\n\n    visited = np.zeros_like(object_mask)\n    queue = [(seed_row, seed_col)]\n    visited[seed_row, seed_col] = 1\n    connected_component = np.zeros_like(object_mask)\n    connected_component[seed_row, seed_col] = 1\n\n    while queue:\n      r, c = queue.pop(0)\n      for dr, dc in [(0,1), (0, -1), (1, 0), (-1, 0)]:\n        nr, nc = r + dr, c + dc\n        if 0 <= nr < rows and 0 <= nc < cols:\n            if object_mask[nr, nc] == 1 and visited[nr, nc] == 0:\n                visited[nr,nc] = 1\n                connected_component[nr, nc] = 1\n                queue.append((nr, nc))\n    return connected_component\n\ndef transform(input_grid):\n    # initialize output_grid\n    input_grid = np.array(input_grid)\n    gray_line_col = find_gray_line(input_grid)\n    output_width = gray_line_col + 1 # output width\n    output_grid = np.zeros((input_grid.shape[0], output_width), dtype=int)\n\n    # get objects\n    objects = get_objects(input_grid, gray_line_col)\n\n    # iterate through located objects\n    for obj_mask in objects:\n        # preserve/remove based on rules\n        if is_adjacent_to_gray_line(obj_mask, gray_line_col):\n            preserved_component = get_connected_component(obj_mask, gray_line_col)\n\n            # copy to output grid\n            rows, cols = preserved_component.shape\n            for r in range(rows):\n                for c in range(cols):\n                    if preserved_component[r,c] == 1:\n                        output_grid[r,c] = input_grid[r,c]\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6504,
    "candidates_token_count": 1362,
    "total_token_count": 7866,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 20.847467
}