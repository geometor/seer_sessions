{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by changing the color of pixels based on their adjacency to gray (5) pixels.\n\n1. Identify Pixel Groups: Divide the input grid into connected groups of pixels.\n   A \"connected group\" is a set of pixels of the same color where each pixel is\n   directly adjacent (horizontally, vertically, or diagonally) to at least one\n   other pixel in the group. Exclude white pixels (color 0).\n2. Check for Gray Adjacency: For each identified pixel group, determine if *any*\n   of its pixels are adjacent (horizontally, vertically, or diagonally) to a gray\n   pixel (color 5).\n3. Apply Color Change Rules:\n    * If a pixel group has the color 9 (maroon), change all pixels in that group to 5 (gray).\n    * If a pixel group has a color in the set [1 (blue), 3 (green), 4 (yellow), 6 (magenta), 7 (orange), 8 (azure)],\n      and *none* of the pixels in that group are adjacent to a gray pixel, change all pixels in that group to 5 (gray).\n    * Otherwise, the pixel group's color remains unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, row, col):\n    \"\"\"Gets the coordinates of all 8 neighbors of a pixel.\"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    for i in range(max(0, row - 1), min(rows, row + 2)):\n        for j in range(max(0, col - 1), min(cols, col + 2)):\n            if (i, j) != (row, col):  # Exclude the pixel itself\n                neighbors.append((i, j))\n    return neighbors\n\ndef is_adjacent_to_gray(grid, pixel_group):\n    \"\"\"Checks if any pixel in the group is adjacent to a gray pixel.\"\"\"\n    for row, col in pixel_group[\"locations\"]:\n        neighbors = get_neighbors(grid, row, col)\n        for n_row, n_col in neighbors:\n            if grid[n_row, n_col] == 5:\n                return True\n    return False\n\ndef identify_pixel_groups(grid):\n    \"\"\"Identifies connected groups of pixels with the same non-white color.\"\"\"\n    rows, cols = grid.shape\n    visited = set()\n    pixel_groups = []\n\n    def dfs(row, col, color, current_group):\n        \"\"\"Depth-first search to find connected pixels.\"\"\"\n        if (row, col) in visited or not (0 <= row < rows and 0 <= col < cols) or grid[row, col] != color:\n            return\n        visited.add((row, col))\n        current_group.append((row, col))\n        for n_row, n_col in get_neighbors(grid, row, col):\n            dfs(n_row, n_col, color, current_group)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and (r, c) not in visited:\n                current_group = []\n                dfs(r, c, grid[r, c], current_group)\n                pixel_groups.append({\"color\": grid[r, c], \"locations\": current_group})\n    return pixel_groups\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the specified rules.\"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n    pixel_groups = identify_pixel_groups(input_grid)\n\n    for group in pixel_groups:\n        # Apply rule for color 9\n        if group[\"color\"] == 9:\n            for r, c in group[\"locations\"]:\n                output_grid[r, c] = 5\n        # Apply rule for colors 1, 3, 4, 6, 7, and 8\n        elif group[\"color\"] in [1, 3, 4, 6, 7, 8]:\n            if not is_adjacent_to_gray(input_grid, group):\n                for r, c in group[\"locations\"]:\n                    output_grid[r, c] = 5\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7052,
    "candidates_token_count": 986,
    "total_token_count": 8038,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 12.702681
}