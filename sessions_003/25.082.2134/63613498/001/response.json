{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by replacing specific colors based on their adjacency to gray (5) pixels. Colors 9 are always replaced by 5. Colors 1,3,4,6,7, and 8 remains the same.\nIf any of these are adjacent to a gray pixel, they also remain unchanged. Otherwise non-gray pixels change to gray (5)\n\"\"\"\n\nimport numpy as np\n\ndef get_horizontal_lines(grid):\n    \"\"\"Identifies horizontal lines of same-colored, non-white pixels.\"\"\"\n    lines = []\n    rows, cols = grid.shape\n    for r in range(rows):\n        start_col = None\n        current_color = 0\n        for c in range(cols):\n            if grid[r, c] != 0:  # Non-white pixel\n                if start_col is None:\n                    start_col = c\n                    current_color = grid[r, c]\n                elif grid[r, c] != current_color:\n                    lines.append(((r, start_col), (r, c - 1), current_color))\n                    start_col = c\n                    current_color = grid[r, c]\n            elif start_col is not None:\n                lines.append(((r, start_col), (r, c - 1), current_color))\n                start_col = None\n        if start_col is not None:  # Line extends to the end of the row\n             lines.append(((r, start_col), (r, cols - 1), current_color))\n    return lines\n\n\n\ndef is_adjacent_to_gray(grid, start, end):\n    \"\"\"Checks if a horizontal line is adjacent to a gray pixel.\"\"\"\n    row, start_col = start\n    _, end_col = end\n\n    # Check to the left\n    if start_col > 0 and grid[row, start_col - 1] == 5:\n        return True\n    # Check to the right\n    if end_col < grid.shape[1] - 1 and grid[row, end_col + 1] == 5:\n        return True\n    \n    return False\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the specified rules.\"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n    lines = get_horizontal_lines(input_grid)\n\n    for start, end, color in lines:\n       \n        row, start_col = start\n        _, end_col = end\n       \n        if color == 9:\n             for c in range(start_col,end_col + 1):\n                output_grid[row,c] = 5\n        elif color in [1, 3, 4, 6, 7, 8]:  # Colors that might change\n            if color == 7 and not is_adjacent_to_gray(input_grid, start, end):\n                  for c in range(start_col, end_col + 1):\n                        output_grid[row, c] = 5\n            elif is_adjacent_to_gray(input_grid,start,end):\n                continue\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3093,
    "candidates_token_count": 734,
    "total_token_count": 3827,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.851927
}