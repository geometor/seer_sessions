{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Find all distinct objects in the input grid. An object is a contiguous block of non-zero pixels.\n2.  **Categorize Objects:** Divide objects into two groups: \"single-pixel objects\" (containing only one pixel) and \"multi-pixel objects\" (containing more than one pixel).\n3. **Conditional Transformation**\n   * If no single pixel object, or if no multi-pixel objects: no change. Output is the same as the Input.\n   * If both single-pixel and multi-pixel object(s) are present:\n        1.  **Retain Multi-Pixel Object(s):** Copy the multi-pixel object(s) from the input to the output grid, unchanged.\n        2. **Duplicate and Position:** Create a duplicate of the *first multi-pixel object* found in the input.\n        3. **Anchor:** Use the location of the *first single-pixel object* found in the input as an anchor point. Position the duplicated multi-pixel object such that its bounding box is centered on the single pixel.\n        4. **Remove the single pixel:** set the value of the original single pixel to 0\n\n4.  **Output:** The final output grid consists of the original multi-pixel object(s) and the newly positioned, duplicated multi-pixel object, with the single pixel object removed.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"\n    Finds distinct objects in the grid.  An object is a group of\n    contiguous non-zero pixels.\n    Uses depth first search\n    \"\"\"\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n    rows, cols = grid.shape\n\n    def dfs(row, col, current_object):\n        if (row < 0 or row >= rows or col < 0 or col >= cols or\n                visited[row, col] or grid[row, col] == 0):\n            return\n        visited[row, col] = True\n        current_object.append((row, col))\n        dfs(row + 1, col, current_object)\n        dfs(row - 1, col, current_object)\n        dfs(row, col + 1, current_object)\n        dfs(row, col - 1, current_object)\n\n    for row in range(rows):\n        for col in range(cols):\n            if grid[row, col] != 0 and not visited[row, col]:\n                current_object = []\n                dfs(row, col, current_object)\n                objects.append(current_object)\n    return objects\n\ndef bounding_box(object_pixels):\n    \"\"\"\n    Find the smallest rectangle enclosing a single object.\n    \"\"\"\n    min_row = float('inf')\n    max_row = float('-inf')\n    min_col = float('inf')\n    max_col = float('-inf')\n\n    for row, col in object_pixels:\n        min_row = min(min_row, row)\n        max_row = max(max_row, row)\n        min_col = min(min_col, col)\n        max_col = max(max_col, col)\n\n    return (min_row, max_row, min_col, max_col)\n\ndef copy_object(grid, object_pixels):\n    \"\"\"\n    Copies an object's pixel values. Returns a dictionary mapping\n    (row, col) to pixel value.\n    \"\"\"\n    object_data = {}\n    for row, col in object_pixels:\n        object_data[(row, col)] = grid[row, col]\n    return object_data\n\ndef transform(input_grid):\n    input_grid = np.array(input_grid)\n    output_grid = np.copy(input_grid)  # Start with a copy\n    objects = find_objects(input_grid)\n\n    single_pixel_objects = [obj for obj in objects if len(obj) == 1]\n    multi_pixel_objects = [obj for obj in objects if len(obj) > 1]\n\n    if single_pixel_objects and multi_pixel_objects:\n        # Get the first single-pixel object and its position\n        single_pixel_obj = single_pixel_objects[0]\n        single_pixel_row, single_pixel_col = single_pixel_obj[0]\n\n        # Get the first multi-pixel object\n        multi_pixel_obj = multi_pixel_objects[0]\n        multi_pixel_bbox = bounding_box(multi_pixel_obj)\n        min_row, max_row, min_col, max_col = multi_pixel_bbox\n\n        # Duplicate object data\n        duplicated_object = copy_object(input_grid, multi_pixel_obj)\n        \n        # Remove the original single pixel\n        output_grid[single_pixel_row, single_pixel_col] = 0\n\n        # Calculate dimensions of the multi-pixel object\n        height = max_row - min_row + 1\n        width = max_col - min_col + 1\n\n        # Calculate the new top-left corner for the duplicated object\n        new_min_row = single_pixel_row - height // 2\n        new_min_col = single_pixel_col - width // 2\n\n        # Place the duplicated object in the output grid\n        for (row, col), value in duplicated_object.items():\n            new_row = row - min_row + new_min_row\n            new_col = col - min_col + new_min_col\n            if 0 <= new_row < output_grid.shape[0] and 0 <= new_col < output_grid.shape[1]:\n                 output_grid[new_row, new_col] = value\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 2474,
            "end_index": 2655,
            "uri": "https://github.com/comhendrik/adventofcode",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 11088,
    "candidates_token_count": 1328,
    "total_token_count": 12416,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 12.825185
}