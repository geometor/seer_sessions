{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. **Identify Objects:** Find all distinct objects in the input grid. An object is a contiguous block of non-zero pixels.\n2. **Define Bounding Box:** For all objects, determine the smallest rectangle (bounding box) that completely encloses the objects. This box should exclude as many background (color 0) pixels as possible.\n3. **Mirror Objects:** For each object within the bounding box, mirror its position within the bounding box. The mirroring operation should reflect the object's position across both the horizontal and vertical centerlines of the bounding box.\n4.  **Construct Output:** All cells outside the bounding box of the original input are copied directly. The new object positions create the output.\n5. **Background Preservation:** Maintain all '0' (background) pixels in their original locations outside the objects bounding box.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"\n    Finds distinct objects in the grid.  An object is a group of \n    contiguous non-zero pixels.\n    Uses depth first search\n    \"\"\"\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n    rows, cols = grid.shape\n\n    def dfs(row, col, current_object):\n        if (row < 0 or row >= rows or col < 0 or col >= cols or\n                visited[row, col] or grid[row, col] == 0):\n            return\n        visited[row, col] = True\n        current_object.append((row, col))\n        dfs(row + 1, col, current_object)\n        dfs(row - 1, col, current_object)\n        dfs(row, col + 1, current_object)\n        dfs(row, col - 1, current_object)\n\n    for row in range(rows):\n        for col in range(cols):\n            if grid[row, col] != 0 and not visited[row, col]:\n                current_object = []\n                dfs(row, col, current_object)\n                objects.append(current_object)\n    return objects\n\ndef bounding_box(objects):\n    \"\"\"\n    Find the smallest rectangle enclosing all objects\n    \"\"\"\n    if not objects:  # Handle empty case\n        return (0,0,0,0)\n\n    min_row = float('inf')\n    max_row = float('-inf')\n    min_col = float('inf')\n    max_col = float('-inf')\n\n    for obj in objects:\n        for row, col in obj:\n            min_row = min(min_row, row)\n            max_row = max(max_row, row)\n            min_col = min(min_col, col)\n            max_col = max(max_col, col)\n\n    return (min_row, max_row, min_col, max_col)\n\ndef mirror_position(point, min_row, max_row, min_col, max_col):\n    \"\"\"\n    Mirror a point within the bounding box\n    \"\"\"\n    center_row = (min_row + max_row) / 2\n    center_col = (min_col + max_col) / 2\n    mirrored_row = int(2 * center_row - point[0])\n    mirrored_col = int(2 * center_col - point[1])\n    return (mirrored_row, mirrored_col)\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the mirroring rule.\n    \"\"\"\n    input_grid = np.array(input_grid)\n    output_grid = np.copy(input_grid)\n    objects = find_objects(input_grid)\n    \n    # Handle the edge case of no objects\n    if not objects:\n      return output_grid\n    \n    min_row, max_row, min_col, max_col = bounding_box(objects)\n\n    # clear existing objects in bounding box from output\n    for obj in objects:\n      for r, c in obj:\n        if min_row <= r <= max_row and min_col <= c <= max_col:\n          output_grid[r,c] = 0\n\n    # Mirror and place objects\n    for obj in objects:\n        for row, col in obj:\n            mirrored_row, mirrored_col = mirror_position(\n                (row, col), min_row, max_row, min_col, max_col\n            )\n            # Check boundaries\n            if 0 <= mirrored_row < output_grid.shape[0] and 0 <= mirrored_col < output_grid.shape[1]:\n                output_grid[mirrored_row, mirrored_col] = input_grid[row, col]\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 2181,
            "end_index": 2374,
            "uri": "https://github.com/comhendrik/adventofcode",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2495,
    "candidates_token_count": 1091,
    "total_token_count": 3586,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 14.075968
}