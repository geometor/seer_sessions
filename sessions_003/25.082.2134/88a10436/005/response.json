{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Find all distinct objects in the input grid. An object is a contiguous block of non-zero pixels.\n2.  **Find Single-Pixel Objects:** Identify objects consisting of only one pixel.\n3. **Find Multi-Pixel Objects** Identify objects consisting of more than one pixel.\n4.  **Transformation based on Object Size:**\n    *   If there's both single and multi pixel object - Copy the multi-pixel object to the output grid unchanged. Expand and position an object with matching shape and color, anchored to the location of the single pixel object.\n    *  If only single pixel object in the input - no change\n    * If only multi pixel objects - no change\n\n5. Mirror the single pixel object using the dimensions and location of the multi pixel object\n6. **Construct Output:** Combine the unchanged objects and the transformed single pixel object.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"\n    Finds distinct objects in the grid.  An object is a group of\n    contiguous non-zero pixels.\n    Uses depth first search\n    \"\"\"\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n    rows, cols = grid.shape\n\n    def dfs(row, col, current_object):\n        if (row < 0 or row >= rows or col < 0 or col >= cols or\n                visited[row, col] or grid[row, col] == 0):\n            return\n        visited[row, col] = True\n        current_object.append((row, col))\n        dfs(row + 1, col, current_object)\n        dfs(row - 1, col, current_object)\n        dfs(row, col + 1, col, current_object)\n        dfs(row, col - 1, col, current_object)\n\n    for row in range(rows):\n        for col in range(cols):\n            if grid[row, col] != 0 and not visited[row, col]:\n                current_object = []\n                dfs(row, col, current_object)\n                objects.append(current_object)\n    return objects\n\ndef bounding_box(object_pixels):\n    \"\"\"\n    Find the smallest rectangle enclosing a single object.\n    \"\"\"\n    min_row = float('inf')\n    max_row = float('-inf')\n    min_col = float('inf')\n    max_col = float('-inf')\n\n    for row, col in object_pixels:\n        min_row = min(min_row, row)\n        max_row = max(max_row, row)\n        min_col = min(min_col, col)\n        max_col = max(max_col, col)\n\n    return (min_row, max_row, min_col, max_col)\n\ndef mirror_position(point, min_row, max_row, min_col, max_col):\n    \"\"\"\n    Mirror a point within the object's bounding box\n    \"\"\"\n    center_row = (min_row + max_row) / 2\n    center_col = (min_col + max_col) / 2\n    mirrored_row = int(2 * center_row - point[0])\n    mirrored_col = int(2 * center_col - point[1])\n    return (mirrored_row, mirrored_col)\n    \n\ndef transform(input_grid):\n    input_grid = np.array(input_grid)\n    output_grid = np.copy(input_grid)\n    objects = find_objects(input_grid)\n\n    single_pixel_objects = [obj for obj in objects if len(obj) == 1]\n    multi_pixel_objects = [obj for obj in objects if len(obj) > 1]\n    \n    if len(single_pixel_objects) > 0 and len(multi_pixel_objects) > 0:\n       # get the single pixel object and location\n       single_pixel_object = single_pixel_objects[0]\n       single_pixel_row, single_pixel_col = single_pixel_object[0]\n\n       #get multi pixel object, and bounding box\n       multi_pixel_object = multi_pixel_objects[0]\n       min_row, max_row, min_col, max_col = bounding_box(multi_pixel_object)\n       \n       # remove the original single pixel\n       output_grid[single_pixel_row,single_pixel_col] = 0\n       \n       #get color\n       color = input_grid[single_pixel_row,single_pixel_col]\n\n       # create the mirrored object\n       height = max_row - min_row + 1\n       width = max_col - min_col + 1\n       \n       new_min_row = single_pixel_row - height // 2\n       new_min_col = single_pixel_col - width // 2\n       \n       # original object\n       for r, c in multi_pixel_object:\n           mir_row, mir_col = mirror_position((r,c),min_row, max_row, min_col, max_col)\n           new_r = mir_row - min_row + new_min_row\n           new_c = mir_col - min_col + new_min_col\n           if 0 <= new_r < output_grid.shape[0] and 0 <= new_c < output_grid.shape[1]:\n               output_grid[new_r,new_c] = input_grid[r,c]\n\n    elif len(single_pixel_objects) > 0 and not multi_pixel_objects:\n      output_grid = input_grid\n    elif not single_pixel_objects and len(multi_pixel_objects) > 0:\n       output_grid = input_grid      \n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 2123,
            "end_index": 2304,
            "uri": "https://github.com/comhendrik/adventofcode",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7854,
    "candidates_token_count": 1353,
    "total_token_count": 9207,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 16.349695
}