{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Bottom Objects:** Find all contiguous horizontal objects along the bottom row of the input grid.\n2.  **Select Topmost Object:** Among the objects found, select the one that appears highest in the grid (lowest row index). If multiple objects share the same row, select the one that start most to the left.\n3.  **Mirror:** Calculate the vertical center (column index) of the selected object. Mirror the colors of the row *immediately* above the selected object across this vertical center.  This means if a pixel is *x* units to the right of the center, its color will be copied to the pixel *x* units to the left of the center, and vice-versa. Only the pixels directly above this bottom object participate in the mirror.\n4.  **Propagate Upwards:** Copy the now-mirrored row, replacing all rows above it, working upwards until the top of the grid (row 0) is reached.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"Finds contiguous objects in the grid.\"\"\"\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n\n    def is_valid(r, c):\n        return 0 <= r < grid.shape[0] and 0 <= c < grid.shape[1]\n\n    def dfs(r, c, color, current_object):\n        if not is_valid(r, c) or visited[r, c] or grid[r, c] != color:\n            return\n        visited[r, c] = True\n        current_object.append((r, c))\n        dfs(r + 1, c, color, current_object)\n        dfs(r - 1, c, color, current_object)\n        dfs(r, c + 1, color, current_object)\n        dfs(r, c - 1, color, current_object)\n\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if not visited[r, c] and grid[r, c] != 0:\n                current_object = []\n                dfs(r, c, grid[r, c], current_object)\n                objects.append(current_object)\n    return objects\n\ndef find_bottom_objects(grid):\n    \"\"\"Identifies distinct horizontal objects at the bottom of the grid.\"\"\"\n    objects = find_objects(grid)\n    bottom_objects = []\n    bottom_row = grid.shape[0] - 1\n\n    for obj in objects:\n        # Check if the object is on the bottom row and horizontal\n        rows = [r for r, _ in obj]\n        cols = [c for _, c in obj]\n        if max(rows) == bottom_row and len(set(rows)) == 1:\n                bottom_objects.append(obj)\n\n\n    return bottom_objects\n\ndef select_topmost_object(objects):\n    \"\"\"Selects the topmost object from a list of bottom objects.\"\"\"\n    if not objects:\n      return []\n    # Find the object with the minimum row value (highest up)\n    topmost_object = min(objects, key=lambda obj: min(r for r, _ in obj))\n    \n    #remove all pixels not on same row\n    row = min(r for r,_ in topmost_object)\n    topmost_object = [(r,c) for (r,c) in topmost_object if r == row]\n\n    #select left most if there are ties\n    topmost_object = min(objects, key=lambda obj: min(c for _, c in obj))\n\n    return topmost_object\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the mirroring rule.\"\"\"\n    grid = np.array(input_grid)  # Work with a NumPy array\n    output_grid = np.copy(grid)\n    bottom_objects = find_bottom_objects(grid)\n\n    topmost = select_topmost_object(bottom_objects)\n    if len(topmost) == 0:\n        return output_grid.tolist()\n\n    #find center\n    cols = [c for _,c in topmost]\n    center = (min(cols) + max(cols))/2\n    row = topmost[0][0]\n    source_row = row - 1\n\n    #mirror the source row\n    if source_row >= 0:\n        for c in range(grid.shape[1]):\n            delta_c = c - center\n            target_c = int(center - delta_c)\n\n            if 0 <= target_c < grid.shape[1]:\n                output_grid[source_row,target_c] = grid[source_row,c]\n    \n    #now iterate upwards copying target row\n    target_row = source_row\n    while target_row > 0:\n        target_row -= 1\n        output_grid[target_row,:] = output_grid[source_row,:]\n            \n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4469,
    "candidates_token_count": 1146,
    "total_token_count": 5615,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 14.224098
}