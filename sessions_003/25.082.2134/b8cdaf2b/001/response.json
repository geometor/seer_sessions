{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Find all distinct horizontal objects across bottom of the grid.\n2.  **Select Topmost Object:** From the bottom objects select the one appearing highest in the grid..\n3.  **Determine Mirror Axis:** Calculate the vertical center (midpoint) of the selected object's bounding box.\n4. **Partial Mirroring**: For every pixel inside selected object, reflect about center line and find target pixel.\n5. **Copy colors:** Copy target pixel color from source object, but from above/below the source object.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"Finds contiguous objects in the grid.\"\"\"\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n\n    def is_valid(r, c):\n        return 0 <= r < grid.shape[0] and 0 <= c < grid.shape[1]\n\n    def dfs(r, c, color, current_object):\n        if not is_valid(r, c) or visited[r, c] or grid[r, c] != color:\n            return\n        visited[r, c] = True\n        current_object.append((r, c))\n        dfs(r + 1, c, color, current_object)\n        dfs(r - 1, c, color, current_object)\n        dfs(r, c + 1, color, current_object)\n        dfs(r, c - 1, color, current_object)\n\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if not visited[r, c] and grid[r, c] != 0:\n                current_object = []\n                dfs(r, c, grid[r, c], current_object)\n                objects.append(current_object)\n    return objects\n\ndef find_bottom_objects(grid):\n    \"\"\"Identifies distinct horizontal objects at the bottom of the grid.\"\"\"\n    objects = find_objects(grid)\n    bottom_objects = []\n    bottom_row = grid.shape[0] - 1\n\n    for obj in objects:\n        # Check if the object is on the bottom row and horizontal\n        rows = [r for r, _ in obj]\n        cols = [c for _, c in obj]\n        if max(rows) == bottom_row and len(set(rows)) == 1:\n                bottom_objects.append(obj)\n\n\n    return bottom_objects\n\ndef select_topmost_object(objects):\n    \"\"\"Selects the topmost object from a list of bottom objects.\"\"\"\n    if not objects:\n      return []\n    # Find the object with the minimum row value (highest up)\n    topmost_object = min(objects, key=lambda obj: min(r for r, _ in obj))\n\n    #remove all pixels not on same row\n    row = min(r for r,_ in topmost_object)\n    topmost_object = [(r,c) for (r,c) in topmost_object if r == row]\n\n    return topmost_object\n\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the mirroring rule.\"\"\"\n    grid = np.array(input_grid)  # Work with a NumPy array\n    output_grid = np.copy(grid)\n    bottom_objects = find_bottom_objects(grid)\n\n    topmost = select_topmost_object(bottom_objects)\n    if len(topmost) == 0:\n        return output_grid\n\n    #find center\n    cols = [c for _,c in topmost]\n    center = (min(cols) + max(cols))/2\n\n    for r,c in topmost:\n        #mirror\n        delta = c - center\n        \n        target_c = int(center - delta)\n\n        #find source color location\n        source_r = r - 1 if delta > 0 else r + 1\n      \n        if 0 <= source_r < grid.shape[0] and 0 <= target_c < grid.shape[1]:\n            output_grid[r,target_c] = grid[source_r, c]\n        \n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2047,
    "candidates_token_count": 962,
    "total_token_count": 3009,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 13.419476
}