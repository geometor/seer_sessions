objects:
  - name: grid
    type: 2D array
    properties:
      rows: variable
      columns: variable
      cells: integers (0-9 representing colors)

  - name: red_pixel
    type: grid_cell
    properties:
      color: red (2)
      row_index: integer
      col_index: integer
      sum_parity: (row_index + col_index) % 2  # 0 for even, 1 for odd
      bottom_half: boolean (row_index >= rows // 2)

actions:
  - name: change_color
    input: red_pixel
    condition: "pixel.bottom_half is True"
    # output is based on an alternating pattern, starting by parity, within the bottom half.
    output:
      color: azure (8) if alternating_pattern_applies else red (2)

alternating_pattern:
  description: |
     Within each row of the bottom half of the grid, red pixels change to azure
     in an alternating pattern.  The pattern within a row starts by the value
     of (row + 1) % 2.  If the first red pixel in the row matches this parity, it
     becomes azure. The next stays red. And so on, alternating.
