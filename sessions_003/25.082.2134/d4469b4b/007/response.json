{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Find the Cross:** Examine the input grid to identify the largest \"cross\" shape. A cross consists of orthogonally connected pixels (up, down, left, right \u2013 *no diagonals*) of the same non-zero color. The cross must have at least 5 connected pixels to be valid. If there is no cross, the output is a 3x3 grid of zeros.\n\n2.  **Determine the Center:** The cross is made of a horizontal line and a vertical line. Determine the center of the cross to be the intersection point of the longest horizontal line and the longest vertical line of the same color.\n\n3. **Map Input Center to 3x3 Output:** Scale the input cross's center coordinates to fit within the 3x3 output grid. This is done as follows:\n    -   Output Row = floor(Input Center Row * 3 / Input Grid Rows)\n    -   Output Column = floor(Input Center Column * 3 / Input Grid Columns)\n\n4.  **Construct Output:** Create a 3x3 output grid filled with zeros.\n\n5.  **Draw Gray Cross:** In the output grid, place a gray pixel (value 5) at every cell along the calculated output center row and output center column.\n\n6. **Handle No Cross:** If no valid cross is found, output a 3x3 grid filled with zeros.\n\"\"\"\n\nimport numpy as np\n\ndef find_cross(grid):\n    \"\"\"Finds the largest cross shape in the grid (orthogonally connected).\"\"\"\n    rows, cols = grid.shape\n    visited = set()\n    max_cross_size = 0\n    best_center = None\n    cross_color = 0\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def get_line(r, c, dr, dc, color):\n        \"\"\"Gets a line of connected pixels in a given direction.\"\"\"\n        line = []\n        while is_valid(r, c) and grid[r, c] == color:\n            line.append((r, c))\n            visited.add((r,c))\n            r += dr\n            c += dc\n        return line\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and (r, c) not in visited:\n                color = grid[r, c]\n                # Get horizontal and vertical lines\n                horizontal_line = get_line(r, c, 0, 1, color) + get_line(r, c - 1, 0, -1, color)\n                vertical_line = get_line(r, c, 1, 0, color) + get_line(r - 1, c, -1, 0, color)\n                \n                if len(horizontal_line) >=3 or len(vertical_line) >=3:\n                    \n                    #find intersection\n                    intersection = set(horizontal_line) & set(vertical_line)\n                    if intersection:\n\n                        center = list(intersection)[0]\n\n                        # Calculate cross size (assuming a perfect cross)\n                        cross_size = len(horizontal_line) + len(vertical_line) -1\n                        if cross_size > max_cross_size:\n                            max_cross_size = cross_size\n                            best_center = center\n                            cross_color = color\n\n    if max_cross_size >= 5:\n      return best_center, cross_color\n    else:\n      return None, None\n\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the cross rule.\"\"\"\n    input_grid = np.array(input_grid)\n    center, cross_color = find_cross(input_grid)\n\n    # If no cross, return an empty 3x3 grid\n    if center is None:\n        return np.zeros((3, 3), dtype=int)\n\n    input_rows, input_cols = input_grid.shape\n    # Map input center to 3x3 output grid\n    output_row = int(center[0] * 3 / input_rows)\n    output_col = int(center[1] * 3 / input_cols)\n\n\n    # Create the 3x3 output grid\n    output_grid = np.zeros((3, 3), dtype=int)\n\n    # Fill the center row and column with gray (5)\n    for i in range(3):\n        output_grid[output_row, i] = 5\n        output_grid[i, output_col] = 5\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6017,
    "candidates_token_count": 1044,
    "total_token_count": 7061,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 14.007531
}