{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Unique Colors:** Scan the input grid to identify all \"unique\" colors. A color is considered \"unique\" if it appears a small number of times compared to the dominant background color (the most frequent color).\n2.  **Center Selection:** For each unique color found, consider its pixel as the center of a plus-shaped (+) selection pattern.\n3.  **Plus-Shaped Selection:** Select pixels from the input grid that form a \"plus\" shape.\n    -   Select any pixel with the unique color.\n    -   Select the input pixels at the furthest cardinal directions.\n    -   The size/reach of the \"plus\" is determined by the boundaries of the input grid.\n4.  **Construct Output:** Arrange the selected pixels to form the output grid. Maintain the relative spatial positions. The selected center is the center of the output, north pixels above, etc.\n5.  **Border Handling:** The selection may extend to all borders of the input.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef get_dominant_color(grid):\n    \"\"\"Finds the most frequent color in the grid.\"\"\"\n    flat_grid = grid.flatten()\n    color_counts = Counter(flat_grid)\n    dominant_color = color_counts.most_common(1)[0][0]\n    return dominant_color\n\ndef find_unique_colors(grid):\n    \"\"\"Identifies colors that appear a small number of times.\"\"\"\n    dominant_color = get_dominant_color(grid)\n    flat_grid = grid.flatten()\n    color_counts = Counter(flat_grid)\n    \n    unique_colors = []\n    for color, count in color_counts.items():\n        if color != dominant_color:\n            unique_colors.append(color)\n    return unique_colors\n\ndef get_pixel_positions(grid, color):\n    \"\"\"Returns a list of (row, col) tuples for all pixels of the given color.\"\"\"\n    positions = []\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] == color:\n                positions.append((r, c))\n    return positions\n\ndef get_extrema(positions):\n    \"\"\"From a list of (row, col) positions, find the extrema (N, S, E, W).\"\"\"\n    if not positions:\n        return {}\n\n    min_row = min(pos[0] for pos in positions)\n    max_row = max(pos[0] for pos in positions)\n    min_col = min(pos[1] for pos in positions)\n    max_col = max(pos[1] for pos in positions)\n\n    north = [(r, c) for r, c in positions if r == min_row]\n    south = [(r, c) for r, c in positions if r == max_row]\n    west = [(r, c) for r, c in positions if c == min_col]\n    east = [(r, c) for r, c in positions if c == max_col]\n\n    #take central most of the extrema\n    extrema = {}\n    if north:\n        extrema['north'] = north[len(north)//2]\n    if south:\n        extrema['south'] = south[len(south)//2]\n    if west:\n        extrema['west'] = west[len(west)//2]\n    if east:\n        extrema['east'] = east[len(east)//2]\n\n    return extrema\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the plus-shaped selection rule.\"\"\"\n    input_grid = np.array(input_grid)  # Ensure numpy array\n    unique_colors = find_unique_colors(input_grid)\n    \n    all_extrema = {}\n    for color in unique_colors:\n        positions = get_pixel_positions(input_grid, color)\n        extrema = get_extrema(positions)\n        all_extrema[color] = extrema\n\n    #find center most point among all selected\n    centers = get_pixel_positions(input_grid, unique_colors[0])\n    if len(unique_colors) > 1:\n      for color in unique_colors[1:]:\n          centers.extend( get_pixel_positions(input_grid, color) )          \n    center_row = sum((p[0] for p in centers)) // len(centers)\n    center_col = sum((p[1] for p in centers)) // len(centers)\n\n    # Determine output grid dimensions\n    max_dist_row = 0\n    max_dist_col = 0\n\n    for color, extrema in all_extrema.items():\n        for direction, pos in extrema.items():\n            max_dist_row = max(max_dist_row, abs(pos[0] - center_row))\n            max_dist_col = max(max_dist_col, abs(pos[1] - center_col))\n\n    output_height = 2 * max_dist_row + 1\n    output_width = 2 * max_dist_col + 1\n    output_grid = np.full((output_height, output_width), get_dominant_color(input_grid)) #fill output with main input color\n\n\n    # Place selected pixels into the output grid\n    for color, extrema in all_extrema.items():\n      for direction, pos in extrema.items():\n        out_row = pos[0] - center_row + output_height // 2\n        out_col = pos[1] - center_col + output_width // 2\n\n        if 0 <= out_row < output_height and 0 <= out_col < output_width:\n            output_grid[out_row, out_col] = input_grid[pos[0], pos[1]]\n\n      #make sure the unique colors appear\n      for pos in get_pixel_positions(input_grid, color):\n        out_row = pos[0] - center_row + output_height // 2\n        out_col = pos[1] - center_col + output_width // 2\n        if 0 <= out_row < output_height and 0 <= out_col < output_width:\n            output_grid[out_row, out_col] = input_grid[pos[0], pos[1]]\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 2073,
            "end_index": 2249,
            "uri": "https://github.com/rayking99/BlockStar",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2661,
    "candidates_token_count": 1469,
    "total_token_count": 4130,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 16.685989
}