{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by reflecting non-zero pixels across their center and then performing a limited expansion.\n\n1. **Identify Objects:** Locate all contiguous regions of non-zero pixels (colored objects) within the input grid.\n2. **Determine Center:** Calculate the geometric center of each object.\n3. **Reflect:** Reflect each object across horizontal and vertical axes passing through its center.\n4. **Expand (Limited):** Expand colored regions (original and reflected) one layer at a time, respecting reflection axes.\n\"\"\"\n\nimport numpy as np\n\ndef get_objects(grid):\n    \"\"\"Identifies contiguous objects in the grid.\"\"\"\n    objects = {}\n    visited = np.zeros_like(grid, dtype=bool)\n\n    def dfs(r, c, color, obj_coords):\n        if (r < 0 or r >= grid.shape[0] or c < 0 or c >= grid.shape[1] or\n                visited[r, c] or grid[r, c] != color):\n            return\n        visited[r, c] = True\n        obj_coords.append((r, c))\n        dfs(r + 1, c, color, obj_coords)\n        dfs(r - 1, c, color, obj_coords)\n        dfs(r, c + 1, color, obj_coords)\n        dfs(r, c - 1, color, obj_coords)\n\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] != 0 and not visited[r, c]:\n                color = grid[r, c]\n                obj_coords = []\n                dfs(r, c, color, obj_coords)\n                if color not in objects:\n                    objects[color] = []\n                objects[color].append(obj_coords)\n    return objects\n\ndef get_center(obj_coords):\n    \"\"\"Calculates the geometric center of an object.\"\"\"\n    coords = np.array(obj_coords)\n    return np.mean(coords, axis=0)\n\ndef reflect_object(grid, obj_coords, center):\n    \"\"\"Reflects an object across its center.\"\"\"\n    reflected_grid = np.copy(grid)\n    color = grid[obj_coords[0]]  # Get the color of the object\n    for r, c in obj_coords:\n        # Reflect across horizontal and vertical axes\n        reflected_r = int(2 * center[0] - r)\n        reflected_c = int(2 * center[1] - c)\n\n        if (0 <= reflected_r < grid.shape[0] and 0 <= reflected_c < grid.shape[1]):\n            reflected_grid[reflected_r, reflected_c] = color\n    return reflected_grid\ndef limited_expand(grid, original_objects):\n    \"\"\"Performs a limited expansion of colored regions.\"\"\"\n    expanded_grid = np.copy(grid)\n    changed = True\n    while changed:\n        changed = False\n        new_grid = np.copy(expanded_grid)\n        for r in range(grid.shape[0]):\n            for c in range(grid.shape[1]):\n                if expanded_grid[r, c] == 0:\n                    for color, objects in original_objects.items():\n                      for obj_coords in objects:\n                        for orow, ocol in obj_coords:\n                            center = get_center(obj_coords)\n                            #expand only one layer at a time\n                            if abs(r - orow) <=1 and abs(c-ocol) <=1:\n                                # Check if expansion respects reflection axes\n                                if (r <= center[0] and any(row <= center[0] for row, _ in obj_coords)) or \\\n                                   (r >= center[0] and any(row >= center[0] for row, _ in obj_coords)):\n                                     if (c <= center[1] and any(col <= center[1] for _, col in obj_coords)) or \\\n                                       (c >= center[1] and any(col >= center[1] for _, col in obj_coords)):\n\n                                         new_grid[r,c] = grid[orow,ocol]\n                                         changed = True\n                                         break\n                        if changed:\n                          break\n                    if changed:\n                      break\n\n\n        expanded_grid = new_grid\n    return expanded_grid\n\ndef transform(input_grid):\n    # 1. Identify Objects\n    objects = get_objects(input_grid)\n\n    # 2. & 3. Reflect\n    reflected_grid = np.copy(input_grid)\n    for color, obj_list in objects.items():\n        for obj_coords in obj_list:\n            center = get_center(obj_coords)\n            reflected_grid = reflect_object(reflected_grid, obj_coords, center)\n\n    # 4. Limited Expansion\n    #we pass the original objects to constrain the expansion to the original objects\n    output_grid = limited_expand(reflected_grid, objects)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6054,
    "candidates_token_count": 1163,
    "total_token_count": 7217,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 19.764844
}