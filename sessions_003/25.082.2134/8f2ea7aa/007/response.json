{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by reflecting non-zero pixels across their center and then performing a constrained symmetrical fill.\n\n1. **Identify Objects:** Find each contiguous region of non-zero (colored) pixels. Each of these regions is an object.\n2. **Reflect:** For each object, determine its geometric center. Reflect the object across the horizontal and vertical lines passing through that center.\n3. **Constrained Fill:**  Iteratively expand all pixels of each color.\n   - A cell can be filled with color C if:\n     - It is adjacent (up, down, left, or right) to a cell that is already color C.\n     - It does *not* cross a reflection line of the *initial object* of that color.\n4. Repeat step 3, until no new cells can be filled.\n\"\"\"\n\nimport numpy as np\n\ndef get_objects(grid):\n    \"\"\"Identifies contiguous objects in the grid.\"\"\"\n    objects = {}\n    visited = np.zeros_like(grid, dtype=bool)\n\n    def dfs(r, c, color, obj_coords):\n        if (r < 0 or r >= grid.shape[0] or c < 0 or c >= grid.shape[1] or\n                visited[r, c] or grid[r, c] != color):\n            return\n        visited[r, c] = True\n        obj_coords.append((r, c))\n        dfs(r + 1, c, color, obj_coords)\n        dfs(r - 1, c, color, obj_coords)\n        dfs(r, c + 1, color, obj_coords)\n        dfs(r, c - 1, color, obj_coords)\n\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] != 0 and not visited[r, c]:\n                color = grid[r, c]\n                obj_coords = []\n                dfs(r, c, color, obj_coords)\n                if color not in objects:\n                    objects[color] = []\n                objects[color].append(obj_coords)\n    return objects\n\ndef get_center(obj_coords):\n    \"\"\"Calculates the geometric center of an object.\"\"\"\n    coords = np.array(obj_coords)\n    return np.mean(coords, axis=0)\n\ndef reflect_object(grid, obj_coords, center):\n    \"\"\"Reflects an object across its center.\"\"\"\n    reflected_grid = np.copy(grid)\n    color = grid[obj_coords[0]]  # Get the color of the object\n    for r, c in obj_coords:\n        # Reflect across horizontal and vertical axes\n        reflected_r = int(2 * center[0] - r)\n        reflected_c = int(2 * center[1] - c)\n\n        if (0 <= reflected_r < grid.shape[0] and 0 <= reflected_c < grid.shape[1]):\n            reflected_grid[reflected_r, reflected_c] = color\n    return reflected_grid\n\ndef constrained_fill(grid, original_objects):\n    \"\"\"Performs a constrained symmetrical fill based on reflection lines.\"\"\"\n    filled_grid = np.copy(grid)\n    changed = True\n    while changed:\n        changed = False\n        new_grid = np.copy(filled_grid)\n        for r in range(filled_grid.shape[0]):\n            for c in range(filled_grid.shape[1]):\n                if filled_grid[r, c] == 0:  # Consider filling empty cells\n                    for color, obj_list in original_objects.items():\n                        for obj_coords in obj_list:\n                            center = get_center(obj_coords)\n                            for nr, nc in [(r - 1, c), (r + 1, c), (r, c - 1), (r, c + 1)]:\n                                if 0 <= nr < filled_grid.shape[0] and 0 <= nc < filled_grid.shape[1] and filled_grid[nr, nc] == color:\n                                    # Check if the fill respects reflection lines\n                                    valid_fill = True\n                                    for orow, ocol in obj_coords:\n                                        reflected_r = int(2 * center[0] - orow)\n                                        reflected_c = int(2 * center[1] - ocol)\n                                        if not (\n                                            (r <= center[0] and orow <= center[0]) or (r >= center[0] and orow >= center[0])\n                                          ) and ( (nr<=center[0] and orow >= center[0]) or (nr >= center[0] and orow <= center[0])):\n                                          valid_fill=False\n                                          break\n                                        if not (\n                                            (c <= center[1] and ocol <= center[1]) or (c >= center[1] and ocol >= center[1])\n                                          ) and ((nc <= center[1] and ocol >= center[1]) or (nc >= center[1] and ocol <= center[1])):\n                                          valid_fill = False\n                                          break\n                                        if not((r <= center[0] and reflected_r <= center[0]) or (r >= center[0] and reflected_r >= center[0])):\n                                          valid_fill=False\n                                          break;\n                                        if not((c <= center[1] and reflected_c <= center[1]) or (c >= center[1] and reflected_c >= center[1])):\n                                          valid_fill = False\n                                          break\n\n                                    if valid_fill:\n                                        new_grid[r, c] = color\n                                        changed = True\n                                        break\n                            if changed:\n                                break\n                    if changed:\n                      break;\n\n\n        filled_grid = new_grid\n    return filled_grid\n\n\ndef transform(input_grid):\n    # 1. Identify Objects\n    objects = get_objects(input_grid)\n\n    # 2. Reflect\n    reflected_grid = np.copy(input_grid)\n    for color, obj_list in objects.items():\n        for obj_coords in obj_list:\n            center = get_center(obj_coords)\n            reflected_grid = reflect_object(reflected_grid, obj_coords, center)\n\n    # 3. & 4. Constrained Fill\n    output_grid = constrained_fill(reflected_grid, objects)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4922,
    "candidates_token_count": 1494,
    "total_token_count": 6416,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 24.061622
}