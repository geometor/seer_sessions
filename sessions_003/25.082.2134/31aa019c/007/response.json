{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nRemoves single-colored edge objects and creates a rectangle at the bottom of the grid using a color from a multi-colored edge object.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"Finds contiguous objects in a grid.\"\"\"\n    objects = []\n    visited = set()\n    rows, cols = grid.shape\n\n    def dfs(r, c, color, obj):\n        if (r, c) in visited or r < 0 or r >= rows or c < 0 or c >= cols or grid[r, c] != color:\n            return\n        visited.add((r, c))\n        obj.append((r, c))\n        dfs(r + 1, c, color, obj)\n        dfs(r - 1, c, color, obj)\n        dfs(r, c + 1, color, obj)\n        dfs(r, c - 1, color, obj)\n\n    for r in range(rows):\n        for c in range(cols):\n            if (r, c) not in visited and grid[r, c] != 0:\n                obj = []\n                dfs(r, c, grid[r, c], obj)\n                objects.append(obj)\n    return objects\n\ndef is_edge_object(obj, rows, cols):\n    \"\"\"Checks if an object touches any edge of the grid.\"\"\"\n    for r, c in obj:\n        if r == 0 or r == rows - 1 or c == 0 or c == cols - 1:\n            return True\n    return False\n\ndef is_single_colored_object(grid, obj):\n    \"\"\"Checks if an object contains only one color.\"\"\"\n    if not obj:\n        return False\n\n    first_pixel_color = grid[obj[0][0], obj[0][1]]\n    for r, c in obj:\n        if grid[r, c] != first_pixel_color:\n            return False\n    return True\n\n\ndef get_bottom_center_multicolored_object(grid, objects):\n    \"\"\"\n    Finds the multi-colored object closest to the bottom and center.\n    \"\"\"\n    rows, cols = grid.shape\n    bottom_center_objects = []\n    for obj in objects:\n        # should be multicolored and edge object\n        if not is_single_colored_object(grid, obj) and is_edge_object(obj, rows, cols):\n            min_row = rows\n            for r,c in obj:\n                if r < min_row:\n                    min_row = r\n\n            if min_row > rows//2:\n              bottom_center_objects.append(obj)\n\n    if not bottom_center_objects:\n        return None\n    \n    if len(bottom_center_objects) > 1:\n      #get the one more to the bottom\n      max_r = -1\n      selected_object = None\n      for obj in bottom_center_objects:\n        for r,c in obj:\n          if r > max_r:\n            max_r = r\n            selected_object = obj\n      return selected_object\n\n    return bottom_center_objects[0]\n\ndef get_replacement_color(grid, obj):\n    \"\"\"\n    Gets the most frequent color from the object.\n    \"\"\"\n\n    color_counts = {}\n    for r,c in obj:\n        color = grid[r, c]\n        if color != 0:\n          if color not in color_counts:\n              color_counts[color] = 0\n          color_counts[color] += 1\n    \n    most_frequent_color = 0\n    max_count = 0\n\n    for color, count in color_counts.items():\n      if count > max_count:\n        max_count = count\n        most_frequent_color = color\n\n    return most_frequent_color\n\ndef transform(input_grid):\n    # initialize output_grid\n    grid = np.array(input_grid)\n    rows, cols = grid.shape\n    output_grid = np.zeros((rows, cols), dtype=int)\n\n    # Find objects\n    objects = find_objects(grid)\n\n    # Remove single-colored edge objects\n    for obj in objects:\n        if is_single_colored_object(grid, obj) and is_edge_object(obj, rows, cols):\n            for r, c in obj:\n                grid[r,c] = 0\n\n    # re-calculate objects\n    objects = find_objects(grid)\n    # Get bottom center multi colored object\n    target_object = get_bottom_center_multicolored_object(grid, objects)\n\n    # proceed if valid target object\n    if target_object:\n\n        # get replacement color from target object\n        replacement_color = get_replacement_color(grid, target_object)\n\n        # get lowest row from target_object\n        max_row = 0\n        for r,c in target_object:\n          if r > max_row:\n            max_row = r\n\n        # Create rectangle\n        rectangle_height = 3\n        \n        y_start = max_row - rectangle_height + 1 # inclusive\n        if y_start < 0:\n            y_start = 0\n\n        x_coords = [c for r, c in target_object]\n        min_x = min(x_coords)\n        max_x = max(x_coords)\n        \n        for r in range(y_start, y_start + rectangle_height):\n            for c in range(min_x, max_x + 1):\n              output_grid[r,c] = replacement_color\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 11433,
    "candidates_token_count": 1309,
    "total_token_count": 12742,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 18.911432
}