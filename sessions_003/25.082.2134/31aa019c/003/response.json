{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies multi-colored objects at the edges of the input grid and replaces them with a solid-color object, using an existing color from the object's edge pixels, positioned identically.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"Finds contiguous objects in a grid.\"\"\"\n    objects = []\n    visited = set()\n    rows, cols = grid.shape\n\n    def dfs(r, c, color, obj):\n        if (r, c) in visited or r < 0 or r >= rows or c < 0 or c >= cols or grid[r, c] != color:\n            return\n        visited.add((r, c))\n        obj.append((r, c))\n        dfs(r + 1, c, color, obj)\n        dfs(r - 1, c, color, obj)\n        dfs(r, c + 1, color, obj)\n        dfs(r, c - 1, color, obj)\n\n    for r in range(rows):\n        for c in range(cols):\n            if (r, c) not in visited and grid[r, c] != 0:\n                obj = []\n                dfs(r, c, grid[r, c], obj)\n                objects.append(obj)\n    return objects\n\ndef is_edge_object(obj, rows, cols):\n    \"\"\"Checks if an object touches any edge of the grid.\"\"\"\n    for r, c in obj:\n        if r == 0 or r == rows - 1 or c == 0 or c == cols - 1:\n            return True\n    return False\n\ndef is_multicolored_object(grid, obj):\n    \"\"\"Checks if a object contain pixels with multiple colors\"\"\"\n    if not obj:\n      return False\n\n    first_pixel_color = grid[obj[0]]\n    for r,c in obj:\n      if grid[r,c] != first_pixel_color:\n        return True\n    \n    return False\n\ndef get_edge_pixels(grid, obj):\n  \"\"\"\n  get pixels that are at the edge\n  \"\"\"\n  edge_pixels = []\n  rows, cols = grid.shape\n  for r,c in obj:\n    if r == 0 or r == rows - 1 or c == 0 or c == cols - 1:\n        edge_pixels.append((r,c))\n  return edge_pixels\n\ndef get_replacement_color(grid, obj):\n    \"\"\"\n    Gets a replacement color from the object's edge pixels, prioritizing non-black colors.\n    \"\"\"\n    rows, cols = grid.shape\n    edge_pixels = get_edge_pixels(grid, obj)\n\n    # Find a non-black color from edge pixels\n    for r, c in edge_pixels:\n        if grid[r,c] != 0:\n           return grid[r,c]\n\n    return 2 # Default to red if no other color is present at the edge\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the defined rules.\"\"\"\n    grid = np.array(input_grid)  # Work directly on a copy of the input\n    rows, cols = grid.shape\n\n    # Find objects\n    objects = find_objects(grid)\n\n    # Identify and process target objects (multicolored and edge)\n    for obj in objects:\n        if is_edge_object(obj, rows, cols) and is_multicolored_object(grid, obj):\n            # get the replacement color\n            replace_color = get_replacement_color(grid, obj)\n\n            # replace target object pixels by the edge pixel\n            for r, c in obj:\n                grid[r, c] = replace_color\n\n    return grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8796,
    "candidates_token_count": 855,
    "total_token_count": 9651,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.775691
}