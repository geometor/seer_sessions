{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nReplaces '0' (white) pixels in the input grid based on these rules:\n\n1. Leading Zeros: At the beginning of each row, before any non-zero pixel, replace all '0's with '5' (gray).\n2. Propagation: For remaining '0's, replace them with the value of the nearest non-zero pixel to their left within that row.\n3. All-Zero Rows: If a row is all '0's after step 1, if the previous row is all '5's or all of a single color 'c', and did not get its color from its previous row, set the current row to 'c'. Otherwise, set the row to '5'.\n\"\"\"\n\nimport numpy as np\n\ndef _get_leftmost_non_zero(row):\n    \"\"\"Finds the index of the leftmost non-zero element in a row.\"\"\"\n    for i, val in enumerate(row):\n        if val != 0:\n            return i, val\n    return -1, 0  # Return -1 if no non-zero element is found\n\ndef _is_uniform(row):\n    \"\"\"\n    Checks if all elements in the row are the same. Returns the uniform\n    value or None.\n    \"\"\"\n\n    first = row[0]\n    for x in row:\n        if x != first:\n            return None\n    return first\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the defined rules.\n    \"\"\"\n    rows, cols = input_grid.shape\n    output_grid = np.copy(input_grid)  # Start with a copy to preserve original non-zero values\n    prev_row_uniform_color = None\n\n    for r in range(rows):\n        row = input_grid[r]\n        leftmost_non_zero_index, _ = _get_leftmost_non_zero(row)\n\n        # Leading Zeros\n        if leftmost_non_zero_index > 0 :\n            for c in range(leftmost_non_zero_index):\n                output_grid[r,c] = 5\n        elif leftmost_non_zero_index == -1:\n            #handle all zero rows\n            if r > 0:\n                prev_row_uniform_color = _is_uniform(output_grid[r-1])\n                if prev_row_uniform_color is not None:\n                    if r>1:\n                        prev_prev_row_uniform_color = _is_uniform(output_grid[r-2])\n                        if prev_row_uniform_color != prev_prev_row_uniform_color:\n                            output_grid[r] = np.full(cols, prev_row_uniform_color)\n                        else:\n                            output_grid[r] = np.full(cols, 5)\n                    else:\n                       output_grid[r] = np.full(cols, prev_row_uniform_color)\n\n                else:\n                    output_grid[r] = np.full(cols, 5)  # Fill with 5s\n            else:\n                output_grid[r] = np.full(cols, 5)\n\n\n        # Propagation\n        for c in range(leftmost_non_zero_index + 1, cols):\n            if output_grid[r, c] == 0:\n                for c_left in range(c - 1, -1, -1):\n                    if output_grid[r,c_left] != 0:\n                         output_grid[r, c] = output_grid[r, c_left]\n                         break\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4505,
    "candidates_token_count": 828,
    "total_token_count": 5333,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 14.68813
}