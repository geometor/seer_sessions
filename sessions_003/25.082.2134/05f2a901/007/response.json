{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Non-White Rows:** Determine all rows in the input grid that contain at least one pixel that is not white (color 0).\n2.  **Count Non-White Rows:** Count the total number of rows identified in step 1.\n3. **Center the Block:**\n    *   Calculate the starting row index for the block of non-white rows. This is done by subtracting the number of non-white rows from the total number of rows in the grid and dividing the result by two. Use integer division (floor). `start_row = (rows - num_non_white_rows) // 2`\n4.  **Stack Rows:** Copy the identified non-white rows from the input grid to the output grid, starting at the calculated `start_row` index. Maintain the original relative order of the non-white rows.\n5. **Preserve Empty Rows:** All other rows in the output grid should be all white (all pixels set to 0).\n6. **Preserve Shape:** the contents of the non-white input rows are exactly the same as the output rows.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by identifying non-white rows,\n    and centering them in the output grid.\n    \"\"\"\n    input_grid = np.array(input_grid)\n    rows, cols = input_grid.shape\n    output_grid = np.zeros_like(input_grid)\n\n    # 1. Identify Non-White Rows and 2. Count Non-White Rows\n    non_white_row_indices = []\n    for r in range(rows):\n        if not np.all(input_grid[r] == 0):  # More efficient check for non-white rows\n            non_white_row_indices.append(r)\n    num_non_white_rows = len(non_white_row_indices)\n\n    # 3. Center the Block\n    start_row = (rows - num_non_white_rows) // 2\n\n    # 4. Stack Rows\n    current_output_row = start_row\n    for r in non_white_row_indices:\n        output_grid[current_output_row] = input_grid[r]\n        current_output_row += 1\n\n    # 5. Preserve Empty Rows (already handled by initializing with zeros)\n    # 6. preserve shape (already handled)\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4660,
    "candidates_token_count": 558,
    "total_token_count": 5218,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.961753
}