{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation removes empty (white) rows *between* objects of red and azure pixels, preserving the vertical order of the objects and any empty rows above them.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"\n    Identifies and returns a list of distinct objects in the grid.\n    \"\"\"\n    objects = []\n    visited = set()\n    rows, cols = grid.shape\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def dfs(r, c, current_object):\n        if (r, c) in visited or not is_valid(r, c) or grid[r, c] == 0:\n            return\n        visited.add((r, c))\n        current_object.append((r, c))\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            dfs(r + dr, c + dc, current_object)\n\n    for r in range(rows):\n        for c in range(cols):\n            if (r, c) not in visited and grid[r, c] != 0:\n                current_object = []\n                dfs(r, c, current_object)\n                objects.append(current_object)\n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by removing empty rows between objects.\n    \"\"\"\n    input_grid = np.array(input_grid)  # Convert to NumPy array\n    rows, cols = input_grid.shape\n    output_grid = np.zeros_like(input_grid)\n\n    # Find objects (not strictly needed, but helpful for debugging)\n    # objects = find_objects(input_grid)\n\n    # Get non-empty rows, and starting empty rows\n    non_empty_rows = []\n    \n    is_first_non_white = False\n    starting_empty_rows = []\n    \n    for r in range(rows):\n      if not all(input_grid[r] == 0) and not is_first_non_white:\n        is_first_non_white = True\n      if all(input_grid[r] == 0) and not is_first_non_white:\n        starting_empty_rows.append(input_grid[r])\n      if not all(input_grid[r] == 0):\n        non_empty_rows.append(input_grid[r])\n    \n\n    # Fill output grid\n    \n    current_row = 0\n    \n    for r in range(len(starting_empty_rows)):\n      output_grid[current_row] = starting_empty_rows[r]\n      current_row += 1\n    \n    for r in range(len(non_empty_rows)):\n        output_grid[current_row] = non_empty_rows[r]\n        current_row += 1\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2871,
    "candidates_token_count": 693,
    "total_token_count": 3564,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.159939
}