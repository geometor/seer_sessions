{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. Identify the Source Pattern: Find the largest contiguous, non-zero rectangular block starting at the top-left corner of the input grid. This is the source pattern.\n2. Identify Target Blocks: Find all rectangular blocks within the grid that have the *same dimensions* as the source pattern.\n3. Replicate: Copy the source pattern onto each of the identified target blocks, replacing the existing contents.\n\"\"\"\n\nimport numpy as np\n\ndef find_top_left_pattern(grid):\n    \"\"\"\n    Finds the dimensions of a rectangular block at the top-left corner.\n    Assumes that the block is contiguous and has non-zero values (except if the top-left is 0).\n    \"\"\"\n    rows, cols = grid.shape\n\n    # Handle edge case where the top-left corner itself is 0.\n    if grid[0, 0] == 0:\n        return grid[:1,:1]\n\n    \n    # Find height\n    height = 0\n    width = 0\n    for i in range(rows):\n        if all(grid[i,j] == 0 for j in range(cols) if grid[0,0] != 0 and j < cols):\n            break\n\n        # find width for this row:\n        row_width = 0\n        for j in range(cols):\n            if grid[i,j] == 0 and grid[0,0] != 0:\n              break\n            row_width = j+1\n        \n\n        if i>0 and row_width != width:\n            break\n        \n        height = i + 1\n        width = row_width\n        \n\n    return grid[:height, :width]\n\ndef find_target_blocks(grid, pattern_shape):\n    \"\"\"\n    Finds rectangular blocks that match the pattern's dimensions.\n    \"\"\"\n    target_blocks = []\n    rows, cols = grid.shape\n    pattern_height, pattern_width = pattern_shape\n\n    for i in range(rows - pattern_height + 1):\n        for j in range(cols - pattern_width + 1):\n            target_blocks.append((i, j))  # Add all possible blocks\n    return target_blocks\n\ndef transform(input_grid):\n    # initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n\n    # Find the source pattern at the top-left.\n    top_left_pattern = find_top_left_pattern(input_grid)\n    pattern_height, pattern_width = top_left_pattern.shape\n\n    # Find all possible target blocks that match the pattern's dimensions.\n    target_blocks = find_target_blocks(input_grid, top_left_pattern.shape)\n\n    # Replicate the pattern onto each target block.\n    for i, j in target_blocks:\n        output_grid[i:i+pattern_height, j:j+pattern_width] = top_left_pattern\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 13020,
    "candidates_token_count": 684,
    "total_token_count": 13704,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.184619
}