{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. Identify Source Pattern: Find a rectangular block at the top-left corner of the input grid. In the first example it's a 3x3 and the second a 3x4, it may vary in later examples.\n2. Identify Target Blocks: Find all rectangular blocks of the same dimension and filled with 5's.\n3. Replicate: Copy the source pattern onto each of the target blocks, replacing their contents.\n\"\"\"\n\nimport numpy as np\n\ndef find_top_left_pattern(grid):\n    \"\"\"\n    Finds the dimensions of a rectangular block at the top-left corner.\n    For this problem it is assumed, that the block has non-zero values.\n    \"\"\"\n    rows, cols = grid.shape\n    \n    # Find height by checking when the first 0 is encountered\n    height = 0\n    for i in range(rows):\n      if grid[i,0] == 0:\n        break\n      height = i + 1\n\n    # Find width by checking when the first 0 is encountered\n    width = 0\n    for j in range(cols):\n      if grid[0,j] == 0:\n        break\n      width = j+1    \n\n    return grid[:height, :width]\n\ndef find_target_blocks(grid, pattern_shape):\n    \"\"\"\n    Finds rectangular blocks filled with 5s that match the pattern's dimensions.\n    \"\"\"\n    target_blocks = []\n    rows, cols = grid.shape\n    pattern_height, pattern_width = pattern_shape\n\n    for i in range(rows - pattern_height + 1):\n        for j in range(cols - pattern_width + 1):\n            block = grid[i:i+pattern_height, j:j+pattern_width]\n            if np.all(block == 5):\n                target_blocks.append((i, j))\n    return target_blocks\n\ndef transform(input_grid):\n    # initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n\n    # Find the source pattern at the top-left.\n    top_left_pattern = find_top_left_pattern(input_grid)\n    pattern_height, pattern_width = top_left_pattern.shape\n\n    # Find target blocks that match the pattern's dimensions and are filled with 5s.\n    target_blocks = find_target_blocks(input_grid, top_left_pattern.shape)\n\n    # Replicate the pattern onto each target block.\n    for i, j in target_blocks:\n        output_grid[i:i+pattern_height, j:j+pattern_width] = top_left_pattern\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4157,
    "candidates_token_count": 626,
    "total_token_count": 4783,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.124864
}