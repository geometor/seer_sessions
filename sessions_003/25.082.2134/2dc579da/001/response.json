{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nExtracts a sub-grid from the input grid. The sub-grid is located above a horizontal marker line of uniform color.\nThe width is determined by the location of first occurence of specified color.\n\"\"\"\n\nimport numpy as np\n\ndef find_marker_line(grid):\n    \"\"\"Finds the topmost horizontal line with all pixels of the same color.\"\"\"\n    for i, row in enumerate(grid):\n        if np.all(row == row[0]):\n            return i\n    return -1  # No marker line found\n\ndef find_first_occurence_column(grid, marker_row):\n    \"\"\"Finds the column index of first occurence from top.\"\"\"\n    \n    if (marker_row == -1):\n        return len(grid[0]) if len(grid) > 0 else 0\n    \n    if (marker_row == 0):\n        return len(grid[0]) if len(grid) > 0 else 0\n    \n    rows_to_scan = grid[:marker_row]\n    first_color = -1\n    second_color = -1\n    \n    for i in range(len(rows_to_scan)):\n        for j in range(len(rows_to_scan[0])):\n            if first_color == -1 :\n                first_color = rows_to_scan[i][j]\n            else:\n                if (rows_to_scan[i][j] != first_color):\n                    if(second_color == -1 or rows_to_scan[i][j] < second_color):\n                        second_color = rows_to_scan[i][j]\n                        \n    \n    if (second_color == -1):\n        return len(rows_to_scan[0]) if len(rows_to_scan) > 0 else 0\n    \n    \n    for i in range(len(rows_to_scan)):\n        for j in range(len(rows_to_scan[0])):\n            if rows_to_scan[i][j] == second_color:\n                return j\n    \n    return len(grid[0]) if len(grid) > 0 else 0\n\ndef transform(input_grid):\n    # Convert input grid to a NumPy array for easier manipulation\n    input_grid = np.array(input_grid)\n\n    # Find the marker line (topmost horizontal line with uniform color)\n    marker_row = find_marker_line(input_grid)\n\n    # Determine output height (number of rows above the marker line)\n    output_height = marker_row if marker_row != -1 else input_grid.shape[0]\n\n    # Determine the output width.\n    output_width = find_first_occurence_column(input_grid, marker_row) + 1\n\n    # Extract the sub-grid\n    output_grid = input_grid[:output_height, :output_width]\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2032,
    "candidates_token_count": 677,
    "total_token_count": 2709,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.078326
}