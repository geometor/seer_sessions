{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Find Azure Components:** Identify all contiguous groups (components) of azure (8) colored pixels in the input grid.  Pixels are considered adjacent if they share a side (horizontally or vertically, but not diagonally).\n\n2.  **Classify Component Shape:** For each identified azure component, determine its shape classification:\n    *   **Horizontal:** If the component extends more in the horizontal direction than the vertical.\n    *   **Vertical:** If the component extends more in the vertical direction than the horizontal.\n    *   **Single:** If the component consists of only one pixel.\n\n3.  **Add Blue Pixels based on shape:** For each azure pixel in each component, add a blue pixel as follows:\n    *   **Horizontal Component:** Add a blue (1) pixel to the immediate right of each azure pixel *unless* there is another azure pixel to its immediate right, *or* the pixel is on the right edge of the grid.\n    *   **Vertical Component:** Add a blue (1) pixel immediately below each azure pixel *unless* there is another azure pixel immediately below it, *or* the pixel is on the bottom edge of the grid.\n    *   **Single Pixel Component:** Add a blue (1) pixel to the immediate right of the azure pixel *unless* the pixel is on the right edge of the grid.\n\n4.  **Copy Background:** Copy all pixels that are *not* azure (8) from the input grid to the output grid, maintaining their original positions. The azure components are preserved.\n\"\"\"\n\nimport numpy as np\n\ndef find_azure_components(grid):\n    \"\"\"Finds contiguous components of azure pixels (horizontally or vertically).\"\"\"\n    rows, cols = grid.shape\n    components = []\n    visited = set()\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def dfs(r, c, current_component):\n        if (r, c) in visited or not is_valid(r, c) or grid[r, c] != 8:\n            return\n\n        visited.add((r, c))\n        current_component.append((r, c))\n\n        # Explore adjacent cells\n        dfs(r + 1, c, current_component)  # Down\n        dfs(r - 1, c, current_component)  # Up\n        dfs(r, c + 1, current_component)  # Right\n        dfs(r, c - 1, current_component)  # Left\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r,c] == 8 and (r,c) not in visited:\n                current_component = []\n                dfs(r,c,current_component)\n                if len(current_component) > 0:\n                    components.append(current_component)\n    return components\n\ndef get_component_orientation(component):\n    \"\"\"Determines if a component is horizontal, vertical, or single.\"\"\"\n    if len(component) == 1:\n        return \"single\"\n\n    rows = [r for r, c in component]\n    cols = [c for r, c in component]\n    row_range = max(rows) - min(rows)\n    col_range = max(cols) - min(cols)\n\n    if col_range > row_range:\n        return \"horizontal\"\n    else:\n        return \"vertical\"  # Treat equal range as vertical\n\ndef transform(input_grid):\n    # initialize output_grid as a copy of input_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Find azure components\n    components = find_azure_components(input_grid)\n\n    # Add blue pixel based on component orientation and neighbor check\n    for component in components:\n        orientation = get_component_orientation(component)\n\n        for r, c in component:\n            if orientation == \"horizontal\":\n                if c + 1 < cols and input_grid[r, c + 1] != 8:  # Check right neighbor and bounds\n                    output_grid[r, c + 1] = 1\n            elif orientation == \"vertical\":\n                if r + 1 < rows and input_grid[r + 1, c] != 8:  # Check bottom neighbor and bounds\n                    output_grid[r + 1, c] = 1\n            elif orientation == \"single\":\n                if c + 1 < cols: # Check bounds\n                    output_grid[r, c + 1] = 1\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5387,
    "candidates_token_count": 1043,
    "total_token_count": 6430,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 13.073539
}