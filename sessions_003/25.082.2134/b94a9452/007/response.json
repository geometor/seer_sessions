{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Isolate Non-Zero Region:** Identify the smallest rectangular sub-grid within the input grid that contains all non-zero pixels. This is the \"isolated region\".\n2.  **Color Swapping:** Within the isolated region, apply the following color swaps:\n    *   Swap color 2 with color 4.\n    *   Swap color 1 with color 3.\n    *   Swap color 4 with color 6.\n3.  **Rotate:** Rotate the transformed isolated region 90 degrees clockwise. The resulting grid is the final output.\n\"\"\"\n\nimport numpy as np\n\ndef _find_non_zero_region(grid):\n    rows = np.any(grid != 0, axis=1)\n    cols = np.any(grid != 0, axis=0)\n    min_row, max_row = np.where(rows)[0][[0, -1]]\n    min_col, max_col = np.where(cols)[0][[0, -1]]\n    return min_row, max_row, min_col, max_col\n\ndef _swap_colors(grid):\n    # Create a copy to avoid modifying the original grid\n    transformed_grid = grid.copy()\n    # Apply color swapping rules\n    transformed_grid[grid == 2] = -1  # Temporary value for 2\n    transformed_grid[grid == 4] = -2  # Temporary value for 4\n    transformed_grid[grid == 1] = -3\n    transformed_grid[grid == 3] = -4\n    transformed_grid[grid == 6] = -5\n\n    transformed_grid[transformed_grid == -1] = 4\n    transformed_grid[transformed_grid == -2] = 6 #we swap 4 again\n    transformed_grid[transformed_grid == -5] = 2 #with 6.\n    transformed_grid[transformed_grid == -3] = 3\n    transformed_grid[transformed_grid == -4] = 1\n\n\n    return transformed_grid\n\ndef transform(input_grid):\n    # Convert input to numpy array\n    input_grid = np.array(input_grid)\n\n    # 1. Isolate Non-Zero Region\n    min_row, max_row, min_col, max_col = _find_non_zero_region(input_grid)\n    isolated_region = input_grid[min_row:max_row+1, min_col:max_col+1]\n\n    # 2. Color Swapping\n    transformed_region = _swap_colors(isolated_region)\n\n    # 3. Rotate\n    rotated_region = np.rot90(transformed_region, k=-1)\n\n    return rotated_region.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 10323,
    "candidates_token_count": 629,
    "total_token_count": 10952,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.330263
}