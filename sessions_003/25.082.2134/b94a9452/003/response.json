{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Isolate Non-Zero Region:** Find the smallest rectangular region within the input grid that contains all the non-zero pixels. This region becomes the object of our focus.\n\n2.  **Identify Key Colors:**\n    *   Find the color value of the center pixel within the isolated region.\n    *   Find the color value of a pixel directly adjacent to the isolated region in the original grid. If the isolated region extends to the edge of the input_grid so that there is no adjacent pixel, the surrounding color is considered to be 0 (black).\n\n3.  **Swap Colors:** Within the isolated region, swap all occurrences of the center pixel's color with the surrounding pixel's color.\n\n4.  **Rotate:** Rotate the isolated region clockwise by 90 degrees. This rotated region is the output.\n\"\"\"\n\nimport numpy as np\n\ndef _find_non_zero_region(grid):\n    rows = np.any(grid != 0, axis=1)\n    cols = np.any(grid != 0, axis=0)\n    min_row, max_row = np.where(rows)[0][[0, -1]]\n    min_col, max_col = np.where(cols)[0][[0, -1]]\n    return min_row, max_row, min_col, max_col\n\ndef _get_surrounding_color(grid, min_row, max_row, min_col, max_col):\n    if min_row > 0:\n        return grid[min_row - 1, min_col]\n    elif max_row < grid.shape[0] - 1:\n        return grid[max_row + 1, min_col]\n    elif min_col > 0:\n        return grid[min_row, min_col -1]\n    elif max_col < grid.shape[1] -1:\n        return grid[min_row, max_col + 1]\n    return 0\n\ndef _swap_colors(grid, center_color, surround_color):\n    # Create a copy to avoid modifying the original grid.\n    swapped_grid = grid.copy()\n    # only swap the center color with surround color\n    swapped_grid[grid == center_color] = surround_color\n    return swapped_grid\n\ndef transform(input_grid):\n    # Convert input to numpy array\n    input_grid = np.array(input_grid)\n\n    # 1. Isolate Non-Zero Region\n    min_row, max_row, min_col, max_col = _find_non_zero_region(input_grid)\n    isolated_region = input_grid[min_row:max_row+1, min_col:max_col+1]\n\n    # 2. Identify Key Colors\n    center_row = (isolated_region.shape[0] - 1) // 2\n    center_col = (isolated_region.shape[1] - 1) // 2\n    center_color = isolated_region[center_row, center_col]\n    surround_color = _get_surrounding_color(input_grid, min_row, max_row, min_col, max_col)\n\n    # 3. Swap Colors\n    swapped_region = _swap_colors(isolated_region, center_color, surround_color)\n\n    # 4. Rotate\n    rotated_region = np.rot90(swapped_region, k=-1)\n\n    return rotated_region.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6545,
    "candidates_token_count": 802,
    "total_token_count": 7347,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.141071
}