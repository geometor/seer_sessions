{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms a vertical column of a specific color into a horizontal line of the same color,\nwhile preserving a pre-existing horizontal line of the same color. The new horizontal\nline's row is determined by the original horizontal line's row and the vertical line's column.\nOther cells are set to 0.\n\"\"\"\n\nimport numpy as np\n\ndef find_vertical_line(grid):\n    \"\"\"Finds the column index and color of the vertical line segment.\"\"\"\n    height, width = grid.shape\n    for j in range(width):\n        for i in range(height):\n            color = grid[i, j]\n            if color != 0:\n                # Check if it's a vertical line of only one color, and the rest are 0s\n                is_vertical_line = True\n                first_color_row = i # store the row of first occurrance\n                for k in range(height):\n                    if k < first_color_row and grid[k,j] != 0:\n                        is_vertical_line = False\n                        break\n                    elif k >= first_color_row and grid[k,j] !=0 and grid[k,j] != color:\n                        is_vertical_line = False\n                        break\n\n                if is_vertical_line:\n                    return j, color\n    return None, None\n\ndef find_horizontal_line(grid, color):\n    \"\"\"Finds the row index of the horizontal line of the given color.\"\"\"\n    height, width = grid.shape\n    for i in range(height):\n        is_horizontal_line = True\n        for j in range(width):\n            if grid[i, j] != color:\n                is_horizontal_line = False\n                break\n        if is_horizontal_line:\n            return i\n    return None\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the rule.\"\"\"\n    input_grid = np.array(input_grid)  # Ensure it's a NumPy array\n    height, width = input_grid.shape\n    output_grid = np.zeros_like(input_grid)\n\n    # Find the vertical line's column and color\n    col_index, target_color = find_vertical_line(input_grid)\n    if target_color is None:\n        return input_grid # no vertical line\n\n    # Find the row of the horizontal line of the target color\n    row_index_input = find_horizontal_line(input_grid, target_color)\n    if row_index_input is None:\n        return input_grid # no horizontal line\n\n    # Calculate offset\n    offset = col_index\n\n    # Output Horizontal Line Row\n    row_index_output = row_index_input + offset\n\n    # make sure output row index is within bounds\n    if row_index_output >= height:\n        return input_grid\n\n    # Construct the horizontal segment in the output grid\n    for j in range(col_index + 1):\n        output_grid[row_index_output, j] = target_color\n\n    # Copy the horizontal line from the input to the output\n    for j in range(width):\n        output_grid[row_index_input, j] = target_color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5627,
    "candidates_token_count": 739,
    "total_token_count": 6366,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 12.428697
}