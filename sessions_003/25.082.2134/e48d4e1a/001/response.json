{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms a vertical column of a specific color into a horizontal line of the same color,\nwhile preserving a pre-existing horizontal line of the same color. Other cells are set to 0.\n\"\"\"\n\nimport numpy as np\n\ndef find_vertical_line(grid):\n    \"\"\"Finds the column index and color of the vertical line segment.\"\"\"\n    height, width = grid.shape\n    for j in range(width):\n        for i in range(height):\n            color = grid[i, j]\n            if color != 0:\n                # Check if it's a vertical line\n                is_vertical_line = True\n                for k in range(height):\n                    if k != i and grid[k,j] != 0 and grid[k,j] != color:\n                        is_vertical_line = False\n                        break\n                    elif k != i and grid[k,j] == 0:\n                        continue\n                    elif k != i and grid[k,j] == color:\n                        continue\n\n\n                if is_vertical_line:\n                    return j, color\n    return None, None\n\ndef find_horizontal_line(grid, color):\n    \"\"\"Finds the row index of the horizontal line of the given color.\"\"\"\n    height, width = grid.shape\n    for i in range(height):\n        is_horizontal_line = True\n        for j in range(width):\n            if grid[i, j] != color and grid[i,j] !=0:\n                is_horizontal_line = False\n                break\n            elif grid[i,j] == color:\n                continue\n        if is_horizontal_line:\n            return i\n    return None\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the rule.\"\"\"\n    input_grid = np.array(input_grid)  # Ensure it's a NumPy array\n    height, width = input_grid.shape\n    output_grid = np.zeros_like(input_grid)\n\n    # Find the vertical line's column and color\n    col_index, target_color = find_vertical_line(input_grid)\n    if target_color is None: # No transformation needed\n        return input_grid\n    # Find the row of the horizontal line of the target color\n    row_index_input = find_horizontal_line(input_grid, target_color)\n    if row_index_input is None:\n        return input_grid # no target color horizontal line\n    #row_index_output = find_horizontal_line(output_grid, target_color)\n\n\n    # Construct the horizontal segment in the output grid\n    for j in range(col_index + 1):\n        output_grid[row_index_input-1, j] = target_color # -1 here, observing outputs\n\n    # Copy the horizontal line from the input to the output\n    if row_index_input is not None:\n\n        for j in range(width):\n            if input_grid[row_index_input,j] == target_color:\n                output_grid[row_index_input, j] = target_color\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3400,
    "candidates_token_count": 714,
    "total_token_count": 4114,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 14.925967
}