{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms a vertical line segment into a horizontal line segment of the same color.\nThe new horizontal line's row is determined by the topmost point of the vertical segment.\nThe horizontal line spans from column 0 to the original column of the vertical segment.\nThe vertical segment is move to the x position of the segment top.\nOther cells are set to 0.\n\"\"\"\n\nimport numpy as np\n\ndef find_vertical_line_segment(grid):\n    \"\"\"Finds the single vertical line segment in the grid.\"\"\"\n    height, width = grid.shape\n    segments = []\n    for j in range(width):\n        start = -1\n        color = 0\n        for i in range(height):\n            if grid[i, j] != 0:\n                if start == -1:\n                    start = i\n                    color = grid[i,j]\n                elif grid[i,j] != color:\n                    if i - start > 1:\n                        segments.append((j, start, i -1, color))\n                    start = i\n                    color = grid[i,j]\n            elif start != -1:\n                if i - start > 1:\n                    segments.append((j, start, i - 1, color))\n                start = -1\n                color = 0\n        if start != -1 and height - start > 1:\n            segments.append((j, start, height-1, color))\n    # return only the long ones\n    long_segments = [seg for seg in segments if seg[2] - seg[1] > 0 ]\n    if len(long_segments) == 1:\n        return long_segments[0]\n    else:\n        return None, None, None, None\n\ndef transform(input_grid):\n    # initialize output_grid\n    input_grid = np.array(input_grid)\n    height, width = input_grid.shape\n    output_grid = np.zeros_like(input_grid)\n\n    # Find the vertical line segment's column, start row, end row, and color\n    col_index, start_row, end_row, target_color = find_vertical_line_segment(input_grid)\n\n    if target_color is None:\n        return input_grid # no vertical line segment found\n\n    # Create new horizontal line segment.\n    new_row_index = start_row\n    for j in range(col_index + 1):\n        output_grid[new_row_index, j] = target_color\n\n    # Move the identified vertical segment\n    segment_length = end_row - start_row + 1\n    new_col = start_row\n    if new_col + segment_length <= height:\n        for i in range(segment_length):\n            output_grid[i,new_col] = target_color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8799,
    "candidates_token_count": 655,
    "total_token_count": 9454,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 12.790847
}