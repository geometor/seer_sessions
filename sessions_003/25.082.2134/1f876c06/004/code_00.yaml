objects:
  - name: pixel
    properties:
      color: integer (0-9)
      position: (row, column)
      diagonal_sum: integer (row + column)

actions:
  - name: move_pixel
    description: Moves a pixel from its input position to a new output position.
    constraints:
      - The diagonal_sum of the new position is equal to the diagonal_sum of the original position.
      - Pixels with the same diagonal_sum are arranged sequentially along the diagonal.
      - The order of placement for pixels with same 'diagonal_sum' appears to be based on the original row order, and then column.

observations:
 - Pixels in the input grid are re-arranged along diagonals in the output grid.
 - The defining characteristic of each diagonal is that the sum of row and column indices (i+j) is constant.
 - Example 1:
    - Input positions and their (i+j) values are: (0,2):2, (0,5):5, (2,0):2, (4,9):13, (5,3):8, (9,7):16
    - Output positions have the (i,j) sums, in order of appearance in output : 2, 5, 2, 7, 2, 9, 11, 13, 8, 10, 12, 14, 16.
    - note there are multiple positions with value: 2 and 9, 8 and 16
 - Example 2:
    - Input positions and their (i+j) values are: (0,0):0, (0,7):7, (2,6):8, (2,9):11, (3,3):6, (5,5):10, (7,1):8, (9,9):18
    - Output positions have the (i,j) sums, in order of appearance in output: 0, 7, 2, 9, 4, 8, 11, 6, 8, 8, 8, 10, 8, 12, 8, 14, 16, 18.
    - note that diagonal sum 8 appears multiple times.
 - Example 3:
    - Input positions and their (i+j) values are: (0,3):3, (0,5):5, (2,2):4, (3,0):3, (4,9):13, (5,4):9, (6,6):12, (9,0):9
    - Output positions have the (i,j) sums, in order of appearance in output: 3, 5, 3, 7, 3, 4, 9, 3, 6, 11, 8, 13, 9, 10, 9, 12, 9, 9, 9
    - Multiple instances of diagonal sum 3 and 9.
 - Ordering: The order of output diagonals iterates through all possible diagonals within the grid bounds, incrementing the sum of the row and column. Within each diagonal, pixels are filled in sequentially based on their order within the group sharing a 'diagonal_sum'.
