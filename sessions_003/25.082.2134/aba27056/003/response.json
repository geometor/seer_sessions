{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nFill enclosed regions of '0' (white) pixels with '4' (yellow), leaving other regions unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, r, c):\n    \"\"\"Gets the valid neighbors of a cell (up, down, left, right).\"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    if r > 0:\n        neighbors.append((r - 1, c))\n    if r < rows - 1:\n        neighbors.append((r + 1, c))\n    if c > 0:\n        neighbors.append((r, c - 1))\n    if c < cols - 1:\n        neighbors.append((r, c + 1))\n    return neighbors\n\ndef is_enclosed(grid, start_r, start_c):\n    \"\"\"Checks if a region of '0's is fully enclosed by non-'0's.\"\"\"\n    rows, cols = grid.shape\n    visited = set()\n    to_visit = [(start_r, start_c)]\n    on_boundary = False\n\n    while to_visit:\n        r, c = to_visit.pop()\n\n        if (r, c) in visited:\n            continue\n        visited.add((r, c))\n\n        if grid[r, c] != 0:\n            continue\n        \n        # Check if the current cell is on the boundary\n        if r == 0 or r == rows - 1 or c == 0 or c == cols - 1:\n            on_boundary = True\n\n        neighbors = get_neighbors(grid, r, c)\n        for nr, nc in neighbors:\n            if (nr, nc) not in visited:\n                to_visit.append((nr, nc))\n\n    return not on_boundary, visited\n\n\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the rule.\"\"\"\n    input_grid = np.array(input_grid)  # Convert to NumPy array\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Iterate and find the enclosed regions\n    for r in range(rows):\n        for c in range(cols):\n            if input_grid[r, c] == 0:\n                enclosed, visited = is_enclosed(input_grid, r, c)\n                if enclosed:\n                    for vr, vc in visited:\n                        output_grid[vr, vc] = 4\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 268,
            "end_index": 526,
            "uri": "https://github.com/Anuj-cs20/IIITDMK_CSE_Coursework",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3960,
    "candidates_token_count": 577,
    "total_token_count": 4537,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.831874
}