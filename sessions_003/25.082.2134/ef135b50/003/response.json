{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify '0' (White) Pixels:** Iterate through each cell of the input grid.\n\n2.  **Depth-First Search (DFS) for Enclosure:** For each '0' pixel, initiate a Depth-First Search (DFS) to determine if it's part of an enclosed region.\n    *   A region is considered enclosed if *all* paths from the starting '0' pixel to the edge of the grid encounter a '2' (red) pixel.\n    *   During the DFS, keep track of visited cells to avoid infinite loops.\n    *   DFS should explore all 8 neighboring cells (including diagonals).\n    *   If the DFS reaches the edge of the grid without encountering only '2' pixels, the starting '0' pixel is *not* enclosed, so cease that DFS path.\n3.  **Identify all Enclosed regions:** Do not reset the visited list when checking different white regions as interconnected white cells are part of the same region, but not necessarily connected\n4.  **Fill Enclosed Regions:** If the DFS confirms that a '0' pixel is part of an enclosed region, change its color, and the color of all '0' pixels connected to it, to '9' (maroon) in the output grid.\n5.  **Preserve Other Pixels:** All pixels that are not '0' (i.e., '2' pixels) in the input grid should remain unchanged in the output grid.\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, row, col):\n    \"\"\"\n    Gets the coordinates of all 8 neighbors (cardinal and diagonal) of a cell.\n    \"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    for i in range(max(0, row - 1), min(rows, row + 2)):\n        for j in range(max(0, col - 1), min(cols, col + 2)):\n            if (i, j) != (row, col):\n                neighbors.append((i, j))\n    return neighbors\n\ndef is_enclosed(grid, row, col, visited):\n    \"\"\"\n    Checks if a '0' pixel is part of an enclosed region using Depth-First Search.\n    Corrected to continue searching even after hitting a '2'.\n    \"\"\"\n    rows, cols = grid.shape\n\n    # Base cases:\n    if (row, col) in visited:  # Already checked this cell\n        return True  # Treat as enclosed to avoid cycles\n    if row == 0 or row == rows - 1 or col == 0 or col == cols - 1:\n        # Reached an edge\n        if grid[row,col] == 0:\n            return False  # Not enclosed if on the edge and white\n\n    visited.add((row, col))\n    neighbors = get_neighbors(grid, row, col)\n    all_neighbors_enclosed = True\n\n    for r, c in neighbors:\n        if grid[r,c] == 0: # only recurse for white neighbors\n             if not is_enclosed(grid, r, c, visited):\n                all_neighbors_enclosed = False\n                # No need for short circuit.  We need to check ALL paths.\n\n    return all_neighbors_enclosed\n\ndef fill_enclosed_region(grid, row, col, visited, fill_value):\n    \"\"\"\n    Fills a connected region of '0's with the fill_value, starting from (row, col).\n    Uses DFS.\n    \"\"\"\n    rows, cols = grid.shape\n\n    if (row,col) in visited or grid[row,col] != 0:\n        return\n    \n    visited.add((row,col))\n    grid[row,col] = fill_value\n    neighbors = get_neighbors(grid,row,col)\n\n    for r, c in neighbors:\n        fill_enclosed_region(grid,r,c,visited,fill_value)\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the enclosure rule.\n    \"\"\"\n    # Initialize output_grid as a copy of input_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Keep track of all visited cells across all DFS calls\n    all_visited = set()\n    enclosed_regions = []\n\n    # Iterate through the grid to find '0' pixels and check for enclosure\n    for i in range(rows):\n        for j in range(cols):\n            if input_grid[i, j] == 0 and (i,j) not in all_visited:\n                visited = set()\n                if is_enclosed(input_grid, i, j, visited):\n                    enclosed_regions.append(visited) # capture set of enclosed pixels\n                all_visited.update(visited)  # Add to the global visited set\n\n\n    # fill in the enclosed pixels, use helper function to fill connected regions\n    for region in enclosed_regions:\n        # get a start coordinate from the set\n        r, c = next(iter(region))\n        fill_visited = set()\n        fill_enclosed_region(output_grid, r, c, fill_visited, 9)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5952,
    "candidates_token_count": 1190,
    "total_token_count": 7142,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 18.120007
}