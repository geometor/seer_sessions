{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Copy Input:** Create a copy of the input grid. This copy will be modified and returned as the output grid.\n\n2.  **Iterate:** Examine each pixel in the input grid.\n\n3.  **Identify White Regions:** If a pixel is white (color 0) and has not been visited yet:\n\n    *   Perform a Breadth-First Search (BFS) or Depth-First Search (DFS) to find all connected white pixels, forming a 'white region'.\n    *   **Enclosure Check:** For *every* pixel in this white region:\n        *   Check *all* possible paths from that pixel to the edge of the grid. A path consists of steps to adjacent or diagonally adjacent cells.\n        *   If *any* path reaches the edge of the grid *without* encountering a red (color 2) pixel, the entire region is *not* enclosed. Stop checking paths for this region.\n        *   If *all* paths from *all* pixels in the region encounter a red pixel *before* reaching the edge, the region is considered enclosed.\n\n4.  **Fill Enclosed Regions:** For each white region identified as *enclosed*:\n\n    *   Change the color of *all* pixels in that region to maroon (color 9) in the output grid.\n\n5.  **Preserve Other Colors:** Any pixel in the input grid that is *not* white (0) should remain unchanged in the output grid.\n\n6.  **Return:** Return the modified grid (the output grid).\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef get_neighbors(grid, row, col):\n    \"\"\"Gets the coordinates of all 8 neighbors (cardinal and diagonal) of a cell.\"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    for i in range(max(0, row - 1), min(rows, row + 2)):\n        for j in range(max(0, col - 1), min(cols, col + 2)):\n            if (i, j) != (row, col):\n                neighbors.append((i, j))\n    return neighbors\n\ndef get_white_region(grid, start_row, start_col, visited):\n    \"\"\"\n    Finds all connected white pixels using BFS.\n    Returns the region as a set of (row, col) tuples.\n    \"\"\"\n    region = set()\n    queue = deque([(start_row, start_col)])\n    visited.add((start_row, start_col))\n\n    while queue:\n        row, col = queue.popleft()\n        region.add((row, col))\n\n        for r, c in get_neighbors(grid, row, col):\n            if grid[r, c] == 0 and (r, c) not in visited:\n                visited.add((r, c))\n                queue.append((r, c))\n    return region\n\ndef is_enclosed(grid, region):\n    \"\"\"\n    Checks if a region is enclosed by red (2) pixels.\n    \"\"\"\n    rows, cols = grid.shape\n\n    for row, col in region:\n        # Check all paths from this pixel to the edge\n        queue = deque([(row, col)])\n        visited_path = set()\n\n        while queue:\n            curr_row, curr_col = queue.popleft()\n\n            if (curr_row, curr_col) in visited_path:\n                continue  # Avoid cycles\n            visited_path.add((curr_row, curr_col))\n            \n            if curr_row == 0 or curr_row == rows - 1 or curr_col == 0 or curr_col == cols - 1:\n                 if grid[curr_row,curr_col] != 2:\n                    return False # Reached the edge without encountering red\n\n            neighbors = get_neighbors(grid, curr_row, curr_col)\n            for nr, nc in neighbors:\n              if grid[nr,nc] != 2: # only expand if not red.\n                if (nr,nc) not in visited_path: # Avoid infinite loops and check all paths.\n                    queue.append((nr, nc))\n\n\n    return True  # All paths from all pixels in region hit red before edge\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the enclosure rule.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n    visited = set()\n\n    # Iterate through the grid\n    for i in range(rows):\n        for j in range(cols):\n            # Check for '0' pixels and enclosure\n            if input_grid[i, j] == 0 and (i, j) not in visited:\n                region = get_white_region(input_grid, i, j, visited)\n                if is_enclosed(input_grid, region):\n                    # Fill enclosed region\n                    for r, c in region:\n                        output_grid[r, c] = 9\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5608,
    "candidates_token_count": 1137,
    "total_token_count": 6745,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 14.436466
}