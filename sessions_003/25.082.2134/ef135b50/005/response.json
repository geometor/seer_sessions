{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Initialization:** Create a copy of the input grid as the `output_grid`.\n\n2.  **Iterate:** Loop through each pixel of the `input_grid`.\n\n3.  **Identify White Pixels:** If a pixel is white (color '0') and hasn't been visited yet:\n    *   Perform a Depth-First Search (DFS) to determine if the white pixel is part of an *enclosed region*.\n    *   An *enclosed region* is defined as a set of connected white pixels where *every* path from *any* white pixel in the region to the edge of the grid *must* encounter a red (color '2') pixel.  Diagonal connections are considered. Reaching the edge on a 0 means that specific path is not enclosed.\n    * During the DFS, keep track of visited cells to prevent infinite loops.\n    * Add all visited cells during this DFS to a global visited set.\n    * If a region is enclosed, add the set of coordinates to a collection of enclosed regions.\n\n4.  **Fill Enclosed Regions:** For *each* identified enclosed region:\n    * Pick any pixel in that region\n    * perform Depth First Search to find all connected pixels of color '0'.\n    * Change *all* connected '0' pixels in that enclosed region to maroon (color '9') in the `output_grid`.\n\n5.  **Preserve Other Colors:** Pixels that are not '0' in the input grid remain unchanged in the `output_grid`.\n\n6.  **Return:** Return the modified `output_grid`.\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, row, col):\n    \"\"\"\n    Gets the coordinates of all 8 neighbors (cardinal and diagonal) of a cell.\n    \"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    for i in range(max(0, row - 1), min(rows, row + 2)):\n        for j in range(max(0, col - 1), min(cols, col + 2)):\n            if (i, j) != (row, col):\n                neighbors.append((i, j))\n    return neighbors\n\ndef is_enclosed_recursive(grid, row, col, visited, path_visited):\n    \"\"\"\n    Recursively checks if a path is enclosed, handling cycles.\n    \"\"\"\n    rows, cols = grid.shape\n\n    if (row, col) in path_visited:\n        return True  # Cycle detected, considered enclosed for this path\n\n    if row == 0 or row == rows - 1 or col == 0 or col == cols - 1:\n        return grid[row, col] != 0  # True if edge and not white, else False\n\n    path_visited.add((row, col))\n    neighbors = get_neighbors(grid, row, col)\n    \n    for r, c in neighbors:\n        if grid[r,c] == 0:\n            if (r,c) not in visited:\n                if not is_enclosed_recursive(grid, r, c, visited, path_visited.copy()):\n                    return False  # If any path is not enclosed, the region is not enclosed.\n        \n    visited.add((row,col)) # add after checking all neighbors\n    return True # all paths are enclosed\n\ndef is_enclosed(grid, row, col, all_visited):\n    \"\"\"\n    Checks if a '0' pixel is part of an enclosed region.\n    Uses a corrected recursive DFS approach.\n    \"\"\"\n    rows, cols = grid.shape\n    \n    if (row,col) in all_visited:\n        return True\n    \n    visited = set()\n    path_visited = set()\n\n    result = is_enclosed_recursive(grid,row,col,visited, path_visited)\n    if result:\n      all_visited.update(visited)\n    return result\n\n\ndef fill_enclosed_region(grid, row, col, fill_value):\n    \"\"\"\n    Fills a connected region of '0's with the fill_value, starting from (row, col).\n    Uses DFS.\n    \"\"\"\n    if row < 0 or row >= grid.shape[0] or col < 0 or col >= grid.shape[1] or grid[row, col] != 0:\n        return\n\n    grid[row, col] = fill_value\n    neighbors = get_neighbors(grid, row, col)\n    for r, c in neighbors:\n        fill_enclosed_region(grid, r, c, fill_value)\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the enclosure rule.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n    all_visited = set()\n    enclosed_regions = []\n\n    # Iterate through the grid\n    for i in range(rows):\n        for j in range(cols):\n            # Check for '0' pixels and enclosure\n            if input_grid[i, j] == 0 and (i,j) not in all_visited:\n                if is_enclosed(input_grid, i, j, all_visited):\n                    # If enclosed, add to enclosed regions list\n                    enclosed_regions.append((i,j))\n\n\n    # Fill enclosed regions\n    for r, c in enclosed_regions:\n        fill_enclosed_region(output_grid, r, c, 9)\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 9817,
    "candidates_token_count": 1250,
    "total_token_count": 11067,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 15.652973
}