{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Active Rows:** Examine the input grid to identify rows that contain at least one non-zero pixel. These are the \"active rows.\"\n\n2.  **Select Rows by Leftmost Sequence:**\n     *   Iterate through the active rows.\n     * For each row, find the index of the *leftmost* non-zero pixel.\n     *   Extract the sequence starting at that index, including up to the first three non-zero pixels.\n     *   select up to 3 rows that have unique leftmost non-zero sequences.\n\n3.  **Construct Output Grid:**\n    *   Create a new output grid. The number of rows in the output grid will be the number of selected active rows (up to 3).\n    *   Populate each row of the output grid with the extracted sequence from the corresponding selected row. If a sequence has fewer than three pixels, the remaining cells in the output row should remain 0.\n    *   The output grid will have at most 3 rows, if no active rows or no unique rows, the grid will be empty.\n\"\"\"\n\nimport numpy as np\n\ndef get_active_rows(grid):\n    # returns the indices of rows containing non-zero elements\n    rows = []\n    for i, row in enumerate(grid):\n      if any(val != 0 for val in row):\n        rows.append(i)\n    return rows\n\ndef extract_leftmost_sequence(row):\n    # extracts up to the first three non-zero pixels from the row, starting from the leftmost non-zero pixel\n    sequence = []\n    non_zero_count = 0\n    start_index = -1\n\n    # Find the index of the leftmost non-zero pixel\n    for i, pixel in enumerate(row):\n        if pixel != 0:\n            start_index = i\n            break\n\n    # If no non-zero pixel is found, return an empty sequence\n    if start_index == -1:\n        return sequence\n\n    # Extract the sequence\n    for i in range(start_index, len(row)):\n        if row[i] != 0:\n            sequence.append(row[i])\n            non_zero_count += 1\n            if non_zero_count == 3:\n                break\n    return sequence\n\ndef select_unique_rows(input_grid, active_rows):\n    # select first three unique rows from the list of active rows\n    selected_rows = []\n    selected_row_indices = []\n    \n    for row_index in active_rows:\n        row = input_grid[row_index]\n        sequence = extract_leftmost_sequence(row) #extract sequence for comparing rows\n        if sequence not in selected_rows:\n            selected_rows.append(sequence)\n            selected_row_indices.append(row_index)\n            if len(selected_rows) == 3:\n                break # Stop after adding 3 rows\n                \n    return selected_row_indices\n\ndef transform(input_grid):\n    # convert to numpy array\n    input_grid = np.array(input_grid)\n\n    # Identify rows with Non-Zero Pixels\n    active_rows = get_active_rows(input_grid)\n\n    # Select first three unique sequences\n    selected_row_indices = select_unique_rows(input_grid, active_rows)\n    \n    # Extract sequences, this time from the original grid using indices\n    extracted_sequences = []\n    for row_index in selected_row_indices:\n       extracted_sequences.append(extract_leftmost_sequence(input_grid[row_index]))\n    \n    # Determine output grid dimensions\n    max_len = 0\n    if (len(extracted_sequences) > 0):\n        max_len = max(len(seq) for seq in extracted_sequences)\n    else:\n       return np.array([]) # if no active rows, return an empty numpy array\n\n    num_rows = len(extracted_sequences)\n    output_grid = np.zeros((num_rows, max_len), dtype=int)\n\n    # Construct output grid\n    for i, seq in enumerate(extracted_sequences):\n        output_grid[i, :len(seq)] = seq\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4477,
    "candidates_token_count": 961,
    "total_token_count": 5438,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.658951
}