{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation extracts a sequence of non-zero pixels from each row of the input grid, starting from the leftmost non-zero pixel and continuing until a zero pixel or the end of the row is reached. The output grid's dimensions are determined by the number of active rows and the length of the longest extracted sequence. Shorter rows are padded with zeros.\n\"\"\"\n\nimport numpy as np\n\ndef get_active_rows(grid):\n    # returns the indices of rows containing non-zero elements\n    rows = []\n    for i, row in enumerate(grid):\n      if any(val != 0 for val in row):\n        rows.append(i)\n    return rows\n\ndef extract_leftmost_sequence(row):\n    # extracts the sequence of non-zero pixels starting from the leftmost non-zero pixel\n    sequence = []\n    start_index = -1\n\n    # Find the index of the leftmost non-zero pixel\n    for i, pixel in enumerate(row):\n        if pixel != 0:\n            start_index = i\n            break\n\n    # If no non-zero pixel is found, return an empty sequence\n    if start_index == -1:\n        return sequence\n\n    # Extract the sequence\n    for i in range(start_index, len(row)):\n        if row[i] != 0:\n            sequence.append(row[i])\n        else:\n            break  # Stop when a zero pixel is encountered\n\n    return sequence\n\ndef transform(input_grid):\n    # convert to numpy array\n    input_grid = np.array(input_grid)\n\n    # Identify rows with Non-Zero Pixels\n    active_rows = get_active_rows(input_grid)\n\n    # Extract sequences\n    extracted_sequences = []\n    for row_index in active_rows:\n        row = input_grid[row_index]\n        sequence = extract_leftmost_sequence(row)\n        extracted_sequences.append(sequence)\n\n    # Determine output grid dimensions\n    max_len = 0\n    if (len(extracted_sequences) > 0):\n        max_len = max(len(seq) for seq in extracted_sequences)\n    else:\n       return np.array([]) # if no active rows, return an empty numpy array\n      \n    num_rows = len(extracted_sequences)\n    output_grid = np.zeros((num_rows, max_len), dtype=int)\n\n    # Construct output grid, padding shorter sequences with zeros\n    for i, seq in enumerate(extracted_sequences):\n        output_grid[i, :len(seq)] = seq\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4564,
    "candidates_token_count": 594,
    "total_token_count": 5158,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.314718
}