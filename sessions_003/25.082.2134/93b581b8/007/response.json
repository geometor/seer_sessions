{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation identifies rows with non-zero values in the central two columns as \"source rows\" and rows with all zeros in the central two columns as \"target rows\". Target rows are transformed by mirroring a four-element segment around the center of the row. If source rows exist, the target rows are replaced by a mirrored version of themselves. If no source rows exist, each target row is transformed using the mirroring rule applied to itself. Source rows are preserved.\n\"\"\"\n\nimport numpy as np\n\ndef get_source_and_target_rows(grid):\n    \"\"\"\n    Identifies source and target rows based on the central two columns.\n    Returns lists of row indices.\n    \"\"\"\n    rows, cols = grid.shape\n    center_col1 = cols // 2 - 1\n    center_col2 = cols // 2\n    source_rows = []\n    target_rows = []\n    for i in range(rows):\n        if grid[i, center_col1] != 0 or grid[i, center_col2] != 0:\n            source_rows.append(i)\n        else:\n            target_rows.append(i)\n    return source_rows, target_rows\n\ndef mirroring(row, center_col1, center_col2):\n    \"\"\"\n    Applies the mirroring rule to a given row (or a copy).\n    Returns modified row.\n    \"\"\"\n    cols = len(row)\n    row_copy = np.copy(row)\n\n    if center_col1 -1 >= 0 and center_col2 + 2 <=cols:\n        left_segment = row_copy[center_col1-1:center_col1+1]\n        right_segment = row_copy[center_col2:center_col2+2]\n        row_copy[center_col1 - 1:center_col1+1] = right_segment[::-1]\n        row_copy[center_col2:center_col2+2] = left_segment[::-1]\n\n    return row_copy\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the source-target row replacement and mirroring rule.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n    center_col1 = cols // 2 - 1\n    center_col2 = cols // 2\n\n    # 1. Identify Source and Target Rows\n    source_rows_indices, target_rows_indices = get_source_and_target_rows(input_grid)\n\n    # 2. Process Target Rows\n    if source_rows_indices:\n       for i in target_rows_indices:\n            output_grid[i] = mirroring(output_grid[i], center_col1, center_col2)\n    else:\n      for i in target_rows_indices:\n        output_grid[i] = mirroring(output_grid[i],center_col1, center_col2)\n\n    # 3. Preserve Source Rows (already done by initializing with a copy)\n\n    # 4. Output\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6132,
    "candidates_token_count": 712,
    "total_token_count": 6844,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.818321
}