{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation involves identifying rows with non-zero values in the central columns (\"source rows\") and using them to replace rows with all zeros in the central columns (\"target rows\"). Source rows are preserved. Target rows are replaced by a mirrored version of a source row, alternating between multiple source rows if available. The mirroring affects a four-element segment around the center of the row.\n\"\"\"\n\nimport numpy as np\n\ndef get_source_rows(grid):\n    \"\"\"\n    Identifies rows with at least one non-zero value in the two central columns.\n    Returns a list of row indices.\n    \"\"\"\n    rows, cols = grid.shape\n    center_col1 = cols // 2 - 1\n    center_col2 = cols // 2\n    source_rows = []\n    for i in range(rows):\n        if grid[i, center_col1] != 0 or grid[i, center_col2] != 0:\n            source_rows.append(i)\n    return source_rows\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the source-target row replacement and mirroring rule.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n    center_col1 = cols // 2 - 1\n    center_col2 = cols // 2\n\n    # 1. Identify Source Rows\n    source_rows_indices = get_source_rows(input_grid)\n\n    # 2. Preserve Source Rows (already done by initializing with a copy)\n\n    # 3 & 4. Process Target Rows\n    source_row_index = 0  # Index to track which source row to use\n    for i in range(rows):\n        if input_grid[i, center_col1] == 0 and input_grid[i, center_col2] == 0:\n            # Target row: replace with mirrored source row\n            if source_rows_indices:  # Check if there are any source rows\n                source_row = source_rows_indices[source_row_index % len(source_rows_indices)]\n                source_row_index += 1\n\n                # Mirroring:\n                if center_col1 - 2 >= 0 and center_col2 + 3 <= cols:\n                    left_segment = input_grid[source_row, center_col1-2:center_col1]\n                    right_segment = input_grid[source_row, center_col2+1:center_col2+3]\n\n                    output_grid[i, center_col1-2:center_col1] = right_segment[::-1]\n                    output_grid[i, center_col2+1:center_col2+3] = left_segment[::-1]\n\n    # 5. Output\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4073,
    "candidates_token_count": 648,
    "total_token_count": 4721,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.985856
}