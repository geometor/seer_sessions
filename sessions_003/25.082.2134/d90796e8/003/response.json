{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nA red pixel will change to azure if and only if:\n1. It is adjacent to at least one green pixel.\n2. Adjacency is only horizontal and vertical (up, down, left, right).\n3. Only 1:1 green:red changes happen.\nAll other pixels remain unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef is_adjacent(coord1, coord2):\n    \"\"\"\n    Checks if two coordinates are adjacent (horizontally or vertically).\n\n    Args:\n      coord1: Tuple (row1, col1)\n      coord2: Tuple (row2, col2)\n\n    Returns:\n      True if adjacent, False otherwise.\n    \"\"\"\n    row_diff = abs(coord1[0] - coord2[0])\n    col_diff = abs(coord1[1] - coord2[1])\n    return (row_diff == 1 and col_diff == 0) or (row_diff == 0 and col_diff == 1)\n\ndef get_neighbors(grid, row, col):\n    rows, cols = grid.shape\n    neighbors = []\n    for i in range(max(0, row - 1), min(rows, row + 2)):\n        for j in range(max(0, col - 1), min(cols, col + 2)):\n            if (i != row or j != col) and is_adjacent((row, col), (i, j)):\n                neighbors.append((i, j, grid[i, j]))\n    return neighbors\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the rule:\n    Red pixels adjacent to green pixels become azure, considering only\n    horizontal/vertical adjacency and 1:1 green:red relationships.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Iterate through each cell of the input grid\n    for i in range(rows):\n        for j in range(cols):\n            # Check if the current cell is red\n            if input_grid[i, j] == 2:\n                neighbors = get_neighbors(input_grid, i, j)\n                green_neighbors = [(r,c) for r, c, val in neighbors if val == 3]\n                if len(green_neighbors) == 1:\n                  output_grid[i,j] = 8\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4261,
    "candidates_token_count": 555,
    "total_token_count": 4816,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.151347
}