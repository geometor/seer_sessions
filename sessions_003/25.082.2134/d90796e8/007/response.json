{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Green Pixels:** Iterate through the grid, focusing on *green* pixels first.\n\n2.  **Find Adjacent Reds:** For *each* green pixel, identify all adjacent red pixels (horizontally or vertically).\n\n3.  **Transform Adjacent Reds (One-to-One):** For each red pixel found adjacent to the current green pixel, change the red pixel to azure. Mark the *green* pixel as \"consumed\" after processing all its adjacent red pixels so that this green pixel cannot be used to process any additional reds in the future.\n\n4. **Iterate:** Continue this process for all remaining *green* pixels in the grid.\n\n5.  **Unchanged Pixels:** Any pixel that is not transformed by the above rules remains unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef is_adjacent(coord1, coord2):\n    \"\"\"\n    Checks if two coordinates are adjacent (horizontally or vertically).\n\n    Args:\n      coord1: Tuple (row1, col1)\n      coord2: Tuple (row2, col2)\n\n    Returns:\n      True if adjacent, False otherwise.\n    \"\"\"\n    row_diff = abs(coord1[0] - coord2[0])\n    col_diff = abs(coord1[1] - coord2[1])\n    return (row_diff == 1 and col_diff == 0) or (row_diff == 0 and col_diff == 1)\n\ndef get_neighbors(grid, row, col):\n    \"\"\"\n    Returns a list of adjacent neighbors (horizontally or vertically).\n    \"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    for i in range(max(0, row - 1), min(rows, row + 2)):\n        for j in range(max(0, col - 1), min(cols, col + 2)):\n            if (i != row or j != col) and is_adjacent((row, col), (i, j)):\n                neighbors.append((i, j))\n    return neighbors\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the revised rule.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n    consumed_green = set()\n\n    # Iterate through each cell of the input grid, looking for green pixels\n    for i in range(rows):\n        for j in range(cols):\n            if input_grid[i, j] == 3 and (i, j) not in consumed_green:  # Check for green and not consumed\n                neighbors = get_neighbors(input_grid, i, j)\n                red_neighbors = [(r, c) for r, c in neighbors if input_grid[r,c] == 2]\n\n                # Transform all adjacent red pixels to azure\n                for red_row, red_col in red_neighbors:\n                    output_grid[red_row, red_col] = 8\n                \n                consumed_green.add((i,j)) #mark green as consumed\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5434,
    "candidates_token_count": 699,
    "total_token_count": 6133,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.236176
}