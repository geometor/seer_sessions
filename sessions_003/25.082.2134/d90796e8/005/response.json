{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Pairs:** Examine the input grid to identify pairs of adjacent green and red pixels. Adjacency is defined as being directly above, below, to the left, or to the right (not diagonal).\n\n2.  **One-to-One Transformation:** For each *unique* green-red pair identified, the red pixel in that pair transforms into an azure pixel. The green pixel is considered \"consumed\" and cannot participate in further transformations.\n\n3.  **Unpaired Pixels:** If a red pixel is not adjacent to any green pixel, it remains unchanged. If a green pixel has no adjacent red pixels it remains unchanged. If there are more red pixels adjacent to green pixels than there are green pixels available to create pairs, not all of the red pixels will transform. It appears there may be an implicit spatial ordering determining which green/red pairing will occur, but it is not immediately obvious from these examples. Assume a left-to-right, top-to-bottom ordering of priority when matching.\n\n4. **All Other Pixels:** Any pixel that is not red or green remains unchanged in the output grid.\n\"\"\"\n\nimport numpy as np\n\ndef is_adjacent(coord1, coord2):\n    \"\"\"\n    Checks if two coordinates are adjacent (horizontally or vertically).\n\n    Args:\n      coord1: Tuple (row1, col1)\n      coord2: Tuple (row2, col2)\n\n    Returns:\n      True if adjacent, False otherwise.\n    \"\"\"\n    row_diff = abs(coord1[0] - coord2[0])\n    col_diff = abs(coord1[1] - coord2[1])\n    return (row_diff == 1 and col_diff == 0) or (row_diff == 0 and col_diff == 1)\n\ndef get_neighbors(grid, row, col):\n    rows, cols = grid.shape\n    neighbors = []\n    for i in range(max(0, row - 1), min(rows, row + 2)):\n        for j in range(max(0, col - 1), min(cols, col + 2)):\n            if (i != row or j != col) and is_adjacent((row, col), (i, j)):\n                neighbors.append((i, j, grid[i, j]))\n    return neighbors\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the rule:\n    Red pixels adjacent to green pixels become azure, considering only\n    horizontal/vertical adjacency and 1:1 green:red relationships.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n    consumed_green = set()\n\n    # Iterate through each cell of the input grid\n    for i in range(rows):\n        for j in range(cols):\n            # Check if the current cell is red\n            if input_grid[i, j] == 2:\n                neighbors = get_neighbors(input_grid, i, j)\n                green_neighbors = [(r,c) for r, c, val in neighbors if val == 3 and (r,c) not in consumed_green]\n                \n                # Prioritize the first available green neighbor (left-to-right, top-to-bottom).\n                if green_neighbors:\n                    green_row, green_col = green_neighbors[0]\n                    output_grid[i, j] = 8  # Convert red to azure\n                    consumed_green.add((green_row, green_col))\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5189,
    "candidates_token_count": 799,
    "total_token_count": 5988,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.791654
}