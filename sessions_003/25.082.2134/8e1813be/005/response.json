{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid based on consistent columns or uniform rows.\n\nPrioritizes extracting full-height uniform columns. If none are found,\nselects rows with uniform non-zero color segments, filters them by maximum\nlength, and orders them by a predefined color priority.\n\"\"\"\n\nimport numpy as np\n\ndef _find_consistent_columns(grid):\n    \"\"\"Finds columns with consistent non-zero values spanning the full height.\"\"\"\n    consistent_cols = []\n    num_rows, num_cols = grid.shape\n    for j in range(num_cols):\n        first_val = grid[0, j]\n        if first_val != 0 and np.all(grid[:, j] == first_val):\n            consistent_cols.append(j)\n    return consistent_cols\n\ndef _longest_uniform_subsequence(row):\n    \"\"\"Finds the length of the longest uniform non-zero subsequence.\"\"\"\n    max_len = 0\n    current_len = 0\n    current_val = None\n    for val in row:\n        if val == current_val and val != 0:\n            current_len += 1\n        elif val != 0:\n            max_len = max(max_len, current_len)\n            current_len = 1\n            current_val = val\n        else:\n            max_len = max(max_len, current_len)\n            current_len = 0\n            current_val = None\n\n    max_len = max(max_len, current_len)  # Check at the end\n    return max_len\n\ndef _find_uniform_rows(grid):\n    \"\"\"Identifies rows with a contiguous sequence of non-zero pixels of the same color.\"\"\"\n    uniform_rows = []\n    for i, row in enumerate(grid):\n        if _longest_uniform_subsequence(row) > 0:\n             #check that the longest subsequence represents entire row by comparing it with count of non-zero\n            color = -1\n            count = 0\n            for x in row:\n                if x!= 0:\n                    if color==-1:\n                        color = x\n                        count = 1\n                    elif color == x:\n                        count+=1\n\n            if _longest_uniform_subsequence(row) == count:\n                uniform_rows.append((i, row))  # Store row index and the row itself\n    return uniform_rows\n\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid based on consistent columns or uniform rows.\"\"\"\n\n    # 1. Check for Uniform Columns\n    consistent_columns = _find_consistent_columns(input_grid)\n    if consistent_columns:\n        # Extract these columns, preserving their original order.\n        output_grid = input_grid[:, consistent_columns]\n        return output_grid\n\n    # 2. If no uniform columns: select rows with uniform segments.\n    uniform_rows = _find_uniform_rows(input_grid)\n    if not uniform_rows:\n        return np.array([]).reshape(0, 0)\n\n    # 3. Filter selected rows by maximum length.\n    max_length = 0\n    for _, row in uniform_rows:\n      max_length = max(max_length, _longest_uniform_subsequence(row))\n\n    filtered_rows = []\n\n    for i, row in uniform_rows:\n      if _longest_uniform_subsequence(row) == max_length:\n        filtered_rows.append((i,row))\n\n    if not filtered_rows:\n      return np.array([]).reshape(0,0)\n\n    # 4. Order Selected Rows\n    color_priority = [2, 8, 4, 1]  # Primary colors first\n    other_colors = []\n    color_to_rows = {}\n\n    for i, row in filtered_rows:\n      first_color = 0\n      for val in row:\n        if val != 0:\n          first_color = val\n          break\n      if first_color not in color_to_rows:\n          color_to_rows[first_color] = []\n      color_to_rows[first_color].append((i,row))\n\n    for color in color_to_rows:\n      if color not in color_priority:\n        other_colors.append(color)\n\n    sorted_rows = []\n\n    for color in color_priority + other_colors: #first priority colors\n        if color in color_to_rows:\n          for i, row in color_to_rows[color]:\n            sorted_rows.append(row[:max_length])\n\n    output_grid = np.array(sorted_rows)\n    if output_grid.size == 0:\n      return np.array([]).reshape(0, 0)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8618,
    "candidates_token_count": 1097,
    "total_token_count": 9715,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 20.871266
}