{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation removes all objects of color 8. Objects of color 7 and 6 are moved to the locations previously occupied by color 8 objects. The first object of color 7 is placed at the top-left position of the first color 8 object, and the first object of color 6 is placed below it. These 7 and 6 objects are replicated to fill all locations where color 8 objects existed.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"\n    Finds contiguous blocks of the same color in a grid.\n    Returns a dictionary of objects, where keys are object IDs (integers)\n    and values are dictionaries containing object properties.\n    \"\"\"\n    objects = {}\n    visited = np.zeros_like(grid, dtype=bool)\n    object_id = 0\n\n    def dfs(row, col, color, object_pixels):\n        if (\n            row < 0\n            or row >= grid.shape[0]\n            or col < 0\n            or col >= grid.shape[1]\n            or visited[row, col]\n            or grid[row, col] != color\n        ):\n            return\n        visited[row, col] = True\n        object_pixels.append((row, col))\n        dfs(row + 1, col, color, object_pixels)\n        dfs(row - 1, col, color, object_pixels)\n        dfs(row, col + 1, color, object_pixels)\n        dfs(row, col - 1, color, object_pixels)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if not visited[row, col] and grid[row, col] != 0:\n                object_pixels = []\n                dfs(row, col, grid[row, col], object_pixels)\n                if object_pixels:\n                    objects[object_id] = {\n                        \"color\": grid[row, col],\n                        \"pixels\": object_pixels,\n                        \"shape\": get_shape(object_pixels),\n                        'min_row': min(p[0] for p in object_pixels),\n                        'max_row': max(p[0] for p in object_pixels),\n                        'min_col': min(p[1] for p in object_pixels),\n                        'max_col': max(p[1] for p in object_pixels),\n                    }\n                    object_id += 1\n    return objects\n\ndef get_shape(pixels):\n    \"\"\"\n    Determine a simple shape representation for a set of pixels.\n    \"\"\"\n    min_row = min(p[0] for p in pixels)\n    max_row = max(p[0] for p in pixels)\n    min_col = min(p[1] for p in pixels)\n    max_col = max(p[1] for p in pixels)\n\n    shape_data = []\n\n    for r in range(min_row,max_row+1):\n        row_data = []\n        for c in range(min_col, max_col + 1):\n            if (r,c) in pixels:\n                row_data.append(1)\n            else:\n                row_data.append(0)\n        shape_data.append(row_data)\n\n    return shape_data\n    \n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.zeros_like(input_grid)\n\n    # find the objects\n    input_objects = find_objects(input_grid)\n\n    # Find objects of color 8\n    color8_objects = []\n    for obj_id, obj in input_objects.items():\n        if obj['color'] == 8:\n            color8_objects.append(obj)\n\n    #if no color 8 objects return input grid as is\n    if not color8_objects:\n        return input_grid\n\n    #find the top-left color 8 object\n    min_row = 30\n    min_col = 30\n    \n    for obj in color8_objects:\n        if obj['min_row'] < min_row:\n            min_row = obj['min_row']\n            min_col = obj['min_col']\n        elif obj['min_row'] == min_row:\n            if obj['min_col'] < min_col:\n                min_col = obj['min_col']\n\n    # Find the object with color 7\n    color7_objects = []\n    for obj_id, obj in input_objects.items():\n        if obj['color'] == 7:\n            color7_objects.append(obj)\n\n    # Find the first object of color 6\n    color6_objects = []\n    for obj_id, obj in input_objects.items():\n        if obj['color'] == 6:\n            color6_objects.append(obj)\n\n    \n    #fill in color 7 pixels at first location of 8\n    if (len(color7_objects) > 0) :\n        obj7 = color7_objects[0] #get the first color 7 object.\n        pixels7 = obj7['pixels']\n        row_offset = min_row - obj7['min_row']\n        col_offset = min_col - obj7['min_col']\n        \n        for (row, col) in pixels7:\n                output_grid[row + row_offset, col+col_offset] = 7\n\n    # fill in color 6 objects below color 7 object\n    if (len(color6_objects) > 0):\n        obj6 = color6_objects[0] #get the first color 6 object\n        pixels6 = obj6['pixels']\n\n        if len(color7_objects) > 0:\n            row_offset = min_row - obj6['min_row'] + (color7_objects[0]['max_row'] - color7_objects[0]['min_row']) + 1 #place color 6 objects below.\n        else:\n            row_offset = min_row - obj6['min_row']\n\n        col_offset = min_col - obj6['min_col']\n    \n        for (row, col) in pixels6:\n                output_grid[row+ row_offset, col + col_offset] = 6\n\n\n    # Replicate at the locations of other 8 objects:\n    for obj8 in color8_objects:\n        if (obj8['min_row'] == min_row) and (obj8['min_col'] == min_col):\n            continue\n\n        #fill color 7\n        if (len(color7_objects) > 0) :\n            obj7 = color7_objects[0] #get the first color 7 object.\n            pixels7 = obj7['pixels']\n            row_offset = obj8['min_row'] - obj7['min_row']\n            col_offset = obj8['min_col'] - obj7['min_col']\n            \n            for (row, col) in pixels7:\n                    output_grid[row + row_offset, col+col_offset] = 7\n\n        # fill color 6\n        if (len(color6_objects) > 0):\n            obj6 = color6_objects[0] #get the first color 6 object\n            pixels6 = obj6['pixels']\n\n            if len(color7_objects) > 0:\n                row_offset = obj8['min_row'] - obj6['min_row'] + (color7_objects[0]['max_row'] - color7_objects[0]['min_row']) + 1\n            else:\n                row_offset = obj8['min_row'] - obj6['min_row']\n                \n            \n            col_offset = obj8['min_col'] - obj6['min_col']\n        \n            for (row, col) in pixels6:\n                    output_grid[row+ row_offset, col + col_offset] = 6\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8606,
    "candidates_token_count": 1863,
    "total_token_count": 10469,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 22.148796
}