{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nExtracts colored objects from a larger grid and places them into a smaller, condensed grid, discarding the background.\n\"\"\"\n\nimport numpy as np\n\ndef get_objects(grid):\n    \"\"\"\n    Identifies and extracts contiguous blocks of non-zero colored pixels.\n    \"\"\"\n    objects = []\n    visited = set()\n    rows, cols = grid.shape\n\n    def dfs(r, c, color, obj):\n        if (r, c) in visited or r < 0 or r >= rows or c < 0 or c >= cols or grid[r, c] != color:\n            return\n        visited.add((r, c))\n        obj.append((r, c))\n        dfs(r + 1, c, color, obj)\n        dfs(r - 1, c, color, obj)\n        dfs(r, c + 1, color, obj)\n        dfs(r, c - 1, color, obj)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and (r, c) not in visited:\n                obj = []\n                dfs(r, c, grid[r, c], obj)\n                if obj:\n                    objects.append(obj)\n    return objects\n\ndef order_objects(objects):\n    \"\"\"\n    Orders objects based on their top-left corner's row and column.\n    \"\"\"\n    # sort by top-left corner, first by row, then by column\n    return sorted(objects, key=lambda obj: (min(r for r, _ in obj), min(c for _, c in obj)))\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by extracting and re-arranging colored objects.\n    \"\"\"\n    # Convert input to numpy array\n    input_grid = np.array(input_grid)\n\n    # Identify and Extract objects\n    objects = get_objects(input_grid)\n\n    # Order the objects\n    ordered_objects = order_objects(objects)\n    \n    # Calculate dimensions of output grid\n    total_pixels = sum(len(obj) for obj in ordered_objects)\n    out_rows = int(np.floor(np.sqrt(total_pixels)))\n    out_cols = int(np.ceil(total_pixels / out_rows))\n    output_grid = np.zeros((out_rows, out_cols), dtype=int)\n    \n    # Place Objects in output grid\n    current_row = 0\n    current_col = 0\n    \n    for obj in ordered_objects:\n        for r, c in obj:\n            output_grid[current_row, current_col] = input_grid[r,c]\n            current_col += 1\n            if current_col >= out_cols:\n                current_col = 0\n                current_row += 1\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2347,
    "candidates_token_count": 670,
    "total_token_count": 3017,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.068291
}