{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nExtracts colored objects from the input grid, preserves their shapes, and arranges them in a new grid from top-left to bottom-right, based on the original top-left position of each object in the input grid.\n\"\"\"\n\nimport numpy as np\n\ndef get_objects(grid):\n    \"\"\"\n    Identifies and extracts contiguous blocks of non-zero colored pixels.\n    Returns a list of objects, where each object is a list of (row, col) coordinates.\n    \"\"\"\n    objects = []\n    visited = set()\n    rows, cols = grid.shape\n\n    def dfs(r, c, color, obj):\n        if (r, c) in visited or r < 0 or r >= rows or c < 0 or c >= cols or grid[r, c] != color:\n            return\n        visited.add((r, c))\n        obj.append((r, c))\n        dfs(r + 1, c, color, obj)\n        dfs(r - 1, c, color, obj)\n        dfs(r, c + 1, color, obj)\n        dfs(r, c - 1, color, obj)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and (r, c) not in visited:\n                obj = []\n                dfs(r, c, grid[r, c], obj)\n                if obj:\n                    objects.append(obj)\n    return objects\n\ndef object_dimensions(obj):\n    \"\"\"\n    Calculates the height and width of an object.\n    \"\"\"\n    rows, cols = zip(*obj)\n    height = max(rows) - min(rows) + 1\n    width = max(cols) - min(cols) + 1\n    return height, width\n\ndef object_top_left(obj):\n    \"\"\"\n    Returns the top-left coordinates (row, col) of an object.\n    \"\"\"\n    return min(r for r, _ in obj), min(c for _, c in obj)\n    \n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by extracting, preserving, and arranging colored objects.\n    \"\"\"\n    # Convert input to numpy array\n    input_grid = np.array(input_grid)\n\n    # Identify and Extract objects\n    objects = get_objects(input_grid)\n\n    # Order the objects by top-left corner (row, then column)\n    ordered_objects = sorted(objects, key=object_top_left)\n\n    # Initialize output grid parameters\n    output_rows = 0\n    output_cols = 0\n    current_row = 0\n    current_col = 0\n   \n    object_data = [] # store (object, height, width, top_left_row, top_left_col)\n    \n    for obj in ordered_objects:\n        height, width = object_dimensions(obj)\n        \n        # if object will exceed current row length\n        if current_col + width > output_cols:\n            # update output size\n            output_cols = max(output_cols, current_col) # extend width if needed\n            current_row += 1\n            current_col = 0\n          \n        # store for placement\n        object_data.append((obj, height, width, current_row, current_col))\n        current_col += width    # move horiz position by width\n\n    # compute the final size\n    max_row = 0\n    for obj, height, width, top_left_row, top_left_col in object_data:\n      max_row = max(max_row, top_left_row+height)\n    \n    output_cols = max(output_cols, current_col)\n    output_grid = np.zeros((max_row, output_cols), dtype=int)\n\n    # place objects in grid\n    for obj, height, width, top_left_row, top_left_col in object_data:\n      # fill object into grid at computed position\n      for r,c in obj:\n        row_offset = r - object_top_left(obj)[0]\n        col_offset = c - object_top_left(obj)[1]\n        output_grid[top_left_row + row_offset, top_left_col + col_offset] = input_grid[r,c]\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5569,
    "candidates_token_count": 1015,
    "total_token_count": 6584,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 15.986268
}