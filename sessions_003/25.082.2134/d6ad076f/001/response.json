{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation rule identifies rectangular regions of the same color and\ninserts an azure (color 8) rectangle in the empty space between them. The\ninserted rectangle's dimensions and position are determined by the spatial\nrelationship between the existing rectangles, essentially filling the gap\nbetween their projected boundaries.\n\"\"\"\n\nimport numpy as np\n\ndef find_rectangles(grid):\n    \"\"\"Finds all distinct, non-overlapping rectangles of the same color.\"\"\"\n    rectangles = {}\n    visited = set()\n    rows, cols = grid.shape\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def dfs(r, c, color, coords):\n        if (r, c) in visited or not is_valid(r, c) or grid[r, c] != color:\n            return\n        visited.add((r, c))\n        coords.append((r, c))\n        for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            dfs(r + dr, c + dc, color, coords)\n\n    for r in range(rows):\n        for c in range(cols):\n            if (r, c) not in visited and grid[r, c] != 0:\n                color = grid[r, c]\n                coords = []\n                dfs(r, c, color, coords)\n                if coords:\n                    min_r = min(cr for cr, _ in coords)\n                    max_r = max(cr for cr, _ in coords)\n                    min_c = min(cc for _, cc in coords)\n                    max_c = max(cc for _, cc in coords)\n                    \n                    # check if it is a rectangle\n                    is_rectangle = True\n                    for cr in range(min_r, max_r + 1):\n                        for cc in range(min_c, max_c + 1):\n                            if grid[cr,cc] != color:\n                                is_rectangle = False\n                                break\n                        if not is_rectangle:\n                            break\n                    if is_rectangle:\n                        rectangles.setdefault(color, []).append((min_r, max_r, min_c, max_c))\n    return rectangles\n\ndef project_lines(rect1, rect2, rows, cols):\n    \"\"\"Projects lines from the edges of two rectangles.\"\"\"\n\n    min_r1, max_r1, min_c1, max_c1 = rect1\n    min_r2, max_r2, min_c2, max_c2 = rect2\n    \n    # horizontal lines\n    horiz_lines1 = [(min_r1,min_c1, min_r1, cols-1), (max_r1, min_c1, max_r1, cols-1)]\n    horiz_lines2 = [(min_r2,min_c2, min_r2, cols-1), (max_r2, min_c2, max_r2, cols-1)]\n\n    # vertical lines\n    vert_lines1 = [(min_r1, min_c1, rows-1, min_c1), (min_r1, max_c1, rows -1, max_c1)]\n    vert_lines2 = [(min_r2, min_c2, rows-1, min_c2), (min_r2, max_c2, rows -1, max_c2)]\n\n    return horiz_lines1, horiz_lines2, vert_lines1, vert_lines2\n\ndef get_intersection(rect1, rect2, rows, cols):\n\n    min_r1, max_r1, min_c1, max_c1 = rect1\n    min_r2, max_r2, min_c2, max_c2 = rect2\n\n    h1, h2, v1, v2 = project_lines(rect1, rect2, rows, cols)\n    \n    # Find intersection ranges\n    r_start = max(min_r1, min_r2)\n    r_end = min(max_r1, max_r2)\n    c_start = max(min_c1, min_c2)\n    c_end = min(max_c1, max_c2)\n\n    # check for projections that would intersect without obstruction\n    if min_r1 < min_r2 and max_r1 < max_r2:\n        r_start = max_r1 + 1\n        r_end = min_r2 - 1\n    elif min_r2 < min_r1 and max_r2 < max_r1:\n        r_start = max_r2 + 1\n        r_end = min_r1 -1\n    \n    if min_c1 < min_c2 and max_c1 < max_c2:\n        c_start = max_c1 + 1\n        c_end = min_c2 - 1\n    elif min_c2 < min_c1 and max_c2 < max_c1:\n        c_start = max_c2 + 1\n        c_end = min_c1 - 1\n\n\n    if r_start <= r_end and c_start <= c_end:  # Use <= for inclusive range\n            return (r_start, r_end, c_start, c_end)\n    return None\n\n\ndef transform(input_grid):\n    \"\"\"\n    Identifies rectangular regions of the same color and inserts an azure\n    (color 8) rectangle in the space between their projected boundaries.\n    \"\"\"\n    grid = np.array(input_grid)\n    rows, cols = grid.shape\n    output_grid = np.copy(grid)\n    rectangles = find_rectangles(grid)\n\n    # Iterate through all pairs of rectangles of the same color\n    for color, rects in rectangles.items():\n        for i in range(len(rects)):\n            for j in range(i + 1, len(rects)):\n                intersection = get_intersection(rects[i], rects[j], rows, cols)\n                if intersection:\n                    r_start, r_end, c_start, c_end = intersection\n                    # Fill the intersection with azure (color 8)\n                    for r in range(r_start, r_end + 1):\n                        for c in range(c_start, c_end + 1):\n                            output_grid[r, c] = 8\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2842,
    "candidates_token_count": 1513,
    "total_token_count": 4355,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 20.060798
}