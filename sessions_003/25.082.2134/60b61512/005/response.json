{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation rule identifies yellow (4) clusters (horizontal or vertical lines) and changes adjacent white (0) pixels that extend the line of the cluster to orange (7).\n\"\"\"\n\nimport numpy as np\n\ndef get_yellow_clusters(grid):\n    \"\"\"\n    helper: find yellow clusters (horizontal or vertical lines)\n    \"\"\"\n    rows, cols = grid.shape\n    clusters = []\n    visited = set()\n\n    def is_valid(row, col):\n        return 0 <= row < rows and 0 <= col < cols\n\n    def dfs(row, col, current_cluster, direction):\n        if (row, col) in visited or not is_valid(row, col) or grid[row, col] != 4:\n            return\n\n        visited.add((row, col))\n        current_cluster.append((row, col))\n\n        if direction == \"horizontal\":\n            dfs(row, col + 1, current_cluster, direction)\n            dfs(row, col - 1, current_cluster, direction)\n        elif direction == \"vertical\":\n            dfs(row + 1, col, current_cluster, direction)\n            dfs(row - 1, col, current_cluster, direction)\n\n\n    for row in range(rows):\n        for col in range(cols):\n            if grid[row, col] == 4 and (row, col) not in visited:\n                # Try horizontal first\n                horizontal_cluster = []\n                dfs(row, col, horizontal_cluster, \"horizontal\")\n                if len(horizontal_cluster) > 1:\n                    clusters.append(horizontal_cluster)\n                    continue #move on, already have the whole cluster\n\n                # Try vertical\n                vertical_cluster = []\n                dfs(row, col, vertical_cluster, \"vertical\")\n                if len(vertical_cluster) > 1:\n                    clusters.append(vertical_cluster)\n\n    return clusters\n\ndef get_extending_pixels(grid, cluster):\n    \"\"\"\n    helper: find white pixels that extend the line of the cluster\n    \"\"\"\n    extending_pixels = []\n    rows, cols = grid.shape\n\n    # Determine if the cluster is horizontal or vertical\n    if len(cluster) > 1:  # Ensure cluster has at least 2 points\n      if cluster[0][0] == cluster[1][0]:  # Same row, different col = horizontal\n            direction = \"horizontal\"\n            #sort by col\n            cluster.sort(key=lambda x:x[1])\n            start = cluster[0]\n            end = cluster[-1]\n\n            #check to the west\n            west_neighbor = (start[0], start[1] - 1)\n            if 0 <= west_neighbor[1] and grid[west_neighbor] == 0:\n                extending_pixels.append(west_neighbor)\n\n            #check to the east\n            east_neighbor = (end[0], end[1] + 1)\n            if east_neighbor[1] < cols and grid[east_neighbor] == 0 :\n                extending_pixels.append(east_neighbor)\n            \n      else:\n            direction = \"vertical\"\n             #sort by row\n            cluster.sort(key=lambda x:x[0])\n            start = cluster[0]\n            end = cluster[-1]\n\n            # Check above\n            north_neighbor = (start[0] - 1, start[1])\n            if 0 <= north_neighbor[0] and grid[north_neighbor] == 0:\n                extending_pixels.append(north_neighbor)\n\n            # Check below\n            south_neighbor = (end[0] + 1, end[1])\n            if south_neighbor[0] < rows and grid[south_neighbor] == 0:\n                extending_pixels.append(south_neighbor)\n    return extending_pixels\n\n\ndef transform(input_grid):\n    \"\"\"\n    transform input grid to output grid\n    \"\"\"\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n    \n    # get yellow clusters\n    yellow_clusters = get_yellow_clusters(input_grid)\n\n    # find extending white pixels and change them to orange\n    for cluster in yellow_clusters:\n        extending_pixels = get_extending_pixels(input_grid, cluster)\n        for r, c in extending_pixels:\n            output_grid[r, c] = 7\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4363,
    "candidates_token_count": 1024,
    "total_token_count": 5387,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 15.232876
}