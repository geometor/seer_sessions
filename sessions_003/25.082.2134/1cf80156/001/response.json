{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nExtracts the smallest subgrid containing all non-zero pixels from the input grid.\n\"\"\"\n\nimport numpy as np\n\ndef _find_bounding_box(grid):\n    # Find rows and cols with non-zero elements\n    rows = np.any(grid != 0, axis=1)\n    cols = np.any(grid != 0, axis=0)\n    # Find min/max row and col indices\n    min_row, max_row = np.where(rows)[0][[0, -1]]\n    min_col, max_col = np.where(cols)[0][[0, -1]]\n    return min_row, max_row, min_col, max_col\n\ndef transform(input_grid):\n    \"\"\"\n    Extracts the non-zero subgrid from the input grid.\n\n    Args:\n        input_grid (list of lists): The input grid.\n\n    Returns:\n        list of lists: The extracted subgrid.\n    \"\"\"\n    # Convert to numpy array for easier manipulation\n    input_array = np.array(input_grid)\n\n    # Find the bounding box of the non-zero region\n    min_row, max_row, min_col, max_col = _find_bounding_box(input_array)\n\n    # Extract the subgrid using the bounding box indices.  Add 1 to max_row\n    # and max_col because slicing is exclusive.\n    output_grid = input_array[min_row:max_row+1, min_col:max_col+1].tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2510,
    "candidates_token_count": 362,
    "total_token_count": 2872,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.537181
}