{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid by moving single pixels (1x1 color blocks) near azure (color 8) rectangles, \nbased on their relative positions (above or to the left).\n\"\"\"\n\nimport numpy as np\n\ndef find_azure_rectangles(grid):\n    \"\"\"Finds the top-left corner coordinates of all azure rectangles (3x2 or 2x3).\"\"\"\n    rectangles = []\n    rows, cols = grid.shape\n    for r in range(rows - 1):\n        for c in range(cols - 1):\n            if grid[r, c] == 8:\n                if (grid[r:r+2, c:c+3] == 8).all() and grid[r:r+2, c:c+3].size == 6:  # Check for 2x3\n                  rectangles.append((r, c, 2, 3))\n                elif (grid[r:r+3, c:c+2] == 8).all() and grid[r:r+3, c:c+2].size == 6:  # Check for 3x2\n                    rectangles.append((r, c, 3, 2))\n    return rectangles\n\ndef find_single_pixels(grid):\n    \"\"\"Finds the coordinates of all single pixels (excluding color 8).\"\"\"\n    pixels = []\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and grid[r,c] != 8:\n                # Check if it's a single pixel (not part of a larger object)\n                is_single = True\n                for dr in [-1, 0, 1]:\n                    for dc in [-1, 0, 1]:\n                        if dr == 0 and dc == 0:\n                            continue\n                        nr, nc = r + dr, c + dc\n                        if 0 <= nr < rows and 0 <= nc < cols and grid[nr, nc] == grid[r, c]:\n                            is_single = False\n                            break\n                    if not is_single:\n                        break\n                if is_single:\n                    pixels.append((r, c))\n    return pixels\n\ndef transform(input_grid):\n    # Initialize output grid as a copy of the input grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Find azure rectangles\n    rectangles = find_azure_rectangles(input_grid)\n\n    # Find single pixels\n    single_pixels = find_single_pixels(input_grid)\n    \n    # dictionary to store value of single pixel to be moved\n    moved_pixels = {}\n\n    # Process Top Row Singularities\n    for c in range(cols):\n        if input_grid[0,c] != 0 and input_grid[0,c] != 8: # non-zero and not azure\n             for r, c_rec, h_rec, w_rec in rectangles:\n                 if c_rec <= c < c_rec + w_rec:\n                     # Check if the rectangle is below the non-zero\n                     if (r,c_rec) not in moved_pixels:  # prevent overwrite if other pixel moved already\n                        output_grid[r, c_rec] = input_grid[0, c]\n                        moved_pixels[(r,c_rec)] = input_grid[0,c] # store location and original value\n                        break # only do this for the first rectangle\n\n    # Process Left Column Singularities\n    for r in range(rows):\n      if input_grid[r,0] != 0 and input_grid[r,0] != 8: # non-zero and not azure\n        for r_rec, c_rec, h_rec, w_rec in rectangles:\n          if r_rec <= r < r_rec + h_rec:\n            # check if the rectangle is to the right\n            if (r_rec, c_rec) not in moved_pixels: # prevent overwrite if other pixel moved already\n              output_grid[r_rec,c_rec] = input_grid[r,0]\n              moved_pixels[(r_rec, c_rec)] = input_grid[r,0] # store location and original value\n              break  # only do this for the first rectangle\n\n\n    # Process rectangles based on moved_pixels\n    for r, c, height, width in rectangles:\n        # skip if a value was already moved there\n        if (r,c) not in moved_pixels:\n\n            # check top-left\n            if r > 0 and (r - 1, c) in single_pixels:\n                output_grid[r, c] = input_grid[r-1, c] # copy single pixel to top-left\n                moved_pixels[(r,c)] = input_grid[r-1, c]\n\n            # check left\n            elif c > 0 and (r, c-1) in single_pixels:\n                output_grid[r,c] = input_grid[r, c-1]\n                moved_pixels[(r,c)] = input_grid[r, c-1]\n        elif (r,c) in moved_pixels: # Value was moved here - do nothing\n            pass # prevents replacing a value moved from top row or left column\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3044,
    "candidates_token_count": 1242,
    "total_token_count": 4286,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 18.221043
}