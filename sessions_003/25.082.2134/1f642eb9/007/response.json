{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid by moving single pixels (1x1 color blocks) that are *not* already adjacent to azure (color 8) rectangles.\nThese single pixels are moved to empty cells that *are* adjacent to the azure rectangles.\n\"\"\"\n\nimport numpy as np\n\ndef find_azure_rectangles(grid):\n    \"\"\"Finds the top-left corner coordinates of all azure rectangles (3x2 or 2x3).\"\"\"\n    rectangles = []\n    rows, cols = grid.shape\n    for r in range(rows - 1):\n        for c in range(cols - 1):\n            if grid[r, c] == 8:\n                if (grid[r:r+2, c:c+3] == 8).all() and grid[r:r+2, c:c+3].size == 6:  # Check for 2x3\n                    rectangles.append((r, c, 2, 3))\n                elif (grid[r:r+3, c:c+2] == 8).all() and grid[r:r+3, c:c+2].size == 6:  # Check for 3x2\n                    rectangles.append((r, c, 3, 2))\n    return rectangles\n\ndef find_single_pixels(grid):\n    \"\"\"Finds the coordinates of all single pixels (excluding color 8 and 0).\"\"\"\n    pixels = []\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and grid[r,c] != 8:\n                # Check if it's a single pixel (not part of a larger object)\n                is_single = True\n                for dr in [-1, 0, 1]:\n                    for dc in [-1, 0, 1]:\n                        if dr == 0 and dc == 0:\n                            continue\n                        nr, nc = r + dr, c + dc\n                        if 0 <= nr < rows and 0 <= nc < cols and grid[nr, nc] == grid[r, c]:\n                            is_single = False\n                            break\n                    if not is_single:\n                        break\n                if is_single:\n                    pixels.append((r, c))\n    return pixels\n\ndef is_adjacent_to_rectangle(r, c, rect_r, rect_c, rect_h, rect_w):\n    \"\"\"Checks if a cell (r, c) is adjacent to the rectangle.\"\"\"\n    if (rect_r -1 <= r <= rect_r + rect_h) and (rect_c - 1 <= c <= rect_c + rect_w):\n      # now check it is NOT within rectangle\n      if (rect_r <= r < rect_r + rect_h) and (rect_c  <= c < rect_c + rect_w):\n          return False # inside the rectangle\n      else:\n        return True # adjacent\n    else:\n      return False\n    \ndef find_non_adjacent_single_pixels(grid, rectangles):\n    \"\"\"Finds single pixels that are NOT adjacent to any azure rectangle.\"\"\"\n    single_pixels = find_single_pixels(grid)\n    non_adjacent_pixels = []\n    for r, c in single_pixels:\n        adjacent = False\n        for rect_r, rect_c, rect_h, rect_w in rectangles:\n            if is_adjacent_to_rectangle(r, c, rect_r, rect_c, rect_h, rect_w):\n                adjacent = True\n                break\n        if not adjacent:\n            non_adjacent_pixels.append((r, c))\n    return non_adjacent_pixels\n\ndef get_adjacent_empty_cells(grid, rect_r, rect_c, rect_h, rect_w):\n    \"\"\"Finds empty cells adjacent to a rectangle.\"\"\"\n    rows, cols = grid.shape\n    empty_cells = []\n    for r in range(rect_r - 1, rect_r + rect_h + 1):\n        for c in range(rect_c - 1, rect_c + rect_w + 1):\n            if (0 <= r < rows and 0 <= c < cols and\n                grid[r, c] == 0 and\n                not (rect_r <= r < rect_r + rect_h and rect_c <= c < rect_c + rect_w)):\n                empty_cells.append((r, c))\n    return empty_cells\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid by moving single pixels not adjacent to azure rectangles to empty cells adjacent to azure rectangles.\"\"\"\n    output_grid = np.copy(input_grid)\n    rectangles = find_azure_rectangles(output_grid)\n    non_adjacent_single_pixels = find_non_adjacent_single_pixels(output_grid, rectangles)\n\n    pixel_index = 0  # Keep track of which pixel to move\n    for rect_r, rect_c, rect_h, rect_w in rectangles:\n        empty_cells = get_adjacent_empty_cells(output_grid, rect_r, rect_c, rect_h, rect_w)\n        for empty_r, empty_c in empty_cells:\n            if pixel_index < len(non_adjacent_single_pixels):\n                pixel_r, pixel_c = non_adjacent_single_pixels[pixel_index]\n                output_grid[empty_r, empty_c] = output_grid[pixel_r, pixel_c]\n                output_grid[pixel_r, pixel_c] = 0\n                pixel_index += 1\n            else:\n                break  # No more pixels to move\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5738,
    "candidates_token_count": 1326,
    "total_token_count": 7064,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 17.449897
}