{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid by moving single pixels (1x1 color blocks) adjacent to azure (color 8) rectangles.\nSingle pixels of any color other than azure or background are moved to empty cells that are adjacent to the azure rectangles.\nIf a single pixel is already adjacent to a rectangle, it is not moved.\n\"\"\"\n\nimport numpy as np\n\ndef find_azure_rectangles(grid):\n    \"\"\"Finds the top-left corner coordinates of all azure rectangles (3x2 or 2x3).\"\"\"\n    rectangles = []\n    rows, cols = grid.shape\n    for r in range(rows - 1):\n        for c in range(cols - 1):\n            if grid[r, c] == 8:\n                if (grid[r:r+2, c:c+3] == 8).all() and grid[r:r+2, c:c+3].size == 6:  # Check for 2x3\n                  rectangles.append((r, c, 2, 3))\n                elif (grid[r:r+3, c:c+2] == 8).all() and grid[r:r+3, c:c+2].size == 6:  # Check for 3x2\n                    rectangles.append((r, c, 3, 2))\n    return rectangles\n\ndef find_single_pixels(grid):\n    \"\"\"Finds the coordinates of all single pixels (excluding color 8 and 0).\"\"\"\n    pixels = []\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and grid[r,c] != 8:\n                # Check if it's a single pixel (not part of a larger object)\n                is_single = True\n                for dr in [-1, 0, 1]:\n                    for dc in [-1, 0, 1]:\n                        if dr == 0 and dc == 0:\n                            continue\n                        nr, nc = r + dr, c + dc\n                        if 0 <= nr < rows and 0 <= nc < cols and grid[nr, nc] == grid[r, c]:\n                            is_single = False\n                            break\n                    if not is_single:\n                        break\n                if is_single:\n                    pixels.append((r, c))\n    return pixels\n\ndef is_adjacent_to_rectangle(r, c, rect_r, rect_c, rect_h, rect_w):\n    \"\"\"Checks if a cell (r, c) is adjacent to the rectangle.\"\"\"\n    if (rect_r -1 <= r <= rect_r + rect_h) and (rect_c - 1 <= c <= rect_c + rect_w):\n      # now check it is NOT within rectangle\n      if (rect_r <= r < rect_r + rect_h) and (rect_c  <= c < rect_c + rect_w):\n          return False # inside the rectangle\n      else:\n        return True # adjacent\n    else:\n      return False\n\n\ndef transform(input_grid):\n    # Initialize output grid as a copy of the input grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Find azure rectangles\n    rectangles = find_azure_rectangles(input_grid)\n\n    # Find single pixels\n    single_pixels = find_single_pixels(input_grid)\n    \n    # Create a set of all azure rectangle cells for easy checking\n    rectangle_cells = set()\n    for rect_r, rect_c, rect_h, rect_w in rectangles:\n        for r in range(rect_r, rect_r + rect_h):\n            for c in range(rect_c, rect_c + rect_w):\n              rectangle_cells.add((r,c))\n\n    moved_pixels = set()\n\n    # Iterate through each azure rectangle\n    for rect_r, rect_c, rect_h, rect_w in rectangles:\n        # Find valid adjacent positions around the current rectangle\n        adjacent_positions = []\n        for r in range(rect_r - 1, rect_r + rect_h + 1):\n            for c in range(rect_c - 1, rect_c + rect_w + 1):\n                if (0 <= r < rows and 0 <= c < cols and  # Within bounds\n                    (r, c) not in rectangle_cells and  # Not part of the rectangle itself\n                    output_grid[r, c] == 0): # and the cell is empty (background)\n                  adjacent_positions.append((r,c))\n\n        # Move adjacent single pixels\n        for r, c in single_pixels:\n              if (r,c) in moved_pixels:\n                continue # skip pixels already moved\n\n              # Check if near the rectangle\n              if is_adjacent_to_rectangle(r,c, rect_r, rect_c, rect_h, rect_w):\n                  # find an adjacent spot and move\n                  if len(adjacent_positions) > 0:\n                    adj_r, adj_c = adjacent_positions.pop(0)\n                    output_grid[adj_r, adj_c] = input_grid[r,c]\n                    output_grid[r,c] = 0 # clear original\n                    moved_pixels.add((adj_r, adj_c)) # record as moved\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5220,
    "candidates_token_count": 1260,
    "total_token_count": 6480,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 15.770509
}