observations:
  - example: 1
    input:
      object_bounding_box: [[4, 5], [2, 3]]  # [min_row, max_row], [min_col, max_col]
      unique_pixel_location: [4, 3] # row, col - relative to grid origin, not object
      core_color: 4
      unique_color: 2
    output:
      object_bounding_box: [[0, 5], [2, 8]]
      unique_pixel: False # Indicates if there is unique color in object
      shape: "9-sliced"

  - example: 2
    input:
      object_bounding_box: [[1, 2], [2, 3]]
      unique_pixel_location: [2, 3]
      core_color: 3
      unique_color: 2
    output:
      object_bounding_box: [[1, 8], [2, 8]]
      unique_pixel: False
      shape: "9-sliced"

  - example: 3
    input:
      object_bounding_box: [[3, 4], [3, 4]]
      unique_pixel_location: None  # No unique pixel.  Equal number of 6 and 2.
      core_color: 2 #first of the colors
      unique_color: 6  #  NOTE, THIS IS A BUG.  there is not unique color
    output:
      object_bounding_box: [[0, 8], [0, 8]]
      unique_pixel: False
      shape: "9-sliced"

  - example: 4
    input:
      object_bounding_box: [[3, 4], [3, 4]]
      unique_pixel_location: [4, 4]
      core_color: 2
      unique_color: 7
    output:
      object_bounding_box: [[0, 8], [0, 8]]
      unique_pixel: False
      shape: "9-sliced"

  - general:
      - "The input grids always contain a single connected object defined by non-zero pixels"
      - "A 'core_color' is identified as the most frequent color in the object, or when counts are the same the non-zero value."
      - "Output is created by expanding the grid into a 9x9 slice based on input object box"
      - "There is almost always one unique color in the input object - except when colors are balanced"
      - "The core color forms the central 3x3 of the object in the 9-sliced output."
      - "If the unique color is at an edge of the object, then the object is mirrored along that edge"