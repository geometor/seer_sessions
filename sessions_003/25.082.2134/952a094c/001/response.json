{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify the horizontal line:** Find the longest horizontal line of contiguous pixels of the same color. Note its row index and color.\n\n2.  **Identify single pixels:** Locate all single pixels (pixels not connected to any other non-black pixel).\n\n3.  **Iterate through single pixels:** For each single pixel:\n    *   Calculate mirrored column. Original columns position from the right edge, becomes the mirrored column position from the left edge.\n    *   If original pixel row < horizontal_line row, then the pixel moves to `horizontal_line row - 1`.\n    *   If original pixel row > horizontal_line row, then the pixel moves to `horizontal_line row + 1`.\n    * The color of the moved pixel, remains unchanged.\n\n4.  **Construct the output grid:** Create a new grid with the same dimensions as the input. Copy the identified horizontal line to its original position. Place the moved pixels in their new positions. All other cells in the output grid are black (0).\n\"\"\"\n\nimport numpy as np\n\ndef find_horizontal_line(grid):\n    \"\"\"Finds the longest horizontal line of contiguous pixels of the same color.\"\"\"\n    rows, cols = grid.shape\n    longest_line = []\n    longest_line_row = -1\n    longest_line_color = 0\n\n    for r in range(rows):\n        current_line = []\n        for c in range(cols):\n            if grid[r, c] != 0:\n                current_line.append((r, c, grid[r,c]))\n            else:\n                if len(current_line) > len(longest_line):\n                    longest_line = current_line\n                    longest_line_row = r\n                    if(len(current_line) > 0):\n                        longest_line_color = current_line[0][2] #color\n                current_line = []\n        if len(current_line) > len(longest_line):\n            longest_line = current_line\n            longest_line_row = r\n            if(len(current_line) > 0):\n                longest_line_color = current_line[0][2]\n    return longest_line, longest_line_row, longest_line_color\n\ndef is_single_pixel(grid, r, c):\n    \"\"\"Checks if a pixel is a single, isolated pixel (not part of a larger object).\"\"\"\n    rows, cols = grid.shape\n    if grid[r, c] == 0:\n        return False\n\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i == 0 and j == 0:\n                continue\n            nr, nc = r + i, c + j\n            if 0 <= nr < rows and 0 <= nc < cols and grid[nr, nc] != 0:\n                return False  # Connected to another non-black pixel\n    return True\n\ndef find_single_pixels(grid):\n    \"\"\"get a list of single pixels\"\"\"\n    rows, cols = grid.shape\n    single_pixels = []\n    for r in range(rows):\n        for c in range(cols):\n            if is_single_pixel(grid, r, c):\n                single_pixels.append( (r,c, grid[r,c]) )\n    return single_pixels\n\ndef mirrored_column(c, cols):\n    \"\"\"calculate the mirrored column\"\"\"\n    return cols - 1 - c\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the rules described above.\"\"\"\n    grid = np.array(input_grid)\n    rows, cols = grid.shape\n    output_grid = np.zeros((rows, cols), dtype=int)\n\n    # 1. Identify the horizontal line\n    longest_line, line_row, line_color = find_horizontal_line(grid)\n    for r, c, _ in longest_line:\n        output_grid[r, c] = line_color\n\n    # 2. Identify single pixels\n    single_pixels = find_single_pixels(grid)\n    \n    # 3. Iterate through single pixels and move them\n    for r, c, color in single_pixels:\n        new_col = mirrored_column(c, cols)\n        if r < line_row:\n            new_row = line_row - 1\n        else:\n            new_row = line_row + 1\n\n        if 0 <= new_row < rows and 0 <= new_col < cols:\n            output_grid[new_row, new_col] = color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2965,
    "candidates_token_count": 1056,
    "total_token_count": 4021,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 12.489434
}