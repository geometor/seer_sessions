{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify the longest horizontal line:** Find the longest horizontal line of contiguous pixels of the same color in the input grid. Note the row index, color, and length of this line.\n\n2.  **Identify all non-black pixels *not* part of the longest horizontal line:** Find all pixels in the input grid that meet these conditions:\n    *   Their color is not black (0).\n    *   They are not part of the longest horizontal line identified in step 1.\n\n3. **Reflect non-line Pixels**: For each non-line pixel identified in step 2, reflect them:\n   *   Mirror Column: Calculate the mirrored column index (`mirrored_col`): The column index mirrored across the center of the grid.  This is calculated as `grid_width - 1 - original_column`.\n    *    Calculate `new_row` based on the original row and the horizontal line's row:\n        *    If the single pixel's original row is *above* the horizontal line, its `new_row` is the same distance *below* the horizontal line.\n        *   If the single pixel's original row is *below* the horizontal line, its `new_row` is the same distance *above* the horizontal line.\n        * If the pixel's original row is *on* the horizontal line it is not moved, and ignored.\n   *  Retain the non-line pixel's original color.\n\n4.  **Create Output:** Construct a new grid (initially all black) with the same dimensions as the input grid.\n    *   Place the horizontal line in its original position, color and length.\n    *   Copy each reflected non-line pixel to its `new_row` and `mirrored_col` in the output grid, keeping the pixel color.\n\n5. **Ignore out of bounds:** If a non-line pixel reflection results in the pixel exceeding the bounds of the output grid, then ignore it.\n\"\"\"\n\nimport numpy as np\n\ndef find_horizontal_line(grid):\n    \"\"\"Finds the longest horizontal line of contiguous pixels of the same color.\"\"\"\n    rows, cols = grid.shape\n    longest_line = []\n    longest_line_row = -1\n    longest_line_color = 0\n\n    for r in range(rows):\n        current_line = []\n        for c in range(cols):\n            if grid[r, c] != 0:\n                current_line.append((r, c, grid[r,c]))\n            else:\n                if len(current_line) > len(longest_line):\n                    longest_line = current_line\n                    longest_line_row = r\n                    if(len(current_line) > 0):\n                        longest_line_color = current_line[0][2] #color\n                current_line = []\n        if len(current_line) > len(longest_line):\n            longest_line = current_line\n            longest_line_row = r\n            if(len(current_line) > 0):\n                longest_line_color = current_line[0][2]\n    return longest_line, longest_line_row, longest_line_color\n\ndef find_non_line_pixels(grid, longest_line):\n    \"\"\"Find all non-black pixels that are NOT part of the longest horizontal line\"\"\"\n    rows, cols = grid.shape\n    non_line_pixels = []\n    longest_line_coords = set((r, c) for r, c, _ in longest_line)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r,c] != 0 and (r,c) not in longest_line_coords:\n                non_line_pixels.append( (r, c, grid[r,c]) )\n    return non_line_pixels\n    \n\ndef mirrored_column(c, cols):\n    \"\"\"calculate the mirrored column\"\"\"\n    return cols - 1 - c\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the rules described above.\"\"\"\n    grid = np.array(input_grid)\n    rows, cols = grid.shape\n    output_grid = np.zeros((rows, cols), dtype=int)\n\n    # 1. Find Horizontal Line\n    longest_line, line_row, line_color = find_horizontal_line(grid)\n    for r, c, _ in longest_line:\n        output_grid[r, c] = line_color\n\n    # 2. Find non-line Pixels\n    non_line_pixels = find_non_line_pixels(grid, longest_line)\n\n    # 3. Reflect non-line Pixels\n    for r, c, color in non_line_pixels:\n        # Calculate mirrored column\n        new_col = mirrored_column(c, cols)\n\n        #Calculate new row, based on distance from horizontal line\n        distance = r - line_row\n        new_row = line_row - distance\n\n        # 4. Create Output (with boundary check)\n        if 0 <= new_row < rows and 0 <= new_col < cols:\n            output_grid[new_row, new_col] = color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7789,
    "candidates_token_count": 1189,
    "total_token_count": 8978,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 15.46283
}