{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid into an output grid by identifying horizontal blue lines, extracting corner pixels from the regions defined by these lines, and arranging these pixels in a specific pattern in the output grid. The output grid has two rows for each region, with corners arranged as pairs.\n\"\"\"\n\nimport numpy as np\n\ndef find_blue_lines(grid):\n    \"\"\"Finds the row indices of all horizontal blue lines.\"\"\"\n    blue_lines = []\n    for i, row in enumerate(grid):\n        if all(pixel == 1 for pixel in row):\n            blue_lines.append(i)\n    return blue_lines\n\ndef get_corner_pixels(grid, region_start, region_end):\n    \"\"\"Gets the corner pixels of a region defined by start and end row indices.\"\"\"\n    height, width = grid.shape\n\n    # Handle edge cases where regions are at the very top or bottom\n    top_left = grid[region_start, 0] if region_start >= 0 else 0\n    top_right = grid[region_start, width - 1] if region_start >= 0 else 0\n    bottom_left = grid[region_end -1, 0] if region_end <= height  else 0\n    bottom_right = grid[region_end -1, width - 1] if region_end <= height else 0\n    \n    return top_left, top_right, bottom_left, bottom_right\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the defined rules.\"\"\"\n    input_grid = np.array(input_grid)\n    blue_line_rows = find_blue_lines(input_grid)\n    num_regions = len(blue_line_rows) + 1\n    height, width = input_grid.shape\n\n    output_rows = []\n\n    # Handle the region above the first blue line\n    top_left, top_right, _, _ = get_corner_pixels(input_grid, 0, blue_line_rows[0] if blue_line_rows else height )\n    if top_left != 0 or top_right != 0:\n        output_rows.append([top_left, top_right])\n        output_rows.append([top_left, top_right])\n\n\n    # Handle regions between blue lines\n    for i in range(len(blue_line_rows) - 1):\n        top_left, top_right, _, _ = get_corner_pixels(input_grid, blue_line_rows[i] + 1, blue_line_rows[i+1])\n        if top_left != 0 or top_right != 0:\n            output_rows.append([top_left, top_right])\n            output_rows.append([top_left, top_right])\n\n\n    #Handle region below last blue line.\n    if blue_line_rows:\n      _, _, bottom_left, bottom_right = get_corner_pixels(input_grid, blue_line_rows[-1]+1, height)\n    else: #if no blue lines, last region is entire grid.\n      _, _, bottom_left, bottom_right = get_corner_pixels(input_grid, 0, height)\n    if bottom_left != 0 or bottom_right != 0:\n        output_rows.append([bottom_left, bottom_right])\n        output_rows.append([bottom_left, bottom_right])\n\n    if len(output_rows) == 0:\n        return np.zeros((2,2), dtype=int).tolist()\n\n    output_grid = np.array(output_rows)\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6505,
    "candidates_token_count": 837,
    "total_token_count": 7342,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.120132
}