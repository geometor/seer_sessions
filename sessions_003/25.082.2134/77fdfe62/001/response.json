{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid into an output grid by selecting specific corner pixels from regions above and below a horizontal blue line, and arranging them in a specific pattern.\n\"\"\"\n\nimport numpy as np\n\ndef find_blue_line(grid):\n    \"\"\"Finds the row index of the horizontal blue line.\"\"\"\n    for i, row in enumerate(grid):\n        if all(pixel == 1 for pixel in row):\n            return i\n    return None\n\ndef get_corner_pixels(grid, blue_line_row):\n    \"\"\"Gets the top-left, top-right, bottom-left, and bottom-right corner pixels, excluding the blue line.\"\"\"\n    height, width = grid.shape\n    top_left = grid[0, 0] if blue_line_row > 0 else 0\n    top_right = grid[0, width - 1] if blue_line_row > 0 else 0\n    bottom_left = grid[height - 1, 0] if blue_line_row < height -1 else 0\n    bottom_right = grid[height - 1, width - 1] if blue_line_row < height-1 else 0\n\n    return top_left, top_right, bottom_left, bottom_right\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the defined rules.\"\"\"\n    input_grid = np.array(input_grid)\n    blue_line_row = find_blue_line(input_grid)\n\n    top_left, top_right, bottom_left, bottom_right = get_corner_pixels(input_grid, blue_line_row)\n    \n    # Build the output grid\n    if blue_line_row is not None:\n      output_grid_top = np.array([[top_left, top_right], [top_left, top_right]]) if (top_left !=0 or top_right !=0) else np.array([[0,0],[0,0]])\n      output_grid_bottom = np.array([[bottom_left, bottom_right], [bottom_left, bottom_right]]) if (bottom_left != 0 or bottom_right != 0) else np.array([[0, 0], [0, 0]])\n\n      # Ensure consistent dimensions before concatenation\n      if output_grid_top.size == 0:\n          output_grid = output_grid_bottom\n      elif output_grid_bottom.size == 0:\n            output_grid = output_grid_top\n      else:\n        if output_grid_top.shape[1] < output_grid_bottom.shape[1]:\n          output_grid_top = np.pad(output_grid_top, ((0,0),(0,output_grid_bottom.shape[1]-output_grid_top.shape[1])), 'constant')\n        elif output_grid_top.shape[1] > output_grid_bottom.shape[1]:\n          output_grid_bottom = np.pad(output_grid_bottom, ((0,0),(0, output_grid_top.shape[1]-output_grid_bottom.shape[1])), 'constant')\n        output_grid = np.vstack([output_grid_top, output_grid_bottom])\n    else:  # Handle cases where there's no blue line.\n      output_grid = np.zeros((2,2), dtype=int)\n\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2485,
    "candidates_token_count": 782,
    "total_token_count": 3267,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.820381
}