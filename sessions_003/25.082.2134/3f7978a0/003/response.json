{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Target Columns:** Examine each column of the input grid. A column is a \"target column\" if it contains azure (8) and gray (5) pixels, where the 8s and 5s alternate. The column can start with either 8 or 5. 0s can be present in the column.\n\n2.  **Select Target Columns**: Create a new grid containing only the target columns identified in step 1. Maintain their original order.\n\n3. **Crop Rows**: Find the first row and last row in the new grid where a non-black (non-0) pixel appears. Remove all rows before the first and after the last.\n\n4.  **Compress Columns:** Remove any columns that are entirely black (0) from this cropped grid.\n\"\"\"\n\nimport numpy as np\n\ndef _is_target_column(column):\n    \"\"\"Checks if a column contains alternating 8s and 5s (can contain 0s).\"\"\"\n    non_zero_elements = [x for x in column if x != 0]\n    if not all(x in [5, 8] for x in non_zero_elements):\n        return False\n    for i in range(len(non_zero_elements) - 1):\n        if non_zero_elements[i] == non_zero_elements[i+1]:\n            return False\n    return len(non_zero_elements) > 0\n\ndef _crop_rows(grid):\n    \"\"\"Removes top and bottom rows that are all zeros.\"\"\"\n    if grid.size == 0:  # Handle empty grid\n        return grid\n    rows_with_content = [i for i in range(grid.shape[0]) if not np.all(grid[i,:] == 0)]\n    if not rows_with_content:\n        return np.zeros((0, grid.shape[1]), dtype=int)\n    first_row = rows_with_content[0]\n    last_row = rows_with_content[-1]\n    return grid[first_row:last_row+1, :]\n\ndef transform(input_grid):\n    # Convert to numpy array\n    input_grid = np.array(input_grid)\n\n    # 1. Identify Target Columns\n    num_cols = input_grid.shape[1]\n    target_column_indices = []\n    for j in range(num_cols):\n        if _is_target_column(input_grid[:, j]):\n            target_column_indices.append(j)\n\n    # 2. Select Target Columns\n    selected_grid = input_grid[:, target_column_indices]\n\n    # 3. Crop Rows\n    cropped_grid = _crop_rows(selected_grid)\n\n    # 4. Compress Columns (remove all-zero columns)\n    if cropped_grid.size == 0:  # Handle empty grid\n        output_grid = np.zeros((0, 0), dtype=int)\n    else:\n       compressed_columns = []\n       for j in range(cropped_grid.shape[1]):\n          if not np.all(cropped_grid[:,j] == 0):\n            compressed_columns.append(cropped_grid[:,j])\n\n       if (len(compressed_columns) > 0):\n           output_grid = np.stack(compressed_columns, axis=1)\n       else:\n           output_grid = np.zeros((0,0), dtype=int)\n\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6390,
    "candidates_token_count": 791,
    "total_token_count": 7181,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.947704
}