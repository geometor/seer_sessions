{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Find all contiguous groups of non-white pixels in the input grid. Each group is an object.\n2.  **Find Center:** Calculate the center (row, column) of each object by averaging the row and column coordinates of all pixels within the object.\n3.  **Mirror Pixels:** For *each* pixel in *every* object:\n    *   Calculate its reflected position across the object's center row.\n    *   Calculate its reflected position across the object's center column.\n    *    Set the pixel at this reflected position in output grid to the color of pixel group\n    *   Draw the original object in the output grid.\n\"\"\"\n\nimport numpy as np\n\ndef find_pixel_groups(grid):\n    \"\"\"Finds contiguous groups of non-white pixels.\"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n    groups = []\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def dfs(r, c, color, group):\n        if not is_valid(r, c) or visited[r, c] or grid[r, c] != color:\n            return\n        visited[r, c] = True\n        group.append((r, c))\n        for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            dfs(r + dr, c + dc, color, group)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and not visited[r, c]:\n                group = []\n                dfs(r, c, grid[r, c], group)\n                groups.append((grid[r,c], group))  # Store color and group\n    return groups\n\ndef find_center(group):\n    \"\"\"Calculates the center of a pixel group.\"\"\"\n    min_r, min_c = float('inf'), float('inf')\n    max_r, max_c = float('-inf'), float('-inf')\n\n    for r, c in group:\n        min_r = min(min_r, r)\n        max_r = max(max_r, r)\n        min_c = min(min_c, c)\n        max_c = max(max_c, c)\n\n    center_r = (min_r + max_r) // 2\n    center_c = (min_c + max_c) // 2\n    return center_r, center_c\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n    groups = find_pixel_groups(input_grid)\n\n    # change output pixels\n    for color, group in groups:\n        center_r, center_c = find_center(group)\n\n        for r, c in group:\n            # Reflect across center row and column\n            reflected_r = 2 * center_r - r\n            reflected_c = 2 * center_c - c\n\n            # Set mirrored pixels in output grid\n            if 0 <= reflected_r < output_grid.shape[0] and 0 <= reflected_c < output_grid.shape[1]:\n                output_grid[reflected_r, reflected_c] = color\n            if 0 <= r < output_grid.shape[0] and 0 <= reflected_c < output_grid.shape[1]:\n                output_grid[r, reflected_c] = color\n            if 0 <= reflected_r < output_grid.shape[0] and 0 <= c < output_grid.shape[1]:\n                output_grid[reflected_r, c] = color\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4681,
    "candidates_token_count": 878,
    "total_token_count": 5559,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.638874
}