{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Pixel Groups:** Locate contiguous groups of non-white pixels in the input grid.\n2.  **Find the \"Center\":** Find center of group by looking at its x and y bounds.\n3. **Mirror based on the object:**\n    - extend the group to create an L shape and add this mirrored in the row and col, only for orange, green and maroon, but not yellow, azure or magenta.\n\"\"\"\n\nimport numpy as np\n\ndef find_pixel_groups(grid):\n    \"\"\"Finds contiguous groups of non-white pixels.\"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n    groups = []\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def dfs(r, c, color, group):\n        if not is_valid(r, c) or visited[r, c] or grid[r, c] != color:\n            return\n        visited[r, c] = True\n        group.append((r, c))\n        for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            dfs(r + dr, c + dc, color, group)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and not visited[r, c]:\n                group = []\n                dfs(r, c, grid[r, c], group)\n                groups.append((grid[r,c], group))  # Store color and group\n    return groups\n\ndef find_center(group):\n    \"\"\"Calculates the center of a pixel group.\"\"\"\n    min_r, min_c = float('inf'), float('inf')\n    max_r, max_c = float('-inf'), float('-inf')\n\n    for r, c in group:\n        min_r = min(min_r, r)\n        max_r = max(max_r, r)\n        min_c = min(min_c, c)\n        max_c = max(max_c, c)\n\n    center_r = (min_r + max_r) // 2\n    center_c = (min_c + max_c) // 2\n    return center_r, center_c\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n    groups = find_pixel_groups(input_grid)\n\n    # change output pixels\n    for color, group in groups:\n        center_r, center_c = find_center(group)\n\n        if color in [7, 3, 9]:  # Orange, Green, or Maroon\n            if len(group) > 1 : # more than one pixel in the group\n                for r, c in group:\n                    if (r,c) != (center_r, center_c):\n                        output_grid[r, center_c] = color\n                        output_grid[center_r,c] = color\n            output_grid[center_r,center_c] = color\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2864,
    "candidates_token_count": 740,
    "total_token_count": 3604,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.513276
}