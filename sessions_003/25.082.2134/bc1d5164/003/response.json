{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe output grid always has 3 columns: the leftmost, center, and rightmost columns of the input grid.\nThe rows included in the output grid are determined by the rows where there is a non-zero pixel in the\nleftmost, center, or rightmost columns of the input grid. Only these selected rows are kept, in their\noriginal order, to produce the output grid.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by selecting specific columns and rows based on non-zero values.\n\n    Args:\n        input_grid: A 2D numpy array representing the input grid.\n\n    Returns:\n        A 2D numpy array representing the output grid.\n    \"\"\"\n    input_np = np.array(input_grid)\n    num_cols = input_np.shape[1]\n\n    # 1. Identify Key Columns\n    left_col_idx = 0\n    right_col_idx = num_cols - 1\n    center_col_idx = num_cols // 2\n\n    # Handle edge cases where there might be fewer than 3 columns\n    if num_cols == 1:\n      column_indices = [left_col_idx]\n    elif num_cols == 2:\n      column_indices = [left_col_idx, right_col_idx]\n    else:\n      column_indices = [left_col_idx, center_col_idx, right_col_idx]\n\n\n    # 2. Identify Key Rows\n    key_rows = set()\n    for row_idx in range(input_np.shape[0]):\n        for col_idx in column_indices:\n            if input_np[row_idx, col_idx] != 0:\n                key_rows.add(row_idx)\n                break  # Move to the next row once a non-zero is found\n\n    # 3. Construct Output Grid\n    # First, select the key columns\n    temp_grid = input_np[:, column_indices]\n\n    # Then, select only the key rows from the temporary grid, preserving order\n    sorted_key_rows = sorted(list(key_rows))\n    output_grid = temp_grid[sorted_key_rows]\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4642,
    "candidates_token_count": 519,
    "total_token_count": 5161,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.287659
}