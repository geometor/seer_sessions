{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nExtracts a subgrid based on column and row criteria. The output grid always includes the leftmost, center, and rightmost columns\nof the input grid (or fewer if the input grid has fewer than 3 columns). A row is included in the output grid if and only if,\nfor each of the selected key columns, all non-zero pixels within that row in the corresponding column of the input grid have\nthe same color/value.\n\"\"\"\n\nimport numpy as np\n\ndef _get_key_columns(input_grid):\n    \"\"\"Helper function to get the key column indices.\"\"\"\n    num_cols = len(input_grid[0])\n    if num_cols == 1:\n        return [0]\n    elif num_cols == 2:\n        return [0, 1]\n    else:\n        return [0, num_cols // 2, num_cols - 1]\n\ndef _check_row(input_grid, row_index, key_columns):\n    \"\"\"Helper function to check if a row should be selected.\"\"\"\n    for col_index in key_columns:\n        # Extract non-zero pixels in the current key column for the given row\n        values = []\n        for r_idx in range(len(input_grid)):\n             if r_idx == row_index:\n                if input_grid[r_idx][col_index] != 0:\n                    values.append(input_grid[r_idx][col_index])\n\n        # Check if all non-zero values are the same\n        if len(values) > 0:\n            if not all(v == values[0] for v in values):\n              return False\n    return True\n    \n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by selecting specific columns and rows based on criteria.\n\n    Args:\n        input_grid: A 2D list representing the input grid.\n\n    Returns:\n        A 2D list representing the output grid.\n    \"\"\"\n    input_np = np.array(input_grid)\n\n    # 1. Identify Key Columns\n    key_columns = _get_key_columns(input_grid)\n\n    # 2. Select Key Columns Subgrid\n    intermediate_grid = input_np[:, key_columns].tolist()\n\n    # 3. Select Rows\n    selected_rows = []\n    for row_idx in range(len(input_grid)):\n        if _check_row(input_grid, row_idx, key_columns):\n            selected_rows.append(row_idx)\n            \n    # 4. Construct Output Grid\n    output_grid = []\n    for row_idx in selected_rows:\n            output_grid.append(intermediate_grid[row_idx]) #access via index because it could be empty\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7087,
    "candidates_token_count": 638,
    "total_token_count": 7725,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.153014
}