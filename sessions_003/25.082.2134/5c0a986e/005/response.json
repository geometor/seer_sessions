{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by expanding 2x2 colored blocks (blue=1, red=2) into diagonal lines. Blue lines expand up-left from the top-left corner of the blue block and down-right from the bottom-right corner. Red lines expand down-right from the bottom-right corner of the red block and up-left from the top-left. Blue takes precedence.\n\"\"\"\n\nimport numpy as np\n\ndef find_blocks(grid):\n    \"\"\"Finds 2x2 blocks of colors 1 and 2 in the grid.\"\"\"\n    blocks = []\n    for r in range(grid.shape[0] - 1):\n        for c in range(grid.shape[1] - 1):\n            if grid[r, c] == grid[r+1, c] == grid[r, c+1] == grid[r+1, c+1] and grid[r, c] in (1, 2):\n                blocks.append((grid[r, c], (r, c)))\n    return blocks\n\ndef draw_diagonal(grid, start_row, start_col, color, direction):\n    \"\"\"Draws a diagonal line on the grid with the given color and direction.\"\"\"\n    row, col = start_row, start_col\n    while 0 <= row < grid.shape[0] and 0 <= col < grid.shape[1]:\n        if grid[row, col] != 0 and color == 2: #red lines stop\n            break\n\n        grid[row, col] = color\n\n        if direction == \"up-left\":\n            row -= 1\n            col -= 1\n        elif direction == \"down-right\":\n            row += 1\n            col += 1\n        else:\n            return #should not happen\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the rules.\"\"\"\n    output_grid = np.zeros_like(input_grid)\n\n    # Find 2x2 blocks\n    blocks = find_blocks(input_grid)\n\n    # Draw blue diagonals\n    for color, (row, col) in blocks:\n        if color == 1:\n            draw_diagonal(output_grid, row, col, 1, \"up-left\")\n            draw_diagonal(output_grid, row + 1, col + 1, 1, \"down-right\")\n\n    # Draw red diagonals\n    for color, (row, col) in blocks:\n        if color == 2:\n            draw_diagonal(output_grid, row + 1, col + 1, 2, \"down-right\")\n            draw_diagonal(output_grid, row, col, 2, \"up-left\")\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8391,
    "candidates_token_count": 621,
    "total_token_count": 9012,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.04357
}