{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by expanding 2x2 colored blocks (blue=1, red=2) into diagonal lines. Blue lines expand up-left from the top-left corner of the blue block and down-right from the bottom-right corner. Red lines expand down-right from the bottom-right corner of the red block and up-left from the top-left. Blue takes precedence, overwriting red. Red lines stop at non-black cells.\n\"\"\"\n\nimport numpy as np\n\ndef find_blocks(grid):\n    \"\"\"Finds 2x2 blocks of colors 1 and 2 in the grid.\"\"\"\n    blocks = []\n    for r in range(grid.shape[0] - 1):\n        for c in range(grid.shape[1] - 1):\n            if grid[r, c] == grid[r+1, c] == grid[r, c+1] == grid[r+1, c+1] and grid[r, c] in (1, 2):\n                blocks.append((grid[r, c], (r, c)))\n    return blocks\n\ndef draw_diagonal(grid, start_row, start_col, color, direction):\n    \"\"\"Draws a diagonal line on the grid with the given color and direction. Stops one cell short of boundary.\"\"\"\n    row, col = start_row, start_col\n    while True:\n        if not (0 <= row < grid.shape[0] and 0 <= col < grid.shape[1]):\n            break\n        \n        next_row = row -1 if direction == \"up-left\" else row + 1\n        next_col = col - 1 if direction == \"up-left\" else col + 1\n\n        if not (0 <= next_row < grid.shape[0] and 0 <= next_col < grid.shape[1]):\n            break\n\n        if color == 2 and grid[row,col] != 0:\n            break\n\n\n        grid[row, col] = color\n\n        row = next_row\n        col = next_col\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the rules.\"\"\"\n    output_grid = np.zeros_like(input_grid)\n\n    # Find 2x2 blocks\n    blocks = find_blocks(input_grid)\n\n    # Draw blue diagonals (overwriting)\n    for color, (row, col) in blocks:\n        if color == 1:\n            draw_diagonal(output_grid, row, col, 1, \"up-left\")\n            draw_diagonal(output_grid, row + 1, col + 1, 1, \"down-right\")\n\n    # Draw red diagonals (stop at non-black cells)\n    for color, (row, col) in blocks:\n        if color == 2:\n            draw_diagonal(output_grid, row, col, 2, \"up-left\")\n            draw_diagonal(output_grid, row + 1, col + 1, 2, \"down-right\")\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4617,
    "candidates_token_count": 698,
    "total_token_count": 5315,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.628815
}