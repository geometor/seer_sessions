{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by expanding 2x2 colored blocks (blue=1, red=2) into diagonal lines. Blue lines expand up-left from the top-left corner of the blue block and down-right from the bottom-right corner. Red lines expand down-right from the bottom-right corner of the red block and up-left from the top-left. Blue takes precedence.\n\"\"\"\n\nimport numpy as np\n\ndef find_blocks(grid):\n    \"\"\"Finds 2x2 blocks of colors 1 and 2 in the grid.\"\"\"\n    blocks = []\n    for r in range(grid.shape[0] - 1):\n        for c in range(grid.shape[1] - 1):\n            if grid[r, c] == grid[r+1, c] == grid[r, c+1] == grid[r+1, c+1] and grid[r, c] in (1, 2):\n                blocks.append((grid[r, c], (r, c)))\n    return blocks\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the rules.\"\"\"\n    output_grid = np.zeros_like(input_grid)\n    \n    # Find 2x2 blocks of color 1 and 2\n    blocks = find_blocks(input_grid)\n\n    # Sort blocks so blue (1) comes before red (2)\n    blocks.sort()\n\n    for color, (row, col) in blocks:\n        if color == 1:  # Blue block\n            #up-left\n            r, c = row, col\n            while r >= 0 and c >= 0:\n                output_grid[r, c] = 1\n                r -= 1\n                c -= 1\n            #down-right\n            r, c = row + 1, col + 1\n            while r < output_grid.shape[0] and c < output_grid.shape[1]:\n                output_grid[r,c] = 1\n                r+=1\n                c+=1\n\n        elif color == 2:  # Red block\n            #down-right\n            r, c = row + 1, col + 1\n            while r < output_grid.shape[0] and c < output_grid.shape[1]:\n                output_grid[r, c] = 2\n                r += 1\n                c += 1\n            #up-left\n            r,c = row, col\n            while r >= 0 and c >= 0:\n                output_grid[r,c] = 2\n                r-=1\n                c-=1\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 14207,
    "candidates_token_count": 610,
    "total_token_count": 14817,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.873942
}