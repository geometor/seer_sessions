{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nReplicate colored sequences within each row based on the presence of zeros to\ntheir right. A colored sequence is a contiguous block of non-zero pixels of the\nsame color. If zeros exist to the right of a sequence, replicate the entire\nsequence to fill the row.\n\"\"\"\n\nimport numpy as np\n\ndef get_colored_sequences(row):\n    \"\"\"Identifies and returns colored sequences in a row.\"\"\"\n    sequences = []\n    i = 0\n    while i < len(row):\n        if row[i] != 0:\n            start = i\n            while i < len(row) and row[i] == row[start]:\n                i += 1\n            sequences.append((start, i - start, tuple(row[start:i])))  # (start_index, length, color_sequence)\n        else:\n            i += 1\n    return sequences\n\ndef replicate_and_fill(row, sequences):\n    \"\"\"Replicates sequences to fill the entire row if zeros are present.\"\"\"\n    new_row = np.copy(row)\n    for start, length, color_sequence in reversed(sequences):\n        has_zeros_right = np.any(row[start + length:] == 0)\n        if has_zeros_right:\n            new_row[start:] = 0  # clear values to fill\n            current_index = start\n            while current_index < len(row):\n                for color in color_sequence:\n                  if current_index < len(row):\n                      new_row[current_index] = color\n                      current_index += 1\n                  else:\n                      break\n\n    return new_row\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = []\n\n    # change output pixels\n    for row in input_grid:\n        sequences = get_colored_sequences(row)\n        new_row = replicate_and_fill(row, sequences)\n        output_grid.append(new_row)\n\n    return np.array(output_grid)\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 9897,
    "candidates_token_count": 463,
    "total_token_count": 10360,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.449408
}