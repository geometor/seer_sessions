{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nCopies a block of non-gray, non-white pixels from above the top-most gray line to the area below the bottom-most gray line. The source block starts to the right of the rightmost vertical gray stripe. The copied block is repeated downwards until the bottom of the output grid is reached.\n\"\"\"\n\nimport numpy as np\n\ndef find_horizontal_gray_lines(grid):\n    \"\"\"Finds the row indices of all horizontal lines of 5s.\"\"\"\n    gray_lines = []\n    for r in range(grid.shape[0]):\n        if np.all(grid[r, :] == 5):\n            gray_lines.append(r)\n    return gray_lines\n\ndef find_rightmost_gray_stripe(grid):\n    \"\"\"Finds the column index of the rightmost vertical stripe of 5s.\"\"\"\n    for c in range(grid.shape[1] - 1, -1, -1):\n        if np.any(grid[:, c] == 5):\n            return c\n    return -1\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of the input_grid\n    output_grid = np.copy(input_grid)\n\n    # Find the horizontal gray lines\n    gray_lines = find_horizontal_gray_lines(input_grid)\n    if len(gray_lines) < 2:\n        return output_grid  # Not enough gray lines for the transformation\n\n    top_gray_line_row = gray_lines[0]\n    bottom_gray_line_row = gray_lines[-1]\n\n    # Find the rightmost vertical gray stripe\n    rightmost_gray_stripe_col = find_rightmost_gray_stripe(input_grid)\n\n    # Define source block dimensions.\n    block_height = top_gray_line_row\n    block_width = input_grid.shape[1] - (rightmost_gray_stripe_col + 1)\n    \n    # if there is nothing to copy - return input as output\n    if block_width <=0 or block_height <= 0:\n        return output_grid\n\n    # Extract the source block.\n    source_block = input_grid[0:block_height, rightmost_gray_stripe_col + 1:]\n\n    # remove any columns that are all zeros from the source block\n    non_zero_cols = np.any(source_block != 0, axis=0)\n    source_block = source_block[:, non_zero_cols]\n    \n    # recalculate the width\n    block_width = source_block.shape[1]\n\n     # if there is nothing to copy - return input as output\n    if block_width <=0:\n        return output_grid\n    \n    # Determine how many times the block can be repeated\n    available_height = output_grid.shape[0] - (bottom_gray_line_row + 1)\n    num_repetitions = available_height // block_height\n\n    # Copy and paste the source block repeatedly.\n    for i in range(num_repetitions):\n        start_row = bottom_gray_line_row + 1 + i * block_height\n        end_row = start_row + block_height\n        output_grid[start_row:end_row, rightmost_gray_stripe_col + 1:rightmost_gray_stripe_col+1+ block_width] = source_block\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7935,
    "candidates_token_count": 783,
    "total_token_count": 8718,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 14.457524
}