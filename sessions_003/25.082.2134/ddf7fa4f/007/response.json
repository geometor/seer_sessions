{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid into an output grid based on seed colors in the first row.\nSeed colors propagate downwards, replacing gray pixels (value 5) within a contiguous block.\nPropagation stops when a non-gray pixel or the grid boundary is encountered.  The propagation\nexpands to orthogonally adjacent pixels (flood fill).\n\"\"\"\n\nimport numpy as np\n\ndef get_seed_colors(grid):\n    \"\"\"\n    Extracts seed colors and their column indices from the first row of the grid.\n    \"\"\"\n    seed_colors = {}\n    for col, value in enumerate(grid[0]):\n        if value != 0:  # 0 is assumed to be the background/black\n            seed_colors[col] = value\n    return seed_colors\n\ndef flood_fill(grid, row, col, seed_color):\n    \"\"\"\n    Recursively fills a contiguous region of gray pixels with the seed color.\n    \"\"\"\n    height, width = grid.shape\n    if row < 0 or row >= height or col < 0 or col >= width or grid[row, col] != 5:\n        return  # Stop if out of bounds or not a gray pixel\n\n    grid[row, col] = seed_color  # Replace gray with seed color\n\n    # Recursively fill adjacent pixels\n    flood_fill(grid, row + 1, col, seed_color)  # Down\n    flood_fill(grid, row - 1, col, seed_color)  # Up\n    flood_fill(grid, row, col + 1, seed_color)  # Right\n    flood_fill(grid, row, col - 1, seed_color)  # Left\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the seed color propagation rule.\n    \"\"\"\n    input_grid = np.array(input_grid)  # Convert to NumPy array\n    output_grid = np.copy(input_grid)\n    height, width = input_grid.shape\n\n    # Identify Seed Colors\n    seed_colors = get_seed_colors(input_grid)\n\n    # Column-Based Propagation with Flood Fill\n    for col, seed_color in seed_colors.items():\n        # Start flood fill from the row below the seed\n        # Check the pixel below.  If it's a 5, start the flood fill from *that* location.\n        if height > 1 and output_grid[1,col] == 5: #seed pixel is always row 0\n            flood_fill(output_grid, 1, col, seed_color)\n        # Handles edge case of single row input\n        elif height > 1:\n            flood_fill(output_grid, 1, col, seed_color)\n\n    return output_grid.tolist()  # return to list format\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8154,
    "candidates_token_count": 637,
    "total_token_count": 8791,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.709255
}