{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Locate all contiguous blocks of pixels with the color red (2) and azure (8).\n2.  **Find Adjacency:** For each red block, determine if there's an adjacent azure block. Adjacency includes directly above, below, left, or right, not diagonal.\n3.  **Duplicate and Transform:**\n    *    Iterate through cells in the input grid.\n    *   If the current cell is Red(2):\n        *   Extend/duplicate the Red colored object towards any immediately adjacent azure object by filling the path between them with red pixels.\n        *   Change one of the duplicated red pixel nearest to color 8 to yellow (4)\n4. **Output:** Return the modified grid.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, color):\n    \"\"\"Finds the coordinates of all pixels of a given color.\"\"\"\n    objects = []\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == color:\n                objects.append((r, c))\n    return objects\n\ndef closest_object(grid, start_coords, target_color):\n     \"\"\"Finds the closest object of the target color, and returns the path\"\"\"\n     rows, cols = grid.shape\n     min_dist = float('inf')\n     closest_coord = None\n\n     target_coords = find_objects(grid, target_color)\n\n     for target in target_coords:\n        dist = abs(target[0] - start_coords[0]) + abs(target[1] - start_coords[1])\n        if dist < min_dist:\n            min_dist = dist\n            closest_coord = target\n\n     if closest_coord == None:\n          return None, None\n\n     # determine path\n     path = []\n     r, c = start_coords\n     tr, tc = closest_coord\n\n     if r != tr: # move vertically\n        step = 1 if tr > r else -1\n        for i in range(r, tr, step):\n             path.append( (i,c))\n\n     if c != tc: #move horizonally\n        step = 1 if tc > c else -1\n        for i in range(c, tc, step):\n             path.append( (r,i))\n             \n     #return path including start\n     return closest_coord, path\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = output_grid.shape\n\n    # Identify red and azure objects\n    red_objects = find_objects(output_grid, 2)\n\n    if not red_objects: # Handle cases where no Red is present.\n        return output_grid\n\n    # Find adjacency and duplicate\n    for red_coord in red_objects:\n\n        closest_azure, path = closest_object(output_grid, red_coord, 8)\n        \n        if closest_azure != None and path!=None:\n\n          for coord in path:\n              output_grid[coord]=2 #duplicate color\n\n          # change to yellow\n          if len(path)>0:\n            #find closest point in the path\n            min_dist = float('inf')\n            closest_to_azure = None\n\n            for p in path:\n              dist = abs(p[0]- closest_azure[0]) + abs(p[1]- closest_azure[1])\n              if dist<min_dist:\n                min_dist = dist\n                closest_to_azure= p\n\n            output_grid[closest_to_azure]=4\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1991,
    "candidates_token_count": 838,
    "total_token_count": 2829,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.465412
}