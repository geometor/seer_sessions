{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Find all red (2) and azure (8) colored objects in the input grid.\n2.  **Iterate through Red Objects**: For each red object, find the closest azure object, and expand the red object towards that azure pixel.\n3. **Path Generation**: The path between them is filled by extending the original red object towards the azure object.\n4.  **Color Transformation**: Change the color of the pixel in the newly created red path that is nearest to the *original* azure object to yellow (4).\n5. **Azure Expansion (Example 2 Specific):** The azure object expands downward. The expansion appears to mirror the expansion of the red object. We'll assume that azure colored objects that neighbor red object expansion also expand downward by the same height.\n6.  **Output:** Return the modified grid.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, color):\n    \"\"\"Finds the coordinates of all pixels of a given color.\"\"\"\n    objects = []\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == color:\n                objects.append((r, c))\n    return objects\n\ndef closest_azure(grid, red_coord, azure_objects):\n    \"\"\"Finds the closest azure object to a given red coordinate.\"\"\"\n    min_dist = float('inf')\n    closest_coord = None\n\n    for azure_coord in azure_objects:\n        dist = abs(azure_coord[0] - red_coord[0]) + abs(azure_coord[1] - red_coord[1])\n        if dist < min_dist:\n            min_dist = dist\n            closest_coord = azure_coord\n    return closest_coord\n    \ndef expand_red(grid, red_coord, closest_azure_coord):\n  \"\"\" expand red object towards closest azure, return path and modified grid\"\"\"\n  output_grid = np.copy(grid)\n  path = []\n  r,c = red_coord\n  tr, tc = closest_azure_coord\n\n  #move vertically\n  if r != tr:\n    step = 1 if tr>r else -1\n    for i in range(r+step, tr+step, step):\n      output_grid[i,c] = 2 #set to red\n      path.append((i,c))\n\n  #move horizontally\n  if c != tc:\n    step = 1 if tc > c else -1\n    for i in range(c+step, tc+step, step):\n      output_grid[r,i] = 2\n      path.append((r,i))\n\n  return output_grid, path\n\ndef get_nearest_to_original(path, azure_objects):\n    \"\"\"\n    Of the points in the path, find the one nearest to the *original*\n    azure object.\n    \"\"\"\n\n    if len(path)==0:\n      return None\n    \n    min_dist = float('inf')\n    nearest_coord = None\n\n    for path_coord in path:\n       for az_coord in azure_objects:\n          dist =  abs(path_coord[0] - az_coord[0]) + abs(path_coord[1] - az_coord[1])\n          if dist<min_dist:\n              min_dist = dist\n              nearest_coord = path_coord\n\n    return nearest_coord\n\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n\n    # Identify red and azure objects\n    red_objects = find_objects(output_grid, 2)\n    azure_objects = find_objects(output_grid, 8)\n    \n    original_azure_objects = azure_objects.copy() #keep track of where azure was originally\n\n    if not red_objects:  # Handle cases where no Red is present.\n        return output_grid\n\n    # Iterate through Red Objects and Expand\n    for red_coord in red_objects:\n        closest_azure_coord = closest_azure(output_grid, red_coord, azure_objects)\n\n        if closest_azure_coord:\n           output_grid, path = expand_red(output_grid, red_coord, closest_azure_coord)\n           \n           #find nearest to original azure and change to yellow\n           nearest_to_original = get_nearest_to_original(path, original_azure_objects)\n           if nearest_to_original is not None:\n             output_grid[nearest_to_original]=4\n\n    # Azure Expansion (Example 2 Specific) - after Red Expansion.\n    for red_coord in red_objects:\n        closest_azure_coord = closest_azure(input_grid, red_coord, original_azure_objects)\n        if closest_azure_coord :\n          _, path = expand_red(input_grid, red_coord, closest_azure_coord)\n          if path:\n            #calculate expansion height (vertical)\n            expansion_height = 0\n            for r, _ in path:\n                if r != red_coord[0]:\n                  expansion_height+=1\n\n            #expand azure downwards.\n            for az_r, az_c in original_azure_objects:\n              for i in range(1,expansion_height+1):\n                if az_r + i < output_grid.shape[0]:\n                  output_grid[az_r+i, az_c] = 8\n                  \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6684,
    "candidates_token_count": 1259,
    "total_token_count": 7943,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 18.07895
}