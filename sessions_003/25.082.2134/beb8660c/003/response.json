{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid by identifying rows with non-black pixels (\"data rows\"), stacking them at the bottom of the output grid, and cyclically shifting non-black pixel values within certain columns to the left. Remaining rows at the top are filled with black pixels.\n\"\"\"\n\nimport numpy as np\n\ndef _is_data_row(row):\n    \"\"\"Checks if a row contains at least one non-black pixel.\"\"\"\n    return np.any(row != 0)\n\ndef _get_data_rows(grid):\n    \"\"\"Extracts and returns data rows and their original indices.\"\"\"\n    data_rows = []\n    indices = []\n    for i, row in enumerate(grid):\n        if _is_data_row(row):\n            data_rows.append(row)\n            indices.append(i)\n    return data_rows, indices\n\ndef _shift_column_values(grid):\n    \"\"\"Cyclically shifts non-black values in each column to the left.\"\"\"\n    grid = np.array(grid)\n    rows, cols = grid.shape\n    shifted_grid = np.copy(grid)\n\n    for j in range(cols):\n        column_values = grid[:, j]\n        non_black_indices = np.where(column_values != 0)[0]\n        non_black_values = column_values[non_black_indices]\n\n        if len(non_black_values) > 0:  # Check if there are non-black values\n          shifted_non_black_values = np.roll(non_black_values, -1)\n          shifted_grid[non_black_indices, j] = shifted_non_black_values\n    return shifted_grid\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the described rule.\"\"\"\n    input_grid = np.array(input_grid)\n    rows, cols = input_grid.shape\n    output_grid = np.zeros_like(input_grid)\n\n    # Get data rows and their original indices\n    data_rows, _ = _get_data_rows(input_grid)\n\n    # Calculate the starting row index for placing data rows at the bottom\n    num_data_rows = len(data_rows)\n    start_row = rows - num_data_rows\n\n    # Place data rows at the bottom of the output grid\n    for i, row in enumerate(data_rows):\n        output_grid[start_row + i, :] = row\n    \n    # Apply cyclic shift to the non-black values in columns\n    output_grid = _shift_column_values(output_grid)\n\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3400,
    "candidates_token_count": 601,
    "total_token_count": 4001,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.154722
}