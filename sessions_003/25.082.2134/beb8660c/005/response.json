{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid by identifying rows with non-black pixels (\"data rows\"), stacking them at the bottom of the output grid, and rotating each block of same-colored pixels to left, and then compress all non-black pixels to the right. Remaining rows at the top are filled with black pixels.\n\"\"\"\n\nimport numpy as np\n\ndef _is_data_row(row):\n    \"\"\"Checks if a row contains at least one non-black pixel.\"\"\"\n    return np.any(row != 0)\n\ndef _get_data_rows(grid):\n    \"\"\"Extracts and returns data rows and their original indices.\"\"\"\n    data_rows = []\n    indices = []\n    for i, row in enumerate(grid):\n        if _is_data_row(row):\n            data_rows.append(row)\n            indices.append(i)\n    return data_rows, indices\n\ndef _rotate_and_compress_row(row):\n    \"\"\"Rotate each continuous block of the same color so the block is moved to the left side.\n    Then compress all to the right.\n    \"\"\"\n    new_row = np.zeros_like(row)\n    if np.all(row == 0):\n        return new_row\n\n    non_black_indices = np.where(row != 0)[0]\n    compressed_row = np.concatenate([np.array([0] * (len(row) - len(non_black_indices))), row[non_black_indices]])\n\n    return compressed_row\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the described rule.\"\"\"\n    input_grid = np.array(input_grid)\n    rows, cols = input_grid.shape\n    output_grid = np.zeros_like(input_grid)\n\n    # Get data rows and their original indices\n    data_rows, _ = _get_data_rows(input_grid)\n\n    # Calculate the starting row index for placing data rows at the bottom\n    num_data_rows = len(data_rows)\n    start_row = rows - num_data_rows\n\n    # Place data rows at the bottom of the output grid\n    modified_data_rows = []\n    for row in data_rows:\n        modified_data_rows.append(_rotate_and_compress_row(row))\n\n\n    for i, row in enumerate(modified_data_rows):\n        output_grid[start_row + i, :] = row\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5524,
    "candidates_token_count": 565,
    "total_token_count": 6089,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.245009
}