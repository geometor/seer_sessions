{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid by reordering rows. Data rows (rows with at least one non-black pixel) are identified, their relative order is preserved, and they are stacked at the bottom of the output grid. The remaining rows at the top are filled with padding (all black pixels).\n\"\"\"\n\nimport numpy as np\n\ndef _is_data_row(row):\n    \"\"\"Checks if a row contains at least one non-black pixel.\"\"\"\n    return np.any(row != 0)\n\ndef _get_data_rows(grid):\n    \"\"\"Extracts and returns data rows from the grid.\"\"\"\n    data_rows = []\n    for row in grid:\n        if _is_data_row(row):\n            data_rows.append(row)\n    return data_rows\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the described rule.\"\"\"\n    input_grid = np.array(input_grid)\n    rows, cols = input_grid.shape\n    output_grid = np.zeros_like(input_grid)\n\n    # Get data rows from the input grid\n    data_rows = _get_data_rows(input_grid)\n\n    # Calculate the starting row index for placing data rows at the bottom\n    num_data_rows = len(data_rows)\n    start_row = rows - num_data_rows\n\n    # Place data rows at the bottom of the output grid\n    for i, row in enumerate(data_rows):\n        output_grid[start_row + i, :] = row\n\n    return output_grid.tolist()\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2066,
    "candidates_token_count": 358,
    "total_token_count": 2424,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 4.972804
}