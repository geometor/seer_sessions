{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Find all contiguous regions of green (3) pixels and red (2) pixels in the input grid. These are considered distinct objects.\n\n2.  **Move and Stack Green Objects:**\n    *   For each column containing green pixels:\n        *   Find the lowest row index (`r`) with a green pixel in that column.\n        *   Starting from row `r` and moving upwards, change any empty (0) cells to green (3).\n        *   Continue until the top of the grid is reached or a cell is encountered with a green object in it already.\n\n3.  **Position Red Object:**\n    *    Identify columns that contain green.\n    *    Find the highest row index with a green pixel (across all columns with a green pixel)\n    *   Position the red object directly *above* the highest row that contains green, maintaining the original shape of the red object. This means the lowest row of the red object will be one row above the highest green row.\n    *    Ensure that red does not overlap any green pixels. Skip the red object if it does not fit above the green.\n\n4.  **Implicit Fill:** Any remaining cells in the output that haven't been filled by the above steps remain empty (0).\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, color):\n    \"\"\"Finds contiguous regions of the specified color.\"\"\"\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n\n    def dfs(row, col):\n        if (row < 0 or row >= grid.shape[0] or col < 0 or col >= grid.shape[1] or\n                visited[row, col] or grid[row, col] != color):\n            return []\n\n        visited[row, col] = True\n        region = [(row, col)]\n\n        region.extend(dfs(row + 1, col))\n        region.extend(dfs(row - 1, col))\n        region.extend(dfs(row, col + 1))\n        region.extend(dfs(row, col - 1))\n        return region\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] == color and not visited[row, col]:\n                objects.append(dfs(row, col))\n    return objects\n\ndef move_and_stack_green_objects(green_objects, output_grid):\n    \"\"\"Moves and stacks green objects upwards.\"\"\"\n\n    # Get all columns that contain any green pixel\n    green_cols = sorted(list(set([c for _, c in np.argwhere(output_grid == 3)])))\n\n    for col in green_cols:\n        # Find the lowest row containing green in this column in the *original* objects\n        lowest_row = -1\n        for green_object in green_objects:\n          for r,c in green_object:\n            if c == col:\n              lowest_row = max(lowest_row, r)\n        \n        # Stack green upwards from the lowest row\n        if lowest_row != -1:  # Ensure there was green in this column\n            target_row = 0\n            for r in range(lowest_row, -1, -1):\n                if output_grid[r, col] == 0:\n                  output_grid[r,col] = 3\n    return\n\ndef position_red_object(red_object, output_grid):\n    \"\"\"Positions the red object above the highest green row, without overlapping.\"\"\"\n   \n    # Find the highest green row\n    green_rows = [r for r, c in np.argwhere(output_grid == 3)]\n    highest_green_row = min(green_rows) if green_rows else output_grid.shape[0] # Default to bottom if no green\n    \n    # Determine red object height\n    red_object_height = max(r for r,_ in red_object) - min(r for r, _ in red_object) + 1\n    \n    # Calculate target top row for red object\n    target_top_row = highest_green_row - red_object_height\n    \n    # Check if red object fits\n    if target_top_row < 0:\n        return  # Red object doesn't fit\n\n    # find original top row\n    min_row = min(r for r,_ in red_object)\n\n    # Calculate offset to maintain shape\n    row_offset = target_top_row - min_row\n\n    # Place the red object\n    for r, c in red_object:\n        if 0 <= r + row_offset < output_grid.shape[0]:\n            output_grid[r + row_offset, c] = 2\n\ndef transform(input_grid):\n  # initialize output_grid\n  output_grid = np.zeros_like(input_grid)\n\n  # find green objects\n  green_objects = find_objects(input_grid, 3)\n\n  # pre-fill output grid to account for stacking\n  for green_object in green_objects:\n    for r,c in green_object:\n      output_grid[r,c] = 3\n\n  # move and stack green\n  move_and_stack_green_objects(green_objects, output_grid)\n  \n  # find red objects\n  red_objects = find_objects(input_grid, 2)\n\n  # position red\n  for red_object in red_objects:\n    position_red_object(red_object, output_grid)\n\n  return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8473,
    "candidates_token_count": 1274,
    "total_token_count": 9747,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 22.115707
}