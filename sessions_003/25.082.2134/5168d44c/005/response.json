{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Locate all contiguous regions (objects) of green (3) and red (2) pixels in the input grid.\n2.  **Move Green Objects:**\n    *   For each green object, move it upwards.\n    *   Fill all empty (0) cells directly above the green object's original position with green (3).\n    *    If, during the upward movement, a green object encounters another green object, they merge into a single, larger green object. Continue until no empty spaces above\n3.  **Move Red Objects:**\n      * Determine the lowest row occupied by any green pixels in the grid after the green object movement\n      * Find the topmost row previously occupied by the red object.\n      * Position the red object starting one row below the lowest green row.\n      * If there are no green objects, leave the red object in its original position.\n4.  **Fill Remaining Spaces:** Any remaining empty cells in the output grid should be filled with 0.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, color):\n    \"\"\"Finds contiguous regions of the specified color.\"\"\"\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n\n    def dfs(row, col):\n        if (row < 0 or row >= grid.shape[0] or col < 0 or col >= grid.shape[1] or\n                visited[row, col] or grid[row, col] != color):\n            return []\n\n        visited[row, col] = True\n        region = [(row, col)]\n\n        region.extend(dfs(row + 1, col))\n        region.extend(dfs(row - 1, col))\n        region.extend(dfs(row, col + 1))\n        region.extend(dfs(row, col - 1))\n        return region\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] == color and not visited[row, col]:\n                objects.append(dfs(row, col))\n    return objects\n\ndef move_green_objects(green_objects, output_grid):\n    \"\"\"Moves green objects upwards, filling blank cells and merging.\"\"\"\n    for green_object in green_objects:\n        # Get columns occupied by the green object\n        cols = [c for _, c in green_object]\n        min_col = min(cols)\n        max_col = max(cols)\n        \n        # Find the highest available row for each column\n        for c in range(min_col, max_col + 1):\n            target_row = 0\n            for r in range(output_grid.shape[0]):\n                if output_grid[r, c] == 0:\n                    target_row = r\n                else:\n                    break\n\n            # Fill the column up to target_row with green\n            for r in range(target_row, -1, -1):\n                if any((r,c) in go for go in green_objects):\n                    break\n                if output_grid[r,c] == 0:\n                  output_grid[r,c] = 3\n                \n        # place original object        \n        for r,c in green_object:\n          if output_grid[r,c] == 0:\n            output_grid[r,c] = 3\n    return\n\ndef move_red_object(red_object, output_grid):\n    \"\"\"Positions the red object below the lowest green row.\"\"\"\n    \n    #find lowest green row\n    green_rows = [r for r, c in np.argwhere(output_grid == 3)]\n    lowest_green_row = max(green_rows) if green_rows else -1\n    \n    # find original top row\n    min_row = min(r for r,_ in red_object)\n    \n    # calculate offset to maintain shape\n    row_offset = lowest_green_row + 1 - min_row\n\n    # Place the red object\n    for r, c in red_object:\n      if 0 <= r + row_offset < output_grid.shape[0]:\n        output_grid[r + row_offset, c] = 2\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.zeros_like(input_grid)\n\n    # find green objects\n    green_objects = find_objects(input_grid, 3)\n\n    # move green objects\n    move_green_objects(green_objects, output_grid)\n    \n    # find red objects\n    red_objects = find_objects(input_grid, 2)\n    \n    # move red object\n    for red_object in red_objects:\n        move_red_object(red_object, output_grid)\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7951,
    "candidates_token_count": 1111,
    "total_token_count": 9062,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 19.465737
}