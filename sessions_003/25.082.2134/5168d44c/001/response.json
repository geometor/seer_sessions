{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Locate all contiguous regions of red (2) pixels, green (3) pixels, and white/blank (0) pixels.\n2.  **Prioritize Green:**  Isolate the green pixels.\n3.  **Vertical Shift (Green):** Move all green pixels upwards as far as possible, stopping when they reach the top edge of the grid or encounter another non-white pixel.\n4.  **Vertical Shift (red):** shift the red block down, stopping when the top most pixel is one row above the original top most position\n5. **Consolidate:** coalesce adjacent same color cells to be connected\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, color):\n    \"\"\"Finds contiguous regions of the specified color.\"\"\"\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n\n    def dfs(row, col):\n        if (row < 0 or row >= grid.shape[0] or col < 0 or col >= grid.shape[1] or\n                visited[row, col] or grid[row, col] != color):\n            return []\n\n        visited[row, col] = True\n        region = [(row, col)]\n\n        region.extend(dfs(row + 1, col))\n        region.extend(dfs(row - 1, col))\n        region.extend(dfs(row, col + 1))\n        region.extend(dfs(row, col - 1))\n        return region\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] == color and not visited[row, col]:\n                objects.append(dfs(row, col))\n    return objects\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.zeros_like(input_grid)\n\n    # Identify green pixels\n    green_pixels = find_objects(input_grid, 3)\n\n    # shift green pixels up\n    for green_pixel_group in green_pixels: #each green pixel is in own group\n      for r, c in green_pixel_group:\n        # Move the green pixel upwards as far as possible.\n        new_row = r\n        while new_row > 0 and output_grid[new_row - 1, c] == 0:\n            new_row -= 1\n        output_grid[new_row, c] = 3\n\n    # find red blocks\n    red_blocks = find_objects(input_grid, 2)\n   \n    # shift red blocks\n    for red_block in red_blocks:\n        #find top most row of this red block\n        min_row = min(r for r, _ in red_block)\n        \n        #shift red block down one from original, if space\n        if (min_row + 1) < input_grid.shape[0]: #check within bounds\n           target_row = min_row+1\n           \n           #check for conflicts\n           conflict = False\n           for r,c in red_block:\n              if output_grid[r - min_row + target_row,c] != 0:\n                 conflict = True\n                 break\n           \n           if not conflict:\n              for r,c in red_block:\n                 output_grid[r - min_row + target_row, c] = 2\n           else: #cannot shift, put back original block\n              for r,c in red_block:\n                 output_grid[r,c] = 2\n\n        else: #cannot shift, put back original block\n          for r,c in red_block:\n            output_grid[r,c] = 2\n    \n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2555,
    "candidates_token_count": 861,
    "total_token_count": 3416,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 12.329786
}