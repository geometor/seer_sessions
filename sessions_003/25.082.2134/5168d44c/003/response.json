{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Find all contiguous blocks of red (2) and green (3) pixels. Treat each contiguous block as a single object.\n2.  **Green Object Movement:** Move each green object upwards.\n    *   The green object will fill any available blank (0) cells directly *above* its initial row.\n    *   If another green object is above this, it will merge.\n3.  **Red Object Movement:** Move the red object downwards.\n    *  Determine the top row of the red object in the original input.\n    *   Shift the entire red object down such that the top of the red object is one row below the original top row.\n    *   If this movement would cause a collision with another non-blank (non-0) pixel, do not move the red object.\n4. The output grid's empty spaces are filled with 0.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, color):\n    \"\"\"Finds contiguous regions of the specified color.\"\"\"\n    objects = []\n    visited = np.zeros_like(grid, dtype=bool)\n\n    def dfs(row, col):\n        if (row < 0 or row >= grid.shape[0] or col < 0 or col >= grid.shape[1] or\n                visited[row, col] or grid[row, col] != color):\n            return []\n\n        visited[row, col] = True\n        region = [(row, col)]\n\n        region.extend(dfs(row + 1, col))\n        region.extend(dfs(row - 1, col))\n        region.extend(dfs(row, col + 1))\n        region.extend(dfs(row, col - 1))\n        return region\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] == color and not visited[row, col]:\n                objects.append(dfs(row, col))\n    return objects\n\ndef move_green_object(green_object, output_grid):\n    \"\"\"Moves a single green object upwards, filling blank cells above.\"\"\"\n    min_row = min(r for r, _ in green_object)\n    max_col = max(c for _, c in green_object)\n    min_col = min(c for _, c in green_object)\n    \n    # Determine the highest possible row to move the object to\n    target_row = 0\n    for r in range(min_row -1, -1, -1):\n        can_move = True\n        for c in range(min_col, max_col + 1):\n            if output_grid[r,c] != 0 and not any((r,c) in go for go in find_objects(output_grid,3)):\n                can_move = False\n                break\n        if can_move:\n            target_row = r\n        else:\n            break\n\n    # Move the object\n    for r, c in green_object:\n        row_offset = r - min_row\n        output_grid[target_row + row_offset, c] = 3\n        \n    return\n\ndef move_red_object(red_object, output_grid, original_grid):\n    \"\"\"Moves the red object down one row from its original top position.\"\"\"\n    min_row = min(r for r, _ in red_object)\n    max_row = max(r for r, _ in red_object)\n    max_col = max(c for _, c in red_object)\n    min_col = min(c for _, c in red_object)\n    \n    target_row = min_row + 1\n\n    # check to ensure within bounds\n    if target_row > original_grid.shape[0] - (max_row-min_row + 1):\n        # cannot perform move\n        for r,c in red_object:\n            output_grid[r,c] = 2\n        return\n    \n    # Check for collisions\n    for r in range(max_row - min_row + 1):\n        for c in range(min_col, max_col + 1):\n          if (min_row + r,c) in red_object: #ensure checking correct pixel\n            if output_grid[target_row + r, c] != 0:\n                # Collision detected, do not move\n                for row, col in red_object:\n                    output_grid[row, col] = 2\n                return\n\n    # Move the object\n    for r, c in red_object:\n        row_offset = r - min_row\n        output_grid[target_row + row_offset, c] = 2\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.zeros_like(input_grid)\n\n    # find green objects\n    green_objects = find_objects(input_grid, 3)\n\n    # move green objects\n    for green_object in green_objects:\n      move_green_object(green_object, output_grid)\n\n    # find red objects\n    red_objects = find_objects(input_grid, 2)\n\n    # Move red object\n    for red_object in red_objects:\n        move_red_object(red_object, output_grid, input_grid)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4829,
    "candidates_token_count": 1236,
    "total_token_count": 6065,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 20.476485
}