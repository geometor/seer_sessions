{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Initialization:** Create a copy of the input grid as the output grid.\n\n2.  **Gray Pixel Processing:** Iterate through each cell of the *input* grid. Only process cells that are gray (value 5) in the *input* grid.\n\n3.  **Color Source Determination (for gray pixels):**\n    *   **Left Scan:** Examine the cells in the same row, to the *left* of the current gray pixel. Stop at the first cell that is *not* gray (5) and *not* zero (0).  If such a cell is found, remember its color.\n    *   **Right Scan (if no color found on the left):** If no suitable color was found to the left, examine the cells to the *right* of the current gray pixel, using the same criteria (non-gray, non-zero). Remember the color if found.\n    * **Zero Assignment (if no color found)**: If, after scanning left and right, no source color is determined, set output to zero (0)\n\n4.  **Color Propagation:**\n    * If a source color was found (either left or right):\n        * Change the current (originally gray) pixel in the output grid to the source color.\n        * **Contiguous Gray Propagation:** Continue propagating this source color *in the same direction the color was found* along the current row in the output grid. Only overwrite pixels that were originally gray (5) in the *input* grid. Stop propagation when a non-gray pixel or the edge of the grid is reached.\n\n5.  **Non-Gray Pixel Preservation:** If a cell in the input grid is *not* gray (5), its value is directly copied to the output grid without change.\n\n6.  **Row Removal:** After processing all pixels, iterate through the rows of the *output* grid.  If *any* row contains only zeros (0), remove that entire row from the output grid. The final output grid's dimensions may be smaller than the input grid's dimensions.\n\"\"\"\n\nimport numpy as np\n\ndef get_source_color(input_grid, row, col):\n    \"\"\"Finds the source color for a gray pixel.\"\"\"\n    rows, cols = input_grid.shape\n    left_color = 0\n    # Left Scan\n    for i in range(col - 1, -1, -1):\n        if input_grid[row, i] != 5 and input_grid[row, i] != 0:\n            left_color = input_grid[row, i]\n            break\n    if left_color != 0:\n        return left_color, -1  # -1 indicates left direction\n\n    # Right Scan\n    right_color = 0\n    for i in range(col + 1, cols):\n        if input_grid[row, i] != 5 and input_grid[row, i] != 0:\n            right_color = input_grid[row, i]\n            break\n    if right_color != 0:\n        return right_color, 1  # 1 indicates right direction\n\n    return 0, 0 # no color found\n\ndef propagate(input_grid, output_grid, row, col, color, direction):\n    \"\"\"Propagates the color in the specified direction.\"\"\"\n    rows, cols = input_grid.shape\n    current_col = col\n\n    while 0 <= current_col < cols:\n        if input_grid[row, current_col] == 5:\n            output_grid[row, current_col] = color\n            current_col += direction\n        else:\n            break  # Stop propagation\n\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # iterate through each cell in the grid\n    for r in range(rows):\n        for c in range(cols):\n            # Gray Pixel Processing\n            if input_grid[r, c] == 5:\n                # Color Source Determination\n                source_color, direction = get_source_color(input_grid, r, c)\n\n                # Color Propagation / Zero Assignment\n                if source_color != 0:\n                    propagate(input_grid, output_grid, r, c, source_color, direction)\n                else:\n                    output_grid[r,c] = 0\n\n            # Non-Gray Pixel Preservation (already handled by copying input_grid initially)\n\n    # Row Removal\n    rows_to_keep = []\n    for r in range(output_grid.shape[0]):\n        if np.any(output_grid[r] != 0):  # Check if the row has any non-zero elements\n            rows_to_keep.append(r)\n\n    output_grid = output_grid[rows_to_keep]\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8328,
    "candidates_token_count": 1097,
    "total_token_count": 9425,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.663896
}