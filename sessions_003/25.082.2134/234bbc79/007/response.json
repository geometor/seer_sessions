{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Initialization:** Make a copy of the input grid. This copy will be modified to create the output grid.\n\n2.  **Iterate:** Go through each cell (pixel) of the input grid, row by row, and column by column.\n\n3.  **Non-Gray Pixel Handling:** If the current pixel in the *input* grid is *not* gray (5), copy its value directly to the *output* grid at the same position.\n\n4.  **Gray Pixel Processing:** If the current pixel in the *input* grid *is* gray (5), do the following:\n\n    a. **Find Source Color:**\n    *   **Left Scan:** Check cells to the *left* of the current cell, in the same row. Stop at the first cell that is *not* gray (5) and *not* zero (0). If found, this is the \"source color\".\n    *   **Right Scan:** If no source color was found on the left, check cells to the *right* of the current cell, in the same row. Stop at the first cell that is *not* gray (5) and *not* zero (0). If found, this is the \"source color\".\n    *  **Zero Assignment:** If no source color is found after checking both left and right, set the *output* grid's corresponding pixel to 0.\n\n    b. **Propagate Source Color:** If a source color was found (in step 4a):\n    *   Set the current pixel in the *output* grid (which was gray in the input) to the source color.\n    *   Continue in the *same direction* (left or right) where the source color was found.\n    *   Replace *only* pixels that were gray (5) in the *input* grid with the source color.\n    *   **Stop Propagation:** Stop when you encounter:\n        *   A pixel that was *not* gray (5) in the *input* grid (this includes 0).\n        *   The edge of the grid.\n\n5.  **Remove Zero Rows (Original Input Only):** After processing *all* pixels, examine the *input* grid. Identify any rows that contain *only* zeros. Remove these rows from the *output* grid. Rows in the output that contain zeros generated as part of the transformation process are *not* removed.\n\n6.  **Output:** The modified copy of the input grid, after gray pixel processing and original zero-row removal, is the final output.\n\"\"\"\n\nimport numpy as np\n\ndef _find_source_color(input_grid, row, col):\n    \"\"\"Finds the source color and direction for a gray pixel.\"\"\"\n    rows, cols = input_grid.shape\n    # Left Scan\n    for i in range(col - 1, -1, -1):\n        if input_grid[row, i] != 5 and input_grid[row, i] != 0:\n            return input_grid[row, i], -1  # -1: left\n        if input_grid[row,i] == 0: # stop at zeros\n            break\n    # Right Scan\n    for i in range(col + 1, cols):\n        if input_grid[row, i] != 5 and input_grid[row, i] != 0:\n            return input_grid[row, i], 1  # 1: right\n        if input_grid[row, i] == 0:\n            break\n\n    return 0, 0  # No source color found\n\n\ndef _propagate_color(input_grid, output_grid, row, col, color, direction):\n    \"\"\"Propagates color in the given direction, stopping at non-gray or edge.\"\"\"\n    rows, cols = input_grid.shape\n    current_col = col + direction\n\n    while 0 <= current_col < cols:\n        if input_grid[row, current_col] == 5:\n            output_grid[row, current_col] = color\n            current_col += direction\n        else:\n            break  # Stop propagation\n\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n    input_grid_orig = np.copy(input_grid) # for checking original zero rows\n\n    # iterate through each cell in the grid\n    for r in range(rows):\n        for c in range(cols):\n            # Gray Pixel Processing\n            if input_grid[r, c] == 5:\n                # find source color and propogation direction\n                source_color, direction = _find_source_color(input_grid, r, c)\n\n                if source_color != 0:\n                    # propagate the color in the output grid\n                    output_grid[r, c] = source_color\n                    _propagate_color(input_grid, output_grid, r, c, source_color, direction)\n                else:\n                    # set to zero of no source color\n                    output_grid[r,c] = 0\n\n            # Non-Gray Pixel Preservation (already handled by copying input_grid)\n\n    # Remove Zero Rows (based on the original input grid)\n    rows_to_keep = []\n    for r in range(input_grid_orig.shape[0]):\n        if np.any(input_grid_orig[r] != 0):  # only check original grid\n            rows_to_keep.append(r)\n    output_grid = output_grid[rows_to_keep]\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8592,
    "candidates_token_count": 1262,
    "total_token_count": 9854,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.211105
}