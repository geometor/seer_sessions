{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nPixels of colors 4 and 5 are identified in the input grid and considered 'source' pixels.\nPixels of colors 6 and 9 are identified and considered 'target' pixels corresponding\nto colors 4 and 5, respectively.  A bounding box containing all source and\ntarget pixels is defined in the input grid. The positions of corresponding\nsource and target pixels are swapped within a condensed output grid.\nSource pixels change to target, target pixels change to source.\nThe output grid is formed to match size of bounding box.\n\"\"\"\n\nimport numpy as np\n\ndef find_pixels(grid, colors):\n    pixels = []\n    for r in range(len(grid)):\n        for c in range(len(grid[0])):\n            if grid[r][c] in colors:\n                pixels.append((r, c, grid[r][c]))\n    return pixels\n\ndef bounding_box(pixels):\n    if not pixels:\n        return (0, 0, 0, 0)\n    min_r, min_c = float('inf'), float('inf')\n    max_r, max_c = float('-inf'), float('-inf')\n    for r, c, _ in pixels:\n        min_r = min(min_r, r)\n        min_c = min(min_c, c)\n        max_r = max(max_r, r)\n        max_c = max(max_c, c)\n    return (min_r, min_c, max_r, max_c)\n\ndef transform(input_grid):\n    # Find source and target pixels\n    source_pixels = find_pixels(input_grid, [4, 5])\n    target_pixels = find_pixels(input_grid, [6, 9])\n\n    # Combine for bounding box calculation\n    all_pixels = source_pixels + target_pixels\n    min_r, min_c, max_r, max_c = bounding_box(all_pixels)\n\n    # Calculate output grid dimensions\n    height = max_r - min_r + 1\n    width = max_c - min_c + 1\n\n    # Initialize output grid with zeros\n    output_grid = np.zeros((height, width), dtype=int)\n    \n    # Create dictionaries for efficient lookup by original coordinates\n    source_dict = {(r, c): (r, c, color) for r, c, color in source_pixels}\n    target_dict = {(r, c): (r, c, color) for r, c, color in target_pixels}\n\n    # Populate the output grid with swapped colors\n    for (r, c, color) in all_pixels:\n            \n        # Determine swapped color and new coordinates\n        new_color = 0\n        out_r = r - min_r\n        out_c = c - min_c\n\n        if (r,c) in source_dict:\n          if color == 4:\n              new_color = 6\n          elif color == 5:\n              new_color = 9\n        elif (r,c) in target_dict:\n          if color == 6:\n              new_color = 4\n          elif color == 9:\n              new_color = 5\n\n        output_grid[out_r, out_c] = new_color\n        \n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 9140,
    "candidates_token_count": 768,
    "total_token_count": 9908,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.51763
}