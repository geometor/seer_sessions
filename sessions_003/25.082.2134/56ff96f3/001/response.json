{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Find all pixels in the input grid that have a non-zero color (i.e., not white).\n2.  **Horizontal Expansion/Replication:** For each identified pixel, replicate its color horizontally.\n    *   If there are two pixels of the same color on different rows, replicate it to create a rectangle using those two pixels.\n    *   If only one pixel of the color exits, extend to the end of that \"object\".\n\n3.  **Output:** The output grid is the result of these replications, with all other pixels remaining 0 (white).\nEssentially, single non-zero pixels in a row of an object are expanded, so that the row is fully occupied by the color. If more than one colored pixel of same color are present in separate rows, a filled rectangle is created using them.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"Finds all non-zero pixels and groups them by color.\"\"\"\n    objects = {}\n    for row_idx, row in enumerate(grid):\n        for col_idx, pixel_color in enumerate(row):\n            if pixel_color != 0:\n                if pixel_color not in objects:\n                    objects[pixel_color] = []\n                objects[pixel_color].append((row_idx, col_idx))\n    return objects\n\ndef expand_horizontally(grid, objects):\n    \"\"\"Expands/replicates pixels horizontally based on object locations.\"\"\"\n    output_grid = np.copy(grid)\n    for color, positions in objects.items():\n      # sort by row\n      positions.sort()\n\n      # collect rows\n      rows = [r for r, _ in positions]\n      min_row = min(rows)\n      max_row = max(rows)\n\n      # collect the object columns by looking at connected components on\n      # adjacent rows\n      # each component is an \"object\" and the min/max cols are collected\n      # from that\n      \n      # first build adjacency list of row: [(col, adj_row)]\n      row_adj = {}\n      for r, c in positions:\n        if r not in row_adj:\n          row_adj[r] = []\n        # check for adj\n        for ar, ac in positions:\n          if ar == r: continue\n          if abs(ar - r) == 1 and abs(ac - c) <= 1:\n            row_adj[r].append( (c, ar) )\n\n      # now traverse row_adj to build components\n      components = []\n      \n      visited = set()\n      \n      def visit(r,c, component):\n        visited.add((r,c))\n        component.append((r,c))\n        \n        for ac, ar in row_adj.get(r, []):\n          if abs(ac - c) <= 1 and (ar, ac) not in visited:\n              visit(ar,ac, component)\n              \n      for r, c in positions:\n        if (r,c) not in visited:\n            component = []\n            visit(r,c, component)\n            components.append(component)\n\n      # extract min and max cols\n      for component in components:\n        cols = [c for _, c in component]          \n        min_col = min(cols)\n        max_col = max(cols)\n\n        component_rows = [r for r,_ in component]\n        min_comp_row = min(component_rows)\n        max_comp_row = max(component_rows)\n\n        for r in range(min_comp_row, max_comp_row + 1):\n          for c in range(min_col, max_col + 1):\n                output_grid[r, c] = color\n                \n    return output_grid\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the expansion rule.\"\"\"\n    # Convert to numpy array for easier manipulation\n    input_grid = np.array(input_grid)\n\n    # initialize output grid\n    output_grid = np.copy(input_grid)\n\n    # Find objects (non-zero pixels grouped by color)\n    objects = find_objects(input_grid)\n   \n    # expand objects horizontally\n    output_grid = expand_horizontally(input_grid, objects)\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2981,
    "candidates_token_count": 988,
    "total_token_count": 3969,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 16.067886
}