{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Group all pixels of the same non-zero color as a single object, regardless of their position.\n2.  **Bounding Box:** For each object (color group), determine the bounding box that encompasses all pixels of that color. The bounding box is defined by `min_row`, `max_row`, `min_col`, and `max_col`.\n3.  **Fill:** For each object, fill the entire rectangular region defined by its bounding box with the object's color.  This means setting all pixels within the `min_row`, `max_row`, `min_col`, and `max_col` to the object's color.\n4. **Output:** The output is the grid with all bounding boxes filled.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid):\n    \"\"\"Finds all non-zero pixels and groups them by color.\"\"\"\n    objects = {}\n    for row_idx, row in enumerate(grid):\n        for col_idx, pixel_color in enumerate(row):\n            if pixel_color != 0:\n                if pixel_color not in objects:\n                    objects[pixel_color] = []\n                objects[pixel_color].append((row_idx, col_idx))\n    return objects\n\ndef bounding_box(positions):\n    \"\"\"Calculates the bounding box for a list of positions.\"\"\"\n    rows = [r for r, _ in positions]\n    cols = [c for _, c in positions]\n    min_row, max_row = min(rows), max(rows)\n    min_col, max_col = min(cols), max(cols)\n    return min_row, max_row, min_col, max_col\n\ndef transform(input_grid):\n    # initialize output_grid\n    input_grid = np.array(input_grid)\n    output_grid = np.zeros_like(input_grid)\n\n    # Find objects (non-zero pixels grouped by color)\n    objects = find_objects(input_grid)\n\n    # Iterate through each object (color group)\n    for color, positions in objects.items():\n        # Calculate the bounding box\n        min_row, max_row, min_col, max_col = bounding_box(positions)\n\n        # Fill the bounding box with the object's color\n        for row in range(min_row, max_row + 1):\n            for col in range(min_col, max_col + 1):\n                output_grid[row, col] = color\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5623,
    "candidates_token_count": 580,
    "total_token_count": 6203,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.313048
}