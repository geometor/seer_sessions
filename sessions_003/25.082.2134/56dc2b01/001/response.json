{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation involves identifying connected regions of color 3 (green) and 2 (red) in the input grid. \nA shape of color 8 with the same dimensions of all other shapes together is inserted, and then other shapes\nare moved to the bottom of the newly created shape.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, colors):\n    \"\"\"\n    Finds connected regions of specified colors in the grid.\n    Returns a list of (object, color) tuples, where each object\n    is a list of (row, col) coordinates.\n    \"\"\"\n    visited = set()\n    objects = []\n\n    def dfs(row, col, color, current_object):\n        if (row, col) in visited or not (0 <= row < grid.shape[0] and 0 <= col < grid.shape[1]) or grid[row, col] != color:\n            return\n        visited.add((row, col))\n        current_object.append((row, col))\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            dfs(row + dr, col + dc, color, current_object)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] in colors and (row, col) not in visited:\n                current_object = []\n                dfs(row, col, grid[row, col], current_object)\n                objects.append((current_object, grid[row, col]))\n    return objects\n\ndef get_bounding_box(objects):\n    \"\"\"\n    compute the bounding box that contains all objects\n    \"\"\"\n    if not objects:\n        return None\n\n    min_row = float('inf')\n    min_col = float('inf')\n    max_row = float('-inf')\n    max_col = float('-inf')\n\n    for obj, _ in objects:\n      for row,col in obj:\n        min_row = min(min_row, row)\n        max_row = max(max_row, row)\n        min_col = min(min_col, col)\n        max_col = max(max_col, col)\n    return (min_row, min_col, max_row, max_col)\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the observed rule.\n    \"\"\"\n    input_grid = np.array(input_grid)  # Convert to NumPy array for easier manipulation\n\n    # 1. Identify Objects\n    objects = find_objects(input_grid, [2, 3])\n\n    # 2. insert background\n    bounding_box = get_bounding_box(objects)\n    if bounding_box is not None:\n        min_row, min_col, max_row, max_col = bounding_box\n        output_grid = np.zeros((max_row - min_row+9 , max_col - min_col+1), dtype=int)\n        # Fill bounding box area with 8\n        for row in range(output_grid.shape[0]-8):\n            for col in range(output_grid.shape[1]):\n                output_grid[row,col] = 8\n    else:\n        output_grid = np.copy(input_grid)\n\n    # 3. Move to bottom and stack\n    if objects:\n        # find dimensions of inserted shape\n        insert_height = output_grid.shape[0]-8\n        insert_width = output_grid.shape[1]\n\n        current_row = insert_height\n        for obj, color in reversed(objects): #reversed because of examples\n            # compute original object height\n            obj_rows = [r for r, _ in obj]\n            obj_height = max(obj_rows) - min(obj_rows) + 1\n            for r, c in obj:\n                # adjust col based on bounding box\n                new_c = c-min_col\n                # copy pixel to bottom of output\n                output_grid[current_row + (r-min(obj_rows)), new_c] = color\n            current_row += obj_height\n\n    return output_grid.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 1588,
            "end_index": 1775,
            "uri": "https://github.com/mjredmond/FEMApp",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2547,
    "candidates_token_count": 977,
    "total_token_count": 3524,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 18.101041
}