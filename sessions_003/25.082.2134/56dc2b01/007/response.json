{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Find all distinct, contiguous regions (objects) of color 2 (red) and color 3 (green) in the input grid.\n2.  **Compute Bounding Box:** Calculate a single bounding box that encompasses all red and green objects. The bounding box parameters are (min_row, min_col, max_row, max_col).\n3.  **Order Objects:** Maintain the original top-to-bottom row order of the objects as they appear in the input grid.\n4.  **Clear Objects:** Set all pixels within the identified objects in the input grid to 0 (background) to clear them\n5.  **Stack and Position Objects:**\n    - Start at the top row of the bounding box.\n    - Stack each identified object vertically, starting at the current row.\n    - Maintain the original horizontal (column) position relative to the bounding box.\n    - Move down by the height of the object.\n6.  **Create Azure Bar:** Directly below the last stacked object, create a horizontal bar of color 8 (azure). The bar's width spans the entire width of the bounding box calculated in Step 2, and the height is 1.\n7.  **Output Grid:** Create the output grid, initially filled with 0. Place the stacked objects and azure bar within the output grid as determined in steps 4 & 5.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, colors):\n    \"\"\"\n    Finds connected regions of specified colors in the grid.\n    Returns a list of (object, color) tuples, sorted by top-most row.\n    \"\"\"\n    visited = set()\n    objects = []\n\n    def dfs(row, col, color, current_object):\n        if (row, col) in visited or not (0 <= row < grid.shape[0] and 0 <= col < grid.shape[1]) or grid[row, col] != color:\n            return\n        visited.add((row, col))\n        current_object.append((row, col))\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            dfs(row + dr, col + dc, color, current_object)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] in colors and (row, col) not in visited:\n                current_object = []\n                dfs(row, col, grid[row, col], current_object)\n                objects.append((current_object, grid[row, col]))\n\n    # Sort objects by their top-most row\n    objects.sort(key=lambda x: min(r for r, _ in x[0]))\n    return objects\n\ndef get_bounding_box(objects):\n    \"\"\"\n    Compute the bounding box for a list of objects.\n    \"\"\"\n    if not objects:\n        return None\n\n    min_row = float('inf')\n    min_col = float('inf')\n    max_row = float('-inf')\n    max_col = float('-inf')\n\n    for obj, _ in objects:\n        for row, col in obj:\n            min_row = min(min_row, row)\n            max_row = max(max_row, row)\n            min_col = min(min_col, col)\n            max_col = max(max_col, col)\n\n    return (min_row, min_col, max_row, max_col)\n\ndef get_object_height(obj):\n    \"\"\"Calculates the height of an object.\"\"\"\n    rows = [r for r, _ in obj]\n    return max(rows) - min(rows) + 1\n\ndef transform(input_grid):\n    input_grid = np.array(input_grid)\n    output_grid = np.zeros_like(input_grid)\n\n    # 1. Identify Objects\n    objects = find_objects(input_grid, [2, 3])\n\n    # 2. Compute Bounding Box (in original grid)\n    bounding_box = get_bounding_box(objects)\n    if bounding_box is None:\n        return input_grid.tolist()  # No objects to transform\n    min_row_all, min_col_all, max_row_all, max_col_all = bounding_box\n\n    # 3. Order Objects (already done in find_objects)\n\n    # 4. Clear Objects and 5. Stack Objects\n    current_row = min_row_all  # Start stacking at the top-most row within the bounding box\n\n    for obj, color in objects:\n        obj_height = get_object_height(obj)\n        min_row_obj = min([r for r, _ in obj])\n        for r, c in obj:\n            new_row = current_row + (r - min_row_obj)\n            new_col = c  # keep the same col\n            output_grid[new_row, new_col] = color  # Use numpy indexing for efficiency\n        current_row += obj_height  # update for next obj\n\n    # 6. Create Azure Bar\n    azure_row = current_row\n    for col in range(min_col_all, max_col_all + 1):\n        output_grid[azure_row, col] = 8\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 2595,
            "end_index": 2794,
            "uri": "https://github.com/mjredmond/FEMApp",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6267,
    "candidates_token_count": 1237,
    "total_token_count": 7504,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 15.636553
}