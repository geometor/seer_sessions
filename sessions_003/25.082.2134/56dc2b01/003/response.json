{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation involves identifying connected regions of color 2 (red) and 3 (green) in the input grid.\nA rectangular region of color 8 (azure) is created, spanning the width of the combined bounding box of all identified objects.\nThe original objects are then stacked below the azure region, maintaining their relative horizontal positions, and are stacked\ntop-to-bottom as they appear in the original grid.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, colors):\n    \"\"\"\n    Finds connected regions of specified colors in the grid.\n    Returns a list of (object, color) tuples, where each object\n    is a list of (row, col) coordinates.\n    \"\"\"\n    visited = set()\n    objects = []\n\n    def dfs(row, col, color, current_object):\n        if (row, col) in visited or not (0 <= row < grid.shape[0] and 0 <= col < grid.shape[1]) or grid[row, col] != color:\n            return\n        visited.add((row, col))\n        current_object.append((row, col))\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            dfs(row + dr, col + dc, color, current_object)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] in colors and (row, col) not in visited:\n                current_object = []\n                dfs(row, col, grid[row, col], current_object)\n                objects.append((current_object, grid[row, col]))\n    return objects\n\ndef get_bounding_box(objects):\n    \"\"\"\n    compute the bounding box that contains all objects\n    \"\"\"\n    if not objects:\n        return None\n\n    min_row = float('inf')\n    min_col = float('inf')\n    max_row = float('-inf')\n    max_col = float('-inf')\n\n    for obj, _ in objects:\n      for row,col in obj:\n        min_row = min(min_row, row)\n        max_row = max(max_row, row)\n        min_col = min(min_col, col)\n        max_col = max(max_col, col)\n    return (min_row, min_col, max_row, max_col)\n\ndef get_object_height(obj):\n    \"\"\"Calculates the height of an object.\"\"\"\n    rows = [r for r, _ in obj]\n    return max(rows) - min(rows) + 1\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the observed rule.\n    \"\"\"\n    input_grid = np.array(input_grid)\n\n    # 1. Identify Objects\n    objects = find_objects(input_grid, [2, 3])\n\n    # 2. Determine Bounding Box for all objects\n    bounding_box = get_bounding_box(objects)\n\n    if bounding_box is None:\n        return input_grid.tolist() # Return original if no objects of interest\n\n    min_row_all, min_col_all, max_row_all, max_col_all = bounding_box\n    azure_width = max_col_all - min_col_all + 1\n\n    # find height of all objects\n    total_objects_height = 0\n    for obj, _ in objects:\n        total_objects_height += get_object_height(obj)\n\n    # top padding in example 3 is 3, so consider this\n    top_padding = min_row_all\n    \n    # 3. Determine Output Grid height\n    # use height of color 8 object + object stack + top padding\n    output_height = top_padding + 1 + total_objects_height\n    output_grid = np.zeros((output_height, azure_width), dtype=int)\n\n\n    # 4. Create Azure region - height is one row\n    azure_row_index = top_padding\n    for col in range(azure_width):\n        output_grid[azure_row_index, col] = 8\n\n    # 5. stack objects, iterating in original order\n    current_row = azure_row_index + 1\n\n    for obj, color in objects: # iterate in original order\n        obj_height = get_object_height(obj)\n        min_row_obj = min([r for r,_ in obj]) # get original object offset\n        for r, c in obj:\n            # adjust col based on bounding box\n            new_c = c - min_col_all\n            # place pixel into stacked output\n            output_grid[current_row + (r - min_row_obj) , new_c] = color\n        current_row += obj_height\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 1732,
            "end_index": 1918,
            "uri": "https://github.com/mjredmond/FEMApp",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8336,
    "candidates_token_count": 1133,
    "total_token_count": 9469,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 17.370133
}