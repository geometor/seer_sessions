{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify and Extract Objects:** Locate all connected regions (objects) of color 2 (red) and color 3 (green) within the input grid.\n2.  **Compute Bounding Box** Find the bounding box that contains all identified red and green objects in the original input grid.\n3.  **Stack Objects:** Stack the extracted objects vertically, maintaining their original horizontal positions relative to each other.  The objects are stacked from top to bottom based on their order in the original image.\n4.  **Create Azure Bar:** Create a horizontal bar of color 8 (azure) below the stacked objects. The width of the bar spans the entire width from the minimum column to the maximum column of the bounding box identified in step 2, and height 1.\n5. **Determine and Create Output Grid:** Create output grid. Keep the original background, and add the stacked objects and azure bar in the location specified by rules 3 & 4.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, colors):\n    \"\"\"\n    Finds connected regions of specified colors in the grid.\n    Returns a list of (object, color) tuples.\n    \"\"\"\n    visited = set()\n    objects = []\n\n    def dfs(row, col, color, current_object):\n        if (row, col) in visited or not (0 <= row < grid.shape[0] and 0 <= col < grid.shape[1]) or grid[row, col] != color:\n            return\n        visited.add((row, col))\n        current_object.append((row, col))\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            dfs(row + dr, col + dc, color, current_object)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if grid[row, col] in colors and (row, col) not in visited:\n                current_object = []\n                dfs(row, col, grid[row, col], current_object)\n                objects.append((current_object, grid[row, col]))\n    return objects\n\ndef get_bounding_box(objects):\n    \"\"\"\n    Compute the bounding box for a list of objects.\n    \"\"\"\n    if not objects:\n        return None\n\n    min_row = float('inf')\n    min_col = float('inf')\n    max_row = float('-inf')\n    max_col = float('-inf')\n\n    for obj, _ in objects:\n        for row, col in obj:\n            min_row = min(min_row, row)\n            max_row = max(max_row, row)\n            min_col = min(min_col, col)\n            max_col = max(max_col, col)\n\n    return (min_row, min_col, max_row, max_col)\n\ndef get_object_height(obj):\n    \"\"\"Calculates the height of an object.\"\"\"\n    rows = [r for r, _ in obj]\n    return max(rows) - min(rows) + 1\n\ndef transform(input_grid):\n    input_grid = np.array(input_grid)\n\n    # 1. Identify and Extract Objects\n    objects = find_objects(input_grid, [2, 3])\n\n    # 2. Compute Bounding Box (in original grid)\n    bounding_box = get_bounding_box(objects)\n    if bounding_box is None:\n        return input_grid.tolist()  # No objects to transform\n    min_row_all, min_col_all, max_row_all, max_col_all = bounding_box\n\n    # 3. Stack Objects and 4. Create Azure Bar\n    output_grid = np.array(input_grid).tolist() # start with a copy\n    \n    # remove objects from original grid\n    for obj, _ in objects:\n      for r,c in obj:\n        output_grid[r][c] = 0\n\n    current_row = min_row_all  # Start stacking at the top-most object's row\n    for obj, color in objects:\n        obj_height = get_object_height(obj)\n        min_row_obj = min([r for r,_ in obj])\n        for r, c in obj:\n           \n            new_c = c - min_col_all + min_col_all # maintain col\n            output_grid[current_row + (r - min_row_obj)][new_c] = color\n        current_row += obj_height\n\n    # Create Azure Bar\n    azure_row = current_row\n    for col in range(min_col_all, max_col_all+1):\n      output_grid[azure_row][col] = 8\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 2171,
            "end_index": 2370,
            "uri": "https://github.com/mjredmond/FEMApp",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8037,
    "candidates_token_count": 1112,
    "total_token_count": 9149,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 14.034699
}