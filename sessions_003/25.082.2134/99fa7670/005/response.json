{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by expanding non-zero pixels horizontally and vertically.\n\n1. **Iterate through Rows:** Process the input grid row by row.\n2. **Horizontal Expansion:** For each row:\n    *   Create a new, initially empty (all zeros) row.\n    *   If a pixel is non-zero, fill all elements in the new row *from the current column to the right edge* with the non-zero pixel's value. Copy from 0 to current from input.\n    *   If a pixel is zero, the output will be zero (handled by initialization).\n3. **Vertical Replication:**\n    *   Count non-zero pixels in the *original* input *at or below* the current row.\n    *   Repeat the expanded row that many times in the output, but don't exceed output grid boundaries.\n4. **Zero Rows**: Copy to output\n\"\"\"\n\nimport numpy as np\n\ndef count_nonzero_pixels_below(input_grid, row_index):\n    \"\"\"Counts non-zero pixels below (and including) a given row.\"\"\"\n    input_grid = np.array(input_grid)\n    return np.count_nonzero(input_grid[row_index:])\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the specified rules.\"\"\"\n\n    input_grid = np.array(input_grid)\n    rows, cols = input_grid.shape\n    output_grid = np.zeros((rows, cols), dtype=int)  # Initialize with zeros\n    output_row_index = 0\n\n    for row_index in range(rows):\n        # Horizontal Expansion\n        expanded_row = np.zeros(cols, dtype=int)\n        for col_index in range(cols):\n            pixel_value = input_grid[row_index, col_index]\n            if pixel_value != 0:\n                expanded_row[:col_index] = input_grid[row_index, :col_index]\n                expanded_row[col_index:] = pixel_value  # Fill to the right edge\n                break #once we find a nonzero and fill, move to the next row.\n\n        # Vertical Replication\n        num_copies = count_nonzero_pixels_below(input_grid, row_index)\n        for _ in range(min(num_copies, rows - output_row_index)):  # Prevent exceeding bounds\n            output_grid[output_row_index] = expanded_row\n            output_row_index += 1\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4494,
    "candidates_token_count": 569,
    "total_token_count": 5063,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.223491
}