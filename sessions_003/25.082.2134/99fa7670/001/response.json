{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by expanding non-zero pixels horizontally and vertically.\n\n1. **Identify:** Iterate through the input grid, row by row, and identify all non-zero pixels.\n2. **Expand Horizontally:** For each non-zero pixel found, replicate its color value horizontally to the right edge of the grid, creating a row of that color.\n3. **Expand Vertically:** Create copies of the the horizontally-expanded rows. Make copies until you've created N new rows, including the first expanded row, where N is the count of all non-zero pixels in the original input grid found at and below the row of current non-zero pixel.\n4.  **Maintain Background**: If a pixel in the input is 0, it remains 0 in the output.\n\"\"\"\n\nimport numpy as np\n\ndef count_nonzero_pixels_below(input_grid, row_index):\n    \"\"\"Counts non-zero pixels below (and including) a given row.\"\"\"\n    count = 0\n    for r in range(row_index, len(input_grid)):\n        for val in input_grid[r]:\n            if val != 0:\n                count += 1\n    return count\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the specified rules.\"\"\"\n\n    input_grid = np.array(input_grid)\n    output_grid = np.zeros_like(input_grid)\n    rows, cols = input_grid.shape\n    output_row_index = 0\n\n    for row_index in range(rows):\n        for col_index in range(cols):\n            pixel_value = input_grid[row_index, col_index]\n            if pixel_value != 0:\n                # Expand Horizontally\n                expanded_row = np.concatenate([input_grid[row_index, :col_index], np.full(cols - col_index, pixel_value)])\n\n                # Expand Vertically\n                num_copies = count_nonzero_pixels_below(input_grid, row_index)\n                for _ in range(num_copies):\n                    if output_row_index < rows:\n                        output_grid[output_row_index] = expanded_row\n                        output_row_index += 1\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2094,
    "candidates_token_count": 512,
    "total_token_count": 2606,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.151508
}