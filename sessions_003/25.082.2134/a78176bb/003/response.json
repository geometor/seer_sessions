{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Determine Grid Dimensions:** Find the number of rows and columns in the input grid. Determine the smaller of the two - this is `min_dim`.\n2.  **Identify Primary Diagonal and Color:** Examine the main diagonal (top-left to bottom-right, up to `min_dim`) of the input grid. The \"primary color\" is the most frequent non-zero color appearing on this diagonal. If there is no non-zero color, the primary color is considered to be 0.\n3.  **Create Mirrored Diagonal:** Create a mirrored diagonal. For each cell on the main diagonal at position (row, col), where row < `min_dim` and col < `min_dim`, set the cell at position (col, row) in the output grid to the primary color.\n4. **Apply Main Diagonal:** Create the main diagonal. For each cell on the main diagonal at position (row, col), where row < `min_dim` and col < `min_dim`, set the cell at position (row, row) in the output grid to the primary color.\n5.  **Remove Adjacent Colors:** Iterate through *all* cells in the output grid. If a cell's color is *not* the primary color, check for horizontal and vertical adjacency to *any* cell on *either* the main diagonal or the mirrored diagonal. If it is adjacent, set the cell's color to 0 (white).\n6.  **Output:** The modified grid is the final output.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef get_primary_color(grid, min_dim):\n    \"\"\"Finds the most frequent non-zero color on the main diagonal.\"\"\"\n    diagonal_colors = [grid[i, i] for i in range(min_dim) if grid[i,i] != 0]\n    if not diagonal_colors:\n        return 0\n    color_counts = Counter(diagonal_colors)\n    return color_counts.most_common(1)[0][0]\n\ndef is_adjacent(pos1, pos2):\n    \"\"\"Checks if two positions are adjacent (horizontally or vertically).\"\"\"\n    return (abs(pos1[0] - pos2[0]) + abs(pos1[1] - pos2[1])) == 1\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the described rule.\"\"\"\n    grid = np.array(input_grid)\n    rows, cols = grid.shape\n    min_dim = min(rows, cols)\n    output_grid = np.copy(grid)\n    primary_color = get_primary_color(grid, min_dim)\n\n     # Create mirrored and main diagonals\n    for i in range(min_dim):\n        output_grid[i, i] = primary_color  # Main diagonal\n        output_grid[i, i] = primary_color  # Mirrored diagonal\n\n    for i in range(min_dim):\n        output_grid[i,i] = primary_color\n        output_grid[i,i] = primary_color\n\n\n    # Remove adjacent secondary colors\n    for r in range(rows):\n        for c in range(cols):\n            if output_grid[r, c] != primary_color:\n                is_adjacent_to_diagonal = False\n                # Check adjacency to main diagonal\n                for i in range(min_dim):\n                    if is_adjacent((r, c), (i, i)):\n                        is_adjacent_to_diagonal = True\n                        break\n                # Check adjacency to mirrored diagonal\n                for i in range(min_dim):\n                  if is_adjacent((r, c), (i,i)):\n                        is_adjacent_to_diagonal = True\n                        break\n\n                if is_adjacent_to_diagonal:\n                    output_grid[r, c] = 0\n    for r in range(rows):\n        for c in range(cols):\n          if output_grid[r,c] != primary_color:\n            for i in range(min_dim):\n              if is_adjacent((r,c), (i,i)) or is_adjacent((r,c),(i,i)):\n                output_grid[r,c] = 0\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8925,
    "candidates_token_count": 958,
    "total_token_count": 9883,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 12.811238
}