{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentify a horizontal line of a constant color. Modify this line, replacing the color of pixels *not* part of\nvertical lines. The replacement color comes from the row directly above, unless the horizontal line\nis the topmost row, in which case it comes from the row below.\n\"\"\"\n\nimport numpy as np\n\ndef find_horizontal_line(grid):\n    \"\"\"Finds a row with all pixels having the same non-zero color.\"\"\"\n    for i, row in enumerate(grid):\n        first_color = row[0]\n        if first_color != 0 and np.all(row == first_color):\n            return i, first_color\n    return None, None\n\ndef find_vertical_lines(grid):\n    \"\"\"Finds columns with repeating non-zero colors spanning at least three rows.\"\"\"\n    vertical_lines = []\n    rows, cols = grid.shape\n    for j in range(cols):\n        for i in range(rows - 2):\n            color = grid[i, j]\n            if color != 0 and grid[i+1, j] == color and grid[i+2, j] == color:\n                vertical_lines.append((j, color))\n                break  # Move to the next column after finding a vertical line\n    return vertical_lines\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the observed rule.\"\"\"\n    grid = np.array(input_grid)  # Convert to NumPy array for easier manipulation\n    rows, cols = grid.shape\n    output_grid = grid.copy()\n\n    # Find the special horizontal line\n    horizontal_line_row, horizontal_line_color = find_horizontal_line(grid)\n\n    if horizontal_line_row is None:\n        return output_grid # if the input does not contains the horizontal line, return unchanged.\n\n    # Find the persistent vertical lines\n    vertical_lines = find_vertical_lines(grid)\n\n    # Modify the special row\n    for j in range(cols):\n        # Check if the current column is part of a vertical line\n        is_vertical_line = False\n        for vertical_line_col, _ in vertical_lines:\n            if j == vertical_line_col:\n                is_vertical_line = True\n                break\n\n        # Replace the color if not part of a vertical line\n        if not is_vertical_line:\n            if horizontal_line_row == 0:\n                output_grid[horizontal_line_row, j] = grid[horizontal_line_row + 1, j]\n            else:\n                output_grid[horizontal_line_row, j] = grid[horizontal_line_row - 1, j]\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2939,
    "candidates_token_count": 617,
    "total_token_count": 3556,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.862113
}