{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Find Horizontal Line:** Scan the input grid to identify a horizontal line (a row) where all pixels have the same non-zero color. If no such line is found, the output grid is identical to the input grid.\n2.  **Find Vertical Lines:** Identify any vertical lines - columns that have at least three consecutive pixels of the *same* non-zero color. Note which columns these are.\n3.  **Modify Horizontal Line:** For each pixel in the identified horizontal line:\n    *   If the pixel's column is part of a vertical line, keep its original color.\n    *   If the pixel's column is *not* part of a vertical line:\n        * If the horizontal line is the very top row of the grid, change pixel to the color directly *below* it\n        * Otherwise, change the pixel to the color directly *above* it.\n4. Return modified grid.\n\"\"\"\n\nimport numpy as np\n\ndef find_horizontal_line(grid):\n    \"\"\"Finds a row with all pixels having the same non-zero color.\"\"\"\n    for i, row in enumerate(grid):\n        first_color = row[0]\n        if first_color != 0 and np.all(row == first_color):\n            return i, first_color\n    return None, None\n\ndef find_vertical_lines(grid):\n    \"\"\"Finds columns with at least three consecutive pixels of the same non-zero color.\"\"\"\n    vertical_lines = []\n    grid_array = np.array(grid)\n    rows, cols = grid_array.shape\n    for j in range(cols):\n        for i in range(rows - 2):\n            if grid_array[i, j] != 0 and grid_array[i, j] == grid_array[i+1, j] and grid_array[i, j] == grid_array[i+2, j]:\n                vertical_lines.append(j)\n                break  # Move to the next column\n    return vertical_lines\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the observed rule.\"\"\"\n    grid = np.array(input_grid)\n    rows, cols = grid.shape\n    output_grid = grid.copy()\n\n    # 1. Find Horizontal Line\n    horizontal_line_row, horizontal_line_color = find_horizontal_line(grid)\n\n    if horizontal_line_row is None:\n        return output_grid.tolist()  # Return unchanged if no horizontal line\n\n    # 2. Find Vertical Lines\n    vertical_lines = find_vertical_lines(grid)\n\n    # 3. Modify Horizontal Line\n    for j in range(cols):\n        if j in vertical_lines:\n            # Keep original color\n            continue\n        else:\n            # Change color based on row position\n            if horizontal_line_row == 0:\n                output_grid[horizontal_line_row, j] = grid[horizontal_line_row + 1, j]\n            else:\n                output_grid[horizontal_line_row, j] = grid[horizontal_line_row - 1, j]\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5587,
    "candidates_token_count": 719,
    "total_token_count": 6306,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.186294
}