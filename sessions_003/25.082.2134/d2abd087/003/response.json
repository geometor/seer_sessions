{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by changing the color of gray (5) pixels to either red (2) or blue (1) based on their position and neighbors, creating a checkerboard pattern of connected gray pixel islands. The color assignment is done *during* the flood fill operation, avoiding a second pass.\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, row, col):\n    \"\"\"Gets the valid neighbors of a pixel (including diagonals).\"\"\"\n    rows, cols = len(grid), len(grid[0])\n    neighbors = []\n    for i in range(max(0, row - 1), min(rows, row + 2)):\n        for j in range(max(0, col - 1), min(cols, col + 2)):\n            if (i, j) != (row, col):\n                neighbors.append((i, j))\n    return neighbors\n\ndef flood_fill(grid, row, col, target_color, replacement_color, visited):\n    \"\"\"Performs a flood fill operation, directly applying the replacement color.\"\"\"\n    rows, cols = len(grid), len(grid[0])\n    if (row < 0 or row >= rows or col < 0 or col >= cols or\n            (row, col) in visited or grid[row][col] != target_color):\n        return\n    visited.add((row, col))\n    grid[row][col] = replacement_color\n\n    neighbors = get_neighbors(grid, row, col)\n    for r, c in neighbors:\n        flood_fill(grid, r, c, target_color, replacement_color, visited)\n\ndef transform(input_grid):\n    # Initialize output_grid as a *copy* of the input\n    output_grid = np.copy(input_grid).tolist()\n    rows, cols = len(output_grid), len(output_grid[0])\n\n    # Keep track of visited pixels\n    visited = set()\n\n    # Iterate through the grid\n    for r in range(rows):\n        for c in range(cols):\n            # Process only unvisited gray pixels\n            if output_grid[r][c] == 5 and (r, c) not in visited:\n                # Determine checkerboard color:\n                start_color = 1  # Default to blue\n                if (r > 0 and output_grid[r-1][c] == 1) or \\\n                   (c > 0 and output_grid[r][c-1] == 1):\n                    start_color = 2  # change to Red\n                elif (r > 0 and output_grid[r-1][c] == 2) or \\\n                   (c > 0 and output_grid[r][c-1] == 2):\n                    start_color = 1 # change to Blue\n\n                # Flood fill with the determined color\n                flood_fill(output_grid, r, c, 5, start_color, visited)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7973,
    "candidates_token_count": 677,
    "total_token_count": 8650,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.741185
}