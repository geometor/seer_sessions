{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by identifying connected regions of gray (5) pixels (gray islands) and coloring them in a checkerboard pattern of red (2) and blue (1). The starting color for each island is determined by examining its surrounding colored neighbors, ensuring a global checkerboard pattern across islands.\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef get_neighbors(grid, row, col):\n    \"\"\"Gets the valid neighbors of a pixel (including diagonals).\"\"\"\n    rows, cols = len(grid), len(grid[0])\n    neighbors = []\n    for i in range(max(0, row - 1), min(rows, row + 2)):\n        for j in range(max(0, col - 1), min(cols, col + 2)):\n            if (i, j) != (row, col):\n                neighbors.append((i, j))\n    return neighbors\n\ndef determine_start_color(grid, row, col, visited):\n    \"\"\"Determines the starting color (1 or 2) for a gray island using BFS.\"\"\"\n    queue = deque([(row, col)])\n    visited_bfs = set()\n    visited_bfs.add((row, col))\n\n    while queue:\n        r, c = queue.popleft()\n\n        neighbors = get_neighbors(grid, r, c)\n        for nr, nc in neighbors:\n            if (nr, nc) not in visited_bfs:\n                visited_bfs.add((nr, nc))\n                if grid[nr][nc] == 1:\n                    return 2  # Adjacent to blue, start with red\n                elif grid[nr][nc] == 2:\n                    return 1  # Adjacent to red, start with blue\n                elif grid[nr][nc] == 5 and (nr, nc) not in visited:\n                    queue.append((nr,nc))\n    return 1  # No colored neighbors found, default to blue\n\ndef flood_fill(grid, row, col, target_color, replacement_color, visited):\n    \"\"\"Performs a flood fill operation, directly applying the replacement color.\"\"\"\n    rows, cols = len(grid), len(grid[0])\n    if (row < 0 or row >= rows or col < 0 or col >= cols or\n            (row, col) in visited or grid[row][col] != target_color):\n        return\n    visited.add((row, col))\n    grid[row][col] = replacement_color\n\n    neighbors = get_neighbors(grid, row, col)\n    for r, c in neighbors:\n        flood_fill(grid, r, c, target_color, replacement_color, visited)\n\n\ndef transform(input_grid):\n    # Initialize output_grid as a *copy* of the input\n    output_grid = np.copy(input_grid).tolist()\n    rows, cols = len(output_grid), len(output_grid[0])\n\n    # Keep track of visited pixels (for flood fill)\n    visited = set()\n\n    # Iterate through the grid\n    for r in range(rows):\n        for c in range(cols):\n            # Process only unvisited gray pixels\n            if output_grid[r][c] == 5 and (r, c) not in visited:\n                # Determine checkerboard start color using BFS\n                start_color = determine_start_color(output_grid, r, c, visited)\n\n                # Flood fill with the determined color\n                flood_fill(output_grid, r, c, 5, start_color, visited)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7814,
    "candidates_token_count": 811,
    "total_token_count": 8625,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.764126
}