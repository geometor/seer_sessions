{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Find all connected components (objects) of gray (5) and red (2) pixels.\n2.  **Iterate Gray Objects:** For each gray object, independently determine its new position.\n3.  **Find Closest Red Object:**  Determine the closest red object to the current gray object. Closeness is Manhattan distance.\n4.  **Prioritized Placement:**\n    *   **Above:** Attempt to place the gray object directly above the *closest edge* of the red object. If the space is available, place.\n    * **Beside** If placement directly above is not possible (out of bounds or occupied by a non-red pixel), place the gray object immediately to the left or right of the red object. Prioritize left then right.\n    * **Below** If placement to the sides is not available, try placing directly below.\n    * If none of those are possible, do not move.\n5.  **No Overlap:** Gray objects cannot occupy the same space.\n\"\"\"\n\nimport numpy as np\n\ndef find_connected_components(grid, color):\n    \"\"\"\n    Finds connected components of a given color in the grid.\n    Uses depth-first search.\n    \"\"\"\n    visited = set()\n    components = []\n\n    def dfs(row, col, current_component):\n        if (row, col) in visited or not (0 <= row < grid.shape[0] and 0 <= col < grid.shape[1]) or grid[row, col] != color:\n            return\n        visited.add((row, col))\n        current_component.append((row, col))\n        # Check all 8 neighbors\n        for dr in [-1, -1, -1, 0, 0, 1, 1, 1]:\n            for dc in [-1, 0, 1, -1, 1, -1, 0, 1]:\n                dfs(row + dr, col + dc, current_component)\n\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] == color and (r, c) not in visited:\n                current_component = []\n                dfs(r, c, current_component)\n                components.append(current_component)\n    return components\n\ndef manhattan_distance(pos1, pos2):\n    \"\"\"Calculates the Manhattan distance between two positions.\"\"\"\n    return abs(pos1[0] - pos2[0]) + abs(pos1[1] - pos2[1])\n\ndef find_closest_red_object(gray_object, red_objects):\n    \"\"\"Finds the closest red object to a gray object.\"\"\"\n    min_dist = float('inf')\n    closest_red_object = None\n    for red_object in red_objects:\n        for gray_pos in gray_object:\n            for red_pos in red_object:\n                dist = manhattan_distance(gray_pos, red_pos)\n                if dist < min_dist:\n                    min_dist = dist\n                    closest_red_object = red_object\n    return closest_red_object\n\ndef is_valid(grid, pos):\n    \"\"\"Check if a position is valid\"\"\"\n    return 0<= pos[0] < grid.shape[0] and 0 <= pos[1] < grid.shape[1]\n\ndef transform(input_grid):\n    # initialize output_grid\n    output_grid = np.copy(input_grid)\n\n    # Identify Objects\n    gray_objects = find_connected_components(input_grid, 5)\n    red_objects = find_connected_components(input_grid, 2)\n    \n    # Iterate Gray Objects\n    for gray_object in gray_objects:\n        #find closest red object\n        closest_red_object = find_closest_red_object(gray_object, red_objects)\n\n        if closest_red_object is None:\n            continue #no red objects, skip\n        \n        moved = False\n        for gray_pos in gray_object: #should only be one\n            if moved:\n                continue\n\n            output_grid[gray_pos[0], gray_pos[1]] = 0 #clear old\n\n            #Prioritized placement\n            for red_pos in closest_red_object:\n              #above\n              target_pos = (red_pos[0] - 1, red_pos[1])\n              if is_valid(output_grid, target_pos) and output_grid[target_pos[0], target_pos[1]] not in [2,5]:\n                    output_grid[target_pos[0], target_pos[1]] = 5\n                    moved = True\n                    break\n\n              #beside - left\n              target_pos = (red_pos[0], red_pos[1] - 1)\n              if is_valid(output_grid, target_pos) and output_grid[target_pos[0], target_pos[1]] not in [2,5]:\n                    output_grid[target_pos[0], target_pos[1]] = 5\n                    moved = True\n                    break\n\n              #beside - right\n              target_pos = (red_pos[0], red_pos[1] + 1)\n              if is_valid(output_grid, target_pos) and output_grid[target_pos[0], target_pos[1]] not in [2,5]:\n                    output_grid[target_pos[0], target_pos[1]] = 5\n                    moved = True\n                    break\n          \n              #below\n              target_pos = (red_pos[0] + 1, red_pos[1])\n\n              if is_valid(output_grid, target_pos) and output_grid[target_pos[0], target_pos[1]] not in [2,5]:\n                    output_grid[target_pos[0], target_pos[1]] = 5\n                    moved = True\n                    break\n            \n            if not moved: #put back\n                output_grid[gray_pos[0], gray_pos[1]] = 5\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5113,
    "candidates_token_count": 1413,
    "total_token_count": 6526,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 17.995442
}