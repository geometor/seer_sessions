{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nGray pixels move to be adjacent to the closest red pixel, prioritizing creating a vertical stack above the red pixels. If there are no red pixels, gray pixels remain unchanged. Gray pixels form a block and maintain their relative positions if possible, moving as a unit.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, color):\n    \"\"\"Finds the positions of all pixels of a given color.\"\"\"\n    return np.argwhere(grid == color)\n\ndef calculate_centroid(positions):\n    \"\"\"Calculates the centroid of a set of positions.\"\"\"\n    return np.mean(positions, axis=0) if len(positions) > 0 else None\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the observed rules.\"\"\"\n    \n    output_grid = np.copy(input_grid)\n    \n    gray_positions = find_objects(input_grid, 5)\n    red_positions = find_objects(input_grid, 2)\n\n    if len(red_positions) == 0:\n        return output_grid\n\n    # Treat gray pixels as a single object (or potentially multiple)\n    if len(gray_positions) > 0:\n        # Calculate the centroid of the gray pixels\n        gray_centroid = calculate_centroid(gray_positions)\n\n        #find closest red position to centroid\n        min_dist = float('inf')\n        nearest_red_centroid = None\n        for red_pos in red_positions:\n            dist = abs(red_pos[0] - gray_centroid[0]) + abs(red_pos[1] - gray_centroid[1])  # Manhattan\n            if dist < min_dist:\n                min_dist = dist\n                nearest_red_centroid = red_pos\n\n        # Determine target position based on gray and nearest red centroids\n        target_row = nearest_red_centroid[0] - 1\n        target_col = nearest_red_centroid[1]\n\n        # Move all gray pixels as a block, maintaining relative positions\n        row_offset = target_row - gray_centroid[0]\n        col_offset = target_col - gray_centroid[1]\n\n        # Create new gray positions and clear old\n        new_gray_positions = []\n        for gray_pos in gray_positions:\n            output_grid[gray_pos[0], gray_pos[1]] = 0 #clear old position\n\n        for gray_pos in gray_positions:\n            new_row = int(round(gray_pos[0] + row_offset))\n            new_col = int(round(gray_pos[1] + col_offset))\n\n            #Basic boundary check\n            if 0 <= new_row < output_grid.shape[0] and 0 <= new_col < output_grid.shape[1]:\n              #if new position is red, adjust\n              if output_grid[new_row, new_col] == 2:\n                new_gray_positions.append((new_row, new_col+1))\n\n              else:\n                new_gray_positions.append((new_row, new_col))\n            else: #pixel is out of bounds, leave in old spot.\n                new_gray_positions.append((gray_pos[0], gray_pos[1]))\n                output_grid[gray_pos[0], gray_pos[1]] = 5 #reset old since it didn't move\n\n        # Check for collisions and apply additional rules\n        for new_pos in new_gray_positions:\n              row, col = new_pos\n\n              if 0 <= row < output_grid.shape[0] and 0 <= col < output_grid.shape[1]:\n                output_grid[row,col] = 5\n              # else, skip - pixel will remain in old place.\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7090,
    "candidates_token_count": 867,
    "total_token_count": 7957,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 13.294067
}