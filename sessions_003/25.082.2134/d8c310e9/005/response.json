{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Repeating Patterns:** For each row, starting from the last row and moving upwards, find the longest repeating sub-pattern that begins at the start of the row.\n2.  **Extend Patterns:** If a repeating pattern is found in a row, replicate that pattern across the entire width of the row.\n3.  **Propagate Patterns Upward**: If any row above the last two rows have a repeating pattern that exactly matches a sub-pattern of the bottom-most pattern *and* starts at the beginning of that row, extend it across the width of that row.\n\"\"\"\n\nimport numpy as np\n\ndef find_repeating_pattern(row):\n    \"\"\"Finds the longest repeating pattern in a row, starting from index 0.\"\"\"\n    row = np.array(row)\n    n = len(row)\n    best_pattern = None\n    max_coverage = 0\n\n    for length in range(1, n // 2 + 1):\n        pattern = row[:length]\n        repetitions = 0\n        current_pos = 0\n        while current_pos + length <= n:\n            if np.array_equal(row[current_pos : current_pos + length], pattern):\n                repetitions += 1\n                current_pos += length\n            else:\n                break\n        coverage = repetitions * length\n        if repetitions > 1 and coverage > max_coverage:\n            max_coverage = coverage\n            best_pattern = pattern\n\n    return best_pattern\n\ndef is_subpattern(pattern, larger_pattern):\n    \"\"\"Checks if pattern is a sub-pattern of larger_pattern, starting from the beginning.\"\"\"\n    if not larger_pattern or not pattern:\n        return False\n    return np.array_equal(larger_pattern[:len(pattern)], pattern)\n\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the identified rule.\"\"\"\n    input_grid = np.array(input_grid)\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Find the pattern in the last row.\n    bottom_pattern = find_repeating_pattern(input_grid[-1])\n\n    # Iterate through rows from bottom to top.\n    for i in range(rows - 1, -1, -1):\n        row_pattern = find_repeating_pattern(input_grid[i])\n\n        # Extend the pattern if found.\n        if row_pattern is not None:\n          pattern_len = len(row_pattern)\n          output_grid[i] = np.tile(row_pattern, cols // pattern_len + (cols % pattern_len > 0))[:cols]\n        #if row above the bottom 2 rows - check and extend for sub-patterns\n        elif bottom_pattern is not None and i < rows-2:\n          potential_subpattern = input_grid[i].tolist()\n          for sub_len in range(1, len(bottom_pattern) + 1):\n            if np.array_equal(np.array(potential_subpattern[:sub_len]), np.array(bottom_pattern[:sub_len])):\n                pattern = bottom_pattern[:sub_len]\n                pattern_len = len(pattern)\n                output_grid[i] = np.tile(pattern, cols // pattern_len + (cols % pattern_len > 0))[:cols]\n                break\n\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6787,
    "candidates_token_count": 779,
    "total_token_count": 7566,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.735613
}