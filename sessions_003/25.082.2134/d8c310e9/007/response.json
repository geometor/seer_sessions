{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Repeating Patterns:** For each row, starting from the last row up to the first, identify any repeating sub-pattern within that row. The repeating pattern can start at any point of the row.\n2. **Extend Pattern in Row:** If a repeating pattern is found in the row, extend the pattern to fill the full width of the row.\n3.  **Propagate to Row Above:** Once a repeating pattern is found and extended in row *n*, examine row *n-1*. If there is a repeating pattern in row *n-1*, extend the pattern across the width of row *n-1*. Repeat the process to the top row.\n\"\"\"\n\nimport numpy as np\n\ndef find_repeating_pattern(row):\n    \"\"\"Finds the longest repeating pattern in a row.\"\"\"\n    row = np.array(row)\n    n = len(row)\n    best_pattern = None\n    max_coverage = 0\n\n    for start in range(n):\n        for length in range(1, (n - start) // 2 + 1):\n            pattern = row[start:start+length]\n            repetitions = 0\n            current_pos = start\n            while current_pos + length <= n:\n                if np.array_equal(row[current_pos : current_pos + length], pattern):\n                    repetitions += 1\n                    current_pos += length\n                else:\n                    break\n            coverage = repetitions * length\n            if repetitions > 1 and coverage > max_coverage:\n                max_coverage = coverage\n                best_pattern = pattern\n    return best_pattern\n\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the identified rule.\"\"\"\n    input_grid = np.array(input_grid)\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Iterate through rows from bottom to top.\n    for i in range(rows - 1, -1, -1):\n        row_pattern = find_repeating_pattern(input_grid[i])\n\n        # Extend the pattern if found.\n        if row_pattern is not None:\n            pattern_len = len(row_pattern)\n            output_grid[i] = np.tile(row_pattern, cols // pattern_len + (cols % pattern_len > 0))[:cols]\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5667,
    "candidates_token_count": 545,
    "total_token_count": 6212,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.711458
}