{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nExtracts the unique colors of objects in a 2D grid, preserving the order of their first appearance from top to bottom.\n\"\"\"\n\nimport numpy as np\n\ndef get_objects(grid):\n    \"\"\"\n    Identifies distinct objects within the grid.\n\n    Args:\n        grid: A 2D numpy array representing the input grid.\n\n    Returns:\n        A list of sets, where each set contains the coordinates of an object's pixels.\n    \"\"\"\n    objects = []\n    visited = set()\n    rows, cols = grid.shape\n\n    def is_valid(r, c):\n        return 0 <= r < rows and 0 <= c < cols\n\n    def dfs(r, c, current_object):\n        if (r, c) in visited or not is_valid(r, c) or grid[r, c] == 0:\n            return\n        visited.add((r, c))\n        current_object.add((r, c))\n\n        # Check adjacent cells (up, down, left, right)\n        dfs(r + 1, c, current_object)\n        dfs(r - 1, c, current_object)\n        dfs(r, c + 1, current_object)\n        dfs(r, c - 1, current_object)\n\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and (r, c) not in visited:\n                current_object = set()\n                dfs(r, c, current_object)\n                objects.append(current_object)\n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid to extract unique object colors in order of appearance.\n\n    Args:\n      input_grid:  list of lists\n    \"\"\"\n    grid = np.array(input_grid)\n    objects = get_objects(grid)\n\n    # Extract unique colors in order of object appearance\n    ordered_colors = []\n    for obj in objects:\n        # Get the color of the first pixel in the object (all pixels in an object have the same color)\n        first_pixel_coords = next(iter(obj))\n        color = grid[first_pixel_coords]\n        if color not in ordered_colors:\n            ordered_colors.append(color)\n\n    return ordered_colors\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2635,
    "candidates_token_count": 539,
    "total_token_count": 3174,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.52257
}