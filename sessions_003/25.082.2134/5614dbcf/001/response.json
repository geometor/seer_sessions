{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe input grid is summarized by extracting a single representative digit from each contiguous block of non-white (non-zero) color. The output grid's dimensions are determined by the number of such color blocks. The representative digit is found by checking the center of the block or selecting the first non-zero pixel. Single-pixel regions are ignored.\n\"\"\"\n\nimport numpy as np\n\ndef find_color_blocks(grid):\n    \"\"\"Finds contiguous color blocks (excluding white/0) and returns a list of (block, representative_pixel_coords).\"\"\"\n    visited = np.zeros_like(grid, dtype=bool)\n    blocks = []\n\n    def dfs(row, col, color, current_block):\n        if (\n            row < 0\n            or row >= grid.shape[0]\n            or col < 0\n            or col >= grid.shape[1]\n            or visited[row, col]\n            or grid[row, col] != color\n        ):\n            return\n        visited[row, col] = True\n        current_block.append((row, col))\n        dfs(row + 1, col, color, current_block)\n        dfs(row - 1, col, color, current_block)\n        dfs(row, col + 1, color, current_block)\n        dfs(row, col - 1, color, current_block)\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if not visited[row, col] and grid[row, col] != 0:\n                current_block = []\n                dfs(row, col, grid[row, col], current_block)\n                if len(current_block) > 1:  # Ignore single-pixel blocks\n                    blocks.append(current_block)\n    return blocks\n\ndef get_representative_pixel(block, grid):\n    \"\"\"Gets the representative pixel coordinates for a block.\"\"\"\n    rows, cols = zip(*block)\n    center_row = (min(rows) + max(rows)) // 2\n    center_col = (min(cols) + max(cols)) // 2\n\n    if (center_row, center_col) in block:\n       return grid[center_row,center_col] # return color value\n\n    # top-left\n    for row, col in sorted(block):\n        return grid[row,col]\n\n    return None # should not happen, all valid per find_color_blocks\n\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the described rules.\"\"\"\n    input_grid = np.array(input_grid)  # Ensure numpy array\n    blocks = find_color_blocks(input_grid)\n    representative_digits = []\n\n    for block in blocks:\n        representative_digit = get_representative_pixel(block, input_grid)\n        representative_digits.append(representative_digit)\n\n\n    # Construct output grid.  Since order matters, just build a list and then\n    # reshape\n    output_grid_rows = int(np.ceil(np.sqrt(len(representative_digits))))\n    output_grid_cols = int(np.ceil(len(representative_digits)/output_grid_rows))\n\n    output_grid = np.zeros((output_grid_rows, output_grid_cols), dtype=int)\n\n    idx = 0\n    for r in range(output_grid_rows):\n        for c in range(output_grid_cols):\n            if idx < len(representative_digits):\n                output_grid[r,c] = representative_digits[idx]\n                idx+=1\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1936,
    "candidates_token_count": 837,
    "total_token_count": 2773,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 13.819172
}