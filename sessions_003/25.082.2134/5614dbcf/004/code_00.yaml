example_1:
  input:
    objects:
      - color: 3  # Top-left block
        shape: rectangle
        size: 9
        top_left: [0, 0]
      - color: 8  # Top-right block
        shape: rectangle
        size: 9 #includes the 5
        top_left: [0, 6]
      - color: 7  # Middle block
        shape: rectangle
        size: 9 # includes the 5
        top_left: [3, 3]
      - color: 6  # Bottom-left block
        shape: rectangle
        size: 9 # includes the 5
        top_left: [6, 0]
      - color: 9  # Bottom-right block
        shape: rectangle
        size: 9 # includes the 5's
        top_left: [6, 6]
    relations:
      - [adjacent, 3, 8] #object, relation, object, object...
      - [adjacent, 3, 7]
      - [adjacent, 3, 6]
      - [adjacent, 8, 7]
      - [adjacent, 8, 9]
      - [adjacent, 7, 6]
      - [adjacent, 7, 9]
      - [adjacent, 6, 9]

  output:
    grid_size: [3, 3]
    arrangement: |
      The output grid places the representative digits of the main colored blocks,
       ignoring any single-pixel color blocks within. The arrangement is based on
       the top-left position of the large color blocks in the input grid.

example_2:
  input:
    objects:
      - color: 2
        shape: rectangle
        size: 9
        top_left: [0, 3]
      - color: 7
        shape: rectangle
        size: 9
        top_left: [6, 3]
      - color: 5 # ignore
        size: 1
        top_left: [various] # multiple scattered single-pixel
    relations:
      - [adjacent, 2, 7]
      - [surrounded_by_zero, 2]
      - [surrounded_by_zero, 7]
  output:
    grid_size: [3, 3]
    arrangement: |
      Places the representative color of block 2 in the top row,
      and places the representative color of block 7 at the bottom row.
      The center row is filled with zeros
