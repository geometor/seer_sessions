{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid based on the following rules:\n\n1. Object Identification: Identify all blue (1), orange (7), azure (8), magenta (6) pixels, and green (3) 2x2 squares.\n2. Blue Pixel Extension (Conditional):\n    - Locate 2x2 green squares.\n    - For each column that contains any blue pixel, extend the blue color downwards only within that column. Stop at non-empty cells or boundary.\n3. Orange Pixel Duplication (Conditional):\n    - Duplicate orange (7) pixels to the right, only if the cell is empty (0).\n4. Azure Pixel Duplication (Conditional):\n    - Duplicate azure (8) pixels to the left, only if the cell is empty (0).\n5. Magenta Pixel Movement (Conditional):\n    - For each magenta (6) pixel:\n        - Check for green (3) below in the same column.\n        - If green is found, move magenta to the highest empty (0) cell above.\n        - Overwrite the original position with 0.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, color):\n    \"\"\"Finds all instances of a specified color in the grid.\"\"\"\n    return np.argwhere(grid == color)\n\ndef find_2x2_squares(grid, color):\n    \"\"\"Finds all 2x2 squares of a specified color.\"\"\"\n    rows, cols = grid.shape\n    squares = []\n    for r in range(rows - 1):\n        for c in range(cols - 1):\n            if (grid[r, c] == color and grid[r + 1, c] == color and\n                grid[r, c + 1] == color and grid[r + 1, c + 1] == color):\n                squares.append((r, c))  # Top-left corner of the square\n    return squares\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of the input_grid\n    output_grid = input_grid.copy()\n    rows, cols = input_grid.shape\n\n    # 1. Object Identification\n    blue_pixels = find_objects(input_grid, 1)\n    orange_pixels = find_objects(input_grid, 7)\n    azure_pixels = find_objects(input_grid, 8)\n    magenta_pixels = find_objects(input_grid, 6)\n    green_squares = find_2x2_squares(input_grid, 3)\n\n    # 2. Blue Pixel Extension (Conditional)\n    if green_squares:  # Only extend if there are green squares\n      cols_with_blue = np.unique(blue_pixels[:, 1]) # find unique columns\n      for c in cols_with_blue:\n        # find the lowest blue pixel in that column\n        lowest_blue_row = -1\n        for r in range(rows):\n          if output_grid[r, c] == 1:\n            lowest_blue_row = r\n        # extend down from each blue pixel\n        if lowest_blue_row > -1:\n          for r in range(lowest_blue_row + 1, rows):\n              if output_grid[r, c] == 0:\n                  output_grid[r, c] = 1\n              else:\n                  break  # Stop at non-empty cell\n\n    # 3. Orange Pixel Duplication (Conditional)\n    for r, c in orange_pixels:\n        if c + 1 < cols and output_grid[r, c + 1] == 0:  # Check boundary and emptiness\n            output_grid[r, c + 1] = 7\n\n    # 4. Azure Pixel Duplication (Conditional)\n    for r, c in azure_pixels:\n        if c - 1 >= 0 and output_grid[r, c - 1] == 0:  # Check boundary and emptiness\n            output_grid[r, c - 1] = 8\n\n    # 5. Magenta Pixel Movement (Conditional)\n    for r, c in magenta_pixels:\n        has_green_below = False\n        for green_r, green_c in green_squares:\n            # if there is ANY green pixel below\n            if green_c <= c < green_c+2 and green_r > r : #within the same column\n                has_green_below = True\n                break\n            elif green_r+1 > r and green_c <= c < green_c+2:\n                has_green_below = True\n                break\n\n        if has_green_below:\n            # Find highest empty cell above\n            new_r = r\n            for check_r in range(r - 1, -1, -1):\n                if output_grid[check_r, c] == 0:\n                    new_r = check_r\n                else:\n                    break\n            if new_r != r:\n                output_grid[new_r, c] = 6  # Move magenta\n                output_grid[r, c] = 0  # Clear original position\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 9291,
    "candidates_token_count": 1168,
    "total_token_count": 10459,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 17.186326
}