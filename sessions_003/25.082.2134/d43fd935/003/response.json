{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid based on the following rules:\n1. Green squares trigger blue extension: If any 2x2 green square exists, all blue (1) pixels extend downwards in their column, filling empty (0) cells until they hit the boundary or a non-empty cell.\n2. Orange duplication: Every orange (7) pixel duplicates to its immediate right.\n3. Azure duplication: Every azure (8) pixel duplicates to its immediate left.\n4. Magenta movement: Every magenta (6) pixel moves to the highest empty (0) cell above it in the same column if any green (3) pixel is present below it.\n\"\"\"\n\nimport numpy as np\n\ndef find_objects(grid, color):\n    \"\"\"Finds all instances of a specified color in the grid.\"\"\"\n    return np.argwhere(grid == color)\n\ndef is_green_square(grid):\n    \"\"\"Checks if at least one 2x2 green square exists in the grid.\"\"\"\n    rows, cols = grid.shape\n    for r in range(rows - 1):\n        for c in range(cols - 1):\n            if (grid[r, c] == 3 and grid[r + 1, c] == 3 and\n                grid[r, c + 1] == 3 and grid[r + 1, c + 1] == 3):\n                return True\n    return False\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of the input_grid\n    output_grid = input_grid.copy()\n    rows, cols = input_grid.shape\n\n    # Find all '1' (blue), '3' (green), '6' (magenta), '7' (orange) and '8' (azure) pixels\n    blue_pixels = find_objects(input_grid, 1)\n    green_pixels = find_objects(input_grid, 3)  # Used for magenta movement condition\n    magenta_pixels = find_objects(input_grid, 6)\n    orange_pixels = find_objects(input_grid, 7)\n    azure_pixels = find_objects(input_grid, 8)\n    \n    # 1. Green Square Trigger and Blue Extension\n    if is_green_square(input_grid):\n        for blue_r, blue_c in blue_pixels:\n            # Extend downwards\n            for r in range(blue_r + 1, rows):\n                if output_grid[r, blue_c] == 0:\n                    output_grid[r, blue_c] = 1\n                else:\n                    break  # Stop at non-empty cell\n\n    # 2. Orange Duplication\n    for r, c in orange_pixels:\n        if c + 1 < cols:  # Check boundary\n            output_grid[r, c + 1] = 7\n\n    # 3. Azure Duplication\n    for r, c in azure_pixels:\n        if c - 1 >= 0:  # Check boundary\n            output_grid[r, c - 1] = 8\n\n    # 4. Magenta Movement\n    for r, c in magenta_pixels:\n        has_green_below = False\n        for gr, gc in green_pixels:\n            if gc == c and gr > r:\n                has_green_below = True\n                break\n        if has_green_below:\n            # Find highest empty cell above\n            new_r = r\n            for check_r in range(r - 1, -1, -1):  # Iterate upwards\n                if output_grid[check_r, c] == 0:\n                    new_r = check_r\n                else:\n                    break  # Stop at first non-empty cell\n            if new_r != r:  # Only move if a higher empty cell was found\n                output_grid[new_r, c] = 6\n                output_grid[r, c] = 0\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8695,
    "candidates_token_count": 905,
    "total_token_count": 9600,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 15.848787
}