{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nCopies non-zero pixels downwards and to the right. A non-zero pixel is copied\ndownwards if a pixel in any row above it in the same column has the same color.\nA non-zero pixel is also copied to the right if it is immediately adjacent to\na pixel of the same color.\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbor(grid, row, col, direction):\n    \"\"\"Gets the neighbor of a cell in a given direction ('left' or 'right').\"\"\"\n    height, width = grid.shape\n    if direction == 'left':\n        if col > 0:\n            return grid[row, col - 1]\n        else:\n            return None  # No left neighbor\n    elif direction == 'right':\n        if col < width - 1:\n            return grid[row, col + 1]\n        else:\n            return None  # No right neighbor\n    return None\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the duplication rule.\"\"\"\n    input_grid = np.array(input_grid)\n    output_grid = np.copy(input_grid)  # Start with a copy of the input\n    height, width = input_grid.shape\n\n    for row in range(height):\n        for col in range(width):\n            current_pixel = input_grid[row, col]\n\n            # Skip if the current pixel is background (0)\n            if current_pixel == 0:\n                continue\n\n            right_neighbor = get_neighbor(input_grid, row, col, 'right')\n\n\n            # Check conditions for duplication to the right\n            if right_neighbor is not None and right_neighbor == current_pixel:\n                # Duplicate the pixel to the right of the right neighbor\n                if col + 2 < width: #make sure we can copy\n                    output_grid[row, col + 2] = current_pixel\n\n    #now iterate the output grid for vertical copies,\n    # we check from top down so we don't have to have a second copy\n    for row in range(height):\n        for col in range(width):\n            for row_above in range(row):\n                if output_grid[row_above,col] != 0:\n                    output_grid[row,col] = output_grid[row_above,col]\n                    #found match, no need to search rows further up\n                    break\n\n\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 22466,
    "candidates_token_count": 555,
    "total_token_count": 23021,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.650408
}