{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify the Horizontal Line:** Locate the single, horizontal line of uniform color that spans the entire width of the input grid.\n2.  **Note the Horizontal Line's color:** Remember that the horizontal line original color.\n3.  **Identify Colored Squares:** Find the colored squares (single cells or small groups of adjacent cells of the same color) located above and below the horizontal line, that DO NOT match the horizontal line's color.\n4.  **Replace Square Colors:** Change the color of these identified squares to the color of the horizontal line, *from the input grid*.\n5.  **Blank out Horizontal line:** Blank out (fill with '0') the horizontal line.\n6.  **Preserve Background:** Ensure all cells with a value of 0 (white) in the input grid remain 0 in the output grid.\n\"\"\"\n\nimport numpy as np\n\ndef find_horizontal_line(grid):\n    rows, cols = grid.shape\n    for r in range(rows):\n        first_val = grid[r, 0]\n        if first_val == 0:\n            continue\n        if np.all(grid[r, :] == first_val):\n            return r, first_val\n    return None, None\n\ndef find_colored_squares(grid, horizontal_line_row, horizontal_line_color):\n    rows, cols = grid.shape\n    squares = []\n    for r in range(rows):\n        for c in range(cols):\n            if r != horizontal_line_row and grid[r,c] != 0 and grid[r,c] != horizontal_line_color:\n                squares.append((r, c, grid[r,c]))\n    return squares\n\ndef transform(input_grid):\n    # initialize output_grid\n    input_grid = np.array(input_grid)\n    output_grid = np.zeros_like(input_grid)\n\n    # change output pixels\n\n    # Find the horizontal line and its color\n    horizontal_line_row, horizontal_line_color = find_horizontal_line(input_grid)\n\n    # find colored sqaures\n    squares = find_colored_squares(input_grid, horizontal_line_row, horizontal_line_color)\n\n    # set the squares in the output\n    for r, c, old_color in squares:\n      output_grid[r,c] = horizontal_line_color\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2817,
    "candidates_token_count": 553,
    "total_token_count": 3370,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.059465
}