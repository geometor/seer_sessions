{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Horizontal Line:** Find the single horizontal line of a uniform, non-zero color that spans the entire width of the input grid. Record the row index and color of this line.\n2.  **Identify Objects:**  Identify all contiguous shapes (objects) in the input grid. An object is a group of connected pixels of the same color. Exclude pixels that are part of the horizontal line found in step 1, and also exclude background pixels (color 0).\n3.  **Mirror Objects:** For each object found in step 2, mirror its position *vertically* across the horizontal line identified in step 1.  The mirrored position's row index will change, but the column index will remain the same.\n4.  **Recolor Objects:** Change the color of all mirrored objects to the color of the horizontal line (from step 1).\n5.  **Create Output Grid:** Create a new grid, initially filled with 0s. The size of this grid should be the smallest possible rectangle that can contain *all* the mirrored objects. The horizontal line itself is *not* included in the output, only the mirrored objects.\n6. **Blank Horizontal Line** Ensure that all pixels from the original horizontal line from the input grid are set to color 0 (white).\n\"\"\"\n\nimport numpy as np\n\ndef find_horizontal_line(grid):\n    \"\"\"Finds the horizontal line and its color.\"\"\"\n    rows, cols = grid.shape\n    for r in range(rows):\n        first_val = grid[r, 0]\n        if first_val == 0:  # Skip lines that start with 0\n            continue\n        if np.all(grid[r, :] == first_val):\n            return r, first_val\n    return None, None\n\ndef find_objects(grid, exclude_row, exclude_color):\n    \"\"\"Finds objects, excluding a row and color.\"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n    objects = []\n\n    def dfs(r, c, color, obj_pixels):\n        if (r < 0 or r >= rows or c < 0 or c >= cols or visited[r, c] or\n                grid[r, c] != color or r == exclude_row):\n            return\n        visited[r, c] = True\n        obj_pixels.append((r, c))\n        dfs(r + 1, c, color, obj_pixels)\n        dfs(r - 1, c, color, obj_pixels)\n        dfs(r, c + 1, color, obj_pixels)\n        dfs(r, c - 1, color, obj_pixels)\n\n    for r in range(rows):\n        for c in range(cols):\n            if not visited[r, c] and grid[r, c] != 0 and grid[r, c] != exclude_color:\n                obj_pixels = []\n                dfs(r, c, grid[r, c], obj_pixels)\n                objects.append(obj_pixels)\n    return objects\n\ndef mirror_object(obj_pixels, horizontal_line_row):\n    \"\"\"Mirrors object pixels vertically across the horizontal line.\"\"\"\n    mirrored_pixels = []\n    for r, c in obj_pixels:\n        mirrored_r = 2 * horizontal_line_row - r\n        mirrored_pixels.append((mirrored_r, c))\n    return mirrored_pixels\n\ndef get_bounding_box(objects):\n    \"\"\"Calculates the bounding box of a list of objects.\"\"\"\n    if not objects:\n        return None  # Handle empty object list\n    min_row = min(px[0] for obj in objects for px in obj)\n    max_row = max(px[0] for obj in objects for px in obj)\n    min_col = min(px[1] for obj in objects for px in obj)\n    max_col = max(px[1] for obj in objects for px in obj)\n    return (min_row, max_row, min_col, max_col)\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the defined rules.\"\"\"\n    input_grid = np.array(input_grid)\n    rows, cols = input_grid.shape\n\n    # Find the horizontal line and its color\n    horizontal_line_row, horizontal_line_color = find_horizontal_line(input_grid)\n\n    # Find objects, excluding the horizontal line and background\n    objects = find_objects(input_grid, horizontal_line_row, horizontal_line_color)\n\n    # Mirror and recolor objects\n    mirrored_objects = []\n    for obj in objects:\n        mirrored_pixels = mirror_object(obj, horizontal_line_row)\n        mirrored_objects.append([(r, c, horizontal_line_color) for r, c in mirrored_pixels])\n\n    # Calculate bounding box for the *mirrored* objects\n    output_bbox = get_bounding_box(mirrored_objects)\n    if output_bbox is None:  # Handle cases with no objects\n       return np.zeros((0, 0), dtype=int).tolist()\n\n    min_row, max_row, min_col, max_col = output_bbox\n    \n    # adjust rows if they extend past 0\n    if min_row < 0:\n       max_row = max_row - min_row\n       min_row = 0\n\n    # Create output grid based on bounding box\n    output_grid = np.zeros((max_row - min_row + 1, max_col - min_col + 1), dtype=int)\n\n    # Place mirrored objects into the output grid, adjusting for the new origin\n    for obj in mirrored_objects:\n        for r, c, color in obj:\n            if r >= 0:  # only place if row is not negative from mirroring\n               output_grid[r - min_row, c - min_col] = color\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 14281,
    "candidates_token_count": 1372,
    "total_token_count": 15653,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 24.462155
}