{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Horizontal Line:** Scan the input grid to find a single horizontal line. This line must be of a uniform, non-zero color and extend across the entire width of the grid. Note the line's row index and color.\n\n2.  **Object Identification:** Locate all distinct objects in the input grid. An object is a contiguous group of pixels of the same color. Exclude pixels belonging to the horizontal line found in step 1, as well as background pixels (color 0).\n\n3.  **Mirror Objects:** For each object, mirror its position vertically across the horizontal line identified in step 1.  The mirrored row index is calculated as `2 * horizontal_line_row - original_row`. The column index stays the same.\n\n4.  **Recolor Objects:** Change the color of all mirrored objects to be the same as the horizontal line's color.\n\n5. **Determine Output Grid**\n    * calculate a bounding box that contains all the mirrored objects from all the previous steps\n    * if any of the mirrored object extend past row 0, add a shift to all objects so that the minimum row is 0\n    * the output dimensions are determined by (max_row - min_row +1, max_col - min_col +1)\n    * Create an output grid filled with background pixels\n\n6.  **Populate Output Grid**: Place each mirrored and recolored object onto the output grid.\n   *  Adjust object positions using the following offsets:\n        *   row_offset = - min_row_of_bounding_box\n        *   col_offset = - min_col_of_bounding_box\n\n7.  **Final Output:** Return the created output grid. The horizontal line itself is *not* part of the output; only the mirrored and recolored objects are included.\n\"\"\"\n\nimport numpy as np\n\ndef find_horizontal_line(grid):\n    \"\"\"Finds the horizontal line and its color.\"\"\"\n    rows, cols = grid.shape\n    for r in range(rows):\n        first_val = grid[r, 0]\n        if first_val == 0:  # Skip lines that start with 0\n            continue\n        if np.all(grid[r, :] == first_val):\n            return r, first_val\n    return None, None\n\ndef find_objects(grid, exclude_row, exclude_color):\n    \"\"\"Finds objects, excluding a row and color.\"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n    objects = []\n\n    def dfs(r, c, color, obj_pixels):\n        if (r < 0 or r >= rows or c < 0 or c >= cols or visited[r, c] or\n                grid[r, c] != color or r == exclude_row):\n            return\n        visited[r, c] = True\n        obj_pixels.append((r, c))\n        dfs(r + 1, c, color, obj_pixels)\n        dfs(r - 1, c, color, obj_pixels)\n        dfs(r, c + 1, color, obj_pixels)\n        dfs(r, c - 1, color, obj_pixels)\n\n    for r in range(rows):\n        for c in range(cols):\n            if not visited[r, c] and grid[r, c] != 0 and grid[r, c] != exclude_color:\n                obj_pixels = []\n                dfs(r, c, grid[r, c], obj_pixels)\n                objects.append(obj_pixels)\n    return objects\n\ndef mirror_object(obj_pixels, horizontal_line_row):\n    \"\"\"Mirrors object pixels vertically across the horizontal line.\"\"\"\n    mirrored_pixels = []\n    for r, c in obj_pixels:\n        mirrored_r = 2 * horizontal_line_row - r\n        mirrored_pixels.append((mirrored_r, c))\n    return mirrored_pixels\n\ndef get_bounding_box(mirrored_objects):\n    \"\"\"Calculates the bounding box of a list of mirrored objects.\"\"\"\n    if not mirrored_objects:\n        return None\n\n    min_row = min(px[0] for obj in mirrored_objects for px in obj)\n    max_row = max(px[0] for obj in mirrored_objects for px in obj)\n    min_col = min(px[1] for obj in mirrored_objects for px in obj)\n    max_col = max(px[1] for obj in mirrored_objects for px in obj)\n\n    return min_row, max_row, min_col, max_col\n\ndef transform(input_grid):\n    input_grid = np.array(input_grid)\n    rows, cols = input_grid.shape\n\n    # 1. Identify Horizontal Line\n    horizontal_line_row, horizontal_line_color = find_horizontal_line(input_grid)\n\n    # 2. Object Identification\n    objects = find_objects(input_grid, horizontal_line_row, horizontal_line_color)\n\n    # 3. Mirror Objects & 4. Recolor Objects\n    mirrored_objects = []\n    for obj in objects:\n        mirrored_pixels = mirror_object(obj, horizontal_line_row)\n        mirrored_objects.append([(r, c, horizontal_line_color) for r, c in mirrored_pixels])\n\n    # 5. Determine Output Grid\n    bbox = get_bounding_box(mirrored_objects)\n    if not bbox:\n      return np.zeros((0,0), dtype=int).tolist()\n\n    min_row, max_row, min_col, max_col = bbox\n\n    # Handle negative rows and calculate output grid size\n    row_shift = 0\n    if min_row < 0:\n        row_shift = -min_row\n\n    output_rows = max_row + row_shift + 1\n    output_cols = max_col - min_col + 1\n    output_grid = np.zeros((output_rows, output_cols), dtype=int)\n\n    # 6. Populate Output Grid\n    for obj in mirrored_objects:\n      for r, c, color in obj:\n        adjusted_r = r + row_shift\n        adjusted_c = c-min_col\n        if adjusted_r >=0 and adjusted_r < output_rows and adjusted_c >= 0 and adjusted_c < output_cols:\n              output_grid[adjusted_r, adjusted_c] = color\n\n    # 7. Final Output\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5264,
    "candidates_token_count": 1499,
    "total_token_count": 6763,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 22.260485
}