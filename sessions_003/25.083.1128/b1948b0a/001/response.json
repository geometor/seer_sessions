{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms a grid by changing magenta (6) pixels to red (2) based on adjacency.\nA magenta pixel changes to red unless it's part of a contiguous block of three or more magenta pixels.\nOrange (7) pixels remain unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef count_adjacent_same_color(grid, row, col, color):\n    \"\"\"Counts adjacent cells with the same color.\"\"\"\n    count = 0\n    rows, cols = grid.shape\n    for dr in [-1, 0, 1]:\n        for dc in [-1, 0, 1]:\n            if dr == 0 and dc == 0:\n                continue\n            r, c = row + dr, col + dc\n            if 0 <= r < rows and 0 <= c < cols and grid[r, c] == color:\n                count += 1\n    return count\n\ndef find_contiguous_blocks(grid, color):\n    \"\"\"Find contiguous blocks of a specified color.\"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n    blocks = []\n\n    def dfs(row, col, current_block):\n        if (row < 0 or row >= rows or col < 0 or col >= cols or\n                visited[row, col] or grid[row, col] != color):\n            return\n        visited[row, col] = True\n        current_block.append((row, col))\n        for dr in [-1, 0, 1]:\n            for dc in [-1, 0, 1]:\n                dfs(row + dr, col + dc, current_block)\n\n    for row in range(rows):\n        for col in range(cols):\n            if grid[row, col] == color and not visited[row, col]:\n                current_block = []\n                dfs(row, col, current_block)\n                if len(current_block) >=1:\n                   blocks.append(current_block)\n\n    return blocks\ndef transform(input_grid):\n    # Initialize output_grid as a copy of input_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    magenta_blocks = find_contiguous_blocks(input_grid, 6)\n    \n    for block in magenta_blocks:\n       if len(block) < 3:\n          for cell in block:\n             row, col = cell\n             output_grid[row,col] = 2\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1988,
    "candidates_token_count": 580,
    "total_token_count": 2568,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.082093
}