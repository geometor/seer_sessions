{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Magenta Regions:** In the input grid, find all groups of connected magenta (color value 6) pixels. Pixels are considered connected if they are adjacent horizontally, vertically, or diagonally.\n2.  **Transform to Red:** For each identified magenta region, change the color value of *all* its pixels to red (color value 2).\n3.  **Preserve Other Colors:** Ensure that all pixels in the input grid that are *not* part of a magenta region retain their original color values in the output grid.\n\"\"\"\n\nimport numpy as np\n\ndef _get_connected_components(grid, color):\n    \"\"\"\n    Finds connected components of a given color in a grid.\n\n    Args:\n        grid: A 2D numpy array representing the grid.\n        color: The color value to find connected components for.\n\n    Returns:\n        A list of sets, where each set contains the (row, col) coordinates of a connected component.\n    \"\"\"\n    visited = set()\n    components = []\n\n    def _dfs(row, col):\n        \"\"\"Depth-First Search helper function.\"\"\"\n        if (row, col) in visited or not (0 <= row < grid.shape[0] and 0 <= col < grid.shape[1]) or grid[row, col] != color:\n            return set()\n\n        visited.add((row, col))\n        component = {(row, col)}\n\n        for dr in [-1, 0, 1]:\n            for dc in [-1, 0, 1]:\n                if dr == 0 and dc == 0:\n                    continue\n                component.update(_dfs(row + dr, col + dc))\n        return component\n\n    for row in range(grid.shape[0]):\n        for col in range(grid.shape[1]):\n            if (row, col) not in visited and grid[row, col] == color:\n                components.append(_dfs(row, col))\n\n    return components\n\ndef transform(input_grid):\n    # initialize output_grid\n    grid = np.array(input_grid)\n    output_grid = np.copy(grid)\n\n    # Identify Magenta Regions\n    magenta_regions = _get_connected_components(grid, 6)\n\n    # Transform to Red\n    for region in magenta_regions:\n        for row, col in region:\n            output_grid[row, col] = 2\n\n    # Preserve Other Colors (implicitly handled by copying the grid initially)\n\n    return output_grid.tolist()\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2456,
    "candidates_token_count": 570,
    "total_token_count": 3026,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 13.412027
}