{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nShifts non-bottom-row yellow pixels in each column downwards by one row, extending the yellow to fill the spaces above, while preserving the bottom row of yellow pixels.\n\"\"\"\n\nimport numpy as np\n\ndef get_yellow_pixels(grid):\n    \"\"\"\n    Finds coordinates of all yellow pixels in the grid.\n    \"\"\"\n    yellow_pixels = []\n    for row_idx, row in enumerate(grid):\n        for col_idx, pixel in enumerate(row):\n            if pixel == 4:\n                yellow_pixels.append((row_idx, col_idx))\n    return yellow_pixels\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the described rule.\n    \"\"\"\n    input_grid = np.array(input_grid)\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # Get all yellow pixel coordinates\n    yellow_pixels = get_yellow_pixels(input_grid)\n\n    # Iterate through columns\n    for col in range(cols):\n        # Get yellow pixel row indices in the current column (excluding the bottom row)\n        yellow_rows = [row for row, c in yellow_pixels if c == col and row != rows - 1]\n\n        # If there are yellow pixels in the column (excluding bottom row)\n        if yellow_rows:\n          # find the lowest yellow pixel\n          lowest_yellow = max(yellow_rows)\n\n          # shift that down by one\n          new_lowest = lowest_yellow + 1\n            \n          # set previous yellow blocks to 0 and the new one to 4\n          # output_grid[lowest_yellow,col] = 0  # no clearing required - it will extend\n          if new_lowest < rows -1:  # make sure its not the bottom row\n            output_grid[new_lowest, col] = 4\n\n            # fill above up to including prior location with yellow\n            for r in range(0, new_lowest):\n              output_grid[r,col] = 4\n          else:\n            # special case when lowest yellow is row above bottom\n            for r in range(0, new_lowest):\n              output_grid[r,col] = 4\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1855,
    "candidates_token_count": 522,
    "total_token_count": 2377,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.239768
}