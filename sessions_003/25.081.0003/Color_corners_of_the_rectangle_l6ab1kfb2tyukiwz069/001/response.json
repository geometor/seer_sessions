{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify** all rows in the input grid that contain green (3) pixels.\n2.  **For each** of these identified rows:\n    *   **Insert** an orange (7) pixel to the immediate left of the leftmost green (3) pixel in that row.\n    *   **Insert** an orange (7) pixel to the immediate right of the rightmost green (3) pixel in that row.\n3. **All other** rows of the output grid are the same as in the input grid.\n\"\"\"\n\nimport numpy as np\n\ndef get_green_rows(grid):\n    # returns rows containing green pixels\n    green_rows = []\n    for i, row in enumerate(grid):\n        if 3 in row:\n            green_rows.append(i)\n    return green_rows\n            \ndef transform(input_grid):\n    \"\"\"Transforms the input grid by wrapping green blocks with orange pixels.\"\"\"\n\n    input_grid = np.array(input_grid)\n    output_grid = np.copy(input_grid)\n    rows_with_green = get_green_rows(input_grid)\n\n    # Iterate through rows that have green pixels\n    for row_index in rows_with_green:\n        row = input_grid[row_index]\n        \n        # Find the indices of the green pixels\n        green_indices = np.where(row == 3)[0]\n\n        # find the leftmost and rightmost\n        leftmost_green_index = green_indices[0]\n        rightmost_green_index = green_indices[-1]\n        \n        # bounds check and set left pixel to orange (7)\n        if leftmost_green_index > 0:\n            output_grid[row_index, leftmost_green_index - 1] = 7\n        # bounds check and set right pixel to orange (7)\n        if rightmost_green_index < len(row) - 1:\n            output_grid[row_index, rightmost_green_index + 1] = 7\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1928,
    "candidates_token_count": 475,
    "total_token_count": 2403,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.314477
}