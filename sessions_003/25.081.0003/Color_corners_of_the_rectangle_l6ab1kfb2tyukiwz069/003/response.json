{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Green Rectangle:** Find the smallest and largest row and column indices that contain green (3) pixels. These define a rectangular region. This may span several rows or be within one row.\n\n2.  **Place Orange Pixels (Top and Bottom Rows):**\n    *   On the top row of the green rectangle (`min_row`):\n        *   If there is a column to the left of the leftmost green pixel (`min_col > 0`), place an orange (7) pixel one position to the left.\n        *    If there is a column to the right of the rightmost green pixel (`max_col < grid_width - 1`), place an orange (7) pixel one position to the right.\n    * On the bottom row of the green rectangle (`max_row`):\n        * If there is a column to the left of the leftmost green pixel (`min_col > 0`), place an orange (7) pixel at one position to the left .\n        * If there is a column to the right of the rightmost green pixel (`max_col < grid_width -1`), place an orange (7) pixel one position to the right.\n\n3.  **Preserve Other Pixels:** All other pixels in the output grid remain the same as in the input grid.\n\"\"\"\n\nimport numpy as np\n\ndef find_green_rectangle(grid):\n    # returns (min_row, max_row, min_col, max_col) of the green rectangle\n    green_coords = np.argwhere(grid == 3)\n    if green_coords.size > 0:\n        min_row, min_col = green_coords.min(axis=0)\n        max_row, max_col = green_coords.max(axis=0)\n        return int(min_row), int(max_row), int(min_col), int(max_col)\n    else:\n        return None, None, None, None\n\ndef transform(input_grid):\n    input_grid = np.array(input_grid)\n    output_grid = np.copy(input_grid)\n    min_row, max_row, min_col, max_col = find_green_rectangle(input_grid)\n\n    if min_row is not None:\n        # Place orange pixels on the top row\n        if min_col > 0:\n            output_grid[min_row, min_col - 1] = 7\n        if max_col < input_grid.shape[1] - 1:\n            output_grid[min_row, max_col + 1] = 7\n\n        # Place orange pixels on the bottom row, only if distinct from the top row\n        if max_row > min_row:\n            if min_col > 0:\n                output_grid[max_row, min_col - 1] = 7\n            if max_col < input_grid.shape[1] - 1:\n                output_grid[max_row, max_col + 1] = 7\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4950,
    "candidates_token_count": 698,
    "total_token_count": 5648,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 14.073343
}