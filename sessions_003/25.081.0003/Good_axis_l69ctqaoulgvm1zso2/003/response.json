{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nReplaces white pixels above a \"control row\" with azure based on the colors in the control row. The control row is defined as a row containing mostly red pixels and exactly one other color.  If a column contains a white pixel above the control row, and the control row has red in that column, the white pixel is changed to azure. If the control row contains a non-red color in that column, the output has a white cell. If there is azure beneath the control row in that column, the white pixels above the control row become white.\n\"\"\"\n\nimport numpy as np\n\ndef find_control_row(grid):\n    \"\"\"Finds the control row, which has mostly red and one other color.\"\"\"\n    rows, cols = grid.shape\n    for r in range(rows):\n        unique_values = np.unique(grid[r])\n        if len(unique_values) != 2:\n            continue\n        red_count = np.count_nonzero(grid[r] == 2)\n        if red_count >= 1 and red_count == (len(grid[r]) - 1):\n                return r\n    return -1\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid based on the control row.\"\"\"\n    grid = np.array(input_grid)\n    rows, cols = grid.shape\n    output_grid = np.copy(grid)\n    control_row_index = find_control_row(grid)\n\n    if control_row_index != -1:\n        control_row = grid[control_row_index]\n        other_color = [c for c in np.unique(control_row) if c != 2][0]\n\n        for c in range(cols):\n            for r in range(control_row_index):\n                if grid[r, c] == 0:  # If pixel is white above control row\n                    if control_row[c] == 2: #check if the control row is red\n                        if np.any(grid[control_row_index:, c] == 8): #check if azure beneath control row\n                            output_grid[r,c] = 0 #if so, set the cell to white\n                        else: # otherwise set to azure\n                            output_grid[r, c] = 8  # Replace with azure\n                    elif control_row[c] == other_color: #otherwise check if same column as other color\n                        output_grid[r,c] = 0 #if so, make it white\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5115,
    "candidates_token_count": 574,
    "total_token_count": 5689,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 13.203372
}