{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation rule works as follows:\n1. Analyze Rows: Examine each row of the input grid. Count the number of non-zero pixels in each row.\n2. Sort Rows: Sort the rows based on the count of non-zero pixels, in descending order (rows with more non-zero pixels come first). If any rows are empty, place them at the end.\n3. Consolidate within Rows: Iterate through the sorted rows. Within each row, shift the non-zero pixels to the \"left\", adjacent to each other, removing any gaps of zeros between them.\n4. Rebuild Grid: create a new, empty output grid with same dimensions as the input.\n5. Populate Output: Copy each of the processed rows to the output grid starting from the top row.\n\"\"\"\n\nimport numpy as np\n\ndef count_non_zero(row):\n    \"\"\"Counts the number of non-zero elements in a row.\"\"\"\n    return np.count_nonzero(row)\n\ndef consolidate_row(row):\n    \"\"\"Shifts non-zero pixels to the left within a row.\"\"\"\n    new_row = [pixel for pixel in row if pixel != 0]\n    new_row.extend([0] * (len(row) - len(new_row)))  # Pad with zeros\n    return new_row\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the rule.\"\"\"\n    input_grid_np = np.array(input_grid)\n    rows, cols = input_grid_np.shape\n\n    # Analyze and sort rows\n    row_data = []\n    for i, row in enumerate(input_grid_np):\n        non_zero_count = count_non_zero(row)\n        row_data.append((non_zero_count, list(row),i))  # Store count, original row, original index\n\n    row_data.sort(key=lambda x: x[0], reverse=True)  # Sort by non-zero count\n\n    # rebuild grid\n    output_grid = np.zeros((rows, cols), dtype=int)\n\n    # Consolidate and populate output grid\n    for i, (count, row, original_index) in enumerate(row_data):\n        \n        output_grid[i] = consolidate_row(row)\n        \n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7530,
    "candidates_token_count": 525,
    "total_token_count": 8055,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 15.5332
}