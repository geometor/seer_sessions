example_1:
  input:
    objects:
      - color: yellow (4)
        locations: [[0, 0], [4, 3]]
        count: 2
      - color: red (2)
        locations: [[0, 1], [1, 1], [1, 3], [1, 4], [3, 0], [3, 2], [3, 3]]
        count: 7
      - color: black (0)
        count: 16
  expected_output:
    objects:
      - color: azure (8)
        locations: [[1,0], [2,0], [2,1], [3, 1], [4, 1], [4, 2]]
        count: 6
      - color: black (0)
        count: 19
  transformation:
    rule: "Red pixels connected to other red pixels that form a continuous path from one yellow pixel to another yellow pixel (or the edge) are replaced with azure. Red pixels not part of such a path are changed to black"
    notes:
       - "Connectivity between red pixels is crucial, considering both horizontal and vertical adjacency."
       - "It seems the path starts from a '2' adjacent to '4' in the top row, traces to '2' in the same column in bottom row, then follows to '4' in the bottom row, then change the path to '8'."
       - "The current transform keeps all the original zeros, reduces the number of 2s, keeps all the original 4s, and adds some 8s"
  transformed_output:
     objects:
       - color: azure (8)
         locations: [[0, 1], [3, 0]]
         count: 2
example_2:
  input:
    objects:
      - color: yellow (4)
        locations: [[0, 0], [4, 4]]
        count: 2
      - color: red (2)
        locations: [[0, 1], [1, 1], [1, 3], [2, 1], [2, 3], [3, 1], [3, 3], [4, 3]]
        count: 8
      - color: black (0)
        count: 15
  expected_output:
    objects:
      - color: azure (8)
        count: 15
      - color: black (0)
        count: 10
  transformation:
    rule: "Red pixels connected to other red pixels that form a continuous path between yellow pixels (or to the edge) are replaced with azure. Red pixels not part of this path are changed to black."
    notes:
       - "Connectivity between red pixels is crucial. It appears red pixels connected to the edges in this case extend the transformation criteria."
       - "The current transform keeps almost all the original zeros, keeps 4, reduces the number of 2s, and adds a few 8s"
  transformed_output:
     objects:
       - color: azure (8)
         locations: [[0, 1]]
         count: 1