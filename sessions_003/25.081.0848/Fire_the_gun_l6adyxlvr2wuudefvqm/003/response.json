{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1. Scan the input grid: Examine each pixel.\n2. Identify White Pixels: Focus on pixels that are white (value 0).\n3. Check for Gray Neighbors: For each white pixel, examine its immediate neighbors (up, down, left, and right).\n4. Determine horizontal/vertical runs: Transform a white (0) pixel into a red pixel (2) ONLY IF, looking from the the perspective of the current pixel position, extending to the left AND right OR above AND below, a gray (5) is encountered in *both* directions and the current pixel is to the immediate left of gray.\n\"\"\"\n\nimport numpy as np\n\ndef get_adjacent_pixels(grid, row, col):\n    \"\"\"Gets the values of adjacent pixels (up, down, left, right).\"\"\"\n    rows, cols = grid.shape\n    adjacent = []\n    if row > 0:\n        adjacent.append((row - 1, col, grid[row - 1, col]))  # Up\n    if row < rows - 1:\n        adjacent.append((row + 1, col, grid[row + 1, col]))  # Down\n    if col > 0:\n        adjacent.append((row, col - 1, grid[row, col - 1]))  # Left\n    if col < cols - 1:\n        adjacent.append((row, col + 1, grid[row, col + 1]))  # Right\n    return adjacent\n\ndef check_horizontal(grid, row, col):\n    \"\"\"Checks for gray pixels to the left and right.\"\"\"\n    rows, cols = grid.shape\n    left = False\n    right = False\n\n    # Check left\n    for c in range(col - 1, -1, -1):\n        if grid[row, c] == 5:\n            left = True\n            break\n\n    # Check Right\n    for c in range(col + 1, cols):\n        if grid[row,c] == 5 and col == c - 1:\n            right = True\n            break\n    return left and right\n\ndef check_vertical(grid, row, col):\n    rows, cols = grid.shape\n\n    above = False\n    below = False\n\n    # check above\n    for r in range(row - 1, -1, -1):\n        if grid[r,col] == 5:\n            above = True\n            break\n\n    # check below\n    for r in range(row + 1, rows):\n        if grid[r,col] == 5 and row == r - 1:\n            below = True\n            break\n\n    return above and below\n\ndef transform(input_grid):\n    # initialize output_grid\n    input_grid = np.array(input_grid)  # Ensure numpy array\n    output_grid = np.copy(input_grid)\n\n    rows, cols = input_grid.shape\n\n    # change output pixels\n    for row in range(rows):\n        for col in range(cols):\n            if input_grid[row,col] == 0:\n                if check_horizontal(input_grid, row, col) or check_vertical(input_grid, row, col):\n                    output_grid[row,col] = 2\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3363,
    "candidates_token_count": 744,
    "total_token_count": 4107,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 13.604981
}