{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid by stacking non-zero pixels at the bottom of each column, maintaining the original grid dimensions.\n\"\"\"\n\nimport numpy as np\n\ndef get_non_zero_pixels(grid):\n    \"\"\"\n    Returns a list of (row, col, value) tuples for non-zero pixels, \n    traversing bottom to top, left to right.\n    \"\"\"\n    non_zero_pixels = []\n    rows, cols = grid.shape\n    for c in range(cols):\n        for r in range(rows - 1, -1, -1):\n            if grid[r, c] != 0:\n                non_zero_pixels.append((r, c, grid[r, c]))\n    return non_zero_pixels\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms an input grid by moving all non-zero pixels to the bottom of each column.\n\n    Args:\n        input_grid: A 2D numpy array representing the input grid.\n\n    Returns:\n        A 2D numpy array representing the transformed grid.\n    \"\"\"\n    input_grid = np.array(input_grid)  # Ensure input is a NumPy array\n    rows, cols = input_grid.shape\n    output_grid = np.zeros((rows, cols), dtype=int)\n\n    non_zero_pixels = get_non_zero_pixels(input_grid)\n\n    # Iterate through the non-zero pixels\n    for _, in_col, value in non_zero_pixels:\n        # Find the lowest available position in the output column\n        for out_row in range(rows - 1, -1, -1):\n            if output_grid[out_row, in_col] == 0:\n                output_grid[out_row, in_col] = value\n                break  # Move to the next non-zero pixel\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2143,
    "candidates_token_count": 429,
    "total_token_count": 2572,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.677384
}