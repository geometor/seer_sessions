{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Edge Pixels:** Determine all pixels located on the perimeter (first/last row, first/last column) of the input grid.\n\n2.  **Identify Connected Regions:** For each unique color present on the edge, find all contiguous regions (blocks of pixels) of that color that include at least one edge pixel.\n\n3.  **Preserve Edge-Connected Regions:** In the output grid, maintain the original color of all pixels that belong to a connected region identified in step 2.\n\n4.  **Zero Out Other Pixels:** Set the color of all other pixels in the output grid to 0 (white/background). This includes both interior pixels and any edge pixels that are *not* part of a contiguous region connected to the edge for their respective color.\n\"\"\"\n\nimport numpy as np\nfrom scipy.ndimage import label\n\ndef get_edge_colors(grid):\n    \"\"\"Returns a set of unique colors present on the edges of the grid.\"\"\"\n    rows, cols = grid.shape\n    edge_colors = set()\n    for r in range(rows):\n        edge_colors.add(grid[r, 0])\n        edge_colors.add(grid[r, cols - 1])\n    for c in range(cols):\n        edge_colors.add(grid[0, c])\n        edge_colors.add(grid[rows - 1, c])\n    return edge_colors\n\ndef get_connected_regions(grid, edge_colors):\n    \"\"\"Finds contiguous regions of each edge color connected to the edge.\"\"\"\n    rows, cols = grid.shape\n    connected_regions = {}\n\n    for color in edge_colors:\n        binary_grid = (grid == color).astype(int)\n        labeled_array, num_features = label(binary_grid)\n        connected_regions[color] = []\n\n        for region_id in range(1, num_features + 1):\n            region_mask = (labeled_array == region_id)\n            coords = np.where(region_mask)\n            rows_region, cols_region = coords\n\n            # Check if the region touches the edge\n            touches_edge = False\n            for r, c in zip(rows_region, cols_region):\n                if r == 0 or r == rows - 1 or c == 0 or c == cols - 1:\n                    touches_edge = True\n                    break\n\n            if touches_edge:\n                connected_regions[color].append(region_mask)\n\n    return connected_regions\n\ndef transform(input_grid):\n    # initialize output_grid\n    input_grid = np.array(input_grid)\n    output_grid = np.zeros_like(input_grid)\n    rows, cols = input_grid.shape\n\n    # identify edge colors\n    edge_colors = get_edge_colors(input_grid)\n\n    # identify connected regions for each edge color\n    connected_regions = get_connected_regions(input_grid, edge_colors)\n\n    # preserve pixels in edge-connected regions\n    for color, regions in connected_regions.items():\n        for region_mask in regions:\n            output_grid[region_mask] = color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4425,
    "candidates_token_count": 725,
    "total_token_count": 5150,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.599139
}