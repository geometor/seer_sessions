{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Input:** Receive the input grid as a 2D array of integers (colors).\n2.  **Unique Colors:** Identify all unique color values present in the input grid.\n3.  **Sort Colors:** Sort the unique colors in ascending order.\n4.  **Output Dimensions:**\n    *   Output Width: The number of unique colors.\n    *   Output Height: The maximum number of times any single color appears anywhere in the input grid.\n5.  **Create Output Grid:** Initialize an output grid filled with zeros, with the calculated dimensions.\n6.  **Populate Columns:**\n      * Iterate through each sorted unique color. This color will be the \"target color\" for the current column.\n      * Iterate through input grid, looking for instances of target color.\n      * For each instance of target color, add it to the next available spot on the output grid for that color.\n7.  **Return:** Return the completed output grid.\n\"\"\"\n\nimport numpy as np\n\ndef get_max_color_count(grid):\n    \"\"\"Calculates the maximum count of any single color in the grid.\"\"\"\n    input_array = np.array(grid)\n    unique_values = np.unique(input_array)\n    max_count = 0\n    for value in unique_values:\n        count = np.sum(input_array == value)\n        max_count = max(max_count, count)\n    return max_count\n\ndef transform(input_grid):\n    # Convert input grid to a NumPy array\n    input_array = np.array(input_grid)\n\n    # Extract unique values and sort them in ascending order\n    unique_values = np.unique(input_array)\n    sorted_values = np.sort(unique_values)\n\n    # Determine output grid dimensions\n    output_height = get_max_color_count(input_grid)\n    output_width = len(sorted_values)\n\n    # Create an output grid of size output_height x output_width, filled with 0s\n    output_grid = np.zeros((output_height, output_width), dtype=int)\n\n    # Populate the output grid with the sorted values\n    column_indices = {}  # Keep track of the next row index for each color\n    for col_index, value in enumerate(sorted_values):\n        column_indices[value] = 0\n\n    for i in range(input_array.shape[0]):  # Iterate through each row of input\n        for j in range(input_array.shape[1]):  # Iterate through each column of input\n            current_color = input_array[i,j]\n            if current_color in sorted_values:\n                row_index = column_indices[current_color]\n                col_index = np.where(sorted_values == current_color)[0][0]  # Find column index\n                if row_index < output_height:\n                   output_grid[row_index, col_index] = current_color\n                   column_indices[current_color] += 1\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3532,
    "candidates_token_count": 698,
    "total_token_count": 4230,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.107174
}