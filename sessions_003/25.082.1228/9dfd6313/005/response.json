{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nReorders elements within each row based on specific rules involving gray (5) and non-gray pixels.\nThe rightmost gray pixel is moved to a position determined by the number of non-zero, non-gray pixels to its left.\nOther non-zero, non-gray pixels are placed after the gray, maintaining the original order of their first appearance.\nRemaining cells are filled with 0.\n\"\"\"\n\nimport numpy as np\n\ndef get_rightmost_value(row, value):\n    \"\"\"\n    Finds the rightmost occurence of a value in a 1D array\n    \"\"\"\n    indices = np.where(row == value)[0]\n    if indices.size > 0:\n        return indices[-1]\n    return -1\n    \ndef count_non_zero_non_gray_left_of_gray(row, gray_index):\n    \"\"\"Counts non-zero and non-gray elements to the left of the rightmost gray.\"\"\"\n    count = 0\n    if gray_index != -1:\n        for i in range(gray_index):\n            if row[i] != 0 and row[i] != 5:\n                count += 1\n    return count\n\ndef transform(input_grid):\n    # initialize output_grid\n    input_grid = np.array(input_grid)\n    output_grid = np.zeros_like(input_grid)\n    rows, cols = input_grid.shape\n\n    # iterate over rows\n    for i in range(rows):\n        row = input_grid[i]\n        # Find rightmost gray pixel (5)\n        gray_index = get_rightmost_value(row, 5)\n\n        # Count non-zero, non-gray pixels to the left of the rightmost gray.\n        n = count_non_zero_non_gray_left_of_gray(row, gray_index)\n\n        # Move rightmost gray to column n.\n        if gray_index != -1:\n            if n > 0 :\n              output_grid[i, min(n,cols-1)] = 5\n            elif gray_index < cols:\n              output_grid[i, gray_index] = 5\n\n        # Move other non-zero, non-gray pixels, maintaining order.\n        current_col = 0\n        placed = []\n        \n        # find start by checking if gray was placed\n        gray_placed_col = -1\n        if n > 0 and gray_index !=-1:\n             gray_placed_col = min(n, cols-1)\n        \n        for j in range(cols):\n          val = input_grid[i,j]\n          if val != 0 and val != 5:\n            if gray_placed_col != -1 :\n              if current_col == gray_placed_col:\n                 current_col +=1\n\n            if val not in placed:\n                 if current_col < cols:\n                   output_grid[i,current_col] = val\n                 placed.append(val)\n\n            current_col += 1\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4001,
    "candidates_token_count": 710,
    "total_token_count": 4711,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.96054
}