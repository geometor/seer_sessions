{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by moving the right-most gray (5) pixel in each row to the first column,\nand the right-most non-zero, non-gray pixel to the second column. Other non-zero,\nnon-gray pixels are placed in subsequent columns, maintaining their original order\nfrom the input row. Remaining cells are filled with 0.\n\"\"\"\n\nimport numpy as np\n\ndef get_rightmost_value(row, value):\n    \"\"\"\n    Finds the rightmost occurence of a value in a 1D array\n    \"\"\"\n    indices = np.where(row == value)[0]\n    if indices.size > 0:\n        return indices[-1]\n    return -1\n    \n\ndef transform(input_grid):\n    # initialize output_grid\n    input_grid = np.array(input_grid)\n    output_grid = np.zeros_like(input_grid)\n    rows, cols = input_grid.shape\n\n    # iterate over rows\n    for i in range(rows):\n        # Find rightmost gray pixel (5)\n        gray_index = get_rightmost_value(input_grid[i], 5)\n        \n        # Find rightmost non-zero and non-gray pixel.\n        non_zero_non_gray_indices = np.where((input_grid[i] != 0) & (input_grid[i] != 5))[0]\n        non_zero_non_gray_index = -1\n        if non_zero_non_gray_indices.size > 0:\n           non_zero_non_gray_index = non_zero_non_gray_indices[-1]\n\n        # Move rightmost gray to column 0.\n        if gray_index != -1:\n            output_grid[i, 0] = 5\n\n        # Move rightmost non-zero, non-gray pixel to column 1.\n        if non_zero_non_gray_index != -1:\n             output_grid[i, 1] = input_grid[i, non_zero_non_gray_index]\n        \n        # Move other non-zero, non-gray pixels, maintaining order.\n        current_col = 2\n        for j in range(cols):\n             if input_grid[i,j] != 0 and input_grid[i,j] != 5 and j != non_zero_non_gray_index:\n                output_grid[i,current_col] = input_grid[i,j]\n                current_col += 1\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4210,
    "candidates_token_count": 594,
    "total_token_count": 4804,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.56589
}