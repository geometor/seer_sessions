{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Analyze Input Grid:** Examine the input grid to identify the counts of individual colors, and counts of 2x1 and 1x2 subgrids.\n\n2.  **Determine output size**:\n    - If there's single dominant color, return it as 1x1 grid.\n    - Otherwise, create 2x1 grid\n\n3.  **Populate Output Grid:**\n    - If output size is 1x1, return most frequent color.\n    - If the output is 2x1:\n        - Find the most frequent 2x1 sub-pattern in input.\n        - Extract the top-left 2x1 subgrid of occurrences of the most frequent 2x1 sub-pattern.\n\n4.  **Return output**\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef get_color_counts(grid):\n    unique, counts = np.unique(grid, return_counts=True)\n    return dict(zip(unique, counts))\n\ndef get_2x1_subgrid_counts(grid):\n    rows, cols = grid.shape\n    subgrid_2x1_counts = {}\n    for r in range(rows - 1):\n        for c in range(cols):\n            subgrid = tuple(grid[r:r+2, c].flatten())\n            subgrid_2x1_counts[subgrid] = subgrid_2x1_counts.get(subgrid, 0) + 1\n    return subgrid_2x1_counts\n\ndef transform(input_grid):\n    input_grid = np.array(input_grid)\n    rows, cols = input_grid.shape\n\n    color_counts = get_color_counts(input_grid)\n    most_common_color = max(color_counts, key=color_counts.get)\n    \n    # Determine output dimensions and populate\n    if len(color_counts) >0 and all(count == 1 for count in color_counts.values() if color_counts[most_common_color] == 1):\n        #if all other colors have count 1, output most frequent color.\n        output_grid = np.array([[most_common_color]])\n\n    elif len(color_counts)>0 and any( count/sum(color_counts.values()) > 0.4 for count in color_counts.values() ):\n            output_grid = np.array([[most_common_color]])\n    else:\n        # Find the most frequent 2x1 subgrid\n        subgrid_2x1_counts = get_2x1_subgrid_counts(input_grid)\n        if len(subgrid_2x1_counts) >0:\n            most_common_2x1_subgrid = max(subgrid_2x1_counts, key=subgrid_2x1_counts.get)\n            output_grid = np.array(most_common_2x1_subgrid).reshape(2, 1)\n        else:\n          output_grid = np.array([[most_common_color]])\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6248,
    "candidates_token_count": 711,
    "total_token_count": 6959,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 9.503606
}