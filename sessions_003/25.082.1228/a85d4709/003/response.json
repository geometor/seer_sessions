{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid to an output grid based on the following rules:\n\n1.  White (0) in the input becomes Green (3) in the output.\n2.  Gray (5) in the input becomes:\n    a. Red (2) if vertically adjacent to White (0).\n    b. Yellow (4) if horizontally adjacent to White (0).\n    c. Green (3) if diagonally adjacent to White (0)\n    d. Green (3) if not adjacent to White (0).\n\"\"\"\n\nimport numpy as np\n\ndef get_all_adjacent(grid, i, j):\n    rows, cols = len(grid), len(grid[0])\n    adjacent_cells = []\n    for x in range(max(0, i - 1), min(rows, i + 2)):\n        for y in range(max(0, j - 1), min(cols, j + 2)):\n            if (x, y) != (i, j):\n                adjacent_cells.append((x, y, grid[x][y]))\n    return adjacent_cells\n\n\ndef transform(input_grid):\n    # initialize output_grid\n    rows, cols = len(input_grid), len(input_grid[0])\n    output_grid = np.zeros((rows, cols), dtype=int)\n\n    # change output pixels\n    for i in range(rows):\n        for j in range(cols):\n            if input_grid[i][j] == 0:\n                output_grid[i][j] = 3\n            elif input_grid[i][j] == 5:\n                is_vertically_adjacent_to_0 = False\n                is_horizontally_adjacent_to_0 = False\n                is_diagonally_adjacent_to_0 = False\n\n                for x, y, val in get_all_adjacent(input_grid, i, j):\n                    if val == 0:\n                        if x == i:\n                            is_horizontally_adjacent_to_0 = True\n                        elif y == j:\n                            is_vertically_adjacent_to_0 = True\n                        else:\n                            is_diagonally_adjacent_to_0 = True\n\n                if is_vertically_adjacent_to_0:\n                    output_grid[i][j] = 2\n                elif is_horizontally_adjacent_to_0:\n                    output_grid[i][j] = 4\n                elif is_diagonally_adjacent_to_0:\n                    output_grid[i][j] = 3\n                else:\n                    output_grid[i][j] = 3  # Not adjacent to 0\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4113,
    "candidates_token_count": 617,
    "total_token_count": 4730,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.562103
}