{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Components:** Find all connected components of green (3) pixels in the input grid.\n2.  **Process Each Component:** For each connected component:\n    *   If the component is a single pixel, it remains unchanged.\n    *   If the component is a vertical line (more than one pixel), change the *topmost* green pixel to azure (8).\n    *   If the component is a horizontal line (more than one pixel), change the *leftmost* green pixel to azure (8).\n    *    If the component is a 2x2 block, change the *top-leftmost* green pixel to azure (8).\n    *   If the component is an L-shape, change the *corner* pixel where the horizontal and vertical segments of the L meet to azure (8).\n3. If none of the above conditions are met, leave the component unchanged.\n4.  **Output:** Create the output grid, which is the same as the input grid, but with the described changes to green components.\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, row, col):\n    \"\"\"Gets the valid neighbors of a cell in a grid.\"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    if row > 0:\n        neighbors.append((row - 1, col))  # Up\n    if row < rows - 1:\n        neighbors.append((row + 1, col))  # Down\n    if col > 0:\n        neighbors.append((row, col - 1))  # Left\n    if col < cols - 1:\n        neighbors.append((row, col + 1))  # Right\n    return neighbors\n\ndef get_connected_component(grid, start_row, start_col, color):\n    \"\"\"Gets a connected component of a given color starting from a given cell.\"\"\"\n    rows, cols = grid.shape\n    component = []\n    visited = set()\n    queue = [(start_row, start_col)]\n\n    while queue:\n        row, col = queue.pop(0)\n        if (row, col) in visited or grid[row, col] != color:\n            continue\n        visited.add((row, col))\n        component.append((row, col))\n        neighbors = get_neighbors(grid, row, col)\n        for neighbor_row, neighbor_col in neighbors:\n            queue.append((neighbor_row, neighbor_col))\n    return component\n\ndef is_vertical_line(component, grid):\n    \"\"\"Checks if a component is a vertical line.\"\"\"\n    if not component or len(component) <= 1:\n        return False\n    return len(set(col for _, col in component)) == 1\n\ndef is_horizontal_line(component, grid):\n    \"\"\"Checks if a component is a horizontal line.\"\"\"\n    if not component or len(component) <= 1:\n        return False\n    return len(set(row for row, _ in component)) == 1\n\ndef is_l_shape(component):\n    \"\"\"Checks if a component is an L-shape (can be larger than 2x1 or 1x2).\"\"\"\n    if len(component) <= 2:  # L-shape must have at least 3 pixels\n        return False\n    rows = sorted(list(set(r for r,c in component)))\n    cols = sorted(list(set(c for r,c in component)))\n    if len(rows) >= 2 and len(cols) >= 2:\n        # Check if it's a rectangle or just an L.\n        row_counts = {}\n        col_counts = {}\n\n        for r, c in component:\n          row_counts[r] = row_counts.get(r,0) + 1\n          col_counts[c] = col_counts.get(c,0) + 1\n\n        num_rows_with_multiple_cols = sum(1 for count in row_counts.values() if count >1 )\n        num_cols_with_multiple_rows = sum(1 for count in col_counts.values() if count>1)\n        if num_rows_with_multiple_cols == 1 and num_cols_with_multiple_rows==1:\n          return True\n    return False\n\ndef is_2x2_block(component):\n    \"\"\"check to see if the component is a 2x2 block\"\"\"\n    if len(component) != 4:\n        return False\n    rows = sorted(list(set(r for r,c in component)))\n    cols = sorted(list(set(c for r,c in component)))\n    return len(rows) == 2 and len(cols) == 2\n\ndef find_corner(component):\n    \"\"\"finds the corner of the L\"\"\"\n    rows = [r for r, _ in component]\n    cols = [c for _, c in component]\n    row_counts = {}\n    col_counts = {}\n\n    for r in rows:\n        row_counts[r] = row_counts.get(r, 0) + 1\n    for c in cols:\n        col_counts[c] = col_counts.get(c, 0) + 1\n\n    corner_row = [r for r, count in row_counts.items() if count > 1][0]\n    corner_col = [c for c, count in col_counts.items() if count > 1][0]\n    return (corner_row, corner_col)\n\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the specified rule.\"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n    visited = set()\n\n    for row in range(rows):\n        for col in range(cols):\n            if input_grid[row, col] == 3 and (row, col) not in visited:\n                component = get_connected_component(input_grid, row, col, 3)\n                visited.update(component)\n\n                if len(component) == 1:\n                    continue  # Single pixel, no change\n                elif is_vertical_line(component, input_grid):\n                    topmost_pixel = min(component, key=lambda p: p[0])\n                    output_grid[topmost_pixel] = 8\n                elif is_horizontal_line(component, input_grid):\n                    leftmost_pixel = min(component, key=lambda p: p[1])\n                    output_grid[leftmost_pixel] = 8\n                elif is_2x2_block(component):\n                    top_left_pixel = min(component, key=lambda p: (p[0], p[1]))\n                    output_grid[top_left_pixel] = 8\n                elif is_l_shape(component):\n                    corner = find_corner(component)\n                    output_grid[corner] = 8\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 1054,
            "end_index": 1346,
            "uri": "https://github.com/Kaeltherol/Minesweeper",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4544,
    "candidates_token_count": 1587,
    "total_token_count": 6131,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 17.720877
}