{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Connected Components:** Find all connected components of green (3) pixels in the input grid.\n2.  **Transform Each Component:** For *each* connected component of green pixels, change the *top-leftmost* green pixel to azure (8). The top-leftmost pixel is defined as the pixel with the smallest row index, and among those, the smallest column index.\n3. **Output Grid**: All other pixels remain unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, row, col):\n    \"\"\"Gets the valid neighbors of a cell in a grid.\"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    if row > 0:\n        neighbors.append((row - 1, col))  # Up\n    if row < rows - 1:\n        neighbors.append((row + 1, col))  # Down\n    if col > 0:\n        neighbors.append((row, col - 1))  # Left\n    if col < cols - 1:\n        neighbors.append((row, col + 1))  # Right\n    return neighbors\n\ndef get_connected_component(grid, start_row, start_col, color):\n    \"\"\"Gets a connected component of a given color starting from a given cell.\"\"\"\n    rows, cols = grid.shape\n    component = []\n    visited = set()\n    queue = [(start_row, start_col)]\n\n    while queue:\n        row, col = queue.pop(0)\n        if (row, col) in visited or grid[row, col] != color:\n            continue\n        visited.add((row, col))\n        component.append((row, col))\n        neighbors = get_neighbors(grid, row, col)\n        for neighbor_row, neighbor_col in neighbors:\n            queue.append((neighbor_row, neighbor_col))\n    return component\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the specified rule.\"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n    visited = set()\n\n    for row in range(rows):\n        for col in range(cols):\n            if input_grid[row, col] == 3 and (row, col) not in visited:\n                # Get the connected component\n                component = get_connected_component(input_grid, row, col, 3)\n                visited.update(component)\n\n                # Find the top-leftmost pixel\n                top_leftmost_pixel = min(component, key=lambda p: (p[0], p[1]))\n\n                # Change the top-leftmost pixel to azure\n                output_grid[top_leftmost_pixel] = 8\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 579,
            "end_index": 871,
            "uri": "https://github.com/Kaeltherol/Minesweeper",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6904,
    "candidates_token_count": 630,
    "total_token_count": 7534,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 8.507042
}