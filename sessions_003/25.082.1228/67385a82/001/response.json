{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation rule identifies connected components of green (3) pixels in the input grid.\nFor each connected component:\n    - If the component is a vertical line, the topmost green pixel is changed to azure (8).\n    - If the component is a horizontal line, the leftmost green pixel is changed to azure (8).\n    - If the component forms an L-shape, the corner pixel of the L is changed to azure (8).\n    - All other pixels remain unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef get_neighbors(grid, row, col):\n    \"\"\"Gets the valid neighbors of a cell in a grid.\"\"\"\n    rows, cols = grid.shape\n    neighbors = []\n    if row > 0:\n        neighbors.append((row - 1, col))  # Up\n    if row < rows - 1:\n        neighbors.append((row + 1, col))  # Down\n    if col > 0:\n        neighbors.append((row, col - 1))  # Left\n    if col < cols - 1:\n        neighbors.append((row, col + 1))  # Right\n    return neighbors\n\ndef get_connected_component(grid, start_row, start_col, color):\n    \"\"\"Gets a connected component of a given color starting from a given cell.\"\"\"\n    rows, cols = grid.shape\n    component = []\n    visited = set()\n    queue = [(start_row, start_col)]\n\n    while queue:\n        row, col = queue.pop(0)\n        if (row, col) in visited or grid[row, col] != color:\n            continue\n        visited.add((row, col))\n        component.append((row, col))\n        neighbors = get_neighbors(grid, row, col)\n        for neighbor_row, neighbor_col in neighbors:\n            queue.append((neighbor_row, neighbor_col))\n    return component\n\ndef is_vertical_line(component, grid):\n    \"\"\"Checks if a component is a vertical line.\"\"\"\n    if not component:\n        return False\n    rows, _ = grid.shape\n    if len(set(col for _, col in component)) == 1:\n      if len(component) > 1:\n        return True\n    return False\n\ndef is_horizontal_line(component, grid):\n    \"\"\"Checks if a component is a horizontal line.\"\"\"\n    if not component:\n        return False\n    _, cols = grid.shape\n\n    if len(set(row for row, _ in component)) == 1:\n      if len(component) > 1:\n          return True\n    return False\n\ndef is_l_shape(component, grid):\n    \"\"\"Checks if a component is an L-shape.\"\"\"\n    if len(component) != 3:\n        return False\n\n    rows = sorted(list(set(r for r,c in component)))\n    cols = sorted(list(set(c for r,c in component)))\n    if len(rows) == 2 and len(cols) == 2:\n      return True\n    return False\n\ndef find_corner(component):\n    \"\"\"finds the corner of the L\"\"\"\n    rows = [r for r, _ in component]\n    cols = [c for _, c in component]\n    row_counts = {}\n    col_counts = {}\n\n    for r in rows:\n        row_counts[r] = row_counts.get(r, 0) + 1\n    for c in cols:\n        col_counts[c] = col_counts.get(c, 0) + 1\n    \n    corner_row = [r for r, count in row_counts.items() if count == 2][0]\n    corner_col = [c for c, count in col_counts.items() if count == 2][0]\n\n    return (corner_row, corner_col)\n\n\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the specified rule.\"\"\"\n    # Initialize output_grid as a copy of input_grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n    visited = set()\n\n    # Iterate through the grid to find connected components of green (3) pixels\n    for row in range(rows):\n        for col in range(cols):\n            if input_grid[row, col] == 3 and (row, col) not in visited:\n                component = get_connected_component(input_grid, row, col, 3)\n                visited.update(component)\n\n                # Check the shape of the component and apply the transformation\n                if is_vertical_line(component, input_grid):\n                    topmost_pixel = min(component, key=lambda p: p[0])\n                    output_grid[topmost_pixel] = 8\n                elif is_horizontal_line(component, input_grid):\n                    leftmost_pixel = min(component, key=lambda p: p[1])\n                    output_grid[leftmost_pixel] = 8\n                elif is_l_shape(component, input_grid):\n                  corner = find_corner(component)\n                  output_grid[corner]=8\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 607,
            "end_index": 899,
            "uri": "https://github.com/Kaeltherol/Minesweeper",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1928,
    "candidates_token_count": 1188,
    "total_token_count": 3116,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 17.199446
}