Task: Sequence Transformation

Input:
  Type: String
  Format: Sequence of 12 single digits separated by single spaces.
  Structure:
    - Represents a list of 12 integers.
    - Initial_Segment_Representation: The first 4 digits represented are always "0 0 0 0".
    - Variable_Segment_Representation: The remaining 8 digits represented contain exactly one non-zero digit (X) repeated 6 times and the digit 0 repeated 2 times. The arrangement varies.

Processing:
  - Initial_Step: Parse the input string into a list of 12 integers.
  - Validation: Check if the parsed list contains exactly 12 elements.

Transformation_Logic:
  - Identify the unique non-zero digit (X) within the parsed list elements from index 4 to 11.
  - Construct a target subsequence based on the fixed pattern [X, X, X, 0, X, X, 0, X].
  - Create the final output list by taking the first four elements of the parsed input list ([0, 0, 0, 0]) and appending the target subsequence.

Output:
  Type: String
  Format: Sequence of 12 single digits separated by single spaces.
  Structure:
    - Initial_Segment: Always "0 0 0 0".
    - Fixed_Pattern_Segment: Represents the pattern [X, X, X, 0, X, X, 0, X], using the identified non-zero digit X from the input.
  - Final_Step: Format the final output list back into a space-separated string.

Relationships:
  - Parsing_Requirement: Input string must be parsed into a list of integers before transformation logic can be applied.
  - Identity: The first four elements (conceptually, after parsing) map directly.
  - Value_Preservation: The non-zero digit 'X' identified post-parsing is used in the output pattern.
  - Pattern_Normalization: The arrangement in the input's variable segment (post-parsing) is replaced by the fixed output pattern.