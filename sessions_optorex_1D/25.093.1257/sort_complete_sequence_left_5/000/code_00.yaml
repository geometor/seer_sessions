task_elements:
  - object: sequence
    type: list_of_integers
    properties:
      length: 12
  - object: prefix
    part_of: sequence
    indices: 0-3
    properties:
      value: [0, 0, 0, 0]
      constant: true
  - object: suffix
    part_of: sequence
    indices: 4-11
    properties:
      length: 8
      variable: true
      composition:
        - type: non_zero_digit (X)
          count: 6
        - type: zero_digit (0)
          count: 2
  - object: target_pattern
    description: The desired arrangement for the suffix.
    value_template: [X, X, X, 0, X, X, 0, X] # Where X is the non-zero digit
    applies_to: suffix

actions:
  - name: identify_non_zero_digit
    input: suffix
    output: digit_X
    description: Find the unique non-zero digit present in the suffix.
  - name: check_suffix_pattern
    input: suffix
    comparison: target_pattern
    output: boolean (matches or not)
    description: Check if the input suffix matches the target pattern `X X X 0 X X 0 X`.
  - name: rearrange_suffix
    input: suffix
    output: rearranged_suffix (matching target_pattern)
    description: Reorder the elements (six X's and two 0's) in the suffix to match the target pattern `X X X 0 X X 0 X`.
  - name: construct_output
    inputs: [prefix, rearranged_suffix (or original suffix if it matched)]
    output: output_sequence
    description: Combine the original prefix with the potentially rearranged suffix.

relationships:
  - type: composition
    subject: sequence
    objects: [prefix, suffix]
  - type: transformation_condition
    condition: "input suffix does not match target_pattern"
    action: rearrange_suffix
  - type: transformation_condition
    condition: "input suffix matches target_pattern"
    action: keep_suffix_unchanged
