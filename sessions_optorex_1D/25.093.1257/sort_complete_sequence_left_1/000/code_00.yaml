Input:
  type: sequence
  length: 12
  element_type: digit
  structure:
    - prefix:
        length: 4
        value: [0, 0, 0, 0]
    - suffix:
        length: 8
        contains:
          - 0
          - non_zero_digit (let's call it X, appears 1 or more times)
        constraint: Only one unique non_zero_digit X exists in the suffix.

Output:
  type: sequence
  length: 12
  element_type: digit
  structure:
    - prefix:
        length: 4
        value: [0, 0, 0, 0]
    - suffix:
        length: 8
        pattern: [X, X, X, 0, X, X, 0, X] # Where X is the non_zero_digit from the input suffix.

Transformation:
  - preserves: The first 4 digits (prefix).
  - identifies: The unique non-zero digit (X) present in the last 8 digits (suffix) of the input.
  - generates: A new suffix of 8 digits using the identified non-zero digit (X) and zeros, following the fixed pattern [X, X, X, 0, X, X, 0, X].
  - concatenates: The preserved prefix and the newly generated suffix.