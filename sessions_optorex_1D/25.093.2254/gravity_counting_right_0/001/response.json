{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\ndef parse_input(input_str):\n  \"\"\"Parses the space-separated string into a list of integers.\"\"\"\n  return [int(x) for x in input_str.split()]\n\ndef format_output(output_list):\n  \"\"\"Formats the list of integers into a space-separated string.\"\"\"\n  return ' '.join(map(str, output_list))\n\ndef count_non_zeros(int_list):\n  \"\"\"Counts the number of non-zero elements in a list of integers.\"\"\"\n  count = 0\n  for num in int_list:\n    if num != 0:\n      count += 1\n  return count\n\ndef transform(input_str):\n  \"\"\"\n  Transforms an input sequence of space-separated integers based on the count of non-zero elements.\n\n  The transformation rule is:\n  1. Count the number of non-zero elements in the input sequence (N).\n  2. Determine the total length of the input sequence (L).\n  3. Construct an output sequence containing N ones followed by (L - N) zeros.\n  4. Return the output sequence as a space-separated string.\n  \"\"\"\n  # Parse the input string into a list of integers\n  input_list = parse_input(input_str)\n\n  # Get the total length of the input list\n  total_length = len(input_list)\n\n  # Count the number of non-zero elements\n  non_zero_count = count_non_zeros(input_list)\n\n  # Calculate the number of zeros needed\n  zero_count = total_length - non_zero_count\n\n  # Construct the output list: N ones followed by (L - N) zeros\n  output_list = [1] * non_zero_count + [0] * zero_count\n\n  # Format the output list into a space-separated string\n  output_str = format_output(output_list)\n\n  return output_str\n\n# Example usage (based on train_1):\ninput_example = \"1 0 0 0 7 0 5 0 0 9 0 7\"\noutput_example = transform(input_example)\nprint(f\"Input: {input_example}\")\nprint(f\"Output: {output_example}\")\n\n# Example usage (based on train_3):\ninput_example_2 = \"0 0 0 0 0 4 0 0 9 7 3 0\"\noutput_example_2 = transform(input_example_2)\nprint(f\"Input: {input_example_2}\")\nprint(f\"Output: {output_example_2}\")\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1486,
    "candidates_token_count": 891,
    "total_token_count": 2377,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 7.981681,
  "retries": 1
}