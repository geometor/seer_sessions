task_type: sequence_transformation
input_data:
  type: string
  description: A single string containing integers separated by spaces.
  example: "1 0 0 0 7 0 5 0 0 9 0 7"
intermediate_data:
  type: list_of_integers
  description: The sequence of integers obtained after parsing the input string.
  example: [1, 0, 0, 0, 7, 0, 5, 0, 0, 9, 0, 7]
output_data:
  type: sequence # (e.g., list or NumPy array)
  element_type: integer
  description: A sequence containing only 1s followed by 0s.
  length: Same as the number of integers in the intermediate_data sequence.
  element_range: 0-1
actions:
  - name: parse_input_string
    input: input_data (string)
    output: intermediate_data (list_of_integers)
    method: Split the string by spaces and convert each resulting substring to an integer.
  - name: count_non_zeros
    input: intermediate_data (list_of_integers)
    output: integer (N)
    description: Count the number of elements in the list that are not equal to 0.
  - name: get_length
    input: intermediate_data (list_of_integers)
    output: integer (L)
    description: Determine the total number of elements in the list.
  - name: calculate_zero_count
    inputs:
      - total_length (L)
      - non_zero_count (N)
    output: integer (Z)
    formula: Z = L - N
  - name: construct_output_sequence
    inputs:
      - non_zero_count (N)
      - zero_count (Z)
    output: output_data (sequence)
    method: Create a sequence of N ones, followed by a sequence of Z zeros, and concatenate them.
relationships:
  - The count of '1's in the output_data equals the count of non-zero numbers in the intermediate_data.
  - The count of '0's in the output_data equals the count of zero numbers in the intermediate_data.
  - The total length of the output_data equals the total length (L) of the intermediate_data.