task_type: sequence_transformation
input:
  data_type: string
  content: sequence_of_12_integers
  range_per_integer: 0-9
  delimiter: space
output:
  data_type: string
  content: sequence_of_12_binary_integers
  range_per_integer: 0-1
  delimiter: space
  pattern: sequence_of_ones_followed_by_zeros
transformation:
  actions:
    - action: parse_input_string
      description: Split the input string by spaces and convert each element to an integer, creating an input list of 12 integers.
    - action: count_non_zeros
      description: Count the number of elements in the input list that are not equal to 0. Let this count be 'N'.
    - action: construct_output_list
      description: Create a new list containing 'N' elements of the integer 1, followed by (12 - 'N') elements of the integer 0.
    - action: format_output_string
      description: Convert each integer in the output list back to a string and join them with spaces to form the final output string.
  rule_summary: The number of '1's at the start of the output string equals the count of non-zero integers in the input string. The remaining positions are filled with '0's, maintaining a total length of 12.
examples_summary:
  - count: 7
  - match: All 7 provided examples consistently follow the transformation rule. The non-zero count in the input precisely predicts the number of leading '1's in the output.
error_analysis:
  previous_error: "negative dimensions are not allowed"
  cause: Likely failure to correctly parse the input string into a list/array of integers within the `transform` function, leading to incorrect calculation of `non_zero_count` or `total_length`, resulting in a negative value for `zero_count`.
  resolution: Ensure the `transform` function explicitly handles string input, performs parsing, calculation, and output formatting.