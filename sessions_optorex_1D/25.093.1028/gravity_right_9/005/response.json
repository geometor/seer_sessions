{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport math # Although math is not used, it's available per instructions\n\n\"\"\"\nReorders the elements of an input NumPy array (treated as a 1D sequence)\nsuch that all zero elements are moved to the beginning of the sequence,\nfollowed by all non-zero elements. The relative order of the non-zero\nelements is preserved from the original input array.\n\"\"\"\n\ndef partition_by_zero(sequence):\n    \"\"\"\n    Separates elements of a sequence into zeros and non-zeros, preserving\n    the relative order of non-zeros.\n\n    Args:\n        sequence: A list or 1D NumPy array of numbers.\n\n    Returns:\n        A tuple containing two lists: (list_of_zeros, list_of_non_zeros).\n    \"\"\"\n    # Use list comprehensions to efficiently filter elements while preserving order\n    zeros_list = [num for num in sequence if num == 0]\n    non_zeros_list = [num for num in sequence if num != 0]\n    \n    return zeros_list, non_zeros_list\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the zero-partitioning transformation to the input NumPy array.\n\n    Args:\n        input_grid: A 1D NumPy array containing integers.\n\n    Returns:\n        A 1D NumPy array containing the reordered integers.\n    \"\"\"\n\n    # 1. Treat the input NumPy array as a sequence (it's expected to be 1D based on examples)\n    #    Convert to list to easily use list comprehensions if preferred, or operate directly\n    #    Here, we'll use the helper function which works on sequences.\n    input_sequence = input_grid.tolist() # Convert to list for the helper\n\n    # 2. Partition the sequence into zeros and non-zeros using the helper function\n    #    This helper ensures the relative order of non-zeros is maintained.\n    zeros_list, non_zeros_list = partition_by_zero(input_sequence)\n\n    # 3. Concatenate the lists: zeros first, then non-zeros\n    #    This creates the desired ordered sequence as a Python list.\n    ordered_list = zeros_list + non_zeros_list\n\n    # 4. Convert the ordered list back into a NumPy array\n    #    Ensure the data type matches the original input grid's dtype.\n    output_grid = np.array(ordered_list, dtype=input_grid.dtype)\n\n    # 5. Return the resulting NumPy array\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7620,
    "candidates_token_count": 581,
    "total_token_count": 8201,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.636017,
  "retries": 1
}