{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport math # Although not used in this specific solution, it's often available\n\n\"\"\"\nReorders the elements of an input NumPy array (treated as a sequence)\nsuch that all zero elements are moved to the beginning of the sequence,\nfollowed by all non-zero elements. The relative order of the non-zero\nelements is preserved from the original input array.\n\"\"\"\n\ndef partition_by_zero_np(input_array):\n    \"\"\"\n    Separates elements of a NumPy array into zeros and non-zeros, preserving\n    the relative order of non-zeros.\n\n    Args:\n        input_array: A 1D NumPy array of numbers.\n\n    Returns:\n        A tuple containing two lists: (list_of_zeros, list_of_non_zeros).\n    \"\"\"\n    # Convert array to list for easier dynamic appending if needed,\n    # although list comprehensions are efficient here.\n    input_list = input_array.tolist()\n    \n    # Use list comprehensions to efficiently filter elements\n    zeros_list = [num for num in input_list if num == 0]\n    non_zeros_list = [num for num in input_list if num != 0]\n    \n    return zeros_list, non_zeros_list\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Reorders a 1D NumPy array by moving all zeros to the beginning while\n    maintaining the relative order of non-zero elements.\n\n    Args:\n        input_grid: A 1D NumPy array containing integers.\n\n    Returns:\n        A 1D NumPy array containing the reordered integers.\n    \"\"\"\n    # 1. Ensure input is treated as a 1D sequence (flatten if necessary,\n    #    though examples suggest it's already 1D)\n    #    For robustness, we can flatten, but let's assume 1D based on examples.\n    #    If the input could be multi-dimensional, use:\n    #    input_sequence = input_grid.flatten()\n    input_sequence = input_grid \n\n    # 2. Partition the sequence into zeros and non-zeros\n    #    The helper function preserves the relative order of non-zeros.\n    zeros_list, non_zeros_list = partition_by_zero_np(input_sequence)\n\n    # 3. Concatenate the lists: zeros first, then non-zeros\n    #    This creates the desired order in a Python list.\n    ordered_list = zeros_list + non_zeros_list\n\n    # 4. Convert the ordered list back into a NumPy array\n    #    This matches the likely expected output format based on input type.\n    output_grid = np.array(ordered_list, dtype=input_grid.dtype) # Preserve original dtype\n\n    # 5. Return the resulting NumPy array\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4206,
    "candidates_token_count": 652,
    "total_token_count": 4858,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.520047,
  "retries": 1
}