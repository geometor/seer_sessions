{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport math\n\n\"\"\"\nTakes an input string of space-separated integers. \nSeparates the integers into two groups: zeros and non-zeros.\nConcatenates the group of zeros followed by the group of non-zeros, \npreserving the original relative order of the non-zero integers.\nFinally, formats the resulting sequence back into a space-separated string.\n\"\"\"\n\ndef partition_by_zero(numbers):\n    \"\"\"Separates a list of numbers into zeros and non-zeros.\"\"\"\n    zeros = [num for num in numbers if num == 0]\n    non_zeros = [num for num in numbers if num != 0]\n    return zeros, non_zeros\n\ndef format_numbers_to_string(numbers):\n    \"\"\"Converts a list of numbers to a space-separated string.\"\"\"\n    return \" \".join(map(str, numbers))\n\ndef transform(input_str: str) -> str:\n    \"\"\"\n    Reorders a sequence of space-separated integers by moving all zeros\n    to the beginning while maintaining the relative order of non-zero elements.\n\n    Args:\n        input_str: A string containing space-separated integers.\n\n    Returns:\n        A string containing the reordered space-separated integers.\n    \"\"\"\n    # 1. Parse the input string into a list of integers\n    try:\n        # Split the string by spaces and convert each part to an integer\n        input_numbers = [int(x) for x in input_str.split()]\n    except ValueError:\n        # Handle potential errors if the input string contains non-integer values\n        print(f\"Error: Input string '{input_str}' contains non-integer elements.\")\n        return \"\" # Or raise an exception, depending on desired error handling\n\n    # 2. Partition the list into zeros and non-zeros\n    # The partition_by_zero helper function performs this separation.\n    # Crucially, list comprehensions preserve the order of elements they process.\n    zeros_list, non_zeros_list = partition_by_zero(input_numbers)\n\n    # 3. Concatenate the lists: zeros first, then non-zeros\n    # This places all zeros at the beginning, followed by the non-zeros\n    # in their original relative order.\n    output_numbers = zeros_list + non_zeros_list\n\n    # 4. Format the resulting list back into a space-separated string\n    # The format_numbers_to_string helper function handles this conversion.\n    output_str = format_numbers_to_string(output_numbers)\n\n    # 5. Return the final output string\n    return output_str\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1790,
    "candidates_token_count": 585,
    "total_token_count": 2375,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 7.840134,
  "retries": 1
}