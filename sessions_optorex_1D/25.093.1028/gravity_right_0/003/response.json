{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport math # Note: math might not be needed based on the final logic, but included for completeness\n\n\"\"\"\nTakes a sequence of integers (likely a list or NumPy array).\nSeparates the zero elements from the non-zero elements.\nConstructs a new sequence where all the zero elements from the input are placed at the beginning,\nfollowed by all the non-zero elements from the input, maintaining their original relative order.\nReturns the resulting sequence in the same format as the input (assumed to be NumPy array based on errors).\n\"\"\"\n\ndef separate_zeros_nonzeros(int_sequence):\n  \"\"\"Separates a sequence of integers into two lists: one for zeros and one for non-zeros.\"\"\"\n  # Use list comprehension for conciseness and efficiency\n  zeros = [x for x in int_sequence if x == 0]\n  non_zeros = [x for x in int_sequence if x != 0]\n  return zeros, non_zeros\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the transformation rule: moves all zeros to the left and non-zeros to the right,\n    preserving the relative order of non-zeros. Assumes input is a 1D NumPy array.\n    \"\"\"\n\n    # Ensure input is treated as a flat sequence if it's multi-dimensional, though examples are 1D\n    # If input is guaranteed 1D, input_list = list(input_grid) is simpler.\n    # Using flatten handles potential >1D cases gracefully for this logic.\n    input_list = input_grid.flatten().tolist()\n\n    # Separate the list into zeros and non-zeros\n    # The relative order of non-zeros is preserved by the helper function\n    zeros, non_zeros = separate_zeros_nonzeros(input_list)\n\n    # Construct the output list by concatenating the zeros list and the non-zeros list\n    # This places all zeros first, followed by non-zeros in their original relative order\n    output_list = zeros + non_zeros\n\n    # Convert the result list back to a NumPy array, matching the assumed input/output type\n    # Reshape if necessary, although based on examples, a 1D output seems correct.\n    output_grid = np.array(output_list) # .reshape(input_grid.shape) might be needed if input shape > 1D matters\n\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4425,
    "candidates_token_count": 541,
    "total_token_count": 4966,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 7.760292,
  "retries": 1
}