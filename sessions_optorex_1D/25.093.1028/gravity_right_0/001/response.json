{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport math\nimport numpy as np\n\n\"\"\"\nTakes a sequence of integers represented as a space-separated string. \nSeparates the zero elements from the non-zero elements.\nConstructs a new sequence where all the zero elements from the input are placed at the beginning, \nfollowed by all the non-zero elements from the input, maintaining their original relative order.\nReturns the resulting sequence as a space-separated string.\n\"\"\"\n\ndef parse_input(input_str):\n  \"\"\"Converts a space-separated string of integers into a list of integers.\"\"\"\n  return [int(x) for x in input_str.split()]\n\ndef format_output(output_list):\n  \"\"\"Converts a list of integers into a space-separated string.\"\"\"\n  return \" \".join(map(str, output_list))\n\ndef separate_zeros_nonzeros(int_list):\n  \"\"\"Separates a list of integers into two lists: one for zeros and one for non-zeros.\"\"\"\n  zeros = [x for x in int_list if x == 0]\n  non_zeros = [x for x in int_list if x != 0]\n  return zeros, non_zeros\n\ndef transform(input_str):\n  \"\"\"\n  Applies the transformation rule: moves all zeros to the left and non-zeros to the right,\n  preserving the relative order of non-zeros.\n  \"\"\"\n  # Parse the input string into a list of integers\n  input_list = parse_input(input_str)\n\n  # Separate the list into zeros and non-zeros\n  # The relative order of non-zeros is preserved by list comprehension\n  zeros, non_zeros = separate_zeros_nonzeros(input_list)\n\n  # Construct the output list by concatenating the zeros list and the non-zeros list\n  # This places all zeros first, followed by non-zeros in their original relative order\n  output_list = zeros + non_zeros\n\n  # Format the output list back into a space-separated string\n  output_str = format_output(output_list)\n\n  return output_str\n\n# Example usage (based on train_1)\n# input_example = \"0 0 9 0 0 8 0 0 0 0 0 0\"\n# output_example = transform(input_example)\n# print(f\"Input: {input_example}\")\n# print(f\"Output: {output_example}\")\n# Expected: 0 0 0 0 0 0 0 0 0 0 9 8\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1487,
    "candidates_token_count": 574,
    "total_token_count": 2061,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 7.842003,
  "retries": 1
}