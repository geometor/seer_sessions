{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nRearrange digits in a sequence, moving all zeros to the beginning while preserving the relative order of non-zero digits.\n\"\"\"\n\nimport re\n\ndef transform(input_str: str) -> str:\n    \"\"\"\n    Moves all '0' digits to the beginning of the sequence while maintaining \n    the relative order of the non-zero digits.\n\n    Args:\n        input_str: A string containing space-separated single digits.\n\n    Returns:\n        A string with digits rearranged according to the rule, \n        also space-separated.\n    \"\"\"\n    \n    # 1. Parse the input string into a list of individual digits (as strings).\n    # We keep them as strings to easily check for '0'.\n    digits = input_str.split(' ')\n\n    # 2. Create two new lists: one for zero digits and one for non-zero digits.\n    zeros_list = []\n    non_zeros_list = []\n\n    # 3. Iterate through the input list of digits:\n    for digit in digits:\n        # *   If a digit is '0', append it to the zeros_list.\n        if digit == '0':\n            zeros_list.append(digit)\n        # *   If a digit is not '0', append it to the non_zeros_list.\n        else:\n            non_zeros_list.append(digit)\n\n    # 4. Concatenate the zeros_list and the non_zeros_list in that order.\n    final_list = zeros_list + non_zeros_list\n\n    # 5. Join the digits in the final list with spaces to create the output string.\n    output_str = ' '.join(final_list)\n\n    return output_str\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1418,
    "candidates_token_count": 391,
    "total_token_count": 1809,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 5.930395,
  "retries": 1
}