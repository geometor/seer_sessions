{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nRearrange elements in a 1D NumPy array, moving all zero elements to the beginning while preserving the relative order of non-zero elements, and return the result as a space-separated string.\n\"\"\"\n\nimport numpy as np\n\n# Helper function to partition elements based on a condition\ndef partition_elements(elements, condition_func):\n    \"\"\"Partitions elements into two lists based on a condition function.\"\"\"\n    true_list = []\n    false_list = []\n    for element in elements:\n        if condition_func(element):\n            true_list.append(element)\n        else:\n            false_list.append(element)\n    return true_list, false_list\n\ndef transform(input_array: np.ndarray) -> str:\n    \"\"\"\n    Moves all 0 elements to the beginning of a NumPy array while maintaining \n    the relative order of the non-zero elements, returning a space-separated string.\n\n    Args:\n        input_array: A 1-dimensional NumPy array of integers.\n\n    Returns:\n        A string with elements rearranged according to the rule, \n        space-separated.\n    \"\"\"\n    \n    # 1. Define the condition for partitioning (is the element zero?)\n    is_zero = lambda x: x == 0\n\n    # 2. Partition the input array elements into zeros and non-zeros\n    #    The partition_elements helper preserves the relative order within each group.\n    #    zeros_list will contain elements where condition is true (element == 0)\n    #    non_zeros_list will contain elements where condition is false (element != 0)\n    zeros_list, non_zeros_list = partition_elements(input_array, is_zero)\n\n    # 3. Concatenate the lists: zeros first, then non-zeros.\n    final_list = zeros_list + non_zeros_list\n\n    # 4. Convert each integer element in the final list to its string representation.\n    string_list = [str(num) for num in final_list]\n\n    # 5. Join the list of strings with spaces.\n    output_str = ' '.join(string_list)\n\n    # 6. Return the final space-separated string.\n    return output_str\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4093,
    "candidates_token_count": 507,
    "total_token_count": 4600,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 7.280325,
  "retries": 1
}