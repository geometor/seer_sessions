{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Union\n\n\"\"\"\nRearranges a sequence of integers by moving all zero elements to the beginning \nof the sequence while preserving the relative order of the non-zero elements.\nAssumes the input represents a flat, 1D sequence, potentially passed as a \nNumPy array which might need flattening.\n\"\"\"\n\ndef get_zeros(sequence: Union[List[int], np.ndarray]) -> List[int]:\n  \"\"\"Extracts all zero elements from the sequence.\"\"\"\n  # Use list comprehension for potentially mixed input types\n  return [element for element in sequence if element == 0]\n\ndef get_non_zeros(sequence: Union[List[int], np.ndarray]) -> List[int]:\n  \"\"\"Extracts all non-zero elements from the sequence, preserving relative order.\"\"\"\n  # Use list comprehension for potentially mixed input types\n  return [element for element in sequence if element != 0]\n\ndef transform(input_data: Union[List[int], np.ndarray]) -> List[int]:\n    \"\"\"\n    Moves all zero elements to the front of a sequence of integers, \n    preserving the relative order of non-zero elements.\n\n    Args:\n        input_data: A list or NumPy array containing integers. If it's a NumPy\n                    array, it will be flattened to treat it as a 1D sequence.\n\n    Returns:\n        A new list with zeros moved to the front.\n    \"\"\"\n    \n    # Ensure we are working with a flat sequence\n    # If input is a numpy array, flatten it. Otherwise, assume it's list-like.\n    if isinstance(input_data, np.ndarray):\n        flat_sequence = input_data.flatten().tolist()\n    elif isinstance(input_data, list):\n         # Check if it's a list of lists (potentially representing a grid)\n         # and flatten if necessary. This handles cases where a grid might be passed\n         # as a list of lists instead of a numpy array.\n        if input_data and isinstance(input_data[0], list):\n             flat_sequence = [item for sublist in input_data for item in sublist]\n        else:\n             flat_sequence = input_data # Assume it's already a flat list\n    else:\n        # Attempt to convert other iterables to a list, raise error if not possible\n        try:\n            flat_sequence = list(input_data)\n        except TypeError:\n            raise TypeError(\"Input data must be list-like or a NumPy array.\")\n\n    # 1. Extract all zero elements from the flattened sequence.\n    zeros_list = get_zeros(flat_sequence)\n    \n    # 2. Extract all non-zero elements, maintaining their original relative order.\n    non_zeros_list = get_non_zeros(flat_sequence)\n    \n    # 3. Concatenate the list of zeros and the list of non-zeros.\n    #    The zeros come first, followed by the non-zeros in their preserved order.\n    output_sequence = zeros_list + non_zeros_list\n    \n    # 4. Return the resulting rearranged sequence as a list.\n    return output_sequence\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5988,
    "candidates_token_count": 716,
    "total_token_count": 6704,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.428551,
  "retries": 1
}