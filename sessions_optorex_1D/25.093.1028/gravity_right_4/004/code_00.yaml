Input:
  type: sequence # Assumed to be a flat, 1D sequence based on visual examples
  elements: integers
  properties:
    - contains zeros
    - contains non-zero integers
    - fixed length (12 in all examples)

Output:
  type: sequence # Flat, 1D sequence
  elements: integers
  properties:
    - same length as input
    - same multiset of elements as input (verified by metrics)
    - structured arrangement: zeros first, then non-zeros

Transformation:
  action: rearrange elements within the sequence
  rule: partition the sequence based on element value (zero vs. non-zero)
  constraints:
    - relative order of non-zero elements is preserved (verified by metrics)
    - all zeros from the input are grouped together at the beginning of the output
    - all non-zeros from the input are grouped together at the end of the output, maintaining their original relative order

Relationships:
  - Input element maps to an output element.
  - The position of an element in the output depends on its value (zero or non-zero) and its original position relative to other non-zero elements.
  - The count of zeros in the input equals the count of leading zeros in the output (verified by metrics).
  - The sequence of non-zero elements in the input is identical to the sequence of trailing non-zero elements in the output (verified by metrics).

Execution Issue:
  - The previous code execution failed with a type error ("The truth value of an array... is ambiguous").
  - This suggests the `transform` function was called with a multi-dimensional array or incompatible type, despite the task description implying a 1D sequence operation.
  - The core partitioning logic remains valid for 1D sequences.