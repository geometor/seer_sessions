{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input NumPy array of integers by moving all zero elements to the \nbeginning while preserving the relative order of the non-zero elements.\n\"\"\"\n\nimport numpy as np\n\ndef filter_zeros(input_array):\n    \"\"\"Filters out the zero elements from the input array.\"\"\"\n    # Use boolean indexing to select elements equal to 0\n    return input_array[input_array == 0]\n\ndef filter_non_zeros(input_array):\n    \"\"\"Filters out the non-zero elements from the input array, preserving order.\"\"\"\n    # Use boolean indexing to select elements not equal to 0\n    return input_array[input_array != 0]\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Moves all zeros in a 1D NumPy array to the front, preserving the relative\n    order of non-zero elements.\n\n    Args:\n        input_grid: A 1D NumPy array containing integers.\n\n    Returns:\n        A 1D NumPy array with zeros moved to the front and non-zeros\n        following in their original relative order.\n    \"\"\"\n    # Filter out the zero elements\n    zeros = filter_zeros(input_grid)\n\n    # Filter out the non-zero elements, preserving their relative order\n    non_zeros = filter_non_zeros(input_grid)\n\n    # Concatenate the array of zeros and the array of non-zeros\n    output_grid = np.concatenate((zeros, non_zeros))\n\n    # Return the transformed array\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3302,
    "candidates_token_count": 348,
    "total_token_count": 3650,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 5.522656,
  "retries": 1
}