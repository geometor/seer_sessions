objects:
  - name: input_string
    type: String
    description: A string containing space-separated single-digit integers.
  - name: output_string
    type: String
    description: A string containing space-separated single-digit integers, representing the transformed sequence.
  - name: input_sequence
    type: List[Integer]
    description: A list of single-digit integers derived from parsing the input_string.
  - name: output_sequence
    type: List[Integer]
    description: A list of single-digit integers representing the transformed sequence before formatting.
  - name: zero_digit
    type: Integer
    value: 0
    description: The integer value 0.
  - name: non_zero_digit
    type: Integer
    value_range: 1-9
    description: Any integer digit from 1 to 9.
  - name: zero_elements
    type: List[Integer]
    description: A list containing all the zero_digit elements from the input_sequence.
  - name: non_zero_elements
    type: List[Integer]
    description: A list containing all the non_zero_digit elements from the input_sequence, preserving their original relative order.

properties:
  - object: input_string
    property: length
    description: The number of characters in the string (including spaces).
  - object: input_sequence
    property: length
    description: The number of integer digits in the sequence.
  - object: output_sequence
    property: length
    description: The number of integer digits in the sequence (equal to input_sequence.length).
  - object: non_zero_elements
    property: relative_order
    description: The order in which non-zero digits appear relative to each other.

actions:
  - name: parse_string_to_int_list
    input: input_string
    output: input_sequence
    description: Convert the space-separated string of digits into a list of integers.
  - name: partition_list
    input: input_sequence
    outputs: [zero_elements, non_zero_elements]
    description: Iterate through the input_sequence, separating integer elements into two lists based on whether they are equal to 0 or not. The relative order within non_zero_elements must be preserved.
  - name: concatenate_lists
    inputs: [zero_elements, non_zero_elements]
    output: output_sequence
    description: Combine the zero_elements list and the non_zero_elements list to form the final output_sequence, with all zeros appearing first.
  - name: format_int_list_to_string
    input: output_sequence
    output: output_string
    description: Convert the list of integers back into a space-separated string.

relationships:
  - type: equality
    between: [input_sequence.length, output_sequence.length]
    description: The input and output sequences have the same number of integer elements.
  - type: preservation
    element: non_zero_digit
    in_lists: [input_sequence, non_zero_elements, output_sequence]
    property: relative_order
    description: The relative order of non-zero digits within the input_sequence is maintained in the non_zero_elements list and subsequently in the latter part of the output_sequence.
  - type: composition
    result: output_sequence
    components: [zero_elements, non_zero_elements]
    order: sequence
    description: The output_sequence is formed by concatenating the zero_elements list followed by the non_zero_elements list.