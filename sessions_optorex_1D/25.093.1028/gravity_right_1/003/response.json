{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport math # math is available but not used in this specific transformation\n\n\"\"\"\nMoves all zero digits to the beginning of the sequence while preserving the relative order of the non-zero digits.\n\"\"\"\n\ndef partition_sequence(sequence):\n    \"\"\"\n    Helper function to separate a sequence into zero and non-zero elements.\n\n    Args:\n        sequence: An iterable (list or array) of numbers.\n\n    Returns:\n        A tuple containing two lists: (list_of_zeros, list_of_non_zeros).\n        The relative order of elements within list_of_non_zeros is preserved.\n    \"\"\"\n    zeros = []\n    non_zeros = []\n    # Iterate through the input sequence\n    for item in sequence:\n        # Check if the element is zero\n        if item == 0:\n            zeros.append(item)\n        else:\n            # If not zero, add to the non_zeros list\n            non_zeros.append(item)\n    return zeros, non_zeros\n\ndef transform(input_sequence):\n    \"\"\"\n    Transforms an input sequence (list or NumPy array) of integers by moving\n    all zeros to the front while maintaining the relative order of non-zero digits.\n\n    Args:\n        input_sequence: A list or NumPy array containing single-digit integers.\n                        Example: [9, 0, 0, 0, 9, 0, 0, 7, 6, 0, 6, 0]\n\n    Returns:\n        A new list containing the transformed sequence of integers.\n        Example: [0, 0, 0, 0, 0, 0, 0, 9, 9, 7, 6, 6]\n    \"\"\"\n\n    # Ensure input is iterable (convert NumPy array to list if necessary,\n    # otherwise assume it's list-like)\n    if isinstance(input_sequence, np.ndarray):\n        # Convert numpy array to list for consistent processing\n        work_sequence = input_sequence.tolist()\n    else:\n        # Assume it's already a list or compatible iterable\n        work_sequence = list(input_sequence)\n\n    # Separate the sequence into zeros and non-zeros using the helper function\n    zeros, non_zeros = partition_sequence(work_sequence)\n\n    # Construct the output sequence by concatenating the lists: zeros first, then non-zeros\n    output_sequence = zeros + non_zeros\n\n    # Return the resulting transformed list\n    return output_sequence\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4079,
    "candidates_token_count": 566,
    "total_token_count": 4645,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.114461,
  "retries": 1
}