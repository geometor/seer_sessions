{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport math\n# No other specific libraries like numpy seem necessary for this string/list manipulation task.\n\n\"\"\"\nTransforms an input string of space-separated single-digit integers by moving all \nzero digits to the beginning of the sequence while preserving the relative order \nof the non-zero digits. The output is also a space-separated string.\n\"\"\"\n\ndef parse_input_string(input_str: str) -> list[int]:\n    \"\"\"Converts a space-separated string of digits into a list of integers.\"\"\"\n    # Handle potential empty input string gracefully, though examples don't show this.\n    if not input_str:\n        return []\n    return [int(digit) for digit in input_str.split()]\n\ndef format_output_list(output_list: list[int]) -> str:\n    \"\"\"Converts a list of integers back into a space-separated string.\"\"\"\n    return ' '.join(map(str, output_list))\n\ndef partition_digits(sequence: list[int]) -> tuple[list[int], list[int]]:\n    \"\"\"\n    Separates a sequence into zero and non-zero elements, preserving\n    the relative order of non-zero elements.\n\n    Args:\n        sequence: A list of integers.\n\n    Returns:\n        A tuple containing two lists: (list_of_zeros, list_of_non_zeros).\n    \"\"\"\n    zeros_list = []\n    non_zeros_list = []\n    # Iterate through the input sequence\n    for digit in sequence:\n        # Check if the element is zero\n        if digit == 0:\n            zeros_list.append(digit)\n        else:\n            # If not zero, add to the non_zeros list\n            non_zeros_list.append(digit)\n    return zeros_list, non_zeros_list\n\ndef transform(input_str: str) -> str:\n    \"\"\"\n    Applies the transformation rule to the input string.\n\n    Args:\n        input_str: A string containing space-separated single-digit integers.\n\n    Returns:\n        A string containing the transformed sequence of space-separated digits.\n    \"\"\"\n\n    # 1. & 2. Parse Input: Convert the input string into a list of integers.\n    input_sequence = parse_input_string(input_str)\n\n    # 3. Partition Digits: Separate the sequence into zeros and non-zeros.\n    zeros_list, non_zeros_list = partition_digits(input_sequence)\n\n    # 4. Construct Output Sequence: Concatenate the lists (zeros first).\n    output_sequence = zeros_list + non_zeros_list\n\n    # 5. Format Output: Convert the resulting list back to a space-separated string.\n    output_str = format_output_list(output_sequence)\n\n    # 6. Return Output\n    return output_str\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7610,
    "candidates_token_count": 642,
    "total_token_count": 8252,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 7.93972,
  "retries": 1
}