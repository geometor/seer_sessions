{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np # Although not strictly necessary for this logic, keeping for potential compatibility\nimport math\nimport re # Although not used, keeping for consistency\n\n\"\"\"\nRearranges a sequence of digits by moving all zero (0) elements to the beginning of the sequence, while preserving the original relative order of all non-zero elements.\n\"\"\"\n\ndef partition_by_value(sequence, value_to_partition):\n  \"\"\"\n  Partitions a sequence into two lists based on whether elements equal a specific value.\n\n  Args:\n      sequence: The input list or array-like sequence.\n      value_to_partition: The value to check for partitioning (e.g., 0).\n\n  Returns:\n      A tuple containing two lists: (elements_equal_to_value, elements_not_equal_to_value).\n      The relative order within each list is preserved.\n  \"\"\"\n  elements_equal = []\n  elements_not_equal = []\n  for element in sequence:\n      if element == value_to_partition:\n          elements_equal.append(element)\n      else:\n          elements_not_equal.append(element)\n  return elements_equal, elements_not_equal\n\ndef transform(input_sequence):\n    \"\"\"\n    Moves all zeros in the input sequence to the beginning, preserving the relative order of non-zero elements.\n\n    Args:\n        input_sequence: A list or array-like sequence of integers (digits 0-9).\n\n    Returns:\n        A new list containing the rearranged sequence of digits.\n    \"\"\"\n\n    # 1. Partition the input sequence into zeros and non-zeros.\n    #    Use a helper function to separate elements based on the value 0,\n    #    while preserving the relative order within the non-zero group.\n    zeros_group, non_zeros_group = partition_by_value(input_sequence, 0)\n\n    # 2. Concatenate the partitioned groups.\n    #    Combine the list of zeros followed by the list of non-zeros.\n    output_sequence = zeros_group + non_zeros_group\n\n    # 3. Return the rearranged sequence.\n    return output_sequence\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5886,
    "candidates_token_count": 485,
    "total_token_count": 6371,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.996358,
  "retries": 1
}