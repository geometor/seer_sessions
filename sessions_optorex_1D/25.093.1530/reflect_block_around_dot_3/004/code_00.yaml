Task: Swap the relative position of a group block around a pivot element while preserving the gap between them.
Input:
  Type: List or 1D NumPy array of integers (single digits).
  Length: Variable.
  Contains:
    - Zeros: Multiple instances, acting as spacing.
    - Pivot: Exactly one instance of the integer 2.
    - Group: One contiguous block of identical non-zero integers (X), where X is not 2.
Output:
  Type: List or 1D NumPy array of integers (single digits).
  Length: Same as input.
  Contains:
    - Zeros: Filling space not occupied by Pivot or Group.
    - Pivot: Exactly one instance of the integer 2.
    - Group: The same contiguous block of integer X as in the input.
Objects:
  - Pivot Element:
    Value: 2
    Properties: Unique in the sequence.
    Role: Acts as a fixed anchor point. Its index remains unchanged.
  - Group Element Block:
    Value: X (an integer != 0 and != 2)
    Properties: Contiguous block of one or more identical digits (X); length L; start index S_in; end index E_in.
    Role: Moves relative to the Pivot Element. Its value and length L are preserved.
  - Gap:
    Value: G (number of zeros between Pivot and Group in the input)
    Properties: Non-negative integer; calculated based on relative positions.
    Role: Defines the spacing that must be preserved between Pivot and Group in the output.
Relationships:
  - Pivot Position: output[pivot_index] == input[pivot_index] == 2.
  - Group Position: Changes relative to the Pivot (swaps sides).
  - Spacing: The number of zeros (Gap G) between the Pivot and the Group boundary is the same in the input and output.
Actions:
  1. Initialize Output: Create an output sequence of the same length as the input, filled with zeros.
  2. Locate Pivot: Find the index (pivot_idx) of the Pivot element (2) in the input.
  3. Place Pivot: Set output[pivot_idx] = 2.
  4. Locate Group: Find the Group block in the input: its value (X), length (L), start index (S_in), and end index (E_in).
  5. Determine Relative Position (Input): Check if the Group block is before (E_in < pivot_idx) or after (S_in > pivot_idx) the Pivot in the input.
  6. Calculate Gap: Determine the number of zeros (G) between the Pivot and the nearest boundary of the Group block in the input.
     - If Group before Pivot: G = pivot_idx - E_in - 1
     - If Group after Pivot: G = S_in - pivot_idx - 1
  7. Calculate Output Position (Group): Determine the start index (S_out) for the Group block in the output based on swapping sides and preserving the gap G:
     - If Group was *before* Pivot in input (move *after*): S_out = pivot_idx + 1 + G
     - If Group was *after* Pivot in input (move *before*): S_out = pivot_idx - G - L
  8. Place Group: Fill the output sequence from index S_out to S_out + L - 1 with the Group value (X).
  9. Return Output: Return the completed output sequence.
