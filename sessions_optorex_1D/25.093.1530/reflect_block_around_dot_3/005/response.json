{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input sequence (1D NumPy array) of single-digit integers by swapping the relative position of a contiguous 'group' block (identical non-zero, non-2 digits) around a fixed 'pivot' element (2), while preserving the number of zeros ('gap') originally between them.\n\n1. Find the index of the pivot element (2).\n2. Find the contiguous block of the group element (X), its value, length, start index, and end index.\n3. Keep the pivot element (2) at its original index in the output sequence.\n4. Determine if the group block was positioned before or after the pivot in the input.\n5. Calculate the gap size (number of zeros) strictly between the pivot and the group block in the input sequence.\n6. Move the group block to the opposite side of the pivot in the output sequence, placing it such that the calculated gap size is maintained between the pivot and the nearest boundary of the group block.\n7. Fill all other positions in the output sequence with zeros.\n\"\"\"\n\nimport numpy as np\n\ndef _find_pivot_index(grid: np.ndarray) -> int:\n    \"\"\"Finds the index of the pivot element '2'.\"\"\"\n    pivot_indices = np.where(grid == 2)[0]\n    if len(pivot_indices) == 1:\n        return int(pivot_indices[0]) # Return as standard Python int\n    else:\n        # According to problem description, there should always be exactly one '2'\n        raise ValueError(\"Input grid must contain exactly one pivot element '2'.\")\n\ndef _find_group_info(grid: np.ndarray) -> tuple[int, int, int, int]:\n    \"\"\"\n    Finds the contiguous block of identical non-zero digits (not '2').\n    Returns:\n        tuple: (group_value, start_index, end_index, length) or raises ValueError if not found.\n    \"\"\"\n    group_value = None\n    start_index = -1\n    length = 0\n    in_group = False\n    found_group = False\n\n    for i, val in enumerate(grid):\n        # Check if the value is a potential group element\n        if val != 0 and val != 2:\n            if not in_group:\n                # Start of a potential group\n                group_value = int(val) # Store as standard Python int\n                start_index = i\n                length = 1\n                in_group = True\n            elif val == group_value:\n                # Continue the current group\n                length += 1\n            else:\n                # Found a different non-zero, non-2 digit.\n                # Problem implies only one group type, so we stop the first one found.\n                found_group = True\n                break # Exit loop once the first complete group is identified\n        elif in_group:\n            # Group ended (hit a 0 or 2)\n            found_group = True\n            break # Exit loop once the group ends\n\n    # Handle case where group runs to the end of the array\n    if in_group and not found_group:\n        found_group = True\n\n    if found_group:\n        end_index = start_index + length - 1\n        # Return standard Python ints\n        return group_value, int(start_index), int(end_index), int(length)\n    else:\n        # According to problem description, there should always be a group\n        raise ValueError(\"Could not find a valid group block in the input grid.\")\n\ndef _calculate_gap(pivot_index: int, group_start_index: int, group_end_index: int, group_was_before: bool) -> int:\n    \"\"\"Calculates the number of zeros strictly between the pivot and the group block.\"\"\"\n    if group_was_before:\n        # Gap is between group end and pivot start\n        gap = pivot_index - group_end_index - 1\n    else:\n        # Gap is between pivot end and group start\n        gap = group_start_index - pivot_index - 1\n\n    # Ensure gap is non-negative (should be based on logic, but as a safeguard)\n    return max(0, int(gap)) # Return as standard Python int\n\ndef _calculate_output_start(pivot_index: int, group_length: int, gap_size: int, group_was_before: bool) -> int:\n    \"\"\"Calculates the starting index for the group in the output grid.\"\"\"\n    if group_was_before:\n        # Group was before pivot, move it after, preserving gap\n        # Output starts at pivot_index + 1 (position after pivot) + gap_size\n        output_start = pivot_index + 1 + gap_size\n    else:\n        # Group was after pivot, move it before, preserving gap\n        # Output ends at pivot_index - 1 (position before pivot) - gap_size\n        # Output starts at pivot_index - gap_size - group_length\n        output_start = pivot_index - gap_size - group_length\n\n    return int(output_start) # Return as standard Python int\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid (np.ndarray): A 1D NumPy array of single-digit integers.\n\n    Returns:\n        np.ndarray: The transformed 1D NumPy array.\n    \"\"\"\n    n = len(input_grid)\n    # Initialize output_grid with zeros, matching input type\n    output_grid = np.zeros(n, dtype=input_grid.dtype)\n\n    # --- Locate Pivot ---\n    pivot_index = _find_pivot_index(input_grid)\n\n    # --- Place Pivot ---\n    output_grid[pivot_index] = 2\n\n    # --- Locate Group ---\n    group_value, group_start_index, group_end_index, group_length = _find_group_info(input_grid)\n\n    # --- Determine Relative Position (Input) ---\n    group_was_before = group_end_index < pivot_index\n\n    # --- Calculate Gap ---\n    gap_size = _calculate_gap(pivot_index, group_start_index, group_end_index, group_was_before)\n\n    # --- Calculate Output Position (Group) ---\n    output_start_index = _calculate_output_start(pivot_index, group_length, gap_size, group_was_before)\n    output_end_index = output_start_index + group_length # Calculate end index (exclusive for slicing)\n\n    # --- Place Group ---\n    # Check for boundary issues before placing\n    if output_start_index < 0 or output_end_index > n:\n        # This case indicates an issue with logic or input assumptions if it occurs.\n        raise ValueError(f\"Calculated output indices [{output_start_index}:{output_end_index}] are out of bounds for grid size {n}.\")\n\n    output_grid[output_start_index:output_end_index] = group_value\n\n    # --- Return Output ---\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 12822,
    "candidates_token_count": 1620,
    "total_token_count": 14442,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.571609,
  "retries": 1
}