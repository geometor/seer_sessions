task_description: Rearrange non-zero elements in a fixed-length numerical sequence by mirroring their positions across the position of the element '2', outputting the result as a space-separated string.

elements:
  - type: input_sequence
    properties:
      format: Numerical sequence (e.g., List[int] or numpy.ndarray)
      length: 12 (observed in examples)
      contains:
        - integer_0
        - non_zero_integers
  - type: output_string
    properties:
      format: Space-separated string of integers
      length: 12 (derived from input length)
  - type: integer_0
    description: Acts as a placeholder or background filler. Value is 0.
  - type: non_zero_integers
    description: The elements that are actively rearranged.
    contains:
      - pivot_element
      - other_non_zero_elements
  - type: pivot_element
    properties:
      value: 2
      role: Its position remains fixed and acts as the center point for rearrangement.
  - type: other_non_zero_elements
    description: All non-zero integers other than the pivot_element (2).
    properties:
      value: Any integer != 0 and != 2.
      position: Their original position relative to the pivot determines their final position.

relationships:
  - type: relative_position
    between: other_non_zero_elements
    and: pivot_element
    values: [before, after]
  - type: index_mapping (mirroring)
    input: original_index, pivot_index
    output: new_index
    calculation: new_index = 2 * pivot_index - original_index

actions:
  - name: identify_pivot
    input: input_sequence
    output: pivot_index (index of value 2)
  - name: identify_others
    input: input_sequence, pivot_index
    output: list_of (value, original_index) for non-zeros != 2
  - name: initialize_output_list
    input: sequence_length
    output: list_of_zeros
  - name: place_pivot
    input: output_list, pivot_index, pivot_value (2)
    action: Place pivot_value at pivot_index in output_list.
  - name: mirror_and_place_others
    input: output_list, list_of_others, pivot_index
    action:
      for each (value, original_index) in list_of_others:
        calculate new_index = 2 * pivot_index - original_index
        if 0 <= new_index < sequence_length:
            place value at new_index in output_list (overwriting if necessary)
  - name: format_output_string
    input: final_output_list
    output: space-separated string representation

goal: Transform the input numerical sequence into a space-separated output string by keeping '2' fixed and mirroring the positions of all other non-zero elements across the position of '2'.