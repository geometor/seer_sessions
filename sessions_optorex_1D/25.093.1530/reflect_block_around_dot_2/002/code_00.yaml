task_description: Reposition a block of digits relative to a fixed pivot digit '2' within a sequence.
elements:
  - object: sequence
    properties:
      format: list or array of 12 integers (0-9) # Updated format
      role: input/output container
      length: 12
  - object: pivot
    properties:
      value: 2
      occurrence: exactly one per sequence
      behavior: position is fixed between input and output
      identifier: idx_2 (index of the pivot)
  - object: block
    properties:
      value: non-zero integer (not 2)
      occurrence: one contiguous block per sequence
      structure: sequence of identical digits
      length: variable (>= 1)
      identifier: block_val, block_start_in, block_end_in, block_len
  - object: padding
    properties:
      value: 0
      role: fills remaining positions in the sequence
action:
  name: reposition_block
  inputs:
    - input_sequence (list or array of integers) # Updated input type
  output: output_sequence (list of integers)
  logic: |
    1. Identify the index of the pivot element '2' (idx_2).
    2. Identify the contiguous block of identical non-zero digits (not '2'):
       - Determine its value (block_val).
       - Find its start (block_start_in) and end (block_end_in) indices.
       - Calculate its length (block_len).
    3. Determine the relative position of the block to the pivot.
    4. Calculate the mirroring distance:
       - If the block is BEFORE the pivot (block_end_in < idx_2), distance = idx_2 - block_end_in - 1.
       - If the block is AFTER the pivot (block_start_in > idx_2), distance = block_start_in - idx_2 - 1.
    5. Calculate the new starting position (new_block_start) for the block in the output:
       - If the block was BEFORE, new_block_start = idx_2 + distance + 1.
       - If the block was AFTER, calculate new_block_end = idx_2 - distance - 1, then new_block_start = new_block_end - block_len + 1.
    6. Construct the output sequence:
       - Initialize with zeros.
       - Place the pivot '2' at idx_2.
       - Place the block (block_val repeated block_len times) starting at new_block_start.
relationships:
  - type: relative_position
    object1: block
    object2: pivot
    condition: Determines the mirroring direction (block_end_in < idx_2 or block_start_in > idx_2).
  - type: distance_mirroring
    object1: block (nearest edge)
    object2: pivot
    value: |
      The number of '0's strictly between the pivot and the nearest edge of the block.
      (abs(idx_2 - block_end_in) - 1 if block is before,
       abs(block_start_in - idx_2) - 1 if block is after)
    condition: This distance is preserved on the opposite side of the pivot when placing the block in the output.