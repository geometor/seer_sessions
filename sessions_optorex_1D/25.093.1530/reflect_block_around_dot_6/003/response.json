{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms a 1D NumPy array of 12 integers based on the position of the number 2.\nThe number 2 acts as a pivot. Non-zero elements before the 2 are moved to\nthe slots *after* the 2 in the output, preserving their relative order and \naligning them to the right end of the array.\nNon-zero elements after the 2 are moved to the slots *before* the 2\nin the output, preserving their relative order and aligning them to the right\n(i.e., immediately before the pivot). The position of 2 remains unchanged.\nAll other positions are filled with 0.\n\"\"\"\n\nimport numpy as np\n\ndef find_pivot_index(sequence, pivot_value=2):\n    \"\"\"Finds the index of the first occurrence of the pivot value in the sequence.\"\"\"\n    indices = np.where(sequence == pivot_value)[0]\n    if len(indices) > 0:\n        return indices[0]\n    else:\n        # Handle cases where the pivot might be missing, though based on examples it's always present.\n        # Returning -1 or raising an error could be options. Let's return -1 for now.\n        return -1\n\ndef extract_non_zero_elements(sub_sequence):\n    \"\"\"Extracts non-zero elements from a sub-sequence (NumPy array), preserving order.\"\"\"\n    return sub_sequence[sub_sequence != 0]\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the pivot-based sequence transformation to a NumPy array.\n\n    Args:\n        input_grid: A 1D NumPy array of 12 integers.\n\n    Returns:\n        A 1D NumPy array of 12 integers representing the transformed sequence.\n    \"\"\"\n    # Define constants\n    sequence_length = 12\n    padding_value = 0\n    pivot_value = 2\n\n    # 1. Locate the index (position) of the pivot integer `2`.\n    pivot_index = find_pivot_index(input_grid, pivot_value)\n\n    # Basic error check if pivot is not found (unlikely based on examples)\n    if pivot_index == -1:\n        print(f\"Warning: Pivot element {pivot_value} not found. Returning original grid.\")\n        return input_grid # Or handle as an error appropriately\n\n    # 2. Extract non-zero elements before the pivot.\n    elements_before = extract_non_zero_elements(input_grid[:pivot_index])\n\n    # 3. Extract non-zero elements after the pivot.\n    elements_after = extract_non_zero_elements(input_grid[pivot_index + 1:])\n\n    # 4. Initialize the output sequence with padding values.\n    output_grid = np.full(sequence_length, padding_value, dtype=input_grid.dtype)\n\n    # 5. Place the pivot integer `2` into the output sequence at its original index.\n    output_grid[pivot_index] = pivot_value\n\n    # 6. Place the `elements_after` into the output sequence, ending just before the pivot index (right-aligned in the 'before' section).\n    len_after = len(elements_after)\n    if len_after > 0:\n        start_index_after = pivot_index - len_after\n        # Ensure start index is not negative (handles cases where there are more 'after' elements than space before pivot)\n        if start_index_after >= 0:\n            output_grid[start_index_after:pivot_index] = elements_after\n        else:\n             # This case suggests an issue if it occurs based on problem constraints\n             print(f\"Warning: Not enough space to place 'after' elements for pivot at {pivot_index}.\")\n             # Place as many as possible\n             output_grid[0:pivot_index] = elements_after[-pivot_index:]\n\n\n    # 7. Place the `elements_before` into the output sequence, starting after the pivot index and ending at the end of the array (right-aligned in the 'after' section).\n    len_before = len(elements_before)\n    if len_before > 0:\n        start_index_before = sequence_length - len_before\n        # Ensure start index is valid (it should be >= pivot_index + 1 if placement is possible)\n        if start_index_before > pivot_index:\n             output_grid[start_index_before:sequence_length] = elements_before\n        else:\n            # This case suggests an issue if it occurs based on problem constraints\n            print(f\"Warning: Not enough space to place 'before' elements for pivot at {pivot_index}.\")\n            # Place as many as possible starting right after pivot\n            placeable_len = sequence_length - (pivot_index + 1)\n            output_grid[pivot_index + 1 : sequence_length] = elements_before[:placeable_len]\n\n\n    # 8. Return the resulting sequence.\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6300,
    "candidates_token_count": 1149,
    "total_token_count": 7449,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 91.739243,
  "retries": 2
}