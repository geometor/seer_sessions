task_type: sequence_transformation
input_format:
  type: numpy.ndarray # Updated based on error message
  element_type: integer
  shape: (12,) # Length 12
output_format:
  type: numpy.ndarray # Assuming output should match input type
  element_type: integer
  shape: (12,) # Length 12
elements:
  - type: pivot
    value: 2
    properties:
      - count: 1 per sequence
      - position: invariant between input and output
  - type: mobile
    value: non-zero integers other than 2
    properties:
      - relocation: position changes based on pivot (swaps sides)
      - relative_order: preserved within relocated groups
  - type: padding
    value: 0
    properties:
      - fills empty spaces
transformation:
  actions:
    - find the index 'p' of the pivot element '2' in the input array
    - extract non-zero elements before index 'p' into list/array 'B', preserving order
    - extract non-zero elements after index 'p' into list/array 'A', preserving order
    - construct output array of shape (12,), initialized with padding element '0'
    - place pivot element '2' at index 'p' in the output array
    - place elements from list 'A' into the output array slots *before* index 'p' (i.e., indices 0 to p-1), aligning them to the right (ending at index p-1)
    - place elements from list 'B' into the output array slots *after* index 'p' (i.e., indices p+1 to 11), aligning them to the right (ending at index 11)
  relationship:
    - non-zero elements swap sides relative to the pivot '2', maintaining relative order within their group and aligning to the right boundary of their new partition.