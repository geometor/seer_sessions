task_description: "Shift a contiguous block of identical non-zero numbers within a sequence 3 positions to the left."
data_representation:
  - type: sequence (array)
    format: numpy.ndarray or similar list/array of integers
    length: 12
    elements: integers (0 and one other non-zero integer per sequence)
objects:
  - name: sequence
    properties:
      - length: 12
      - elements: list or array of integers
  - name: zero_element
    value: 0
  - name: non_zero_block
    properties:
      - value: integer > 0 (constant within the block)
      - contiguity: elements are adjacent
      - uniqueness: only one such block per input sequence
      - start_index: integer >= 0
      - end_index: integer < 12
      - length: integer > 0
relationships:
  - type: containment
    description: "The non_zero_block is contained within the sequence, surrounded by zero_elements."
actions:
  - name: identify_block
    input: input sequence (array)
    output: non_zero_block (value, start_index, length)
    process: Iterate through the input array to find the first non-zero element (start_index, value), then count consecutive identical elements (length).
  - name: shift_block_left
    target: non_zero_block's start_index
    parameter: shift_amount (constant value of 3)
    result: new_start_index = original_start_index - 3
  - name: construct_output
    input: sequence length (12), identified block (value, length), new_start_index
    output: output sequence (array)
    process: Create an array of zeros of the specified length. Iterate from i = 0 to block_length - 1. Calculate the target index in the output array as new_start_index + i. If the target index is within the bounds [0, 11], place the block_value at that index in the output array.
transformation_rule: "The output sequence (array) is generated by shifting the non_zero_block found in the input sequence (array) 3 positions to the left, truncating any part of the block that shifts beyond index 0."
constants:
  - sequence_length: 12
  - shift_amount: 3 (to the left)