{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport math\nimport collections # Although not strictly needed for this version, kept for potential future use\n\n\"\"\"\nGiven an input grid (likely 1x12), extract the sequence. Identify the contiguous block of identical non-zero numbers. Create a new zero-filled sequence of the same length (12). Place the identified block into the new sequence, shifted 3 positions to the left compared to its original position. Handle boundary conditions by truncating any part of the block that shifts to an index less than 0.\n\"\"\"\n\ndef find_non_zero_block(int_array: np.ndarray):\n    \"\"\"\n    Finds the contiguous block of identical non-zero numbers in a 1D numpy array.\n\n    Args:\n        int_array: A 1D numpy array of integers.\n\n    Returns:\n        A tuple containing:\n        - block_value (int): The non-zero value of the block (0 if no block found).\n        - start_index (int): The starting index of the block (-1 if no block found).\n        - block_length (int): The length of the block (0 if no block found).\n    \"\"\"\n    start_index = -1\n    block_value = 0\n    block_length = 0\n    \n    # Iterate through the 1D array to find the block\n    for i, val in enumerate(int_array):\n        if val != 0:\n            # Found the start of a potential block\n            if start_index == -1:\n                start_index = i\n                block_value = val\n                block_length = 1\n            # Continuing the identified block\n            elif val == block_value:\n                block_length += 1\n            # Encountered a different non-zero value (stop searching based on constraints)\n            else: \n                break \n        elif start_index != -1:\n            # Found a zero after the block started, so the block ends here\n            break\n            \n    # Return block details or default values if no block was found\n    if start_index != -1:\n        return block_value, start_index, block_length\n    else:\n        return 0, -1, 0\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \n    # Define expected sequence length\n    sequence_length = 12 \n\n    # Handle potential 2D input (shape like (1, 12)) vs 1D input (shape (12,))\n    if input_grid.ndim == 2 and input_grid.shape[0] == 1:\n        # Extract the first row as the 1D sequence\n        sequence = input_grid[0]\n    elif input_grid.ndim == 1 and input_grid.shape[0] == sequence_length:\n        # Input is already the correct 1D sequence\n        sequence = input_grid\n    else:\n        # Handle unexpected input shape (optional: raise error or default)\n        # For now, assume it fits one of the above cases based on previous error\n        # If input is unexpected, finding the block might fail gracefully anyway\n        sequence = input_grid.flatten() # Attempt to flatten if shape is wrong\n        if sequence.shape[0] != sequence_length:\n             # Fallback to creating a default sequence if flattening fails\n             sequence = np.zeros(sequence_length, dtype=int)\n\n\n    # Initialize the output grid (1D NumPy array) with zeros\n    output_grid = np.zeros(sequence_length, dtype=int)\n\n    # Find the non-zero block in the extracted 1D sequence\n    block_value, start_index, block_length = find_non_zero_block(sequence)\n\n    # If a non-zero block was found, proceed with the shift\n    if block_value != 0:\n        # Define the shift amount\n        shift_amount = 3\n        \n        # Calculate the target start index after shifting left\n        new_start_index = start_index - shift_amount\n\n        # Place the block into the output grid, handling boundary conditions\n        for i in range(block_length):\n            # Calculate the target index for the current element of the block\n            target_index = new_start_index + i\n            \n            # Check if the target index is within the valid bounds (0 to sequence_length - 1)\n            if 0 <= target_index < sequence_length:\n                # Assign the block's value to the calculated position in the output grid\n                output_grid[target_index] = block_value\n            # Else: if target_index < 0, the element is truncated (do nothing)\n\n    # Return the resulting 1D output grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6214,
    "candidates_token_count": 1364,
    "total_token_count": 7578,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.316763,
  "retries": 1
}