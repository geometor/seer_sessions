{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input sequence of 12 integers by finding a single contiguous block of \nidentical non-zero digits and shifting this block 3 positions to the left. \nThe value and length of the block are preserved. The remaining positions in the \noutput sequence are filled with zeros. Elements shifted past the beginning of the \nsequence (index 0) are discarded.\n\"\"\"\n\nimport numpy as np\n\ndef find_non_zero_block(input_array):\n    \"\"\"\n    Finds the start index, value, and length of the first contiguous block \n    of non-zero identical elements in the input array.\n\n    Args:\n        input_array (np.ndarray): The 1D input array.\n\n    Returns:\n        tuple: (start_index, block_value, block_length) or (None, None, None) if no block found.\n    \"\"\"\n    # Find indices of all non-zero elements\n    non_zero_indices = np.where(input_array != 0)[0]\n    \n    # If no non-zero elements, return None\n    if len(non_zero_indices) == 0:\n        return None, None, None\n\n    # The block starts at the first non-zero index\n    start_index = non_zero_indices[0]\n    # The value of the block is the value at the start index\n    block_value = input_array[start_index]\n    \n    # Determine the block length by checking for contiguity and identical value\n    block_length = 0\n    for i in range(start_index, len(input_array)):\n        if input_array[i] == block_value:\n            block_length += 1\n        else:\n            # Stop counting if the value changes or becomes zero\n            break \n            \n    # Basic validation: check if all found non-zero indices belong to this single block\n    # This assumes the problem guarantees only one contiguous block as per examples\n    if len(non_zero_indices) != block_length or non_zero_indices[-1] != start_index + block_length - 1:\n         # This might indicate multiple blocks or non-identical values within non-zeros,\n         # but based on examples, we proceed assuming a single contiguous identical block.\n         # Recalculate length based purely on non_zero_indices count if validation fails,\n         # might be safer for unseen variations if strict contiguity/identity fails.\n         # For now, trust the loop-based block_length is correct for the pattern.\n         pass # Keep the loop-calculated block_length\n\n    return start_index, block_value, block_length\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the left shift transformation to the non-zero block.\n\n    Args:\n        input_grid (list or np.ndarray): A sequence of 12 integers.\n\n    Returns:\n        np.ndarray: The transformed 1D NumPy array.\n    \"\"\"\n    # Ensure input is a NumPy array for consistent operations\n    input_array = np.array(input_grid)\n    n = len(input_array)\n    \n    # Initialize output_grid with zeros, same shape and type as input\n    output_grid = np.zeros_like(input_array)\n\n    # Find the non-zero block details using the helper function\n    start_index, block_value, block_length = find_non_zero_block(input_array)\n\n    # Proceed only if a block was found\n    if start_index is not None:\n        # Calculate the new starting index after shifting left by 3\n        new_start_index = start_index - 3\n\n        # Place the block into the output grid at the new position\n        # Iterate through each position of the block\n        for i in range(block_length):\n            # Calculate the target index in the output grid\n            output_index = new_start_index + i\n            \n            # Check if the target index is within the bounds of the grid (0 to n-1)\n            if 0 <= output_index < n:\n                # If within bounds, assign the block's value to that position\n                output_grid[output_index] = block_value\n            # If output_index < 0, the element is shifted off the grid and discarded (implicitly)\n\n    # Return the modified output grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5122,
    "candidates_token_count": 1503,
    "total_token_count": 6625,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.021031,
  "retries": 1
}