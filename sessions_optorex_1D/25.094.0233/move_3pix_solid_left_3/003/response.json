{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input array of 12 integers by finding a single contiguous block of \nidentical non-zero digits and shifting this block 3 positions to the left. \nThe value and length of the block are preserved. The remaining positions in the \noutput array are filled with zeros. Assumes input is a NumPy array.\n\"\"\"\n\nimport numpy as np\n\ndef find_non_zero_block(input_array):\n    \"\"\"\n    Finds the start index, value, and length of the first contiguous block \n    of non-zero identical elements in the input array.\n\n    Args:\n        input_array (np.ndarray): The 1D input array.\n\n    Returns:\n        tuple: (start_index, block_value, block_length) or (None, None, None) if no block found.\n    \"\"\"\n    non_zero_indices = np.where(input_array != 0)[0]\n    \n    if len(non_zero_indices) == 0:\n        return None, None, None  # No non-zero elements found\n\n    start_index = non_zero_indices[0]\n    block_value = input_array[start_index]\n    block_length = 0\n    \n    # Verify contiguity and determine length (more robust than just len(non_zero_indices))\n    for i in range(start_index, len(input_array)):\n        if input_array[i] == block_value:\n            block_length += 1\n        else:\n            break # End of the block (or unexpected value)\n            \n    # Check if the found non_zero_indices match the expected contiguous block length\n    if block_length != len(non_zero_indices) or non_zero_indices[-1] != start_index + block_length -1 :\n       # This condition handles cases where non-zeros might not be contiguous or identical,\n       # although the problem description implies they always are.\n       # For this specific problem based on examples, we can perhaps simplify, \n       # but this is more robust. We'll proceed assuming contiguity based on examples.\n       block_length = len(non_zero_indices) # Revert to simple length based on examples\n\n    return start_index, block_value, block_length\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the left shift transformation to the non-zero block.\n\n    Args:\n        input_grid (np.ndarray): A 1D NumPy array of 12 integers.\n\n    Returns:\n        np.ndarray: The transformed 1D NumPy array.\n    \"\"\"\n    n = len(input_grid)\n    # Initialize output_grid with zeros\n    output_grid = np.zeros_like(input_grid)\n\n    # Find the non-zero block details\n    start_index, block_value, block_length = find_non_zero_block(input_grid)\n\n    # If a block was found\n    if start_index is not None:\n        # Calculate the new starting index after shifting left by 3\n        new_start_index = start_index - 3\n\n        # Place the block into the output grid at the new position\n        for i in range(block_length):\n            output_index = new_start_index + i\n            # Check array bounds before writing\n            if 0 <= output_index < n:\n                output_grid[output_index] = block_value\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5070,
    "candidates_token_count": 1221,
    "total_token_count": 6291,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.473885,
  "retries": 1
}