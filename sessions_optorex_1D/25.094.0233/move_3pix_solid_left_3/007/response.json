{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input sequence of 12 integers by finding a single contiguous block of \nidentical non-zero digits and shifting this block 3 positions to the left. \nThe value and length of the block are preserved. The remaining positions in the \noutput sequence are filled with zeros. Elements shifted past the beginning of the \nsequence (index 0) are discarded.\n\"\"\"\n\nimport numpy as np\n\ndef find_non_zero_block(input_array):\n    \"\"\"\n    Finds the start index, value, and length of the first contiguous block \n    of non-zero identical elements in the input array.\n\n    Args:\n        input_array (np.ndarray): The 1D input array.\n\n    Returns:\n        tuple: (start_index, block_value, block_length) or (None, None, None) \n               if no block found or if the input constraints are violated.\n    \"\"\"\n    # Find indices of all non-zero elements\n    non_zero_indices = np.where(input_array != 0)[0]\n    \n    # If no non-zero elements, return None\n    if len(non_zero_indices) == 0:\n        return None, None, None\n\n    # The block starts at the first non-zero index\n    start_index = non_zero_indices[0]\n    # The value of the block is the value at the start index\n    block_value = input_array[start_index]\n    \n    # Determine the block length by checking for contiguity and identical value\n    block_length = 0\n    for i in range(start_index, len(input_array)):\n        if input_array[i] == block_value:\n            block_length += 1\n        elif input_array[i] == 0: # End of block if we hit a zero\n            break\n        else: # If we hit a different non-zero value, constraints are violated\n              # Based on examples, this shouldn't happen. Return None to be safe.\n              # print(f\"Warning: Found unexpected non-zero value {input_array[i]} after block of {block_value}\")\n              return None, None, None # Or handle error as appropriate\n\n    # Simple check: ensure the number of non-zero elements matches the block length found\n    if len(non_zero_indices) != block_length:\n        # This implies non-contiguous non-zero elements or other violations\n        # print(f\"Warning: Number of non-zero indices ({len(non_zero_indices)}) doesn't match calculated block length ({block_length})\")\n        return None, None, None # Constraints violated\n\n    return start_index, block_value, block_length\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the left shift transformation to the non-zero block.\n\n    Args:\n        input_grid (list or np.ndarray): A sequence of 12 integers.\n\n    Returns:\n        np.ndarray: The transformed 1D NumPy array.\n    \"\"\"\n    # Ensure input is a NumPy array for consistent operations\n    input_array = np.array(input_grid)\n    n = len(input_array) # Should be 12 based on examples\n    \n    # 1. Create a new output sequence of 12 zeros.\n    output_grid = np.zeros_like(input_array)\n\n    # 2. Find the index of the first non-zero element, its value, and block length.\n    block_details = find_non_zero_block(input_array)\n\n    # If no block is found (or constraints violated), return the sequence of zeros.\n    if block_details is None or block_details[0] is None:\n        return output_grid\n        \n    start_index, block_value, block_length = block_details\n    \n    # 5. Calculate the target start index for the block in the output sequence.\n    new_start_index = start_index - 3\n\n    # 6. Iterate through the block length and place elements in the output grid.\n    for i in range(block_length):\n        # a. Calculate the target index in the output sequence.\n        output_index = new_start_index + i\n        \n        # b. If target_index is within the valid range, place the value.\n        #    Elements shifted beyond index 0 (output_index < 0) are ignored.\n        if 0 <= output_index < n:\n            output_grid[output_index] = block_value\n\n    # 7. Return the modified output sequence.\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7070,
    "candidates_token_count": 1289,
    "total_token_count": 8359,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.597007,
  "retries": 1
}