{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input sequence (potentially a 1D list, 1D NumPy array, or 2D (1, N) NumPy array of 12 integers) by identifying the first contiguous block of a single non-zero digit and shifting this block three positions to the left. The space vacated by the shift is filled with zeros, and elements shifted beyond the left boundary (index < 0) are discarded. The digit value and length of the block are preserved.\n\"\"\"\n\nimport numpy as np\n\n# Helper function to find the non-zero block\ndef find_non_zero_block(sequence):\n    \"\"\"\n    Finds the first contiguous block of a non-zero digit in a 1D sequence.\n\n    Args:\n        sequence: A 1D list or numpy array of integers.\n\n    Returns:\n        A tuple (digit, start_index, length) if a block is found,\n        otherwise (None, -1, 0). Returns (None, -1, 0) if sequence is empty or None.\n    \"\"\"\n    if sequence is None or len(sequence) == 0: # Handle empty or None sequence case\n        return None, -1, 0\n        \n    start_index = -1\n    digit = None\n    length = 0\n    n = len(sequence)\n\n    # Iterate through the sequence to find the start of the block\n    for i in range(n):\n        current_val = sequence[i]\n        # Check if the element is non-zero \n        # (explicitly convert to standard int for comparison if numpy type)\n        if int(current_val) != 0: \n            # Found the first non-zero digit\n            digit = int(current_val) # Store as standard int\n            start_index = i\n            length = 1\n            # Count the length of the contiguous block of the same digit\n            for j in range(i + 1, n):\n                if int(sequence[j]) == digit: # Compare as standard ints\n                    length += 1\n                else:\n                    break # End of the block\n            # Block found and measured, exit the outer loop\n            break\n        \n    return digit, start_index, length\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the block-shifting transformation to the input sequence/grid.\n\n    Args:\n        input_grid: A list, 1D NumPy array, or 2D NumPy array (shape (1, 12)) \n                    of 12 integers.\n\n    Returns:\n        A 1D NumPy array of 12 integers representing the transformed sequence.\n    \"\"\"\n    \n    # 1. Handle Input Format: Ensure we have a 1D sequence\n    sequence = np.array(input_grid) # Convert to numpy array first\n    if sequence.ndim == 2 and sequence.shape[0] == 1:\n        # If it's a 2D array with one row, flatten it to 1D\n        sequence = sequence.flatten()\n    elif sequence.ndim > 1:\n        # Handle unexpected dimensions if necessary, or raise an error\n        # For now, assume valid input or flatten might work\n        sequence = sequence.flatten() # Attempt flatten for other cases too\n\n    # Check if flattening resulted in a 1D array\n    if sequence.ndim != 1:\n         raise ValueError(f\"Input could not be converted to a 1D sequence. Shape was {input_grid.shape if hasattr(input_grid, 'shape') else 'N/A'}\")\n\n    # 2. Get Sequence Length\n    n = len(sequence)\n    if n == 0:\n        return np.array([], dtype=int) # Handle empty sequence case\n\n    # Ensure length is 12 as per problem description (optional but good practice)\n    # if n != 12:\n    #    print(f\"Warning: Input sequence length is {n}, expected 12.\")\n        # Decide how to handle: error, pad, truncate, or proceed? \n        # Proceeding for now.\n\n    # 3. Initialize Output Sequence\n    output_sequence = np.zeros(n, dtype=int) \n\n    # 4. Find the Non-Zero Block\n    digit, start_index, length = find_non_zero_block(sequence)\n\n    # 5. Shift Block if Found\n    if start_index != -1: # Check if a block was actually found\n        # a. Calculate the new starting index (shift left by 3)\n        shift_amount = -3\n        new_start_index = start_index + shift_amount\n\n        # b. Copy the block to the output sequence at the new position\n        for i in range(length):\n            # Calculate the target index in the output sequence\n            target_index = new_start_index + i\n\n            # Check if the target index is within the valid bounds (0 to n-1)\n            if 0 <= target_index < n:\n                # Place the digit at the valid target index\n                output_sequence[target_index] = digit\n\n    # 6. Return the constructed output sequence\n    return output_sequence\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8047,
    "candidates_token_count": 1642,
    "total_token_count": 9689,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.640638,
  "retries": 1
}