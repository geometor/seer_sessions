{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input sequence (list or NumPy array of 12 integers) by identifying the first contiguous block of a single non-zero digit and shifting this block three positions to the left. The space vacated by the shift is filled with zeros, and elements shifted beyond the left boundary (index < 0) are discarded. The digit value and length of the block are preserved.\n\"\"\"\n\nimport numpy as np\n\n# Helper function to find the non-zero block\ndef find_non_zero_block(sequence):\n    \"\"\"\n    Finds the first contiguous block of a non-zero digit in a sequence.\n\n    Args:\n        sequence: A list or 1D numpy array of integers.\n\n    Returns:\n        A tuple (digit, start_index, length) if a block is found,\n        otherwise (None, -1, 0). Returns (None, -1, 0) if sequence is empty.\n    \"\"\"\n    if sequence is None or len(sequence) == 0: # Handle empty or None sequence case\n        return None, -1, 0\n        \n    start_index = -1\n    digit = None\n    length = 0\n    n = len(sequence)\n\n    # Iterate through the sequence to find the start of the block\n    for i in range(n):\n        # Check if the element is non-zero (and handles potential numpy types)\n        current_val = sequence[i]\n        if current_val != 0:\n            # Found the first non-zero digit\n            digit = current_val\n            start_index = i\n            length = 1\n            # Count the length of the contiguous block of the same digit\n            for j in range(i + 1, n):\n                if sequence[j] == digit:\n                    length += 1\n                else:\n                    break # End of the block\n            # Block found and measured, exit the outer loop\n            break\n\n    # Convert numpy number types to standard Python types if necessary for consistency\n    if isinstance(digit, np.integer):\n        digit = int(digit)\n        \n    return digit, start_index, length\n\ndef transform(input_sequence):\n    \"\"\"\n    Applies the block-shifting transformation to a 1D sequence.\n\n    Args:\n        input_sequence: A list or 1D NumPy array of 12 integers.\n\n    Returns:\n        A 1D NumPy array of 12 integers representing the transformed sequence.\n    \"\"\"\n    # Determine the length of the sequence\n    # Assuming input is always length 12 based on examples, but using len for robustness\n    n = len(input_sequence)\n    if n == 0:\n        return np.array([]) # Handle empty input case\n\n    # Initialize the output sequence with zeros, same length as input\n    # Use numpy array for output as it's common in such tasks and matches potential input type\n    output_sequence = np.zeros(n, dtype=int) \n\n    # Find the details (digit, start index, length) of the non-zero block\n    digit, start_index, length = find_non_zero_block(input_sequence)\n\n    # Proceed only if a non-zero block was actually found\n    if start_index != -1:\n        # Calculate the target starting position for the block after shifting left by 3\n        shift_amount = -3\n        new_start_index = start_index + shift_amount\n\n        # Copy the block (digit repeated 'length' times) to the output sequence\n        # starting at the new calculated position.\n        for i in range(length):\n            # Calculate the index in the output sequence for the current part of the block\n            current_output_index = new_start_index + i\n            \n            # Ensure the placement index is within the valid bounds of the output sequence (0 to n-1)\n            # This handles cases where the shifted block partially or fully goes off the left edge.\n            if 0 <= current_output_index < n:\n                output_sequence[current_output_index] = digit\n\n    # Return the newly constructed output sequence as a NumPy array\n    return output_sequence\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 9734,
    "candidates_token_count": 1397,
    "total_token_count": 11131,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.505502,
  "retries": 1
}