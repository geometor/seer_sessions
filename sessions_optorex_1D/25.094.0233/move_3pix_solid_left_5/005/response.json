{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies the single contiguous rectangular block of a non-zero digit in the 2D \ninput NumPy array (input_grid). Creates a new grid of the same shape and dtype, \ninitialized with zeros. Places the identified block into the new grid, shifted \nby (0 rows, -3 columns) relative to its input position, ensuring the starting \ncolumn is not less than 0. Returns the transformed grid (output_grid).\n\"\"\"\n\nimport numpy as np\n\ndef find_non_zero_block_info(grid: np.ndarray):\n    \"\"\"\n    Finds the properties of the first contiguous rectangular block of \n    non-zero digits in a 2D grid.\n\n    Args:\n        grid: The 2D NumPy array to search within.\n\n    Returns:\n        A dictionary containing block properties:\n        'value': The non-zero digit value.\n        'row': The starting row index (top).\n        'col': The starting column index (left).\n        'height': The height of the block.\n        'width': The width of the block.\n        Returns None if no non-zero block is found.\n    \"\"\"\n    # Find coordinates of all non-zero elements\n    non_zeros = np.argwhere(grid != 0)\n    \n    # Handle empty grid or grid with only zeros\n    if non_zeros.size == 0:\n        return None\n\n    # Determine the bounding box of the non-zero elements\n    min_row, min_col = non_zeros.min(axis=0)\n    max_row, max_col = non_zeros.max(axis=0)\n    \n    # Extract block properties\n    value = grid[min_row, min_col] # Value from top-left corner\n    height = max_row - min_row + 1\n    width = max_col - min_col + 1\n    \n    return {'value': value, 'row': min_row, 'col': min_col, 'height': height, 'width': width}\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Transforms the input grid by shifting the non-zero block left by 3 columns.\n\n    Args:\n        input_grid: The 2D NumPy array containing the input grid.\n\n    Returns:\n        A new 2D NumPy array representing the transformed grid.\n    \"\"\"\n    # 1. Determine the shape and data type of the input_grid.\n    shape = input_grid.shape\n    dtype = input_grid.dtype\n\n    # 2. Create a new 2D NumPy array (output_grid) with the same shape and \n    #    data type as input_grid, initialized entirely with zeros.\n    output_grid = np.zeros(shape, dtype=dtype)\n\n    # 3. Identify the location, size, and value of the non-zero block.\n    block_info = find_non_zero_block_info(input_grid)\n\n    # 4. If a block was found, calculate its new position and place it.\n    if block_info:\n        r_in = block_info['row']\n        c_in = block_info['col']\n        h = block_info['height']\n        w = block_info['width']\n        v = block_info['value']\n\n        # 5. Calculate the target top-left row (r_out) and column (c_out).\n        #    Row remains the same. Column is shifted left by 3, clamped at 0.\n        r_out = r_in\n        c_out = max(0, c_in - 3)\n\n        # 6. Copy the identified block into the output_grid at the new location.\n        #    Ensure slicing doesn't go out of bounds (though width/height \n        #    should be preserved, the shifted column might affect this).\n        #    Recalculate end indices based on clamped start and original dimensions.\n        end_row = r_out + h\n        end_col = c_out + w\n        \n        # Ensure slice indices stay within grid bounds\n        actual_end_row = min(shape[0], end_row)\n        actual_end_col = min(shape[1], end_col)\n        \n        # Extract the original block (or the part that fits if shifted off-edge)\n        # This assumes the block itself doesn't change shape/content.\n        # We just need its value to fill the target area.\n        output_grid[r_out:actual_end_row, c_out:actual_end_col] = v \n\n    # 7. Return the output_grid.\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7845,
    "candidates_token_count": 1565,
    "total_token_count": 9410,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.165166,
  "retries": 1
}