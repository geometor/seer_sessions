{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentify the contiguous block of identical non-zero digits in the input NumPy array.\nShift this block 3 positions to the left to create the output array. \nIf shifting left would result in a start index less than 0, the block starts at index 0. \nThe length and data type of the array, as well as the composition (non-zero digit value, \nblock length, number of zeros) are preserved.\n\"\"\"\n\nimport numpy as np\n\ndef find_non_zero_block_np(data):\n    \"\"\"\n    Finds the first contiguous block of identical non-zero digits in a 1D NumPy array.\n\n    Args:\n        data: A 1D NumPy array of integers.\n\n    Returns:\n        A tuple containing:\n        - The non-zero digit value (int).\n        - The length of the block (int).\n        - The starting index of the block (int).\n        Returns (None, 0, -1) if no non-zero block is found or the array is empty/None.\n    \"\"\"\n    # Handle empty, None, or all-zero arrays\n    if data is None or len(data) == 0 or np.all(data == 0):\n        return None, 0, -1\n\n    start_index = -1\n    block_value = None\n    length = 0\n    \n    # Find changes in the array to identify potential block boundaries\n    # Pad with 0 at start/end to catch blocks at edges\n    padded_data = np.concatenate(([0], data, [0])) \n    diff = np.diff(padded_data)\n    starts = np.where(diff > 0)[0] # Indices in original data where a block might start\n    ends = np.where(diff < 0)[0]   # Indices in original data where a block might end\n\n    # Iterate through potential blocks to find the first non-zero one\n    for s, e in zip(starts, ends):\n        if data[s] != 0: # Found the first non-zero block\n            block_value = data[s]\n            length = e - s\n            start_index = s\n            break # Assume only one block per sequence based on examples\n            \n    # Check if a block was actually found (safeguard)\n    if block_value is None: \n         return None, 0, -1\n         \n    return block_value, int(length), int(start_index) # Return standard int types\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Transforms the input 1D NumPy array by shifting the non-zero block left by 3 positions.\n\n    Args:\n        input_grid: A 1D NumPy array of integers.\n\n    Returns:\n        A new 1D NumPy array representing the transformed sequence.\n    \"\"\"\n    # Get the size and data type of the input array\n    n = len(input_grid)\n    dtype = input_grid.dtype \n\n    # Find the non-zero block in the input\n    block_value, block_length, start_index_input = find_non_zero_block_np(input_grid)\n\n    # Initialize output_grid with zeros, matching input size and type\n    output_grid = np.zeros(n, dtype=dtype)\n\n    # If a non-zero block was found, place it in the output grid\n    if block_value is not None:\n        # Calculate the target starting index, ensuring it's not negative\n        start_index_output = max(0, start_index_input - 3)\n        \n        # Calculate the end index for slicing, ensuring it doesn't exceed array bounds\n        end_index_output = min(n, start_index_output + block_length)\n        \n        # Place the block into the output grid\n        output_grid[start_index_output:end_index_output] = block_value\n\n    # Return the transformed grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6507,
    "candidates_token_count": 1085,
    "total_token_count": 7592,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.332491,
  "retries": 1
}