objects:
  - name: input_data
    type: string
    properties:
      - format: Represents a list of integers, enclosed in '[]', with elements separated by single spaces.
      - example: '[7 0 1 7 8 7 6 5 3 4 4 2]'
      - element_count: 12
      - element_type: single digits (0-9) represented as strings after parsing.
  - name: output_data
    type: string
    properties:
      - format: Space-separated sequence of digits.
      - example: '4 4 2 7 0 1 7 8 7 6 5 3'
      - element_count: 12
      - element_type: single digits (0-9) represented as strings.

relationships:
  - type: transformation
    from: input_data (parsed)
    to: output_data
    details: The output sequence is formed by rearranging the elements of the parsed input sequence.

actions:
  - name: parse_input_string
    actor: transformation_rule
    input: input_data (string)
    output: parsed_sequence (list of strings)
    details: Remove leading '[' and trailing ']', then split the remaining string by spaces.
  - name: split_parsed_sequence
    actor: transformation_rule
    input: parsed_sequence
    output:
      - first_part: first 9 elements of parsed_sequence
      - last_part: last 3 elements of parsed_sequence
  - name: construct_output_sequence
    actor: transformation_rule
    input:
      - first_part
      - last_part
    output: reordered_sequence (list of strings)
    details: Concatenate last_part followed by first_part.
  - name: format_output_string
    actor: transformation_rule
    input: reordered_sequence
    output: output_data (string)
    details: Join the elements of the reordered_sequence with single spaces.

derived_facts:
  - The count of each distinct digit is identical between the parsed input and the output string.
  - The transformation implements a cyclic rotation where the last 3 elements are moved to the beginning.
  - The input processing step (parsing the bracketed string) is crucial before applying the core logic.