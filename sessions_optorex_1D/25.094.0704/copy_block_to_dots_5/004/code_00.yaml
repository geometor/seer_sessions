task_description: Transform a sequence of 12 digits, represented as a space-separated string, by expanding occurrences of the primary non-zero digit.
input_format: A single string containing 12 integers separated by single spaces.
output_format: A single string containing 12 integers separated by single spaces, representing the transformed sequence.
elements:
  - input_string:
      type: str
      description: The raw input string (e.g., "1 1 1 0 0 0 0 0 0 1 0 0").
  - input_list:
      type: List[int]
      length: 12
      source: Derived by splitting input_string by spaces and converting elements to integers.
  - output_list:
      type: List[int]
      length: 12
      initial_state: Created as a direct copy of input_list.
      final_state: Potentially modified by the replacement action.
  - active_digit:
      type: int
      property: non-zero
      source: The first non-zero integer found when scanning input_list from left to right.
      role: Value used for replacement and the trigger condition for replacement.
      constraints: Assumed to exist in valid inputs (though handling all-zeros is good practice).
  - trigger_index:
      type: int
      range: 3 to 10 (inclusive)
      condition: The element input_list[trigger_index] must equal active_digit.
      role: The location in input_list that initiates a replacement action.
  - replacement_indices:
      type: List[int]
      values: [trigger_index - 1, trigger_index, trigger_index + 1]
      role: Specifies the indices in output_list that will be modified.
actions:
  - parse_input:
      input: input_string
      output: input_list
      method: Split string by space, convert each part to integer. Validate length is 12.
  - initialize_output:
      input: input_list
      output: output_list
      method: Create a shallow copy.
  - find_active_digit:
      input: input_list
      output: active_digit
      method: Iterate through input_list, return the first non-zero element. Handle case where none exists.
  - scan_and_replace:
      inputs: input_list, output_list, active_digit
      modifies: output_list
      method: Iterate with index 'i' from 3 to 10. If input_list[i] == active_digit, set output_list[i-1], output_list[i], output_list[i+1] to active_digit. Crucially, the check always refers to the original input_list, while modifications apply to output_list.
  - format_output:
      input: output_list
      output: string
      method: Convert each integer in output_list to string, join with single spaces.
transformation_summary:
  - Parse the input string into a list.
  - Copy the list for the output.
  - Find the first non-zero digit ('active').
  - If an active digit exists, check indices 3 through 10 of the *input* list.
  - If the input list element at index 'i' matches the active digit, set the elements at indices 'i-1', 'i', and 'i+1' of the *output* list to the active digit.
  - Convert the final output list back to a space-separated string.