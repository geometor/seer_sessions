task_description: "Shift a block of numbers within a sequence represented by a NumPy array by inserting a zero before the first non-zero element and removing the last element."
elements:
  - type: sequence
    properties:
      - content: list of single digits (0-9)
      - length: fixed (12 in examples)
      - structure: ordered
      - representation: 1D NumPy array of integers
  - type: digit
    properties:
      - value: 0-9
      - significance: zero vs. non-zero
actions:
  - name: convert_numpy_to_list
    input: input NumPy array
    output: Python list of integers
  - name: identify_first_non_zero_index
    input: list of integers
    output: index (integer) or indicator of none found
  - name: insert_zero
    target: list of integers
    position: immediately before the index identified by 'identify_first_non_zero_index'
  - name: remove_last_element
    target: modified list (after insertion)
    position: the final element
  - name: convert_list_to_string
    input: list of integers
    output: space-separated string of digits
transformation_rule:
  condition: "If the input sequence contains at least one non-zero digit."
  steps:
    - Convert the input NumPy array to a Python list.
    - Find the index of the first non-zero digit (`first_nz_idx`) in the list.
    - Insert the integer `0` into the list at `first_nz_idx`.
    - Remove the last element from the resulting list to maintain original length.
    - Convert the modified list back into a space-separated string.
  fallback: "If the input sequence contains only zeros, convert the original list to a space-separated string and return it."
invariants:
  - The length of the output sequence (when represented as a list or array) is the same as the length of the input sequence.
  - The relative order of digits within the block starting from the original first non-zero digit is preserved in the shifted block.
  - The number of elements in the output string matches the number of elements in the input array.