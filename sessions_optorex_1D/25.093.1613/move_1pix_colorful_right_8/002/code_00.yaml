task_elements:
  - item: input_sequence
    type: list  # Changed from string based on error
    subtype: integer
    properties:
      - length: fixed (e.g., 12 in examples)
      - elements: single digits (0-9)
  - item: output_sequence
    type: list # Changed from string based on error
    subtype: integer
    properties:
      - length: same as input_sequence
      - elements: single digits (0-9)
  - item: active_subsequence
    type: sublist
    derivation: determined by the span from the first non-zero element to the last non-zero element in the input_sequence.
    properties:
      - includes all elements within its start and end indices, including any zeros.
      - If the input_sequence contains only zeros, this subsequence is considered empty or non-existent.
relationships:
  - input_sequence contains the active_subsequence.
  - output_sequence is derived from the input_sequence by shifting the active_subsequence.
actions:
  - identify: find the start index (`first_nz`) and end index (`last_nz`) of the active_subsequence in the input_sequence.
  - check_existence: determine if an active_subsequence exists (i.e., `first_nz` is not -1).
  - create_output: initialize a new list of the same size as the input_sequence, typically filled with zeros.
  - copy_prefix: copy elements from the input_sequence before `first_nz` to the output_sequence at the same indices.
  - shift_subsequence: copy elements from the input_sequence from `first_nz` to `last_nz` into the output_sequence, starting at index `first_nz + 1` and ensuring not to exceed list bounds.
  - preserve_unchanged: if no active_subsequence exists, the output_sequence is identical to the input_sequence.
transformation:
  - condition: If an active_subsequence exists (`first_nz != -1`).
    steps:
      - Locate the index of the first non-zero element (`first_nz`).
      - Locate the index of the last non-zero element (`last_nz`).
      - Create an output list (`output_sequence`) of the same length as the input, initialized with zeros.
      - Copy elements from `input_sequence[0]` up to `input_sequence[first_nz - 1]` to `output_sequence` at the same indices (indices 0 to `first_nz - 1`).
      - Copy elements from `input_sequence[first_nz]` up to `input_sequence[last_nz]` to `output_sequence`, starting at index `first_nz + 1` and ending at index `last_nz + 1`. Handle boundary conditions (do not write past the end of `output_sequence`).
  - condition: If no active_subsequence exists (`first_nz == -1`).
    steps:
      - The output_sequence is a copy of the input_sequence.
