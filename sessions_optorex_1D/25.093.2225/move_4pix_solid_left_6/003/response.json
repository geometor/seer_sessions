{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nAccept an input sequence (list or array) of 12 integers.\nIdentify the contiguous block of identical non-zero digits within the input sequence. \nDetermine its integer value, its starting index, and its length. Assume there is exactly one such block.\nCalculate the target starting index for this block in the output sequence by subtracting 4 from its original starting index.\nCreate a new output sequence of the same length (12), initialized entirely with zeros.\nPlace the identified non-zero block (using its value and length) into the output sequence, starting at the calculated target starting index. \nReturn the resulting output sequence.\n\"\"\"\n\ndef _find_non_zero_block(int_list):\n    \"\"\"\n    Finds the start index, value, and length of the first contiguous non-zero block \n    in a list of integers. Returns None if no non-zero block is found.\n    \"\"\"\n    start_index = -1\n    value = 0\n    length = 0\n    in_block = False\n    for i, digit in enumerate(int_list):\n        if digit != 0 and not in_block:\n            # Start of a new non-zero block\n            start_index = i\n            value = digit\n            length = 1\n            in_block = True\n        elif digit == value and in_block:\n            # Continuing the current block\n            length += 1\n        elif digit != value and in_block:\n            # End of the block (since we assume only one block)\n            break \n            \n    if start_index == -1: # No non-zero block found\n        return None\n        \n    return {'value': value, 'start': start_index, 'length': length}\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Shifts the first contiguous block of identical non-zero digits 4 positions \n    to the left within a sequence (represented as a NumPy array), \n    filling other positions with zero.\n    \"\"\"\n    \n    # Determine the size of the input sequence\n    n = len(input_grid)\n    \n    # Initialize the output grid with zeros, matching the input size and type\n    output_grid = np.zeros_like(input_grid)\n    \n    # Convert NumPy array to list to easily find the block using the helper function\n    # (Alternatively, the helper could be adapted for NumPy arrays directly)\n    input_list = input_grid.tolist()\n\n    # Find the non-zero block details (value, start index, length)\n    block_info = _find_non_zero_block(input_list)\n\n    # If a non-zero block was found:\n    if block_info:\n        value = block_info['value']\n        original_start = block_info['start']\n        length = block_info['length']\n        \n        # Calculate the new starting position by shifting left by 4\n        new_start = original_start - 4\n        \n        # Place the block into the output grid at the new position\n        for i in range(length):\n            # Calculate the target index in the output grid\n            target_idx = new_start + i\n            \n            # Ensure the target index is within the valid bounds of the grid\n            if 0 <= target_idx < n: \n                 output_grid[target_idx] = value\n\n    # Return the modified grid containing the shifted block\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7090,
    "candidates_token_count": 1258,
    "total_token_count": 8348,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.873548,
  "retries": 1
}