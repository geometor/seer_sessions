task_elements:
  - type: sequence
    description: A sequence of digits, represented as a 1D NumPy array.
    properties:
      length: 12 (constant across examples)
      elements: Single integers (0-9)
      dtype: integer
  - type: object
    description: A single contiguous block of identical non-zero digits within the input sequence.
    properties:
      value: The non-zero integer digit composing the block.
      start_index: The 0-based index where the block begins in the input sequence.
      length: The number of digits in the block.
  - type: background
    description: The integer digit '0' which fills the space around the non-zero block.
transformation:
  action: shift_left
  object: non-zero block
  parameter:
    amount: 4 positions
  result:
    description: The identified non-zero block is moved 4 positions earlier (left) in the sequence.
    post_action: Create a new sequence of the same length, initialized with the background digit '0'. Place the shifted block into this new sequence at the calculated starting position. Positions not occupied by the shifted block remain '0'.
relationship:
  - The output sequence is generated by finding the single contiguous block of identical non-zero digits in the input sequence, calculating its new starting position by subtracting 4 from its original starting position, and constructing a new sequence containing this block at the new position, padded with zeros elsewhere.
issue_tracking:
  - description: The provided Python implementation (`code_00.py`) fails to produce the expected output, instead returning an all-zero sequence for all examples.
  - verification: The helper function `_find_non_zero_block` correctly identifies the block properties (value, start, length) for all training inputs.
  - hypothesis: The error likely lies in the array modification step within the `transform` function (populating the `output_grid`) or in how the array is handled/returned by the execution environment.