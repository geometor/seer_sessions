{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies a single contiguous block of identical non-zero digits within an input sequence of 12 integers. Shifts this block 4 positions to the left, placing it into an output sequence of the same length (12) initialized with zeros. Positions outside the shifted block remain zero. Elements are only placed within the valid bounds (0-11) of the output sequence.\n\"\"\"\n\nimport math # Although not strictly needed for this version, good practice\n# import numpy as np # Could be used if input_grid is specifically a numpy array\n\ndef find_object(sequence):\n    \"\"\"\n    Finds the first contiguous block of identical non-zero digits.\n\n    Args:\n        sequence: A list or array of integers.\n\n    Returns:\n        A tuple (value, start_index, length) if an object is found,\n        otherwise (None, -1, 0).\n    \"\"\"\n    start_index = -1\n    value = None\n    length = 0\n\n    for i, digit in enumerate(sequence):\n        if start_index == -1:\n            # Look for the start of a potential block\n            if digit != 0:\n                start_index = i\n                value = digit\n                length = 1\n        else:\n            # We are inside a potential block\n            if digit == value:\n                # Continue the block\n                length += 1\n            else:\n                # Block ended before the end of the sequence\n                return value, start_index, length\n\n    # Check if the block ended exactly at the end of the sequence\n    if start_index != -1:\n        return value, start_index, length\n\n    # No non-zero block found or sequence was empty/all zeros\n    return None, -1, 0\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input sequence by shifting the non-zero block left by 4 positions.\n\n    Args:\n        input_grid: A list or array of 12 integers.\n\n    Returns:\n        A list of 12 integers representing the transformed sequence.\n    \"\"\"\n    # Ensure input is treated as a list (handles numpy arrays too)\n    input_list = list(input_grid)\n    n = len(input_list)\n\n    # Initialize the output grid (list) with zeros\n    output_grid = [0] * n\n\n    # 1. Identify the contiguous block of identical non-zero numbers\n    value, start_index, length = find_object(input_list)\n\n    # 2. If an object was found, proceed with transformation\n    if value is not None:\n        # 3. Calculate the new starting position (shift left by 4)\n        new_start_index = start_index - 4\n\n        # 4. Place the object into the output list at the new position\n        # Iterate through the length of the identified block\n        for i in range(length):\n            # Calculate the target index in the output grid for the current element of the block\n            target_index = new_start_index + i\n\n            # 5. Ensure the target index is within the valid bounds of the output grid (0 to n-1)\n            if 0 <= target_index < n:\n                # Place the block's value at the valid target index\n                output_grid[target_index] = value\n\n    # Return the transformed grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4451,
    "candidates_token_count": 1176,
    "total_token_count": 5627,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.846599,
  "retries": 1
}