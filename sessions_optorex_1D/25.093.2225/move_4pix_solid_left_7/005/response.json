{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np # Although not strictly necessary for this version, kept for consistency if needed later\n\n\"\"\"\nTransforms an input sequence of 12 integers by finding the single contiguous block \nof identical non-zero integers and shifting this block 4 positions to the left. \nPositions in the output sequence are filled with zeros initially, and then \npopulated by the shifted block values where applicable within the sequence boundaries.\n\"\"\"\n\ndef find_nonzero_block(sequence):\n    \"\"\"\n    Finds the first contiguous block of identical non-zero integers in the sequence.\n\n    Args:\n        sequence: A list of integers.\n\n    Returns:\n        A tuple containing:\n        - value (int): The non-zero value of the block (or 0 if no block found).\n        - start_index (int): The starting index of the block (-1 if no block found).\n        - length (int): The length of the block (0 if no block found).\n    \"\"\"\n    start_index = -1\n    value = 0\n    length = 0\n    n = len(sequence)\n\n    for i in range(n):\n        # Find the start of a potential block\n        if sequence[i] != 0 and start_index == -1:\n            start_index = i\n            value = sequence[i]\n            length = 1 # Start counting length\n        # If we've found the start, check if the block continues\n        elif start_index != -1:\n            if sequence[i] == value:\n                length += 1 # Increment length\n            else:\n                # Block ends here (either different non-zero or zero)\n                break # Exit loop once the contiguous block ends\n\n    # Handle edge case where block goes to the very end\n    # (The loop naturally terminates, length is correct)\n\n    # If no block was found (start_index remained -1), return defaults\n    if start_index == -1:\n        return 0, -1, 0\n        \n    return value, start_index, length\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the left-shift transformation to the input sequence.\n\n    Args:\n        input_grid: A list of 12 integers representing the input sequence.\n\n    Returns:\n        A list of 12 integers representing the transformed output sequence.\n    \"\"\"\n    sequence_length = len(input_grid) # Should be 12 based on examples\n\n    # 1. Initialize Output: Create a new sequence of 12 zeros.\n    output_grid = [0] * sequence_length\n\n    # 2. Identify Block: Find the non-zero block details.\n    block_value, start_index, block_length = find_nonzero_block(input_grid)\n\n    # Proceed only if a valid block was found\n    if start_index != -1:\n        # 3. Calculate New Position: Determine the target starting index.\n        new_start_index = start_index - 4\n\n        # 4. Place Block: Populate the output grid with the shifted block.\n        for i in range(block_length):\n            # Calculate the target index for this element of the block\n            target_idx = new_start_index + i\n\n            # Check if the target index is within the bounds of the output grid\n            if 0 <= target_idx < sequence_length:\n                # Place the block's value at the valid target index\n                output_grid[target_idx] = block_value\n\n    # 5. Finalize: Return the constructed output grid.\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7635,
    "candidates_token_count": 1183,
    "total_token_count": 8818,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.719834,
  "retries": 1
}