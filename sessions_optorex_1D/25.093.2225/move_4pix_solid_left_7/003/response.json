{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransforms an input sequence (list or array of 12 integers) by identifying the \nsingle contiguous block of identical non-zero integers and shifting this block \n4 positions to the left. Positions outside the shifted block in the output \nsequence are filled with zeros. Parts of the block shifted beyond the left \nboundary (index < 0) are discarded.\n\"\"\"\n\ndef find_nonzero_block(sequence):\n    \"\"\"\n    Finds the first contiguous block of identical non-zero integers in the sequence.\n\n    Args:\n        sequence: A list or NumPy array of integers.\n\n    Returns:\n        A tuple containing:\n        - value (int): The non-zero value of the block (or 0 if no block found).\n        - start_index (int): The starting index of the block (-1 if no block found).\n        - length (int): The length of the block (0 if no block found).\n    \"\"\"\n    # Convert to NumPy array for efficient searching if it's not already one\n    arr = np.array(sequence)\n    \n    # Find indices of all non-zero elements\n    non_zero_indices = np.where(arr != 0)[0]\n\n    # If no non-zero elements, return defaults\n    if len(non_zero_indices) == 0:\n        return 0, -1, 0\n\n    # Identify the start index and value of the first non-zero element\n    start_index = non_zero_indices[0]\n    value = arr[start_index]\n    length = 0\n\n    # Determine the length of the contiguous block starting from start_index\n    for i in range(start_index, len(arr)):\n        if arr[i] == value:\n            length += 1\n        else:\n            # Stop counting when the value changes or a zero is encountered\n            break\n            \n    # Basic validation: ensure all found non-zeros belong to this single block\n    # This check might be redundant given the problem's constraints but adds robustness.\n    if len(non_zero_indices) != length or not np.all(arr[start_index : start_index + length] == value):\n         # This case shouldn't happen based on the examples, but good to note.\n         # We'll proceed with the found block based on the first non-zero element.\n         pass \n\n    return value, start_index, length\n\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the left-shift transformation to the input sequence.\n\n    Args:\n        input_grid: A list or array of 12 integers representing the input sequence.\n\n    Returns:\n        A list of 12 integers representing the transformed output sequence.\n    \"\"\"\n    # Ensure input is a NumPy array for processing\n    input_array = np.array(input_grid)\n    sequence_length = len(input_array)\n\n    # 1. Initialize an output sequence of the correct length with zeros.\n    output_grid = np.zeros(sequence_length, dtype=int)\n\n    # 2. Find the non-zero block in the input sequence.\n    block_value, start_index, block_length = find_nonzero_block(input_array)\n\n    # 3. If a block was found, proceed with the shift.\n    if start_index != -1:\n        # 4. Calculate the target start index in the output sequence.\n        new_start_index = start_index - 4\n\n        # 5. Place the block into the output sequence at the new position.\n        # Iterate through each position of the block.\n        for i in range(block_length):\n            # Calculate the index where this part of the block should go in the output.\n            output_index = new_start_index + i\n\n            # Check if the calculated output index is within the valid bounds (0 to sequence_length-1).\n            if 0 <= output_index < sequence_length:\n                # If valid, place the block's value at this position in the output grid.\n                output_grid[output_index] = block_value\n\n    # Convert the NumPy array back to a standard Python list for the return value.\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5835,
    "candidates_token_count": 1298,
    "total_token_count": 7133,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.591817,
  "retries": 1
}