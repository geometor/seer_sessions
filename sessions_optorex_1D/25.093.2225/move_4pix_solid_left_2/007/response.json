{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nIdentifies a single contiguous block of identical non-zero integers within a 12-element input sequence (list or numpy array). \nShifts this block 4 positions to the left, ensuring the starting index does not go below 0. \nReturns a new 12-element numpy array with the shifted block, padding the remaining positions with zeros.\n\"\"\"\n\ndef _find_non_zero_block(data: np.ndarray) -> tuple[int | None, int, int]:\n    \"\"\"\n    Finds the first contiguous block of identical non-zero integers.\n\n    Args:\n        data: The input sequence as a numpy array.\n\n    Returns:\n        A tuple containing:\n        - The non-zero integer composing the block (or None if no block found).\n        - The length (count) of the block.\n        - The starting index of the block.\n        Returns (None, 0, -1) if no non-zero block is found.\n    \"\"\"\n    start_index = -1\n    block_digit = None\n    block_length = 0\n    n = len(data)\n\n    for i in range(n):\n        # Ensure comparison with standard python int if data is numpy type\n        current_digit = int(data[i])\n\n        if current_digit != 0:\n            # Found a non-zero digit\n            if block_digit is None:\n                # This is the start of the first block found\n                block_digit = current_digit\n                start_index = i\n                block_length = 1\n            elif current_digit == block_digit:\n                # This digit continues the current block\n                block_length += 1\n            else:\n                # Found a non-zero digit different from the current block\n                # Since the assumption is only one block exists, we stop here.\n                break\n        elif block_digit is not None:\n            # Found a zero after a block was started, indicating the end of the block\n            break\n\n    # After loop, return findings\n    if block_digit is None:\n        return None, 0, -1 # No non-zero block found\n\n    return block_digit, block_length, start_index\n\n\ndef transform(input_grid) -> np.ndarray:\n    \"\"\"\n    Applies the block shifting transformation to the input sequence.\n\n    Args:\n        input_grid: The input sequence (list or numpy array of 12 integers).\n\n    Returns:\n        A numpy array representing the transformed sequence.\n    \"\"\"\n    # Ensure input is a numpy array and get its length\n    input_sequence = np.array(input_grid, dtype=int)\n    n = len(input_sequence)\n\n    # Define expected length (could be parameterised if needed)\n    expected_length = 12\n    if n != expected_length:\n        # Handle unexpected length - returning an empty or zero array might be safest\n        # For this specific task, we assume length is always 12 based on examples.\n        # Initialize output based on actual length found, but this deviates from spec.\n        # Sticking to 12 based on examples:\n        n = expected_length\n\n\n    # Initialize output grid with zeros\n    output_grid = np.zeros(n, dtype=int)\n\n    # Find the non-zero block in the input sequence\n    block_digit, block_length, start_index = _find_non_zero_block(input_sequence)\n\n    # Proceed only if a valid block was found\n    if block_digit is not None:\n        # Calculate the target starting index for the block in the output grid\n        # Shift left by 4 positions, clamping at index 0\n        shift_amount = 4\n        target_start_index = max(0, start_index - shift_amount)\n\n        # Place the block into the output grid\n        # Iterate for the length of the block\n        for i in range(block_length):\n            # Calculate the current index in the output grid\n            current_output_index = target_start_index + i\n            # Check if the index is within the bounds of the output grid\n            if current_output_index < n:\n                # Assign the block's digit to the position\n                output_grid[current_output_index] = block_digit\n            else:\n                # Stop if the block exceeds the grid bounds\n                break\n\n    # Return the newly created output grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 10244,
    "candidates_token_count": 1461,
    "total_token_count": 11705,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.07303,
  "retries": 1
}