{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport re # Using regex to find the block might be slightly cleaner\n\n\"\"\"\nIdentifies a contiguous block of identical non-zero digits within a 12-element sequence of space-separated digits. \nShifts this block 4 positions to the left, preserving the block's digit and length. \nFills the remaining positions with zeros. \nOutputs the resulting sequence as a space-separated string.\n\"\"\"\n\ndef _parse_input(input_str: str) -> list[int]:\n    \"\"\"Converts the space-separated input string into a list of integers.\"\"\"\n    return [int(digit) for digit in input_str.split()]\n\ndef _find_non_zero_block(data: list[int]) -> tuple[int | None, int, int]:\n    \"\"\"\n    Finds the first contiguous block of identical non-zero digits.\n    Returns the digit, its count (length), and the starting index.\n    Returns (None, 0, -1) if no block is found.\n    \"\"\"\n    start_index = -1\n    block_digit = None\n    block_length = 0\n\n    for i, digit in enumerate(data):\n        if digit != 0:\n            if block_digit is None: # Start of a potential block\n                block_digit = digit\n                start_index = i\n                block_length = 1\n            elif digit == block_digit: # Continuing the block\n                block_length += 1\n            else: # Found a different non-zero digit, should not happen based on examples\n                # Or end of the block if the previous was the block digit\n                if data[i-1] == block_digit:\n                    break # Found the end of the block we were tracking\n                else: # This case implies adjacent different non-zero digits, reset\n                     block_digit = digit\n                     start_index = i\n                     block_length = 1\n\n        elif block_digit is not None: # Found a zero after a block started\n            break # End of the block\n\n    if block_digit is None:\n        return None, 0, -1 # No non-zero block found\n\n    return block_digit, block_length, start_index\n\n\ndef _format_output(output_list: list[int]) -> str:\n    \"\"\"Converts the list of integers back into a space-separated string.\"\"\"\n    return \" \".join(map(str, output_list))\n\n\ndef transform(input_str: str) -> str:\n    \"\"\"\n    Transforms the input sequence by shifting the non-zero block 4 positions to the left.\n\n    Args:\n        input_str: A string representing the input sequence (e.g., \"0 0 0 0 5 5 5 0 0 0 0 0\").\n\n    Returns:\n        A string representing the transformed sequence.\n    \"\"\"\n    # 1. Read the input string and convert it into a list of 12 integers.\n    input_list = _parse_input(input_str)\n    n = len(input_list) # Should be 12 based on examples\n\n    # 2. Identify the contiguous block of identical non-zero digits.\n    block_digit, block_length, start_index = _find_non_zero_block(input_list)\n\n    # Handle case where no block is found (though not expected based on examples)\n    if block_digit is None:\n        return input_str # Or return \"0 \" * n trimmed? Stick to input format.\n\n    # 3. Create a new list of 12 integers, initializing all elements to zero.\n    output_list = [0] * n\n\n    # 4. Calculate the target starting index for the non-zero block.\n    # Subtract 4 from its starting index in the original input list.\n    # Ensure the index doesn't go below 0, although examples don't show this edge case.\n    target_start_index = max(0, start_index - 4)\n\n    # 5. Place the identified non-zero block into the new list.\n    for i in range(block_length):\n        # Check bounds to prevent errors if the shift causes overrun (unlikely with length 12 and shift 4)\n        if target_start_index + i < n:\n            output_list[target_start_index + i] = block_digit\n\n    # 6. Convert the new list of integers back into a space-separated string.\n    output_str = _format_output(output_list)\n\n    return output_str\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1538,
    "candidates_token_count": 1304,
    "total_token_count": 2842,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.616873,
  "retries": 1
}