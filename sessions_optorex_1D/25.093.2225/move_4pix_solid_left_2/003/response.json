{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np # Use numpy for potential array input/output and easier initialization\n\n\"\"\"\nIdentifies a contiguous block of identical non-zero integers within a 12-element input sequence (list or numpy array).\nShifts this block 4 positions to the left.\nReturns a new 12-element sequence (as a numpy array) with the shifted block, padding the remaining positions with zeros.\n\"\"\"\n\ndef _find_non_zero_block(data: list[int] | np.ndarray) -> tuple[int | None, int, int]:\n    \"\"\"\n    Finds the first contiguous block of identical non-zero integers.\n\n    Args:\n        data: The input sequence (list or numpy array).\n\n    Returns:\n        A tuple containing:\n        - The non-zero integer composing the block (or None if no block found).\n        - The length (count) of the block.\n        - The starting index of the block.\n        Returns (None, 0, -1) if no non-zero block is found.\n    \"\"\"\n    start_index = -1\n    block_digit = None\n    block_length = 0\n\n    for i, digit in enumerate(data):\n        # Convert numpy int types to standard python int if needed for comparison\n        current_digit = int(digit)\n\n        if current_digit != 0:\n            if block_digit is None: # Start of a potential block\n                block_digit = current_digit\n                start_index = i\n                block_length = 1\n            elif current_digit == block_digit: # Continuing the block\n                block_length += 1\n            else:\n                # Found a different non-zero digit. Since examples only show one block,\n                # assume the current block ended just before this different digit.\n                break # Found the end of the block we were tracking\n        elif block_digit is not None: # Found a zero after a block started\n            break # End of the block\n\n    if block_digit is None:\n        return None, 0, -1 # No non-zero block found\n\n    return block_digit, block_length, start_index\n\n\ndef transform(input_grid: list[int] | np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the block shifting transformation to the input sequence.\n\n    Args:\n        input_grid: The input sequence (list or numpy array of 12 integers).\n\n    Returns:\n        A numpy array representing the transformed sequence.\n    \"\"\"\n    # Ensure input is treated consistently, get length\n    input_sequence = np.array(input_grid) # Convert list to numpy array if necessary\n    n = len(input_sequence)\n    if n != 12:\n        # Handle unexpected input length if necessary, though examples are fixed at 12\n        # For now, assume length is always 12 based on provided examples.\n        pass\n\n    # 1. Identify the contiguous block of identical non-zero integers.\n    block_digit, block_length, start_index = _find_non_zero_block(input_sequence)\n\n    # 2. Initialize the output grid with zeros. Using numpy makes this easy.\n    output_grid = np.zeros(n, dtype=int)\n\n    # 3. Check if a block was actually found. If not, return the zero grid.\n    if block_digit is None:\n        return output_grid # Or maybe return input_grid? Examples imply transformation always happens. Let's stick to zeros.\n\n    # 4. Calculate the target starting index for the non-zero block.\n    # Subtract 4 from its starting index in the original input sequence.\n    # Ensure the index doesn't go below 0.\n    target_start_index = max(0, start_index - 4)\n\n    # 5. Place the identified non-zero block into the output grid.\n    # Use array slicing for efficiency if possible.\n    # Ensure the block doesn't exceed the output grid bounds.\n    end_index = min(target_start_index + block_length, n)\n    for i in range(target_start_index, end_index):\n         output_grid[i] = block_digit # Assign the block digit\n\n    # 6. Return the newly created output grid (numpy array).\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5209,
    "candidates_token_count": 2108,
    "total_token_count": 7317,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 17.773894,
  "retries": 1
}