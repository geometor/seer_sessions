{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np # Import numpy for potential array operations and type consistency\nimport collections\n\n\"\"\"\nTransforms an input sequence of 12 integers by identifying a single contiguous \nblock of identical non-zero digits and shifting this block exactly 4 positions \nto the left. Positions outside the shifted block in the output sequence are \nfilled with zeros. Elements shifted beyond the left boundary (index < 0) are discarded.\n\"\"\"\n\ndef find_non_zero_block(sequence):\n    \"\"\"\n    Finds the start index, end index, and value of the single contiguous \n    non-zero block in a sequence. Assumes exactly one such block exists.\n\n    Args:\n        sequence: A list or tuple of numbers.\n\n    Returns:\n        A tuple (start_index, end_index, block_value). \n        Returns (None, None, None) if no non-zero element is found.\n    \"\"\"\n    start_index = -1\n    end_index = -1\n    block_value = 0\n\n    # Iterate to find the first non-zero element (start of the block)\n    for i, val in enumerate(sequence):\n        # Ensure comparison works for potential numpy types by casting val if necessary\n        # or checking type, but simple comparison often works element-wise.\n        # Explicit check for non-zero is robust.\n        if val != 0:\n            start_index = i\n            block_value = val\n            break\n    \n    # If no non-zero value was found, return None tuple\n    if start_index == -1:\n        return None, None, None\n\n    # Iterate from the start index to find the end of the block\n    end_index = start_index\n    # Check elements after the start_index up to the end of the sequence\n    for i in range(start_index + 1, len(sequence)):\n        # Compare subsequent elements to the identified block_value\n        if sequence[i] == block_value:\n            end_index = i # Extend the block\n        else:\n            break # Block ends here (value changes or end of sequence)\n\n    return start_index, end_index, block_value\n\ndef transform(input_sequence):\n    \"\"\"\n    Applies the transformation rule to the input sequence.\n\n    Args:\n        input_sequence: A sequence (list, tuple, or numpy array) of 12 integers \n                       containing one contiguous block of identical non-zero digits.\n\n    Returns:\n        A new list of 12 integers representing the transformed sequence.\n    \"\"\"\n    \n    # Define constants based on the problem description\n    sequence_length = 12\n    shift_amount = 4 \n\n    # Ensure input is a standard Python list for consistent iteration/indexing\n    # This helps avoid potential issues if the input is a numpy array, \n    # especially with boolean comparisons in certain contexts.\n    input_list = list(input_sequence)\n\n    # 1. Initialize the output sequence with zeros\n    output_sequence = [0] * sequence_length\n\n    # 2. Find the non-zero block in the input sequence using the helper function\n    start_index, end_index, block_value = find_non_zero_block(input_list)\n\n    # 3. Check if a block was found (handle edge case, though examples guarantee a block)\n    if start_index is None:\n        # If no block found (e.g., all zeros), return the initialized zero sequence\n        return output_sequence \n\n    # 4. Calculate the length of the block\n    block_length = end_index - start_index + 1\n    \n    # 5. Calculate the target starting index for the block in the output sequence\n    #    Shift is 4 positions to the LEFT, so subtract the shift amount.\n    new_start_index = start_index - shift_amount\n\n    # 6. Populate the output sequence by placing the block value at the shifted positions\n    #    Iterate for the length of the block\n    for i in range(block_length):\n        # Calculate the index in the output sequence where the current element of the block should go\n        output_idx = new_start_index + i\n        \n        # Check if the calculated output index is within the valid bounds (0 to sequence_length-1)\n        # This handles cases where part of the block is shifted off the left edge.\n        if 0 <= output_idx < sequence_length:\n            # Place the block's value at the valid position in the output sequence\n            output_sequence[output_idx] = block_value\n\n    # 7. Return the completed output sequence\n    return output_sequence\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6435,
    "candidates_token_count": 1530,
    "total_token_count": 7965,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 19.591327,
  "retries": 1
}