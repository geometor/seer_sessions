{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import Tuple, Optional\n\n\"\"\"\nIdentifies the single contiguous block of identical non-zero digits within a 12-element \n1D input sequence. Creates a new sequence of 12 zeros. Shifts the identified block \n4 positions to the left and places it into the new sequence at the calculated position. \nReturns the resulting sequence, maintaining the original shape (likely 1x12 or 12).\n\"\"\"\n\ndef find_block_in_sequence(sequence: np.ndarray) -> Optional[Tuple[int, int, int]]:\n    \"\"\"\n    Finds the contiguous block of identical non-zero digits in a 1D numpy array.\n\n    Args:\n        sequence: The 1D input numpy array of digits.\n\n    Returns:\n        A tuple containing (start_index, end_index, value) of the block,\n        or None if no such block is found or if the block rule is violated \n        (e.g., multiple blocks, non-identical digits in block).\n    \"\"\"\n    start_index = -1\n    block_value = -1\n    n = sequence.size\n\n    # Iterate through the sequence to find the block\n    for i in range(n):\n        digit = sequence[i] \n        \n        if digit != 0:\n            # Found a non-zero digit\n            if start_index == -1:\n                # This is the start of a potential block\n                start_index = i\n                block_value = digit\n            elif digit != block_value:\n                # Found a different non-zero digit within the potential block, \n                # violating the rule of identical digits. Based on problem description, \n                # this case shouldn't occur if there's only one block.\n                # Could also indicate a second block starting immediately.\n                # We assume only one block as per description.\n                return None # Indicate error or unexpected format\n        elif start_index != -1:\n            # Found a zero after a block started. The block ended at the previous index.\n            return start_index, i - 1, block_value\n            \n    # If the loop finishes and a block was started, it means the block extends to the end.\n    if start_index != -1:\n        return start_index, n - 1, block_value\n        \n    # If the loop finishes and no block was started, return None.\n    return None\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the transformation rule: find the non-zero block and shift it left by 4.\n    \n    Args:\n        input_grid: A numpy array representing the input sequence (expected 1x12 or 12).\n\n    Returns:\n        A numpy array representing the transformed sequence with the same shape as input.\n    \"\"\"\n    # Ensure input is treated as a 1D sequence for processing\n    original_shape = input_grid.shape\n    input_sequence = input_grid.flatten()\n    n = input_sequence.size \n    \n    # Initialize output_grid as a 1D array of zeros with the same length\n    output_sequence = np.zeros(n, dtype=int)\n\n    # Find the contiguous block of non-zero identical digits\n    block_info = find_block_in_sequence(input_sequence)\n\n    # If a valid block was found\n    if block_info:\n        start_index, end_index, block_value = block_info\n\n        # Calculate the new start and end indices by shifting left by 4\n        new_start_index = start_index - 4\n        new_end_index = end_index - 4\n\n        # Check if the new start index is valid (non-negative)\n        # The end index check (< n) is implicitly handled by numpy slicing when start is valid.\n        if new_start_index >= 0 :\n             # Fill the output sequence with the block value at the new position\n             # Use numpy slicing for efficiency. The slice end index is exclusive, so add 1.\n             output_sequence[new_start_index : new_end_index + 1] = block_value\n        # else:\n            # Optional: Handle cases where shift goes out of bounds (e.g., block starts at index < 4)\n            # Based on examples, this condition seems unnecessary as shifts always fit.\n            # print(f\"Warning: Shift results in out-of-bounds negative index: {new_start_index}\")\n            pass\n\n    # Reshape the output sequence back to the original input grid's shape\n    output_grid = output_sequence.reshape(original_shape)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7274,
    "candidates_token_count": 1747,
    "total_token_count": 9021,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.464038,
  "retries": 1
}