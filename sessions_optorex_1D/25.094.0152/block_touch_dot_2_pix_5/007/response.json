{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport math\nimport collections\n\n\"\"\"\nTransformation Rule:\nIdentifies contiguous blocks of one or more zeros within an input sequence of integers, where each block is immediately preceded by a non-zero digit (Left neighbor, L) and immediately followed by a non-zero digit (Right neighbor, R). \nBased on the comparison of L and R, these identified 'mobile' zero blocks are relocated:\n- If L < R, the zeros from the block are moved to the end of the sequence.\n- If L > R, the zeros from the block are moved to the beginning of the sequence.\nZeros that are not part of such a L-0...0-R pattern (e.g., at the ends, adjacent to only one non-zero digit, or only next to other zeros) remain in place relative to the other non-moving elements.\nThe final sequence is constructed by concatenating the zeros designated for the beginning, the remaining non-zero digits and static zeros in their original relative order, and finally the zeros designated for the end.\n\"\"\"\n\ndef transform(input_sequence: list[int]) -> list[int]:\n    \"\"\"\n    Applies the transformation rule to the input sequence of integers.\n\n    Args:\n        input_sequence: A list of integers representing the input sequence.\n\n    Returns:\n        A new list of integers representing the transformed sequence.\n    \"\"\"\n    # Input is already a list of integers, no parsing needed here.\n    nums = input_sequence \n    n = len(nums)\n\n    # Handle sequences too short for the L-0...0-R pattern\n    if n < 3:\n        return nums[:] # Return a copy to avoid modifying potential external references\n\n    # Initialize collections for relocated zeros and indices to remove\n    zeros_to_prepend = []\n    zeros_to_append = []\n    indices_to_remove = set() # Use a set for efficient lookup\n\n    # Scan the sequence to find mobile zero blocks\n    i = 0 \n    while i < n:\n        # Check if the current element could be the start of a mobile zero block\n        # Condition: Must have a left neighbor (i>0), left neighbor non-zero, current element is zero\n        if i > 0 and nums[i] == 0 and nums[i-1] != 0:\n            left_neighbor = nums[i-1]\n            \n            # Find the end index 'k' of the contiguous block of zeros starting at 'i'\n            k = i\n            while k + 1 < n and nums[k+1] == 0:\n                k += 1\n            # 'k' now holds the index of the last zero in this block\n\n            # Check if there is a non-zero element immediately after the block\n            # Condition: Must have a right neighbor (k+1 < n), right neighbor non-zero\n            if k + 1 < n and nums[k+1] != 0:\n                # Found a valid L-0...0-R pattern\n                right_neighbor = nums[k+1]\n                num_zeros = k - i + 1 # Calculate the count of zeros in the block\n\n                # Mark indices of this mobile zero block for removal from the core sequence\n                for idx in range(i, k + 1):\n                    indices_to_remove.add(idx)\n\n                # Determine relocation based on comparison of neighbors\n                if left_neighbor < right_neighbor:\n                    zeros_to_append.extend([0] * num_zeros) # Add zeros to the end list\n                elif left_neighbor > right_neighbor:\n                    zeros_to_prepend.extend([0] * num_zeros) # Add zeros to the start list\n                # If left_neighbor == right_neighbor, zeros are removed but not relocated\n\n                # Advance the main loop index past the entire processed pattern (L, zeros, R)\n                # Start checking from the element *after* the right neighbor\n                i = k + 2 \n                continue # Continue to the next iteration of the while loop\n            else:\n                # The zero block starting at 'i' does not have a valid non-zero right neighbor.\n                # Therefore, this block is not mobile according to the rule.\n                # Advance the index past this non-mobile block to avoid re-checking its internal zeros.\n                i = k + 1\n                continue # Continue to the next iteration\n        \n        # If the current element nums[i] did not start a mobile block, \n        # simply move to check the next index in the sequence.\n        i += 1\n\n    # Build the core sequence by filtering out the elements at the removed indices\n    result_core = [nums[idx] for idx in range(n) if idx not in indices_to_remove]\n\n    # Assemble the final sequence by concatenating the parts\n    final_list = zeros_to_prepend + result_core + zeros_to_append\n\n    return final_list\n\n# Example of how this function might be called if input/output are strings\ndef solve_task(input_str: str) -> str:\n    \"\"\" Parses input string, transforms the sequence, and formats the output string. \"\"\"\n    input_list = [int(x) for x in input_str.split()]\n    output_list = transform(input_list)\n    output_str = \" \".join(map(str, output_list))\n    return output_str\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 11526,
    "candidates_token_count": 1403,
    "total_token_count": 12929,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.904717,
  "retries": 1
}