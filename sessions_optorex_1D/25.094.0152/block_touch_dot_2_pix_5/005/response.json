{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport math\nimport collections\n\n\"\"\"\nTransformation Rule:\nIdentifies contiguous blocks of one or more zeros within an input sequence of integers, where each block is immediately preceded by a non-zero digit (Left neighbor, L) and immediately followed by a non-zero digit (Right neighbor, R). \nBased on the comparison of L and R, these identified 'mobile' zero blocks are relocated:\n- If L < R, the zeros from the block are moved to the end of the sequence.\n- If L > R, the zeros from the block are moved to the beginning of the sequence.\nZeros that are not part of such a L-0...0-R pattern (e.g., at the ends, adjacent to only one non-zero digit, or only next to other zeros) remain in place relative to the other non-moving elements.\nThe final sequence is constructed by concatenating the zeros designated for the beginning, the remaining non-zero digits and static zeros in their original relative order, and finally the zeros designated for the end.\n\"\"\"\n\ndef transform(input_sequence: list[int]) -> list[int]:\n    \"\"\"\n    Applies the transformation rule to the input sequence of integers.\n\n    Args:\n        input_sequence: A list of integers.\n\n    Returns:\n        A new list of integers representing the transformed sequence.\n    \"\"\"\n    nums = input_sequence # Work with the input list\n    n = len(nums)\n\n    # Handle sequences too short for the L-0...0-R pattern\n    if n < 3:\n        return nums[:] # Return a copy\n\n    zeros_to_prepend = []\n    zeros_to_append = []\n    # Use a set to store indices of mobile zeros that will be removed from the core sequence\n    indices_to_remove = set() \n\n    # Iterate through the sequence to find mobile zero blocks\n    i = 0 \n    while i < n:\n        # Check if we are at a potential start of a mobile zero block:\n        # Need: index i-1 exists (i > 0), element i-1 is non-zero, element i is zero.\n        if i > 0 and nums[i] == 0 and nums[i-1] != 0:\n            left_neighbor = nums[i-1]\n            \n            # Find the end of the contiguous block of zeros starting at index i\n            k = i\n            # Scan forward while the next element is within bounds and is also a zero\n            while k + 1 < n and nums[k+1] == 0:\n                k += 1\n            # Now k is the index of the last zero in this contiguous block.\n\n            # Check if there is a non-zero element immediately after the block\n            # Need: index k+1 exists (k+1 < n), element k+1 is non-zero.\n            if k + 1 < n and nums[k+1] != 0:\n                # Found a valid L-0...0-R pattern\n                right_neighbor = nums[k+1]\n                num_zeros = k - i + 1 # Calculate the number of zeros in the block\n\n                # Mark indices of this zero block for removal from the core sequence\n                for idx in range(i, k + 1):\n                    indices_to_remove.add(idx)\n\n                # Decide where to relocate the zeros based on neighbor comparison\n                if left_neighbor < right_neighbor:\n                    zeros_to_append.extend([0] * num_zeros)\n                elif left_neighbor > right_neighbor:\n                    zeros_to_prepend.extend([0] * num_zeros)\n                # If left_neighbor == right_neighbor, zeros are just removed (already marked), not relocated to ends.\n\n                # Advance the main loop index past this processed block \n                # Start the next iteration checking the element *after* the right neighbor\n                i = k + 2 \n                continue # Skip the standard increment at the end of the loop\n            else:\n                # The zero block starting at i didn't have a non-zero element immediately following it.\n                # This block is not mobile according to the rule.\n                # Advance the index past this non-mobile block.\n                i = k + 1\n                continue # Skip the standard increment\n        \n        # If the current element nums[i] didn't start a mobile block, just move to check the next index\n        i += 1\n\n    # Build the core result by keeping elements whose indices were not marked for removal\n    result_core = [nums[idx] for idx in range(n) if idx not in indices_to_remove]\n\n    # Construct the final list by combining the relocated zeros and the core result\n    final_list = zeros_to_prepend + result_core + zeros_to_append\n\n    return final_list\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8902,
    "candidates_token_count": 1620,
    "total_token_count": 10522,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.901205,
  "retries": 1
}