task_elements:
  - object: sequence
    properties:
      - type: list
      - element_type: integer
      - length: 12
  - object: element
    properties:
      - type: integer
      - value: specific numbers (0, 1, 6 are key)
      - position: index (0-11)
  - object: block
    properties:
      - type: contiguous sequence of identical non-zero elements
      - value: the repeated integer (e.g., 1 or 6)
      - start_index: position of the first element
      - end_index: position of the last element
actions:
  - name: identify_blocks
    description: Find all maximal contiguous blocks of identical non-zero numbers.
  - name: check_neighbors
    description: Examine elements adjacent to a block (or specific numbers like 1).
    parameters:
      - direction: left or right
      - count: number of adjacent positions to check (e.g., 1 or 2)
      - expected_value: value to look for (typically 0)
  - name: move_block
    description: Relocate a block within the sequence by swapping with adjacent zeros.
    parameters:
      - block: the block to move
      - direction: left or right
      - distance: number of positions to shift (1 or 2)
rules:
  - rule: movement_rule_1
    description: A block of `1`s moves 1 position right if immediately followed by a `0`.
    condition: block_value == 1 AND element_at(end_index + 1) == 0
    action: move_block(block, direction=right, distance=1)
  - rule: movement_rule_6_left
    description: A block of `6`s moves 2 positions left if immediately preceded by `0, 0`.
    condition: block_value == 6 AND element_at(start_index - 1) == 0 AND element_at(start_index - 2) == 0
    action: move_block(block, direction=left, distance=2)
  - rule: movement_rule_6_right
    description: A block of `6`s moves 2 positions right if immediately followed by `0, 0`.
    condition: block_value == 6 AND element_at(end_index + 1) == 0 AND element_at(end_index + 2) == 0
    action: move_block(block, direction=right, distance=2)
  - note: Based on examples, only one move seems to occur per input. Assume only one rule applies, or a priority exists if multiple could apply (though not needed for provided examples). Stationary numbers (e.g. 2) may block movement or are simply not subject to these rules.