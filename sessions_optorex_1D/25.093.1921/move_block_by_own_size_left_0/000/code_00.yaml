task_elements:
  - item: sequence
    properties:
      - type: list of integers
      - length: fixed (12 in examples)
      - contains: background_digit, object_block
  - item: background_digit
    properties:
      - value: 0
  - item: object_block
    properties:
      - type: contiguous subsequence
      - elements: identical non-zero integers
      - value: the non-zero integer (e.g., 1, 4, 5)
      - length: number of elements in the block
      - start_index_input: the starting position (0-based index) in the input sequence
      - start_index_output: the starting position (0-based index) in the output sequence
relationships:
  - type: transformation
    action: shift_left
    target: object_block
    parameters:
      - shift_amount: derived from object_block properties
derivation_rules:
  - rule: calculate_shift_amount
    input: object_block.length
    output: shift_amount
    formula: shift_amount = object_block.length
  - rule: calculate_output_position
    input:
      - object_block.start_index_input
      - shift_amount
    output: object_block.start_index_output
    formula: object_block.start_index_output = object_block.start_index_input - shift_amount
constraints:
  - Each input sequence contains exactly one object_block.
  - The object_block consists of identical non-zero digits.
  - The shift operation does not wrap around; elements shifted past index 0 are effectively placed starting at index 0. (Observed in train_1 and train_6). However, the calculation `start_index - shift_amount` correctly places the block.