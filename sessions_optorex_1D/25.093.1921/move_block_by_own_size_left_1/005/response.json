{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Tuple, Optional, Union\n\n\"\"\"\nApplies a transformation independently to each row of an input grid (represented as a 2D NumPy array).\nFor each row, it finds the first contiguous block of non-zero numbers and shifts this block \nto the left by a distance equal to its length. The space left empty by the shift and any \nspace to the right of the block are filled with zeros. If a row contains no non-zero numbers, \nit remains a row of zeros.\n\"\"\"\n\ndef _find_non_zero_block(row: np.ndarray) -> Tuple[Optional[np.ndarray], int, int]:\n    \"\"\"\n    Finds the first contiguous block of non-zero numbers in a 1D NumPy array (row).\n\n    Args:\n        row: The input 1D NumPy array representing a row of the grid.\n\n    Returns:\n        A tuple containing:\n        - The NumPy array segment representing the block (or None if no block is found).\n        - The starting index of the block within the row (or -1 if not found).\n        - The ending index of the block within the row (or -1 if not found).\n    \"\"\"\n    start_index = -1\n    end_index = -1\n    n = len(row)\n\n    # Find the start index of the first non-zero element\n    non_zero_indices = np.nonzero(row)[0]\n    if len(non_zero_indices) == 0:\n        return None, -1, -1 # No non-zero elements\n        \n    start_index = non_zero_indices[0]\n\n    # Find the end index of the first contiguous block\n    end_index = start_index\n    for i in range(start_index + 1, n):\n        if row[i] != 0:\n            end_index = i\n        else:\n            # Found the first zero after the block started\n            break\n\n    # Extract the block\n    block = row[start_index : end_index + 1]\n\n    return block, start_index, end_index\n\ndef _process_row(row: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the shift transformation to a single row.\n\n    Args:\n        row: The 1D NumPy array representing the row to process.\n\n    Returns:\n        A new 1D NumPy array representing the transformed row.\n    \"\"\"\n    n = len(row)\n    output_row = np.zeros_like(row) # Initialize output row with zeros\n\n    # 1. Find the non-zero block, its start index, and end index\n    non_zero_block, start_index, end_index = _find_non_zero_block(row)\n\n    # If no block is found, the output_row remains all zeros, which is correct\n    if non_zero_block is not None:\n        # 2. Calculate block length\n        block_length = len(non_zero_block) # or end_index - start_index + 1\n\n        # 3. Calculate shift amount (equal to block length)\n        shift_amount = block_length\n\n        # 4. Calculate new start index (clamped at 0)\n        new_start_index = max(0, start_index - shift_amount)\n        \n        # 5. Calculate the new end index (exclusive) in the output row\n        new_end_index = new_start_index + block_length\n\n        # 6. Place the block in the output row, handling potential clipping if shifted left\n        # Determine how much of the block fits in the output\n        effective_block_length = min(block_length, n - new_start_index)\n        \n        if effective_block_length > 0:\n             output_row[new_start_index : new_start_index + effective_block_length] = non_zero_block[:effective_block_length]\n\n    return output_row\n\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Transforms the input grid by applying the row-wise shift operation.\n\n    Args:\n        input_grid: A 2D NumPy array of integers.\n\n    Returns:\n        A 2D NumPy array of integers with the transformation applied to each row.\n    \"\"\"\n    # Ensure input is a NumPy array\n    if not isinstance(input_grid, np.ndarray):\n        input_grid = np.array(input_grid)\n\n    # Handle empty input grid case\n    if input_grid.size == 0:\n        return input_grid.copy()\n        \n    # Get grid dimensions\n    rows, cols = input_grid.shape\n\n    # Initialize output_grid with zeros (or copy structure if needed)\n    output_grid = np.zeros_like(input_grid)\n\n    # Iterate through each row of the input grid\n    for r in range(rows):\n        # Get the current row\n        current_row = input_grid[r, :]\n        \n        # Process the row using the helper function\n        transformed_row = _process_row(current_row)\n        \n        # Place the transformed row into the output grid\n        output_grid[r, :] = transformed_row\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7256,
    "candidates_token_count": 1202,
    "total_token_count": 8458,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.806129,
  "retries": 1
}