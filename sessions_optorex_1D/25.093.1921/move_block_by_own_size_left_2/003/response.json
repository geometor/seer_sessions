{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nIdentifies the first contiguous block of identical non-zero integers in a 1D sequence (list or numpy array).\nShifts this block to the left by a number of positions equal to its length.\nFills the remaining positions with zeros. The output sequence maintains the type of the input (list or numpy array).\n\"\"\"\n\ndef find_non_zero_block(sequence):\n    \"\"\"\n    Finds the first contiguous block of identical non-zero digits in a list or 1D numpy array.\n\n    Args:\n        sequence: A list or 1D numpy array of integers.\n\n    Returns:\n        A tuple (start_index, length, value) if a block is found,\n        otherwise None. Returns -1 for start_index if no block is found.\n    \"\"\"\n    start_index = -1\n    length = 0\n    value = 0\n    n = len(sequence)\n\n    for i in range(n):\n        # Check if the current element is non-zero and we haven't started a block yet\n        if sequence[i] != 0 and start_index == -1:\n            start_index = i\n            value = sequence[i]\n            length = 1\n            # Look ahead to find the end of the block\n            for j in range(i + 1, n):\n                if sequence[j] == value:\n                    length += 1\n                else:\n                    # End of the block found\n                    return start_index, length, value\n            # If the loop finishes, the block extends to the end\n            return start_index, length, value\n\n    # If no non-zero element was found to start a block\n    return -1, 0, 0\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Transforms the input sequence (1D numpy array) according to the rule.\n\n    Args:\n        input_grid: A 1D numpy array of 12 integers.\n\n    Returns:\n        A 1D numpy array representing the transformed sequence.\n    \"\"\"\n    # Get the size of the input grid (sequence length)\n    sequence_length = len(input_grid)\n\n    # Initialize output_grid with zeros, same size and type as input\n    output_grid = np.zeros_like(input_grid)\n\n    # Identify the contiguous block of non-zero integers\n    start_index, length, value = find_non_zero_block(input_grid)\n\n    # Proceed only if a valid block was found (start_index is not -1)\n    if start_index != -1:\n        # Calculate the new starting index for the block\n        # Shift amount = length\n        # New start index = original start index - shift amount\n        new_start_index = start_index - length\n\n        # Place the identified non-zero block into the output grid\n        # Ensure indices stay within bounds [0, sequence_length - 1]\n        for i in range(length):\n            current_index = new_start_index + i\n            # Check if the calculated index is valid before writing\n            if 0 <= current_index < sequence_length:\n                output_grid[current_index] = value\n            # Note: Based on examples, shifts resulting in negative indices\n            # might occur, but elements are only placed at valid non-negative indices.\n\n    # Return the transformed grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5068,
    "candidates_token_count": 775,
    "total_token_count": 5843,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.61435,
  "retries": 1
}