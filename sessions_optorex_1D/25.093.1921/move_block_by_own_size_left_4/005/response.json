{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport math  # Standard math library, potentially useful though not directly used here.\n\n\"\"\"\nShift a contiguous block of identical non-zero numbers leftwards within a \nfixed-length sequence (length 12) of numbers. The magnitude of the leftward \nshift is equal to the length of the block itself. The input might be a list\nor a NumPy array, and the output should be a standard Python list of integers.\n\"\"\"\n\ndef find_non_zero_block(sequence):\n    \"\"\"\n    Finds the first contiguous block of identical non-zero numbers in a sequence.\n\n    Args:\n        sequence: A list or list-like object of numbers.\n\n    Returns:\n        A tuple (value, start_index, length) if a block is found,\n        otherwise None.\n        - value: The non-zero scalar value of the block elements.\n        - start_index: The 0-based index where the block begins.\n        - length: The number of elements in the block.\n    \"\"\"\n    start_index = -1\n    block_value = 0\n    length = 0\n    in_block = False\n\n    # Iterate through the sequence to find the block\n    for i, val in enumerate(sequence):\n        # Ensure we are comparing scalar values, potentially handling numpy types implicitly\n        # by comparing with standard Python integers (0).\n        current_val = val # Use the element directly\n\n        if not in_block and current_val != 0:\n            # Start of a potential block\n            in_block = True\n            start_index = i\n            block_value = current_val # Store the value found\n            length = 1\n        elif in_block:\n            # Check if the current element continues the block\n            # Comparison should work correctly between compatible numeric types\n            if current_val == block_value:\n                # Continue the block\n                length += 1\n            else:\n                # End of the block (hit a different value or zero)\n                # Assuming only one block per sequence based on examples\n                break \n    \n    # Return block details if found\n    if start_index != -1:\n        # Ensure the returned value is a standard Python int if needed downstream\n        # Although comparison worked, final value might need casting depending on usage\n        # For this task, returning the original type (like np.int64) is fine if it was input.\n        return block_value, start_index, length\n    else:\n        # No non-zero block found\n        return None\n\ndef transform(input_sequence):\n    \"\"\"\n    Transforms the input sequence by shifting the non-zero block leftwards\n    by a distance equal to its length.\n\n    Args:\n        input_sequence: A list or list-like object (e.g., NumPy array) of numbers.\n\n    Returns:\n        A list of integers representing the transformed sequence.\n    \"\"\"\n    # Ensure input is treated as a sequence and get its length\n    # Using list() handles potential iterables like numpy arrays\n    input_list = list(input_sequence)\n    n = len(input_list)\n    \n    # Initialize the output sequence as a list of standard Python integers (0)\n    output_sequence = [0] * n\n\n    # Find the contiguous block of non-zero numbers using the helper function\n    block_info = find_non_zero_block(input_list)\n\n    # Proceed only if a block was found\n    if block_info:\n        block_value, start_index, block_length = block_info\n\n        # Calculate the shift distance (equal to block length)\n        shift_distance = block_length\n\n        # Calculate the new starting index for the block in the output\n        # Use max(0, ...) to prevent negative indices if start_index < shift_distance\n        new_start_index = max(0, start_index - shift_distance)\n\n        # Place the block into the output sequence at the new position\n        for i in range(block_length):\n            # Calculate the target index in the output sequence\n            target_index = new_start_index + i\n            # Ensure the target index is within the bounds of the sequence\n            if target_index < n:\n                 # Ensure the value placed in the output list is a standard Python int\n                 # This addresses potential downstream compatibility issues if block_value\n                 # was a numpy type.\n                output_sequence[target_index] = int(block_value)\n\n    # Return the modified output sequence as a list of integers\n    return output_sequence\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6072,
    "candidates_token_count": 1530,
    "total_token_count": 7602,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.608822,
  "retries": 1
}