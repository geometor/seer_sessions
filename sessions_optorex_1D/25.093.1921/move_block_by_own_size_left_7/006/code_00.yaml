task_type: array_transformation
input_data_type: list_of_integers
output_data_type: list_of_integers
array_length: 12 # Constant across examples seen
elements:
  - type: background
    value: 0
    role: padding
  - type: object
    identifier: contiguous_non_zero_block
    properties:
      - count: 1 # Exactly one such block per input list
      - contiguity: True # Digits form a continuous sequence
      - homogeneity: True # All digits within the block are identical and non-zero
      - value: Any digit from 1-9 (observed: 2, 3, 5, 6, 8, 9)
      - length: Variable (observed: 1, 2, 3, 4, 5)
      - start_index: Variable (position of the first digit of the block)
transformation:
  action: shift_left
  target: contiguous_non_zero_block
  parameter:
    source: length # The length property of the target block
    value_computation: shift_amount = block_length
  process:
    1_find_block: Identify start_index, length, and value of the contiguous_non_zero_block.
    2_calculate_new_position: new_start_index = start_index - length.
    3_construct_output: Create a new list of the same length filled with the background value (0).
    4_place_block: Copy the block (value repeated length times) into the new list starting at new_start_index.
constraints:
  - list_length_is_constant (input length = output length).
  - Exactly one contiguous block of identical non-zero digits exists in the input.
  - The calculated new_start_index is always >= 0 (the block does not shift off the left edge).