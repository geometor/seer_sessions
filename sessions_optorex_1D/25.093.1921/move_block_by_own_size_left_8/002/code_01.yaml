Task: Sequence Transformation (Left Shift by Block Length)

Input:
  Type: Sequence (List) of single integers.
  Length: Constant within a given example pair (e.g., 12).
  Content: Primarily composed of zeros (`0`), containing exactly one contiguous block of a single non-zero digit (1-9).

Output:
  Type: Sequence (List) of single integers.
  Length: Identical to the input sequence length.
  Content: Primarily composed of zeros (`0`), containing the same non-zero block from the input, shifted to a new position.

Objects:
  - Sequence: The ordered list of integers (input or output).
    Properties:
      - elements: The list of integers [0-9].
      - length: The total number of elements.
  - Zero_Element: The integer `0`.
  - Non_Zero_Block: A contiguous sub-sequence within the input sequence consisting of identical non-zero digits.
    Properties:
      - digit_value: The non-zero integer (1-9) comprising the block.
      - start_index_input: The 0-based index where the block begins in the input sequence.
      - length: The number of digits in the block.
  - Shift_Operation: The core action performed on the Non_Zero_Block.
    Properties:
      - direction: Leftward.
      - distance: Equal to the `length` of the `Non_Zero_Block`.

Derived_Properties:
  - target_start_index_output: The calculated 0-based index where the `Non_Zero_Block` should begin in the output sequence.
    Calculation: `start_index_input` - `length`.

Action:
  1. Identify_Block: Scan the input `Sequence` to find the `Non_Zero_Block`, determining its `digit_value`, `start_index_input`, and `length`.
  2. Calculate_Target_Position: Compute the `target_start_index_output` by subtracting the block's `length` from its `start_index_input`.
  3. Construct_Output: Create a new `Sequence` of the same `length` as the input, initially filled with `Zero_Element`s.
  4. Place_Block: Copy the `Non_Zero_Block` (repeating the `digit_value` for `length` times) into the output `Sequence`, starting at the `target_start_index_output`.

Constraints:
  - The input contains exactly one non-zero block.
  - All digits within the non-zero block are identical.
  - The shift operation results in a valid start index within the sequence bounds (as observed in all examples).