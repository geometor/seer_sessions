{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport typing\n\ndef find_non_zero_block(sequence: typing.List[int]) -> typing.Tuple[typing.Optional[int], int, int]:\n    \"\"\"\n    Finds the first contiguous block of a non-zero digit in the sequence.\n\n    Args:\n        sequence: The input list of integers.\n\n    Returns:\n        A tuple containing:\n        - The non-zero digit found (or None if no non-zero digit exists).\n        - The starting index of the block (-1 if not found).\n        - The length of the block (0 if not found).\n    \"\"\"\n    digit = None\n    start_index = -1\n    length = 0\n\n    for i, value in enumerate(sequence):\n        if value != 0:\n            # Found the start of a potential block\n            if digit is None:\n                digit = value\n                start_index = i\n                length = 1\n            # Continue counting if it's the same digit\n            elif value == digit:\n                length += 1\n            # If a different non-zero digit is found, the first block ended\n            else:\n                break\n        elif digit is not None:\n            # Found a zero after the block started, so the block ended\n            break\n            \n    # Handle case where only zeros were found after finding the start\n    if digit is not None and length == 0 and start_index != -1:\n        length = 1 # It was a single digit block\n        \n    # Handle case where loop finished while counting\n    # No specific action needed here, length is already correct.\n\n    # If no non-zero digit was ever found\n    if digit is None:\n        return None, -1, 0\n        \n    return digit, start_index, length\n\ndef transform(input_grid: typing.List[int]) -> typing.List[int]:\n    \"\"\"\n    Transforms the input sequence by finding the single contiguous block \n    of a non-zero digit and shifting it left by a distance equal to its length. \n    The rest of the sequence is filled with zeros.\n    \"\"\"\n    \n    # Get the total length of the input sequence\n    sequence_length = len(input_grid)\n    \n    # Initialize the output sequence with zeros\n    output_grid = [0] * sequence_length\n\n    # Find the non-zero block details: its digit, starting index, and length\n    digit, start_index, block_length = find_non_zero_block(input_grid)\n\n    # If no non-zero block is found (e.g., input is all zeros), return the zero-filled output\n    if digit is None:\n        return output_grid # Or potentially handle as an error, but based on examples return zeros\n\n    # Calculate the shift amount (equal to the block length)\n    shift_amount = block_length\n\n    # Calculate the new starting index for the block in the output sequence\n    # New Start = Original Start - Shift Amount\n    new_start_index = start_index - shift_amount\n\n    # Ensure the new start index is within bounds (although examples suggest it always is)\n    if new_start_index < 0:\n        # This case is not represented in the examples, but handle defensively\n        # Option 1: Clamp to 0 (might lose part of the block)\n        # Option 2: Raise an error \n        # Option 3: Based on examples, assume this won't happen.\n        # Let's proceed assuming valid shifts based on provided examples.\n        pass \n\n    # Place the non-zero block into the output sequence at the new position\n    for i in range(block_length):\n        # Calculate the index in the output grid\n        output_index = new_start_index + i\n        # Check if the output index is within the bounds of the grid\n        if 0 <= output_index < sequence_length:\n            output_grid[output_index] = digit\n        else:\n            # This part of the block would fall outside the grid after shifting.\n            # Based on examples, this doesn't seem to happen.\n            pass\n\n    # Return the transformed sequence\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1627,
    "candidates_token_count": 1620,
    "total_token_count": 3247,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.434033,
  "retries": 1
}