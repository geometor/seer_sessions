{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport math\nimport collections\n\n\"\"\"\nTransforms a 1D NumPy array of integers by finding the longest contiguous subsequence \n(run) of identical non-zero digits. If multiple such runs share the maximum length, \nthe leftmost one (smallest starting index) is chosen. The elements within the \nchosen run in a copy of the input array are then replaced with the integer 1. \nIf no non-zero homogeneous run is found, the original array is returned unchanged.\n\"\"\"\n\ndef _find_longest_leftmost_nonzero_run(arr):\n    \"\"\"\n    Finds the start index and length of the longest, leftmost contiguous \n    subsequence of identical non-zero elements in a 1D NumPy array.\n\n    Args:\n        arr: The input 1D NumPy array of integers.\n\n    Returns:\n        A tuple (start_index, length). \n        Returns (-1, 0) if no non-zero homogeneous run is found.\n    \"\"\"\n    max_len = 0\n    best_start = -1\n    n = len(arr)\n    i = 0\n    while i < n:\n        # Skip zero elements\n        if arr[i] == 0:\n            i += 1\n            continue\n\n        # Found a non-zero element, mark the start of a potential run\n        current_val = arr[i]\n        start_index = i\n        j = i + 1\n        \n        # Find the end of the contiguous run of the same non-zero value\n        while j < n and arr[j] == current_val:\n            j += 1\n        \n        # Calculate the length of the current run\n        current_len = j - start_index\n        \n        # Check if this run is the new longest run\n        if current_len > max_len:\n            max_len = current_len\n            best_start = start_index\n            \n        # Move the main index past the current run\n        i = j \n        \n    return best_start, max_len\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the transformation rule to the input 1D NumPy array.\n\n    Args:\n        input_grid: A 1D NumPy array of integers.\n\n    Returns:\n        A 1D NumPy array with the longest, leftmost run of identical non-zero\n        digits replaced by 1s, or the original array if no such run exists.\n    \"\"\"\n    \n    # Find the target subsequence (longest, leftmost, non-zero, homogeneous)\n    start_index, length = _find_longest_leftmost_nonzero_run(input_grid)\n\n    # If no suitable run was found, return the original grid\n    if start_index == -1:\n        return input_grid\n\n    # Create a copy of the input grid to modify\n    output_grid = input_grid.copy()\n\n    # Modify the output grid by setting the elements of the found run to 1\n    # Use slicing for efficient modification\n    output_grid[start_index : start_index + length] = 1\n    \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5334,
    "candidates_token_count": 1264,
    "total_token_count": 6598,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.28738,
  "retries": 1
}