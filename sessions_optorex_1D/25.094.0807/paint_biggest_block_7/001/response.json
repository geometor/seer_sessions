{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport collections\nimport math  # Although not used in the final code, common math/science libs are available\n\ndef _find_most_frequent_non_zero(numbers):\n    \"\"\"\n    Finds the most frequent non-zero digit in a list of numbers.\n    Assumes no ties for the most frequent digit based on problem constraints.\n\n    Args:\n        numbers: A list of integers.\n\n    Returns:\n        The most frequent non-zero integer, or None if no non-zero digits exist.\n    \"\"\"\n    # Filter out zeros\n    non_zeros = [n for n in numbers if n != 0]\n    \n    # Handle case where there are no non-zero numbers\n    if not non_zeros:\n        return None\n\n    # Count frequencies of non-zero numbers\n    counts = collections.Counter(non_zeros)\n    \n    # Find the digit with the maximum frequency\n    # max(counts, key=counts.get) returns the key (digit) with the highest value (count)\n    most_frequent_digit = max(counts, key=counts.get)\n    \n    return most_frequent_digit\n\ndef _find_longest_run(numbers, target_digit):\n    \"\"\"\n    Finds the start index, end index (inclusive), and length of the longest\n    consecutive run of target_digit in the numbers list.\n    Assumes a unique longest run if multiple runs exist, based on problem constraints.\n\n    Args:\n        numbers: A list of integers.\n        target_digit: The integer value whose longest run is sought.\n\n    Returns:\n        A tuple (start_index, end_index, length). Returns (-1, -1, 0) if\n        the target_digit is not found or has no runs.\n    \"\"\"\n    longest_run_start = -1\n    longest_run_end = -1\n    max_length = 0\n\n    current_run_start = -1\n    current_length = 0\n\n    for i, num in enumerate(numbers):\n        if num == target_digit:\n            # If this is the start of a new run\n            if current_length == 0:\n                current_run_start = i\n            # Increment current run length\n            current_length += 1\n        else:\n            # If a run just ended\n            if current_length > 0:\n                # Check if this just-ended run is the new longest\n                if current_length > max_length:\n                    max_length = current_length\n                    longest_run_start = current_run_start\n                    longest_run_end = i - 1 # End index is the previous element\n            # Reset current run tracking\n            current_run_start = -1\n            current_length = 0\n\n    # Special check: Handle case where the longest run is at the very end of the list\n    if current_length > 0:\n        if current_length > max_length:\n            max_length = current_length\n            longest_run_start = current_run_start\n            longest_run_end = len(numbers) - 1 # End index is the last element\n\n    # Return the findings\n    if max_length > 0:\n        return longest_run_start, longest_run_end, max_length\n    else:\n        # Target digit not found or no runs\n        return -1, -1, 0\n\ndef transform(input_list):\n    \"\"\"\n    Transforms the input list by finding the longest consecutive run of the\n    most frequent non-zero digit and replacing the digits in that specific run\n    with the digit 1. All other digits remain unchanged.\n\n    Args:\n        input_list: A list of single-digit integers.\n\n    Returns:\n        A new list of integers representing the transformed input.\n    \"\"\"\n    # Handle empty input list case\n    if not input_list:\n        return []\n\n    # Initialize output_list as a copy of the input to avoid modifying the original\n    output_list = list(input_list)\n\n    # Step 1: Find the most frequent non-zero digit.\n    target_digit = _find_most_frequent_non_zero(input_list)\n\n    # If no non-zero digits were found (target_digit is None), no transformation needed.\n    if target_digit is None:\n        return output_list\n\n    # Step 2 & 3: Find the longest consecutive run of the target digit.\n    # This returns the start index, end index (inclusive), and length of that run.\n    start_index, end_index, length = _find_longest_run(input_list, target_digit)\n\n    # Step 4: If a longest run was found (length > 0), replace its digits with 1.\n    if length > 0:\n        # Iterate through the indices of the longest run\n        for i in range(start_index, end_index + 1):\n            # Make sure the index is valid (should always be true based on find_longest_run logic)\n             if 0 <= i < len(output_list):\n                 # Replace the digit at this position with 1 in the output list\n                 output_list[i] = 1\n\n    # Step 5: Return the modified list.\n    return output_list\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1611,
    "candidates_token_count": 3147,
    "total_token_count": 4758,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 51.427649,
  "retries": 2
}