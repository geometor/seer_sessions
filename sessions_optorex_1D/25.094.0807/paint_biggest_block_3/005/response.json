{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Tuple, Optional, Sequence\n\n\"\"\"\nModify a sequence of digits represented as a NumPy array by:\n1. Identifying all contiguous runs of identical non-zero digits.\n2. Finding the maximum length among these runs.\n3. Selecting the run(s) with this maximum length.\n4. Among the longest runs, choosing the one that appears first (minimum start index).\n5. Replacing the digits within this chosen run with the digit 1.\nReturn the modified sequence as a NumPy array.\n\"\"\"\n\ndef find_runs(sequence: List[int]) -> List[Tuple[int, int, int]]:\n    \"\"\"\n    Identifies all contiguous runs of identical non-zero digits in a list.\n\n    Args:\n        sequence: A list of integers.\n\n    Returns:\n        A list of tuples, where each tuple represents a run:\n        (start_index, length, value). Returns an empty list if no runs are found.\n    \"\"\"\n    runs = []\n    if not sequence:\n        return runs\n\n    current_run_start = -1\n    current_run_length = 0\n    current_run_value = None\n\n    # Iterate through the list to find runs\n    for i, digit in enumerate(sequence):\n        if digit != 0: # Check if the digit is non-zero\n            # Non-zero digit encountered\n            if current_run_length == 0:\n                # Start a new run\n                current_run_start = i\n                current_run_length = 1\n                current_run_value = digit\n            elif digit == current_run_value:\n                # Continue the current run if the digit matches\n                current_run_length += 1\n            else:\n                # End the previous run (different non-zero digit) and start a new one\n                runs.append((current_run_start, current_run_length, current_run_value))\n                current_run_start = i\n                current_run_length = 1\n                current_run_value = digit\n        else:\n            # Zero encountered, end any current run\n            if current_run_length > 0:\n                runs.append((current_run_start, current_run_length, current_run_value))\n            # Reset run tracking\n            current_run_start = -1\n            current_run_length = 0\n            current_run_value = None\n\n    # Add the last run if the sequence doesn't end with 0 and a run was active\n    if current_run_length > 0:\n        runs.append((current_run_start, current_run_length, current_run_value))\n\n    return runs\n\ndef select_target_run(runs: List[Tuple[int, int, int]]) -> Optional[Tuple[int, int, int]]:\n    \"\"\"\n    Selects the target run based on maximum length and earliest start index.\n\n    Args:\n        runs: A list of runs, each represented as (start_index, length, value).\n\n    Returns:\n        The target run tuple (start_index, length, value), or None if no runs exist.\n    \"\"\"\n    if not runs:\n        # No non-zero runs found\n        return None\n\n    # Find the maximum length among all identified runs\n    max_length = 0\n    for _, length, _ in runs:\n        if length > max_length:\n            max_length = length\n    \n    # Filter the runs to keep only those with the maximum length\n    longest_runs = [run for run in runs if run[1] == max_length]\n\n    # From the longest runs, find the one that starts earliest (minimum start_index)\n    # The min function with a key naturally handles finding the first one in case of ties\n    target_run = min(longest_runs, key=lambda run: run[0])\n\n    return target_run\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Transforms the input NumPy array according to the specified rule.\n    \"\"\"\n    # Convert input NumPy array to a Python list for easier processing\n    input_list = input_grid.tolist()\n\n    # Initialize output list as a copy of the input list\n    output_list = list(input_list)\n\n    # Find all contiguous runs of identical non-zero digits in the list\n    runs = find_runs(input_list)\n\n    # Select the target run (first occurring longest run)\n    target_run = select_target_run(runs)\n\n    # If a target run was identified, modify the output list\n    if target_run:\n        start_index, length, _ = target_run\n        replacement_digit = 1\n        # Iterate through the indices of the target run in the output list\n        for i in range(start_index, start_index + length):\n            # Replace the digit at the current index with 1\n            output_list[i] = replacement_digit\n\n    # Convert the modified output list back to a NumPy array\n    output_grid = np.array(output_list, dtype=input_grid.dtype)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7011,
    "candidates_token_count": 1500,
    "total_token_count": 8511,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.523707,
  "retries": 1
}