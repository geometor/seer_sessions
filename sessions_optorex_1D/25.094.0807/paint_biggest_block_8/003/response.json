{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Dict, Any, Union\n\n\"\"\"\nTransforms a sequence of single-digit integers based on the following rule:\n1. Identify all contiguous subsequences (runs) of identical non-zero digits.\n2. Find the run(s) with the maximum length.\n3. If multiple runs share the maximum length, select the leftmost one (smallest starting index).\n4. Replace the digits in the selected run with the digit '1'.\n5. If no non-zero runs exist, the sequence remains unchanged.\n\"\"\"\n\ndef find_runs(sequence: np.ndarray) -> List[Dict[str, int]]:\n    \"\"\"\n    Identifies all contiguous runs of identical non-zero digits in a sequence.\n\n    Args:\n        sequence: A NumPy array of integers.\n\n    Returns:\n        A list of dictionaries, where each dictionary represents a run\n        and contains 'start' (index), 'length', and 'value' (the digit).\n        Returns an empty list if no non-zero runs are found.\n    \"\"\"\n    runs = []\n    n = len(sequence)\n    i = 0\n    while i < n:\n        # Skip zeros\n        if sequence[i] == 0:\n            i += 1\n            continue\n\n        # Found the start of a potential non-zero run\n        current_digit = sequence[i]\n        start_index = i\n        run_length = 1\n        i += 1\n\n        # Extend the run while the digit matches and within bounds\n        while i < n and sequence[i] == current_digit:\n            run_length += 1\n            i += 1\n\n        # Store the found run\n        runs.append({'start': start_index, 'length': run_length, 'value': current_digit})\n        # The outer loop continues from the current 'i'\n\n    return runs\n\ndef transform(input_sequence: Union[List[int], np.ndarray]) -> np.ndarray:\n    \"\"\"\n    Applies the transformation rule to the input sequence.\n\n    Args:\n        input_sequence: The list or NumPy array of integers to transform.\n\n    Returns:\n        A NumPy array representing the transformed sequence.\n    \"\"\"\n    # Ensure input is a NumPy array and create a copy for the output\n    arr = np.array(input_sequence)\n    output_arr = arr.copy()\n\n    # 1. Identify all non-zero runs\n    runs = find_runs(arr)\n\n    # 5. If no non-zero runs are found, return the original array\n    if not runs:\n        return output_arr\n\n    # 2. Determine the maximum length among the runs\n    max_length = 0\n    for run in runs:\n        max_length = max(max_length, run['length'])\n\n    # 3. Select the longest run (first one encountered if tie)\n    selected_run = None\n    for run in runs:\n        if run['length'] == max_length:\n            selected_run = run\n            # Since find_runs finds runs from left to right,\n            # the first one we encounter with max_length is the leftmost one.\n            break\n\n    # Should always find a run if runs is not empty, but check defensively\n    if selected_run is None:\n         return output_arr\n\n    # 4. Replace the elements of the selected run with '1' in the output array\n    start_index = selected_run['start']\n    run_length = selected_run['length']\n    # Use array slicing for efficient replacement\n    output_arr[start_index : start_index + run_length] = 1\n\n    return output_arr\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5771,
    "candidates_token_count": 1934,
    "total_token_count": 7705,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 18.779913,
  "retries": 1
}