{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input 1D NumPy array of integers based on the position of the first occurrence of the number 2.\nIf 2 is found, the portion of the array *before* the first 2 is modified: all zero elements are moved to the beginning of this portion, and all non-zero elements are moved after the zeros, preserving their relative order. The portion of the array starting from the first 2 onwards remains unchanged.\nIf 2 is not present, or if it is the first element, the array remains unchanged.\n\"\"\"\n\nimport numpy as np\nimport collections # Although not strictly needed now, kept for potential future list operations\n\ndef find_first_occurrence(sequence: list, target: int) -> int:\n    \"\"\"\n    Finds the index of the first occurrence of target in the sequence (list).\n    Returns -1 if the target is not found.\n    \"\"\"\n    try:\n        return sequence.index(target)\n    except ValueError:\n        return -1 # Indicate not found\n\ndef segregate_and_reorder(sub_sequence: list) -> list:\n    \"\"\"\n    Separates zero elements from non-zero elements in a list,\n    then returns a new list with zeros first, followed by the non-zeros,\n    preserving the relative order of the non-zero elements.\n    \"\"\"\n    # Extract zero elements\n    zeros = [elem for elem in sub_sequence if elem == 0]\n    # Extract non-zero elements, maintaining order\n    non_zeros = [elem for elem in sub_sequence if elem != 0]\n    # Combine them with zeros first\n    return zeros + non_zeros\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the transformation rule to the input NumPy array.\n    \"\"\"\n    # Convert NumPy array to list for easier manipulation\n    input_list = input_grid.tolist()\n\n    # Define the separator value\n    separator_value = 2\n\n    # Find the index of the first occurrence of the separator\n    separator_index = find_first_occurrence(input_list, separator_value)\n\n    # Handle cases where no transformation is needed:\n    # 1. Separator not found\n    # 2. Separator is the first element (left part is empty)\n    if separator_index == -1 or separator_index == 0:\n        # Return the original grid as no changes are made\n        return input_grid\n\n    # Partition the list into left and right parts based on the separator index\n    left_part = input_list[:separator_index]\n    right_part = input_list[separator_index:] # Includes the separator\n\n    # Segregate zeros and non-zeros in the left part and reorder\n    reordered_left_part = segregate_and_reorder(left_part)\n\n    # Concatenate the reordered left part with the original right part\n    output_list = reordered_left_part + right_part\n\n    # Convert the final list back to a NumPy array\n    output_grid = np.array(output_list, dtype=input_grid.dtype) # Preserve original dtype\n\n    # Return the transformed grid\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6129,
    "candidates_token_count": 1119,
    "total_token_count": 7248,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.24687,
  "retries": 1
}