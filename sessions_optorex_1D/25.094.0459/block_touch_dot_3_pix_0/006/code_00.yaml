Task: Reorder elements preceding a specific separator within a sequence.

Objects:
  - name: sequence
    type: List[int]
    description: A 1D list of integers representing the input and output data structure.
  - name: element
    type: int
    description: An individual integer within the sequence.
    properties:
      - role: Can be 'space' (value 0), 'separator' (value 2), or 'movable' (any other non-zero integer).

Region:
  - name: separator_location
    type: int
    description: The index of the first occurrence of the 'separator' element (2). Set to -1 if not present.
  - name: left_part
    type: List[int]
    description: >
      The sub-sequence containing elements from the start of the original sequence
      up to (but not including) the 'separator_location'.
      If 'separator_location' is 0 or -1, this part is considered empty or effectively non-existent for reordering purposes.
  - name: right_part
    type: List[int]
    description: >
      The sub-sequence containing elements from the 'separator_location'
      to the end of the original sequence.
      If 'separator_location' is -1, this part is considered empty.

Action:
  - name: find_separator
    input: sequence
    output: separator_location
    description: Locate the index of the first element with value 2.
  - name: partition
    input: sequence, separator_location
    output: left_part, right_part
    description: >
      Split the sequence based on the 'separator_location'.
      If 'separator_location' <= 0, the 'left_part' is effectively empty for reordering,
      and the 'right_part' is the entire sequence (if index 0) or empty (if index -1).
  - name: segregate_and_reorder
    input: left_part
    output: reordered_left_part
    description: >
      Process the 'left_part' (if it exists and is non-empty):
      1. Collect all 'space' elements (0).
      2. Collect all 'movable' elements (non-zero), preserving their relative order.
      3. Construct 'reordered_left_part' by concatenating the collected 'space' elements followed by the collected 'movable' elements.
      If 'left_part' is empty, 'reordered_left_part' is also empty.
  - name: reconstruct
    input: reordered_left_part, right_part
    output: output_sequence
    description: >
      Concatenate the 'reordered_left_part' and the original 'right_part'
      to form the final output sequence.
      If no reordering occurred (separator at index 0 or -1, or left part already sorted), this effectively returns the original sequence.

Relationships:
  - The 'separator' element (2) acts as a fixed boundary; its position and the elements after it ('right_part') are invariant.
  - The transformation only affects the elements *before* the first 'separator' ('left_part').
  - Within the 'left_part', the relative order of 'movable' (non-zero) elements is preserved during the reordering.
  - 'Space' elements (0) within the 'left_part' are moved to the beginning of that part.