Input:
  Type: numpy.ndarray
  Shape: 1D array (variable length)
  DType: Integer
  Elements: Single-digit non-negative integers (0-9 observed)
Output:
  Type: numpy.ndarray
  Shape: 1D array (same length as input)
  DType: Integer
  Elements: Single-digit non-negative integers (0-9 observed)
Core_Objects:
  - Pivot:
      Value: 2
      Role: Separates the array into two processing sections based on its first occurrence. Remains in its original position relative to the processed sections.
  - Zero:
      Value: 0
      Role: Mobile element. Its final position depends on whether it was originally before or after the pivot, and potentially on other elements in the 'before' section.
  - NonZeroDigit:
      Value: Any digit 1, 3, 4, 5, 8, 9 (observed)
      Role: Generally static relative to other NonZeroDigits within their section (before/after pivot). Their absolute position shifts to accommodate moved zeros.
Actions:
  - Find_Pivot: Locate the index of the first occurrence of the integer 2. If not found, return the input unchanged.
  - Partition: Split the array into three parts: `before_pivot`, `pivot` (the element 2), `after_pivot`.
  - Process_After_Pivot:
      Action: Rearrange `after_pivot`.
      Rule: Move all 0s to the end of this section. Non-zero digits maintain their relative order at the beginning.
  - Process_Before_Pivot:
      Action: Rearrange `before_pivot`.
      Condition_Check: Determine if this section contains *only* 3s and 0s (and at least one of each).
      Rule_Special_Case (if condition met): Move all 0s except one to the start. Place all 3s next. Place the remaining one 0 at the end.
      Rule_General_Case (if condition not met): Move all 0s to the start. Non-zero digits maintain their relative order after the 0s.
  - Combine: Concatenate `processed_before_pivot`, the `pivot` element (2), and `processed_after_pivot`.