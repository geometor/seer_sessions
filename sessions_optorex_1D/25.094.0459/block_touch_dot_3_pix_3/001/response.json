{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation rule operates on a sequence of single-digit integers. \nIt identifies the first occurrence of the digit '2' as a pivot point.\nThe sequence is split into two parts: the portion before the first '2' and the portion after it.\n\nFor the part *before* the '2':\nAll '0's are collected and moved to the beginning of this part.\nThe remaining non-zero digits maintain their original relative order after the moved '0's.\n\nFor the part *after* the '2':\nAll '0's are collected and moved to the end of this part.\nThe remaining non-zero digits maintain their original relative order before the moved '0's.\n\nThe final output sequence is constructed by concatenating:\n1. The processed part before the '2'.\n2. The pivot digit '2'.\n3. The processed part after the '2'.\n\nIf '2' is not present, the sequence remains unchanged (although all examples contain '2').\nThe input and output are space-separated strings of digits.\n\"\"\"\n\nimport math\nimport numpy as np # Although not strictly needed for this logic, good practice to import if potentially useful\n\ndef parse_input(input_str: str) -> list[int]:\n    \"\"\"Converts the space-separated string of digits into a list of integers.\"\"\"\n    return [int(digit) for digit in input_str.split()]\n\ndef format_output(output_list: list[int]) -> str:\n    \"\"\"Converts the list of integers back into a space-separated string.\"\"\"\n    return \" \".join(map(str, output_list))\n\ndef process_section(section: list[int], zeros_at_start: bool) -> list[int]:\n    \"\"\"\n    Rearranges a list section by moving zeros to either the start or end.\n    \n    Args:\n        section: The list of integers to process.\n        zeros_at_start: If True, move zeros to the start; otherwise, move to the end.\n\n    Returns:\n        The rearranged list section.\n    \"\"\"\n    if not section:\n        return []\n        \n    zeros = [digit for digit in section if digit == 0]\n    non_zeros = [digit for digit in section if digit != 0]\n    \n    if zeros_at_start:\n        return zeros + non_zeros\n    else:\n        return non_zeros + zeros\n\ndef transform(input_str: str) -> str:\n    \"\"\"\n    Applies the described transformation rule to the input string sequence.\n    \n    Args:\n        input_str: A space-separated string of single-digit integers.\n\n    Returns:\n        A space-separated string representing the transformed sequence.\n    \"\"\"\n    # Convert input string to a list of integers\n    input_list = parse_input(input_str)\n    \n    # Find the index of the first '2'\n    pivot_index = -1\n    try:\n        pivot_index = input_list.index(2)\n    except ValueError:\n        # If '2' is not found, return the original string (as per observation)\n        return input_str\n\n    # Split the list into sections based on the pivot\n    before_2 = input_list[:pivot_index]\n    after_2 = input_list[pivot_index+1:]\n    \n    # Process the section before '2' (zeros go to the start)\n    processed_before_2 = process_section(before_2, zeros_at_start=True)\n    \n    # Process the section after '2' (zeros go to the end)\n    processed_after_2 = process_section(after_2, zeros_at_start=False)\n    \n    # Combine the processed sections with the pivot '2'\n    output_list = processed_before_2 + [2] + processed_after_2\n    \n    # Format the result list back into a string\n    output_str = format_output(output_list)\n    \n    return output_str\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1147,
    "candidates_token_count": 2428,
    "total_token_count": 3575,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 20.906701,
  "retries": 1
}