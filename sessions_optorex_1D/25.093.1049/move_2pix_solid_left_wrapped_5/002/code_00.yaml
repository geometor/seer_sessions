task_elements:
  - object: sequence
    properties:
      - type: numpy.ndarray (or list of integers)
      - content: digits (0-9)
      - length: 12
    roles:
      - input
      - output
  - object: digit
    properties:
      - value: integer (0-9)
    attributes:
      - is_zero: boolean
      - is_non_zero: boolean
  - object: position
    properties:
      - type: index
      - range: 0 to 11
action:
  - name: identify_non_zeros
    inputs: input_sequence (numpy.ndarray or list)
    outputs: list_of_non_zero_elements_with_indices
  - name: calculate_new_position
    inputs: original_index
    parameters:
      - shift_amount: -2
      - sequence_length: 12
    outputs: target_index
    logic: (original_index + shift_amount) mod sequence_length
  - name: place_elements
    inputs:
      - target_index
      - element_value
      - output_sequence (initially all zeros)
    outputs: updated_output_sequence
  - name: construct_output
    inputs: input_sequence (numpy.ndarray or list)
    outputs: output_sequence (numpy.ndarray or list)
    process:
      1. Initialize output_sequence of same length as input, filled with zeros.
      2. Iterate through input_sequence with index `i`.
      3. If element `input_sequence[i]` is not zero:
         a. Calculate `target_index = (i - 2) % sequence_length`.
         b. Set `output_sequence[target_index] = input_sequence[i]`.
      4. Return output_sequence.
relationship:
  - type: positional_mapping
    from: input_sequence non-zero element at index `i`
    to: output_sequence element at index `(i - 2) mod 12`
  - type: default_value
    condition: position in output_sequence not filled by a mapped non-zero element
    action: set value to 0 (handled by initialization)