{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport math # common libraries are available\nimport numpy as np # common libraries are available\n\n\"\"\"\nTransforms a sequence of integers based on the following rule:\n1. Find the start and end indices (`block_start_index`, `block_end_index`) of the first contiguous block of non-zero numbers.\n2. If no non-zero block exists, the sequence remains unchanged.\n3. Search the sequence *after* this block (from index `block_end_index + 1` onwards) for the first index `i` where `sequence[i]` is 0 and `sequence[i+1]` is non-zero.\n4. If no such index `i` is found after the block, the sequence remains unchanged.\n5. If such an index `i` is found, move the element `sequence[i]` (the zero) to the `block_start_index`. The elements originally from `block_start_index` to `i-1` are shifted one position to the right to accommodate the inserted zero.\n6. Only the first non-zero block and the first qualifying zero found after it trigger this transformation.\n\"\"\"\n\ndef parse_input(input_data) -> list[int]:\n    \"\"\"Parses the input into a list of integers.\"\"\"\n    # Handle potential numpy array input specifically\n    if isinstance(input_data, np.ndarray):\n        # Flatten if multi-dimensional, though examples suggest 1D/row focus\n        input_list = input_data.flatten().tolist()\n    # Handle string input\n    elif isinstance(input_data, str):\n        # Split the string by spaces and convert each part to an integer\n        input_list = [int(x) for x in input_data.split()]\n    # Handle list input (ensure elements are integers)\n    elif isinstance(input_data, list):\n        input_list = [int(x) for x in input_data]\n    else:\n        raise TypeError(f\"Unsupported input type: {type(input_data)}\")\n    return input_list\n\ndef format_output(output_list: list[int]) -> str:\n    \"\"\"Formats the list of integers back into a space-separated string.\"\"\"\n    return \" \".join(map(str, output_list))\n\ndef find_first_non_zero_block(sequence: list[int]) -> tuple[int, int]:\n    \"\"\"\n    Finds the start and end indices of the first contiguous block of non-zero numbers.\n\n    Args:\n        sequence: The list of integers.\n\n    Returns:\n        A tuple (start_index, end_index). Returns (-1, -1) if no non-zero block is found.\n    \"\"\"\n    start_index = -1\n    end_index = -1\n    n = len(sequence)\n\n    # Find the start of the first block\n    for i in range(n):\n        if sequence[i] != 0:\n            start_index = i\n            break\n\n    # If no non-zero number was found, return (-1, -1)\n    if start_index == -1:\n        return -1, -1\n\n    # Find the end of this block\n    end_index = start_index\n    for i in range(start_index + 1, n):\n        if sequence[i] != 0:\n            end_index = i\n        else:\n            # The block ends at the previous index\n            break\n\n    return start_index, end_index\n\ndef find_first_zero_pattern_after(sequence: list[int], start_scan_index: int) -> int:\n    \"\"\"\n    Finds the index 'i' of the first '0 followed by non-zero' pattern,\n    starting the scan from a given index.\n\n    Args:\n        sequence: The list of integers.\n        start_scan_index: The index from which to start scanning (inclusive).\n\n    Returns:\n        The index `i` where sequence[i] == 0 and sequence[i+1] != 0,\n        or -1 if no such pattern is found from the start_scan_index onwards.\n    \"\"\"\n    n = len(sequence)\n    # Iterate from the start scan index up to the second-to-last element\n    for i in range(start_scan_index, n - 1):\n        # Check the pattern: current element is 0, next is non-zero\n        if sequence[i] == 0 and sequence[i+1] != 0:\n            return i # Found the pattern at index i\n\n    # If the loop completes without finding the pattern\n    return -1\n\ndef transform(input_data) -> str:\n    \"\"\"\n    Applies the transformation rule to the input sequence.\n    Input can be a space-separated string, a list of ints, or a numpy array.\n    Output is a space-separated string.\n    \"\"\"\n    # 1. Parse Input\n    sequence = parse_input(input_data)\n    n = len(sequence)\n    # Create a mutable copy for potential modification\n    output_sequence = list(sequence)\n\n    # 2. Identify First Non-Zero Block\n    block_start_index, block_end_index = find_first_non_zero_block(output_sequence)\n\n    # 3. Handle No Block Case\n    if block_start_index == -1:\n        # If no non-zero block found, return the original sequence formatted as string\n        return format_output(output_sequence)\n\n    # 4. Search for Pattern After Block\n    # Start searching from the index immediately after the block ends\n    scan_start_index = block_end_index + 1\n    zero_to_move_index = find_first_zero_pattern_after(output_sequence, scan_start_index)\n\n    # 5. Handle No Pattern Case\n    if zero_to_move_index == -1:\n        # If the '0 followed by non-zero' pattern is not found after the block,\n        # return the original sequence formatted as string\n        return format_output(output_sequence)\n\n    # 6. Perform Move Operation\n    # Only proceed if both the block and the pattern were found\n    # a. Temporarily store and remove the zero from its original position\n    zero_value = output_sequence.pop(zero_to_move_index)\n    # b. Insert the stored zero value at the start index of the non-zero block\n    output_sequence.insert(block_start_index, zero_value)\n\n    # 7. Output Result\n    # Format the modified list into a space-separated string\n    return format_output(output_sequence)\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8023,
    "candidates_token_count": 1821,
    "total_token_count": 9844,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.950912,
  "retries": 1
}