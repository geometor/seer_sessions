objects:
  - name: sequence
    type: list of integers
    description: The input and output data structure, a 1D sequence of digits.
  - name: element
    type: integer
    description: Individual number within the sequence.
  - name: non_zero_block
    type: contiguous sub-sequence
    description: A sequence of one or more adjacent non-zero elements.
    properties:
      - name: start_index
        type: integer
        description: Index of the first element in the block.
      - name: end_index
        type: integer
        description: Index of the last element in the block.
  - name: zero_pattern
    type: specific pair of adjacent elements
    description: An element with value 0 immediately followed by an element with a non-zero value.
    properties:
      - name: index
        type: integer
        description: Index of the zero element in the pattern (e.g., index `i` for `seq[i]==0` and `seq[i+1]!=0`).

relationships:
  - type: positional
    description: Elements exist at specific indices within the sequence.
  - type: adjacency
    description: Elements can have left and right neighbors.
  - type: precedence
    description: Sub-sequences or patterns can occur before or after others (e.g., zero_pattern occurs *after* non_zero_block).

actions:
  - name: find_first_non_zero_block
    description: Scan the sequence from left to right to identify the start and end indices of the *first* contiguous block of non-zero numbers.
    outputs: block_start_index, block_end_index (or indicates none found).
  - name: find_first_zero_pattern_after_block
    description: Scan the sequence, starting *after* the found non_zero_block (from index `block_end_index + 1`), to find the *first* index `i` where element `i` is 0 and element `i+1` is non-zero.
    condition: Requires a non_zero_block to have been found.
    inputs: sequence, block_end_index.
    outputs: index `i` of the zero in the pattern (or indicates none found).
  - name: move_element
    description: Remove an element from one position and insert it at another, shifting subsequent elements.
    condition: Requires both a non_zero_block and a subsequent zero_pattern to be found.
    inputs: sequence, source_index (index `i` from find_first_zero_pattern_after_block), destination_index (block_start_index).
    operation: Remove element at source_index, insert it at destination_index.
  - name: no_change
    description: The sequence remains unaltered.
    condition: Occurs if no non_zero_block is found, or if no zero_pattern is found after the first non_zero_block.