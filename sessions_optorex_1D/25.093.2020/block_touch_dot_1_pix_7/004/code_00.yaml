elements:
  - object: sequence
    description: A list or 1D array of 12 integers representing the input and output state. Fixed length of 12.
  - object: marker_2
    description: The integer '2' acting as a fixed reference point within the sequence.
    properties:
      - position: The index of '2' in the sequence (0-based). Assumed to be present exactly once.
  - object: block
    description: A contiguous subsequence of one or more non-zero integers, where none of the integers are '2'.
    properties:
      - values: The sequence of integers comprising the block.
      - start_index: The starting index of the block in the sequence.
      - end_index: The ending index of the block in the sequence.
      - relation_to_marker: The block's position relative to 'marker_2'. Can be 'before', 'after', or 'adjacent'.
  - object: integer_0
    description: The integer '0', acting as background or separator.

actions:
  - action: find_marker_position
    description: Locate the index of 'marker_2' in the input sequence.
  - action: identify_blocks
    description: Find all 'block' objects in the input sequence, recording their start and end indices.
  - action: check_adjacency
    description: For each block, determine if it is immediately adjacent to 'marker_2'. Adjacency means `block.end_index == marker_position - 1` or `block.start_index == marker_position + 1`.
  - action: determine_relative_location
    description: For non-adjacent blocks, determine if the block is entirely before (`block.end_index < marker_position`) or entirely after (`block.start_index > marker_position`) the 'marker_2'.
  - action: shift_block_right
    description: Create space by setting the block's original `start_index` to '0' in the output sequence, then copy the block's values to the range `start_index + 1` to `end_index + 1` in the output sequence. Only performed if `end_index + 1` is within sequence bounds.
  - action: shift_block_left
    description: Create space by setting the block's original `end_index` to '0' in the output sequence, then copy the block's values to the range `start_index - 1` to `end_index - 1` in the output sequence. Only performed if `start_index - 1` is within sequence bounds.
  - action: copy_sequence
    description: Create a modifiable copy of the input sequence to build the output, ensuring modifications for one block don't affect the position checks for others based on the original input.

relationships:
  - relationship: transformation_rule
    description: The transformation depends on the position and adjacency of blocks relative to 'marker_2'.
    steps:
      - Initialize output sequence as a copy of the input sequence.
      - Find 'marker_2' position.
      - Identify all blocks in the *input* sequence.
      - For each block:
        - If the block is adjacent to 'marker_2', it remains unchanged in the output sequence.
        - If the block is non-adjacent and located before 'marker_2', perform `shift_block_right` on the output sequence.
        - If the block is non-adjacent and located after 'marker_2', perform `shift_block_left` on the output sequence.
      - Return the modified output sequence.