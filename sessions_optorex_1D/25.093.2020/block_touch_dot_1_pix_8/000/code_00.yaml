objects:
  - name: input_list
    type: list
    properties:
      - elements: single-digit integers (0-9)
  - name: output_list
    type: list
    properties:
      - elements: single-digit integers (0-9)
      - derived_from: input_list
  - name: subsequence
    type: list
    properties:
      - elements: identical non-zero integers
      - contiguous: true
      - length: variable
      - location: defined by start_index and end_index within input_list
      - characteristic: longest matching sequence in the input_list
  - name: preceding_element
    type: integer
    properties:
      - location: input_list[start_index - 1]
      - exists: if start_index > 0
  - name: succeeding_element
    type: integer
    properties:
      - location: input_list[end_index + 1]
      - exists: if end_index < length(input_list) - 1
  - name: blocker_value
    type: integer
    value: 2

actions:
  - name: find_longest_subsequence
    input: input_list
    output: subsequence (including its start_index, end_index, and value)
    description: Iterates through the list to find the longest run of identical non-zero numbers.
  - name: check_neighbors
    input: input_list, subsequence (start_index, end_index)
    output: boolean (swap_allowed)
    description: Checks if preceding_element (if exists) is not 2 AND succeeding_element (if exists) is not 2.
  - name: perform_swap
    input: input_list, subsequence (start_index, end_index), swap_allowed
    output: output_list
    description: >
      If swap_allowed is true:
      If start_index > 0, swaps the subsequence (elements from start_index to end_index)
      with the preceding_element (at start_index - 1).
      If start_index == 0, swaps the subsequence (elements from start_index to end_index)
      with the succeeding_element (at end_index + 1).
      If swap_allowed is false, returns the input_list unchanged.

relationships:
  - The output_list is a transformation of the input_list.
  - The transformation centers around the longest contiguous subsequence of identical non-zero numbers.
  - The applicability of the swap action depends on the values of the elements adjacent to this subsequence.
  - The value '2' specifically prevents the swap action if it is adjacent to the subsequence.