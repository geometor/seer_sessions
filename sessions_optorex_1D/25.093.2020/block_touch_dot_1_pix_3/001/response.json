{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport re\n\n\"\"\"\nThe transformation rule identifies a single, stationary pivot digit '2' within a sequence of 12 digits. \nIt then locates the first contiguous block of non-zero digits (excluding the pivot '2').\nIf this block is located entirely to the left of the pivot '2', and there is a '0' immediately to the right of the block, the block is shifted one position to the right, swapping places with that '0'.\nIf the block is located entirely to the right of the pivot '2', and there is a '0' immediately to the left of the block, the block is shifted one position to the left, swapping places with that '0'.\nThe pivot '2' and any other '0's remain in their positions unless directly involved in the swap.\nThe output is the modified sequence of digits, formatted as a space-separated string.\n\"\"\"\n\ndef parse_input(input_str: str) -> list[int]:\n    \"\"\"Converts the space-separated input string into a list of integers.\"\"\"\n    return [int(d) for d in input_str.split()]\n\ndef format_output(output_list: list[int]) -> str:\n    \"\"\"Converts the list of integers back into a space-separated string.\"\"\"\n    return \" \".join(map(str, output_list))\n\ndef find_pivot_index(grid: list[int]) -> int:\n    \"\"\"Finds the index of the pivot digit '2'.\"\"\"\n    try:\n        return grid.index(2)\n    except ValueError:\n        # Should not happen based on problem description, but good practice\n        return -1 \n\ndef find_movable_block(grid: list[int], pivot_index: int) -> tuple[int | None, int | None]:\n    \"\"\"\n    Finds the start and end indices of the first contiguous block of \n    non-zero digits (excluding the pivot '2').\n    Returns (None, None) if no such block is found.\n    \"\"\"\n    start_index = None\n    for i, digit in enumerate(grid):\n        if digit != 0 and i != pivot_index:\n            # Found the start of a potential block\n            start_index = i\n            # Find the end of this block\n            end_index = i\n            for j in range(i + 1, len(grid)):\n                if grid[j] == 0 or j == pivot_index:\n                    break # Block ends here\n                end_index = j\n            return start_index, end_index\n        \n    return None, None # No block found\n\ndef transform(input_str: str) -> str:\n    \"\"\"\n    Applies the transformation rule to the input string.\n    \n    1. Parses the input string into a list of integers.\n    2. Finds the index of the pivot '2'.\n    3. Finds the contiguous block of non-zero, non-'2' digits.\n    4. Determines if the block is left or right of the pivot.\n    5. Checks for an adjacent '0' in the appropriate direction for swapping.\n    6. Performs the shift and swap if conditions are met.\n    7. Formats the resulting list back into a string.\n    \"\"\"\n    # 1. Parse input\n    grid = parse_input(input_str)\n    output_grid = list(grid) # Work on a copy\n\n    # 2. Find pivot\n    pivot_index = find_pivot_index(grid)\n    if pivot_index == -1:\n        # Handle error case if '2' is not found (though examples imply it's always there)\n        return input_str \n\n    # 3. Find the block to move\n    start_index, end_index = find_movable_block(grid, pivot_index)\n\n    # 4. Determine direction and perform shift/swap if possible\n    if start_index is not None and end_index is not None:\n        block_content = grid[start_index : end_index + 1]\n        \n        # 4a. Block is to the left of the pivot\n        if end_index < pivot_index:\n            # Check if a swap to the right is possible\n            swap_pos = end_index + 1\n            if swap_pos < len(grid) and grid[swap_pos] == 0:\n                # Perform right shift: place 0 at start, block at start+1\n                output_grid[start_index] = 0\n                output_grid[start_index + 1 : end_index + 2] = block_content\n                \n        # 4b. Block is to the right of the pivot\n        elif start_index > pivot_index:\n            # Check if a swap to the left is possible\n            swap_pos = start_index - 1\n            if swap_pos >= 0 and grid[swap_pos] == 0:\n                 # Perform left shift: place 0 at end, block at start-1\n                 output_grid[end_index] = 0\n                 output_grid[start_index - 1 : end_index] = block_content\n\n    # 7. Format output\n    return format_output(output_grid)\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2066,
    "candidates_token_count": 2196,
    "total_token_count": 4262,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 18.944226,
  "retries": 1
}