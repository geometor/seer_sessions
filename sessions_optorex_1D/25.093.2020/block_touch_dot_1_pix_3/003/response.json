{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np # Import numpy, common for grid manipulation\nfrom typing import List, Tuple, Optional # For type hinting\n\n\"\"\"\nThe transformation rule identifies a single, stationary pivot digit '2' within a sequence (list or array) of 12 digits. \nIt then locates the first contiguous block of non-zero digits (excluding the pivot '2').\nIf this block is located entirely to the left of the pivot '2', and there is a '0' immediately to the right of the block, the block is shifted one position to the right, swapping places with that '0'.\nIf the block is located entirely to the right of the pivot '2', and there is a '0' immediately to the left of the block, the block is shifted one position to the left, swapping places with that '0'.\nThe pivot '2' and any other '0's remain in their positions unless directly involved in the swap.\nThe function takes a list or NumPy array as input and returns a NumPy array representing the modified sequence.\n\"\"\"\n\ndef find_pivot_index(grid: List[int]) -> Optional[int]:\n    \"\"\"Finds the index of the pivot digit '2'.\"\"\"\n    try:\n        # Convert to list if it's a numpy array for index() method\n        return list(grid).index(2) \n    except ValueError:\n        return None # Pivot '2' not found\n\ndef find_movable_block(grid: List[int], pivot_index: Optional[int]) -> Optional[Tuple[int, int]]:\n    \"\"\"\n    Finds the start and end indices of the first contiguous block of \n    non-zero digits (excluding the pivot '2').\n    Returns (start_index, end_index) or None if no such block is found.\n    \"\"\"\n    start_index = -1\n    for i, digit in enumerate(grid):\n        # Start block if digit is non-zero and not the pivot\n        if digit != 0 and i != pivot_index:\n            start_index = i\n            # Find the end of this block\n            end_index = i\n            for j in range(i + 1, len(grid)):\n                # Block ends if we hit a zero or the pivot\n                if grid[j] == 0 or j == pivot_index:\n                    break \n                end_index = j\n            # Return the first block found\n            return start_index, end_index \n            \n    return None # No block found\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the block shifting transformation based on the pivot '2'.\n\n    Args:\n        input_grid: A numpy array of 12 integers.\n\n    Returns:\n        A numpy array representing the transformed grid.\n    \"\"\"\n    # Work on a copy to avoid modifying the original input array\n    output_grid = np.copy(input_grid)\n    grid_list = list(output_grid) # Use list for easier index/slice manipulation\n    n = len(grid_list)\n\n    # 1. Find the pivot ('2') index\n    pivot_index = find_pivot_index(grid_list)\n    if pivot_index is None:\n        # If no pivot '2' is found, return the original grid\n        return output_grid \n\n    # 2. Find the block to potentially move\n    block_indices = find_movable_block(grid_list, pivot_index)\n\n    # 3. If a block is found, determine position and attempt shift/swap\n    if block_indices:\n        start_index, end_index = block_indices\n        block_content = grid_list[start_index : end_index + 1]\n        \n        # 3a. Check if block is to the LEFT of the pivot\n        if end_index < pivot_index:\n            # Check if a swap to the RIGHT is possible (adjacent '0')\n            swap_pos = end_index + 1\n            if swap_pos < n and grid_list[swap_pos] == 0:\n                # Perform right shift: place 0 at start, block content at start+1\n                grid_list[start_index] = 0\n                grid_list[start_index + 1 : end_index + 2] = block_content\n                \n        # 3b. Check if block is to the RIGHT of the pivot\n        elif start_index > pivot_index:\n            # Check if a swap to the LEFT is possible (adjacent '0')\n            swap_pos = start_index - 1\n            if swap_pos >= 0 and grid_list[swap_pos] == 0:\n                 # Perform left shift: place 0 at end, block content at start-1\n                 grid_list[end_index] = 0\n                 grid_list[start_index - 1 : end_index] = block_content\n\n    # 4. Convert the potentially modified list back to a numpy array\n    output_grid = np.array(grid_list)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7479,
    "candidates_token_count": 1408,
    "total_token_count": 8887,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.884869,
  "retries": 1
}