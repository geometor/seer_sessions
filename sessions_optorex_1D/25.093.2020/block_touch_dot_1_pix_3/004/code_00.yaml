Task: Shift a single contiguous block of digits towards a fixed pivot '2' by swapping with an adjacent '0'.

Input: List[int] of length 12.
Output: List[int] of length 12.

Objects:
  - name: Grid
    type: List[int]
    length: 12
    elements: Digits 0-9
  - name: Pivot
    type: Digit
    value: 2
    property: Stationary reference point, appears exactly once.
  - name: Block
    type: Contiguous Subsequence (List[int])
    elements: Digits 1, 3-9 (non-zero, non-pivot)
    property: Mobile, appears exactly once per input grid based on examples.
  - name: Space
    type: Digit
    value: 0
    property: Background, enables Block movement via swap.

Relationships:
  - type: Relative Position
    object1: Block
    object2: Pivot Index
    states: [BlockEndsBeforePivot, BlockStartsAfterPivot]
  - type: Adjacency & Value Check
    object1: Block
    object2: Space (value 0)
    conditions:
      - If BlockEndsBeforePivot, check if Grid[BlockEndIndex + 1] == 0.
      - If BlockStartsAfterPivot, check if Grid[BlockStartIndex - 1] == 0.
    property: These conditions are always met in the provided examples.

Actions:
  - name: Identify Pivot
    input: Grid
    output: pivot_index
  - name: Identify Block
    input: Grid, pivot_index
    output: block_start_index, block_end_index, block_content
    description: Find the first contiguous sequence of digits != 0 and index != pivot_index.
  - name: Determine Shift Direction and Target Zero
    input: block_start_index, block_end_index, pivot_index
    output: shift_direction ('Left' or 'Right'), zero_swap_index
    logic: |
      if block_end_index < pivot_index: shift_direction = 'Right', zero_swap_index = block_end_index + 1
      if block_start_index > pivot_index: shift_direction = 'Left', zero_swap_index = block_start_index - 1
  - name: Perform Swap and Shift
    input: Grid, block_start_index, block_end_index, block_content, shift_direction, zero_swap_index
    output: Modified Grid
    logic: |
      Create a copy of the Grid.
      if shift_direction == 'Right':
        Place 0 at original block_start_index.
        Place block_content starting at block_start_index + 1.
      if shift_direction == 'Left':
        Place 0 at original block_end_index.
        Place block_content starting at block_start_index - 1.
    implementation_note: Use list slicing assignment carefully.