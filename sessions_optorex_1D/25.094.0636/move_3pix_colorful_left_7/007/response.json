{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List\n\n\"\"\"\nTransforms a sequence of 12 digits based on the following rule:\nIdentify the sub-sequence spanning from the first non-zero digit to the last non-zero digit in the input sequence.\nCalculate a target start index by subtracting 3 (shift_amount) from the index of the first non-zero digit.\nConstruct the output sequence of length 12, initially filled with zeros.\nPlace the identified sub-sequence into the output sequence starting at the target start index.\nHandle boundary conditions: If the target start index is negative, truncate the beginning of the sub-sequence before placing it (starting placement at index 0). If placing the sub-sequence exceeds the sequence length, truncate the end of the sub-sequence.\nIf the input sequence contains no non-zero digits, the output sequence is identical to the input sequence.\n\"\"\"\n\ndef _find_non_zero_boundaries(sequence: np.ndarray) -> tuple[int, int]:\n    \"\"\"\n    Finds the indices of the first and last non-zero elements in a NumPy array.\n\n    Args:\n        sequence: The input NumPy array.\n\n    Returns:\n        A tuple (start_index, end_index). Returns (-1, -1) if no non-zero elements exist.\n    \"\"\"\n    non_zero_indices = np.nonzero(sequence)[0]\n    if len(non_zero_indices) == 0:\n        return -1, -1\n    else:\n        return non_zero_indices[0], non_zero_indices[-1]\n\ndef transform(input_sequence: List[int]) -> List[int]:\n    \"\"\"\n    Applies the transformation rule to the input sequence.\n\n    Args:\n        input_sequence: A list of 12 integers.\n\n    Returns:\n        A list representing the transformed sequence of 12 integers.\n    \"\"\"\n    # Define constants\n    sequence_length = 12\n    shift_amount = 3\n    padding_value = 0\n\n    # Convert input list to numpy array for efficient processing\n    input_array = np.array(input_sequence, dtype=int)\n\n    # --- Step 1 & 2: Find the boundaries of the non-zero sub-sequence ---\n    start_index, end_index = _find_non_zero_boundaries(input_array)\n\n    # --- Step 3: Handle the case where the input is all zeros ---\n    if start_index == -1:\n        # If no non-zero elements, return the original sequence as a list\n        return input_sequence # Or list(input_array) which is equivalent\n\n    # --- Step 4: Extract the sub-sequence ---\n    sub_sequence = input_array[start_index : end_index + 1]\n    sub_len = len(sub_sequence)\n\n    # --- Step 5: Calculate the target starting index for the output ---\n    target_start_index = start_index - shift_amount\n\n    # --- Step 6: Create a new output array initialized with zeros ---\n    output_array = np.full(sequence_length, padding_value, dtype=int)\n\n    # --- Step 7: Determine placement boundaries and copy sub-sequence ---\n    # Calculate the actual start and end indices for the destination (output) array\n    dest_start = max(0, target_start_index)\n    dest_end = min(sequence_length, target_start_index + sub_len)\n\n    # Calculate the corresponding start and end indices for the source (sub_sequence) array\n    source_start = max(0, -target_start_index) # How many elements to skip from the start of sub_sequence\n    source_end = source_start + (dest_end - dest_start) # Calculate end based on how many elements actually fit\n\n    # --- Step 8: Place the adjusted sub-sequence into the output array ---\n    # Only perform the assignment if there's a valid range (destination start < destination end)\n    if dest_start < dest_end:\n        output_array[dest_start:dest_end] = sub_sequence[source_start:source_end]\n\n    # --- Step 9: Return the final output sequence as a list ---\n    return output_array.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 10545,
    "candidates_token_count": 1543,
    "total_token_count": 12088,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.362107,
  "retries": 1
}