{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Union\n\n\"\"\"\nIf the input sequence contains non-zero digits, extract the sub-sequence between the first and last non-zero digits (inclusive) and shift it 3 positions to the left within a sequence of 12 digits, padding the remaining positions with zeros. If the input sequence contains only zeros, the output sequence is identical to the input.\n\"\"\"\n\ndef _find_first_nonzero_index(data_list: Union[List[int], np.ndarray]) -> int:\n  \"\"\"Finds the index of the first non-zero element.\"\"\"\n  for i, val in enumerate(data_list):\n    if val != 0:\n      return i\n  return -1 # Return -1 if no non-zero element is found\n\ndef _find_last_nonzero_index(data_list: Union[List[int], np.ndarray]) -> int:\n  \"\"\"Finds the index of the last non-zero element.\"\"\"\n  last_index = -1\n  # Iterate backwards for efficiency, but iterating forwards works too\n  for i in range(len(data_list) - 1, -1, -1):\n      if data_list[i] != 0:\n          return i\n  return -1 # Return -1 if no non-zero element is found\n\ndef transform(input_sequence: Union[List[int], np.ndarray]) -> List[int]:\n    \"\"\"\n    Applies the transformation rule to the input sequence.\n\n    Args:\n        input_sequence: A list or NumPy array of 12 integers.\n\n    Returns:\n        A list representing the transformed sequence of 12 integers.\n    \"\"\"\n    # Ensure input is treated as a list for consistent indexing/slicing\n    input_list = list(input_sequence)\n    n = len(input_list) # Should be 12 based on examples\n\n    # 1. Find the indices of the first and last non-zero digits\n    start_index = _find_first_nonzero_index(input_list)\n    \n    # 2. Handle the case where the input is all zeros\n    if start_index == -1:\n      # If no non-zero elements, return the original sequence as a list\n      return input_list\n\n    # 3. Find the last non-zero index (only needed if there's a first one)\n    end_index = _find_last_nonzero_index(input_list)\n\n    # 4. Extract the sub-sequence\n    sub_sequence = input_list[start_index : end_index + 1]\n    sub_len = len(sub_sequence)\n\n    # 5. Determine the target starting index for the output\n    # Shift amount is 3 positions to the left\n    shift_amount = 3\n    output_start_index = start_index - shift_amount\n\n    # 6. Create a new output list initialized with zeros\n    output_list = [0] * n\n\n    # 7. Place the extracted sub-sequence into the output list, handling boundaries\n    \n    # Determine the slice of the sub_sequence to copy\n    source_start = 0\n    source_end = sub_len\n    \n    # Determine the slice of the output_list to place into\n    dest_start = output_start_index\n    dest_end = output_start_index + sub_len\n\n    # Adjust source slice if destination starts before index 0\n    if dest_start < 0:\n        source_start = -dest_start # Skip initial elements of sub_sequence\n        dest_start = 0          # Start placing at index 0 in output\n\n    # Adjust source slice if destination ends after index n-1\n    if dest_end > n:\n        # Calculate how much it overflows\n        overflow = dest_end - n\n        source_end = source_end - overflow # Don't copy the overflowing part\n        dest_end = n                     # Place up to the end of the output list\n\n    # Only perform the assignment if there's a valid range to copy/paste\n    if dest_start < dest_end and source_start < source_end:\n        output_list[dest_start:dest_end] = sub_sequence[source_start:source_end]\n\n    # 8. Return the resulting output list\n    return output_list\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7987,
    "candidates_token_count": 1499,
    "total_token_count": 9486,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.536498,
  "retries": 1
}