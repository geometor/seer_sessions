task_elements:
  - object: sequence
    properties:
      - type: list or 1D numpy array of integers
      - length: fixed (e.g., 12 in examples)
      - contains: digits (0-9)
  - object: segment
    properties:
      - definition: contiguous sub-sequence from the first non-zero digit to the last non-zero digit in the input sequence (inclusive).
      - identification: requires finding first and last non-zero indices.
      - content: includes all digits (zeros and non-zeros) within its boundaries.
      - edge_case: if no non-zero digits exist, the segment is empty.
      - relationship: extracted part of the input sequence.
  - object: zero
    properties:
      - value: 0
      - role: filler/padding outside the segment; can also exist within the segment.
  - object: non-zero_digit
    properties:
      - value: 1-9
      - role: define the start and end boundaries of the segment.
      - relationship: relative order is preserved during transformation.
actions:
  - action: find_segment_indices
    input: input sequence
    output: start index, end index
    method:
      - find the index of the first non-zero element.
      - find the index of the last non-zero element.
      - handle case where no non-zero elements exist (e.g., return -1, -1).
  - action: extract_segment
    input: input sequence, start index, end index
    output: the segment (sub-sequence)
    condition: only if start_index and end_index are valid (found non-zeros).
  - action: calculate_target_position
    input: original start index
    output: target start index for the output sequence
    method: subtract shift amount (3) from original start index.
    constraint: target start index cannot be less than 0 (clamp at 0).
  - action: construct_output
    input: sequence length, segment, target start index
    output: output sequence
    steps:
      - create a new sequence of the original length, filled with zeros.
      - if a segment exists:
          - determine the number of segment elements that fit within the output bounds starting from the target index.
          - place the segment (or the portion that fits) into the new sequence at the target start index.
      - if no segment exists (input was all zeros), the zero-filled sequence is the final output.
relationships:
  - input sequence and output sequence have the same length.
  - the relative order of digits within the identified segment is preserved in the output.
  - the segment is moved exactly 3 positions to the left relative to its original starting position in the input, unless this shift would move the start position to before index 0, in which case the target start position becomes 0.
constants:
  - shift_amount: 3
  - shift_direction: left
  - boundary_floor: 0 (target start index cannot be negative)