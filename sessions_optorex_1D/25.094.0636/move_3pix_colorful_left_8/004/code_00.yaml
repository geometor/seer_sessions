task_context:
  description: Transform a sequence of digits by rearranging its elements.
  input_type: sequence of 12 integers
  output_type: sequence of 12 integers
  transformation_type: positional rearrangement (cyclic shift)

objects:
  - name: sequence
    type: list or 1D array
    properties:
      - name: elements
        type: integer
        description: Single digits (0-9 assumed, based on examples).
      - name: length
        value: 12
        description: The fixed number of elements in the sequence.

actions:
  - name: cyclic_left_shift
    description: Shifts the elements of the sequence to the left, with elements moving off the start wrapping around to the end.
    parameters:
      - name: sequence
        type: object (sequence)
        description: The input sequence to be shifted.
      - name: shift_amount
        value: 3
        type: integer
        description: The number of positions to shift the sequence cyclically to the left.
    output:
      - name: shifted_sequence
        type: object (sequence)
        description: The sequence after the cyclic left shift operation.

relationships:
  - type: transformation_rule
    description: The output sequence is derived from the input sequence by applying a specific cyclic shift action.
    input: sequence
    action: cyclic_left_shift
    output: shifted_sequence
    details: The output sequence is generated by taking the input sequence and performing a cyclic left shift of exactly 3 positions.

execution_notes:
  - note: Previous execution attempt (`code_00.py`) failed to apply the transformation, returning the input unchanged. This issue was likely in the implementation, not the rule definition. The rule described here is based on the provided Input -> Expected Output pairs.