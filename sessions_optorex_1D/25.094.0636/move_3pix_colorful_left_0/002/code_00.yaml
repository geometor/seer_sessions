task_description: "Shift a trailing sub-sequence left by 3 positions within a fixed-length (12) digit list. The sub-sequence starts from the first non-zero digit found in the input."
environment_note: "Execution environment might use NumPy arrays, potentially causing type errors if not handled correctly during implementation, although the core logic described here applies to sequences in general."
elements:
  - object: digit_sequence
    properties:
      - type: list or 1D array
      - item_type: integer (0-9)
      - length: 12
      - role: input or output container
  - object: zero_digit
    properties:
      - value: 0
      - role: padding (leading/trailing), potential part of the active_block
  - object: non_zero_digit
    properties:
      - value: integer (1-9)
      - role: marker for start of active_block, content
  - object: active_block
    properties:
      - type: sub-sequence (list or array slice)
      - definition: The portion of the input sequence starting from the index of the first non-zero digit, extending to the end of the sequence.
      - contains: The first non-zero digit and all subsequent digits from the input.
    relationships:
      - determined_by: position of the first non-zero digit in the input
  - object: position
    properties:
      - type: index (0-based integer)
      - role: location identifier within the sequence
constants:
  - name: sequence_length
    value: 12
  - name: shift_amount
    value: 3
  - name: shift_direction
    value: left
actions:
  - action: find_first_non_zero_index
    description: Scan the input sequence from left to right (index 0) and return the index of the first digit greater than 0.
    inputs: input_sequence
    outputs: start_index (integer >= 0), or indicator (e.g., -1) if none found.
  - action: handle_all_zeros
    description: If no non-zero digit is found in the input, the output is identical to the input.
    condition: find_first_non_zero_index returns indicator for 'none found'.
    inputs: input_sequence
    outputs: output_sequence (copy of input)
  - action: extract_active_block
    description: If a non-zero digit is found, extract the sub-sequence from the found start_index to the end of the input sequence.
    condition: find_first_non_zero_index returns a valid start_index.
    inputs: input_sequence, start_index
    outputs: active_block (sub-sequence)
  - action: calculate_new_start_index
    description: Determine the starting index for the active_block in the output sequence by subtracting the shift_amount from the original start_index.
    condition: find_first_non_zero_index returns a valid start_index.
    inputs: start_index, shift_amount
    calculation: new_start_index = start_index - shift_amount
    outputs: new_start_index
  - action: construct_output_sequence
    description: Assemble the final output sequence of the fixed length.
    condition: find_first_non_zero_index returns a valid start_index.
    steps:
      - Create an empty sequence for the output.
      - Prepend 'new_start_index' number of zero_digits.
      - Append the 'active_block'.
      - Append trailing zero_digits until the output sequence length equals 'sequence_length'.
    inputs: new_start_index, active_block, sequence_length
    outputs: output_sequence