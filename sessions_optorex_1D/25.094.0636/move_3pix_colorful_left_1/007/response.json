{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms a 1D NumPy integer array by identifying the contiguous block of non-zero\nelements, shifting this block 3 positions to the left (clamping the start index at 0),\nand placing it into a new array of the same shape and dtype, padded with zeros at\nthe remaining positions, primarily at the end.\n\"\"\"\n\nimport numpy as np\n\ndef find_contiguous_non_zero_block_bounds(arr: np.ndarray) -> tuple[int, int]:\n    \"\"\"\n    Finds the start and end indices of the contiguous block of non-zero numbers\n    in a 1D NumPy array.\n\n    Args:\n        arr: A 1D NumPy array of integers.\n\n    Returns:\n        A tuple (start_index, end_index). Returns (-1, -1) if no non-zero numbers\n        are found. Assumes non-zero elements form a single contiguous block based\n        on problem examples.\n    \"\"\"\n    # Find indices of all non-zero elements\n    non_zero_indices = np.nonzero(arr)[0]\n    \n    # If no non-zero elements, return (-1, -1)\n    if len(non_zero_indices) == 0:\n        return -1, -1 \n\n    # The start index is the first non-zero index\n    start_index = non_zero_indices[0]\n    # The end index is the last non-zero index\n    end_index = non_zero_indices[-1]\n\n    return start_index, end_index\n\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the transformation rule to the input grid.\n    \"\"\"\n    # Get the shape and data type of the input grid\n    n = input_grid.shape[0]\n    dtype = input_grid.dtype\n\n    # Initialize the output grid with zeros, matching input shape and type\n    output_grid = np.zeros_like(input_grid)\n\n    # Find the start and end indices of the non-zero block in the input\n    start_index, end_index = find_contiguous_non_zero_block_bounds(input_grid)\n\n    # If no non-zero block is found (input is all zeros), return the zero-filled grid\n    if start_index == -1:\n        return output_grid\n\n    # Extract the non-zero block from the input grid\n    non_zero_block = input_grid[start_index : end_index + 1]\n    block_len = len(non_zero_block)\n\n    # Define the shift amount\n    shift_amount = 3\n\n    # Calculate the target starting index for the block in the output grid\n    # Shift left by the specified amount, but clamp at index 0 (cannot go negative)\n    new_start_index = max(0, start_index - shift_amount)\n\n    # Calculate the target ending index (exclusive) for placing the block\n    # Ensure the block placement does not exceed the grid's bounds\n    new_end_index_exclusive = min(n, new_start_index + block_len)\n\n    # Determine the actual length of the block segment that fits into the output grid\n    # This handles potential truncation if the shifted block hits the end boundary,\n    # though not observed in the examples.\n    place_len = new_end_index_exclusive - new_start_index\n\n    # Place the non-zero block (or the part that fits) into the output grid\n    # at the calculated new position.\n    if place_len > 0: # Only place if there's space and the block has length\n        output_grid[new_start_index : new_end_index_exclusive] = non_zero_block[:place_len]\n\n    # The rest of the output_grid remains zeros as initialized.\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 9003,
    "candidates_token_count": 1299,
    "total_token_count": 10302,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.565399,
  "retries": 1
}