{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransforms a 1D NumPy array of digits by finding the first contiguous block of non-zero digits, \nshifting this block 3 positions to the left (or to the beginning if the shift exceeds the boundary), \nand padding the remaining positions with zeros. The array length remains constant.\n\"\"\"\n\ndef _find_first_non_zero_block(sequence: np.ndarray) -> tuple[int | None, int | None]:\n    \"\"\"\n    Finds the start and end (exclusive) indices of the first contiguous block of non-zero numbers.\n\n    Args:\n        sequence: A 1D NumPy array of integers.\n\n    Returns:\n        A tuple (start_index, end_index) if a block is found, otherwise (None, None).\n        end_index is the index *after* the last non-zero digit in the block.\n    \"\"\"\n    start_index = None\n    end_index = None\n    non_zero_indices = np.where(sequence != 0)[0]\n\n    # 2. Scan the input list from left to right to find the starting index (`start_in`)\n    if len(non_zero_indices) > 0:\n        start_index = non_zero_indices[0]\n\n        # 4. If a non-zero digit is found at `start_in`, continue scanning...\n        # Find the index of the first zero *after* the start_index\n        first_zero_after_start_indices = np.where(sequence[start_index:] == 0)[0]\n        if len(first_zero_after_start_indices) > 0:\n            # Calculate absolute index\n            end_index = start_index + first_zero_after_start_indices[0]\n        else:\n            # Block runs to the end of the sequence\n            end_index = len(sequence)\n    \n    # 3. If no non-zero digit is found... (handled by returning None, None)\n    return start_index, end_index\n\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the leftward shift transformation to the input sequence.\n\n    Args:\n        input_grid: A 1D NumPy array representing the input sequence of digits.\n\n    Returns:\n        A 1D NumPy array representing the transformed sequence.\n    \"\"\"\n    # 1. Input is implicitly parsed into a NumPy array (input_grid)\n    n = len(input_grid)\n\n    # 2, 4. Find the first non-zero block indices\n    start_in, end_in = _find_first_non_zero_block(input_grid)\n\n    # 3. If no non-zero digit is found, the output is a sequence of n zeros.\n    if start_in is None:\n        return np.zeros(n, dtype=input_grid.dtype)\n\n    # 5. Extract the non-zero block\n    non_zero_block = input_grid[start_in:end_in]\n    block_len = len(non_zero_block) # or end_in - start_in\n\n    # 6. Calculate the target starting index (`start_out`)\n    start_out = max(0, start_in - 3)\n\n    # 7. Create a new output list (array) of n zeros.\n    output_grid = np.zeros(n, dtype=input_grid.dtype)\n\n    # 8. Calculate the target ending index (`end_out`)\n    end_out = start_out + block_len\n\n    # 9. Copy the extracted non-zero block into the output list (array)\n    # Ensure placement doesn't exceed bounds (numpy slicing handles this safely)\n    output_grid[start_out:end_out] = non_zero_block\n\n    # 10, 11. Return the resulting array (formatting to string is handled outside)\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 10842,
    "candidates_token_count": 1242,
    "total_token_count": 12084,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.791113,
  "retries": 1
}