{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransforms a 1D NumPy array of digits by finding the first contiguous block of non-zero digits, \nshifting this block 3 positions to the left (or to the beginning if the shift exceeds the boundary), \nand padding the remaining positions with zeros. The array length remains constant.\n\"\"\"\n\ndef _find_first_non_zero_block(sequence):\n    \"\"\"\n    Finds the start and end indices (exclusive) of the first contiguous block of non-zero numbers.\n\n    Args:\n        sequence: A 1D NumPy array of integers.\n\n    Returns:\n        A tuple (start_index, end_index) if a block is found, otherwise (None, None).\n        end_index is the index *after* the last non-zero digit in the block.\n    \"\"\"\n    start_index = -1\n    # Find the start of the block\n    non_zero_indices = np.where(sequence != 0)[0] # Get indices of all non-zero elements\n    if len(non_zero_indices) == 0:\n        return None, None # No non-zero elements found\n\n    start_index = non_zero_indices[0] # First non-zero index is the start\n\n    # Find the end of the block (the first zero *after* the start, or end of list)\n    end_index = len(sequence) # Default to end of list if no zero follows\n    # Search for the first zero starting from the position after the block begins\n    zero_indices_after_start = np.where(sequence[start_index + 1:] == 0)[0]\n    if len(zero_indices_after_start) > 0:\n        # The index found is relative to the slice start (start_index + 1)\n        # Add back the offset to get the absolute index in the original sequence\n        end_index = start_index + 1 + zero_indices_after_start[0]\n\n    return start_index, end_index\n\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the transformation rule to the input NumPy array sequence of digits.\n\n    Args:\n        input_grid: A 1D NumPy array of digits.\n\n    Returns:\n        A 1D NumPy array of digits representing the transformed sequence.\n    \"\"\"\n    # 1. Receive the input NumPy array of digits.\n    # input_grid is the input\n\n    # 2. Determine the length (`n`) of the input array.\n    n = len(input_grid)\n\n    # 3. Scan the input array to find the start and end indices of the first non-zero block.\n    start_index, end_index = _find_first_non_zero_block(input_grid)\n\n    # 4. If no non-zero digit is found, return an array containing all zeros.\n    if start_index is None:\n        return np.zeros(n, dtype=input_grid.dtype) # Match input dtype\n\n    # 5. Extract the contiguous block of non-zero digits.\n    # Note: end_index from _find_first_non_zero_block is exclusive.\n    non_zero_block = input_grid[start_index:end_index]\n\n    # 6. Calculate the target starting index (`target_start_index`) for this block.\n    # Shift left by 3, but not before index 0.\n    target_start_index = max(0, start_index - 3)\n\n    # 7. Create a new NumPy array (`output_grid`) initialized with zeros.\n    output_grid = np.zeros(n, dtype=input_grid.dtype) # Match input dtype\n\n    # 8. Calculate the target ending index and place the block.\n    block_len = len(non_zero_block)\n    # Ensure the block fits within the array bounds when placed.\n    target_end_index = target_start_index + block_len\n    # This check is slightly redundant given fixed length and how slicing works, but safe.\n    # If target_end_index > n, slicing output_grid[target_start_index:target_end_index]\n    # would take up to n, and non_zero_block might be truncated if it didn't fit.\n    # However, the problem implies the length is fixed and the block always fits after shift.\n    output_grid[target_start_index:target_end_index] = non_zero_block\n\n    # 9. Return the output_grid.\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6547,
    "candidates_token_count": 1467,
    "total_token_count": 8014,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.026747,
  "retries": 1
}