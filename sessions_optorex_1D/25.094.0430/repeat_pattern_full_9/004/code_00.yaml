task_description: Fill trailing zeros in a sequence by cyclically repeating an identified base pattern found in the initial non-zero part of the sequence.

input_elements:
  - name: input_sequence
    type: list_of_integers
    description: A sequence of single-digit integers.
    properties:
      - contains_an_initial_contiguous_segment_of_non_zero_numbers.
      - this_non_zero_segment_consists_of_exactly_two_repetitions_of_a_base_pattern (observed in examples).
      - may_be_followed_by_one_or_more_trailing_zeros.

output_elements:
  - name: output_sequence
    type: list_of_integers
    description: The transformed sequence where trailing zeros are replaced by the repeated base pattern.
    properties:
      - has_the_same_total_length_as_input_sequence.
      - typically_contains_no_trailing_zeros (unless the input was entirely zeros).
      - starts_with_the_same_non_zero_segment_as_the_input.
      - the_remainder_of_the_sequence_is_filled_by_cyclically_repeating_the_base_pattern.

derived_elements:
  - name: total_length
    type: integer
    description: The total number of elements in the input_sequence.
  - name: non_zero_segment
    type: list_of_integers
    description: The initial contiguous subsequence of input_sequence containing only non-zero integers.
    computation: Elements from the start of input_sequence up to the index of the first zero element (or the full sequence if no zero exists).
  - name: base_pattern
    type: list_of_integers
    description: The fundamental repeating unit within the non_zero_segment.
    computation: The first half of the non_zero_segment.
    precondition: Based on examples, the non_zero_segment is assumed to have an even, non-zero length. If non_zero_segment is empty, base_pattern is empty.

transformation_actions:
  - action: identify_pattern_and_segments
    inputs: [input_sequence]
    outputs: [total_length, non_zero_segment, base_pattern]
    description: Parses the input to find its length, the initial non-zero part, and the repeating pattern within that part.
    steps:
      - Determine total_length = length(input_sequence).
      - Locate the end index of the non_zero_segment (first zero index or total_length).
      - Extract the non_zero_segment = input_sequence[:end_index].
      - If non_zero_segment is not empty, calculate pattern_length = length(non_zero_segment) / 2.
      - Extract base_pattern = non_zero_segment[:pattern_length].
      - If non_zero_segment is empty, set base_pattern = [].
  - action: construct_output
    inputs: [total_length, non_zero_segment, base_pattern]
    outputs: [output_sequence]
    description: Builds the output sequence by starting with the non-zero segment and appending repetitions of the base pattern.
    steps:
      - Initialize output_sequence as a copy of non_zero_segment.
      - If base_pattern is empty: # Handles all-zero or empty input
          - Ensure output_sequence has total_length elements, padding with 0 if necessary. Return.
      - Initialize a pattern_index = 0.
      - While length(output_sequence) < total_length:
        - Append base_pattern[pattern_index] to output_sequence.
        - Update pattern_index = (pattern_index + 1) % length(base_pattern).
      - Return the completed output_sequence.

relationships:
  - len(output_sequence) == len(input_sequence)
  - output_sequence[:len(non_zero_segment)] == non_zero_segment
  - len(non_zero_segment) == 2 * len(base_pattern) # Holds true for all provided valid examples.