task_elements:
  - type: sequence
    role: input
    data_type: list_of_integers  # Corrected data type
    properties:
      - contains_trailing_zeros
      - initial_segment_is_non_zero
      - initial_segment_repeats_pattern_twice
      - fixed_length (observed as 12 in training, but may vary)
  - type: sequence
    role: output
    data_type: list_of_integers  # Corrected data type
    properties:
      - same_length_as_input
      - no_trailing_zeros
      - consists_of_repeated_input_pattern

transformation:
  action: identify_non_zero_segment
  input: input_list
  process: Iterate through the input list to find the index of the first zero element. The segment before this index is the non-zero segment. If no zeros exist, the whole list is the non-zero segment.
  output: non_zero_segment

  action: determine_base_pattern
  input: non_zero_segment
  process: Calculate the midpoint index of the non-zero segment. The base pattern is the sub-sequence from the beginning up to the midpoint. (Implicit assumption: length of non-zero segment is always even).
  output: base_pattern

  action: construct_output
  input: 
    - base_pattern
    - original_input_length
    - non_zero_segment
  process: Start with a copy of the non_zero_segment. Repeatedly append elements from the base_pattern (cycling through the pattern) until the sequence reaches the original_input_length.
  output: final_output_list

relationships:
  - len(output_list) == len(input_list)
  - output_list[:len(non_zero_segment)] == non_zero_segment
  - output_list[len(non_zero_segment):] is constructed by repeating base_pattern
  - len(non_zero_segment) == 2 * len(base_pattern)