{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport math\n\n\"\"\"\nTransforms an input 1D NumPy array by identifying the shortest repeating sequence \n(the 'fundamental pattern') within the initial non-zero part of the array. \nThis fundamental pattern is then repeated to fill a new array of the same \nlength as the original input, truncating the last repetition if necessary.\n\"\"\"\n\ndef find_fundamental_pattern(sequence):\n    \"\"\"\n    Finds the shortest repeating pattern at the beginning of a NumPy array sequence.\n\n    Args:\n        sequence: A 1D NumPy array of integers representing the non-zero prefix.\n\n    Returns:\n        A 1D NumPy array representing the fundamental pattern. Returns the \n        original sequence if no repeating pattern is found within the first half,\n        or if the sequence is too short to contain a repetition.\n    \"\"\"\n    n = len(sequence)\n    if n == 0:\n        return np.array([], dtype=sequence.dtype) # Return empty array of same type\n        \n    # Iterate through possible pattern lengths from 1 up to half the sequence length\n    for p_len in range(1, n // 2 + 1):\n        # Check if the sequence is long enough for the comparison\n        if n >= 2 * p_len:\n            # Compare the first block with the second block\n            if np.array_equal(sequence[0:p_len], sequence[p_len:2 * p_len]):\n                return sequence[0:p_len] # Found the shortest repeating pattern\n\n    # If no repeating pattern is found by checking the first half,\n    # the fundamental pattern is the entire non-zero sequence itself.\n    return sequence\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input NumPy array.\n\n    Args:\n        input_grid: A 1D NumPy array of integers.\n\n    Returns:\n        A 1D NumPy array representing the transformed sequence.\n    \"\"\"\n    # Get the total length of the input array\n    L = len(input_grid)\n\n    # Find the index of the first zero, if any\n    zero_indices = np.where(input_grid == 0)[0]\n    if len(zero_indices) > 0:\n        first_zero_index = zero_indices[0]\n    else:\n        # No zeros found, the entire grid is the prefix\n        first_zero_index = L \n\n    # Extract the non-zero prefix\n    non_zero_prefix = input_grid[:first_zero_index]\n\n    # Handle case where the input starts with 0 or is all zeros\n    if len(non_zero_prefix) == 0:\n        # If the input was empty or all zeros, return zeros of the same length\n        return np.zeros(L, dtype=input_grid.dtype)\n\n    # Find the fundamental repeating pattern within the prefix\n    fundamental_pattern = find_fundamental_pattern(non_zero_prefix)\n    \n    pattern_len = len(fundamental_pattern)\n\n    # Handle case where the pattern finding somehow returns empty (should not happen with current logic if prefix exists)\n    if pattern_len == 0:\n         return np.zeros(L, dtype=input_grid.dtype) # Fallback\n\n    # Calculate how many times the pattern needs to be repeated (at least partially)\n    # to fill the output length L. Use ceiling division.\n    num_repeats = math.ceil(L / pattern_len)\n\n    # Create the tiled/repeated pattern\n    # np.tile repeats the whole array 'num_repeats' times\n    tiled_pattern = np.tile(fundamental_pattern, num_repeats)\n\n    # Truncate the repeated pattern to the exact original length L\n    output_grid = tiled_pattern[:L]\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6473,
    "candidates_token_count": 1546,
    "total_token_count": 8019,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.876741,
  "retries": 1
}