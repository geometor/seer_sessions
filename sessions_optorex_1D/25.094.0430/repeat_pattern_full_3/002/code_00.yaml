task_description: Fill trailing zeros in a fixed-length sequence by cyclically repeating an initial pattern identified from the non-zero prefix.
elements:
  - name: input_sequence
    type: numpy array of integers # Updated type
    properties:
      - length: 12
      - structure: >
          Contains an initial non-zero prefix followed by zero padding.
          The non-zero prefix consists of exactly two repetitions of a base pattern.
  - name: output_sequence
    type: list of integers # Output type can remain list or be numpy array
    properties:
      - length: 12
      - structure: Consists of the base pattern from the input repeated cyclically to fill the entire sequence length.
  - name: non_zero_prefix
    type: list or numpy array of integers
    properties:
      - derived_from: Elements of input_sequence before the first zero.
      - structure: Always composed of two concatenated repetitions of the base_pattern.
  - name: base_pattern
    type: list or numpy array of integers
    properties:
      - derived_from: The first half of the non_zero_prefix.
      - length: L = length(non_zero_prefix) / 2
  - name: zero_padding
    type: sequence of integers (value 0)
    properties:
      - location: End of the input_sequence.
      - role: Indicates the end of the repeated pattern prefix.
actions:
  - name: identify_prefix_and_pattern
    inputs: input_sequence (numpy array)
    outputs: base_pattern, pattern_length (L)
    description: >
      Convert input numpy array to a list.
      Find the index of the first zero element. If no zeros, the prefix is the entire sequence.
      Extract the non_zero_prefix (elements before the first zero).
      Calculate the pattern_length (L) as half the length of the non_zero_prefix.
      Extract the base_pattern as the first L elements of the non_zero_prefix.
  - name: generate_output
    inputs: base_pattern, pattern_length (L)
    outputs: output_sequence
    description: >
      Create a new sequence (list or array) of length 12.
      Fill this sequence by assigning elements from the `base_pattern`.
      For each position `i` from 0 to 11, the element is `base_pattern[i % L]`.
relationships:
  - type: transformation
    from: input_sequence
    to: output_sequence
    rule: >
      The output_sequence is generated by identifying the base_pattern (first half of the non-zero prefix)
      in the input_sequence and then cyclically repeating this pattern to fill a sequence of length 12.