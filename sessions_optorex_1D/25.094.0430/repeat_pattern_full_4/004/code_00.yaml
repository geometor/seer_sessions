Task: Generate an output sequence by cyclically repeating an initial subsequence derived from the input.

Objects:
  - Input_Sequence:
      Type: List[int]
      Properties:
        - elements: The sequence of single-digit integers.
        - length: Total number of elements in the sequence.
  - Output_Sequence:
      Type: List[int]
      Properties:
        - elements: The generated sequence of single-digit integers.
        - length: Total number of elements (must be equal to Input_Sequence.length).
  - Active_Subsequence:
      Type: List[int]
      Derivation: Extracted from Input_Sequence.
      Properties:
        - elements: Consists of elements from the start of Input_Sequence up to and including the last non-zero element. If Input_Sequence contains only zeros, this subsequence is empty. If Input_Sequence contains no zeros, this subsequence is identical to Input_Sequence.
        - length: Number of elements in the Active_Subsequence.

Relationships:
  - Output_Sequence.length == Input_Sequence.length
  - Active_Subsequence is determined solely by Input_Sequence.
  - Each element in Output_Sequence is determined by an element in Active_Subsequence based on a cyclic pattern.

Actions:
  - Identify the index of the last non-zero element in the Input_Sequence.
  - Determine the Active_Subsequence based on the identified index. Handle the edge case where all input elements are zero (Active_Subsequence is empty).
  - Determine the length of the Active_Subsequence (len_active).
  - Determine the length of the Input_Sequence (input_length).
  - Construct the Output_Sequence:
      - If len_active is 0 (input was all zeros), the Output_Sequence consists of zeros with length equal to input_length.
      - If len_active > 0, iterate from index `i = 0` to `input_length - 1`.
      - For each index `i`, the element at `Output_Sequence[i]` is set to the element at `Active_Subsequence[i % len_active]`.