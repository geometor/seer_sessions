{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransforms an input NumPy array of 12 integers (0-9) into an output NumPy array of 12 binary integers (0 or 1).\nThe transformation rule is as follows:\n1. Count the number of 0 values in the input array. Let this be N.\n2. The number of non-zero values (1-9) in the input array will be M = 12 - N.\n3. The output array consists of N zero integers followed by M one integers.\n\"\"\"\n\ndef count_zeros_in_array(arr: np.ndarray) -> int:\n  \"\"\"Counts the number of zero elements in a NumPy array.\"\"\"\n  # Use numpy's vectorized comparison and sum\n  return (arr == 0).sum()\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the transformation rule to the input NumPy array.\n\n    Args:\n        input_grid: A NumPy array of shape (12,) containing integers from 0 to 9.\n\n    Returns:\n        A NumPy array of shape (12,) containing N zeros followed by M ones,\n        where N is the count of zeros and M is the count of non-zeros in the input.\n    \"\"\"\n    # Ensure input is a NumPy array and has the expected size\n    if not isinstance(input_grid, np.ndarray):\n        raise TypeError(\"Input must be a NumPy array.\")\n    if input_grid.size != 12:\n         raise ValueError(f\"Input array must have size 12, but got {input_grid.size}\")\n\n    # Count the number of zeros in the input array\n    zero_count = count_zeros_in_array(input_grid)\n\n    # Calculate the number of non-zeros (total elements - zero count)\n    total_elements = input_grid.size # Should be 12\n    non_zero_count = total_elements - zero_count\n\n    # Construct the output array using numpy operations\n    # Create an array of N zeros\n    output_zeros = np.zeros(zero_count, dtype=int)\n    # Create an array of M ones\n    output_ones = np.ones(non_zero_count, dtype=int)\n    # Concatenate the two arrays to form the final output grid\n    output_grid = np.concatenate((output_zeros, output_ones))\n\n    # Reshape to ensure it's a 1D array of size 12, although concatenate should handle this\n    # This step might be redundant if concatenate always produces the correct shape,\n    # but added for robustness.\n    output_grid = output_grid.reshape(12) \n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6579,
    "candidates_token_count": 1039,
    "total_token_count": 7618,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.532027,
  "retries": 1
}