task_elements:
  - name: input_sequence
    type: list # represented as space-separated string
    subtype: integer_string # strings representing single integers
    properties:
      - length: 12
      - contains_digits: 0-9
      - delimiter: space
  - name: output_sequence
    type: list # represented as space-separated string
    subtype: binary_integer_string # strings representing '0' or '1'
    properties:
      - length: 12
      - contains_digits: 0, 1
      - delimiter: space
      - structure: sequence of '0's followed by sequence of '1's

transformation_rule:
  - action: parse_input
    input: input string
    output: list of digit strings (input_list)
    description: Split the input string by spaces.
  - action: count_zeros
    input: input_list
    variable: zero_count (N)
    description: Count the total occurrences of the string '0' in the input_list.
  - action: calculate_non_zeros
    input: input_list length (always 12), zero_count (N)
    variable: non_zero_count (M)
    description: Calculate the count of non-zero digits as 12 - N.
  - action: construct_output_list
    description: Create the intermediate output list.
    steps:
      - step: generate_zeros
        count: zero_count (N)
        value: '0' # string '0'
      - step: generate_ones
        count: non_zero_count (M)
        value: '1' # string '1'
      - step: concatenate
        parts: [generated_zeros, generated_ones]
        output: list of '0' and '1' strings (output_list)
  - action: format_output_string
    input: output_list
    output: output string
    delimiter: space
    description: Join the elements of the output_list with spaces.

relationships:
  - type: count_match
    element1: number of '0's in output_sequence
    element2: count of '0' digits in input_sequence (zero_count)
  - type: count_match
    element1: number of '1's in output_sequence
    element2: count of non-zero digits ('1'-'9') in input_sequence (non_zero_count)
  - type: length_conservation
    element1: input_sequence
    element2: output_sequence
    property: length (value is 12)
  - type: sum_constraint
    element1: zero_count
    element2: non_zero_count
    value: 12 # total length of the sequence

validation_notes:
  - note: The transformation logic (count zeros -> N, count non-zeros -> M, output N '0's then M '1's) is consistent across all provided training examples.
  - note: The errors reported previously (`invalid literal for int()`) likely stem from the testing environment's expectation of output format (e.g., expecting list of integers or numpy array) rather than an error in the transformation rule derived from the examples, which produce a space-separated string.