Task: Transform a sequence by replacing two blocks of '3's based on their relative lengths.

Input:
  Type: String
  Format: Space-separated sequence of digits.
  Length: Fixed (12)
  Alphabet: {'0', '3'}
  Structure: Contains exactly two distinct contiguous blocks of '3's, separated by one or more '0's.

Output:
  Type: String
  Format: Space-separated sequence of digits.
  Length: Fixed (12)
  Alphabet: {'0', '1', '2'}
  Structure: Mirrors input structure; '0's are preserved, '3' blocks are replaced.

Objects_and_Properties:
  - Object: Sequence
    Properties:
      - Digits: List of integers derived from the input string.
      - Length: 12
  - Object: Block_of_3s
    Properties:
      - Start_Index: Position of the first '3' in the block.
      - End_Index: Position of the last '3' in the block.
      - Length: Number of '3's in the block (End_Index - Start_Index + 1).
      - Order: Identifies if it's the first or second block encountered (left-to-right).

Relationships:
  - Input '0' to Output '0': Direct mapping (identity). Position preserved.
  - Input Block_of_3s to Output Block: One-to-one mapping in terms of position and length, but value changes.
  - Between Blocks_of_3s:
      - Existence: Exactly two blocks are assumed based on examples.
      - Comparison: The length of the first block is compared to the length of the second block.

Actions:
  1. Parse the input string into a list of integer digits.
  2. Create a copy of the integer list for the output.
  3. Identify all contiguous blocks of the digit '3', storing their start index, end index, and length.
  4. Verify exactly two blocks of '3's were found.
  5. Designate the first block found as Block A and the second as Block B.
  6. Compare the length of Block A (L_A) and Block B (L_B).
  7. Modify the output list based on the comparison:
     - If L_A >= L_B:
       - Fill positions from Start_A to End_A with '1'.
       - Fill positions from Start_B to End_B with '2'.
     - Else (L_A < L_B):
       - Fill positions from Start_A to End_A with '2'.
       - Fill positions from Start_B to End_B with '1'.
  8. Convert the modified list of digits back to strings.
  9. Join the string digits with spaces to create the final output string.

Assumptions:
  - Input always contains exactly two blocks of '3's.
  - Input digits are only '0' or '3'.
  - Input is a space-separated string of 12 digits.
