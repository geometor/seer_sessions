Task: Replace two blocks of '3's in a digit sequence based on their relative lengths.

Input_Representation:
  Type: String
  Format: Space-separated digits (e.g., "3 3 0 3 3 3")
  Digits_Observed: '0', '3'

Processing_Input:
  Type: Sequence or 1D Array of Integers
  Derivation: Parsed from the Input_Representation string.
  Length: Fixed (12 in examples)

Output_Representation:
  Type: String
  Format: Space-separated digits (e.g., "1 1 0 2 2 2")
  Digits_Observed: '0', '1', '2'

Objects_and_Properties:
  - Object: Digit_Sequence (Processing Input)
    Properties:
      - Elements: List/Array of integers (0 or 3)
      - Length: Integer
  - Object: Digit_Block
    Properties:
      - Digit_Value: The repeated digit (specifically 3)
      - Start_Index: Integer position (0-based)
      - End_Index: Integer position (0-based)
      - Length: Integer count of digits
      - Order: Sequential position (1st, 2nd) among blocks of the same digit value.

Relationships:
  - Input_Digit to Output_Digit:
      - If input is 0, output is 0.
      - If input is 3, output depends on the block it belongs to and relative block lengths.
  - Between Blocks_of_3:
      - Assumption: Exactly two distinct blocks of '3's exist in the input sequence.
      - Comparison: The length of the first block (L1) is compared to the length of the second block (L2).

Actions:
  1. Parse the Input_Representation string into a Digit_Sequence (list/array of integers).
  2. Create a mutable copy of the Digit_Sequence for output construction.
  3. Identify all contiguous blocks of the digit '3' in the sequence, recording their start/end indices and lengths.
  4. Verify that exactly two blocks of '3's were found.
  5. Assign the first found block as Block_A and the second as Block_B.
  6. Compare Length(Block_A) with Length(Block_B).
  7. Apply transformation rule to the output sequence copy:
     - If Length(Block_A) >= Length(Block_B):
       - Replace digits corresponding to Block_A's indices with 1.
       - Replace digits corresponding to Block_B's indices with 2.
     - Else (Length(Block_A) < Length(Block_B)):
       - Replace digits corresponding to Block_A's indices with 2.
       - Replace digits corresponding to Block_B's indices with 1.
  8. Convert the modified integer sequence back into a space-separated string (Output_Representation).
