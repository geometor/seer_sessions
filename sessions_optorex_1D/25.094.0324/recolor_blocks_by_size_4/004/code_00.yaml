task_type: sequence_transformation
input_elements:
  - type: integer
    values: [0, 3]
output_elements:
  - type: integer
    values: [0, 1, 2]
input_structure:
  - type: list or 1D numpy array
    description: A sequence of integers. Must be processed as a flat, 1D sequence.
output_structure:
  - type: list
    description: A sequence of integers with the same length as the input.
objects:
  - name: sequence
    type: 1D list of integers
    source: Derived from the input, ensuring it's a flat 1D list.
  - name: block_of_3s
    type: contiguous subsequence of the integer 3 within the 1D sequence
    properties:
      - length: number of elements in the block
      - position: start and end indices in the 1D sequence
      - order: rank based on starting position (1st block, 2nd block)
relationships:
  - type: identity
    description: Input 0 maps directly to output 0 at the same position.
  - type: transformation
    description: Input 3 maps to either output 1 or output 2 based on block properties (length and order).
  - type: grouping
    description: Input 3s are processed based on contiguous blocks found within the 1D sequence.
  - type: comparison
    description: The lengths of the two identified blocks of 3s are compared to determine their output mapping. Positional order is used for tie-breaking.
rules:
  - description: The input sequence must contain exactly two distinct blocks of consecutive 3s after being processed as a 1D sequence.
  - description: Compare the lengths of the two blocks.
  - description: If lengths differ, the block with the greater length is transformed into 1s, and the block with the lesser length is transformed into 2s.
  - description: If lengths are equal, the block that appears earlier in the sequence (smaller start index) is transformed into 1s, and the block that appears later is transformed into 2s.
  - description: The transformation replaces the original 3s in the block with the determined output value (1 or 2), preserving the block's length and position.
assumptions:
  - The input data represents a 1D sequence of 0s and 3s, even if provided in a nested format (e.g., numpy array).
  - The processed 1D input sequence always contains exactly two distinct blocks of consecutive 3s.