task_elements:
  - object: sequence
    description: A 1D sequence of integers derived from a space-separated string.
    properties:
      - length: The number of integers in the sequence (consistently 12).
      - values: The integers contained within (input: 0, 3; output: 0, 1, 2).
  - object: digit
    description: An individual integer within the sequence.
    properties:
      - value: The integer value (0, 1, 2, or 3).
      - position: The zero-based index within the sequence.
  - object: block
    description: A contiguous subsequence of identical non-zero integers (specifically '3' in the input).
    properties:
      - value: The integer composing the block (always 3 in input).
      - start_index: The position (index) of the first integer in the block.
      - end_index: The position (index) of the last integer in the block.
      - length: The number of integers in the block (end_index - start_index + 1).
    relationships:
      - order: Blocks appear sequentially within the main sequence. Can be referred to as 'first block', 'second block'. All examples contain exactly two blocks of '3'.
actions:
  - action: parse_input
    description: Convert the input space-separated string into a list or array of integers.
    inputs:
      - input_string
    outputs:
      - sequence_of_integers
  - action: identify_3_blocks
    description: Scan the integer sequence to find all contiguous blocks of the integer '3'.
    inputs:
      - sequence_of_integers
    outputs:
      - list_of_blocks: A list containing information (start_index, end_index, length) for each '3' block found, in sequential order.
  - action: determine_replacement_values
    description: Decide which values ('1' or '2') will replace the '3's in each block.
    inputs:
      - list_of_blocks: Must contain exactly two blocks.
    outputs:
      - value_for_first_block: The integer (1 or 2) to use for the first block.
      - value_for_second_block: The integer (1 or 2) to use for the second block.
    logic:
      - Get the first block from the list_of_blocks.
      - If the length of the first block is greater than 2, set value_for_first_block=1 and value_for_second_block=2.
      - Otherwise (length is 2 or less), set value_for_first_block=2 and value_for_second_block=1.
  - action: apply_transformation
    description: Create the output sequence by replacing '3's according to the determined values.
    inputs:
      - original_sequence_of_integers
      - list_of_blocks (containing the two '3' blocks)
      - value_for_first_block
      - value_for_second_block
    outputs:
      - transformed_sequence_of_integers
    logic:
      - Create a copy of the original sequence.
      - Iterate from the start_index to the end_index of the first block, setting the value in the copied sequence to value_for_first_block.
      - Iterate from the start_index to the end_index of the second block, setting the value in the copied sequence to value_for_second_block.
      - Integers originally '0' remain unchanged as they are not part of the '3' blocks being modified.
  - action: format_output
    description: Convert the transformed sequence of integers back into a space-separated string.
    inputs:
      - transformed_sequence_of_integers
    outputs:
      - output_string
relationships:
  - type: mapping
    description: Defines the transformation from input integers to output integers.
    details:
      - Input '0' maps to Output '0'.
      - Input '3' maps to Output '1' or '2'.
  - type: conditional_replacement
    description: The rule governing the replacement of '3's.
    details: Depends on the properties (length) and order (first vs. second) of the contiguous blocks of '3's found in the input. If the first block's length > 2, the first block becomes '1's and the second becomes '2's. Otherwise, the first block becomes '2's and the second becomes '1's.