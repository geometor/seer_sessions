task_elements:
  - object: sequence
    description: A space-separated string of digits representing the input or output.
    properties:
      - length: The number of digits in the sequence (consistently 12).
      - values: The digits contained within (0, 1, 2, 3).
  - object: digit
    description: An individual number within the sequence.
    properties:
      - value: The integer value (0, 1, 2, or 3).
      - position: The index within the sequence.
  - object: block
    description: A contiguous subsequence of identical non-zero digits (specifically '3' in the input).
    properties:
      - value: The digit composing the block (always 3 in input).
      - start_index: The position of the first digit in the block.
      - end_index: The position of the last digit in the block.
      - length: The number of digits in the block.
    relationships:
      - order: Blocks appear sequentially within the main sequence. We can identify the 'first' block, 'second' block, etc.
actions:
  - action: identify_blocks
    description: Scan the input sequence to find all contiguous blocks of the digit '3'.
    inputs:
      - input sequence
    outputs:
      - list of blocks (each with start_index, end_index, length).
  - action: determine_transformation_pattern
    description: Check the length of the first identified block of '3's to decide the replacement values.
    inputs:
      - first block of '3's
    outputs:
      - pattern_type: ('2 then 1' or '1 then 2')
  - action: apply_transformation
    description: Create the output sequence by applying the determined pattern to the blocks of '3's and keeping '0's unchanged.
    inputs:
      - input sequence
      - identified blocks
      - pattern_type
    outputs:
      - output sequence
relationships:
  - type: mapping
    description: How input digits correspond to output digits.
    details:
      - Input '0' maps to Output '0'.
      - Input '3' maps to Output '1' or '2' based on block properties and order.
  - type: conditional_logic
    description: The rule determining whether the first block of '3's becomes '1's or '2's.
    details: Based on the length of the first block of '3's. If length > 2, pattern is '1 then 2'. Otherwise, pattern is '2 then 1'.