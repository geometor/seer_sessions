task_elements:
  - object: sequence
    description: A 1D sequence of integers.
    properties:
      - length: The number of integers in the sequence.
      - values: The integers contained within (0, 1, 2, 3).
  - object: digit
    description: An individual integer within the sequence.
    properties:
      - value: The integer value (0, 1, 2, or 3).
      - position: The index within the sequence.
  - object: block
    description: A contiguous subsequence of identical non-zero digits (specifically '3' in the input).
    properties:
      - value: The digit composing the block (always 3 in input).
      - start_index: The position of the first digit in the block.
      - end_index: The position of the last digit in the block.
      - length: The number of digits in the block.
    relationships:
      - order: Blocks appear sequentially within the main sequence. We identify the 'first' block (Block1) and 'second' block (Block2) of '3's. There are always exactly two such blocks.
actions:
  - action: identify_3_blocks
    description: Scan the input sequence to find the two contiguous blocks of the digit '3'.
    inputs:
      - input sequence
    outputs:
      - Block1 (first block of '3's with start, end, length)
      - Block2 (second block of '3's with start, end, length)
  - action: compare_block_lengths
    description: Compare the lengths of Block1 and Block2 to determine the transformation pattern.
    inputs:
      - Block1 length
      - Block2 length
    outputs:
      - pattern_assignment: ('Block1 -> 1, Block2 -> 2' or 'Block1 -> 2, Block2 -> 1')
  - action: apply_transformation
    description: Create the output sequence by replacing '3's in Block1 and Block2 according to the determined pattern, keeping '0's unchanged.
    inputs:
      - input sequence
      - Block1 definition
      - Block2 definition
      - pattern_assignment
    outputs:
      - output sequence
relationships:
  - type: mapping
    description: How input digits correspond to output digits.
    details:
      - Input '0' maps to Output '0'.
      - Input '3' maps to Output '1' or '2' based on block properties and comparison.
  - type: conditional_logic
    description: The rule determining which block becomes '1's and which becomes '2's.
    details: Based on comparing the lengths of the first (Block1) and second (Block2) blocks of '3's. If length(Block1) > length(Block2), then Block1->1 and Block2->2. Otherwise (if length(Block1) <= length(Block2)), then Block1->2 and Block2->1.