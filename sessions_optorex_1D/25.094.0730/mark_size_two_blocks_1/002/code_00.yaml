input_type: sequence_of_integers
output_type: sequence_of_integers # Represented as space-separated string
elements:
  - type: sequence
    description: A list/array of single integers (0 or 1 in input, 0, 1, or 3 in output).
    properties:
      - length: Preserved between input and output.
      - values: Input contains only 0 and 1. Output contains 0, 1, and 3.
objects:
  - object: digit_zero
    description: The integer 0 in the sequence.
    properties:
      - mutable: Can change to 3 under specific conditions.
      - condition_for_change: See 'actions' section for detailed logic.
  - object: digit_one
    description: The integer 1 in the sequence.
    properties:
      - immutable: Does not change value.
      - role: Acts as part of a trigger pattern ('1 1').
      - inhibitor: A sequence of '1 1 1' prevents an adjacent '0' from changing.
  - object: digit_three
    description: The integer 3 appearing only in the output sequence.
    properties:
      - origin: Replaces a 0 from the input sequence based on the transformation rule.
relationships:
  - relationship: adjacency_and_pattern
    description: The transformation depends on the immediate neighbors forming specific patterns relative to a '0'.
    properties:
      - pattern_110: The sequence '1 1 0' triggers a change if the first '1' is not preceded by another '1'.
      - pattern_011: The sequence '0 1 1' triggers a change if the second '1' is not followed by another '1'.
actions:
  - action: process_sequence
    description: Iterate through the input sequence to generate the output sequence.
    steps:
      - step: receive_input
        description: Accept the input sequence of integers.
      - step: initialize_output
        description: Create a copy of the input sequence to serve as the initial output sequence.
      - step: iterate_and_transform
        description: Loop through each element (digit) of the input sequence using its index `i` and value `digit`.
        sub_steps:
          - check_if_zero: If `digit` is 0.
          - check_condition_1: Check if the pattern `X 1 1 0` exists ending at index `i`, where `X` is not 1 (or `i=2`). Specifically, check `i >= 2` AND `input[i-2] == 1` AND `input[i-1] == 1` AND (`i < 3` OR `input[i-3] != 1`).
          - check_condition_2: Check if the pattern `0 1 1 X` exists starting at index `i`, where `X` is not 1 (or `i=n-3`). Specifically, check `i <= n - 3` AND `input[i+1] == 1` AND `input[i+2] == 1` AND (`i > n - 4` OR `input[i+3] != 1`).
          - apply_change: If either Condition 1 OR Condition 2 is true, set the element at index `i` in the output sequence to 3.
          - no_change: If the element is 1, or if it is 0 but neither condition was met, the element at index `i` in the output sequence remains unchanged from the input.
      - step: format_output
        description: Convert the final output sequence of integers into a space-separated string.