elements:
  - type: sequence
    description: A list of single digits (integers 0 or 1 in input, 0, 1, or 3 in output).
    properties:
      - length: Preserved between input and output.
      - values_input: Contains only 0 and 1.
      - values_output: Contains 0, 1, and 3.
objects:
  - object: digit_zero
    description: The digit '0' in the sequence.
    properties:
      - mutable: Can change to '3' under specific conditions.
  - object: digit_one
    description: The digit '1' in the sequence.
    properties:
      - immutable: Does not change.
  - object: digit_three
    description: The digit '3' appearing only in the output sequence.
    properties:
      - origin: Replaces a '0' from the input sequence.
  - object: pattern_one_one
    description: The sub-sequence '1 1'.
    properties:
      - role: Trigger for changing adjacent '0's.
  - object: pattern_one_one_one
    description: The sub-sequence '1 1 1'.
    properties:
      - role: Inhibitor for changing adjacent '0's. If a '1 1' is part of '1 1 1', it does not trigger a change in the adjacent '0'.
relationships:
  - relationship: adjacency
    description: The position of a digit relative to its immediate neighbors.
    property: Determines if a '0' is next to '1 1'.
actions:
  - action: copy_input_to_output
    description: Create an initial output sequence identical to the input sequence.
  - action: iterate_sequence
    description: Process the sequence element by element using its index.
  - action: check_zero_condition
    description: For each element at index 'i', if it is '0' in the input sequence, check its neighbors.
  - action: evaluate_left_neighbor_pattern
    description: Check if the elements at index 'i-2' and 'i-1' are both '1'. This corresponds to the pattern '1 1 0'.
    condition: Index 'i' must be >= 2.
    exclusion: This check is invalid if index 'i-3' exists and the element at 'i-3' is also '1' (forming '1 1 1 0').
  - action: evaluate_right_neighbor_pattern
    description: Check if the elements at index 'i+1' and 'i+2' are both '1'. This corresponds to the pattern '0 1 1'.
    condition: Index 'i' must be <= length - 3.
    exclusion: This check is invalid if index 'i+3' exists and the element at 'i+3' is also '1' (forming '0 1 1 1').
  - action: replace_zero_with_three
    description: If either the valid left neighbor pattern ('X 1 1 0' where X!=1 or start) OR the valid right neighbor pattern ('0 1 1 X' where X!=1 or end) is found, change the element at index 'i' in the output sequence to '3'.
  - action: retain_digit
    description: If the input digit is '1', or if it is '0' but the conditions for changing to '3' are not met, keep the original digit in the output sequence.