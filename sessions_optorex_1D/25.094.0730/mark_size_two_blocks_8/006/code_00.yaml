task_elements:
  - name: input_sequence
    type: list of integers
    description: A sequence containing only 0s and 1s.
    properties:
      - length: variable
  - name: output_sequence
    type: list of integers
    description: The transformed sequence containing 0s, 1s, and 3s.
    properties:
      - length: same as input_sequence
      - possible_values: [0, 1, 3]
    relationship: Derived from input_sequence based on modification rules.
  - name: target_pattern
    type: sequence of integers
    value: [1, 1]
    description: The core pattern sought within the input sequence.
  - name: disqualifying_context
    type: integer
    value: 1
    description: If this value immediately precedes or follows the target_pattern, the pattern does not trigger modifications.
  - name: neighbor_context
    type: integer
    value: 0
    description: The value of a neighbor (preceding or succeeding the target_pattern) that will be modified.
  - name: replacement_value
    type: integer
    value: 3
    description: The value used to replace qualifying neighbors.

actions:
  - name: initialize_output
    input: input_sequence
    output: output_sequence
    description: Create a mutable copy of the input_sequence to serve as the initial output_sequence.
  - name: scan_for_pattern
    input: input_sequence
    output: indices of potential target_pattern occurrences
    description: Iterate through the input_sequence, checking each position `i` for the start of the target_pattern `[input_sequence[i], input_sequence[i+1]]`.
  - name: check_pattern_context
    input: input_sequence, index `i` of found pattern start
    output: boolean (is_isolated)
    description: For a found pattern at `i`, check if `input_sequence[i-1]` is 1 or if `input_sequence[i+2]` is 1 (handling boundary conditions). The pattern is "isolated" if neither is true.
  - name: modify_neighbors
    input: input_sequence, output_sequence, index `i` of isolated pattern start
    output: updated output_sequence
    description: If the pattern at `i` is isolated, check the neighbors `input_sequence[i-1]` and `input_sequence[i+2]`. If a neighbor exists and is 0, update the corresponding element in `output_sequence` to 3.

process_flow:
  - Create a deep copy of the `input_sequence` called `output_sequence`.
  - Iterate through the `input_sequence` with index `i` from 0 up to `length - 2`.
  - At each `i`, check if `input_sequence[i] == 1` and `input_sequence[i+1] == 1`.
  - If the pattern `[1, 1]` is found:
    - Determine if the pattern is "isolated":
      - Check if `i > 0` and `input_sequence[i-1] == 1`. This is `preceded_by_1`.
      - Check if `i + 2 < length` and `input_sequence[i+2] == 1`. This is `followed_by_1`.
      - The pattern is isolated if `not preceded_by_1` and `not followed_by_1`.
    - If the pattern is isolated:
      - Check the preceding neighbor: If `i > 0` and `input_sequence[i-1] == 0`, set `output_sequence[i-1] = 3`.
      - Check the succeeding neighbor: If `i + 2 < length` and `input_sequence[i+2] == 0`, set `output_sequence[i+2] = 3`.
  - After the loop completes, return the `output_sequence`.

constraints:
  - Modifications only occur around `[1, 1]` patterns.
  - The `[1, 1]` pattern must be isolated (not adjacent to another `1`) to trigger modifications.
  - Only neighbors with the value `0` are changed to `3`.
  - The original `input_sequence` is used for all checks (pattern finding, context checking, neighbor value checking); modifications are only applied to the `output_sequence`.