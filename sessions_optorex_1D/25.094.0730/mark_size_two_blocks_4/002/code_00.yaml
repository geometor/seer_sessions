task_type: sequence_transformation
input_elements:
  - type: integer_sequence # Updated from string
    element_type: digit
    values: [0, 1]
output_elements:
  - type: integer_sequence # Updated from string
    element_type: digit
    values: [0, 1, 3]
structure: 1D_sequence (list or array of integers)
patterns:
  - name: target_sequence
    value: [0, 1, 1, 0]
    description: The specific 4-element sequence that triggers modifications.
  - name: modified_elements
    value: [0] # The elements within the target sequence that get changed.
    indices_relative_to_pattern_start: [0, 3]
  - name: result_element
    value: 3
    description: The element that replaces the original '0's at the start and end of the target_sequence.
relationships:
  - type: fixed_pattern_match
    description: The transformation depends on finding the exact sequence [0, 1, 1, 0].
actions:
  - name: pattern_based_replacement
    description: Identify all occurrences of the [0, 1, 1, 0] sequence in the input and replace the first and last elements (the '0's) of each occurrence with '3' in the output sequence.
    conditions:
      - pattern_match: A subsequence matches [0, 1, 1, 0] starting at index i.
    outcome: The elements at index i and index i+3 in the output sequence are set to '3'.
  - name: identity_copy
    description: Elements not part of a [0, 1, 1, 0] pattern, or the middle '1's within the pattern, are copied unchanged to the output sequence.
    conditions:
      - not_part_of_matched_pattern_ends: The element is not the first or last '0' of a detected [0, 1, 1, 0] pattern.
    outcome: Element value remains unchanged in the output sequence.
invariants:
  - The sequence length remains the same.
  - The digits '1' are never modified.
  - The relative order of elements is preserved, except for the specific 0 -> 3 replacements.
  - Modifications are based on patterns found in the original input sequence.