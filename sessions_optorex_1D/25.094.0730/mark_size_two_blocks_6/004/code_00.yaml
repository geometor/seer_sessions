task_description: "Modify a sequence of 0s and 1s: Change 0s to 3s if they are immediately adjacent to an 'isolated' block of exactly two 1s."
elements:
  - type: sequence
    name: input_list
    contains:
      - type: integer
        possible_values: [0, 1]
  - type: sequence
    name: output_list
    contains:
      - type: integer
        possible_values: [0, 1, 3]
    relationship: "Derived from input_list by conditional modification. Same length as input_list."
objects:
  - name: digit_zero
    value: 0
    property: "Can be changed to 3 under specific conditions."
  - name: digit_one
    value: 1
    property: "Constituent of the trigger pattern."
  - name: digit_three
    value: 3
    property: "Result of transforming a specific digit_zero."
  - name: isolated_block_one_one
    property: "A sequence of exactly two consecutive 1s within the input_list."
    condition: "The sequence `[1, 1]` must not be immediately preceded by a 1 and must not be immediately followed by a 1."
    relationship: "Acts as the trigger for transforming adjacent 0s."
  - name: adjacent_zero
    property: "A digit_zero located at the index immediately before the start or immediately after the end of an isolated_block_one_one."
    relationship: "Target for transformation to digit_three."
actions:
  - name: find_isolated_blocks
    input: input_list
    output: list_of_indices
    description: "Iterate through the input_list, identifying the starting index `i` of each occurrence of `input_list[i] == 1` and `input_list[i+1] == 1`."
    post_condition: "For each found block at `i, i+1`, verify it is isolated: check `input_list[i-1]` (if `i>0`) is not 1, AND check `input_list[i+2]` (if `i+2 < len(list)`) is not 1."
    result: "A collection of starting indices `i` corresponding to confirmed isolated_block_one_one instances."
  - name: transform_adjacent_zeros
    input: input_list, list_of_indices (from find_isolated_blocks)
    output: output_list
    description: "Initialize output_list as a copy of input_list. For each index `i` in list_of_indices:"
    steps:
      - "Check position `i-1`: If `i > 0` AND `input_list[i-1] == 0`, set `output_list[i-1] = 3`."
      - "Check position `i+2`: If `i+2 < len(input_list)` AND `input_list[i+2] == 0`, set `output_list[i+2] = 3`."
    result: "The final transformed output_list."
relationships:
  - type: adjacency
    description: "A 0 at index `k` is adjacent to a block at `i, i+1` if `k = i-1` or `k = i+2`."
  - type: trigger
    subject: isolated_block_one_one
    action: "Initiates the potential transformation of adjacent_zero elements."
  - type: transformation
    subject: adjacent_zero
    result: digit_three
    condition: "Must be adjacent to an isolated_block_one_one."
constraints:
  - "The transformation only applies to 0s."
  - "The transformation is only triggered by blocks of *exactly* two 1s."
  - "The original input list values are used for all checks (identifying blocks, checking neighbors); modifications are only applied to the output list."
  - "Boundary conditions (start/end of the list) must be handled correctly when checking for isolation and adjacency."