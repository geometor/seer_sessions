Input:
  type: string
  format: Space-separated sequence of digits '0' and '1'.
  parsing: Must be parsed into a list of integers.
Output:
  type: list
  element_type: int
  values: [0, 1, 3]
  length: Same as the number of elements in the parsed input list.
Transformation:
  primary_action: Conditionally replace elements.
  target_element_value: 0
  replacement_value: 3
  condition:
    description: >
      A '0' element is replaced by '3' if it is immediately adjacent (left or right neighbor) 
      to a block of exactly two consecutive '1's. This '1 1' block must be "isolated", 
      meaning it is not part of a longer sequence of '1's (e.g., '1 1 1').
    trigger_pattern_left: The '0' is at index `i`, `input[i-1]==1`, `input[i-2]==1`, AND (`i==2` OR `input[i-3]==0`). Handles `[Start] 1 1 0`.
    trigger_pattern_right: The '0' is at index `i`, `input[i+1]==1`, `input[i+2]==1`, AND (`i==n-3` OR `input[i+3]==0`). Handles `0 1 1 [End]`.
  unmodified_elements:
    - All '1's from the input remain '1's in the output.
    - '0's not meeting the adjacency condition remain '0's.
    - '0's adjacent to '1 1 1' or longer sequences of '1's remain '0's.