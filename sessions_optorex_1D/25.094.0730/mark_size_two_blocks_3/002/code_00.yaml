Input:
  type: List[int]
  element_values: [0, 1]
  length: variable (observed as 12 in examples)
Output:
  type: List[int]
  element_values: [0, 1, 3]
  length: Same as input length
Transformation:
  description: Conditionally replaces elements with value 0 based on adjacent patterns.
  action: Iterate through the input list and create a corresponding output list.
  rule:
    if_element: Input element value is 0.
    condition: The element at index `i` must be immediately adjacent (left or right) to a specific pattern `P`.
      pattern_P: A sequence of exactly two consecutive '1's (`[1, 1]`).
      isolation_condition: This `[1, 1]` pattern must *not* be part of a longer sequence of '1's.
        - Check left adjacency: `input[i-2:i] == [1, 1]` AND (`i < 3` or `input[i-3] == 0`).
        - Check right adjacency: `input[i+1:i+3] == [1, 1]` AND (`i+3 >= len(input)` or `input[i+3] == 0`).
    then_action: Set the corresponding output element at index `i` to 3.
    else_action: Keep the original element value (0 or 1) in the output list.
  unmodified_elements:
    - All elements with value 1.
    - All elements with value 0 that do not meet the adjacency and isolation conditions.