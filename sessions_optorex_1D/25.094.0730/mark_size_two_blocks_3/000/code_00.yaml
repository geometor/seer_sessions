Input:
  type: list
  element_type: int
  values: [0, 1]
Output:
  type: list
  element_type: int
  values: [0, 1, 3]
  length: Same as input length
Transformation:
  type: Conditional element replacement
  target_element_value: 0
  replacement_value: 3
  condition:
    description: The '0' element must be immediately adjacent (left or right neighbor) to a block of exactly two consecutive '1's.
    pattern_trigger: '1 1'
    pattern_negation: The '1 1' block cannot be part of a longer sequence of '1's (e.g., '1 1 1').
    examples:
      - '0 1 1 0' -> '0 1 1 3' (change right 0)
      - '0 1 1 0' -> '3 1 1 0' (change left 0)
      - '0 1 1 1 0' -> '0 1 1 1 0' (no change)
      - '1 1 0' -> '1 1 3' (change 0)
      - '0 1 1' -> '3 1 1' (change 0)
  unmodified_elements:
    - All '1's from the input remain '1's in the output.
    - '0's not meeting the adjacency condition remain '0's.