Input:
  type: list
  element_type: int
  values: [0, 1]
  length: Variable (e.g., 12 in examples)
Output:
  type: list
  element_type: int
  values: [0, 1, 3]
  length: Same as input length
Transformation:
  description: Modifies elements of the input list based on local patterns.
  action: Replace specific '0' elements with '3'.
  target_element:
    value: 0
  replacement_value: 3
  condition:
    context: The target '0' must be immediately adjacent (left or right neighbor) to a specific pattern.
    pattern:
      sequence: [1, 1]
      occurrence: Exactly two consecutive '1's.
      isolation: This [1, 1] sequence must not be part of a longer sequence of '1's.
        - Example trigger: [0, 1, 1, 0] -> Changes leftmost 0 to 3, rightmost 0 to 3.
        - Example trigger: [start, 1, 1, 0] -> Changes 0 to 3.
        - Example trigger: [0, 1, 1, end] -> Changes 0 to 3.
        - Example non-trigger: [0, 1, 1, 1, 0] -> No change, because '1 1' is part of '1 1 1'.
        - Example non-trigger: [1, 1, 1, 0] -> No change.
        - Example non-trigger: [0, 1, 1, 1] -> No change.
  unmodified_elements:
    - All '1's from the input remain '1's in the output.
    - '0's that do not meet the adjacency and isolation condition remain '0's.