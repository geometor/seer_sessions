objects:
  - name: sequence
    properties:
      - elements: list of integers (initially 0 or 1, can become 3)
      - length: integer
  - name: sequence_element
    properties:
      - value: integer (0, 1, or 3)
      - position: index within the sequence (0-based)

relationships:
  - type: adjacency
    description: Positional relationship between elements. Used to check patterns like [1, 1, 0] or [0, 1, 1].
    properties:
      - element_at_offset(offset): Value of the element relative to a given index.

actions:
  - name: check_and_replace
    description: Iterates through the sequence, checks specific conditions around '0' elements, and replaces them with '3' if conditions are met.
    inputs:
      - input_sequence: sequence
    outputs:
      - output_sequence: sequence

conditions_for_change:
  - target_element_is_zero: The element at the current index `i` must have a value of 0.
  - is_adjacent_to_exact_pattern_11: EITHER of the following must be true:
    - condition_A: # Preceded by exactly 1 1
        - Element `i-2` exists and is 1.
        - Element `i-1` exists and is 1.
        - Element `i-3` is *not* 1 (or index `i-3` is out of bounds).
    - condition_B: # Succeeded by exactly 1 1
        - Element `i+1` exists and is 1.
        - Element `i+2` exists and is 1.
        - Element `i+3` is *not* 1 (or index `i+3` is out of bounds).

transformation_goal:
  - Create an output sequence by applying the `check_and_replace` action based on the specified `conditions_for_change` to the input sequence. Elements not meeting the conditions remain unchanged.