objects:
  - name: input_sequence
    type: List[int] # Or potentially numpy.ndarray based on execution environment
    properties:
      - contains only 0s and 2s
      - variable length (observed length 12 in examples)
  - name: output_sequence
    type: List[int]
    properties:
      - contains only 0s, 2s, and 8s
      - same length as corresponding input_sequence
  - name: group_of_twos
    type: concept
    description: A contiguous sub-sequence within the input_sequence containing only the number 2.
    properties:
      - start_index: The index in the input_sequence where the group begins.
      - length: The number of 2s in the group.

relationships:
  - type: mapping
    from: input_sequence element at index i
    to: output_sequence element at index i
  - type: dependency
    element: output value at index i
    depends_on:
      - input value at index i
      - if input[i] is 2, depends on the properties (start_index, length) of the group_of_twos it belongs to.

actions:
  - name: identify_groups
    description: Scan the input_sequence to find all consecutive groups_of_twos, noting their start index and length.
  - name: transform_elements
    description: Iterate through the input_sequence and determine the corresponding output value based on transformation rules.
    rules:
      - If input[i] is 0, output[i] is 0.
      - If input[i] is 2:
        - Identify the group_of_twos it belongs to (start_index, length).
        - If this is the first '2' of the group (i.e., index i == group_start_index), output[i] is 8.
        - If this is the second '2' of the group (i.e., index i == group_start_index + 1):
            - If the group's length is 4 or more, output[i] is 8.
            - Otherwise (group's length is 2 or 3), output[i] is 2.
        - If this is the third or subsequent '2' of the group (i.e., index i >= group_start_index + 2), output[i] is 2.
    processing_note: The iteration should advance by the group length after processing a group to avoid re-processing elements within the same group.

environment_note:
  - The execution environment might pass the input as a NumPy array. The transformation logic implementation needs to handle this, potentially by converting the input to a standard Python list or using NumPy-compatible operations.
