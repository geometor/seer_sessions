Input:
  type: List[int]
  elements:
    - value: 0
    - value: 2
Output:
  type: List[int]
  elements:
    - value: 0
    - value: 2
    - value: 8
Objects:
  - name: SequenceElement
    properties:
      - value: int (0, 2) # Input values
      - index: int # Position in the sequence
  - name: BlockOfTwos
    properties:
      - start_index: int
      - length: int # Number of consecutive 2s
      - is_qualifying: bool # True if starts at index 0 or after a 0
  - name: TransformedElement
    properties:
      - value: int (0, 2, 8) # Output values
      - source_index: int # Index of the corresponding input element
Actions:
  - name: IterateSequence
    input: Input Sequence
    output: SequenceElement (at current index)
  - name: CheckStartCondition
    input: SequenceElement (value=2), PreviousElement (or index=0)
    output: is_qualifying (bool)
  - name: MeasureBlockLength
    input: Input Sequence, start_index
    output: length (int)
  - name: TransformBlockElement
    input: position_in_block (int, 0-based), block_length (int)
    output: TransformedElement value (8 or 2)
  - name: AppendToOutput
    input: TransformedElement value or 0
    target: Output Sequence
TransformationRule:
  - description: Processes input sequence element by element, managing index carefully for blocks.
  - condition_0: If element is 0, append 0 to output.
  - condition_2: If element is 2:
    - check: Is it the start of a qualifying block (index 0 or preceded by 0)?
    - if_false: Append 2 to output.
    - if_true:
      - Determine block length.
      - For each element within the block (by position 0, 1, 2, ...):
        - Apply transformation based on position and block length:
          - pos 0 -> 8
          - pos 1 -> 8 if length >= 4 else 2
          - pos 2 -> 8 if length >= 6 else 2
          - pos 3+ -> 2
        - Append transformed value to output.
      - Advance main iteration index past the processed block.