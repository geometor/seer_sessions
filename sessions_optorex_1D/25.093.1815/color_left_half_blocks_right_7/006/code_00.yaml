task_description: "Transform a sequence of integers based on contiguous blocks of the value 2."
elements:
  - object: input_sequence
    properties:
      - type: Sequence of integers (e.g., list, numpy array)
      - allowed_values: [0, 2]
  - object: output_sequence
    properties:
      - type: List of integers
      - allowed_values: [0, 2, 8]
      - preserves_length_of: input_sequence
  - object: value_0
    properties:
      - integer: 0
    actions:
      - remains unchanged in its position.
  - object: value_2
    properties:
      - integer: 2
    actions:
      - may be transformed to 8 based on block context.
      - may remain 2 based on block context.
  - object: block_of_2s
    properties:
      - definition: A contiguous subsequence consisting only of the value 2.
      - length: k (number of 2s in the block)
    relationships:
      - separated by value 0 or sequence boundaries.
transformation_rule:
  condition: Applies to contiguous blocks of the value 2 within the input sequence.
  action:
    - For each block of k twos found:
      - Calculate the number of elements to change: `num_to_change = floor(k / 2)`.
      - Change the first `num_to_change` values (2s) within that block to 8.
      - The remaining `k - num_to_change` values (2s) in the block remain 2.
  scope: Applied independently to each block, preserving the position of 0s and the overall sequence length.