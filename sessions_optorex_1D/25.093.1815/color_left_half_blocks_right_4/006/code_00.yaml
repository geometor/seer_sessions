Task: Digit Sequence Transformation (Type Handling Refinement)

Objects:
  - Input_Sequence:
      Type: List or NumPy array of Integers # Acknowledging potential input types
      Properties:
        - Elements: Can be 0 or 2
        - Length: Variable
  - Output_Sequence:
      Type: List of Integers # Target type for processing and output
      Properties:
        - Elements: Can be 0, 2, or 8
        - Length: Same as Input_Sequence
  - Contiguous_Block_of_Twos:
      Type: Sub-sequence within Input_Sequence
      Properties:
        - Elements: All are 2
        - Length: L (where L >= 1)
        - Start_Index: Position in Input_Sequence
        - End_Index: Position in Input_Sequence (exclusive)
  - Element:
      Type: Integer
      Properties:
        - Value: 0, 2, or 8
        - Position: Index within a sequence

Relationships:
  - Output_Sequence is derived from Input_Sequence.
  - Elements in Output_Sequence correspond positionally to elements in Input_Sequence initially.
  - The transformation rule for an element '2' depends on its membership and position within a Contiguous_Block_of_Twos found in the input.

Actions:
  - Convert: Ensure the input sequence is processed as a standard Python list of standard Python integers.
  - Identify: Locate all Contiguous_Block_of_Twos within the processed input sequence.
  - Calculate: For each block of length L, determine the number of elements to change: floor(L / 2).
  - Transform: For each block, modify the corresponding elements in the Output_Sequence: change the first floor(L / 2) elements with value '2' to '8'.
  - Copy: Elements with value '0' and the remaining '2's (those not transformed to '8') are maintained in the Output_Sequence at the same position (achieved by initializing Output as a copy and only modifying specific '2's).

Derived_Properties:
  - Number_of_Changes_Per_Block: floor(Length of Contiguous_Block_of_Twos / 2)