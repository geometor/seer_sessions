task_type: sequence_transformation
input_format: sequence_of_integers # Can be string or list/array initially
output_format: sequence_of_integers # String or list format acceptable
input_elements:
  - type: integer
    values: [0, 2]
    role: data_value_or_delimiter
output_elements:
  - type: integer
    values: [0, 2, 8]
    role: transformed_data_value_or_preserved_delimiter
structure:
  - linear_sequence
invariants:
  - sequence_length: Input and output sequences have the same number of elements.
  - element_value_0: Elements with value 0 are unchanged.
  - element_position_0: The positions of elements with value 0 are preserved.
relationships:
  - type: contiguity
    description: The transformation depends on contiguous blocks of '2's delimited by '0's or sequence boundaries.
actions:
  - parse_input: Convert the input representation into a standard Python list of integers.
  - identify_blocks: Iterate through the list, identifying start and end indices of contiguous sequences of the integer value 2.
  - calculate_length: Determine the length (L) of each identified block of 2s.
  - calculate_modification_count: Compute N = L // 2 (integer division for floor) for each block.
  - modify_elements: In a copy of the input list, change the first N integer elements of each identified block from 2 to 8.
  - format_output: Convert the modified list of integers back to the required output format (e.g., space-separated string if needed).
