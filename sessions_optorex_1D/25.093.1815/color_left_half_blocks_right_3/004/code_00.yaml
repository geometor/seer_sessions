Objects:
  - Sequence:
      Type: List[int]
      Context: Represents both the input and the output data structure.
  - Element:
      Type: int
      Possible_Values_Input: [0, 2]
      Possible_Values_Output: [0, 2, 8]
  - Block_of_Twos:
      Type: Contiguous Subsequence
      Properties:
        - elements: Contains only the digit 2.
        - start_index: The index in the Sequence where the block begins.
        - end_index: The index in the Sequence immediately after the block ends.
        - length: (L) The number of elements in the block (end_index - start_index).
        - preceding_context: The value of the element at `start_index - 1`, or a special marker (e.g., 'Boundary') if `start_index` is 0.
  - Eligible_Block_of_Twos:
      Type: Block_of_Twos
      Condition: A Block_of_Twos where the `preceding_context` is 'Boundary' or the value 0.

Relationships:
  - The Output Sequence has the same length as the Input Sequence.
  - Each element in the Output Sequence corresponds positionally to an element in the Input Sequence.
  - An Element '0' in the Input maps directly to '0' in the Output.
  - An Element '2' in the Input maps to '8' in the Output *if* it is part of the initial segment of an Eligible_Block_of_Twos.
  - An Element '2' in the Input maps to '2' in the Output *if* it is not part of the initial segment of an Eligible_Block_of_Twos.

Actions:
  - Initialize: Create an Output Sequence as a copy of the Input Sequence.
  - Iterate: Process the Input Sequence elements sequentially using an index.
  - Identify_Block: When an Element '2' is encountered at the current index:
      - Check_Eligibility: Determine if the block starting at this index is an Eligible_Block_of_Twos (i.e., index is 0 or element at index-1 is 0).
      - If Eligible:
          - Calculate_Length: Find the length (L) of the contiguous block of '2's starting from the current index.
          - Calculate_Change_Count: Determine the number of elements to change: N = floor(L / 2).
          - Modify_Output: Change the first N elements of this block in the Output Sequence (from index to index + N - 1) from '2' to '8'.
          - Advance_Index: Update the iteration index to skip past the entirety of the processed block (set index to the end_index of the block).
      - If Not Eligible:
          - Advance_Index: Update the iteration index by 1 (the '2' remains unchanged as it was copied during initialization).
  - Handle_Zeros: When an Element '0' is encountered, simply advance the iteration index by 1 (it remains '0' as copied during initialization).
  - Finalize: Return the modified Output Sequence.
