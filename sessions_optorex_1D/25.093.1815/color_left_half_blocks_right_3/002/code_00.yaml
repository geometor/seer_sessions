Objects:
  - Input_Sequence:
      Type: List[int]
      Properties:
        - elements: Consists of digits 0 and 2.
        - length: Variable.
  - Output_Sequence:
      Type: List[int]
      Properties:
        - elements: Consists of digits 0, 2, and 8.
        - length: Same as Input_Sequence.
  - Digit:
      Type: int
      Values: [0, 2, 8]
  - Eligible_Block_of_Twos:
      Type: Subsequence
      Properties:
        - elements: Contains only the digit 2.
        - contiguous: Elements are adjacent in the Input_Sequence.
        - length: L (Number of 2s in the block).
        - condition: Starts either at the beginning of the Input_Sequence (index 0) or is immediately preceded by a 0.

Relationships:
  - Output_Sequence is derived from Input_Sequence element by element, based on context.
  - An element in the Output_Sequence is determined by the corresponding element in the Input_Sequence and its position within an Eligible_Block_of_Twos.
  - Digit '0' maps directly to '0'.
  - Digit '2' maps to '8' if it is within the first floor(L/2) positions of an Eligible_Block_of_Twos of length L.
  - Digit '2' maps to '2' otherwise (i.e., not part of an Eligible_Block_of_Twos, or in the latter part of one).

Actions:
  - Create a copy of the Input_Sequence to serve as the initial Output_Sequence.
  - Iterate through the Input_Sequence using an index.
  - Identify the start of any Eligible_Block_of_Twos.
  - For each Eligible_Block_of_Twos found starting at the current index:
      - Determine its length (L).
      - Calculate the number of elements to change: N = floor(L / 2).
      - Modify the Output_Sequence by changing the first N elements of the block (from the starting index) from 2 to 8.
      - Advance the iteration index past the entire processed block (by L positions).
  - If the current element is not the start of an Eligible_Block_of_Twos, advance the iteration index by 1.
  - Return the modified Output_Sequence.