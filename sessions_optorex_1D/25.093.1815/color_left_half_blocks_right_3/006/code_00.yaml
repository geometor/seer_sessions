Objects:
  - Input_Sequence:
      Type: List[int]  # Assumed to be list for logic; may need conversion if input is array.
      Properties:
        - elements: Consists of digits 0 and 2.
        - length: Variable.
  - Output_Sequence:
      Type: List[int]
      Properties:
        - elements: Consists of digits 0, 2, and 8.
        - length: Same as Input_Sequence.
  - Digit:
      Type: int
      Values: [0, 2, 8]
  - Eligible_Block_of_Twos:
      Type: Subsequence
      Properties:
        - elements: Contains only the digit 2.
        - contiguous: Elements are adjacent in the Input_Sequence.
        - eligibility_condition: Must start at index 0 OR the preceding element must be 0.
        - length: (L) Number of 2s in the block.

Relationships:
  - Output_Sequence is derived from Input_Sequence element by element or block by block.
  - A Digit '0' in Input_Sequence maps to '0' in Output_Sequence.
  - A Digit '2' in Input_Sequence maps to '8' or '2' in Output_Sequence based on block context.
  - The transformation of a '2' depends on its membership in an Eligible_Block_of_Twos.

Actions:
  - Iterate through the Input_Sequence using an index.
  - Create a copy of the Input_Sequence as the initial Output_Sequence.
  - Identify the start of potential Eligible_Block_of_Twos (element is '2' AND (index is 0 OR previous element is '0')).
  - If an eligible block starts at the current index:
      - Determine the block's length (L) by finding the end of the contiguous '2's.
      - Calculate the number of elements to change: N = floor(L / 2).
      - Modify the Output_Sequence: Change the first N elements of the block (from the start index) from '2' to '8'.
      - Advance the iteration index past the processed block (to the index immediately after the block).
  - If the current element is '0', or if it's a '2' that is *not* the start of an eligible block, simply advance the iteration index by one (no change needed in the output copy).
  - Return the final Output_Sequence.