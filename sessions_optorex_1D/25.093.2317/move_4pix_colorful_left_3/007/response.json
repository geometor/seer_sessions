{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms a 1D NumPy array of 12 digits by identifying the contiguous segment \nbetween the first and last non-zero digits, shifting this segment 4 positions \nto the left (clamping the start index at 0), and placing it into an output \narray initialized with 12 zeros.\n\"\"\"\n\nimport numpy as np\nfrom typing import Tuple, Optional\n\ndef _find_nonzero_segment_indices(input_array: np.ndarray) -> Optional[Tuple[int, int]]:\n    \"\"\"\n    Finds the indices of the first and last non-zero elements in a 1D array.\n\n    Args:\n        input_array: The 1D NumPy array to search within.\n\n    Returns:\n        A tuple containing the (start_index, end_index) of the non-zero segment,\n        or None if no non-zero elements are found.\n    \"\"\"\n    # Find indices of all non-zero elements\n    nonzero_indices = np.where(input_array != 0)[0]\n    \n    # Check if any non-zero elements were found\n    if len(nonzero_indices) == 0:\n        return None # No non-zero elements found\n    else:\n        # The first non-zero index is the minimum index found\n        start_index = nonzero_indices[0]\n        # The last non-zero index is the maximum index found\n        end_index = nonzero_indices[-1]\n        return start_index, end_index\n\ndef transform(input_array: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the segment shifting transformation to the input NumPy array.\n\n    Args:\n        input_array: A 1D NumPy array of 12 integers.\n\n    Returns:\n        A 1D NumPy array representing the transformed sequence.\n    \"\"\"\n    # Get the size of the input array (expected to be 12)\n    n = input_array.shape[0]\n    \n    # Initialize the output array with zeros, preserving the input dtype\n    output_array = np.zeros(n, dtype=input_array.dtype)\n\n    # 1. Find the indices of the first and last non-zero elements.\n    indices = _find_nonzero_segment_indices(input_array)\n\n    # 2. If no non-zero elements exist, return the initialized zero array.\n    if indices is None:\n        return output_array\n\n    start_index, end_index = indices\n\n    # 3. Extract the contiguous sub-array (the \"segment\").\n    segment = input_array[start_index : end_index + 1]\n\n    # 4. Calculate the target starting index for the segment in the output array.\n    shift_amount = 4\n    target_start_index = max(0, start_index - shift_amount)\n\n    # 5. Determine the portion of the segment that fits in the output array.\n    segment_len = len(segment)\n    # Calculate the end index for placement, capped by the output array length.\n    target_end_index = min(n, target_start_index + segment_len)\n    # Calculate how many elements from the segment can actually be placed.\n    length_to_place = target_end_index - target_start_index\n\n    # 6. Place the (potentially truncated) segment into the output array.\n    # Only proceed if there's space to place at least one element.\n    if length_to_place > 0:\n        # Slice the segment to get only the part that fits.\n        segment_to_place = segment[:length_to_place]\n        # Assign this part to the corresponding slice in the output array.\n        output_array[target_start_index : target_end_index] = segment_to_place\n    \n    # 7. Return the constructed output array.\n    return output_array\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7137,
    "candidates_token_count": 1624,
    "total_token_count": 8761,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.622528,
  "retries": 1
}