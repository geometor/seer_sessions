task_elements:
  - item: sequence
    properties:
      - type: numpy array of integers # Updated: Input is numpy array
      - length: 12
      - content: single digits (0-9)
  - item: core_block
    properties:
      - type: sub-sequence (numpy array slice)
      - definition: contiguous elements from the first non-zero digit to the last non-zero digit (inclusive) in the input sequence.
      - content: digits (can include internal zeros)
      - derived_from: input sequence
  - item: surrounding_zeros
    properties:
      - type: sequence elements
      - value: 0
      - position: before (leading) and after (trailing) the core_block in the input; fill remaining space in the output.

transformation:
  action: shift_left_and_reconstruct
  target: core_block
  parameters:
    - shift_amount: 4
    - sequence_length: 12
  details:
    - identify the start index (first_nz) of the core_block in the input array.
    - identify the end index (last_nz) of the core_block in the input array.
    - if no non-zero element exists (first_nz is -1), return the original input array.
    - extract the core_block slice: `input[first_nz : last_nz + 1]`.
    - calculate the new start index (new_start) for the core_block in the output: `new_start = max(0, first_nz - 4)`.
    - create a new output array of `sequence_length` (12) initialized with zeros.
    - determine the number of elements to copy from the core_block, considering the output array boundaries: `elements_to_copy = min(len(core_block), sequence_length - new_start)`.
    - copy the first `elements_to_copy` elements from the `core_block` into the output array, starting at `new_start`.
    - return the constructed output array.

edge_case:
  - condition: input sequence contains only zeros
    output: return the input sequence unchanged