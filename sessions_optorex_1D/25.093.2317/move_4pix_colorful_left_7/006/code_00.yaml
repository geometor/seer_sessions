task_type: sequence_transformation
input_object:
  type: numpy_array # Updated based on error message
  element_type: integer
  length: 12
  properties:
    - contains_zeros: true
    - contains_non_zero_digits: true
output_object:
  type: numpy_array # Assuming output format matches input format
  element_type: integer
  length: 12
  properties:
    - derived_from_input: true
transformation:
  action: circular_shift
  direction: left
  amount: 4
  implementation_note: Can be achieved using `numpy.roll(input_array, -4)` or list slicing `data[4:] + data[:4]` after converting to list.
  description: The input sequence is cyclically shifted 4 positions to the left to produce the output sequence.
examples_analysis:
  - example: train_1
    input: [0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0]
    output: [0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0]
    shift_match: true
  - example: train_2
    input: [0, 0, 0, 0, 0, 0, 5, 8, 2, 0, 0, 0]
    output: [0, 0, 5, 8, 2, 0, 0, 0, 0, 0, 0, 0]
    shift_match: true
  - example: train_3
    input: [0, 0, 0, 0, 0, 0, 0, 4, 9, 0, 0, 0]
    output: [0, 0, 0, 4, 9, 0, 0, 0, 0, 0, 0, 0]
    shift_match: true
  - example: train_4
    input: [0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0]
    output: [0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0]
    shift_match: true
  - example: train_5
    input: [0, 0, 0, 0, 8, 3, 6, 4, 9, 5, 3, 0]
    output: [8, 3, 6, 4, 9, 5, 3, 0, 0, 0, 0, 0]
    shift_match: true
  - example: train_6
    input: [0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 1, 6]
    output: [0, 0, 0, 0, 8, 8, 1, 6, 0, 0, 0, 0]
    shift_match: true
  - example: train_7
    input: [0, 0, 0, 0, 0, 0, 0, 0, 8, 6, 5, 6]
    output: [0, 0, 0, 0, 8, 6, 5, 6, 0, 0, 0, 0]
    shift_match: true