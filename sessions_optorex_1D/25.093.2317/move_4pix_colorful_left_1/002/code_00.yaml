task_description: Rearrange a sequence of digits by shifting the core non-zero segment to the left by a fixed amount.
elements:
  - object: sequence
    properties:
      - type: list or array of integers
      - length: constant between input and output (e.g., 12 in examples)
      - items: single digits (0-9)
  - object: core_segment
    description: The contiguous sub-sequence starting from the first non-zero digit and ending at the last non-zero digit, inclusive.
    properties:
      - content: list of digits (non-zero and potentially included zeros)
      - input_start_index: index of the first non-zero digit in the input sequence
      - input_end_index: index of the last non-zero digit in the input sequence
      - length: calculated as input_end_index - input_start_index + 1
  - object: leading_zeros
    description: Sequence of zero elements at the beginning of the list.
    properties:
      - count_input: number of zeros before the first non-zero element (equal to input_start_index)
      - count_output: calculated number of zeros before the core_segment in the output list
relationships:
  - type: identification
    action: find_first_nonzero_index
    inputs: [input_sequence]
    outputs: [input_start_index]
    condition: Returns -1 or signals if no non-zero element exists.
  - type: identification
    action: find_last_nonzero_index
    inputs: [input_sequence]
    outputs: [input_end_index]
    condition: Only relevant if input_start_index is not -1.
  - type: extraction
    action: extract_core_segment
    inputs: [input_sequence, input_start_index, input_end_index]
    outputs: [core_segment]
    condition: Only performed if input_start_index is not -1.
  - type: calculation
    action: calculate_output_leading_zeros
    inputs: [input_start_index]
    outputs: [count_output]
    rule: count_output = max(0, input_start_index - 4)
  - type: construction
    action: build_output_sequence
    inputs: [count_output, core_segment, original_sequence_length]
    outputs: [output_sequence]
    rule: Create a new list by concatenating 'count_output' zeros, the 'core_segment', and sufficient trailing zeros to match the 'original_sequence_length'.
special_cases:
  - condition: Input sequence contains only zeros (input_start_index is -1).
    result: Output sequence is identical to the input sequence.