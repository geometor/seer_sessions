{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport math\nimport numpy as np\n\n\"\"\"\nRearranges a sequence of digits (represented as a list or NumPy array of integers) \nby identifying the 'core segment' (from the first non-zero digit to the \nlast non-zero digit, inclusive). This core segment is then shifted 4 positions \nto the left within the sequence. If shifting 4 positions left would result in a \nnegative starting index, the segment starts at index 0 instead. The remaining \npositions in the sequence are filled with zeros (leading and trailing) to maintain \nthe original sequence length. If the input sequence contains only zeros, it is \nreturned unchanged.\n\"\"\"\n\n# Helper function to find the index of the first non-zero element\ndef _find_first_nonzero_index(int_list):\n    \"\"\"Finds the index of the first non-zero element in a list.\"\"\"\n    for i, num in enumerate(int_list):\n        if num != 0:\n            return i\n    return -1 # Indicate no non-zero element found\n\n# Helper function to find the index of the last non-zero element\ndef _find_last_nonzero_index(int_list):\n    \"\"\"Finds the index of the last non-zero element in a list.\"\"\"\n    # Iterate backwards to find the last occurrence efficiently\n    for i in range(len(int_list) - 1, -1, -1):\n        if int_list[i] != 0:\n            return i\n    return -1 # Should only happen if list is all zeros\n\ndef transform(input_grid) -> list:\n    \"\"\"\n    Applies the core segment shift transformation.\n\n    Args:\n        input_grid: A list or NumPy array of single-digit integers.\n\n    Returns:\n        A list representing the transformed sequence of digits.\n    \"\"\"\n    # 1. Receive the input sequence and standardize to list\n    if isinstance(input_grid, np.ndarray):\n        input_list = input_grid.tolist()\n    else:\n        # Assume it's list-like\n        input_list = list(input_grid) \n        \n    original_length = len(input_list)\n    \n    # Handle empty input case gracefully\n    if original_length == 0:\n        return []\n\n    # 2. Identify the \"core segment\"\n    # a. Find the index of the first non-zero digit\n    first_nz_idx = _find_first_nonzero_index(input_list)\n\n    # b. Handle All Zeros: If no non-zero digits exist, return a copy of the original sequence\n    if first_nz_idx == -1:\n        return list(input_list) \n\n    # c. Find the index of the last non-zero digit (guaranteed to be found now)\n    last_nz_idx = _find_last_nonzero_index(input_list) \n\n    # d. Extract the core segment\n    core_segment = input_list[first_nz_idx : last_nz_idx + 1]\n    core_length = len(core_segment)\n\n    # 3. Determine the target starting position for the core_segment\n    # a. Calculate the desired start index (shift left by 4)\n    target_start_idx = first_nz_idx - 4\n    # b. Adjust the start index to ensure it's not negative (bounded by 0)\n    output_start_idx = max(0, target_start_idx)\n\n    # 4. Construct the output sequence\n    # a. Create a new list of the original length, initialized with zeros\n    output_list = [0] * original_length\n\n    # b. Copy the core_segment into the new list at the calculated start index\n    # Calculate the end index for slicing in the output list\n    output_end_idx = output_start_idx + core_length \n    \n    # Ensure the segment fits within the bounds (should always be true if length is preserved)\n    # This also handles placing the segment correctly.\n    output_list[output_start_idx : output_end_idx] = core_segment\n\n    # 5. Return the constructed output sequence as a list\n    return output_list\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 10449,
    "candidates_token_count": 1286,
    "total_token_count": 11735,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.839604,
  "retries": 1
}