task_description: Rearrange a sequence of digits by shifting the core non-zero segment 4 positions to the left, ensuring it does not start before index 0.
elements:
  - object: sequence
    properties:
      - type: list of integers (derived from space-separated string)
      - length: constant between input and output (e.g., 12 in examples)
      - items: single digits (0-9)
  - object: core_segment
    description: The contiguous subsequence starting from the first non-zero digit and ending at the last non-zero digit in the input sequence, inclusive.
    properties:
      - content: preserved sequence of digits (non-zero and potentially included zeros)
      - input_start_index: index of the first non-zero digit in the input (`first_nz_idx`)
      - input_end_index: index of the last non-zero digit in the input (`last_nz_idx`)
      - length: calculated as `last_nz_idx - first_nz_idx + 1`
relationships:
  - type: transformation
    action: locate_core_segment
    inputs: [input_sequence]
    outputs: [core_segment, first_nz_idx, last_nz_idx]
    condition: Fails if input contains only zeros.
  - type: transformation
    action: calculate_output_start_index
    inputs: [first_nz_idx]
    outputs: [output_start_idx]
    rule: output_start_idx = max(0, first_nz_idx - 4)
  - type: transformation
    action: reconstruct_output_sequence
    inputs: [output_start_idx, core_segment, input_sequence_length]
    outputs: [output_sequence]
    rule: Create a zero-filled list of `input_sequence_length`. Place the `core_segment` into this list starting at `output_start_idx`.
special_cases:
  - condition: Input sequence contains only zeros.
    result: Output sequence is identical to the input sequence.
  - condition: Input sequence is empty.
    result: Output sequence is empty.
execution_notes:
  - The provided code execution (`code_00.py`) failed to produce the expected transformation, returning the input unchanged. The logic described here and in the Natural Language Program reflects the *intended* transformation observed from comparing inputs and *expected* outputs.