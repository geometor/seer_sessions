{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Tuple, Optional\n\n\"\"\"\nTransforms an input sequence of integers by identifying a 'core block' \n(from the first non-zero element to the last non-zero element, inclusive) \nand shifting this block 4 positions to the left within a new sequence of \nthe same length, initialized with zeros. Zeros pad the sequence on the right \nafter the shifted block. Elements shifted beyond the beginning of the sequence \nare discarded.\n\"\"\"\n\n# Helper function to find the indices of the first and last non-zero elements\ndef find_non_zero_bounds(sequence: List[int]) -> Optional[Tuple[int, int]]:\n    \"\"\"\n    Finds the index of the first and last non-zero element in a list.\n\n    Args:\n        sequence: The input list of integers.\n\n    Returns:\n        A tuple containing the start and end indices (inclusive) of the \n        non-zero block, or None if no non-zero elements are found.\n    \"\"\"\n    first_nz_idx = -1\n    last_nz_idx = -1\n    for i, val in enumerate(sequence):\n        if val != 0:\n            if first_nz_idx == -1:\n                first_nz_idx = i\n            last_nz_idx = i\n            \n    if first_nz_idx == -1:  # No non-zero elements found\n        return None\n    else:\n        return (first_nz_idx, last_nz_idx)\n\n# Helper function to extract the core block\ndef extract_core_block(sequence: List[int], start: int, end: int) -> List[int]:\n    \"\"\"\n    Extracts a sublist (core block) from the sequence based on start and end indices.\n\n    Args:\n        sequence: The input list.\n        start: The starting index (inclusive).\n        end: The ending index (inclusive).\n\n    Returns:\n        The extracted sublist.\n    \"\"\"\n    # Ensure indices are valid for slicing\n    if start < 0 or end < start or end >= len(sequence):\n         # This case shouldn't happen if called after find_non_zero_bounds returns valid indices\n         # but added for robustness. If bounds are invalid, return empty list.\n         return []\n    return sequence[start : end + 1]\n\n\ndef transform(input_sequence: List[int]) -> List[int]:\n    \"\"\"\n    Applies the transformation rule to the input sequence.\n    \"\"\"\n    # Define the fixed shift amount\n    shift_amount = 4\n    \n    # Get the length of the input sequence\n    n = len(input_sequence)\n    \n    # Initialize the output sequence with zeros\n    output_sequence = [0] * n \n\n    # Find the boundaries of the core block (first to last non-zero element)\n    bounds = find_non_zero_bounds(input_sequence)\n\n    # If no non-zero elements exist (sequence is all zeros or empty)\n    # return the initialized output sequence (all zeros)\n    if bounds is None:\n        return output_sequence \n\n    first_nz_idx, last_nz_idx = bounds\n\n    # Extract the core block using the identified boundaries\n    core_block = extract_core_block(input_sequence, first_nz_idx, last_nz_idx)\n    \n    # Calculate the target starting position for the core block in the output sequence\n    # by shifting the original start index left by the shift_amount\n    output_start_idx = first_nz_idx - shift_amount\n\n    # Place the core block into the output sequence at the calculated position\n    # Iterate through the core block elements and their relative indices (i)\n    for i, value in enumerate(core_block):\n        # Calculate the absolute target index in the output sequence\n        target_idx = output_start_idx + i\n        \n        # Check if the target index is within the valid bounds of the output sequence\n        if 0 <= target_idx < n:\n            # If valid, place the element from the core block into the output sequence\n            output_sequence[target_idx] = value\n        # If target_idx is out of bounds ( < 0 or >= n), the element is implicitly discarded\n\n    # Return the constructed output sequence\n    return output_sequence\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6338,
    "candidates_token_count": 1243,
    "total_token_count": 7581,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.666331,
  "retries": 1
}