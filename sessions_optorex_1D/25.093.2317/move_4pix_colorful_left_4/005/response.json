{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List\n\n\"\"\"\nTransforms an input sequence of integers by identifying a 'core block' \n(from the first non-zero element to the last non-zero element, inclusive) \nand shifting this block 4 positions to the left within a new sequence of \nthe same length, initialized with zeros. Zeros pad the sequence on the right \nafter the shifted block. Elements shifted beyond the beginning (index < 0) \nor end (index >= length) of the sequence are discarded. The final output is \nreturned as a list of integers.\n\"\"\"\n\ndef find_non_zero_bounds_np(sequence: np.ndarray) -> tuple[int, int] | None:\n    \"\"\"\n    Finds the index of the first and last non-zero element in a NumPy array.\n\n    Args:\n        sequence: The input NumPy array of integers.\n\n    Returns:\n        A tuple containing the start and end indices (inclusive) of the \n        non-zero block, or None if no non-zero elements are found.\n    \"\"\"\n    non_zero_indices = np.nonzero(sequence)[0] # Get indices for the first dimension\n    if len(non_zero_indices) == 0:\n        return None\n    first_nz_idx = non_zero_indices[0]\n    last_nz_idx = non_zero_indices[-1]\n    return (first_nz_idx, last_nz_idx)\n\ndef transform(input_sequence_list: List[int]) -> List[int]:\n    \"\"\"\n    Applies the core block left shift transformation to the input sequence.\n\n    Args:\n        input_sequence_list: The input list of integers.\n\n    Returns:\n        The transformed list of integers.\n    \"\"\"\n    # Ensure input is a NumPy array for efficient processing\n    input_sequence = np.array(input_sequence_list, dtype=int)\n    \n    # Get the length of the input sequence\n    n = len(input_sequence)\n    \n    # Define the fixed shift amount\n    shift_amount = 4\n\n    # Find the boundaries of the core block (first to last non-zero element)\n    bounds = find_non_zero_bounds_np(input_sequence)\n\n    # Initialize the output sequence with zeros\n    output_sequence = np.zeros(n, dtype=int) \n\n    # If no non-zero elements exist (sequence is all zeros or empty),\n    # return the initialized output sequence (all zeros) as a list\n    if bounds is None:\n        return output_sequence.tolist() \n\n    first_nz_idx, last_nz_idx = bounds\n\n    # Extract the core block using array slicing\n    core_block = input_sequence[first_nz_idx : last_nz_idx + 1]\n    core_len = len(core_block)\n    \n    # Calculate the *intended* starting position for the core block in the output sequence\n    output_start_idx_intended = first_nz_idx - shift_amount\n\n    # Determine the actual portion of the core block to copy and its destination\n    # This handles cases where the block shifts partially or fully off the left edge,\n    # or would extend beyond the right edge.\n\n    # Start index for slicing the core_block\n    copy_start_in_core = 0 \n    # Start index for placing into the output_sequence\n    copy_start_in_output = output_start_idx_intended\n    # Number of elements to copy\n    copy_len = core_len\n\n    # Adjust for shifting off the left boundary (index < 0)\n    if copy_start_in_output < 0:\n        # The amount shifted off the left edge needs to be removed from the start of the core block\n        off_left_amount = -copy_start_in_output\n        copy_start_in_core = off_left_amount\n        # Reduce the number of elements to copy\n        copy_len -= off_left_amount\n        # The actual placement starts at index 0 in the output\n        copy_start_in_output = 0\n        \n    # Adjust for extending beyond the right boundary (index >= n)\n    # We only need to check if the length needs adjustment, as copy_start_in_output is already >= 0 here\n    if copy_start_in_output + copy_len > n:\n         # Reduce the number of elements to copy so it fits within the array length\n         copy_len = n - copy_start_in_output\n\n    # Place the calculated portion of the core block into the output sequence if copy_len is positive\n    if copy_len > 0:\n        # Slice the core block to get the part that fits\n        core_to_copy = core_block[copy_start_in_core : copy_start_in_core + copy_len]\n        # Place it into the output sequence at the calculated position\n        output_sequence[copy_start_in_output : copy_start_in_output + copy_len] = core_to_copy\n\n    # Convert the final NumPy array back to a list and return it\n    return output_sequence.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7577,
    "candidates_token_count": 1935,
    "total_token_count": 9512,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 17.45761,
  "retries": 1
}