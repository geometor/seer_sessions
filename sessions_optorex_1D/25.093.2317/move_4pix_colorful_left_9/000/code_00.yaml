task_description: Shift a defined segment within a sequence of integers to the left.
input_type: sequence_of_integers
output_type: sequence_of_integers
constants:
  - shift_amount: 4
  - shift_direction: left
constraints:
  - input_length == output_length
  - sequence_length: 12 # Observed in examples, generalization possible
objects:
  - name: input_sequence
    type: list_of_integers
  - name: output_sequence
    type: list_of_integers
    properties:
      - length: same_as_input
      - content: derived_from_input
  - name: active_segment
    description: The contiguous sub-sequence from the first non-zero element to the last non-zero element in the input sequence.
    properties:
      - source: input_sequence
      - start_index_in_input: index of the first non-zero element
      - end_index_in_input: index of the last non-zero element
      - values: preserve relative order and values from input segment
  - name: padding
    description: Zero elements used to fill the sequence outside the active_segment.
    properties:
      - value: 0
actions:
  - name: identify_segment
    input: input_sequence
    output: start_index, end_index, segment_values
    steps:
      - Find the index of the first non-zero element.
      - Find the index of the last non-zero element.
      - Extract the sub-sequence between these indices (inclusive).
      - Handle edge case: If no non-zero elements, the segment is empty.
  - name: calculate_output_position
    input: segment_start_index_in_input, shift_amount
    output: segment_start_index_in_output
    formula: segment_start_index_in_output = segment_start_index_in_input - shift_amount
  - name: generate_output
    input: sequence_length, segment_values, segment_start_index_in_output
    output: output_sequence
    steps:
      - Create a list of zeros with the target sequence_length.
      - Place the segment_values into the list starting at segment_start_index_in_output.
      - Handle edge case: If the segment was empty, return the list of zeros.
relationships:
  - The output_sequence is constructed by placing the active_segment from the input_sequence at a new position, shifted left by the shift_amount, and filling the remaining positions with zeros.