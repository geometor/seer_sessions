{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\n\n\"\"\"\nTransforms a sequence of 12 digits based on the following rules:\n1. Locate the digit '2', which acts as a fixed marker.\n2. Find the nearest non-zero digit to the left of the marker ('left_fill_value').\n3. Replace all zeros between the 'left_fill_value' and the marker with 'left_fill_value'.\n4. Find the nearest non-zero digit to the right of the marker ('right_fill_value').\n5. Replace all zeros between the marker and the 'right_fill_value' with 'right_fill_value'.\n6. If no non-zero digit exists on a side, no filling occurs on that side.\n7. The marker '2' and existing non-zero digits remain unchanged.\n\"\"\"\n\ndef transform(input_sequence_str):\n    \"\"\"\n    Applies the described transformation to an input sequence string.\n\n    Args:\n        input_sequence_str: A string of space-separated single digits (e.g., \"0 0 0 0 2 0 7 7 7 7 7 7\").\n\n    Returns:\n        A string of space-separated single digits representing the transformed sequence.\n        Returns the original string if the marker '2' is not found.\n    \"\"\"\n    # Convert string input to list of integers\n    try:\n        input_list = [int(d) for d in input_sequence_str.split()]\n    except ValueError:\n        # Handle cases where input might not be valid integers\n        print(f\"Error: Input string '{input_sequence_str}' contains non-integer values.\")\n        return input_sequence_str # Or raise an error\n\n    if len(input_list) != 12:\n         print(f\"Warning: Input sequence length is not 12 ({len(input_list)}).\")\n         # Decide how to handle this - process anyway or return error? Processing for now.\n\n\n    # Initialize output_grid as a copy of the input list\n    output_list = copy.deepcopy(input_list)\n    n = len(output_list)\n\n    # Find the index of the marker '2'\n    marker_index = -1\n    try:\n        marker_index = input_list.index(2)\n    except ValueError:\n        # Marker '2' not found, return the original list as a string\n        print(\"Marker '2' not found in the input.\")\n        return input_sequence_str\n\n    # --- Left-side Fill ---\n    left_fill_value = None\n    left_fill_index = -1\n    # Search backwards from marker_index - 1\n    for i in range(marker_index - 1, -1, -1):\n        if input_list[i] != 0:\n            left_fill_value = input_list[i]\n            left_fill_index = i\n            break # Found the nearest non-zero\n\n    # If a left fill value was found, fill the zeros between it and the marker\n    if left_fill_value is not None:\n        for i in range(left_fill_index + 1, marker_index):\n            if output_list[i] == 0:\n                output_list[i] = left_fill_value\n\n    # --- Right-side Fill ---\n    right_fill_value = None\n    right_fill_index = -1\n    # Search forwards from marker_index + 1\n    for i in range(marker_index + 1, n):\n        if input_list[i] != 0:\n            right_fill_value = input_list[i]\n            right_fill_index = i\n            break # Found the nearest non-zero\n\n    # If a right fill value was found, fill the zeros between the marker and it\n    if right_fill_value is not None:\n        for i in range(marker_index + 1, right_fill_index):\n             if output_list[i] == 0:\n                output_list[i] = right_fill_value\n\n    # Convert the result list back to a space-separated string\n    output_sequence_str = \" \".join(map(str, output_list))\n    return output_sequence_str\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2084,
    "candidates_token_count": 1465,
    "total_token_count": 3549,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.818819,
  "retries": 1
}