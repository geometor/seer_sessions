{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport math # Although not strictly needed for this logic, kept as per template suggestion\nfrom typing import List, Optional, Tuple\n\n\"\"\"\nTransforms a sequence (list) of single-digit integers. The transformation hinges on \nthe location of the integer 2. If 2 is present, the algorithm scans left and right \nfor the *first* non-zero integer encountered. All zero elements situated strictly \n*between* the 2 and the found non-zero element are replaced with the value of that \nnon-zero element, provided the non-zero element is not immediately adjacent to the 2. \nIf 2 is not present, or if no non-zero element exists to the left/right, or if the \nnearest non-zero element is immediately adjacent to 2, no filling occurs on that side. \nThe function accepts a list of integers and returns the transformed list of integers.\n\"\"\"\n\ndef _find_first_occurrence(data: List[int], value: int) -> Optional[int]:\n    \"\"\"Finds the index of the first occurrence of a value in a list.\"\"\"\n    try:\n        return data.index(value)\n    except ValueError:\n        return None\n\ndef _scan_and_find_non_zero(data: List[int], start_index: int, end_index: int, step: int) -> Optional[Tuple[int, int]]:\n    \"\"\"\n    Scans a portion of the list for the first non-zero element.\n\n    Args:\n        data: The list to scan.\n        start_index: The starting index for the scan (inclusive).\n        end_index: The ending index for the scan (exclusive).\n        step: The step direction (-1 for left, 1 for right).\n\n    Returns:\n        A tuple (value, index) of the first non-zero element found, or None.\n    \"\"\"\n    for i in range(start_index, end_index, step):\n        if data[i] != 0:\n            return data[i], i\n    return None\n\ndef transform(input_list: List[int]) -> List[int]:\n    \"\"\"\n    Applies the fill transformation based on the position of '2'.\n\n    Args:\n        input_list: A list of integers representing the input sequence.\n\n    Returns:\n        A list of integers representing the transformed sequence.\n    \"\"\"\n    # Initialize the output list as a copy of the input list\n    output_list = list(input_list)\n    n = len(output_list)\n\n    # 1. Find the index of the number 2\n    index_of_2 = _find_first_occurrence(input_list, 2)\n\n    # 2. If 2 is not present, return the original sequence unchanged\n    if index_of_2 is None:\n        return output_list\n\n    # 3. Left Fill Scan & Fill\n    # Scan leftwards from the index immediately preceding 2\n    left_scan_result = _scan_and_find_non_zero(input_list, index_of_2 - 1, -1, -1)\n    if left_scan_result is not None:\n        left_fill_value, left_fill_index = left_scan_result\n        # Check if the found non-zero is not adjacent to 2\n        if left_fill_index < index_of_2 - 1:\n            # Iterate from the non-zero number's position + 1 up to 2's position\n            for i in range(left_fill_index + 1, index_of_2):\n                 # If the element is 0 (safety check, though implied by logic), fill it\n                if output_list[i] == 0:\n                    output_list[i] = left_fill_value\n\n    # 4. Right Fill Scan & Fill\n    # Scan rightwards from the index immediately following 2\n    right_scan_result = _scan_and_find_non_zero(input_list, index_of_2 + 1, n, 1)\n    if right_scan_result is not None:\n        right_fill_value, right_fill_index = right_scan_result\n        # Check if the found non-zero is not adjacent to 2\n        if right_fill_index > index_of_2 + 1:\n            # Iterate from 2's position + 1 up to the non-zero number's position\n            for i in range(index_of_2 + 1, right_fill_index):\n                 # If the element is 0 (safety check), fill it\n                if output_list[i] == 0:\n                    output_list[i] = right_fill_value\n\n    # 5. Return the modified output list\n    return output_list\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6142,
    "candidates_token_count": 1655,
    "total_token_count": 7797,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.186313,
  "retries": 1
}