{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nThe transformation operates on a sequence of 12 integers. It identifies the position of the number 2, which serves as a marker. It then finds the nearest non-zero integer to the left of the marker and the nearest non-zero integer to the right of the marker. Zeros located strictly between the left non-zero integer and the marker are replaced with the value of the left non-zero integer. Similarly, zeros located strictly between the marker and the right non-zero integer are replaced with the value of the right non-zero integer. If no non-zero integer exists on either side, no filling occurs on that side.\n\"\"\"\n\ndef find_first_occurrence(sequence, value, start_index=0, end_index=None, reverse=False):\n    \"\"\"\n    Helper function to find the first index of a value in a sequence within a specified range.\n    Can search forwards or backwards.\n\n    Args:\n        sequence (list): The list to search within.\n        value: The value to search for.\n        start_index (int): The starting index for the search.\n        end_index (int): The ending index (exclusive) for the search. Defaults to sequence length.\n        reverse (bool): If True, searches backwards from end_index-1 down to start_index.\n\n    Returns:\n        int: The index of the first occurrence, or -1 if not found.\n    \"\"\"\n    if end_index is None:\n        end_index = len(sequence)\n\n    if not reverse:\n        indices = range(start_index, end_index)\n    else:\n        indices = range(end_index - 1, start_index - 1, -1)\n\n    for i in indices:\n        if sequence[i] == value:\n            return i\n    return -1\n\ndef find_first_non_zero(sequence, start_index=0, end_index=None, reverse=False):\n    \"\"\"\n    Helper function to find the index and value of the first non-zero element\n    in a sequence within a specified range. Can search forwards or backwards.\n\n    Args:\n        sequence (list): The list to search within.\n        start_index (int): The starting index for the search.\n        end_index (int): The ending index (exclusive) for the search. Defaults to sequence length.\n        reverse (bool): If True, searches backwards from end_index-1 down to start_index.\n\n    Returns:\n        tuple: (index, value) of the first non-zero element, or (-1, 0) if none found.\n    \"\"\"\n    if end_index is None:\n        end_index = len(sequence)\n\n    if not reverse:\n        indices = range(start_index, end_index)\n    else:\n        # Search from end_index-1 down to start_index\n        indices = range(end_index - 1, start_index - 1, -1)\n\n    for i in indices:\n        if sequence[i] != 0:\n            return i, sequence[i]\n    return -1, 0 # Indicate not found\n\n\ndef transform(input_sequence):\n    \"\"\"\n    Applies a fill operation on a sequence of integers based on the position of the number 2.\n    Zeros between the number 2 and the nearest non-zero numbers on either side are filled\n    with those respective non-zero numbers.\n\n    Args:\n        input_sequence (list): A list of 12 integers.\n\n    Returns:\n        list: The modified list of integers.\n    \"\"\"\n    # Ensure we're working with a list and create a modifiable copy\n    if isinstance(input_sequence, np.ndarray):\n        # Convert numpy array to list if necessary\n        output_sequence = input_sequence.tolist()\n    elif isinstance(input_sequence, str):\n         # Convert string input to list\n         output_sequence = [int(x) for x in input_sequence.split()]\n    else:\n         # Assume it's already a list-like object, make a copy\n        output_sequence = list(input_sequence)\n        \n    n = len(output_sequence)\n\n    # 1. Locate the index of the number 2 (the marker)\n    marker_index = find_first_occurrence(output_sequence, 2)\n\n    # If 2 is not found (edge case, shouldn't happen based on examples)\n    if marker_index == -1:\n        return output_sequence # Return original if 2 is missing\n\n    # 2. Left Fill Process\n    # Search backwards from marker_index - 1 down to index 0\n    left_fill_index, left_fill_value = find_first_non_zero(output_sequence, \n                                                          start_index=0, \n                                                          end_index=marker_index, \n                                                          reverse=True)\n\n    # If a left fill value was found, fill the zeros between it and the marker\n    if left_fill_index != -1:\n        # Iterate from the index *after* the fill value up to (not including) the marker\n        for i in range(left_fill_index + 1, marker_index):\n            if output_sequence[i] == 0:\n                output_sequence[i] = left_fill_value\n\n    # 3. Right Fill Process\n    # Search forwards from marker_index + 1 to the end of the sequence\n    right_fill_index, right_fill_value = find_first_non_zero(output_sequence, \n                                                             start_index=marker_index + 1, \n                                                             end_index=n, \n                                                             reverse=False)\n\n    # If a right fill value was found, fill the zeros between the marker and it\n    if right_fill_index != -1:\n        # Iterate from the index *after* the marker up to (not including) the fill value\n        for i in range(marker_index + 1, right_fill_index):\n             if output_sequence[i] == 0:\n                output_sequence[i] = right_fill_value\n\n    # 4. Return the modified sequence\n    return output_sequence\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7118,
    "candidates_token_count": 1967,
    "total_token_count": 9085,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 19.413309,
  "retries": 1
}