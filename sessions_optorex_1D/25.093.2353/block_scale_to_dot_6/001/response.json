{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport math\nimport numpy as np\nimport re # Using re for potentially more complex string parsing if needed later, though split() is sufficient now.\n\n\"\"\"\nTransformation Rule:\n1. Find the digit '2' in the input sequence.\n2. Identify contiguous sequences of '0's immediately adjacent to the '2' on either side.\n3. Look for the first non-'0', non-'2' digit encountered when moving away from the '2' past these '0' sequences.\n4. If such a digit ('source_digit') is found and the sequence between it and the '2' consists only of '0's, replace those '0's with the 'source_digit'.\n5. Perform this check and potential fill operation independently for the left and right sides of the '2'.\n6. If '2' is not present, or if the conditions for filling are not met on either side, the sequence remains unchanged in that region.\n\"\"\"\n\ndef _parse_input(input_str: str) -> list[int]:\n    \"\"\"Parses the space-separated string into a list of integers.\"\"\"\n    return [int(x) for x in input_str.split()]\n\ndef _format_output(output_list: list[int]) -> str:\n    \"\"\"Formats the list of integers back into a space-separated string.\"\"\"\n    return \" \".join(map(str, output_list))\n\ndef transform(input_str: str) -> str:\n    \"\"\"\n    Applies the transformation rule to the input string sequence.\n    Finds '2', identifies adjacent '0' sequences, finds the nearest\n    non-zero/non-2 source digits, and fills the '0's towards the '2'\n    if the intermediate region is all '0's.\n    \"\"\"\n    input_list = _parse_input(input_str)\n    output_list = list(input_list) # Create a modifiable copy\n    n = len(output_list)\n\n    # Find the index of the boundary marker '2'\n    idx_2 = -1\n    try:\n        idx_2 = input_list.index(2)\n    except ValueError:\n        # '2' is not in the list, return the original sequence\n        return input_str\n\n    # --- Fill Left ---\n    idx_left = -1\n    source_left = -1\n    # Scan leftwards from idx_2 - 1 to find the first non-0, non-2 digit\n    for i in range(idx_2 - 1, -1, -1):\n        if output_list[i] != 0 and output_list[i] != 2:\n            idx_left = i\n            source_left = output_list[i]\n            break # Found the first source digit\n\n    # If a potential source digit was found on the left\n    if idx_left != -1:\n        # Check if all elements between idx_left and idx_2 are '0'\n        all_zeros_between = True\n        for i in range(idx_left + 1, idx_2):\n            if output_list[i] != 0:\n                all_zeros_between = False\n                break\n        \n        # If the condition is met, fill the zeros\n        if all_zeros_between:\n            for i in range(idx_left + 1, idx_2):\n                output_list[i] = source_left\n\n    # --- Fill Right ---\n    idx_right = -1\n    source_right = -1\n    # Scan rightwards from idx_2 + 1 to find the first non-0, non-2 digit\n    for i in range(idx_2 + 1, n):\n        if output_list[i] != 0 and output_list[i] != 2:\n            idx_right = i\n            source_right = output_list[i]\n            break # Found the first source digit\n\n    # If a potential source digit was found on the right\n    if idx_right != -1:\n        # Check if all elements between idx_2 and idx_right are '0'\n        all_zeros_between = True\n        for i in range(idx_2 + 1, idx_right):\n            if output_list[i] != 0:\n                all_zeros_between = False\n                break\n\n        # If the condition is met, fill the zeros\n        if all_zeros_between:\n            for i in range(idx_2 + 1, idx_right):\n                output_list[i] = source_right\n\n    # Format the modified list back into a string\n    return _format_output(output_list)\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2078,
    "candidates_token_count": 1812,
    "total_token_count": 3890,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.516252,
  "retries": 1
}