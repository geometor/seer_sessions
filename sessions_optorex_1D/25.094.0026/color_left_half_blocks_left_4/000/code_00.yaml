Task: Transform a sequence of digits based on contiguous subsequences.

Input:
  Type: String
  Content: Sequence of digits '0' and '2'.
  Role: Initial state.

Output:
  Type: String
  Content: Sequence of digits '0', '2', and '8'.
  Role: Transformed state.
  Constraint: Same length as input.

Elements:
  - Digit_0:
      Property: Value is 0.
      Behavior: Remains unchanged in the output at the same position.
      Role: Acts as a boundary for sequences of '2's.
  - Digit_2:
      Property: Value is 2.
      Behavior: Can either remain '2' or change to '8'.
      Role: Forms contiguous sequences between '0's or sequence boundaries.
  - Digit_8:
      Property: Value is 8.
      Behavior: Appears only in the output.
      Origin: Replaces a '2' from the input based on a rule.
  - Sequence_of_2s:
      Property: A contiguous subsequence containing only '2's.
      Property: Length (L).
      Relationship: Bounded by '0's or the start/end of the main sequence.
      Action: Triggers transformation of some of its '2's to '8's.

TransformationRule:
  Action: Identify all maximal contiguous subsequences composed solely of '2's.
  For_Each_Sequence:
    - Input: Sequence of '2's of length L.
    - Calculate: Number of changes `N = (L + (L % 2 == 0)) // 2`.
    - Modify: Change the last N digits '2' in that sequence to '8'.
  Other_Digits: Digits '0' and any '2's not part of the last N elements of a sequence remain unchanged.