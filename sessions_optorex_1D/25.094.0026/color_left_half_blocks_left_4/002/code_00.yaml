Task: Transform a space-separated sequence of digits based on contiguous subsequences.

Input:
  Type: String
  Format: Digits '0' and '2' separated by single spaces.
  Role: Initial state representation.

Output:
  Type: String
  Format: Digits '0', '2', and '8' separated by single spaces.
  Role: Transformed state representation.
  Constraint: Same number of elements (digits) as input.

Elements:
  - Digit_0:
      Property: String value is "0".
      Behavior: Remains unchanged in the output at the corresponding position.
      Role: Acts as a boundary for sequences of '2's.
  - Digit_2:
      Property: String value is "2".
      Behavior: Can either remain "2" or change to "8".
      Role: Forms contiguous sequences between "0"s or sequence boundaries.
  - Digit_8:
      Property: String value is "8".
      Behavior: Appears only in the output.
      Origin: Replaces a "2" from the input based on a transformation rule.
  - Sequence_of_2s:
      Property: A contiguous subsequence of "2" elements in the input list.
      Property: Length (L) = number of "2"s in the sequence.
      Relationship: Bounded by "0" elements or the start/end of the main sequence.
      Action: Triggers transformation of some of its trailing "2"s to "8"s.

TransformationRule:
  Preprocessing: Split the input string by spaces into a list of digit strings.
  Action: Identify all maximal contiguous subsequences composed solely of "2"s within the list.
  For_Each_Sequence:
    - Input: Sequence of "2"s of length L.
    - Calculate: Number of changes `N = (L + (1 if L is even else 0)) // 2`. (Integer division).
    - Modify: In the output list, change the last N elements corresponding to this sequence from "2" to "8".
  Other_Digits: Elements "0" and any "2"s not part of the last N elements of a sequence remain unchanged in the output list at their corresponding positions.
  Postprocessing: Join the elements of the modified list back into a single string separated by spaces.