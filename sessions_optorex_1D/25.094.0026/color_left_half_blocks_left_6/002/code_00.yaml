objects:
  - name: sequence_element
    properties:
      - value: integer (0, 2, or 8)
      - position: index (integer >= 0)
  - name: input_sequence
    properties:
      - elements: list or array of integers (containing only 0s and 2s)
      - length: number of elements
  - name: output_sequence
    properties:
      - elements: list or array of integers (derived from input_sequence)
      - length: same as input_sequence length

relationships:
  - type: precedes
    subject: sequence_element (from input_sequence)
    object: sequence_element (from input_sequence)
    details: An element at index i-1 precedes the element at index i.

actions:
  - name: transform_element
    input: current_element_value (integer from input_sequence at index i)
    input: previous_element_value (integer from input_sequence at index i-1, only if i > 0)
    output: transformed_element_value (integer for output_sequence at index i)
    condition: If index i > 0 AND current_element_value is 2 AND previous_element_value is 2
    result_if_true: transformed_element_value is 8
    result_if_false: transformed_element_value is current_element_value

process:
  - name: generate_output_sequence
    steps:
      - Receive the input_sequence (list or array of integers).
      - Initialize an empty output_sequence.
      - Iterate through the input_sequence using index `i` from 0 to length-1.
      - For the first element (index 0):
          - Append its value directly to the output_sequence.
      - For each subsequent element (index `i` > 0):
          - Get the current_element_value (input_sequence[i]).
          - Get the previous_element_value (input_sequence[i-1]).
          - Apply the transform_element action:
            - If current_element_value is 2 and previous_element_value is 2, append 8 to output_sequence.
            - Otherwise, append current_element_value to output_sequence.
      - Return the completed output_sequence.
