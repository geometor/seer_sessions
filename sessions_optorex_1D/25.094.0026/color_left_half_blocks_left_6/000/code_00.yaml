objects:
  - name: sequence_element
    properties:
      - value: integer (0, 2, or 8)
      - position: index (integer >= 0)
  - name: input_sequence
    properties:
      - elements: list of sequence_element (containing only 0s and 2s)
  - name: output_sequence
    properties:
      - elements: list of sequence_element (derived from input_sequence)

relationships:
  - type: precedes
    subject: sequence_element
    object: sequence_element
    details: An element at index i-1 precedes the element at index i.

actions:
  - name: transform_element
    input: current_element (sequence_element from input_sequence)
    input: previous_element (sequence_element from input_sequence, optional)
    output: transformed_element (sequence_element for output_sequence)
    condition: If current_element.value is 2 AND previous_element exists AND previous_element.value is 2
    result_if_true: transformed_element.value is 8
    result_if_false: transformed_element.value is current_element.value

process:
  - name: generate_output_sequence
    steps:
      - Iterate through the input_sequence element by element, keeping track of the index.
      - For each element at index i > 0:
          - Get the current_element (input_sequence[i]).
          - Get the previous_element (input_sequence[i-1]).
          - Apply the transform_element action.
      - For the first element (index 0):
          - The output element value is the same as the input element value.
      - Collect the transformed elements to form the output_sequence.