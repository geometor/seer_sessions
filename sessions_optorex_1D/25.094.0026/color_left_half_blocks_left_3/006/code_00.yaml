Data:
  - type: sequence
    format: list of integers (assumed, potentially passed as NumPy array)
    elements: [0, 2] for input, [0, 2, 8] for output
    length: variable, consistent between input and output for a given example (12 in training examples)

Objects:
  - name: sequence_element
    properties:
      - value: integer (0, 2, or 8)
      - index: integer (position in sequence, 0-based)
  - name: run_of_twos
    properties:
      - start_index: integer
      - end_index: integer
      - length: integer (number of consecutive '2's)
    definition: A contiguous subsequence containing only the value 2, bounded by 0s or the sequence ends.

Relationships:
  - sequence_element `belongs_to` sequence
  - run_of_twos `is_part_of` sequence
  - output sequence `is_derived_from` input sequence element-wise, with modifications based on runs.

Actions:
  - name: transform_sequence
    input: input_sequence (list or 1D array of 0s and 2s)
    output: output_sequence (list of 0s, 2s, and 8s)
    steps:
      - Create the output sequence initially identical to the input sequence.
      - Scan the input sequence to identify all distinct runs of consecutive '2's.
      - For each identified run:
        - Determine its length (L).
        - Calculate the count of elements to change: `num_to_change = floor(L / 2)`.
        - If `num_to_change > 0`:
          - Identify the indices corresponding to the last `num_to_change` elements within that run in the sequence.
          - Update the values at these indices in the output sequence to `8`.
      - Elements originally `0` and the first `ceil(L/2)` elements of any run of `2`s remain unchanged in the output sequence.