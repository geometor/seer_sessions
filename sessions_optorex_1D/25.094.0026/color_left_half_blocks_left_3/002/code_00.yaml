Data:
  - type: sequence
    format: list or 1D array of integers
    elements: Input contains [0, 2]. Output contains [0, 2, 8].
    length: Input and output sequences have the same length.

Objects:
  - name: sequence_element
    properties:
      - value: integer (0, 2, or 8)
      - index: integer (position within the sequence)
  - name: run_of_twos
    properties:
      - start_index: integer
      - end_index: integer
      - length: L (integer, number of consecutive '2's)
    definition: A maximal contiguous subsequence containing only the value 2. Runs are separated by 0s or sequence boundaries.

Relationships:
  - output sequence `is_derived_from` input sequence element-wise, with modifications based on context.
  - sequence elements `0` in the input map directly to `0` in the output at the same index.
  - sequence elements `2` in the input may map to `2` or `8` in the output depending on their position within a `run_of_twos`.

Actions:
  - name: transform_sequence
    input: input_sequence (list/array of 0s and 2s)
    output: output_sequence (list/array of 0s, 2s, and 8s)
    steps:
      - Initialize the output sequence as a copy of the input sequence.
      - Identify all maximal contiguous runs of the value '2' in the input sequence.
      - For each identified run of '2's:
        - Let L be the length of the run.
        - Calculate the number of elements to keep as '2': `num_keep = ceil(L / 2)`.
        - Calculate the number of elements to change to '8': `num_change = floor(L / 2)`.
        - If `num_change > 0`:
          - Identify the indices corresponding to the last `num_change` elements within that run in the sequence.
          - Update the values at these specific indices in the *output* sequence to '8'.
      - Elements with value '0' and the first `num_keep` elements of each run of '2's remain unchanged from the initial copy.