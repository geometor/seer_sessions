Data:
  - type: sequence
    format: 1D list of integers
    elements: [0, 2] for input, [0, 2, 8] for output
    length: fixed (e.g., 12 in examples)

Objects:
  - name: sequence_element
    properties:
      - value: integer (0, 2, or 8)
      - index: integer (position in sequence)
  - name: run_of_twos
    properties:
      - start_index: integer
      - end_index: integer
      - length: integer (number of consecutive '2's)
    definition: A contiguous subsequence containing only the value 2, bounded by 0s or the sequence ends.

Relationships:
  - sequence_element `belongs_to` sequence
  - run_of_twos `is_part_of` sequence
  - output sequence `is_derived_from` input sequence

Actions:
  - name: transform
    input: input_sequence (1D list of integers)
    output: output_sequence (1D list of integers)
    steps:
      - Initialize the output sequence as a copy of the input sequence.
      - Iterate through the input sequence to identify all runs_of_twos.
      - For each identified run:
        - Get its start_index, end_index, and length (L).
        - Calculate the number of elements to change: `num_to_change = floor(L / 2)`.
        - If `num_to_change > 0`:
          - Determine the index where changes start: `change_start_index = end_index - num_to_change + 1`.
          - Modify the output sequence: Change the elements from `change_start_index` to `end_index` (inclusive) to the value 8.
      - Return the modified output sequence.