task_description: "Transform a sequence of 0s and 2s by selectively replacing some 2s with 8s based on their grouping."
elements:
  - type: sequence # Updated: Explicitly sequence/array
    role: input
    dtype: integer
    container: numpy.ndarray # Updated: Specify container type
    vocabulary: [0, 2]
  - type: sequence # Updated: Explicitly sequence/array
    role: output
    dtype: integer
    container: numpy.ndarray # Assuming output should also be ndarray
    vocabulary: [0, 2, 8]
structure:
  - constraint: "Output sequence length equals input sequence length."
  - invariant: "Positions of 0s remain unchanged."
objects:
  - object: "Contiguous block of 2s"
    description: "A maximal subsequence of one or more consecutive 2s within the input sequence, delimited by 0s or sequence boundaries."
    properties:
      - name: "Start Index"
        symbol: S
        description: "The index of the first '2' in the block within the input sequence."
      - name: "Length"
        symbol: L
        description: "The number of 2s in the block."
actions:
  - action: "Conditional Replacement"
    target: "Elements within a 'Contiguous block of 2s'"
    condition: |
      Based on the block's length (L):
      - If L = 1: No replacement occurs.
      - If L = 2 or L = 3: Replace the '2' at index S + L - 1 (the last one) with '8'.
      - If L >= 4: Replace the '2's at indices S + L - 1 (last) and S + L - 2 (second-to-last) with '8'.
    output_effect: "Modifies the elements within the corresponding positions in the output sequence."
relationships:
  - relationship: "Input to Output Mapping"
    description: "Each element in the output corresponds positionally to an element in the input. 0s map to 0s. 2s map to 2s or 8s based on the block rule applied to the input sequence."
