{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies a contiguous block of identical non-zero integers in a 1D NumPy input array.\nShifts this block 4 positions to the right within a new array of the same size, filled with zeros elsewhere.\n\"\"\"\n\nimport numpy as np\n\ndef find_non_zero_block(input_array):\n    \"\"\"\n    Finds the start index, length, and value of the first contiguous non-zero block.\n\n    Args:\n        input_array: A 1D NumPy array of integers.\n\n    Returns:\n        A tuple (start_index, block_length, block_value) if a block is found,\n        otherwise (None, None, None).\n    \"\"\"\n    non_zero_indices = np.where(input_array != 0)[0]\n\n    if len(non_zero_indices) == 0:\n        return None, None, None # No non-zero elements\n\n    start_index = non_zero_indices[0]\n    block_value = input_array[start_index]\n    block_length = 0\n\n    # Iterate from the start index to find the end of the contiguous block\n    for i in range(start_index, len(input_array)):\n        if input_array[i] == block_value:\n            block_length += 1\n        else:\n            break # End of the block (either zero or different non-zero)\n\n    return start_index, block_length, block_value\n\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Transforms the input 1D NumPy array by shifting the non-zero block.\n\n    Args:\n        input_grid: A 1D NumPy array of integers.\n\n    Returns:\n        A 1D NumPy array with the non-zero block shifted 4 positions right.\n    \"\"\"\n    # Get the size of the input array\n    n = len(input_grid)\n\n    # Initialize output_grid as a NumPy array of zeros with the same size\n    output_grid = np.zeros(n, dtype=input_grid.dtype)\n\n    # Find the contiguous block of non-zero integers in the input\n    start_index, block_length, block_value = find_non_zero_block(input_grid)\n\n    # If a block was found, proceed to shift it\n    if start_index is not None:\n        # Calculate the new starting index for the block\n        new_start_index = start_index + 4\n\n        # Place the block into the output grid at the new position\n        for i in range(block_length):\n            target_index = new_start_index + i\n            # Check array bounds before writing\n            if target_index < n:\n                output_grid[target_index] = block_value\n\n    # Return the constructed output grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6011,
    "candidates_token_count": 645,
    "total_token_count": 6656,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.254746,
  "retries": 1
}