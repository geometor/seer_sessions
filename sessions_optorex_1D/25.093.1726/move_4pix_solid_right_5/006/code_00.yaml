task_type: sequence_transformation
description: Shift a contiguous block of identical non-zero digits within a fixed-length sequence.
input_data:
  type: sequence # Represented as a list or 1D NumPy array
  length: 12
  elements:
    type: integers
  composition:
    - background:
        value: 0
    - foreground_object:
        type: contiguous_block
        quantity: exactly_one
        properties:
          - digits_are_identical
          - digit_value: non-zero_integer (varies per example)
          - length: variable (varies per example, >= 2)
          - position: variable (start_index varies)
output_data:
  type: sequence # Represented as a list or 1D NumPy array
  length: 12
  elements:
    type: integers
  composition:
    - background:
        value: 0
    - foreground_object:
        type: contiguous_block (identical to input block)
        quantity: exactly_one
        properties:
          - digits_are_identical (same as input)
          - digit_value: non-zero_integer (same as input)
          - length: variable (same as input)
          - position: shifted_from_input
transformation:
  action: find_and_shift_block
  object_to_find:
    description: The unique contiguous block of identical non-zero digits.
    properties_to_determine:
      - start_index
      - length
      - digit_value
  shift_details:
    direction: right
    amount: 4 positions
    calculation: output_start_index = input_start_index + 4
  output_construction:
    - Initialize an output sequence of length 12 with all zeros.
    - Place the identified block (using its determined value and length) into the output sequence starting at the calculated output_start_index.
    - Ensure placement respects sequence boundaries (although examples do not show blocks shifting off the end).
error_analysis:
  previous_code_error: ValueError on boolean array comparison.
  recommendation: Implement block finding and comparison logic robustly, ensuring single boolean values for conditions, possibly using explicit loops with scalar comparisons or careful NumPy indexing/vectorized functions.