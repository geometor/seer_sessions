{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nAccepts a 1D NumPy array of 12 integers. Finds the unique contiguous block of \nidentical non-zero digits within the input array. Creates a new 1D NumPy array \nof length 12, initialized to zeros. Calculates the target starting position \nfor the block by adding 4 to its original starting position. Copies the block \n(same value and length) into the new array at the target position, respecting \narray boundaries. Returns the new array.\n\"\"\"\n\nimport numpy as np\n\ndef find_contiguous_block(data: np.ndarray):\n    \"\"\"\n    Finds the first contiguous block of identical non-zero digits in a 1D NumPy array.\n\n    Args:\n        data: The input 1D NumPy array of integers.\n\n    Returns:\n        A tuple containing (start_index, length, value) of the block.\n        Returns (-1, 0, 0) if no such block is found or the array is empty.\n        start_index is -1 if no block is found.\n    \"\"\"\n    start_index = -1\n    length = 0\n    value = 0\n    if data.size == 0: # Handle empty array case\n        return start_index, length, value\n\n    in_block = False\n    for i, digit in enumerate(data):\n        # Use .item() to get Python scalar for comparison if needed,\n        # though direct numpy comparison often works. Assuming direct comparison is ok.\n        if not in_block and digit != 0:\n            # Start of a potential block\n            start_index = i\n            value = digit\n            length = 1\n            in_block = True\n        elif in_block:\n            if digit == value:\n                # Continue the block\n                length += 1\n            else:\n                # End of the block found before end of array\n                return start_index, length, value # Return immediately when block ends\n\n    # Handle case where block goes to the end of the list or no block found\n    if in_block:\n        return start_index, length, value\n    else:\n        # No block found throughout the array\n        return -1, 0, 0\n\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Shifts a contiguous block of identical non-zero digits 4 positions to the right.\n\n    Args:\n        input_grid: A 1D NumPy array of 12 integers containing zeros and one \n                    contiguous block of identical non-zero digits.\n\n    Returns:\n        A new 1D NumPy array of 12 integers where the block has been shifted \n        4 positions to the right, and other positions are filled with zeros.\n    \"\"\"\n    # Get the size of the input array\n    grid_length = input_grid.shape[0]\n\n    # Initialize output_grid with zeros, matching input size and type\n    output_grid = np.zeros_like(input_grid)\n\n    # Find the contiguous block in the input grid\n    start_index, length, value = find_contiguous_block(input_grid)\n\n    # Proceed only if a valid block was found (start_index is not -1)\n    if start_index != -1:\n        # Calculate the new starting index for the block by adding 4\n        new_start_index = start_index + 4\n\n        # Place the block into the output grid at the new position\n        # Loop through the length of the identified block\n        for i in range(length):\n            # Calculate the target index in the output grid\n            target_index = new_start_index + i\n            \n            # Check if the target index is within the valid bounds of the output grid\n            if 0 <= target_index < grid_length:\n                # Assign the block's value to the corresponding position in the output grid\n                output_grid[target_index] = value\n\n    # Return the modified output grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6539,
    "candidates_token_count": 895,
    "total_token_count": 7434,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.699812,
  "retries": 1
}