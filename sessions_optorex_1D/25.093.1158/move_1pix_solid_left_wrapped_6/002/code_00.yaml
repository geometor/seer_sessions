# YAML document describing objects, properties, and relationships

# Input/Output Data Structure
data_structure:
  type: sequence
  element_type: integer_digit
  representation: numpy_array # Corrected representation
  length: 12 # Consistent length observed

# Identified Objects and Properties
objects:
  - object: sequence # Represents the input/output numpy array
    properties:
      - contains_digits: true
      - fixed_length: 12
      - composed_of_blocks: true # Consecutive identical digits form blocks

  - object: block
    properties:
      - consists_of_identical_digits: true
      - has_digit_value: (e.g., 0, 2, 4, 5, 6, 7, 8)
      - has_length: (number of digits in the block)

# Relationships and Actions
relationships:
  - type: relative_position
    description: Blocks are ordered sequentially within the main sequence.
  - type: separation
    description: Blocks of one digit type can be separated by blocks of another digit type.

actions:
  - action: accept_input_array
    description: Receive the input as a NumPy array of integers.
    input_type: numpy.ndarray

  - action: identify_blocks
    description: Group consecutive identical digits from the input array into blocks, noting their digit value and length.
    input: List[int] # derived from the numpy array
    output: List[Tuple[int, int]] # List of (digit, length) tuples
    example_input: [0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0]
    example_output: [(0, 3), (5, 5), (0, 4)]

  - action: find_transfer_pattern
    description: >
      Iterate through the unique digits present. For each digit, locate the first block and the last block composed of that digit.
      Check if these blocks are distinct (first index < last index) and separated *only* by blocks of different digits.
    condition: Requires at least two blocks of one digit type separated by at least one block of another type.

  - action: transfer_element
    description: >
      If the transfer pattern is found for a digit, decrease the length of the first identified block (for that digit) by one
      and increase the length of the last identified block (for that same digit) by one.
      This transfer occurs at most once per input sequence.
    target_objects: [first_block, last_block] # of the identified transfer digit
    effect: first_block.length -= 1, last_block.length += 1

  - action: reconstruct_sequence
    description: >
      Combine the modified blocks back into a single sequence (list of integers).
      Blocks whose length became zero are omitted.
    input: List[Tuple[int, int]] # potentially modified blocks
    output: List[int]

  - action: format_output_array
    description: Convert the final sequence (list of integers) back into a NumPy array.
    output_type: numpy.ndarray