Task: Sequence Transformation (Revised)

Input:
  Type: String
  Format: Space-separated single-digit integers.
  Processing: Must be parsed into a List of Integers.

Output:
  Type: List of Integers
  Properties:
    - Same length as input list.
    - Derived from input via element rearrangement based on specific rules.

Objects:
  - Sequence: The list of integers derived from the input string.
  - Element: An individual integer within the sequence.
  - NonZeroElement: An element with a value > 0.
  - ZeroElement: An element with a value == 0.
  - Block: A contiguous sub-sequence of identical NonZeroElements OR any NonZeroElements depending on context.
    - FirstBlock: The first contiguous Block of NonZeroElements encountered when scanning from left to right.
    - NextBlock: The first contiguous Block of any NonZeroElements occurring after the FirstBlock (separated by at least one ZeroElement).

Properties_of_Interest:
  - FirstNonZeroIndex: The index `i` of the first NonZeroElement. Returns -1 if none exists.
  - FirstBlockStartIndex: The starting index of the FirstBlock. (Same as FirstNonZeroIndex if it exists and > -1).
  - FirstBlockEndIndex: The ending index `j` (inclusive) of the FirstBlock.
  - NextBlockStartIndex: The starting index `k` of the NextBlock. Returns -1 if none exists.
  - ElementValue: The integer value of an element at a specific index.

Actions:
  - ParseInput: Convert the input string into a list of integers.
  - FindFirstNonZeroIndex: Locate the index `i`.
  - FindBlockIndices: Determine the start (`i`) and end (`j`) indices of the FirstBlock.
  - FindNextBlockStartIndex: Determine the start index `k` of the NextBlock.
  - CheckPrecedingElement: Verify if the element at index `i-1` exists and is zero (for Rule 1). Verify if element at `k-1` exists and is zero (for Rule 2).
  - BlockShiftLeft: For Rule 1. Move the elements from index `i` to `j` one position left (to `i-1` through `j-1`). Place the original element at `i-1` (zero) into index `j`.
  - Swap: For Rule 2. Exchange the positions of the element at `j` and the element at `k-1`.

TransformationRule:
  - Handle Empty/All-Zero Case: If FirstNonZeroIndex is -1, return the list unchanged.
  - Condition: Based on the FirstNonZeroIndex `i`.
  - Case 1 (FirstNonZeroIndex `i` > 0):
    - Find the FirstBlockEndIndex `j` starting from `i`.
    - Perform BlockShiftLeft operation for indices `i` through `j`.
  - Case 2 (FirstNonZeroIndex `i` == 0):
    - Find the FirstBlockEndIndex `j` starting from `i=0`.
    - Find the NextBlockStartIndex `k` searching from index `j+1`.
    - If `k` is found AND `k-1` is a valid index AND the element at `k-1` is 0:
        - Perform Swap operation between index `j` and index `k-1`.
    - Else (no next block, or element before it isn't zero): Return the list unchanged.