Task: Sequence Element Swap

Input:
  Type: Sequence of Integers (potentially passed as NumPy array, handle as list of ints)
  Properties:
    - Contains single-digit integers (0-9)
    - Fixed length (observed length 12 in examples)

Output:
  Type: Sequence of Integers
  Properties:
    - Same length as input
    - Derived from input via a single element swap or no change.

Objects:
  - Sequence: The list of integers.
  - Element: An individual integer within the sequence.
  - NonZeroElement: An element with a value > 0.
  - ZeroElement: An element with a value == 0.
  - FirstNonZero: The NonZeroElement with the lowest index.
  - FirstBlock: The contiguous sub-sequence of identical NonZeroElements starting at index 0 (only relevant if FirstNonZero is at index 0).
  - NextBlock: The first contiguous block of *any* NonZeroElements occurring *after* the FirstBlock (or after the FirstNonZero element if it's not at index 0, though this isn't used in the logic).

Relationships:
  - Index: Position of an element (0-based).
  - PrecedingElement: Element at index `i-1` relative to element at index `i`.
  - FirstNonZeroIndex: The index of the FirstNonZero element.
  - FirstBlockEndIndex: The index of the last element in the FirstBlock (relevant only if FirstNonZeroIndex is 0).
  - NextBlockStartIndex: The index of the first element of the NextBlock.
  - ZeroBeforeNextBlockIndex: The index `NextBlockStartIndex - 1`.

Actions:
  - Find: Locate indices (FirstNonZeroIndex, FirstBlockEndIndex, NextBlockStartIndex).
  - GetValue: Retrieve the element value at a specific index.
  - CheckCondition: Verify rules based on indices and values.
  - Swap: Exchange the positions of two elements in the sequence.

TransformationRule:
  - Find the `first_nz_idx`.
  - If no non-zero element exists (`first_nz_idx == -1`), return the sequence unchanged.
  - **Case 1: If `first_nz_idx > 0`:**
    - Swap the element at `first_nz_idx` with the element at `first_nz_idx - 1`.
  - **Case 2: If `first_nz_idx == 0`:**
    - Find `end_idx`, the index of the last element of the initial non-zero block starting at 0.
    - Find `next_start_idx`, the starting index of the next non-zero block after `end_idx`.
    - If `next_start_idx` exists (`!= -1`):
        - Let `zero_idx = next_start_idx - 1`.
        - If `zero_idx >= 0` AND the element at `zero_idx` is 0:
             - Swap the element at `end_idx` with the element at `zero_idx`.
  - Return the modified sequence.
