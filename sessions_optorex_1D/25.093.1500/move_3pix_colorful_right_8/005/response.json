{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransforms an input sequence of 12 digits by identifying the single contiguous block \nof non-zero digits (1-9) and shifting this block 3 positions to the right. \nThe output sequence is also 12 digits long, padded with zeros in positions \nnot occupied by the shifted block. Handles input as list, 1D NumPy array, or \n2D NumPy array with one row. If no non-zero block exists, returns a sequence of \n12 zeros.\n\"\"\"\n\ndef _standardize_input(input_data):\n    \"\"\"\n    Ensures the input data is a flat list of integers.\n\n    Args:\n        input_data: Can be a list, 1D NumPy array, or 2D NumPy array (1 row).\n\n    Returns:\n        A flat list of integers.\n    \"\"\"\n    if isinstance(input_data, np.ndarray):\n        # Flatten the array in case it's 2D (e.g., [[1, 2, 3]]) and convert to list\n        return input_data.flatten().tolist()\n    elif isinstance(input_data, list):\n        # Check if it's a list of lists (like [[1, 2, 3]])\n        if input_data and isinstance(input_data[0], list):\n            # Flatten the list of lists\n            return [item for sublist in input_data for item in sublist]\n        else:\n            # Already a flat list (or assumed to be)\n            return list(input_data) # Ensure it's a mutable list copy\n    else:\n        raise TypeError(\"Input data must be a list or NumPy array.\")\n\n\ndef _find_nonzero_block(int_list):\n    \"\"\"\n    Finds the start index and the values of the first contiguous block of non-zero digits.\n\n    Args:\n        int_list: A list of integers.\n\n    Returns:\n        A tuple (start_index, block_values) or (None, []) if no non-zero digits are found.\n        start_index: The index of the first non-zero digit.\n        block_values: A list containing the non-zero digits in the block.\n    \"\"\"\n    start_index = -1\n    block_values = []\n    n = len(int_list)\n\n    # Find the first non-zero digit\n    for i, val in enumerate(int_list):\n        if val != 0:\n            start_index = i\n            break\n\n    # If no non-zero digit found, return early\n    if start_index == -1:\n        return None, []\n\n    # Collect values from the start index until a zero or the end is reached\n    for i in range(start_index, n):\n        if int_list[i] != 0:\n            block_values.append(int_list[i])\n        else:\n            # Stop as soon as a zero is encountered after the block started\n            break\n\n    return start_index, block_values\n\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input sequence.\n    \"\"\"\n    # Standardize the input into a flat list of 12 integers\n    input_list = _standardize_input(input_grid)\n    n = 12 # Expected length based on examples\n\n    if len(input_list) != n:\n        # Handle potential inconsistencies if needed, though examples suggest fixed length\n        # For now, proceed assuming length is 12 or handle error\n         print(f\"Warning: Input length is {len(input_list)}, expected {n}. Proceeding with actual length.\")\n         n = len(input_list) # Adjust n based on actual input if flexible length is allowed\n\n\n    # Initialize output_grid with zeros\n    output_grid = [0] * n\n\n    # Find the contiguous block of non-zero digits in the input\n    start_index, block_values = _find_nonzero_block(input_list)\n\n    # If a block was found, calculate its new position and place it\n    if start_index is not None:\n        # Define the shift amount\n        shift_amount = 3\n\n        # Calculate the new starting position for the block in the output\n        new_start_index = start_index + shift_amount\n\n        # Place the block values into the output grid at the new position\n        # Iterate through the values found in the block\n        for i, value in enumerate(block_values):\n            # Calculate the target index in the output grid\n            output_index = new_start_index + i\n            # Check if the target index is within the bounds of the grid (0 to n-1)\n            if 0 <= output_index < n:\n                output_grid[output_index] = value\n\n    # Return the transformed grid as a list\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7249,
    "candidates_token_count": 1099,
    "total_token_count": 8348,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.800071,
  "retries": 1
}