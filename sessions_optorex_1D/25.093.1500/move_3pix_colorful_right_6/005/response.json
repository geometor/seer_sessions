{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransforms an input grid (list of lists or 2D NumPy array) by identifying a \ncontiguous vertical block of rows containing at least one non-zero element. \nThis block is then shifted downwards by 3 rows within a new grid of the same \ndimensions. Rows outside the shifted block are filled with zeros. If the shifted \nblock extends beyond the grid boundaries, it is truncated. If no non-zero \nelements are found in any row, the output grid remains filled with zeros.\n\"\"\"\n\ndef _find_non_zero_row_indices(grid):\n    \"\"\"\n    Finds the start and end row indices of the first contiguous block of \n    rows containing at least one non-zero element.\n\n    Args:\n        grid: A NumPy array representing the input grid.\n\n    Returns:\n        A tuple (start_index, end_index). Returns (None, None) if no \n        non-zero rows are found.\n    \"\"\"\n    first_nz_row_index = None\n    last_nz_row_index = None\n    # Iterate through each row index\n    for i in range(grid.shape[0]):\n        row = grid[i, :]\n        # Check if any element in the row is non-zero\n        if np.any(row != 0):\n            # If this is the first non-zero row found, record its index\n            if first_nz_row_index is None:\n                first_nz_row_index = i\n            # Always update the last non-zero row index found\n            last_nz_row_index = i\n            \n    # Return the found indices (or None if none were found)\n    return first_nz_row_index, last_nz_row_index\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the row-block shifting transformation to the input grid.\n\n    Args:\n        input_grid: A list of lists or a 2D NumPy array representing the grid.\n\n    Returns:\n        A 2D NumPy array representing the transformed grid.\n    \"\"\"\n    # Convert input to NumPy array for consistent handling and array operations\n    input_grid_np = np.array(input_grid)\n    \n    # Get grid dimensions (rows N, columns M)\n    if input_grid_np.ndim == 1:\n        # Handle case where input might be flattened but represents rows of size 1\n        num_rows = input_grid_np.shape[0]\n        num_cols = 1\n        # Reshape into N x 1 explicitly for consistent indexing\n        input_grid_np = input_grid_np.reshape((num_rows, num_cols))\n    elif input_grid_np.ndim == 2:\n        num_rows, num_cols = input_grid_np.shape\n    else:\n        # Handle unexpected dimensions if necessary, though examples suggest 2D\n        raise ValueError(\"Input grid must be interpretable as 2D.\")\n\n    # Initialize output_grid with zeros, same dimensions as input\n    output_grid = np.zeros_like(input_grid_np)\n\n    # Find the start and end indices of the non-zero row block\n    first_nz_row_index, last_nz_row_index = _find_non_zero_row_indices(input_grid_np)\n\n    # Check if a non-zero row block was actually found\n    if first_nz_row_index is not None:\n        # Extract the block of rows using NumPy slicing\n        # Note: slicing is exclusive of the end index, so add 1\n        non_zero_row_block = input_grid_np[first_nz_row_index : last_nz_row_index + 1, :]\n\n        # Calculate the new starting row index for the block (shift down by 3)\n        new_start_row_index = first_nz_row_index + 3\n        \n        # Determine the number of rows in the extracted block\n        block_height = non_zero_row_block.shape[0]\n        \n        # Calculate the index where the placement would end\n        end_placement_index = new_start_row_index + block_height\n\n        # Determine how many rows from the block can actually be placed\n        # without going out of bounds of the output grid.\n        rows_to_place = block_height\n        if end_placement_index > num_rows:\n            # If the block overflows, calculate how many rows fit\n            rows_to_place = num_rows - new_start_row_index\n            # If the adjusted count is negative (start index out of bounds), set to 0\n            if rows_to_place < 0:\n                rows_to_place = 0\n        \n        # Slice the block if it needs truncation\n        truncated_block = non_zero_row_block[:rows_to_place, :]\n\n        # Place the block (or the truncated portion) into the output grid\n        # Ensure the new start index is within the grid bounds and there are rows to place\n        if new_start_row_index < num_rows and rows_to_place > 0:\n            output_grid[new_start_row_index : new_start_row_index + rows_to_place, :] = truncated_block\n\n    # Return the constructed output grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6786,
    "candidates_token_count": 1215,
    "total_token_count": 8001,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.97583,
  "retries": 1
}