{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nShift the single contiguous block of non-zero digits within a fixed-length (12) \nsequence, represented as a space-separated string, exactly 3 positions to the \nright. Maintain the sequence length by padding with zeros. If the input contains \nonly zeros, return it unchanged.\n\"\"\"\n\nimport re # Not strictly needed for this approach, but good practice if patterns get complex\n\ndef find_non_zero_block(digit_list):\n    \"\"\"\n    Finds the start and end indices of the first contiguous block of non-zero digits.\n\n    Args:\n        digit_list: A list of digit strings (e.g., ['0', '0', '6', '3', '0']).\n\n    Returns:\n        A tuple (start_index, end_index) or (None, None) if no non-zero block is found.\n    \"\"\"\n    start_index = None\n    end_index = None\n    for i, digit in enumerate(digit_list):\n        if digit != '0':\n            if start_index is None:\n                start_index = i  # Found the start of the block\n            end_index = i  # Update the end index for every non-zero digit in the block\n        elif start_index is not None:\n            # Found a '0' *after* the block started, so the block has ended.\n            # Since we assume only one block, we can stop searching.\n            break\n    return start_index, end_index\n\ndef transform(input_str):\n    \"\"\"\n    Transforms the input string by shifting the non-zero block.\n\n    Args:\n        input_str: A space-separated string of digits (e.g., \"0 0 6 3 9 3 2 8 0 0 0 0\").\n\n    Returns:\n        A space-separated string with the non-zero block shifted, or the original\n        string if no non-zero block exists.\n    \"\"\"\n    # 1. Parse the input string into a list of digit characters\n    input_list = input_str.split(' ')\n    n = len(input_list)\n\n    # 2. Find the start and end indices of the non-zero block\n    start_idx, end_idx = find_non_zero_block(input_list)\n\n    # 3. Handle the case where no non-zero block is found (all zeros)\n    if start_idx is None:\n        return input_str\n\n    # 4. Define the shift amount\n    shift_amount = 3\n\n    # 5. Create the output list, initialized with zeros\n    output_list = ['0'] * n\n\n    # 6. Calculate the new starting position for the block\n    new_start_idx = start_idx + shift_amount\n\n    # 7. Copy the non-zero block to the new position in the output list\n    # Iterate through the indices *of the block* in the original list\n    for i in range(start_idx, end_idx + 1):\n        # Calculate the relative position within the block\n        block_offset = i - start_idx\n        # Calculate the target index in the output list\n        target_idx = new_start_idx + block_offset\n\n        # Check if the target index is within the bounds of the output list\n        if 0 <= target_idx < n:\n            # Copy the digit from the input list to the output list\n            output_list[target_idx] = input_list[i]\n\n    # 8. Join the output list back into a space-separated string\n    output_str = ' '.join(output_list)\n\n    # 9. Return the transformed string\n    return output_str\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7545,
    "candidates_token_count": 839,
    "total_token_count": 8384,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.75351,
  "retries": 1
}