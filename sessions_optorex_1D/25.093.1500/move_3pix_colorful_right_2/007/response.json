{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nShift the single contiguous block of non-zero numbers within a 1D numerical \narray 3 positions to the right, maintaining array length by padding with zeros. \nIf the input contains only zeros, return it unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef find_contiguous_non_zero_block(arr):\n    \"\"\"\n    Finds the start index, end index, and values of the first contiguous \n    block of non-zero numbers in a NumPy array. Assumes only one such block exists.\n\n    Args:\n        arr: A 1D NumPy array of numbers.\n\n    Returns:\n        A tuple (start_index, end_index, block_values) if a contiguous block\n        is found, otherwise (None, None, None).\n    \"\"\"\n    # Find indices where the element is not zero\n    non_zero_indices = np.where(arr != 0)[0]\n\n    # If there are no non-zero elements, return None for all values\n    if len(non_zero_indices) == 0:\n        return None, None, None\n\n    # Determine the start and end index of the non-zero sequence\n    start_index = non_zero_indices[0]\n    end_index = non_zero_indices[-1]\n\n    # Extract the block of non-zero values\n    # Assuming contiguity based on problem description and examples\n    block_values = arr[start_index : end_index + 1]\n\n    return start_index, end_index, block_values\n\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Transforms the input 1D NumPy array by shifting the non-zero block.\n\n    Args:\n        input_grid: A 1D NumPy array of numbers.\n\n    Returns:\n        A 1D NumPy array with the non-zero block shifted, or a copy of the \n        original array if no non-zero block exists.\n    \"\"\"\n    # 1. Find the contiguous non-zero block in the input array\n    start_idx, end_idx, block_values = find_contiguous_non_zero_block(input_grid)\n\n    # 2. Handle the case where no non-zero block is found (all zeros)\n    if start_idx is None:\n        return np.copy(input_grid) # Return a copy to avoid modifying original if it's passed elsewhere\n\n    # 3. Define the shift amount\n    shift_amount = 3\n    n = len(input_grid) # Get the length of the input array\n\n    # 4. Create the output grid, initialized with zeros, same shape and type as input\n    output_grid = np.zeros_like(input_grid)\n\n    # 5. Calculate the new starting position for the block\n    new_start_idx = start_idx + shift_amount\n\n    # 6. Determine the slice of the block that fits into the output grid\n    # Calculate how many elements from the block can be copied\n    num_elements_in_block = len(block_values)\n    # Calculate the end index in the output grid *if* the whole block fit\n    potential_end_idx_output = new_start_idx + num_elements_in_block\n    # Calculate how many elements actually fit within the grid bounds (n)\n    num_elements_to_copy = max(0, min(num_elements_in_block, n - new_start_idx))\n\n    # 7. Copy the relevant part of the non-zero block to the new position\n    if num_elements_to_copy > 0:\n        # Slice the block_values to get only the elements that will fit\n        block_to_copy = block_values[:num_elements_to_copy]\n        # Define the target slice in the output grid\n        output_slice_start = new_start_idx\n        output_slice_end = new_start_idx + num_elements_to_copy\n        # Assign the sliced block to the target slice in the output grid\n        output_grid[output_slice_start:output_slice_end] = block_to_copy\n\n    # 8. Return the transformed grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6604,
    "candidates_token_count": 950,
    "total_token_count": 7554,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.178122,
  "retries": 1
}