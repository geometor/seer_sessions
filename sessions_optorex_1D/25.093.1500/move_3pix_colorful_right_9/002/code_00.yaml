task_elements:
  - item: input_sequence
    type: List[int]  # Or numpy.ndarray
    properties:
      - length: fixed (e.g., 12)
      - elements: single digits (0-9)
  - item: output_sequence
    type: List[int]  # Or numpy.ndarray
    properties:
      - length: same as input_sequence
      - elements: single digits (0-9), initially all zeros.
  - item: non_zero_span
    type: List[int]
    description: The contiguous sub-sequence of the input_sequence starting from the first non-zero element and ending at the last non-zero element.
    properties:
      - start_index: The index of the first non-zero element in the input_sequence. Null/None if sequence is all zeros.
      - end_index: The index of the last non-zero element in the input_sequence. Null/None if sequence is all zeros.
      - elements: The integers from the input sequence within this span.
relationships:
  - type: positional_shift
    source: non_zero_span (from input_sequence)
    target: non_zero_span (in output_sequence)
    details: The starting index of the non_zero_span in the output_sequence is exactly 3 positions greater than its starting index ('start_index') in the input_sequence.
  - type: element_transfer
    details: The elements constituting the non_zero_span in the input are copied into the output_sequence at the calculated shifted position. All other positions in the output remain zero.
actions:
  - action: find_non_zero_indices
    input: input_sequence
    output: start_index, end_index
    description: Iterate through the input sequence to find the index of the first non-zero element and the index of the last non-zero element. Return special values (e.g., None or -1) if no non-zero elements are found.
  - action: construct_output
    input: input_sequence, start_index, end_index
    output: output_sequence
    description: >
      Create a new sequence of zeros with the same length as the input.
      If valid start_index and end_index were found:
        Calculate the target start index as start_index + 3.
        Extract the sub-sequence (non_zero_span) from the input_sequence between start_index and end_index (inclusive).
        Copy the extracted sub-sequence into the new sequence, starting at the target start index, ensuring not to exceed the bounds of the sequence.
      Return the new sequence.