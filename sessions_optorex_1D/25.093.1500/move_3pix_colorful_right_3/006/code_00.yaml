task_description: Right-shift a sequence of integers by 3 positions, padding the start with zeros.
input_elements:
  - object: input_sequence
    type: numpy.ndarray
    description: A NumPy array containing a single row of integers (shape (1, N) or (N,)).
    properties:
      - name: length
        value: 12 (observed in examples)
        description: The number of integers in the sequence.
      - name: content
        description: Contains integers, including zeros and potentially a contiguous block of non-zero digits.
output_elements:
  - object: output_sequence
    type: list_of_integers # Or potentially numpy.ndarray
    description: A list containing the transformed sequence of integers.
    properties:
      - name: length
        value: 12 (same as input)
      - name: content
        description: Integers resulting from the shift operation.
actions:
  - action: shift_right_and_pad
    input: input_sequence (as numpy.ndarray)
    output: output_sequence (as list[int])
    parameters:
      - name: shift_amount
        value: 3
        description: The fixed number of positions to shift elements to the right.
      - name: padding_value
        value: 0
        description: The integer value used to fill the vacated positions at the beginning.
    processing_steps:
      - step: Convert the input numpy.ndarray row to a list of integers.
      - step: Get the length (N) of the list.
      - step: Create a new list of length N, filled with the padding_value (0).
      - step: Copy elements from the input list (index `i`) to the new list (index `i + shift_amount`) for `i` from 0 to `N - 1 - shift_amount`.
      - step: Return the new list.
relationships:
  - type: transformation
    input: input_sequence (numpy.ndarray)
    output: output_sequence (list[int])
    rule: The output sequence is generated by taking the input sequence, shifting its elements 3 positions to the right, filling the first 3 positions with 0, and returning the result as a list of integers.