{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport collections\n\n\"\"\"\nTransforms a 1D NumPy array of integers by identifying the contiguous subsequence \nof non-zero integers, finding the most frequent integer (mode) within that \nsubsequence, and replacing all integers in that subsequence with the mode. \nLeading and trailing zeros are preserved.\n\"\"\"\n\ndef _find_non_zero_boundaries(arr: np.ndarray) -> tuple[int | None, int | None]:\n    \"\"\"\n    Finds the start and end indices of the contiguous non-zero block.\n\n    Args:\n        arr: A 1D NumPy array of integers.\n\n    Returns:\n        A tuple (start_index, end_index) inclusive, or (None, None) if \n        no non-zero elements are found.\n    \"\"\"\n    # Find indices of all non-zero elements\n    non_zero_indices = np.where(arr != 0)[0]\n    \n    # Handle case where there are no non-zero elements\n    if non_zero_indices.size == 0:\n        return None, None\n        \n    # The start index is the minimum non-zero index\n    start_index = np.min(non_zero_indices)\n    # The end index is the maximum non-zero index\n    end_index = np.max(non_zero_indices)\n    \n    return start_index, end_index\n\ndef _calculate_mode(arr_slice: np.ndarray) -> int | None:\n    \"\"\"\n    Calculates the mode (most frequent element) of a NumPy array slice.\n    If there are ties, returns the element that appears first among the modes \n    as per collections.Counter behavior.\n    If the slice is empty, returns None.\n\n    Args:\n        arr_slice: A 1D NumPy array slice.\n\n    Returns:\n        The most frequent integer or None if the slice is empty.\n    \"\"\"\n    # Handle empty slice case\n    if arr_slice.size == 0:\n        return None\n        \n    # Count occurrences of each element\n    counts = collections.Counter(arr_slice)\n    \n    # Find the element with the highest count\n    # most_common(1) returns a list like [(element, count)]\n    mode, _ = counts.most_common(1)[0] \n    \n    return mode\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the transformation rule to the input NumPy array.\n\n    Args:\n        input_grid: A 1D NumPy array of integers.\n\n    Returns:\n        A new 1D NumPy array with the transformation applied.\n    \"\"\"\n    \n    # Find the boundaries of the contiguous non-zero subsequence\n    start_index, end_index = _find_non_zero_boundaries(input_grid)\n    \n    # If no non-zero elements exist, return a copy of the original grid\n    if start_index is None:\n        return input_grid.copy()\n        \n    # Extract the non-zero subsequence (inclusive slicing)\n    non_zero_subsequence = input_grid[start_index : end_index + 1]\n    \n    # Calculate the mode of the non-zero subsequence\n    # Note: _find_non_zero_boundaries ensures the subsequence is not empty if start_index is not None\n    mode = _calculate_mode(non_zero_subsequence)\n    \n    # Create a copy of the input grid to modify\n    output_grid = input_grid.copy()\n    \n    # Replace the elements within the non-zero subsequence boundaries with the mode\n    output_grid[start_index : end_index + 1] = mode\n    \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5813,
    "candidates_token_count": 845,
    "total_token_count": 6658,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 17.216442,
  "retries": 1
}