task_elements:
  - input:
      type: numpy.ndarray
      element_type: integer
      shape: 1D array
      range: 0-9
  - output:
      type: numpy.ndarray
      element_type: integer
      shape: 1D array
      length: same_as_input
transformation_properties:
  - invariant_elements:
      - type: integer
      - value: 0
      - condition: Elements with value 0 in the input remain 0 in the output at the same position.
  - target_value_determination:
      scope: non-zero elements of the input array
      method: find the element with the highest frequency (mode)
      output_name: dominant_non_zero_number
      tie_breaking: Not explicitly defined by examples, but mode finding (e.g., using collections.Counter.most_common(1)) implicitly handles ties (often returns the one encountered first or based on internal ordering). Assumed sufficient for this task.
      empty_case: If no non-zero elements exist, this step is skipped.
  - modification_rule:
      condition: Element in the input array is non-zero AND at least one non-zero element exists in the input array.
      action: Replace the element with the `dominant_non_zero_number` in the output array at the corresponding position.
relationships:
  - output element at index `i` depends on the input element at index `i` and the global property (`dominant_non_zero_number`) derived from the entire input array.
input_output_correlation:
  - Zeros in the input directly map to zeros in the output.
  - All non-zero positions in the output are filled with the single `dominant_non_zero_number` calculated from the input.