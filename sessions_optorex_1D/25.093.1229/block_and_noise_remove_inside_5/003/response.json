{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input 1D NumPy array of integers based on the following rules:\n1. Identify all non-zero elements in the input array.\n2. If non-zero elements exist, find the non-zero element that appears most frequently (the dominant_non_zero_number).\n3. Create an output array where:\n    a. Elements that were 0 in the input remain 0.\n    b. Elements that were non-zero in the input are replaced by the dominant_non_zero_number.\n4. If the input array contains only zeros, the output array is an identical copy.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef find_dominant_non_zero(input_array: np.ndarray):\n    \"\"\"\n    Finds the most frequent non-zero number in a NumPy array.\n\n    Args:\n        input_array: A 1D NumPy array of integers.\n\n    Returns:\n        The most frequent non-zero integer, or None if no non-zero numbers are present.\n    \"\"\"\n    # Filter out zero elements using NumPy boolean indexing\n    non_zeros = input_array[input_array != 0]\n\n    # If no non-zero numbers exist, return None\n    if non_zeros.size == 0:\n        return None\n\n    # Count occurrences of each non-zero number\n    # Counter works directly on NumPy arrays (or lists derived from them)\n    counts = Counter(non_zeros)\n\n    # Find the number with the highest frequency\n    # most_common(1) returns a list like [(element, count)]\n    dominant_non_zero_number = counts.most_common(1)[0][0]\n    \n    # Ensure the return type is a standard Python int if necessary, \n    # though numpy types often work fine. Let's keep it as is for now.\n    return dominant_non_zero_number \n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the transformation rule to the input NumPy array.\n    Replaces non-zero elements with the most frequent non-zero element,\n    keeping zero elements as they are.\n\n    Args:\n        input_grid: A 1D NumPy array of integers.\n\n    Returns:\n        A new 1D NumPy array with the transformation applied.\n    \"\"\"\n    # Find the dominant non-zero number in the input array\n    dominant_num = find_dominant_non_zero(input_grid)\n\n    # Handle the case where the input array contains only zeros\n    if dominant_num is None:\n        # Return an identical copy of the input array\n        output_grid = np.copy(input_grid)\n    else:\n        # Create the output array using np.where\n        # Condition: input_grid == 0\n        # If True (element is 0), keep the value 0\n        # If False (element is non-zero), replace with dominant_num\n        output_grid = np.where(input_grid == 0, 0, dominant_num)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6379,
    "candidates_token_count": 692,
    "total_token_count": 7071,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.748771,
  "retries": 1
}