{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input list of digits based on the following rules:\n1. Identify the contiguous sub-list starting from the index of the first non-zero digit \n   and ending at the index of the last non-zero digit (the \"active segment\").\n2. If no non-zero digits exist in the input list, the output is identical to the input.\n3. Determine the digit that appears most frequently within the original active segment \n   (the \"dominant digit\").\n4. Construct the output list by:\n   a. Taking the elements from the input list before the active segment.\n   b. Appending the dominant digit, repeated for the length of the active segment.\n   c. Appending the elements from the input list after the active segment.\nThe input and output are lists of integers.\n\"\"\"\n\nfrom collections import Counter\nimport numpy as np # numpy might not be strictly necessary but is often available\n\ndef _find_active_segment_indices(sequence):\n    \"\"\"\n    Finds the start and end indices of the first and last non-zero elements.\n    Returns (None, None) if no non-zero elements are found.\n    \"\"\"\n    # Convert to list just in case input is a numpy array, simplifying indexing\n    sequence_list = list(sequence) \n    non_zero_indices = [i for i, x in enumerate(sequence_list) if x != 0]\n    if not non_zero_indices:\n        return None, None\n    return non_zero_indices[0], non_zero_indices[-1]\n\ndef _find_dominant_digit(segment):\n    \"\"\"\n    Finds the most frequent digit in a given segment (list or sequence of digits).\n    If there's a tie, Counter.most_common(1) returns one of the most frequent.\n    \"\"\"\n    if not segment:\n        # Should not happen if indices are valid, but handles empty segment case\n        return None \n    counts = Counter(segment)\n    # most_common(1) returns a list like [(element, count)], so access [0][0]\n    dominant_digit, _ = counts.most_common(1)[0]\n    return dominant_digit\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input list of integers.\n    \"\"\"\n    # Ensure input is treated as a standard Python list for consistency\n    input_sequence = list(input_grid) \n\n    # 1. Identify the active segment indices\n    start_index, end_index = _find_active_segment_indices(input_sequence)\n\n    # 2. Handle the case where there are no non-zero digits (or empty list)\n    if start_index is None:\n        # Return the original list (or an empty list if input was empty)\n        return input_sequence \n\n    # 4. Extract the original active segment using the found indices\n    # Slicing is end-exclusive, so add 1 to end_index\n    active_segment = input_sequence[start_index : end_index + 1]\n\n    # 5. Find the dominant digit in the original active segment\n    dominant_digit = _find_dominant_digit(active_segment)\n\n    # 6. Construct the output list\n    #    a. Get the part before the active segment\n    prefix = input_sequence[:start_index]\n    \n    #    b. Create the new middle part with the dominant digit\n    segment_length = end_index - start_index + 1\n    middle = [dominant_digit] * segment_length\n    \n    #    c. Get the part after the active segment\n    suffix = input_sequence[end_index + 1:]\n\n    # Combine the parts\n    output_sequence = prefix + middle + suffix\n\n    # 7. Return the newly constructed list of integers\n    # The testing framework might expect a numpy array, but let's return a list\n    # as it's the most direct representation of the result. Conversion can happen\n    # outside if needed.\n    return output_sequence\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5583,
    "candidates_token_count": 912,
    "total_token_count": 6495,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.774154,
  "retries": 1
}