# Task: Replace non-zero digits based on frequency in a NumPy array
Objects:
  - InputSequence:
      type: numpy.ndarray
      description: A 1D NumPy array of single-digit integers.
      dtype: int
  - OutputSequence:
      type: numpy.ndarray # Or List[int] if the final format needs to be a list
      description: A 1D NumPy array (or list) of single-digit integers derived from the InputSequence.
      dtype: int
  - Digit:
      type: int
      range: 0-9
      properties:
        - value: The integer value of the digit.
        - is_zero: Boolean indicating if the digit is 0.
        - frequency: Count of occurrences within the non-zero elements of InputSequence.

Relationships:
  - OutputSequence has the same length/shape as InputSequence.
  - The digit at a specific index in OutputSequence depends on the digit at the same index in InputSequence and the overall frequency of non-zero digits in InputSequence.

Actions:
  - Identify_Non_Zero_Digits: Filter the InputSequence array to get only non-zero elements.
  - Calculate_Frequencies: Determine the count of each unique non-zero digit using tools like collections.Counter.
  - Find_Most_Frequent_Non_Zero: Identify the non-zero digit with the highest frequency. Handle the case where no non-zero digits exist.
  - Map_Input_To_Output: Create the OutputSequence. Use array operations (e.g., np.where) or iteration: If an element in InputSequence is 0, keep it as 0 in OutputSequence. If an element is non-zero, replace it with the most frequent non-zero digit.