{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input NumPy array of digits based on the following rule:\n1. Identify all non-zero digits in the input array.\n2. Count the frequency of each unique non-zero digit.\n3. Determine the non-zero digit with the highest frequency (the \"dominant non-zero digit\"). If no non-zero digits exist, the original array is returned.\n4. Create a new output array.\n5. For each element in the input array:\n    a. If the element is 0, keep it as 0 in the output array.\n    b. If the element is non-zero, replace it with the dominant non-zero digit in the output array.\nThe resulting array is the output.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef find_most_frequent_non_zero(input_array):\n    \"\"\"\n    Finds the most frequent non-zero digit in a NumPy array.\n    Returns None if no non-zero digits are present.\n    \"\"\"\n    # Filter out zero elements\n    non_zeros = input_array[input_array != 0]\n    \n    # Check if there are any non-zero elements\n    if non_zeros.size == 0:\n        return None # No non-zero digits found\n    \n    # Count frequencies of non-zero elements\n    counts = Counter(non_zeros)\n    \n    # Find the element with the maximum count\n    # counts.most_common(1) returns a list like [(element, count)]\n    dominant_digit = counts.most_common(1)[0][0] \n    \n    return dominant_digit\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the transformation rule to the input numpy array (grid).\n    \n    Args:\n        input_grid: A 1D NumPy array of single-digit integers.\n\n    Returns:\n        A 1D NumPy array representing the transformed grid.\n    \"\"\"\n    \n    # Find the dominant non-zero digit in the input grid\n    dominant_digit = find_most_frequent_non_zero(input_grid)\n\n    # If there are no non-zero digits (dominant_digit is None), \n    # return the original grid as no transformation is needed.\n    if dominant_digit is None:\n        return input_grid # Return original grid\n\n    # Create the output grid using np.where for conditional replacement.\n    # Condition: input_grid == 0\n    # If True (element is 0), keep it as 0.\n    # If False (element is non-zero), replace it with dominant_digit.\n    output_grid = np.where(input_grid == 0, 0, dominant_digit)\n\n    # Return the transformed grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6428,
    "candidates_token_count": 631,
    "total_token_count": 7059,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.605461,
  "retries": 1
}