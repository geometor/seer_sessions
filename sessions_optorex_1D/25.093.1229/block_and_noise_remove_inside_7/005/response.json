{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport collections\n\n\"\"\"\nTransforms a grid of single-digit integers. \nThe rule is to identify the most frequent non-zero digit in the entire input grid. \nThen, create a new grid of the same dimensions where every non-zero digit from the input is replaced by this most frequent non-zero digit. \nDigits that are 0 in the input remain 0 in the output.\n\"\"\"\n\ndef find_most_frequent_non_zero(numbers):\n    \"\"\"\n    Finds the most frequent non-zero number in an iterable of numbers.\n\n    Args:\n        numbers: An iterable (e.g., list, numpy array) containing numbers.\n\n    Returns:\n        The most frequent non-zero number, or None if no non-zero numbers exist.\n    \"\"\"\n    # Filter out zeros\n    non_zeros = [n for n in numbers if n != 0]\n    \n    # Handle edge case: no non-zero numbers\n    if not non_zeros:\n        return None\n        \n    # Count frequencies of non-zero numbers\n    counts = collections.Counter(non_zeros)\n    \n    # Find the number with the highest frequency\n    # most_common(1) returns list of [(element, count)]\n    most_frequent = counts.most_common(1)[0][0]\n    return most_frequent\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid: A numpy array representing the grid of single-digit integers.\n\n    Returns:\n        A numpy array containing the transformed grid.\n    \"\"\"\n    # Create a copy of the input grid to modify\n    output_grid = np.copy(input_grid)\n\n    # Flatten the grid to easily find the most frequent non-zero digit across all elements\n    flat_list = input_grid.flatten()\n\n    # Find the most frequent non-zero digit in the flattened list\n    replacement_digit = find_most_frequent_non_zero(flat_list)\n\n    # Only perform replacement if there was at least one non-zero digit found\n    if replacement_digit is not None:\n        # Iterate through each element of the grid\n        # Using np.nditer for efficient iteration over multi-dimensional arrays\n        it = np.nditer(output_grid, flags=['multi_index'], op_flags=['readwrite'])\n        while not it.finished:\n            idx = it.multi_index\n            # Check if the current element is non-zero\n            if output_grid[idx] != 0:\n                # Replace non-zero elements with the most frequent non-zero digit\n                output_grid[idx] = replacement_digit\n            # Move to the next element\n            it.iternext()\n    # If replacement_digit is None (all zeros in input), output_grid remains a copy of input_grid\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6005,
    "candidates_token_count": 669,
    "total_token_count": 6674,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.199926,
  "retries": 1
}