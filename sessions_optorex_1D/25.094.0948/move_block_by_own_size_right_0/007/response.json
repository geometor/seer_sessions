{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input 1D sequence (list or NumPy array) containing a single \ncontiguous block of identical non-zero integers surrounded by zeros. \nThe transformation shifts this block to the right by a distance equal to its length. \nPositions originally occupied by the block become zeros in the output. \nElements shifted beyond the sequence boundary are discarded.\nThe output sequence has the same length as the input.\n\"\"\"\n\nimport numpy as np\n\ndef find_block_properties(input_seq):\n    \"\"\"\n    Identifies the contiguous block of identical non-zero integers.\n\n    Args:\n        input_seq: A 1D NumPy array of integers.\n\n    Returns:\n        A tuple (start_index, block_length, block_value) if a valid block \n        is found, otherwise returns (-1, 0, 0).\n        - start_index: The starting index of the block.\n        - block_length: The number of elements in the block.\n        - block_value: The integer value of the elements in the block.\n    \"\"\"\n    # Find indices of all non-zero elements\n    non_zero_indices = np.where(input_seq != 0)[0]\n\n    # If no non-zero elements, return failure indicator\n    if len(non_zero_indices) == 0:\n        return -1, 0, 0\n\n    # Determine potential block boundaries and value from non-zero indices\n    start_index = non_zero_indices[0]\n    end_index = non_zero_indices[-1]\n    block_value = input_seq[start_index]\n\n    # Calculate the span covered by the potential block\n    span_length = end_index - start_index + 1\n\n    # Check 1: Contiguity - ensure no zeros within the block's span\n    # The number of non-zero elements found must equal the span length.\n    is_contiguous = (len(non_zero_indices) == span_length)\n    if not is_contiguous:\n        return -1, 0, 0 # Invalid block\n\n    # Check 2: Uniformity - ensure all elements in the block span have the same value\n    # Slicing includes the end_index\n    is_uniform = np.all(input_seq[start_index : end_index + 1] == block_value)\n    if not is_uniform:\n        return -1, 0, 0 # Invalid block\n        \n    # If both checks pass, it's a valid block. The length is the span length.\n    block_length = span_length\n    return start_index, block_length, block_value\n\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the block shifting transformation to the input grid.\n\n    Args:\n        input_grid: A list or 1D NumPy array representing the input sequence.\n\n    Returns:\n        A 1D NumPy array representing the transformed sequence.\n    \"\"\"\n    # Ensure input is a NumPy array for efficient operations\n    input_seq = np.array(input_grid)\n    seq_len = len(input_seq)\n\n    # Initialize output_grid with zeros, same size as input\n    output_grid = np.zeros_like(input_seq)\n\n    # Step 1: Identify the Block\n    # Find the properties of the non-zero block in the input sequence\n    start_index, block_length, block_value = find_block_properties(input_seq)\n\n    # Handle case where no valid block is found\n    if start_index == -1:\n        return output_grid # Return the grid of zeros\n\n    # Step 2: Calculate Shift Distance (implicit)\n    # The shift distance is equal to the block length.\n\n    # Step 4: Calculate New Position\n    # Determine the new starting index for the block\n    new_start_index = start_index + block_length\n\n    # Step 5: Place Shifted Block\n    # Copy the block's elements into the output grid at the new position\n    for i in range(block_length):\n        # Calculate the index in the output grid for the current element\n        target_index = new_start_index + i\n\n        # Check if the target index is within the bounds of the grid (0 to seq_len - 1)\n        if 0 <= target_index < seq_len:\n            # Place the block's value at the target index\n            output_grid[target_index] = block_value\n        # Else: The element is shifted off the end of the grid and is discarded\n        # (the output_grid position remains 0 by initialization).\n\n    # Step 6: Return Output\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 9375,
    "candidates_token_count": 1493,
    "total_token_count": 10868,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.500044,
  "retries": 1
}