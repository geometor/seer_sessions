{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransforms an input 1D NumPy array of digits by identifying the single contiguous \nblock of non-zero digits and shifting it to the right. The amount of the shift \nis equal to the length of the non-zero block itself. Zeros act as placeholders.\n\n1.  Initialize an output array of the same size as the input, filled with zeros.\n2.  Find the start index, length, and elements of the contiguous non-zero block \n    in the input array.\n3.  If a block is found:\n    a. Calculate the new starting position for the block by adding its original \n       start index and its length.\n    b. Place the extracted block elements into the output array at the calculated \n       new start position, ensuring not to exceed array bounds.\n4.  If no non-zero block is found, the output array remains all zeros.\n5.  Return the output array.\n\"\"\"\n\ndef find_non_zero_block(data_array):\n    \"\"\"\n    Finds the start index, length, and elements of the first contiguous non-zero block.\n\n    Args:\n        data_array: A 1D NumPy array of integers.\n\n    Returns:\n        A tuple (start_index, length, block_elements) if a block is found.\n        Returns (-1, 0, []) if no non-zero block is found.\n    \"\"\"\n    start_index = -1\n    length = 0\n    block_elements = []\n    n = len(data_array)\n\n    # Find the start index of the first non-zero element\n    for i in range(n):\n        if data_array[i] != 0:\n            start_index = i\n            break\n\n    # If no non-zero elements were found, return default values\n    if start_index == -1:\n        return start_index, length, block_elements\n\n    # Find the end of the block (where it hits a zero or the end of the array)\n    # and extract the block elements\n    for i in range(start_index, n):\n        if data_array[i] != 0:\n            length += 1\n            block_elements.append(data_array[i])\n        else:\n            # Found the end of the block (hit a zero)\n            break\n            \n    # Convert block elements to numpy array for easier slicing later if needed,\n    # though list works fine for assignment.\n    # block_elements = np.array(block_elements) \n            \n    return start_index, length, block_elements\n\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the block-shifting transformation to the input 1D NumPy array.\n\n    Args:\n        input_grid: A 1D NumPy array representing the sequence of digits.\n\n    Returns:\n        A 1D NumPy array representing the transformed sequence.\n    \"\"\"\n    # Ensure input is a NumPy array (it should be based on test framework)\n    if not isinstance(input_grid, np.ndarray):\n         # Handle potential list input if necessary, though unlikely based on error\n         input_grid = np.array(input_grid)\n         \n    n = len(input_grid)\n    \n    # Initialize the output_grid with zeros, same size as input\n    output_grid = np.zeros_like(input_grid)\n\n    # Find the non-zero block in the input grid\n    start_index, block_length, block_elements = find_non_zero_block(input_grid)\n\n    # If a non-zero block was found\n    if start_index != -1:\n        # Calculate the new starting position for the block\n        new_start_index = start_index + block_length\n        \n        # Calculate the theoretical end index for slicing in the output grid\n        new_end_index = new_start_index + block_length\n\n        # Check if the new starting position is within the bounds of the output grid\n        if new_start_index < n:\n             # Determine how many elements of the block can actually fit\n             place_length = min(block_length, n - new_start_index)\n             \n             # Place the block elements (or the portion that fits) into the output grid\n             output_grid[new_start_index : new_start_index + place_length] = block_elements[:place_length]\n\n    # Return the transformed grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5954,
    "candidates_token_count": 1320,
    "total_token_count": 7274,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.503135,
  "retries": 1
}