{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input sequence by identifying a single contiguous block of identical non-zero integers, calculating its length, and shifting the block to the right by a distance equal to its length. The input might be presented as a 1D list or a 2D NumPy array with a single row; the code handles this by extracting the first row if necessary. The output is a list of integers of the same length as the input sequence, with the shifted block placed and zeros elsewhere.\n\"\"\"\n\nimport numpy as np\nimport math # Although not used in the final logic, kept for potential future needs\n\ndef find_block(data):\n    \"\"\"\n    Finds the first contiguous block of identical non-zero numbers in a 1D list or array.\n\n    Args:\n        data: A list or 1D numpy array of numbers.\n\n    Returns:\n        A tuple containing:\n        - start_index (int): The starting index of the block (-1 if not found).\n        - end_index (int): The ending index of the block (-1 if not found).\n        - value (int): The value of the elements in the block (0 if not found).\n        - length (int): The length of the block (0 if not found).\n    \"\"\"\n    start_index = -1\n    end_index = -1\n    value = 0\n    in_block = False\n    n = len(data)\n\n    for i, x in enumerate(data):\n        # Look for the start of a non-zero block\n        if not in_block and x != 0:\n            start_index = i\n            value = x\n            in_block = True\n        # Look for the end of the block once we are in one\n        elif in_block:\n            # If the current element is different from the block value,\n            # or if we hit a zero, the block ends at the previous element.\n            if x != value:\n                end_index = i - 1\n                break # Found the end\n\n    # Handle the case where the block extends to the very end of the list\n    # If we were in a block and never found its end explicitly (didn't break)\n    if in_block and end_index == -1:\n        end_index = n - 1\n\n    # Calculate length if a valid block was found\n    if start_index != -1:\n        length = end_index - start_index + 1\n        return start_index, end_index, value, length\n    else:\n        # No block found\n        return -1, -1, 0, 0\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the block shift transformation to the input grid.\n\n    Args:\n        input_grid: Can be a list of integers, a 1D NumPy array, or a 2D NumPy\n                    array with a single row representing the sequence.\n\n    Returns:\n        A list of integers representing the transformed sequence.\n    \"\"\"\n    # **1. Preprocess Input:**\n    # Check if input is a NumPy array and potentially 2D (shape like (1, N))\n    if isinstance(input_grid, np.ndarray) and input_grid.ndim > 1:\n         # Assume the relevant data is in the first row\n        if input_grid.shape[0] == 1:\n           input_list = input_grid[0].tolist()\n        else:\n             # Handle unexpected multi-row input, perhaps raise error or take first row\n             # For now, taking the first row is a reasonable default based on error context\n             input_list = input_grid[0].tolist()\n    else:\n        # Assume it's already a 1D list or array-like, convert to list\n        input_list = list(input_grid)\n\n    n = len(input_list)\n\n    # **2. Initialize Output:**\n    # Create the output list filled with zeros\n    output_list = [0] * n\n\n    # **3. Find Non-Zero Block:**\n    # Use the helper function to find the block details\n    start_index, end_index, value, length = find_block(input_list)\n\n    # Proceed only if a valid block was found\n    if start_index != -1:\n        # **4. Calculate Shift:**\n        # The shift amount is equal to the block's length\n        shift_amount = length\n\n        # **5. Calculate New Position:**\n        # Determine the starting index for the block in the output list\n        new_start_index = start_index + shift_amount\n\n        # **6. Place Block in Output:**\n        # Copy the block elements (the 'value') to the new position\n        for i in range(length):\n            # Calculate the target index in the output list\n            output_idx = new_start_index + i\n            # Ensure the target index is within the list bounds before writing\n            if 0 <= output_idx < n:\n                output_list[output_idx] = value\n            # else: Optional: handle cases where shift goes out of bounds if needed\n\n    # **7. Return Output:**\n    return output_list\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7273,
    "candidates_token_count": 1614,
    "total_token_count": 8887,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.352925,
  "retries": 1
}