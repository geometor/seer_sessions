{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input sequence of integers by finding the single contiguous block of \nidentical non-zero digits and shifting it to the right. The distance of the shift \nis equal to the length of the non-zero block itself. The rest of the sequence \nis filled with zeros. Assumes input is a list or NumPy array of integers.\n\"\"\"\n\nimport numpy as np\n\ndef find_nonzero_block(data):\n  \"\"\"\n  Finds the start index, value, and length of the first contiguous non-zero block.\n\n  Args:\n    data: A list or NumPy array of integers.\n\n  Returns:\n    A tuple (start_index, block_value, block_length).\n    Returns (-1, 0, 0) if no non-zero block is found.\n  \"\"\"\n  start_index = -1\n  block_value = 0\n  block_length = 0\n  n = len(data)\n\n  # Find the start of the block\n  for i in range(n):\n    if data[i] != 0:\n      start_index = i\n      block_value = data[i]\n      break # Found the start\n\n  # If a start was found, determine the length\n  if start_index != -1:\n    block_length = 0\n    # Count contiguous identical non-zero elements from the start index\n    for i in range(start_index, n):\n        if data[i] == block_value:\n            block_length += 1\n        else:\n            break # End of block\n\n  return start_index, block_value, block_length\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input sequence (list or NumPy array).\n\n    Args:\n        input_grid: A list or NumPy array containing integers.\n\n    Returns:\n        A NumPy array containing the transformed integers.\n    \"\"\"\n    # Ensure input is treated as a sequence (e.g., convert to list if needed, though numpy array is fine)\n    input_sequence = np.array(input_grid) # Work with numpy array for convenience\n    n = len(input_sequence)\n\n    # Find the non-zero block properties using the helper function\n    start_index_input, block_value, block_length = find_nonzero_block(input_sequence)\n\n    # Initialize the output grid (sequence) with zeros\n    output_grid = np.zeros(n, dtype=int)\n\n    # Handle the case where no block is found (return all zeros)\n    if start_index_input == -1:\n        return output_grid \n\n    # Calculate the starting index for the block in the output\n    # The shift distance is equal to the block length\n    start_index_output = start_index_input + block_length\n\n    # Place the non-zero block into the output grid at the calculated position\n    # Ensure we don't write past the end of the grid\n    end_index_output = start_index_output + block_length\n    # Determine the actual length to copy, considering boundary conditions\n    copy_length = min(block_length, n - start_index_output)\n\n    if copy_length > 0: # Only attempt to write if there's space\n        output_grid[start_index_output : start_index_output + copy_length] = block_value\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5272,
    "candidates_token_count": 1044,
    "total_token_count": 6316,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.620134,
  "retries": 1
}