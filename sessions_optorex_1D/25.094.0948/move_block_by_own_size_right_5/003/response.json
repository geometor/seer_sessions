{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nIdentifies a contiguous block of identical non-zero integers within the input NumPy array.\nShifts this block to the right by a number of positions equal to its own length.\nThe output is a new NumPy array of the same size, containing the shifted block and zeros elsewhere.\n\"\"\"\n\ndef find_non_zero_block(sequence_array: np.ndarray) -> tuple:\n    \"\"\"\n    Finds the first contiguous block of identical non-zero integers in a NumPy array.\n\n    Args:\n        sequence_array: A 1D NumPy array of integers.\n\n    Returns:\n        A tuple containing (block_value, block_length, block_start_index),\n        or (None, 0, -1) if no non-zero block is found.\n    \"\"\"\n    block_value = None\n    block_length = 0\n    block_start_index = -1\n\n    for i, digit in enumerate(sequence_array):\n        if digit != 0:\n            # Found the start of a potential block\n            block_value = digit\n            block_start_index = i\n            block_length = 1\n            # Look ahead to find the end of the block\n            for j in range(i + 1, len(sequence_array)):\n                if sequence_array[j] == block_value:\n                    block_length += 1\n                else:\n                    break # End of the block found\n            # Since we assume only one block, we can return immediately\n            return block_value, block_length, block_start_index\n            \n    # No non-zero block found (should not happen based on examples)\n    return None, 0, -1\n\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Transforms the input NumPy array by shifting the non-zero block.\n\n    Args:\n        input_grid: A 1D NumPy array containing a single block of identical non-zero digits.\n\n    Returns:\n        A new 1D NumPy array with the block shifted right by its length.\n    \"\"\"\n    # Ensure input is treated as a 1D array if it's not already\n    # (though examples seem consistently 1D)\n    input_sequence = input_grid.flatten() if input_grid.ndim > 1 else input_grid\n    n = len(input_sequence)\n\n    # Identify the non-zero block using the helper function\n    block_value, block_length, block_start_index = find_non_zero_block(input_sequence)\n\n    # Handle case where no block is found (return zeros or original based on spec)\n    # Based on examples, a block always exists. If not found, maybe return zeros.\n    if block_value is None:\n        return np.zeros_like(input_sequence) \n\n    # Calculate the target starting index for the block in the output sequence.\n    # The shift amount is equal to the block's length.\n    shift_amount = block_length\n    new_start_index = block_start_index + shift_amount\n\n    # Create a new NumPy array of the same length, filled with zeros.\n    output_grid = np.zeros(n, dtype=input_sequence.dtype) # Match input dtype\n\n    # Calculate the end index for slicing (exclusive)\n    new_end_index = new_start_index + block_length\n\n    # Place the identified block into the new array using NumPy slicing.\n    # Check bounds to prevent errors if the shift goes beyond the array length.\n    if new_start_index < n:\n        # Calculate the actual length to place, considering boundary\n        actual_length = min(block_length, n - new_start_index)\n        output_grid[new_start_index : new_start_index + actual_length] = block_value\n        \n    # Reshape the output to match the original input grid's shape if necessary\n    # (though examples are 1D, this adds robustness if inputs could be 2D later)\n    if input_grid.ndim > 1:\n         output_grid = output_grid.reshape(input_grid.shape)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5341,
    "candidates_token_count": 1235,
    "total_token_count": 6576,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.359362,
  "retries": 1
}