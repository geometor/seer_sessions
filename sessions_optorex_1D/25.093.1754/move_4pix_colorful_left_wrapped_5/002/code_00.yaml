Task: Conditional Circular Rotation on Grid Row

Objects:
  - name: InputGrid
    type: numpy.ndarray # Assumed based on common practice & error message
    properties:
      - shape: (1, 12) # One row, twelve columns
      - elements: Integers (0-9 observed)

  - name: ProcessingSequence
    type: List[int]
    properties:
      - length: 12
      - source: Extracted from the first row of InputGrid
      - first_element: Integer at index 0

  - name: OutputGrid
    type: numpy.ndarray # Should match InputGrid type
    properties:
      - shape: (1, 12)
      - elements: Integers (0-9 observed), representing the rotated ProcessingSequence

Actions:
  - name: ExtractRowSequence
    input: InputGrid
    output: ProcessingSequence
    description: Extracts the first row from InputGrid and converts it to a list.

  - name: CheckFirstElementValue
    input: ProcessingSequence
    output: Boolean (is_zero)
    description: Returns true if the element at index 0 is 0, false otherwise.

  - name: RotateSequenceLeft
    input:
      - sequence: ProcessingSequence
      - positions: 4
    output: RotatedSequence (List[int])
    description: Performs a circular left rotation on the sequence by 4 positions.

  - name: RotateSequenceRight
    input:
      - sequence: ProcessingSequence
      - positions: 8
    output: RotatedSequence (List[int])
    description: Performs a circular right rotation on the sequence by 8 positions.

  - name: FormatOutputGrid
    input: RotatedSequence (List[int])
    output: OutputGrid
    description: Packages the rotated sequence list into the required 2D grid format (e.g., NumPy array of shape (1, 12)).

Workflow:
  - 1: current_sequence = ExtractRowSequence(InputGrid)
  - 2: is_first_zero = CheckFirstElementValue(current_sequence)
  - 3: if is_first_zero:
        rotated_sequence = RotateSequenceLeft(current_sequence, 4)
     else:
        rotated_sequence = RotateSequenceRight(current_sequence, 8)
  - 4: OutputGrid = FormatOutputGrid(rotated_sequence)