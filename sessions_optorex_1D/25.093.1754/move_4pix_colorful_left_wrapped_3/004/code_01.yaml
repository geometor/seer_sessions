task_description: Rearrange a sequence of 12 digits, provided as a space-separated string, by splitting it into two parts after the 4th digit and swapping their order.
input_data:
  type: string
  format: Space-separated sequence of 12 single digits (0-9).
  representation: A sequence that needs parsing into a list/array of integers.
output_data:
  type: string
  format: Space-separated sequence of 12 single digits (0-9).
  derivation: Rearrangement of the input digits, formatted as a string.
transformation_steps:
  - step: 1
    action: Parse Input String
    description: Convert the input space-separated string into a list of 12 integers.
    input: input_string (e.g., "6 9 5 0 0 0 0 0 0 1 8 6")
    output: integer_list (e.g., [6, 9, 5, 0, 0, 0, 0, 0, 0, 1, 8, 6])
  - step: 2
    action: Split and Swap Segments
    description: Divide the list of 12 integers into two segments at index 4 (after the 4th element). The first segment contains elements 0-3, the second contains elements 4-11. Concatenate the second segment followed by the first segment.
    input: integer_list (length 12)
    split_point: index 4
    segment_1: integer_list[0:4]
    segment_2: integer_list[4:12]
    output: rearranged_integer_list (segment_2 + segment_1)
  - step: 3
    action: Format Output String
    description: Convert the rearranged list of 12 integers back into a space-separated string.
    input: rearranged_integer_list (e.g., [0, 0, 0, 0, 0, 1, 8, 6, 6, 9, 5, 0])
    output: output_string (e.g., "0 0 0 0 0 1 8 6 6 9 5 0")
relationships:
  - The output string contains exactly the same digits as the input string, just in a different order.
  - The length (number of digits) remains constant at 12.
  - The split point is fixed at index 4 for all examples.