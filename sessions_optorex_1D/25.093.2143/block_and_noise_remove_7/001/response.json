{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport collections\n\ndef find_blocks(sequence):\n    \"\"\"\n    Identifies contiguous blocks of identical non-zero numbers in a sequence.\n\n    Args:\n        sequence: A list of integers.\n\n    Returns:\n        A list of dictionaries, where each dictionary represents a block\n        and contains 'value', 'length', 'start_index', and 'end_index'.\n        Returns an empty list if no non-zero blocks are found.\n    \"\"\"\n    blocks = []\n    if not sequence:\n        return blocks\n\n    current_block_val = None\n    current_block_len = 0\n    current_block_start = -1\n\n    for i, val in enumerate(sequence):\n        if val != 0:\n            if val == current_block_val:\n                # Continue existing block\n                current_block_len += 1\n            else:\n                # End previous block (if it existed)\n                if current_block_val is not None:\n                    blocks.append({\n                        'value': current_block_val,\n                        'length': current_block_len,\n                        'start_index': current_block_start,\n                        'end_index': i - 1\n                    })\n                # Start new block\n                current_block_val = val\n                current_block_len = 1\n                current_block_start = i\n        else:\n            # End previous block (if it existed)\n            if current_block_val is not None:\n                blocks.append({\n                    'value': current_block_val,\n                    'length': current_block_len,\n                    'start_index': current_block_start,\n                    'end_index': i - 1\n                })\n            # Reset block tracking\n            current_block_val = None\n            current_block_len = 0\n            current_block_start = -1\n\n    # Add the last block if the sequence ends with one\n    if current_block_val is not None:\n        blocks.append({\n            'value': current_block_val,\n            'length': current_block_len,\n            'start_index': current_block_start,\n            'end_index': len(sequence) - 1\n        })\n\n    return blocks\n\ndef find_longest_block(blocks):\n    \"\"\"\n    Finds the longest block from a list of blocks.\n    If there's a tie in length, selects the one with the smallest start index.\n\n    Args:\n        blocks: A list of block dictionaries as returned by find_blocks.\n\n    Returns:\n        The dictionary representing the longest block, or None if the list is empty.\n    \"\"\"\n    if not blocks:\n        return None\n\n    longest_block = blocks[0]\n    max_length = blocks[0]['length']\n\n    for block in blocks[1:]:\n        if block['length'] > max_length:\n            max_length = block['length']\n            longest_block = block\n        elif block['length'] == max_length:\n            # Tie-breaker: choose the one with the smaller start index\n            if block['start_index'] < longest_block['start_index']:\n                longest_block = block\n\n    return longest_block\n\ndef transform(input_sequence):\n    \"\"\"\n    Transforms the input sequence by identifying the longest contiguous block\n    of identical non-zero numbers. The output sequence retains only this\n    longest block at its original position, with all other elements set to zero.\n    If multiple blocks share the maximum length, the one starting earliest\n    (minimum start index) is chosen. If no non-zero blocks exist, the output\n    is all zeros.\n    \"\"\"\n    # Find all contiguous blocks of identical non-zero numbers\n    blocks = find_blocks(input_sequence)\n\n    # Determine the longest block (with tie-breaking for earliest start index)\n    longest_block_info = find_longest_block(blocks)\n\n    # Initialize the output sequence with zeros, same length as input\n    output_sequence = [0] * len(input_sequence)\n\n    # If a longest block was found, copy its elements into the output sequence\n    if longest_block_info:\n        start = longest_block_info['start_index']\n        end = longest_block_info['end_index']\n        value = longest_block_info['value']\n        # Fill the corresponding segment in the output sequence\n        for i in range(start, end + 1):\n            output_sequence[i] = value\n\n    return output_sequence\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1589,
    "candidates_token_count": 1590,
    "total_token_count": 3179,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.860351,
  "retries": 1
}