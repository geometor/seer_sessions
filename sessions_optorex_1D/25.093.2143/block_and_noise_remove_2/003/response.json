{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input sequence of integers by identifying contiguous groups of \nnon-zero numbers. It determines the maximum length among these groups and \nconstructs an output sequence containing only the elements from the group(s) \nwith the maximum length, placed at their original positions. All other \nelements in the output sequence are set to zero.\n\"\"\"\n\nfrom typing import List, Dict, Tuple\n\ndef find_groups(sequence: List[int]) -> List[Dict[str, int]]:\n    \"\"\"\n    Helper function to find contiguous non-zero groups in a sequence.\n\n    Args:\n        sequence: The input list of integers.\n\n    Returns:\n        A list of dictionaries, where each dictionary represents a group\n        and contains 'start', 'end', and 'length' keys.\n    \"\"\"\n    groups = []\n    current_start = None\n    n = len(sequence)\n\n    for i, val in enumerate(sequence):\n        # Start of a new group: non-zero value and not currently in a group\n        if val != 0 and current_start is None:\n            current_start = i\n            \n        # End of a group: zero value encountered OR end of sequence, while inside a group\n        elif (val == 0 or i == n - 1) and current_start is not None:\n            # Determine the correct end index\n            # If we hit a zero, the group ended at the previous index (i-1)\n            # If we hit the end of the sequence AND the last element was non-zero, the group ends at the last index (i or n-1)\n            end_index = i - 1 if val == 0 else i \n            \n            # Calculate length\n            length = end_index - current_start + 1\n            \n            # Store group info\n            groups.append({'start': current_start, 'end': end_index, 'length': length})\n            \n            # Reset state\n            current_start = None \n            \n    # Note: The original `find_groups` had a separate check after the loop. \n    # This revised version handles the end-of-sequence case within the loop's final iteration.\n        \n    return groups\n\ndef transform(input_sequence: List[int]) -> List[int]:\n    \"\"\"\n    Applies the transformation rule to the input sequence.\n    \"\"\"\n    n = len(input_sequence)\n\n    # Step 1 & 2 (from NL program): Identify all contiguous groups of non-zero numbers\n    groups = find_groups(input_sequence)\n\n    # Step 3: Handle case where no non-zero groups are found\n    if not groups:\n        # If no groups, the output is all zeros\n        return [0] * n\n\n    # Step 4: Determine the maximum length among all identified groups\n    # Use a generator expression for efficiency, default to 0 if groups is empty (though handled above)\n    max_length = max((group['length'] for group in groups), default=0) \n\n    # Step 5: Initialize an output sequence of the same length as the input, filled with zeros\n    output_sequence = [0] * n\n\n    # Step 6 & 7: Iterate through the recorded groups. If a group's length equals the maximum,\n    # copy its elements from the input sequence to the output sequence at the same positions.\n    for group in groups:\n        # Check if the current group is one of the longest\n        if group['length'] == max_length:\n            start = group['start']\n            end = group['end']\n            # Copy the segment from the original input_sequence to the output_sequence\n            # Slicing handles the start and end indices correctly (end+1 because slice upper bound is exclusive)\n            output_sequence[start : end + 1] = input_sequence[start : end + 1]\n\n    # Step 8: Return the constructed output sequence\n    return output_sequence\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8395,
    "candidates_token_count": 1685,
    "total_token_count": 10080,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.633319,
  "retries": 1
}