{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport math # Not used, but potentially useful for more complex tasks\nfrom typing import List, Dict, Tuple\n\n# Docstring at the top level of the module\n\"\"\"\nTransforms an input sequence of integers by identifying contiguous groups of \nnon-zero numbers. It determines the maximum length among these groups and \nconstructs an output sequence containing only the elements from the group(s) \nwith the maximum length, placed at their original positions. All other \nelements in the output sequence are set to zero.\n\"\"\"\n\ndef find_groups(sequence: List[int]) -> List[Dict[str, int]]:\n    \"\"\"\n    Helper function to find contiguous non-zero groups in a sequence.\n\n    Args:\n        sequence: The input list of integers.\n\n    Returns:\n        A list of dictionaries, where each dictionary represents a group\n        and contains 'start', 'end', and 'length' keys.\n    \"\"\"\n    groups = []\n    current_start = None\n    n = len(sequence)\n\n    for i, val in enumerate(sequence):\n        # Start of a new group\n        if val != 0 and current_start is None:\n            current_start = i\n            \n        # End of a group (found a zero after a non-zero group started)\n        elif val == 0 and current_start is not None:\n            end_index = i - 1\n            length = end_index - current_start + 1\n            groups.append({'start': current_start, 'end': end_index, 'length': length})\n            current_start = None # Reset for the next potential group\n\n    # Handle case where a group extends to the very end of the sequence\n    if current_start is not None:\n        end_index = n - 1\n        length = end_index - current_start + 1\n        groups.append({'start': current_start, 'end': end_index, 'length': length})\n        \n    return groups\n\ndef transform(input_sequence: List[int]) -> List[int]:\n    \"\"\"\n    Applies the transformation rule to the input sequence.\n\n    1. Finds all contiguous groups of non-zero numbers.\n    2. Determines the maximum length among these groups.\n    3. Creates an output sequence preserving only the elements of the longest group(s)\n       at their original positions, filling the rest with zeros.\n\n    Args:\n        input_sequence: The input list of integers.\n\n    Returns:\n        The transformed list of integers.\n    \"\"\"\n    n = len(input_sequence)\n\n    # Step 1 & 2 (from NL program): Identify groups\n    groups = find_groups(input_sequence)\n\n    # Step 3: Handle case with no non-zero groups\n    if not groups:\n        return [0] * n\n\n    # Step 4: Determine the maximum length\n    # Handles the case where groups might be empty, defaulting to 0\n    max_length = max((group['length'] for group in groups), default=0) \n\n    # Step 5: Initialize output sequence with zeros\n    output_sequence = [0] * n\n\n    # Step 6: Iterate through groups and populate output with longest ones\n    for group in groups:\n        # Check if the current group's length matches the maximum\n        if group['length'] == max_length:\n            start = group['start']\n            end = group['end']\n            # Copy the segment from input_sequence to output_sequence using slicing\n            output_sequence[start : end + 1] = input_sequence[start : end + 1]\n\n    # Step 7: Return the constructed output sequence\n    return output_sequence\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1860,
    "candidates_token_count": 3097,
    "total_token_count": 4957,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 25.704376,
  "retries": 1
}