{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport math\nfrom typing import List\n\n\"\"\"\nIdentifies all contiguous blocks of non-zero numbers in the input list.\nDetermines the maximum length among these blocks.\nSelects the first block (by starting index) that achieves this maximum length.\nConstructs the output list by placing the selected block's numbers at their\noriginal positions and filling all other positions with zero. If no non-zero\nnumbers exist, the output is all zeros.\n\"\"\"\n\ndef find_blocks(input_list: List[int]) -> List[dict]:\n    \"\"\"\n    Finds all contiguous blocks of non-zero numbers.\n\n    Args:\n        input_list: The input list of integers.\n\n    Returns:\n        A list of dictionaries, where each dictionary represents a block\n        and contains 'start', 'end', and 'length'. Returns an empty list\n        if no non-zero numbers are found.\n    \"\"\"\n    blocks = []\n    current_start = -1\n    n = len(input_list)\n\n    for i in range(n):\n        is_non_zero = input_list[i] != 0\n        is_last_element = (i == n - 1)\n\n        # Start of a potential block: current element is non-zero, and we are not already in a block\n        if is_non_zero and current_start == -1:\n            current_start = i\n\n        # End of a block: (current element is zero OR it's the last element) AND we were in a block\n        if (not is_non_zero or is_last_element) and current_start != -1:\n            # Determine the correct end index\n            current_end = i - 1 if not is_non_zero else i\n            # Calculate block length\n            block_length = current_end - current_start + 1\n            # Store block info\n            blocks.append({\n                'start': current_start,\n                'end': current_end,\n                'length': block_length\n            })\n            # Reset for the next potential block\n            current_start = -1\n            \n    return blocks\n\n\ndef transform(input_grid: List[int]) -> List[int]:\n    \"\"\"\n    Transforms the input list by keeping only the first longest contiguous\n    block of non-zero numbers and replacing everything else with zero.\n    \"\"\"\n    # Get the length of the input list\n    n = len(input_grid)\n    \n    # Initialize the output grid with zeros, matching the input length\n    output_grid = [0] * n\n\n    # Find all contiguous blocks of non-zero numbers in the input\n    blocks = find_blocks(input_grid)\n\n    # If no non-zero blocks were found, return the grid of zeros\n    if not blocks:\n        return output_grid\n\n    # Find the maximum length among all identified blocks\n    max_len = 0\n    for block in blocks:\n        if block['length'] > max_len:\n            max_len = block['length']\n    \n    # Find the first block (earliest start index) that has the maximum length\n    target_block = None\n    for block in blocks:\n        if block['length'] == max_len:\n            target_block = block\n            break # Stop searching once the first longest block is found\n\n    # If a target block was successfully identified (should always happen if blocks is not empty)\n    if target_block:\n        # Get the start and end indices of the target block\n        start = target_block['start']\n        end = target_block['end']\n        # Copy the elements from the input grid corresponding to the target block\n        # into the output grid at the same positions\n        for i in range(start, end + 1):\n            # Check index bounds just in case, though logic should prevent out-of-bounds\n            if 0 <= i < n:\n                output_grid[i] = input_grid[i]\n\n    # Return the final transformed grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4845,
    "candidates_token_count": 1295,
    "total_token_count": 6140,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.077739,
  "retries": 1
}