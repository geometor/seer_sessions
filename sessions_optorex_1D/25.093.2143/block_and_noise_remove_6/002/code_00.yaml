Task: Filter a sequence to keep only the first longest contiguous block of non-zero elements.

Input:
  Type: Sequence (List or potentially NumPy array) of integers.
  Properties:
    - Contains non-negative integers.
    - Fixed length (e.g., 12 in examples).
    - Can contain zero or more blocks of consecutive non-zero numbers.
    - Zero (0) acts as a delimiter between blocks.

Output:
  Type: Sequence (matching input type) of integers.
  Properties:
    - Same length as the input sequence.
    - Contains zeros in most positions.
    - Preserves the elements of exactly one block from the input.

Transformation:
  Action: Scan the input sequence to identify all contiguous blocks of non-zero elements.
  Action: For each block, record its starting index, ending index, and length.
  Condition: If no non-zero blocks exist, the output is a sequence of zeros of the same length as the input.
  Action: If blocks exist, determine the maximum length found among all blocks.
  Action: Select the block that has this maximum length and has the smallest starting index (i.e., the first longest block encountered).
  Action: Create the output sequence, initially filled with zeros.
  Action: Copy the elements from the selected block in the input sequence to the corresponding positions in the output sequence.

Relationships:
  - The output preserves a specific sub-sequence from the input.
  - The selection criteria for the preserved sub-sequence are maximum contiguity of non-zero elements and earliest position.
  - All elements outside the selected block become zero in the output.