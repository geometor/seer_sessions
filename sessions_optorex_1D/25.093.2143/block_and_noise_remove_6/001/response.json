{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport math\nfrom typing import List\n\n\"\"\"\nIdentifies all contiguous blocks of non-zero numbers in the input list.\nDetermines the maximum length among these blocks.\nSelects the first block (by starting index) that achieves this maximum length.\nConstructs the output list by placing the selected block's numbers at their original positions and filling all other positions with zero. If no non-zero numbers exist, the output is all zeros.\n\"\"\"\n\ndef find_blocks(input_list: List[int]) -> List[dict]:\n    \"\"\"\n    Finds all contiguous blocks of non-zero numbers.\n\n    Args:\n        input_list: The input list of integers.\n\n    Returns:\n        A list of dictionaries, where each dictionary represents a block\n        and contains 'start', 'end', and 'length'. Returns an empty list\n        if no non-zero numbers are found.\n    \"\"\"\n    blocks = []\n    current_start = -1\n    n = len(input_list)\n\n    for i in range(n):\n        # Start of a potential block\n        if input_list[i] != 0 and current_start == -1:\n            current_start = i\n        # End of a block (hit a zero or end of list)\n        if (input_list[i] == 0 or i == n - 1) and current_start != -1:\n            # Adjust end index if the last element was non-zero\n            current_end = i - 1 if input_list[i] == 0 else i\n            block_length = current_end - current_start + 1\n            blocks.append({\n                'start': current_start,\n                'end': current_end,\n                'length': block_length\n            })\n            # Reset for the next potential block\n            current_start = -1\n    return blocks\n\n\ndef transform(input_grid: List[int]) -> List[int]:\n    \"\"\"\n    Transforms the input list by keeping only the first longest contiguous\n    block of non-zero numbers and replacing everything else with zero.\n    \"\"\"\n    n = len(input_grid)\n    # Initialize output grid with zeros\n    output_grid = [0] * n\n\n    # Find all contiguous blocks of non-zero numbers\n    blocks = find_blocks(input_grid)\n\n    # If no blocks were found, return the grid of zeros\n    if not blocks:\n        return output_grid\n\n    # Find the maximum length among the blocks\n    max_len = 0\n    for block in blocks:\n        if block['length'] > max_len:\n            max_len = block['length']\n\n    # Find the first block that has the maximum length\n    target_block = None\n    for block in blocks:\n        if block['length'] == max_len:\n            target_block = block\n            break # Found the first one, stop searching\n\n    # If a target block was identified, copy its elements to the output grid\n    if target_block:\n        start = target_block['start']\n        end = target_block['end']\n        for i in range(start, end + 1):\n            output_grid[i] = input_grid[i]\n\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1801,
    "candidates_token_count": 2010,
    "total_token_count": 3811,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.815844,
  "retries": 1
}