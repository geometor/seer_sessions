{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport re\nfrom collections import namedtuple\n\n\"\"\"\nIdentify and isolate the longest contiguous sequence of a single non-zero digit within a list of digits.\nIf multiple sequences share the maximum length, the one appearing earliest (smallest start index) is chosen.\nThe output list retains only the digits from this chosen sequence in their original positions, with all other positions set to zero.\n\"\"\"\n\n# Define a structure to hold information about a run\nRunInfo = namedtuple(\"RunInfo\", [\"digit\", \"start\", \"end\", \"length\"])\n\ndef find_runs(digit_list):\n    \"\"\"\n    Scans the input list to identify all contiguous runs of non-zero digits.\n\n    Args:\n        digit_list: A list of integers.\n\n    Returns:\n        A list of RunInfo objects, each describing a contiguous run.\n    \"\"\"\n    runs = []\n    if not digit_list:\n        return runs\n\n    current_run_digit = None\n    current_run_start = -1\n\n    for i, digit in enumerate(digit_list):\n        if digit != 0:\n            if digit == current_run_digit:\n                # Continue existing run\n                pass\n            else:\n                # End previous run if exists\n                if current_run_digit is not None:\n                    runs.append(RunInfo(current_run_digit, current_run_start, i - 1, i - current_run_start))\n                # Start new run\n                current_run_digit = digit\n                current_run_start = i\n        else:\n            # End previous run if exists\n            if current_run_digit is not None:\n                runs.append(RunInfo(current_run_digit, current_run_start, i - 1, i - current_run_start))\n            # Reset run tracking\n            current_run_digit = None\n            current_run_start = -1\n\n    # Add the last run if the list ends with a non-zero sequence\n    if current_run_digit is not None:\n        runs.append(RunInfo(current_run_digit, current_run_start, len(digit_list) - 1, len(digit_list) - current_run_start))\n\n    return runs\n\ndef find_longest_run(runs):\n    \"\"\"\n    Determines the run with the maximum length from a list of runs.\n    If multiple runs share the maximum length, selects the one with the smallest start index.\n\n    Args:\n        runs: A list of RunInfo objects.\n\n    Returns:\n        The selected RunInfo object, or None if the input list is empty.\n    \"\"\"\n    if not runs:\n        return None\n\n    # Find the maximum length\n    max_length = 0\n    for run in runs:\n        if run.length > max_length:\n            max_length = run.length\n\n    # Filter runs to keep only those with the maximum length\n    longest_runs = [run for run in runs if run.length == max_length]\n\n    # Select the one with the minimum start index if there's a tie\n    best_run = longest_runs[0]\n    for run in longest_runs[1:]:\n        if run.start < best_run.start:\n            best_run = run\n\n    return best_run\n\n\ndef transform(input_str):\n    \"\"\"\n    Transforms an input string of space-separated digits by isolating the\n    longest contiguous run of a non-zero digit.\n    \"\"\"\n    # Parse the input string into a list of integers\n    input_list = [int(d) for d in input_str.split()]\n    n = len(input_list)\n\n    # Find all contiguous runs of non-zero digits\n    runs = find_runs(input_list)\n\n    # Find the target run (longest, then earliest)\n    target_run = find_longest_run(runs)\n\n    # Initialize the output list with zeros\n    output_list = [0] * n\n\n    # If a target run was found, populate the output list\n    if target_run:\n        for i in range(target_run.start, target_run.end + 1):\n            output_list[i] = target_run.digit\n\n    # Format the output list back into a space-separated string\n    return \" \".join(map(str, output_list))\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2022,
    "candidates_token_count": 1277,
    "total_token_count": 3299,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.353225,
  "retries": 1
}