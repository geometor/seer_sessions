{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import namedtuple\n\n\"\"\"\nIdentifies and isolates the longest contiguous sequence (run) of a single \nnon-zero digit within an input sequence of digits. If multiple runs share \nthe maximum length, the one appearing earliest (smallest start index) is chosen. \nThe output sequence retains only the digits from this chosen run in their \noriginal positions, with all other positions set to zero. The output sequence\nhas the same length as the input sequence.\n\"\"\"\n\n# Define a structure to hold information about a run\nRunInfo = namedtuple(\"RunInfo\", [\"digit\", \"start\", \"end\", \"length\"])\n\ndef find_runs(digit_sequence):\n    \"\"\"\n    Scans the input sequence to identify all contiguous runs of non-zero digits.\n\n    Args:\n        digit_sequence: A list or NumPy array of integers.\n\n    Returns:\n        A list of RunInfo objects, each describing a contiguous run.\n    \"\"\"\n    runs = []\n    if len(digit_sequence) == 0:\n        return runs\n\n    current_run_digit = None\n    current_run_start = -1\n\n    # Iterate through the sequence with index\n    for i, digit in enumerate(digit_sequence):\n        # Convert potential numpy types to standard int for comparison\n        current_digit_int = int(digit) \n        \n        if current_digit_int != 0:\n            # Check if we are continuing a run or starting a new one\n            if current_digit_int == current_run_digit:\n                # Continue existing run - no action needed here\n                pass\n            else:\n                # End previous run if one exists\n                if current_run_digit is not None:\n                    runs.append(RunInfo(current_run_digit, current_run_start, i - 1, i - current_run_start))\n                \n                # Start a new run\n                current_run_digit = current_digit_int\n                current_run_start = i\n        else:\n            # Current digit is zero, end any active run\n            if current_run_digit is not None:\n                runs.append(RunInfo(current_run_digit, current_run_start, i - 1, i - current_run_start))\n            \n            # Reset run tracking\n            current_run_digit = None\n            current_run_start = -1\n\n    # After the loop, check if a run was active at the end of the sequence\n    if current_run_digit is not None:\n        runs.append(RunInfo(current_run_digit, current_run_start, len(digit_sequence) - 1, len(digit_sequence) - current_run_start))\n\n    return runs\n\ndef find_longest_run(runs):\n    \"\"\"\n    Determines the run with the maximum length from a list of runs.\n    If multiple runs share the maximum length, selects the one with the \n    smallest start index.\n\n    Args:\n        runs: A list of RunInfo objects.\n\n    Returns:\n        The selected RunInfo object representing the target run, \n        or None if the input list of runs is empty.\n    \"\"\"\n    if not runs:\n        return None\n\n    # Find the maximum length among all runs\n    max_length = 0\n    for run in runs:\n        if run.length > max_length:\n            max_length = run.length\n\n    # Filter runs to keep only those with the maximum length\n    longest_runs = [run for run in runs if run.length == max_length]\n\n    # If there's only one longest run, it's the target\n    if len(longest_runs) == 1:\n        return longest_runs[0]\n\n    # If there are multiple runs with the same max length, find the earliest one\n    best_run = longest_runs[0]\n    for run in longest_runs[1:]:\n        if run.start < best_run.start:\n            best_run = run\n\n    return best_run\n\n\ndef transform(input_sequence):\n    \"\"\"\n    Transforms an input sequence of digits based on the longest run rule.\n\n    Args:\n        input_sequence: A list or NumPy array of integers.\n\n    Returns:\n        A NumPy array of integers representing the transformed sequence.\n    \"\"\"\n    # Ensure input is treated as a sequence (handles lists and numpy arrays)\n    sequence = np.array(input_sequence) \n    n = len(sequence)\n\n    # Initialize the output sequence with zeros, matching input length and type\n    output_sequence = np.zeros_like(sequence)\n\n    # Find all contiguous runs of non-zero digits in the input\n    runs = find_runs(sequence)\n\n    # Determine the target run (longest, then earliest)\n    target_run = find_longest_run(runs)\n\n    # If a target run was identified, populate the output sequence\n    if target_run:\n        # Iterate through the indices covered by the target run\n        for i in range(target_run.start, target_run.end + 1):\n            # Set the corresponding elements in the output sequence to the run's digit\n            output_sequence[i] = target_run.digit\n\n    # Return the resulting sequence\n    return output_sequence\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5770,
    "candidates_token_count": 1435,
    "total_token_count": 7205,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.309555,
  "retries": 1
}