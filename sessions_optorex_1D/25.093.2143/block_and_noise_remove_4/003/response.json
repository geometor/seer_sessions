{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input sequence of integers by identifying all contiguous blocks of non-zero\nintegers, selecting the longest block (with the earliest starting index used to break ties),\nand creating an output sequence of the same length containing only the elements of that\nselected block in their original positions, with all other elements set to zero. If the input\nis empty or contains no non-zero numbers, the output is an empty list or a list of zeros,\nrespectively.\n\"\"\"\n\nimport numpy as np\nimport math\nimport collections # Although not strictly needed for the final logic, kept for potential future use\n\ndef find_nonzero_blocks(sequence):\n    \"\"\"\n    Identifies contiguous blocks of non-zero numbers in a sequence.\n\n    Args:\n        sequence: A list or 1D NumPy array of numbers.\n\n    Returns:\n        A list of dictionaries, where each dictionary represents a block\n        and contains 'start', 'end', and 'length' keys.\n        Returns an empty list if no non-zero blocks are found or input is empty.\n    \"\"\"\n    blocks = []\n    start_index = -1\n    n = len(sequence)\n\n    if n == 0:\n        return []\n\n    for i, num in enumerate(sequence):\n        # Check if current number is non-zero\n        if num != 0:\n            # If we are not already in a block, mark the start\n            if start_index == -1:\n                start_index = i\n        # Check if current number is zero or we are at the end of the list\n        if (num == 0 or i == n - 1) and start_index != -1:\n            # If it's the end of the list and the last element is non-zero, the block ends here\n            end_index = i if num != 0 else i - 1\n            # Record the block if it's valid (start <= end)\n            if start_index <= end_index:\n                 blocks.append({\n                    'start': start_index,\n                    'end': end_index,\n                    'length': end_index - start_index + 1\n                })\n            # Reset the start index as the block has ended\n            start_index = -1\n\n    return blocks\n\ndef select_target_block(blocks):\n    \"\"\"\n    Selects the longest block from a list of blocks.\n    If there's a tie in length, selects the one with the smallest start index.\n\n    Args:\n        blocks: A list of block dictionaries (output from find_nonzero_blocks).\n\n    Returns:\n        The dictionary representing the selected block, or None if the input list is empty.\n    \"\"\"\n    if not blocks:\n        return None\n\n    # Find the maximum length among all blocks\n    max_length = 0\n    for block in blocks:\n        if block['length'] > max_length:\n            max_length = block['length']\n\n    # Filter blocks to keep only those with the maximum length\n    longest_blocks = [block for block in blocks if block['length'] == max_length]\n\n    # Among the longest blocks, find the one with the minimum start index\n    # If only one longest block, it will be selected by default\n    # min() function with a key naturally handles finding the minimum start index\n    selected_block = min(longest_blocks, key=lambda b: b['start'])\n\n    return selected_block\n\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid (sequence).\n\n    Args:\n        input_grid: A sequence of numbers, likely a NumPy array from the environment.\n\n    Returns:\n        A list of integers representing the transformed sequence.\n    \"\"\"\n    # Ensure input is treated as a 1D sequence (flatten if necessary) and convert to list\n    if isinstance(input_grid, np.ndarray):\n        # Handle potentially empty numpy array after flatten\n        input_list = input_grid.flatten().tolist()\n    else:\n        # Assume it's already list-like, ensure it's a list\n        input_list = list(input_grid)\n\n    # Handle empty input list explicitly\n    if not input_list:\n        return []\n\n    # Initialize output_list with zeros, same length as input\n    output_list = [0] * len(input_list)\n\n    # Find all non-zero blocks in the input list\n    blocks = find_nonzero_blocks(input_list)\n\n    # Select the target block (longest, earliest start index for ties)\n    selected_block = select_target_block(blocks)\n\n    # If a block was selected, copy its elements from the input to the output\n    if selected_block:\n        start = selected_block['start']\n        end = selected_block['end']\n        # Slice the original input list and place it into the output list\n        output_list[start : end + 1] = input_list[start : end + 1]\n\n    # Return the transformed list\n    return output_list\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8637,
    "candidates_token_count": 1518,
    "total_token_count": 10155,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.817663,
  "retries": 1
}