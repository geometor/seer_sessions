{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport math\nimport collections\n\ndef find_nonzero_blocks(sequence):\n    \"\"\"\n    Identifies contiguous blocks of non-zero numbers in a sequence.\n\n    Args:\n        sequence: A list of numbers.\n\n    Returns:\n        A list of dictionaries, where each dictionary represents a block\n        and contains 'start', 'end', and 'length' keys.\n        Returns an empty list if no non-zero blocks are found.\n    \"\"\"\n    blocks = []\n    start_index = -1\n    for i, num in enumerate(sequence):\n        if num != 0 and start_index == -1:\n            # Start of a new block\n            start_index = i\n        elif (num == 0 or i == len(sequence) - 1) and start_index != -1:\n            # End of the current block\n            end_index = i if num != 0 else i - 1 # Adjust end index if last element is non-zero\n            blocks.append({\n                'start': start_index,\n                'end': end_index,\n                'length': end_index - start_index + 1\n            })\n            start_index = -1 # Reset for the next block\n    return blocks\n\ndef select_longest_block(blocks):\n    \"\"\"\n    Selects the longest block from a list of blocks.\n    If there's a tie in length, selects the one with the smallest start index.\n\n    Args:\n        blocks: A list of block dictionaries (output from find_nonzero_blocks).\n\n    Returns:\n        The dictionary representing the selected block, or None if the input list is empty.\n    \"\"\"\n    if not blocks:\n        return None\n\n    longest_block = blocks[0]\n    max_length = blocks[0]['length']\n\n    for block in blocks[1:]:\n        if block['length'] > max_length:\n            max_length = block['length']\n            longest_block = block\n        # Tie-breaking (smallest start index) is implicitly handled\n        # because we only update if the current block is *strictly* longer.\n        # If lengths are equal, the earlier block (with smaller index) remains selected.\n\n    return longest_block\n\n\ndef transform(input_list):\n    \"\"\"\n    Transforms the input sequence by identifying all contiguous blocks of non-zero\n    integers, selecting the longest block (earliest one in case of a tie),\n    and creating an output sequence containing only that block, with all other\n    elements set to zero.\n    \"\"\"\n    # 1. Identify all contiguous blocks of non-zero integers.\n    blocks = find_nonzero_blocks(input_list)\n\n    # 2. Find the block with the greatest length (earliest wins ties).\n    selected_block = select_longest_block(blocks)\n\n    # 3. Create a new sequence of the same length, filled with zeros.\n    output_list = [0] * len(input_list)\n\n    # 4. If a longest block was found, copy its elements to the output list.\n    if selected_block:\n        start = selected_block['start']\n        end = selected_block['end']\n        # Copy the elements from the selected block into the corresponding positions\n        output_list[start : end + 1] = input_list[start : end + 1]\n\n    # 5. Return the resulting sequence.\n    return output_list\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1492,
    "candidates_token_count": 1358,
    "total_token_count": 2850,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.780762,
  "retries": 1
}