{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport math\nimport collections\n\ndef find_longest_nonzero_block(data):\n    \"\"\"\n    Finds the start index and length of the longest contiguous block of non-zero numbers.\n\n    Args:\n        data: A list of numbers.\n\n    Returns:\n        A tuple (start_index, length) of the longest block. \n        Returns (-1, 0) if no non-zero numbers are found.\n    \"\"\"\n    max_len = 0\n    best_start = -1\n    \n    current_start = -1\n    current_len = 0\n    \n    for i, x in enumerate(data):\n        if x != 0:\n            # If starting a new block\n            if current_len == 0:\n                current_start = i\n            current_len += 1\n        else:\n            # If a block just ended\n            if current_len > 0:\n                # Check if this block is the new longest\n                if current_len > max_len:\n                    max_len = current_len\n                    best_start = current_start\n                # Reset current block tracking\n                current_len = 0\n                current_start = -1\n\n    # Check the last block if the list ends with non-zero numbers\n    if current_len > 0:\n        if current_len > max_len:\n            max_len = current_len\n            best_start = current_start\n            \n    return best_start, max_len\n\ndef transform(input_grid):\n    \"\"\"\n    Identifies the longest contiguous sequence of non-zero integers in the input list \n    and preserves it in the output list, setting all other elements to zero.\n    \n    Workflow:\n    1. Initialize an output list of the same size as the input, filled with zeros.\n    2. Find all contiguous blocks of non-zero numbers in the input list.\n    3. Determine the block with the maximum length.\n    4. If a longest block exists, copy its elements from the input list to the \n       corresponding positions in the output list.\n    5. Return the output list.\n    \"\"\"\n    \n    n = len(input_grid)\n    # 1. Initialize output_grid with zeros\n    output_grid = [0] * n\n\n    # 2 & 3. Find the longest non-zero block\n    start_index, length = find_longest_nonzero_block(input_grid)\n\n    # 4. Copy the longest block to the output grid if found\n    if start_index != -1:\n        for i in range(length):\n            output_grid[start_index + i] = input_grid[start_index + i]\n\n    # 5. Return the modified output grid\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1420,
    "candidates_token_count": 1851,
    "total_token_count": 3271,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.339401,
  "retries": 1
}