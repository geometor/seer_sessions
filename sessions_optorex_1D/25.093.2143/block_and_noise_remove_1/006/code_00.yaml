task_description: Filter a sequence of integers to retain only the single longest contiguous subsequence of non-zero values, preserving its original position.
input_data:
  type: sequence (likely list or 1D array)
  element_type: integer
  length: fixed (12 in examples)
  properties: Contains zeros and non-zero integers. Multiple non-zero subsequences may exist.
output_data:
  type: sequence (matching input type)
  element_type: integer
  length: same as input
  properties: Contains mostly zeros, except for one contiguous subsequence of non-zero integers copied from the input.
transformation:
  primary_object: The input sequence of integers.
  derived_objects:
    - Contiguous subsequences of non-zero integers within the input sequence.
    - Properties of subsequences: start index, length, values.
  actions:
    - Identify all contiguous subsequences of non-zero integers.
    - Determine the maximum length among these subsequences.
    - Select the first subsequence that achieves this maximum length (in case of ties).
    - Create an output sequence of the same length as the input, initialized with zeros.
    - Copy the selected longest subsequence from the input to the output sequence at its original starting index.
  relationships:
    - Output length equals input length.
    - Non-zero elements in the output are identical in value and position to the elements of the selected longest non-zero subsequence from the input.
    - All other elements in the output are zero.
  constraints:
    - If multiple subsequences share the same maximum length, the one appearing earliest (lowest start index) in the input is chosen. (Inferred from standard iteration and comparison logic; examples do not explicitly test ties).
    - If the input contains no non-zero numbers, the output is all zeros.
data_handling_note: The execution environment may pass input as NumPy arrays, requiring checks like `array.size == 0` instead of `not array` for empty/boolean evaluation.