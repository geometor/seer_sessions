{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nGiven an input grid containing a single row of integers, identify the longest \ncontiguous sequence of non-zero integers within that row. Create an output grid \nof the same dimensions (one row, same length) where the identified longest \nsequence is preserved in its original position, and all other elements are set \nto zero.\n\"\"\"\n\nimport math\nimport collections # Although collections is imported, it's not used in this specific implementation\n\ndef find_longest_nonzero_block(data):\n    \"\"\"\n    Finds the start index and length of the longest contiguous block of non-zero numbers.\n\n    Args:\n        data: A list of numbers (representing a row).\n\n    Returns:\n        A tuple (start_index, length) of the longest block. \n        Returns (-1, 0) if no non-zero numbers are found or the list is empty.\n        If there are ties for the longest length, the first occurring block is returned.\n    \"\"\"\n    # Handle empty list case\n    if not data:\n        return -1, 0\n        \n    max_len = 0\n    best_start = -1\n    \n    current_start = -1\n    current_len = 0\n    \n    # Iterate through the data to find blocks\n    for i, x in enumerate(data):\n        if x != 0:\n            # If starting a new block of non-zeros\n            if current_len == 0:\n                current_start = i\n            current_len += 1\n        else:\n            # If a block of non-zeros just ended (current element is 0)\n            if current_len > 0:\n                # Check if this ended block is the new longest\n                if current_len > max_len:\n                    max_len = current_len\n                    best_start = current_start\n                # Reset current block tracking as we encountered a zero\n                current_len = 0\n                current_start = -1\n\n    # After the loop, check if the list ended with a non-zero block\n    if current_len > 0:\n        if current_len > max_len:\n            max_len = current_len\n            best_start = current_start\n            \n    # Return the start and length of the longest block found\n    return best_start, max_len\n\ndef transform(input_grid):\n    # Workflow Steps:\n    # 1. Validate input grid structure (non-empty grid, non-empty first row). Use len() checks.\n    # 2. Extract the single row from the input grid.\n    # 3. Initialize an output row of the same size as the input row, filled with zeros.\n    # 4. Use the helper function to find the longest contiguous block of non-zero numbers in the input row.\n    # 5. If a longest block exists (length > 0), copy its elements from the input row \n    #    to the corresponding positions in the output row.\n    # 6. Construct the output grid containing only the transformed row.\n    # 7. Return the output grid.\n\n    # 1. Validate input grid structure using len() to avoid boolean ambiguity with arrays\n    if len(input_grid) == 0 or len(input_grid[0]) == 0:\n        # Return an empty list structure if the grid or its first row is empty\n        return [] \n        # Alternatively, could return [[]] if input was [[]], but [] handles both cases\n        \n    # 2. Extract the single row\n    input_row = input_grid[0]\n    n = len(input_row)\n\n    # 3. Initialize output_row with zeros\n    output_row = [0] * n\n\n    # 4. Find the longest non-zero block using the helper function\n    start_index, length = find_longest_nonzero_block(input_row)\n\n    # 5. Copy the longest block to the output row if found\n    if start_index != -1 and length > 0:\n        for i in range(length):\n            # Calculate the correct index in both input and output rows\n            target_index = start_index + i\n            # Copy the value from input to output at the calculated index\n            # Basic bounds check (though theoretically guaranteed by find_longest_nonzero_block logic)\n            if target_index < n: \n                output_row[target_index] = input_row[target_index]\n\n    # 6. Construct the output grid (list containing the single output row)\n    output_grid = [output_row]\n\n    # 7. Return the output grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5860,
    "candidates_token_count": 2272,
    "total_token_count": 8132,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 18.908457,
  "retries": 1
}