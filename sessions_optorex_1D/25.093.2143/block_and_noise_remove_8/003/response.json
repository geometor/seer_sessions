{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport collections\n\n\"\"\"\nTransforms an input sequence (list of integers) by keeping only the longest\ncontiguous block for each non-zero number present in the sequence. All other\noccurrences of those non-zero numbers are replaced with 0. Zeros in the\noriginal sequence remain zero unless they are part of the longest block of a\nnon-zero number (which is implicitly handled by overwriting). If multiple\nblocks of the same number share the maximum length, the one occurring earliest\n(lowest start index) is chosen.\n\"\"\"\n\ndef find_blocks(data, value):\n  \"\"\"Finds all contiguous blocks of a specific value in the data list.\n\n  Args:\n    data: A list of integers.\n    value: The integer value to search for blocks of.\n\n  Returns:\n    A list of dictionaries, where each dictionary represents a block\n    and contains 'value', 'start', 'end', and 'length'.\n    Returns an empty list if the value is 0 or no blocks are found.\n  \"\"\"\n  # Block finding is only relevant for non-zero values\n  if value == 0:\n    return []\n\n  blocks = []\n  start_index = -1\n  # Iterate through the list with index\n  for i, element in enumerate(data):\n    # Check if the current element matches the target value\n    if element == value:\n      # If this is the start of a new block, record the index\n      if start_index == -1:\n        start_index = i\n    # If the element does not match and we were inside a block\n    elif start_index != -1:\n      # The block has just ended, record its details\n      blocks.append({\n          'value': value,\n          'start': start_index,\n          'end': i - 1, # The block ended at the previous index\n          'length': (i - 1) - start_index + 1 # Calculate length\n      })\n      # Reset start_index to indicate we are no longer in a block\n      start_index = -1\n\n  # After the loop, check if we were inside a block when the list ended\n  if start_index != -1:\n    blocks.append({\n        'value': value,\n        'start': start_index,\n        'end': len(data) - 1, # Block ends at the last index\n        'length': (len(data) - 1) - start_index + 1 # Calculate length\n    })\n\n  return blocks\n\ndef find_longest_block(blocks):\n  \"\"\"Finds the block with the maximum length from a list of blocks.\n\n  Args:\n    blocks: A list of block dictionaries (from find_blocks).\n\n  Returns:\n    The block dictionary with the maximum length, or None if the list is empty.\n    If multiple blocks share the max length, the first one encountered\n    (which corresponds to the earliest start index due to the nature of\n    find_blocks) is returned because max() is stable.\n  \"\"\"\n  if not blocks:\n    return None\n  # Use max with a key function to find the block with the largest 'length'\n  # max() in Python is stable, so it returns the first element in case of ties\n  # Since blocks are found left-to-right, this correctly handles the tie-breaking rule.\n  return max(blocks, key=lambda b: b['length'])\n\n\ndef transform(input_list):\n  \"\"\"\n  Applies the transformation rule to the input list.\n\n  Args:\n    input_list: A list of integers representing the input sequence.\n\n  Returns:\n    A new list of integers representing the transformed sequence.\n  \"\"\"\n  # Get the length of the input list\n  n = len(input_list)\n\n  # Initialize the output list with zeros, same length as input\n  output_list = [0] * n\n\n  # Identify unique non-zero values in the input list\n  # Using a set handles duplicates, list() converts it, sorted() ensures order (optional but good practice)\n  unique_non_zeros = sorted(list(set(val for val in input_list if val != 0)))\n\n  # Process each unique non-zero value found\n  for value in unique_non_zeros:\n    # Find all contiguous blocks of the current value in the input\n    current_blocks = find_blocks(input_list, value)\n\n    # If blocks were found for this value\n    if current_blocks:\n      # Find the longest block among them (handles tie-breaking)\n      longest = find_longest_block(current_blocks)\n\n      # If a longest block exists (should always be true if current_blocks is not empty)\n      if longest:\n        # Iterate through the indices covered by the longest block\n        for i in range(longest['start'], longest['end'] + 1):\n          # Set the corresponding position in the output list to the block's value\n          output_list[i] = longest['value'] # or simply `value`\n\n  # Return the final transformed list\n  return output_list\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8751,
    "candidates_token_count": 1367,
    "total_token_count": 10118,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.117679,
  "retries": 1
}