{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport math\nimport collections\n\n\"\"\"\nIdentify all unique non-zero integer values present in the input sequence.\nFor each unique non-zero value N:\n  Find all contiguous blocks (runs) of N within the input sequence.\n  Determine the maximum length among all found blocks of N.\n  Identify the specific block of N that has this maximum length.\nCreate an output sequence initialized with zeros, having the same length as the input.\nFor each unique non-zero value N, if a longest block was found:\n  Copy the value N into the output sequence at the indices corresponding to the longest block.\nReturn the resulting output sequence.\n\"\"\"\n\ndef parse_input(input_str):\n  \"\"\"Converts a space-separated string of digits into a list of integers.\"\"\"\n  return [int(x) for x in input_str.split()]\n\ndef format_output(output_list):\n  \"\"\"Converts a list of integers into a space-separated string.\"\"\"\n  return \" \".join(map(str, output_list))\n\ndef find_blocks(data, value):\n  \"\"\"Finds all contiguous blocks of a specific value in the data list.\n\n  Args:\n    data: A list of integers.\n    value: The integer value to search for blocks of.\n\n  Returns:\n    A list of dictionaries, where each dictionary represents a block\n    and contains 'value', 'start', 'end', and 'length'.\n    Returns an empty list if the value is 0 or no blocks are found.\n  \"\"\"\n  if value == 0:\n    return []\n\n  blocks = []\n  start_index = -1\n  for i, element in enumerate(data):\n    if element == value:\n      if start_index == -1:\n        start_index = i  # Start of a potential block\n    elif start_index != -1:\n      # End of the block\n      blocks.append({\n          'value': value,\n          'start': start_index,\n          'end': i - 1,\n          'length': (i - 1) - start_index + 1\n      })\n      start_index = -1 # Reset for the next block\n\n  # Check if the last element was part of a block\n  if start_index != -1:\n    blocks.append({\n        'value': value,\n        'start': start_index,\n        'end': len(data) - 1,\n        'length': (len(data) - 1) - start_index + 1\n    })\n\n  return blocks\n\ndef find_longest_block(blocks):\n  \"\"\"Finds the block with the maximum length from a list of blocks.\n\n  Args:\n    blocks: A list of block dictionaries (from find_blocks).\n\n  Returns:\n    The block dictionary with the maximum length, or None if the list is empty.\n    If multiple blocks share the max length, the first one encountered is returned.\n  \"\"\"\n  if not blocks:\n    return None\n  return max(blocks, key=lambda b: b['length'])\n\n\ndef transform(input_str):\n  \"\"\"\n  Transforms the input sequence by keeping only the longest contiguous block\n  for each non-zero number present in the sequence. All other non-zero numbers\n  are replaced with 0. Zeros in the input are preserved unless overwritten\n  by a kept block element (which won't happen with this implementation).\n  \"\"\"\n  # Parse the input string into a list of integers\n  input_list = parse_input(input_str)\n  n = len(input_list)\n\n  # Initialize the output list with zeros\n  output_list = [0] * n\n\n  # Identify unique non-zero values in the input\n  unique_non_zeros = sorted(list(set(val for val in input_list if val != 0)))\n\n  # Process each unique non-zero value\n  for value in unique_non_zeros:\n    # Find all contiguous blocks of the current value\n    current_blocks = find_blocks(input_list, value)\n\n    # If blocks were found for this value\n    if current_blocks:\n      # Find the longest block among them\n      longest = find_longest_block(current_blocks)\n\n      # If a longest block exists (should always exist if current_blocks is not empty)\n      if longest:\n        # Copy the value into the output list at the indices of the longest block\n        for i in range(longest['start'], longest['end'] + 1):\n          output_list[i] = longest['value'] # Use value from block for clarity\n\n  # Format the output list back into a space-separated string\n  return format_output(output_list)\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1885,
    "candidates_token_count": 1605,
    "total_token_count": 3490,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.021747,
  "retries": 1
}