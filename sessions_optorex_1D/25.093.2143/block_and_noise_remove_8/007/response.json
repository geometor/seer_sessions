{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input sequence of integers by identifying contiguous blocks (runs)\nof each unique non-zero value. For each unique non-zero value, only the single\nblock with the maximum length is preserved in the output. If multiple blocks\nshare the maximum length for a given value, the block that appears earliest\n(smallest start index) in the input sequence is chosen. All elements\ncorresponding to non-selected blocks, and all original zero elements that are\nnot part of a selected block, become zero in the output sequence. The output\nsequence has the same length as the input sequence.\n\"\"\"\n\nimport collections # Not strictly required but potentially useful for variations\n\ndef find_blocks(data, value):\n  \"\"\"Finds all contiguous blocks of a specific non-zero value in the data list.\n\n  Args:\n    data: A list of integers.\n    value: The non-zero integer value to search for blocks of.\n\n  Returns:\n    A list of dictionaries, where each dictionary represents a block\n    and contains 'value', 'start', 'end', and 'length'.\n    Returns an empty list if no blocks are found.\n  \"\"\"\n  # Assumes value is non-zero as per the main logic calling this function\n  blocks = []\n  start_index = -1\n  # Iterate through the list with index\n  for i, element in enumerate(data):\n    # Check if the current element matches the target value\n    if element == value:\n      # If this is the start of a new block, record the index\n      if start_index == -1:\n        start_index = i\n    # If the element does not match and we were inside a block\n    elif start_index != -1:\n      # The block has just ended, record its details\n      end_index = i - 1\n      blocks.append({\n          'value': value,\n          'start': start_index,\n          'end': end_index,\n          'length': end_index - start_index + 1\n      })\n      # Reset start_index to indicate we are no longer in a block\n      start_index = -1\n\n  # After the loop, check if we were inside a block when the list ended\n  if start_index != -1:\n    end_index = len(data) - 1\n    blocks.append({\n        'value': value,\n        'start': start_index,\n        'end': end_index,\n        'length': end_index - start_index + 1\n    })\n\n  return blocks\n\ndef select_target_block(blocks):\n  \"\"\"Selects the target block based on length (max) and start index (min tie-breaker).\n\n  Args:\n    blocks: A list of block dictionaries (from find_blocks).\n\n  Returns:\n    The single selected block dictionary, or None if the list is empty.\n  \"\"\"\n  if not blocks:\n    return None\n\n  # Use max with a key function prioritizing length, then minimizing start index\n  # max(iterable, key=lambda x: (primary_sort_key, secondary_sort_key, ...))\n  # We want max length (primary) and min start index (secondary).\n  # To use max() for the secondary key (min start index), we maximize the negative start index.\n  return max(blocks, key=lambda b: (b['length'], -b['start']))\n\n\ndef transform(input_list):\n    \"\"\"\n    Applies the transformation rule to the input list.\n\n    Args:\n      input_list: A list of integers representing the input sequence.\n                  (Note: uses input_list for clarity over template's input_grid).\n\n    Returns:\n      A new list of integers representing the transformed sequence.\n    \"\"\"\n    # Determine the length of the input sequence\n    n = len(input_list)\n\n    # Create an output sequence of length N, initialized entirely with zeros.\n    # This serves as the base, only selected blocks will overwrite zeros.\n    output_list = [0] * n\n\n    # Identify the set of unique non-zero integer values present in the input sequence.\n    # Using a set automatically handles duplicates. Sorting ensures consistent processing order (optional but good practice).\n    unique_non_zeros = sorted(list(set(val for val in input_list if val != 0)))\n\n    # Process each unique non-zero value found in the input\n    for value in unique_non_zeros:\n      # Find all contiguous blocks (runs) of the current value 'V' in the input sequence.\n      current_blocks = find_blocks(input_list, value)\n\n      # Proceed only if blocks were found for this value\n      if current_blocks:\n        # Select the single target block: longest, then earliest start index.\n        selected_block = select_target_block(current_blocks)\n\n        # If a block was selected (should always be true if current_blocks is not empty)\n        if selected_block:\n          # Iterate through the indices covered by the selected block.\n          for i in range(selected_block['start'], selected_block['end'] + 1):\n            # Set the element at index 'i' in the *output* sequence to the block's value.\n            output_list[i] = selected_block['value'] # or simply `value`\n\n    # Return the generated output sequence.\n    return output_list\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8881,
    "candidates_token_count": 1996,
    "total_token_count": 10877,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 18.739774,
  "retries": 1
}