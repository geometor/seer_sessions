task_elements:
  - item: sequence
    properties:
      - type: list of integers
      - length: 12 (fixed)
      - content: single-digit integers (0-9)
  - item: number
    properties:
      - role: background (most frequent number in the sequence)
      - role: foreground (least frequent number in the sequence)
      - count: frequency of occurrence within the sequence
      - index: position(s) within the sequence (0-based)
constants:
  - name: sequence_length
    value: 12
  - name: index_shift
    value: 4
relationships:
  - type: frequency_comparison
    description: Numbers are categorized into 'background' and 'foreground' based on their frequency counts. Assumes exactly two distinct frequencies in the examples provided (one max, one min).
  - type: positional_mapping
    description: The index of a foreground number in the output sequence is determined by its index in the input sequence via a modulo arithmetic shift.
actions:
  - action: count_frequencies
    input: input_sequence
    output: frequency map (number -> count)
    description: Count occurrences of each unique number.
  - action: identify_roles
    input: frequency map
    output: background_number, foreground_number
    description: Determine the most frequent (background) and least frequent (foreground) numbers. Handles cases with only one unique number.
  - action: initialize_output
    input: background_number, sequence_length
    output: output_sequence
    description: Create a new sequence of `sequence_length` filled with the `background_number`.
  - action: relocate_foreground_elements
    input: input_sequence, foreground_number, output_sequence, index_shift, sequence_length
    output: modified_output_sequence
    description: Iterate through the input sequence. For each element matching the `foreground_number` at index `i`, calculate the new index `j = (i + index_shift) % sequence_length` and place the `foreground_number` at index `j` in the output sequence.