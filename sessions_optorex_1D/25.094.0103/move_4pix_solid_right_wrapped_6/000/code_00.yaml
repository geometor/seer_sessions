Data:
  - type: sequence
    format: space-separated integers string
    length: 12
Elements:
  - type: integer
    value: 0
    role: background/empty
  - type: integer
    value: non-zero (1, 4, 5, 6, 7, 9)
    role: object/marker
Constraints:
  - conservation: The count of each distinct integer is preserved between input and output.
  - homogeneity: Each input sequence contains only one type of non-zero integer.
Transformation:
  type: rearrangement
  logic: dependent on the specific non-zero integer value present
  rules:
    - integer_1:
        action: collect and shift right
        details: Collect all '1's into a contiguous block. Determine the index of the first '1' in the input. Place the collected block in the output starting at index (first_index + 4). Fill remaining positions with '0'.
    - integer_4:
        action: collect and place left-offset
        details: Collect all '4's into a contiguous block. Place this block in the output starting at index 1. Fill remaining positions with '0'.
    - integer_5:
        action: collect and place left-offset
        details: Collect all '5's into a contiguous block. Place this block in the output starting at index 1. Fill remaining positions with '0'.
    - integer_6:
        action: conditional placement based on count
        details: Count the number of '6's. If the count is exactly 2, place '6 6' at indices 3 and 4. If the count is greater than 2, collect all '6's into a contiguous block and place it starting at index 0. Fill remaining positions with '0'.
    - integer_7:
        action: split and move to ends
        details: Collect all '7's into a contiguous block. Split the block into two halves (first half size = ceiling(count/2), second half size = floor(count/2)). Place the first half block at the beginning of the output (index 0). Place the second half block at the end of the output. Fill the positions between the two blocks with '0'.
    - integer_9:
        action: collect and shift right
        details: Collect all '9's into a contiguous block. Determine the index of the first '9' in the input. Place the collected block in the output starting at index (first_index + 4). Fill remaining positions with '0'.