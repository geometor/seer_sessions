Data:
  - type: sequence
    format: 1D NumPy array of integers
    length: 12
Elements:
  - type: integer
    value: 0
    role: background/empty
  - type: integer
    value: non-zero (1, 4, 5, 6, 7, 9)
    role: object/marker
Constraints:
  - conservation: The count of each distinct integer is preserved between input and output (rearrangement only).
  - homogeneity: Each input sequence contains only one type of non-zero integer.
Transformation:
  type: rearrangement
  input: 1D NumPy array (length 12)
  output: space-separated string (length 12 equivalent)
  logic: dependent on the specific non-zero integer value present in the input array
  rules:
    - integer_1:
        action: collect and shift right relative to first occurrence
        details: Collect all '1's (count = C). Find the index (idx) of the first '1' in the input array. Place a contiguous block of C '1's in the output starting at index (idx + 4). Fill remaining positions with '0'.
    - integer_4:
        action: collect and place left-offset
        details: Collect all '4's (count = C). Place a contiguous block of C '4's in the output starting at index 1. Fill remaining positions with '0'.
    - integer_5:
        action: collect and place left-offset
        details: Collect all '5's (count = C). Place a contiguous block of C '5's in the output starting at index 1. Fill remaining positions with '0'.
    - integer_6:
        action: conditional placement based on count
        details: Count the number of '6's (count = C). If C is exactly 2, place '6 6' at indices 3 and 4. If C > 2, collect all '6's into a contiguous block and place it starting at index 0. Fill remaining positions with '0'.
    - integer_7:
        action: split and move to ends
        details: Collect all '7's (count = C). Split the count into two halves (size1 = ceil(C/2), size2 = floor(C/2)). Place a block of size1 '7's at the beginning of the output (index 0). Place a block of size2 '7's at the end of the output (starting index 12 - size2). Fill the positions between the two blocks with '0'.
    - integer_9:
        action: collect and shift right relative to first occurrence
        details: Collect all '9's (count = C). Find the index (idx) of the first '9' in the input array. Place a contiguous block of C '9's in the output starting at index (idx + 4). Fill remaining positions with '0'.