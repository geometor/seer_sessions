Data:
  - type: sequence
    source_format: NumPy array (1D)
    target_format: space-separated integers string
    length: 12
Elements:
  - type: integer
    value: 0
    role: background/empty
  - type: integer
    value: non-zero (1, 4, 5, 6, 7, 9)
    role: object/marker
Constraints:
  - conservation: The count of each distinct integer is preserved between input and output.
  - homogeneity: Each input sequence contains only one type of non-zero integer.
Input_Processing:
  - action: identify_non_zero
    target: The unique non-zero integer value (N)
    outputs: N, count (number of occurrences of N), first_idx (index of first N)
Transformation:
  type: rearrangement
  logic: conditional placement based on N
  rules:
    - condition: N is 1 or 9
      action: place_block
      details: Place a contiguous block of 'count' N's into an initially all-zero output array, starting at index (first_idx + 4). Boundary checks apply.
    - condition: N is 4 or 5
      action: place_block
      details: Place a contiguous block of 'count' N's into an initially all-zero output array, starting at index 1. Boundary checks apply.
    - condition: N is 6
      sub_rules:
        - condition: count is 2
          action: place_specific
          details: Set indices 3 and 4 of the output array to N.
        - condition: count is greater than 2
          action: place_block
          details: Place a contiguous block of 'count' N's into the output array, starting at index 0. Boundary checks apply.
    - condition: N is 7
      action: split_and_place_ends
      details: Calculate size1 = ceil(count / 2), size2 = floor(count / 2). Place a block of size1 N's at the beginning (index 0) and a block of size2 N's at the end (starting index 12 - size2) of the output array. Boundary checks apply.
Output_Processing:
  - action: format_string
    details: Convert the final NumPy array into a space-separated string.