objects:
  - name: input_sequence
    type: list or sequence
    properties:
      - contains: numerical digits (potentially encoded as bytes)
      - structure: space-separated
      - length: 12 elements
  - name: output_sequence
    type: list or sequence
    properties:
      - contains: numerical digits (represented as strings)
      - structure: space-separated
      - length: 12 elements
  - name: first_three_elements
    type: sublist
    properties:
      - derived_from: input_sequence (indices 0, 1, 2)
  - name: remaining_elements
    type: sublist
    properties:
      - derived_from: input_sequence (indices 3 to 11)

actions:
  - name: decode_input (if necessary)
    actor: rule
    object: input_sequence
    parameters:
      - encoding: standard text encoding (e.g., UTF-8)
    results:
      - decoded_string_input
  - name: parse_digits
    actor: rule
    object: decoded_string_input
    results:
      - list_of_digit_strings
  - name: split
    actor: rule
    object: list_of_digit_strings
    parameters:
      - split_point: after the 3rd element
    results:
      - first_three_elements
      - remaining_elements
  - name: concatenate
    actor: rule
    parameters:
      - sequence1: remaining_elements
      - sequence2: first_three_elements
    results:
      - rearranged_list_of_digits
  - name: format_output
    actor: rule
    object: rearranged_list_of_digits
    parameters:
      - separator: " "
    results:
      - output_sequence (as string)

relationships:
  - type: transformation
    from: input_sequence
    to: output_sequence
    rule: Decode input if needed, then move the first three elements to the end.
  - type: ordering
    description: The relative order of elements within the 'first_three_elements' sublist is preserved in the output.
  - type: ordering
    description: The relative order of elements within the 'remaining_elements' sublist is preserved in the output.