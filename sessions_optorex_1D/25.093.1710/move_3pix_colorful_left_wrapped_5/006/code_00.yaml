objects:
  - name: input_sequence
    type: numpy.ndarray # Updated type
    properties:
      - contains: numerical digits (integers)
      - shape: (12,) # NumPy specific property for dimensions/length
      - length: 12
  - name: output_sequence
    type: numpy.ndarray # Assuming output should also be ndarray
    properties:
      - contains: numerical digits (integers)
      - shape: (12,)
      - length: 12
  - name: first_three_elements
    type: numpy.ndarray # Sub-array
    properties:
      - derived_from: input_sequence (indices 0, 1, 2)
  - name: remaining_elements
    type: numpy.ndarray # Sub-array
    properties:
      - derived_from: input_sequence (indices 3 to 11)

actions:
  - name: slice
    actor: rule
    object: input_sequence
    parameters:
      - slice_definition_1: "[:3]" # First three
      - slice_definition_2: "[3:]" # From index 3 onwards
    results:
      - first_three_elements
      - remaining_elements
  - name: concatenate
    actor: rule (using numpy.concatenate)
    parameters:
      - sequence1: remaining_elements
      - sequence2: first_three_elements
      - axis: 0 # For 1D arrays
    results:
      - output_sequence

relationships:
  - type: transformation
    from: input_sequence
    to: output_sequence
    rule: Move the first three elements of the input array to the end.
  - type: ordering
    description: The relative order of elements within the 'first_three_elements' sub-array is preserved in the output.
  - type: ordering
    description: The relative order of elements within the 'remaining_elements' sub-array is preserved in the output.
  - type: type_constraint
    description: Input and Output are expected to be NumPy arrays of shape (12,).