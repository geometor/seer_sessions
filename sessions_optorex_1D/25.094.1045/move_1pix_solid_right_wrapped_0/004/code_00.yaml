objects:
  - sequence: A list of single-digit integers.
  - element: An integer within the sequence.
  - zero_element: An element with the value 0.
  - non_zero_element: An element with a value other than 0.

properties:
  - index: The zero-based position of an element in the sequence.
  - value: The numerical value of an element.
  - is_first_zero: A boolean property indicating if a zero_element has the lowest index among all zero_elements.
  - is_last_non_zero: A boolean property indicating if a non_zero_element has the highest index among all non_zero_elements.

actions:
  - find_first_zero_index: Locate the index of the element that is_first_zero. Returns -1 if no zero_element exists.
  - find_last_non_zero: Locate the index and value of the element that is_last_non_zero. Returns (-1, None) if no non_zero_element exists.
  - remove_at_index: Delete the element at a specified index from the sequence.
  - insert_at_index: Insert a given element into the sequence at a specified index, shifting subsequent elements.

relationships:
  - order: Elements exist in a defined sequence based on their index.
  - position_comparison: The index of the last_non_zero element can be compared to the index of the first_zero element.

transformation:
  - name: MoveLastNonZeroToFirstZeroPosition
  - input: sequence (original_sequence)
  - output: sequence (transformed_sequence)
  - conditions_for_action:
      1. find_first_zero_index(original_sequence) must return an index >= 0 (i.e., a zero exists).
      2. find_last_non_zero(original_sequence) must return an index >= 0 (i.e., a non-zero exists).
      3. The index of the last_non_zero element must be greater than or equal to the index of the first_zero element.
  - steps:
      1. Identify the index_first_zero = find_first_zero_index(original_sequence).
      2. Identify the (index_last_non_zero, value_last_non_zero) = find_last_non_zero(original_sequence).
      3. If any condition_for_action is false, set transformed_sequence = original_sequence.
      4. Else (all conditions are true):
         a. Create a mutable copy of the original_sequence (e.g., working_sequence).
         b. remove_at_index(working_sequence, index_last_non_zero).
         c. insert_at_index(working_sequence, index_first_zero, value_last_non_zero).
         d. Set transformed_sequence = working_sequence.
  - return: transformed_sequence