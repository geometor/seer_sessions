objects:
  - sequence:
      type: list of integers
      properties:
        - elements: single digits (0-9)
        - length
  - block_of_zeros:
      type: contiguous subsequence
      properties:
        - value: all elements are 0
        - start_index
        - end_index
        - length
  - element:
      type: integer
      properties:
        - value
        - index: position in sequence
        - is_zero: boolean (value == 0)
        - is_first_zero_of_block: boolean, relative to a block_of_zeros
        - is_first_preceding_non_zero: boolean, relative to a block_of_zeros
        - is_immediately_following: boolean, relative to a block_of_zeros

properties:
  - is_longest: boolean property of a block_of_zeros, compared to other blocks_of_zeros
  - is_first_longest: boolean property of a block_of_zeros, relevant when multiple blocks share the maximum length (based on start_index)
  - is_at_end: boolean property of a block_of_zeros (block_end_index == sequence_length - 1)

actions:
  - find_zero_blocks: identify all contiguous blocks of zeros.
  - find_longest_blocks: filter blocks with the maximum length.
  - select_target_block: choose the block from the longest_blocks with the minimum start_index.
  - check_position: determine if the target_block is_at_end.
  - find_first_preceding_non_zero: locate the element with the smallest index `i` such that `i < target_block.start_index` and `sequence[i] != 0`. Returns index or indicates none found.
  - find_immediately_following: locate the element at index `target_block.end_index + 1`. Returns index/value or indicates none exists.
  - swap_elements: exchange the values at two specified indices in the sequence.

relationships:
  - longest: between a block of zeros and all other blocks of zeros based on length.
  - first: between blocks of the same maximum length based on start_index.
  - preceding: between an element/index and a block based on index comparison (`index < block.start_index`).
  - following: between an element/index and a block based on index comparison (`index == block.end_index + 1`).