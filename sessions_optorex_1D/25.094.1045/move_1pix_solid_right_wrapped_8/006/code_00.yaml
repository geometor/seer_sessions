objects:
  - name: sequence
    type: list of integers
    description: Represents the input and output data as a list of numbers. Derived from space-separated string input.
  - name: segment
    type: sub-list of integers
    description: A contiguous portion of the main sequence identified for transformation. It starts at the element *after* the first difference between adjacent elements and ends at the next element whose value matches the element *before* the difference.
properties:
  - name: index
    type: integer
    description: The zero-based position of an element within the sequence.
  - name: value
    type: integer
    description: The numerical value of an element (0-9).
  - name: length
    type: integer
    description: The total number of elements in the sequence.
  - name: anchor_value
    type: integer
    description: The value of the element at the first index `i` where sequence[i] differs from sequence[i+1].
  - name: start_index
    type: integer
    description: The index marking the beginning of the segment to be rotated, calculated as `i + 1`.
  - name: end_index
    type: integer
    description: The index marking the end of the segment to be rotated, identified as the first index `j` (where `j >= start_index`) such that `sequence[j]` equals `anchor_value`.
relationships:
  - type: adjacency_difference
    description: Identifying the first index `i` where sequence[i] is not equal to sequence[i+1]. Essential for locating the transformation point.
  - type: value_match
    description: Finding the first index `j` (at or after `start_index`) where the element's value (`sequence[j]`) equals the `anchor_value`. Defines the segment's end.
actions:
  - name: parse_input
    input: space-separated string
    output: sequence (list of integers)
    description: Converts the input string into a list of integer values.
  - name: find_first_difference_index
    input: sequence
    output: index `i` or -1
    description: Locates the first index `i` such that sequence[i] != sequence[i+1]. Returns -1 if no difference exists or sequence length < 2.
  - name: determine_segment_boundaries
    input: sequence, first_difference_index `i`
    output: start_index, end_index
    description: Calculates the start (`i+1`) and end (first index `j >= i+1` where `sequence[j] == sequence[i]`) indices of the segment. Handles cases where `i` is -1.
  - name: extract_segment
    input: sequence, start_index, end_index
    output: segment (sub-list)
    description: Creates a new list containing elements from the sequence between start_index and end_index (inclusive). Returns empty if start/end indices are invalid.
  - name: rotate_segment_right
    input: segment
    output: rotated_segment
    description: Creates a new list by moving the last element of the input segment to the first position and shifting all other elements one position to the right. Returns the segment unchanged if it has 0 or 1 elements.
  - name: reconstruct_sequence
    input: sequence, start_index, end_index, rotated_segment
    output: modified_sequence (list of integers)
    description: Constructs the final sequence by concatenating the part of the original sequence before start_index, the rotated_segment, and the part of the original sequence after end_index.
  - name: format_output
    input: modified_sequence (list of integers)
    output: space-separated string
    description: Converts the final list of integers back into a space-separated string (relevant if string output is required, though tests used arrays/lists).