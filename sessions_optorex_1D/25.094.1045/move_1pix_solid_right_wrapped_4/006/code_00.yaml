objects:
  - name: input_sequence
    type: List[int] or np.ndarray[int]
    properties:
      - length: L (fixed for a given task instance, e.g., 12)
      - elements: integers, including 0
  - name: output_sequence
    type: List[int] or np.ndarray[int]
    properties:
      - length: L (same as input_sequence)
      - elements: integers derived from input_sequence
  - name: zero_element
    type: int
    value: 0
    role: marker for positional shift
  - name: non_zero_element
    type: int
    properties:
      - value: != 0
      - role: fills remaining positions, preserves relative order

actions:
  - name: identify_indices
    inputs: sequence, value
    output: list of indices where sequence element equals value
  - name: filter_elements
    inputs: sequence, condition (e.g., value != 0)
    output: ordered list of elements satisfying the condition
  - name: calculate_target_indices_for_zeros
    inputs: list_of_zero_indices, sequence_length L
    process: map each index `i` to `(i + 1) % L`
    output: set of target indices for zeros in the output_sequence
  - name: determine_target_indices_for_non_zeros
    inputs: set_of_target_zero_indices, sequence_length L
    process: find all indices `j` from `0` to `L-1` such that `j` is not in set_of_target_zero_indices. Sort these indices.
    output: sorted list of target indices for non-zeros in the output_sequence
  - name: construct_output_sequence
    inputs:
      - sequence_length L
      - set_of_target_zero_indices
      - sorted_list_of_target_non_zero_indices
      - ordered_list_of_non_zero_values
    process: |
      1. Create an empty sequence (e.g., array of zeros or placeholders) of length L.
      2. Place the ordered_list_of_non_zero_values into the sequence at the positions specified by sorted_list_of_target_non_zero_indices.
      3. Ensure the value 0 is placed into the sequence at each position specified by set_of_target_zero_indices (may be implicit if initialized with zeros).
    output: output_sequence

relationships:
  - The set of indices occupied by `zero_element` in `output_sequence` is derived by taking the indices of `zero_element` in `input_sequence`, adding 1 to each index, and applying modulo L (sequence length).
  - The relative order of `non_zero_element` values is preserved between `input_sequence` and `output_sequence`.
  - The `output_sequence` is a permutation of the `input_sequence` elements where the positions of zeros are cyclically shifted right by one, and non-zeros fill the remaining gaps in their original relative order.