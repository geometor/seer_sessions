task_description: Rearrange a sequence of numbers by consolidating non-zero blocks to the right end, sorted by length.
input_type: numpy.ndarray
output_type: numpy.ndarray (implicitly, based on platform behavior) or list of integers
elements:
  - type: sequence
    properties:
      - content: single-digit non-negative integers
      - length: Variable (observed as 12 in examples)
      - format: numpy.ndarray
  - type: number
    properties:
      - value: 0 (zero)
        role: separator, padding
      - value: non-zero (1-9)
        role: content_element
objects:
  - name: non_zero_block
    description: A contiguous subsequence of one or more non-zero numbers within the input sequence.
    properties:
      - length: number of elements in the block
      - content: sequence of non-zero numbers
relationships:
  - type: separation
    between: non_zero_block
    by: one or more zeros in the input
    transformed_to: single zero separator in the output (if multiple blocks exist)
  - type: ordering
    of: non_zero_block
    in_output: Sorted by block length in descending order. Blocks with the same length maintain their original relative order (stable sort).
actions:
  - name: identify_blocks
    input: input_sequence (numpy.ndarray or list)
    output: list_of_non_zero_blocks (list of lists)
  - name: sort_blocks
    input: list_of_non_zero_blocks
    output: sorted_list_of_non_zero_blocks
    criterion: Descending order of block length (stable sort).
  - name: construct_output
    input:
      - sorted_list_of_non_zero_blocks
      - original_sequence_length
    output: output_sequence (list or numpy.ndarray)
    steps:
      - Concatenate blocks from the sorted list. Insert a single zero separator between consecutive blocks.
      - Calculate required padding zeros (original_length - length(concatenated_blocks_and_separators)).
      - Prepend padding zeros to the concatenated sequence.
