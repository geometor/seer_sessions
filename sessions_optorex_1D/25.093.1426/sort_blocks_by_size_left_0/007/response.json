{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nRearranges a sequence of numbers (provided as a NumPy array) by consolidating \ncontiguous non-zero blocks to the right end. The blocks are sorted by their \nlength in descending order (stable sort) before being placed. Single zeros \nare used to separate the blocks in the output. Leading zeros are added to \npad the sequence to match the original input length.\n\"\"\"\n\nimport numpy as np\n\n# Helper function to identify non-zero blocks and their start indices\ndef _identify_non_zero_blocks_with_indices(sequence: np.ndarray) -> list[tuple[int, list[int]]]:\n    \"\"\"\n    Identifies contiguous blocks of non-zero numbers and their start indices.\n\n    Args:\n        sequence: A 1D NumPy array of numbers.\n\n    Returns:\n        A list of tuples, where each tuple contains the start index \n        and the list of numbers in a non-zero block.\n    \"\"\"\n    blocks_with_indices = []\n    current_block = []\n    in_block = False\n    start_index = -1\n\n    # Iterate through the sequence with index\n    for i, num in enumerate(sequence):\n        if num != 0:\n            # Start or continue a block\n            if not in_block:\n                in_block = True\n                current_block = [num]\n                start_index = i # Record start index\n            else:\n                current_block.append(num)\n        else:\n            # End of a block (if currently in one)\n            if in_block:\n                blocks_with_indices.append((start_index, list(current_block))) # Store index and block\n                in_block = False\n                current_block = []\n                start_index = -1\n                \n    # Add the last block if the sequence ends with non-zeros\n    if in_block:\n        blocks_with_indices.append((start_index, list(current_block))) # Store index and block\n        \n    return blocks_with_indices\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the transformation rule to the input sequence.\n    \"\"\"\n    # 1. Receive input (already a NumPy array) and determine original length\n    input_sequence = input_grid \n    original_length = len(input_sequence)\n\n    # 2. Identify all contiguous blocks of non-zero numbers and their start indices\n    # The helper function preserves the content of each block and its starting position.\n    blocks_with_indices = _identify_non_zero_blocks_with_indices(input_sequence)\n\n    # 3. Sort the identified blocks: primary key = length (desc), secondary key = index (asc) for stability.\n    # Python's sorted() is stable. We explicitly use the index as a secondary key \n    # to ensure stability if the primary key (negative length) is the same.\n    sorted_blocks_with_indices = sorted(blocks_with_indices, key=lambda x: (-len(x[1]), x[0]))\n    \n    # Extract just the blocks in the correctly sorted order\n    sorted_blocks = [block for index, block in sorted_blocks_with_indices]\n\n    # 4. Construct the core part of the output sequence (blocks + separators)\n    core_output = []\n    num_blocks = len(sorted_blocks)\n    # Iterate through the sorted blocks.\n    for i, block in enumerate(sorted_blocks):\n        # Append the elements of the current block.\n        core_output.extend(block)\n        # If it's not the last block, append a single zero separator.\n        if i < num_blocks - 1:\n            core_output.append(0)\n\n    # 5. Calculate the number of leading zeros needed for padding\n    core_length = len(core_output)\n    padding_zeros_count = original_length - core_length\n    \n    # Ensure padding count is not negative (e.g., if input was all zeros)\n    padding_zeros_count = max(0, padding_zeros_count)\n\n    # 6. Create the final output sequence by prepending padding zeros\n    # Initialize output_grid as a list first\n    output_sequence_list = [0] * padding_zeros_count + core_output\n\n    # 7. Convert the final sequence to a NumPy array\n    output_grid = np.array(output_sequence_list, dtype=input_grid.dtype) # Match input dtype\n    \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 10195,
    "candidates_token_count": 1030,
    "total_token_count": 11225,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.224947,
  "retries": 1
}