{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nRearranges a sequence of numbers (provided as a NumPy array) by consolidating \ncontiguous non-zero blocks to the right end. The blocks are sorted by their \nlength in descending order (stable sort) before being placed. Single zeros \nare used to separate the blocks in the output. Leading zeros are added to \npad the sequence to match the original input length.\n\"\"\"\nimport numpy as np\n\n# Helper function to identify non-zero blocks\ndef _identify_non_zero_blocks(sequence):\n    \"\"\"\n    Identifies contiguous blocks of non-zero numbers in a sequence.\n\n    Args:\n        sequence: A list or 1D NumPy array of numbers.\n\n    Returns:\n        A list of lists, where each inner list is a non-zero block.\n    \"\"\"\n    # Convert numpy array to list for easier processing if needed\n    if isinstance(sequence, np.ndarray):\n        sequence = sequence.tolist()\n        \n    blocks = []\n    current_block = []\n    in_block = False\n    for num in sequence:\n        if num != 0:\n            # Start or continue a block\n            if not in_block:\n                in_block = True\n                current_block = [num]\n            else:\n                current_block.append(num)\n        else:\n            # End of a block (if currently in one)\n            if in_block:\n                blocks.append(current_block)\n                in_block = False\n                current_block = []\n                \n    # Add the last block if the sequence ends with non-zeros\n    if in_block:\n        blocks.append(current_block)\n        \n    return blocks\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Transforms the input sequence according to the specified rules.\n    \"\"\"\n    # 1. Receive input and determine original length\n    input_sequence = input_grid # input is already a numpy array\n    original_length = len(input_sequence)\n\n    # 2. Identify all contiguous blocks of non-zero numbers\n    blocks = _identify_non_zero_blocks(input_sequence)\n\n    # 3. Sort the identified blocks by length in descending order (stable sort)\n    # Python's sorted() is stable\n    sorted_blocks = sorted(blocks, key=len, reverse=True)\n\n    # 4. Construct the core part of the output sequence (blocks + separators)\n    core_output = []\n    num_blocks = len(sorted_blocks)\n    for i, block in enumerate(sorted_blocks):\n        core_output.extend(block)\n        # Add a single zero separator if this is not the last block\n        if i < num_blocks - 1:\n            core_output.append(0)\n\n    # 5. Calculate the number of leading zeros needed for padding\n    core_length = len(core_output)\n    padding_zeros_count = original_length - core_length\n\n    # 6. Create the final output sequence by prepending padding zeros\n    output_sequence = [0] * padding_zeros_count + core_output\n\n    # 7. Return the final sequence as a NumPy array\n    return np.array(output_sequence)\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7559,
    "candidates_token_count": 733,
    "total_token_count": 8292,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.98872,
  "retries": 1
}