task_elements:
  - object: input_sequence
    properties:
      - type: string
      - content: space-separated_integers
      - length: fixed (12 in examples)
      - structure: contains_zeros_and_two_non_zero_blocks
  - object: zero
    properties:
      - value: 0
      - role: background_filler_or_separator
  - object: non_zero_block
    properties:
      - type: contiguous_subsequence_of_identical_non_zero_integers
      - identification: first_block (A), second_block (B) based on order of appearance in the input sequence
      - property: value (the non-zero integer)
      - property: length (number of elements)
    relationships:
      - two_blocks_present: Each input sequence contains exactly two such blocks.
      - separated_by_zeros: The two blocks (A and B) are separated by one or more zeros in the input.
  - object: output_sequence
    properties:
      - type: list_of_integers (derived from input string, likely represented as string for final output)
      - length: same_as_input (12 in examples)
      - structure: leading_zeros + block_X + separator_zero + block_Y
actions:
  - parse_input:
      actor: system
      input: input_string
      output: list_of_integers
      action: Split the string by spaces and convert each part to an integer.
  - identify_blocks:
      actor: system
      input: list_of_integers
      output: first_block (A), second_block (B) (as lists of integers)
      action: Scan the list to find the first two contiguous subsequences of identical non-zero integers.
  - compare_lengths:
      actor: system
      input: first_block (A), second_block (B)
      output: boolean (is length of B strictly greater than length of A?)
  - determine_output_order:
      actor: system
      input: first_block (A), second_block (B), comparison_result
      output: ordered_pair_of_blocks (X, Y)
      logic: If len(B) > len(A), then X=B and Y=A. Otherwise, X=A and Y=B.
  - construct_output:
      actor: system
      input: sequence_length (n), ordered_blocks (X, Y)
      output: output_list_of_integers
      steps:
        - Calculate required_length = len(X) + len(Y) + 1 (for the separator zero).
        - Calculate num_leading_zeros = n - required_length.
        - Create the output list: `[0] * num_leading_zeros + X + [0] + Y`.
  - format_output:
       actor: system
       input: output_list_of_integers
       output: output_string
       action: Convert each integer in the list to a string and join them with spaces.
relationships:
  - input_output_length: The length of the output sequence is identical to the length of the input sequence.
  - block_separation_output: The two reordered non-zero blocks (X and Y) in the output are always separated by exactly one zero.
  - block_placement_output: The structure `X + [0] + Y` is placed at the far right of the output sequence.