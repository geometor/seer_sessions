{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input sequence of 12 integers by identifying the first\ncontiguous block of non-zero integers and shifting this block 4 positions\nto the right within a new sequence initialized with zeros. If the shifted\nblock extends beyond the sequence boundaries, only the portion that fits\nis placed.\n\"\"\"\n\nimport numpy as np\n\ndef find_first_non_zero_block(grid: np.ndarray) -> tuple[int, np.ndarray | None]:\n    \"\"\"\n    Finds the first contiguous block of non-zero integers in a NumPy array.\n\n    Args:\n        grid: A 1D NumPy array of integers.\n\n    Returns:\n        A tuple containing:\n        - start_index: The starting index of the block (or -1 if not found).\n        - payload: A NumPy array containing the non-zero integers in the block\n                   (or None if not found). Returns only the *first* block if\n                   multiple disjoint blocks exist.\n    \"\"\"\n    # Find indices of all non-zero elements\n    non_zero_indices = np.where(grid != 0)[0]\n\n    # Handle case with no non-zero elements\n    if non_zero_indices.size == 0:\n        return -1, None\n\n    # The start index is the first non-zero index found\n    start_index = non_zero_indices[0]\n\n    # Determine the end index of the first contiguous block\n    if non_zero_indices.size == 1:\n        # Only one non-zero element, block length is 1\n        end_index = start_index\n    else:\n        # Check for gaps between non-zero indices\n        diffs = np.diff(non_zero_indices)\n        # Find the index *within non_zero_indices* where the first gap occurs\n        gaps = np.where(diffs > 1)[0]\n        if gaps.size == 0:\n            # No gaps, the block extends to the last non-zero element found\n            end_index = non_zero_indices[-1]\n        else:\n            # Gaps exist, the first block ends at the index just before the first gap\n            # gaps[0] is the index in `diffs` where the first difference > 1 occurs.\n            # This corresponds to the index in `non_zero_indices` *before* the gap.\n            end_index = non_zero_indices[gaps[0]]\n\n    # Extract the payload (the actual non-zero numbers in the identified block)\n    # Slicing is [start:end+1] to include the element at end_index\n    payload = grid[start_index : end_index + 1]\n\n    return start_index, payload\n\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the transformation rule to the input NumPy array.\n\n    Args:\n        input_grid: A 1D NumPy array (expected length 12).\n\n    Returns:\n        A new 1D NumPy array with the first non-zero block shifted right by 4.\n    \"\"\"\n    # Get the size of the input grid (should be 12)\n    n = input_grid.shape[0]\n\n    # 1. Initialize an output grid of the same size with all zeros.\n    output_grid = np.zeros_like(input_grid)\n\n    # 2. Find the start index and the payload (first non-zero block)\n    start_index, payload = find_first_non_zero_block(input_grid)\n\n    # 3. Proceed only if a non-zero block was found\n    if start_index != -1 and payload is not None:\n        # 4. Calculate the target start index for the shift (shift right by 4)\n        target_start_index = start_index + 4\n        payload_len = payload.shape[0]\n\n        # 5. Calculate the target end index (exclusive) for slicing\n        target_end_index = target_start_index + payload_len\n\n        # 6. Determine the actual slice boundaries within the output grid [0, n)\n        # Ensure the slice start is not less than 0 or greater than or equal to n\n        actual_output_start = max(0, target_start_index)\n        actual_output_start = min(actual_output_start, n) # Clamp start to be at most n\n\n        # Ensure the slice end is not greater than n\n        actual_output_end = min(n, target_end_index)\n        actual_output_end = max(actual_output_start, actual_output_end) # Ensure end >= start\n\n        # 7. Determine the portion of the payload to copy based on boundaries\n        # How many elements to skip from the start of payload if target_start_index < 0\n        payload_start_offset = max(0, -target_start_index)\n        # How many elements actually fit in the calculated output slice\n        payload_copy_len = actual_output_end - actual_output_start\n\n        # 8. Copy the relevant part of the payload if there's space and content\n        if payload_copy_len > 0 and payload_start_offset < payload_len:\n            # Select the correct sub-slice of the payload\n            payload_to_copy = payload[payload_start_offset : payload_start_offset + payload_copy_len]\n            # Assign the payload slice to the calculated output slice\n            output_grid[actual_output_start:actual_output_end] = payload_to_copy\n\n    # 9. Return the transformed grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8426,
    "candidates_token_count": 1280,
    "total_token_count": 9706,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 25.09408,
  "retries": 1
}