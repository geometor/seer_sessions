{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport math\n\n\"\"\"\nIdentify the contiguous segment of the input sequence (length 12) starting from \nthe index of the first non-zero integer and ending at the index of the last \nnon-zero integer. Shift this entire segment exactly 4 positions to the right \nwithin a new sequence of the same shape and dtype, filling the remaining \npositions with zeros. If the input sequence contains only zeros, the output is \nidentical to the input. The input is assumed to represent a 1D sequence, \npotentially provided as a 1D NumPy array or a structure flattenable to 1D.\n\"\"\"\n\ndef find_non_zero_bounds(data_array_1d):\n  \"\"\"\n  Finds the indices of the first and last non-zero elements in a 1D NumPy array.\n\n  Args:\n    data_array_1d: The 1D NumPy array to search.\n\n  Returns:\n    A tuple (first_idx, last_idx). Returns (None, None) if no non-zero \n    elements are found.\n  \"\"\"\n  # Find indices of all non-zero elements\n  non_zero_indices = np.nonzero(data_array_1d)[0] \n  \n  # Check if any non-zero elements were found\n  if non_zero_indices.size == 0:\n    return None, None\n    \n  # The first index in the tuple is the first non-zero index\n  first_idx = non_zero_indices[0]\n  # The last index in the tuple is the last non-zero index\n  last_idx = non_zero_indices[-1]\n  \n  return first_idx, last_idx\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by shifting the core non-zero segment \n    4 positions to the right.\n\n    Args:\n      input_grid: A NumPy array representing the sequence (potentially 1xN, Nx1, or 1D).\n\n    Returns:\n      A new NumPy array of the same shape and dtype with the segment shifted.\n    \"\"\"\n    \n    # Ensure we are working with a 1D representation for easier indexing\n    # Flatten works for 1D, 1xN, Nx1 arrays\n    input_array_1d = input_grid.flatten()\n    \n    # Define constants from the observed pattern\n    array_length = input_array_1d.shape[0] # Get length from the flattened array\n    if array_length == 0: # Handle empty input case\n        return np.copy(input_grid) # Return a copy of the original shape\n\n    # Expecting length 12 based on examples, but use actual length for robustness\n    expected_length = 12 \n    # The shift amount is constant based on examples\n    shift_amount = 4 \n\n    # Find the boundaries of the non-zero segment in the 1D array\n    first_nz_idx, last_nz_idx = find_non_zero_bounds(input_array_1d)\n\n    # Handle the case where the array is all zeros\n    if first_nz_idx is None:\n      # If no non-zeros, return a copy of the original input grid\n      return np.copy(input_grid) \n\n    # Extract the segment from the 1D array\n    # The segment includes all elements from the first non-zero to the last non-zero\n    segment = input_array_1d[first_nz_idx : last_nz_idx + 1]\n\n    # Calculate the new starting position for the segment\n    new_start_idx = first_nz_idx + shift_amount\n\n    # Initialize the output array (1D) with zeros, preserving the data type\n    output_array_1d = np.zeros(array_length, dtype=input_grid.dtype)\n\n    # Place the segment into the 1D output array at the new position\n    segment_len = segment.shape[0] # Length of the segment\n    new_end_idx = new_start_idx + segment_len # Calculate potential end index\n    \n    # Check bounds before placing to avoid errors if segment shifted off the end\n    # (though examples suggest it always fits within length 12)\n    if new_end_idx <= array_length:\n        output_array_1d[new_start_idx : new_end_idx] = segment\n    else:\n        # If the segment goes out of bounds, truncate it\n        fit_len = array_length - new_start_idx\n        if fit_len > 0: # Ensure there's space to place at least part of the segment\n             output_array_1d[new_start_idx : array_length] = segment[:fit_len] \n        # If fit_len <= 0, the start index is already out of bounds, segment is not placed.\n\n    # Reshape the 1D output array back to the original input grid shape\n    output_grid = output_array_1d.reshape(input_grid.shape)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6642,
    "candidates_token_count": 1152,
    "total_token_count": 7794,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.347668,
  "retries": 1
}