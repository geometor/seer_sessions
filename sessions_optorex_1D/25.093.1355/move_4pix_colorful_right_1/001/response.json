{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport math\nimport collections\n\n\"\"\"\nIdentify the contiguous segment of the input list starting from the first non-zero \ninteger and ending at the last non-zero integer. Shift this entire segment exactly \n4 positions to the right within a list of the same total length (12), filling \nthe remaining positions with zeros. If the input list contains only zeros, the \noutput is identical to the input.\n\"\"\"\n\ndef find_first_last_non_zero_indices(data_list):\n  \"\"\"\n  Finds the indices of the first and last non-zero elements in a list.\n\n  Args:\n    data_list: The list of numbers to search.\n\n  Returns:\n    A tuple (first_idx, last_idx). Returns (None, None) if no non-zero \n    elements are found.\n  \"\"\"\n  first_idx = None\n  last_idx = None\n  for i, val in enumerate(data_list):\n    if val != 0:\n      if first_idx is None:\n        first_idx = i\n      last_idx = i\n  return first_idx, last_idx\n\ndef transform(input_list):\n  \"\"\"\n  Transforms the input list by shifting the core non-zero segment \n  4 positions to the right.\n\n  Args:\n    input_list: A list of 12 integers.\n\n  Returns:\n    A new list of 12 integers with the segment shifted.\n  \"\"\"\n  # Define constants based on observed patterns\n  list_length = 12\n  shift_amount = 4\n\n  # Find the boundaries of the non-zero segment\n  first_nz_idx, last_nz_idx = find_first_last_non_zero_indices(input_list)\n\n  # Handle the case where the list is all zeros\n  if first_nz_idx is None:\n    return list(input_list) # Return a copy if no non-zeros found\n\n  # Extract the segment\n  # The segment includes all elements from the first non-zero to the last non-zero\n  segment = input_list[first_nz_idx : last_nz_idx + 1]\n\n  # Calculate the new starting position for the segment\n  new_start_idx = first_nz_idx + shift_amount\n\n  # Initialize the output list with zeros\n  output_list = [0] * list_length\n\n  # Place the segment into the output list at the new position\n  # Ensure the segment fits within the bounds (though examples suggest it always does)\n  segment_len = len(segment)\n  if new_start_idx + segment_len <= list_length:\n      output_list[new_start_idx : new_start_idx + segment_len] = segment\n  else:\n      # This case shouldn't happen based on examples, but include basic handling\n      # Place as much of the segment as fits starting from new_start_idx\n      fit_len = list_length - new_start_idx\n      output_list[new_start_idx : list_length] = segment[:fit_len]\n\n\n  return output_list\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1818,
    "candidates_token_count": 706,
    "total_token_count": 2524,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.188923,
  "retries": 1
}