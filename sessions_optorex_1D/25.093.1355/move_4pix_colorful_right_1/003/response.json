{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport math\nimport collections # Not strictly needed now but good practice\n\n\"\"\"\nIdentify the contiguous segment of the input NumPy array (length 12) starting from \nthe index of the first non-zero integer and ending at the index of the last \nnon-zero integer. Shift this entire segment exactly 4 positions to the right \nwithin a new NumPy array of the same shape and dtype, filling the remaining \npositions with zeros. If the input array contains only zeros, the output is \nidentical to the input.\n\"\"\"\n\ndef find_non_zero_bounds(data_array):\n  \"\"\"\n  Finds the indices of the first and last non-zero elements in a NumPy array.\n\n  Args:\n    data_array: The 1D NumPy array to search.\n\n  Returns:\n    A tuple (first_idx, last_idx). Returns (None, None) if no non-zero \n    elements are found.\n  \"\"\"\n  non_zero_indices = np.nonzero(data_array)[0] # Get indices for the first (only) dimension\n  if non_zero_indices.size == 0:\n    return None, None\n  first_idx = non_zero_indices[0]\n  last_idx = non_zero_indices[-1]\n  return first_idx, last_idx\n\ndef transform(input_array):\n  \"\"\"\n  Transforms the input array by shifting the core non-zero segment \n  4 positions to the right.\n\n  Args:\n    input_array: A 1D NumPy array of 12 integers.\n\n  Returns:\n    A new 1D NumPy array of 12 integers with the segment shifted.\n  \"\"\"\n  # Define constants based on observed patterns\n  array_length = 12 # Expected length from examples\n  shift_amount = 4\n\n  # Ensure input is a numpy array (useful if the framework doesn't guarantee it)\n  # input_array = np.array(input_array) \n\n  # Find the boundaries of the non-zero segment\n  first_nz_idx, last_nz_idx = find_non_zero_bounds(input_array)\n\n  # Handle the case where the array is all zeros\n  if first_nz_idx is None:\n    # If no non-zeros, return a copy of the input array\n    return np.copy(input_array) \n\n  # Extract the segment\n  # The segment includes all elements from the first non-zero to the last non-zero\n  segment = input_array[first_nz_idx : last_nz_idx + 1]\n\n  # Calculate the new starting position for the segment\n  new_start_idx = first_nz_idx + shift_amount\n\n  # Initialize the output array with zeros, preserving the data type\n  output_array = np.zeros(array_length, dtype=input_array.dtype)\n\n  # Place the segment into the output array at the new position\n  segment_len = segment.shape[0] # Length of the segment\n  \n  # Calculate the end index for slicing in the output array\n  new_end_idx = new_start_idx + segment_len\n  \n  # Check bounds before placing (though examples suggest it always fits)\n  if new_end_idx <= array_length:\n      output_array[new_start_idx : new_end_idx] = segment\n  else:\n      # If the segment goes out of bounds, truncate it\n      fit_len = array_length - new_start_idx\n      output_array[new_start_idx : array_length] = segment[:fit_len] # Place the part that fits\n\n  return output_array\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5589,
    "candidates_token_count": 834,
    "total_token_count": 6423,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.284906,
  "retries": 1
}