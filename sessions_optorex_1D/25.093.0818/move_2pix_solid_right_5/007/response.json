{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input sequence of 12 integers by identifying a single contiguous \nblock of identical non-zero integers and shifting this block exactly two \npositions to the right. The remaining positions are filled with zeros. \nInput can be a string, list, or numpy array. Output is a space-separated string.\n\"\"\"\n\nimport numpy as np\nimport re # Not strictly needed with current parsing logic, but kept for potential future flexibility\n\ndef _parse_input(input_data):\n    \"\"\"\n    Converts various input formats (string, list, list containing a string, numpy array) \n    to a 1D NumPy integer array.\n    \"\"\"\n    if isinstance(input_data, np.ndarray):\n        # Handle numpy array input\n        if input_data.ndim > 1:\n             # Handle multi-dimensional arrays - assume first row if shape suggests it\n             if input_data.shape[0] == 1:\n                 input_sequence_list = input_data.flatten().tolist()\n             # Check if it might be a column vector intended as a sequence\n             elif input_data.shape[1] == 1:\n                 input_sequence_list = input_data.flatten().tolist()\n             else:\n                 # Fallback: use the first row if dimensions are ambiguous for this task\n                 # print(f\"Warning: Input is multi-dimensional {input_data.shape}, using first row.\")\n                 input_sequence_list = input_data[0].tolist()\n        else:\n            # It's already a 1D NumPy array\n            input_sequence_list = input_data.tolist()\n\n    elif isinstance(input_data, str):\n        # Handle plain string input (e.g., \"0 0 1 1 0 ...\")\n        cleaned_str = input_data.strip().strip('[]')\n        try:\n            input_sequence_list = [int(x) for x in cleaned_str.split()]\n        except ValueError as e:\n            raise ValueError(f\"Could not parse input string: '{input_data}'. Error: {e}\")\n\n    elif isinstance(input_data, list):\n         # Handle list input\n         if len(input_data) == 1 and isinstance(input_data[0], str):\n             # Special case: list containing a single string element (e.g., ['0 0 1 1 0 ...'])\n             cleaned_str = input_data[0].strip().strip('[]')\n             try:\n                 input_sequence_list = [int(x) for x in cleaned_str.split()]\n             except ValueError as e:\n                 raise ValueError(f\"Could not parse string within list: '{input_data[0]}'. Error: {e}\")\n         else:\n             # Assume list of integers (or items convertible to int)\n             try:\n                 input_sequence_list = [int(x) for x in input_data]\n             except (ValueError, TypeError) as e:\n                 raise ValueError(f\"Could not convert input list elements to integers: {input_data}. Error: {e}\")\n    else:\n        raise TypeError(f\"Unsupported input type: {type(input_data)}\")\n    \n    # Convert the final list to a NumPy array\n    return np.array(input_sequence_list, dtype=int)\n\n\ndef _find_block_indices(sequence: np.ndarray):\n    \"\"\"\n    Finds the start and end indices of the first contiguous non-zero block \n    in a 1D NumPy array. Returns (None, None) if no block is found.\n    \"\"\"\n    # Find indices of all non-zero elements\n    non_zero_indices = np.nonzero(sequence)[0] \n    \n    if non_zero_indices.size == 0:\n        # No non-zero elements found\n        return None, None\n    else:\n        # The block starts at the first non-zero index\n        start_index = non_zero_indices[0]\n        # The block ends at the last non-zero index (assuming contiguity)\n        end_index = non_zero_indices[-1]\n        \n        # Optional check for contiguity if needed (based on problem constraints, not strictly necessary here)\n        # expected_length = end_index - start_index + 1\n        # if non_zero_indices.size != expected_length:\n        #     # This would indicate gaps or multiple blocks, contrary to assumptions\n        #     print(f\"Warning: Non-zero elements at {non_zero_indices} may not form a single contiguous block.\")\n            \n        return start_index, end_index\n\ndef transform(input_grid) -> str:\n    \"\"\"\n    Applies the transformation rule: finds a contiguous non-zero block\n    and shifts it 2 positions to the right within a sequence of fixed length (12).\n\n    Args:\n        input_grid: Input data representing the sequence. Can be a 1D NumPy array, \n                    a list of ints, a string of space-separated ints, or a list \n                    containing a single string of space-separated ints.\n\n    Returns:\n        A string of space-separated integers representing the transformed sequence.\n    \"\"\"\n    # 1. Parse Input: Convert input to a standard 1D NumPy array format.\n    try:\n        input_sequence = _parse_input(input_grid)\n        # Enforce expected length if necessary (optional, based on strictness)\n        # if input_sequence.shape[0] != 12:\n        #    raise ValueError(f\"Input sequence length is {input_sequence.shape[0]}, expected 12.\")\n    except (TypeError, ValueError) as e:\n        # Handle parsing errors - return a default state (e.g., all zeros)\n        print(f\"Error processing input: {e}. Returning default output.\")\n        # Determine a fallback length, default to 12 if unable to guess\n        fallback_length = 12 \n        try:\n             # Attempt to guess length from string representation\n             if isinstance(input_grid, str):\n                 fallback_length = len(input_grid.split())\n             elif isinstance(input_grid, list) and len(input_grid) > 0:\n                 if isinstance(input_grid[0], str):\n                     fallback_length = len(input_grid[0].split())\n                 else:\n                     fallback_length = len(input_grid)\n             elif isinstance(input_grid, np.ndarray):\n                 fallback_length = input_grid.size\n\n             if fallback_length < 1 : fallback_length = 12 # Ensure positive length\n        except:\n             fallback_length = 12 # Default if guessing fails\n\n        return \" \".join(['0'] * fallback_length)\n\n    sequence_length = input_sequence.shape[0]\n\n    # 2. Initialize Output: Create a new NumPy array of zeros with the same length.\n    output_grid = np.zeros_like(input_sequence)\n\n    # 3. Find Non-Zero Block: Get the start and end indices of the block.\n    start_index, end_index = _find_block_indices(input_sequence)\n\n    # 4. If a block exists, perform the shift.\n    if start_index is not None and end_index is not None:\n        # 5. Extract Block: Get the sub-array representing the non-zero block.\n        block = input_sequence[start_index : end_index + 1]\n        block_len = len(block)\n\n        # 6. Calculate New Position: Determine the target start index after shifting right by 2.\n        new_start_index = start_index + 2\n\n        # 7. Place Shifted Block: Copy the block to the new position in the output grid,\n        #    handling boundary conditions (elements shifting off the end).\n        if new_start_index < sequence_length:\n            # Calculate how many elements from the block actually fit\n            num_to_copy = min(block_len, sequence_length - new_start_index)\n\n            # Define the slice of the block to copy\n            source_slice = block[0 : num_to_copy]\n\n            # Define the target slice in the output grid\n            target_start = new_start_index\n            target_end = new_start_index + num_to_copy\n\n            # Perform the copy\n            output_grid[target_start : target_end] = source_slice\n        # Else: If new_start_index >= sequence_length, the entire block shifts off the grid,\n        # and the output_grid correctly remains all zeros.\n\n    # 8. Format Output: Convert the resulting NumPy array to a space-separated string.\n    output_str = \" \".join(map(str, output_grid))\n\n    # 9. Return Result\n    return output_str\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8466,
    "candidates_token_count": 2011,
    "total_token_count": 10477,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 21.740704,
  "retries": 1
}