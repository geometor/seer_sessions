{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransforms a 1D sequence of integers based on its first and last non-zero elements.\n\n1.  Examine the input sequence of integers.\n2.  Find the value and index of the first non-zero integer (`first_val`, `first_idx`).\n3.  Find the value and index of the last non-zero integer (`last_val`, `last_idx`).\n4.  If no non-zero integers are found (i.e., the sequence contains only zeros), the output is an identical copy of the input sequence.\n5.  If non-zero integers exist:\n    a. Calculate the sum `S = first_val + last_val`.\n    b. Create a modifiable copy of the input sequence.\n    c. If `S` is greater than or equal to 14:\n        i. Iterate through the copied sequence from the index immediately after the last non-zero integer (`last_idx + 1`) to the end of the sequence.\n        ii. Set the value of each element in this range to `last_val`.\n    d. Else (if `S` is less than 14):\n        i. Iterate through the copied sequence from the beginning (index 0) up to, but not including, the index of the first non-zero integer (`first_idx`).\n        ii. Set the value of each element in this range to `first_val`.\n    e. The modified copy is the output sequence.\n\"\"\"\n\ndef find_first_last_non_zero(sequence: np.ndarray):\n    \"\"\"\n    Finds the value and index of the first and last non-zero elements in a NumPy array.\n\n    Args:\n        sequence: A 1D NumPy array of integers.\n\n    Returns:\n        A tuple: (first_val, first_idx, last_val, last_idx).\n        Returns (None, -1, None, -1) if no non-zero elements are found.\n    \"\"\"\n    # Find indices of all non-zero elements\n    non_zero_indices = np.nonzero(sequence)[0] # [0] accesses the first dimension's indices\n\n    # Check if any non-zero elements exist\n    if non_zero_indices.size == 0:\n        return None, -1, None, -1\n\n    # Get the first and last indices from the non_zero_indices array\n    first_idx = non_zero_indices[0]\n    last_idx = non_zero_indices[-1]\n\n    # Get the values at these indices from the original sequence\n    first_val = sequence[first_idx]\n    last_val = sequence[last_idx]\n\n    return first_val, first_idx, last_val, last_idx\n\n\ndef transform(input_grid: list) -> list:\n    \"\"\"\n    Applies the transformation rule to the input sequence.\n\n    Args:\n        input_grid: A list representing the 1D sequence of integers.\n                    (Note: Although named grid, it's treated as a 1D sequence based on examples)\n\n    Returns:\n        A new list representing the transformed sequence.\n    \"\"\"\n    # Convert input list to a NumPy array for efficient processing\n    # Assuming input_grid is a flat list of integers based on examples\n    input_sequence = np.array(input_grid, dtype=int)\n\n    # Find the first and last non-zero elements and their indices\n    first_val, first_idx, last_val, last_idx = find_first_last_non_zero(input_sequence)\n\n    # Handle the case where the sequence is all zeros\n    # If first_val is None, it means no non-zero elements were found\n    if first_val is None:\n        # Return a copy of the original list\n        return list(input_sequence)\n\n    # Calculate the sum of the first and last non-zero values\n    s = first_val + last_val\n\n    # Create a copy of the input sequence to modify\n    output_sequence = input_sequence.copy()\n\n    # Apply the transformation based on the sum S\n    if s >= 14:\n        # Right Expansion Rule: Change trailing zeros (or elements after last non-zero)\n        # Check if there are elements after the last non-zero one\n        if last_idx + 1 < len(output_sequence):\n            # Use slicing to modify elements from index last_idx + 1 to the end\n            output_sequence[last_idx + 1:] = last_val\n    else:\n        # Left Expansion Rule: Change leading zeros (or elements before first non-zero)\n        # Check if there are elements before the first non-zero one (i.e., first_idx > 0)\n        if first_idx > 0:\n             # Use slicing to modify elements from the beginning (index 0) up to first_idx\n             output_sequence[:first_idx] = first_val\n\n    # Convert the NumPy array back to a list before returning\n    return output_sequence.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6696,
    "candidates_token_count": 1134,
    "total_token_count": 7830,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 21.064251,
  "retries": 1
}