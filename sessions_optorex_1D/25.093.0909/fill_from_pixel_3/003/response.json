{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransforms a 1D sequence of integers based on its first and last non-zero elements.\n\n1.  Find the first non-zero integer (`first_val`) and its position (`first_idx`).\n2.  Find the last non-zero integer (`last_val`) and its position (`last_idx`).\n3.  If no non-zero integers are found (the sequence is all zeros), return a copy of the input.\n4.  Otherwise, calculate the sum `S = first_val + last_val`.\n5.  If `S` is greater than or equal to 14:\n    a. Change all elements in a copy of the sequence from position `last_idx + 1` to the end to the value `last_val` (Right Expansion).\n6.  Else (if `S` is less than 14):\n    a. Change all elements in a copy of the sequence from the beginning (position 0) up to (but not including) position `first_idx` to the value `first_val` (Left Expansion).\n7.  Return the modified sequence.\n\"\"\"\n\ndef find_first_last_non_zero(sequence):\n    \"\"\"\n    Finds the value and index of the first and last non-zero elements in a NumPy array.\n\n    Args:\n        sequence: A 1D NumPy array of integers.\n\n    Returns:\n        A tuple: (first_val, first_idx, last_val, last_idx).\n        Returns (None, -1, None, -1) if no non-zero elements are found.\n    \"\"\"\n    # Find indices of all non-zero elements\n    non_zero_indices = np.nonzero(sequence)[0]\n\n    # Check if any non-zero elements exist\n    if non_zero_indices.size == 0:\n        return None, -1, None, -1\n\n    # Get the first and last indices\n    first_idx = non_zero_indices[0]\n    last_idx = non_zero_indices[-1]\n\n    # Get the values at these indices\n    first_val = sequence[first_idx]\n    last_val = sequence[last_idx]\n\n    return first_val, first_idx, last_val, last_idx\n\n\ndef transform(input_sequence: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the transformation rule to the input sequence (NumPy array).\n\n    Args:\n        input_sequence: A 1D NumPy array of integers.\n\n    Returns:\n        A new 1D NumPy array representing the transformed sequence.\n    \"\"\"\n    # Ensure input is a numpy array for consistency\n    if not isinstance(input_sequence, np.ndarray):\n        input_sequence = np.array(input_sequence) # convert list to numpy\n\n    # Find the first and last non-zero elements and their indices\n    first_val, first_idx, last_val, last_idx = find_first_last_non_zero(input_sequence)\n\n    # Handle the case where the sequence is all zeros\n    if first_val is None:\n        return input_sequence.copy() # Return a copy\n\n    # Calculate the sum\n    s = first_val + last_val\n\n    # Create a copy of the input sequence to modify\n    output_sequence = input_sequence.copy()\n\n    # Apply the transformation based on the sum\n    if s >= 14:\n        # Right Expansion: Change trailing zeros\n        # Use slicing to modify elements from last_idx + 1 to the end\n        if last_idx + 1 < len(output_sequence): # Check if there are trailing elements\n            output_sequence[last_idx + 1:] = last_val\n    else:\n        # Left Expansion: Change leading zeros\n        # Use slicing to modify elements from the beginning up to first_idx\n        if first_idx > 0: # Check if there are leading elements\n             output_sequence[:first_idx] = first_val\n\n    return output_sequence\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4912,
    "candidates_token_count": 909,
    "total_token_count": 5821,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.201378,
  "retries": 1
}