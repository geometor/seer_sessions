{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport math\n\n\"\"\"\nFind the first and last non-zero integers in the input sequence. If the sequence contains only zeros, return it unchanged. Otherwise, calculate the sum of the first and last non-zero integers. If the sum is 14 or greater, replace all trailing zeros (after the last non-zero integer) with the value of the last non-zero integer. If the sum is less than 14, replace all leading zeros (before the first non-zero integer) with the value of the first non-zero integer.\n\"\"\"\n\ndef find_first_non_zero(sequence):\n    \"\"\"Finds the value and index of the first non-zero element.\"\"\"\n    for i, val in enumerate(sequence):\n        if val != 0:\n            return val, i\n    return None, -1 # No non-zero element found\n\ndef find_last_non_zero(sequence):\n    \"\"\"Finds the value and index of the last non-zero element.\"\"\"\n    last_val = None\n    last_idx = -1\n    for i, val in enumerate(sequence):\n        if val != 0:\n            last_val = val\n            last_idx = i\n    return last_val, last_idx # Returns None, -1 if no non-zero element found\n\ndef transform(input_sequence):\n    \"\"\"\n    Applies the transformation rule to the input sequence.\n\n    Args:\n        input_sequence: A list of integers.\n\n    Returns:\n        A new list of integers representing the transformed sequence.\n    \"\"\"\n\n    # Find the first non-zero element and its index\n    first_val, first_idx = find_first_non_zero(input_sequence)\n\n    # Handle the case where the sequence is all zeros\n    if first_val is None:\n        return list(input_sequence) # Return a copy\n\n    # Find the last non-zero element and its index\n    last_val, last_idx = find_last_non_zero(input_sequence)\n    # Note: If first_val is not None, last_val will also not be None.\n\n    # Calculate the sum\n    s = first_val + last_val\n\n    # Create a copy of the input sequence to modify\n    output_sequence = list(input_sequence)\n\n    # Apply the transformation based on the sum\n    if s >= 14:\n        # Right Expansion: Change trailing zeros\n        # Iterate from the position after the last non-zero element to the end\n        for i in range(last_idx + 1, len(output_sequence)):\n            output_sequence[i] = last_val\n    else:\n        # Left Expansion: Change leading zeros\n        # Iterate from the beginning up to the first non-zero element\n        for i in range(first_idx):\n            output_sequence[i] = first_val\n\n    return output_sequence\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1807,
    "candidates_token_count": 646,
    "total_token_count": 2453,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 8.379822,
  "retries": 1
}