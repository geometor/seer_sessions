Input:
  Type: String
  Format: Space-separated single digits (0-9).
  InitialProcessing: Must be parsed into a list of integers.

Output:
  Type: List of integers.
  RelationToInput: Same length as the input list. Represents the transformed state.

CoreObjects:
  - Grid:
      Description: The list of integers derived from the input string.
  - Pattern:
      Description: A specific three-element sequence within the Grid that triggers the transformation. Identified by scanning the Grid.
      LocationConstraint: Must occur at indices `i-1`, `i`, `i+1` where `0 < i < length-1`.
      Types:
        - RunNeighborZero:
            Condition: Grid[i-1] != 0 (Run), Grid[i] != 0 (Neighbor), Grid[i+1] == 0 (Zero), AND Grid[i-1] != Grid[i].
            Properties:
              RunValue: Grid[i-1]
              NeighborValue: Grid[i]
              NeighborIndex: i
              RelativePosition: 'right' (Neighbor is right of Run)
        - ZeroNeighborRun:
            Condition: Grid[i-1] == 0 (Zero), Grid[i] != 0 (Neighbor), Grid[i+1] != 0 (Run), AND Grid[i] != Grid[i+1].
            Properties:
              RunValue: Grid[i+1]
              NeighborValue: Grid[i]
              NeighborIndex: i
              RelativePosition: 'left' (Neighbor is left of Run)
  - TargetLength:
      Description: The desired final length of the contiguous block formed by the NeighborValue after expansion.
      Determination: Based on the RunValue and RelativePosition found in the Pattern.
      Rules:
        - Position 'right': (Run=2 -> Length=3), (Run=3 -> Length=4), (Run=5 -> Length=4)
        - Position 'left': (Run=3 -> Length=3), (Run=5 -> Length=4), (Run=8 -> Length=2)

TransformationAction:
  - Name: Expansion
  - Trigger: Detection of the *first* valid Pattern in the Grid.
  - Actor: The NeighborValue from the detected Pattern.
  - Target: Contiguous sequence of zeros adjacent to the NeighborValue, located *away* from the RunValue element of the Pattern.
  - Direction:
      - Rightward (increasing index) if RelativePosition is 'right'.
      - Leftward (decreasing index) if RelativePosition is 'left'.
  - Process:
      1. Create a copy of the initial Grid (OutputGrid).
      2. Replace zeros in the target direction within OutputGrid with the NeighborValue.
      3. Count the expanding block size (including the original Neighbor).
      4. Stop expansion when:
         - The block size reaches TargetLength.
         - A non-zero element is encountered in the expansion direction.
         - The boundary of the Grid is reached.
  - Result: The modified OutputGrid. If no pattern is found, the OutputGrid remains identical to the initial Grid.