{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nProcesses a 2D grid (NumPy array) row by row. For each row:\nIdentifies the first and last non-zero digits in the row.\nCounts the number of leading zeros (before the first non-zero) and trailing zeros (after the last non-zero).\nIf the count of leading zeros is less than or equal to the count of trailing zeros, replaces the leading zeros in that row with the value of the first non-zero digit.\nOtherwise (if leading zeros count is greater), replaces the trailing zeros in that row with the value of the last non-zero digit.\nIf a row contains only zeros, it remains unchanged.\n\"\"\"\n\ndef find_first_non_zero_row(row):\n    \"\"\"\n    Finds the value and index of the first non-zero element in a 1D array (row).\n\n    Args:\n        row: A 1D NumPy array.\n\n    Returns:\n        A tuple (value, index) of the first non-zero element.\n        Returns (None, -1) if all elements are zero or the row is empty.\n    \"\"\"\n    non_zero_indices = np.nonzero(row)[0] # Get indices of non-zero elements\n    if non_zero_indices.size > 0:\n        first_idx = non_zero_indices[0]\n        first_val = row[first_idx]\n        return first_val, first_idx\n    else:\n        return None, -1 # All zeros or empty\n\ndef find_last_non_zero_row(row):\n    \"\"\"\n    Finds the value and index of the last non-zero element in a 1D array (row).\n\n    Args:\n        row: A 1D NumPy array.\n\n    Returns:\n        A tuple (value, index) of the last non-zero element.\n        Returns (None, -1) if all elements are zero or the row is empty.\n    \"\"\"\n    non_zero_indices = np.nonzero(row)[0] # Get indices of non-zero elements\n    if non_zero_indices.size > 0:\n        last_idx = non_zero_indices[-1]\n        last_val = row[last_idx]\n        return last_val, last_idx\n    else:\n        return None, -1 # All zeros or empty\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the transformation rule row-by-row to the input grid.\n\n    Args:\n        input_grid: The input 2D NumPy array.\n\n    Returns:\n        The transformed 2D NumPy array.\n    \"\"\"\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n    num_rows, num_cols = input_grid.shape\n\n    # Iterate through each row\n    for r in range(num_rows):\n        current_row = input_grid[r, :]\n\n        # Find the first non-zero digit and its index for the current row\n        first_val, first_idx = find_first_non_zero_row(current_row)\n\n        # If the row is all zeros, skip to the next row\n        if first_val is None:\n            continue\n\n        # Find the last non-zero digit and its index for the current row\n        # (We know there's at least one non-zero if first_val wasn't None)\n        last_val, last_idx = find_last_non_zero_row(current_row)\n\n        # Calculate the number of leading zeros\n        num_left_zeros = first_idx\n\n        # Calculate the number of trailing zeros\n        num_right_zeros = (num_cols - 1) - last_idx\n\n        # Compare the number of leading and trailing zeros\n        if num_left_zeros <= num_right_zeros:\n            # Fill leading zeros in the output grid's row with the first non-zero value\n            output_grid[r, :first_idx] = first_val\n        else:\n            # Fill trailing zeros in the output grid's row with the last non-zero value\n            output_grid[r, last_idx + 1:] = last_val\n\n    # Return the modified grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8099,
    "candidates_token_count": 977,
    "total_token_count": 9076,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.92607,
  "retries": 1
}