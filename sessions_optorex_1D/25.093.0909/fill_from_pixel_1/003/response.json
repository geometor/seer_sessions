{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nIdentifies the first and last non-zero digits in a sequence (list or NumPy array) of 12 digits.\nCounts the number of leading zeros (before the first non-zero) and trailing zeros (after the last non-zero).\nIf the count of leading zeros is less than or equal to the count of trailing zeros, replace the leading zeros with the value of the first non-zero digit.\nOtherwise, replace the trailing zeros with the value of the last non-zero digit.\nIf the sequence contains only zeros, return it unchanged.\n\"\"\"\n\ndef find_first_non_zero(seq):\n    \"\"\"\n    Finds the value and index of the first non-zero element in a sequence.\n\n    Args:\n        seq: A list or NumPy array of numbers.\n\n    Returns:\n        A tuple (value, index) of the first non-zero element.\n        Returns (None, -1) if all elements are zero or the sequence is empty.\n    \"\"\"\n    for i, val in enumerate(seq):\n        if val != 0:\n            return val, i\n    return None, -1 # Return None and -1 if all zeros or empty\n\ndef find_last_non_zero(seq):\n    \"\"\"\n    Finds the value and index of the last non-zero element in a sequence.\n\n    Args:\n        seq: A list or NumPy array of numbers.\n\n    Returns:\n        A tuple (value, index) of the last non-zero element.\n        Returns (None, -1) if all elements are zero or the sequence is empty.\n    \"\"\"\n    last_val = None\n    last_idx = -1\n    for i, val in enumerate(seq):\n        if val != 0:\n            last_val = val\n            last_idx = i\n    return last_val, last_idx\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the transformation rule to the input sequence (NumPy array).\n\n    Args:\n        input_grid: A NumPy array representing the sequence of 12 digits.\n\n    Returns:\n        A NumPy array representing the transformed sequence.\n    \"\"\"\n    # Determine the length of the sequence\n    n = len(input_grid)\n    if n == 0:\n        return input_grid # Handle empty input\n\n    # Find the first non-zero digit and its index\n    first_val, first_idx = find_first_non_zero(input_grid)\n\n    # Handle the case where the input is all zeros\n    if first_val is None:\n        return input_grid # Return unchanged if all zeros\n\n    # Find the last non-zero digit and its index\n    # (We know there's at least one non-zero element if first_val is not None)\n    last_val, last_idx = find_last_non_zero(input_grid)\n\n    # Calculate the number of leading zeros\n    num_left_zeros = first_idx\n\n    # Calculate the number of trailing zeros\n    # Ensure n-1 calculation is correct for indexing\n    num_right_zeros = (n - 1) - last_idx\n\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n\n    # Compare the number of leading and trailing zeros\n    if num_left_zeros <= num_right_zeros:\n        # Fill leading zeros with the first non-zero value\n        # Loop from index 0 up to (but not including) first_idx\n        for i in range(first_idx):\n            output_grid[i] = first_val\n    else:\n        # Fill trailing zeros with the last non-zero value\n        # Loop from index last_idx + 1 up to (but not including) n\n        for i in range(last_idx + 1, n):\n            output_grid[i] = last_val\n\n    # Return the modified grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6430,
    "candidates_token_count": 901,
    "total_token_count": 7331,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.407085,
  "retries": 1
}