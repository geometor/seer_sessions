objects:
  - name: input_sequence
    type: list of integers (0-9)
    description: The original sequence provided as input. Used for checks.
  - name: output_sequence
    type: list of integers (0-9)
    description: The sequence being modified, initialized as a copy of input_sequence.
  - name: element
    type: integer
    properties:
      - value: The digit (0-9)
      - index: The position (0-based) within the sequence.
  - name: singular_non_zero_element
    type: element
    description: An element in the input_sequence that meets specific criteria.
    properties:
      - value: Must be non-zero.
      - index: Its position in the sequence.
    constraints:
      - Is the first element OR the element at index-1 has a different value.
      - AND Is the last element OR the element at index+1 has a different value.
  - name: original_zero_element
    type: element
    description: An element in the input_sequence whose value is 0.

actions:
  - name: initialize_output
    description: Create a separate copy of the input_sequence to serve as the initial output_sequence.
  - name: identify_singular_elements
    input: input_sequence
    output: list of indices corresponding to singular_non_zero_elements.
    description: Iterate through the input_sequence to find all elements meeting the singular_non_zero_element criteria.
  - name: spread_value
    input:
      - index_of_singular: The index of a singular_non_zero_element.
      - input_sequence: The original sequence (for checking neighbours).
      - output_sequence: The sequence to be modified.
    description: For a given singular element, modify adjacent original_zero_elements in the output_sequence.
    steps:
      - Get the value (V) of the singular element from input_sequence.
      - **Spread Left:** Starting from index_of_singular - 1, move leftwards. If the element at the current index `j` in input_sequence is 0, set output_sequence[j] = V. Continue until index < 0 or input_sequence[j] is non-zero.
      - **Spread Right:** Starting from index_of_singular + 1, move rightwards. If the element at the current index `k` in input_sequence is 0, set output_sequence[k] = V. Continue until index >= sequence_length or input_sequence[k] is non-zero.

relationships:
  - type: adjacency
    description: Elements at index `i-1` and `i+1` are adjacent to the element at index `i`.
  - type: boundary
    description: The start (index 0) and end (index length-1) of the sequence.
  - type: source_target
    description: Checks are performed on the input_sequence, modifications are applied to the output_sequence.