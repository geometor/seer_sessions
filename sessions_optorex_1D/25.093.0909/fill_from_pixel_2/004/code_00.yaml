objects:
  - input_grid:
      type: list or array # Input might be numpy array
      contains: integers (0-9)
  - output_grid:
      type: list or array # Output format should match input expectation
      contains: integers (0-9)
      derivation: copy of input_grid, potentially modified
  - element:
      type: integer
      value_range: 0-9
  - zero_element:
      type: element
      property: value == 0
  - non_zero_element:
      type: element
      property: value != 0
      attributes: [value, index]
  - non_zero_sequence:
      type: ordered list
      contains: non_zero_element(s)
      relation: extracted from input_grid based on non-zero value
      properties: [count]
  - leading_zeros:
      type: sublist or subarray
      location: start of input_grid, up to the index of the first non_zero_element
      contains_only: zero_element
  - trailing_zeros:
      type: sublist or subarray
      location: end of input_grid, from the index after the last non_zero_element
      contains_only: zero_element
  - first_non_zero:
      type: non_zero_element
      relation: element at index 0 of non_zero_sequence (if sequence is not empty)
  - second_non_zero:
      type: non_zero_element
      relation: element at index 1 of non_zero_sequence (if count >= 2)
  - last_non_zero:
      type: non_zero_element
      relation: element at index -1 of non_zero_sequence (if sequence is not empty)
  - second_last_non_zero:
      type: non_zero_element
      relation: element at index -2 of non_zero_sequence (if count >= 2)

actions:
  - copy_input:
      input: input_grid
      output: output_grid (initial state)
  - find_non_zeros:
      input: input_grid
      output: non_zero_sequence
  - check_fill_condition:
      inputs: two non_zero_elements (e.g., first and second; last and second-last)
      condition: values are not equal OR only one non_zero_element exists in total
      output: boolean (should fill or not)
  - fill_zeros:
      target: section of output_grid (leading_zeros or trailing_zeros)
      condition: corresponding check_fill_condition is true
      value: value of the adjacent non_zero_element (first_non_zero or last_non_zero)
      effect: modifies output_grid by replacing zero_elements with the specified value

relationships:
  - conditional_fill_left: leading_zeros in output_grid are filled with first_non_zero.value if (count(non_zero_sequence) == 1) OR (first_non_zero.value != second_non_zero.value).
  - conditional_fill_right: trailing_zeros in output_grid are filled with last_non_zero.value if (count(non_zero_sequence) == 1) OR (last_non_zero.value != second_last_non_zero.value).