Task: Rearrange sequences containing the digit '2'.

Input_Format: An iterable (list, array, etc.) of single-digit integers.

Output_Format: A space-separated string of single-digit integers representing the transformed sequence.

Objects:
  - Sequence: The list of input digits.
  - Marker: The unique digit '2'.
  - Zero Sequence: A contiguous sub-sequence containing only the digit '0'.
  - Non-Zero Block: A contiguous sub-sequence of identical digits `d` where `d > 0`.

Relationships:
  - Adjacency (Pattern): The core patterns involve the Marker ('2'), a Zero Sequence, and a Non-Zero Block appearing contiguously in one of two orders:
    1. Left Pattern: `Non-Zero Block` immediately followed by `Zero Sequence` immediately followed by `Marker`.
    2. Right Pattern: `Marker` immediately followed by `Zero Sequence` immediately followed by `Non-Zero Block`.

Actions:
  - Find Marker: Locate the index of the '2' digit.
  - Scan Left: Check if the Left Pattern exists immediately to the left of the Marker's position.
  - Scan Right: Check if the Right Pattern exists immediately to the right of the Marker's position.
  - Identify Components: If a pattern is found, identify the specific `Non-Zero Block` and `Zero Sequence` involved.
  - Reconstruct: Create the output sequence by moving the identified `Zero Sequence`.
    - For Left Pattern: Move the `Zero Sequence` to the position immediately *before* the identified `Non-Zero Block`.
    - For Right Pattern: Move the `Zero Sequence` to the position immediately *after* the identified `Non-Zero Block`.

Priority:
  - The Left Pattern check takes precedence. If the Left Pattern is found and the sequence is reconstructed, the process terminates.
  - The Right Pattern is checked only if the Left Pattern was not found.

Conditionality:
  - Transformation occurs *only* if either the Left Pattern or the Right Pattern is found.
  - If neither pattern is present, the original sequence is returned unchanged.