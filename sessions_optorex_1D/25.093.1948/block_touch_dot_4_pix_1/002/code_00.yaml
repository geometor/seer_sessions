Objects:
  - Sequence:
      Type: List of Integers
      Properties:
        - Length: 12
        - Elements: Single digits (0-9)
  - Digit:
      Properties:
        - Value (0-9)
        - Position (index in the Sequence)
      Types:
        - ZeroDigit (Value is 0)
        - NonZeroDigit (Value is 1-9)
  - PatternInstance:
      Represents: The specific structure targeted by the transformation.
      Components:
        - AnchorDigit: The first NonZeroDigit found when scanning left-to-right that is immediately followed by one or more ZeroDigits.
        - PrecedingZeros: A contiguous sub-sequence of one or more ZeroDigits immediately following the AnchorDigit.
        - MovingBlock: A contiguous sub-sequence of identical NonZeroDigits immediately following the PrecedingZeros.
      Properties:
        - AnchorIndex: Position of the AnchorDigit.
        - ZeroStartIndex: Position of the first PrecedingZero.
        - ZeroCount: Number of digits in PrecedingZeros.
        - BlockStartIndex: Position of the first digit in MovingBlock.
        - BlockLength: Number of digits in MovingBlock.
        - BlockValue: The repeated digit value in MovingBlock.
        - IsFound: Boolean indicating if a valid PatternInstance exists in the Sequence.

Relationships:
  - A PatternInstance is searched for within the Sequence, starting from the left.
  - Only the *first* valid PatternInstance found triggers the action.
  - An AnchorDigit *immediately precedes* the PrecedingZeros.
  - PrecedingZeros *immediately precede* the MovingBlock.

Action:
  - Identify: Scan the Sequence left-to-right to find the first PatternInstance.
  - Check Existence: If no PatternInstance is found, the Sequence remains unchanged.
  - Calculate Shift: If a PatternInstance is found, calculate `shift_amount = min(ZeroCount, BlockLength)`.
  - Conditional Execution:
      - If `shift_amount` is 0, the Sequence remains unchanged.
      - If `shift_amount` > 0:
          1. Define segments of the original Sequence:
             - `prefix`: Elements before the zeros that will be removed (indices `0` to `BlockStartIndex - shift_amount - 1`).
             - `block`: The MovingBlock elements (repeated `BlockValue`, `BlockLength` times).
             - `suffix`: Elements after the original MovingBlock (indices `BlockStartIndex + BlockLength` to end).
             - `moved_zeros`: Zeros to append (repeated `0`, `shift_amount` times).
          2. Construct the new Sequence by concatenating: `prefix + block + suffix + moved_zeros`.
  - Format Output: Convert the final Sequence (either original or transformed) into a space-separated string.