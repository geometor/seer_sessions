{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransforms a 2D grid of single-digit integers by applying a rule independently to each row.\nThe rule operates on contiguous horizontal blocks (runs) of identical non-zero digits within a row.\nIf a run of a non-zero digit has a length of 3 or more, the first and last digits\nof the run are kept, and all digits in between are replaced with 0.\nRuns of non-zero digits with length 1 or 2, and all runs of 0s, remain unchanged.\nThe overall dimensions of the grid are preserved.\n\"\"\"\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the transformation rule row-wise to the input 2D NumPy array grid.\n\n    Args:\n        input_grid: A 2D NumPy array of single-digit integers.\n\n    Returns:\n        A 2D NumPy array containing the transformed grid.\n    \"\"\"\n    # Initialize the output grid as a copy of the input grid\n    output_grid = np.copy(input_grid)\n    num_rows, num_cols = input_grid.shape\n\n    # Iterate through each row of the grid\n    for r in range(num_rows):\n        # Process the current row\n        row = input_grid[r]\n        # Use a list to build the transformed row elements\n        output_row_elements = []\n        i = 0\n        # Iterate through the columns of the current row to find blocks\n        while i < num_cols:\n            # Get the current digit value\n            current_digit = row[i]\n            # Find the end index j of the current block of identical digits\n            j = i + 1\n            while j < num_cols and row[j] == current_digit:\n                j += 1\n\n            # Calculate the length of the block\n            block_length = j - i\n\n            # Apply transformation logic based on the digit and block length\n            if current_digit == 0:\n                # Keep blocks of 0s as they are\n                output_row_elements.extend([0] * block_length)\n            else:\n                # Handle non-zero blocks\n                if block_length < 3:\n                    # Keep short blocks (length 1 or 2) as they are\n                    output_row_elements.extend([current_digit] * block_length)\n                else:\n                    # Modify blocks of length 3 or more\n                    # Keep the first digit\n                    output_row_elements.append(current_digit)\n                    # Add 0s in the middle\n                    output_row_elements.extend([0] * (block_length - 2))\n                    # Keep the last digit\n                    output_row_elements.append(current_digit)\n\n            # Move the index to the start of the next block\n            i = j\n\n        # Update the corresponding row in the output grid\n        # Ensure the generated row has the correct length (should match num_cols)\n        if len(output_row_elements) == num_cols:\n             output_grid[r, :] = np.array(output_row_elements, dtype=int)\n        else:\n             # This case should ideally not happen if logic is correct, but adding safety print\n             print(f\"Warning: Row {r} processing resulted in unexpected length {len(output_row_elements)}, expected {num_cols}. Input row: {row}\")\n             # Fallback: keep original row if something went wrong\n             output_grid[r, :] = input_grid[r, :]\n\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5714,
    "candidates_token_count": 1345,
    "total_token_count": 7059,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.175052,
  "retries": 1
}