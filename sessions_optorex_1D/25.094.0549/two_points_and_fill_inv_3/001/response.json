{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\n\ndef find_groups(sequence):\n    \"\"\"\n    Identifies contiguous groups of identical non-zero numbers in a sequence.\n\n    Args:\n        sequence: A list of integers.\n\n    Returns:\n        A list of dictionaries, where each dictionary represents a group\n        and contains 'value', 'start_index', 'end_index', and 'length'.\n    \"\"\"\n    groups = []\n    i = 0\n    n = len(sequence)\n    while i < n:\n        if sequence[i] != 0:\n            value = sequence[i]\n            start_index = i\n            # Find the end of the group\n            j = i + 1\n            while j < n and sequence[j] == value:\n                j += 1\n            end_index = j - 1\n            length = end_index - start_index + 1\n            groups.append({\n                'value': value,\n                'start_index': start_index,\n                'end_index': end_index,\n                'length': length\n            })\n            # Move the main index past this group\n            i = end_index + 1\n        else:\n            # Move to the next element if it's zero\n            i += 1\n    return groups\n\ndef transform(input_sequence):\n    \"\"\"\n    Transforms the input sequence based on identified groups of non-zero numbers.\n    If a contiguous group of the same non-zero number has a length greater than 2,\n    only the first and last elements of the group are kept, and the elements\n    in between are replaced with 0. Groups of length 2 or less remain unchanged.\n    Zeros outside of these groups also remain unchanged.\n    \"\"\"\n    \n    # Initialize the output sequence as a copy of the input sequence.\n    # Using list() creates a shallow copy, which is sufficient here as elements are integers.\n    output_sequence = list(input_sequence) \n    \n    # Iterate through the input sequence to identify all contiguous groups \n    # of identical non-zero numbers.\n    groups = find_groups(input_sequence)\n    \n    # For each identified group:\n    for group in groups:\n        # Check if the length of the group is greater than 2.\n        if group['length'] > 2:\n            # If the length is greater than 2, then iterate through the indices \n            # of the output sequence starting from the index *after* the group's \n            # start index up to the index *before* the group's end index.\n            # Set the value at each of these indices in the output sequence to 0.\n            # range(start, stop) goes up to stop-1, so range(start+1, end) is correct.\n            for i in range(group['start_index'] + 1, group['end_index']):\n                output_sequence[i] = 0\n                \n    # Return the final output sequence.\n    return output_sequence\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1644,
    "candidates_token_count": 1281,
    "total_token_count": 2925,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.680083,
  "retries": 1
}