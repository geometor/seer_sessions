{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms a 2D NumPy array (grid) of integers. The transformation is applied \nindependently to each row. Within each row, it identifies contiguous horizontal \ngroups of identical non-zero numbers. If a group's length is greater than 2, \nonly the first and last elements of the group are kept in their original \npositions in the output grid's row, and the elements between them are set to 0. \nGroups of length 2 or less, and zeros outside of these groups, remain unchanged.\n\"\"\"\n\nimport numpy as np\n\ndef find_groups_in_row(row: np.ndarray):\n    \"\"\"\n    Identifies contiguous groups of identical non-zero numbers in a 1D NumPy array (row).\n\n    Args:\n        row: A 1D NumPy array of integers representing a single row.\n\n    Returns:\n        A list of dictionaries, where each dictionary represents a group\n        and contains 'value', 'start_index', 'end_index', and 'length'.\n    \"\"\"\n    groups = []\n    i = 0\n    n = len(row)\n    while i < n:\n        # Check if the current element is non-zero\n        if row[i] != 0:\n            value = row[i]\n            start_index = i\n            \n            # Find the end of the contiguous group of the same value\n            j = i + 1\n            while j < n and row[j] == value:\n                j += 1\n            end_index = j - 1 # Inclusive index of the last element\n            length = end_index - start_index + 1\n            \n            # Record the found group\n            groups.append({\n                'value': value,\n                'start_index': start_index,\n                'end_index': end_index,\n                'length': length\n            })\n            \n            # Move the main index past this group\n            i = end_index + 1\n        else:\n            # Move to the next element if it's zero\n            i += 1\n    return groups\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the row-wise transformation rule to the input 2D NumPy array.\n\n    Args:\n        input_grid: A 2D NumPy array of integers.\n\n    Returns:\n        A 2D NumPy array with the transformation applied to each row.\n    \"\"\"\n    # Initialize the output_grid as a copy of the input grid\n    output_grid = np.copy(input_grid)\n    \n    # Get the number of rows in the grid\n    num_rows = input_grid.shape[0]\n    \n    # Iterate through each row of the input grid\n    for r in range(num_rows):\n        # Extract the current row\n        current_row = input_grid[r, :]\n        \n        # Find all contiguous groups of identical non-zero numbers in this row\n        groups_in_row = find_groups_in_row(current_row)\n        \n        # Iterate through each identified group in the current row\n        for group in groups_in_row:\n            # Check if the length of the group is greater than 2\n            if group['length'] > 2:\n                # If the length is greater than 2, calculate the indices to modify\n                # Column index immediately after the start of the group\n                start_modify_col = group['start_index'] + 1\n                # Column index of the last element in the group (exclusive for slicing)\n                end_modify_col = group['end_index'] \n                \n                # Ensure there are elements between the first and last to modify\n                if start_modify_col < end_modify_col:\n                    # Set the elements in the corresponding row of the output grid \n                    # between the first and last element of the group to 0\n                    output_grid[r, start_modify_col:end_modify_col] = 0\n                    \n    # Return the final modified grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5387,
    "candidates_token_count": 1236,
    "total_token_count": 6623,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.568283,
  "retries": 1
}