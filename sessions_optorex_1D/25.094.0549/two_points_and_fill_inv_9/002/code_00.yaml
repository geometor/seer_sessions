task_description: Modifies contiguous sequences of identical non-zero digits within a 1D array of integers.
data_format:
  input: A 1D sequence of single-digit integers (represented as space-separated string, likely processed as a 1D NumPy array or Python list).
  output: A 1D sequence of single-digit integers in the same format as the input.
elements:
  - type: array_1d
    description: A one-dimensional sequence of single-digit integers.
  - type: digit
    description: Integers from 0 to 9. '0' often acts as a background/separator.
  - type: sequence
    description: A contiguous run (sub-segment) of identical non-zero digits within the 1D array.
    properties:
      - value: The non-zero digit (e.g., 2, 6, 5, 1).
      - length: The number of times the digit repeats consecutively (L).
      - start_index: The index of the first digit in the sequence.
      - end_index: The index of the last digit in the sequence.
objects:
  - identifier: input_array
    type: array_1d
    description: The initial state before transformation.
  - identifier: output_array
    type: array_1d
    description: The final state after transformation. Derived from input_array.
relationships:
  - type: conditional_modification
    description: The output array is derived from the input array by conditionally modifying identified non-zero sequences based on their length.
actions:
  - name: identify_sequences
    description: Iterate through the input_array to find all contiguous sequences of identical non-zero digits. Determine their value, length, start_index, and end_index.
  - name: process_sequence
    description: For each identified sequence, apply a rule based on its length (L).
    rule_1:
      condition: L >= 3
      effect: In the output_array, keep the elements at start_index and end_index, but set all elements from index `start_index + 1` to `end_index - 1` to 0.
    rule_2:
      condition: L < 3
      effect: Keep the sequence unchanged in the output_array (elements from start_index to end_index remain the same as in the input_array).
runtime_issue_context:
  error: "The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()"
  likely_cause: The execution environment processes input as NumPy arrays. A comparison like `value != 0` might be performed on an array slice instead of a scalar if the input is mistakenly treated as 2D, or if array indexing behaves unexpectedly. The coder needs to ensure compatibility with NumPy array operations or ensure data is converted to a standard list if appropriate.