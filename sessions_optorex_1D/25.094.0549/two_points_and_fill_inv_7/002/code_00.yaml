task_type: sequence_transformation
input_data_format: NumPy array (1D)
output_data_format: NumPy array or list (consistent with input/framework)
input_element_type: integer
output_element_type: integer
sequence_length: fixed (12 in examples)
objects:
  - sequence: A 1D NumPy array of integers representing the input or output state.
  - block: A contiguous sub-sequence within the array consisting of identical non-zero integers.
  - zero: The integer 0, acting as a boundary between blocks or padding.
properties:
  - block:
      - value: The non-zero integer comprising the block.
      - start_index: The 0-based index of the first element of the block in the sequence.
      - end_index: The 0-based index of the last element of the block in the sequence.
      - length: The number of elements in the block (calculated as end_index - start_index + 1).
relationships:
  - Blocks are contiguous sequences of the same non-zero value.
  - Blocks are delimited by zeros or the boundaries of the sequence.
  - The output sequence structure (length, positions of original zeros) mirrors the input, except for modifications within blocks.
actions:
  - input_validation: Check if the input sequence is empty using a method compatible with NumPy arrays (e.g., checking `len`).
  - copy_input: Create a modifiable copy of the input sequence to initialize the output sequence.
  - identify_blocks: Scan the sequence to find all contiguous blocks of identical non-zero numbers, recording their value, start index, and end index.
  - filter_blocks: Select blocks based on their properties (specifically, length > 2).
  - modify_block_middle: For selected blocks (length > 2), iterate through the indices strictly between the start and end index and set the corresponding elements in the output sequence to 0.
  - preserve_elements: Elements not part of the middle section of a block longer than 2 (i.e., original zeros, elements of blocks with length 1 or 2, and the first/last elements of blocks longer than 2) remain unchanged from the initial copied input.