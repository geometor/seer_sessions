{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\n\ndef find_blocks(sequence):\n    \"\"\"\n    Identifies contiguous blocks of identical non-zero numbers in a sequence.\n\n    Args:\n        sequence: A list of integers.\n\n    Returns:\n        A list of tuples, where each tuple represents a block:\n        (value, start_index, end_index).\n    \"\"\"\n    blocks = []\n    if not sequence:\n        return blocks\n\n    start_index = None\n    current_value = None\n\n    for i, value in enumerate(sequence):\n        if value != 0:\n            if start_index is None:\n                # Start of a potential new block\n                start_index = i\n                current_value = value\n            elif value != current_value:\n                # End of the previous block, start of a new one\n                blocks.append((current_value, start_index, i - 1))\n                start_index = i\n                current_value = value\n        elif start_index is not None:\n            # End of the current block due to encountering a zero\n            blocks.append((current_value, start_index, i - 1))\n            start_index = None\n            current_value = None\n\n    # Handle the case where a block extends to the end of the sequence\n    if start_index is not None:\n        blocks.append((current_value, start_index, len(sequence) - 1))\n\n    return blocks\n\ndef transform(input_sequence):\n    \"\"\"\n    Transforms a sequence of integers by preserving only the first and last\n    elements of contiguous blocks of identical non-zero numbers longer than \n    two elements, changing the middle elements of such blocks to zero. \n    Zeros and blocks of length 1 or 2 remain unchanged.\n    \"\"\"\n    \n    # Initialize the output sequence as a copy of the input sequence.\n    # We modify this copy directly.\n    output_sequence = copy.deepcopy(input_sequence)\n\n    # Iterate through the input sequence to identify contiguous blocks\n    # of identical non-zero numbers.\n    blocks = find_blocks(input_sequence)\n\n    # For each identified block:\n    for value, start_index, end_index in blocks:\n        # Calculate block length\n        block_length = end_index - start_index + 1\n        \n        # a. If the block length is greater than 2:\n        if block_length > 2:\n            # i. Iterate from the index immediately after the start index \n            #    up to (but not including) the end index.\n            for i in range(start_index + 1, end_index):\n                # ii. Set the value at each of these intermediate indices \n                #     in the *output* sequence to 0.\n                output_sequence[i] = 0\n                \n    # Return the modified output sequence. \n    # (Zeros and blocks of length 1 or 2 were already correct \n    # due to initialization and the conditional modification).\n    return output_sequence\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1601,
    "candidates_token_count": 948,
    "total_token_count": 2549,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.214086,
  "retries": 1
}