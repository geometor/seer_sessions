task_type: sequence_transformation
input_element_type: integer (within a sequence)
output_element_type: integer (within a sequence)
dimensionality: Assumed 1D sequence for processing, potentially provided as 2D (1xN) requiring extraction.
sequence_length: fixed (12 in examples)
objects:
  - sequence: A 1D list or NumPy array of integers.
  - block: A contiguous sub-sequence within the 1D sequence consisting of identical, non-zero integers.
  - zero: The integer 0, acting as a separator or unchanged element.
properties:
  - block:
      - value: The non-zero integer comprising the block.
      - start_index: The 0-based index of the first element of the block in the 1D sequence.
      - end_index: The 0-based index of the last element of the block in the 1D sequence.
      - length: The number of elements in the block (end_index - start_index + 1).
relationships:
  - Blocks are contiguous segments within the main 1D sequence.
  - Blocks are separated by zeros or sequence boundaries.
  - The output sequence is derived from the input sequence by modifying elements within certain blocks.
actions:
  - prepare_input: Ensure the input is treated as a 1D sequence (e.g., by selecting the first row if input is 2D 1xN).
  - identify_blocks: Iterate through the 1D sequence to find all contiguous blocks of identical non-zero numbers, recording their value, start index, and end index.
  - process_blocks: For each identified block:
      - check_length: Determine the block's length.
      - modify_if_long: If the block length is strictly greater than 2:
          - zero_out_middle: Replace the elements in the sequence *between* the start and end indices (i.e., from index `start_index + 1` to `end_index - 1`) with the integer 0.
  - preserve_others: Elements originally being 0, and elements within blocks of length 1 or 2, remain unchanged.