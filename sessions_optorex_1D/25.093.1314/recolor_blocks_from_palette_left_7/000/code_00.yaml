Input:
  type: string
  format: sequence of 12 space-separated digits (0-9)
  structure:
    - data_sequence: list of first 10 digits
    - control_digits: list of last 2 digits [c1, c2]

Output:
  type: string
  format: sequence of 12 space-separated digits (0-9)
  relation_to_input: same length, modified based on transformation rule

Transformation_Elements:
  - target_digit (T):
      definition: Most frequent non-zero digit in the input data_sequence.
      source: input data_sequence
  - other_digits (O):
      definition: Set of unique non-zero digits in the input data_sequence, excluding T.
      source: input data_sequence
  - replacement_values (R):
      definition: Ordered list constructed from O (e.g., sorted) followed by non-zero control digits.
      construction: R = sorted(list(O)) + [c1 if c1 != 0] + [c2 if c2 != 0]
      source: O, control_digits
  - target_groups:
      definition: Consecutive sequences of T within the data_sequence.
      source: input data_sequence

Actions:
  1. Identify T from the data_sequence.
  2. Identify O from the data_sequence.
  3. Construct R using O and control_digits [c1, c2].
  4. Iterate through the data_sequence:
     - Identify the k-th target_group.
     - Select the k-th replacement value from R (cycling if necessary).
     - Replace all digits within the k-th target_group with the selected replacement value.
  5. Keep non-target digits in the data_sequence unchanged.
  6. Keep control_digits unchanged.
  7. Format the resulting 12 digits as a space-separated string.

Relationships:
  - The output data_sequence depends on the input data_sequence, T, and R.
  - The output control_digits are identical to the input control_digits.
  - T depends on the frequency of non-zero digits in the input data_sequence.
  - R depends on O, c1, and c2.