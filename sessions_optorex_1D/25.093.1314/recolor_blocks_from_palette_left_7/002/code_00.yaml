Input:
  type: list or array of integers
  length: 12
  structure:
    - data_sequence: list of first 10 integers
    - control_digits: list of last 2 integers [c1, c2]

Output:
  type: list or array of integers
  length: 12
  relation_to_input: same length, modified based on transformation rule

Transformation_Elements:
  - target_digit (T):
      definition: The non-zero digit with the highest frequency in the input data_sequence. In case of a tie in frequency, the smallest digit among the most frequent ones is chosen.
      source: input data_sequence
      value_type: integer or None (if data_sequence contains only zeros)
  - other_digits (O):
      definition: Sorted list of unique non-zero digits in the input data_sequence, excluding T.
      source: input data_sequence
      value_type: list of integers
  - replacement_values (R):
      definition: Ordered list constructed from O, followed by c1 (if c1 != 0), followed by c2 (if c2 != 0).
      construction: R = O + [c1 if c1 != 0] + [c2 if c2 != 0]
      source: O, control_digits
      value_type: list of integers
  - target_groups:
      definition: Contiguous sequences (groups) of T within the data_sequence.
      source: input data_sequence

Actions:
  1. Receive the input sequence of 12 integers.
  2. Separate the sequence into `data_sequence` (first 10) and `control_digits` [c1, c2] (last 2).
  3. Create a copy of the input sequence for modification (output_sequence).
  4. Identify T from the `data_sequence`. If no non-zero digits exist, T is None.
  5. If T is None, return the original input sequence.
  6. Identify O from the `data_sequence`.
  7. Construct R using O, c1, and c2.
  8. If R is empty, return the original input sequence (no replacements possible).
  9. Initialize a `replacement_cycle_index` to 0.
  10. Iterate through the `data_sequence` using an index `i` from 0 to 9.
  11. If `data_sequence[i]` equals T:
      a. Identify the full extent of the contiguous group of T starting at `i`. Let the group end at index `j`.
      b. Select the replacement value `rv = R[replacement_cycle_index % len(R)]`.
      c. Replace elements in `output_sequence` from index `i` to `j` (inclusive) with `rv`.
      d. Increment `replacement_cycle_index`.
      e. Set the loop index `i` to `j` to continue searching after the current group.
  12. Increment `i` to continue iteration.
  13. Return the modified `output_sequence`.

Relationships:
  - The first 10 elements of the output sequence depend on the first 10 elements of the input sequence, T, and R.
  - The last 2 elements of the output sequence are identical to the last 2 elements of the input sequence.
  - T depends on the frequency and values of non-zero digits in the input data_sequence.
  - R depends on O, c1, and c2.