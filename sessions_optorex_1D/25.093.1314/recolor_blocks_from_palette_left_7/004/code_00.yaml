Input:
  type: list
  format: list of 12 integers (0-9)
  structure:
    - data_sequence: list of first 10 integers
    - control_digits: list of last 2 integers [c1, c2]

Output:
  type: list
  format: list of 12 integers (0-9)
  relation_to_input: same length, modified based on transformation rule

Transformation_Elements:
  - target_digit (T):
      definition: >
        The non-zero digit that appears most frequently in the input data_sequence.
        In case of a tie in frequency, the smallest digit among the most frequent ones is chosen.
        If no non-zero digits exist in the data_sequence, there is no target_digit.
      source: input data_sequence
  - other_digits (O):
      definition: Set of unique non-zero digits in the input data_sequence, excluding T.
      source: input data_sequence
  - replacement_values (R):
      definition: Ordered list constructed from O followed by non-zero control digits.
      construction: R = sorted(list(O)) + [c1 if c1 != 0] + [c2 if c2 != 0]
      source: O, control_digits
  - target_groups:
      definition: Contiguous sequences (groups) of T within the data_sequence.
      source: input data_sequence

Derived_State:
  - output_list: A copy of the input list, modified during the process.
  - replacement_group_counter: An integer, initialized to 0, tracking the index for the next replacement value.

Actions:
  1. Receive the input list (12 integers).
  2. Create the output_list as a copy of the input list.
  3. Separate the input list into data_sequence (first 10) and control_digits (last 2).
  4. Identify T from the data_sequence based on frequency and tie-breaking rule (smallest).
  5. If T is not found (e.g., all zeros), return the original output_list.
  6. Identify O from the data_sequence (unique non-zero digits != T).
  7. Construct R using the sorted list of O, followed by c1 (if non-zero), then c2 (if non-zero).
  8. If R is empty, return the original output_list.
  9. Initialize replacement_group_counter = 0.
  10. Iterate through the data_sequence with index `i` from 0 to 9:
      a. Check if the digit `data_sequence[i]` is equal to T.
      b. If it is T:
          i.   Identify the start (`i`) and end (`j`) indices of the contiguous group of T's.
          ii.  Select the replacement value `rv = R[replacement_group_counter % len(R)]`.
          iii. For each index `k` from `i` to `j`, set `output_list[k] = rv`.
          iv.  Increment `replacement_group_counter`.
          v.   Set the main loop index `i` to `j` to continue iteration after the group.
      c. If it is not T, continue to the next index.
  11. Return the final output_list.

Relationships:
  - The output_list depends on the input data_sequence, T, and R.
  - The output control_digits are identical to the input control_digits unless T itself is one of the control digits (which isn't possible as T is from the first 10).
  - T depends on the frequency and values of non-zero digits in the input data_sequence.
  - R depends on O, c1, and c2.