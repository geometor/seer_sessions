Input:
  type: list
  format: list of 12 integers (0-9)
  structure:
    - main_sequence: list of first 10 integers
    - control_digits: list of last 2 integers [c1, c2]

Output:
  type: list
  format: list of 12 integers (0-9)
  relation_to_input: same length; main_sequence potentially modified, control_digits unchanged.

Derived_Elements:
  - target_digit (T):
      definition: The non-zero integer that appears most frequently in the `main_sequence`. In case of a tie in frequency, the smallest integer among the most frequent is chosen. Returns None if no non-zero digits exist.
      source: input `main_sequence`
      calculation: Frequency count of non-zero digits, identify max frequency, select smallest digit with max frequency.
  - other_digits (O):
      definition: Sorted list of unique non-zero integers present in the `main_sequence`, excluding the `target_digit`.
      source: input `main_sequence`, `target_digit`
  - replacement_values (R):
      definition: Ordered list constructed by concatenating `other_digits` with `c1` (if `c1` is non-zero) and then `c2` (if `c2` is non-zero).
      source: `other_digits`, `control_digits` [c1, c2]
  - target_groups:
      definition: Contiguous sub-sequences within the `main_sequence` consisting solely of the `target_digit`.
      source: input `main_sequence`, `target_digit`

Transformation_Actions:
  1. Initialize `output_list` as a copy of the `input_list`.
  2. Calculate `target_digit` (T) from `main_sequence`.
  3. If T is None, return `output_list` (no changes).
  4. Calculate `other_digits` (O) from `main_sequence` and T.
  5. Construct `replacement_values` (R) from O and `control_digits`.
  6. If R is empty, return `output_list` (no changes).
  7. Initialize `group_index` = 0 (tracks which replacement value to use).
  8. Iterate through `main_sequence` using index `i` from 0 to 9:
     a. If `main_sequence[i]` equals T:
        i. Identify the `start_index` (`i`) and `end_index` of the contiguous `target_group`.
        ii. Select `current_replacement` = `R[group_index % len(R)]`.
        iii. For each index `k` from `start_index` to `end_index`, set `output_list[k]` = `current_replacement`.
        iv. Increment `group_index`.
        v. Set `i` = `end_index` (to advance the loop past the processed group).
     b. Increment `i`.
  9. Return the final `output_list`.

Relationships:
  - The first 10 elements of `output_list` depend on `main_sequence`, T, and R.
  - The last 2 elements of `output_list` are identical to `control_digits`.
  - T depends on the frequency and values of non-zero digits in `main_sequence`.
  - R depends on O, c1, and c2.