task_elements:
  - type: sequence transformation
    description: Transforms a sequence of single-digit integers based on internal patterns and trailing digits.
format:
  - input: Space-separated string of single-digit integers.
  - output: Space-separated string of single-digit integers.
objects:
  - name: input_sequence
    properties:
      - digits: list of integers
      - length: integer (n)
  - name: output_sequence
    properties:
      - digits: list of integers
      - length: integer (n)
  - name: main_sequence
    description: The initial part of the input sequence, excluding the trailing 'k' parameter digits (input_sequence[:-k]).
  - name: parameter_digits
    description: The last 'k' digits of the input sequence (input_sequence[-k:]), used as replacement values.
    properties:
      - count: integer (k)
      - values: list of integers
  - name: target_digit
    description: The digit within the main_sequence designated for replacement.
    determination: >
      Most frequent non-zero digit in the main_sequence.
      If there is a tie in frequency, the smallest digit among the most frequent is chosen.
      If the main_sequence contains only zeros or is empty, there is no target_digit (None).
  - name: target_digit_blocks
    description: >
      Consecutive groups of the target_digit within the main_sequence.
      Blocks are separated by any digit that is *not* the target_digit (including 0).
    properties:
      - count: integer (number_of_blocks)
      - index: integer (1 to number_of_blocks)
determination_rule:
  - name: determine_k
    description: >
      Find the integer 'k' (number of parameter_digits) such that 'k' is equal to the
      'number_of_blocks' of the 'target_digit' found within the corresponding 'main_sequence' (input_sequence[:-k]).
    process: >
      Iterate potential values of 'k' downwards (e.g., from n//2 + 1 down to 1).
      For each 'k', determine the potential 'main_sequence', 'target_digit', and 'number_of_blocks'.
      The correct 'k' is the one where k == number_of_blocks.
actions:
  - name: parse_input
    input: input_string
    output: list of integers (input_sequence)
  - name: find_target_digit
    input: sequence (main_sequence)
    output: target_digit (integer or None)
  - name: count_target_blocks
    input: sequence (main_sequence), target_digit
    output: number_of_blocks (integer)
  - name: identify_parameters_and_main
    input: input_sequence, determined_k
    output: main_sequence, parameter_digits
  - name: replace_blocks
    input: main_sequence, target_digit, parameter_digits
    output: transformed_main_sequence
    logic: >
      Iterate through the main_sequence. Identify the start of each target_digit_block.
      Replace all occurrences of the target_digit within the i-th block with the i-th parameter_digit.
      Digits that are not the target_digit remain unchanged.
  - name: construct_output
    input: transformed_main_sequence, parameter_digits
    output: output_sequence (list of integers)
    logic: Concatenate the transformed_main_sequence and the original parameter_digits.
  - name: format_output
    input: output_sequence (list)
    output: output_string (space-separated string)
relationships:
  - The number of parameter_digits ('k') must equal the number of target_digit_blocks identified in the corresponding main_sequence.
  - Non-target digits in the main_sequence act as separators for target_digit_blocks and remain unchanged during the replacement step.
  - The final output sequence has the same length as the input sequence.
edge_cases:
  - If the input sequence contains only zeros, the output is identical to the input.
  - If the determination_rule for 'k' does not find a match (i.e., no k > 0 exists where k == number_of_blocks), the output should default to being identical to the input (fallback behavior).
  - If a valid 'k' is found, but the resulting main_sequence contains no non-zero digits (target_digit is None), no replacement occurs, and the output is the original main_sequence concatenated with the parameter_digits.