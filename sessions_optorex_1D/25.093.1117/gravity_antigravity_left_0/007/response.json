{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nSorts a NumPy array of digits (0, 1, 2) according to a custom order: \nelements with value 2 come first, followed by elements with value 0, \nfollowed by elements with value 1.\n\"\"\"\n\ndef custom_sort_key(digit):\n  \"\"\"\n  Defines the custom sorting order for use with sorted(): 2 < 0 < 1.\n  Maps input digits to comparable values that reflect the desired order.\n  Handles potential integer types from NumPy arrays.\n  \"\"\"\n  if digit == 2:\n    return 0 # 2 should come first\n  elif digit == 0:\n    return 1 # 0 should come second\n  elif digit == 1:\n    return 2 # 1 should come last\n  else:\n    # Assign a high value for unexpected inputs to place them last,\n    # although the problem constraints imply only 0, 1, 2 will be present.\n    return 3\n\ndef transform(input_array: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Sorts the input NumPy array based on the custom order 2 -> 0 -> 1.\n\n    Args:\n        input_array: A 1D NumPy array containing integers (0, 1, or 2).\n\n    Returns:\n        A 1D NumPy array containing the sorted integers according to the custom rule.\n    \"\"\"\n    # 1. Receive the input NumPy array. No parsing needed.\n\n    # 2. Sort the elements of the array using the custom sorting key.\n    # The sorted() function works on NumPy arrays (iterables) and returns a standard Python list.\n    # The custom_sort_key function ensures 2s are treated as smallest, then 0s, then 1s.\n    sorted_list = sorted(input_array, key=custom_sort_key)\n\n    # 3. Convert the sorted list back to a NumPy array.\n    # Ensure the output type is a NumPy array and preserve the original data type if possible.\n    output_array = np.array(sorted_list, dtype=input_array.dtype)\n\n    # 4. Return the resulting sorted NumPy array.\n    return output_array\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6129,
    "candidates_token_count": 505,
    "total_token_count": 6634,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.24903,
  "retries": 1
}