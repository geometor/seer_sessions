{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nSorts a NumPy array of digits (0, 1, 2) according to a custom order: \nelements with value 2 come first, followed by elements with value 0, \nfollowed by elements with value 1.\n\"\"\"\n\nimport numpy as np\n\ndef custom_sort_key(digit):\n  \"\"\"\n  Defines the custom sorting order: 2 < 0 < 1.\n  Maps digits to sortable values for use with sorted().\n  \"\"\"\n  if digit == 2:\n    return 0 # 2 comes first\n  elif digit == 0:\n    return 1 # 0 comes second\n  elif digit == 1:\n    return 2 # 1 comes last\n  else:\n    # Assign a high value for unexpected inputs to place them last\n    return 3 \n\ndef transform(input_array):\n  \"\"\"\n  Sorts the input NumPy array based on the custom order 2 -> 0 -> 1.\n\n  Args:\n      input_array: A NumPy array containing integers (expected: 0, 1, or 2).\n\n  Returns:\n      A NumPy array containing the sorted integers according to the custom rule. \n      (Note: Returning a list might also be acceptable depending on the framework,\n       but returning a NumPy array is generally safer if the input is NumPy).\n  \"\"\"\n  # 1. Receive the input NumPy array (no parsing needed like before)\n  # The input_array is already in a usable format (e.g., list or NumPy array)\n\n  # 2. Sort the elements using the custom key\n  # The sorted() function works on iterables like NumPy arrays and lists.\n  # It returns a standard Python list.\n  sorted_list = sorted(input_array, key=custom_sort_key)\n\n  # 3. Convert the sorted list back to a NumPy array (optional but often preferred)\n  # Ensure the output type matches the expected format (likely NumPy array).\n  output_array = np.array(sorted_list, dtype=input_array.dtype) \n\n  # 4. Return the resulting sorted array\n  return output_array\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3604,
    "candidates_token_count": 484,
    "total_token_count": 4088,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.754073,
  "retries": 1
}