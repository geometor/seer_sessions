{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport collections\n\n\"\"\"\nSorts a sequence of digits (0, 1, 2) according to a custom order: 2s first, then 0s, then 1s.\nThe input is a string of space-separated digits.\nThe output is a string of space-separated digits sorted according to the custom rule.\n\"\"\"\n\n# No external libraries needed beyond standard collections\n\ndef custom_sort_key(digit):\n  \"\"\"\n  Defines the custom sorting order: 2 < 0 < 1.\n  Maps digits to sortable values.\n  \"\"\"\n  if digit == 2:\n    return 0 # 2 comes first\n  elif digit == 0:\n    return 1 # 0 comes second\n  elif digit == 1:\n    return 2 # 1 comes last\n  else:\n    # Handle unexpected values if necessary, though the problem implies only 0, 1, 2\n    return 3 \n\ndef transform(input_str):\n    \"\"\"\n    Sorts the input sequence of digits based on the custom order 2 -> 0 -> 1.\n\n    Args:\n        input_str: A string containing space-separated digits (0, 1, or 2).\n\n    Returns:\n        A string containing the sorted digits, space-separated.\n    \"\"\"\n    # 1. Receive the input sequence and parse it\n    # Split the input string by spaces and convert each part to an integer\n    input_digits = [int(d) for d in input_str.split()]\n\n    # 2. Sort the digits using the custom key\n    # The custom_sort_key function dictates that 2s are smallest, then 0s, then 1s\n    sorted_digits = sorted(input_digits, key=custom_sort_key)\n\n    # 3. Construct the output sequence string\n    # Convert the sorted integers back to strings\n    output_digits_str = [str(d) for d in sorted_digits]\n    \n    # Join the string digits with spaces\n    output_str = \" \".join(output_digits_str)\n\n    # 4. Return the resulting sequence string\n    return output_str\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1247,
    "candidates_token_count": 491,
    "total_token_count": 1738,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 8.92583,
  "retries": 1
}