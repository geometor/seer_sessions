objects:
  - name: input_array
    type: numpy.ndarray
    properties:
      - dtype: int
      - shape: (12,) # Observed shape, might generalize
      - elements: [0, 1, 2]
  - name: output_array
    type: numpy.ndarray
    properties:
      - dtype: int
      - shape: (12,) # Observed shape, same as input
      - elements: [0, 1, 2]
      - ordering: All 2s precede all 0s, which precede all 1s.

actions:
  - name: count_elements
    input: input_array
    output: counts_per_value
    description: Count the occurrences of 0, 1, and 2 in the input array.
    implementation_note: Can use np.unique(return_counts=True) or np.count_nonzero for each value.
  - name: construct_output
    input: counts_per_value (count_0, count_1, count_2)
    output: output_array
    steps:
      - Create a list/array containing '2' repeated count_2 times.
      - Append '0' repeated count_0 times to the list/array.
      - Append '1' repeated count_1 times to the list/array.
      - Convert the result to a NumPy array with the appropriate dtype.

relationships:
  - type: conservation
    description: The count of each distinct element (0, 1, 2) is the same in input_array and output_array.
  - type: sorting
    description: The elements in output_array are sorted based on the custom key 2 > 0 > 1.