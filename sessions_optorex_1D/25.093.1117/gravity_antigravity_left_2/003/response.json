{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nSorts the input numpy array of integers (0, 1, 2) according to a custom order: \nall 2s come first, followed by all 0s, and finally all 1s.\n\"\"\"\n\nimport numpy as np\n\n# Helper function to define the custom sorting order\ndef _custom_sort_key(item):\n    \"\"\"Assigns a sort priority to each item (2 highest, 0 medium, 1 lowest).\"\"\"\n    if item == 2:\n        return 0  # 2s should come first\n    elif item == 0:\n        return 1  # 0s should come after 2s\n    elif item == 1:\n        return 2  # 1s should come last\n    else:\n        # Handle unexpected values just in case\n        return 3 \n\ndef transform(input_array: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Takes a NumPy array of integers, sorts them according\n    to the custom order (2 > 0 > 1), and returns the sorted array.\n    \n    Args:\n        input_array: A NumPy array containing integers (expected: 0, 1, or 2).\n                     Assumed to be 1-dimensional based on examples.\n\n    Returns:\n        A NumPy array containing the sorted integers.\n    \"\"\"\n    \n    # Convert the input numpy array to a standard python list\n    # This is needed because sorted() with a custom key might be less efficient\n    # or have different behavior directly on numpy arrays depending on the version,\n    # and converting to list ensures standard list sorting.\n    # Alternatively, numpy's argsort could be used with a more complex setup,\n    # but for small arrays like these, list conversion is straightforward.\n    input_list = input_array.tolist()\n\n    # Sort the list using the custom key function.\n    # The key determines the order: lower return values from the key function come first.\n    # Key mapping: 2 -> 0, 0 -> 1, 1 -> 2.\n    # Sorted order based on key values: 0 < 1 < 2, which corresponds to items 2, 0, 1.\n    output_list = sorted(input_list, key=_custom_sort_key)\n\n    # Convert the sorted list back to a NumPy array\n    output_array = np.array(output_list, dtype=input_array.dtype) # Preserve original dtype\n    \n    return output_array\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4022,
    "candidates_token_count": 563,
    "total_token_count": 4585,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.731384,
  "retries": 1
}