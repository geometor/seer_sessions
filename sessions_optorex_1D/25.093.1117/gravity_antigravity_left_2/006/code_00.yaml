task_description: Reorder elements of an integer sequence based on a fixed priority rule.
input_object:
  type: sequence
  element_type: integer
  possible_values: [0, 1, 2]
  structure: 1-dimensional list or array
  properties:
    - variable_length
output_object:
  type: sequence
  element_type: integer
  possible_values: [0, 1, 2]
  structure: 1-dimensional list or array matching input type
  properties:
    - length: Identical to the length of the input_object.
    - element_counts: Identical to the element counts of the input_object for each distinct value (0, 1, 2).
    - ordering: Elements are strictly ordered based on value priority.
transformation:
  type: sorting
  action: Reorder (sort) the elements of the input sequence based on a custom priority key.
  rule: Sort the sequence according to the following descending priority: 2 > 0 > 1.
    priority_mapping:
      - value: 2 (highest priority, appears first in output)
      - value: 0 (medium priority, appears after all 2s)
      - value: 1 (lowest priority, appears after all 0s)
  preserves:
    - sequence_length
    - count_of_each_distinct_element_value
verification:
  - status: Confirmed
  - method: Analysis of all provided examples (input/output pairs) and programmatic checks.
  - findings: All examples consistently adhere to the 2 > 0 > 1 sorting rule while preserving element counts and sequence length.