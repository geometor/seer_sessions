{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nSorts the elements of an input NumPy grid based on the custom priority order 2 > 0 > 1,\npreserving the original grid shape.\n\"\"\"\n\nimport numpy as np\n# collections is not needed if using NumPy counting methods\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Sorts the elements of the input NumPy grid according to the custom order (2, 0, 1)\n    while preserving the original grid dimensions.\n\n    Args:\n        input_grid: A NumPy array containing integers 0, 1, or 2.\n\n    Returns:\n        A NumPy array with the same shape as input_grid, with elements sorted\n        according to the custom order (2s first, then 0s, then 1s).\n    \"\"\"\n    # Record the original shape of the input grid\n    original_shape = input_grid.shape\n\n    # Flatten the input grid into a 1D array to process all elements together\n    flattened_elements = input_grid.flatten()\n\n    # Count the occurrences of each digit (0, 1, 2) using NumPy functions\n    count_2 = np.sum(flattened_elements == 2)\n    count_0 = np.sum(flattened_elements == 0)\n    count_1 = np.sum(flattened_elements == 1)\n\n    # Create a new 1D array with elements sorted according to the custom order: 2, 0, 1\n    # Use np.repeat for efficient array creation\n    sorted_elements = np.concatenate([\n        np.repeat(2, count_2),\n        np.repeat(0, count_0),\n        np.repeat(1, count_1)\n    ])\n\n    # Reshape the sorted 1D array back into the original grid shape\n    output_grid = sorted_elements.reshape(original_shape)\n\n    # Ensure the output dtype matches the input dtype\n    output_grid = output_grid.astype(input_grid.dtype)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4266,
    "candidates_token_count": 464,
    "total_token_count": 4730,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.92635,
  "retries": 1
}