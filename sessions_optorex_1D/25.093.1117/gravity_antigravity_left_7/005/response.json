{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport collections\nimport numpy as np\nfrom typing import List, Union, Counter as TypingCounter\n\n\"\"\"\nTransforms an input NumPy array containing a sequence of integers (0, 1, 2) \nby rearranging its elements according to a specific custom sorting order: \nall occurrences of '2' first, followed by all occurrences of '0', and finally \nall occurrences of '1'. The counts of each digit (0, 1, 2) from the input sequence \nare strictly preserved in the output sequence, which is returned as a standard Python list.\nThe input NumPy array might have various dimensions (e.g., 1D or 2D like (1, N)), \nso the code extracts the underlying flat sequence first.\n\"\"\"\n\ndef extract_sequence(input_grid: np.ndarray) -> List[int]:\n    \"\"\"\n    Extracts a flat list of integers from a potentially multi-dimensional NumPy array.\n    \n    Args:\n        input_grid: The input NumPy array.\n\n    Returns:\n        A flat list of integers.\n    \"\"\"\n    # Flatten the array to handle any input dimension (1D, 2D, etc.) \n    # and convert to a standard Python list.\n    return input_grid.flatten().tolist()\n\ndef count_elements(sequence: List[int]) -> TypingCounter[int]:\n    \"\"\"\n    Counts the occurrences of each element in the sequence.\n    \n    Args:\n        sequence: A list of integers (expected to be 0, 1, or 2).\n\n    Returns:\n        A Counter object mapping each element to its frequency.\n    \"\"\"\n    return collections.Counter(sequence)\n\ndef construct_sorted_sequence(counts: TypingCounter[int]) -> List[int]:\n    \"\"\"\n    Constructs the output sequence based on element counts and the custom sort order (2, 0, 1).\n    \n    Args:\n        counts: A Counter object with frequencies of 0, 1, and 2.\n        \n    Returns:\n        A new list sorted according to the 2 > 0 > 1 rule.\n    \"\"\"\n    # Get counts for each element, defaulting to 0 if an element is not present\n    count2 = counts.get(2, 0)\n    count0 = counts.get(0, 0)\n    count1 = counts.get(1, 0)\n\n    # Build the output list by appending elements in the desired order (2s, then 0s, then 1s)\n    output_sequence = []\n    output_sequence.extend([2] * count2) \n    output_sequence.extend([0] * count0) \n    output_sequence.extend([1] * count1) \n    return output_sequence\n\ndef transform(input_grid: np.ndarray) -> List[int]:\n    \"\"\"\n    Applies the custom sorting transformation (2s -> 0s -> 1s) to the input NumPy array.\n\n    Args:\n        input_grid: A NumPy array containing integers 0, 1, or 2.\n\n    Returns:\n        A list of integers sorted according to the custom rule.\n    \"\"\"\n    # Step 1: Extract the flat sequence of numbers from the input NumPy array.\n    flat_sequence = extract_sequence(input_grid)\n    \n    # Step 2: Count the occurrences of each number (0, 1, 2) in the sequence.\n    element_counts = count_elements(flat_sequence)\n    \n    # Step 3: Construct the output sequence by arranging elements based on counts and the custom order (2, 0, 1).\n    output_sequence = construct_sorted_sequence(element_counts)\n    \n    # Step 4: Return the newly constructed list.\n    return output_sequence\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6098,
    "candidates_token_count": 855,
    "total_token_count": 6953,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.908986,
  "retries": 1
}