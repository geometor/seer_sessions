{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport collections\n\n\"\"\"\nRearrange the input sequence of integers (0, 1, 2) such that all 2s appear first, \nfollowed by all 0s, and finally all 1s, maintaining the original counts of each integer.\n\"\"\"\n\ndef transform(input_str: str) -> str:\n    \"\"\"\n    Transforms an input string of space-separated integers (0, 1, 2)\n    by rearranging them according to the custom sort order: 2, 0, 1.\n\n    Args:\n        input_str: A string containing space-separated integers (0, 1, or 2).\n\n    Returns:\n        A string containing the rearranged integers, space-separated.\n    \"\"\"\n    # Parse the input string into a list of integers\n    # Handle potential empty strings resulting from multiple spaces\n    numbers = [int(x) for x in input_str.split() if x]\n\n    # Count the occurrences of each number (0, 1, 2)\n    counts = collections.Counter(numbers)\n    count_0 = counts.get(0, 0)\n    count_1 = counts.get(1, 0)\n    count_2 = counts.get(2, 0)\n\n    # Construct the output list based on the custom sort order (2, 0, 1)\n    output_list = []\n    # Append all the 2s\n    output_list.extend([2] * count_2)\n    # Append all the 0s\n    output_list.extend([0] * count_0)\n    # Append all the 1s\n    output_list.extend([1] * count_1)\n\n    # Convert the output list back to a space-separated string\n    output_str = \" \".join(map(str, output_list))\n\n    return output_str\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1453,
    "candidates_token_count": 421,
    "total_token_count": 1874,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 7.162987,
  "retries": 1
}