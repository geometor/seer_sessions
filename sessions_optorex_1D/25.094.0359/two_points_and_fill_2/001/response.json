{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport math\nimport numpy as np\nimport collections\n\n\"\"\"\nTransforms an input sequence (list of integers) based on the following rule:\n1. Identify all unique non-zero integer values present in the input sequence.\n2. For each unique non-zero value:\n   a. Find the index of its first occurrence and the index of its last occurrence in the input sequence.\n   b. In the output sequence (initially a copy of the input), set all elements from the first index to the last index (inclusive) to this non-zero value.\n3. Return the modified sequence.\n\"\"\"\n\ndef find_indices_of_value(sequence, value):\n    \"\"\"Helper function to find all indices of a specific value in a sequence.\"\"\"\n    return [i for i, x in enumerate(sequence) if x == value]\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid (sequence).\n\n    Args:\n        input_grid: A list of integers representing the input sequence.\n\n    Returns:\n        A list of integers representing the transformed output sequence.\n    \"\"\"\n    # Initialize output_grid as a copy of the input_grid\n    output_grid = list(input_grid)\n    \n    # Find unique non-zero values in the input sequence\n    # Using a set automatically handles uniqueness and order doesn't matter here\n    non_zero_values = set(x for x in input_grid if x != 0)\n    \n    # Process each unique non-zero value\n    for value in non_zero_values:\n        # Find all indices where the current non-zero value appears\n        indices = find_indices_of_value(input_grid, value)\n        \n        # If the value exists in the input (should always be true based on how non_zero_values is generated)\n        if indices:\n            # Determine the first (min) and last (max) occurrence index\n            min_index = min(indices)\n            max_index = max(indices)\n            \n            # Fill the range in the output_grid with the current non-zero value\n            for i in range(min_index, max_index + 1):\n                output_grid[i] = value\n                \n    # Return the modified output grid\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1575,
    "candidates_token_count": 697,
    "total_token_count": 2272,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 7.475379,
  "retries": 1
}