{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport copy\n\n\"\"\"\nIdentifies the single non-zero digit ('fill_value') present exactly twice in the input 1D NumPy array. \nFills the array elements strictly between the first and second occurrences of the 'fill_value' with the 'fill_value' itself. \nElements outside this range, including the original positions of the 'fill_value', remain unchanged.\n\"\"\"\n\ndef find_non_zero_value(grid):\n    \"\"\"Finds the first non-zero value in the grid.\"\"\"\n    non_zero_elements = grid[grid != 0]\n    if non_zero_elements.size > 0:\n        return non_zero_elements[0]\n    return None # Indicates no non-zero value found\n\ndef find_value_indices(grid, value):\n    \"\"\"Finds all indices where a specific value occurs in the grid.\"\"\"\n    return np.where(grid == value)[0] # np.where returns a tuple, we need the first element\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Transforms the input NumPy array by filling elements between the two occurrences \n    of a unique non-zero digit with that digit.\n\n    Args:\n        input_grid: A 1D NumPy array of integers.\n\n    Returns:\n        A new 1D NumPy array with the transformation applied.\n    \"\"\"\n    # 1. Create a copy of the input_grid to serve as the output_grid.\n    output_grid = np.copy(input_grid)\n\n    # 2. Identify the unique non-zero integer (fill_value).\n    fill_value = find_non_zero_value(output_grid)\n\n    # 3. If no fill_value is found (all zeros), return the copy as is.\n    if fill_value is None:\n        return output_grid\n\n    # 4. Find all indices where the fill_value occurs.\n    indices = find_value_indices(output_grid, fill_value)\n\n    # 5. Check if exactly two occurrences were found (as expected by problem description).\n    if indices.size == 2:\n        # 6. Determine the index of the first occurrence (idx1).\n        idx1 = indices[0]\n        # 7. Determine the index of the last occurrence (idx2).\n        idx2 = indices[1] # Since size is 2, indices[1] is the last element\n\n        # 8. If idx1 is less than idx2 (guaranteed if size is 2), fill the segment.\n        # Use NumPy slicing to set elements from index idx1 + 1 up to (not including) idx2.\n        if idx1 < idx2:\n            output_grid[idx1 + 1 : idx2] = fill_value\n\n    # 9. Return the modified output_grid.\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5650,
    "candidates_token_count": 1034,
    "total_token_count": 6684,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.941301,
  "retries": 1
}