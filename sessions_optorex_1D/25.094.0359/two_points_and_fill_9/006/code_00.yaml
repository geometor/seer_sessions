task_elements:
  - item: sequence
    properties:
      - type: 1D list/array of integers
      - representation: space-separated string in input/output, often processed as NumPy array internally
      - contains: primarily zeros, with potentially multiple occurrences of a single non-zero digit type.
      - edge_case: If no non-zero digits exist, the sequence remains unchanged.
  - item: non_zero_digit
    properties:
      - value: An integer greater than 0 (e.g., 1, 2, 5, 6, 7, 9 in examples)
      - role: Acts as the fill value for the transformation.
      - constraint: Assumed based on examples that only one type of non-zero digit exists per input sequence.
    identification: Determined by finding any non-zero element in the sequence.
  - item: segment
    properties:
      - definition: The contiguous portion of the sequence starting at the index of the *first* occurrence of the non_zero_digit and ending at the index of the *last* occurrence.
      - range: Inclusive of both start and end indices.
      - derived_from: The minimum and maximum indices where the non_zero_digit appears.
    action:
      - type: fill
      - value: Use the non_zero_digit value.
      - target: All elements within the defined segment (inclusive).
  - item: surrounding_elements
    properties:
      - definition: Elements in the sequence located *before* the start index of the segment or *after* the end index.
      - value: Always 0 in the provided examples.
    action:
      - type: preserve
      - target: Retain their original values in the output sequence.

transformation_rule:
  name: Fill Segment Between Non-Zero Boundaries
  input: input_sequence (1D array of integers)
  output: modified_sequence (1D array of integers)
  steps:
    - Find all indices where the element is non-zero.
    - If no non-zero indices are found, return the input_sequence unchanged.
    - If non-zero indices exist:
      - Identify the non_zero_digit value (all non-zero elements share this value).
      - Determine the minimum index (`start_index`) among the non-zero indices.
      - Determine the maximum index (`end_index`) among the non-zero indices.
      - Create a copy of the input_sequence.
      - Modify the copy: For all indices `i` such that `start_index <= i <= end_index`, set the element at index `i` to the non_zero_digit value.
      - Return the modified copy.