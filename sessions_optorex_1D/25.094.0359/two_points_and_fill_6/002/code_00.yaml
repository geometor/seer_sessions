task_description: Fill the segment between the first and last occurrence of each non-zero digit within a 1D NumPy array, using the respective digit as the fill value.

elements:
  - name: data_array
    type: numpy.ndarray
    properties:
      - dimensionality: 1D
      - dtype: integer (likely int)
      - values: single digits (0-9)

  - name: background_element
    type: integer
    value: 0
    role: Represents empty space or background within the array.

  - name: marker_element
    type: integer
    properties:
      - value: non-zero digit (1-9)
      - role: Represents significant points whose range might need filling.
      - relationship: Multiple occurrences trigger the fill action.

actions:
  - name: find_unique_markers
    input: data_array
    output: numpy.ndarray (unique non-zero values)
    description: Identify the unique non-zero digits present in the input array.

  - name: find_indices
    input: data_array, marker_element_value (N)
    output: numpy.ndarray (indices)
    description: Find all indices where a specific non-zero digit N appears in the input array. (e.g., using `np.where`)

  - name: determine_boundaries
    input: numpy.ndarray (indices)
    output: min_index, max_index
    condition: Requires at least two indices.
    description: Determine the minimum and maximum index from the array of occurrences. (e.g., using `np.min`, `np.max`)

  - name: fill_range
    input: data_array (target for modification), min_index, max_index, marker_element_value (N)
    output: modified data_array
    description: Modify the target array by assigning the value N to the slice from `min_index + 1` up to (but not including) `max_index`. Uses NumPy array slicing and assignment.

relationships:
  - type: spatial_extent
    between: first and last occurrence of identical marker_elements
    property: distance (max_index - min_index)
    relevance: If distance > 1, defines the segment to be filled. The fill occurs between `min_index + 1` and `max_index`.

process_flow:
  - step: Create a copy of the input NumPy array (output_array).
  - step: Perform `find_unique_markers` on the input array.
  - step: For each unique marker value (N):
      - Perform `find_indices` for N on the *input* array.
      - If the number of indices found is greater than 1:
          - Perform `determine_boundaries` (min_index, max_index).
          - Perform `fill_range` on the *output_array* using min_index, max_index, and N.
  - step: Return the final modified output_array.
