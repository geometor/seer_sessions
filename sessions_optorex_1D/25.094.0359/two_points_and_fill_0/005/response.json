{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransforms a 1D NumPy array by identifying the unique non-zero integer value, \nfinding the minimum and maximum indices of its occurrences, and filling the segment \nof the array between these minimum and maximum indices (inclusive) with that \nnon-zero value. If the non-zero value appears less than twice, or if there isn't \nexactly one unique non-zero value, the original array is returned unchanged.\n\"\"\"\n\ndef find_unique_non_zero_and_indices(input_grid: np.ndarray):\n    \"\"\"\n    Finds the unique non-zero value and all its indices in the grid.\n\n    Args:\n        input_grid: The input 1D NumPy array.\n\n    Returns:\n        A tuple (non_zero_value, indices_array) if exactly one unique non-zero \n        value exists and it appears at least once. Otherwise, returns (None, None).\n        indices_array is a 1D NumPy array of indices.\n    \"\"\"\n    # Find unique values and filter out zero\n    unique_values = np.unique(input_grid)\n    non_zero_values = unique_values[unique_values != 0]\n\n    # Check if exactly one unique non-zero value exists\n    if len(non_zero_values) == 1:\n        non_zero_val = non_zero_values[0]\n        # Find all indices of this non-zero value\n        indices = np.where(input_grid == non_zero_val)[0]\n        # Check if it appears at least once (though problem implies >= 2 for change)\n        if len(indices) > 0:\n            return non_zero_val, indices\n        else:\n             # Should not happen if non_zero_values had length 1, but safety check\n             return None, None\n    else:\n        # If zero or more than one unique non-zero value found\n        return None, None\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the fill transformation based on the identified non-zero value segment.\n    \n    Args:\n        input_grid: A 1D NumPy array containing integers.\n                    Expected to contain mostly zeros and occurrences of a single \n                    non-zero integer value.\n\n    Returns:\n        The transformed 1D NumPy array. Returns a copy of the input if \n        transformation conditions are not met (e.g., less than two occurrences \n        of the non-zero value).\n    \"\"\"\n    \n    # Find the unique non-zero value and its indices\n    non_zero_val, indices = find_unique_non_zero_and_indices(input_grid)\n\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n\n    # Proceed only if a unique non-zero value was found and it occurred at least twice\n    if non_zero_val is not None and indices is not None and len(indices) >= 2:\n        # Determine the start (min index) and end (max index) of the segment\n        start_index = np.min(indices)\n        end_index = np.max(indices)\n\n        # Fill the segment in the output grid with the non-zero value\n        # NumPy slicing [start:end+1] includes the element at end_index\n        output_grid[start_index : end_index + 1] = non_zero_val\n    \n    # If conditions for transformation are not met (e.g., no non-zero value, \n    # multiple unique non-zero values, or fewer than 2 occurrences), \n    # the unmodified copy of the input grid is returned.\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 10458,
    "candidates_token_count": 1301,
    "total_token_count": 11759,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.094122,
  "retries": 1
}