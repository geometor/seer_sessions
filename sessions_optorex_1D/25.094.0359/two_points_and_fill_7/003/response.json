{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport collections\n\n\"\"\"\nTransforms an input list of integers based on the following rule:\n1. Identify all unique non-zero digits and the indices where they appear.\n2. Check if any non-zero digit appears exactly twice in the list.\n3. If one or more digits appear exactly twice, select the digit whose *first* occurrence (smallest index) is earliest in the list. This is the \"target digit\".\n4. If a target digit is found with indices idx1 and idx2 (idx1 < idx2), create a copy of the input list.\n5. In the copied list, change the value of all elements at indices strictly between idx1 and idx2 (i.e., from index idx1 + 1 up to, but not including, index idx2) to the value of the target digit.\n6. Return the modified list.\n7. If no non-zero digit appears exactly twice, return the original input list unchanged.\n\"\"\"\n\ndef find_indices_and_first_occurrence(data_list):\n    \"\"\"\n    Finds all indices for each non-zero number and tracks the first index seen.\n\n    Args:\n        data_list: The input list of integers.\n\n    Returns:\n        A tuple containing:\n        - dict: A dictionary mapping each non-zero digit to a list of its indices.\n        - dict: A dictionary mapping each non-zero digit to its first encountered index.\n    \"\"\"\n    indices_map = collections.defaultdict(list)\n    first_occurrence = {}\n    for index, value in enumerate(data_list):\n        if value != 0:\n            indices_map[value].append(index)\n            if value not in first_occurrence:\n                first_occurrence[value] = index\n    return indices_map, first_occurrence\n\ndef transform(input_list):\n    \"\"\"\n    Applies the transformation rule to the input list.\n\n    Args:\n        input_list: A list of integers.\n\n    Returns:\n        A new list representing the transformed output, or the original list if no transformation applies.\n    \"\"\"\n\n    # Analyze the input to find indices and first occurrences of non-zero digits\n    indices_map, first_occurrence = find_indices_and_first_occurrence(input_list)\n\n    # Initialize variables to find the target digit (the one appearing twice with the earliest first occurrence)\n    target_digit = None\n    min_first_index = float('inf')\n    target_indices = None\n\n    # Iterate through the digits found to identify potential targets\n    for digit, indices in indices_map.items():\n        # Check if the digit occurs exactly twice\n        if len(indices) == 2:\n            # Get the first index of this digit\n            current_first_index = first_occurrence[digit]\n            # If this digit's first occurrence is earlier than the current best, update the target\n            if current_first_index < min_first_index:\n                min_first_index = current_first_index\n                target_digit = digit\n                target_indices = indices\n\n    # If no target digit was found (no digit appeared exactly twice)\n    if target_digit is None:\n        # Return the original list unchanged\n        return list(input_list) # Return a copy to be safe, matching pattern of returning new list on change\n    else:\n        # A target digit was found, perform the fill operation\n        # Create a copy of the input list to modify\n        output_list = list(input_list)\n        idx1, idx2 = target_indices[0], target_indices[1]\n\n        # Fill the gap between the two indices (exclusive) with the target digit\n        # Range starts from the element *after* the first occurrence (idx1 + 1)\n        # and goes up to (but does not include) the second occurrence (idx2).\n        for i in range(idx1 + 1, idx2):\n            output_list[i] = target_digit\n\n        # Return the modified list\n        return output_list\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5235,
    "candidates_token_count": 1463,
    "total_token_count": 6698,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 35.783671,
  "retries": 1
}