{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport collections\nfrom typing import List, Dict, Tuple, Optional\n\n\"\"\"\nTransforms an input list of integers based on the following rule:\n1. Identify all unique non-zero digits and the indices where they appear.\n2. Check if any non-zero digit appears exactly twice in the list.\n3. If one or more digits appear exactly twice, select the digit whose *first* occurrence (smallest index) is earliest in the list. This is the \"target digit\".\n4. If a target digit is found with indices idx1 and idx2 (idx1 < idx2), create a copy of the input list.\n5. In the copied list, change the value of all elements at indices strictly between idx1 and idx2 (i.e., from index idx1 + 1 up to, but not including, index idx2) to the value of the target digit.\n6. Return the modified list.\n7. If no non-zero digit appears exactly twice, return the original input list unchanged (as a new list copy).\n\"\"\"\n\ndef _find_non_zero_digit_indices(data_list: List[int]) -> Tuple[Dict[int, List[int]], Dict[int, int]]:\n    \"\"\"\n    Finds all indices for each non-zero number and tracks the first index seen.\n\n    Args:\n        data_list: The input list of integers.\n\n    Returns:\n        A tuple containing:\n        - dict: A dictionary mapping each non-zero digit to a list of its indices.\n        - dict: A dictionary mapping each non-zero digit to its first encountered index.\n    \"\"\"\n    # Use defaultdict to easily append indices for each digit\n    indices_map = collections.defaultdict(list)\n    # Keep track of the first time we see a digit\n    first_occurrence = {}\n    for index, value in enumerate(data_list):\n        if value != 0:\n            indices_map[value].append(index)\n            # Record the first occurrence index if not already seen\n            if value not in first_occurrence:\n                first_occurrence[value] = index\n    return indices_map, first_occurrence\n\ndef transform(input_list: List[int]) -> List[int]:\n    \"\"\"\n    Applies the transformation rule to the input list.\n\n    Args:\n        input_list: A list of integers.\n\n    Returns:\n        A new list representing the transformed output, or a copy of the original list if no transformation applies.\n    \"\"\"\n\n    # Step 1 & 2 (partially): Find indices and first occurrences of non-zero digits\n    indices_map, first_occurrence = _find_non_zero_digit_indices(input_list)\n\n    # Step 3 & 5a: Identify potential target digits (those appearing exactly twice)\n    # and select the one with the earliest first occurrence.\n    target_digit: Optional[int] = None\n    min_first_index = float('inf')\n    target_indices: Optional[List[int]] = None\n\n    # Iterate through the non-zero digits found\n    for digit, indices in indices_map.items():\n        # Check if the digit occurs exactly twice\n        if len(indices) == 2:\n            # Get the first occurrence index for this digit\n            current_first_index = first_occurrence[digit]\n            # If this digit's first occurrence is earlier than the current best,\n            # update the target digit and its details.\n            if current_first_index < min_first_index:\n                min_first_index = current_first_index\n                target_digit = digit\n                target_indices = indices # Store the two indices [idx1, idx2]\n\n    # Step 4 & 7: If no target digit was found, return a copy of the original list.\n    if target_digit is None or target_indices is None:\n        return list(input_list) # Return a copy\n\n    # Step 5b-e: A target digit was found, perform the fill operation.\n    # Create a copy of the input list to modify.\n    output_list = list(input_list)\n    # Retrieve the start and end indices for the fill.\n    idx1, idx2 = target_indices[0], target_indices[1] # Indices are already sorted as they were found sequentially\n\n    # Fill the gap between the two indices (exclusive) with the target digit.\n    # The range starts from the element *after* the first occurrence (idx1 + 1)\n    # and goes up to (but does not include) the second occurrence (idx2).\n    for i in range(idx1 + 1, idx2):\n        # Only modify if the element is currently 0 (implied by examples, though could fill any)\n        # The examples only show 0s being filled, so let's stick to that for now.\n        # Revisit if examples show non-zeros being overwritten.\n        # On second thought, the prompt says \"fill the gap\", which implies replacing whatever is there.\n        # Let's assume replacement.\n        output_list[i] = target_digit\n\n    # Step 6: Return the modified list.\n    return output_list\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 9097,
    "candidates_token_count": 1614,
    "total_token_count": 10711,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.110135,
  "retries": 1
}