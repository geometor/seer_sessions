{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms a 1D NumPy array by finding the first contiguous block of identical \nnon-zero integers. If such a block exists and is preceded by a zero, \nthe block is swapped with that preceding zero. If the block starts at \nindex 0 or no non-zero block is found, the original array is returned.\n\"\"\"\n\nimport numpy as np\n\ndef find_first_non_zero_block(arr):\n    \"\"\"\n    Finds the start and end indices of the first contiguous block of \n    identical non-zero integers in a 1D NumPy array.\n\n    Args:\n        arr: A 1D NumPy array of integers.\n\n    Returns:\n        A tuple (start_index, end_index) if a block is found and is \n        preceded by a zero.\n        Returns (-1, -1) if a block is found starting at index 0.\n        Returns None if no non-zero block is found.\n    \"\"\"\n    start_index = -1\n    end_index = -1\n    block_digit = None\n\n    for i, digit in enumerate(arr):\n        # Found a non-zero digit\n        if digit != 0:\n            # If this is the start of a potential block\n            if start_index == -1:\n                # Check if the block starts at the very beginning\n                if i == 0:\n                    return -1, -1  # Indicate block starts at index 0\n                # Check if the preceding element is 0 (required for the swap)\n                if arr[i - 1] == 0:\n                     start_index = i\n                     block_digit = digit\n                     end_index = i # Initialize end index\n                else:\n                    # Found a non-zero not preceded by 0, skip (based on pattern)\n                    # Or handle differently if requirements change\n                    continue \n            # If continuing an existing block\n            elif digit == block_digit:\n                end_index = i\n            # If found a different non-zero digit, the first block ended\n            elif digit != block_digit:\n                 break # Stop after the first block is fully identified\n        # Found a zero\n        elif digit == 0:\n            # If we were tracking a block, it just ended\n            if start_index != -1:\n                break # Stop after the first block is fully identified\n\n    # After loop, check if a valid block was found\n    if start_index != -1:\n        # Ensure end_index is set (handles single-element blocks)\n        if end_index == -1:\n            end_index = start_index\n        return start_index, end_index\n    else:\n        # No block preceded by zero was found\n        return None\n\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the block-shifting transformation to the input NumPy array.\n\n    Args:\n        input_grid: A 1D NumPy array of integers.\n\n    Returns:\n        A new 1D NumPy array with the transformation applied, or the \n        original array if no transformation is applicable.\n    \"\"\"\n    # Find the first contiguous block of identical non-zero numbers preceded by a zero\n    block_indices = find_first_non_zero_block(input_grid)\n\n    # Case 1: No suitable block found\n    if block_indices is None:\n        return input_grid.copy() # Return a copy to avoid modifying original\n\n    start_index, end_index = block_indices\n\n    # Case 2: Block starts at index 0 (signaled by start_index == -1)\n    if start_index == -1:\n         return input_grid.copy() # Return a copy\n\n    # Case 3: Valid block found, perform the swap\n    \n    # Extract the parts of the array for rearrangement\n    # Part before the preceding zero\n    prefix = input_grid[:start_index - 1] \n    # The zero element that precedes the block\n    preceding_zero = np.array([input_grid[start_index - 1]]) \n    # The non-zero block itself\n    non_zero_block = input_grid[start_index : end_index + 1]\n    # Part after the non-zero block\n    suffix = input_grid[end_index + 1:]\n\n    # Construct the output array by concatenating parts in the new order\n    # Order: prefix, non_zero_block, preceding_zero, suffix\n    output_grid = np.concatenate((prefix, non_zero_block, preceding_zero, suffix))\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5917,
    "candidates_token_count": 1709,
    "total_token_count": 7626,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.597871,
  "retries": 1
}