{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms a 1D NumPy array by finding the first contiguous block of identical \nnon-zero integers. If such a block exists and is preceded by a zero, \nthe block is swapped with that preceding zero. If the block starts at \nindex 0 or no non-zero block is found, the original array is returned.\n\"\"\"\n\nimport numpy as np\n\ndef find_first_non_zero_block(arr: np.ndarray) -> tuple | None:\n    \"\"\"\n    Finds the start and end indices of the first contiguous block of \n    identical non-zero integers in a 1D NumPy array that is preceded by a zero.\n\n    Args:\n        arr: A 1D NumPy array of integers.\n\n    Returns:\n        A tuple (start_index, end_index) if a suitable block is found.\n        Returns None if no non-zero block is found, or if the first block \n        found starts at index 0 or is not preceded by a zero.\n    \"\"\"\n    start_index = -1\n    end_index = -1\n    block_digit = None\n\n    for i, digit in enumerate(arr):\n        # Found a non-zero digit\n        if digit != 0:\n            # If this is the start of a potential block\n            if start_index == -1:\n                # Check if the block starts at the very beginning or not preceded by 0\n                if i == 0 or arr[i - 1] != 0:\n                    # If it starts at 0, it doesn't fit the swap pattern.\n                    # If not preceded by 0, it doesn't fit the swap pattern.\n                    # Continue searching in case there's another block later that *does* fit.\n                    # We only care about the *first* block *that meets the criteria*.\n                    continue \n                else: # Preceded by zero, potential block start\n                     start_index = i\n                     block_digit = digit\n                     end_index = i # Initialize end index\n            # If continuing an existing block (started in the 'else' above)\n            elif digit == block_digit:\n                end_index = i\n            # If found a different non-zero digit, the first suitable block ended\n            elif digit != block_digit and start_index != -1: \n                 break # Stop after the first suitable block is fully identified\n        # Found a zero\n        elif digit == 0:\n            # If we were tracking a suitable block, it just ended\n            if start_index != -1:\n                break # Stop after the first suitable block is fully identified\n\n    # After loop, check if a valid block was found (start_index must have been set)\n    if start_index != -1:\n        return start_index, end_index\n    else:\n        # No block preceded by zero was found\n        return None\n\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the block-shifting transformation to the input NumPy array.\n\n    Args:\n        input_grid: A 1D NumPy array of integers.\n\n    Returns:\n        A new 1D NumPy array with the transformation applied, or a copy of the \n        original array if no transformation is applicable.\n    \"\"\"\n    \n    # Locate the contiguous block of identical non-zero integers preceded by zero.\n    block_indices = find_first_non_zero_block(input_grid)\n\n    # If no such block exists return the original sequence unchanged.\n    if block_indices is None:\n        return input_grid.copy() \n\n    start_index, end_index = block_indices\n    \n    # Identify the index of the element immediately before the block.\n    preceding_zero_index = start_index - 1\n\n    # Create a copy to avoid modifying the original input array in place\n    output_grid = input_grid.copy()\n\n    # Extract the non-zero block\n    non_zero_block = output_grid[start_index : end_index + 1]\n    \n    # Extract the preceding zero element (as an array slice)\n    preceding_zero = output_grid[preceding_zero_index : preceding_zero_index + 1] # Slice maintains array type\n\n    # Perform the swap in the output grid:\n    # Place the non-zero block starting at the preceding zero's original position\n    output_grid[preceding_zero_index : preceding_zero_index + len(non_zero_block)] = non_zero_block\n    \n    # Place the preceding zero immediately after the shifted block\n    output_grid[preceding_zero_index + len(non_zero_block) : preceding_zero_index + len(non_zero_block) + 1] = preceding_zero\n\n    # The elements before the preceding_zero_index and after the end_index \n    # remain in their original places in the copied output_grid.\n\n    # Return the newly constructed sequence.\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6684,
    "candidates_token_count": 1409,
    "total_token_count": 8093,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.054877,
  "retries": 1
}