{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport re\n\ndef find_non_zero_block(data_list):\n    \"\"\"\n    Finds the start and end indices of the first contiguous block of \n    identical non-zero digits.\n\n    Args:\n        data_list: A list of strings representing digits.\n\n    Returns:\n        A tuple (start_index, end_index) if a block is found, otherwise None.\n        Returns (-1, -1) if the block starts at index 0.\n    \"\"\"\n    start_index = -1\n    end_index = -1\n    block_digit = None\n\n    for i, digit in enumerate(data_list):\n        if digit != '0':\n            # Found the start of a potential block\n            if start_index == -1:\n                 # Check if block starts at the very beginning\n                if i == 0:\n                    return -1, -1 # Indicate block starts at index 0\n                start_index = i\n                block_digit = digit\n            # Continue the block if the digit matches\n            elif digit == block_digit:\n                end_index = i\n            # Found a different digit, block ended previously or it's a single digit\n            else:\n                if end_index == -1: # Handle single non-zero digit case\n                    end_index = start_index\n                break # Found the end of the first block\n        elif start_index != -1:\n            # Found a zero after the block started\n            if end_index == -1: # Handle single non-zero digit case\n                end_index = start_index\n            break # End of block\n\n    # Handle case where block goes to the end of the list\n    if start_index != -1 and end_index == -1:\n        # This handles blocks of size 1 at the end, or longer blocks ending at the list end.\n        # Find the actual end of the block if not already set\n        current_end = start_index\n        for j in range(start_index + 1, len(data_list)):\n            if data_list[j] == block_digit:\n                current_end = j\n            else:\n                break\n        end_index = current_end\n\n\n    if start_index != -1 and end_index != -1:\n        return start_index, end_index\n    elif start_index != -1: # Handles a single non-zero digit not at the start\n         return start_index, start_index\n    else:\n        return None # No non-zero block found\n\n\ndef transform(input_str):\n    \"\"\"\n    Transforms the input string by finding the first contiguous block of \n    identical non-zero digits and swapping it with the single zero \n    immediately preceding it. If the block is already at the beginning \n    or no non-zero block exists, the original string is returned.\n    \"\"\"\n    # Parse the input string into a list of digit strings.\n    input_list = input_str.split(' ')\n\n    # Find the start and end indices of the non-zero block.\n    block_indices = find_non_zero_block(input_list)\n\n    # If no block found, return original string\n    if block_indices is None:\n        return input_str\n\n    start_index, end_index = block_indices\n\n    # If block starts at index 0, return original string\n    if start_index == -1:\n        return input_str\n        \n    # Ensure the element before the block is actually '0' (as per pattern)\n    # Although find_non_zero_block implies it, good to be explicit/safe\n    if start_index == 0 or input_list[start_index - 1] != '0':\n         # This case covers blocks starting at index 0 or blocks not preceded by '0'\n         # Based on examples, blocks are always preceded by '0' unless at index 0\n        return input_str\n\n\n    # Extract the parts of the list for rearrangement\n    prefix = input_list[:start_index - 1]\n    preceding_zero = [input_list[start_index - 1]] # Keep as list for concatenation\n    non_zero_block = input_list[start_index : end_index + 1]\n    suffix = input_list[end_index + 1:]\n\n    # Construct the output list by swapping the preceding zero and the block\n    output_list = prefix + non_zero_block + preceding_zero + suffix\n\n    # Join the elements of the output list with spaces\n    output_str = ' '.join(output_list)\n\n    return output_str\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1627,
    "candidates_token_count": 1481,
    "total_token_count": 3108,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.278058,
  "retries": 1
}