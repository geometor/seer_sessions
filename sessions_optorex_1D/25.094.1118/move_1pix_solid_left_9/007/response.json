{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies a single, contiguous block of identical non-zero digits within a 1D \nNumPy array. Shifts this block one position to the left, maintaining the \noriginal array length by padding with zeros. Assumes the input contains at most \none such block and that if a block exists and is shifted, its initial start \nindex is greater than 0. If no valid block is found, or if the block starts \nat index 0, an array of zeros is returned.\n\"\"\"\n\nimport numpy as np\n\ndef find_non_zero_block_indices(arr):\n    \"\"\"\n    Finds the start index, end index (exclusive), and value of the \n    first contiguous block of identical non-zero digits in a NumPy array.\n\n    Args:\n        arr: A 1D NumPy array of integers.\n\n    Returns:\n        A tuple (start_index, end_index, value) if a block is found,\n        otherwise returns (None, None, None). Returns None if multiple blocks\n        or non-contiguous non-zero elements are found.\n    \"\"\"\n    # Find indices of all non-zero elements\n    non_zero_indices = np.where(arr != 0)[0]\n\n    # If no non-zero elements exist, no block can be found\n    if len(non_zero_indices) == 0:\n        return None, None, None\n\n    # Determine the potential start index and the value of the block\n    start_index = non_zero_indices[0]\n    value = arr[start_index]\n    \n    # Verify that the non-zero elements form a single contiguous block\n    # and all elements within that block have the same value.\n    is_single_contiguous_block = True\n    for i in range(len(non_zero_indices)):\n        # Check for contiguity: current index should equal start_index + offset\n        if non_zero_indices[i] != start_index + i:\n            is_single_contiguous_block = False\n            break\n        # Check for homogeneity: current element value should match the first non-zero value\n        if arr[non_zero_indices[i]] != value:\n            is_single_contiguous_block = False\n            break\n            \n    # If it forms a valid single contiguous block of identical values\n    if is_single_contiguous_block:\n        # Calculate the end index (exclusive)\n        end_index = start_index + len(non_zero_indices)\n        return start_index, end_index, value\n    else:\n        # If not a single contiguous block of the same value, return None tuple\n        return None, None, None\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the left-shift transformation to the non-zero block in the input grid.\n\n    Args:\n        input_grid: A list or 1D NumPy array representing the input sequence.\n\n    Returns:\n        A 1D NumPy array representing the transformed sequence.\n    \"\"\"\n    # Ensure input is a NumPy array for efficient processing\n    input_arr = np.array(input_grid)\n    \n    # Get the size of the input array\n    n = len(input_arr)\n    \n    # Initialize output_grid as a NumPy array of zeros with the same shape as input_arr\n    output_grid = np.zeros_like(input_arr)\n\n    # Find the single, contiguous, homogeneous block of non-zero digits\n    start_index, end_index, block_value = find_non_zero_block_indices(input_arr)\n\n    # Check if a valid block was found and if its start index allows for a left shift (start > 0)\n    if start_index is not None and start_index > 0:\n        # Calculate the new start index (shifted one position left)\n        new_start_index = start_index - 1\n        # Calculate the new end index (shifted one position left)\n        new_end_index = end_index - 1 \n\n        # Place the block's value into the output grid at the new, shifted position\n        # Use NumPy slicing for efficient array modification\n        output_grid[new_start_index:new_end_index] = block_value\n        \n    # If no block is found (start_index is None), or if the block starts at index 0 (start_index == 0),\n    # the output_grid remains all zeros as initialized.\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8088,
    "candidates_token_count": 1375,
    "total_token_count": 9463,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.062473,
  "retries": 1
}