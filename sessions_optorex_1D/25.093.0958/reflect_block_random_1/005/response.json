{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport math # Although not used in the final code, included as per template allowance\n\n\"\"\"\nReverses the sub-sequence of digits located between the first and last\nnon-zero digits in the input sequence, leaving any leading and trailing\nzeros in their original positions. If the sequence contains only zeros,\nit remains unchanged.\n\"\"\"\n\ndef _find_first_non_zero_index(data_list):\n    \"\"\"\n    Helper function to find the index of the first non-zero element in a list.\n    Returns -1 if no non-zero element is found.\n    \"\"\"\n    for i, val in enumerate(data_list):\n        if val != 0:\n            return i\n    return -1 # Return -1 if all are zeros or list is empty\n\ndef _find_last_non_zero_index(data_list):\n    \"\"\"\n    Helper function to find the index of the last non-zero element in a list.\n    Returns -1 if no non-zero element is found.\n    \"\"\"\n    n = len(data_list)\n    for i in range(n - 1, -1, -1):\n        if data_list[i] != 0:\n            return i\n    return -1 # Return -1 if all are zeros or list is empty\n\ndef transform(input_list):\n    \"\"\"\n    Applies the transformation rule to the input list of integers.\n\n    Args:\n        input_list: A list of integers representing the sequence.\n\n    Returns:\n        A list of integers representing the transformed sequence.\n    \"\"\"\n    # Ensure input is a list for consistent processing (though the caller should provide a list)\n    # This handles potential numpy array inputs if needed, converting them to lists.\n    if isinstance(input_list, np.ndarray):\n        work_list = input_list.tolist()\n    else:\n        # Create a copy to avoid modifying the original input list if it's mutable\n        work_list = list(input_list)\n\n    # Handle empty list case - return empty list\n    if not work_list:\n        return []\n\n    # 1. Determine the index of the first non-zero element\n    start_index = _find_first_non_zero_index(work_list)\n\n    # 2. If no non-zero element is found (all zeros), return the original list unchanged.\n    if start_index == -1:\n        return work_list\n\n    # 3. Determine the index of the last non-zero element.\n    #    (We know at least one non-zero exists, so this will find an index >= start_index)\n    end_index = _find_last_non_zero_index(work_list)\n\n    # 4. Extract the prefix sub-sequence (leading zeros).\n    prefix = work_list[:start_index]\n\n    # 5. Extract the core sub-sequence (from first to last non-zero, inclusive).\n    core = work_list[start_index : end_index + 1]\n\n    # 6. Extract the suffix sub-sequence (trailing zeros).\n    suffix = work_list[end_index + 1:]\n\n    # 7. Reverse the order of the elements within the core sub-sequence.\n    reversed_core = core[::-1]\n\n    # 8. Construct the final output sequence by concatenating the parts.\n    output_list = prefix + reversed_core + suffix\n\n    # 9. Return the constructed output list.\n    return output_list\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7287,
    "candidates_token_count": 794,
    "total_token_count": 8081,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.93042,
  "retries": 1
}