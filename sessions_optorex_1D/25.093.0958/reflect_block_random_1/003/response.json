{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport math # Although not used in the final code, included as per template allowance\n\n\"\"\"\nReverses the sub-sequence of digits located between the first and last\nnon-zero digits in the input sequence, leaving any leading and trailing\nzeros in their original positions. If the sequence contains only zeros,\nit remains unchanged.\n\"\"\"\n\ndef _find_first_non_zero_index(data_list):\n    \"\"\"Finds the index of the first non-zero element.\"\"\"\n    for i, val in enumerate(data_list):\n        if val != 0:\n            return i\n    return -1 # Return -1 if all are zeros or list is empty\n\ndef _find_last_non_zero_index(data_list):\n    \"\"\"Finds the index of the last non-zero element.\"\"\"\n    n = len(data_list)\n    for i in range(n - 1, -1, -1):\n        if data_list[i] != 0:\n            return i\n    return -1 # Return -1 if all are zeros or list is empty\n\ndef transform(input_data):\n    \"\"\"\n    Applies the transformation rule to the input data.\n\n    Args:\n        input_data: A list or numpy array of integers.\n\n    Returns:\n        A list of integers representing the transformed sequence.\n    \"\"\"\n    # Ensure input is a list for consistent processing\n    if isinstance(input_data, np.ndarray):\n        input_list = input_data.tolist()\n    else:\n        # Assume it's already list-like or directly usable as a list\n        input_list = list(input_data)\n\n    # Handle empty list case\n    if not input_list:\n        return []\n\n    # Find the index of the first non-zero digit.\n    start_index = _find_first_non_zero_index(input_list)\n\n    # If no non-zero digits are found (all zeros), return the original list.\n    if start_index == -1:\n        return input_list # Return a copy or the original list\n\n    # Find the index of the last non-zero digit.\n    # Since we know there's at least one non-zero digit, this will also find an index.\n    end_index = _find_last_non_zero_index(input_list)\n\n    # Extract the prefix (leading zeros before start_index).\n    prefix = input_list[:start_index]\n\n    # Extract the middle segment (from start_index to end_index, inclusive).\n    middle = input_list[start_index : end_index + 1]\n\n    # Extract the suffix (trailing zeros after end_index).\n    suffix = input_list[end_index + 1:]\n\n    # Reverse the middle segment.\n    reversed_middle = middle[::-1]\n\n    # Concatenate the prefix, reversed middle segment, and suffix.\n    output_list = prefix + reversed_middle + suffix\n\n    # Return the transformed list\n    return output_list\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7981,
    "candidates_token_count": 684,
    "total_token_count": 8665,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.647202,
  "retries": 1
}