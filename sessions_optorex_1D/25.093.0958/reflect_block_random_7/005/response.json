{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport math\nimport numpy as np\nimport re # Not strictly required by the final logic, but potentially useful for more complex parsing if needed\n\n\"\"\"\nTransforms an input sequence of digits (provided as a string, list, or NumPy array) \nby reversing the order of the subsequence located between the first and last \nnon-zero digits. Any leading and trailing zeros in the original sequence are \npreserved in their respective positions in the output. If the sequence contains \nonly zeros, it remains unchanged. The final output is formatted as a \nspace-separated string.\n\"\"\"\n\ndef _parse_input_to_list(input_data) -> list[int]:\n    \"\"\"\n    Converts various input types (string, list, ndarray) into a list of integers.\n    Handles space-separated digit strings.\n    \"\"\"\n    if isinstance(input_data, str):\n        # Assume space-separated digits based on task examples\n        parts = input_data.split()\n        if not parts:\n            return []\n        try:\n            # Convert each part to an integer\n            int_list = [int(part) for part in parts]\n        except ValueError as e:\n            # Handle cases where parts are not valid integers\n            print(f\"Warning: Input string contains non-integer parts: {e}\")\n            # Attempt to filter out non-digit parts, or raise error depending on desired strictness\n            # For now, let's try filtering, assuming digits are the goal\n            int_list = [int(part) for part in parts if part.isdigit() or (part.startswith('-') and part[1:].isdigit())]\n            # If strict adherence to example format (only non-negative single digits) is required:\n            # int_list = [int(part) for part in parts if part.isdigit() and len(part) == 1]\n    elif isinstance(input_data, (list, np.ndarray)):\n        # If it's a list or numpy array, convert elements to int\n        try:\n            int_list = [int(item) for item in input_data]\n        except (ValueError, TypeError) as e:\n             raise TypeError(f\"Input list/array contains non-integer elements: {e}\")\n    else:\n        raise TypeError(f\"Unsupported input type: {type(input_data)}\")\n    return int_list\n\ndef _find_first_non_zero_index(int_list: list[int]) -> int:\n    \"\"\"Finds the index of the first non-zero element. Returns -1 if none found.\"\"\"\n    for i, val in enumerate(int_list):\n        if val != 0:\n            return i\n    return -1\n\ndef _find_last_non_zero_index(int_list: list[int]) -> int:\n    \"\"\"Finds the index of the last non-zero element. Returns -1 if none found.\"\"\"\n    n = len(int_list)\n    for i in range(n - 1, -1, -1):\n        if int_list[i] != 0:\n            return i\n    return -1\n\ndef _format_list_to_string(int_list: list[int]) -> str:\n    \"\"\"Converts a list of integers to a space-separated string.\"\"\"\n    return ' '.join(map(str, int_list))\n\ndef transform(input_data) -> str:\n    \"\"\"\n    Applies the core transformation logic: reverse the segment between the\n    first and last non-zero elements, preserving leading/trailing zeros.\n    \"\"\"\n    # 1. Robustly parse the input into a list of integers\n    input_list = _parse_input_to_list(input_data)\n    n = len(input_list)\n\n    # Handle empty input list\n    if n == 0:\n        return \"\"\n\n    # 2. Find the boundaries of the core (non-zero) block\n    first_nz_idx = _find_first_non_zero_index(input_list)\n\n    # 3. Handle the case where all elements are zero\n    if first_nz_idx == -1:\n        # If no non-zero elements, return the original list formatted as string\n        return _format_list_to_string(input_list)\n\n    # Find the last non-zero index (guaranteed to exist if first_nz_idx != -1)\n    last_nz_idx = _find_last_non_zero_index(input_list)\n\n    # 4. Extract the three components: leading zeros, core block, trailing zeros\n    leading_zeros = input_list[:first_nz_idx]\n    core_block = input_list[first_nz_idx : last_nz_idx + 1]\n    trailing_zeros = input_list[last_nz_idx + 1:]\n\n    # 5. Reverse the core block\n    reversed_core_block = core_block[::-1] # Using slice notation for reversal\n\n    # 6. Concatenate the components to form the output list\n    output_list = leading_zeros + reversed_core_block + trailing_zeros\n\n    # 7. Format the output list into a space-separated string\n    output_str = _format_list_to_string(output_list)\n\n    return output_str\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7679,
    "candidates_token_count": 1195,
    "total_token_count": 8874,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 19.298652,
  "retries": 1
}