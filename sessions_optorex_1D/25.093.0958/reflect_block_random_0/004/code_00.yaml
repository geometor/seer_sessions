task_elements:
  - object: sequence
    properties:
      - type: list_of_integers (single digits 0-9)
      - representation: space-separated string or 1D numpy array
      - length: variable, preserved in output
  - object: digit
    properties:
      - value: integer (0-9)
      - position: index_in_sequence
      - attribute: is_zero (boolean)
      - attribute: is_non_zero (boolean)
  - object: core_sub_sequence
    properties:
      - type: list_of_integers
      - location: spans from the first non-zero digit to the last non-zero digit (inclusive)
      - condition: exists only if there are at least two non-zero digits in the sequence
    actions:
      - identify_boundaries
      - extract
      - reverse_order
  - object: padding_zeros
    properties:
      - value: 0
      - location: elements before the first non-zero digit (leading) or after the last non-zero digit (trailing)
    actions:
      - identify
      - preserve_position_and_value
transformation:
  - action: find_non_zero_indices
    inputs: input_sequence
    outputs: list_of_indices
    description: Identify the indices of all non-zero elements in the sequence.
  - action: check_non_zero_count
    inputs: list_of_indices
    outputs: decision (proceed or return original)
    description: If the count of non-zero indices is less than 2, the sequence remains unchanged.
  - action: determine_reversal_boundaries
    inputs: list_of_indices
    outputs: start_index, end_index
    description: Find the minimum (start_index) and maximum (end_index) index from the list of non-zero indices.
  - action: extract_parts
    inputs: input_sequence, start_index, end_index
    outputs: leading_part, middle_part, trailing_part
    description: >
      Split the input sequence into three parts:
      1. Elements before start_index (leading_part).
      2. Elements from start_index to end_index inclusive (middle_part).
      3. Elements after end_index (trailing_part).
  - action: reverse_middle_part
    inputs: middle_part
    outputs: reversed_middle_part
    description: Reverse the order of elements within the middle_part.
  - action: reconstruct_output
    inputs: leading_part, reversed_middle_part, trailing_part
    outputs: output_sequence
    description: Concatenate the three parts in order: leading_part, reversed_middle_part, trailing_part.