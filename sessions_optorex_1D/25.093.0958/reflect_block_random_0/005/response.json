{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nReverses the sub-sequence of elements located between the first and last non-zero elements (inclusive) in the input NumPy array, while preserving the position of any leading or trailing zeros. If there are zero or one non-zero elements, the array remains unchanged.\n\"\"\"\n\ndef _find_non_zero_indices(arr: np.ndarray) -> np.ndarray:\n    \"\"\"Finds the indices of all non-zero elements.\"\"\"\n    # np.nonzero returns a tuple of arrays, one for each dimension.\n    # For a 1D array, we take the first element of the tuple.\n    return np.nonzero(arr)[0]\n\ndef transform(input_array: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Transforms the input NumPy array according to the described rule.\n\n    Args:\n        input_array: A 1D NumPy array of integers.\n\n    Returns:\n        A 1D NumPy array representing the transformed sequence.\n    \"\"\"\n\n    # 1. Identify the indices of all non-zero digits.\n    non_zero_indices = _find_non_zero_indices(input_array)\n\n    # 2. Check the number of non-zero digits found.\n    # If there are fewer than two non-zero digits, return the original array.\n    if len(non_zero_indices) < 2:\n        return input_array\n\n    # 3. Determine the start and end indices of the sub-sequence to reverse.\n    # This corresponds to the first and last non-zero element positions.\n    start_index = non_zero_indices.min()\n    end_index = non_zero_indices.max()\n\n    # 4. Extract three segments from the input array:\n    # The leading_part: elements before start_index.\n    leading_part = input_array[:start_index]\n    # The middle_part: elements from start_index to end_index (inclusive).\n    middle_part = input_array[start_index : end_index + 1]\n    # The trailing_part: elements after end_index.\n    trailing_part = input_array[end_index + 1:]\n\n    # 5. Reverse the order of the elements within the middle_part.\n    # Slicing with [::-1] creates a reversed copy.\n    reversed_middle_part = middle_part[::-1]\n\n    # 6. Construct the final output array by concatenating the parts.\n    # Ensure all parts are NumPy arrays for concatenation.\n    output_array = np.concatenate((leading_part, reversed_middle_part, trailing_part))\n\n    # 7. Return the constructed output array.\n    return output_array\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7059,
    "candidates_token_count": 613,
    "total_token_count": 7672,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.117114,
  "retries": 1
}