{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nReverses the contiguous sub-sequence of non-zero digits within a sequence (list or numpy array) of digits, leaving any leading or trailing zeros in their original positions.\n\n1.  Receive the input sequence of digits (e.g., as a list or NumPy array).\n2.  Convert the input to a NumPy array if it isn't already.\n3.  Find the index of the first non-zero digit (`start_index`) in the array.\n4.  If no non-zero digit is found (`start_index` is -1), return a copy of the original input array.\n5.  Find the index of the last non-zero digit (`end_index`) in the array.\n6.  Extract the sub-array of leading zeros (elements before `start_index`).\n7.  Extract the sub-array representing the non-zero segment (elements from `start_index` to `end_index`, inclusive).\n8.  Extract the sub-array of trailing zeros (elements after `end_index`).\n9.  Reverse the order of elements within the extracted non-zero segment sub-array.\n10. Construct the output array by concatenating the leading zeros sub-array, the reversed non-zero segment sub-array, and the trailing zeros sub-array in that order.\n11. Return the constructed output array.\n\"\"\"\n\n\ndef find_first_nonzero_index_np(arr):\n    \"\"\"Finds the index of the first non-zero element in a NumPy array.\"\"\"\n    indices = np.where(arr != 0)[0]\n    # Return the first index if found, otherwise return -1\n    if len(indices) == 0:\n        return -1\n    return indices[0]\n\ndef find_last_nonzero_index_np(arr):\n    \"\"\"Finds the index of the last non-zero element in a NumPy array.\"\"\"\n    indices = np.where(arr != 0)[0]\n    # Return the last index if found, otherwise return -1\n    if len(indices) == 0:\n        return -1\n    return indices[-1]\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input sequence.\n\n    Args:\n        input_grid (np.ndarray or list): A 1D sequence of integers.\n\n    Returns:\n        np.ndarray: The transformed 1D NumPy array.\n    \"\"\"\n\n    # Step 2: Ensure input is a NumPy array\n    if not isinstance(input_grid, np.ndarray):\n        input_grid_np = np.array(input_grid)\n    else:\n        input_grid_np = input_grid\n\n    # Step 3: Find the index of the first non-zero element\n    start_index = find_first_nonzero_index_np(input_grid_np)\n\n    # Step 4: Handle the edge case where the sequence contains only zeros\n    if start_index == -1:\n        # Return a copy of the original sequence/array\n        return input_grid_np.copy()\n\n    # Step 5: Find the index of the last non-zero element\n    end_index = find_last_nonzero_index_np(input_grid_np)\n\n    # Step 6: Extract the leading zeros sub-array\n    leading_zeros = input_grid_np[:start_index]\n\n    # Step 7: Extract the non-zero segment sub-array\n    non_zero_segment = input_grid_np[start_index : end_index + 1]\n\n    # Step 8: Extract the trailing zeros sub-array\n    trailing_zeros = input_grid_np[end_index + 1 :]\n\n    # Step 9: Reverse the non-zero segment\n    reversed_segment = non_zero_segment[::-1] # Efficient NumPy slicing for reversal\n\n    # Step 10: Reconstruct the sequence using NumPy concatenation\n    output_grid = np.concatenate((leading_zeros, reversed_segment, trailing_zeros))\n\n    # Step 11: Return the result\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7386,
    "candidates_token_count": 920,
    "total_token_count": 8306,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.420445,
  "retries": 1
}