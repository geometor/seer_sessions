{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nReverses the contiguous sub-sequence of non-zero digits within a sequence (list or numpy array) of digits, leaving any leading or trailing zeros in their original positions.\n\"\"\"\n\nimport numpy as np\n\ndef find_first_nonzero_index_np(arr):\n    \"\"\"Finds the index of the first non-zero element in a NumPy array.\"\"\"\n    indices = np.where(arr != 0)[0]\n    if len(indices) == 0:\n        return -1\n    return indices[0]\n\ndef find_last_nonzero_index_np(arr):\n    \"\"\"Finds the index of the last non-zero element in a NumPy array.\"\"\"\n    indices = np.where(arr != 0)[0]\n    if len(indices) == 0:\n        return -1\n    return indices[-1]\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input sequence (expected as a NumPy array).\n\n    Args:\n        input_grid (np.ndarray): A 1D NumPy array of integers.\n\n    Returns:\n        np.ndarray: The transformed 1D NumPy array.\n    \"\"\"\n    # Ensure input is a NumPy array (it might be passed as a list)\n    if not isinstance(input_grid, np.ndarray):\n        input_grid = np.array(input_grid)\n\n    # Find the indices of the first and last non-zero elements\n    start_index = find_first_nonzero_index_np(input_grid)\n\n    # Handle the case where the sequence contains only zeros or is empty\n    if start_index == -1:\n        return input_grid.copy() # Return a copy of the original sequence/array\n\n    end_index = find_last_nonzero_index_np(input_grid)\n\n    # Extract the three parts: leading zeros, non-zero segment, trailing zeros\n    leading_zeros = input_grid[:start_index]\n    non_zero_segment = input_grid[start_index : end_index + 1]\n    trailing_zeros = input_grid[end_index + 1 :]\n\n    # Reverse the non-zero segment\n    # Slicing [::-1] works efficiently for reversing NumPy arrays\n    reversed_segment = non_zero_segment[::-1]\n\n    # Reconstruct the sequence using NumPy concatenation\n    # Ensure all parts are NumPy arrays before concatenating\n    output_grid = np.concatenate((leading_zeros, reversed_segment, trailing_zeros))\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5803,
    "candidates_token_count": 570,
    "total_token_count": 6373,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 8.686252,
  "retries": 1
}