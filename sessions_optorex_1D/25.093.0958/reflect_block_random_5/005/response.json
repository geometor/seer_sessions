{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nReverses the contiguous sub-sequence of non-zero digits within a sequence (list or numpy array) of digits, leaving any leading or trailing zeros in their original positions.\n\n1.  Receive the input sequence of digits (e.g., as a list or NumPy array).\n2.  Find the index of the first non-zero digit in the sequence. If no non-zero digits exist, return the original sequence unchanged.\n3.  Find the index of the last non-zero digit in the sequence.\n4.  Extract the sub-sequence of leading zeros (all elements *before* the first non-zero index). This may be empty.\n5.  Extract the sub-sequence containing all elements from the first non-zero index up to and including the last non-zero index (the \"non-zero segment\").\n6.  Extract the sub-sequence of trailing zeros (all elements *after* the last non-zero index). This may be empty.\n7.  Reverse the order of the elements within the extracted \"non-zero segment\".\n8.  Construct the final output sequence by concatenating the leading zeros, the reversed non-zero segment, and the trailing zeros, in that specific order.\n9.  Return the constructed output sequence.\n\"\"\"\n\ndef find_first_nonzero_index_np(arr):\n    \"\"\"Finds the index of the first non-zero element in a NumPy array.\"\"\"\n    indices = np.where(arr != 0)[0]\n    # Return the first index if found, otherwise return -1\n    if len(indices) == 0:\n        return -1\n    return indices[0]\n\ndef find_last_nonzero_index_np(arr):\n    \"\"\"Finds the index of the last non-zero element in a NumPy array.\"\"\"\n    indices = np.where(arr != 0)[0]\n    # Return the last index if found, otherwise return -1\n    if len(indices) == 0:\n        return -1\n    return indices[-1]\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input sequence.\n\n    Args:\n        input_grid (np.ndarray): A 1D NumPy array of integers representing the sequence.\n\n    Returns:\n        np.ndarray: The transformed 1D NumPy array.\n    \"\"\"\n\n    # Ensure input is a NumPy array (might be passed as a list)\n    if not isinstance(input_grid, np.ndarray):\n        input_grid_np = np.array(input_grid)\n    else:\n        input_grid_np = input_grid\n\n    # Step 2 & 3: Find the indices of the first and last non-zero elements\n    start_index = find_first_nonzero_index_np(input_grid_np)\n\n    # Handle the edge case where the sequence contains only zeros\n    if start_index == -1:\n        # Return a copy of the original sequence/array\n        return input_grid_np.copy()\n\n    end_index = find_last_nonzero_index_np(input_grid_np)\n\n    # Step 4, 5, 6: Extract the three parts: leading zeros, non-zero segment, trailing zeros\n    leading_zeros = input_grid_np[:start_index]\n    non_zero_segment = input_grid_np[start_index : end_index + 1]\n    trailing_zeros = input_grid_np[end_index + 1 :]\n\n    # Step 7: Reverse the non-zero segment\n    # Slicing [::-1] works efficiently for reversing NumPy arrays\n    reversed_segment = non_zero_segment[::-1]\n\n    # Step 8: Reconstruct the sequence using NumPy concatenation\n    # Ensure all parts are NumPy arrays before concatenating (they already are due to slicing)\n    output_grid = np.concatenate((leading_zeros, reversed_segment, trailing_zeros))\n\n    # Step 9: Return the result\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7519,
    "candidates_token_count": 897,
    "total_token_count": 8416,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.526274,
  "retries": 1
}