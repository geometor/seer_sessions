{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nReverses the contiguous sub-sequence of non-zero digits within a NumPy array, \nleaving any leading or trailing zeros in their original positions. \nHandles arrays containing only zeros by returning an identical array.\n\"\"\"\n\nimport numpy as np\n\ndef find_first_non_zero_index(arr: np.ndarray) -> int:\n    \"\"\"\n    Finds the index of the first non-zero element in a NumPy array.\n    Returns -1 if no non-zero element is found.\n    \"\"\"\n    indices = np.nonzero(arr)[0] # Get indices of non-zero elements\n    if indices.size > 0:\n        return indices[0]\n    else:\n        return -1 # No non-zero elements found\n\ndef find_last_non_zero_index(arr: np.ndarray) -> int:\n    \"\"\"\n    Finds the index of the last non-zero element in a NumPy array.\n    Assumes at least one non-zero element exists (caller should check first).\n    Returns -1 if no non-zero element is found (for completeness, though might not be reached in typical flow).\n    \"\"\"\n    indices = np.nonzero(arr)[0] # Get indices of non-zero elements\n    if indices.size > 0:\n        return indices[-1]\n    else:\n        return -1 # Should not be reached if find_first_non_zero_index didn't return -1\n\ndef transform(input_array: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the transformation rule to the input NumPy array.\n\n    Workflow:\n    1. Find the index of the first non-zero element (`start_index`).\n    2. Handle the edge case: If no non-zero elements are found (`start_index == -1`), return a copy of the original array.\n    3. Find the index of the last non-zero element (`end_index`).\n    4. Slice the input array to extract the leading zeros part (before `start_index`).\n    5. Slice the input array to extract the non-zero block (from `start_index` to `end_index` inclusive).\n    6. Slice the input array to extract the trailing zeros part (after `end_index`).\n    7. Reverse the extracted non-zero block using NumPy slicing.\n    8. Concatenate the leading zeros, reversed non-zero block, and trailing zeros parts using np.concatenate.\n    9. Return the reconstructed NumPy array.\n    \"\"\"\n    # 1. Find the index of the first non-zero element.\n    start_index = find_first_non_zero_index(input_array)\n\n    # 2. Handle the edge case: All zeros or empty array.\n    if start_index == -1:\n        return input_array.copy() # Return a copy to avoid modifying the original if it's mutable\n\n    # 3. Find the index of the last non-zero element.\n    #    (We know at least one exists if start_index != -1)\n    end_index = find_last_non_zero_index(input_array)\n\n    # 4. Slice to get leading zeros.\n    leading_zeros = input_array[:start_index]\n\n    # 5. Slice to get the non-zero block.\n    non_zero_block = input_array[start_index : end_index + 1]\n\n    # 6. Slice to get trailing zeros.\n    trailing_zeros = input_array[end_index + 1:]\n\n    # 7. Reverse the non-zero block.\n    reversed_non_zero_block = non_zero_block[::-1]\n\n    # 8. Concatenate the parts.\n    # Ensure all parts are arrays for concatenation. Slicing NumPy arrays returns views or copies which are arrays.\n    output_array = np.concatenate((leading_zeros, reversed_non_zero_block, trailing_zeros))\n\n    # 9. Return the reconstructed array.\n    return output_array\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8938,
    "candidates_token_count": 903,
    "total_token_count": 9841,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.493594,
  "retries": 1
}