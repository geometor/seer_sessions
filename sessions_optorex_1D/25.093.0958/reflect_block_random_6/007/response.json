{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport math\n\n\"\"\"\nReverses the contiguous subsequence of a 1D NumPy array that starts at the first \nnon-zero element and ends at the last non-zero element. Leading and trailing \nzeros outside this subsequence remain in their original positions. If the array \ncontains no non-zero elements, it is returned unchanged.\n\"\"\"\n\ndef _find_first_last_nonzero_indices(arr: np.ndarray):\n    \"\"\"\n    Finds the indices of the first and last non-zero elements in a 1D array.\n\n    Args:\n        arr: The input 1D NumPy array.\n\n    Returns:\n        A tuple (start_index, end_index). Returns (None, None) if no non-zero\n        elements are found.\n    \"\"\"\n    # Find indices of all non-zero elements. np.nonzero returns a tuple of arrays,\n    # one for each dimension. For a 1D array, we take the first element of the tuple.\n    non_zero_indices = np.nonzero(arr)[0] \n    \n    # Handle case where there are no non-zero elements\n    if len(non_zero_indices) == 0:\n        return None, None \n    \n    # The first non-zero index is the minimum of the found indices\n    start_index = non_zero_indices[0]\n    # The last non-zero index is the maximum of the found indices\n    end_index = non_zero_indices[-1]\n    \n    return start_index, end_index\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Reverses the subsequence of non-zero elements within a 1D NumPy array,\n    preserving leading and trailing zeros.\n\n    Args:\n        input_grid: A 1D NumPy array of integers.\n\n    Returns:\n        A 1D NumPy array with the non-zero subsequence reversed.\n    \"\"\"\n\n    # 1. Find the index of the first and last non-zero elements.\n    start_index, end_index = _find_first_last_nonzero_indices(input_grid)\n\n    # 2. Handle Edge Case: If there are no non-zero elements, return the original input array.\n    #    We return a copy to avoid modifying the original input if it's mutable and passed by reference.\n    if start_index is None:\n        return input_grid.copy() \n\n    # 3. Extract three parts of the array based on the indices:\n    #    a. leading_zeros: Elements from the start up to the first non-zero element.\n    #       Slicing [:start_index] correctly handles the case where start_index is 0 (empty slice).\n    leading_zeros = input_grid[:start_index]\n    \n    #    b. core_subsequence: Elements from the first non-zero up to and including the last non-zero.\n    #       Slicing [start_index : end_index + 1] includes the element at end_index.\n    core_subsequence = input_grid[start_index : end_index + 1]\n    \n    #    c. trailing_zeros: Elements from after the last non-zero element to the end.\n    #       Slicing [end_index + 1:] correctly handles the case where end_index is the last element (empty slice).\n    trailing_zeros = input_grid[end_index + 1 :]\n\n    # 4. Reverse the extracted core_subsequence.\n    #    Standard Python/NumPy slicing [::-1] creates a reversed copy.\n    reversed_core_subsequence = core_subsequence[::-1] \n\n    # 5. Construct the output array by concatenating the three parts.\n    #    np.concatenate is suitable as it correctly joins NumPy arrays, including empty ones.\n    output_grid = np.concatenate((leading_zeros, reversed_core_subsequence, trailing_zeros))\n\n    # 6. Return the constructed output array.\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7940,
    "candidates_token_count": 916,
    "total_token_count": 8856,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.727752,
  "retries": 1
}