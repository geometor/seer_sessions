Task: Reverse Subsequence Between Non-Zero Boundaries

Input:
  type: list
  elements:
    type: integer
    range: 0-9
  description: A sequence of single digits.

Output:
  type: list
  elements:
    type: integer
    range: 0-9
  description: A sequence of single digits, transformed from the input.
  constraints: Must have the same length as the input list.

Transformation_Objects:
  - name: input_sequence
    type: list of integers
  - name: non_zero_subsequence
    type: list of integers
    definition: The contiguous portion of the input_sequence starting at the index of the first non-zero digit and ending at the index of the last non-zero digit (inclusive).
  - name: prefix
    type: list of integers
    definition: The contiguous portion of the input_sequence before the non_zero_subsequence (can be empty).
  - name: suffix
    type: list of integers
    definition: The contiguous portion of the input_sequence after the non_zero_subsequence (can be empty).
  - name: reversed_non_zero_subsequence
    type: list of integers
    definition: The non_zero_subsequence with the order of its elements reversed.
  - name: output_sequence
    type: list of integers

Transformation_Steps:
  1. Identify the index of the first non-zero element in the `input_sequence`. Let this be `first_nz_index`.
  2. If no non-zero element exists (`first_nz_index` is undefined or marked as not found), the `output_sequence` is identical to the `input_sequence`.
  3. Identify the index of the last non-zero element in the `input_sequence`. Let this be `last_nz_index`.
  4. If only one non-zero element exists (`first_nz_index` equals `last_nz_index`), the `output_sequence` is identical to the `input_sequence`.
  5. Define `prefix` as elements from the start of `input_sequence` up to (but not including) `first_nz_index`.
  6. Define `non_zero_subsequence` as elements from `first_nz_index` up to and including `last_nz_index`.
  7. Define `suffix` as elements from the element after `last_nz_index` to the end of `input_sequence`.
  8. Create `reversed_non_zero_subsequence` by reversing the order of elements in `non_zero_subsequence`.
  9. Construct the `output_sequence` by concatenating `prefix`, `reversed_non_zero_subsequence`, and `suffix` in that order.

Relationships:
  - `len(output_sequence)` == `len(input_sequence)`
  - Elements in `prefix` and `suffix` retain their original values and relative order within their respective sections.
  - Elements originally in `non_zero_subsequence` appear in `reversed_non_zero_subsequence` with their order inverted.