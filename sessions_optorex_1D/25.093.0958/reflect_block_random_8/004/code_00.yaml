Task: Reverse Subsequence Between Boundary Non-Zero Digits

Input:
  type: list
  elements:
    type: integer
    range: 0-9
  description: A sequence of single digits. Represented as a list of integers.
  constraints: Fixed length (e.g., 12 in examples).

Output:
  type: list
  elements:
    type: integer
    range: 0-9
  description: A sequence of single digits, transformed from the input.
  constraints: Same length as input.

Transformation_Rule:
  description: >
    Identify the subsequence bounded by the first and last non-zero digits
    in the input sequence (inclusive). Reverse the order of the digits
    within this subsequence. Digits outside this subsequence (leading and
    trailing zeros, if any) remain in their original positions.
  steps:
    1: Identify the index of the first non-zero digit (`start_index`).
    2: Identify the index of the last non-zero digit (`end_index`).
    3: If no non-zero digits are found (`start_index` is -1) or only one is found (`start_index == end_index`), the sequence remains unchanged.
    4: Otherwise, extract the three parts of the sequence:
       - `prefix`: elements before `start_index`.
       - `middle`: elements from `start_index` to `end_index` (inclusive).
       - `suffix`: elements after `end_index`.
    5: Reverse the order of elements within the `middle` subsequence.
    6: Concatenate `prefix`, the reversed `middle`, and `suffix` to form the output sequence.

Identification_Markers:
  - boundary_element_property: non-zero value (digit != 0)
  - start_boundary: position of the first occurrence of a non-zero digit.
  - end_boundary: position of the last occurrence of a non-zero digit.

Action:
  - name: reverse_subsequence
  - target: the subsequence defined by `start_boundary` and `end_boundary`.
  - elements_preserved_in_place: elements before `start_boundary` and after `end_boundary`.

Edge_Cases:
  - Input contains no non-zero digits: Output is identical to input.
  - Input contains exactly one non-zero digit: Output is identical to input.