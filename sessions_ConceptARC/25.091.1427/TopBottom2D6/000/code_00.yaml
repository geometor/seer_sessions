Task: Select and Extract Object Based on Vertical Position

Input:
  - Grid: 2D array of pixels (colors 0-9).
  - Contains:
    - Background: White pixels (color 0).
    - Objects: One or more distinct contiguous regions of non-white pixels. Each object has a single color.

Output:
  - Grid: A subgrid derived from the input.
  - Contains: Exactly one of the objects from the input grid, cropped to its minimal bounding box.

Transformation:
  - Identify_Objects: Find all distinct connected components of non-white pixels in the input grid.
  - Determine_Topmost_Row: For each identified object, find the minimum row index occupied by any of its pixels.
  - Select_Lowest_Object: Compare the topmost row indices of all objects. Select the object whose topmost row index is the maximum (i.e., the object that starts lowest down in the grid). If there's a tie (multiple objects start on the same lowest row), the examples don't explicitly cover this, but assume any one of the tied objects could be selected (or perhaps there's a secondary rule not yet revealed). However, in the given examples, there are no ties for the lowest starting row.
  - Extract_Bounding_Box: Determine the minimal bounding box (minimum and maximum row and column indices) that encloses all pixels of the selected object.
  - Generate_Output: Create a new grid corresponding to the calculated bounding box, containing only the pixels of the selected object (maintaining their relative positions) and potentially white background pixels within that box if the object is not rectangular itself (though the examples show extraction without padding, just the object pixels within the box). The examples seem to show just the object pixels relative to the top-left corner of their bounding box. Let's refine: The output grid dimensions match the bounding box size, and the pixel values are copied from the input grid within that bounding box, relative to the box's top-left corner.