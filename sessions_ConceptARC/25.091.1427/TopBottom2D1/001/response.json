{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentify all distinct contiguous objects of non-white pixels in the input grid.\nVerify that exactly two such objects exist.\nFor each object, determine its topmost row index.\nSelect the object with the smaller topmost row index (the higher object).\nCrop the selected object to its bounding box and return it as the output grid.\nPixels within the bounding box but not part of the object remain white (0).\n\"\"\"\n\ndef find_objects(grid):\n    \"\"\"\n    Finds all contiguous objects of non-white pixels in the grid.\n\n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        list: A list of dictionaries, where each dictionary represents an object\n              with keys 'color', 'pixels' (set of (r, c) tuples),\n              'bbox' (min_row, min_col, max_row, max_col), and 'top_row'.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and not visited[r, c]:\n                # Found the start of a new object\n                color = grid[r, c]\n                obj_pixels = set()\n                q = deque([(r, c)])\n                visited[r, c] = True\n                min_r, min_c = r, c\n                max_r, max_c = r, c\n\n                # Breadth-First Search (BFS) to find all connected pixels of the same color\n                while q:\n                    row, col = q.popleft()\n                    obj_pixels.add((row, col))\n\n                    # Update bounding box and top row\n                    min_r = min(min_r, row)\n                    min_c = min(min_c, col)\n                    max_r = max(max_r, row)\n                    max_c = max(max_c, col)\n\n                    # Check neighbors (4-directional)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           not visited[nr, nc] and grid[nr, nc] == color:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n\n                objects.append({\n                    'color': color,\n                    'pixels': obj_pixels,\n                    'bbox': (min_r, min_c, max_r, max_c),\n                    'top_row': min_r\n                })\n    return objects\n\ndef crop_object(grid, obj):\n    \"\"\"\n    Creates a new grid containing only the specified object,\n    cropped to its bounding box.\n\n    Args:\n        grid (np.array): The original input grid (needed for pixel values).\n        obj (dict): The object dictionary containing 'pixels' and 'bbox'.\n\n    Returns:\n        np.array: The cropped output grid.\n    \"\"\"\n    min_r, min_c, max_r, max_c = obj['bbox']\n    height = max_r - min_r + 1\n    width = max_c - min_c + 1\n    \n    # Initialize output grid with background color (white)\n    output_grid = np.zeros((height, width), dtype=int)\n\n    # Copy object pixels to the output grid, adjusting coordinates\n    for r, c in obj['pixels']:\n        output_r = r - min_r\n        output_c = c - min_c\n        # Ensure coordinates are within the bounds of the new grid\n        if 0 <= output_r < height and 0 <= output_c < width:\n             output_grid[output_r, output_c] = grid[r, c] # Use original grid color\n\n    return output_grid\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the rule: find the highest\n    of the two non-white objects and return it cropped to its bounding box.\n\n    Args:\n        input_grid (list of lists): The input grid.\n\n    Returns:\n        list of lists: The transformed output grid.\n    \"\"\"\n    # Convert input to numpy array for easier processing\n    grid_np = np.array(input_grid, dtype=int)\n\n    # Find all non-white objects in the grid\n    objects = find_objects(grid_np)\n\n    # Verify there are exactly two objects\n    if len(objects) != 2:\n        # This case shouldn't happen based on the examples, but good to handle\n        # Returning an empty grid or raising an error could be options.\n        # For now, let's return the input unchanged or an empty grid if undefined.\n        print(f\"Warning: Expected 2 objects, found {len(objects)}. Returning empty grid.\")\n        return [[]] # Or maybe return input_grid? Task description implies success case.\n\n    # Find the object with the minimum top_row index (highest object)\n    selected_object = min(objects, key=lambda obj: obj['top_row'])\n\n    # Crop the selected object to its bounding box\n    output_grid_np = crop_object(grid_np, selected_object)\n\n    # Convert the output numpy array back to a list of lists\n    output_grid = output_grid_np.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2506,
    "candidates_token_count": 1278,
    "total_token_count": 3784,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 19.659646,
  "retries": 1
}