{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\ndef find_objects(grid):\n    \"\"\"\n    Identifies all distinct contiguous objects of non-background color in the grid.\n\n    Args:\n        grid (np.ndarray): The input grid.\n\n    Returns:\n        list: A list of dictionaries, where each dictionary represents an object\n              and contains 'color' (int) and 'pixels' (set of (row, col) tuples).\n    \"\"\"\n    height, width = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n    background_color = 0\n\n    for r in range(height):\n        for c in range(width):\n            if grid[r, c] != background_color and not visited[r, c]:\n                color = grid[r, c]\n                obj_pixels = set()\n                q = deque([(r, c)])\n                visited[r, c] = True\n\n                while q:\n                    row, col = q.popleft()\n                    obj_pixels.add((row, col))\n\n                    # Explore neighbors (4-connectivity)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        if 0 <= nr < height and 0 <= nc < width and \\\n                           not visited[nr, nc] and grid[nr, nc] == color:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n                \n                if obj_pixels:\n                    objects.append({'color': color, 'pixels': obj_pixels})\n    return objects\n\ndef _process_case1(grid, objects):\n    \"\"\"Handles the case where object_count <= 3: Keep only the largest object(s).\"\"\"\n    background_color = 0\n    output_grid = np.full(grid.shape, background_color, dtype=int)\n\n    if not objects:\n        return output_grid # Return empty grid if no objects found\n\n    # Calculate areas and find max area\n    max_area = 0\n    object_areas = []\n    for obj in objects:\n        area = len(obj['pixels'])\n        object_areas.append(area)\n        if area > max_area:\n            max_area = area\n\n    # Keep only objects with max area\n    for i, obj in enumerate(objects):\n        if object_areas[i] == max_area:\n            for r, c in obj['pixels']:\n                output_grid[r, c] = obj['color']\n                \n    return output_grid\n\ndef _process_case2(grid, objects):\n    \"\"\"Handles the case where object_count > 3: Remove objects touching top/bottom.\"\"\"\n    background_color = 0\n    output_grid = np.copy(grid) # Start with a copy of the input\n    height, _ = grid.shape\n    last_row = height - 1\n\n    # Identify objects touching top or bottom border\n    objects_to_remove = []\n    for obj in objects:\n        touches_border = False\n        for r, c in obj['pixels']:\n            if r == 0 or r == last_row:\n                touches_border = True\n                break\n        if touches_border:\n            objects_to_remove.append(obj)\n\n    # Remove the identified objects from the output grid\n    for obj in objects_to_remove:\n        for r, c in obj['pixels']:\n            output_grid[r, c] = background_color\n            \n    return output_grid\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on the number of colored objects found.\n    \n    Rule:\n    - If the number of distinct colored objects is 3 or less, keep only the object(s) \n      with the largest area. All other pixels become white (0).\n    - If the number of distinct colored objects is more than 3, remove any object \n      that touches the top or bottom border of the grid by setting its pixels to \n      white (0). Keep all other objects as they are.\n    \"\"\"\n    input_np = np.array(input_grid, dtype=int)\n    \n    # 1. Identify all distinct contiguous objects\n    objects = find_objects(input_np)\n    \n    # 2. Count the total number of identified objects\n    object_count = len(objects)\n    \n    # 3. Apply transformation based on object_count\n    if object_count <= 3:\n        # 3.a. Case 1: Keep only the largest object(s)\n        output_np = _process_case1(input_np, objects)\n    else:\n        # 3.b. Case 2: Remove objects touching top/bottom borders\n        output_np = _process_case2(input_np, objects)\n        \n    # 4. Convert back to list of lists and return\n    return output_np.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4470,
    "candidates_token_count": 1153,
    "total_token_count": 5623,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.357867,
  "retries": 1
}