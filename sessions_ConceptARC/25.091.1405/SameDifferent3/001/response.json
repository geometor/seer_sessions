{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import defaultdict, deque\n\ndef find_objects(grid):\n    \"\"\"\n    Finds all contiguous objects of the same color in a grid.\n\n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        dict: A dictionary where keys are colors (int > 0) and values are lists \n              of objects. Each object is represented as a set of (row, col) tuples.\n    \"\"\"\n    height, width = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects_by_color = defaultdict(list)\n\n    for r in range(height):\n        for c in range(width):\n            # Skip background color and already visited pixels\n            if grid[r, c] == 0 or visited[r, c]:\n                continue\n\n            current_color = grid[r, c]\n            current_object_pixels = set()\n            queue = deque([(r, c)])\n            visited[r, c] = True\n\n            # Breadth-First Search (BFS) to find connected pixels of the same color\n            while queue:\n                row, col = queue.popleft()\n                current_object_pixels.add((row, col))\n\n                # Check 4 neighbors (up, down, left, right)\n                for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                    nr, nc = row + dr, col + dc\n\n                    # Check bounds\n                    if 0 <= nr < height and 0 <= nc < width:\n                        # Check color match and visited status\n                        if grid[nr, nc] == current_color and not visited[nr, nc]:\n                            visited[nr, nc] = True\n                            queue.append((nr, nc))\n            \n            # Store the found object\n            objects_by_color[current_color].append(current_object_pixels)\n\n    return objects_by_color\n\n\ndef transform(input_grid):\n    \"\"\"\n    Identifies colors that appear in only one contiguous object within the grid \n    and removes those objects (changes their color to white/0). Objects of colors \n    that appear in two or more distinct locations are kept.\n\n    Args:\n        input_grid (np.array): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.array: A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    # Convert input list of lists to numpy array for easier handling\n    input_grid_np = np.array(input_grid, dtype=int)\n    \n    # Find all objects, grouped by color\n    objects_by_color = find_objects(input_grid_np)\n\n    # Initialize the output grid as a copy of the input\n    output_grid = input_grid_np.copy()\n\n    # Iterate through each color found in the grid\n    for color, objects_list in objects_by_color.items():\n        # Check if there is only one object of this color\n        if len(objects_list) == 1:\n            # Get the pixels of the single object\n            pixels_to_remove = objects_list[0]\n            # Change the color of these pixels to white (0) in the output grid\n            for r, c in pixels_to_remove:\n                output_grid[r, c] = 0\n\n    return output_grid.tolist() # Convert back to list of lists if needed by caller\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2179,
    "candidates_token_count": 795,
    "total_token_count": 2974,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 33.278488,
  "retries": 1
}