{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nIdentifies all non-white objects in the input grid. Classifies each object as 'solid' \n(if its pixels perfectly fill its bounding box) or 'non-solid'. \nCounts the number of solid (N_solid) and non-solid (N_non_solid) objects.\nIf N_solid and N_non_solid are different, keeps only the non-solid objects in the output grid.\nIf N_solid equals N_non_solid, keeps only the solid objects in the output grid.\nAll pixels belonging to objects that are not kept become white (0) in the output.\n\"\"\"\n\ndef find_objects(grid):\n    \"\"\"\n    Finds all connected objects of the same non-background color in the grid.\n\n    Args:\n        grid: A numpy array representing the input grid.\n\n    Returns:\n        A list of tuples, where each tuple represents an object and contains:\n        (color, set of coordinates {(row, col), ...}).\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n    \n    for r in range(rows):\n        for c in range(cols):\n            color = grid[r, c]\n            # Check if the cell is part of the background or already visited\n            if color == 0 or visited[r, c]:\n                continue\n                \n            # Start BFS to find the connected object\n            obj_coords = set()\n            queue = [(r, c)]\n            visited[r, c] = True\n            \n            while queue:\n                row, col = queue.pop(0)\n                obj_coords.add((row, col))\n                \n                # Explore neighbors (orthogonal)\n                for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                    nr, nc = row + dr, col + dc\n                    \n                    # Check bounds and if the neighbor has the same color and not visited\n                    if 0 <= nr < rows and 0 <= nc < cols and \\\n                       grid[nr, nc] == color and not visited[nr, nc]:\n                        visited[nr, nc] = True\n                        queue.append((nr, nc))\n                        \n            objects.append((color, obj_coords))\n            \n    return objects\n\ndef get_bounding_box(obj_coords):\n    \"\"\"Calculates the bounding box for a set of coordinates.\"\"\"\n    if not obj_coords:\n        return None\n    rows = [r for r, c in obj_coords]\n    cols = [c for r, c in obj_coords]\n    min_r, max_r = min(rows), max(rows)\n    min_c, max_c = min(cols), max(cols)\n    return min_r, min_c, max_r, max_c\n\ndef is_solid(obj_coords, bbox):\n    \"\"\"Checks if an object's pixels fill its bounding box.\"\"\"\n    if not obj_coords or bbox is None:\n        return False\n    min_r, min_c, max_r, max_c = bbox\n    bbox_height = max_r - min_r + 1\n    bbox_width = max_c - min_c + 1\n    bbox_area = bbox_height * bbox_width\n    return len(obj_coords) == bbox_area\n\ndef transform(input_grid):\n    \"\"\"\n    Filters objects based on solidity and counts.\n\n    Args:\n        input_grid: A list of lists representing the input grid.\n\n    Returns:\n        A numpy array representing the output grid.\n    \"\"\"\n    # Convert input to numpy array\n    grid = np.array(input_grid, dtype=int)\n    rows, cols = grid.shape\n    \n    # Initialize output grid with background color\n    output_grid = np.zeros_like(grid, dtype=int)\n    \n    # Find all objects in the input grid\n    objects = find_objects(grid)\n    \n    # Classify objects and count\n    solid_objects = []\n    non_solid_objects = []\n    for color, coords in objects:\n        bbox = get_bounding_box(coords)\n        if is_solid(coords, bbox):\n            solid_objects.append((color, coords))\n        else:\n            non_solid_objects.append((color, coords))\n            \n    N_solid = len(solid_objects)\n    N_non_solid = len(non_solid_objects)\n    \n    # Determine which objects to keep\n    objects_to_keep = []\n    if N_solid > N_non_solid or N_non_solid > N_solid:\n        # Keep non-solid if counts are different\n        objects_to_keep = non_solid_objects\n    elif N_solid == N_non_solid:\n        # Keep solid if counts are equal\n        objects_to_keep = solid_objects\n        \n    # Draw the kept objects onto the output grid\n    for color, coords in objects_to_keep:\n        for r, c in coords:\n            if 0 <= r < rows and 0 <= c < cols: # Redundant check, but safe\n                output_grid[r, c] = color\n                \n    return output_grid.tolist() # Return as list of lists if required by testing framework\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3371,
    "candidates_token_count": 1230,
    "total_token_count": 4601,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 17.678095,
  "retries": 1
}