{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nApplies a gravity-like transformation to a 2D grid. Colored pixels (non-zero)\nin each column \"fall\" downwards, stacking at the bottom of the column or on top\nof other fallen pixels within the same column, while maintaining their original\nrelative vertical order. The background pixels (zero) are treated as empty space.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by applying gravity to colored pixels within each column.\n\n    Args:\n        input_grid (list of lists or np.ndarray): The input 2D grid.\n\n    Returns:\n        np.ndarray: The transformed 2D grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    grid = np.array(input_grid, dtype=int)\n    num_rows, num_cols = grid.shape\n\n    # Initialize output_grid with the same dimensions as input_grid, filled with background color (0)\n    output_grid = np.zeros_like(grid)\n\n    # Process each column independently\n    for c in range(num_cols):\n        # Extract the current column\n        column = grid[:, c]\n\n        # Find the colored pixels (non-zero values) in this column\n        colored_pixels = column[column != 0]\n\n        # Determine the number of colored pixels\n        num_colored = len(colored_pixels)\n\n        # Place the colored pixels at the bottom of the corresponding column in the output_grid\n        if num_colored > 0:\n            # The starting row index in the output grid for placing the first colored pixel\n            start_row = num_rows - num_colored\n            # Assign the collected colored pixels to the bottom part of the output column\n            output_grid[start_row:num_rows, c] = colored_pixels\n\n    return output_grid.tolist() # Return as list of lists per spec\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2430,
    "candidates_token_count": 429,
    "total_token_count": 2859,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 85.078328,
  "retries": 2
}