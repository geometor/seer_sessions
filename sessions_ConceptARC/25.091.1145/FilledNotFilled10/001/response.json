{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\ndef find_reachable_outside(grid, boundary_coords):\n    \"\"\"\n    Performs a Breadth-First Search (BFS) starting from the grid borders\n    to find all cells reachable without crossing the boundary. Excludes boundary cells themselves.\n\n    Args:\n        grid (np.array): The input grid.\n        boundary_coords (set): A set of (row, col) tuples representing boundary cells.\n\n    Returns:\n        set: A set of (row, col) tuples representing non-boundary cells reachable from the outside.\n    \"\"\"\n    rows, cols = grid.shape\n    reachable = set()\n    q = deque()\n    visited = set(boundary_coords) # Treat boundary cells as initially visited (impassable walls)\n\n    # Initialize queue with non-boundary cells on the border\n    for r in range(rows):\n        for c in [0, cols - 1]:\n            coord = (r, c)\n            if coord not in visited: # Check if it's already marked as boundary/visited\n                # Note: Boundary cells CAN be on the border. We only start BFS from NON-boundary border cells.\n                # find_reachable_outside is only interested in non-boundary cells reachable from outside.\n                # So, if a border cell is not part of the boundary itself, add it.\n                if coord not in boundary_coords:\n                    q.append(coord)\n                    reachable.add(coord)\n                visited.add(coord) # Mark border cell visited regardless\n\n    for c in range(1, cols - 1): # Avoid double-checking corners\n        for r in [0, rows - 1]:\n             coord = (r, c)\n             if coord not in visited:\n                if coord not in boundary_coords:\n                     q.append(coord)\n                     reachable.add(coord)\n                visited.add(coord)\n\n    # Perform BFS\n    while q:\n        r, c = q.popleft()\n\n        # Explore neighbors (up, down, left, right)\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n\n            # Check if neighbor is within bounds\n            if 0 <= nr < rows and 0 <= nc < cols:\n                neighbor_coord = (nr, nc)\n                # Check if neighbor has not been visited\n                if neighbor_coord not in visited"
          }
        ],
        "role": "model"
      },
      "finish_reason": 2,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4394,
    "candidates_token_count": 563,
    "total_token_count": 4957,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 71.06034,
  "retries": 1
}