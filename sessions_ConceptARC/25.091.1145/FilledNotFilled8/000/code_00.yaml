task_description: "Transforms input based on whether non-background pixels form scattered points or a filled diamond."
grid_elements:
  - type: background
    color_value: 0
    color_name: white
  - type: shape_pixels
    color_value: non-zero (e.g., 6/magenta, 3/green)
    role: defines or constitutes a diamond shape
input_patterns:
  - type: scattered_points
    description: Non-background pixels are sparse and potentially disconnected.
    example: train_1 input
  - type: filled_diamond
    description: Non-background pixels form a single connected component representing a solid diamond shape (defined by Manhattan distance from a center).
    example: train_2 input
transformations:
  - condition: input pattern is scattered_points
    action: compute and fill bounding diamond
    steps:
      - Identify the non-background color (C).
      - Find all pixels with color C (InputPixels).
      - Calculate the minimal bounding diamond (center (rc, cc), radius k) enclosing InputPixels based on Manhattan distance.
      - Generate the set of all pixels within this diamond (FilledDiamondPixels).
      - Output grid: color pixels in FilledDiamondPixels with C, others white.
  - condition: input pattern is filled_diamond
    action: extract perimeter of the diamond
    steps:
      - Identify the non-background color (C).
      - Identify the set of input pixels forming the diamond (InputPixels). (This set should match the theoretical FilledDiamondPixels calculated as above).
      - Output grid: Keep only those pixels from InputPixels that are adjacent (8-way) to at least one pixel *not* in InputPixels (i.e., background or outside the grid). Color these perimeter pixels C, others white.
relationships:
  - The output shape is directly derived from the spatial arrangement of the input's non-background pixels.
  - The transformation applied depends on the classification of the input pattern (scattered vs. filled diamond).