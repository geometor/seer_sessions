{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentify all connected components (objects) formed by non-white pixels in the \ninput grid, considering horizontal, vertical, and diagonal adjacency. \nCalculate the size (number of pixels) of each component. Select the \ncomponent with the largest size. Determine the minimal bounding box that \nencloses this largest component. Extract the rectangular region defined by \nthis bounding box from the input grid to create the output grid.\n\"\"\"\n\ndef find_connected_components(grid, target_color):\n    \"\"\"\n    Finds all connected components of a specific color in the grid.\n    Connectivity includes horizontal, vertical, and diagonal neighbors.\n\n    Args:\n        grid (np.array): The input grid.\n        target_color (int): The color of the pixels to form components.\n\n    Returns:\n        list: A list of components, where each component is a list of \n              (row, col) tuples representing the pixel coordinates.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    components = []\n\n    # Define 8 directions for neighbors (including diagonals)\n    directions = [(-1, -1), (-1, 0), (-1, 1), \n                  (0, -1),           (0, 1), \n                  (1, -1), (1, 0), (1, 1)]\n\n    for r in range(rows):\n        for c in range(cols):\n            # If we find a pixel of the target color that hasn't been visited\n            if grid[r, c] == target_color and not visited[r, c]:\n                current_component = []\n                q = deque([(r, c)])\n                visited[r, c] = True\n                \n                # Start BFS to find all connected pixels\n                while q:\n                    row, col = q.popleft()\n                    current_component.append((row, col))\n\n                    # Check all 8 neighbors\n                    for dr, dc in directions:\n                        nr, nc = row + dr, col + dc\n                        \n                        # Check bounds and if the neighbor is the target color and not visited\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] == target_color and not visited[nr, nc]:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n                \n                components.append(current_component)\n                \n    return components\n\ndef get_bounding_box(component):\n    \"\"\"\n    Calculates the bounding box coordinates for a given component.\n\n    Args:\n        component (list): A list of (row, col) tuples for the component.\n\n    Returns:\n        tuple: (min_row, max_row, min_col, max_col)\n    \"\"\"\n    if not component:\n        return None # Or handle appropriately\n\n    rows = [r for r, c in component]\n    cols = [c for r, c in component]\n    \n    min_row = min(rows)\n    max_row = max(rows)\n    min_col = min(cols)\n    max_col = max(cols)\n    \n    return min_row, max_row, min_col, max_col\n\ndef transform(input_grid):\n    \"\"\"\n    Extracts the bounding box of the largest non-white connected component \n    from the input grid.\n\n    Args:\n        input_grid (list): A list of lists representing the input grid.\n\n    Returns:\n        list: A list of lists representing the extracted output grid.\n    \"\"\"\n    \n    grid_np = np.array(input_grid, dtype=int)\n    rows, cols = grid_np.shape\n    \n    # Find the non-white color (assuming there's only one besides white=0)\n    non_white_color = -1\n    for r in range(rows):\n        for c in range(cols):\n            if grid_np[r, c] != 0:\n                non_white_color = grid_np[r, c]\n                break\n        if non_white_color != -1:\n            break\n            \n    # If the grid is entirely white or empty\n    if non_white_color == -1:\n        # Depending on requirements, return empty, original, or handle error\n        # Based on examples, this case seems unlikely. Let's return empty for now.\n        return [] \n\n    # Find all connected components of the non-white color\n    components = find_connected_components(grid_np, non_white_color)\n\n    # If no components found (shouldn't happen if non_white_color was found)\n    if not components:\n        return [] \n        \n    # Find the largest component\n    largest_component = max(components, key=len)\n    \n    # Get the bounding box of the largest component\n    min_row, max_row, min_col, max_col = get_bounding_box(largest_component)\n    \n    # Extract the subgrid defined by the bounding box\n    # Note: slicing is exclusive for the end index, so add 1\n    output_grid_np = grid_np[min_row : max_row + 1, min_col : max_col + 1]\n    \n    # Convert back to list of lists\n    output_grid = output_grid_np.tolist()\n\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2498,
    "candidates_token_count": 1249,
    "total_token_count": 3747,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 17.152559,
  "retries": 1
}