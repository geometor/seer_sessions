{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThis module transforms an input grid by identifying the least frequent non-background color, treating it as a 'frame color'. It then extracts all pixels of this frame color, determines their minimum bounding box, and creates a new output grid containing only these frame pixels (preserving their relative positions) on a white background. The output grid's size corresponds to the calculated bounding box.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef transform(input_grid):\n    \"\"\"\n    Extracts a frame defined by the least frequent non-background color and \n    creates a minimal grid containing only that frame on a white background.\n\n    Args:\n        input_grid (list[list[int]]): A 2D list representing the input grid.\n\n    Returns:\n        list[list[int]]: A 2D list representing the transformed output grid.\n    \"\"\"\n    input_array = np.array(input_grid, dtype=int)\n    background_color = 0\n\n    # 1. Identify all unique non-background colors and their counts.\n    unique_colors, counts = np.unique(input_array, return_counts=True)\n    color_counts = Counter(dict(zip(unique_colors, counts)))\n\n    # Remove background color from consideration\n    if background_color in color_counts:\n        del color_counts[background_color]\n\n    # 2. Determine the \"frame color\" (least frequent non-background color).\n    if not color_counts:\n        # Handle case with only background color or empty input\n        return [[background_color]] # Return a minimal 1x1 white grid\n\n    # Find the color with the minimum count\n    frame_color = min(color_counts, key=color_counts.get)\n\n    # 3. Find coordinates of all frame color pixels.\n    frame_pixels_coords = np.argwhere(input_array == frame_color)\n\n    # 4. Handle case where no frame pixels are found (shouldn't happen if color_counts is not empty, but good practice).\n    if frame_pixels_coords.shape[0] == 0:\n         return [[background_color]] # Return a minimal 1x1 white grid\n\n    # 5. Calculate the minimum bounding box.\n    min_r = np.min(frame_pixels_coords[:, 0])\n    max_r = np.max(frame_pixels_coords[:, 0])\n    min_c = np.min(frame_pixels_coords[:, 1])\n    max_c = np.max(frame_pixels_coords[:, 1])\n\n    # 6. Calculate the height and width of the bounding box.\n    h = max_r - min_r + 1\n    w = max_c - min_c + 1\n\n    # 7. Create a new output grid initialized with the background color.\n    output_array = np.full((h, w), background_color, dtype=int)\n\n    # 8. Place the frame pixels into the output grid, adjusting coordinates.\n    for r, c in frame_pixels_coords:\n        out_r = r - min_r\n        out_c = c - min_c\n        output_array[out_r, out_c] = frame_color\n\n    # Convert back to list of lists for the required output format\n    output_grid = output_array.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3021,
    "candidates_token_count": 767,
    "total_token_count": 3788,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.277594,
  "retries": 1
}