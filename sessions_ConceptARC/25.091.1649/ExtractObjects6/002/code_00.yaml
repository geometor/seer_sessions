task_type: object_extraction_and_composition

components:
  - role: separator
    attributes:
      color: yellow (4)
      shape: solid line (row or column spanning the grid)
      function: divides the input grid into two distinct regions
      persistence: removed in output

  - role: region
    attributes:
      count: two per input grid, defined by the separator
      content: contains a background color and one or more object colors
      processing: processed independently to extract features

  - role: background
    attributes:
      location: within a region
      color: variable (white, orange, azure observed; potentially others)
      relation_to_object: surrounds or fills space around the object(s)
      determination: generally the most frequent color in the region (excluding yellow)
      persistence: replaced by white (0) in the output feature grid

  - role: object
    attributes:
      location: within a region
      color: variable (magenta, green, red observed)
      shape: variable (diamond, square-like, T, cross observed)
      relation_to_background: distinct from the region's background color and separator color
      persistence: extracted and placed onto the output grid's white background
    subtypes:
      - type: primary_object
        attributes:
          color: the main non-background color(s) in a region
          extraction_rule: >
            Identify all pixels of the object color(s) within the region.
            Create a minimal bounding box around these pixels.
            Place these pixels into a new grid of the bounding box size,
            filled with white (0) background.
      - type: special_green_object
        attributes:
          condition: region contains both green (3) and gray (5) pixels.
          extraction_rule: >
            Identify only the green (3) pixels that are adjacent (up, down, left, or right)
            to *any non-green* pixel within that region's subgrid.
            Create a minimal bounding box around these perimeter pixels.
            Place these perimeter pixels into a new grid of the bounding box size,
            filled with white (0) background. Gray (5) pixels are discarded.

actions:
  - name: identify_separator
    inputs: input_grid
    outputs: separator_line (position, orientation), split_orientation (horizontal/vertical)
    description: Find the solid yellow line dividing the grid.

  - name: split_grid
    inputs: input_grid, separator_line
    outputs: list_of_subgrids
    description: Divide the input grid into subgrids based on the separator, excluding the separator line itself.

  - name: extract_feature_representation
    inputs: subgrid
    outputs: processed_subgrid (object/feature on white background, cropped), dimensions (height, width)
    description: >
      Check for the special green(3)/gray(5) condition.
      If true, apply the 'special_green_object' extraction rule (perimeter).
      Otherwise, apply the 'primary_object' extraction rule (extract all object pixels).
      Return the resulting grid cropped to the minimal bounding box of the feature, along with its dimensions.

  - name: standardize_dimensions
    inputs: list_of_processed_subgrids, split_orientation
    outputs: list_of_standardized_subgrids
    description: >
      If split_orientation is vertical (row separator), find the maximum width among processed subgrids. Pad narrower subgrids horizontally with white(0) to match the max width, centering the content.
      If split_orientation is horizontal (column separator), find the maximum height among processed subgrids. Pad shorter subgrids vertically with white(0) to match the max height, centering the content.

  - name: combine_subgrids
    inputs: list_of_standardized_subgrids, split_orientation
    outputs: output_grid
    description: Concatenate the standardized subgrids according to the original split orientation (vertically for vertical split/row separator, horizontally for horizontal split/column separator).

relationships:
  - type: spatial
    description: Relative positions of regions (top/bottom or left/right) are preserved in the output concatenation.
  - type: conditional_processing
    description: The object extraction logic changes specifically when both green (3) and gray (5) are present in a region.
  - type: dimensional_alignment
    description: The dimension orthogonal to the split axis (width for vertical split, height for horizontal split) is standardized across processed subgrids before combination using padding and centering.
  - type: color_mapping
    description: Original background colors are discarded; output background is always white (0). Object colors are preserved unless discarded (like gray in the special case).