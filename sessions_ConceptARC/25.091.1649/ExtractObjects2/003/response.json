{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentify the unique non-white color C such that all pixels of color C in the input grid form exactly one connected object (using 8-way adjacency), AND this single object does not touch the grid boundary (outermost rows/columns).\nDetermine the bounding box of this single object.\nCreate an output grid sized to this bounding box.\nPopulate the output grid: place the target color C at the relative positions corresponding to the object's pixels in the input, and fill the rest with white (0).\n\"\"\"\n\ndef find_objects_and_check_boundary(grid, color):\n    \"\"\"\n    Finds all connected objects of a specific color and checks if they touch the boundary.\n\n    Args:\n        grid (np.array): The input grid.\n        color (int): The color of the objects to find.\n\n    Returns:\n        list[dict]: A list where each element is a dictionary containing:\n                    'coords': set of (row, col) tuples for the object's pixels.\n                    'touches_boundary': boolean indicating if the object touches the grid edge.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects_data = []\n    # Define 8-way neighbors (including diagonals)\n    neighbors = [(-1, -1), (-1, 0), (-1, 1),\n                 (0, -1),           (0, 1),\n                 (1, -1), (1, 0), (1, 1)]\n\n    for r in range(rows):\n        for c in range(cols):\n            # If it's the target color and not yet visited, start a search (BFS)\n            if grid[r, c] == color and not visited[r, c]:\n                current_object_coords = set()\n                q = deque([(r, c)])\n                visited[r, c] = True\n                touches_boundary = False # Flag for this specific object\n\n                while q:\n                    curr_r, curr_c = q.popleft()\n                    current_object_coords.add((curr_r, curr_c))\n\n                    # Check if the current pixel touches the boundary\n                    if curr_r == 0 or curr_r == rows - 1 or curr_c == 0 or curr_c == cols - 1:\n                        touches_boundary = True\n\n                    # Explore neighbors\n                    for dr, dc in neighbors:\n                        nr, nc = curr_r + dr, curr_c + dc\n\n                        # Check bounds and if neighbor is the target color and not visited\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] == color and not visited[nr, nc]:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n                \n                # Store data for the found object\n                objects_data.append({\n                    'coords': current_object_coords,\n                    'touches_boundary': touches_boundary\n                })\n\n    return objects_data\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n    \"\"\"\n    input_array = np.array(input_grid, dtype=int)\n    rows, cols = input_array.shape\n    \n    # Find unique non-white colors\n    unique_colors = np.unique(input_array)\n    non_white_colors = unique_colors[unique_colors != 0]\n\n    target_color = -1\n    target_object_coords = None\n\n    # Identify the target color and object\n    # Loop through each non-white color found in the grid\n    for color in non_white_colors:\n        # Find all objects of this color and check their boundary contact\n        objects_data = find_objects_and_check_boundary(input_array, color)\n        \n        # Check if this color meets the criteria: exactly one object AND it does not touch the boundary\n        if len(objects_data) == 1 and not objects_data[0]['touches_boundary']:\n            target_color = color\n            target_object_coords = objects_data[0]['coords'] # Get the set of coordinates\n            break # Found the unique target color, no need to check others\n\n    # Handle case where no suitable object is found\n    if target_color == -1 or not target_object_coords:\n        # Return an empty or default grid if no target object is identified\n        # Based on ARC tasks, this usually means the logic is incomplete,\n        # but for robustness, return a small default grid.\n        return [[0]] \n\n    # Determine the bounding box of the target object\n    min_row = rows\n    max_row = -1\n    min_col = cols\n    max_col = -1\n    for r, c in target_object_coords:\n        min_row = min(min_row, r)\n        max_row = max(max_row, r)\n        min_col = min(min_col, c)\n        max_col = max(max_col, c)\n\n    # Calculate output grid dimensions\n    output_height = max_row - min_row + 1\n    output_width = max_col - min_col + 1\n\n    # Create the output grid, initialized with white (0)\n    output_array = np.zeros((output_height, output_width), dtype=int)\n\n    # Populate the output grid with the target object's pixels\n    for r, c in target_object_coords:\n        # Calculate relative coordinates within the bounding box\n        relative_r = r - min_row\n        relative_c = c - min_col\n        # Place the target color in the output grid at the relative position\n        output_array[relative_r, relative_c] = target_color\n\n    # Convert the output numpy array back to a list of lists\n    output_grid = output_array.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 13020,
    "candidates_token_count": 1364,
    "total_token_count": 14384,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.848926,
  "retries": 1
}