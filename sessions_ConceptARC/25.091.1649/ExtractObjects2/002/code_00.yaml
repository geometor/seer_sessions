task_description: Extract a specific object from the input grid based on color, connectivity, and boundary non-contact properties. Crop the object to its bounding box, retaining only its color against a white background.

definitions:
  - object: A contiguous group of pixels of the same non-white color. Connectivity is 8-way (includes diagonals).
  - background_pixel: A pixel with color white (0).
  - figure_pixel: A pixel belonging to the target object.
  - other_pixel: A non-white pixel that is not part of the target object.
  - grid_boundary: The set of pixels in the first or last row, or the first or last column of the input grid.
  - target_object: The single, contiguous object identified for extraction.
  - target_color: The color of the target_object.
  - bounding_box: The smallest rectangle enclosing all pixels of the target_object in the input grid.

selection_criteria:
  - criterion: Find all unique non-white colors in the input grid.
  - criterion: For each color, count the number of distinct, contiguous objects formed by pixels of that color.
  - criterion: For each color forming exactly one object, check if any pixel of that object lies on the grid_boundary.
  - criterion: The target_color is the unique color C such that:
      1. All pixels of color C form exactly one object.
      2. That single object does not contain any pixels on the grid_boundary.

transformation_steps:
  - step: Identify the target_color and the set of coordinates (pixels) belonging to the target_object based on the selection_criteria.
  - step: Determine the bounding_box (min_row, max_row, min_col, max_col) enclosing all pixels of the target_object.
  - step: Create an output grid with dimensions derived from the bounding_box (height = max_row - min_row + 1, width = max_col - min_col + 1). Initialize all pixels to white (0).
  - step: Iterate through the coordinates (r, c) of the pixels belonging to the target_object.
  - step: For each target_object pixel at (r, c), set the corresponding pixel in the output grid at relative coordinates (r - min_row, c - min_col) to the target_color.

examples_analysis:
  - example: train_1
    input_grid_size: 14x14
    candidate_colors: {Blue(1): {count: 13, touches_boundary: True}, Green(3): {count: 1, touches_boundary: False}}
    target_color: Green (3)
    target_object_boundary_contact: False
    bounding_box: rows 3-9, cols 3-9 (size 7x7)
    output_derivation: Extract Green(3) pixels within input[3:10, 3:10], place into 7x7 grid with white(0) background.
  - example: train_2
    input_grid_size: 16x16
    candidate_colors: {Red(2): {count: 1, touches_boundary: True}, Yellow(4): {count: 3}, Gray(5): {count: 1, touches_boundary: True}, Magenta(6): {count: 3}, Azure(8): {count: 1, touches_boundary: True}, Maroon(9): {count: 1, touches_boundary: False}}
    target_color: Maroon (9)
    target_object_boundary_contact: False
    bounding_box: rows 3-7, cols 3-7 (size 5x5)
    output_derivation: Extract Maroon(9) pixels within input[3:8, 3:8], place into 5x5 grid with white(0) background.
  - example: train_3
    input_grid_size: 11x11
    candidate_colors: {Yellow(4): {count: 5, touches_boundary: True}, Magenta(6): {count: 1, touches_boundary: False}}
    target_color: Magenta (6)
    target_object_boundary_contact: False
    bounding_box: rows 4-7, cols 4-6 (size 4x3)
    output_derivation: Extract Magenta(6) pixels within input[4:8, 4:7], place into 4x3 grid with white(0) background.