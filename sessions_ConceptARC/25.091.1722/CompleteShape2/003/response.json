{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Dict, Set, Tuple\n\n\"\"\"\nTransforms the input grid by filling white pixels (0) in specific rows and columns.\n\nThe transformation rule identifies rows and columns in the *original* input grid\nthat meet two criteria:\n1. They contain exactly one unique non-white color.\n2. They contain at least two instances (pixels) of that single non-white color.\n\nIf a row meets these criteria, all white pixels (0) in that corresponding row\nof a *working copy* grid are filled with the identified non-white color.\nThis process is done for all qualifying rows first.\n\nThen, if a column meets the same criteria (based on the original input grid),\nall white pixels (0) currently present in that corresponding column of the\n*working copy* grid are filled with the identified non-white color. This process\nis done for all qualifying columns after the row processing is complete.\n\nThe final state of the working copy grid is returned.\n\"\"\"\n\ndef _get_non_white_info(line: np.ndarray) -> Tuple[Set[int], Dict[int, int]]:\n    \"\"\"\n    Analyzes a 1D array (row or column) to find unique non-white colors\n    and their counts.\n\n    Args:\n        line: A 1D numpy array representing a row or column.\n\n    Returns:\n        A tuple containing:\n        - A set of unique non-white colors found in the line.\n        - A dictionary mapping each non-white color to its count.\n    \"\"\"\n    unique_colors = set()\n    counts = {}\n    for color in line:\n        if color != 0:\n            unique_colors.add(color)\n            counts[color] = counts.get(color, 0) + 1\n    return unique_colors, counts\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Applies the row and column completion transformation to the input grid.\n\n    Args:\n        input_grid: A list of lists representing the input grid.\n\n    Returns:\n        A list of lists representing the transformed output grid.\n    \"\"\"\n    # Convert input to numpy array for easier processing\n    input_np = np.array(input_grid, dtype=int)\n    # Initialize output_grid as a copy of the input; this grid will be modified\n    output_np = np.copy(input_np)\n    height, width = input_np.shape\n\n    # --- Row Processing ---\n    # Iterate through each row of the *original* input grid\n    for r in range(height):\n        row = input_np[r, :]\n        # Get unique non-white colors and their counts for this row\n        unique_colors, counts = _get_non_white_info(row)\n\n        # Check if the row meets the criteria: exactly one non-white color AND more than one instance\n        if len(unique_colors) == 1:\n            fill_color = list(unique_colors)[0] # Get the single non-white color\n            if counts.get(fill_color, 0) > 1:\n                # Iterate through the pixels of this row in the *output* grid\n                for c in range(width):\n                    # If the pixel in the output grid is currently white, fill it\n                    if output_np[r, c] == 0:\n                        output_np[r, c] = fill_color\n\n    # --- Column Processing ---\n    # Iterate through each column of the *original* input grid\n    for c in range(width):\n        col = input_np[:, c]\n        # Get unique non-white colors and their counts for this column\n        unique_colors, counts = _get_non_white_info(col)\n\n        # Check if the column meets the criteria: exactly one non-white color AND more than one instance\n        if len(unique_colors) == 1:\n            fill_color = list(unique_colors)[0] # Get the single non-white color\n            if counts.get(fill_color, 0) > 1:\n                # Iterate through the pixels of this column in the *output* grid\n                for r in range(height):\n                    # If the pixel in the output grid is currently white, fill it\n                    if output_np[r, c] == 0:\n                        output_np[r, c] = fill_color\n\n    # Convert the final numpy array back to a list of lists\n    return output_np.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7737,
    "candidates_token_count": 1021,
    "total_token_count": 8758,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.760139,
  "retries": 1
}