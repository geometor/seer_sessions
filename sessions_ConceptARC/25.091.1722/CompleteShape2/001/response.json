{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Set, Tuple\n\n\"\"\"\nTransforms the input grid based on row and column completion rules.\n\n1. Creates a copy of the input grid to serve as the output grid.\n2. Identifies rows in the original input grid that contain exactly one unique non-white color alongside white (0) pixels.\n3. For each such identified row, fills all white (0) pixels in that corresponding row of the output grid with the identified non-white color.\n4. Identifies columns in the original input grid that contain exactly one unique non-white color alongside white (0) pixels.\n5. For each such identified column, fills all white (0) pixels in that corresponding column of the output grid with the identified non-white color.\n6. Returns the modified output grid.\n\nThe row and column filling operations are performed sequentially (rows first, then columns), modifying the same output grid. The check for whether a pixel should be filled is based on its state in the *current* output grid (i.e., it must be white (0) at the time of the fill operation). The determination of *which* rows/columns to fill and *what* color to use is based solely on the original input grid.\n\"\"\"\n\ndef _get_unique_non_white(line: np.ndarray) -> Set[int]:\n    \"\"\"Finds the unique non-white colors in a 1D array (row or column).\"\"\"\n    return set(color for color in line if color != 0)\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Applies the row and column completion transformation to the input grid.\n    \"\"\"\n    # Convert input to numpy array for easier slicing and manipulation\n    input_np = np.array(input_grid, dtype=int)\n    # Initialize output_grid as a copy of the input\n    output_np = np.copy(input_np)\n    height, width = input_np.shape\n\n    # --- Row Processing ---\n    # Iterate through each row of the *original* input grid\n    for r in range(height):\n        row = input_np[r, :]\n        # Find unique non-white colors in this row\n        unique_colors = _get_unique_non_white(row)\n\n        # Check if the row is 'completable' (exactly one non-white color)\n        if len(unique_colors) == 1:\n            fill_color = unique_colors.pop()\n            # Iterate through the pixels of this row in the *output* grid\n            for c in range(width):\n                # If the pixel in the output grid is currently white, fill it\n                if output_np[r, c] == 0:\n                    output_np[r, c] = fill_color\n\n    # --- Column Processing ---\n    # Iterate through each column of the *original* input grid\n    for c in range(width):\n        col = input_np[:, c]\n        # Find unique non-white colors in this column\n        unique_colors = _get_unique_non_white(col)\n\n        # Check if the column is 'completable' (exactly one non-white color)\n        if len(unique_colors) == 1:\n            fill_color = unique_colors.pop()\n            # Iterate through the pixels of this column in the *output* grid\n            for r in range(height):\n                # If the pixel in the output grid is currently white, fill it\n                if output_np[r, c] == 0:\n                    output_np[r, c] = fill_color\n\n    # Convert the final numpy array back to a list of lists\n    return output_np.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2559,
    "candidates_token_count": 834,
    "total_token_count": 3393,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 19.356118,
  "retries": 1
}