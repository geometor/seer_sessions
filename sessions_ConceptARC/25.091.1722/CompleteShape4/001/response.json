{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nIdentify two parallel lines (horizontal or vertical) of the same non-white color in the input grid. \nReplace them with two parallel lines of the same color but rotated 90 degrees. \nThe span of the new lines is adjusted inwards by one unit relative to the original lines' boundaries.\nFor example, if the input has horizontal lines from column C1 to C2 at rows R1 and R2, \nthe output will have vertical lines from row R1+1 to R2-1 at columns C1 and C2. \nConversely, if the input has vertical lines from row R1 to R2 at columns C1 and C2, \nthe output will have horizontal lines from column C1+1 to C2-1 at rows R1 and R2.\n\"\"\"\n\ndef find_colored_pixels(grid):\n    \"\"\"Finds the coordinates and color of all non-white pixels.\"\"\"\n    rows, cols = np.where(grid != 0)\n    if len(rows) == 0:\n        return None, None, None # No colored pixels found\n    color = grid[rows[0], cols[0]]\n    # Verify all colored pixels have the same color\n    for r, c in zip(rows, cols):\n        if grid[r, c] != color:\n            # This case shouldn't happen based on examples, but good to check\n            return None, None, None \n    coords = list(zip(rows, cols))\n    return coords, color, (grid.shape[0], grid.shape[1])\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by rotating the two parallel lines by 90 degrees \n    and adjusting their span inwards.\n    \"\"\"\n    input_grid_np = np.array(input_grid)\n    height, width = input_grid_np.shape\n\n    # Find all non-white pixels, their color, and grid dimensions\n    coords, color, dims = find_colored_pixels(input_grid_np)\n\n    if coords is None:\n        # Handle cases with no colored pixels or inconsistent colors if needed\n        # For this problem, assume valid input as per examples\n        return input_grid # Or return an empty grid of same size\n\n    # Separate row and column indices\n    rows = sorted(list(set(r for r, c in coords)))\n    cols = sorted(list(set(c for r, c in coords)))\n\n    # Initialize the output grid with white (0)\n    output_grid = np.zeros_like(input_grid_np)\n\n    # Determine orientation and boundaries\n    if len(rows) == 2 and len(cols) > 1: # Horizontal lines in input\n        r1, r2 = rows[0], rows[1]\n        c1, c2 = cols[0], cols[-1]\n        # Draw vertical lines in output, adjusted inwards\n        # Ensure indices stay within bounds after adjustment\n        start_row = r1 + 1\n        end_row = r2 - 1\n        if start_row <= end_row: # Check if the lines have non-zero length after adjustment\n            output_grid[start_row : end_row + 1, c1] = color\n            output_grid[start_row : end_row + 1, c2] = color\n\n    elif len(cols) == 2 and len(rows) > 1: # Vertical lines in input\n        c1, c2 = cols[0], cols[1]\n        r1, r2 = rows[0], rows[-1]\n        # Draw horizontal lines in output, adjusted inwards\n        # Ensure indices stay within bounds after adjustment\n        start_col = c1 + 1\n        end_col = c2 - 1\n        if start_col <= end_col: # Check if the lines have non-zero length after adjustment\n            output_grid[r1, start_col : end_col + 1] = color\n            output_grid[r2, start_col : end_col + 1] = color\n            \n    # If neither case matches, return the empty grid (or handle as an error/edge case)\n    # Based on provided examples, one of the above conditions should always be met.\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3193,
    "candidates_token_count": 971,
    "total_token_count": 4164,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.446389,
  "retries": 1
}