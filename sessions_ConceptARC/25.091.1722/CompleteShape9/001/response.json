{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef find_main_color(grid):\n    \"\"\"\n    Finds the most frequent non-background (non-zero) color in the grid.\n    \n    Args:\n        grid (np.array): The input grid.\n        \n    Returns:\n        int: The most frequent non-zero color, or 0 if only background exists.\n    \"\"\"\n    # Flatten the grid to easily count colors\n    colors = grid.flatten()\n    \n    # Count frequencies of non-zero colors\n    color_counts = Counter(c for c in colors if c != 0)\n    \n    # If no non-zero colors are found, return 0 (background color)\n    if not color_counts:\n        return 0\n        \n    # Return the color with the highest frequency\n    # most_common(1) returns a list like [(color, count)], so we access [0][0]\n    main_color = color_counts.most_common(1)[0][0]\n    return main_color\n\ndef transform(input_grid):\n    \"\"\"\n    Identifies the single most frequent non-white color (C) in the input grid.\n    Creates an output grid initially identical to the input.\n    Iterates through each white pixel (0) in the input grid.\n    If a white pixel has either:\n    1. All four cardinal neighbors with color C, OR\n    2. Exactly two opposite cardinal neighbors (North/South or East/West) with color C,\n    then changes that pixel's color to C in the output grid.\n    Returns the modified output grid.\n    \"\"\"\n    # Convert input list of lists to a numpy array for efficient processing\n    input_grid_np = np.array(input_grid, dtype=int)\n    height, width = input_grid_np.shape\n\n    # Find the main color C based on frequency (ignoring background 0)\n    main_color = find_main_color(input_grid_np)\n\n    # If no main color is found (e.g., grid is all white), return the original grid\n    if main_color == 0:\n        # Convert back to list of lists format for consistency\n        return input_grid_np.tolist()\n\n    # Initialize the output grid as a copy of the input grid\n    # Changes will be made to this copy\n    output_grid = np.copy(input_grid_np)\n\n    # Iterate through each pixel (cell) in the grid using row (r) and column (c) indices\n    for r in range(height):\n        for c in range(width):\n            # We only consider modifying pixels that are currently white (0)\n            if input_grid_np[r, c] == 0:\n                \n                # Check the color of the four cardinal neighbors\n                # Use default None if neighbor is out of bounds\n                north = input_grid_np[r-1, c] if r > 0 else None\n                south = input_grid_np[r+1, c] if r < height - 1 else None\n                west = input_grid_np[r, c-1] if c > 0 else None\n                east = input_grid_np[r, c+1] if c < width - 1 else None\n                \n                # Check if neighbors match the main color\n                north_is_main = (north == main_color)\n                south_is_main = (south == main_color)\n                west_is_main = (west == main_color)\n                east_is_main = (east == main_color)\n                \n                # Count how many neighbors match the main color\n                main_color_neighbor_count = sum([north_is_main, south_is_main, west_is_main, east_is_main])\n\n                # Condition 1: The pixel is surrounded by the main color (all 4 neighbors)\n                # This implicitly requires the pixel not to be on the border\n                is_surrounded = (main_color_neighbor_count == 4) \n                                 # The count automatically handles border cases; if count is 4, it cannot be on border.\n\n                # Condition 2: Exactly 2 neighbors match, and they are opposite pairs\n                opposite_pair_match = (main_color_neighbor_count == 2 and \n                                       ((north_is_main and south_is_main) or \\\n                                        (west_is_main and east_is_main)))\n\n                # If either condition is met, fill the white pixel with the main color\n                if is_surrounded or opposite_pair_match:\n                    output_grid[r, c] = main_color\n\n    # Return the modified grid, converted back to list of lists format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3569,
    "candidates_token_count": 1087,
    "total_token_count": 4656,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 30.718094,
  "retries": 1
}