{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentifies all distinct contiguous non-white objects in the input grid, \nconsidering diagonal adjacency. Determines the object whose topmost pixel \nhas the minimum row index (the \"highest\" object). Creates an output grid \nof the same dimensions containing only this highest object and the original \nbackground pixels (white, 0). All other pixels are set to white.\n\"\"\"\n\ndef find_objects(grid):\n    \"\"\"\n    Finds all contiguous objects of non-background colors in the grid.\n\n    Args:\n        grid (np.ndarray): The input grid.\n\n    Returns:\n        list: A list of tuples, where each tuple represents an object\n              and contains (color, set_of_coordinates).\n              Returns an empty list if no non-background objects are found.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n    \n    # Define 8 neighbors (including diagonals)\n    neighbors = [(-1, -1), (-1, 0), (-1, 1),\n                 (0, -1),           (0, 1),\n                 (1, -1), (1, 0), (1, 1)]\n\n    for r in range(rows):\n        for c in range(cols):\n            # Check if the pixel is non-background and not visited\n            if grid[r, c] != 0 and not visited[r, c]:\n                color = grid[r, c]\n                obj_coords = set()\n                q = deque([(r, c)])\n                visited[r, c] = True\n                \n                # Start Breadth-First Search (BFS)\n                while q:\n                    row, col = q.popleft()\n                    obj_coords.add((row, col))\n                    \n                    # Explore neighbors\n                    for dr, dc in neighbors:\n                        nr, nc = row + dr, col + dc\n                        \n                        # Check bounds and if neighbor is part of the same object\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           not visited[nr, nc] and grid[nr, nc] == color:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n                            \n                objects.append((color, obj_coords))\n                \n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by keeping only the highest non-white object.\n\n    Args:\n        input_grid (np.ndarray): A 2D NumPy array representing the input grid.\n\n    Returns:\n        np.ndarray: A 2D NumPy array representing the output grid with only\n                    the highest object preserved.\n    \"\"\"\n    # Initialize output_grid with background color (0)\n    output_grid = np.zeros_like(input_grid)\n    \n    # Find all non-white objects in the input grid\n    objects = find_objects(input_grid)\n    \n    # If no objects are found, return the empty grid\n    if not objects:\n        return output_grid\n        \n    # Find the highest object (minimum top row index)\n    highest_object = None\n    min_top_row = float('inf')\n    \n    for color, coords in objects:\n        # Find the minimum row index for the current object\n        current_min_row = min(r for r, c in coords)\n        \n        # Update highest object if this one is higher\n        if current_min_row < min_top_row:\n            min_top_row = current_min_row\n            highest_object = (color, coords)\n            \n    # If a highest object was found (should always happen if objects is not empty)\n    if highest_object:\n        highest_color, highest_coords = highest_object\n        # Populate the output grid with the pixels of the highest object\n        for r, c in highest_coords:\n            output_grid[r, c] = highest_color\n            \n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2427,
    "candidates_token_count": 925,
    "total_token_count": 3352,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.302476,
  "retries": 1
}