{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nCrop the input grid to the minimal bounding box containing the non-white object.\n\n1. Scan the input grid to locate all pixels that have a color other than white (0).\n2. Find the coordinates (row and column indices) of the top-most, bottom-most,\n   left-most, and right-most non-white pixels.\n3. Define a rectangular region (bounding box) using these minimum and maximum row\n   and column indices.\n4. Create the output grid by extracting the pixels from the input grid that fall\n   within this defined bounding box.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Extracts the minimal bounding box containing non-white pixels from the input grid.\n\n    Args:\n        input_grid (list[list[int]]): A 2D list representing the input grid.\n\n    Returns:\n        list[list[int]]: A 2D list representing the cropped output grid.\n    \"\"\"\n    # Convert the input grid to a NumPy array for easier manipulation\n    grid_np = np.array(input_grid, dtype=int)\n\n    # Find the coordinates (rows, cols) of all non-white pixels (value != 0)\n    non_white_coords = np.argwhere(grid_np != 0)\n\n    # If there are no non-white pixels, return an empty grid or handle as appropriate\n    # Based on examples, we expect at least one non-white pixel.\n    if non_white_coords.size == 0:\n        return [] # Or potentially return the original grid, depends on spec if this happens\n\n    # Determine the minimum and maximum row and column indices\n    min_row = non_white_coords[:, 0].min()\n    max_row = non_white_coords[:, 0].max()\n    min_col = non_white_coords[:, 1].min()\n    max_col = non_white_coords[:, 1].max()\n\n    # Extract the subgrid defined by the bounding box\n    # Slicing includes the start index but excludes the end index, so add 1 to max indices\n    output_grid_np = grid_np[min_row : max_row + 1, min_col : max_col + 1]\n\n    # Convert the NumPy array back to a list of lists\n    output_grid = output_grid_np.tolist()\n\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2534,
    "candidates_token_count": 544,
    "total_token_count": 3078,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 8.289407,
  "retries": 1
}