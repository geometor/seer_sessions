{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import Tuple, Optional, List, Set\n\n\"\"\"\nTransformation Rule:\n\n1. Identify the unique vertical line in the input grid. This line consists of pixels of a single non-background color (`V_color`) and background pixels (0) in a single column (`C`).\n2. Iterate through each row (`R`) of the grid.\n3. For each row `R`, analyze the intersection point `(R, C)` and the composition of colors in the row.\n4. Classify the intersection based on the row's colors:\n    a. **Pure Intersection:** The row `R` contains exactly one unique non-background color `H_color`, AND the intersection pixel `grid[R, C]` has this color `H_color`. The required change is to set the intersection pixel to `V_color`.\n    b. **Non-Pure Intersection:** The row `R` contains multiple unique non-background colors, AND the intersection pixel `grid[R, C]` has the vertical line's color `V_color`, AND there is exactly one *other* non-background color `H_dom_color` present in the row. The required change is to set the intersection pixel to `H_dom_color`.\n5. Collect all required changes for both pure and non-pure intersections.\n6. Apply the changes with priority: If any pure intersection changes were identified, apply *only* those changes. Otherwise (if no pure changes were identified), apply all the non-pure intersection changes.\n7. Return the modified grid. Pixels not part of a prioritized change remain unchanged.\n\"\"\"\n\ndef find_vertical_line(grid: np.ndarray) -> Optional[Tuple[int, int]]:\n    \"\"\"\n    Finds the column index and color of the unique vertical line.\n    A vertical line column contains only background (0) and one other color.\n    Returns (column_index, line_color) or None if not found.\n    \"\"\"\n    height, width = grid.shape\n    for c in range(width):\n        col_pixels = grid[:, c]\n        # Find unique non-zero colors in the column\n        non_background_pixels = col_pixels[col_pixels != 0]\n        unique_colors = np.unique(non_background_pixels)\n        \n        # Check if there's exactly one non-background color\n        if len(unique_colors) == 1:\n            # Check if all pixels are either background or this unique color\n            line_color = unique_colors[0]\n            is_line_column = np.all((col_pixels == 0) | (col_pixels == line_color))\n            if is_line_column:\n                return c, line_color\n    return None\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Applies the transformation rule based on vertical line intersections\n    and row color composition with priority for 'pure' intersections.\n    \"\"\"\n    # Convert input list of lists to a NumPy array for easier manipulation\n    grid = np.array(input_grid, dtype=np.int8)\n    # Create a copy to modify, which will become the output\n    output_grid = np.copy(grid)\n    height, width = grid.shape\n\n    # 1. Identify the unique vertical line (column index C, color V_color)\n    line_info = find_vertical_line(grid)\n    if line_info is None:\n        # If no vertical line is found (shouldn't happen based on examples), return original grid\n        return input_grid \n    v_col, v_color = line_info\n\n    # 2. Initialize lists to store required changes based on rules\n    pure_rule_changes: List[Tuple[int, int, int]] = [] # Stores (row, col, new_color)\n    non_pure_rule_changes: List[Tuple[int, int, int]] = [] # Stores (row, col, new_color)\n\n    # 3. Iterate through each row to analyze intersections\n    for r in range(height):\n        intersect_color = grid[r, v_col]\n\n        # 3a. Skip if the intersection point is background color\n        if intersect_color == 0:\n            continue\n\n        # 3b. Analyze colors in the current row\n        row = grid[r, :]\n        non_background_row_pixels = row[row != 0]\n        unique_row_colors: Set[int] = set(np.unique(non_background_row_pixels))\n\n        # 4a. Check for Pure Intersection Rule\n        if len(unique_row_colors) == 1:\n            h_color = list(unique_row_colors)[0]\n            # Condition: Row has only one non-bg color (h_color) AND intersect pixel IS h_color\n            if intersect_color == h_color:\n                # Store the required change: intersect pixel becomes v_color\n                pure_rule_changes.append((r, v_col, v_color))\n\n        # 4b. Check for Non-Pure Intersection Rule\n        elif len(unique_row_colors) > 1:\n            # Condition: Intersect pixel IS v_color\n            if intersect_color == v_color:\n                other_colors = unique_row_colors - {v_color}\n                # Condition: Exactly one OTHER non-bg color exists in the row\n                if len(other_colors) == 1:\n                    h_dom_color = list(other_colors)[0]\n                    # Store the required change: intersect pixel becomes h_dom_color\n                    non_pure_rule_changes.append((r, v_col, h_dom_color))\n\n    # 5. Apply Changes Based on Priority\n    # 5a. If pure changes exist, apply ONLY them\n    if pure_rule_changes:\n        for r_change, c_change, target_color in pure_rule_changes:\n            output_grid[r_change, c_change] = target_color\n    # 5b. Else (no pure changes), apply non-pure changes (if any)\n    elif non_pure_rule_changes:\n        for r_change, c_change, target_color in non_pure_rule_changes:\n            output_grid[r_change, c_change] = target_color\n\n    # 6. Return the modified grid converted back to list of lists format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 11321,
    "candidates_token_count": 1469,
    "total_token_count": 12790,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 18.692432,
  "retries": 1
}