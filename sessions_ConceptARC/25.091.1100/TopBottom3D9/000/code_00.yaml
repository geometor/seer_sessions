task_elements:
  common:
    - grid_representation: 2D array of integers (colors).
    - background_color: White (0) consistently present and mostly framing the content. Remains unchanged in output.
    - number_of_non_background_colors: Exactly two distinct colors per input grid.
    - transformation_type: Color replacement affecting only the non-background colors.
  entities:
    - object: Background
      properties:
        - color: 0 (White)
        - role: Canvas, Frame, Potential Hole Filler
    - object: Color Region 1 (C1)
      properties:
        - color: Varies (e.g., Blue(1), Red(2), Magenta(6))
        - count: Number of pixels of this color.
        - spatial_relation: Adjacent to Background and Color Region 2.
        - topology: May or may not surround a Background Hole.
    - object: Color Region 2 (C2)
      properties:
        - color: Varies (e.g., Green(3), Yellow(4), Azure(8))
        - count: Number of pixels of this color.
        - spatial_relation: Adjacent to Background and Color Region 1.
        - topology: May or may not surround a Background Hole.
    - object: Background Hole (Optional)
      properties:
        - color: 0 (White)
        - location: Completely surrounded by pixels of C1 or C2. Not connected to the outer Background.
  actions:
    - identify_colors: Find the Background color and the two non-background colors (C1, C2).
    - check_hole_enclosure: Determine if C1 exclusively surrounds a Background Hole, or if C2 does.
    - count_pixels: Calculate the number of pixels for C1 and C2.
    - compare_counts: Determine which color has maximum/minimum pixel count.
    - replace_color: Change pixels of one non-background color to the other non-background color based on the determined rule.
  rules_observed:
    - rule_1 (Hole Presence): If one non-background color (e.g., C_hole) exclusively surrounds a Background Hole, replace the other non-background color (C_other) with C_hole.
    - rule_2 (No Hole): If neither non-background color exclusively surrounds a Background Hole, find the color with the maximum pixel count (C_max) and the color with the minimum pixel count (C_min). Replace C_max with C_min.