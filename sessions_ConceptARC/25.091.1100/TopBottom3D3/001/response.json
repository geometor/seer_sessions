{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\ndef get_neighbors(grid, r, c):\n    \"\"\"Gets the adjacent neighbors (up, down, left, right) of a cell.\"\"\"\n    neighbors = []\n    rows, cols = grid.shape\n    if r > 0:\n        neighbors.append(grid[r-1, c])\n    if r < rows - 1:\n        neighbors.append(grid[r+1, c])\n    if c > 0:\n        neighbors.append(grid[r, c-1])\n    if c < cols - 1:\n        neighbors.append(grid[r, c+1])\n    return neighbors\n\ndef transform(input_grid):\n    \"\"\"\n    Identifies two distinct non-background colored objects (frame and inner).\n    The frame object has pixels adjacent to the background (0).\n    Replaces the pixels of the inner object with the color of the frame object.\n    \"\"\"\n    \n    # Convert input list of lists to numpy array for easier manipulation\n    grid = np.array(input_grid)\n    rows, cols = grid.shape\n    \n    # Initialize output_grid as a copy of the input_grid\n    output_grid = np.copy(grid)\n\n    # Find unique non-background colors\n    unique_colors = np.unique(grid)\n    non_background_colors = [color for color in unique_colors if color != 0]\n\n    # Check if there are exactly two non-background colors as expected\n    if len(non_background_colors) != 2:\n        # Handle unexpected cases, perhaps return input or raise error\n        # For this specific problem structure, we assume 2 colors.\n        # If not, the logic might fail or produce incorrect results.\n        # Let's proceed assuming the structure holds for valid inputs.\n        # In a more robust solution, we'd add error handling here.\n        # If only one color, what should happen? If more than two?\n        # Based on examples, we only expect two.\n        if len(non_background_colors) == 1: # Edge case: Only one non-bg color - treat it as both frame and inner? Assume no change.\n             return output_grid\n        elif len(non_background_colors) == 0: # Edge case: Only background\n             return output_grid\n        else: # More than 2 non-bg colors - problem definition unclear\n             # Let's just pick the first two found based on iteration? This is risky.\n             # The core logic below relies on exactly two colors.\n             # We'll stick to the assumption based on examples. A more general solution would need clarification.\n             pass # Proceed, might fail later if colors aren't found as expected\n\n    color_A = non_background_colors[0]\n    color_B = non_background_colors[1]\n    \n    frame_color = -1 # Initialize with invalid value\n    inner_color = -1 # Initialize with invalid value\n\n    # Iterate through the grid to find the frame color\n    # The frame color is the non-background color adjacent to the background (0)\n    found_frame = False\n    for r in range(rows):\n        for c in range(cols):\n            pixel_color = grid[r, c]\n            if pixel_color in non_background_colors:\n                neighbors = get_neighbors(grid, r, c)\n                if 0 in neighbors: # Check if adjacent to background\n                    frame_color = pixel_color\n                    found_frame = True\n                    break # Found the frame color\n        if found_frame:\n            break\n            \n    # Determine the inner color\n    if frame_color == color_A:\n        inner_color = color_B\n    elif frame_color == color_B:\n        inner_color = color_A\n    else:\n        # This shouldn't happen if the input structure is as expected (two non-bg colors, one adjacent to bg)\n        # If it does, return the original grid or handle error\n        return output_grid \n\n    # Create the output grid by replacing the inner color with the frame color\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == inner_color:\n                output_grid[r, c] = frame_color\n                \n    # Convert back to list of lists if required by the testing framework\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2820,
    "candidates_token_count": 1004,
    "total_token_count": 3824,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.286659,
  "retries": 1
}