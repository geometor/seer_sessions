{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentifies contiguous regions enclosed by a single-colored border. \nIf any pixel on the border is adjacent to both the enclosed region and a third, different colored region (the 'adjacent' color), \nthen the entire enclosed region is flood-filled with this adjacent color. \nOtherwise, the grid remains unchanged.\n\"\"\"\n\ndef get_neighbors(grid, r, c):\n    \"\"\" Gets valid 4-directional neighbors for a cell (r, c) \"\"\"\n    neighbors = []\n    height, width = grid.shape\n    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n        nr, nc = r + dr, c + dc\n        if 0 <= nr < height and 0 <= nc < width:\n            neighbors.append((nr, nc))\n    return neighbors\n\ndef find_regions(grid):\n    \"\"\" Finds all contiguous regions of the same color in the grid. \"\"\"\n    height, width = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    regions = []\n\n    for r in range(height):\n        for c in range(width):\n            if not visited[r, c]:\n                region_color = grid[r, c]\n                region_coords = set()\n                q = deque([(r, c)])\n                visited[r, c] = True\n\n                while q:\n                    curr_r, curr_c = q.popleft()\n                    region_coords.add((curr_r, curr_c))\n\n                    for nr, nc in get_neighbors(grid, curr_r, curr_c):\n                        if not visited[nr, nc] and grid[nr, nc] == region_color:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n                \n                if region_coords: # Ensure we don't add empty regions if logic changes\n                     regions.append({'coords': region_coords, 'color': region_color})\n    return regions\n\ndef check_enclosure_and_leak(grid, region_info):\n    \"\"\"\n    Checks if a region is enclosed by a single border color and if a leak point exists.\n\n    Args:\n        grid (np.array): The input grid.\n        region_info (dict): A dictionary containing 'coords' (set of (r, c) tuples) \n                             and 'color' for the region.\n\n    Returns:\n        int or None: The color to flood-fill with if a leak is found, otherwise None.\n                     Returns None if the region is not enclosed or no leak is found.\n    \"\"\"\n    region_coords = region_info['coords']\n    region_color = region_info['color']\n    height, width = grid.shape\n    \n    border_coords_set = set()\n    first_border_color = None\n    is_potentially_enclosed = True\n\n    # 1. Find all immediate neighbors outside the region and check for single border color\n    for r, c in region_coords:\n        for nr, nc in get_neighbors(grid, r, c):\n            if (nr, nc) not in region_coords:\n                neighbor_color = grid[nr, nc]\n                \n                # Cannot be enclosed if border color is same as region color\n                if neighbor_color == region_color:\n                    return None \n                    \n                if first_border_color is None:\n                    first_border_color = neighbor_color\n                elif neighbor_color != first_border_color:\n                    is_potentially_enclosed = False\n                    break # Found more than one border color\n                \n                border_coords_set.add((nr, nc))\n        if not is_potentially_enclosed:\n            break\n\n    # Region is not enclosed if it wasn't potentially enclosed, or has no border found\n    # (e.g., single pixel grid, or touches grid edge in a way that prevents enclosure)\n    if not is_potentially_enclosed or first_border_color is None:\n        return None\n\n    border_color = first_border_color\n\n    # 2. Check border pixels for leaks\n    for br, bc in border_coords_set:\n        has_inner_neighbor = False\n        leak_color_candidate = None\n        \n        # Check neighbors of the border pixel\n        for nbr, nbc in get_neighbors(grid, br, bc):\n            neighbor_coord = (nbr, nbc)\n            neighbor_color = grid[nbr, nbc]\n\n            # Is this neighbor inside the original region?\n            if neighbor_coord in region_coords:\n                has_inner_neighbor = True\n\n            # Is this neighbor neither the region color nor the border color?\n            # This is a potential leak source.\n            if neighbor_color != region_color and neighbor_color != border_color:\n                 # Make sure this adjacent color pixel is not part of the border itself\n                 # (though this check might be redundant if border is contiguous and single-colored)\n                 # if neighbor_coord not in border_coords_set: # <-- This check might be overly strict depending on interpretation. Let's try without first.\n                 leak_color_candidate = neighbor_color\n\n        # If this border pixel touches BOTH the inner region AND a third color, it's a leak point\n        if has_inner_neighbor and leak_color_candidate is not None:\n            return leak_color_candidate # Found the leak color\n\n    # If we checked all border pixels and found no leak\n    return None\n\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Transforms the input grid based on the enclosure and leak rule.\n    Finds enclosed regions, checks if they have a single-colored border,\n    determines if a leak point exists from an adjacent third color across the border,\n    and if so, flood-fills the enclosed region with the third color.\n    \"\"\"\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n    \n    # Find all distinct regions in the input grid\n    regions = find_regions(input_grid)\n\n    # Process each region found\n    for region_info in regions:\n        # Check if this region is enclosed and find the leak color, if any\n        leak_color = check_enclosure_and_leak(input_grid, region_info)\n        \n        # If a leak color was determined\n        if leak_color is not None:\n            # Modify the output grid by changing the color of all pixels in the region\n            region_coords = region_info['coords']\n            for r, c in region_coords:\n                output_grid[r, c] = leak_color\n                \n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4423,
    "candidates_token_count": 1542,
    "total_token_count": 5965,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 34.714167,
  "retries": 1
}