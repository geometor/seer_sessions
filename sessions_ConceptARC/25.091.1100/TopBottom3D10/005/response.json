{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentifies contiguous regions (Inner Region) enclosed by a single-colored border (Border Region). \nIf any pixel on the border is adjacent (non-diagonally) to both a pixel in the Inner Region \nand a pixel of a third, non-background color (Adjacent Color), then the entire Inner Region \nis flood-filled with this Adjacent Color in the output grid. Otherwise, the region remains unchanged.\n\"\"\"\n\ndef get_neighbors(grid_shape, r, c):\n    \"\"\" Gets valid 4-directional neighbors for a cell (r, c) within grid bounds. \"\"\"\n    neighbors = []\n    height, width = grid_shape\n    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n        nr, nc = r + dr, c + dc\n        if 0 <= nr < height and 0 <= nc < width:\n            neighbors.append((nr, nc))\n    return neighbors\n\ndef find_regions(grid):\n    \"\"\" \n    Finds all distinct contiguous regions of the same color in the grid.\n    Returns a list of dictionaries, each containing 'coords' (set of (r, c) tuples) \n    and 'color' for a region.\n    \"\"\"\n    height, width = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    regions = []\n\n    for r in range(height):\n        for c in range(width):\n            if not visited[r, c]:\n                region_color = grid[r, c]\n                # Skip background regions if they are treated differently (optional, depends on task)\n                # if region_color == 0: \n                #    visited[r,c] = True\n                #    continue \n                    \n                region_coords = set()\n                q = deque([(r, c)])\n                visited[r, c] = True\n\n                while q:\n                    curr_r, curr_c = q.popleft()\n                    region_coords.add((curr_r, curr_c))\n\n                    for nr, nc in get_neighbors(grid.shape, curr_r, curr_c):\n                        if not visited[nr, nc] and grid[nr, nc] == region_color:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n                \n                if region_coords: # Should always be true here unless starting on visited\n                     regions.append({'coords': region_coords, 'color': region_color})\n    return regions\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Transforms the input grid based on the enclosure and leak rule.\n    \"\"\"\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n    grid_shape = input_grid.shape\n    \n    # Find all distinct contiguous regions in the input grid\n    all_regions = find_regions(input_grid)\n\n    # Iterate through each potential inner region found\n    for region_info in all_regions:\n        inner_region_coords = region_info['coords']\n        c_inner = region_info['color']\n        \n        # Optimization: skip background color as inner region\n        if c_inner == 0:\n             continue\n\n        border_pixels = set()\n        neighbor_colors = set()\n        \n        # 1. Find all immediate neighbors outside the region\n        for r, c in inner_region_coords:\n            for nr, nc in get_neighbors(grid_shape, r, c):\n                if (nr, nc) not in inner_region_coords:\n                    border_pixels.add((nr, nc))\n                    neighbor_colors.add(input_grid[nr, nc])\n\n        # 2. Check for single-color enclosure condition\n        is_enclosed = False\n        c_border = -1 # Use -1 to indicate no valid border color found yet\n        if len(neighbor_colors) == 1:\n            potential_border_color = list(neighbor_colors)[0]\n            if potential_border_color != c_inner:\n                is_enclosed = True\n                c_border = potential_border_color\n\n        # 3. If enclosed, check for leak points\n        leaking_color = None\n        if is_enclosed:\n            # Iterate through each identified border pixel\n            for br, bc in border_pixels:\n                # Check neighbors of the border pixel\n                for nbr, nbc in get_neighbors(grid_shape, br, bc):\n                    neighbor_coord = (nbr, nbc)\n                    c_adjacent = input_grid[nbr, nbc]\n\n                    # Check if this neighbor is the potential 'leaking' color source\n                    # Conditions: Not inner color, not border color, not background(0)\n                    # AND it's not part of the border itself or the inner region\n                    if (neighbor_coord not in inner_region_coords and \n                        neighbor_coord not in border_pixels and \n                        c_adjacent != c_inner and \n                        c_adjacent != c_border and \n                        c_adjacent != 0):\n                        \n                        # Found a valid leak source adjacent to this border pixel.\n                        # Check if this border pixel also touches the inner region (should be true by definition of border_pixels)\n                        touches_inner = False\n                        for b_neighbor_r, b_neighbor_c in get_neighbors(grid_shape, br, bc):\n                            if (b_neighbor_r, b_neighbor_c) in inner_region_coords:\n                                touches_inner = True\n                                break \n                        \n                        if touches_inner: # Confirm adjacency for robustness\n                            leaking_color = c_adjacent\n                            break # Stop searching for leaks for this region\n\n                if leaking_color is not None:\n                    break # Stop iterating through border pixels once leak is found\n        \n        # 4. Apply flood fill transformation if leak was found\n        if leaking_color is not None:\n            # Modify the output grid: change color of all inner region pixels\n            for r, c in inner_region_coords:\n                output_grid[r, c] = leaking_color\n                \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 19950,
    "candidates_token_count": 1432,
    "total_token_count": 21382,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 17.96438,
  "retries": 1
}