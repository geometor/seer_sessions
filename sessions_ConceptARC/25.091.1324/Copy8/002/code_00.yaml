task_description: Copy a set of pixels ('mobile object') based on its positional relationship to a pair of identical 'anchor objects'.

definitions:
  anchor_objects: Two distinct, contiguous objects of the same color.
  mobile_object: The complete set of all pixels of a different, single color (these pixels may or may not be contiguous).
  bounding_box: The smallest rectangle enclosing a set of pixels.
  top_left_corner: The (row, column) coordinate of the top-leftmost pixel of a bounding box.

examples:
  - id: train_1
    input_grid_size: [10, 17]
    output_grid_size: [10, 17]
    anchor_objects:
      color: blue (1)
      count: 2
      top_left_corners: [(3, 1), (3, 10)]
    mobile_object:
      color: red (2)
      pixel_count: 12
      bounding_box_top_left: (0, 1) # Note: Bbox includes pixels (0,3), (0,4), (1,2) etc.
    relationship:
      offset_vector: (mobile_bbox_top_left - anchor1_bbox_top_left) = (0, 1) - (3, 1) = (-3, 0)
    transformation:
      action: copy
      source_object_color: red
      target_location_rule: Add offset (-3, 0) to anchor2_bbox_top_left (3, 10) -> Target top-left = (0, 10). Copy all red pixels relative to this new top-left.

  - id: train_2
    input_grid_size: [11, 13]
    output_grid_size: [11, 13]
    anchor_objects:
      color: yellow (4)
      count: 2
      top_left_corners: [(0, 1), (0, 7)]
    mobile_object:
      color: green (3)
      pixel_count: 5
      pixels_are_contiguous: false
      bounding_box_top_left: (7, 1) # Bbox includes pixels (7,1), (7,5), (8,2), (8,4), (9,3)
    relationship:
      offset_vector: (mobile_bbox_top_left - anchor1_bbox_top_left) = (7, 1) - (0, 1) = (7, 0)
    transformation:
      action: copy
      source_object_color: green
      target_location_rule: Add offset (7, 0) to anchor2_bbox_top_left (0, 7) -> Target top-left = (7, 7). Copy all green pixels relative to this new top-left.

general_rules:
  - Find all distinct contiguous objects using 4-connectivity.
  - Group these contiguous objects by color. Identify the color that has exactly two objects ('anchor_color').
  - Find all unique non-background colors present in the grid. Identify the color that is not the 'anchor_color' ('mobile_color'). Assume there is only one such color.
  - Collect all pixels in the grid that have the 'mobile_color'. This set constitutes the 'mobile_object'.
  - Determine the overall bounding box for all pixels of the 'mobile_object' and find its top-left corner ('mobile_bbox_top_left').
  - Identify the two anchor objects. Determine which is 'Anchor1' (e.g., the one whose bounding box top-left corner is top-leftmost) and 'Anchor2'. Get their bounding box top-left corners ('anchor1_bbox_top_left', 'anchor2_bbox_top_left').
  - Calculate the offset vector: `offset = mobile_bbox_top_left - anchor1_bbox_top_left`.
  - Calculate the target top-left corner for the copy: `copy_target_bbox_top_left = anchor2_bbox_top_left + offset`.
  - Create a copy of the input grid. For each pixel belonging to the 'mobile_object', calculate its position relative to 'mobile_bbox_top_left'. Add this relative position to 'copy_target_bbox_top_left' to get the final target coordinate in the output grid. Place the 'mobile_color' at this target coordinate.
  - All other pixels (background and anchor objects) remain unchanged from the input grid.