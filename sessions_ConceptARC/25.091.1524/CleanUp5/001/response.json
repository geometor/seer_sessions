{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nIdentifies the non-background color(s) with the minimum frequency in the input grid.\nThen, for each pixel of that minimum frequency color ('target color'), \nit checks its 8 neighbors (Moore neighborhood) in the original input grid. \nIf all existing neighbors are the background color (0, White), the target pixel \nis changed to the background color in the output grid. \nAll other pixels retain their original color.\n\"\"\"\n\ndef get_neighbors(grid, r, c):\n    \"\"\"\n    Gets the values of the 8 neighboring pixels (Moore neighborhood) for a given cell (r, c).\n    Handles boundary conditions by only returning values of neighbors within the grid.\n    \"\"\"\n    rows, cols = grid.shape\n    neighbor_values = []\n    for dr in [-1, 0, 1]:\n        for dc in [-1, 0, 1]:\n            # Skip the center pixel itself\n            if dr == 0 and dc == 0:\n                continue\n            \n            nr, nc = r + dr, c + dc\n            \n            # Check if the neighbor coordinates are within the grid bounds\n            if 0 <= nr < rows and 0 <= nc < cols:\n                neighbor_values.append(grid[nr, nc])\n                \n    return neighbor_values\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on the isolation of the least frequent non-background color.\n\n    Args:\n        input_grid (np.ndarray): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.ndarray: A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n    background_color = 0\n\n    # Find all non-background pixels and their colors\n    non_background_pixels = input_grid[input_grid != background_color]\n\n    # If there are no non-background pixels, return the original grid\n    if non_background_pixels.size == 0:\n        return output_grid\n\n    # Count the frequency of each non-background color\n    color_counts = Counter(non_background_pixels)\n\n    # Find the minimum frequency\n    min_frequency = min(color_counts.values())\n\n    # Identify all colors that have the minimum frequency\n    target_colors = {color for color, count in color_counts.items() if count == min_frequency}\n\n    # Iterate through each pixel of the input grid\n    for r in range(rows):\n        for c in range(cols):\n            pixel_color = input_grid[r, c]\n\n            # Check if the current pixel's color is one of the target colors\n            if pixel_color in target_colors:\n                # Get the values of its neighbors from the *input* grid\n                neighbors = get_neighbors(input_grid, r, c)\n                \n                # Check if all neighbors are the background color\n                # An empty neighbor list (e.g., 1x1 grid) also counts as isolated\n                is_isolated = all(neighbor == background_color for neighbor in neighbors)\n                \n                # If the pixel is isolated, change its color to background in the output grid\n                if is_isolated:\n                    output_grid[r, c] = background_color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3497,
    "candidates_token_count": 786,
    "total_token_count": 4283,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.815749,
  "retries": 1
}