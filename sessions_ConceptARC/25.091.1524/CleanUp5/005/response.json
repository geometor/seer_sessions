{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nTransforms the input grid based on the number of distinct non-background colors present.\n\n1. If there is more than one distinct non-background color:\n   - Identify the non-background color(s) with the minimum frequency.\n   - Change *all* pixels of these minimum-frequency color(s) to the background color (0).\n\n2. If there is exactly one distinct non-background color:\n   - Identify this single non-background color.\n   - For each pixel of this color, check its 8 neighbors (Moore neighborhood) in the original input grid.\n   - If *all* neighbors are the background color (0), change the pixel to the background color (0). Otherwise, leave it unchanged.\n\n3. If there are no non-background colors:\n   - The grid remains unchanged.\n\nThe background color is assumed to be 0 (White).\n\"\"\"\n\ndef get_neighbors(grid, r, c):\n    \"\"\"\n    Gets the values of the 8 neighboring pixels (Moore neighborhood) for a given cell (r, c).\n    Handles boundary conditions by only returning values of neighbors within the grid.\n    \"\"\"\n    rows, cols = grid.shape\n    neighbor_values = []\n    for dr in [-1, 0, 1]:\n        for dc in [-1, 0, 1]:\n            # Skip the center pixel itself\n            if dr == 0 and dc == 0:\n                continue\n\n            nr, nc = r + dr, c + dc\n\n            # Check if the neighbor coordinates are within the grid bounds\n            if 0 <= nr < rows and 0 <= nc < cols:\n                neighbor_values.append(grid[nr, nc])\n\n    return neighbor_values\n\ndef transform(input_grid):\n    # initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n    background_color = 0\n\n    # Find all non-background pixels and their colors\n    non_background_pixels = input_grid[input_grid != background_color]\n\n    # Early exit if there are no non-background pixels\n    if non_background_pixels.size == 0:\n        return output_grid\n\n    # Count the frequency of each non-background color\n    color_counts = Counter(non_background_pixels)\n    distinct_color_count = len(color_counts)\n\n    # Case 1: More than one distinct non-background color\n    if distinct_color_count > 1:\n        # Find the minimum frequency among non-background colors\n        min_frequency = min(color_counts.values())\n        # Identify all colors that have this minimum frequency\n        target_colors = {color for color, count in color_counts.items() if count == min_frequency}\n\n        # Iterate through the grid and change all pixels of the target color(s) to background\n        for r in range(rows):\n            for c in range(cols):\n                if input_grid[r, c] in target_colors:\n                    output_grid[r, c] = background_color\n\n    # Case 2: Exactly one distinct non-background color\n    elif distinct_color_count == 1:\n        # The single non-background color is the target color\n        target_color = list(color_counts.keys())[0] # Get the only key\n\n        # Iterate through the grid\n        for r in range(rows):\n            for c in range(cols):\n                pixel_color = input_grid[r, c]\n\n                # Check if the current pixel's color is the target color\n                if pixel_color == target_color:\n                    # Get the values of its neighbors from the *input* grid\n                    neighbors = get_neighbors(input_grid, r, c)\n\n                    # Check if all neighbors are the background color (i.e., the pixel is isolated)\n                    is_isolated = all(neighbor == background_color for neighbor in neighbors)\n\n                    # If the pixel is isolated, change its color to background in the output grid\n                    if is_isolated:\n                        output_grid[r, c] = background_color\n                        \n    # Case 3: No non-background colors (distinct_color_count == 0)\n    # This case was handled by the early exit, but explicitly: no changes are needed.\n    \n    # Return the modified or copied grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 10938,
    "candidates_token_count": 1006,
    "total_token_count": 11944,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.069878,
  "retries": 1
}