{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\nfrom scipy.ndimage import label, find_objects\n\n\"\"\"\n1. Determine the background color by finding the most frequent color in the input grid.\n2. Identify the 'target' color by finding the most frequent color *excluding* the background color.\n3. Locate all pixels in the input grid that match the target color.\n4. Group these target pixels into connected components using 8-way adjacency.\n5. Discard any components that consist of only a single pixel.\n6. If no components remain after discarding single-pixel ones, create an output grid of the same dimensions as the input, filled entirely with the background color.\n7. If components remain, calculate the overall bounding box that encloses all pixels belonging to these remaining components.\n8. Create an output grid of the same dimensions as the input, initially filled with the background color.\n9. Fill the rectangular area defined by the calculated bounding box with the target color.\n\"\"\"\n\ndef find_most_frequent_color(grid_flat):\n    \"\"\"Finds the most frequent color in a flattened grid.\"\"\"\n    if not grid_flat:\n        return 0 # Default to white if grid is empty\n    counts = Counter(grid_flat)\n    most_common = counts.most_common(1)\n    return most_common[0][0] if most_common else 0\n\ndef find_target_color(grid_flat, background_color):\n    \"\"\"Finds the most frequent non-background color.\"\"\"\n    non_background_colors = [c for c in grid_flat if c != background_color]\n    if not non_background_colors:\n        return None # No target color found\n    counts = Counter(non_background_colors)\n    most_common = counts.most_common(1)\n    return most_common[0][0] if most_common else None\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on finding the largest connected component\n    (excluding single pixels) of the most frequent non-background color and drawing\n    its bounding box.\n    \"\"\"\n    input_array = np.array(input_grid, dtype=int)\n    rows, cols = input_array.shape\n    grid_flat = input_array.flatten().tolist()\n\n    # 1. Determine the background color\n    background_color = find_most_frequent_color(grid_flat)\n\n    # 2. Identify the 'target' color\n    target_color = find_target_color(grid_flat, background_color)\n\n    # Initialize output grid with background color\n    output_array = np.full((rows, cols), background_color, dtype=int)\n\n    # If no target color exists, return the background grid\n    if target_color is None:\n        return output_array.tolist()\n\n    # 3. Locate all pixels matching the target color\n    target_mask = (input_array == target_color)\n\n    # 4. Group target pixels into connected components (8-way adjacency)\n    # Structure for 8-way connectivity\n    structure = np.ones((3, 3), dtype=bool)\n    labeled_array, num_features = label(target_mask, structure=structure)\n\n    # 5. Discard single-pixel components and find coordinates of remaining pixels\n    valid_target_pixels_coords = []\n    for i in range(1, num_features + 1):\n        component_coords = np.argwhere(labeled_array == i)\n        if len(component_coords) > 1: # Filter components with size > 1\n            valid_target_pixels_coords.extend(component_coords)\n\n    # 6. If no components remain, return the background grid\n    if not valid_target_pixels_coords:\n        return output_array.tolist()\n\n    # 7. Calculate the overall bounding box for the valid pixels\n    valid_target_pixels_coords = np.array(valid_target_pixels_coords)\n    min_row = np.min(valid_target_pixels_coords[:, 0])\n    max_row = np.max(valid_target_pixels_coords[:, 0])\n    min_col = np.min(valid_target_pixels_coords[:, 1])\n    max_col = np.max(valid_target_pixels_coords[:, 1])\n\n    # 8. Create the output grid (already initialized)\n\n    # 9. Fill the bounding box area with the target color\n    output_array[min_row:max_row+1, min_col:max_col+1] = target_color\n\n    return output_array.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2319,
    "candidates_token_count": 1053,
    "total_token_count": 3372,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.6422,
  "retries": 1
}