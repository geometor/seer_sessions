task_description: Determines the dimensions of an all-white output grid based on properties of objects in the input grid, specifically comparing the number of objects (N) to the number of unique colors (C) and utilizing object heights and colors.

definitions:
  object: A contiguous block of pixels of the same non-white color.
  N: The total count of distinct objects in the input grid.
  C: The count of unique non-white colors present in the input grid.
  MaxH: The maximum height of any object in the input grid.
  height: The number of rows spanned by an object's bounding box.
  width: The number of columns spanned by an object's bounding box.
  color: The integer value (1-9) of the pixels comprising an object.

rules:
  - condition: N == C
    action:
      - find_object: Locate an object where its height property is numerically equal to its color property.
      - output_dimensions: Use the height and width of the found object.
      - fallback (if no such object found): Use the rule for N != C. # Note: Not required by examples but good practice.
  - condition: N != C
    action:
      - calculate: MaxH (maximum height among all objects).
      - calculate: Width = C - 1 (Ensure non-negative).
      - output_dimensions: MaxH by Width.

output_grid:
  content: All pixels are white (0).
  dimensions: Determined by the applicable rule (N==C or N!=C).

examples:
  train_1:
    properties:
      N: 3
      C: 3
      MaxH: 3
      objects:
        - color: 2, height: 3, width: 3
        - color: 3, height: 3, width: 2  # Height (3) == Color (3)
        - color: 1, height: 3, width: 4
    rule_applied: N == C
    derived_output_dims: 3x2 (from the green object)
    expected_output_dims: 3x2
  train_2:
    properties:
      N: 3
      C: 3
      MaxH: 5
      objects:
        - color: 4, height: 4, width: 4  # Height (4) == Color (4)
        - color: 7, height: 5, width: 3
        - color: 8, height: 3, width: 3
    rule_applied: N == C
    derived_output_dims: 4x4 (from the yellow object)
    expected_output_dims: 4x4
  train_3:
    properties:
      N: 5
      C: 4
      MaxH: 5
      objects:
        - color: 6, height: 3, width: 5
        - color: 8, height: 3, width: 3
        - color: 4, height: 4, width: 3  # Height (4) == Color (4) - exists but rule N!=C applies
        - color: 2, height: 5, width: 1
        - color: 2, height: 5, width: 1
    rule_applied: N != C
    derived_output_dims: MaxH x (C - 1) = 5 x (4 - 1) = 5x3
    expected_output_dims: 5x3
