{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentifies all contiguous non-white objects in the input grid.\nDetermines the topmost row index for each object.\nSelects the object with the minimum topmost row index (highest in the grid).\nCreates the output grid by extracting the pixels corresponding to the selected object, \ncropped to its minimum bounding box.\n\"\"\"\n\ndef _find_objects(grid: np.ndarray) -> list[dict]:\n    \"\"\"\n    Finds all contiguous objects of the same non-background color.\n\n    Args:\n        grid: A numpy array representing the input grid.\n\n    Returns:\n        A list of dictionaries, where each dictionary represents an object\n        and contains 'color', 'pixels' (list of (row, col) tuples),\n        'min_row', 'max_row', 'min_col', 'max_col'.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = set()\n    objects = []\n    \n    for r in range(rows):\n        for c in range(cols):\n            # Check if the pixel is non-white and not visited\n            if grid[r, c] != 0 and (r, c) not in visited:\n                color = grid[r, c]\n                current_object_pixels = []\n                q = deque([(r, c)])\n                visited.add((r, c))\n                min_r, max_r = r, r\n                min_c, max_c = c, c\n\n                # Perform BFS to find all connected pixels of the same color\n                while q:\n                    curr_r, curr_c = q.popleft()\n                    current_object_pixels.append((curr_r, curr_c))\n\n                    # Update bounding box\n                    min_r = min(min_r, curr_r)\n                    max_r = max(max_r, curr_r)\n                    min_c = min(min_c, curr_c)\n                    max_c = max(max_c, curr_c)\n\n                    # Check neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = curr_r + dr, curr_c + dc\n                        \n                        # Check bounds, color, and visited status\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] == color and (nr, nc) not in visited:\n                            visited.add((nr, nc))\n                            q.append((nr, nc))\n                            \n                # Store the found object\n                objects.append({\n                    'color': color,\n                    'pixels': current_object_pixels,\n                    'min_row': min_r,\n                    'max_row': max_r,\n                    'min_col': min_c,\n                    'max_col': max_c\n                })\n    return objects\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Transforms the input grid by finding the highest object (minimum top row)\n    and returning that object cropped to its bounding box.\n\n    Args:\n        input_grid: A list of lists representing the input grid.\n\n    Returns:\n        A list of lists representing the cropped highest object.\n    \"\"\"\n    \n    # Convert input to numpy array for easier processing\n    grid_np = np.array(input_grid, dtype=int)\n    \n    # 1. Identify all contiguous groups of non-white pixels (objects)\n    objects = _find_objects(grid_np)\n\n    # Handle cases with no objects found\n    if not objects:\n        return [] \n\n    # 2. & 3. Find the object with the minimum topmost row index\n    highest_object = min(objects, key=lambda obj: obj['min_row'])\n\n    # 4. Determine the bounding box of the selected object\n    min_r = highest_object['min_row']\n    max_r = highest_object['max_row']\n    min_c = highest_object['min_col']\n    max_c = highest_object['max_col']\n    obj_color = highest_object['color']\n    obj_pixels = set(highest_object['pixels']) # Use set for faster lookup\n\n    # 5. Create a new output grid with dimensions matching the bounding box size\n    height = max_r - min_r + 1\n    width = max_c - min_c + 1\n    output_grid_np = np.zeros((height, width), dtype=int) # Initialize with background color 0\n\n    # 6. Copy the pixels of the selected object into the output grid\n    for r in range(min_r, max_r + 1):\n        for c in range(min_c, max_c + 1):\n             # Check if the pixel in the original grid belongs to the selected object\n            if (r, c) in obj_pixels:\n                 # Calculate relative coordinates for the output grid\n                out_r = r - min_r\n                out_c = c - min_c\n                output_grid_np[out_r, out_c] = obj_color # Use the object's color\n\n    # Convert the numpy array back to a list of lists\n    output_grid = output_grid_np.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2380,
    "candidates_token_count": 2380,
    "total_token_count": 4760,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-preview-03-25",
  "response_time": 16.585891,
  "retries": 1
}