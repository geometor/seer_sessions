task_context:
  problem_type: color_filtering_and_replacement
  color_mapping:
    0: white (background)
    1: blue
    3: green
    6: magenta
    8: azure
  grid_properties:
    size_constraints: input and output grids have the same dimensions
    content: pixels represented by integers 0-9

derived_rule_properties:
  - primary_color_selection: most_frequent_non_background_color
  - secondary_color_selection: least_frequent_non_background_color
  - primary_color_filtering:
      condition: no_adjacent_primary_color_neighbor (8-way connectivity)
      action_if_true: remove_pixel (set_to_background)
      action_if_false: keep_pixel
  - secondary_color_filtering:
      condition: count_primary_color_cardinal_neighbors >= 3 (4-way connectivity)
      action_if_true: replace_with_primary_color
      action_if_false: remove_pixel (set_to_background)

example_1:
  input_colors: [0, 1, 3] # white, blue, green
  output_colors: [0, 3] # white, green
  primary_color: 3 # green (count=22)
  secondary_color: 1 # blue (count=6)
  actions_on_primary:
    - type: filter
      condition: isolation (no green neighbor in 8 directions)
      input_pixels_affected: [(0,9), (6,9), (9,0)]
      result: set_to_background(0)
  actions_on_secondary:
    - type: filter
      condition: count_cardinal_green_neighbors >= 3
      input_pixels_affected: [] # No blue pixels meet condition
      result_if_true: set_to_green(3)
    - type: filter
      condition: count_cardinal_green_neighbors < 3
      input_pixels_affected: [(3,1), (3,9), (5,6), (5,7), (8,9)]
      result_if_true: set_to_background(0)

example_2:
  input_colors: [0, 6, 8] # white, magenta, azure
  output_colors: [0, 6] # white, magenta
  primary_color: 6 # magenta (count=28)
  secondary_color: 8 # azure (count=10)
  actions_on_primary:
    - type: filter
      condition: isolation (no magenta neighbor in 8 directions)
      input_pixels_affected: [] # No magenta pixels are isolated
      result: set_to_background(0)
  actions_on_secondary:
    - type: filter
      condition: count_cardinal_magenta_neighbors >= 3
      input_pixels_affected: [(3,3), (3,14), (5,2), (6,3)] # These had 3, 3, 3, 4 P neighbors respectively
      result_if_true: set_to_magenta(6)
    - type: filter
      condition: count_cardinal_magenta_neighbors < 3
      input_pixels_affected: [(0,11), (1,1), (3,7), (3,15), (6,4), (6,9), (7,6), (7,10)]
      result_if_true: set_to_background(0)