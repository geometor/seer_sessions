{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransformation Rule:\n1. Identify \"horizontal bars\": Rows where a single non-white color appears in more than half the cells. Record the row index and the dominant color (H_color).\n2. Identify \"vertical bars\": Columns where a single non-white color appears in more than half the cells. Record the column index and the dominant color (V_color).\n3. For each intersection point (r, c) where a horizontal bar in row 'r' meets a vertical bar in column 'c':\n    a. Get the original color at (r, c) from the input grid (Original_color).\n    b. Get the H_color for row r and V_color for column c.\n    c. If Original_color equals H_color, change the color at (r, c) in the output grid to V_color.\n    d. Else if Original_color equals V_color, change the color at (r, c) in the output grid to H_color.\n    e. Otherwise (if Original_color is neither H_color nor V_color, including background), change the color at (r, c) in the output grid to V_color.\n4. Pixels not at such intersection points remain unchanged from the input grid.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef _find_bars(grid_np: np.ndarray) -> tuple[dict[int, int], dict[int, int]]:\n    \"\"\"\n    Identifies horizontal and vertical bars in the grid.\n\n    A bar is defined as a row or column where a single non-white color\n    occupies more than half of the cells in that row/column.\n\n    Args:\n        grid_np: The input grid as a NumPy array.\n\n    Returns:\n        A tuple containing two dictionaries:\n        - h_bars: {row_index: dominant_color} for horizontal bars.\n        - v_bars: {col_index: dominant_color} for vertical bars.\n    \"\"\"\n    height, width = grid_np.shape\n    h_bars = {} # {row_index: dominant_color}\n    v_bars = {} # {col_index: dominant_color}\n    \n    # Find horizontal bars\n    for r in range(height):\n        line = grid_np[r, :]\n        # Count non-white pixels\n        counts = Counter(pixel for pixel in line if pixel != 0)\n        if not counts:\n            continue # Skip rows with only white pixels\n\n        # Find the most frequent non-white color and its count\n        # most_common(1) returns list like [(color, count)]\n        dominant_color, max_count = counts.most_common(1)[0]\n\n        # Check if the dominant color occurs in more than half the width\n        if max_count > width / 2:\n            # Ensure it's a single dominant color meeting the criteria\n            # (Check if a second color has the same max_count)\n            if len(counts) == 1 or counts.most_common(2)[1][1] < max_count:\n                 h_bars[r] = dominant_color\n\n    # Find vertical bars\n    for c in range(width):\n        line = grid_np[:, c]\n        # Count non-white pixels\n        counts = Counter(pixel for pixel in line if pixel != 0)\n        if not counts:\n             continue # Skip columns with only white pixels\n\n        # Find the most frequent non-white color and its count\n        dominant_color, max_count = counts.most_common(1)[0]\n\n        # Check if the dominant color occurs in more than half the height\n        if max_count > height / 2:\n             # Ensure it's a single dominant color meeting the criteria\n             if len(counts) == 1 or counts.most_common(2)[1][1] < max_count:\n                 v_bars[c] = dominant_color\n\n    return h_bars, v_bars\n\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies the intersection color swap transformation based on dominant\n    colors in identified horizontal and vertical bars.\n    \"\"\"\n    # Convert input to numpy array for easier processing\n    input_np = np.array(input_grid, dtype=int)\n    # Initialize output_grid as a copy of the input\n    output_np = input_np.copy()\n\n    # Identify horizontal and vertical bars and their dominant colors\n    h_bars, v_bars = _find_bars(input_np)\n\n    # Iterate through the identified intersections\n    for r, h_color in h_bars.items():\n        for c, v_color in v_bars.items():\n            # This is an intersection point (r, c)\n            original_color = input_np[r, c]\n\n            # Apply the transformation rule at the intersection\n            if original_color == h_color:\n                output_np[r, c] = v_color\n            elif original_color == v_color:\n                output_np[r, c] = h_color\n            else:\n                # Default case (including background or other colors)\n                # Based on analysis, V_color seems to take precedence\n                output_np[r, c] = v_color\n\n    # Convert the result back to a list of lists\n    return output_np.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 9422,
    "candidates_token_count": 1898,
    "total_token_count": 11320,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-preview-03-25",
  "response_time": 13.476115,
  "retries": 1
}