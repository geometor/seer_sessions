task_type: pattern_based_replacement # Modifying pixels based on local patterns
color_invariance:
  # Pixels that are not azure (8) in the input retain their color in the output.
  non_azure_pixels: unchanged
target_object_pixels:
  color: 8 # azure
  transformation: conditional_replacement
  output_colors: [0, S] # Becomes either white (0) or the source color S
source_object_pixels:
  # Defined as the single dominant color S that is not white (0) or azure (8) in the input.
  color: S # Examples: 3 (green), 4 (yellow), 6 (magenta)
  role: influences_transformation # Part of the patterns determining azure pixel change
background_color: 0 # white, also used for padding outside grid boundaries
transformation_rule:
  scope: only_azure_pixels # Only azure pixels (8) are potentially changed
  condition_type: exact_neighborhood_match # Decision based on matching the input 3x3 neighborhood against a predefined set.
  input_dependency: 3x3_neighborhood_of_azure_pixel_in_input # The exact colors and configuration in the 3x3 grid matter.
  target_patterns: # Set of specific 3x3 input neighborhoods (padded with 0) that trigger the change 8 -> S
    source: derived_from_all_training_examples # Patterns where input=8 and output=S
    count: 9 # Number of unique patterns found
    list: # The 9 specific 3x3 tuples identified by the code execution above
      - ((0, 4, 4), (0, 8, 8), (0, 8, 8))
      - ((3, 3, 3), (8, 8, 8), (8, 8, 8))
      - ((4, 4, 0), (8, 8, 8), (8, 8, 8))
      - ((6, 6, 6), (8, 8, 8), (8, 8, 8))
      - ((6, 8, 8), (6, 8, 8), (6, 8, 8))
      - ((8, 8, 0), (8, 8, 0), (4, 4, 0))
      - ((8, 8, 0), (8, 8, 3), (0, 0, 3))
      - ((8, 8, 8), (8, 8, 8), (0, 4, 4))
      - ((8, 8, 8), (8, 8, 8), (8, 8, 8))
  output_determination:
    # If the 3x3 input neighborhood of an azure pixel matches any pattern in the target_patterns set -> change azure to source color S
    # If the neighborhood does not match any pattern in the set -> change azure to white (0)