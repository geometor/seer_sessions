task_type: object_transformation # Modifying specific objects based on others
color_invariance:
  # Pixels that are not azure in the input retain their color in the output.
  non_azure_pixels: unchanged
target_object:
  color: 8 # azure
  transformation: conditional_replacement
  output_colors: [0, C] # Becomes either white or the source color C
source_object:
  # Defined as the single dominant color C that is not white (0) or azure (8) in the input.
  color: C # Examples: 3 (green), 4 (yellow), 6 (magenta)
  role: determines_transformation # Influences the change of azure pixels
background_color: 0 # white
transformation_rule:
  scope: only_azure_pixels # Only azure pixels are potentially changed
  condition: # Rule deciding if an azure pixel becomes C or 0
    type: local_neighborhood_analysis # Decision based on the input neighborhood around the azure pixel.
    input_dependency: neighborhood_of_azure_pixel_in_input # The specific colors of neighbors matter.
    output_determination:
      # If the condition is met -> change azure to source color C
      # If the condition is not met -> change azure to white (0)
    notes: Simple adjacency or neighbor count rules were tested and failed. The exact condition seems more complex, possibly involving specific patterns or configurations within the neighborhood, but remains elusive based solely on the provided examples. Example train_1 (4,5) changing to 3 without adjacent 3s is key.