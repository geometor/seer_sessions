{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import defaultdict\n\n\"\"\"\nIdentifies all distinct non-background colored pixel groups in the input grid.\nFor each color group (all pixels of a specific color), determines a horizontal \nmovement direction: Red (2) and Green (3) move left, Blue (1) and Yellow (4) \nmove right.\nCalculates the necessary horizontal shift to move the entire color group such \nthat its leftmost pixel reaches column 0 (for left movement) or its rightmost \npixel reaches the last column (for right movement).\nApplies this shift to all pixels of that color group and places them onto a \nnew grid, preserving their original vertical positions and relative horizontal \narrangement. The final output grid contains all shifted color groups against \nthe original background color.\n\"\"\"\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Moves groups of pixels horizontally based on their color.\n\n    Args:\n        input_grid: A list of lists representing the input grid.\n\n    Returns:\n        A list of lists representing the transformed output grid.\n    \"\"\"\n    input_np = np.array(input_grid, dtype=int)\n    height, width = input_np.shape\n    output_grid_np = np.zeros_like(input_np)  # Initialize with background (0)\n\n    # 1. Identify all pixels for each non-background color\n    color_pixels = defaultdict(list)\n    unique_colors = np.unique(input_np)\n    non_background_colors = unique_colors[unique_colors != 0]\n\n    for r in range(height):\n        for c in range(width):\n            color = input_np[r, c]\n            if color != 0:\n                color_pixels[color].append((r, c))\n\n    # 2. Process each color group\n    for color, pixels in color_pixels.items():\n        if not pixels:\n            continue\n\n        # 3a. Determine movement direction\n        direction = None\n        if color in [2, 3]:  # Red, Green\n            direction = 'left'\n        elif color in [1, 4]:  # Blue, Yellow\n            direction = 'right'\n        else:\n            # If color has no defined movement, keep original position (or handle differently)\n            # For this task, based on examples, only 1,2,3,4 move.\n            # If other colors appear, they would stay put under this logic.\n             direction = None # or 'stay'\n\n        # 3b. Calculate target horizontal position shift\n        cols = [c for r, c in pixels]\n        min_col = min(cols)\n        max_col = max(cols)\n        dx = 0  # Default shift is 0 (no movement)\n\n        if direction == 'left':\n            dx = -min_col  # Shift needed to move min_col to 0\n        elif direction == 'right':\n            dx = (width - 1) - max_col  # Shift needed to move max_col to width-1\n\n        # 3c. Calculate new coordinates and place on output grid\n        for r, c in pixels:\n            new_c = c + dx\n            # Ensure the new position is within grid bounds (should be by calculation logic)\n            if 0 <= new_c < width:\n                 # 3d. Place the object pixel onto the output grid\n                output_grid_np[r, new_c] = color\n\n    # 4. Return the final output grid\n    return output_grid_np.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2975,
    "candidates_token_count": 2179,
    "total_token_count": 5154,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-preview-03-25",
  "response_time": 18.663976,
  "retries": 1
}