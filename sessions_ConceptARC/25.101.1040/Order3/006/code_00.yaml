task_type: conditional_pattern_manipulation

grid_properties:
  size: constant across input/output for each example
  background_color: white (0)
  separators: vertical columns composed entirely of background_color

block_properties:
  definition: contiguous vertical segments between separators (or grid edges)
  count: N = number of blocks (0-indexed: B0 to B(N-1))
  colors: assumed consistent majority (M) and minority (m) non-background colors across relevant blocks
  minority_pattern: P[i] = set of relative coordinates `{(row, col_relative)}` of minority_color pixels within input block `i`

transformation_rule:
  condition: depends on the parity of N (number of blocks)
  scope: modifies minority/majority colors within blocks; background and separators remain unchanged
  base_action: rearrange relative minority patterns between blocks based on parity rule
  color_application: within each output block, cells matching the target pattern become minority color (m), other non-background cells become majority color (M)

parity_rules:
  # Case 1: N < 2
  - condition: N < 2
    action: return input grid unchanged

  # Case 2: N is ODD (and N >= 3)
  - condition: N % 2 != 0
    target_patterns: # Output Block <- Input Pattern
      - B0 <- P[N-1]
      - B[i] <- P[i] (for 1 <= i <= N-2)
      - B[N-1] <- P[0]

  # Case 3: N is EVEN (and N >= 2)
  - condition: N % 2 == 0
    target_patterns: # Output Block <- Input Pattern
      - B0 <- P[N-2]
      - B[i] <- P[i-1] (for 1 <= i <= N-2)
      - B[N-1] <- P[N-1]