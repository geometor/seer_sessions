task_description: Transform the grid by selectively moving some yellow pixels horizontally by one step into adjacent white cells.
grid_properties:
  - dimensions_preserved: true
  - background_color: white (0)
  - fixed_colors: [white (0), yellow (4)]
objects:
  - type: pixel
    color: yellow (4)
    behavior: mobile (conditionally)
relationships:
  - type: spatial
    relation: adjacency (left and right neighbours are key)
  - type: state
    property: color (white or yellow) of adjacent cells
actions:
  - name: move_left
    actor: yellow pixel at (r, c)
    condition: Unknown, but requires cell (r, c-1) to be white and within bounds. Observed in Ex2, Ex3.
    effect: Pixel moves to (r, c-1); original cell (r, c) becomes white.
  - name: move_right
    actor: yellow pixel at (r, c)
    condition: Unknown, but requires cell (r, c+1) to be white and within bounds. Observed in Ex1, Ex2, Ex3.
    effect: Pixel moves to (r, c+1); original cell (r, c) becomes white.
  - name: stay_put
    actor: yellow pixel at (r, c)
    condition: Unknown, occurs even when adjacent white cells exist. Observed in all examples.
    effect: Pixel remains at (r, c).
process:
  - type: update
    granularity: simultaneous (all moves are decided based on the initial input state)
    passes: single (the transformation happens once, not iteratively)
notes:
  - The precise conditions triggering move_left, move_right, or stay_put are unclear and likely depend on the configuration of yellow neighbours beyond the immediate left/right cells.
  - No consistent simple rule (e.g., always move left, move towards boundary, move based on L/R neighbour state alone) explains all examples.
  - The transformation results in the same number of yellow pixels.