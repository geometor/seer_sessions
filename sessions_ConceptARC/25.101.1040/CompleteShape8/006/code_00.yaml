task_type: grid_transformation
components:
  - type: grid
    attributes:
      background_color: white (0)
      objects: # Defined by color, not necessarily connectivity
        - type: color_group
          properties:
            color: [yellow(4), gray(5), magenta(6), orange(7)] # Observed colors
            pixel_coordinates: set of (row, col) tuples for a given color (C)
            bounding_box: # Calculated based on all pixels of the color
              type: rectangle
              properties: [min_r, min_c, max_r, max_c, height(H), width(W)]
            input_pattern: # Derived property based on C relative to bounding_box
              values:
                - two_pixel_2x2_diagonal # C = {(min_r, min_c), (max_r, max_c)} when H=2, W=2
                - two_pixel_3x3_anti_diagonal # C = {(min_r, max_c), (max_r, min_c)} when H=3, W=3
                - general_3x3 # H=3, W=3, but not two_pixel_3x3_anti_diagonal
                - other # Fallback for any other pattern
actions:
  - action: initialize_output
    target: grid
    effect: create grid of same dimensions as input, filled with white(0)
  - action: identify_unique_colors
    target: all non-background pixels in the input grid
  - action: process_by_color
    target: each unique color found
    rules:
      - condition: color is gray (5)
        effect: ignore_color (pixels remain background in output)
      - condition: color is not gray
        steps:
          - step: gather_all_pixels_of_color (output C, color)
          - step: calculate_bounding_box (input C, output B, H, W)
          - step: determine_input_pattern (input C, B, H, W)
          - step: apply_transformation_based_on_pattern
            sub_rules:
              - condition: input_pattern is two_pixel_2x2_diagonal
                effect: draw_pattern_A # Specific 6-pixel output relative to B
                arguments: { color: color, top_left: (min_r, min_c) }
              - condition: input_pattern is two_pixel_3x3_anti_diagonal
                effect: draw_pattern_B # Specific 6-pixel output relative to B
                arguments: { color: color, bbox: B }
              - condition: input_pattern is general_3x3
                effect: fill_bounding_box_in_output
                arguments: { color: color, area: B }
              - condition: input_pattern is other
                effect: copy_original_pixels_to_output
                arguments: { color: color, pixels: C }
relationships:
  - type: spatial
    elements: [color_group_pixels, bounding_box]
    relation: specific configuration of pixels within the bounding box defines the input_pattern
  - type: conditional_transformation
    condition: color value AND input_pattern
    effect: determines transformation rule (ignore, draw_pattern_A, draw_pattern_B, fill_bbox, copy_original)