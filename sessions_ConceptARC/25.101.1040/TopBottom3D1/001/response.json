{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport copy\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Transforms the input grid based on the following logic:\n    1. Identify the two distinct non-background (non-zero) colors present (C1, C2). If not exactly two, return the input grid unchanged.\n    2. Create a copy of the input grid to serve as the output grid.\n    3. Iterate through each row of the grid.\n    4. For rows containing pixels of both C1 and C2:\n        a. Find the minimum and maximum column indices occupied by C1 (min1, max1) and C2 (min2, max2) within that row.\n        b. Determine the overall minimum (min_col) and maximum (max_col) column index occupied by either C1 or C2 in that row.\n        c. Identify the 'fill_color':\n            - If C1's horizontal span in the row includes or equals C2's span (min1 <= min2 and max1 >= max2), then fill_color is C1.\n            - Else if C2's horizontal span includes or equals C1's span (min2 <= min1 and max2 >= max1), then fill_color is C2.\n            - If neither condition is met (which shouldn't happen based on observed examples), no fill color is determined for this row.\n        d. If a fill_color was determined, modify the output grid by setting all cells in the current row from min_col to max_col (inclusive) to the fill_color.\n    5. Rows containing only one type of non-background color, or only background color, remain unchanged in the output grid.\n    6. Return the modified output grid.\n    \"\"\"\n    \n    # Convert input to numpy array for easier manipulation and analysis\n    grid = np.array(input_grid, dtype=int)\n    # Create a copy to modify, ensuring unchanged rows/pixels are preserved\n    output_grid = np.copy(grid) \n    height, width = grid.shape\n\n    # --- Step 1: Identify non-background colors ---\n    unique_colors = np.unique(grid)\n    non_background_colors = [c for c in unique_colors if c != 0]\n\n    # --- Expecting exactly two non-background colors based on examples ---\n    if len(non_background_colors) != 2:\n        # If condition not met, return the original grid as per instructions/observations\n        # print(\"Warning: Did not find exactly two non-background colors.\")\n        return input_grid \n        \n    c1, c2 = non_background_colors\n\n    # --- Step 3 & 4: Process each row ---\n    for r in range(height):\n        row = grid[r, :]\n        \n        # Find column indices for each color in the current row\n        cols_c1 = np.where(row == c1)[0]\n        cols_c2 = np.where(row == c2)[0]\n\n        # --- Step 4: Proceed only if both colors are present in the row ---\n        if len(cols_c1) > 0 and len(cols_c2) > 0:\n            # --- Step 4a: Find min/max columns for each color ---\n            min_col_c1, max_col_c1 = cols_c1.min(), cols_c1.max()\n            min_col_c2, max_col_c2 = cols_c2.min(), cols_c2.max()\n\n            # --- Step 4b: Find overall min/max columns for non-background colors ---\n            min_col = min(min_col_c1, min_col_c2)\n            max_col = max(max_col_c1, max_col_c2)\n\n            # --- Step 4c: Determine the fill color based on horizontal span inclusion ---\n            fill_color = -1 # Initialize with an invalid value\n            if min_col_c1 <= min_col_c2 and max_col_c1 >= max_col_c2:\n                 # C1 encloses or equals C2 horizontally, or spans the full range if C2 is single point\n                 fill_color = c1 \n            elif min_col_c2 <= min_col_c1 and max_col_c2 >= max_col_c1:\n                 # C2 encloses or equals C1 horizontally, or spans the full range if C1 is single point\n                 fill_color = c2 \n            # else: \n                 # This case implies neither color fully encloses the other horizontally.\n                 # Examples suggest one color's span will always define the bounds for filling.\n                 # If this case were encountered, specific rules would be needed. We assume it won't happen.\n                 # print(f\"Warning: Ambiguous fill condition in row {r}.\")\n                 \n            # --- Step 4d: Fill the row segment in the output grid ---\n            if fill_color != -1:\n                for c in range(min_col, max_col + 1):\n                    # Modify the copied grid\n                    output_grid[r, c] = fill_color\n        # --- Step 5: Rows with 0 or 1 non-background color are implicitly unchanged ---\n        # as we only modify rows where len(cols_c1)>0 and len(cols_c2)>0\n\n    # --- Step 6: Convert back to list of lists for the final output ---\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3027,
    "candidates_token_count": 7087,
    "total_token_count": 10114,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-preview-03-25",
  "response_time": 49.476686,
  "retries": 1
}