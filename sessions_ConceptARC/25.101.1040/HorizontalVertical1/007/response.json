{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nTransforms an input grid by conditionally filling enclosed white regions (color 0).\n\nThe transformation follows these steps:\n\n1.  **Count Distinct Colors:** Determine the number of unique non-white colors (`num_distinct_shape_colors`) in the input grid.\n2.  **Identify White Regions and Properties:** Find all contiguous white regions using 8-way adjacency. For each region, determine:\n    a.  `touches_border`: If any pixel is on the grid edge.\n    b.  `adjacent_non_white_colors`: The set of unique non-white colors adjacent (8-way) to the region.\n    c.  `touches_external_white`: If any pixel in the region is adjacent (8-way) to a white pixel *not* belonging to the same contiguous region.\n3.  **Determine Fill Rule:** Select a color mapping based on `num_distinct_shape_colors`:\n    *   If <= 2 distinct colors: Rule A {Red(2): Green(3), Yellow(4): Orange(7)}.\n    *   If >= 3 distinct colors: Rule B {Red(2): Orange(7), Yellow(4): Green(3), Orange(7): Green(3)}.\n4.  **Fill Qualifying Regions:** Create a copy of the input. A region is filled if it meets ALL three conditions: (a) `touches_border` is False, (b) `adjacent_non_white_colors` has exactly one color, and (c) `touches_external_white` is True. If qualified, fill the region with the color mapped from its single adjacent non-white color using the selected rule.\n5.  **Return Result:** The modified grid copy.\n\"\"\"\n\ndef _find_white_regions_and_properties(grid: np.ndarray) -> list[tuple[set[tuple[int, int]], set[int], bool, bool]]:\n    \"\"\"\n    Identifies contiguous white regions and their properties using BFS.\n\n    Args:\n        grid: The input grid as a numpy array.\n\n    Returns:\n        A list where each element represents a white region and contains:\n        - A set of (row, col) tuples for pixels in the region.\n        - A set of adjacent non-white colors.\n        - A boolean indicating if the region touches the border.\n        - A boolean indicating if the region touches external white pixels.\n    \"\"\"\n    height, width = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    regions_data = []\n\n    for r in range(height):\n        for c in range(width):\n            # Start BFS for a new white region if it's white and not visited\n            if grid[r, c] == 0 and not visited[r, c]:\n                region_pixels = set()\n                adjacent_non_white_colors = set()\n                region_touches_border = False\n                queue = deque([(r, c)])\n                visited[r, c] = True\n                region_touches_external_white = False # Initialize for this region\n\n                # --- BFS to find all pixels in the current region ---\n                processed_in_bfs = set([(r,c)]) # Keep track of pixels added to queue/processed\n                while queue:\n                    curr_r, curr_c = queue.popleft()\n                    region_pixels.add((curr_r, curr_c))\n\n                    # Check if the current pixel touches the border\n                    if not region_touches_border and (curr_r == 0 or curr_r == height - 1 or curr_c == 0 or curr_c == width - 1):\n                        region_touches_border = True\n\n                    # Check 8 neighbors\n                    for dr in [-1, 0, 1]:\n                        for dc in [-1, 0, 1]:\n                            if dr == 0 and dc == 0:\n                                continue # Skip self\n\n                            nr, nc = curr_r + dr, curr_c + dc\n                            neighbor_pos = (nr, nc)\n\n                            # Check if neighbor is within bounds\n                            if 0 <= nr < height and 0 <= nc < width:\n                                neighbor_color = grid[nr, nc]\n\n                                if neighbor_color == 0: # Neighbor is white\n                                    # If white and not yet visited/queued for this region's BFS\n                                    if not visited[nr, nc]:\n                                        visited[nr, nc] = True\n                                        processed_in_bfs.add(neighbor_pos)\n                                        queue.append(neighbor_pos)\n                                    # If white, but already visited (either by this BFS or a previous one)\n                                    # AND it's not part of the current region's BFS exploration\n                                    # -> this means it's an external white pixel adjacent to the current region boundary\n                                    elif neighbor_pos not in processed_in_bfs:\n                                        region_touches_external_white = True\n\n                                elif neighbor_color > 0: # Neighbor is non-white\n                                    adjacent_non_white_colors.add(neighbor_color)\n                            # else: neighbor is out of bounds (implicitly handled by border check)\n\n                # --- Correction for touches_external_white check ---\n                # The BFS inherently finds all connected white pixels. If during the BFS of a region,\n                # we encounter a neighbor that is white BUT already visited (meaning it belongs to\n                # a *different* white region or the main background), then we have touched external white.\n                # The previous logic checked this correctly within the loop.\n                # Let's re-verify the logic more explicitly after the BFS.\n                # (Alternative approach - less efficient but perhaps clearer):\n                # After finding all region_pixels via BFS...\n                # Check neighbors of all region_pixels again:\n                # if neighbor is white AND neighbor not in region_pixels -> touches external white\n\n                # --- Explicit check post-BFS (optional, previous logic might be sufficient) ---\n                # if not region_touches_external_white: # Only run if not already found\n                #     for pr, pc in region_pixels:\n                #         for dr in [-1, 0, 1]:\n                #             for dc in [-1, 0, 1]:\n                #                 if dr == 0 and dc == 0: continue\n                #                 nr, nc = pr + dr, pc + dc\n                #                 if 0 <= nr < height and 0 <= nc < width:\n                #                     if grid[nr, nc] == 0 and (nr, nc) not in region_pixels:\n                #                         region_touches_external_white = True\n                #                         break\n                #         if region_touches_external_white: break\n\n\n                # Store the collected data for this region\n                regions_data.append((\n                    region_pixels,\n                    adjacent_non_white_colors,\n                    region_touches_border,\n                    region_touches_external_white # Use the flag set during BFS\n                ))\n\n    return regions_data\n\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Transforms the input grid by conditionally filling enclosed white regions.\n    \"\"\"\n    # Initialize grid and output\n    grid = np.array(input_grid, dtype=int)\n    output_grid = grid.copy()\n\n    # Step 1: Count Distinct Colors\n    shape_colors = set(grid[grid > 0])\n    num_distinct_shape_colors = len(shape_colors)\n\n    # Step 3: Determine Fill Rule\n    fill_map = {}\n    if num_distinct_shape_colors <= 2:\n        # Rule Set A\n        fill_map = {\n            2: 3,  # Red -> Green\n            4: 7,  # Yellow -> Orange\n        }\n    else:\n        # Rule Set B\n        fill_map = {\n            2: 7,  # Red -> Orange\n            4: 3,  # Yellow -> Green\n            7: 3,  # Orange -> Green\n        }\n\n    # Step 2: Identify White Regions and Properties\n    regions_data = _find_white_regions_and_properties(grid)\n\n    # Step 4: Fill Qualifying Regions\n    for region_pixels, adjacent_colors, touches_border, touches_external_white in regions_data:\n        # Check the three conditions for filling\n        is_fillable = (\n            not touches_border and\n            len(adjacent_colors) == 1 and\n            touches_external_white\n        )\n\n        if is_fillable:\n            enclosing_color = list(adjacent_colors)[0]\n            # Check if the enclosing color has a mapping in the selected rule set\n            if enclosing_color in fill_map:\n                fill_color = fill_map[enclosing_color]\n                # Fill the region in the output grid\n                for pr, pc in region_pixels:\n                    output_grid[pr, pc] = fill_color\n            # Else: If enclosing_color is not in the map, region remains white (no action needed).\n\n    # Step 5: Return Result\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 34893,
    "candidates_token_count": 2611,
    "total_token_count": 37504,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-preview-03-25",
  "response_time": 19.684905,
  "retries": 1
}