{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies enclosed white regions (color 0) within an input grid and fills them based on specific criteria and rules.\n\nThe transformation involves the following steps:\n\n1.  **Analyze Grid Colors:** Determine the number of unique non-white colors (`num_distinct_shape_colors`) present in the input grid.\n2.  **Identify White Regions and Properties:**\n    *   Find all contiguous regions of white pixels using 8-way adjacency.\n    *   For each white region, determine:\n        *   `touches_border`: Whether any pixel in the region lies on the grid's outer edge.\n        *   `adjacent_non_white_colors`: The set of unique colors of non-white pixels adjacent (8-way) to the region.\n        *   `touches_external_white`: Whether any pixel in the region is adjacent (8-way) to a white pixel that is *not* part of the same contiguous region.\n3.  **Select Fill Mapping Rule:** Choose a color transformation map based on `num_distinct_shape_colors`:\n    *   **Rule A (<= 2 distinct colors):** Red(2) -> Green(3), Yellow(4) -> Orange(7).\n    *   **Rule B (>= 3 distinct colors):** Red(2) -> Orange(7), Yellow(4) -> Green(3), Orange(7) -> Green(3).\n4.  **Apply Conditional Filling:**\n    *   A white region is filled *only if* all three conditions are met:\n        1.  `touches_border` is False.\n        2.  `adjacent_non_white_colors` contains exactly one color.\n        3.  `touches_external_white` is True.\n    *   If all conditions are met, the region is filled with the color determined by the selected fill rule and the single adjacent non-white color.\n    *   Otherwise, the region remains white.\n5.  **Output:** Return the modified grid.\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef _find_white_regions_and_properties(grid: np.ndarray) -> list[tuple[set[tuple[int, int]], set[int], bool, bool]]:\n    \"\"\"\n    Identifies contiguous white regions and their properties using BFS.\n\n    Args:\n        grid: The input grid as a numpy array.\n\n    Returns:\n        A list where each element represents a white region and contains:\n        - A set of (row, col) tuples for pixels in the region.\n        - A set of adjacent non-white colors.\n        - A boolean indicating if the region touches the border.\n        - A boolean indicating if the region touches external white pixels.\n    \"\"\"\n    height, width = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    regions_data = []\n    all_white_pixels = set(zip(*np.where(grid == 0))) # Pre-calculate all white pixel locations\n\n    for r in range(height):\n        for c in range(width):\n            # Start BFS for a new white region if it's white and not visited\n            if grid[r, c] == 0 and not visited[r, c]:\n                region_pixels = set()\n                adjacent_non_white_colors = set()\n                region_touches_border = False\n                queue = deque([(r, c)])\n                visited[r, c] = True\n\n                # --- BFS to find all pixels in the current region ---\n                while queue:\n                    curr_r, curr_c = queue.popleft()\n                    region_pixels.add((curr_r, curr_c))\n\n                    # Check if the current pixel touches the border\n                    if not region_touches_border and (curr_r == 0 or curr_r == height - 1 or curr_c == 0 or curr_c == width - 1):\n                        region_touches_border = True\n\n                    # Check 8 neighbors\n                    for dr in [-1, 0, 1]:\n                        for dc in [-1, 0, 1]:\n                            if dr == 0 and dc == 0:\n                                continue # Skip self\n\n                            nr, nc = curr_r + dr, curr_c + dc\n\n                            # Check if neighbor is within bounds\n                            if 0 <= nr < height and 0 <= nc < width:\n                                neighbor_color = grid[nr, nc]\n                                neighbor_pos = (nr, nc)\n\n                                if neighbor_color == 0: # Neighbor is white\n                                    if not visited[nr, nc]:\n                                        visited[nr, nc] = True\n                                        queue.append(neighbor_pos)\n                                # else: Neighbor is non-white\n                                elif neighbor_color > 0:\n                                    adjacent_non_white_colors.add(neighbor_color)\n                # --- End of BFS for the current region ---\n\n                # --- Check if region touches external white pixels ---\n                region_touches_external_white = False\n                for pr, pc in region_pixels:\n                    for dr in [-1, 0, 1]:\n                        for dc in [-1, 0, 1]:\n                            if dr == 0 and dc == 0:\n                                continue\n                            nr, nc = pr + dr, pc + dc\n                            neighbor_pos = (nr, nc)\n                            if 0 <= nr < height and 0 <= nc < width:\n                                # Check if neighbor is white AND not part of the current region\n                                if grid[nr, nc] == 0 and neighbor_pos not in region_pixels:\n                                     # Optimization: If neighbor is white and outside the current region, it MUST be external white\n                                     # because all white pixels connected to the starting point were already added to region_pixels by BFS.\n                                     region_touches_external_white = True\n                                     break # Found one external white neighbor, no need to check more for this pixel\n                    if region_touches_external_white:\n                        break # Found one external white neighbor for the whole region, no need to check more pixels\n\n                # Store the collected data for this region\n                regions_data.append((\n                    region_pixels,\n                    adjacent_non_white_colors,\n                    region_touches_border,\n                    region_touches_external_white\n                ))\n\n    return regions_data\n\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Transforms the input grid by conditionally filling enclosed white regions.\n\n    Args:\n        input_grid: A list of lists representing the input grid.\n\n    Returns:\n        A list of lists representing the transformed grid.\n    \"\"\"\n    # Initialize grid and output\n    grid = np.array(input_grid, dtype=int)\n    output_grid = grid.copy()\n\n    # 1. Analyze Grid Colors: Count distinct non-white colors\n    shape_colors = set(grid[grid > 0])\n    num_distinct_shape_colors = len(shape_colors)\n\n    # 3. Select Fill Mapping Rule based on the count\n    fill_map = {}\n    if num_distinct_shape_colors <= 2:\n        # Rule Set A\n        fill_map = {\n            2: 3,  # Red -> Green\n            4: 7,  # Yellow -> Orange\n        }\n    else:\n        # Rule Set B\n        fill_map = {\n            2: 7,  # Red -> Orange\n            4: 3,  # Yellow -> Green\n            7: 3,  # Orange -> Green (Reinstated)\n        }\n\n    # 2. Identify White Regions and Properties\n    regions_data = _find_white_regions_and_properties(grid)\n\n    # 4. Apply Conditional Filling\n    for region_pixels, adjacent_colors, touches_border, touches_external_white in regions_data:\n        # Check the three conditions for filling\n        is_fillable = (\n            not touches_border and\n            len(adjacent_colors) == 1 and\n            touches_external_white\n        )\n\n        if is_fillable:\n            enclosing_color = list(adjacent_colors)[0]\n            # Check if the enclosing color has a mapping in the selected rule set\n            if enclosing_color in fill_map:\n                fill_color = fill_map[enclosing_color]\n                # Fill the region in the output grid\n                for pr, pc in region_pixels:\n                    output_grid[pr, pc] = fill_color\n            # Else: If enclosing_color is not in the map, region remains white.\n\n    # 5. Return Output\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 23136,
    "candidates_token_count": 2980,
    "total_token_count": 26116,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-preview-03-25",
  "response_time": 20.97867,
  "retries": 1
}