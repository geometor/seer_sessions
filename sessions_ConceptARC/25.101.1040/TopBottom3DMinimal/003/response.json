{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid based on a conditional color change rule determined by neighbor counts. \nThe rule identifies two non-background colors in the grid. One color is designated the 'Loser' (L) and the other the 'Winner' (W). \nA pixel with the Loser color L changes to the Winner color W if the number of its 8 neighbors (including diagonals) that have the Winner color W meets or exceeds a specific threshold. \nThe Loser color, Winner color, and the Threshold value are determined by the specific pair of non-background colors present, based on observations from training examples:\n- Pair {Red(2), Green(3)}: L=2, W=3, Threshold=3.\n- Pair {Magenta(6), Orange(7)}: L=7, W=6, Threshold=4.\nPixels that are background (0), already the Winner color, or Loser color pixels that do not meet the neighbor threshold remain unchanged.\n\"\"\"\n\nimport copy\n\ndef get_neighbors(r, c, height, width):\n    \"\"\"\n    Gets coordinates of up to 8 neighbors (including diagonals) for a cell (r, c)\n    within the grid bounds.\n    \"\"\"\n    neighbors = []\n    for dr in [-1, 0, 1]:\n        for dc in [-1, 0, 1]:\n            # Skip the cell itself\n            if dr == 0 and dc == 0:\n                continue\n            nr, nc = r + dr, c + dc\n            # Check if the neighbor is within grid boundaries\n            if 0 <= nr < height and 0 <= nc < width:\n                neighbors.append((nr, nc))\n    return neighbors\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies the neighbor-count-threshold color transformation rule.\n    \"\"\"\n    # Initialize output_grid as a deep copy of the input\n    output_grid = copy.deepcopy(input_grid)\n    height = len(input_grid)\n    width = len(input_grid[0])\n\n    # 1. Identify the two non-background colors\n    colors = set()\n    for r in range(height):\n        for c in range(width):\n            if input_grid[r][c] != 0:\n                colors.add(input_grid[r][c])\n\n    # Expect exactly two non-background colors\n    if len(colors) != 2:\n        # If not exactly two non-background colors, return the original grid copy\n        return output_grid\n\n    color_list = list(colors)\n    c1, c2 = color_list[0], color_list[1]\n\n    # 2. Determine Loser (L), Winner (W) colors and Threshold based on the color pair\n    loser_color = -1\n    winner_color = -1\n    threshold = -1\n\n    if {c1, c2} == {2, 3}:  # Red(2) vs Green(3)\n        loser_color = 2\n        winner_color = 3\n        threshold = 3\n    elif {c1, c2} == {6, 7}:  # Magenta(6) vs Orange(7)\n        loser_color = 7\n        winner_color = 6\n        threshold = 4\n    else:\n        # If the color pair is not one of the known pairs, return the original grid copy\n        return output_grid\n\n    # 3. Iterate through each cell of the input grid\n    for r in range(height):\n        for c in range(width):\n            # 4. Check if the current cell has the Loser color\n            if input_grid[r][c] == loser_color:\n                winner_neighbor_count = 0\n                # 4a. Get neighbors\n                neighbors = get_neighbors(r, c, height, width)\n                # 4b. Count neighbors with the Winner color in the *input* grid\n                for nr, nc in neighbors:\n                    if input_grid[nr][nc] == winner_color:\n                        winner_neighbor_count += 1\n\n                # 4c. Check if the count meets or exceeds the threshold\n                if winner_neighbor_count >= threshold:\n                    # 4d. Change the color in the output grid\n                    output_grid[r][c] = winner_color\n\n    # 5. Return the transformed grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 11795,
    "candidates_token_count": 1318,
    "total_token_count": 13113,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-preview-03-25",
  "response_time": 10.277277,
  "retries": 1
}