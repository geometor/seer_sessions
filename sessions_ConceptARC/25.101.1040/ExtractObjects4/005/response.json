{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid by:\n1. Identifying the single dominant non-white color (C).\n2. Identifying the rows that contain at least one pixel of color C ('relevant rows').\n3. Identifying columns that contain any pixel *not* equal to C within the relevant rows ('impure columns').\n4. Counting the number of impure columns.\n5. Calculating the output grid size N as the input grid's width minus the count of impure columns.\n6. Generating an N x N square grid filled entirely with the dominant color C.\n\"\"\"\n\nimport numpy as np\nfrom typing import List, Tuple, Optional\n\n# Helper function to find the dominant non-white color\ndef find_dominant_color(grid_np: np.ndarray) -> Optional[int]:\n    \"\"\"Finds the single non-white color in the grid.\"\"\"\n    unique_colors = np.unique(grid_np)\n    non_white_colors = unique_colors[unique_colors != 0]\n    if len(non_white_colors) >= 1:\n        # In case of multiple non-white, task examples imply only one matters.\n        # We can assume the lowest numbered one, or most frequent,\n        # but based on examples, taking the first (often only) one works.\n        return int(non_white_colors[0])\n    else:\n        # Handle case with no non-white colors (e.g., all white grid)\n        return None\n\n# Helper function to find relevant row indices\ndef find_relevant_rows(grid_np: np.ndarray, dominant_color: int) -> np.ndarray:\n    \"\"\"Finds the indices of rows containing the dominant color.\"\"\"\n    if dominant_color is None:\n        return np.array([], dtype=int)\n    rows_with_color = np.any(grid_np == dominant_color, axis=1)\n    relevant_indices = np.where(rows_with_color)[0]\n    return relevant_indices\n\n# Helper function to count impure columns\ndef count_impure_columns(grid_np: np.ndarray, dominant_color: int, relevant_row_indices: np.ndarray) -> int:\n    \"\"\"Counts columns that contain any non-dominant color within relevant rows.\"\"\"\n    # If no dominant color or no relevant rows found, define all columns as 'not impure' based on this criteria.\n    if dominant_color is None or relevant_row_indices.size == 0:\n        return 0\n\n    num_cols = grid_np.shape[1]\n    impure_column_count = 0\n\n    for j in range(num_cols):\n        # Extract the column slice corresponding to the relevant rows\n        column_slice = grid_np[relevant_row_indices, j]\n        # Check if *any* element in this slice is *not* the dominant color\n        if np.any(column_slice != dominant_color):\n            impure_column_count += 1\n\n    return impure_column_count\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transforms the input grid based on identifying impure columns relative to the dominant color.\n\n    Args:\n        input_grid: A list of lists representing the input grid.\n\n    Returns:\n        A list of lists representing the output grid.\n    \"\"\"\n    # Convert input to numpy array for efficient processing\n    input_grid_np = np.array(input_grid, dtype=int)\n\n    # Handle empty input grid case\n    if input_grid_np.size == 0:\n        return []\n\n    # 1. Identify the Dominant Color\n    dominant_color = find_dominant_color(input_grid_np)\n\n    # Handle case where no dominant color is found (e.g., all white)\n    if dominant_color is None:\n        # Based on examples, this shouldn't happen, but returning empty seems reasonable.\n        return []\n\n    # 2. Identify Relevant Rows (rows containing the dominant color)\n    relevant_row_indices = find_relevant_rows(input_grid_np, dominant_color)\n\n    # 3. Count Impure Columns\n    # A column is impure if, within any relevant row, it contains a color other than the dominant one.\n    impure_column_count = count_impure_columns(input_grid_np, dominant_color, relevant_row_indices)\n\n    # 4. Determine Output Size\n    input_width = input_grid_np.shape[1]\n    output_size = input_width - impure_column_count\n\n    # Ensure output size is not negative (though unlikely given the logic)\n    output_size = max(0, output_size)\n\n    # 5. Create Output Grid\n    # Generate an N x N grid filled with the dominant color, where N is the calculated size.\n    output_grid_np = np.full((output_size, output_size), dominant_color, dtype=int)\n\n    # Convert numpy array back to list of lists for the required output format\n    output_grid = output_grid_np.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 14100,
    "candidates_token_count": 1483,
    "total_token_count": 15583,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-preview-03-25",
  "response_time": 10.298702,
  "retries": 1
}