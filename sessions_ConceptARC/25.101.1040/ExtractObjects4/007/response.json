{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid based on the following rules:\n1. Identify the single dominant non-white color (C) in the input grid.\n2. Identify the rows containing at least one pixel of color C ('relevant rows').\n3. Identify columns that contain *only* color C for all pixels intersecting with the relevant rows ('pure columns').\n4. Find the largest number of consecutively indexed pure columns (the 'largest contiguous pure column block size', N).\n5. Generate an N x N square output grid filled entirely with the dominant color C.\n\"\"\"\n\nimport numpy as np\nfrom typing import List, Optional, Set\n\ndef find_dominant_color(grid_np: np.ndarray) -> Optional[int]:\n    \"\"\"Finds the single non-white color in the grid, assuming one exists.\"\"\"\n    unique_colors = np.unique(grid_np)\n    non_white_colors = unique_colors[unique_colors != 0]\n    if len(non_white_colors) >= 1:\n        # Based on examples, assume the first non-white color is dominant.\n        return int(non_white_colors[0])\n    else:\n        # No non-white color found\n        return None\n\ndef find_relevant_rows(grid_np: np.ndarray, dominant_color: int) -> np.ndarray:\n    \"\"\"Finds the indices of rows containing the dominant color.\"\"\"\n    if dominant_color is None:\n        return np.array([], dtype=int)\n    rows_with_color = np.any(grid_np == dominant_color, axis=1)\n    relevant_indices = np.where(rows_with_color)[0]\n    return relevant_indices\n\ndef find_pure_column_indices(grid_np: np.ndarray, dominant_color: int, relevant_row_indices: np.ndarray) -> List[int]:\n    \"\"\"Finds indices of columns that are pure within relevant rows.\"\"\"\n    pure_indices = []\n    if dominant_color is None or relevant_row_indices.size == 0:\n        return pure_indices\n\n    num_cols = grid_np.shape[1]\n    for j in range(num_cols):\n        column_slice = grid_np[relevant_row_indices, j]\n        if np.all(column_slice == dominant_color):\n            pure_indices.append(j)\n    return pure_indices\n\ndef find_largest_contiguous_block_size(indices: List[int]) -> int:\n    \"\"\"Calculates the maximum length of consecutive numbers in a sorted list.\"\"\"\n    if not indices:\n        return 0\n\n    indices.sort() # Ensure indices are sorted\n    max_len = 0\n    current_len = 0\n    last_idx = -2 # Initialize to ensure the first index starts a new block\n\n    for idx in indices:\n        if idx == last_idx + 1:\n            # Index is contiguous with the previous one\n            current_len += 1\n        else:\n            # Non-contiguous index, end the previous block\n            max_len = max(max_len, current_len)\n            # Start a new block of length 1\n            current_len = 1\n        last_idx = idx\n\n    # Check the length of the last block after the loop finishes\n    max_len = max(max_len, current_len)\n    return max_len\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Applies the transformation logic to the input grid.\n    \"\"\"\n    # Convert input to numpy array for efficient processing\n    input_grid_np = np.array(input_grid, dtype=int)\n\n    # Handle empty input grid\n    if input_grid_np.size == 0:\n        return []\n\n    # Step 1: Identify the Dominant Color\n    dominant_color = find_dominant_color(input_grid_np)\n    if dominant_color is None:\n         # If no dominant color, output is empty (or handle as needed)\n        return []\n\n    # Step 2: Identify Relevant Rows\n    relevant_row_indices = find_relevant_rows(input_grid_np, dominant_color)\n    if relevant_row_indices.size == 0:\n        # If no relevant rows, output is empty (size 0)\n        return []\n\n    # Step 3: Identify Pure Columns\n    pure_column_indices = find_pure_column_indices(input_grid_np, dominant_color, relevant_row_indices)\n\n    # Step 4: Find Largest Contiguous Block Size of Pure Columns\n    output_size = find_largest_contiguous_block_size(pure_column_indices)\n\n    # Step 5: Create Output Grid\n    output_grid_np = np.full((output_size, output_size), dominant_color, dtype=int)\n\n    # Convert output numpy array back to list of lists\n    output_grid = output_grid_np.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 21001,
    "candidates_token_count": 1468,
    "total_token_count": 22469,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-preview-03-25",
  "response_time": 11.416849,
  "retries": 1
}