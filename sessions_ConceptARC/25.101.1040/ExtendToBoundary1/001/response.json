{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\n\n\"\"\"\n1. Identify the single contiguous block of non-white pixels in the input grid. Determine its color (C) and bounding box (min_row, max_row, min_col, max_col).\n2. Determine the height (H) and width (W) of the input grid.\n3. Calculate the middle row index of the object: `mid_row = (min_row + max_row) // 2`.\n4. Calculate the middle column index of the object: `mid_col = (min_col + max_col) // 2`.\n5. Create a copy of the input grid to serve as the output grid.\n6. Compare the grid width (W) and height (H):\n    *   If W > H (grid is wider than tall):\n        *   Iterate through each column index `c` from `max_col + 1` up to `W - 1`.\n        *   Set the pixel value at `(mid_row, c)` in the output grid to color C.\n    *   Else (if H >= W, grid is taller than or same height as width):\n        *   Iterate through each row index `r` from `max_row + 1` up to `H - 1`.\n        *   Set the pixel value at `(r, mid_col)` in the output grid to color C.\n7. Return the modified output grid.\n\"\"\"\n\ndef find_object_properties(grid: list[list[int]]) -> tuple[int, int, int, int, int] | None:\n    \"\"\"\n    Finds the first non-background object and returns its color and bounding box.\n    Assumes a single contiguous non-background object.\n    \"\"\"\n    height = len(grid)\n    width = len(grid[0])\n    object_color = -1\n    object_pixels = []\n\n    # Find the first non-background pixel and its color\n    for r in range(height):\n        for c in range(width):\n            if grid[r][c] != 0:\n                object_color = grid[r][c]\n                break\n        if object_color != -1:\n            break\n    \n    if object_color == -1:\n        return None # No object found\n\n    # Find all pixels of the object color to determine the bounding box\n    min_row, max_row = height, -1\n    min_col, max_col = width, -1\n    for r in range(height):\n        for c in range(width):\n            if grid[r][c] == object_color:\n                min_row = min(min_row, r)\n                max_row = max(max_row, r)\n                min_col = min(min_col, c)\n                max_col = max(max_col, c)\n\n    if min_row > max_row or min_col > max_col: # Should not happen if object_color was found\n         return None\n         \n    return object_color, min_row, max_row, min_col, max_col\n\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Transforms the input grid by extending a line from the middle\n    of the single object to the edge of the grid. The direction\n    of the line depends on the grid's aspect ratio.\n    \"\"\"\n    # Initialize output_grid as a deep copy of the input\n    output_grid = copy.deepcopy(input_grid)\n    \n    # Get grid dimensions\n    height = len(output_grid)\n    if height == 0:\n        return output_grid # Handle empty grid\n    width = len(output_grid[0])\n    if width == 0:\n        return output_grid # Handle empty row\n\n    # 1. Identify the object and its properties\n    object_props = find_object_properties(output_grid)\n    if object_props is None:\n        return output_grid # No object found, return copy of input\n\n    object_color, min_row, max_row, min_col, max_col = object_props\n\n    # 3. Calculate middle row index of the object\n    mid_row = (min_row + max_row) // 2\n    \n    # 4. Calculate middle column index of the object\n    mid_col = (min_col + max_col) // 2\n\n    # 6. Compare grid width and height and draw the line\n    if width > height:\n        # Grid is wider than tall: draw horizontal line\n        # Iterate from the column after the object to the right edge\n        for c in range(max_col + 1, width):\n            # Check bounds just in case, though mid_row should be valid\n            if 0 <= mid_row < height:\n                 output_grid[mid_row][c] = object_color\n    else:\n        # Grid is taller than or same height as width: draw vertical line\n        # Iterate from the row below the object to the bottom edge\n        for r in range(max_row + 1, height):\n             # Check bounds just in case, though mid_col should be valid\n            if 0 <= mid_col < width:\n                output_grid[r][mid_col] = object_color\n\n    # 7. Return the modified output grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3107,
    "candidates_token_count": 1761,
    "total_token_count": 4868,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-preview-03-25",
  "response_time": 13.002746,
  "retries": 1
}