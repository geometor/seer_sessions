{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nProcesses each column of the input grid independently. \nIf a column contains multiple distinct non-white colors and one of these colors \nappears strictly more frequently than any other non-white color in that column \n(i.e., it has a unique majority), then all pixels of that majority color \nwithin that column are changed to white (0). \nOtherwise (if the column has 0 or 1 non-white color, or multiple non-white \ncolors without a unique majority), the column remains unchanged.\n\"\"\"\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies the transformation rule based on column analysis.\n\n    Args:\n        input_grid: A list of lists representing the input grid.\n\n    Returns:\n        A list of lists representing the transformed grid.\n    \"\"\"\n    # Convert input to numpy array for easier slicing and manipulation\n    input_array = np.array(input_grid, dtype=int)\n    # Initialize output_grid as a copy of the input\n    output_array = np.copy(input_array)\n    height, width = input_array.shape\n\n    # Iterate through each column independently\n    for j in range(width):\n        col = input_array[:, j]\n        \n        # Find unique non-white colors and their counts in the current column\n        non_white_pixels = col[col != 0]\n        \n        # If there are no non-white pixels, the column remains unchanged, continue\n        if len(non_white_pixels) == 0:\n            continue \n\n        counts = Counter(non_white_pixels)\n        unique_non_white_colors = list(counts.keys())\n\n        # Check if there is more than one unique non-white color\n        if len(unique_non_white_colors) > 1:\n            # Get counts sorted by frequency (most common first)\n            sorted_counts = counts.most_common()\n            \n            # Check if there is a unique majority color\n            # This happens if the count of the most frequent color is strictly\n            # greater than the count of the second most frequent color.\n            # If there's only one unique non-white color, len(sorted_counts) would be 1,\n            # and this condition handles the case where there are exactly two colors\n            # with equal frequency (len > 1, but counts[0][1] == counts[1][1]).\n            is_unique_majority = False\n            if len(sorted_counts) > 1: \n                 if sorted_counts[0][1] > sorted_counts[1][1]:\n                      is_unique_majority = True\n            elif len(sorted_counts) == 1:\n                 # This case means only one non-white color was actually present,\n                 # despite the initial check `len(unique_non_white_colors) > 1`.\n                 # This should not technically happen here due to the outer if condition,\n                 # but included for robustness. Column remains unchanged.\n                 pass\n\n            # If a unique majority color exists, change its instances to white (0)\n            if is_unique_majority:\n                majority_color = sorted_counts[0][0]\n                # Update the corresponding column in the output array\n                # Change all occurrences of the majority color to 0 (white)\n                mask = output_array[:, j] == majority_color\n                output_array[mask, j] = 0\n                \n        # Else (column contains 0 or 1 non-white color, or multiple non-white \n        # colors without a unique majority): \n        # The column remains unchanged implicitly as output_array started as a copy.\n\n    # Convert the final numpy array back to a list of lists\n    return output_array.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7734,
    "candidates_token_count": 1604,
    "total_token_count": 9338,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-preview-03-25",
  "response_time": 12.098447,
  "retries": 1
}