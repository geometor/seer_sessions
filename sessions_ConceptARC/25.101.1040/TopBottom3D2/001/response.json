{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nThe transformation rule operates independently on each column of the input grid.\n\n1. Identify the unique non-white colors present in a column and their counts.\n2. **Single Non-White Color Case:** If a column contains exactly one unique non-white color (let's call it C):\n   - Check if any pixel of color C is vertically adjacent (immediately above or below) to another pixel of color C within that column.\n   - If NO vertical adjacency exists for color C, change all occurrences of C in that column to white (0).\n   - Otherwise (if vertical adjacency exists), keep the column as is.\n3. **Multiple Non-White Colors Case:** If a column contains more than one unique non-white color:\n   - Determine if there is a single color (let's call it MajC) that occurs strictly more frequently than any other non-white color in the column.\n   - If such a unique majority color MajC exists, change all occurrences of MajC in that column to white (0).\n   - Otherwise (if there is no unique majority non-white color, or only white pixels), keep the column as is.\n4. Repeat for all columns.\n\"\"\"\n\ndef has_vertical_adjacency(col: np.ndarray, color: int) -> bool:\n    \"\"\"Checks if a given color has vertically adjacent instances in a column.\"\"\"\n    if len(col) < 2:\n        return False\n    for i in range(len(col) - 1):\n        if col[i] == color and col[i+1] == color:\n            return True\n    return False\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies the transformation rule based on column analysis.\n    \"\"\"\n    input_array = np.array(input_grid, dtype=int)\n    output_array = np.copy(input_array)\n    height, width = input_array.shape\n\n    # Iterate through each column\n    for j in range(width):\n        col = input_array[:, j]\n        \n        # Find unique non-white colors and their counts\n        non_white_pixels = col[col != 0]\n        if len(non_white_pixels) == 0:\n            continue # Skip columns with only white pixels\n\n        counts = Counter(non_white_pixels)\n        unique_non_white_colors = list(counts.keys())\n\n        # Case 1: Exactly one unique non-white color\n        if len(unique_non_white_colors) == 1:\n            color_c = unique_non_white_colors[0]\n            # Check for vertical adjacency for this single color\n            if not has_vertical_adjacency(col, color_c):\n                # If no adjacency, change all instances of color_c to 0\n                output_array[:, j][output_array[:, j] == color_c] = 0\n        \n        # Case 2: More than one unique non-white color\n        elif len(unique_non_white_colors) > 1:\n            # Find if there is a unique majority color\n            if not counts: # Should not happen if len(unique_non_white_colors) > 1\n                 continue\n                 \n            sorted_counts = counts.most_common()\n            \n            # Check for unique majority\n            is_unique_majority = False\n            if len(sorted_counts) == 1: # Only one non-white color, handled above\n                 pass # Should not happen\n            elif len(sorted_counts) > 1:\n                 if sorted_counts[0][1] > sorted_counts[1][1]:\n                      is_unique_majority = True\n\n            if is_unique_majority:\n                majority_color_majc = sorted_counts[0][0]\n                # If a unique majority color exists, change all its instances to 0\n                output_array[:, j][output_array[:, j] == majority_color_majc] = 0\n                \n            # Else (no unique majority): column remains unchanged implicitly\n            \n    return output_array.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2577,
    "candidates_token_count": 22263,
    "total_token_count": 24840,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-preview-03-25",
  "response_time": 146.54095,
  "retries": 1
}