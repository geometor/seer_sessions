{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nTransformation Rule:\n\n1.  Identify the background color (assumed to be 0).\n2.  Count the frequency of all non-background colors in the input grid.\n3.  Identify the 'deleter' color (D) as the non-background color with the highest frequency.\n4.  Identify the 'target' color (T) as the non-background color with the second highest frequency. If fewer than two non-background colors exist, return an empty grid (all background).\n5.  Calculate the counts of D (`count_D`) and T (`count_T`).\n6.  Determine if the count of D is more than double the count of T: `high_frequency_ratio = (count_D > 2 * count_T)`.\n7.  Create an output grid of the same dimensions as the input, filled with the background color.\n8.  Iterate through each pixel of the input grid.\n9.  If a pixel has the 'target' color (T):\n    a. Check if it's on the border of the grid. Border pixels are always removed.\n    b. If it's *not* on the border (it's an interior pixel):\n        i.  Count its 8 neighbors (including diagonals) that have the 'deleter' color (D) -> `deleter_neighbor_count`.\n        ii. Count its 8 neighbors that have the 'target' color (T) -> `target_neighbor_count`.\n        iii. Apply the keep condition: The pixel is kept (copied to the output grid) if `deleter_neighbor_count == 0` AND (`target_neighbor_count >= 1` OR `high_frequency_ratio` is true).\n10. Return the output grid.\n\"\"\"\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies the transformation rule based on color frequency and neighbor analysis.\n    \"\"\"\n    input_array = np.array(input_grid, dtype=int)\n    height, width = input_array.shape\n    background_color = 0\n\n    # --- Step 1 & 2: Count non-background color frequencies ---\n    colors, counts = np.unique(input_array, return_counts=True)\n    color_counts = Counter(dict(zip(colors, counts)))\n\n    # Remove background color from counts for role assignment\n    non_bg_counts = Counter(color_counts)\n    if background_color in non_bg_counts:\n        del non_bg_counts[background_color]\n\n    # --- Step 3 & 4: Identify deleter (D) and target (T) colors ---\n    sorted_colors = non_bg_counts.most_common()\n\n    if len(sorted_colors) < 2:\n        # Not enough non-background colors to define D and T\n        return np.full((height, width), background_color, dtype=int).tolist()\n\n    deleter_color = sorted_colors[0][0]\n    target_color = sorted_colors[1][0]\n    count_D = sorted_colors[0][1]\n    count_T = sorted_colors[1][1]\n\n    # --- Step 5 & 6: Calculate frequency ratio condition ---\n    high_frequency_ratio = (count_D > 2 * count_T)\n\n    # --- Step 7: Initialize output grid ---\n    output_array = np.full_like(input_array, background_color)\n\n    # --- Step 8-10: Iterate through pixels and apply rules ---\n    for r in range(height):\n        for c in range(width):\n            # Check if the current pixel is the target color\n            if input_array[r, c] == target_color:\n\n                # Step 9a: Check if the pixel is on the border\n                is_border = (r == 0 or c == 0 or r == height - 1 or c == width - 1)\n\n                # Step 9b: Process interior pixels\n                if not is_border:\n                    deleter_neighbor_count = 0\n                    target_neighbor_count = 0\n\n                    # Step 9b.i & 9b.ii: Count neighbors\n                    for dr in [-1, 0, 1]:\n                        for dc in [-1, 0, 1]:\n                            if dr == 0 and dc == 0:\n                                continue # Skip the center pixel itself\n\n                            nr, nc = r + dr, c + dc\n\n                            # Check if neighbor is within grid bounds\n                            if 0 <= nr < height and 0 <= nc < width:\n                                neighbor_color = input_array[nr, nc]\n                                if neighbor_color == deleter_color:\n                                    deleter_neighbor_count += 1\n                                elif neighbor_color == target_color:\n                                    target_neighbor_count += 1\n\n                    # Step 9b.iii: Apply the keep condition\n                    keep_pixel = (deleter_neighbor_count == 0) and \\\n                                 (target_neighbor_count >= 1 or high_frequency_ratio)\n\n                    # Step 9b.iv: Update output grid if kept\n                    if keep_pixel:\n                        output_array[r, c] = target_color\n\n    # Convert back to list of lists for the required output format\n    return output_array.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 14651,
    "candidates_token_count": 1678,
    "total_token_count": 16329,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-preview-03-25",
  "response_time": 11.958993,
  "retries": 1
}