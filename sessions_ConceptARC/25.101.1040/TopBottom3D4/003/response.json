{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\n\n\"\"\"\nIdentifies the two unique non-white colors in the input grid. Let C_low be the\ncolor with the lower numeric index and C_high be the color with the higher\nindex. The transformation involves shifting the C_low object one column to the\nleft. The original positions occupied by the C_low object are cleared (set to\nwhite/0). If a pixel of the C_high object was originally immediately to the\nright of a pixel belonging to the C_low object, the C_high color 'fills' the\nvacated C_low position in the output grid. Otherwise, the vacated position\nremains white. The shifted C_low pixels overwrite any existing pixel colors at\ntheir new locations, unless that location is subsequently filled by C_high as\ndescribed above.\n\"\"\"\n\ndef find_colors(grid: list[list[int]]) -> tuple[int | None, int | None]:\n    \"\"\"Finds the two unique non-background colors in the grid.\n\n    Args:\n        grid: The input grid.\n\n    Returns:\n        A tuple containing the lower and higher color index (c_low, c_high),\n        or (None, None) if exactly two non-white colors are not found.\n    \"\"\"\n    colors = set()\n    height = len(grid)\n    width = len(grid[0])\n    for r in range(height):\n        for c in range(width):\n            if grid[r][c] != 0:\n                colors.add(grid[r][c])\n    # Ensure exactly two colors are found\n    if len(colors) != 2:\n        return None, None\n    color_list = sorted(list(colors))\n    # Returns the color with the lower index first (c_low), then higher (c_high)\n    return color_list[0], color_list[1]\n\ndef find_object_pixels(grid: list[list[int]], color: int) -> list[tuple[int, int]]:\n    \"\"\"Finds all coordinates (row, col) of pixels with the specified color.\n\n    Args:\n        grid: The input grid.\n        color: The color value to find.\n\n    Returns:\n        A list of (row, col) tuples for pixels matching the color.\n    \"\"\"\n    pixels = []\n    height = len(grid)\n    width = len(grid[0])\n    for r in range(height):\n        for c in range(width):\n            if grid[r][c] == color:\n                pixels.append((r, c))\n    return pixels\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies the transformation rule based on shifting the lower-indexed color object left\n    and handling interaction with the higher-indexed color object.\n    \"\"\"\n    # Get grid dimensions\n    height = len(input_grid)\n    if height == 0:\n        return []\n    width = len(input_grid[0])\n    if width == 0:\n        return [[] for _ in range(height)]\n\n    # initialize output_grid as a deep copy\n    output_grid = copy.deepcopy(input_grid)\n\n    # Identify the two unique non-white colors and determine low/high index\n    c_low, c_high = find_colors(input_grid)\n\n    # If colors are not as expected, return the original grid copy\n    if c_low is None:\n        # print(\"Warning: Expected exactly two non-white colors, found different.\")\n        return output_grid\n\n    # Find original pixel locations for both objects\n    low_orig_coords = find_object_pixels(input_grid, c_low)\n    high_orig_coords = find_object_pixels(input_grid, c_high)\n\n    # Use a set for efficient lookup of original C_low positions\n    low_orig_coords_set = set(low_orig_coords)\n\n    # Perform transformations\n\n    # 1. Process C_low object shift\n    for r, c in low_orig_coords:\n        # a. Clear the original location in the output grid\n        output_grid[r][c] = 0\n\n        # b. Calculate the potential new location (shifted left)\n        nc = c - 1\n\n        # c/d. Check if the new column is valid and paint the new location if so\n        if 0 <= nc < width:\n            output_grid[r][nc] = c_low # Paint C_low at the new location\n\n    # 2. Process C_high object interaction (filling vacated C_low spots)\n    for r, c in high_orig_coords:\n        # a. Calculate the potential 'target' location (where C_high would shift into)\n        nc = c - 1\n\n        # b/c. Check if target column is valid AND if the target location was originally C_low\n        if 0 <= nc < width and (r, nc) in low_orig_coords_set:\n             # d. If both conditions met, paint C_high at the target location\n             #    This overwrites the background (0) or C_low placed in step 1d\n             output_grid[r][nc] = c_high\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 17909,
    "candidates_token_count": 1604,
    "total_token_count": 19513,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-preview-03-25",
  "response_time": 12.362888,
  "retries": 1
}