{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport collections\n\n\"\"\"\nThis transformation filters objects in a grid based on their shape and the relative counts of different shape types.\n\n1. Identify all distinct objects (connected groups of non-white pixels) in the input grid.\n2. For each object, determine if it forms a 'solid rectangle'. An object is a solid rectangle if its pixels perfectly fill its bounding box.\n3. Classify objects into two categories: 'solid_rectangle' and 'non_solid_rectangle'.\n4. Count the number of objects in each category.\n5. If the counts are equal, keep only the 'solid_rectangle' objects in the output grid.\n6. If the counts are unequal, keep only the 'non_solid_rectangle' objects in the output grid.\n7. Removed objects are replaced with the background color (white, 0).\n\"\"\"\n\ndef find_objects(grid: list[list[int]]) -> list[list[tuple[int, int]]]:\n    \"\"\"\n    Identifies all distinct objects in the grid.\n    An object is a connected group of pixels of the same non-white color.\n    Uses Breadth-First Search (BFS) for connectivity (orthogonal adjacency).\n\n    Args:\n        grid: The input grid (list of lists of integers).\n\n    Returns:\n        A list where each element represents an object. Each object is represented\n        as a tuple containing its color and a list of its pixel coordinates (row, col).\n        e.g., [(color1, [(r1, c1), (r2, c2), ...]), (color2, [(r3, c3), ...]), ...]\n    \"\"\"\n    height = len(grid)\n    width = len(grid[0])\n    visited = [[False for _ in range(width)] for _ in range(height)]\n    objects = []\n\n    for r in range(height):\n        for c in range(width):\n            # Check if the pixel is part of an object and not yet visited\n            if grid[r][c] != 0 and not visited[r][c]:\n                color = grid[r][c]\n                object_pixels = []\n                q = collections.deque([(r, c)])\n                visited[r][c] = True\n\n                while q:\n                    row, col = q.popleft()\n                    object_pixels.append((row, col))\n\n                    # Explore neighbors (orthogonal)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        # Check bounds, color match, and visited status\n                        if 0 <= nr < height and 0 <= nc < width and \\\n                           grid[nr][nc] == color and not visited[nr][nc]:\n                            visited[nr][nc] = True\n                            q.append((nr, nc))\n                \n                if object_pixels: # Should always be true if we entered the loop\n                    objects.append((color, object_pixels))\n\n    return objects\n\ndef get_bounding_box(pixels: list[tuple[int, int]]) -> tuple[int, int, int, int]:\n    \"\"\"Calculates the bounding box of a set of pixels.\"\"\"\n    if not pixels:\n        return 0, 0, 0, 0 # Should not happen for valid objects\n    \n    min_row = min(r for r, c in pixels)\n    max_row = max(r for r, c in pixels)\n    min_col = min(c for r, c in pixels)\n    max_col = max(c for r, c in pixels)\n    return min_row, max_row, min_col, max_col\n\ndef is_solid_rectangle(pixels: list[tuple[int, int]]) -> bool:\n    \"\"\"Checks if an object represented by its pixels forms a solid rectangle.\"\"\"\n    if not pixels:\n        return False # Empty object cannot be solid\n        \n    pixel_count = len(pixels)\n    min_row, max_row, min_col, max_col = get_bounding_box(pixels)\n    \n    bbox_height = max_row - min_row + 1\n    bbox_width = max_col - min_col + 1\n    bbox_area = bbox_height * bbox_width\n    \n    return pixel_count == bbox_area\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Filters objects in the input grid based on whether they are solid rectangles\n    and the relative counts of solid vs. non-solid objects.\n    \"\"\"\n    height = len(input_grid)\n    width = len(input_grid[0])\n    \n    # Initialize output_grid with white (0)\n    output_grid = [[0 for _ in range(width)] for _ in range(height)]\n\n    # 1. Find all objects in the input grid\n    all_objects = find_objects(input_grid)\n\n    # 2. Classify objects and store them\n    solid_objects = []\n    non_solid_objects = []\n    for color, pixels in all_objects:\n        if is_solid_rectangle(pixels):\n            solid_objects.append((color, pixels))\n        else:\n            non_solid_objects.append((color, pixels))\n\n    # 3. Determine which category of objects to keep\n    count_solid = len(solid_objects)\n    count_non_solid = len(non_solid_objects)\n    \n    objects_to_keep = []\n    if count_solid == count_non_solid:\n        # Keep solid rectangles\n        objects_to_keep = solid_objects\n    else:\n        # Keep non-solid rectangles\n        objects_to_keep = non_solid_objects\n\n    # 4. Draw the kept objects onto the output grid\n    for color, pixels in objects_to_keep:\n        for r, c in pixels:\n            # Ensure coordinates are valid (should be, but good practice)\n            if 0 <= r < height and 0 <= c < width:\n                output_grid[r][c] = color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3282,
    "candidates_token_count": 2057,
    "total_token_count": 5339,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-preview-03-25",
  "response_time": 15.563529,
  "retries": 1
}