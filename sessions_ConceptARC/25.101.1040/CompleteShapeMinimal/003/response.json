{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransforms the input grid based on a local neighborhood rule.\n1. Identifies the single dominant non-background color (shape_color) in the input grid.\n2. Iterates through each background pixel (color 0).\n3. If a background pixel is orthogonally adjacent to at least one pixel of the shape_color, \n   its color is changed to the shape_color in the output grid.\n4. Pixels that are not background or do not meet the adjacency condition retain their original color.\n\"\"\"\n\ndef _find_shape_color(grid: np.ndarray) -> int:\n    \"\"\"\n    Finds the unique non-background color in the grid.\n    Assumes there is exactly one non-background color, or returns 0 if none exist.\n    \"\"\"\n    unique_colors = np.unique(grid)\n    non_background_colors = unique_colors[unique_colors != 0]\n    if len(non_background_colors) == 1:\n        return non_background_colors[0]\n    elif len(non_background_colors) == 0:\n         # Handle case with only background\n         return 0\n    else:\n        # If multiple non-background colors, the rule might be ambiguous based on examples.\n        # Defaulting to the most frequent non-background color might be an alternative, \n        # but sticking to the observed pattern of a single shape color for now.\n        # Let's find the most frequent one.\n        colors, counts = np.unique(grid[grid != 0], return_counts=True)\n        if len(colors) > 0:\n            return colors[np.argmax(counts)]\n        else:\n            return 0 # Should not happen if len(non_background_colors) > 0 but handle defensively\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid: A list of lists representing the input grid.\n\n    Returns:\n        A list of lists representing the transformed output grid.\n    \"\"\"\n    # Convert to numpy array for easier processing\n    grid = np.array(input_grid, dtype=int)\n    output_grid = grid.copy()\n    height, width = grid.shape\n    background_color = 0\n\n    # 1. Identify the shape color\n    shape_color = _find_shape_color(grid)\n\n    # If no shape color is found (e.g., all background), return the original grid\n    if shape_color == background_color:\n        return output_grid.tolist()\n\n    # Define orthogonal neighbor directions\n    neighbors = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    # 2. Iterate through each cell in the grid\n    for r in range(height):\n        for c in range(width):\n            # 3. Check if the current cell is background color\n            if grid[r, c] == background_color:\n                neighbor_count = 0\n                # 4. Count orthogonal neighbors with the shape_color\n                for dr, dc in neighbors:\n                    nr, nc = r + dr, c + dc\n                    # Check if neighbor is within grid bounds\n                    if 0 <= nr < height and 0 <= nc < width:\n                        # Check if neighbor has the shape_color\n                        if grid[nr, nc] == shape_color:\n                            neighbor_count += 1\n                \n                # 5. If at least one neighbor has the shape_color, update the output grid\n                if neighbor_count >= 1:\n                    output_grid[r, c] = shape_color\n\n    # Convert back to list of lists and return\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 9989,
    "candidates_token_count": 1261,
    "total_token_count": 11250,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-preview-03-25",
  "response_time": 10.964411,
  "retries": 1
}