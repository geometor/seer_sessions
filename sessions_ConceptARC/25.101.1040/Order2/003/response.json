{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by rearranging its single non-background color pixels into a specific shape in the bottom-left corner of the output grid, based on whether the count of these pixels is a triangular number.\n\n1.  Analyze Input: Find the non-background color 'C' and its count 'N'. Get grid dimensions.\n2.  Prepare Output: Create a new grid of the same size, filled with background color 0.\n3.  Check Condition: Determine if 'N' is a triangular number.\n4.  Generate Output Shape:\n    a. If 'N' is triangular: Construct a specific right-angled triangle shape in the bottom-left corner using 'N' pixels of color 'C'.\n    b. If 'N' is not triangular: Fill pixels with color 'C' starting from the bottom row, left-to-right, then the next row up, left-to-right, continuing until 'N' pixels are placed in the bottom-left area.\n5.  Finalize: Return the generated grid.\n\"\"\"\n\nimport numpy as np\nimport math\n\ndef is_perfect_square(n: int) -> bool:\n    \"\"\"Checks if a non-negative integer is a perfect square.\"\"\"\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    x = int(math.isqrt(n))\n    return x * x == n\n\ndef is_triangular(n: int) -> bool:\n    \"\"\"Checks if a non-negative integer is a triangular number.\"\"\"\n    if n < 0:\n        return False\n    # N is triangular if and only if 8*N + 1 is a perfect square.\n    val = 8 * n + 1\n    return is_perfect_square(val)\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies the transformation rule to the input grid.\n    \"\"\"\n    input_np = np.array(input_grid, dtype=int)\n    H_grid, W_grid = input_np.shape\n    background_color = 0\n\n    # 1. Analyze Input\n    non_background_pixels = input_np[input_np != background_color]\n\n    if non_background_pixels.size == 0:\n        # Handle empty input case: return grid of zeros\n        return np.zeros_like(input_np).tolist()\n\n    color_C = non_background_pixels[0] # Assume only one non-background color\n    count_N = non_background_pixels.size\n\n    # 2. Prepare Output\n    output_np = np.full_like(input_np, background_color)\n\n    # 3. Check Triangular Condition\n    is_n_triangular = is_triangular(count_N)\n\n    # 4. Generate Output Shape\n    if is_n_triangular:\n        # Case a: N is a triangular number (form right triangle)\n        # Calculate triangle height H_tri (base width is also H_tri)\n        # N = H_tri * (H_tri + 1) / 2  => 8N + 1 = (2*H_tri + 1)^2\n        sqrt_val = math.isqrt(8 * count_N + 1)\n        H_tri = (sqrt_val - 1) // 2 # Integer division is exact here\n\n        # Iterate through potential pixel locations for the triangle in the bottom-left\n        for r in range(H_grid):\n            for c in range(W_grid):\n                # Check if the pixel (r, c) belongs to the triangle shape\n                # Condition 1: Row is within the bottom H_tri rows (r >= H_grid - H_tri)\n                # Condition 2: Column is within the left H_tri columns (c <= H_tri - 1)\n                # Condition 3: Pixel is on or below the hypotenuse (r + c >= H_grid - 1)\n                if r >= H_grid - H_tri and c <= H_tri - 1 and r + c >= H_grid - 1:\n                    output_np[r, c] = color_C\n    else:\n        # Case b: N is not a triangular number (fill bottom-up, left-to-right)\n        placed_pixels = 0\n        # Iterate rows bottom to top\n        for r in range(H_grid - 1, -1, -1):\n            # Iterate columns left to right\n            for c in range(W_grid):\n                if placed_pixels < count_N:\n                    output_np[r, c] = color_C\n                    placed_pixels += 1\n                else:\n                    # Exit inner loop (columns) if N pixels are placed\n                    break\n            # Exit outer loop (rows) if N pixels are placed\n            if placed_pixels >= count_N:\n                break\n\n    # 5. Finalize\n    return output_np.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8728,
    "candidates_token_count": 1459,
    "total_token_count": 10187,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-preview-03-25",
  "response_time": 10.231199,
  "retries": 1
}