{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by rearranging its single non-background color pixels into a specific shape in the bottom-left corner of the output grid.\n\n1.  Analyze Input:\n    a. Identify the background color (0, white).\n    b. Find the single non-background color 'C'.\n    c. Count the total number of pixels 'N' with color 'C'.\n    d. Get the grid dimensions (height 'H_grid', width 'W_grid').\n\n2.  Prepare Output: Create a new grid of size 'H_grid' x 'W_grid', filled with the background color.\n\n3.  Check Triangular Condition: Determine if 'N' is a triangular number (if 8*N + 1 is a perfect square).\n\n4.  Generate Output Shape:\n    a. If 'N' is triangular:\n        i. Calculate the triangle height 'H_tri' = (sqrt(8*N + 1) - 1) / 2.\n        ii. Fill pixels (r, c) in the output grid with color 'C' if they satisfy:\n           - r >= H_grid - H_tri\n           - c <= H_tri - 1\n           - r + c >= H_grid - 1\n    b. If 'N' is not triangular:\n        i. Fill pixels with color 'C' column by column (left to right), bottom to top within each column, starting from the bottom-left, until 'N' pixels are placed.\n\n5.  Finalize: Return the generated output grid.\n\"\"\"\n\nimport numpy as np\nimport math\n\ndef is_perfect_square(n):\n    \"\"\"Checks if a non-negative number is a perfect square.\"\"\"\n    if n < 0:\n        return False\n    x = int(math.isqrt(n))\n    return x * x == n\n\ndef is_triangular(n):\n    \"\"\"Checks if a number is a triangular number.\"\"\"\n    if n < 0:\n        return False\n    # N is triangular if 8*N + 1 is a perfect square\n    val = 8 * n + 1\n    return is_perfect_square(val)\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies the transformation rule to the input grid.\n    \"\"\"\n    input_np = np.array(input_grid, dtype=int)\n    H_grid, W_grid = input_np.shape\n    max_r = H_grid - 1\n    max_c = W_grid - 1\n    background_color = 0\n\n    # 1. Analyze Input\n    non_background_pixels = input_np[input_np != background_color]\n    \n    if non_background_pixels.size == 0:\n        # Handle empty input case: return grid of zeros\n        return np.zeros_like(input_np).tolist()\n        \n    color_C = non_background_pixels[0] # Assuming only one non-background color\n    count_N = non_background_pixels.size\n\n    # 2. Prepare Output\n    output_np = np.full_like(input_np, background_color)\n\n    # 3. Check Triangular Condition\n    is_n_triangular = is_triangular(count_N)\n\n    # 4. Generate Output Shape\n    if is_n_triangular:\n        # Case a: N is a triangular number\n        # Calculate triangle height H_tri\n        sqrt_val = math.isqrt(8 * count_N + 1)\n        H_tri = (sqrt_val - 1) // 2 # Integer division should be exact here\n\n        # Iterate through potential pixel locations for the triangle\n        for r in range(H_grid):\n            for c in range(W_grid):\n                # Apply the three conditions derived from Example 1\n                # condition 1: r >= max_r - H_tri + 1 (equivalent to r >= H_grid - H_tri)\n                # condition 2: c <= H_tri - 1\n                # condition 3: r + c >= max_r (equivalent to r + c >= H_grid - 1)\n                if r >= H_grid - H_tri and c <= H_tri - 1 and r + c >= H_grid - 1:\n                    output_np[r, c] = color_C\n    else:\n        # Case b: N is not a triangular number\n        placed_pixels = 0\n        # Iterate columns left to right\n        for c in range(W_grid):\n            # Iterate rows bottom to top\n            for r in range(max_r, -1, -1):\n                if placed_pixels < count_N:\n                    output_np[r, c] = color_C\n                    placed_pixels += 1\n                else:\n                    # Stop filling rows in this column once N is reached\n                    break \n            # Stop filling columns once N is reached\n            if placed_pixels >= count_N:\n                break\n\n    # 5. Finalize\n    return output_np.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3484,
    "candidates_token_count": 2352,
    "total_token_count": 5836,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-preview-03-25",
  "response_time": 17.09049,
  "retries": 1
}