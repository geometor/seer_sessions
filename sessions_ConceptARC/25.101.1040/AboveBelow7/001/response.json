{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentifies the two distinct non-background objects in the input grid.\nDetermines which object is vertically above the other.\nCalculates the vertical gap between them.\nCreates an output grid where the original lower object maintains its position,\nand the original upper object is moved below the lower object, preserving the original vertical gap.\n\"\"\"\n\ndef find_objects(grid: np.ndarray) -> list[dict]:\n    \"\"\"\n    Finds distinct contiguous objects of non-background colors.\n\n    Args:\n        grid: A numpy array representing the input grid.\n\n    Returns:\n        A list of dictionaries, each representing an object with its \n        color, coordinates, and bounding box.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n    \n    for r in range(rows):\n        for c in range(cols):\n            color = grid[r, c]\n            # If it's a non-background color and not visited yet\n            if color != 0 and not visited[r, c]:\n                obj_coords = set()\n                q = deque([(r, c)])\n                visited[r, c] = True\n                min_r, max_r = r, r\n                min_c, max_c = c, c\n\n                while q:\n                    row, col = q.popleft()\n                    obj_coords.add((row, col))\n                    min_r = min(min_r, row)\n                    max_r = max(max_r, row)\n                    min_c = min(min_c, col)\n                    max_c = max(max_c, col)\n\n                    # Check neighbors (4-connectivity)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           not visited[nr, nc] and grid[nr, nc] == color:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n                \n                objects.append({\n                    'color': color,\n                    'coords': obj_coords,\n                    'bbox': (min_r, max_r, min_c, max_c) # min_row, max_row, min_col, max_col\n                })\n    return objects\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Swaps the vertical positions of two distinct non-background objects \n    where one is directly above the other. The lower object stays in place, \n    and the upper object moves below it, maintaining the original vertical gap.\n\n    Args:\n        input_grid: A list of lists representing the input grid.\n\n    Returns:\n        A list of lists representing the transformed output grid.\n    \"\"\"\n    input_array = np.array(input_grid, dtype=int)\n    rows, cols = input_array.shape\n    \n    # Initialize output grid with background color (0)\n    output_array = np.zeros_like(input_array)\n\n    # Find the objects\n    objects = find_objects(input_array)\n\n    # Ensure exactly two objects were found\n    if len(objects) != 2:\n        # Handle error case or unexpected input - returning input for now\n        print(f\"Warning: Expected 2 objects, found {len(objects)}. Returning input.\")\n        return input_grid\n\n    # Identify upper and lower objects based on min_row\n    obj1 = objects[0]\n    obj2 = objects[1]\n    \n    if obj1['bbox'][0] < obj2['bbox'][0]:\n        upper_object = obj1\n        lower_object = obj2\n    else:\n        upper_object = obj2\n        lower_object = obj1\n\n    # Extract bounding box info\n    upper_min_r, upper_max_r, _, _ = upper_object['bbox']\n    lower_min_r, lower_max_r, _, _ = lower_object['bbox']\n    \n    # Calculate the vertical gap between the objects\n    # gap = bottom row of upper obj - top row of lower obj - 1\n    gap = lower_min_r - upper_max_r - 1\n    \n    # Place the lower object in the output grid at its original position\n    for r, c in lower_object['coords']:\n        output_array[r, c] = lower_object['color']\n        \n    # Determine the new starting row for the upper object\n    # It should start below the lower object, maintaining the gap\n    # new_upper_top_row = bottom row of lower obj + gap + 1\n    new_upper_object_start_row = lower_max_r + gap + 1\n    \n    # Calculate the vertical shift needed for the upper object\n    shift = new_upper_object_start_row - upper_min_r\n    \n    # Place the upper object in the output grid at its new shifted position\n    for r, c in upper_object['coords']:\n        new_r = r + shift\n        # Check bounds just in case, though logic should prevent out-of-bounds\n        if 0 <= new_r < rows:\n             output_array[new_r, c] = upper_object['color']\n        else:\n            print(f\"Warning: Calculated new row {new_r} for upper object pixel at ({r},{c}) is out of bounds ({rows}x{cols}).\")\n\n\n    return output_array.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3405,
    "candidates_token_count": 2189,
    "total_token_count": 5594,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-preview-03-25",
  "response_time": 16.609971,
  "retries": 1
}