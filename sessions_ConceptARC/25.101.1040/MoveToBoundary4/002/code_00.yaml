elements:
  - object: grid
    properties:
      - type: 2D array
      - cell_colors: [white (0), magenta (6)]
      - size: variable (10x10 in examples)
  - object: pixel
    properties:
      - color: white (0) or magenta (6)
      - position: (row, column)
  - object: row
    properties:
      - contains: pixels
      - index: integer
actions:
  - name: process_row
    input: row_index, input_grid
    output: modified_row_pixels
    effects:
      - preserves row index
      - preserves count of magenta pixels
      - changes column index of magenta pixels according to specific mapping rules
  - name: map_columns
    input: set of input column indices for a row (InputColumns)
    output: set of output column indices for that row (OutputColumns)
    constraints:
      - |
        Processes each row containing magenta pixels independently.
      - |
        |OutputColumns| == |InputColumns| if InputColumns is treated as a multiset (duplicates matter for count but not for mapping logic).
      - |
        Mapping follows prioritized rules.
relationships:
  - type: spatial
    nodes: [pixel, pixel]
    relation: adjacency (horizontal within a row)
  - type: transformation
    input: input_grid
    output: output_grid
    rule: apply process_row to each row
rule_details:
  - step: Identify magenta pixels in the current row.
  - step: Determine their input column indices (InputColumns - treated as a set for rule checking, but original positions matter for applying the map).
  - step: If InputColumns is empty, the output row is all white.
  - step: **Rule Priority 1 (Special Case):** If InputColumns == {7}, the OutputColumns = {1}.
  - step: **Rule Priority 2 (Special Case):** If InputColumns == {6, 8}, the OutputColumns = {0, 3}.
  - step: **Rule Priority 3 (General Case):** Otherwise:
      - Find unique sorted columns: `UniqueSortedColumns = sorted(list(InputColumns))`.
      - Create rank map: `RankMap = {col: i for i, col in enumerate(UniqueSortedColumns)}`.
      - Get original magenta columns: `OriginalInputCols = [c for c, pixel in enumerate(input_row) if pixel == 6]`.
      - Calculate OutputColumns: `OutputColumns = {RankMap[col] for col in OriginalInputCols}`.
  - step: Place magenta pixels in the output row at columns specified by OutputColumns.
uncertainty:
  - Reduced. The previous uncertainty about the {6, 8} case is now resolved by treating it as a specific override rule. Assumes no other overrides exist beyond the ones observed.