{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\nimport collections\nimport numpy as np\n\n\"\"\"\nTransforms an input grid based on the presence or absence of magenta pixels (color 6).\n\nTwo distinct rules apply:\n\nRule 1: No Magenta Pixels Present\n  - Precondition: The grid width `W` must be even.\n  - Identifies all distinct connected components of non-white pixels located entirely within the left half of the grid (columns 0 to W/2 - 1).\n  - For each pixel belonging to these left-half components, its value is copied to the corresponding position in the right half of the grid, shifted horizontally by W/2 columns.\n  - The left half of the grid remains unchanged. Pixels in the right half not overwritten by copied component pixels remain unchanged.\n  - If the grid width is odd, or if no non-white components are found in the left half, the grid remains unchanged.\n\nRule 2: Magenta Pixels Present\n  - Finds all distinct non-white connected components in the entire grid.\n  - Identifies the 'main pattern' (P): The non-magenta-only component with the largest bounding box area (ties broken by top-most, then left-most row/col).\n  - Identifies the 'marker' (M): The magenta-containing component whose minimum column index is greater than the main pattern's maximum column index. Among candidates, selects the one with the minimum row index, then minimum column index (top-most, left-most).\n  - Calculates a destination top-left corner based on the marker's position: `(marker_min_row + 2, marker_min_col)`.\n  - Copies the entire rectangular region defined by the main pattern's (P) bounding box from the input grid to the calculated destination area in the output grid, overwriting existing pixels.\n  - All other parts of the grid (outside the destination copy area) remain unchanged from the input.\n  - If either the main pattern (P) or the marker (M) cannot be identified according to the rules, the grid remains unchanged.\n\"\"\"\n\ndef find_connected_components(grid: list[list[int]], ignore_color: int = 0, bounds: tuple = None) -> list[dict]:\n    \"\"\"\n    Finds all connected components in the grid or within specified bounds, ignoring a specific color.\n    Uses 4-connectivity (horizontal/vertical).\n\n    Args:\n        grid: The input grid (list of lists of integers).\n        ignore_color: The color value to ignore (treat as background).\n        bounds: Optional tuple (min_r, min_c, max_r, max_c) defining the search area.\n                Components must start within bounds and only connected pixels within bounds are included.\n\n    Returns:\n        A list of dictionaries, where each dictionary represents a component and contains:\n        - 'id': A unique identifier for the component.\n        - 'coords': A set of (row, col) tuples belonging to the component.\n        - 'colors': A set of color values present in the component.\n        - 'bounding_box': A tuple (min_row, min_col, max_row, max_col).\n        - 'bounding_box_area': The area of the bounding box.\n        - 'pixel_count': The number of pixels in the component.\n    \"\"\"\n    grid_np = np.array(grid)\n    height, width = grid_np.shape\n    \n    # Define search boundaries\n    if bounds:\n        min_r_bound, min_c_bound, max_r_bound, max_c_bound = bounds\n        # Clip bounds to grid dimensions\n        min_r_bound = max(0, min_r_bound)\n        min_c_bound = max(0, min_c_bound)\n        max_r_bound = min(height - 1, max_r_bound)\n        max_c_bound = min(width - 1, max_c_bound)\n    else: # Default to full grid if no bounds provided\n        min_r_bound, min_c_bound = 0, 0\n        max_r_bound, max_c_bound = height - 1, width - 1\n\n    visited = set()\n    components = []\n    component_id_counter = 0\n\n    # Iterate through the search area\n    for r in range(min_r_bound, max_r_bound + 1):\n        for c in range(min_c_bound, max_c_bound + 1):\n            # If a pixel is valid (not ignored, within bounds) and not visited, start BFS\n            if grid_np[r, c] != ignore_color and (r, c) not in visited:\n                component_id_counter += 1\n                component_coords = set()\n                component_colors = set()\n                q = collections.deque([(r, c)])\n                visited.add((r, c))\n                # Track component properties during BFS\n                min_r, min_c = r, c\n                max_r, max_c = r, c\n\n                while q:\n                    row, col = q.popleft()\n                    component_coords.add((row, col))\n                    # Use item() to ensure native Python int type\n                    component_colors.add(grid_np[row, col].item()) \n                    # Update bounding box\n                    min_r = min(min_r, row)\n                    min_c = min(min_c, col)\n                    max_r = max(max_r, row)\n                    max_c = max(max_c, col)\n\n                    # Explore neighbors (4-connectivity)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        \n                        # Check if neighbor is valid: within grid, within search bounds, not ignored, not visited\n                        if min_r_bound <= nr <= max_r_bound and min_c_bound <= nc <= max_c_bound and \\\n                           grid_np[nr, nc] != ignore_color and (nr, nc) not in visited:\n                            visited.add((nr, nc))\n                            q.append((nr, nc))\n\n                # Store component information if it's not empty\n                if component_coords:\n                    bbox = (min_r, min_c, max_r, max_c)\n                    bbox_area = (max_r - min_r + 1) * (max_c - min_c + 1)\n                    components.append({\n                        'id': component_id_counter,\n                        'coords': component_coords,\n                        'colors': component_colors,\n                        'bounding_box': bbox,\n                        'bounding_box_area': bbox_area,\n                        'pixel_count': len(component_coords)\n                    })\n    return components\n\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies the transformation rules based on magenta presence.\n    \"\"\"\n    # Initialize output_grid as a deep copy to avoid modifying the input\n    output_grid = copy.deepcopy(input_grid)\n    grid_np = np.array(input_grid)\n    height, width = grid_np.shape\n    magenta_color = 6\n    white_color = 0\n\n    # Check for the presence of magenta pixels\n    has_magenta = np.any(grid_np == magenta_color)\n\n    if not has_magenta:\n        # --- Rule 1: No Magenta ---\n        # Apply rule only if width is even\n        if width % 2 == 0:\n            mid_col = width // 2\n            # Define bounds for the left half of the grid\n            left_bounds = (0, 0, height - 1, mid_col - 1)\n            \n            # Find non-white components strictly within the left half\n            left_components = find_connected_components(input_grid, ignore_color=white_color, bounds=left_bounds)\n\n            # Copy each pixel of each found component to the right half\n            for component in left_components:\n                for r_src, c_src in component['coords']:\n                    # Calculate the destination column by shifting\n                    c_dest = c_src + mid_col\n                    # Ensure destination is within grid bounds before copying\n                    if 0 <= r_src < height and 0 <= c_dest < width:\n                        # Copy the pixel value\n                        output_grid[r_src][c_dest] = input_grid[r_src][c_src]\n        # If width is odd, do nothing (return the initial copy)\n\n    else:\n        # --- Rule 2: Magenta Present ---\n        # Find all non-white components in the entire grid\n        all_components = find_connected_components(input_grid, ignore_color=white_color)\n\n        # Identify the 'main pattern' (P)\n        main_pattern = None\n        # Filter for components that are not purely magenta\n        non_magenta_only_components = [\n            comp for comp in all_components if not (comp['colors'] == {magenta_color})\n        ]\n        if non_magenta_only_components:\n            # Sort by: 1. BBox Area (desc), 2. Min Row (asc), 3. Min Col (asc)\n            non_magenta_only_components.sort(key=lambda c: (-c['bounding_box_area'], c['bounding_box'][0], c['bounding_box'][1]))\n            main_pattern = non_magenta_only_components[0] # Select the top candidate\n\n        # Identify the 'marker' (M)\n        marker = None\n        # Filter for components containing magenta\n        magenta_components = [\n            comp for comp in all_components if magenta_color in comp['colors']\n        ]\n        # Marker depends on main_pattern existing\n        if main_pattern and magenta_components:\n            pattern_max_c = main_pattern['bounding_box'][3] # Rightmost column of pattern P\n            # Filter markers to those starting strictly to the right of the main pattern\n            relevant_markers = [\n                m for m in magenta_components if m['bounding_box'][1] > pattern_max_c\n            ]\n            if relevant_markers:\n                # Sort relevant markers by: 1. Min Row (asc), 2. Min Col (asc)\n                relevant_markers.sort(key=lambda c: (c['bounding_box'][0], c['bounding_box'][1]))\n                marker = relevant_markers[0] # Select the top candidate\n\n        # Perform the copy operation only if both pattern (P) and marker (M) were successfully identified\n        if main_pattern and marker:\n            # Get bounding box coordinates for the pattern\n            pattern_min_r, pattern_min_c, pattern_max_r, pattern_max_c = main_pattern['bounding_box']\n            # Get relevant coordinates for the marker\n            marker_min_r, marker_min_c, _, _ = marker['bounding_box']\n\n            # Calculate the top-left corner for the destination copy area\n            dest_row_start = marker_min_r + 2\n            dest_col_start = marker_min_c\n\n            # Calculate dimensions of the pattern's bounding box\n            pattern_height = pattern_max_r - pattern_min_r + 1\n            pattern_width = pattern_max_c - pattern_min_c + 1\n\n            # Iterate through the source bounding box region\n            for r_offset in range(pattern_height):\n                for c_offset in range(pattern_width):\n                    # Calculate source coordinates within the input grid\n                    src_r = pattern_min_r + r_offset\n                    src_c = pattern_min_c + c_offset\n                    # Calculate destination coordinates within the output grid\n                    dest_r = dest_row_start + r_offset\n                    dest_c = dest_col_start + c_offset\n\n                    # Check if the destination coordinates are within the grid bounds\n                    if 0 <= dest_r < height and 0 <= dest_c < width:\n                        # Ensure source coords are valid (should be if bbox is correct)\n                         if 0 <= src_r < height and 0 <= src_c < width:\n                             # Copy the pixel value from input source to output destination\n                             output_grid[dest_r][dest_c] = input_grid[src_r][src_c]\n        # If P or M were not found, do nothing (return the initial copy)\n\n    # Return the potentially modified grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 43150,
    "candidates_token_count": 3536,
    "total_token_count": 46686,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-preview-03-25",
  "response_time": 24.104831,
  "retries": 1
}