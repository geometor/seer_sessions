task_description: Simplify the grid based on corner pixel uniformity and dominant colors.

elements:
  - element: grid
    description: A 2D array of pixels representing colors.
  - element: pixel
    description: A single cell in the grid with a color value (0-9).
  - element: color
    description: An integer value 0-9 associated with each pixel.
  - element: corner_pixels
    description: The four pixels at the grid's corners (top-left, top-right, bottom-left, bottom-right).
  - element: background_color
    description: The color identified if all four corner pixels are the same. Otherwise, undefined.
  - element: foreground_pixels
    description: The set of pixels whose color does not match the identified background_color. This set is only relevant if a background_color exists.
  - element: dominant_color
    description: The color that appears most frequently within a specified set of pixels (e.g., entire grid, foreground pixels). Ties are broken by choosing the lowest color index.

relationships:
  - type: frequency
    description: Colors have frequencies (counts) within a set of pixels.
  - type: spatial
    description: Pixels have positions (row, column). Corner pixels define potential background.
  - type: identity
    description: Comparing if two colors are the same (e.g., background_color vs. dominant_foreground_color).

actions:
  - action: check_corners
    description: Determine if all four corner pixels have the same color. If yes, identify this as the background_color.
  - action: count_colors
    description: Count the frequency of each color within a specified set of pixels (entire grid or foreground).
  - action: find_dominant_color
    description: Identify the most frequent color in a set, breaking ties with the lowest color index.
  - action: create_output_grid
    description: Generate the output grid based on the identified properties.
    conditions:
      - if: no background_color (corners differ)
        effect: Fill output grid entirely with the overall_dominant_color of the input grid.
      - if: background_color exists
        sub_conditions:
          - if: dominant_foreground_color == background_color OR background_color is the overall_dominant_color of the input grid
            effect: Fill output grid entirely with the background_color.
          - else: # Background color exists, is different from dominant foreground, and is not the overall dominant
            effect: Initialize output grid with background_color. Replace pixels corresponding to input foreground positions with the dominant_foreground_color.
