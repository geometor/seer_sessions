{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentifies connected regions of white (0) pixels that are completely enclosed by a single non-white color.\nThe fill color used for these enclosed regions depends on the global set of boundary colors found in the entire grid.\n\n1. Find all connected components of white pixels.\n2. For each white component, check its adjacent non-white neighbors.\n3. If all non-white neighbors of a component have the same single color C, it's an \"enclosed region\" with boundary color C.\n4. Collect all unique boundary colors C found across the grid into a set S.\n5. Determine the fill color mapping based on S:\n   - If S = {Red(2), Yellow(4)}, map: Red(2)->Green(3), Yellow(4)->Orange(7).\n   - If S = {Red(2), Yellow(4), Orange(7)}, map: Red(2)->Orange(7), Yellow(4)->Green(3), Orange(7)->Green(3).\n6. Create a copy of the input grid.\n7. For each enclosed region, fill its white pixels with the corresponding fill color determined by the mapping rule in the copied grid.\n8. Return the modified grid.\n\"\"\"\n\ndef get_neighbors(r, c, height, width):\n    \"\"\" Gets 8-way neighbors within grid bounds. \"\"\"\n    neighbors = []\n    for dr in [-1, 0, 1]:\n        for dc in [-1, 0, 1]:\n            if dr == 0 and dc == 0:\n                continue\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < height and 0 <= nc < width:\n                neighbors.append((nr, nc))\n    return neighbors\n\ndef find_enclosed_regions(input_grid):\n    \"\"\"\n    Finds white regions enclosed by a single color using BFS.\n\n    Returns:\n        tuple: (list of (region_pixels, boundary_color), set of all_boundary_colors)\n               region_pixels is a list of (r, c) tuples for the white pixels.\n    \"\"\"\n    height, width = input_grid.shape\n    visited = np.zeros_like(input_grid, dtype=bool)\n    enclosed_regions = []\n    all_boundary_colors = set()\n\n    for r in range(height):\n        for c in range(width):\n            # Start BFS if white and not visited\n            if input_grid[r, c] == 0 and not visited[r, c]:\n                q = deque([(r, c)])\n                visited[r, c] = True\n                current_region_pixels = []\n                boundary_colors_found = set()\n                is_enclosed_candidate = True # Assume enclosed until proven otherwise\n\n                while q:\n                    curr_r, curr_c = q.popleft()\n                    current_region_pixels.append((curr_r, curr_c))\n\n                    # Check neighbors\n                    for nr, nc in get_neighbors(curr_r, curr_c, height, width):\n                        neighbor_color = input_grid[nr, nc]\n                        if neighbor_color == 0: # White neighbor\n                            if not visited[nr, nc]:\n                                visited[nr, nc] = True\n                                q.append((nr, nc))\n                        else: # Non-white neighbor\n                            boundary_colors_found.add(neighbor_color)\n\n                # Check if the region qualifies as enclosed after BFS\n                if boundary_colors_found and len(boundary_colors_found) == 1:\n                     boundary_color = boundary_colors_found.pop() # Get the single boundary color\n                     enclosed_regions.append((current_region_pixels, boundary_color))\n                     all_boundary_colors.add(boundary_color) # Add to global set\n\n    return enclosed_regions, all_boundary_colors\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by filling enclosed white regions based on boundary color rules.\n    \"\"\"\n    input_grid_np = np.array(input_grid, dtype=int)\n    output_grid = input_grid_np.copy()\n    height, width = input_grid_np.shape\n\n    # 1. & 2. & 3. Find enclosed regions and their boundary colors\n    regions_found, global_boundary_colors = find_enclosed_regions(input_grid_np)\n\n    # 4. Determine the fill color mapping based on the global set of boundary colors\n    fill_map = {}\n    # Convert set to tuple for matching dictionary keys if needed, or just use set comparison\n    global_boundary_colors_set = frozenset(global_boundary_colors)\n\n    # Define known mappings based on training examples\n    mapping_rules = {\n        frozenset({2, 4}): {2: 3, 4: 7}, # Red(2), Yellow(4) -> Red:Green(3), Yellow:Orange(7)\n        frozenset({2, 4, 7}): {2: 7, 4: 3, 7: 3} # Red(2), Yellow(4), Orange(7) -> Red:Orange(7), Yellow:Green(3), Orange:Green(3)\n    }\n\n    if global_boundary_colors_set in mapping_rules:\n        fill_map = mapping_rules[global_boundary_colors_set]\n    # else: handle unknown cases if necessary, here we assume one of the known cases applies\n\n    # 5. & 6. Fill the regions in the output grid\n    if fill_map: # Only fill if a valid mapping was found\n        for region_pixels, boundary_color in regions_found:\n            if boundary_color in fill_map:\n                fill_color = fill_map[boundary_color]\n                for r, c in region_pixels:\n                    # Ensure we only fill pixels that were originally white\n                    # (This check might be redundant if find_enclosed_regions is correct, but adds safety)\n                    if output_grid[r, c] == 0:\n                        output_grid[r, c] = fill_color\n\n    # 7. Return the modified grid\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3580,
    "candidates_token_count": 1421,
    "total_token_count": 5001,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 22.563103,
  "retries": 1
}