task_description: Fill enclosed white regions based on boundary color, where the fill rule depends on the set of boundary colors present globally.

elements:
  - element: grid
    properties:
      - background_color: white (0)
      - dimensions: unchanged between input and output

  - element: object
    description: Contiguous regions of non-white pixels. In examples, these form shapes with boundaries.
    properties:
      - color: Red(2), Yellow(4), Orange(7) observed in examples.
      - role: Can form boundaries enclosing white regions.

  - element: enclosed_region
    description: A connected component of white (0) pixels where all adjacent non-white pixels (8-way connectivity) share the same single color C.
    properties:
      - initial_color: white (0)
      - boundary_color: The single color C surrounding the region.
      - state_change: Filled with a new color F in the output.

relationships:
  - relationship: boundary_to_fill_mapping
    description: The fill color F depends on the boundary color C. This mapping itself is conditional.
    conditions:
      - condition: Global set of boundary colors S = {Red(2), Yellow(4)}
        mapping: {Red(2): Green(3), Yellow(4): Orange(7)}
      - condition: Global set of boundary colors S = {Red(2), Yellow(4), Orange(7)}
        mapping: {Red(2): Orange(7), Yellow(4): Green(3), Orange(7): Green(3)}
    target_fill_colors: Green(3), Orange(7)

actions:
  - action: identify_enclosed_regions
    description: Find all connected white regions completely bounded by a single non-white color C.
    inputs: input_grid
    outputs: list of enclosed_regions, set of all boundary_colors S found.

  - action: determine_fill_map
    description: Select the correct boundary_color -> fill_color mapping based on the global set S.
    inputs: set S
    outputs: mapping function/dictionary

  - action: fill_regions
    description: Apply the determined fill color to each identified enclosed region in the output grid.
    inputs: input_grid, identified_regions, fill_map
    outputs: output_grid