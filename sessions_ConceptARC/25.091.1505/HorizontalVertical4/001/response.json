{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentifies connected components of red (2) pixels in the input grid. \nIf a component forms a horizontal line (height 1, width > 1), its pixels are changed to green (3).\nAll other pixels remain unchanged.\n\"\"\"\n\ndef find_connected_components(grid, color):\n    \"\"\"\n    Finds all connected components of a given color in the grid.\n\n    Args:\n        grid (np.array): The input grid.\n        color (int): The color of the pixels to find components of.\n\n    Returns:\n        list: A list of lists, where each inner list contains the \n              coordinates (row, col) of pixels in a single connected component.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    components = []\n\n    for r in range(rows):\n        for c in range(cols):\n            # If we find a pixel of the target color that hasn't been visited\n            if grid[r, c] == color and not visited[r, c]:\n                component = []\n                q = deque([(r, c)])\n                visited[r, c] = True\n                \n                # Start Breadth-First Search (BFS)\n                while q:\n                    row, col = q.popleft()\n                    component.append((row, col))\n                    \n                    # Check neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        \n                        # Check bounds, color, and visited status\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] == color and not visited[nr, nc]:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n                            \n                if component:\n                    components.append(component)\n                    \n    return components\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by changing horizontal red lines to green.\n\n    Args:\n        input_grid (list): A list of lists representing the input grid.\n\n    Returns:\n        list: A list of lists representing the transformed output grid.\n    \"\"\"\n    input_np = np.array(input_grid, dtype=int)\n    output_grid = np.copy(input_np)\n    \n    # Define target color (red) and replacement color (green)\n    target_color = 2\n    replacement_color = 3\n\n    # Find all connected components of the target color (red)\n    red_components = find_connected_components(input_np, target_color)\n\n    # Process each red component\n    for component in red_components:\n        if not component:\n            continue # Should not happen with the current find_connected_components logic\n\n        # Check if the component is a horizontal line wider than 1 pixel\n        # 1. Get all row indices\n        rows_in_component = {r for r, c in component}\n        \n        # 2. Check if all pixels are in the same row (height is 1)\n        is_horizontal = len(rows_in_component) == 1\n        \n        # 3. Check if the width is greater than 1\n        is_wider_than_one = len(component) > 1\n\n        # If it's a horizontal line wider than one pixel, change color\n        if is_horizontal and is_wider_than_one:\n            for r, c in component:\n                output_grid[r, c] = replacement_color\n                \n    # Convert back to list of lists for the standard ARC format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4227,
    "candidates_token_count": 871,
    "total_token_count": 5098,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.339379,
  "retries": 1
}