{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nRetain the largest green object and any other object whose vertical extent \n(all rows it occupies) is fully contained within the vertical extent of the \nlargest green object. All other objects are removed (replaced with white).\n\"\"\"\n\ndef find_objects(grid):\n    \"\"\"\n    Identifies all connected objects of the same non-white color in the grid.\n\n    Args:\n        grid: A numpy array representing the input grid.\n\n    Returns:\n        A list of dictionaries, where each dictionary represents an object\n        with keys 'color' (int), 'pixels' (list of (row, col) tuples),\n        'size' (int), 'min_row' (int), and 'max_row' (int).\n    \"\"\"\n    height, width = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n    \n    for r in range(height):\n        for c in range(width):\n            # If the pixel is not white (0) and hasn't been visited, start BFS\n            if grid[r, c] != 0 and not visited[r, c]:\n                color = grid[r, c]\n                obj_pixels = []\n                q = deque([(r, c)])\n                visited[r, c] = True\n                min_r, max_r = r, r # Initialize row bounds\n                \n                while q:\n                    row, col = q.popleft()\n                    obj_pixels.append((row, col))\n                    min_r = min(min_r, row) # Update min row\n                    max_r = max(max_r, row) # Update max row\n                    \n                    # Check 8 neighbors (including diagonals)\n                    for dr in [-1, 0, 1]:\n                        for dc in [-1, 0, 1]:\n                            if dr == 0 and dc == 0:\n                                continue # Skip self\n                            \n                            nr, nc = row + dr, col + dc\n                            \n                            # Check boundaries\n                            if 0 <= nr < height and 0 <= nc < width:\n                                # Check if neighbor is same color and not visited\n                                if grid[nr, nc] == color and not visited[nr, nc]:\n                                    visited[nr, nc] = True\n                                    q.append((nr, nc))\n                                    \n                objects.append({\n                    'color': color, \n                    'pixels': obj_pixels, \n                    'size': len(obj_pixels),\n                    'min_row': min_r,\n                    'max_row': max_r\n                })\n                \n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on the vertical containment rule relative\n    to the largest green object.\n    \"\"\"\n    height, width = input_grid.shape\n    \n    # 1. Identify all objects and their properties\n    all_objects = find_objects(input_grid)\n    \n    # 2. Find all green objects\n    green_objects = [obj for obj in all_objects if obj['color'] == 3]\n    \n    # 3. Handle case: No green objects found\n    if not green_objects:\n        # Return an all-white grid of the same size\n        return np.zeros_like(input_grid, dtype=int)\n        \n    # 4. Find the largest green object\n    # Use max size as the primary key for finding the largest.\n    # If ties occur, Python's max is stable and will return the first one found,\n    # which is deterministic based on the scan order in find_objects.\n    largest_green_object = max(green_objects, key=lambda obj: obj['size'])\n    \n    # 5. Determine the vertical range of the largest green object\n    min_ref_row = largest_green_object['min_row']\n    max_ref_row = largest_green_object['max_row']\n    \n    # 6. Initialize the output grid with the background color (white)\n    output_grid = np.zeros_like(input_grid, dtype=int)\n    \n    # 7. Iterate through all objects and draw the ones to keep\n    for obj in all_objects:\n        # Determine if the object should be kept\n        keep_object = False\n        # Check if it is the largest green object\n        if obj['pixels'] == largest_green_object['pixels']: # Comparing pixel lists\n             keep_object = True\n        # Otherwise, check if its vertical range is contained within the reference range\n        elif obj['min_row'] >= min_ref_row and obj['max_row'] <= max_ref_row:\n            keep_object = True\n            \n        # 8. If the object should be kept, draw its pixels onto the output grid\n        if keep_object:\n            for r, c in obj['pixels']:\n                output_grid[r, c] = obj['color']\n                \n    # 9. Return the final output grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 16930,
    "candidates_token_count": 1159,
    "total_token_count": 18089,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.694397,
  "retries": 1
}