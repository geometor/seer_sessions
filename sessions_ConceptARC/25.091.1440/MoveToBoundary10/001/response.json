{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Tuple\n\n\"\"\"\nMoves groups of pixels of the same non-background color horizontally to the\nnearest edge of the grid. Pixels belonging to the same color group maintain\ntheir relative horizontal positions. The vertical positions remain unchanged.\nThe direction of movement (left or right) is determined by whether the\nhorizontal center of the group is to the left or right (or exactly at) the\ngrid's horizontal center.\n\"\"\"\n\ndef find_pixels_by_color(grid: np.ndarray, color: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    Finds the coordinates of all pixels of a specific color in the grid.\n\n    Args:\n        grid: The input numpy array representing the grid.\n        color: The integer color value to search for.\n\n    Returns:\n        A list of (row, col) tuples representing the coordinates of pixels\n        matching the specified color.\n    \"\"\"\n    coords = np.argwhere(grid == color)\n    # Convert numpy array rows to tuples (row, col)\n    return [tuple(coord) for coord in coords]\n\ndef calculate_shift(pixels: List[Tuple[int, int]], grid_width: int) -> int:\n    \"\"\"\n    Calculates the horizontal shift required to move a group of pixels to the\n    nearest horizontal edge.\n\n    Args:\n        pixels: A list of (row, col) coordinates for the pixels of a single color.\n        grid_width: The width of the grid.\n\n    Returns:\n        The integer amount to add to the column index of each pixel.\n        Negative for left shift, positive for right shift.\n    \"\"\"\n    if not pixels:\n        return 0 # No shift if there are no pixels for this color\n\n    # Extract column indices\n    cols = [col for row, col in pixels]\n    min_col = min(cols)\n    max_col = max(cols)\n\n    # Calculate the horizontal center of the pixel group and the grid\n    group_center = (min_col + max_col) / 2.0\n    grid_center = (grid_width - 1) / 2.0 # Use grid_width - 1 for 0-based indexing\n\n    # Determine shift direction and magnitude\n    if group_center < grid_center:\n        # Move left: shift needed to align min_col with column 0\n        shift = 0 - min_col\n    else:\n        # Move right: shift needed to align max_col with the last column (grid_width - 1)\n        shift = (grid_width - 1) - max_col\n\n    return shift\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid: A list of lists representing the input grid.\n\n    Returns:\n        A list of lists representing the transformed output grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_grid_np = np.array(input_grid, dtype=int)\n    height, width = input_grid_np.shape\n    \n    # Assume color 0 (white) is the background\n    background_color = 0\n\n    # Initialize the output grid with the background color\n    output_grid = np.full((height, width), background_color, dtype=int)\n\n    # Find all unique colors in the input grid, excluding the background\n    unique_colors = np.unique(input_grid_np)\n    non_background_colors = [color for color in unique_colors if color != background_color]\n\n    # Process each non-background color group\n    for color in non_background_colors:\n        # 1. Find all pixel coordinates for the current color\n        pixels = find_pixels_by_color(input_grid_np, color)\n\n        # Skip if no pixels of this color are found (shouldn't happen with unique filtering)\n        if not pixels:\n            continue\n\n        # 2. Calculate the horizontal shift required for this color group\n        shift = calculate_shift(pixels, width)\n\n        # 3. Apply the shift to each pixel and place it in the output grid\n        for r, c in pixels:\n            new_c = c + shift\n            # Check bounds just in case, though shift calculation should guarantee this\n            if 0 <= r < height and 0 <= new_c < width:\n                output_grid[r, new_c] = color\n\n    # Convert the final numpy array back to a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3207,
    "candidates_token_count": 1043,
    "total_token_count": 4250,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 22.631085,
  "retries": 1
}