{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Tuple, Dict, Optional\n\n\"\"\"\nMoves a blue (1) object relative to a red (2) line.\nIf the red line is vertical, the blue object moves 1 step horizontally away from the line.\nIf the red line is horizontal, the blue object moves 2 steps vertically away from the line.\nThe red line and white (0) background remain unchanged.\n\"\"\"\n\ndef find_object_pixels(grid: np.ndarray, color: int) -> List[Tuple[int, int]]:\n    \"\"\"Finds all coordinates of pixels with the specified color.\"\"\"\n    rows, cols = np.where(grid == color)\n    return list(zip(rows, cols))\n\ndef determine_line_orientation_and_position(pixels: List[Tuple[int, int]]) -> Optional[Tuple[str, int]]:\n    \"\"\"\n    Determines if the pixels form a vertical or horizontal line.\n    Returns the orientation ('vertical' or 'horizontal') and the fixed coordinate (column or row index).\n    Returns None if the pixels don't form a straight line or are empty.\n    \"\"\"\n    if not pixels:\n        return None\n\n    rows = {r for r, c in pixels}\n    cols = {c for r, c in pixels}\n\n    if len(cols) == 1:\n        # All pixels share the same column -> vertical line\n        return 'vertical', list(cols)[0]\n    elif len(rows) == 1:\n        # All pixels share the same row -> horizontal line\n        return 'horizontal', list(rows)[0]\n    else:\n        # Not a straight line\n        return None\n\ndef calculate_average_position(pixels: List[Tuple[int, int]]) -> Optional[Tuple[float, float]]:\n    \"\"\"Calculates the average row and column index for a set of pixels.\"\"\"\n    if not pixels:\n        return None\n    \n    avg_row = sum(r for r, c in pixels) / len(pixels)\n    avg_col = sum(c for r, c in pixels) / len(pixels)\n    return avg_row, avg_col\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Transforms the input grid by moving the blue object away from the red line.\n\n    Args:\n        input_grid: A numpy array representing the input grid.\n\n    Returns:\n        A numpy array representing the transformed output grid.\n    \"\"\"\n    # Find blue and red pixels\n    blue_pixels = find_object_pixels(input_grid, 1)\n    red_pixels = find_object_pixels(input_grid, 2)\n\n    # If no blue object or no red line, return the original grid\n    if not blue_pixels or not red_pixels:\n        return input_grid.copy() # Return a copy to avoid modifying original\n\n    # Determine red line orientation and position\n    line_info = determine_line_orientation_and_position(red_pixels)\n    if line_info is None:\n         # Red pixels don't form a line, return original\n        return input_grid.copy()\n    orientation, line_pos = line_info\n\n    # Calculate average position of the blue object\n    avg_blue_pos = calculate_average_position(blue_pixels)\n    if avg_blue_pos is None: # Should not happen if blue_pixels is not empty\n        return input_grid.copy()\n    blue_avg_row, blue_avg_col = avg_blue_pos\n\n    # Determine the shift vector (dx, dy)\n    dx = 0\n    dy = 0\n    if orientation == 'vertical':\n        red_col = line_pos\n        # If blue object is to the left (smaller avg col), move right (dx=1)\n        # If blue object is to the right (larger avg col), move left (dx=-1)\n        dx = 1 if blue_avg_col < red_col else -1\n        dy = 0\n    elif orientation == 'horizontal':\n        red_row = line_pos\n        # If blue object is above (smaller avg row), move down (dy=2)\n        # If blue object is below (larger avg row), move up (dy=-2)\n        dy = 2 if blue_avg_row < red_row else -2\n        dx = 0\n\n    # Initialize the output grid with the background color (white, 0)\n    output_grid = np.zeros_like(input_grid)\n\n    # Copy the red line from the input to the output\n    for r, c in red_pixels:\n        if 0 <= r < output_grid.shape[0] and 0 <= c < output_grid.shape[1]:\n             output_grid[r, c] = 2\n\n    # Apply the shift to the blue pixels and place them in the output grid\n    for r, c in blue_pixels:\n        new_r, new_c = r + dy, c + dx\n        # Check bounds before placing the pixel\n        if 0 <= new_r < output_grid.shape[0] and 0 <= new_c < output_grid.shape[1]:\n            output_grid[new_r, new_c] = 1\n        # else: pixel moves off grid - do nothing based on examples\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3080,
    "candidates_token_count": 1215,
    "total_token_count": 4295,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 19.760702,
  "retries": 1
}