{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid by:\n1. Identifying a unique 'seed' pixel (color count = 1, excluding background 0).\n2. Finding the vertical boundaries of the innermost frame containing the seed pixel by searching upwards and downwards in the seed pixel's column for the nearest non-background pixels.\n3. Filling the segment of the seed pixel's column strictly *between* these top and bottom boundary pixels with the seed pixel's color.\n\"\"\"\n\nimport numpy as np\n\ndef find_seed_pixel(grid):\n    \"\"\"\n    Finds the pixel with a unique color (count = 1) excluding background (0).\n\n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        tuple: (row, col, color) of the seed pixel, or (None, None, None) if not found.\n    \"\"\"\n    height, width = grid.shape\n    background_color = 0\n    color_counts = {}\n\n    # Count non-background colors\n    for r in range(height):\n        for c in range(width):\n            color = grid[r, c]\n            if color != background_color:\n                color_counts[color] = color_counts.get(color, 0) + 1\n\n    # Find the color with count 1\n    seed_color = -1\n    for color, count in color_counts.items():\n        if count == 1:\n            seed_color = color\n            break\n\n    # Find the location of the seed pixel\n    if seed_color != -1:\n        for r in range(height):\n            for c in range(width):\n                if grid[r, c] == seed_color:\n                    return r, c, seed_color\n                    \n    return None, None, None # Seed pixel not found\n\ndef find_vertical_boundaries(grid, seed_row, seed_col):\n    \"\"\"\n    Finds the row indices of the non-background pixels directly above and below the seed pixel.\n\n    Args:\n        grid (np.array): The input grid.\n        seed_row (int): The row index of the seed pixel.\n        seed_col (int): The column index of the seed pixel.\n\n    Returns:\n        tuple: (top_boundary_row, bottom_boundary_row), or (-1, -1) if boundaries not found.\n    \"\"\"\n    height = grid.shape[0]\n    background_color = 0\n    top_boundary_row = -1\n    bottom_boundary_row = -1\n\n    # Scan upwards from seed_row - 1\n    for r in range(seed_row - 1, -1, -1):\n        if grid[r, seed_col] != background_color:\n            top_boundary_row = r\n            break\n            \n    # Scan downwards from seed_row + 1\n    for r in range(seed_row + 1, height):\n        if grid[r, seed_col] != background_color:\n            bottom_boundary_row = r\n            break\n            \n    return top_boundary_row, bottom_boundary_row\n\ndef transform(input_grid):\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n    height, width = input_grid.shape\n\n    # 1. Find the unique seed pixel\n    seed_row, seed_col, seed_color = find_seed_pixel(input_grid)\n\n    # If no seed pixel is found, return the original grid\n    if seed_row is None:\n        return output_grid \n\n    # 2. Find the vertical boundaries (innermost frame points in the column)\n    top_boundary_row, bottom_boundary_row = find_vertical_boundaries(input_grid, seed_row, seed_col)\n\n    # If boundaries weren't found (shouldn't happen based on examples), return original\n    if top_boundary_row == -1 or bottom_boundary_row == -1:\n        # This indicates an unexpected input structure, maybe log a warning?\n        # print(f\"Warning: Could not find boundaries for seed at ({seed_row}, {seed_col})\")\n        return output_grid \n\n    # 3. Fill the column segment *between* the boundaries\n    # Iterate from the row *below* the top boundary up to (but not including) the bottom boundary row.\n    fill_start_row = top_boundary_row + 1\n    fill_end_row = bottom_boundary_row # The loop range `range(start, end)` excludes `end`.\n\n    for r in range(fill_start_row, fill_end_row):\n         # Ensure we don't write out of bounds (shouldn't happen if boundaries are valid)\n         if 0 <= r < height:\n            output_grid[r, seed_col] = seed_color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 27487,
    "candidates_token_count": 1120,
    "total_token_count": 28607,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.073191,
  "retries": 1
}