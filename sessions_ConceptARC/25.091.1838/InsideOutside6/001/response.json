{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque, Counter\n\n\"\"\"\nIdentify the background color (assumed to be 0), the container color (the most frequent non-background color forming enclosing structures), and the target color (the other non-background color). \nPerform a flood fill (or Breadth-First Search - BFS) starting from the grid boundaries, avoiding cells with the container color. \nMark all reachable cells ('outside' region). \nCreate an output grid initialized with the background color. \nCopy the target color to the output grid only for cells that originally contained the target color and were marked as reachable ('outside') during the flood fill.\n\"\"\"\n\ndef _identify_colors(grid):\n    \"\"\"Identifies background, container, and target colors.\"\"\"\n    unique_colors, counts = np.unique(grid, return_counts=True)\n    color_counts = dict(zip(unique_colors, counts))\n\n    # Assume background is 0\n    background_color = 0\n    if background_color in color_counts:\n        del color_counts[background_color]\n\n    if not color_counts: # Only background color present\n        return background_color, None, None\n\n    # Find the most frequent non-background color as the potential container\n    # Sort by count descending, then by color value ascending as tie-breaker\n    sorted_colors = sorted(color_counts.items(), key=lambda item: (-item[1], item[0]))\n    \n    container_color = sorted_colors[0][0]\n    target_color = None\n    \n    if len(sorted_colors) > 1:\n        # Find the first color that isn't the container\n        for color, _ in sorted_colors[1:]:\n            target_color = color\n            break\n    elif len(sorted_colors) == 1:\n         # If only one non-background color, it acts as the target, no container blocking\n         target_color = container_color\n         container_color = -1 # Indicate no container effectively blocks flood fill\n\n\n    # A better heuristic might be needed if frequency isn't always the best indicator\n    # of the container, but it works for the provided examples.\n\n    return background_color, container_color, target_color\n\ndef transform(input_grid):\n    \"\"\"\n    Filters the input grid to keep only target color pixels located outside\n    of regions enclosed by the container color.\n    \"\"\"\n    input_np = np.array(input_grid, dtype=int)\n    rows, cols = input_np.shape\n\n    # Identify the key colors\n    background_color, container_color, target_color = _identify_colors(input_np)\n\n    # Initialize output grid with background color\n    output_grid = np.full_like(input_np, background_color)\n\n    # If there's no target color, return the background grid\n    if target_color is None:\n        return output_grid.tolist()\n        \n    # If there's effectively no container (either only background and target,\n    # or identified container color is -1), all target pixels are kept.\n    if container_color is None or container_color == -1:\n         for r in range(rows):\n            for c in range(cols):\n                 if input_np[r, c] == target_color:\n                     output_grid[r, c] = target_color\n         return output_grid.tolist()\n\n\n    # Perform flood fill (BFS) from boundaries to find 'outside' cells\n    q = deque()\n    visited = np.zeros_like(input_np, dtype=bool)\n\n    # Add boundary cells to queue if they are not the container color\n    for r in range(rows):\n        for c in [0, cols - 1]:\n            if input_np[r, c] != container_color and not visited[r, c]:\n                q.append((r, c))\n                visited[r, c] = True\n    for c in range(cols): # Use range(cols) instead of range(1, cols - 1) to include corners twice, which is fine\n        for r in [0, rows - 1]:\n             if input_np[r, c] != container_color and not visited[r, c]:\n                q.append((r, c))\n                visited[r, c] = True\n                \n    # Define 8 directions for neighbors (including diagonals)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]\n\n    # Start BFS\n    while q:\n        r, c = q.popleft()\n\n        # Explore neighbors\n        for dr, dc in directions:\n            nr, nc = r + dr, c + dc\n\n            # Check bounds\n            if 0 <= nr < rows and 0 <= nc < cols:\n                # Check if neighbor is not visited and not the container color\n                if not visited[nr, nc] and input_np[nr, nc] != container_color:\n                    visited[nr, nc] = True\n                    q.append((nr, nc))\n\n    # Populate the output grid\n    for r in range(rows):\n        for c in range(cols):\n            # If the cell in the input grid has the target color AND was visited (is outside)\n            if input_np[r, c] == target_color and visited[r, c]:\n                # Set the corresponding cell in the output grid to the target color\n                output_grid[r, c] = target_color\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3262,
    "candidates_token_count": 1282,
    "total_token_count": 4544,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 17.113597,
  "retries": 1
}