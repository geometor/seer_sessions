{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nIdentify rows and columns composed entirely of red (2) pixels in the input grid.\nConstruct an output grid containing only these complete red rows and columns,\nsuperimposed on a white (0) background. All other pixels are set to white (0).\n\"\"\"\n\n# Constants for color values\nRED = 2\nWHITE = 0\n\ndef _find_full_red_rows(grid):\n    \"\"\"\n    Identifies the indices of rows in the grid that consist entirely of RED pixels.\n\n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        list: A list of row indices that are completely red.\n    \"\"\"\n    rows, _ = grid.shape\n    full_rows = []\n    for r in range(rows):\n        # Check if all elements in the current row are RED\n        if np.all(grid[r, :] == RED):\n            full_rows.append(r)\n    return full_rows\n\ndef _find_full_red_cols(grid):\n    \"\"\"\n    Identifies the indices of columns in the grid that consist entirely of RED pixels.\n\n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        list: A list of column indices that are completely red.\n    \"\"\"\n    _, cols = grid.shape\n    full_cols = []\n    for c in range(cols):\n        # Check if all elements in the current column are RED\n        if np.all(grid[:, c] == RED):\n            full_cols.append(c)\n    return full_cols\n\ndef transform(input_grid_list):\n    \"\"\"\n    Transforms the input grid by keeping only the complete horizontal and vertical\n    lines of red pixels found in the input.\n\n    Args:\n        input_grid_list (list): A list of lists representing the input grid.\n\n    Returns:\n        list: A list of lists representing the transformed output grid.\n    \"\"\"\n    # Convert input list of lists to a numpy array for easier processing\n    input_grid = np.array(input_grid_list, dtype=int)\n    rows, cols = input_grid.shape\n\n    # Initialize a boolean mask grid of the same dimensions, initially all False.\n    # This mask will mark pixels that should be red in the output.\n    mask = np.full((rows, cols), False, dtype=bool)\n\n    # Identify rows consisting entirely of RED\n    full_red_rows = _find_full_red_rows(input_grid)\n    # For each full red row found, set the corresponding row in the mask to True\n    for r_idx in full_red_rows:\n        mask[r_idx, :] = True\n\n    # Identify columns consisting entirely of RED\n    full_red_cols = _find_full_red_cols(input_grid)\n    # For each full red column found, set the corresponding column in the mask to True\n    for c_idx in full_red_cols:\n        mask[:, c_idx] = True\n\n    # Create the output grid, initialized with the background color (WHITE)\n    output_grid = np.full((rows, cols), WHITE, dtype=int)\n\n    # Apply the mask: Where the mask is True, set the output grid pixel to RED\n    output_grid[mask] = RED\n\n    # Convert the numpy array back to a list of lists for the required output format\n    return output_grid.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2399,
    "candidates_token_count": 777,
    "total_token_count": 3176,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 18.937953,
  "retries": 1
}