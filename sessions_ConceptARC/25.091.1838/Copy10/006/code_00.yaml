definitions:
  - object: A contiguous block of non-white pixels of the same color. Identified by coordinates, bounding box, and color.
  - object_group: A collection of all objects sharing the same color. Has a combined bounding box encompassing all member objects.
  - container_group: An object_group whose combined bounding box inclusively encloses the bounding box of at least one individual object of a *different* color. (If multiple groups qualify, choose based on priority like largest area or first identified).
  - contained_object: An individual object whose bounding box is inclusively enclosed within the container_group's bounding box, and whose color is different from the container_group's color.
  - orphan_object: An individual object that does not belong to the container_group and is not a contained_object.
  - primary_orphan: An orphan_object selected to determine placement. Priority is given to an orphan whose color matches the color of any contained_object. If no match, the first identified orphan can be used.
  - pattern_to_copy: The rectangular region of the *original input grid* defined by the container_group's bounding box. This includes the container group's objects and all contained_objects within that area.

input_components:
  - container_group: The framing structure.
  - contained_objects: Objects inside the container_group frame.
  - orphan_objects: Objects outside the container_group and not contained.

output_components:
  - original_container_group_and_contents: The container_group and contained_objects remain in their original position.
  - copied_container_group_and_contents: A duplicate of the pattern_to_copy is placed elsewhere.
  - background: White pixels, including areas where orphan_objects were removed.

transformation_steps:
  - step: 1
    action: identify_all_objects
    description: Find all distinct contiguous objects and their properties (coords, bbox, color).
  - step: 2
    action: group_objects_by_color
    description: Create object_groups and determine their combined bounding boxes.
  - step: 3
    action: identify_container_group_and_contained
    description: >
      Find the container_group by checking which group's bounding box encloses
      at least one individual object of a different color. Identify all such
      enclosed objects as contained_objects. Record the container_group's bounding box.
  - step: 4
    action: identify_orphans
    description: >
      Identify all objects that are neither part of the container_group nor
      identified as contained_objects.
  - step: 5
    action: select_primary_orphan
    description: >
      From the orphan_objects, select the primary_orphan, prioritizing one
      whose color matches a contained_object's color. Record its bounding box.
  - step: 6
    action: calculate_copy_location
    inputs:
      - container_group_bbox
      - primary_orphan_bbox
    description: >
      Determine the target top-left (row, col) for the copy. Find the primary axis
      of separation (vertical or horizontal) between the container and orphan bounding boxes.
      If orphan is below container: target_row = orphan.min_r - 2, target_col = container.min_c.
      If orphan is right of container: target_row = container.min_r, target_col = orphan.min_c - 2.
      (Add logic for above/left if necessary).
  - step: 7
    action: create_output_grid
    inputs: input_grid
    description: Initialize the output grid as a copy of the input grid.
  - step: 8
    action: remove_orphans
    inputs:
      - output_grid
      - all_orphan_objects
    description: Set the pixels of all identified orphan_objects in the output_grid to white (0).
  - step: 9
    action: extract_pattern
    inputs:
      - input_grid
      - container_group_bbox
    description: >
      Extract the rectangular subgrid defined by the container_group's bounding box
      from the *original* input_grid.
  - step: 10
    action: place_copy
    inputs:
      - output_grid
      - extracted_pattern
      - target_location (target_row, target_col)
    description: >
      Paste the extracted_pattern onto the output_grid starting at the target_location,
      overwriting existing pixels. Handle boundary clipping if the pattern extends
      beyond the grid dimensions.

final_output: The modified output_grid.