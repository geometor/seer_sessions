{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nThis module transforms an input grid based on identifying container, contained, and orphan objects.\nThe transformation involves:\n1. Identifying all distinct objects (contiguous blocks of non-white pixels) and their bounding boxes.\n2. Finding the 'container' object, defined as the object whose bounding box encloses the most other objects.\n3. Identifying 'contained' objects lying fully within the container's bounding box.\n4. Identifying 'orphan' objects, which are neither the container nor contained. (Assuming one primary orphan determines placement).\n5. Calculating a target location for a copy of the container and its contents. This location is determined by the position of the primary orphan object, placing the copy's edge 2 pixels away from the orphan's corresponding edge, towards the original container.\n6. Creating an output grid by copying the input grid.\n7. Removing the orphan object from the output grid (setting its pixels to white).\n8. Extracting the rectangular region defined by the container's bounding box from the original input grid.\n9. Pasting this extracted region onto the output grid at the calculated target location, overwriting existing pixels.\n\"\"\"\n\ndef find_objects(grid):\n    \"\"\"\n    Finds all contiguous objects of the same color in the grid.\n\n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        list: A list of tuples, where each tuple represents an object and contains:\n              - set: A set of (row, col) coordinates of the object's pixels.\n              - tuple: The bounding box (min_r, min_c, max_r, max_c).\n              - int: The color of the object.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and not visited[r, c]:\n                color = grid[r, c]\n                obj_coords = set()\n                q = deque([(r, c)])\n                visited[r, c] = True\n                min_r, min_c = r, c\n                max_r, max_c = r, c\n\n                while q:\n                    row, col = q.popleft()\n                    obj_coords.add((row, col))\n                    min_r = min(min_r, row)\n                    min_c = min(min_c, col)\n                    max_r = max(max_r, row)\n                    max_c = max(max_c, col)\n\n                    # Check neighbors (4-directional)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           not visited[nr, nc] and grid[nr, nc] == color:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n                \n                if obj_coords:\n                    bounding_box = (min_r, min_c, max_r, max_c)\n                    objects.append((obj_coords, bounding_box, color))\n    return objects\n\ndef is_enclosed(inner_box, outer_box):\n    \"\"\"Checks if inner_box is strictly inside outer_box.\"\"\"\n    min_r1, min_c1, max_r1, max_c1 = inner_box\n    min_r2, min_c2, max_r2, max_c2 = outer_box\n    return min_r1 > min_r2 and min_c1 > min_c2 and max_r1 < max_r2 and max_c1 < max_c2\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by copying a container object based on an orphan object's position.\n    \"\"\"\n    input_np = np.array(input_grid, dtype=int)\n    rows, cols = input_np.shape\n    output_np = np.copy(input_np)\n\n    # 1. Identify all objects\n    all_objects = find_objects(input_np)\n    if not all_objects:\n        return input_grid # Return original if no objects\n\n    # 2. Identify the container\n    container = None\n    container_box = None\n    container_coords = None\n    max_enclosed_count = -1\n\n    for i, (coords_i, box_i, color_i) in enumerate(all_objects):\n        enclosed_count = 0\n        for j, (coords_j, box_j, color_j) in enumerate(all_objects):\n            if i == j:\n                continue\n            if is_enclosed(box_j, box_i):\n                enclosed_count += 1\n        \n        # Prioritize larger containers if counts are equal\n        current_area = (box_i[2] - box_i[0] + 1) * (box_i[3] - box_i[1] + 1)\n        if enclosed_count > max_enclosed_count:\n            max_enclosed_count = enclosed_count\n            container = all_objects[i]\n        elif enclosed_count == max_enclosed_count and container:\n             # If counts are equal, choose the one with larger bounding box area\n             prev_box = container[1]\n             prev_area = (prev_box[2] - prev_box[0] + 1) * (prev_box[3] - prev_box[1] + 1)\n             if current_area > prev_area:\n                 container = all_objects[i]\n\n\n    if container is None:\n         # Handle cases where no container is found (e.g., only one object)\n         # Based on examples, this shouldn't happen, but good to consider.\n         # Maybe default to the largest object if no enclosure?\n         if all_objects:\n             container = max(all_objects, key=lambda obj: len(obj[0])) # Largest by pixel count as fallback\n         else:\n             return input_grid # Still no objects\n\n\n    container_coords, container_box, _ = container\n    c_min_r, c_min_c, c_max_r, c_max_c = container_box\n\n\n    # 3. Identify contained objects (needed to identify orphans)\n    contained_indices = set()\n    for i, (coords_i, box_i, color_i) in enumerate(all_objects):\n         if i != all_objects.index(container) and is_enclosed(box_i, container_box):\n             contained_indices.add(i)\n\n    # 4. Identify the orphan object(s)\n    orphan = None\n    orphan_box = None\n    orphan_coords = None\n    # Assume the first object found that isn't container or contained is the primary orphan\n    for i, (coords_i, box_i, color_i) in enumerate(all_objects):\n         if i != all_objects.index(container) and i not in contained_indices:\n              orphan = all_objects[i]\n              orphan_coords, orphan_box, _ = orphan\n              break # Use the first one found\n\n    if orphan is None:\n        # Should not happen based on examples, implies only container + contained exist\n        return input_grid \n\n    o_min_r, o_min_c, o_max_r, o_max_c = orphan_box\n\n    # 5. Calculate copy location\n    target_row, target_col = -1, -1\n    \n    # Determine primary axis of separation (simple check based on bounding box corners)\n    is_vertically_separated = o_min_r > c_max_r or o_max_r < c_min_r\n    is_horizontally_separated = o_min_c > c_max_c or o_max_c < c_min_c\n\n    if is_vertically_separated and o_min_r > c_max_r: # Orphan below\n        target_row = o_min_r - 2\n        target_col = c_min_c\n    elif is_horizontally_separated and o_min_c > c_max_c: # Orphan right\n        target_row = c_min_r\n        target_col = o_min_c - 2\n    # Add cases for orphan above or left if needed, based on future examples\n    # elif is_vertically_separated and o_max_r < c_min_r: # Orphan above\n    #     target_row = o_max_r + 2 + 1 # Placeholder, needs validation\n    #     target_col = c_min_c\n    # elif is_horizontally_separated and o_max_c < c_min_c: # Orphan left\n    #     target_row = c_min_r\n    #     target_col = o_max_c + 2 + 1 # Placeholder, needs validation\n    else:\n         # Fallback or error - perhaps they overlap or touch in unexpected ways\n         # Or maybe use center points as initially considered\n         # For now, rely on clear separation from examples\n         print(\"Warning: Ambiguous or unhandled relative position between container and orphan.\")\n         return input_grid # Return original if placement unclear\n\n\n    # 6. Prepare output grid (remove orphan)\n    for r, c in orphan_coords:\n        if 0 <= r < rows and 0 <= c < cols:\n            output_np[r, c] = 0\n\n    # 7. Extract pattern to copy (container + contents from ORIGINAL grid)\n    pattern = input_np[c_min_r : c_max_r + 1, c_min_c : c_max_c + 1]\n    pattern_h, pattern_w = pattern.shape\n\n    # 8. Place copy\n    # Ensure target indices are valid and placement doesn't go out of bounds\n    if target_row >= 0 and target_col >= 0:\n        end_row = target_row + pattern_h\n        end_col = target_col + pattern_w\n        # Check bounds before placing\n        if end_row <= rows and end_col <= cols:\n             output_np[target_row : end_row, target_col : end_col] = pattern\n        else:\n             # Handle partial placement or clipping if necessary, though examples fit\n             print(f\"Warning: Calculated copy placement ({target_row},{target_col}) to ({end_row-1},{end_col-1}) might exceed grid bounds ({rows},{cols}). Clipping.\")\n             # Calculate the slice dimensions for both output grid and pattern\n             place_rows = min(pattern_h, rows - target_row)\n             place_cols = min(pattern_w, cols - target_col)\n             if place_rows > 0 and place_cols > 0:\n                 output_np[target_row : target_row + place_rows, target_col : target_col + place_cols] = pattern[:place_rows, :place_cols]\n\n    return output_np.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3923,
    "candidates_token_count": 2595,
    "total_token_count": 6518,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 43.925119,
  "retries": 1
}