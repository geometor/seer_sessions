task_context:
  grid_size: fixed (10x10 for all examples)
  colors_present:
    - white (0): background
    - red (2)
    - yellow (4)
  input_pattern: Contains exactly 2 red pixels and 1 yellow pixel.
  output_pattern: Contains either the 2 red pixels or the 1 yellow pixel from the input; the other color is removed (replaced by white).

objects:
  - type: pixel
    color: red (2)
    count_in_input: 2
    properties:
      - position (row, col)
  - type: pixel
    color: yellow (4)
    count_in_input: 1
    properties:
      - position (row, col)

relationships_and_conditions:
  - type: count_comparison
    color_1: red
    color_2: yellow
    result: count(red) > count(yellow) (in all examples)
  - type: spatial_alignment
    description: Check alignment of the pixels of the most frequent color (red).
    condition: Are all red pixels in the same row OR in the same column?
    values:
      - train_1: Yes (row 2)
      - train_2: No
      - train_3: No
      - train_4: Yes (row 0)

actions:
  - name: select_color_to_keep
    based_on: alignment of the most frequent color (red)
    rule:
      - if red pixels are aligned (horizontally or vertically): keep red
      - if red pixels are not aligned: keep yellow
  - name: remove_other_color
    description: Change pixels of the non-selected color to white (0).
    target: pixels of the color not selected in the previous step.

transformation_summary:
  The transformation identifies the most frequent color (red) and checks if its pixels are aligned horizontally or vertically.
  If aligned, keep the red pixels and remove the yellow pixel.
  If not aligned, keep the yellow pixel and remove the red pixels.