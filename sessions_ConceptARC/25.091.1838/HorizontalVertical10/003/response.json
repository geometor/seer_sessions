{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid by adding a single line of azure (8) color along one edge.\nThe specific edge and orientation of the line depend on the orientation of the shapes present in the input grid.\nShapes are defined as contiguous blocks of the same non-background color.\nIf the grid contains only shapes that are strictly wider than tall (horizontal), a vertical azure line is added to the rightmost column.\nOtherwise (if any shape is taller than wide (vertical), square, or if both horizontal and vertical shapes exist, or if no shapes exist), a horizontal azure line is added to the topmost row.\n\"\"\"\n\nimport numpy as np\nfrom typing import List, Tuple, Set\n\n# ==================================\n# Helper Functions\n# ==================================\n\ndef find_objects_same_color(grid: np.ndarray, background_color: int = 0) -> List[Set[Tuple[int, int]]]:\n    \"\"\"\n    Finds connected components (objects) of pixels with the same non-background color in the grid.\n    Uses 4-way adjacency (up, down, left, right).\n\n    Args:\n        grid: The input grid as a numpy array.\n        background_color: The integer value representing the background color (default 0).\n\n    Returns:\n        A list of sets, where each set contains the (row, col) coordinates of a connected object.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = set()\n    objects = []\n    for r in range(rows):\n        for c in range(cols):\n            pixel_color = grid[r, c]\n            # Check if the pixel is not background and not visited yet\n            if pixel_color != background_color and (r, c) not in visited:\n                obj_coords = set()\n                q = [(r, c)]  # Queue for BFS\n                visited.add((r, c))\n\n                # Breadth-First Search to find all connected pixels of the same color\n                while q:\n                    curr_r, curr_c = q.pop(0)\n                    obj_coords.add((curr_r, curr_c))\n\n                    # Check 4 adjacent neighbors\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = curr_r + dr, curr_c + dc\n\n                        # Check bounds, if neighbor has the same color and not visited\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] == pixel_color and (nr, nc) not in visited:\n                            visited.add((nr, nc))\n                            q.append((nr, nc))\n\n                if obj_coords:\n                    objects.append(obj_coords)\n    return objects\n\ndef get_bounding_box(coords: Set[Tuple[int, int]]) -> Tuple[int, int]:\n    \"\"\"\n    Calculates the height and width of the bounding box for a set of coordinates.\n\n    Args:\n        coords: A set of (row, col) tuples representing an object.\n\n    Returns:\n        A tuple containing the (height, width) of the bounding box.\n        Returns (0, 0) if coords is empty.\n    \"\"\"\n    if not coords:\n        return 0, 0\n    min_r = min(r for r, c in coords)\n    max_r = max(r for r, c in coords)\n    min_c = min(c for r, c in coords)\n    max_c = max(c for r, c in coords)\n    height = max_r - min_r + 1\n    width = max_c - min_c + 1\n    return height, width\n\n# ==================================\n# Transformation Function\n# ==================================\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid: A List of Lists representing the input grid.\n\n    Returns:\n        A List of Lists representing the transformed output grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    output_grid = np.copy(input_np)\n    rows, cols = output_grid.shape\n    azure_color = 8\n\n    # Handle empty grid case\n    if rows == 0 or cols == 0:\n        return output_grid.tolist()\n\n    # Find all distinct objects (contiguous same-colored non-background pixels)\n    objects = find_objects_same_color(input_np)\n\n    # Determine object orientations\n    has_horizontal = False\n    has_vertical = False\n\n    if not objects:\n        # If no objects, default to adding a horizontal line at the top\n        output_grid[0, :] = azure_color\n        return output_grid.tolist()\n\n    # Analyze dimensions of each object\n    for obj_coords in objects:\n        h, w = get_bounding_box(obj_coords)\n        if w > h:\n            has_horizontal = True\n        if h > w:\n            has_vertical = True\n        # Optional: Check if both types are found early to potentially break loop\n        # if has_horizontal and has_vertical:\n        #     break # Both found, outcome is determined ('else' case)\n\n    # Apply transformation based on the presence of object orientations\n    if has_horizontal and not has_vertical:\n        # Only horizontal objects found: add vertical line to the rightmost column\n        output_grid[:, -1] = azure_color\n    else:\n        # Vertical objects found, or both found, or only square objects found:\n        # Add horizontal line to the topmost row\n        output_grid[0, :] = azure_color\n\n    # Convert back to list of lists for the expected output format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 4364,
            "end_index": 4516,
            "uri": "https://github.com/Rijgersberg/advent-of-code-2020",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 10464,
    "candidates_token_count": 1349,
    "total_token_count": 11813,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.897869,
  "retries": 1
}