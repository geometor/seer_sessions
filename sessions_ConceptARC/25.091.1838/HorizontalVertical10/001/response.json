{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nDetermines the dominant orientation of non-background shapes in the input grid.\nIf all shapes are strictly horizontal (width > height), adds a vertical line of azure (8) to the rightmost column.\nOtherwise (if any shape is vertical (height > width), square (height == width), or if there's a mix of orientations), adds a horizontal line of azure (8) to the topmost row.\n\"\"\"\n\nimport numpy as np\nfrom typing import List, Tuple, Set\n\ndef find_objects(grid: np.ndarray, background_color: int = 0) -> List[Set[Tuple[int, int]]]:\n    \"\"\"\n    Finds connected components of non-background pixels in the grid.\n\n    Args:\n        grid: The input grid as a numpy array.\n        background_color: The integer value representing the background color (default 0).\n\n    Returns:\n        A list of sets, where each set contains the (row, col) coordinates of a connected object.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = set()\n    objects = []\n    for r in range(rows):\n        for c in range(cols):\n            # Check if the pixel is not background and not visited yet\n            if grid[r, c] != background_color and (r, c) not in visited:\n                obj_coords = set()\n                q = [(r, c)]  # Queue for BFS\n                visited.add((r, c))\n                \n                # Breadth-First Search to find all connected pixels of the object\n                while q:\n                    curr_r, curr_c = q.pop(0)\n                    obj_coords.add((curr_r, curr_c))\n                    \n                    # Check 4 adjacent neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = curr_r + dr, curr_c + dc\n                        \n                        # Check bounds and if neighbor is part of the object and not visited\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] != background_color and (nr, nc) not in visited:\n                            visited.add((nr, nc))\n                            q.append((nr, nc))\n                            \n                if obj_coords:\n                    objects.append(obj_coords)\n    return objects\n\ndef get_bounding_box(coords: Set[Tuple[int, int]]) -> Tuple[int, int]:\n    \"\"\"\n    Calculates the height and width of the bounding box for a set of coordinates.\n\n    Args:\n        coords: A set of (row, col) tuples representing an object.\n\n    Returns:\n        A tuple containing the height and width of the bounding box.\n        Returns (0, 0) if coords is empty.\n    \"\"\"\n    if not coords:\n        return 0, 0\n    min_r = min(r for r, c in coords)\n    max_r = max(r for r, c in coords)\n    min_c = min(c for r, c in coords)\n    max_c = max(c for r, c in coords)\n    height = max_r - min_r + 1\n    width = max_c - min_c + 1\n    return height, width\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transforms the input grid based on the dominant orientation of its non-background objects.\n\n    Args:\n        input_grid: A List of Lists representing the input grid.\n\n    Returns:\n        A List of Lists representing the transformed output grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    output_grid = np.copy(input_np)\n    rows, cols = output_grid.shape\n    azure_color = 8\n\n    # Find all non-background objects\n    objects = find_objects(input_np)\n\n    # Handle case with no objects (return copy)\n    if not objects:\n        return output_grid.tolist()\n\n    # Determine dominant orientation\n    is_strictly_horizontal_dominant = True\n    \n    for obj_coords in objects:\n        h, w = get_bounding_box(obj_coords)\n        # If any object is not strictly wider than tall, the dominance is not strictly horizontal\n        if w <= h:\n            is_strictly_horizontal_dominant = False\n            break # No need to check further\n\n    # Modify the output grid based on the determined orientation\n    if is_strictly_horizontal_dominant:\n        # If all objects are wider than tall, add vertical azure line to the rightmost column\n        if cols > 0: # Ensure there is a column to modify\n             output_grid[:, -1] = azure_color\n    else:\n        # Otherwise (vertical, square, or mixed objects), add horizontal azure line to the topmost row\n         if rows > 0: # Ensure there is a row to modify\n            output_grid[0, :] = azure_color\n\n    # Convert back to list of lists for the expected output format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 5051,
            "end_index": 5203,
            "uri": "https://github.com/Rijgersberg/advent-of-code-2020",
            "license_": ""
          },
          {
            "start_index": 12478,
            "end_index": 12630,
            "uri": "https://github.com/Rijgersberg/advent-of-code-2020",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3405,
    "candidates_token_count": 1196,
    "total_token_count": 4601,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 36.359754,
  "retries": 1
}