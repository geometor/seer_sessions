task_description: "Conditionally change a single magenta pixel based on the colors of its two innermost containing objects."

elements:
  - element: grid
    description: "A 2D array of pixels representing colors 0-9."
  - element: pixel
    properties:
      - color: integer value 0-9
      - position: (row, column) coordinates
  - element: background
    value: 0 (white)
    description: "The default color filling empty space."
  - element: object
    description: "A contiguous block of pixels of the same non-background color."
    properties:
      - color: The color of the pixels in the object.
      - pixels: Set of (row, column) coordinates belonging to the object.
      - connectivity: Usually 4-connectivity or 8-connectivity (appears to be 8-connectivity here based on how objects enclose).
  - element: target_pixel
    description: "The specific pixel being evaluated for transformation."
    properties:
      - color: 6 (magenta)
      - uniqueness: Appears to be exactly one such pixel in relevant inputs.
  - element: containing_object
    description: "An object that encloses a given pixel or another object."
    relation: "A pixel P is contained within object O if any path from P to the grid border must intersect O."

transformation:
  - action: identify
    target: target_pixel (magenta, 6)
    condition: "Must be exactly one magenta pixel present."
  - action: identify_containment
    target: target_pixel
    details: "Determine the sequence of nested objects containing the target_pixel. Need at least two levels of containment."
    outputs:
      - innermost_object: O_inner (Color: C_inner)
      - next_outer_object: O_outer (Color: C_outer)
  - action: conditional_change
    target: target_pixel
    condition: "(C_inner == 4 (yellow) AND C_outer == 2 (red)) OR (C_inner == 1 (blue) AND C_outer == 3 (green))"
    effect: "Change target_pixel color to 0 (white)."
  - action: no_change
    condition: "If the target_pixel is not found, not unique, not contained by at least two objects, or the color condition is not met."
    effect: "Output grid is identical to the input grid."
