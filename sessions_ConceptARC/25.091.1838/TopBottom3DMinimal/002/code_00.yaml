task_type: pixel_color_change_by_adjacency_and_count
components:
  - type: grid
    properties:
      - background_color: always color 0 (white)
      - active_colors: exactly two non-background colors per task example
      - dimensions: height and width (variable, but consistent between input/output)
  - type: pixel
    properties:
      - color: integer 0-9
      - position: (row, column) coordinates
      - neighbors: set of 8 adjacent pixels (orthogonal and diagonal) in the input grid

relationships:
  - type: color_counts
    description: The total number of pixels for each of the two active colors in the input grid.
  - type: color_dominance_recessive
    based_on: color_counts
    rule: Identify the two non-background colors, C1 and C2. Count their occurrences (Count1, Count2). The color with the strictly *higher* count is the 'Dominant Color' (CD). The color with the strictly *lower* count is the 'Recessive Color' (CR).
    notes: Assumes counts are never equal based on examples. If counts were equal, no change would occur under this rule.
  - type: adjacency_interaction
    between: recessive_pixel (pixel with color CR)
    and: dominant_neighbor (neighboring pixel with color CD in the input grid)
    condition: A recessive_pixel has at least one neighbor (orthogonal or diagonal) that is a dominant_neighbor in the input grid.

actions:
  - type: color_conversion
    target: recessive_pixel
    condition: adjacency_interaction is true for the pixel based on the input grid state.
    result: The target pixel's color in the output grid becomes the dominant color (CD).
  - type: color_preservation
    target: all other pixels (background, dominant color pixels, recessive pixels not meeting the adjacency condition)
    result: The target pixel's color in the output grid remains the same as in the input grid.