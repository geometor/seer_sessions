{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nIdentify the two non-background (non-zero) colors in the input grid.\nCount the pixels of each of these two colors.\nDetermine the 'dominant' color (CD) as the one with the strictly higher count, \nand the 'recessive' color (CR) as the one with the strictly lower count.\nIf counts are equal or fewer than two active colors exist, return the input grid unchanged.\nCreate an output grid initialized as a copy of the input grid.\nIterate through each pixel of the input grid. \nIf a pixel has the recessive color (CR) and has 3 or more neighbors \n(orthogonal or diagonal) with the dominant color (CD) in the input grid, \nchange the color of that corresponding pixel in the output grid to the dominant color (CD).\nOtherwise, the pixel retains its original color in the output grid.\nReturn the modified output grid.\n\"\"\"\n\ndef get_neighbors_coords(grid_shape, r, c):\n    \"\"\"Gets the coordinates of the 8 neighbors of a cell within grid bounds.\"\"\"\n    height, width = grid_shape\n    neighbors = []\n    for dr in [-1, 0, 1]:\n        for dc in [-1, 0, 1]:\n            # Skip the cell itself\n            if dr == 0 and dc == 0:\n                continue\n            nr, nc = r + dr, c + dc\n            # Check bounds\n            if 0 <= nr < height and 0 <= nc < width:\n                neighbors.append((nr, nc))\n    return neighbors\n\ndef count_dominant_neighbors(input_grid, r, c, dominant_color):\n    \"\"\"Counts how many neighbors of (r, c) in the input_grid have the dominant color.\"\"\"\n    count = 0\n    neighbor_coords = get_neighbors_coords(input_grid.shape, r, c)\n    for nr, nc in neighbor_coords:\n        if input_grid[nr, nc] == dominant_color:\n            count += 1\n    return count\n\ndef transform(input_grid):\n    # Convert input list of lists to numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    height, width = input_np.shape\n    \n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_np)\n\n    # Step 1: Identify Active Colors (non-background)\n    unique_colors = np.unique(input_np)\n    active_colors = unique_colors[unique_colors != 0]\n\n    # If there are less than two active colors, no transformation is possible/needed\n    if len(active_colors) < 2:\n        return output_grid.tolist() \n\n    # Assuming exactly two active colors based on examples\n    color1 = active_colors[0]\n    color2 = active_colors[1]\n\n    # Step 2: Count Active Colors\n    count1 = np.count_nonzero(input_np == color1)\n    count2 = np.count_nonzero(input_np == color2)\n\n    # Step 3: Determine Dominant and Recessive Colors\n    dominant_color = -1 # Placeholder\n    recessive_color = -1 # Placeholder\n    \n    # If counts are equal, return the original grid (no change)\n    if count1 == count2:\n        return output_grid.tolist() \n        \n    if count1 > count2:\n        dominant_color = color1\n        recessive_color = color2\n    else: # count2 > count1\n        dominant_color = color2\n        recessive_color = color1\n\n    # Step 4 & 5: Iterate and Update based on input grid state\n    # Iterate through each cell in the input grid\n    for r in range(height):\n        for c in range(width):\n            # Check if the current cell in the *input* grid has the recessive color\n            if input_np[r, c] == recessive_color:\n                # Count dominant neighbors in the *input* grid\n                dominant_neighbor_count = count_dominant_neighbors(input_np, r, c, dominant_color)\n                \n                # Apply the transformation rule: >= 3 dominant neighbors\n                if dominant_neighbor_count >= 3:\n                    # If condition met, change the corresponding cell in the *output* grid\n                    output_grid[r, c] = dominant_color\n            # Otherwise (pixel is not recessive or has < 3 dominant neighbors), \n            # the output_grid cell retains its initially copied value.\n\n    # Step 6: Final Output\n    # Convert the numpy array back to a list of lists before returning\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 12199,
    "candidates_token_count": 1080,
    "total_token_count": 13279,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.752012,
  "retries": 1
}