{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentify all contiguous objects of non-background (non-white) color in the input grid. \nDetermine the size (number of pixels) of each object. Find the object with the largest size. \nCalculate the minimum bounding box that encloses this largest object. \nExtract (crop) the portion of the input grid defined by this bounding box to create the output grid.\n\"\"\"\n\ndef find_objects(grid):\n    \"\"\"\n    Finds all contiguous objects of the same non-background color in the grid.\n\n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        list: A list of objects, where each object is a list of (row, col) coordinates.\n              Returns an empty list if no non-background pixels are found.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n    \n    for r in range(rows):\n        for c in range(cols):\n            # Check if the pixel is non-background (not 0) and hasn't been visited\n            if grid[r, c] != 0 and not visited[r, c]:\n                current_object_coords = []\n                object_color = grid[r, c]\n                q = deque([(r, c)])\n                visited[r, c] = True\n                \n                while q:\n                    row, col = q.popleft()\n                    current_object_coords.append((row, col))\n                    \n                    # Check 4 neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        \n                        # Check bounds, color match, and visited status\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           not visited[nr, nc] and grid[nr, nc] == object_color:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n                            \n                if current_object_coords:\n                    objects.append(current_object_coords)\n                    \n    return objects\n\ndef get_bounding_box(obj_coords):\n    \"\"\"\n    Calculates the bounding box for a list of coordinates.\n\n    Args:\n        obj_coords (list): A list of (row, col) tuples representing the object pixels.\n\n    Returns:\n        tuple: (min_row, max_row, min_col, max_col) or None if obj_coords is empty.\n    \"\"\"\n    if not obj_coords:\n        return None\n        \n    rows = [r for r, c in obj_coords]\n    cols = [c for r, c in obj_coords]\n    \n    min_row = min(rows)\n    max_row = max(rows)\n    min_col = min(cols)\n    max_col = max(cols)\n    \n    return min_row, max_row, min_col, max_col\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by finding the largest non-background object \n    and cropping the grid to its bounding box.\n\n    Args:\n        input_grid (np.array): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.array: A 2D numpy array representing the cropped output grid. \n                  Returns an empty array if no objects are found.\n    \"\"\"\n    # Convert input list of lists to numpy array if necessary\n    if not isinstance(input_grid, np.ndarray):\n        input_grid = np.array(input_grid, dtype=int)\n\n    # 1. Find all non-background objects\n    objects = find_objects(input_grid)\n\n    # Handle case with no objects\n    if not objects:\n        # Based on examples, this case might not happen, but returning empty seems reasonable\n        return np.array([[]], dtype=int) \n\n    # 2. Calculate sizes and find the largest object\n    largest_object = max(objects, key=len)\n\n    # 3. Calculate the bounding box of the largest object\n    bbox = get_bounding_box(largest_object)\n    if bbox is None: # Should not happen if objects list was not empty\n         return np.array([[]], dtype=int)\n         \n    min_row, max_row, min_col, max_col = bbox\n\n    # 4. Crop the input grid using the bounding box coordinates\n    # Note: Slicing in numpy is exclusive for the end index, so add 1\n    output_grid = input_grid[min_row : max_row + 1, min_col : max_col + 1]\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2666,
    "candidates_token_count": 1108,
    "total_token_count": 3774,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.513044,
  "retries": 1
}