{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef get_majority_color(elements):\n    \"\"\"\n    Finds the most frequent element (color) in a list or array.\n    If there's a tie, it returns the one that appears first among the most frequent.\n    \"\"\"\n    if not elements:\n        return None # Or a default color like 0 if appropriate for the context\n    count = Counter(elements)\n    # Find the maximum count\n    max_count = 0\n    for element in count:\n        if count[element] > max_count:\n            max_count = count[element]\n    \n    # Find elements with the maximum count\n    majority_elements = [element for element, freq in count.items() if freq == max_count]\n    \n    # If there's only one majority element, return it\n    if len(majority_elements) == 1:\n        return majority_elements[0]\n    else:\n        # Tie-breaking: return the one that appeared first in the original list\n        # This requires iterating through the original list to find the first occurrence\n        # of any element present in majority_elements\n        for elem in elements:\n            if elem in majority_elements:\n                return elem\n        # Fallback (shouldn't be reached if elements is not empty)\n        return majority_elements[0]\n\n\ndef transform(input_grid):\n    \"\"\"\n    Determines if the grid has a dominant row or column pattern based on color homogeneity.\n    Identifies 'noise' pixels (those not matching the majority color of their row/column)\n    and replaces them with the majority color of that row/column.\n\n    1. Calculate row and column homogeneity scores.\n    2. Determine orientation (row or column) based on scores.\n    3. Iterate through rows/columns based on orientation.\n    4. For each row/column, find the majority color.\n    5. Replace pixels in that row/column that don't match the majority color.\n    \"\"\"\n    input_np = np.array(input_grid, dtype=int)\n    rows, cols = input_np.shape\n    output_grid = np.copy(input_np)\n\n    # 1. Calculate homogeneity scores\n    row_homogeneity_score = 0\n    for r in range(rows):\n        row_elements = list(input_np[r, :])\n        if row_elements:\n            count = Counter(row_elements)\n            row_homogeneity_score += max(count.values()) if count else 0\n\n    col_homogeneity_score = 0\n    for c in range(cols):\n        col_elements = list(input_np[:, c])\n        if col_elements:\n            count = Counter(col_elements)\n            col_homogeneity_score += max(count.values()) if count else 0\n\n    # 2. Determine orientation\n    # If scores are equal, default to row-based processing (as seen in test case logic)\n    # Although the description said row >= col, let's refine: row > col -> row, col > row -> col. If equal?\n    # Let's stick to the description: row >= col is 'row' orientation.\n    orientation = 'row' if row_homogeneity_score >= col_homogeneity_score else 'column'\n\n    # 3. & 4. & 5. Iterate and replace based on orientation\n    if orientation == 'row':\n        # Process row by row\n        for r in range(rows):\n            row_elements = list(input_np[r, :])\n            if not row_elements: continue # Skip empty rows if they could exist\n            \n            majority_color = get_majority_color(row_elements)\n            if majority_color is None: continue # Skip if row has no majority (e.g., empty or all unique)\n\n            for c in range(cols):\n                if input_np[r, c] != majority_color:\n                    output_grid[r, c] = majority_color\n    else: # orientation == 'column'\n        # Process column by column\n        for c in range(cols):\n            col_elements = list(input_np[:, c])\n            if not col_elements: continue # Skip empty columns if they could exist\n            \n            majority_color = get_majority_color(col_elements)\n            if majority_color is None: continue # Skip if column has no majority\n\n            for r in range(rows):\n                if input_np[r, c] != majority_color:\n                    output_grid[r, c] = majority_color\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2960,
    "candidates_token_count": 1056,
    "total_token_count": 4016,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.234278,
  "retries": 1
}