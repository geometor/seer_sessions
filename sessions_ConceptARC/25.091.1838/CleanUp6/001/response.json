{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter, deque\n\ndef find_connected_objects(grid, target_color):\n    \"\"\"\n    Finds all connected objects of a specific color in a grid using BFS.\n\n    Args:\n        grid (np.array): The input grid.\n        target_color (int): The color of the objects to find.\n\n    Returns:\n        list: A list of objects, where each object is represented as a list\n              of (row, col) coordinate tuples.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n\n    for r in range(rows):\n        for c in range(cols):\n            # If we find a pixel of the target color that hasn't been visited yet,\n            # start a BFS to find its connected component (object).\n            if grid[r, c] == target_color and not visited[r, c]:\n                current_object_coords = []\n                q = deque([(r, c)])\n                visited[r, c] = True\n\n                while q:\n                    row, col = q.popleft()\n                    current_object_coords.append((row, col))\n\n                    # Check 4 neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n\n                        # Check boundaries and if the neighbor is the target color and not visited\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] == target_color and not visited[nr, nc]:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n                \n                if current_object_coords:\n                    objects.append(current_object_coords)\n    \n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by performing the following steps:\n    1. Identify all unique non-background pixel colors (0 is background).\n    2. Count the frequency of each non-background color.\n    3. Determine the color(s) with the highest frequency ('primary' color(s)).\n    4. Find all contiguous objects composed of the primary color(s).\n    5. Identify the largest size among these primary color objects.\n    6. Create an output grid containing only the pixels belonging to the largest object(s) \n       of the primary color(s), preserving their original color. All other pixels are \n       set to the background color (0).\n    \"\"\"\n    input_grid_np = np.array(input_grid)\n    rows, cols = input_grid_np.shape\n    output_grid = np.zeros_like(input_grid_np) # Initialize output with background color\n\n    # 1. & 2. Count frequencies of non-background colors\n    pixels = input_grid_np.flatten()\n    non_background_pixels = pixels[pixels != 0]\n    \n    if len(non_background_pixels) == 0:\n        # If the input grid is empty or only background, return the empty grid\n        return output_grid.tolist()\n        \n    color_counts = Counter(non_background_pixels)\n    \n    # 3. Determine the primary color(s) - highest frequency\n    max_freq = 0\n    primary_colors = []\n    if color_counts: # Check if there are any non-background colors\n        max_freq = max(color_counts.values())\n        primary_colors = [color for color, count in color_counts.items() if count == max_freq]\n\n    # If no primary color identified (e.g., only background color present), return zero grid\n    if not primary_colors:\n         return output_grid.tolist()\n\n    # 4. Find all objects of the primary color(s)\n    all_primary_objects = []\n    for color in primary_colors:\n        objects_of_color = find_connected_objects(input_grid_np, color)\n        all_primary_objects.extend(objects_of_color) # Store objects as lists of coordinates\n\n    # If no objects found for any primary color, return zero grid\n    if not all_primary_objects:\n        return output_grid.tolist()\n\n    # 5. Identify the maximum object size\n    max_object_size = 0\n    for obj in all_primary_objects:\n        max_object_size = max(max_object_size, len(obj))\n\n    # 6. Filter and create the output grid\n    for obj_coords in all_primary_objects:\n        if len(obj_coords) == max_object_size:\n            # Keep this object - copy its pixels to the output grid\n            for r, c in obj_coords:\n                # We already know the color from the primary_colors list, \n                # or we can just grab it from the input grid\n                output_grid[r, c] = input_grid_np[r, c] \n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3250,
    "candidates_token_count": 1175,
    "total_token_count": 4425,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 21.600542,
  "retries": 1
}