{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by performing the following steps:\n1. Identify all unique non-background pixel colors (0 is background).\n2. Count the frequency of each non-background color.\n3. Determine the color(s) with the highest frequency ('primary' color(s)).\n4. Find all contiguous objects composed of the primary color(s) using 4-way adjacency.\n5. Identify the largest size among these primary color objects.\n6. Create an output grid containing only the pixels belonging to the largest object(s)\n   of the primary color(s), preserving their original color. All other pixels are\n   set to the background color (0).\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter, deque\n\ndef find_connected_objects(grid, target_color):\n    \"\"\"\n    Finds all connected objects of a specific color in a grid using BFS\n    with 4-way adjacency (up, down, left, right).\n\n    Args:\n        grid (np.array): The input grid.\n        target_color (int): The color of the objects to find.\n\n    Returns:\n        list: A list of objects, where each object is represented as a list\n              of (row, col) coordinate tuples. Returns an empty list if no\n              objects of the target_color are found.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n\n    for r in range(rows):\n        for c in range(cols):\n            # Start BFS if we find an unvisited pixel of the target color\n            if grid[r, c] == target_color and not visited[r, c]:\n                current_object_coords = []\n                q = deque([(r, c)])\n                visited[r, c] = True\n\n                while q:\n                    row, col = q.popleft()\n                    current_object_coords.append((row, col))\n\n                    # Check 4 neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n\n                        # Check boundaries and if the neighbor is the target color and not visited\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] == target_color and not visited[nr, nc]:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n\n                # Add the found object (list of coordinates) to our list of objects\n                if current_object_coords:\n                    objects.append(current_object_coords)\n\n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n    \"\"\"\n    input_grid_np = np.array(input_grid)\n    rows, cols = input_grid_np.shape\n    \n    # Initialize output grid with background color 0\n    output_grid = np.zeros_like(input_grid_np)\n\n    # 1. & 2. Count frequencies of non-background colors\n    pixels = input_grid_np.flatten()\n    non_background_pixels = pixels[pixels != 0]\n\n    # Handle edge case: grid is empty or only contains background color\n    if len(non_background_pixels) == 0:\n        return output_grid.tolist()\n\n    color_counts = Counter(non_background_pixels)\n\n    # 3. Determine the primary color(s) - highest frequency\n    max_freq = 0\n    primary_colors = []\n    if color_counts: # Check if there are any non-background colors counted\n        max_freq = max(color_counts.values())\n        primary_colors = [color for color, count in color_counts.items() if count == max_freq]\n\n    # If no primary color identified (unlikely given previous check, but safe)\n    if not primary_colors:\n         return output_grid.tolist()\n\n    # 4. Find all objects of the primary color(s) using 4-way adjacency\n    all_primary_objects = []\n    for color in primary_colors:\n        # Find all objects for the current primary color\n        objects_of_color = find_connected_objects(input_grid_np, color)\n        # Add all found objects to the master list\n        all_primary_objects.extend(objects_of_color) # Store objects as lists of coordinates\n\n    # Handle edge case: No objects of the primary color(s) were found\n    if not all_primary_objects:\n        return output_grid.tolist()\n\n    # 5. Identify the maximum object size among primary objects\n    max_object_size = 0\n    if all_primary_objects: # Ensure the list is not empty before finding max\n        max_object_size = max(len(obj) for obj in all_primary_objects)\n\n    # 6. Filter and create the output grid\n    # Iterate through all found primary objects\n    for obj_coords in all_primary_objects:\n        # Check if the current object's size matches the maximum size\n        if len(obj_coords) == max_object_size:\n            # Keep this object: copy its pixels to the output grid\n            for r, c in obj_coords:\n                # Get the color from the input grid at this coordinate\n                # (We know it's one of the primary colors)\n                output_grid[r, c] = input_grid_np[r, c]\n\n    # Return the result as a standard Python list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 12776,
    "candidates_token_count": 1294,
    "total_token_count": 14070,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.15797,
  "retries": 1
}