elements:
  - object: grid
    attributes:
      height: variable (e.g., 6 in examples)
      width: variable (e.g., 6 in examples)
  - object: pixel
    color: white
    value: 0
    role: background
  - object: pixel
    color: blue
    value: 1
    role: marker
    count: 1
    location_input: variable
    location_output: calculated
  - object: structure
    color: yellow
    value: 4
    role: direction_indicator
    shape: line (vertical along column 0 or horizontal along row 0)
    location: adjacent to grid edge (top row or left column)

relationships:
  - type: determines
    subject: yellow_structure_orientation
    object: blue_pixel_movement_direction
    details:
      - criterion: Count yellow pixels in row 0 (count_row0) and column 0 (count_col0).
      - if count_col0 > 1: direction is North (up) # Primarily vertical line
      - else if count_row0 > 1: direction is East (right) # Primarily horizontal line
      - else if count_col0 == 1: direction is North (up) # Fallback for single yellow or ambiguous cases if count_row0 is also 1 (original code logic)
      - else if count_row0 == 1: direction is East (right) # Fallback
  - type: constraint
    subject: grid_boundary
    object: blue_pixel_movement
    details: Movement stops when the pixel reaches the corresponding edge (row 0 for North, last column for East).

actions:
  - action: identify
    target: blue_pixel
    attribute: location_input (row_in, col_in)
  - action: count
    target: yellow_pixels
    scope: row 0
    result: count_row0
  - action: count
    target: yellow_pixels
    scope: column 0
    result: count_col0
  - action: determine
    target: movement_direction
    based_on: count_row0, count_col0
    logic: described in relationships section
  - action: calculate
    target: blue_pixel_location_output (row_out, col_out)
    based_on:
      - blue_pixel_location_input
      - movement_direction
      - grid_boundaries
    logic:
      - if direction is North: row_out = 0, col_out = col_in
      - if direction is East: row_out = row_in, col_out = grid_width - 1
  - action: generate
    target: output_grid
    attributes:
      size: same as input grid
      background: white
    content: place blue pixel at location_output