Inputs:
  - Grid:
    - BackgroundColor: white (0)
    - Objects:
      - Name: DiagonalLine
      - Count: 1
      - Pixels: Contiguous set of pixels with a single non-white color (C).
      - Properties:
        - Color: C (variable, e.g., yellow/4, green/3)
        - Type: Determined by the relative positions of its endpoints.
          - MainDiagonal: Starts top-leftish, ends bottom-rightish (row increases, column increases).
          - AntiDiagonal: Starts top-rightish, ends bottom-leftish (row increases, column decreases).
        - Coordinates: Set D = {(r, c) | input[r, c] == C}

Outputs:
  - Grid:
    - BackgroundColor: white (0)
    - Objects:
      - Name: FilledRegion
      - Count: 1
      - Pixels: Area filled with color C.
      - Properties:
        - Color: C (same as input DiagonalLine color).
        - Shape: Roughly triangular.
        - DefiningRule: Depends on the Type of the input DiagonalLine.

Transformation:
  - Action: FillArea
  - Inputs: Grid containing DiagonalLine
  - Outputs: Grid containing FilledRegion
  - Rule:
    - Step 1: Identify the non-white color C and the coordinates D of the DiagonalLine in the input grid.
    - Step 2: Determine the Type of the DiagonalLine (MainDiagonal or AntiDiagonal).
    - Step 3: Create an output grid of the same dimensions, filled with white (0).
    - Step 4: Iterate through each pixel position (r_out, c_out) in the output grid dimensions.
    - Step 5: Apply a condition based on the DiagonalLine Type:
      - If Type is MainDiagonal: Check if ANY (r_in, c_in) exists in D such that (r_out >= r_in AND c_out <= c_in).
      - If Type is AntiDiagonal: Check if ANY (r_in, c_in) exists in D such that (r_out >= r_in AND c_out >= c_in).
    - Step 6: If the condition in Step 5 is true, set output[r_out, c_out] = C.