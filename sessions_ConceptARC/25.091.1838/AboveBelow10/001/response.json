{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by identifying a diagonal line of a single non-white color and filling the area below and to the left of this line with the same color.\n\nThe transformation rule is as follows:\n1. Identify the single non-white color (fill_color) present in the input grid.\n2. Find all coordinates (r_in, c_in) where this fill_color appears in the input grid.\n3. Create an output grid of the same dimensions, initially filled with white (0).\n4. For each pixel position (r_out, c_out) in the output grid:\n   Check if there exists at least one input coordinate (r_in, c_in) such that r_out >= r_in AND c_out <= c_in.\n5. If the condition in step 4 is true, set the output pixel at (r_out, c_out) to the fill_color.\n6. Otherwise, the output pixel remains white (0).\n\"\"\"\n\nimport numpy as np\n\ndef find_fill_color_and_coords(grid):\n    \"\"\"\n    Finds the single non-white color and its coordinates in the grid.\n    Assumes there is exactly one non-white color present as a diagonal line.\n    \"\"\"\n    fill_color = 0\n    coords = []\n    non_white_colors = np.unique(grid[grid != 0])\n\n    if len(non_white_colors) == 0:\n        # Handle case with no non-white colors (though unlikely based on examples)\n        return 0, []\n    elif len(non_white_colors) > 1:\n        # Handle case with multiple non-white colors if necessary,\n        # but based on examples, assume only one.\n        # For now, just pick the first one found.\n        print(f\"Warning: Multiple non-white colors found: {non_white_colors}. Using {non_white_colors[0]}.\")\n        fill_color = non_white_colors[0]\n    else:\n        fill_color = non_white_colors[0]\n\n    # Find coordinates efficiently using numpy\n    coords = list(zip(*np.where(grid == fill_color))) # Returns list of (row, col) tuples\n    return int(fill_color), coords\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the fill transformation based on the diagonal line in the input grid.\n\n    Args:\n        input_grid (list of lists or np.ndarray): The input grid.\n\n    Returns:\n        np.ndarray: The transformed output grid.\n    \"\"\"\n    # Convert input to numpy array for efficient operations\n    input_np = np.array(input_grid, dtype=int)\n    height, width = input_np.shape\n\n    # 1. & 2. Identify the fill color and the coordinates of the input line pixels\n    fill_color, input_coords = find_fill_color_and_coords(input_np)\n\n    # Handle edge case where there's no fill color (e.g., all white input)\n    if fill_color == 0 or not input_coords:\n        return input_np # Return input as is or an all-white grid\n\n    # 3. Initialize output grid with white (0)\n    output_grid = np.zeros_like(input_np, dtype=int)\n\n    # 4. Iterate through each pixel position in the potential output grid\n    for r_out in range(height):\n        for c_out in range(width):\n            # 5. Check the condition against all input coordinates\n            fill_pixel = False\n            for r_in, c_in in input_coords:\n                if r_out >= r_in and c_out <= c_in:\n                    fill_pixel = True\n                    break # Found a condition match, no need to check further for this output pixel\n\n            # 6. If the condition was met, fill the output pixel\n            if fill_pixel:\n                output_grid[r_out, c_out] = fill_color\n            # 7. Otherwise, it remains white (0) as initialized\n\n    return output_grid.tolist() # Return as list of lists if required by ARC standard\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3227,
    "candidates_token_count": 954,
    "total_token_count": 4181,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.591342,
  "retries": 1
}