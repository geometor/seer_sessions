{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransforms the input grid by moving groups of pixels based on their color. \nEach non-background color group (all pixels of that color, regardless of contiguity) \nis treated as a single unit. \nThe horizontal center of the group's bounding box determines the movement direction:\nleft if the center is left of the grid's vertical midpoint, right otherwise.\nThe group is then shifted horizontally until its corresponding edge (leftmost column \nfor leftward movement, rightmost column for rightward movement) aligns with the grid's edge. \nThe relative positions of pixels within the group are preserved.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Moves color groups horizontally to the grid edges.\n\n    Args:\n        input_grid (list of lists): The input grid represented as a 2D list.\n\n    Returns:\n        list of lists: The transformed grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    height, width = input_np.shape\n    \n    # Initialize output grid with background color (0)\n    output_np = np.zeros_like(input_np)\n    \n    # Define background color\n    background_color = 0\n    \n    # Calculate grid horizontal midpoint\n    # Use floating point for accurate comparison, even for odd widths\n    grid_mid_col = (width - 1) / 2.0 \n    \n    # Find all unique non-background colors\n    unique_colors = np.unique(input_np)\n    non_bg_colors = unique_colors[unique_colors != background_color]\n    \n    # Process each color group\n    for color in non_bg_colors:\n        # Find all coordinates (pixels) of the current color\n        coords = np.argwhere(input_np == color)\n        \n        # Skip if this color isn't actually present (shouldn't happen with unique, but safe)\n        if coords.size == 0:\n            continue\n            \n        # Determine the horizontal extent (bounding box) of the color group\n        cols = coords[:, 1]\n        min_col = np.min(cols)\n        max_col = np.max(cols)\n        \n        # Calculate the group's horizontal center\n        group_center_col = (min_col + max_col) / 2.0\n        \n        # Determine movement direction and calculate horizontal shift (delta_col)\n        delta_col = 0\n        if group_center_col < grid_mid_col:\n            # Move left: shift needed to bring min_col to 0\n            delta_col = 0 - min_col\n        else:\n            # Move right: shift needed to bring max_col to width - 1\n            delta_col = (width - 1) - max_col\n            \n        # Apply the shift to each pixel of the color group\n        for r, c in coords:\n            new_c = c + delta_col\n            # Place the pixel in the output grid, checking bounds just in case\n            if 0 <= new_c < width:\n                output_np[r, new_c] = color\n\n    # Convert output numpy array back to list of lists\n    output_grid = output_np.tolist()\n    \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 13668,
    "candidates_token_count": 768,
    "total_token_count": 14436,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.278543,
  "retries": 1
}