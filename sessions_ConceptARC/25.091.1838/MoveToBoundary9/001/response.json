{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentify all distinct contiguous objects of non-white pixels in the input grid.\nFor each object, determine its horizontal center based on its leftmost and rightmost columns.\nCompare the object's horizontal center to the grid's horizontal midpoint.\nIf the object's center is to the left of the grid's midpoint, calculate the horizontal shift needed to move the object's leftmost column to column 0.\nIf the object's center is at or to the right of the grid's midpoint, calculate the horizontal shift needed to move the object's rightmost column to the last column of the grid.\nCreate an output grid initialized with the background color (white, 0).\nFor each object, copy its pixels to the output grid at their original row and shifted column.\n\"\"\"\n\ndef find_objects(grid, background_color=0):\n    \"\"\"\n    Finds all contiguous objects of the same non-background color in the grid.\n\n    Args:\n        grid (np.array): The input grid.\n        background_color (int): The color to ignore (usually 0 for white).\n\n    Returns:\n        list: A list of objects. Each object is represented as a tuple:\n              (color, list_of_coordinates, min_col, max_col).\n    \"\"\"\n    height, width = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n\n    for r in range(height):\n        for c in range(width):\n            if grid[r, c] != background_color and not visited[r, c]:\n                # Start finding a new object\n                color = grid[r, c]\n                coords = []\n                q = deque([(r, c)])\n                visited[r, c] = True\n                min_c, max_c = c, c\n\n                while q:\n                    curr_r, curr_c = q.popleft()\n                    coords.append((curr_r, curr_c))\n                    min_c = min(min_c, curr_c)\n                    max_c = max(max_c, curr_c)\n\n                    # Check 8 neighbors (including diagonals)\n                    for dr in [-1, 0, 1]:\n                        for dc in [-1, 0, 1]:\n                            if dr == 0 and dc == 0:\n                                continue\n                            nr, nc = curr_r + dr, curr_c + dc\n\n                            # Check bounds, color match, and visited status\n                            if 0 <= nr < height and 0 <= nc < width and \\\n                               grid[nr, nc] == color and not visited[nr, nc]:\n                                visited[nr, nc] = True\n                                q.append((nr, nc))\n                \n                if coords: # Ensure we found at least one pixel\n                    objects.append((color, coords, min_c, max_c))\n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Moves non-white objects horizontally to the grid edges based on their position relative to the center.\n\n    Args:\n        input_grid (list of lists): The input grid represented as a 2D list.\n\n    Returns:\n        list of lists: The transformed grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    height, width = input_np.shape\n    \n    # Initialize output grid with background color (0)\n    output_np = np.zeros_like(input_np)\n    \n    # Define background color\n    background_color = 0\n    \n    # Find all non-background objects\n    objects = find_objects(input_np, background_color)\n    \n    # Calculate grid horizontal midpoint\n    # Use floating point for accurate comparison, even for odd widths\n    grid_mid_col = (width - 1) / 2.0 \n    \n    # Process each object\n    for color, coords, min_col, max_col in objects:\n        # Calculate object's horizontal center\n        obj_center_col = (min_col + max_col) / 2.0\n        \n        # Determine movement direction and calculate horizontal shift (delta_col)\n        delta_col = 0\n        if obj_center_col < grid_mid_col:\n            # Move left\n            delta_col = 0 - min_col\n        else:\n            # Move right (or stay if already at right edge)\n            delta_col = (width - 1) - max_col\n            \n        # Apply the shift to each pixel of the object\n        for r, c in coords:\n            new_c = c + delta_col\n            # Ensure the new column is within bounds (should be by calculation, but safety check)\n            if 0 <= new_c < width:\n                output_np[r, new_c] = color\n\n    # Convert output numpy array back to list of lists\n    output_grid = output_np.tolist()\n    \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3097,
    "candidates_token_count": 1152,
    "total_token_count": 4249,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 21.70205,
  "retries": 1
}