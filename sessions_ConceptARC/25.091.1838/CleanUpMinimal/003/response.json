{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentify all distinct contiguous objects composed of non-white (0) pixels in the input grid. \nDetermine the object with the largest area (pixel count). Note the color of this largest object (the \"target color\").\nCreate an output grid of the same dimensions as the input, initialized with the background color (white, 0).\nIterate through all identified non-white objects from the input grid. If an object's color matches the target color, \ncopy all pixels belonging to that object (preserving their color, which is the target color) to the output grid. \nDiscard all objects whose color does not match the target color by leaving their corresponding pixels as the background color in the output grid.\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef find_objects(grid, background_color=0):\n    \"\"\"\n    Finds all contiguous objects of non-background colors in the grid.\n\n    Args:\n        grid (np.ndarray): The input grid.\n        background_color (int): The color considered as background.\n\n    Returns:\n        list: A list of dictionaries, where each dictionary represents an object\n              and contains keys 'coords' (a set of (row, col) tuples), \n              'color' (int), and 'size' (int).\n              Returns an empty list if no non-background objects are found.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n    \n    for r in range(rows):\n        for c in range(cols):\n            # Check if the pixel is non-background and not yet visited\n            if grid[r, c] != background_color and not visited[r, c]:\n                color = grid[r, c]\n                obj_coords = set()\n                q = deque([(r, c)])\n                visited[r, c] = True\n                \n                # Breadth-First Search (BFS) to find all connected pixels of the same color\n                while q:\n                    row, col = q.popleft()\n                    obj_coords.add((row, col))\n                    \n                    # Check cardinal neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        # Check if neighbor is within bounds, has the same color, and hasn't been visited\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           not visited[nr, nc] and grid[nr, nc] == color:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n                            \n                # Store the found object with its coordinates, color, and size\n                objects.append({'coords': obj_coords, 'color': color, 'size': len(obj_coords)})\n                \n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by keeping only the objects that have the same color \n    as the largest object found in the grid.\n\n    Args:\n        input_grid (list of lists): The 2D input grid.\n\n    Returns:\n        list of lists: The transformed 2D output grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_grid_np = np.array(input_grid, dtype=int)\n    rows, cols = input_grid_np.shape\n    background_color = 0\n    \n    # Initialize the output grid with the background color\n    output_grid = np.full((rows, cols), background_color, dtype=int)\n\n    # Find all non-background objects in the input grid\n    objects = find_objects(input_grid_np, background_color)\n    \n    # If no non-background objects are found, return the initialized background grid\n    if not objects:\n        return output_grid.tolist()\n\n    # Identify the largest object based on pixel count (size)\n    # If multiple objects have the same max size, max() picks the first one encountered\n    largest_object = max(objects, key=lambda obj: obj['size'])\n    target_color = largest_object['color']\n\n    # Iterate through all found objects\n    for obj in objects:\n        # Check if the object's color matches the target color\n        if obj['color'] == target_color:\n            # If colors match, copy the pixels of this object to the output grid\n            for r, c in obj['coords']:\n                output_grid[r, c] = target_color\n                \n    # Convert the final numpy grid back to a list of lists for the required output format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 9424,
    "candidates_token_count": 1073,
    "total_token_count": 10497,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.353253,
  "retries": 1
}