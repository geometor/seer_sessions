{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nProcesses the input grid column by column.\nFor each column:\n1. Identify all unique non-background colors and their counts.\n2. If exactly two unique non-background colors are present:\n   a. Determine the 'primary_color' (the one with the higher count).\n   b. Determine the 'trigger_color' (the one with the lower count).\n   c. Find all row indices where the 'trigger_color' appears ('trigger_rows').\n   d. For each 'row_trigger' in 'trigger_rows':\n      i. Iterate through all rows 'row' above 'row_trigger' (0 <= row < row_trigger).\n      ii. If the pixel at input_grid[row, col] is the 'primary_color', change the corresponding pixel in the output_grid to the 'trigger_color'.\n3. If the number of unique non-background colors is not exactly two, the column remains unchanged.\nThe final modified grid is returned.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid (np.array): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.array: A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    # Initialize output_grid as a copy of the input_grid\n    output_grid = np.copy(input_grid)\n    height, width = input_grid.shape\n\n    # Iterate through each column\n    for col in range(width):\n        # Extract the current column\n        current_column = input_grid[:, col]\n\n        # Find unique non-background colors and their counts in this column\n        non_background_pixels = current_column[current_column != 0]\n        color_counts = Counter(non_background_pixels)\n        unique_colors = list(color_counts.keys())\n\n        # Check if there are exactly two unique non-background colors\n        if len(unique_colors) == 2:\n            # Determine primary and trigger colors based on counts\n            color1, count1 = unique_colors[0], color_counts[unique_colors[0]]\n            color2, count2 = unique_colors[1], color_counts[unique_colors[1]]\n\n            # Handle cases where counts might be equal (although not seen in examples)\n            # Based on examples, trigger is less frequent. If equal, skip? Let's assume counts differ for now.\n            if count1 == count2:\n                 continue # Skip this column if counts are equal as rule is ambiguous\n\n            if count1 > count2:\n                primary_color = color1\n                trigger_color = color2\n            else:\n                primary_color = color2\n                trigger_color = color1\n\n            # Find all row indices where the trigger_color appears\n            trigger_rows = np.where(current_column == trigger_color)[0]\n\n            # For each trigger pixel, modify primary pixels above it in the output grid\n            for row_trigger in trigger_rows:\n                # Iterate through rows above the trigger row\n                for row in range(row_trigger):\n                    # Check if the pixel in the *input* grid is the primary color\n                    if input_grid[row, col] == primary_color:\n                        # Change the corresponding pixel in the *output* grid to the trigger color\n                        output_grid[row, col] = trigger_color\n\n        # If not exactly two unique non-background colors, do nothing (column remains as copied)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2853,
    "candidates_token_count": 812,
    "total_token_count": 3665,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.802424,
  "retries": 1
}