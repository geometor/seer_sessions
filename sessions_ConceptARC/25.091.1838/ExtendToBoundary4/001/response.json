{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import Tuple, Dict, List, Optional\n\n\"\"\"\nIdentifies a single vertical line and a single horizontal line in the input grid. \nThen, based on their relative positions, extends one of the lines.\n- If the horizontal line is entirely to the right of the vertical line's column, the horizontal line extends one pixel to the right.\n- Otherwise, the vertical line extends downwards. \n  - If the vertical line is entirely above the horizontal line's row, it extends down to the row just above the horizontal line.\n  - Otherwise (if the vertical line intersects, touches, or is below the horizontal line), it extends down by exactly one pixel.\n\"\"\"\n\ndef find_objects(grid: np.ndarray) -> List[Dict]:\n    \"\"\"\n    Finds contiguous objects of the same non-background color in the grid.\n    \"\"\"\n    height, width = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n\n    for r in range(height):\n        for c in range(width):\n            if grid[r, c] != 0 and not visited[r, c]:\n                color = grid[r, c]\n                obj_pixels = []\n                q = [(r, c)]\n                visited[r, c] = True\n                min_r, max_r = r, r\n                min_c, max_c = c, c\n\n                while q:\n                    row, col = q.pop(0)\n                    obj_pixels.append((row, col))\n                    min_r = min(min_r, row)\n                    max_r = max(max_r, row)\n                    min_c = min(min_c, col)\n                    max_c = max(max_c, col)\n\n                    # Check 4 neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        if 0 <= nr < height and 0 <= nc < width and \\\n                           not visited[nr, nc] and grid[nr, nc] == color:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n\n                objects.append({\n                    \"color\": color,\n                    \"pixels\": obj_pixels,\n                    \"min_r\": min_r,\n                    \"max_r\": max_r,\n                    \"min_c\": min_c,\n                    \"max_c\": max_c,\n                    \"height\": max_r - min_r + 1,\n                    \"width\": max_c - min_c + 1\n                })\n    return objects\n\n\ndef find_lines(grid: np.ndarray) -> Tuple[Optional[Dict], Optional[Dict]]:\n    \"\"\"\n    Identifies the single vertical and single horizontal line among found objects.\n    \"\"\"\n    objects = find_objects(grid)\n    vertical_line = None\n    horizontal_line = None\n\n    for obj in objects:\n        if obj['width'] == 1 and obj['height'] > 0: # Must have height > 0\n             if vertical_line is None: # Take the first one found\n                 vertical_line = obj\n             else:\n                 # Error handling/assumption check: should only be one vertical line\n                 pass\n        elif obj['height'] == 1 and obj['width'] > 0: # Must have width > 0\n             if horizontal_line is None: # Take the first one found\n                horizontal_line = obj\n             else:\n                 # Error handling/assumption check: should only be one horizontal line\n                 pass\n                 \n    # Basic sanity check - ensure lines are not single points unless grid is 1x1 etc.\n    # The logic width > 0 and height > 0 handles the case of single points being lines\n    # but we rely on the problem constraints ensuring lines are actual lines of length > 0\n\n    return vertical_line, horizontal_line\n\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the line extension transformation based on relative positions.\n    \"\"\"\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n    height, width = output_grid.shape\n\n    # Find the vertical and horizontal lines\n    vertical_line, horizontal_line = find_lines(input_grid)\n\n    # Check if both lines were found (as expected by the problem description)\n    if vertical_line is None or horizontal_line is None:\n        # Should not happen based on examples, but return original grid if lines aren't found\n        print(\"Warning: Could not find both a vertical and horizontal line.\")\n        return output_grid\n\n    # Extract properties for easier access\n    v_color = vertical_line['color']\n    v_col = vertical_line['min_c'] # Since width is 1, min_c == max_c\n    v_min_row = vertical_line['min_r']\n    v_max_row = vertical_line['max_r']\n\n    h_color = horizontal_line['color']\n    h_row = horizontal_line['min_r'] # Since height is 1, min_r == max_r\n    h_min_col = horizontal_line['min_c']\n    h_max_col = horizontal_line['max_c']\n\n    # Rule 1: Check if the horizontal line is entirely to the right of the vertical line\n    if h_min_col > v_col:\n        # Extend the horizontal line one pixel to the right\n        extend_col = h_max_col + 1\n        if extend_col < width: # Check boundary\n            output_grid[h_row, extend_col] = h_color\n    else:\n        # Rule 2: Horizontal line is not entirely to the right, so extend the vertical line\n        \n        # Rule 2a: Check if the vertical line is entirely above the horizontal line\n        if v_max_row < h_row:\n            # Extend downwards until the row just before the horizontal line\n            for r in range(v_max_row + 1, h_row):\n                 if r < height: # Check boundary\n                    output_grid[r, v_col] = v_color\n        else:\n            # Rule 2b: Vertical line intersects, touches, or is below the horizontal line\n            # Extend downwards by exactly one pixel\n            extend_row = v_max_row + 1\n            if extend_row < height: # Check boundary\n                 output_grid[extend_row, v_col] = v_color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3082,
    "candidates_token_count": 1539,
    "total_token_count": 4621,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 18.63431,
  "retries": 1
}