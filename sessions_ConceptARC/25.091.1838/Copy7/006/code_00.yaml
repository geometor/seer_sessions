task_description: Identify two main objects, find an internal pattern in one (source), and transfer this pattern to the other (target) by aligning bounding box centers, applying the resulting translation to the pattern's absolute coordinates, and clipping the result to the target's bounding box.

definitions:
  - object: A connected component of non-white pixels. Identified using BFS or skimage.label.
  - bounding_box: The smallest rectangle enclosing all pixels of an object. Represented as (min_row, min_col, max_row, max_col), where max is exclusive.
  - primary_color: The most frequent non-white color within an object's pixels.
  - pattern_color: A single color found within the source object's bounding box that differs from its primary color and is not white.
  - pattern_pixels_absolute: A list of (row, col) tuples representing the absolute coordinates of all pixels with the pattern_color within the source object's bounding box.
  - source_object: The object (usually one of the two largest) whose bounding box contains the pattern_pixels_absolute.
  - target_object: The other large object onto which the pattern is transferred.
  - bbox_center: The geometric center coordinates (potentially fractional) of a bounding box, calculated as (min_r + height/2, min_c + width/2).
  - translation_vector: The difference (delta_r, delta_c) between the target_object's bbox_center and the source_object's bbox_center.

actions:
  - identify_objects: Find all distinct non-white connected components and their properties (pixels, primary_color, bounding_box, size).
  - select_main_objects: Choose the two objects with the largest pixel counts. Handle cases with fewer than two objects.
  - identify_source_target_pattern:
      - For each of the two main objects:
        - Check if its bounding box contains pixels of a single color that is different from its primary_color and not white.
        - If yes, designate this object as 'source', the other main object as 'target', the differing color as 'pattern_color', and record the absolute coordinates of these pattern pixels ('pattern_pixels_absolute').
  - calculate_centers_and_delta: Compute the bbox_center for both source and target objects and find the translation_vector (target_center - source_center).
  - apply_pattern_to_target:
      - Initialize the output grid as a copy of the input.
      - For each coordinate (src_r, src_c) in 'pattern_pixels_absolute':
        - Calculate potential target coordinates: target_r = round(src_r + delta_r), target_c = round(src_c + delta_c).
        - Validate target coordinates: Check if (target_r, target_c) is within the grid dimensions AND within the target_object's bounding_box (min_rt <= target_r < max_rt and min_ct <= target_c < max_ct).
        - If validation passes, update the pixel at (target_r, target_c) in the output grid to the 'pattern_color'.
  - finalize_output: Return the modified output grid.

example_1_analysis:
  objects_found: 2
  source_object: {bbox: (0, 0, 6, 6), primary_color: 6, size: 23}
  target_object: {bbox: (0, 7, 6, 13), primary_color: 7, size: 20}
  pattern_color: 3
  pattern_pixels_absolute: [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5)]
  translation_delta: (0.0, 7.0) # Using integer centers gives (0,7) delta as well
  output_pattern_coords: [(0, 8), (1, 9), (2, 10), (3, 11), (4, 12)]
  simulation_matches_output: True # Center align + target bbox clip works

example_2_analysis:
  objects_found: 2
  source_object: {bbox: (1, 0, 6, 5), primary_color: 4, size: 25}
  target_object: {bbox: (3, 7, 6, 10), primary_color: 2, size: 9}
  pattern_color: 1
  pattern_pixels_absolute: [(1, 4), (2, 3), (3, 2), (4, 1), (5, 0)]
  translation_delta: (1.0, 6.0)
  output_pattern_coords: [(3, 9), (4, 8), (5, 7)]
  simulation_matches_output: True # Center align + target bbox clip works
