task_type: conditional_homogenization
input_characteristics:
  - grid_dimensions: variable
  - pixel_colors: multiple distinct colors present
  - structure: can contain scattered 'noise' pixels, a potential 'frame' of white (0) pixels, and a dominant 'interior' color.
output_characteristics:
  - grid_dimensions: same as input
  - pixel_colors: either one color (overall dominant) or two colors (white frame + dominant non-white).
  - structure: either a uniformly colored grid or a grid with preserved white pixels and the rest filled with the dominant non-white color.
transformation_logic:
  - condition_check:
      - Does the input grid contain white (0) pixels?
      - Do any white pixels touch the perimeter (outer edges) of the grid?
      - Does the input grid contain any non-white pixels?
  - branch_1 (if all conditions above are true - "white frame" case):
      - Identify all non-white pixels in the input grid.
      - Determine the most frequent color among these non-white pixels ('dominant interior color').
      - Create an output grid where:
          - All pixels that were white (0) in the input remain white (0).
          - All pixels that were non-white in the input are changed to the 'dominant interior color'.
  - branch_2 (if any condition above is false - "no frame" case):
      - Identify all pixels in the input grid.
      - Determine the most frequent color among all pixels ('dominant overall color').
      - Create an output grid filled entirely with the 'dominant overall color'.
color_mapping_logic:
  - example 1: No white(0). Dominant overall = green(3). Output = all green(3).
  - example 2: No white(0). Dominant overall = magenta(6). Output = all magenta(6).
  - example 3: White(0) present, touches perimeter, non-white(2, 5) present. Preserve white(0). Dominant non-white = red(2). Output = white(0) preserved, rest become red(2).
objects:
  - pixels: basic units with color property.
  - grid: container for pixels.
  - white_pixels (color 0): special object type for conditional logic.
  - non_white_pixels: all pixels not of color 0.
  - perimeter: the set of pixels on the first/last row/column.
actions:
  - count_colors: determine frequency of each color value.
  - find_most_frequent: identify the color with the highest count (either overall or within a subset).
  - check_perimeter_contact: verify if any pixel of a specific color exists on the grid's outer edge.
  - preserve_pixels: copy pixels of a specific color (white) from input to output.
  - replace_pixels: change pixels (either all or a subset) to a target color.