task_type: conditional_homogenization
input_characteristics:
  - grid_dimensions: variable
  - pixel_colors: multiple distinct colors
  - structure: Can contain a mix of colors, potentially including white (0).
output_characteristics:
  - grid_dimensions: same as input
  - pixel_colors: Either one single color, or two colors (white and one other).
  - structure: Either a uniform grid of a single color, or a grid where original white pixels are preserved and all other positions are filled with a single color.
transformation_logic:
  - condition_check:
      - check_1: Does the input grid contain any white (0) pixels?
      - check_2: Do any of the white (0) pixels touch the perimeter (outermost rows/columns) of the grid?
      - check_3: Does the input grid contain any non-white pixels?
  - branch_1 (if all checks are TRUE):
      - identify_objects:
          - white_pixels: All pixels with color 0.
          - non_white_pixels: All pixels with colors other than 0.
      - properties:
          - dominant_non_white_color: The most frequent color among the non_white_pixels.
      - actions:
          - create output grid of the same size as input.
          - preserve: Copy the white_pixels to the output grid in their original positions.
          - replace: Fill all positions corresponding to non_white_pixels in the input with the dominant_non_white_color.
  - branch_2 (if any check is FALSE):
      - identify_objects:
          - all_pixels: All pixels in the input grid.
      - properties:
          - dominant_overall_color: The most frequent color among all_pixels.
      - actions:
          - create output grid of the same size as input.
          - replace: Fill the entire output grid with the dominant_overall_color.
examples_analysis:
  - example_1: No white pixels. Fails check_1. Branch_2 applies. Dominant overall is green(3). Output is all green(3). Correct.
  - example_2: No white pixels. Fails check_1. Branch_2 applies. Dominant overall is magenta(6). Output is all magenta(6). Correct.
  - example_3: Has white pixels (check_1=True). White touches perimeter (check_2=True). Has non-white pixels (check_3=True). Branch_1 applies. Dominant non-white is red(2). Output preserves original white(0) pixels, replaces all others (red(2) and gray(5)) with red(2). Correct.
