{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid based on color frequency and the potential presence of a white (0) frame.\n\nIf a 'white frame' is identified (meaning white pixels exist, at least one white pixel touches the grid perimeter, and at least one non-white pixel exists), the transformation preserves the white pixels in their original positions and fills all other (non-white) positions with the most frequent color found among those non-white pixels.\n\nIf no such white frame is identified, the transformation fills the entire output grid with the single most frequent color found in the overall input grid.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef check_perimeter_touch(grid_array, color_value):\n    \"\"\"Checks if any pixel of color_value touches the perimeter.\"\"\"\n    height, width = grid_array.shape\n    if height == 0 or width == 0:\n        return False\n    \n    # Check top and bottom rows\n    if height > 0:\n        if np.any(grid_array[0, :] == color_value): return True\n        if np.any(grid_array[-1, :] == color_value): return True\n        \n    # Check left and right columns (excluding corners already checked)\n    if width > 0:\n        if np.any(grid_array[:, 0] == color_value): return True\n        if np.any(grid_array[:, -1] == color_value): return True\n        \n    return False\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the conditional homogenization transformation.\n\n    Args:\n        input_grid (list of lists): A 2D list representing the input grid.\n\n    Returns:\n        list of lists: A 2D list representing the transformed output grid.\n    \"\"\"\n    input_array = np.array(input_grid, dtype=int)\n    height, width = input_array.shape\n\n    # Handle empty grid case\n    if height == 0 or width == 0:\n        return []\n\n    # --- Analysis Step ---\n    \n    # 1. Count all pixel colors\n    all_pixels = input_array.flatten()\n    if all_pixels.size == 0: # Should not happen due to height/width check, but safety first\n        return []\n    color_counts = Counter(all_pixels)\n    \n    # 2. Identify overall dominant color\n    dominant_overall_color = color_counts.most_common(1)[0][0]\n\n    # 3. Check for white frame conditions\n    has_white_pixels = 0 in color_counts\n    white_touches_perimeter = False\n    has_non_white_pixels = any(color != 0 for color in color_counts)\n    \n    if has_white_pixels:\n        white_touches_perimeter = check_perimeter_touch(input_array, 0)\n\n    # 4. Determine if a white frame exists\n    white_frame_exists = has_white_pixels and white_touches_perimeter and has_non_white_pixels\n\n    # --- Transformation Step ---\n    \n    output_array = np.zeros_like(input_array) # Initialize output array\n\n    if white_frame_exists:\n        # 5a. Identify interior (non-white) pixels\n        white_mask = (input_array == 0)\n        interior_pixels = input_array[~white_mask]\n        \n        # 5b. Find dominant interior color\n        if interior_pixels.size > 0:\n            interior_counts = Counter(interior_pixels)\n            dominant_interior_color = interior_counts.most_common(1)[0][0]\n        else:\n            # This case should technically not be reached if has_non_white_pixels is true\n            # but as a fallback, use the overall dominant color if interior is empty.\n             dominant_interior_color = dominant_overall_color \n             # Or handle as an error/edge case? For now, fill with something.\n             # If the grid was ONLY white, white_frame_exists would be False.\n             # So this implies white frame exists but *only* non-white noise was present?\n             # Let's default to preserving white and filling rest with overall dominant.\n             # This logic might need refinement based on more edge case examples.\n\n\n        # 5c/d. Create output grid: preserve white, fill interior\n        output_array = np.full_like(input_array, dominant_interior_color) # Fill with interior color first\n        output_array[white_mask] = 0 # Put back the white pixels\n\n\n    else:\n        # 6a. Create output grid filled with overall dominant color\n        output_array = np.full_like(input_array, dominant_overall_color)\n\n    # Convert back to list of lists for the expected output format\n    output_grid = output_array.tolist()\n    \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 9747,
    "candidates_token_count": 1110,
    "total_token_count": 10857,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.423785,
  "retries": 1
}