{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies small connected components of white pixels (color 0) that do not \ntouch the grid border and fills them with the surrounding non-white color. \nA component is considered 'small' if it contains 1 or 2 pixels.\nThe surrounding non-white color is assumed to be the single dominant \nnon-white color present in the input grid's shape.\nConnectivity is determined by 4-way adjacency (up, down, left, right).\n\"\"\"\n\nimport collections\nimport numpy as np\n\ndef find_fill_color(grid):\n    \"\"\"\n    Finds the first non-background (non-zero) color in the grid.\n    Assumes there is one dominant non-white color forming the shape.\n    \n    Args:\n        grid (np.array): The input grid.\n    \n    Returns:\n        int: The first non-zero color value found, or 0 if the grid is all zeros.\n    \"\"\"\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] != 0:\n                return grid[r, c]\n    # Return background color if no non-zero color is found\n    return 0 \n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by filling small (size <= 2), non-border-touching\n    white components with the dominant non-white color.\n\n    Args:\n        input_grid (list[list[int]]): The input grid represented as a list of lists.\n\n    Returns:\n        list[list[int]]: The transformed grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    grid = np.array(input_grid, dtype=int)\n    height, width = grid.shape\n    # Create a copy to modify, preserving the original input grid state for checks\n    output_grid = grid.copy()\n    # Keep track of visited pixels during component search\n    visited = np.zeros_like(grid, dtype=bool)\n    \n    # Determine the color to use for filling the holes\n    fill_color = find_fill_color(grid)\n    \n    # If the grid is entirely background or no fill color found, return the original\n    if fill_color == 0: \n        return output_grid.tolist() \n\n    # Queue for Breadth-First Search (BFS)\n    q = collections.deque()\n\n    # Iterate through each pixel to find starting points for white components\n    for r in range(height):\n        for c in range(width):\n            # Start a new component search if we find an unvisited white pixel\n            if grid[r, c] == 0 and not visited[r, c]:\n                # Initialize properties for the current component\n                component_pixels = []\n                touches_border = False\n                is_valid_component = True # Assume valid until found otherwise\n                \n                # Start BFS from this pixel\n                q.append((r, c))\n                visited[r, c] = True\n                \n                # Process the queue until the component is fully explored\n                while q:\n                    curr_r, curr_c = q.popleft()\n                    component_pixels.append((curr_r, curr_c))\n                    \n                    # Check if this pixel is on the border\n                    if curr_r == 0 or curr_r == height - 1 or curr_c == 0 or curr_c == width - 1:\n                        touches_border = True\n                        \n                    # Explore neighbors (4-connectivity: up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = curr_r + dr, curr_c + dc\n                        \n                        # Check if neighbor is within grid boundaries\n                        if 0 <= nr < height and 0 <= nc < width:\n                            # Check if neighbor is part of the same white component\n                            if grid[nr, nc] == 0 and not visited[nr, nc]:\n                                visited[nr, nc] = True\n                                q.append((nr, nc))\n\n                # Component search finished, check conditions for filling\n                component_size = len(component_pixels)\n                \n                # Fill the component in the output grid if it's small and not touching the border\n                if not touches_border and component_size <= 2:\n                    for pr, pc in component_pixels:\n                        output_grid[pr, pc] = fill_color\n\n    # Convert the result back to a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2187,
    "candidates_token_count": 1050,
    "total_token_count": 3237,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 145.449269,
  "retries": 2
}