{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid by finding the dominant non-white color (C) and \nfilling any white pixel (0) that has 3 or 4 neighbors of color C with that color C.\nNeighbors are checked using 4-way adjacency (up, down, left, right).\n\"\"\"\n\nimport numpy as np\n\ndef find_dominant_color(grid):\n    \"\"\"\n    Finds the first non-background (non-zero) color in the grid.\n    Assumes there is one dominant non-white color forming the shape.\n    \n    Args:\n        grid (np.array): The input grid.\n    \n    Returns:\n        int: The first non-zero color value found, or None if the grid is all zeros.\n    \"\"\"\n    unique_colors = np.unique(grid)\n    for color in unique_colors:\n        if color != 0:\n            return color\n    return None # Return None if only background color (0) is found\n\ndef count_neighbors(grid, r, c, color):\n    \"\"\"\n    Counts the number of 4-directionally adjacent neighbors of a pixel (r, c) \n    that have the specified color. Handles boundary conditions.\n\n    Args:\n        grid (np.array): The grid.\n        r (int): Row index of the pixel.\n        c (int): Column index of the pixel.\n        color (int): The color to count neighbors for.\n\n    Returns:\n        int: The number of neighbors with the specified color.\n    \"\"\"\n    height, width = grid.shape\n    count = 0\n    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n        nr, nc = r + dr, c + dc\n        # Check if neighbor is within grid boundaries\n        if 0 <= nr < height and 0 <= nc < width:\n            # Check if neighbor has the target color\n            if grid[nr, nc] == color:\n                count += 1\n    return count\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid (list[list[int]]): The input grid represented as a list of lists.\n\n    Returns:\n        list[list[int]]: The transformed grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    grid = np.array(input_grid, dtype=int)\n    height, width = grid.shape\n    \n    # Create a copy to modify\n    output_grid = grid.copy()\n\n    # Find the dominant non-white color\n    dominant_color = find_dominant_color(grid)\n\n    # If no dominant color found (e.g., all white grid), return the original grid\n    if dominant_color is None:\n        return output_grid.tolist()\n\n    # Iterate through each pixel of the original grid\n    for r in range(height):\n        for c in range(width):\n            # Check if the current pixel is white (0)\n            if grid[r, c] == 0:\n                # Count how many neighbors have the dominant color\n                neighbor_count = count_neighbors(grid, r, c, dominant_color)\n                \n                # If the count is 3 or more, fill the pixel in the output grid\n                if neighbor_count >= 3:\n                    output_grid[r, c] = dominant_color\n\n    # Convert the result back to a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 10581,
    "candidates_token_count": 801,
    "total_token_count": 11382,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.742168,
  "retries": 1
}