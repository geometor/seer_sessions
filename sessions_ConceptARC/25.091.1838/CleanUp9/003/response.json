{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nIdentifies the most frequent non-background color (frame_color) in the input grid.\nDetermines an initial bounding box encompassing all pixels of the frame_color.\nRefines this bounding box by iteratively removing sides (top, bottom, left, right) \nif that side contains only a single pixel of the frame_color within the current box's extent.\nCreates an output grid of the same dimensions as the input, filled with the background color (0).\nDraws a hollow rectangle on the output grid using the frame_color along the perimeter defined \nby the final, refined bounding box.\n\"\"\"\n\n# Imports handled by the execution environment (numpy, collections.Counter assumed available)\n\ndef find_most_frequent_non_background_color(grid):\n    \"\"\"Finds the most frequent color in the grid, excluding the background color 0.\"\"\"\n    counts = Counter()\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            pixel = grid[r, c]\n            if pixel != 0:  # Exclude background color (0)\n                counts[pixel] += 1\n    \n    if not counts:\n        return None # No non-background colors found\n        \n    # Find the color with the maximum count.\n    most_common_color = counts.most_common(1)[0][0]\n    return most_common_color\n\ndef find_initial_bounding_box(grid, color):\n    \"\"\"Finds the initial bounding box (min_row, max_row, min_col, max_col) for a given color.\"\"\"\n    rows, cols = np.where(grid == color)\n    if rows.size == 0:\n        return None # Color not found\n    min_row = np.min(rows)\n    max_row = np.max(rows)\n    min_col = np.min(cols)\n    max_col = np.max(cols)\n    return min_row, max_row, min_col, max_col\n\ndef refine_bounding_box(grid, color, initial_bbox):\n    \"\"\"Refines the bounding box by removing sides with only one pixel of the target color.\"\"\"\n    if initial_bbox is None:\n        return None\n\n    min_r, max_r, min_c, max_c = initial_bbox\n\n    while True:\n        changed = False\n        \n        # Check Top Row: if only one 'color' pixel exists in this row within the current box cols\n        if min_r <= max_r:\n             top_row_segment = grid[min_r, min_c:max_c+1]\n             if np.count_nonzero(top_row_segment == color) == 1:\n                 min_r += 1\n                 changed = True\n                 # Ensure box remains valid after shrinking\n                 if min_r > max_r: break \n\n        # Check Bottom Row: if only one 'color' pixel exists in this row within the current box cols\n        if min_r <= max_r:\n             bottom_row_segment = grid[max_r, min_c:max_c+1]\n             if np.count_nonzero(bottom_row_segment == color) == 1:\n                 max_r -= 1\n                 changed = True\n                 # Ensure box remains valid after shrinking\n                 if min_r > max_r: break\n\n        # Check Left Column: if only one 'color' pixel exists in this col within the current box rows\n        if min_c <= max_c:\n            left_col_segment = grid[min_r:max_r+1, min_c]\n            if np.count_nonzero(left_col_segment == color) == 1:\n                min_c += 1\n                changed = True\n                # Ensure box remains valid after shrinking\n                if min_c > max_c: break\n\n        # Check Right Column: if only one 'color' pixel exists in this col within the current box rows\n        if min_c <= max_c:\n            right_col_segment = grid[min_r:max_r+1, max_c]\n            if np.count_nonzero(right_col_segment == color) == 1:\n                max_c -= 1\n                changed = True\n                # Ensure box remains valid after shrinking\n                if min_c > max_c: break\n\n        if not changed:\n            break\n            \n    # Check if the box became invalid (e.g., min > max)\n    if min_r > max_r or min_c > max_c:\n        return None # Indicate an empty or invalid final box\n\n    return min_r, max_r, min_c, max_c\n\n\ndef transform(input_grid):\n    # Convert input list of lists to numpy array for easier processing\n    input_array = np.array(input_grid, dtype=int)\n    height, width = input_array.shape\n    background_color = 0\n\n    # Initialize output grid with background color\n    output_array = np.full((height, width), background_color, dtype=int)\n\n    # Step 1: Find the most frequent non-background color\n    frame_color = find_most_frequent_non_background_color(input_array)\n\n    # If no frame color is found (e.g., grid is all background), return the background grid\n    if frame_color is None:\n        return output_array.tolist()\n\n    # Step 2: Find the initial bounding box of the frame color\n    initial_bbox = find_initial_bounding_box(input_array, frame_color)\n\n    # Step 3: Refine the bounding box iteratively\n    final_bbox = refine_bounding_box(input_array, frame_color, initial_bbox)\n\n    # If no valid bounding box could be determined (initial or final), return the background grid\n    if final_bbox is None:\n         return output_array.tolist()\n\n    min_row, max_row, min_col, max_col = final_bbox\n\n    # Step 4: Draw the hollow rectangle on the output grid using the final bounding box\n    # Ensure indices are within valid range before drawing\n    if 0 <= min_row < height and 0 <= max_row < height and 0 <= min_col < width and 0 <= max_col < width:\n        # Draw top border\n        output_array[min_row, min_col:max_col+1] = frame_color\n        # Draw bottom border\n        output_array[max_row, min_col:max_col+1] = frame_color\n        # Draw left border\n        output_array[min_row:max_row+1, min_col] = frame_color\n        # Draw right border\n        output_array[min_row:max_row+1, max_col] = frame_color\n\n    # Convert the final numpy array back to a list of lists\n    return output_array.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5131,
    "candidates_token_count": 1600,
    "total_token_count": 6731,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 32.967042,
  "retries": 1
}