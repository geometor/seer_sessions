{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nIdentify the most frequent non-background color (frame_color) in the input grid.\nDetermine the bounding box (min/max row and column) encompassing all pixels of the frame_color.\nCreate an output grid of the same dimensions as the input, filled with the background color (0).\nDraw a hollow rectangle on the output grid using the frame_color along the perimeter defined by the bounding box.\n\"\"\"\n\ndef find_most_frequent_non_background_color(grid):\n    \"\"\"Finds the most frequent color in the grid, excluding the background color 0.\"\"\"\n    counts = Counter()\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            pixel = grid[r, c]\n            if pixel != 0:  # Exclude background color\n                counts[pixel] += 1\n    \n    if not counts:\n        return None # No non-background colors found\n        \n    # Find the color with the maximum count. If there's a tie, Counter.most_common returns one arbitrarily.\n    most_common_color = counts.most_common(1)[0][0]\n    return most_common_color\n\ndef find_bounding_box(grid, color):\n    \"\"\"Finds the bounding box (min_row, max_row, min_col, max_col) for a given color.\"\"\"\n    rows, cols = np.where(grid == color)\n    if rows.size == 0:\n        return None # Color not found\n    min_row = np.min(rows)\n    max_row = np.max(rows)\n    min_col = np.min(cols)\n    max_col = np.max(cols)\n    return min_row, max_row, min_col, max_col\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by finding the most frequent non-background color,\n    determining its bounding box, and drawing a hollow rectangle of that color\n    on a background grid.\n    \"\"\"\n    input_array = np.array(input_grid, dtype=int)\n    height, width = input_array.shape\n    background_color = 0\n\n    # Initialize output grid with background color\n    output_array = np.full((height, width), background_color, dtype=int)\n\n    # 1. Identify the frame_color (most frequent non-background color)\n    frame_color = find_most_frequent_non_background_color(input_array)\n\n    # If no frame color is found, return the background grid\n    if frame_color is None:\n        return output_array.tolist()\n\n    # 2. Determine the bounding box for the frame_color\n    bounding_box = find_bounding_box(input_array, frame_color)\n\n    # If the frame color somehow wasn't found (shouldn't happen if frame_color is not None), return background\n    if bounding_box is None:\n         return output_array.tolist()\n\n    min_row, max_row, min_col, max_col = bounding_box\n\n    # 3. Draw the hollow rectangle on the output grid\n    # Draw top and bottom borders\n    output_array[min_row, min_col:max_col+1] = frame_color\n    output_array[max_row, min_col:max_col+1] = frame_color\n    \n    # Draw left and right borders\n    output_array[min_row:max_row+1, min_col] = frame_color\n    output_array[min_row:max_row+1, max_col] = frame_color\n\n    # Convert back to list of lists for the expected output format\n    return output_array.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2539,
    "candidates_token_count": 868,
    "total_token_count": 3407,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.839131,
  "retries": 1
}