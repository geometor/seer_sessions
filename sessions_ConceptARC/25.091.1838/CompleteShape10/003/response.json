{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nFill horizontal gaps within the row-wise extent of the main non-background object.\n\n1. Identify the background color (assumed white/0).\n2. Find the largest contiguous non-background object and its color (fill_color).\n3. Iterate through each row of the grid.\n4. For each row containing the object, find the minimum (min_col) and maximum (max_col) column index of the object's pixels.\n5. Fill any background-colored pixels within that row between min_col and max_col (inclusive) with the fill_color.\n\"\"\"\n\ndef _find_objects(grid, background_color):\n    \"\"\"\n    Finds all contiguous objects of non-background colors using BFS.\n\n    Args:\n        grid (np.array): The input grid.\n        background_color (int): The color designated as background.\n\n    Returns:\n        list: A list of dictionaries, where each dictionary represents an object\n              with keys 'color', 'pixels' (set of (r, c) tuples), and 'size'.\n              Returns an empty list if no non-background objects are found.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n\n    for r in range(rows):\n        for c in range(cols):\n            # If it's a non-background pixel and not visited yet, start BFS\n            if grid[r, c] != background_color and not visited[r, c]:\n                obj_color = grid[r, c]\n                current_object_pixels = set()\n                q = deque([(r, c)])\n                visited[r, c] = True\n                \n                while q:\n                    row, col = q.popleft()\n                    current_object_pixels.add((row, col))\n                    \n                    # Check 4 neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        # Check bounds, color match, and visited status\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           not visited[nr, nc] and grid[nr, nc] == obj_color:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n                            \n                # Add the found object to the list\n                if current_object_pixels:\n                    objects.append({\n                        'color': obj_color,\n                        'pixels': current_object_pixels,\n                        'size': len(current_object_pixels)\n                    })\n                    \n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n    \"\"\"\n    # Convert input list of lists to numpy array for efficient processing\n    input_np = np.array(input_grid, dtype=int)\n    rows, cols = input_np.shape\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_np)\n\n    # 1. Identify background color (assuming 0 based on examples)\n    background_color = 0\n    # Potential improvement: Calculate most frequent color if background isn't always 0\n    # colors, counts = np.unique(input_np, return_counts=True)\n    # background_color = colors[np.argmax(counts)]\n\n    # 2. Find all non-background objects\n    objects = _find_objects(input_np, background_color)\n\n    # If no non-background objects, return the original grid\n    if not objects:\n        return output_grid.tolist() \n\n    # Find the largest object\n    largest_object = max(objects, key=lambda obj: obj['size'])\n    fill_color = largest_object['color']\n    # Get just the coordinates for efficient lookup later if needed, but not strictly necessary for this approach\n    # object_pixels_coords = largest_object['pixels'] \n\n    # 3. Iterate through each row\n    for r in range(rows):\n        # 4. Find column indices of the object's pixels in the current row\n        row_pixels_indices = np.where(input_np[r, :] == fill_color)[0]\n\n        # 5. If the object exists in this row\n        if len(row_pixels_indices) > 0:\n            # Find the horizontal extent (min and max columns)\n            min_col = np.min(row_pixels_indices)\n            max_col = np.max(row_pixels_indices)\n\n            # 6. Fill background pixels within the horizontal extent\n            for c in range(min_col, max_col + 1):\n                if output_grid[r, c] == background_color:\n                    output_grid[r, c] = fill_color\n\n    # Convert the result back to list of lists format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 15699,
    "candidates_token_count": 1157,
    "total_token_count": 16856,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.120785,
  "retries": 1
}