{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque, Counter\n\n\"\"\"\nKeep only the target-colored pixels that are located inside the region defined \nby the boundary-colored shape. Replace everything else, including the boundary \nshape itself, with the background color (0).\n\nThe 'inside' region is determined by performing a flood fill starting from the \nbackground pixels (0) on the grid's border. Pixels reachable by this flood fill \nwithout crossing the boundary color are considered 'outside'. Target-colored \npixels not marked as 'outside' are considered 'inside' and are kept in the \noutput grid. The boundary color is identified as the non-background color with \nthe highest pixel count in the input grid. All other non-background colors are \nconsidered target colors.\n\"\"\"\n\ndef find_colors(input_grid_np):\n    \"\"\"Identifies background, boundary, and target colors.\"\"\"\n    unique_colors, counts = np.unique(input_grid_np, return_counts=True)\n    color_counts = dict(zip(unique_colors, counts))\n    \n    background_color = 0\n    non_background_colors = {c: count for c, count in color_counts.items() if c != background_color}\n    \n    boundary_color = None\n    target_colors = set()\n    \n    if not non_background_colors:\n        # Only background color present\n        return background_color, boundary_color, target_colors\n        \n    # Heuristic: Boundary color is the non-background color with the most pixels\n    boundary_color = max(non_background_colors, key=non_background_colors.get)\n    \n    # All other non-background colors are targets\n    target_colors = set(non_background_colors.keys()) - {boundary_color}\n    \n    return background_color, boundary_color, target_colors\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on the containment rule.\n\n    Args:\n        input_grid (list of lists): The input grid represented as a 2D list.\n\n    Returns:\n        list of lists: The transformed output grid.\n    \"\"\"\n    input_grid_np = np.array(input_grid, dtype=int)\n    height, width = input_grid_np.shape\n    \n    # Initialize output grid with background color\n    background_color = 0\n    output_grid_np = np.full_like(input_grid_np, background_color)\n    \n    # Identify the boundary and target colors\n    _, boundary_color, target_colors = find_colors(input_grid_np)\n\n    # If there's no boundary or no targets, return the background grid\n    if boundary_color is None or not target_colors:\n         return output_grid_np.tolist()\n\n    # Determine the 'outside' region using flood fill from borders\n    visited = np.zeros_like(input_grid_np, dtype=bool)\n    q = deque()\n\n    # Add border pixels that are NOT the boundary color to the queue\n    for r in range(height):\n        for c in [0, width - 1]:\n            if input_grid_np[r, c] != boundary_color and not visited[r, c]:\n                visited[r, c] = True\n                q.append((r, c))\n    for c in range(1, width - 1): # Avoid double-adding corners\n        for r in [0, height - 1]:\n             if input_grid_np[r, c] != boundary_color and not visited[r, c]:\n                visited[r, c] = True\n                q.append((r, c))\n\n    # Perform flood fill (Breadth-First Search)\n    while q:\n        r, c = q.popleft()\n        \n        # Check neighbors (up, down, left, right)\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n            \n            # Check bounds\n            if 0 <= nr < height and 0 <= nc < width:\n                # If neighbor is not boundary color and not visited\n                if input_grid_np[nr, nc] != boundary_color and not visited[nr, nc]:\n                    visited[nr, nc] = True\n                    q.append((nr, nc))\n\n    # Populate the output grid\n    # Iterate through each pixel of the input grid\n    for r in range(height):\n        for c in range(width):\n            pixel_color = input_grid_np[r, c]\n            # If the pixel has a target color AND it was NOT visited by the flood fill (i.e., it's 'inside')\n            if pixel_color in target_colors and not visited[r, c]:\n                # Keep this pixel in the output grid\n                output_grid_np[r, c] = pixel_color\n                \n    # Convert back to list of lists and return\n    return output_grid_np.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3541,
    "candidates_token_count": 1161,
    "total_token_count": 4702,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 21.804224,
  "retries": 1
}