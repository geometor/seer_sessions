{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\ndef find_single_object_bbox(grid):\n    \"\"\"\n    Finds the bounding box and color of the single non-background object in the grid.\n\n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        tuple: (top_row, bottom_row, left_col, right_col, color) or None if no object found.\n    \"\"\"\n    non_background_pixels = np.where(grid > 0)\n    if not non_background_pixels[0].size:\n        return None  # No object found\n\n    rows, cols = non_background_pixels\n    top_row = np.min(rows)\n    bottom_row = np.max(rows)\n    left_col = np.min(cols)\n    right_col = np.max(cols)\n    \n    # Assume all object pixels have the same color, get it from the first found pixel\n    color = grid[rows[0], cols[0]]\n    \n    return top_row, bottom_row, left_col, right_col, color\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by adding a line extending from the central point \n    of a single rectangular object to a grid edge.\n    \n    The line is horizontal (extending right) if the object's width is >= height.\n    The line is vertical (extending down) if the object's height > width.\n    The line uses the same color as the object.\n    \"\"\"\n    # Convert input list of lists to a numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    output_grid = np.copy(input_np)\n    grid_height, grid_width = output_grid.shape\n\n    # Find the single non-white rectangular object and its properties\n    bbox = find_single_object_bbox(input_np)\n    \n    if bbox is None:\n        # No object found, return the original grid\n        return input_grid \n        \n    top_row, bottom_row, left_col, right_col, object_color = bbox\n    \n    # Calculate object dimensions\n    height = bottom_row - top_row + 1\n    width = right_col - left_col + 1\n\n    # Compare width and height to determine line direction\n    if width >= height:\n        # Draw a horizontal line to the right edge\n        # Calculate the middle row of the object\n        target_row = top_row + height // 2\n        \n        # Iterate from the column just right of the object to the grid edge\n        for col in range(right_col + 1, grid_width):\n            # Check if target_row is within grid bounds (should always be if object is found)\n            if 0 <= target_row < grid_height:\n                 output_grid[target_row, col] = object_color\n                 \n    else: # height > width\n        # Draw a vertical line to the bottom edge\n        # Calculate the middle column of the object\n        target_col = left_col + width // 2\n        \n        # Iterate from the row just below the object to the grid edge\n        for row in range(bottom_row + 1, grid_height):\n             # Check if target_col is within grid bounds (should always be if object is found)\n            if 0 <= target_col < grid_width:\n                output_grid[row, target_col] = object_color\n\n    # Convert the numpy array back to a list of lists for the final output\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3093,
    "candidates_token_count": 827,
    "total_token_count": 3920,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.626952,
  "retries": 1
}