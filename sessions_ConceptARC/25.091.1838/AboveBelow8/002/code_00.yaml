task_context:
  grid_dimensions: Consistent between input and output.
  background_color_input: Variable (often includes white-0).
  background_color_output: Consistently white (0).
objects:
  - type: pixel
    properties:
      - color: Specific value from 0-9 (white, blue, red, green, yellow, gray, magenta, orange, azure, maroon).
      - is_target: Azure (8) pixels are the primary focus.
      - is_filter_condition: Green (3) pixels determine filtering logic within a row.
      - is_background: White (0) pixels act as background/empty space.
  - type: row
    properties:
      - content: Contains a mix of pixels, often one dominant color alongside azure (8) and white (0).
      - dominant_color_excluding_special: The most frequent color in the row, ignoring white (0) and azure (8). This property is crucial for the transformation rule.
relationships:
  - type: positional_invariance
    description: Kept azure (8) pixels maintain their exact (row, column) coordinates from the input to the output grid.
  - type: row_based_condition
    description: The decision to keep or discard an azure (8) pixel depends on the properties of the row it resides in.
actions:
  - type: determine_row_property
    input: Each row of the input grid.
    output: The dominant color excluding white (0) and azure (8) for that row.
    computation: Count pixel frequencies per row, ignoring 0 and 8, find the maximum.
  - type: filter_and_replace
    input: Input grid.
    output: Output grid.
    rule: |
      1. Initialize output grid with white (0).
      2. For each row `r`: Determine its dominant color `d` (ignoring 0 and 8).
      3. For each pixel at `(r, c)` in the input:
         - If the pixel is azure (8) AND the dominant color `d` of row `r` is NOT green (3):
           Copy azure (8) to the output grid at `(r, c)`.
         - Otherwise:
           The corresponding output pixel remains white (0).
