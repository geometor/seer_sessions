{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nCreate an output grid of the same dimensions as the input grid, initialized with white (0). For each row in the input grid, determine the most frequent color, excluding white (0) and azure (8). If this dominant row color is green (3), then any azure (8) pixels in that row are ignored. Otherwise (if the dominant color is not green, or if there is no dominant color other than white/azure), azure (8) pixels from the input row are copied to the corresponding positions in the output grid. All other positions in the output grid remain white (0).\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef get_dominant_color_in_row(row):\n    \"\"\"\n    Finds the most common color in a row, excluding white (0) and azure (8).\n\n    Args:\n        row (np.array): A 1D numpy array representing a row of the grid.\n\n    Returns:\n        int or None: The dominant color value (an integer) if found, otherwise None.\n    \"\"\"\n    # Filter out white (0) and azure (8) pixels\n    filtered_pixels = [pixel for pixel in row if pixel != 0 and pixel != 8]\n\n    # If no other colors are present, return None\n    if not filtered_pixels:\n        return None\n\n    # Count frequencies of the remaining colors\n    counts = Counter(filtered_pixels)\n\n    # Find the most common color\n    # counts.most_common(1) returns a list like [ (color, count) ]\n    dominant_color, _ = counts.most_common(1)[0]\n\n    # Ensure the returned type is a standard Python int\n    if isinstance(dominant_color, np.integer):\n        dominant_color = int(dominant_color)\n        \n    return dominant_color\n\ndef transform(input_grid):\n    \"\"\"\n    Filters the input grid, keeping azure (8) pixels only if their row's dominant color\n    (excluding white and azure) is not green (3).\n\n    Args:\n        input_grid (np.array): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.array: A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    # Get the dimensions of the input grid\n    height, width = input_grid.shape\n\n    # Initialize an output grid of the same dimensions with white (0)\n    output_grid = np.zeros((height, width), dtype=int)\n\n    # Determine the dominant color for each row and identify rows where azure (8) should be discarded\n    rows_to_discard_azure = set()\n    for r in range(height):\n        dominant_color = get_dominant_color_in_row(input_grid[r])\n        # If the dominant color is green (3), mark this row for discarding azure pixels\n        if dominant_color == 3:\n            rows_to_discard_azure.add(r)\n\n    # Iterate through the input grid and populate the output grid\n    for r in range(height):\n        for c in range(width):\n            # Check if the current pixel is azure (8)\n            if input_grid[r, c] == 8:\n                # Check if the current row is NOT marked for discarding azure pixels\n                if r not in rows_to_discard_azure:\n                    # If not discarded, copy the azure pixel to the output grid\n                    output_grid[r, c] = 8\n            # Otherwise (pixel is not azure, or it's azure in a discarded row),\n            # the output grid pixel remains the default white (0)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 10436,
    "candidates_token_count": 819,
    "total_token_count": 11255,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.598449,
  "retries": 1
}