{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentify all distinct connected components (objects) of non-white pixels in the input grid.\nFor each object, check if any of its constituent pixels lie on the border (first/last row or first/last column) of the grid.\nIf an object touches any border, replace all pixels belonging to that object with the background color (white, 0) in the output grid.\nObjects that do not touch any border remain unchanged.\nThe output grid has the same dimensions as the input grid.\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef find_object(grid, start_row, start_col, visited):\n    \"\"\"\n    Finds a connected object of the same color starting from (start_row, start_col).\n    Uses Breadth-First Search (BFS).\n\n    Args:\n        grid (np.array): The input grid.\n        start_row (int): The starting row index.\n        start_col (int): The starting column index.\n        visited (np.array): A boolean grid indicating visited pixels.\n\n    Returns:\n        tuple: (list of pixel coordinates [(r, c), ...], boolean indicating if it touches border)\n               Returns (None, False) if the starting pixel is invalid or already visited.\n    \"\"\"\n    rows, cols = grid.shape\n    if not (0 <= start_row < rows and 0 <= start_col < cols) or visited[start_row, start_col]:\n        return None, False\n\n    color = grid[start_row, start_col]\n    if color == 0: # Background color is not an object\n         visited[start_row, start_col] = True # Mark as visited to avoid re-checking\n         return None, False\n\n    q = deque([(start_row, start_col)])\n    object_pixels = []\n    touches_border = False\n    visited[start_row, start_col] = True\n\n    while q:\n        r, c = q.popleft()\n        object_pixels.append((r, c))\n\n        # Check if this pixel touches the border\n        if r == 0 or r == rows - 1 or c == 0 or c == cols - 1:\n            touches_border = True\n\n        # Explore neighbors (up, down, left, right)\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n\n            # Check if neighbor is valid, has the same color, and hasn't been visited\n            if 0 <= nr < rows and 0 <= nc < cols and \\\n               not visited[nr, nc] and grid[nr, nc] == color:\n                visited[nr, nc] = True\n                q.append((nr, nc))\n\n    return object_pixels, touches_border\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by removing non-background objects that touch the border.\n\n    Args:\n        input_grid (np.array): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.array: A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    # Initialize output_grid as a copy of the input grid\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n    \n    # Keep track of visited pixels to avoid processing parts of the same object multiple times\n    visited = np.zeros_like(input_grid, dtype=bool)\n\n    # Iterate through each pixel of the input grid\n    for r in range(rows):\n        for c in range(cols):\n            # If the pixel is part of an object (non-background) and hasn't been visited yet\n            if input_grid[r, c] != 0 and not visited[r, c]:\n                # Find the complete object connected to this pixel\n                object_pixels, touches_border = find_object(input_grid, r, c, visited)\n                \n                # If the object was found and it touches the border\n                if object_pixels is not None and touches_border:\n                    # Erase the object from the output grid by setting its pixels to white (0)\n                    for pr, pc in object_pixels:\n                        output_grid[pr, pc] = 0\n            elif input_grid[r, c] == 0:\n                 # Make sure background pixels are marked visited so find_object doesn't start on them\n                 visited[r,c] = True \n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3255,
    "candidates_token_count": 1035,
    "total_token_count": 4290,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 17.71554,
  "retries": 1
}