{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\n1. Identify all distinct, connected groups of non-white pixels (objects) in the input grid.\n2. Calculate the area (pixel count) for each object.\n3. Determine the maximum area among all objects.\n4. Count how many objects share this maximum area.\n5. Apply the following rule:\n   - If exactly one object has the maximum area, keep only that object.\n   - If two or more objects share the maximum area, keep all objects *except* those that touch the top or bottom border of the grid.\n6. Construct the output grid with the same dimensions as the input, containing only the kept objects on a white background.\n\"\"\"\n\ndef find_objects(grid):\n    \"\"\"\n    Identifies all connected objects of non-background colors in the grid.\n\n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        list: A list of dictionaries, where each dictionary represents an object\n              and contains 'color', 'pixels' (set of (r, c) tuples), 'area',\n              'touches_top', and 'touches_bottom'.\n    \"\"\"\n    height, width = grid.shape\n    visited = set()\n    objects = []\n    \n    for r in range(height):\n        for c in range(width):\n            if grid[r, c] != 0 and (r, c) not in visited:\n                color = grid[r, c]\n                obj_pixels = set()\n                q = deque([(r, c)])\n                visited.add((r, c))\n                touches_top = False\n                touches_bottom = False\n\n                while q:\n                    row, col = q.popleft()\n                    obj_pixels.add((row, col))\n                    if row == 0:\n                        touches_top = True\n                    if row == height - 1:\n                        touches_bottom = True\n\n                    # Check neighbors (4-connectivity)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        if 0 <= nr < height and 0 <= nc < width and \\\n                           (nr, nc) not in visited and grid[nr, nc] == color:\n                            visited.add((nr, nc))\n                            q.append((nr, nc))\n                            \n                objects.append({\n                    'color': color,\n                    'pixels': obj_pixels,\n                    'area': len(obj_pixels),\n                    'touches_top': touches_top,\n                    'touches_bottom': touches_bottom\n                })\n                \n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Selectively removes objects based on area and border proximity.\n\n    Args:\n        input_grid (list[list[int]]): The input grid.\n\n    Returns:\n        list[list[int]]: The transformed output grid.\n    \"\"\"\n    # Convert input to numpy array for easier processing\n    grid_np = np.array(input_grid, dtype=int)\n    height, width = grid_np.shape\n    \n    # Initialize output grid with background color (0)\n    output_grid = np.zeros_like(grid_np)\n\n    # Find all objects in the input grid\n    objects = find_objects(grid_np)\n\n    # Handle cases with no objects\n    if not objects:\n        return output_grid.tolist()\n\n    # Calculate areas and find the maximum area\n    max_area = 0\n    for obj in objects:\n        if obj['area'] > max_area:\n            max_area = obj['area']\n\n    # Find all objects that have the maximum area\n    max_area_objects = [obj for obj in objects if obj['area'] == max_area]\n    count_max_area_objects = len(max_area_objects)\n\n    # Determine which objects to keep based on the rules\n    objects_to_keep = []\n    if count_max_area_objects == 1:\n        # Keep only the single object with the maximum area\n        objects_to_keep = max_area_objects\n    elif count_max_area_objects > 1:\n        # Keep all objects *except* those touching the top or bottom border\n        for obj in objects:\n            if not obj['touches_top'] and not obj['touches_bottom']:\n                objects_to_keep.append(obj)\n    # else: count_max_area_objects is 0 (shouldn't happen if objects exist), or < 1 which is impossible.\n    # No explicit action needed if count_max_area_objects == 0 or < 1 (already handled by initial check)\n    # If count_max_area_objects > 1 and *all* objects touch top/bottom, then objects_to_keep remains empty, resulting in an empty grid.\n\n    # Draw the kept objects onto the output grid\n    for obj in objects_to_keep:\n        color = obj['color']\n        for r, c in obj['pixels']:\n            output_grid[r, c] = color\n            \n    # Convert the final numpy array back to a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3901,
    "candidates_token_count": 1196,
    "total_token_count": 5097,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.687052,
  "retries": 1
}