{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import defaultdict\n\n\"\"\"\nHorizontally shift groups of connected non-zero numbers to the grid edges based on their initial horizontal position relative to the grid's center. \nGroups left of or at the center move to the left edge. \nGroups right of the center move to the right edge. \nThe internal structure and vertical position of each group are maintained.\n\"\"\"\n\ndef find_object_coords(grid, value):\n    \"\"\"Finds all coordinates (row, col) in the grid matching the given value.\"\"\"\n    coords = []\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == value:\n                coords.append((r, c))\n    return coords\n\ndef get_object_bounds(coords):\n    \"\"\"Calculates the minimum and maximum column indices for a set of coordinates.\"\"\"\n    if not coords:\n        return None, None\n    min_col = min(c for r, c in coords)\n    max_col = max(c for r, c in coords)\n    return min_col, max_col\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by shifting non-zero objects horizontally.\n\n    Objects left of or at the grid's center move left; objects right move right.\n    \"\"\"\n    input_grid_np = np.array(input_grid)\n    rows, cols = input_grid_np.shape\n    \n    # initialize output_grid with zeros\n    output_grid = np.zeros_like(input_grid_np)\n\n    # Find all unique non-zero values (potential object identifiers)\n    unique_values = np.unique(input_grid_np[input_grid_np != 0])\n\n    # Calculate the horizontal center column index of the grid\n    # Use floating point division for potentially odd widths\n    grid_center_col = (cols - 1) / 2.0 \n\n    # Process each unique non-zero value as a separate object\n    for value in unique_values:\n        # Find all coordinates for the current value\n        coords = find_object_coords(input_grid_np, value)\n        \n        if not coords: # Should not happen with unique_values logic, but safe check\n            continue\n\n        # Determine the horizontal bounds (min/max columns) of the object\n        min_col, max_col = get_object_bounds(coords)\n\n        # Calculate the horizontal center of the object\n        object_center_col = (min_col + max_col) / 2.0\n\n        # Determine shift direction and calculate the shift amount\n        shift = 0\n        if object_center_col <= grid_center_col:\n            # Move to the left edge\n            shift = 0 - min_col\n        else:\n            # Move to the right edge\n            shift = (cols - 1) - max_col\n            \n        # Apply the shift to each coordinate of the object and update the output grid\n        for r, c in coords:\n            new_c = c + shift\n            # Ensure the new column is within grid bounds (should be by calculation logic)\n            if 0 <= new_c < cols: \n                 output_grid[r, new_c] = value\n\n    # Convert back to list of lists if necessary, although numpy array is often preferred\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2375,
    "candidates_token_count": 775,
    "total_token_count": 3150,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.245174,
  "retries": 1
}