{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by identifying a single vertical line and one or more\nhorizontal lines. At each intersection point between the vertical line and a\nhorizontal line, the value at that point in the input grid is swapped:\nif the intersection point initially holds the value of the horizontal line,\nit's replaced with the value of the vertical line in the output grid, and\nvice-versa. All other grid points remain unchanged.\n\"\"\"\n\nimport numpy as np\nimport copy\n\ndef _find_vertical_line(grid):\n    \"\"\"Finds the column index and value of the single vertical line.\"\"\"\n    rows, cols = grid.shape\n    for j in range(cols):\n        column = grid[:, j]\n        non_zeros = column[column != 0]\n        unique_non_zeros = np.unique(non_zeros)\n        # A vertical line is defined by having exactly one unique non-zero value\n        if len(unique_non_zeros) == 1:\n            return j, unique_non_zeros[0]\n    return None, None # Should not happen based on problem description\n\ndef _find_horizontal_lines(grid):\n    \"\"\"Finds the row indices and values of all horizontal lines.\"\"\"\n    rows, cols = grid.shape\n    h_lines = []\n    for i in range(rows):\n        row = grid[i, :]\n        non_zeros = row[row != 0]\n        unique_non_zeros = np.unique(non_zeros)\n        # A horizontal line is defined by having exactly one unique non-zero value\n        if len(unique_non_zeros) == 1:\n            h_lines.append((i, unique_non_zeros[0]))\n    return h_lines\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the intersection swap transformation to the input grid.\n\n    Args:\n        input_grid (numpy.ndarray): A 2D numpy array representing the input grid.\n\n    Returns:\n        numpy.ndarray: A new 2D numpy array with the transformation applied.\n    \"\"\"\n    # Convert input list of lists to numpy array if necessary\n    input_grid_np = np.array(input_grid)\n\n    # Initialize output_grid as a deep copy of the input\n    output_grid = copy.deepcopy(input_grid_np)\n\n    # Find the vertical line properties (column index, value)\n    col_v, val_v = _find_vertical_line(input_grid_np)\n    if col_v is None:\n        # Handle case where no vertical line is found (though unlikely per problem)\n        return output_grid\n\n    # Find all horizontal lines properties (list of (row index, value))\n    horizontal_lines = _find_horizontal_lines(input_grid_np)\n\n    # Iterate through each identified horizontal line\n    for row_h, val_h in horizontal_lines:\n        # Determine the intersection point coordinates\n        intersection_row = row_h\n        intersection_col = col_v\n\n        # Get the value at the intersection point in the *input* grid\n        input_val = input_grid_np[intersection_row, intersection_col]\n\n        # Apply the swap logic based on the input value at the intersection\n        # Only swap if the intersection point actually contains one of the line values\n        if input_val == val_h:\n            # If input is horizontal value, output becomes vertical value\n            output_grid[intersection_row, intersection_col] = val_v\n        elif input_val == val_v:\n            # If input is vertical value, output becomes horizontal value\n            output_grid[intersection_row, intersection_col] = val_h\n        # If input_val is 0 or some other unexpected value, it remains unchanged\n        # due to the initial deep copy.\n\n    return output_grid.tolist() # Convert back to list of lists if needed\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1991,
    "candidates_token_count": 877,
    "total_token_count": 2868,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 18.063468,
  "retries": 1
}