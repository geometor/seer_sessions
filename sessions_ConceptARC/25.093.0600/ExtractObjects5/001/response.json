{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Tuple, Set\n\n\"\"\"\nIdentifies rectangular patterns (either hollow or solid) in the input grid.\nIf hollow rectangles (colored border, zero interior) are found:\n  - Extracts their color, dimensions (height h, width w), and position (top-left r, c).\n  - Sorts these identified hollow rectangles based on their color value (ascending).\n  - Constructs the output grid by creating solid rectangles of the same color and dimensions (h, w) as the found hollow ones.\n  - Arranges these solid rectangles horizontally in the order determined by the color sort.\nIf no hollow rectangles are found:\n  - Identifies maximal solid, monochromatic, non-zero rectangles.\n  - Extracts their color, dimensions (h, w), and position (top-left r, c).\n  - Sorts these identified solid rectangles based on their top-left position (column index `c` first, then row index `r`, ascending).\n  - Constructs the output grid by creating solid rectangles of the same color and dimensions (h, w).\n  - Arranges these solid rectangles horizontally in the order determined by the position sort.\nAssumes that all relevant rectangles (either all hollow or all solid) identified in a single input grid share the same height, which determines the height of the output grid.\n\"\"\"\n\n# --- Helper Functions for Rectangle Detection ---\n\ndef is_hollow_rectangle(grid: np.ndarray, r: int, c: int, h: int, w: int, color: int) -> bool:\n    \"\"\"\n    Checks if the subgrid defined by top-left corner (r, c), height h, and width w\n    forms a hollow rectangle with the specified border color.\n    Minimum dimensions (h, w) are 3x3. Interior must be 0. Border must be the specified color.\n    \"\"\"\n    rows, cols = grid.shape\n    # Basic dimension and bounds checks\n    if h < 3 or w < 3:\n        return False\n    if r < 0 or c < 0 or r + h > rows or c + w > cols:\n        return False\n    if color == 0: # Border color cannot be 0\n        return False\n\n    # Check corners first for quick rejection\n    if not (grid[r, c] == color and grid[r+h-1, c] == color and \\\n            grid[r, c+w-1] == color and grid[r+h-1, c+w-1] == color):\n        return False\n\n    # Check horizontal borders (excluding corners, already checked)\n    if not np.all(grid[r, c+1:c+w-1] == color): return False\n    if not np.all(grid[r+h-1, c+1:c+w-1] == color): return False\n    # Check vertical borders (excluding corners)\n    if not np.all(grid[r+1:r+h-1, c] == color): return False\n    if not np.all(grid[r+1:r+h-1, c+w-1] == color): return False\n\n    # Check interior is zero (if interior exists)\n    if h > 2 and w > 2:\n        if not np.all(grid[r+1:r+h-1, c+1:c+w-1] == 0): return False\n\n    return True\n\ndef find_hollow_rectangles(grid: np.ndarray) -> List[Tuple[int, int, int, int, int]]:\n    \"\"\"\n    Finds all unique hollow rectangles in the grid.\n    Returns a list of tuples: (color, height, width, row, col).\n    \"\"\"\n    rows, cols = grid.shape\n    rectangles = []\n    # Use a set to store found rectangle properties to ensure uniqueness\n    # Stores (color, h, w, r, c) to avoid duplicates if detected from different points\n    found_rects_set: Set[Tuple[int, int, int, int, int]] = set()\n\n    # Iterate through all possible top-left corners (r, c)\n    for r in range(rows):\n        for c in range(cols):\n            # Potential start of a border\n            if grid[r, c] != 0:\n                color = grid[r, c]\n                # Iterate through possible heights (>=3) starting from largest potential\n                for h in range(min(rows - r, rows), 2, -1):\n                     # Check if bottom-left corner matches color for height h\n                     if r + h - 1 < rows and grid[r + h - 1, c] == color:\n                        # Iterate through possible widths (>=3) starting from largest potential\n                        for w in range(min(cols - c, cols), 2, -1):\n                            # Check if top-right corner matches color for width w\n                            if c + w - 1 < cols and grid[r, c + w - 1] == color:\n                                # Now check the full structure\n                                if is_hollow_rectangle(grid, r, c, h, w, color):\n                                    rect_tuple = (color, h, w, r, c)\n                                    if rect_tuple not in found_rects_set:\n                                        rectangles.append(rect_tuple)\n                                        found_rects_set.add(rect_tuple)\n                                        # Found a potential rectangle, don't need smaller w/h from this corner?\n                                        # No, a corner could be part of multiple distinct rectangles.\n                                        # Example: nested hollow rectangles (though not in examples).\n                                        # Rely on the set"
          }
        ],
        "role": "model"
      },
      "finish_reason": 2,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1911,
    "candidates_token_count": 1282,
    "total_token_count": 3193,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 161.993572,
  "retries": 2
}