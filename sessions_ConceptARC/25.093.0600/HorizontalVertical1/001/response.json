{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentifies connected regions of background cells (color 0) that are fully enclosed by a single non-zero color and do not touch the grid boundary. \nThese enclosed regions are then filled with a specific color (3 or 7) based on the enclosing color and the set of all non-zero colors present in the input grid.\n\n1.  Determine the set of unique non-zero colors in the input grid.\n2.  Establish a mapping from each non-zero color to a fill color (3 or 7):\n    - If 2 unique non-zero colors {c1, c2} (c1 < c2) exist: map c1 -> 3, c2 -> 7.\n    - If 3 unique non-zero colors {c1, c2, c3} (c1 < c2 < c3) exist: map c1 -> 7, c2 -> 3, c3 -> 3.\n3.  Iterate through each cell of the grid.\n4.  If a background cell (0) is found that hasn't been visited yet:\n    a. Perform a Breadth-First Search (BFS) starting from this cell to find all connected background cells (a region).\n    b. During the BFS, track:\n        - All cells belonging to the region.\n        - Whether any cell in the region touches the grid boundary.\n        - The set of unique non-zero colors adjacent to the region.\n    c. Mark all visited background cells during the BFS.\n5.  After the BFS for a region is complete:\n    a. If the region did *not* touch the boundary and was adjacent to exactly *one* unique non-zero color (the boundary color):\n        i. Determine the appropriate fill color using the mapping established in step 2 based on the boundary color.\n        ii. Fill all cells of this region in the output grid with the determined fill color.\n6.  All other cells (original non-zero colors and background cells not part of a fillable enclosed region) remain unchanged.\n\"\"\"\n\ndef _get_neighbors(r, c, rows, cols):\n    \"\"\" Helper to yield valid neighbor coordinates. \"\"\"\n    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n        nr, nc = r + dr, c + dc\n        if 0 <= nr < rows and 0 <= nc < cols:\n            yield nr, nc\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by filling enclosed background regions based on boundary color rules.\n    \"\"\"\n    input_array = np.array(input_grid, dtype=int)\n    output_grid = np.copy(input_array)\n    rows, cols = input_array.shape\n\n    # 1. Analyze Input Colors\n    unique_colors = sorted(list(np.unique(input_array[input_array != 0])))\n\n    # 2. Define Fill Mapping\n    color_to_fill = {}\n    if len(unique_colors) == 2:\n        c1, c2 = unique_colors\n        color_to_fill[c1] = 3\n        color_to_fill[c2] = 7\n    elif len(unique_colors) == 3:\n        c1, c2, c3 = unique_colors\n        color_to_fill[c1] = 7\n        color_to_fill[c2] = 3\n        color_to_fill[c3] = 3\n    # Add handling for other numbers of colors if necessary, though examples only show 2 or 3.\n\n    # 4. Identify and Fill Enclosed Regions\n    visited_zeros = np.zeros_like(input_array, dtype=bool)\n\n    for r in range(rows):\n        for c in range(cols):\n            # 4.c If it's a background cell (0) and not visited yet:\n            if input_array[r, c] == 0 and not visited_zeros[r, c]:\n                # 4.c.i Start BFS\n                queue = deque([(r, c)])\n                visited_zeros[r, c] = True\n                region_cells = []\n                adjacent_colors = set()\n                touches_boundary = False\n\n                # 4.c.ii Perform BFS\n                while queue:\n                    curr_r, curr_c = queue.popleft()\n                    region_cells.append((curr_r, curr_c))\n\n                    # Check boundary touch\n                    if curr_r == 0 or curr_r == rows - 1 or curr_c == 0 or curr_c == cols - 1:\n                        touches_boundary = True\n\n                    # Check neighbors\n                    for nr, nc in _get_neighbors(curr_r, curr_c, rows, cols):\n                        neighbor_val = input_array[nr, nc]\n                        if neighbor_val == 0:\n                            if not visited_zeros[nr, nc]:\n                                visited_zeros[nr, nc] = True\n                                queue.append((nr, nc))\n                        else: # Non-zero neighbor\n                            adjacent_colors.add(neighbor_val)\n                \n                # 5. Check conditions and fill\n                if not touches_boundary and len(adjacent_colors) == 1:\n                    boundary_color = list(adjacent_colors)[0]\n                    # 5.a.i Check if this boundary color has a defined fill rule\n                    if boundary_color in color_to_fill:\n                        fill_color = color_to_fill[boundary_color]\n                        # 5.a.ii Fill the region in the output grid\n                        for rr, cc in region_cells:\n                            output_grid[rr, cc] = fill_color\n\n    # Return the result as a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3324,
    "candidates_token_count": 1332,
    "total_token_count": 4656,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 19.597949,
  "retries": 1
}