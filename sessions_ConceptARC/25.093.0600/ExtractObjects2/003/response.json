{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies the largest connected component of identical non-zero numbers in an input grid.\nConnectivity is defined by adjacent cells (up, down, left, right) sharing the same non-zero value.\nCalculates the minimal bounding box enclosing this largest component.\nExtracts the subgrid corresponding to this bounding box from the input grid.\nThe input grid is expected to be a NumPy array, and the output will be a standard Python list of lists.\n\"\"\"\n\nimport numpy as np\nimport collections\n\ndef _find_connected_component(grid, start_r, start_c, visited):\n    \"\"\"\n    Performs BFS to find all connected cells with the same non-zero value.\n\n    Args:\n        grid (np.array): The input grid.\n        start_r (int): The starting row index.\n        start_c (int): The starting column index.\n        visited (np.array): Boolean grid to track visited cells.\n\n    Returns:\n        list of tuple: Coordinates (row, col) of cells in the component.\n                       Returns empty list if start cell is 0 or visited.\n    \"\"\"\n    rows, cols = grid.shape\n    target_value = grid[start_r, start_c]\n\n    # Ignore background (0) or already processed cells\n    if target_value == 0 or visited[start_r, start_c]:\n        return []\n\n    component_coords = []\n    queue = collections.deque([(start_r, start_c)])\n    visited[start_r, start_c] = True # Mark starting cell as visited\n\n    while queue:\n        r, c = queue.popleft()\n        component_coords.append((r, c))\n\n        # Check neighbors (up, down, left, right)\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n\n            # Check bounds\n            if 0 <= nr < rows and 0 <= nc < cols:\n                # Check if neighbor has the target value and hasn't been visited\n                if not visited[nr, nc] and grid[nr, nc] == target_value:\n                    visited[nr, nc] = True # Mark neighbor as visited\n                    queue.append((nr, nc)) # Add neighbor to the queue\n\n    return component_coords\n\ndef _get_bounding_box(coords):\n    \"\"\"\n    Calculates the min/max row/col for a list of coordinates.\n\n    Args:\n        coords (list of tuple): List of (row, col) coordinates.\n\n    Returns:\n        tuple: (min_r, max_r, min_c, max_c) or None if coords is empty.\n    \"\"\"\n    if not coords:\n        return None\n\n    # Find min/max row and column from the component coordinates\n    min_r = min(r for r, c in coords)\n    max_r = max(r for r, c in coords)\n    min_c = min(c for r, c in coords)\n    max_c = max(c for r, c in coords)\n    return min_r, max_r, min_c, max_c\n\ndef transform(input_grid_arg):\n    \"\"\"\n    Finds the largest connected component of a single non-zero number in the\n    input grid and returns the subgrid corresponding to its bounding box.\n\n    Args:\n        input_grid_arg: The input 2D grid (can be list of lists or numpy array).\n\n    Returns:\n        list of list of int: The extracted subgrid containing the largest\n                             connected component, defined by its bounding box.\n                             Returns an empty list if no non-zero components\n                             are found or if input is empty.\n    \"\"\"\n    # Ensure input is a NumPy array for efficient processing\n    input_grid = np.array(input_grid_arg, dtype=int)\n\n    # Handle empty input grid\n    if input_grid.size == 0:\n        return []\n\n    rows, cols = input_grid.shape\n    # Initialize a boolean grid to keep track of visited cells\n    visited = np.full((rows, cols), False, dtype=bool)\n\n    max_component_size = 0\n    largest_component_coords = []\n\n    # Iterate through each cell of the grid\n    for r in range(rows):\n        for c in range(cols):\n            # If cell is non-zero and not yet visited, explore its component\n            if input_grid[r, c] != 0 and not visited[r, c]:\n                # Find the connected component starting from this cell\n                component_coords = _find_connected_component(input_grid, r, c, visited)\n                current_component_size = len(component_coords)\n\n                # Check if this component is the largest found so far\n                if current_component_size > max_component_size:\n                    max_component_size = current_component_size\n                    largest_component_coords = component_coords\n\n    # If no non-zero components were found, return an empty list\n    if not largest_component_coords:\n        return []\n\n    # Calculate the bounding box of the largest component\n    bounding_box = _get_bounding_box(largest_component_coords)\n    min_r, max_r, min_c, max_c = bounding_box\n\n    # Extract the subgrid corresponding to the bounding box using NumPy slicing\n    output_np_array = input_grid[min_r : max_r + 1, min_c : max_c + 1]\n\n    # Convert the resulting NumPy array to a standard Python list of lists\n    output_grid = output_np_array.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 5234,
            "end_index": 5424,
            "uri": "https://github.com/Rijgersberg/advent-of-code-2020",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7046,
    "candidates_token_count": 1304,
    "total_token_count": 8350,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 19.450072,
  "retries": 1
}