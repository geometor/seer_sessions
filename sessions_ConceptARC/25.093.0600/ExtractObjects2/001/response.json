{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nFinds the largest connected component of identical non-zero numbers in the input grid.\nThen, extracts the minimal bounding box surrounding this component from the input grid.\nConnectivity is defined as adjacent cells (up, down, left, right) having the same non-zero value.\n\"\"\"\n\nimport collections\n\ndef _find_connected_component(grid, start_r, start_c, visited):\n    \"\"\"\n    Performs a Breadth-First Search (BFS) to find all connected cells\n    with the same non-zero value starting from (start_r, start_c).\n\n    Args:\n        grid (list of list of int): The input grid.\n        start_r (int): The starting row index.\n        start_c (int): The starting column index.\n        visited (list of list of bool): Grid to track visited cells.\n\n    Returns:\n        list of tuple: A list of (row, col) coordinates for the cells\n                       in the connected component. Returns empty list\n                       if the starting cell is 0 or already visited.\n    \"\"\"\n    rows = len(grid)\n    cols = len(grid[0])\n    target_value = grid[start_r][start_c]\n\n    # Ignore background (0) or already processed cells\n    if target_value == 0 or visited[start_r][start_c]:\n        return []\n\n    component_coords = []\n    queue = collections.deque([(start_r, start_c)])\n    visited[start_r][start_c] = True\n\n    while queue:\n        r, c = queue.popleft()\n        component_coords.append((r, c))\n\n        # Check neighbors (up, down, left, right)\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n\n            # Check bounds\n            if 0 <= nr < rows and 0 <= nc < cols:\n                # Check if neighbor is part of the component and not visited\n                if not visited[nr][nc] and grid[nr][nc] == target_value:\n                    visited[nr][nc] = True\n                    queue.append((nr, nc))\n\n    return component_coords\n\ndef _get_bounding_box(coords):\n    \"\"\"\n    Calculates the min/max row/col for a list of coordinates.\n\n    Args:\n        coords (list of tuple): List of (row, col) coordinates.\n\n    Returns:\n        tuple: (min_r, max_r, min_c, max_c) or None if coords is empty.\n    \"\"\"\n    if not coords:\n        return None\n\n    min_r = min(r for r, c in coords)\n    max_r = max(r for r, c in coords)\n    min_c = min(c for r, c in coords)\n    max_c = max(c for r, c in coords)\n    return min_r, max_r, min_c, max_c\n\ndef _extract_subgrid(grid, min_r, max_r, min_c, max_c):\n    \"\"\"\n    Extracts a subgrid defined by the bounding box coordinates.\n\n    Args:\n        grid (list of list of int): The original grid.\n        min_r (int): Minimum row index (inclusive).\n        max_r (int): Maximum row index (inclusive).\n        min_c (int): Minimum column index (inclusive).\n        max_c (int): Maximum column index (inclusive).\n\n    Returns:\n        list of list of int: The extracted subgrid.\n    \"\"\"\n    subgrid = []\n    for r in range(min_r, max_r + 1):\n        subgrid.append(grid[r][min_c : max_c + 1])\n    return subgrid\n\n\ndef transform(input_grid):\n    \"\"\"\n    Finds the largest connected component of a single non-zero number in the\n    input grid and returns the subgrid corresponding to its bounding box.\n\n    Args:\n        input_grid (list of list of int): The input 2D grid.\n\n    Returns:\n        list of list of int: The extracted subgrid containing the largest\n                             connected component, defined by its bounding box.\n                             Returns an empty list if no non-zero components\n                             are found.\n    \"\"\"\n    if not input_grid or not input_grid[0]:\n        return [] # Handle empty input\n\n    rows = len(input_grid)\n    cols = len(input_grid[0])\n    visited = [[False for _ in range(cols)] for _ in range(rows)]\n\n    max_component_size = 0\n    largest_component_coords = []\n\n    # Iterate through each cell to find components\n    for r in range(rows):\n        for c in range(cols):\n            if input_grid[r][c] != 0 and not visited[r][c]:\n                # Find the connected component starting from this cell\n                component_coords = _find_connected_component(input_grid, r, c, visited)\n                current_component_size = len(component_coords)\n\n                # Check if this component is the largest found so far\n                if current_component_size > max_component_size:\n                    max_component_size = current_component_size\n                    largest_component_coords = component_coords\n\n    # If no non-zero components were found, return empty grid\n    if not largest_component_coords:\n        return []\n\n    # Calculate the bounding box of the largest component\n    bounding_box = _get_bounding_box(largest_component_coords)\n    min_r, max_r, min_c, max_c = bounding_box\n\n    # Extract the subgrid corresponding to the bounding box\n    output_grid = _extract_subgrid(input_grid, min_r, max_r, min_c, max_c)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 3806,
            "end_index": 3996,
            "uri": "https://github.com/Rijgersberg/advent-of-code-2020",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2621,
    "candidates_token_count": 1363,
    "total_token_count": 3984,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.225074,
  "retries": 1
}