{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nFill the bounding box of the most frequent non-zero color with that color.\n\n1. Identify all unique non-zero color values present in the input grid.\n2. Count the frequency of each unique non-zero color.\n3. Determine the non-zero color with the highest frequency (the \"dominant color\").\n4. Find all coordinates (row, column pairs) of the cells containing the dominant color.\n5. Calculate the minimum bounding box (min_row, max_row, min_col, max_col) enclosing these coordinates.\n6. Initialize the output grid as a copy of the input grid.\n7. Fill the area within the calculated bounding box in the output grid with the dominant color.\n8. Return the modified output grid.\n\"\"\"\n\ndef find_most_frequent_color(grid):\n    \"\"\"\n    Finds the non-zero color with the highest frequency in the grid.\n    Returns None if no non-zero colors are found.\n    Handles ties by returning the color with the lower numerical value among the most frequent.\n    \"\"\"\n    # Flatten the grid and filter out zeros\n    non_zero_colors = grid[grid != 0]\n\n    if non_zero_colors.size == 0:\n        return None # No non-zero colors found\n\n    # Count frequencies\n    color_counts = Counter(non_zero_colors)\n\n    # Find the maximum frequency\n    max_freq = 0\n    for color, count in color_counts.items():\n        if count > max_freq:\n            max_freq = count\n\n    # Find all colors with the maximum frequency\n    most_frequent_colors = []\n    for color, count in color_counts.items():\n        if count == max_freq:\n            most_frequent_colors.append(color)\n\n    # If there's a tie, return the color with the smallest numerical value\n    return min(most_frequent_colors)\n\n\ndef get_bounding_box(grid, target_color):\n    \"\"\"\n    Calculates the minimum bounding box for a given color in the grid.\n    Returns (min_row, max_row, min_col, max_col) or None if the color is not found.\n    \"\"\"\n    # Find coordinates where the grid matches the target color\n    coords = np.argwhere(grid == target_color)\n\n    if coords.size == 0:\n        return None # Color not found\n\n    # Calculate min/max row and column indices\n    min_row = np.min(coords[:, 0])\n    max_row = np.max(coords[:, 0])\n    min_col = np.min(coords[:, 1])\n    max_col = np.max(coords[:, 1])\n\n    return min_row, max_row, min_col, max_col\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by finding the most frequent non-zero color,\n    determining its bounding box, and filling that box with the color.\n    \"\"\"\n    # Convert input list of lists to a numpy array for easier manipulation\n    grid = np.array(input_grid, dtype=int)\n\n    # Initialize output_grid as a copy of the input grid\n    output_grid = np.copy(grid)\n\n    # 1. & 2. & 3. Find the most frequent non-zero color\n    dominant_color = find_most_frequent_color(grid)\n\n    # Proceed only if a dominant color was found\n    if dominant_color is not None:\n        # 4. & 5. Determine the bounding box for the dominant color\n        bounding_box = get_bounding_box(grid, dominant_color)\n\n        if bounding_box is not None:\n            min_r, max_r, min_c, max_c = bounding_box\n\n            # 7. Fill the bounding box in the output grid with the dominant color\n            # Note: Slicing is inclusive for the start index and exclusive for the end index,\n            # so we need to add 1 to the max indices.\n            output_grid[min_r:max_r+1, min_c:max_c+1] = dominant_color\n\n    # 8. Return the modified grid (convert back to list of lists if necessary,\n    #    but numpy array is often preferred for grid tasks)\n    return output_grid.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1873,
    "candidates_token_count": 998,
    "total_token_count": 2871,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.300782,
  "retries": 1
}