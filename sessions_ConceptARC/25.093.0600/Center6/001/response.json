{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies the least frequent non-zero digit in the input grid, moves it to the \ngeometric center of the grid, and sets its original location to zero. All other \ngrid elements remain unchanged.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\nimport math\n\ndef find_least_frequent_marker(grid):\n    \"\"\"\n    Finds the non-zero digit with the minimum frequency and its location.\n    Args:\n        grid (np.array): The input grid.\n    Returns:\n        tuple: (marker_value, marker_row, marker_col) or (None, None, None) if no non-zero digit found.\n    \"\"\"\n    non_zeros = grid[grid != 0]\n    if non_zeros.size == 0:\n        return None, None, None # No non-zero digits\n\n    counts = Counter(non_zeros)\n    \n    # Find the minimum frequency\n    min_freq = min(counts.values())\n    \n    # Find all digits that have the minimum frequency\n    candidates = [digit for digit, freq in counts.items() if freq == min_freq]\n    \n    # In case of a tie in frequency, the problem description implies uniqueness.\n    # We'll assume the first one found is the target, but a real-world scenario might need tie-breaking.\n    marker_value = candidates[0] \n    \n    # Find the location of the first occurrence of this marker value\n    locations = np.argwhere(grid == marker_value)\n    if locations.size > 0:\n        marker_row, marker_col = locations[0] # Take the first location if multiple exist\n        return marker_value, marker_row, marker_col\n    else:\n        # This case should ideally not happen if the marker_value came from the grid\n        return None, None, None \n\ndef calculate_center(grid):\n    \"\"\"\n    Calculates the geometric center coordinates of the grid.\n    Args:\n        grid (np.array): The input grid.\n    Returns:\n        tuple: (center_row, center_col)\n    \"\"\"\n    H, W = grid.shape\n    center_row = (H - 1) // 2  # Integer division for center index\n    center_col = (W - 1) // 2\n    return center_row, center_col\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by moving the least frequent non-zero digit to the center.\n\n    Args:\n        input_grid (list of list of int): The input 2D grid.\n\n    Returns:\n        list of list of int: The transformed 2D grid.\n    \"\"\"\n    # Convert input to numpy array for easier processing\n    input_np = np.array(input_grid, dtype=int)\n\n    # --- Step 1 & 2: Find the marker digit and its location ---\n    marker_value, marker_row, marker_col = find_least_frequent_marker(input_np)\n\n    # If no marker is found (e.g., all zeros), return the original grid\n    if marker_value is None:\n        return input_grid \n\n    # --- Step 3 & 4: Calculate the center position ---\n    center_row, center_col = calculate_center(input_np)\n\n    # --- Step 5: Create the output grid (copy of input) ---\n    output_np = np.copy(input_np)\n\n    # --- Step 6: Modify the output grid ---\n    # Set original marker location to 0\n    output_np[marker_row, marker_col] = 0\n    # Place marker value at the center\n    output_np[center_row, center_col] = marker_value\n\n    # --- Step 7: Return the modified grid ---\n    # Convert back to list of lists\n    output_grid = output_np.tolist()\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3612,
    "candidates_token_count": 898,
    "total_token_count": 4510,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.564807,
  "retries": 1
}