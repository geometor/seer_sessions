{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Set, Tuple\n\n\"\"\"\nTransforms an input grid based on the number of unique non-zero colors present.\n\n1. Identify all unique non-zero color values in the input grid.\n2. Count the number of these unique colors.\n3. Determine the single output color based on the count:\n   - If the count is 1, the output color is 4.\n   - If the count is 2, the output color is 5.\n4. Create an output grid of the same dimensions as the input.\n5. For each cell:\n   - If the input cell value is 0, the output cell value is 0.\n   - If the input cell value is non-zero, the output cell value is the determined output color.\n\"\"\"\n\ndef find_unique_non_zero_colors(grid: np.ndarray) -> Set[int]:\n    \"\"\"Finds all unique non-zero values in a grid.\"\"\"\n    unique_values = set(np.unique(grid))\n    # Remove 0 if it exists\n    unique_values.discard(0)\n    return unique_values\n\ndef determine_output_color(unique_color_count: int) -> int:\n    \"\"\"Determines the output color based on the count of unique input colors.\"\"\"\n    if unique_color_count == 1:\n        return 4\n    elif unique_color_count == 2:\n        return 5\n    else:\n        # Define a default or error case if needed, though based on examples,\n        # counts are only 1 or 2. Let's default to 0 or raise an error.\n        # For now, sticking to observed patterns.\n        # Returning -1 to indicate an unexpected count based on training data.\n        # A more robust solution might raise ValueError.\n        print(f\"Warning: Unexpected number of unique colors: {unique_color_count}\")\n        return -1 # Or handle as appropriate for the broader context\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Applies the color transformation rule to the input grid.\n    \"\"\"\n    # Convert input list of lists to a numpy array for efficient processing\n    input_array = np.array(input_grid, dtype=int)\n\n    # 1. Identify unique non-zero colors\n    unique_colors = find_unique_non_zero_colors(input_array)\n\n    # 2. Count the unique colors\n    unique_color_count = len(unique_colors)\n\n    # 3. Determine the target output color\n    output_color = determine_output_color(unique_color_count)\n    \n    # Handle the case where the count wasn't 1 or 2\n    if output_color == -1:\n        # Decide how to handle this - return input? return error grid?\n        # For now, returning a copy of the input might be safest.\n        print(\"Returning input grid due to unexpected unique color count.\")\n        return input_grid\n\n    # 4. Create the output grid (start with a copy, then modify)\n    # Using np.copy ensures we don't modify the original input array if it's passed elsewhere\n    output_array = np.copy(input_array)\n\n    # 5. Iterate and transform: Replace non-zero values with the output color\n    # Use boolean indexing for efficiency: find where the input array is not zero\n    non_zero_mask = input_array != 0\n    output_array[non_zero_mask] = output_color\n\n    # Convert the numpy array back to a list of lists for the expected output format\n    output_grid = output_array.tolist()\n\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3015,
    "candidates_token_count": 840,
    "total_token_count": 3855,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.025324,
  "retries": 1
}