{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid based on the relative density of '7's in rows versus columns.\n\n1. Calculate the maximum number of '7's found in any single row (`max_row_sevens`).\n2. Calculate the maximum number of '7's found in any single column (`max_col_sevens`).\n3. If `max_col_sevens` is strictly greater than `max_row_sevens`:\n    - Apply \"column gravity\": For each column independently, move all '7's to the\n      bottom, stacking them up, and fill the remaining cells above with '0's.\n4. Otherwise (if `max_row_sevens` is greater than or equal to `max_col_sevens`):\n    - Apply \"row gravity\": For each row independently, move all '7's to the\n      right, stacking them against the right edge, and fill the remaining cells\n      to the left with '0's.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Applies either column gravity or row gravity based on maximum densities.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_array = np.array(input_grid)\n    rows, cols = input_array.shape\n    \n    # Initialize the output grid with zeros, same dimensions as input\n    output_array = np.zeros_like(input_array)\n    \n    # Value to manipulate\n    target_value = 7\n\n    # Calculate max '7's per row\n    max_row_sevens = 0\n    for r in range(rows):\n        # Count non-zero elements matching target_value in the current row\n        row_count = np.count_nonzero(input_array[r, :] == target_value)\n        # Update maximum if current row count is higher\n        if row_count > max_row_sevens:\n            max_row_sevens = row_count\n\n    # Calculate max '7's per column\n    max_col_sevens = 0\n    for c in range(cols):\n        # Count non-zero elements matching target_value in the current column\n        col_count = np.count_nonzero(input_array[:, c] == target_value)\n        # Update maximum if current column count is higher\n        if col_count > max_col_sevens:\n            max_col_sevens = col_count\n\n    # Decide transformation logic based on max counts comparison\n    if max_col_sevens > max_row_sevens:\n        # Apply column gravity (fall down)\n        # Iterate through each column\n        for c in range(cols):\n            # Count the number of '7's in this input column\n            num_sevens = np.count_nonzero(input_array[:, c] == target_value)\n            # If there are any '7's in this column\n            if num_sevens > 0:\n                # Place the '7's at the bottom of the corresponding output column\n                # Start filling from the bottom row index (rows - num_sevens) up to the last row (rows - 1)\n                output_array[rows - num_sevens:, c] = target_value\n    else:\n        # Apply row gravity (push right)\n        # Iterate through each row\n        for r in range(rows):\n            # Count the number of '7's in this input row\n            num_sevens = np.count_nonzero(input_array[r, :] == target_value)\n            # If there are any '7's in this row\n            if num_sevens > 0:\n                # Place the '7's at the right end of the corresponding output row\n                # Start filling from the rightmost column index (cols - num_sevens) up to the last column (cols - 1)\n                output_array[r, cols - num_sevens:] = target_value\n\n    # Convert the output NumPy array back to a list of lists for the required format\n    output_grid = output_array.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 7291,
    "candidates_token_count": 934,
    "total_token_count": 8225,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 17.766783,
  "retries": 1
}