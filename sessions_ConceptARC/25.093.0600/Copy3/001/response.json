{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport copy\n\ndef find_first_trigger_pattern(grid_arr):\n    \"\"\"\n    Finds the coordinates (row, col) of the top-left corner of the first \n    horizontal [6, 6] pattern where row > 0 and col > 0.\n\n    Args:\n        grid_arr (np.array): The input grid as a NumPy array.\n\n    Returns:\n        tuple: (row, col) of the pattern start, or None if not found.\n    \"\"\"\n    H, W = grid_arr.shape\n    for r in range(1, H):  # Start search from row 1\n        for c in range(1, W - 1): # Start search from col 1\n            if grid_arr[r, c] == 6 and grid_arr[r, c + 1] == 6:\n                return r, c\n    return None\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on the observed rules:\n    1. Default behavior: Mirror the left half of the grid onto the right half.\n    2. Conditional override: If a horizontal [6, 6] pattern is found \n       at (pr, pc) where pr > 0 and pc > 0, copy a specific block \n       from the input grid to a calculated position in the output grid, \n       overwriting the mirrored content.\n\n    Args:\n        input_grid (list of list of int): The input grid.\n\n    Returns:\n        list of list of int: The transformed output grid.\n    \"\"\"\n    # Convert input to NumPy array for easier manipulation\n    input_arr = np.array(input_grid, dtype=int)\n    H, W = input_arr.shape\n    \n    # Initialize output grid with zeros\n    output_arr = np.zeros_like(input_arr)\n    \n    # --- Step 1: Default mirroring ---\n    mid = W // 2 # Integer division to find the midpoint column index\n    \n    # Copy the left half (columns 0 to mid-1) from input to output\n    left_half = input_arr[:, :mid]\n    output_arr[:, :mid] = left_half\n    \n    # Determine how much of the left half can be mirrored into the right half\n    mirrored_width = min(mid, W - mid) # Handles both even and odd widths\n    \n    # Mirror the left half into the columns starting from 'mid'\n    output_arr[:, mid : mid + mirrored_width] = left_half[:, :mirrored_width]\n    \n    # --- Step 2: Conditional Block Copy ---\n    \n    # Find the trigger pattern [6, 6] where r > 0 and c > 0\n    pattern_coords = find_first_trigger_pattern(input_arr)\n    \n    if pattern_coords:\n        pr, pc = pattern_coords\n        \n        # Define source block boundaries based on pattern location (pr, pc)\n        # As observed in train_2: src starts at (2, 0), ends relative to (pr, pc)\n        src_row_start = 2\n        src_col_start = 0\n        src_row_end = pr + 6 # exclusive end row index\n        src_col_end = pc     # exclusive end col index\n\n        # Define destination top-left corner based on pattern location\n        dest_row_start = pr + 2\n        dest_col_start = pc\n        \n        # Check if source block is valid within input dimensions\n        if src_row_start < src_row_end and src_col_start < src_col_end and \\\n           src_row_end <= H and src_col_end <= W:\n           \n            # Extract the source block\n            source_block = input_arr[src_row_start:src_row_end, src_col_start:src_col_end]\n            block_h, block_w = source_block.shape\n            \n            # Check if destination placement is valid within output dimensions\n            if dest_row_start + block_h <= H and dest_col_start + block_w <= W:\n                # Copy the block to the destination in the output grid\n                output_arr[dest_row_start : dest_row_start + block_h, \n                           dest_col_start : dest_col_start + block_w] = source_block\n\n    # Convert the final NumPy array back to a list of lists\n    output_grid = output_arr.tolist()\n    \n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2517,
    "candidates_token_count": 1045,
    "total_token_count": 3562,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 36.19829,
  "retries": 1
}