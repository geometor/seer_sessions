{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nProcesses a 2D integer grid by iterating through pairs of consecutive rows (0&1, 2&3, etc.).\nFor each pair:\n1. Counts the non-zero elements in both rows.\n2. Selects a 'candidate' row: the one with fewer non-zero elements. If counts are equal, the first row (even index) is the candidate. The other row becomes the 'comparison' row.\n3. Creates an 'output pattern' row. For each column index:\n    - If the element in the candidate row AND the element in the comparison row are both non-zero, the output pattern row gets the value from the candidate row at that index.\n    - Otherwise, the output pattern row gets 0 at that index.\n4. Both rows in the output grid corresponding to the input pair are replaced with copies of this generated 'output pattern' row.\n\"\"\"\n\nimport numpy as np\n\ndef count_non_zeros(row):\n  \"\"\"Counts the number of non-zero elements in a list or 1D numpy array.\"\"\"\n  # Using numpy count_nonzero is efficient\n  return np.count_nonzero(np.array(row))\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the row-pair sparsity comparison and intersection filtering\n    transformation to the input grid.\n\n    Args:\n        input_grid: A list of lists representing the 2D integer grid.\n\n    Returns:\n        A list of lists representing the transformed 2D integer grid.\n    \"\"\"\n    # Convert input to numpy array for easier slicing and operations\n    input_np = np.array(input_grid)\n    num_rows, num_cols = input_np.shape\n\n    # Initialize output grid with zeros, matching input dimensions and type\n    output_np = np.zeros_like(input_np)\n\n    # Iterate through the grid rows in steps of 2\n    for i in range(0, num_rows, 2):\n        # Ensure we have a pair of rows\n        if i + 1 < num_rows:\n            row_A = input_np[i]\n            row_B = input_np[i + 1]\n\n            # Count non-zero elements in each row of the pair\n            count_A = count_non_zeros(row_A)\n            count_B = count_non_zeros(row_B)\n\n            # Determine candidate and comparison rows based on counts\n            # Tie goes to the first row (row_A).\n            if count_A <= count_B:\n                candidate_row = row_A\n                comparison_row = row_B\n            else: # count_B < count_A\n                candidate_row = row_B\n                comparison_row = row_A\n\n            # Generate the output pattern row based on intersection\n            output_pattern_row = np.zeros(num_cols, dtype=input_np.dtype)\n            for j in range(num_cols):\n                # Keep value from candidate only if both candidate and comparison are non-zero\n                if candidate_row[j] != 0 and comparison_row[j] != 0:\n                    output_pattern_row[j] = candidate_row[j]\n                # Otherwise, it remains 0 (due to initialization)\n\n            # Assign the generated pattern row to both corresponding output rows\n            output_np[i] = output_pattern_row\n            output_np[i + 1] = output_pattern_row\n        # Handle potential odd number of rows if the problem spec allowed it\n        # elif i < num_rows:\n        #    # If there's a single last row, maybe copy it? Or zero it out?\n        #    # Based on examples, seems grids are always even height or last row ignored.\n        #    # Let's assume for now we only process full pairs.\n        #    pass\n\n    # Convert the result back to a list of lists\n    output_grid = output_np.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8288,
    "candidates_token_count": 894,
    "total_token_count": 9182,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.531333,
  "retries": 1
}