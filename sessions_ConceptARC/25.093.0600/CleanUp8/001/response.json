{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nProcesses a 2D integer grid by iterating through pairs of consecutive rows (0&1, 2&3, etc.).\nFor each pair, it counts the non-zero elements in both rows.\nThe row with the fewer non-zero elements is selected as the 'pattern' row.\nIf the counts are equal, the first row of the pair (the one with the even index) is chosen.\nBoth rows in the output grid corresponding to the pair are then replaced with copies of this selected pattern row.\n\"\"\"\n\nimport numpy as np\n\ndef count_non_zeros(row):\n  \"\"\"Counts the number of non-zero elements in a list or 1D numpy array.\"\"\"\n  # Convert to numpy array for efficient counting if it's not already one\n  return np.count_nonzero(np.array(row))\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the row-pair sparsity comparison transformation to the input grid.\n\n    Args:\n        input_grid: A list of lists representing the 2D integer grid.\n\n    Returns:\n        A list of lists representing the transformed 2D integer grid.\n    \"\"\"\n    # Convert input to numpy array for easier slicing and operations\n    input_np = np.array(input_grid)\n    num_rows, num_cols = input_np.shape\n\n    # Initialize output grid as a copy to preserve dimensions and dtype\n    output_np = np.copy(input_np) # or np.zeros_like(input_np)\n\n    # Iterate through the grid rows in steps of 2\n    for i in range(0, num_rows, 2):\n        # Ensure we don't go out of bounds if there's an odd number of rows\n        # (though examples suggest even dimensions, it's good practice)\n        if i + 1 < num_rows:\n            row_A = input_np[i]\n            row_B = input_np[i + 1]\n\n            # Count non-zero elements in each row of the pair\n            count_A = count_non_zeros(row_A)\n            count_B = count_non_zeros(row_B)\n\n            # Select the pattern row based on the counts\n            # Fewer non-zeros wins. Tie goes to the first row (row_A).\n            if count_A <= count_B: # Includes the tie-breaking case (count_A == count_B)\n                pattern_row = row_A\n            else: # count_B < count_A\n                pattern_row = row_B\n\n            # Assign the selected pattern row to both corresponding output rows\n            output_np[i] = pattern_row\n            output_np[i + 1] = pattern_row\n        # else: handle odd number of rows case if necessary - based on examples, not needed\n\n    # Convert the result back to a list of lists\n    output_grid = output_np.tolist()\n\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2293,
    "candidates_token_count": 666,
    "total_token_count": 2959,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.624745,
  "retries": 1
}