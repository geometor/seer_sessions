{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nCounts the number of distinct connected components (objects) of non-zero values \nin the input grid. Connectivity is defined by adjacent cells (up, down, left, \nright) sharing the same non-zero value. The output is a 1xN grid (represented \nas a numpy array) filled with zeros, where N is the total count of these objects.\n\"\"\"\n\ndef _bfs(grid, visited, start_row, start_col, target_value):\n    \"\"\"\n    Performs Breadth-First Search to find all connected cells with the target_value\n    and marks them as visited.\n\n    Args:\n        grid (np.ndarray): The input grid.\n        visited (np.ndarray): A boolean grid to track visited cells.\n        start_row (int): The starting row for the search.\n        start_col (int): The starting column for the search.\n        target_value (int): The non-zero value of the object to find.\n    \"\"\"\n    rows, cols = grid.shape\n    q = deque([(start_row, start_col)])\n    visited[start_row, start_col] = True\n\n    while q:\n        r, c = q.popleft()\n\n        # Check neighbors (up, down, left, right)\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n\n            # Check boundaries, if the neighbor has the target value, and if it hasn't been visited\n            if 0 <= nr < rows and 0 <= nc < cols and \\\n               grid[nr, nc] == target_value and not visited[nr, nc]:\n                visited[nr, nc] = True\n                q.append((nr, nc))\n\n\ndef find_objects(grid):\n    \"\"\"\n    Finds and counts the number of distinct connected non-zero objects in the grid.\n\n    Args:\n        grid (np.ndarray): The input grid.\n\n    Returns:\n        int: The total count of distinct objects.\n    \"\"\"\n    if grid is None or grid.size == 0:\n        return 0\n\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    object_count = 0\n\n    # Iterate through each cell of the grid\n    for r in range(rows):\n        for c in range(cols):\n            # If the cell is non-zero and hasn't been visited yet, it's the start of a new object\n            if grid[r, c] != 0 and not visited[r, c]:\n                object_count += 1\n                # Find all connected cells of this object using BFS and mark them visited\n                _bfs(grid, visited, r, c, grid[r, c])\n\n    return object_count\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by counting the number of distinct non-zero connected \n    components and returning a 1xN array of zeros, where N is the object count.\n\n    Args:\n        input_grid (list of lists or np.ndarray): The input 2D grid.\n\n    Returns:\n        np.ndarray: A 1xN array filled with zeros.\n    \"\"\"\n    # Convert input to numpy array for easier processing\n    grid_np = np.array(input_grid, dtype=int)\n\n    # Count the number of distinct objects\n    num_objects = find_objects(grid_np)\n\n    # Create the output grid: 1 row, num_objects columns, filled with zeros\n    output_grid = np.zeros((1, num_objects), dtype=int)\n\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1731,
    "candidates_token_count": 859,
    "total_token_count": 2590,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.984788,
  "retries": 1
}