{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import defaultdict\n\n\"\"\"\nTransformation Rule:\n\n1. Identify two parallel lines (walls) made of the same non-zero digit, either horizontally or vertically.\n2. Identify a single, unique non-zero digit (marker) different from the wall digit.\n3. Calculate the midpoint row (for horizontal walls) or midpoint column (for vertical walls) between the two walls using integer division.\n4. Move the marker to the cell located at the midpoint index along the axis perpendicular to the walls, keeping its coordinate along the axis parallel to the walls unchanged.\n5. The original cell of the marker is set to 0 (background).\n6. All other cells (walls and background) remain unchanged.\n\"\"\"\n\ndef _find_walls_and_marker(grid):\n    \"\"\"\n    Finds the wall lines (horizontal or vertical), the wall value,\n    the marker value, and the marker's initial position.\n    \"\"\"\n    rows, cols = grid.shape\n    non_zero_positions = defaultdict(list)\n    row_counts = defaultdict(int)\n    col_counts = defaultdict(int)\n    all_non_zero = {} # Store value and position for potential markers\n\n    # First pass: collect positions and counts for non-zero values\n    for r in range(rows):\n        for c in range(cols):\n            val = grid[r, c]\n            if val != 0:\n                non_zero_positions[val].append((r, c))\n                row_counts[(val, r)] += 1\n                col_counts[(val, c)] += 1\n                all_non_zero[(r,c)] = val\n\n    wall_value = -1\n    wall_orientation = None\n    wall_indices = []\n    marker_value = -1\n    marker_pos = None\n\n    # Identify walls\n    for val, positions in non_zero_positions.items():\n        # Check for horizontal walls\n        val_rows = defaultdict(int)\n        for r, c in positions:\n            val_rows[r] += 1\n        \n        horizontal_lines = []\n        for r, count in val_rows.items():\n            if count == cols: # Check if it spans the full width\n                 horizontal_lines.append(r)\n\n        if len(horizontal_lines) == 2:\n            wall_value = val\n            wall_orientation = 'horizontal'\n            wall_indices = sorted(horizontal_lines)\n            break # Found walls\n\n        # Check for vertical walls\n        val_cols = defaultdict(int)\n        for r, c in positions:\n            val_cols[c] += 1\n\n        vertical_lines = []\n        for c, count in val_cols.items():\n             if count == rows: # Check if it spans the full height\n                 vertical_lines.append(c)\n\n        if len(vertical_lines) == 2:\n            wall_value = val\n            wall_orientation = 'vertical'\n            wall_indices = sorted(vertical_lines)\n            break # Found walls\n\n    if wall_value == -1:\n        raise ValueError(\"Could not identify two parallel walls.\")\n\n    # Identify marker (the non-zero value that is NOT the wall value)\n    for pos, val in all_non_zero.items():\n        if val != wall_value:\n            if marker_value != -1:\n                 raise ValueError(\"Found more than one potential marker.\")\n            marker_value = val\n            marker_pos = pos\n\n    if marker_value == -1:\n         raise ValueError(\"Could not identify the marker.\")\n\n    return wall_value, wall_orientation, wall_indices, marker_value, marker_pos\n\n\ndef _calculate_target_position(wall_orientation, wall_indices, marker_pos):\n    \"\"\"Calculates the target position for the marker.\"\"\"\n    row_in, col_in = marker_pos\n    if wall_orientation == 'horizontal':\n        r1, r2 = wall_indices\n        row_target = (r1 + r2) // 2\n        col_target = col_in\n    elif wall_orientation == 'vertical':\n        c1, c2 = wall_indices\n        row_target = row_in\n        col_target = (c1 + c2) // 2\n    else:\n        raise ValueError(f\"Invalid wall orientation: {wall_orientation}\")\n    return row_target, col_target\n\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n    Moves a marker digit towards the midpoint between two parallel wall lines.\n    \"\"\"\n    # Convert input list of lists to numpy array for easier handling\n    grid = np.array(input_grid, dtype=int)\n    \n    # Initialize output_grid as a copy of the input\n    output_grid = grid.copy()\n\n    # 1. & 2. Identify Walls and Marker\n    wall_value, wall_orientation, wall_indices, marker_value, marker_pos = _find_walls_and_marker(grid)\n    row_in, col_in = marker_pos\n\n    # 3. Calculate Target Position\n    row_target, col_target = _calculate_target_position(wall_orientation, wall_indices, marker_pos)\n\n    # 4. & 5. Move Marker in the output grid\n    # Set original marker position to background (0)\n    output_grid[row_in, col_in] = 0\n    # Set target position to marker value\n    output_grid[row_target, col_target] = marker_value\n\n    # 6. Return the modified grid (converted back to list of lists if necessary)\n    return output_grid.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2660,
    "candidates_token_count": 1297,
    "total_token_count": 3957,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.673892,
  "retries": 1
}