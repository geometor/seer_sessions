{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import defaultdict\n\n\"\"\"\nTransformation Rule:\n1. Identify the contiguous shape of non-zero pixels in the input grid.\n2. Determine the shape's color.\n3. Calculate the maximum length of continuous vertical segments within the shape.\n4. Calculate the maximum length of continuous horizontal segments within the shape.\n5. Compare the maximum lengths:\n    a. If the maximum horizontal length >= maximum vertical length, shift the shape 3 units to the right.\n    b. Otherwise (maximum vertical length > maximum horizontal length), shift the shape 3 units down.\n6. Create an output grid and place the shifted shape onto it, preserving its color and structure.\n\"\"\"\n\ndef find_shape(grid):\n    \"\"\"Finds the coordinates and color of the non-zero shape.\"\"\"\n    rows, cols = np.where(grid > 0)\n    if len(rows) == 0:\n        return None, [] # No shape found\n    color = grid[rows[0], cols[0]]\n    coords = list(zip(rows, cols))\n    return color, coords\n\ndef get_max_segment_length(coords, dimension_index):\n    \"\"\"\n    Calculates the maximum length of consecutive segments along a specified dimension.\n    dimension_index=0 for vertical (rows), dimension_index=1 for horizontal (cols).\n    \"\"\"\n    if not coords:\n        return 0\n\n    # Group coordinates by the *other* dimension\n    group_index = 1 - dimension_index\n    groups = defaultdict(list)\n    for coord in coords:\n        groups[coord[group_index]].append(coord[dimension_index])\n\n    max_len = 0\n    for key in groups:\n        # Sort the coordinates along the dimension we are measuring\n        sorted_coords = sorted(groups[key])\n        if not sorted_coords:\n            continue\n\n        current_len = 1\n        current_max_for_group = 1\n        for i in range(1, len(sorted_coords)):\n            # Check if the current coordinate is consecutive to the previous one\n            if sorted_coords[i] == sorted_coords[i-1] + 1:\n                current_len += 1\n            else:\n                # Reset current length if not consecutive\n                current_max_for_group = max(current_max_for_group, current_len)\n                current_len = 1\n        # Final check for the last segment in the group\n        current_max_for_group = max(current_max_for_group, current_len)\n        # Update the overall maximum length found across all groups\n        max_len = max(max_len, current_max_for_group)\n\n    return max_len\n\ndef get_max_vertical_length(coords):\n    \"\"\"Calculates the maximum length of continuous vertical segments.\"\"\"\n    return get_max_segment_length(coords, 0) # dimension_index=0 for rows (vertical)\n\ndef get_max_horizontal_length(coords):\n    \"\"\"Calculates the maximum length of continuous horizontal segments.\"\"\"\n    return get_max_segment_length(coords, 1) # dimension_index=1 for columns (horizontal)\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n    Shifts the shape based on its maximum horizontal vs vertical segment length.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    grid_np = np.array(input_grid)\n    rows, cols = grid_np.shape\n\n    # Initialize output grid with zeros\n    output_grid = np.zeros_like(grid_np)\n\n    # Find the shape (color and coordinates)\n    color, shape_coords = find_shape(grid_np)\n\n    # If no shape is found, return the empty grid\n    if color is None:\n        return output_grid.tolist() # Convert back to list of lists\n\n    # Calculate max vertical and horizontal segment lengths\n    max_vert_len = get_max_vertical_length(shape_coords)\n    max_horiz_len = get_max_horizontal_length(shape_coords)\n\n    # Determine translation direction and magnitude\n    shift_magnitude = 3\n    dr, dc = 0, 0 # (delta_row, delta_col)\n    if max_horiz_len >= max_vert_len:\n        # Shift right\n        dc = shift_magnitude\n    else:\n        # Shift down\n        dr = shift_magnitude\n\n    # Apply the translation to each pixel of the shape\n    for r, c in shape_coords:\n        new_r, new_c = r + dr, c + dc\n        # Check if the new coordinates are within the grid bounds\n        if 0 <= new_r < rows and 0 <= new_c < cols:\n            output_grid[new_r, new_c] = color\n\n    # Convert the final numpy array back to a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1989,
    "candidates_token_count": 1134,
    "total_token_count": 3123,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 17.916086,
  "retries": 1
}