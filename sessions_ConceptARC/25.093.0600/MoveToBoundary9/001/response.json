{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import defaultdict\n\n\"\"\"\nHorizontally shift two distinct non-zero groups to opposite edges of the grid.\nThe group initially positioned further to the left moves so its leftmost point aligns with column 0.\nThe group initially positioned further to the right moves so its rightmost point aligns with the last column.\nThe vertical positions and internal structure of each group are preserved.\n\"\"\"\n\ndef find_objects(grid):\n    \"\"\"\n    Identifies distinct non-zero objects and their coordinates in the grid.\n\n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        dict: A dictionary where keys are non-zero object values and\n              values are lists of (row, column) coordinates.\n    \"\"\"\n    objects = defaultdict(list)\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            value = grid[r, c]\n            if value != 0:\n                objects[value].append((r, c))\n    return objects\n\ndef get_object_bounds(coords):\n    \"\"\"\n    Calculates the minimum and maximum column index for a set of coordinates.\n\n    Args:\n        coords (list): A list of (row, column) coordinates for an object.\n\n    Returns:\n        tuple: (min_col, max_col)\n    \"\"\"\n    if not coords:\n        return None, None\n    min_col = min(c for r, c in coords)\n    max_col = max(c for r, c in coords)\n    return min_col, max_col\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid (list of lists): The input grid data.\n\n    Returns:\n        list of lists: The transformed output grid data.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    grid = np.array(input_grid)\n    height, width = grid.shape\n\n    # Initialize output_grid with zeros\n    output_grid = np.zeros_like(grid)\n\n    # 1 & 2: Identify the two distinct non-zero objects and their coordinates\n    objects = find_objects(grid)\n    \n    # Ensure there are exactly two objects as per the examples\n    if len(objects) != 2:\n         # Handle cases with not exactly two objects if necessary,\n         # for now, assume the examples are representative\n         # Could return input_grid or raise an error\n         print(f\"Warning: Expected 2 objects, found {len(objects)}. Returning original grid.\")\n         return input_grid\n\n    object_values = list(objects.keys())\n    coords1 = objects[object_values[0]]\n    coords2 = objects[object_values[1]]\n\n    # 3. Determine which object is left and which is right\n    min_col1, max_col1 = get_object_bounds(coords1)\n    min_col2, max_col2 = get_object_bounds(coords2)\n\n    if min_col1 < min_col2:\n        left_object_coords = coords1\n        left_object_value = object_values[0]\n        left_min_col = min_col1\n        right_object_coords = coords2\n        right_object_value = object_values[1]\n        right_max_col = max_col2\n    else:\n        left_object_coords = coords2\n        left_object_value = object_values[1]\n        left_min_col = min_col2\n        right_object_coords = coords1\n        right_object_value = object_values[0]\n        right_max_col = max_col1\n\n    # 4. Calculate the shift amount for the left object\n    shift_left = 0 - left_min_col\n\n    # 5. Calculate the shift amount for the right object\n    shift_right = (width - 1) - right_max_col\n\n    # 6. Place the left object in the output grid with its shift\n    for r, c in left_object_coords:\n        new_c = c + shift_left\n        # Ensure the new coordinate is within bounds (should be by calculation)\n        if 0 <= new_c < width:\n             output_grid[r, new_c] = left_object_value\n\n    # 7. Place the right object in the output grid with its shift\n    for r, c in right_object_coords:\n        new_c = c + shift_right\n        # Ensure the new coordinate is within bounds (should be by calculation)\n        if 0 <= new_c < width:\n            output_grid[r, new_c] = right_object_value\n\n    # Convert the output numpy array back to a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2459,
    "candidates_token_count": 1111,
    "total_token_count": 3570,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.027745,
  "retries": 1
}