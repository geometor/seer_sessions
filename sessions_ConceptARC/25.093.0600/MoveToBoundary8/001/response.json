{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport math\nfrom copy import deepcopy\n\n\"\"\"\nProcesses a 2D grid containing digit patterns based on identified object types:\n1. Identifies Horizontal Lines (HL): Contiguous horizontal blocks of the same non-zero digit.\n2. Identifies Horizontal Patterns (HP): Sequences like D 0 D 0 D in a single row, where D is a non-zero digit. Priority is given to HLs first.\n3. Identifies Scattered Digits (SD): Any remaining non-zero digits not classified as part of an HL or HP.\n4. Transformation Rules:\n    - HP: The entire pattern is moved horizontally to the right. The distance of the move is equal to the numerical value of the digit D constituting the pattern. The original location is cleared.\n    - SD: If a Horizontal Line (HL) exists in the grid, the scattered digits are repositioned. They are cleared from their original locations and placed in a diagonal pattern starting one row below the HL and centered horizontally relative to the HL's center. The diagonal steps are (+2 rows, -2 columns) for each subsequent digit. If multiple HLs exist, the first one identified is used as the reference.\n    - HL: Horizontal Lines generally remain stationary unless they are overwritten by a moved HP or serve as the reference point for repositioning SDs.\n\"\"\"\n\n# ==================================\n# Helper Functions for Object Identification\n# ==================================\n\ndef _is_valid(r, c, rows, cols):\n    \"\"\"Check if coordinates are within grid bounds.\"\"\"\n    return 0 <= r < rows and 0 <= c < cols\n\ndef _find_horizontal_lines(grid, visited):\n    \"\"\"\n    Finds contiguous horizontal blocks of the same non-zero digit.\n    Marks the cells of found lines as visited.\n    Args:\n        grid (np.array): The input grid.\n        visited (np.array): Boolean mask of visited cells.\n    Returns:\n        list: A list of dictionaries, each representing an HL with its properties.\n    \"\"\"\n    lines = []\n    rows, cols = grid.shape\n    for r in range(rows):\n        c = 0\n        while c < cols:\n            digit = grid[r, c]\n            # Look for start of a potential line (non-zero, not visited)\n            if digit != 0 and not visited[r, c]:\n                start_c = c\n                line_coords_potential = [(r, c)]\n                \n                # Extend to the right as long as the digit is the same and not visited\n                current_c = c + 1\n                while current_c < cols and grid[r, current_c] == digit and not visited[r, current_c]:\n                    line_coords_potential.append((r, current_c))\n                    current_c += 1\n                \n                # Found a sequence of at least one cell\n                end_c = current_c - 1\n                \n                # Mark the found cells as visited *only* after confirming the full extent\n                for rr, cc in line_coords_potential:\n                    visited[rr, cc] = True\n\n                lines.append({\n                    \"type\": \"HL\",\n                    \"digit\": digit,\n                    \"row\": r,\n                    \"start_col\": start_c,\n                    \"end_col\": end_c,\n                    \"length\": len(line_coords_potential),\n                    \"coords\": line_coords_potential\n                })\n                # Continue scanning *after* the identified line\n                c = current_c \n            else:\n                # Move to the next cell if current is 0 or already visited\n                c += 1\n                \n    return lines\n\ndef _find_horizontal_patterns(grid, visited):\n    \"\"\"\n    Finds horizontal patterns like D 0 D 0 D, using only unvisited cells.\n    Marks the cells of found patterns as visited.\n    Args:\n        grid (np.array): The input grid.\n        visited (np.array): Boolean mask of visited cells.\n    Returns:\n        list: A list of dictionaries, each representing an HP with its properties.\n    \"\"\"\n    patterns = []\n    rows, cols = grid.shape\n    for r in range(rows):\n        c = 0\n        while c < cols:\n            # Check for potential start: non-zero digit D, not visited\n            if grid[r, c] != 0 and not visited[r, c]:\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 2,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3885,
    "candidates_token_count": 996,
    "total_token_count": 4881,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 164.3438,
  "retries": 2
}