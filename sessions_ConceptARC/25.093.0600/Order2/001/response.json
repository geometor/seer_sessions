{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport collections\n\ndef transform(input_grid):\n    \"\"\"\n    Applies a vertical gravity effect to non-zero elements within each column of a 2D grid.\n\n    1.  **Initialize Output:** Create a new grid (`output_grid`) with the same dimensions as the `input_grid`, filled entirely with zeros.\n    2.  **Iterate Columns:** Go through each column of the `input_grid` one by one.\n    3.  **Collect Blocks:** For the current column:\n        a. Scan the column from top to bottom.\n        b. Collect all non-zero values (blocks) into a list, preserving their top-to-bottom order.\n    4.  **Place Blocks:** For the current column:\n        a. Place the collected blocks into the corresponding column of the `output_grid`, starting from the bottom row and moving upwards. The last block collected (originally lowest) goes into the bottom-most row, the second-to-last block goes into the row above that, and so on.\n    5.  **Finalize:** Return the `output_grid`.\n    \"\"\"\n\n    # Convert input list of lists to a numpy array for easier slicing\n    input_array = np.array(input_grid)\n    num_rows, num_cols = input_array.shape\n\n    # Initialize output_grid with zeros, same dimensions as input\n    output_array = np.zeros_like(input_array)\n\n    # Iterate through each column\n    for col_idx in range(num_cols):\n        # Get the current column from the input grid\n        current_column = input_array[:, col_idx]\n\n        # Collect non-zero blocks from the current column\n        # We iterate through the column to maintain the original top-to-bottom order\n        column_blocks = [block for block in current_column if block != 0]\n\n        # Place the collected blocks in the output grid's column, starting from the bottom\n        num_blocks = len(column_blocks)\n        for k in range(num_blocks):\n            # Calculate the row index in the output grid\n            # The k-th block (0-indexed) from the collected list goes to row (num_rows - 1 - k)\n            output_row_idx = num_rows - 1 - k\n            # Place the block. Note: column_blocks are indexed 0..num_blocks-1,\n            # but we want to place them bottom-up, so the last block (index num_blocks-1)\n            # goes to the bottom row (num_rows - 1), the second last (index num_blocks-2)\n            # goes to the row above (num_rows - 2), etc.\n            # A simpler way is to reverse the list and place from the bottom up directly.\n            output_array[output_row_idx, col_idx] = column_blocks[num_blocks - 1 - k]\n\n\n            # Alternative (maybe clearer) placing logic:\n            # output_array[num_rows - 1 - k, col_idx] = column_blocks[k]\n            # This requires reversing the order of blocks placement in the output column.\n            # Let's stick to the original logic derived from the NL program:\n            # Place the k-th block collected (index k) into row (grid_height - 1 - (num_blocks - 1 - k))? No, that's wrong.\n            # Let's rethink the NL step 4c:\n            # Place the k-th block (0-indexed) from column_blocks list.\n            # Target row is (grid_height - 1 - k). This puts block 0 at bottom, block 1 above it, etc.\n            # This seems correct if we iterate k from 0 to num_blocks - 1.\n            # Let's re-implement with this logic.\n\n    # Re-implement placing blocks according to revised understanding of NL step 4c\n    output_array_revisited = np.zeros_like(input_array)\n    for col_idx in range(num_cols):\n        current_column = input_array[:, col_idx]\n        column_blocks = [block for block in current_column if block != 0]\n        num_blocks = len(column_blocks)\n\n        # Iterate through the collected blocks (index k from 0 to num_blocks-1)\n        for k in range(num_blocks):\n            # The k-th block goes into the output row: bottom_row_index - k\n            output_row_idx = (num_rows - 1) - k\n            # The value to place is the block corresponding to this upward position,\n            # which is the (num_blocks - 1 - k)-th block from the original list.\n            block_value = column_blocks[num_blocks - 1 - k]\n            output_array_revisited[output_row_idx, col_idx] = block_value\n\n\n    # Convert the final numpy array back to a list of lists, as expected by the examples\n    output_grid = output_array_revisited.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2050,
    "candidates_token_count": 1164,
    "total_token_count": 3214,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.070162,
  "retries": 1
}