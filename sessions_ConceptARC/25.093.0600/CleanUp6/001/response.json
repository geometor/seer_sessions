{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef _find_dominant_color(grid_np):\n    \"\"\"Finds the non-zero color with the highest frequency.\"\"\"\n    # Flatten the grid and filter out the background color (0)\n    non_zero_colors = grid_np[grid_np != 0]\n\n    # Handle cases with no non-zero colors\n    if non_zero_colors.size == 0:\n        return None\n\n    # Count frequencies\n    color_counts = Counter(non_zero_colors)\n\n    # Find the color with the maximum count\n    dominant_color = color_counts.most_common(1)[0][0]\n    return dominant_color\n\ndef _has_dominant_neighbor(grid_np, r, c, dominant_color):\n    \"\"\"Checks if a cell has an orthogonally adjacent neighbor with the dominant color.\"\"\"\n    rows, cols = grid_np.shape\n    # Define orthogonal neighbor offsets\n    neighbors = [(r - 1, c), (r + 1, c), (r, c - 1), (r, c + 1)]\n\n    for nr, nc in neighbors:\n        # Check if neighbor is within grid bounds\n        if 0 <= nr < rows and 0 <= nc < cols:\n            # Check if the neighbor has the dominant color\n            if grid_np[nr, nc] == dominant_color:\n                return True\n    return False\n\ndef transform(input_grid):\n    \"\"\"\n    Filters a grid based on color dominance and connectivity.\n\n    1. Identifies the most frequent non-zero color (dominant color).\n    2. Removes all other non-zero colors (minority colors).\n    3. Removes dominant color cells that do not have at least one\n       orthogonally adjacent neighbor also containing the dominant color.\n    \"\"\"\n    # Convert input list of lists to a numpy array for efficient processing\n    input_np = np.array(input_grid, dtype=int)\n    rows, cols = input_np.shape\n\n    # Initialize output_grid with zeros (background color)\n    output_grid_np = np.zeros_like(input_np)\n\n    # Find the dominant color\n    dominant_color = _find_dominant_color(input_np)\n\n    # If there's no dominant color (e.g., all zeros input), return the zero grid\n    if dominant_color is None:\n        return output_grid_np.tolist() # Convert back to list of lists\n\n    # Iterate through each cell of the input grid\n    for r in range(rows):\n        for c in range(cols):\n            current_color = input_np[r, c]\n\n            # Check if the current cell contains the dominant color\n            if current_color == dominant_color:\n                # Check if this cell has at least one orthogonal neighbor with the dominant color\n                if _has_dominant_neighbor(input_np, r, c, dominant_color):\n                    # If it has a dominant neighbor, keep the dominant color in the output grid\n                    output_grid_np[r, c] = dominant_color\n            # Cells with minority colors or isolated dominant colors remain 0 (background)\n\n    # Convert the result back to a list of lists before returning\n    return output_grid_np.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2547,
    "candidates_token_count": 741,
    "total_token_count": 3288,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.104196,
  "retries": 1
}