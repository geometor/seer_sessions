# Function to analyze a single example
import numpy as np
from collections import Counter

def analyze_example(input_grid, expected_output_grid):
    input_np = np.array(input_grid)
    expected_np = np.array(expected_output_grid)
    rows, cols = input_np.shape
    
    non_zero_input = input_np[input_np != 0]
    non_zero_expected = expected_np[expected_np != 0]

    input_counts = Counter(non_zero_input)
    expected_counts = Counter(non_zero_expected)
    
    unique_input_colors = sorted(list(input_counts.keys()))
    unique_expected_colors = sorted(list(expected_counts.keys()))

    max_freq = 0
    if input_counts:
        max_freq = max(input_counts.values())
        dominant_candidates = [color for color, count in input_counts.items() if count == max_freq]
    else:
        dominant_candidates = []

    return {
        "dims": f"{rows}x{cols}",
        "input_colors": unique_input_colors,
        "input_counts": dict(input_counts),
        "max_freq": max_freq,
        "dominant_candidates": dominant_candidates,
        "expected_colors": unique_expected_colors,
        "expected_counts": dict(expected_counts)
    }

# Example Data (shortened for brevity)
train_1_in = [[0,0,0,0,0,0,0,0,0,3],[3,0,3,3,3,3,3,0,0,0],[0,0,0,3,3,3,0,0,0,0],[0,1,0,0,3,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,1,0,0],[0,1,0,0,3,0,0,0,0,3],[0,0,0,3,3,3,0,0,0,0],[0,0,3,3,3,3,3,0,0,1],[3,0,0,0,0,0,0,0,0,0]]
train_1_out = [[0,0,0,0,0,0,0,0,0,0],[0,0,3,3,3,3,3,0,0,0],[0,0,0,3,3,3,0,0,0,0],[0,0,0,0,3,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,3,0,0,0,0,0],[0,0,0,3,3,3,0,0,0,0],[0,0,3,3,3,3,3,0,0,0],[0,0,0,0,0,0,0,0,0,0]]
train_2_in = [[0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0],[0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,6,0,0,0,0,0,0,0,0,0,0,0,6,0,0],[0,0,6,8,0,0,0,8,0,0,0,0,0,6,8,0,0],[0,0,6,6,6,0,0,0,0,0,0,0,6,6,6,0,0],[0,0,8,6,6,6,0,0,0,0,0,6,6,6,6,0,0],[0,0,6,8,6,0,0,0,0,8,0,0,6,6,6,0,0],[0,0,6,6,0,0,8,0,0,0,8,0,0,6,6,0,0],[0,0,6,0,0,0,0,0,0,0,0,0,0,0,6,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]
train_2_out = [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,6,0,0,0,0,0,0,0,0,0,0,0,6,0,0],[0,0,6,6,0,0,0,0,0,0,0,0,0,6,6,0,0],[0,0,6,6,6,0,0,0,0,0,0,0,6,6,6,0,0],[0,0,6,6,6,6,0,0,0,0,0,6,6,6,6,0,0],[0,0,6,6,6,0,0,0,0,0,0,0,6,6,6,0,0],[0,0,6,6,0,0,0,0,0,0,0,0,0,6,6,0,0],[0,0,6,0,0,0,0,0,0,0,0,0,0,0,6,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]
test_1_in = [[0,7,0,7,0,0,0,7,0,0],[0,1,0,0,0,0,0,0,1,0],[0,1,1,1,0,0,1,1,1,0],[0,1,1,1,0,0,1,1,1,0],[7,1,7,0,0,7,0,0,1,0],[0,0,0,0,0,0,0,0,0,0]]
test_1_out = [[0,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,1,0],[0,1,1,1,0,0,1,1,1,0],[0,1,1,1,0,0,1,1,1,0],[0,1,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,0]]
test_2_in = [[0,0,0,0,0,2,0,0,0],[4,4,4,4,4,4,4,4,4],[0,4,4,2,4,4,2,4,0],[2,0,4,4,2,4,4,0,0],[0,0,0,4,4,4,0,0,0],[0,2,0,0,4,0,0,0,2],[0,0,0,0,4,0,0,0,0],[0,0,0,0,0,0,0,2,0],[0,0,0,0,0,0,0,0,0],[4,4,4,4,2,4,4,4,4],[0,4,4,4,4,4,4,4,0],[0,0,4,2,4,2,4,0,0],[0,0,0,4,4,4,0,0,0],[0,2,0,0,4,0,0,0,0],[0,2,0,0,4,0,0,0,0],[0,0,0,0,0,0,2,0,2],[0,2,2,0,0,2,0,0,0]]
test_2_out = [[0,0,0,0,0,0,0,0,0],[4,4,4,4,4,4,4,4,4],[0,4,4,4,4,4,4,4,0],[0,0,4,4,4,4,4,0,0],[0,0,0,4,4,4,0,0,0],[0,0,0,0,4,0,0,0,0],[0,0,0,0,4,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[4,4,4,4,4,4,4,4,4],[0,4,4,4,4,4,4,4,0],[0,0,4,4,4,4,4,0,0],[0,0,0,4,4,4,0,0,0],[0,0,0,0,4,0,0,0,0],[0,0,0,0,4,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0]]
test_3_in = [[0,5,0,0,6,0,7,0,0,6,0,3,0,0,6],[0,5,5,0,0,0,7,7,0,0,0,3,3,0,0],[6,5,5,5,0,0,7,7,7,0,0,3,3,3,0],[0,5,6,5,5,0,6,7,7,6,0,3,6,3,3],[0,5,5,5,0,0,7,7,7,0,0,6,3,3,0],[0,6,5,0,0,0,7,7,0,0,6,3,3,0,0],[0,5,0,0,6,0,7,0,6,0,0,3,0,6,0]]
test_3_out = [[0,5,0,0,0,0,7,0,0,0,0,3,0,0,0],[0,5,5,0,0,0,7,7,0,0,0,3,3,0,0],[0,5,5,5,0,0,7,7,7,0,0,3,3,3,0],[0,5,5,5,5,0,7,7,7,7,0,3,3,3,3],[0,5,5,5,0,0,7,7,7,0,0,3,3,3,0],[0,5,5,0,0,0,7,7,0,0,0,3,3,0,0],[0,5,0,0,0,0,7,0,0,0,0,3,0,0,0]]
