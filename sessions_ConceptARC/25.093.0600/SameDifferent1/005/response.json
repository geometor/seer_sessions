{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentifies connected regions of non-zero colors in the input grid using 4-way \nadjacency (up, down, left, right). If any cell belonging to a specific region \nis located on the grid's outermost border (top row, bottom row, leftmost \ncolumn, or rightmost column), then the entire region is removed (replaced \nwith the background color '0'). Regions that are entirely contained within the \ngrid and do not touch any border are preserved in the output grid.\n\"\"\"\n\n\ndef _find_regions_and_filter(grid_np):\n    \"\"\"\n    Helper function to find connected regions and filter out those touching the border.\n\n    Args:\n        grid_np (np.array): The input grid as a NumPy array.\n\n    Returns:\n        list: A list of dictionaries, where each dictionary represents a region\n              to keep and contains 'color' and 'cells' (a list of \n              (row, col) tuples).\n    \"\"\"\n    rows, cols = grid_np.shape\n    visited = set()\n    regions_to_keep = []\n\n    # Iterate through each cell in the grid\n    for r in range(rows):\n        for c in range(cols):\n            # If the cell is non-zero and hasn't been visited yet, it's the start of a new potential region\n            if grid_np[r, c] != 0 and (r, c) not in visited:\n                color = grid_np[r, c]\n                current_region_cells = []\n                touches_border = False\n                q = deque([(r, c)])\n                visited.add((r, c))\n                \n                # Perform Breadth-First Search (BFS) to find all connected cells of the same color\n                while q:\n                    row, col = q.popleft()\n                    current_region_cells.append((row, col))\n\n                    # Check if the current cell is on the border\n                    if row == 0 or row == rows - 1 or col == 0 or col == cols - 1:\n                        # If any cell touches the border, mark the whole region\n                        touches_border = True \n\n                    # Explore neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        \n                        # Check if the neighbor is within grid bounds\n                        if 0 <= nr < rows and 0 <= nc < cols:\n                            # Check if the neighbor has the same color and hasn't been visited\n                            if grid_np[nr, nc] == color and (nr, nc) not in visited:\n                                visited.add((nr, nc))\n                                q.append((nr, nc))\n                                \n                # After exploring the entire region, decide whether to keep it\n                # Only keep regions that did NOT touch the border at any point\n                if not touches_border:\n                    regions_to_keep.append({\n                        'color': color,\n                        'cells': current_region_cells,\n                    })\n                    \n    return regions_to_keep\n\ndef transform(input_grid):\n    # Convert input list of lists to a NumPy array for efficient processing\n    grid_np = np.array(input_grid, dtype=int)\n    \n    # Initialize the output grid with the same dimensions, filled with the background color (0)\n    output_grid = np.zeros_like(grid_np)\n\n    # Find all regions in the input grid that do NOT touch the border using the helper function\n    regions_to_keep = _find_regions_and_filter(grid_np)\n\n    # Iterate through the regions that should be kept\n    for region in regions_to_keep:\n        color = region['color']\n        # Place the color of the kept region onto the corresponding cells in the output grid\n        for r, c in region['cells']:\n            output_grid[r, c] = color\n\n    # Convert the resulting NumPy array back to a list of lists for the standard output format\n    return output_grid.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 14631,
    "candidates_token_count": 946,
    "total_token_count": 15577,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 24.652174,
  "retries": 1
}