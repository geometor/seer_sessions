{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentifies connected regions of non-zero colors in the input grid. \nIf any part of a region touches the outer border of the grid, the entire region is removed (set to 0). \nRegions entirely contained within the grid (not touching any border) are preserved in the output.\n\"\"\"\n\ndef _find_regions(grid):\n    \"\"\"\n    Finds all connected regions of non-zero cells using BFS.\n\n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        list: A list of dictionaries, where each dictionary represents a region\n              and contains 'color', 'cells' (a set of (row, col) tuples),\n              and 'touches_border' (boolean).\n    \"\"\"\n    rows, cols = grid.shape\n    visited = set()\n    regions = []\n\n    for r in range(rows):\n        for c in range(cols):\n            # If the cell is non-zero and not yet visited, start a BFS\n            if grid[r, c] != 0 and (r, c) not in visited:\n                color = grid[r, c]\n                current_region_cells = set()\n                touches_border = False\n                q = deque([(r, c)])\n                visited.add((r, c))\n\n                while q:\n                    row, col = q.popleft()\n                    current_region_cells.add((row, col))\n\n                    # Check if the current cell is on the border\n                    if row == 0 or row == rows - 1 or col == 0 or col == cols - 1:\n                        touches_border = True\n\n                    # Explore neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        # Check bounds, if not visited, and if it's part of the same color region\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           (nr, nc) not in visited and \\\n                           grid[nr, nc] == color:\n                            visited.add((nr, nc))\n                            q.append((nr, nc))\n\n                regions.append({\n                    'color': color,\n                    'cells': current_region_cells,\n                    'touches_border': touches_border\n                })\n    return regions\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by removing connected regions of non-zero colors\n    if they touch the grid border.\n\n    Args:\n        input_grid (list of lists): The input grid.\n\n    Returns:\n        list of lists: The transformed grid.\n    \"\"\"\n    # Convert input to numpy array for easier handling\n    grid_np = np.array(input_grid, dtype=int)\n    rows, cols = grid_np.shape\n\n    # Initialize output_grid with zeros (background color)\n    output_grid = np.zeros_like(grid_np)\n\n    # Find all regions in the input grid\n    regions = _find_regions(grid_np)\n\n    # Iterate through the found regions\n    for region in regions:\n        # If a region does NOT touch the border, copy it to the output grid\n        if not region['touches_border']:\n            color = region['color']\n            for r, c in region['cells']:\n                output_grid[r, c] = color\n\n    # Convert back to list of lists for the expected output format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2384,
    "candidates_token_count": 818,
    "total_token_count": 3202,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.309828,
  "retries": 1
}