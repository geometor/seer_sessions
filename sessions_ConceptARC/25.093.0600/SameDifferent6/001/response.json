{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom scipy.ndimage import label, find_objects\n\n\"\"\"\nTransformation Rule:\n\n1.  Identify all unique non-zero colors present in the input grid.\n2.  Determine the \"target removal color\" (C). This color is the smallest non-zero color present in the grid, excluding the color 1. If only color 1 and 0 are present, or only 0 is present, no removal occurs.\n3.  Identify all distinct connected components (objects) of non-zero cells in the input grid using 8-way connectivity.\n4.  For each object, check if any of its constituent cells have the color C.\n5.  Construct the output grid, initially filled with the background color (0).\n6.  Copy only those objects from the input grid to the output grid that do *not* contain the target removal color C. Objects containing C are effectively removed (left as background).\n\"\"\"\n\ndef find_connected_objects(grid):\n    \"\"\"\n    Finds connected components of non-zero cells in the grid.\n\n    Args:\n        grid (np.ndarray): The input grid.\n\n    Returns:\n        list: A list where each element represents an object.\n              Each object is itself a list of tuples (row, col, color).\n    \"\"\"\n    # Define connectivity: 8-way connectivity\n    structure = np.array([[1,1,1],\n                          [1,1,1],\n                          [1,1,1]], dtype=bool)\n\n    # Label connected components of non-zero cells\n    labeled_grid, num_labels = label(grid > 0, structure=structure)\n\n    objects = []\n    # Extract coordinates and colors for each labeled component\n    object_slices = find_objects(labeled_grid)\n    for i in range(num_labels):\n        obj_slice = object_slices[i]\n        obj_coords = np.argwhere(labeled_grid[obj_slice] == (i + 1))\n        obj_cells = []\n        for coord in obj_coords:\n            # Adjust coordinates back to original grid space\n            r, c = coord[0] + obj_slice[0].start, coord[1] + obj_slice[1].start\n            color = grid[r, c]\n            obj_cells.append((r, c, color))\n        if obj_cells:\n            objects.append(obj_cells)\n            \n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n\n    Args:\n        input_grid (list of lists): The input grid represented as a list of lists.\n\n    Returns:\n        list of lists: The transformed grid.\n    \"\"\"\n    input_array = np.array(input_grid, dtype=int)\n    output_array = np.zeros_like(input_array)\n    \n    # 1. Identify unique non-zero colors\n    unique_colors = np.unique(input_array)\n    non_zero_colors = unique_colors[unique_colors != 0]\n\n    # 2. Determine the target removal color (C)\n    # Smallest non-zero color, excluding 1\n    candidate_colors = non_zero_colors[non_zero_colors != 1]\n    target_removal_color = None\n    if candidate_colors.size > 0:\n        target_removal_color = np.min(candidate_colors)\n\n    # If no target color found (e.g., only 0s or 1s present), no removal needed\n    if target_removal_color is None:\n        return input_grid # Return original grid if no removal target\n\n    # 3. Identify all connected non-zero objects\n    objects = find_connected_objects(input_array)\n\n    # 4 & 6. Filter objects and construct output grid\n    for obj in objects:\n        # Check if the object contains the target removal color\n        contains_target = False\n        for r, c, color in obj:\n            if color == target_removal_color:\n                contains_target = True\n                break\n        \n        # If the object does NOT contain the target color, copy it to the output\n        if not contains_target:\n            for r, c, color in obj:\n                output_array[r, c] = color\n\n    # Convert back to list of lists for the required output format\n    output_grid = output_array.tolist()\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2815,
    "candidates_token_count": 1014,
    "total_token_count": 3829,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 24.25197,
  "retries": 1
}