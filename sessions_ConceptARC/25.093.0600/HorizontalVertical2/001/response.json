{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\ndef find_blocks(grid):\n    \"\"\"\n    Identifies connected blocks of non-zero cells in a grid.\n\n    Args:\n        grid: A NumPy array representing the input grid.\n\n    Returns:\n        A list of blocks, where each block is a list of (row, col) tuples.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    blocks = []\n\n    for r in range(rows):\n        for c in range(cols):\n            # If the cell is non-zero and not yet visited, start a search (BFS)\n            if grid[r, c] != 0 and not visited[r, c]:\n                current_block = []\n                q = deque([(r, c)])\n                visited[r, c] = True\n\n                while q:\n                    curr_r, curr_c = q.popleft()\n                    current_block.append((curr_r, curr_c))\n\n                    # Check 4 neighbors (up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = curr_r + dr, curr_c + dc\n\n                        # Check bounds, non-zero value, and if not visited\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] != 0 and not visited[nr, nc]:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n                \n                if current_block: # Ensure we found something\n                    blocks.append(current_block)\n    return blocks\n\ndef calculate_block_sum(grid, block_coords):\n    \"\"\"\n    Calculates the sum of values for cells within a block.\n\n    Args:\n        grid: A NumPy array representing the input grid.\n        block_coords: A list of (row, col) tuples representing the block.\n\n    Returns:\n        The sum of the values in the specified block coordinates.\n    \"\"\"\n    total_sum = 0\n    for r, c in block_coords:\n        total_sum += grid[r, c]\n    return total_sum\n\n\"\"\"\nIdentifies all distinct connected blocks of non-zero numbers in the input grid.\nCalculates the sum of the numerical values for each block.\nSelects the block with the maximum sum.\nCreates an output grid containing only the selected block, with all other cells set to zero.\n\"\"\"\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by keeping only the connected block of non-zero \n    numbers that has the largest sum of its elements.\n\n    Args:\n        input_grid: A list of lists representing the input grid.\n\n    Returns:\n        A list of lists representing the transformed grid.\n    \"\"\"\n    # Convert input to numpy array for easier processing\n    input_array = np.array(input_grid, dtype=int)\n    rows, cols = input_array.shape\n    \n    # Initialize output_grid with zeros, same shape as input\n    output_grid = np.zeros_like(input_array)\n\n    # Find all distinct non-zero blocks\n    blocks = find_blocks(input_array)\n\n    # If no blocks are found, return the zero grid\n    if not blocks:\n        return output_grid.tolist()\n\n    # Calculate the sum for each block and find the block with the maximum sum\n    max_sum = -1\n    best_block = None\n    for block in blocks:\n        current_sum = calculate_block_sum(input_array, block)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            best_block = block\n        # Note: Implicit tie-breaking: the first block encountered with the max sum is chosen.\n\n    # Copy the selected block (the one with the maximum sum) to the output grid\n    if best_block:\n        for r, c in best_block:\n            output_grid[r, c] = input_array[r, c]\n\n    # Convert the output NumPy array back to a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2443,
    "candidates_token_count": 969,
    "total_token_count": 3412,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.38148,
  "retries": 1
}