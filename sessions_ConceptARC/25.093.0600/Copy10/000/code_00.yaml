task_name: object_duplication_with_contextual_placement
description: Identify a specific composite object (one shape enclosing another) in the input grid, duplicate it, and place the copy adjacent to the original based on object properties. Discard other objects.

elements:
  - element: grid
    description: A 2D array of integers representing pixels.
    properties:
      - background_color: 0
      - foreground_colors: non-zero integers

  - element: object
    description: A connected component of non-zero cells.
    properties:
      - colors: list of unique non-zero integers within the object
      - bounding_box: coordinates of the minimum rectangle containing the object
      - width: width of the bounding box
      - height: height of the bounding box
      - type: simple (one color) or composite (enclosing/enclosed)

relationships:
  - relationship: encloses
    description: An object A encloses object B if B is fully contained within the bounding box of A, and A's cells form a boundary around B. Object A and B must have different primary colors.
    domain: object (composite, outer)
    range: object (inner)

actions:
  - action: identify_target_object
    description: Select the unique object from the input grid that encloses another object.
    input: input_grid
    output: target_object

  - action: determine_inner_color
    description: Find the primary color of the object enclosed by the target_object.
    input: target_object
    output: inner_color

  - action: calculate_gap
    description: The gap size between the original and copied object is equal to the inner_color.
    input: inner_color
    output: gap_size

  - action: determine_placement
    description: Decide placement direction (right or below) and calculate copy position based on target_object dimensions (width W, height H) and gap_size.
    input:
      - target_object (bounding box: r1, c1, r2, c2)
      - width (W)
      - height (H)
      - gap_size
    output:
      - placement_direction ('right' or 'below')
      - copy_top_left_corner (r_copy, c_copy)
    logic: |
      If H > W:
        placement_direction = 'below'
        copy_top_left_corner = (r2 + 1 + gap_size, c1)
      Else (W >= H):
        placement_direction = 'right'
        copy_top_left_corner = (r1, c2 + 1 + gap_size)

  - action: copy_object
    description: Extract the subgrid corresponding to the target_object's bounding box.
    input:
      - input_grid
      - target_object (bounding box)
    output: object_pattern (subgrid)

  - action: construct_output
    description: Create the output grid by placing the object_pattern copy into the input grid structure at the calculated position. Discard non-target objects from the input.
    input:
      - input_grid (containing only the target object and background)
      - object_pattern
      - copy_top_left_corner
    output: output_grid
