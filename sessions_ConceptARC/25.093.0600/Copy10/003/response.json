{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentifies a composite object (an outer shape enclosing an inner shape of a different color) in the input grid.\nDuplicates this object and places the copy adjacent to the original.\nThe gap between the original and the copy is determined by the color value of the inner shape (the minimum of the two colors).\nThe placement direction (right or below) depends on the object's bounding box aspect ratio (width vs. height).\nAll other objects in the input are discarded. The output grid size is determined by the space needed to contain the original and copied object.\n\nWorkflow:\n1. Find all connected components (objects) of non-zero cells.\n2. Identify the 'target' object: the one whose bounding box contains exactly two distinct non-zero colors.\n3. Extract properties: bounding box (r1, c1, r2, c2), width (W), height (H), the two colors.\n4. Extract the object pattern (subgrid) from the input based on the bounding box.\n5. Identify the 'inner' color as the minimum of the two colors.\n6. Calculate the gap size: gap = inner_color.\n7. Determine placement direction: 'below' if H > W, 'right' otherwise.\n8. Calculate the top-left coordinates (copy_r, copy_c) for the copied object based on direction and gap.\n9. Calculate the required dimensions for the output grid (out_rows, out_cols) to hold the original and the copy.\n10. Create the output grid, initialized with zeros.\n11. Place the original object pattern into the output grid at its original relative position (r1, c1).\n12. Place the copied object pattern into the output grid at the calculated position (copy_r, copy_c).\n13. Return the output grid as a list of lists.\n\"\"\"\n\ndef find_connected_components(grid):\n    \"\"\"Finds all connected components of non-zero cells using BFS.\"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    components = []\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and not visited[r, c]:\n                component_cells = set()\n                q = deque([(r, c)])\n                visited[r, c] = True\n                component_cells.add((r, c))\n                component_colors = {grid[r,c]}\n\n                while q:\n                    row, col = q.popleft()\n                    component_colors.add(grid[row, col])\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] != 0 and not visited[nr, nc]:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n                            component_cells.add((nr, nc))\n                \n                # Store component cells and their colors\n                components.append({'cells': component_cells, 'colors': component_colors})\n    return components\n\ndef get_bounding_box(component_cells):\n    \"\"\"Calculates the bounding box (min_r, min_c, max_r, max_c) for a set of cells.\"\"\"\n    if not component_cells:\n        return None\n    min_r = min(r for r, c in component_cells)\n    min_c = min(c for r, c in component_cells)\n    max_r = max(r for r, c in component_cells)\n    max_c = max(c for r, c in component_cells)\n    return min_r, min_c, max_r, max_c\n\ndef transform(input_grid_list):\n    \"\"\"\n    Transforms the input grid according to the specified object duplication rule.\n    \"\"\"\n    input_grid = np.array(input_grid_list, dtype=int)\n    rows, cols = input_grid.shape\n\n    # 1. Find all connected components\n    components = find_connected_components(input_grid)\n\n    target_object_info = None\n\n    # 2. Identify the 'target' object\n    for component_data in components:\n        cells = component_data['cells']\n        if not cells: continue\n        \n        # Calculate bounding box for the component itself\n        comp_bbox = get_bounding_box(cells)\n        if comp_bbox is None: continue\n        r1_comp, c1_comp, r2_comp, c2_comp = comp_bbox\n\n        # Extract subgrid based on the component's bounding box\n        subgrid = input_grid[r1_comp:r2_comp+1, c1_comp:c2_comp+1]\n\n        # Find unique non-zero colors *within the component's bounding box*\n        unique_colors_in_bbox = set(np.unique(subgrid[subgrid != 0]))\n\n        # Target object has exactly two distinct non-zero colors in its bounding box\n        if len(unique_colors_in_bbox) == 2:\n            width = r2_comp - r1_comp + 1\n            height = c2_comp - c1_comp + 1\n            # IMPORTANT: The original code swapped width and height calculation. Fixing it.\n            height = r2_comp - r1_comp + 1\n            width = c2_comp - c1_comp + 1\n            \n            target_object_info = {\n                 'bbox': comp_bbox,\n                 'colors': list(unique_colors_in_bbox),\n                 'width': width,\n                 'height': height\n             }\n            break # Assume only one such object\n\n    if target_object_info is None:\n        # Handle cases where no target object is found (e.g., return original or empty)\n        # Based on examples, we expect one target. If not, returning the input might be safest.\n        # print(\"Warning: No target object found matching criteria.\")\n        return input_grid_list \n\n    # 3. Extract properties\n    bbox = target_object_info['bbox']\n    colors = target_object_info['colors']\n    width = target_object_info['width']\n    height = target_object_info['height']\n    r1, c1, r2, c2 = bbox\n\n    # 4. Extract the object pattern\n    object_pattern = input_grid[r1:r2+1, c1:c2+1]\n\n    # 5. Identify the 'inner' color (minimum of the two non-zero colors)\n    inner_color = min(colors)\n\n    # 6. Calculate the gap size\n    gap = inner_color\n\n    # 7. Determine placement direction\n    if height > width:\n        placement_direction = 'below'\n    else: # width >= height\n        placement_direction = 'right'\n\n    # 8. Calculate the top-left coordinates for the copy\n    if placement_direction == 'below':\n        copy_r = r2 + 1 + gap\n        copy_c = c1\n        # 9. Determine the required dimensions for the output grid\n        out_rows = copy_r + height\n        out_cols = c1 + width # Width determined by original position + pattern width\n    else: # placement_direction == 'right'\n        copy_r = r1\n        copy_c = c2 + 1 + gap\n        # 9. Determine the required dimensions for the output grid\n        out_rows = r1 + height # Height determined by original position + pattern height\n        out_cols = copy_c + width\n\n    # 10. Create the output grid, initialized with zeros\n    # Ensure output grid is large enough, using calculated dimensions\n    output_grid = np.zeros((out_rows, out_cols), dtype=int)\n\n    # 11. Place the original object pattern into the output grid\n    # Check bounds just in case, although calculation should be correct\n    if r1+height <= out_rows and c1+width <= out_cols:\n        output_grid[r1:r1+height, c1:c1+width] = object_pattern\n    else:\n        print(f\"Warning: Original placement out of bounds: ({r1}:{r1+height}, {c1}:{c1+width}) vs ({out_rows}, {out_cols})\")\n\n\n    # 12. Place the copied object pattern into the output grid\n    # Check bounds just in case\n    if copy_r+height <= out_rows and copy_c+width <= out_cols:\n         output_grid[copy_r:copy_r+height, copy_c:copy_c+width] = object_pattern\n    else:\n        print(f\"Warning: Copy placement out of bounds: ({copy_r}:{copy_r+height}, {copy_c}:{copy_c+width}) vs ({out_rows}, {out_cols})\")\n\n\n    # 13. Return the output grid as a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 13557,
    "candidates_token_count": 2114,
    "total_token_count": 15671,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 28.141992,
  "retries": 1
}