{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentifies \"valid frame colors\" by checking if treating a color as a wall during a background flood fill isolates other non-zero colors. \nPerforms a final background flood fill treating all valid frame colors as walls to determine \"external\" cells.\nCreates the output grid:\n- Cells with a valid frame color retain their color.\n- External cells retain their original color.\n- Internal cells (not frame color, not external) take the color of an adjacent valid frame color cell from the input grid.\n\"\"\"\n\ndef _get_neighbors(r, c, rows, cols):\n    \"\"\" Helper to get valid 4-connectivity neighbors. \"\"\"\n    neighbors = []\n    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n        nr, nc = r + dr, c + dc\n        if 0 <= nr < rows and 0 <= nc < cols:\n            neighbors.append((nr, nc))\n    return neighbors\n\ndef _flood_fill(grid, start_coords, wall_colors):\n    \"\"\"\n    Performs a flood fill (BFS) starting from start_coords.\n    Returns a set of reachable coordinates, avoiding cells with colors in wall_colors set.\n    \"\"\"\n    rows, cols = grid.shape\n    q = deque(start_coords)\n    reachable = set(start_coords)\n    \n    # Ensure start coordinates themselves aren't walls, although background (0) shouldn't be.\n    initial_q = deque()\n    for r, c in start_coords:\n         if grid[r,c] not in wall_colors:\n              initial_q.append((r,c))\n         # Add wall start coords to reachable if they started there, though usually they are 0\n         # else:\n         #     reachable.add((r,c)) # Not needed if start_coords are guaranteed non-wall\n\n    q = initial_q # Use filtered queue\n\n    visited = set(start_coords) # Keep track of visited to avoid cycles and redundant checks\n\n    while q:\n        r, c = q.popleft()\n        reachable.add((r, c)) # Mark current cell as reachable\n\n        for nr, nc in _get_neighbors(r, c, rows, cols):\n            neighbor_coord = (nr, nc)\n            # Check if neighbor is reachable: not already visited and not a wall color\n            if neighbor_coord not in visited and grid[nr, nc] not in wall_colors:\n                visited.add(neighbor_coord)\n                q.append(neighbor_coord)\n\n    return reachable\n\n\ndef _find_valid_frame_colors(grid):\n    \"\"\"\n    Identifies the set of valid frame colors.\n    A color Cf is a valid frame color if treating it as a wall during a background\n    flood fill leaves at least one other non-zero, non-Cf cell unreachable.\n    \"\"\"\n    rows, cols = grid.shape\n    non_zero_colors = np.unique(grid[grid != 0])\n    valid_frame_colors = set()\n\n    if len(non_zero_colors) < 2:\n        return valid_frame_colors # Need at least two non-zero colors\n\n    background_coords = list(zip(*np.where(grid == 0)))\n    if not background_coords: # Handle grids with no background\n        # In this specific problem context, background always seems to exist.\n        # If not, the definition of \"external\" breaks down. Assume background exists.\n         pass\n\n    all_non_zero_coords = list(zip(*np.where(grid != 0)))\n\n    for potential_frame_color in non_zero_colors:\n        # Perform test flood fill from background, treating potential_frame_color as the *only* wall\n        # We need a single color wall set for this test fill\n        wall_set_test = {potential_frame_color}\n        reachable_test = _flood_fill(grid, background_coords, wall_set_test)\n\n        # Check if any non-zero cell (that isn't the potential frame color) is *not* reachable\n        unreachable_internal_found = False\n        for r_nz, c_nz in all_non_zero_coords:\n            if grid[r_nz, c_nz] != potential_frame_color:\n                if (r_nz, c_nz) not in reachable_test:\n                    unreachable_internal_found = True\n                    break # Found an unreachable internal cell for this potential frame color\n\n        if unreachable_internal_found:\n            valid_frame_colors.add(potential_frame_color) # This is a valid frame color\n\n    return valid_frame_colors\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on frame color identification and flood fill.\n    \"\"\"\n    input_grid_np = np.array(input_grid)\n    rows, cols = input_grid_np.shape\n    output_grid = np.copy(input_grid_np) # Initialize output as a copy\n\n    # 1. Identify the set of valid frame colors\n    valid_frame_colors = _find_valid_frame_colors(input_grid_np)\n\n    # If no valid frame colors are found, likely implies no enclosed regions exist as per the task definition. Return original.\n    if not valid_frame_colors:\n        return input_grid # Return the original grid as list of lists\n\n    # 2. Determine the final set of external cells using all valid frame colors as walls\n    background_coords = list(zip(*np.where(input_grid_np == 0)))\n    if not background_coords and np.all(input_grid_np != 0):\n         # Edge case: grid completely filled, no background.\n         # Based on examples, this shouldn't happen. Assume background exists.\n         # If it did happen, all non-frame cells would arguably be internal.\n         external_cells_final = set()\n    elif not background_coords: # No background but some zeros might exist isolatedly? Seems unlikely.\n        external_cells_final = set() # Default to no external cells if background finding fails unexpectedly\n    else:\n        external_cells_final = _flood_fill(input_grid_np, background_coords, valid_frame_colors)\n\n    # 3. Generate the output grid by iterating and applying rules\n    for r in range(rows):\n        for c in range(cols):\n            input_color = input_grid_np[r, c]\n            coord = (r, c)\n\n            # Rule: If the cell has a valid frame color, keep it.\n            if input_color in valid_frame_colors:\n                output_grid[r, c] = input_color\n                continue # Skip other checks for this cell\n\n            # Rule: If the cell is external, keep its original color.\n            # Note: This also correctly keeps background (0) cells that are external.\n            if coord in external_cells_final:\n                output_grid[r, c] = input_color\n                continue # Skip other checks for this cell\n\n            # Rule: Otherwise (cell is internal and not a frame color), change it\n            #       to the color of an adjacent valid frame color cell.\n            else:\n                adjacent_frame_color = -1 # Default/error value\n                found_neighbor = False\n                for nr, nc in _get_neighbors(r, c, rows, cols):\n                    neighbor_color = input_grid_np[nr, nc]\n                    if neighbor_color in valid_frame_colors:\n                        adjacent_frame_color = neighbor_color\n                        found_neighbor = True\n                        break # Found one, use it\n\n                if found_neighbor:\n                    output_grid[r, c] = adjacent_frame_color\n                else:\n                    # This case *shouldn't* happen if the logic is correct for the given examples.\n                    # An internal, non-frame cell must be adjacent to a frame cell that separates it.\n                    # If it happens, keep original color as a fallback? Or raise error? Keep original for now.\n                    output_grid[r, c] = input_color # Fallback\n                    # print(f\"Warning: Internal cell ({r},{c}) with color {input_color} had no valid frame neighbor.\")\n\n\n    return output_grid.tolist() # Convert back to list of lists\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 13527,
    "candidates_token_count": 1909,
    "total_token_count": 15436,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 24.032329,
  "retries": 1
}