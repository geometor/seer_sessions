{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\n\n\"\"\"\nFilters a 2D grid of digits. For each non-zero cell in the input grid,\nit checks its 8 neighbors (Moore neighborhood). If at least one neighbor\nin the input grid has the same value as the cell, the cell's value is \nkept in the output grid. Otherwise (if the cell value is 0 or if it's \nnon-zero but has no neighbors with the same value), the corresponding \ncell in the output grid is set to 0.\n\"\"\"\n\ndef _is_valid(r, c, num_rows, num_cols):\n    \"\"\"\n    Helper function to check if coordinates (r, c) are within the grid boundaries.\n\n    Args:\n        r (int): Row index.\n        c (int): Column index.\n        num_rows (int): Total number of rows in the grid.\n        num_cols (int): Total number of columns in the grid.\n\n    Returns:\n        bool: True if the coordinates are valid, False otherwise.\n    \"\"\"\n    return 0 <= r < num_rows and 0 <= c < num_cols\n\ndef _has_same_neighbor(grid, r, c, value, num_rows, num_cols):\n    \"\"\"\n    Helper function to check if any of the 8 neighbors of cell (r, c) \n    in the grid has the specified value.\n\n    Args:\n        grid (list[list[int]]): The input grid.\n        r (int): Row index of the cell to check neighbors for.\n        c (int): Column index of the cell to check neighbors for.\n        value (int): The value to look for in the neighbors.\n        num_rows (int): Total number of rows in the grid.\n        num_cols (int): Total number of columns in the grid.\n\n    Returns:\n        bool: True if at least one neighbor has the specified value, False otherwise.\n    \"\"\"\n    # Define relative coordinates for the 8 neighbors (Moore neighborhood)\n    neighbor_deltas = [\n        (-1, -1), (-1, 0), (-1, 1),\n        (0, -1),          (0, 1),\n        (1, -1), (1, 0), (1, 1)\n    ]\n    \n    # Iterate through all potential neighbor positions\n    for dr, dc in neighbor_deltas:\n        nr, nc = r + dr, c + dc\n        \n        # Check if the neighbor coordinates are valid (within grid bounds)\n        if _is_valid(nr, nc, num_rows, num_cols):\n            # Check if the neighbor cell in the grid has the target value\n            if grid[nr][nc] == value:\n                return True # Found a neighbor with the same value\n\n    # If the loop completes without finding a matching neighbor\n    return False\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on neighbor values.\n\n    A non-zero cell retains its value if at least one of its 8 neighbors \n    has the same value. Otherwise, the cell becomes 0. Zero cells remain 0.\n\n    Args:\n        input_grid (list[list[int]]): A 2D list representing the input grid.\n\n    Returns:\n        list[list[int]]: A new 2D list representing the transformed grid.\n    \"\"\"\n    # Handle empty or invalid input grid\n    if not input_grid or not isinstance(input_grid, list) or not isinstance(input_grid[0], list):\n        # Or raise an error, depending on desired behavior\n        return [] \n\n    num_rows = len(input_grid)\n    num_cols = len(input_grid[0])\n\n    # Initialize the output grid with the same dimensions, filled with zeros\n    # Using list comprehension for initialization\n    output_grid = [[0 for _ in range(num_cols)] for _ in range(num_rows)]\n\n    # Iterate through each cell of the input grid\n    for r in range(num_rows):\n        for c in range(num_cols):\n            cell_value = input_grid[r][c]\n\n            # Process only non-zero cells\n            if cell_value != 0:\n                # Check if the current cell has at least one neighbor with the same value\n                # Pass the original input_grid to the helper function for checking neighbors\n                if _has_same_neighbor(input_grid, r, c, cell_value, num_rows, num_cols):\n                    # If it has a matching neighbor, retain the value in the output grid\n                    output_grid[r][c] = cell_value\n                # Else: The cell value becomes 0 (already initialized)\n\n            # If cell_value is 0, the output_grid[r][c] remains 0 (as initialized)\n\n    # Return the newly constructed output grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2527,
    "candidates_token_count": 1108,
    "total_token_count": 3635,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 21.389533,
  "retries": 1
}