{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nShifts a pattern composed of '2's horizontally to the right within a 2D grid.\nThe amount of shift is determined by the distance from the rightmost cell of the\npattern to the right edge of the grid. The pattern is moved such that its \nrightmost cell aligns with the grid's right edge.\n\"\"\"\n\nimport numpy as np\nfrom typing import List, Tuple\n\ndef find_object_cells(grid: np.ndarray, object_value: int) -> List[Tuple[int, int]]:\n    \"\"\"Finds all coordinates (row, col) of cells with the specified object_value.\"\"\"\n    rows, cols = np.where(grid == object_value)\n    return list(zip(rows, cols))\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transforms the input grid by shifting the '2' pattern horizontally to the right edge.\n\n    Args:\n        input_grid: A list of lists representing the 2D grid.\n\n    Returns:\n        A list of lists representing the transformed 2D grid.\n    \"\"\"\n    # Convert input list of lists to a NumPy array for easier manipulation\n    grid_np = np.array(input_grid, dtype=int)\n    rows, cols = grid_np.shape\n    object_value = 2\n    background_value = 0\n\n    # Find the coordinates of all cells belonging to the object (value '2')\n    object_cells = find_object_cells(grid_np, object_value)\n\n    # If no object is found, return the original grid or an empty one\n    # Based on examples, the object always exists. If not, return original.\n    if not object_cells:\n        return input_grid\n\n    # Find the maximum column index occupied by the object\n    max_col = -1\n    for r, c in object_cells:\n        if c > max_col:\n            max_col = c\n\n    # Calculate the required horizontal shift amount\n    # shift = (grid_width - 1) - max_col\n    grid_width = cols\n    shift_amount = (grid_width - 1) - max_col\n\n    # Initialize the output grid with the background value\n    output_grid_np = np.full((rows, cols), background_value, dtype=int)\n\n    # Place the object in the new shifted position in the output grid\n    for r, c in object_cells:\n        new_c = c + shift_amount\n        # Ensure the new column index is within grid bounds (should be by calculation)\n        if 0 <= new_c < cols:\n            output_grid_np[r, new_c] = object_value\n\n    # Convert the NumPy array back to a list of lists for the final output\n    output_grid = output_grid_np.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1777,
    "candidates_token_count": 654,
    "total_token_count": 2431,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.292432,
  "retries": 1
}