{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies the unique non-zero integer value within an input 2D NumPy array (grid). \nFinds the middle row of the grid.\nCounts the occurrences of the unique non-zero integer in that middle row.\nReturns a 1D NumPy array consisting of the unique non-zero integer repeated that many times.\n\"\"\"\n\nimport numpy as np\nimport math\n\n# Helper function to find the unique non-zero value in the grid\ndef find_unique_non_zero_np(grid):\n    \"\"\"Finds the unique non-zero integer value present in the NumPy grid.\"\"\"\n    unique_elements = np.unique(grid)\n    non_zero_elements = unique_elements[unique_elements != 0]\n    if len(non_zero_elements) == 1:\n        # Convert NumPy integer type to standard Python int if needed,\n        # although direct use is usually fine.\n        return int(non_zero_elements[0]) \n    elif len(non_zero_elements) == 0:\n         # Handle case with no non-zero elements if necessary, \n         # though examples suggest one always exists.\n         # Returning 0 or None might be options depending on desired behavior.\n         # Based on examples, we assume a non-zero element exists.\n         # For safety, return 0 if none found, though this might lead to \n         # incorrect results if 0 is a valid target in other contexts.\n        return 0 # Or raise an error: raise ValueError(\"No non-zero element found\")\n    else:\n        # Handle case with multiple unique non-zero elements if necessary.\n        # Based on examples, we assume only one exists.\n        raise ValueError(\"Multiple unique non-zero elements found\")\n\n# Helper function to find the middle row\ndef find_center_row_np(grid):\n    \"\"\"Identifies and returns the middle row of the NumPy grid.\"\"\"\n    num_rows = grid.shape[0]\n    # Calculate the index of the middle row (0-based index)\n    center_row_index = math.floor(num_rows / 2) \n    return grid[center_row_index]\n\n# Helper function to count occurrences in the row\ndef count_value_in_row_np(row, value):\n    \"\"\"Counts the occurrences of a specific value in a NumPy row.\"\"\"\n    return np.count_nonzero(row == value)\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Transforms the input grid according to the specified rule.\n    \n    Args:\n        input_grid: A 2D NumPy array representing the input grid.\n        \n    Returns:\n        A 1D NumPy array containing the repeated unique non-zero value.\n    \"\"\"\n\n    # 1. Identify the unique non-zero target value in the grid\n    target_value = find_unique_non_zero_np(input_grid)\n    \n    # 2. Find the middle row of the grid\n    center_row = find_center_row_np(input_grid)\n    \n    # 3. Count how many times the target value appears in the center row\n    repeat_count = count_value_in_row_np(center_row, target_value)\n    \n    # 4. Generate the final output 1D NumPy array\n    # Creates an array of length 'repeat_count' filled with 'target_value'\n    output_array = np.full(repeat_count, target_value, dtype=input_grid.dtype) \n                                                        # Match input dtype\n\n    return output_array\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5583,
    "candidates_token_count": 810,
    "total_token_count": 6393,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.583605,
  "retries": 1
}