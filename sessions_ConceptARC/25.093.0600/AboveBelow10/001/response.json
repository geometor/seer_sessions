{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid based on the pattern of non-zero 'source' cells.\n\n1. Initializes an output grid with the same dimensions as the input, filled with zeros.\n2. Identifies all 'source cells' (non-zero value) in the input grid, recording their row, column, and value. Assumes a single unique non-zero value exists.\n3. Determines the directional trend ('DownRight', 'DownLeft', 'DownVertical') of the source cells by comparing the coordinates of the first two source cells when sorted by row. Defaults to 'DownVertical' if fewer than two source cells exist.\n4. Iterates through each cell (r, c) of the output grid.\n5. For each output cell (r, c), it checks if there exists any source cell (r_s, c_s) satisfying a condition based on the determined trend:\n    - DownRight: r >= r_s AND c <= c_s\n    - DownLeft: r >= r_s AND c >= c_s\n    - DownVertical: r >= r_s AND c == c_s\n6. If such a source cell exists, the output cell output[r][c] is set to the source value.\n7. Returns the completed output grid.\n\"\"\"\n\nimport numpy as np\n\ndef find_source_cells(grid):\n    \"\"\"\n    Finds all non-zero cells in the grid.\n\n    Args:\n        grid (np.ndarray): The input grid.\n\n    Returns:\n        tuple: A tuple containing:\n            - list: A list of tuples, where each tuple is (row, col, value) for a source cell.\n            - int or None: The unique non-zero value found, or None if no non-zero cells exist.\n    \"\"\"\n    source_cells = []\n    source_value = None\n    non_zero_indices = np.argwhere(grid != 0)\n    if non_zero_indices.size > 0:\n        # Assuming only one unique non-zero value as per examples\n        source_value = grid[non_zero_indices[0][0], non_zero_indices[0][1]]\n        for r, c in non_zero_indices:\n            source_cells.append((r, c, grid[r, c]))\n        # Sort by row primarily, then column secondarily\n        source_cells.sort()\n    return source_cells, source_value\n\ndef determine_trend(source_cells):\n    \"\"\"\n    Determines the pattern trend based on the first two source cells (sorted by row).\n\n    Args:\n        source_cells (list): List of source cell tuples (row, col, value), sorted by row.\n\n    Returns:\n        str: The trend ('DownRight', 'DownLeft', 'DownVertical').\n    \"\"\"\n    if len(source_cells) < 2:\n        # Default trend if only 0 or 1 source cell\n        return \"DownVertical\"\n\n    r1, c1, _ = source_cells[0]\n    # Find the next source cell in a different row to determine trend reliably\n    r2, c2 = -1, -1\n    for i in range(1, len(source_cells)):\n        if source_cells[i][0] > r1:\n             r2, c2, _ = source_cells[i]\n             break\n    \n    # If all source cells are in the same row, or only one source cell was found effectively\n    if r2 == -1:\n         return \"DownVertical\" # Or perhaps Horizontal? Based on examples, seems DownVertical is safer assumption\n\n    if c2 > c1:\n        return \"DownRight\"\n    elif c2 < c1:\n        return \"DownLeft\"\n    else:\n        return \"DownVertical\"\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n    \"\"\"\n    # Convert input to numpy array for easier handling\n    grid = np.array(input_grid)\n    rows, cols = grid.shape\n\n    # Initialize output grid with zeros\n    output_grid = np.zeros_like(grid)\n\n    # Find source cells and the source value\n    source_cells, source_value = find_source_cells(grid)\n\n    # If no source cells, return the zero grid\n    if not source_cells:\n        return output_grid.tolist() # Return as list of lists if that's the expected format\n\n    # Determine the trend of the source pattern\n    trend = determine_trend(source_cells)\n\n    # Iterate through each cell of the output grid\n    for r in range(rows):\n        for c in range(cols):\n            # Check against all source cells\n            fill_cell = False\n            for r_s, c_s, val_s in source_cells:\n                # Check if the current cell (r, c) should be filled based on the trend\n                # Condition 1: Current row must be at or below the source row\n                if r >= r_s:\n                    # Condition 2: Horizontal position depends on the trend\n                    if trend == \"DownRight\" and c <= c_s:\n                        fill_cell = True\n                        break # Found a source cell that triggers fill, no need to check others\n                    elif trend == \"DownLeft\" and c >= c_s:\n                        fill_cell = True\n                        break # Found a source cell that triggers fill\n                    elif trend == \"DownVertical\" and c == c_s:\n                        fill_cell = True\n                        break # Found a source cell that triggers fill\n            \n            # If any source cell satisfied the condition, fill the output cell\n            if fill_cell:\n                output_grid[r, c] = source_value\n\n    # Return the result as a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3038,
    "candidates_token_count": 1312,
    "total_token_count": 4350,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 20.267228,
  "retries": 1
}