{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid based on identifying a 'solid' row (all 2s) and a 'dense' column (most 2s).\nThe output grid is initialized with 0s. The solid row from the input is copied to the output.\nThe column identified as dense in the input is filled entirely with 2s in the output.\n\"\"\"\n\nimport numpy as np\n\ndef find_solid_row(grid):\n    \"\"\"Finds the index of the row where all cell values are 2.\"\"\"\n    for r_idx, row in enumerate(grid):\n        if all(cell == 2 for cell in row):\n            return r_idx\n    return -1 # Should not happen based on problem description\n\ndef find_dense_column(grid):\n    \"\"\"Finds the index of the column with the maximum count of 2s.\"\"\"\n    num_rows = len(grid)\n    num_cols = len(grid[0]) if num_rows > 0 else 0\n    max_twos = -1\n    dense_col_idx = -1\n\n    for c_idx in range(num_cols):\n        count_twos = 0\n        for r_idx in range(num_rows):\n            if grid[r_idx][c_idx] == 2:\n                count_twos += 1\n        \n        # If this column has more 2s than the current max, update\n        # If counts are equal, the first one found (smallest index) is kept\n        if count_twos > max_twos:\n            max_twos = count_twos\n            dense_col_idx = c_idx\n            \n    return dense_col_idx\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule: copies the solid row and fills the dense column with 2s.\n    \n    Args:\n        input_grid (list of lists): The input grid containing 0s and 2s.\n\n    Returns:\n        list of lists: The transformed output grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation, though lists work too\n    input_np = np.array(input_grid)\n    num_rows, num_cols = input_np.shape\n\n    # 1. Initialize the output grid with 0s\n    output_grid = np.zeros_like(input_np)\n\n    # 2. Find the index of the solid row (all 2s)\n    solid_row_index = find_solid_row(input_grid) # Use original list version for helper\n\n    # 3. Find the index of the dense column (most 2s)\n    dense_column_index = find_dense_column(input_grid) # Use original list version for helper\n\n    # 4. Copy the solid row from the input to the output grid\n    if solid_row_index != -1:\n        output_grid[solid_row_index, :] = input_np[solid_row_index, :]\n\n    # 5. Fill the dense column in the output grid with 2s\n    if dense_column_index != -1:\n        output_grid[:, dense_column_index] = 2\n        \n    # 6. Return the modified output grid (converted back to list of lists if needed)\n    return output_grid.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1621,
    "candidates_token_count": 757,
    "total_token_count": 2378,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.278985,
  "retries": 1
}