{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nTransforms the input grid based on the counts and alignment of non-zero colors (specifically 2 and 4).\n\n1. Identifies the locations and counts of cells with values 2 and 4.\n2. Determines which color has the maximum count (`MaxColor`) and which has the minimum count (`MinColor`).\n   - Assumes based on examples that counts are unequal, specifically two '2's and one '4'.\n3. Finds the positions of all cells containing the `MaxColor`.\n4. Checks if all `MaxColor` cells are horizontally aligned (share the same row index).\n5. If the `MaxColor` cells are horizontally aligned:\n   - Sets the value of the `MinColor` cell(s) to 0 in the output grid.\n6. If the `MaxColor` cells are *not* horizontally aligned:\n   - Sets the value of the `MaxColor` cells to 0 in the output grid.\n7. Returns the modified grid. If counts are equal or only one non-zero color exists, returns the original grid.\n\"\"\"\n\ndef find_colored_cells(grid, color):\n    \"\"\"Finds the coordinates of all cells with a specific color.\"\"\"\n    rows, cols = np.where(grid == color)\n    return list(zip(rows, cols))\n\ndef check_horizontal_alignment(positions):\n    \"\"\"Checks if all positions share the same row index.\"\"\"\n    if not positions or len(positions) < 2:\n        return False  # Cannot be aligned if fewer than 2 points\n    first_row = positions[0][0]\n    return all(pos[0] == first_row for pos in positions)\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule based on color counts and alignment.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    grid = np.array(input_grid, dtype=int)\n    # Initialize output_grid as a copy of the input\n    output_grid = grid.copy()\n\n    # Find positions of non-zero colors (assuming 2 and 4 based on examples)\n    pos_2 = find_colored_cells(grid, 2)\n    pos_4 = find_colored_cells(grid, 4)\n\n    # Get counts\n    count_2 = len(pos_2)\n    count_4 = len(pos_4)\n\n    # If only one color type exists, or counts are equal, or no non-zero cells, return original\n    if (count_2 == 0 and count_4 == 0) or \\\n       (count_2 > 0 and count_4 == 0) or \\\n       (count_2 == 0 and count_4 > 0) or \\\n       (count_2 == count_4):\n        return output_grid.tolist() # Return copy as list of lists\n\n    # Determine MaxColor and MinColor based on counts\n    if count_2 > count_4:\n        MaxColor = 2\n        MinColor = 4\n        MaxColor_Positions = pos_2\n        MinColor_Positions = pos_4\n    else: # count_4 > count_2\n        MaxColor = 4\n        MinColor = 2\n        MaxColor_Positions = pos_4\n        MinColor_Positions = pos_2\n        # Note: The examples only show count_2 > count_4 (2 vs 1).\n        # If the opposite case occurs, the logic below still applies,\n        # but it hasn't been explicitly tested by the examples.\n\n    # Check horizontal alignment of the MaxColor cells\n    is_horizontally_aligned = check_horizontal_alignment(MaxColor_Positions)\n\n    # Apply the transformation rule\n    if is_horizontally_aligned:\n        # Remove the MinColor cells\n        for r, c in MinColor_Positions:\n            output_grid[r, c] = 0\n    else:\n        # Remove the MaxColor cells\n        for r, c in MaxColor_Positions:\n            output_grid[r, c] = 0\n\n    # Convert the result back to a list of lists before returning\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3168,
    "candidates_token_count": 948,
    "total_token_count": 4116,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 18.17938,
  "retries": 1
}