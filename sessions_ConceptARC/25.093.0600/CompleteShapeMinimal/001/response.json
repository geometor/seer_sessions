{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\ndef find_foreground_color(grid):\n    \"\"\"Finds the dominant non-zero color in the grid.\"\"\"\n    unique_values = np.unique(grid)\n    for val in unique_values:\n        if val != 0:\n            return val\n    return 0 # Should ideally not happen based on task description\n\ndef transform(input_grid):\n    \"\"\"\n    Identifies the dominant non-zero digit (foreground color) in the input grid.\n    Finds all background cells (0s) that are not connected to the grid's border\n    via a path of other background cells (internal holes).\n    Changes the value of these internal background cells to the foreground color.\n    Returns the modified grid.\n    \"\"\"\n    # Convert input list of lists to a numpy array for easier manipulation\n    grid = np.array(input_grid)\n    rows, cols = grid.shape\n\n    # Initialize output_grid as a copy of the input\n    output_grid = grid.copy()\n\n    # 1. Identify the foreground color\n    foreground_color = find_foreground_color(grid)\n    if foreground_color == 0: # Handle case where grid is all zeros\n        return output_grid\n\n    # 2. Identify external background cells using BFS\n    visited = np.full(grid.shape, False, dtype=bool)\n    q = deque()\n\n    # Add all border background cells to the queue\n    for r in range(rows):\n        for c in [0, cols - 1]: # First and last columns\n            if grid[r, c] == 0 and not visited[r, c]:\n                visited[r, c] = True\n                q.append((r, c))\n    for c in range(cols):\n        for r in [0, rows - 1]: # First and last rows\n             if grid[r, c] == 0 and not visited[r, c]:\n                visited[r, c] = True\n                q.append((r, c))\n\n    # Perform BFS to mark all connected external background cells\n    while q:\n        r, c = q.popleft()\n\n        # Explore neighbors (up, down, left, right)\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n\n            # Check bounds and if neighbor is background and not visited\n            if 0 <= nr < rows and 0 <= nc < cols and \\\n               grid[nr, nc] == 0 and not visited[nr, nc]:\n                visited[nr, nc] = True\n                q.append((nr, nc))\n\n    # 3. Fill internal holes (background cells not marked as visited)\n    for r in range(rows):\n        for c in range(cols):\n            # If a cell is background (0) and wasn't visited by the BFS (meaning it's internal)\n            if grid[r, c] == 0 and not visited[r, c]:\n                # Change its value in the output grid to the foreground color\n                output_grid[r, c] = foreground_color\n\n    # Convert back to list of lists if necessary for the environment\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1778,
    "candidates_token_count": 751,
    "total_token_count": 2529,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.127919,
  "retries": 1
}