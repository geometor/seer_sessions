{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Tuple, Optional\n\n\"\"\"\nTransforms a 10x10 grid based on the adjacency of the digit 2 to the unique digit 4.\n\n1.  Locates the unique cell containing the digit 4.\n2.  Checks its 8 immediate neighbours (Moore neighbourhood) for the presence of the digit 2.\n3.  Conditional Transformation Rule:\n    *   If at least one neighbour contains the digit 2: \n        - Keep the digit 4 in its original position.\n        - Change all occurrences of the digit 2 in the entire grid to 0.\n    *   If none of the neighbours contain the digit 2:\n        - Change the digit 4 to 0.\n        - Keep all occurrences of the digit 2 unchanged.\n4.  Digits 0 remain unchanged in all cases.\n\n*(Note: This rule describes the transformation observed in 5 out of the 7 provided examples. Examples `train_3` and `test_2` are inconsistent with the \"If none of the neighbours contain the digit 2\" step, as their expected outputs follow the logic of the \"If at least one neighbour contains the digit 2\" step despite having no adjacent 2.)*\n\"\"\"\n\ndef find_digit_location(grid: np.ndarray, digit: int) -> Optional[Tuple[int, int]]:\n    \"\"\"Finds the coordinates (row, col) of the first occurrence of a specific digit.\"\"\"\n    locations = np.where(grid == digit)\n    # Check if the digit was found\n    if len(locations[0]) > 0:\n        # Return the coordinates of the first instance found\n        return (int(locations[0][0]), int(locations[1][0])) \n    return None # Digit not found\n\ndef check_neighbors_for_digit(grid: np.ndarray, center_pos: Tuple[int, int], digit: int) -> bool:\n    \"\"\"Checks the 8 neighbours (Moore neighborhood) of a central cell for a specific digit.\"\"\"\n    rows, cols = grid.shape\n    center_r, center_c = center_pos\n    \n    # Iterate through the 3x3 neighbourhood around the center cell\n    for dr in range(-1, 2): # Delta row: -1, 0, 1\n        for dc in range(-1, 2): # Delta column: -1, 0, 1\n            # Skip the center cell itself\n            if dr == 0 and dc == 0:\n                continue\n            \n            # Calculate neighbour coordinates\n            nr, nc = center_r + dr, center_c + dc\n            \n            # Check if the neighbour coordinates are within the grid boundaries\n            if 0 <= nr < rows and 0 <= nc < cols:\n                # Check if the neighbour cell contains the target digit\n                if grid[nr, nc] == digit:\n                    return True # Found the digit in a neighbour, no need to check further\n                    \n    return False # Digit not found in any neighbour\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"Applies the transformation rule based on the neighbours of the digit 4.\"\"\"\n    \n    # Convert input list of lists to a NumPy array for efficient processing\n    grid_np = np.array(input_grid, dtype=int)\n    \n    # 1. Initialization: Create a copy of the input grid to serve as the output grid.\n    output_grid = grid_np.copy()\n    \n    # 2. Locate Target: Find the coordinates (r4, c4) of the cell containing the value 4.\n    pos_4 = find_digit_location(grid_np, 4)\n    \n    # If 4 is not found in the grid, return the original grid copy (as list of lists).\n    if pos_4 is None:\n        return output_grid.tolist() \n\n    # 3. Check Adjacency: Determine if any neighbours of the cell at pos_4 contain the value 2.\n    has_adjacent_2 = check_neighbors_for_digit(grid_np, pos_4, 2)\n    \n    # 4. Conditional Transformation: Apply changes based on the adjacency check.\n    if has_adjacent_2:\n        # If a '2' neighbour exists: Keep '4', change all '2's to '0' globally.\n        # '4' is already preserved in the copy.\n        # Change all cells with value 2 to 0 in the output grid.\n        output_grid[output_grid == 2] = 0\n    else:\n        # If no '2' neighbour exists: Change '4' to '0', keep all '2's.\n        # Change the value at the position of '4' to 0 in the output grid.\n        r4, c4 = pos_4\n        output_grid[r4, c4] = 0\n        # '2's are already preserved in the copy.\n\n    # 5. Finalize: Convert the NumPy array back to a list of lists for the return value.\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 15297,
    "candidates_token_count": 1159,
    "total_token_count": 16456,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.516933,
  "retries": 1
}