objects:
  - grid:
      description: A 10x10 matrix containing integer values 0, 2, and 4.
      properties:
        - dimensions: [10, 10]
        - cells: integers 0, 2, 4.
  - cell:
      description: An element within the grid.
      properties:
        - position: (row, column) tuple.
        - value: Integer (0, 2, or 4).
  - target_cell:
      description: The unique cell containing the value 4.
      properties:
        - value: 4
        - position: (r4, c4)
  - neighbor_cell:
      description: One of the 8 cells immediately surrounding the target_cell (horizontal, vertical, or diagonal).
      properties:
        - position: (r_neighbor, c_neighbor)
        - value: Integer (0, 2, or 4).
  - digit_2_cell:
      description: Any cell in the grid containing the value 2.
      properties:
        - value: 2
        - position: (r2, c2)

relationships:
  - adjacency_check:
      description: Determine if any neighbor_cell of the target_cell contains the value 2.
      condition_property: has_adjacent_2 (Boolean: True if at least one neighbor is 2, False otherwise)

actions:
  - find_target: Locate the target_cell (containing 4) and record its position (r4, c4).
  - check_neighbors: Evaluate the adjacency_check condition for the target_cell.
  - conditional_transform:
      description: Modify the grid based on the adjacency_check result.
      rule:
        if: has_adjacent_2 is True
        then:
          - preserve_target: Keep the value 4 in the target_cell at (r4, c4).
          - remove_all_2s: Change the value of all digit_2_cells in the grid to 0.
        else: # has_adjacent_2 is False
          - remove_target: Change the value of the target_cell at (r4, c4) to 0.
          - preserve_all_2s: Keep the value 2 in all digit_2_cells.
  - preserve_zeros: All cells with value 0 remain unchanged throughout the process.
  - create_output: Generate the final grid after applying the transformation.

metadata:
  - inconsistency_note: The provided examples `train_3` and `test_2` do not follow the 'else' condition of the conditional_transform rule. They have no adjacent '2' but result in the 'if' outcome (preserving 4, removing 2s). The described rule fits the other 5 examples.
