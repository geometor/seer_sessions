{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Tuple, Optional\n\n\"\"\"\nTransforms a 10x10 grid based on the neighbourhood of the digit 4.\n\n1.  Locate the unique cell containing the digit 4.\n2.  Check its 8 immediate neighbours (Moore neighbourhood) for the presence of the digit 2.\n3.  **Conditional Transformation:**\n    *   If at least one neighbour contains the digit 2: Keep the digit 4 in its position and change all occurrences of the digit 2 in the entire grid to 0.\n    *   If none of the neighbours contain the digit 2: Change the digit 4 to 0 and keep all occurrences of the digit 2 unchanged.\n4.  Digits 0 remain unchanged in all cases.\n\n*(Note: This rule aligns with most provided examples but contradicts the expected output for train_3 and test_2, where the '4' is kept despite having no '2' neighbours).*\n\"\"\"\n\ndef find_digit_location(grid: np.ndarray, digit: int) -> Optional[Tuple[int, int]]:\n    \"\"\"Finds the coordinates of the first occurrence of a specific digit in the grid.\"\"\"\n    locations = np.where(grid == digit)\n    # Check if the digit was found\n    if len(locations[0]) > 0:\n        # Assuming the target digit (like 4) is unique or we only care about the first one\n        return (int(locations[0][0]), int(locations[1][0])) \n    return None # Digit not found\n\ndef check_neighbors_for_digit(grid: np.ndarray, center_pos: Tuple[int, int], digit: int) -> bool:\n    \"\"\"Checks the 8 neighbours (Moore neighborhood) of a central cell for a specific digit.\"\"\"\n    rows, cols = grid.shape\n    center_r, center_c = center_pos\n    \n    # Iterate through the 3x3 neighbourhood around the center cell\n    for dr in range(-1, 2): # Delta row: -1, 0, 1\n        for dc in range(-1, 2): # Delta column: -1, 0, 1\n            # Skip the center cell itself\n            if dr == 0 and dc == 0:\n                continue\n            \n            # Calculate neighbour coordinates\n            nr, nc = center_r + dr, center_c + dc\n            \n            # Check if the neighbour coordinates are within the grid boundaries\n            if 0 <= nr < rows and 0 <= nc < cols:\n                # Check if the neighbour cell contains the target digit\n                if grid[nr, nc] == digit:\n                    return True # Found the digit in a neighbour, no need to check further\n                    \n    return False # Digit not found in any neighbour\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Applies the transformation rule based on the neighbours of the digit 4.\n    \"\"\"\n    # Convert input list of lists to a NumPy array for efficient processing\n    grid_np = np.array(input_grid, dtype=int)\n    \n    # Initialize output_grid as a copy of the input grid. Modifications will be made to this copy.\n    output_grid = grid_np.copy()\n    \n    # 1. Find the coordinates (r4, c4) of the cell containing the value 4\n    pos_4 = find_digit_location(grid_np, 4)\n    \n    # If 4 is not found in the grid, return the original grid copy\n    if pos_4 is None:\n        return output_grid.tolist() \n\n    # 2. Check the 8 neighbouring cells surrounding the location of 4 for the value 2\n    found_2_neighbor = check_neighbors_for_digit(grid_np, pos_4, 2)\n    \n    # 3. Apply conditional transformation based on whether a 2 neighbour was found\n    if found_2_neighbor:\n        # Condition 1: A neighbour contains 2.\n        # Keep the value 4 at its position (it's already in the copied output_grid).\n        # Replace all values 2 in the entire output grid with 0.\n        output_grid[output_grid == 2] = 0\n    else:\n        # Condition 2: None of the neighbours contain 2.\n        # Replace the value 4 with 0 in the output grid.\n        r4, c4 = pos_4\n        output_grid[r4, c4] = 0\n        # Keep all values 2 at their positions (they are already in the copied output_grid).\n\n    # 4. All cells with value 0 remain 0 (they were copied initially).\n\n    # Convert the final NumPy array back to a list of lists for the required output format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 16549,
    "candidates_token_count": 1100,
    "total_token_count": 17649,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.341762,
  "retries": 1
}