{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom typing import List, Tuple, Optional\n\n\"\"\"\nProcesses a 10x10 grid containing integers (primarily 0, 2, and 4).\nThe transformation rule depends on the spatial relationship between the unique digit 4 and any adjacent digits 2.\n\n1. Locate the cell containing the digit 4.\n2. Check its 8 immediate neighbours (horizontal, vertical, diagonal).\n3. If any neighbour contains the digit 2:\n    - Keep the digit 4 in its original position.\n    - Change all occurrences of the digit 2 in the entire grid to 0.\n4. If none of the neighbours contain the digit 2:\n    - Change the digit 4 to 0.\n    - Keep all occurrences of the digit 2 in their original positions.\n5. Digits 0 remain unchanged in all cases.\n\"\"\"\n\ndef find_digit_location(grid: np.ndarray, digit: int) -> Optional[Tuple[int, int]]:\n    \"\"\"Finds the first occurrence of a specific digit in the grid.\"\"\"\n    locations = np.where(grid == digit)\n    if len(locations[0]) > 0:\n        return (locations[0][0], locations[1][0]) # Return coordinates of the first found digit\n    return None # Digit not found\n\ndef check_neighbors_for_digit(grid: np.ndarray, center_pos: Tuple[int, int], digit: int) -> bool:\n    \"\"\"Checks the 8 neighbours of a central cell for a specific digit.\"\"\"\n    rows, cols = grid.shape\n    center_r, center_c = center_pos\n    # Iterate through the 3x3 neighbourhood around the center\n    for dr in range(-1, 2):\n        for dc in range(-1, 2):\n            # Skip the center cell itself\n            if dr == 0 and dc == 0:\n                continue\n            \n            nr, nc = center_r + dr, center_c + dc\n            \n            # Check if the neighbour coordinates are within the grid bounds\n            if 0 <= nr < rows and 0 <= nc < cols:\n                # Check if the neighbour cell contains the target digit\n                if grid[nr, nc] == digit:\n                    return True # Found the digit in a neighbour\n    return False # Digit not found in any neighbour\n\ndef transform(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"Applies the transformation rule based on the neighbours of digit 4.\"\"\"\n    # Convert input list of lists to a NumPy array for easier processing\n    grid_np = np.array(input_grid, dtype=int)\n    # Initialize output_grid as a copy of the input grid\n    output_grid = grid_np.copy()\n    \n    # 1. Find the coordinates (r4, c4) of the cell containing the value 4\n    pos_4 = find_digit_location(grid_np, 4)\n    \n    # If 4 is not found (unlikely based on examples, but good practice to check)\n    if pos_4 is None:\n        return output_grid.tolist() # Return the original grid if 4 is missing\n\n    # 2. Check the 8 neighbouring cells surrounding (r4, c4) for the value 2\n    found_2_neighbor = check_neighbors_for_digit(grid_np, pos_4, 2)\n    \n    # 3. Apply conditional replacement based on whether a 2 neighbour was found\n    if found_2_neighbor:\n        # Condition 1: A neighbour contains 2.\n        # Keep the value 4 at its position (already copied).\n        # Replace all values 2 in the entire grid with 0.\n        output_grid[output_grid == 2] = 0\n    else:\n        # Condition 2: None of the neighbours contain 2.\n        # Replace the value 4 with 0.\n        r4, c4 = pos_4\n        output_grid[r4, c4] = 0\n        # Keep all values 2 at their positions (already copied).\n\n    # 4. All cells with value 0 remain 0 (already copied).\n\n    # Convert the NumPy array back to a list of lists for the final output\n    return output_grid.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2926,
    "candidates_token_count": 978,
    "total_token_count": 3904,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.804885,
  "retries": 1
}