{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by changing the color of non-zero cells to the most frequent \nnon-zero color (dominant color) if they are orthogonally adjacent to a cell \nthat already has the dominant color in the original input grid. Background cells (0) \nand cells already having the dominant color remain unchanged.\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef find_dominant_color(grid):\n    \"\"\"Finds the non-zero color with the highest frequency in the grid.\"\"\"\n    non_zeros = grid[grid != 0]\n    if non_zeros.size == 0:\n        return None # No non-zero colors found\n    \n    counts = Counter(non_zeros)\n    dominant_color = counts.most_common(1)[0][0]\n    return dominant_color\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the color spreading transformation based on the dominant color.\n\n    Args:\n        input_grid (list of lists): The input 2D grid of integers.\n\n    Returns:\n        list of lists: The transformed 2D grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    rows, cols = input_np.shape\n    \n    # Initialize output_grid as a copy of the input\n    output_np = np.copy(input_np)\n\n    # Find the dominant non-zero color\n    dominant_color = find_dominant_color(input_np)\n\n    # If no dominant color exists (e.g., all zeros), return the original grid\n    if dominant_color is None:\n        return input_grid\n\n    # Iterate through each cell of the grid\n    for r in range(rows):\n        for c in range(cols):\n            current_color = input_np[r, c]\n\n            # Skip background cells (0) and cells already having the dominant color\n            if current_color == 0 or current_color == dominant_color:\n                continue\n\n            # Check orthogonal neighbors for the dominant color\n            has_dominant_neighbor = False\n            for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                nr, nc = r + dr, c + dc\n\n                # Check if neighbor is within grid boundaries\n                if 0 <= nr < rows and 0 <= nc < cols:\n                    # Check if the neighbor in the *original* input grid has the dominant color\n                    if input_np[nr, nc] == dominant_color:\n                        has_dominant_neighbor = True\n                        break # Found a dominant neighbor, no need to check others\n\n            # If an adjacent cell in the input grid had the dominant color, \n            # change the current cell's color in the output grid\n            if has_dominant_neighbor:\n                output_np[r, c] = dominant_color\n\n    # Convert back to list of lists for the required output format\n    return output_np.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3070,
    "candidates_token_count": 687,
    "total_token_count": 3757,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.182642,
  "retries": 1
}