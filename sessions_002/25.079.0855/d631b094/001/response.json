{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nFind the non-zero color present in the input grid, examine which edge has that color, count it, and create an output grid filled with that color of that size.\n\"\"\"\n\nimport numpy as np\n\ndef get_non_zero_color(grid):\n    # find unique colors, exclude 0 (white), and return the first one.\n    unique_colors = np.unique(grid)\n    non_zero_colors = unique_colors[unique_colors != 0]\n    if non_zero_colors.size > 0:\n        return non_zero_colors[0]\n    else:\n        return 0\n\ndef count_color_along_edge(grid, color):\n    rows, cols = grid.shape\n    row_count = 0\n    col_count = 0\n\n    # Check rows\n    for r in range(rows):\n        if color in grid[r, :]:\n            row_count += np.count_nonzero(grid[r,:] == color)\n\n    # Check columns\n    for c in range(cols):\n        if color in grid[:, c]:\n             col_count += np.count_nonzero(grid[:,c] == color)\n    \n    return row_count, col_count\n    \n\ndef transform(input_grid):\n    # initialize output_grid\n\n    # Find the non-zero color\n    non_zero_color = get_non_zero_color(input_grid)\n    \n    if non_zero_color == 0:\n        return np.array([])  # Return empty if no non-zero color.\n\n    # Count the color on edge\n    row_count, col_count = count_color_along_edge(input_grid, non_zero_color)\n    \n    \n    # create output\n    if row_count > 0 and col_count > 0:\n      # both, take sum\n        output_grid = np.full((row_count + col_count), non_zero_color)\n    elif row_count > 0:\n      # only rows\n        output_grid = np.full((row_count), non_zero_color)\n    elif col_count > 0:\n        # only cols\n        output_grid = np.full((col_count), non_zero_color)\n    else:\n        return np.array([])\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1837,
    "candidates_token_count": 541,
    "total_token_count": 2378,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.910881
}