{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nClassifies the input grid based on the arrangement of red (2) pixels and returns a corresponding integer.\n\n1.  Examine the input grid.\n2.  Classify the input based on the following:\n    a. If the red (2) pixels are present in the corners, the value is 1.\n    b. If the red (2) pixels are side by side as pairs, the value is 7.\n\"\"\"\n\nimport numpy as np\n\ndef check_corners(grid):\n    \"\"\"Checks if the corners of the grid have red pixels.\"\"\"\n    rows, cols = grid.shape\n    if (grid[0, 0] == 2 or grid[0, cols - 1] == 2 or\n        grid[rows - 1, 0] == 2 or grid[rows - 1, cols - 1] == 2):\n\n        # check that there are not pairs\n        has_pair = False\n        for i in range(rows):\n            for j in range(cols - 1):\n                if grid[i,j] == 2 and grid[i, j+1] == 2:\n                    has_pair = True\n        for i in range(rows - 1):\n            for j in range(cols):\n                if grid[i,j] == 2 and grid[i+1, j] == 2:\n                    has_pair = True\n        if not has_pair:\n            return True\n    return False\n\ndef check_pairs(grid):\n    \"\"\"Checks if red pixels are side by side in pairs (horizontally or vertically).\"\"\"\n    rows, cols = grid.shape\n    # Check horizontal pairs\n    for i in range(rows):\n        for j in range(cols - 1):\n            if grid[i, j] == 2 and grid[i, j + 1] == 2:\n                return True\n    # Check vertical pairs\n    for i in range(rows - 1):\n        for j in range(cols):\n            if grid[i, j] == 2 and grid[i + 1, j] == 2:\n                return True\n    return False\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid based on red pixel arrangement.\"\"\"\n    grid = np.array(input_grid)\n\n    # Check for corner arrangement\n    if check_corners(grid):\n        return 1\n    # Check for pairs arrangement\n    elif check_pairs(grid):\n        return 7\n    # Default case (should not normally happen based on given train examples).\n    else:\n      return 0\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1709,
    "candidates_token_count": 589,
    "total_token_count": 2298,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 7.618811
}