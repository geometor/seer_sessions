{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nFills zero-valued pixels in a grid with the color of the surrounding connected region.\n\"\"\"\n\nimport numpy as np\n\ndef get_all_neighbors(grid, row, col):\n    \"\"\"Gets the colors of all 8 neighbors (including diagonals).\"\"\"\n    rows, cols = grid.shape\n    neighbors = {}\n    for i in range(max(0, row - 1), min(rows, row + 2)):\n        for j in range(max(0, col - 1), min(cols, col + 2)):\n            if (i, j) != (row, col):  # Exclude the cell itself\n                neighbors[(i,j)] = grid[i, j]\n    return neighbors\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the defined rule.\"\"\"\n\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    for row in range(rows):\n        for col in range(cols):\n            if input_grid[row, col] == 0:\n                # Get colors of all 8 neighbors.\n                neighbor_colors = get_all_neighbors(input_grid, row, col)\n                neighbor_values = list(neighbor_colors.values())\n                #find non zero neighbors\n                non_zero_neighbors = [val for val in neighbor_values if val != 0]\n                # Count the occurrences of each non-zero color\n                \n                if len(set(non_zero_neighbors)) == 1:\n                    #fill value if there is only 1\n                    output_grid[row,col] = non_zero_neighbors[0]\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3680,
    "candidates_token_count": 386,
    "total_token_count": 4066,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 6.138547
}