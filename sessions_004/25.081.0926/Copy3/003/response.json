{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Seed Columns:** Find columns that have vertical stacks of the same non-zero color, where the colors are vertically stacked adjacent to each other. These stacks define the \"seed columns\".\n2.  **Group by Color:** Group the seed column pixels by their color.\n3.  **Row-Specific Insertion:** For each color:\n    *   Identify the rows where this color appears in the seed columns.\n    *   For each identified row, copy the pixel from the original seed column. Insert additional copies of the same color from seed column to the right of the original pixel.\n    *   The number of inserted columns will be equal to difference between row indices of the colored pixels of same color.\n4.  **Other Rows:** Rows that do *not* contain any of the seed colors are copied directly from the input to the output without modification.\n5. Prevent expansion: if inserted columns would exceed bounds of input grid, trim them\n\"\"\"\n\nimport numpy as np\n\ndef find_seed_columns(grid):\n    \"\"\"\n    Identifies seed columns based on vertically stacked, adjacent colors.\n    \"\"\"\n    rows, cols = grid.shape\n    seed_columns = set()\n    for c in range(cols):\n        for r in range(rows - 1):  # Check for adjacent pairs\n            if grid[r, c] != 0 and grid[r, c] == grid[r + 1, c]:\n                seed_columns.add(c)\n                break  # Move to the next column\n    return list(seed_columns)\n\ndef get_seed_data(grid, seed_columns):\n    \"\"\"\n    Groups seed column pixels by color and stores their locations.\n    \"\"\"\n    seed_data = {}  # {color: [(row, col), ...]}\n    for c in seed_columns:\n        for r in range(grid.shape[0]):\n            color = grid[r, c]\n            if color != 0:\n                if color not in seed_data:\n                    seed_data[color] = []\n                seed_data[color].append((r, c))\n    return seed_data\n\ndef transform(input_grid):\n    input_grid = np.array(input_grid)\n    rows, cols = input_grid.shape\n    output_grid = np.copy(input_grid)\n\n    seed_columns = find_seed_columns(input_grid)\n    seed_data = get_seed_data(input_grid, seed_columns)\n\n    for color, locations in seed_data.items():\n        # Get unique rows for this color\n        rows_to_transform = sorted(list(set([r for r, _ in locations])))\n\n        for row_index in rows_to_transform:\n            # Build new row with insertions\n            new_row = []\n            for col_index in range(cols):\n                new_row.append(input_grid[row_index, col_index]) # always copy original\n\n                if (row_index, col_index) in locations:\n\n                    # calculate number of insertions based on distance between row indices\n                    seed_row_indices = []\n                    for r,c in locations:\n                        if c == col_index:\n                           seed_row_indices.append(r)\n\n                    insertions = 1\n                    if len(seed_row_indices) > 0:\n                        idx = seed_row_indices.index(row_index)\n                        if idx < len(seed_row_indices) -1:\n                            insertions = seed_row_indices[idx+1] - seed_row_indices[idx]\n                    \n                    for _ in range(insertions):\n                        new_row.append(input_grid[row_index, col_index]) # insert copies\n\n            output_grid[row_index] = np.array(new_row[:cols]) # Trim to fit\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5985,
    "candidates_token_count": 882,
    "total_token_count": 6867,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 19.858072
}