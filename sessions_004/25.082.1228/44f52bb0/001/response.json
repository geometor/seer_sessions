{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms a 3x3 input grid based on the arrangement of red (value 2) pixels. \nThe output is a single digit, determined by these rules:\n\n- If red pixels form a line of three (horizontal, vertical, or diagonal), output 1.\n- If red pixels form a line segment of 3, but has a missing pixel to complete the line, output 1.\n- If red pixels form the four corners of a rectangle (any size), output 1.\n- If red pixels form a line of two (horizontal or vertical), output 7.\n- If red pixels are adjacent to one another (horizontally or vertically), output 7\n\"\"\"\n\nimport numpy as np\n\ndef _is_line_of_three(coords):\n    \"\"\"Checks if three coordinates form a straight line (horizontal, vertical, or diagonal).\"\"\"\n    if len(coords) != 3:\n        return False\n    x_coords, y_coords = zip(*coords)\n    x_coords, y_coords = sorted(x_coords), sorted(y_coords)\n\n    # Check horizontal\n    if x_coords[0] == x_coords[1] == x_coords[2] and y_coords == [0, 1, 2]:\n        return True\n    # Check Vertical\n    if y_coords[0] == y_coords[1] == y_coords[2] and x_coords == [0, 1, 2]:\n        return True\n    # Check Diagonal (top-left to bottom-right)\n    if x_coords == [0, 1, 2] and y_coords == [0, 1, 2]:\n        return True\n    # Check Diagonal (top-right to bottom-left)\n    if x_coords == [0, 1, 2] and y_coords == [2, 1, 0]:\n        return True\n\n    return False\n\ndef _is_line_segment_of_three(coords, grid):\n    \"\"\"check if the red pixels form a line segment that could be a line of three\n    \"\"\"\n    \n    x, y = zip(*coords)\n\n    # Check horizontal line segment\n    if len(set(x)) == 1:  # Same row\n        y_sorted = sorted(y)\n        if len(y_sorted) > 1 and y_sorted[-1] - y_sorted[0] <= 2:\n            return True\n\n    # Check vertical line segment\n    if len(set(y)) == 1:  # Same column\n        x_sorted = sorted(x)\n        if len(x_sorted) > 1 and x_sorted[-1] - x_sorted[0] <= 2:\n            return True\n            \n    # Check diagonal line segment (top-left to bottom-right)\n    if (max(x) - min(x) <= 2) and (max(y) - min(y) <= 2):\n        dx = [x[i+1] - x[i] for i in range(len(x)-1)]\n        dy = [y[i+1] - y[i] for i in range(len(y)-1)]\n\n        if all(d == dx[0] for d in dx) and all(d == dy[0] for d in dy): # Check constant differences\n            if dx[0] == dy[0] and abs(dx[0]) == 1:\n                return True\n\n\n    # Check diagonal line segment (top-right to bottom-left)\n    if (max(x) - min(x) <= 2) and (max(y) - min(y) <= 2):\n        dx = [x[i+1] - x[i] for i in range(len(x)-1)]\n        dy = [y[i] - y[i+1] for i in range(len(y)-1)]  # Note the change here for the reverse diagonal\n\n        if all(d == dx[0] for d in dx) and all(d == dy[0] for d in dy): # Check constant differences\n            if dx[0] == dy[0] and abs(dx[0]) == 1:\n                return True\n    return False\n\n\ndef _is_rectangle_corners(coords):\n    \"\"\"Checks if four coordinates form the corners of a rectangle.\"\"\"\n    if len(coords) != 4:\n        return False\n\n    x_coords, y_coords = zip(*coords)\n    x_coords, y_coords = sorted(list(set(x_coords))), sorted(list(set(y_coords)))\n\n    if len(x_coords) == 2 and len(y_coords) == 2:\n      return True\n\n    return False\n\ndef _is_line_of_two(coords):\n    \"\"\"\n    check for exactly two coordinates that are horizontal or vertical\n    \"\"\"\n    if len(coords) != 2:\n        return False\n    \n    (x1, y1), (x2, y2) = coords\n    return (x1 == x2 and abs(y1 - y2) == 1) or (y1 == y2 and abs(x1 - x2) == 1)\n\n\ndef _are_adjacent(coords):\n    \"\"\"Checks if *any* two coordinates in the set are adjacent (horizontally or vertically).\"\"\"\n    if len(coords) < 2:\n      return False\n\n    for i in range(len(coords)):\n        for j in range(i + 1, len(coords)):\n            x1, y1 = coords[i]\n            x2, y2 = coords[j]\n            if (x1 == x2 and abs(y1 - y2) == 1) or (y1 == y2 and abs(x1 - x2) == 1):\n                return True\n    return False\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the rules based on red pixel arrangement.\"\"\"\n\n    # Find coordinates of red pixels (value 2)\n    red_coords = [(r, c) for r in range(3) for c in range(3) if input_grid[r, c] == 2]\n\n    # Apply rules based on red pixel arrangement\n    if _is_line_of_three(red_coords):\n        return 1\n    elif _is_line_segment_of_three(red_coords, input_grid):\n        return 1\n    elif _is_rectangle_corners(red_coords):\n        return 1\n    elif _is_line_of_two(red_coords):\n        return 7\n    elif _are_adjacent(red_coords):  # Check adjacency *after* line of three\n        return 7\n    else:\n      return 0 # Default case (shouldn't normally happen based on given examples)\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1799,
    "candidates_token_count": 1556,
    "total_token_count": 3355,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 25.086498
}