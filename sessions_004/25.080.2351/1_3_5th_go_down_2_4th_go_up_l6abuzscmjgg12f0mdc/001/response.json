{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation rule involves reflecting the non-zero pixels of the input grid across a vertical axis. The non-zero pixels in each row from original matrix form a vertical line.\nIf there is a zero value in the original matrix, make a value in the same row by selecting the nearest non-zero value of same row.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the described reflection and filling logic.\n    \"\"\"\n    input_grid = np.array(input_grid)\n    output_grid = np.zeros_like(input_grid)\n    rows, cols = input_grid.shape\n\n    for r in range(rows):\n      non_zero_indices = np.where(input_grid[r] != 0)[0]\n      if non_zero_indices.size > 0:\n        output_grid[r, non_zero_indices[0]:] =  input_grid[r, non_zero_indices]\n\n        for c in range(cols):\n          if input_grid[r,c] == 0:\n            closest_left = -1\n            closest_right = -1\n\n            for i in range(c -1, -1, -1):\n              if input_grid[r,i] != 0:\n                closest_left = i\n                break\n            for i in range(c + 1, cols):\n              if input_grid[r,i] != 0:\n                closest_right = i\n                break\n\n            if closest_left != -1 and closest_right != -1:\n              if (c - closest_left) <= (closest_right -c):\n                output_grid[r,c] = input_grid[r, closest_left]\n              else:\n                output_grid[r,c] = input_grid[r,closest_right]\n            elif closest_left != -1:\n              output_grid[r,c] = input_grid[r, closest_left]\n            elif closest_right != -1:\n              output_grid[r,c] = input_grid[r,closest_right]\n\n      else:\n        output_grid[r] = input_grid[r]\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1870,
    "candidates_token_count": 520,
    "total_token_count": 2390,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 10.541542
}