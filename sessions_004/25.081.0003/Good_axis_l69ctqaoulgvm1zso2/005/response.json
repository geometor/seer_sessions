{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nReplaces white pixels in columns containing white with azure pixels based on the position of a horizontal line of red and azure pixels, and whether there are any azure pixels below that line in the same column.\n\"\"\"\n\nimport numpy as np\n\ndef find_control_row(grid):\n    # Find the row that has all reds and one azure\n    rows, cols = grid.shape\n    for r in range(rows):\n        unique_colors = np.unique(grid[r, :])\n        if len(unique_colors) == 2 and np.all(np.isin(unique_colors, [2, 8])):\n             if np.sum(grid[r,:] == 8) == 1: # Check for a single azure\n                return r\n    return -1\n\ndef find_white_columns(grid):\n    #find columns that have at least one white pixel\n    rows, cols = grid.shape\n    white_cols = []\n    for c in range(cols):\n        if np.any(grid[:,c] == 0):\n            white_cols.append(c)\n\n    return white_cols\n\ndef find_azure_below(grid, row, col):\n    rows,cols = grid.shape\n    for r in range(row, rows):\n        if grid[r,col] == 8:\n            return True\n    return False\n    \n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the observed rule.\n    \"\"\"\n    grid = np.array(input_grid)  # Convert to NumPy array for easier manipulation\n    rows, cols = grid.shape\n    output_grid = np.copy(grid)  # Initialize output_grid as a copy of input_grid\n\n    control_row_index = find_control_row(grid)\n    \n    if control_row_index != -1:\n        white_cols = find_white_columns(grid)\n        # Apply the replacement rule\n        for r in range(control_row_index):\n            for c in white_cols:\n                if output_grid[r, c] == 0:\n                    if not find_azure_below(grid, control_row_index, c):\n                        output_grid[r,c] = 8\n                    else:\n                        output_grid[r,c] = 0\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3059,
    "candidates_token_count": 540,
    "total_token_count": 3599,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 11.153492
}