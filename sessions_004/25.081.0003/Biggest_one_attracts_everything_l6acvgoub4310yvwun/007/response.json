{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation rule works as follows:\n1. Identify Non-Empty Rows: Examine each row in the input grid. A row is \"non-empty\" if it contains any digit other than 0.\n\n2. Shift Non-Empty Rows Upwards: Arrange all non-empty rows sequentially at the top of the output grid, maintaining their original relative order.\n\n3. Rearrange Non-Zero Digits Within Rows: Within each non-empty row, rearrange the non-zero digits based on these principles:\n    *   Zeroes to the left of non-zero digits: remain to the left.\n    *   Zeroes to the right: pad the remaining space.\n    *   Merging: If two rows have non-zero values and all values are equal except\n        the last, then consolidate to a single row.\n\n4. Fill Remaining Rows: Insert empty (all 0) rows to the bottom of the grid until the input and output grid have the same height.\n\"\"\"\n\nimport numpy as np\n\ndef is_empty_row(row):\n    \"\"\"Checks if a row is empty (all zeros).\"\"\"\n    return all(pixel == 0 for pixel in row)\n\ndef rearrange_row(row):\n    \"\"\"Rearranges non-zero digits within a row, keeping leading zeros.\"\"\"\n    non_zero_digits = [pixel for pixel in row if pixel != 0]\n    num_leading_zeros = 0\n    for pixel in row:\n        if pixel == 0:\n            num_leading_zeros += 1\n        else:\n            break\n    new_row = [0] * num_leading_zeros + non_zero_digits\n    \n    while len(new_row) < len(row):\n      new_row.append(0)\n    return new_row\n    \n\ndef merge_rows(rows):\n    \"\"\"Merges rows that are identical except for the last non-zero digit.\"\"\"\n    merged_rows = []\n    skip_indices = set()\n\n    for i in range(len(rows)):\n        if i in skip_indices:\n            continue\n\n        current_row = rows[i]\n        merged = False\n\n        for j in range(i + 1, len(rows)):\n            if j in skip_indices:\n              continue\n            \n            next_row = rows[j]\n\n            non_zero_current = [x for x in current_row if x!=0]\n            non_zero_next = [x for x in next_row if x != 0]\n\n            if len(non_zero_current) > 0 and len(non_zero_next) > 0:\n              if len(non_zero_current) == len(non_zero_next):\n                if non_zero_current[:-1] == non_zero_next[:-1]:\n                    # Merge: keep the row with larger last digit\n                    \n                    merged_row = current_row[:] #copy\n                    \n                    idx_cur = len(current_row) - current_row[::-1].index(non_zero_current[-1])-1\n                    idx_next = len(next_row) - next_row[::-1].index(non_zero_next[-1])-1\n                   \n                    if idx_cur != idx_next and non_zero_current[-1] != non_zero_next[-1]:\n                      # can merge if last non_zero is in same index\n                      continue\n\n                    if non_zero_current[-1] > non_zero_next[-1]:\n                      merged_row[idx_cur] = non_zero_current[-1]\n                      merged_rows.append(rearrange_row(merged_row))\n                      skip_indices.add(j)\n                      merged = True\n                      break # only merge once\n                    else:\n                      merged_row[idx_next] = non_zero_next[-1]\n                      merged_rows.append(rearrange_row(merged_row))\n                      skip_indices.add(j)\n                      merged=True\n                      break\n        if not merged:\n            merged_rows.append(rearrange_row(current_row))\n\n\n    return merged_rows\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the rule.\"\"\"\n    input_grid_np = np.array(input_grid)\n    rows, cols = input_grid_np.shape\n    output_grid = []\n\n    # Identify and shift non-empty rows\n    non_empty_rows = []\n    for row in input_grid_np:\n        if not is_empty_row(row):\n            non_empty_rows.append(list(row))\n\n    # Merge and rearrange within non-empty rows\n    merged_rows = merge_rows(non_empty_rows)\n\n    # Add non-empty rows to output\n    for row in merged_rows:\n        output_grid.append(row)\n\n    # Pad with empty rows at top and bottom\n    num_empty_rows = rows - len(output_grid)\n    \n    while len(output_grid) < rows :\n       output_grid.append([0] * cols)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3439,
    "candidates_token_count": 1155,
    "total_token_count": 4594,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.0-pro-exp-02-05",
  "response_time": 26.613331
}