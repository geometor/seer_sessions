{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nLocate all shapes of color 8. For each shape, determine if it forms a vertical line (all pixels in the shape share the same column). If a shape is a vertical line, place the number 1 in its top-left-most pixel and its bottom-right-most pixel.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid according to the specified rule.\n    \"\"\"\n    output_grid = [row[:] for row in input_grid]  # Create a copy to modify\n    rows = len(input_grid)\n    cols = len(input_grid[0]) if rows > 0 else 0\n    \n    shapes_8 = []\n    visited = [[False] * cols for _ in range(rows)]\n\n    def dfs(r, c, current_shape):\n        if (r < 0 or r >= rows or c < 0 or c >= cols or\n                visited[r][c] or input_grid[r][c] != 8):\n            return\n        visited[r][c] = True\n        current_shape.append((r, c))\n        dfs(r + 1, c, current_shape)\n        dfs(r - 1, c, current_shape)\n        dfs(r, c + 1, current_shape)\n        dfs(r, c - 1, current_shape)\n\n    for r in range(rows):\n        for c in range(cols):\n            if input_grid[r][c] == 8 and not visited[r][c]:\n                current_shape = []\n                dfs(r, c, current_shape)\n                shapes_8.append(current_shape)\n\n    for shape in shapes_8:\n      #find top left and bottom right of shapes that consist of vertical lines\n      top_left = (rows,cols)\n      bottom_right = (0,0)\n      \n      is_vertical = True\n      if len(shape) > 1:\n        first_col = shape[0][1]\n        for r,c in shape:\n          if c != first_col:\n            is_vertical = False\n            break\n\n      if is_vertical:\n          for r, c in shape:\n              top_left = (min(top_left[0],r), min(top_left[1],c))\n              bottom_right = (max(bottom_right[0],r), max(bottom_right[1],c))\n          output_grid[top_left[0]][top_left[1]] = 1\n          output_grid[bottom_right[0]][bottom_right[1]] = 1\n\n    return output_grid\n\n\nif __name__ == '__main__':\n    input_grid = [\n        [0, 0, 0, 0, 8, 8, 0],\n        [0, 0, 0, 0, 0, 8, 0],\n        [0, 0, 8, 0, 0, 0, 0],\n        [0, 0, 8, 8, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 8, 0, 0],\n        [0, 0, 0, 8, 8, 0, 0],\n    ]\n\n    expected_output = [\n        [0, 0, 0, 0, 8, 8, 0],\n        [0, 0, 0, 0, 1, 8, 0],\n        [0, 0, 8, 1, 0, 0, 0],\n        [0, 0, 8, 8, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 1, 8, 0, 0],\n        [0, 0, 0, 8, 8, 0, 0],\n    ]\n    output_grid = transform(input_grid)\n    print(output_grid)\n    if output_grid == expected_output:\n        print(\"SUCCESS!\")\n    else:\n        print(\"FAILED!\")\n        print(\"Expected Output:\", expected_output)\n        print(\"Transformed Output:\", output_grid)\n\n    assert output_grid == expected_output, \"Transformed output does not match expected output.\"\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3211,
    "candidates_token_count": 1053,
    "total_token_count": 4264,
    "cached_content_token_count": 0
  },
  "token_totals": {
    "prompt": 7913,
    "candidates": 2772,
    "total": 10685,
    "cached": 0
  },
  "timing": {
    "response_time": 0.000279,
    "total_elapsed": 26.860403,
    "response_times": [
      0.000563,
      0.000301,
      0.000194,
      0.000279
    ]
  }
}