{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nShifts all non-zero colored cells to the last row, maintaining their original order.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by moving all non-zero elements to the last row,\n    maintaining their relative order, and filling the rest with zeros.\n\n    Args:\n    input_grid (list of lists): The input grid represented as a 2D list.\n\n    Returns:\n    list of lists: The transformed grid.\n    \"\"\"\n    # Initialize output_grid with zeros\n    rows = len(input_grid)\n    cols = len(input_grid[0])\n    output_grid = [[0] * cols for _ in range(rows)]\n\n    # Find non-zero elements and their original positions\n    non_zero_elements = []\n    for i in range(rows):\n        for j in range(cols):\n            if input_grid[i][j] != 0:\n                non_zero_elements.append((input_grid[i][j], i, j))  # Store value, original row, and original column\n\n    # Sort based on the described logic. The primary key for sorting will be the original row in reverse (bottom up).\n    #secondary sort key is the original col (left-to-right).\n\n    non_zero_elements.sort(key=lambda x: ( -x[1], x[2]))\n\n    # Place non-zero elements in the last row of output_grid\n    last_row_index = 0\n    for element in non_zero_elements:\n        output_grid[rows - 1][last_row_index] = element[0]\n        last_row_index += 1\n\n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2223,
    "candidates_token_count": 397,
    "total_token_count": 2620,
    "cached_content_token_count": 0
  },
  "timing": {
    "response_time": 5.053933
  },
  "response_file": "002-response.json"
}