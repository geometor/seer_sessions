{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "*text:*\n```python\n\"\"\"\nMoves non-white cells to the last row if they are not already in the rows where non-white objects are present,\npreserving their original horizontal order, and setting all other cells to white. Objects that are in rows containing\nnon-white objects should maintain position.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by moving non-white objects to the bottom row,\n    preserving their horizontal order, or keeping them in existing rows if non-white\n    objects are already present.\n    \"\"\"\n    input_grid = np.array(input_grid)\n    output_grid = np.zeros_like(input_grid)\n    rows, cols = input_grid.shape\n\n    # Find non-white cells and their column indices\n    non_white_cells = []\n    rows_with_non_white = set()\n\n    for r in range(rows):\n        for c in range(cols):\n            if input_grid[r, c] != 0:\n                non_white_cells.append((r, c, input_grid[r, c]))\n                rows_with_non_white.add(r)\n\n\n    # copy objects in rows with existing colors\n    for r in rows_with_non_white:\n        for c in range(cols):\n            if input_grid[r,c] != 0:\n               output_grid[r,c]= input_grid[r,c]\n\n    # Sort non-white cells by their column index (original horizontal order)\n    non_white_cells_to_move = []\n\n    for r, c, color in non_white_cells:\n      if  not any(input_grid[r,i]!=0 for i in range(cols)  if r!= rows-1):\n          non_white_cells_to_move.append( (c, color) )\n\n    non_white_cells_to_move.sort()\n\n\n    # Place non-white cells in the last row of the output grid\n    current_col = 0\n    for _, color in non_white_cells_to_move:\n        while(output_grid[rows-1, current_col]!=0):\n          current_col = current_col + 1\n        output_grid[rows - 1, current_col] = color\n\n    return output_grid.tolist()\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3625,
    "candidates_token_count": 542,
    "total_token_count": 4167,
    "cached_content_token_count": 0
  },
  "token_totals": {
    "prompt": 48791,
    "candidates": 9659,
    "total": 58450,
    "cached": 0
  },
  "timing": {
    "response_time": 0.000134,
    "total_elapsed": 148.652022,
    "response_times": [
      0.000386,
      0.000133,
      0.000117,
      0.000121,
      0.000222,
      0.000123,
      0.000282,
      0.000131,
      0.000116,
      0.000136,
      0.000279,
      0.000292,
      0.000194,
      0.000134
    ]
  }
}