{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nThe transformation rule is as follows:\n1.  **Static Objects:** The red cells (color 2) and azure cells (color 8) remain unchanged in their original positions.\n2.  **Green Object Identification:** Identify the green cells (color 3).\n3.  **Expansion procedure:**\n    - Compute the integer average row index between two green cells.\n    - If there is an azure block in this row, use this block as a \"seed\" for the green expansion.\n    - Grow the green region horizontally to the right of the seed, and to the left, until the border or an object with color 8 is encountered.\n    - Repeat with a new pair of green cells.\n\"\"\"\n\nimport numpy as np\n\ndef get_object_positions(grid, color):\n    \"\"\"Finds the positions of all cells with a specific color.\"\"\"\n    return np.array(np.where(grid == color)).T\n\ndef find_closest_azure_seed(grid, row):\n    \"\"\"Finds the closest azure cell in the specified row to use as expansion seed.\"\"\"\n    azure_positions = get_object_positions(grid, 8)\n    if len(azure_positions) == 0: # no azure objects\n        return None\n    \n    azure_in_row = [pos for pos in azure_positions if pos[0] == row]\n\n    if not azure_in_row: # no azure in this row\n        return None\n    \n    return azure_in_row[0]\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the specified rule.\"\"\"\n    output_grid = np.copy(input_grid)\n    \n    # 1. Keep red and azure cells unchanged (already in output_grid)\n    \n    # 2. Find green cells\n    green_positions = get_object_positions(input_grid, 3)\n    green_positions_copy = green_positions.copy()\n\n    # 3. Expansion procedure\n    \n    while len(green_positions_copy) >= 2 :\n\n        # compute average row\n        row_indices = [pos[0] for pos in green_positions_copy[:2]]\n        expansion_row = int(np.mean(row_indices))\n\n        # find azure expansion seed\n        seed = find_closest_azure_seed(input_grid, expansion_row)\n\n        if seed is not None: # expansion can be applied\n            # expand to the right\n            col = seed[1] + 1\n            while col < input_grid.shape[1] and input_grid[expansion_row, col] != 8:\n                output_grid[expansion_row, col] = 3\n                col += 1\n\n            # expand to the left\n            col = seed[1] - 1\n            while col >= 0 and input_grid[expansion_row, col] != 8:\n                output_grid[expansion_row, col] = 3\n                col -= 1\n        \n        # remove the two first elements\n        green_positions_copy = green_positions_copy[2:]\n    \n    return output_grid\n```\n"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5940,
    "candidates_token_count": 707,
    "total_token_count": 6647,
    "cached_content_token_count": 0
  },
  "timing": {
    "response_time": 8.365201
  },
  "response_file": "004-response.json"
}