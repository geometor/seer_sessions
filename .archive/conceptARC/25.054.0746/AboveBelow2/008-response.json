{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Colored Regions:** Locate all contiguous regions of red (2), green (3), and yellow (4) pixels in the input grid.\n\n2.  **Check for Red/Green Adjacency :** Examine whether or not any red(2) regions and green(3) regions touch.\n\n3.  **Conditional Removal (Red and Green):** If there are no touching red and green regions, the input equals the output, and no further action must be taken.\n\n4. **Conditional Removal(Yellow):** If there is yellow(4) region near either the red or green, remove it.\n\n5.  **Output:** The output grid is the result of applying these removal rules to the input grid.\n\"\"\"\n\nimport numpy as np\nfrom scipy.ndimage import label, find_objects\n\ndef find_regions(grid, color):\n    \"\"\"Finds contiguous regions of a specific color in the grid.\"\"\"\n    mask = (grid == color)\n    labeled_array, num_features = label(mask)\n    return labeled_array, num_features\n\ndef are_adjacent(grid, labeled_array1, region_index1, labeled_array2, region_index2):\n    \"\"\"Checks if two regions in labeled arrays are adjacent.\"\"\"\n    # Expand the first region by one pixel in all directions\n    region1_mask = (labeled_array1 == region_index1)\n    expanded_region1 = np.zeros_like(region1_mask)\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            if region1_mask[r, c]:\n                for dr in [-1, 0, 1]:\n                    for dc in [-1, 0, 1]:\n                        if 0 <= r + dr < rows and 0 <= c + dc < cols:\n                            expanded_region1[r + dr, c + dc] = True\n\n    # Check for overlap with the second region\n    region2_mask = (labeled_array2 == region_index2)\n    return np.any(expanded_region1 & region2_mask)\n\n\ndef transform(input_grid):\n    \"\"\"Transforms the input grid according to the described rules.\"\"\"\n    output_grid = np.copy(input_grid)\n    grid = np.array(input_grid)  # work with numpy array\n\n    # Find red, green and yellow regions\n    red_labeled_array, red_num = find_regions(grid, 2)\n    green_labeled_array, green_num = find_regions(grid, 3)\n    yellow_labeled_array, yellow_num = find_regions(grid, 4)\n\n    red_green_adjacent = False\n\n    if red_num > 0 and green_num > 0:\n        for i in range(1, red_num+1):\n            for j in range(1, green_num+1):\n                if are_adjacent(grid, red_labeled_array, i, green_labeled_array, j):\n                    red_green_adjacent = True\n                    break\n            if red_green_adjacent:\n               break\n\n    if red_green_adjacent:\n       #remove red\n        for i in range(1, red_num + 1):\n          output_grid[red_labeled_array == i] = 0\n\n       #remove green\n        for j in range(1, green_num + 1):\n           output_grid[green_labeled_array == j] = 0\n\n       #remove yellow\n        for k in range(1, yellow_num + 1):\n           output_grid[yellow_labeled_array == k] = 0\n\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3413,
    "candidates_token_count": 840,
    "total_token_count": 4253,
    "cached_content_token_count": 0
  },
  "response_time": 8.958795,
  "response_file": "008-response.json"
}