{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\n1.  **Identify Objects:** Divide the input grid into distinct objects, where each object is a contiguous region of pixels of the same color.\n\n2.  **Identify Stable and Changing Colors:** Compare each input/output pair. Determine which color expands into the other color. The expanding color is *stable*, the other color is *changing*.\n\n3. **Find Horizontal Neighbors:** For each pixel in the input grid check its left and right neighbors.\n\n4.  **Apply Rule:**\n    *   If a pixel is the *changing* color, and is horizontally adjacent (left or right) to a pixel of *stable* color, the *changing* pixel becomes the *stable* color in the output grid.\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef find_objects(grid):\n    \"\"\"Finds all contiguous objects in a grid.\"\"\"\n    rows, cols = grid.shape\n    visited = set()\n    objects = []\n\n    def bfs(r, c, color):\n        \"\"\"Performs breadth-first search to find contiguous pixels of the same color.\"\"\"\n        obj = []\n        queue = deque([(r, c)])\n        visited.add((r, c))\n\n        while queue:\n            row, col = queue.popleft()\n            obj.append((row, col))\n\n            for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                nr, nc = row + dr, col + dc\n                if 0 <= nr < rows and 0 <= nc < cols and (nr, nc) not in visited and grid[nr, nc] == color:\n                    queue.append((nr, nc))\n                    visited.add((nr, nc))\n        return obj\n\n    for r in range(rows):\n        for c in range(cols):\n            if (r, c) not in visited:\n                obj = bfs(r, c, grid[r, c])\n                objects.append(obj)\n    return objects\n\n\ndef find_stable_and_changing_colors(input_grid, output_grid):\n    \"\"\"Identifies the stable and changing colors based on input/output comparison.\"\"\"\n    rows, cols = input_grid.shape\n    stable_color = None\n    changing_color = None\n\n    for r in range(rows):\n        for c in range(cols):\n            if input_grid[r, c] != output_grid[r, c]:\n                changing_color = input_grid[r, c]\n                stable_color = output_grid[r,c]\n                return stable_color, changing_color  # Return as soon as a difference is found\n\n    return stable_color, changing_color\n\n\ndef transform(input_grid, input_grid_2=None, output_grid_2=None):\n    \"\"\"Transforms the input grid according to the described rule.\"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # 1. Find Objects (not strictly needed for this rule, but good practice)\n    # objects = find_objects(input_grid)\n\n    # 2. Determine Stable and Changing Colors (using both examples)\n    stable_color, changing_color = find_stable_and_changing_colors(input_grid, output_grid)\n    if input_grid_2 is not None and output_grid_2 is not None:\n      stable_color_2, changing_color_2 = find_stable_and_changing_colors(input_grid_2, output_grid_2)\n      if stable_color_2 is not None:  # possible no change in the 2nd example\n        stable_color = stable_color_2\n        changing_color = changing_color_2\n\n\n    if stable_color is None: # all input pixels match output - return\n        return output_grid\n\n    # 3. Iterate and apply transformations\n    for r in range(rows):\n        for c in range(cols):\n            # 4. Apply Rule\n            if input_grid[r, c] == changing_color:\n                # Check left neighbor\n                if c > 0 and input_grid[r, c - 1] == stable_color:\n                    output_grid[r, c] = stable_color\n                # Check right neighbor\n                if c < cols - 1 and input_grid[r, c + 1] == stable_color:\n                    output_grid[r, c] = stable_color\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4758,
    "candidates_token_count": 1018,
    "total_token_count": 5776,
    "cached_content_token_count": 0
  },
  "response_time": 9.402223,
  "response_file": "012-response.json"
}