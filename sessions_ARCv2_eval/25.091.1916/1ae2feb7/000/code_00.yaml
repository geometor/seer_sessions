elements:
  - object: separator
    type: vertical_line
    color: red (2)
    location: fixed column per example (e.g., col 5 in ex1/2, col 3 in ex3)
    function: divides grid, triggers transformation

  - object: input_pattern
    type: horizontal_sequence
    location: rows to the left of the separator
    properties:
      - composition: sequence of non-white pixels (can include white pixels within the segment)
      - colors: variable (blue, green, yellow, gray, magenta, azure, orange, red)
      - length: variable segment length up to the separator column
      - first_non_white_color: property derived from the sequence
      - last_non_white_color: property derived from the sequence
      - non_white_sequence: property derived (sequence of non-white colors only)
    existence: optional per row

  - object: output_pattern
    type: horizontal_sequence
    location: rows to the right of the separator
    properties:
      - width: determined by grid_width - separator_column - 1
      - composition: generated based on corresponding input_pattern
      - tiling: often involves repeating a smaller base pattern
    existence: present only if a corresponding input_pattern exists

actions:
  - name: identify_separator
    input: input_grid
    output: column_index_of_red_line

  - name: extract_input_pattern
    input: input_grid_row, separator_column_index
    output: segment_left_of_separator

  - name: analyze_input_pattern
    input: segment_left_of_separator
    output:
      - non_white_sequence (S)
      - first_color (S[0] if S not empty)
      - last_color (S[-1] if S not empty)
      - length_of_non_white_sequence (len(S))

  - name: determine_base_pattern
    input: first_color, last_color, length_of_non_white_sequence
    rules:
      - if last_color is azure (8): base_pattern = [azure (8)]
      - if first_color is red (2) and last_color is blue (1): base_pattern = [blue (1), red (2)]
      - if first_color is green (3) and last_color is yellow (4): base_pattern = [yellow (4), white (0), yellow (4), green (3)]
      - otherwise: base_pattern = [first_color] + [white (0)] * (length_of_non_white_sequence - 1)
    output: base_pattern (P)

  - name: generate_output_pattern
    input: base_pattern (P), output_width (W)
    logic: repeat P to fill width W ( P * (W // len(P)) + P[:(W % len(P))] )
    output: final_output_pattern_for_row

  - name: apply_transformation
    input: input_grid, separator_column_index, row_index, final_output_pattern
    output: modified_output_grid (updates row to the right of separator)

relationships:
  - type: correspondence
    entity1: input_pattern (row r, left)
    entity2: output_pattern (row r, right)
    description: An input pattern in a given row determines the output pattern in the same row.

  - type: dependency
    entity1: output_pattern
    entity2: input_pattern
    description: The structure and colors of the output pattern depend on the first color, last color, and number of non-white colors in the corresponding input pattern sequence.