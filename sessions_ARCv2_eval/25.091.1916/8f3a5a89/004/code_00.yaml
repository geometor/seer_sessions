task_elements:
  - element: background
    color: gray (8)
    role: fillable_area
  - element: barriers
    color: blue (1)
    role: impassable_boundaries (for gray fill)
    persistence: generally preserved, but see note
  - element: start_point
    color: magenta (6)
    count: 1
    role: origin_reference_for_connectivity
    persistence: preserved
  - element: target_fill
    color: orange (7)
    role: color_for_unreachable_background_pixels
    persistence: introduced

transformation:
  type: region_identification_and_coloring
  based_on: connectivity_from_start
  connectivity:
    start_reference: magenta (6) pixel
    medium: gray (8) pixels
    adjacency: cardinal (horizontal/vertical)
    barriers: blue (1) pixels block gray connectivity
  rule:
    1. Identify the connected component of gray (8) pixels that are cardinally adjacent to the single magenta (6) pixel or reachable from those adjacent gray pixels via cardinal gray-to-gray steps without crossing blue (1) pixels. Let this set be `component_C`.
    2. Create an output grid, initially copying the input grid.
    3. Iterate through all pixels (r, c) of the input grid.
    4. If `input_grid[r, c]` is gray (8) AND the coordinate `(r, c)` is *not* in `component_C`, change the corresponding pixel `output_grid[r, c]` to orange (7).
    5. All other pixels (magenta, blue, and gray pixels in `component_C`) remain unchanged from the initial copy.
  note: Example 1 shows removal of some blue pixels based on unclear criteria (potentially lack of adjacency to `component_C` or specific geometric properties), while Examples 2 & 3 preserve all blue pixels. The core rule focuses on the consistent gray-to-orange transformation.

grid_properties:
  - dimensions: remain_constant
  - colors_preserved: [magenta (6), blue (1) (mostly), gray (8) (subset)]
  - colors_modified: [gray (8) (subset)]
  - colors_introduced: [orange (7)]
  - colors_removed: [blue (1) (in Example 1 only)]