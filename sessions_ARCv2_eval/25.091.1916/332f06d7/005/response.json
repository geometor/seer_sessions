{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\n\"\"\"\nTransforms the input grid based on pixel color and grid dimensions.\nThe transformation rules depend on whether the grid is \"small\" (both height and width < 14) or \"large\" (height >= 14 or width >= 14).\n\nRule Overview:\n1. White(0) pixels always change to Blue(1).\n2. If the grid is small (H < 14 AND W < 14):\n   - Red(2) pixels change to White(0).\n   - Other colors (including Blue(1)) remain unchanged.\n3. If the grid is large (H >= 14 OR W >= 14):\n   - Blue(1) pixels change to White(0) *only if* all 8 of their neighbors in the input grid are either Blue(1) or Green(3).\n   - Other colors (including Red(2)) remain unchanged.\n\"\"\"\n\ndef _check_blue_neighbors(grid: np.ndarray, r: int, c: int) -> bool:\n    \"\"\"\n    Checks if all 8 neighbors of a Blue(1) pixel at (r, c) are either Blue(1) or Green(3).\n\n    Args:\n        grid: The input numpy array representing the grid.\n        r: The row index of the pixel to check.\n        c: The column index of the pixel to check.\n\n    Returns:\n        True if all neighbors are Blue(1) or Green(3), False otherwise.\n    \"\"\"\n    H, W = grid.shape\n    # Iterate through the 8 neighbors (relative coordinates)\n    for dr in [-1, 0, 1]:\n        for dc in [-1, 0, 1]:\n            # Skip the center pixel itself\n            if dr == 0 and dc == 0:\n                continue\n\n            nr, nc = r + dr, c + dc\n\n            # Check boundary conditions\n            if 0 <= nr < H and 0 <= nc < W:\n                neighbor_color = grid[nr, nc]\n                # If a neighbor is *not* Blue(1) and *not* Green(3), condition fails\n                if neighbor_color != 1 and neighbor_color != 3:\n                    return False\n            # Implicitly, neighbors outside the grid don't violate the condition,\n            # but practically, for a pixel to be truly 'surrounded', it shouldn't\n            # be on the edge unless the edge is filled with 1s or 3s.\n            # However, based on typical ARC behavior, edge cases often just need\n            # to check valid neighbors. Let's stick to checking only valid neighbors.\n\n    # If the loop completes without returning False, all valid neighbors are 1 or 3.\n    return True\n\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the transformation rules to the input grid.\n\n    Args:\n        input_grid: A numpy array representing the input grid.\n\n    Returns:\n        A numpy array representing the transformed output grid.\n    \"\"\"\n    # Get grid dimensions\n    H, W = input_grid.shape\n\n    # Initialize output_grid as a copy - handles unchanged pixels\n    output_grid = np.copy(input_grid)\n\n    # Determine if the grid is small\n    is_small = H < 14 and W < 14\n\n    # Iterate through each cell of the input grid\n    for r in range(H):\n        for c in range(W):\n            pixel_color = input_grid[r, c]\n\n            # Rule 1: White(0) always becomes Blue(1)\n            if pixel_color == 0:\n                output_grid[r, c] = 1\n            # Rule 2: Small grid specific transformation for Red(2)\n            elif is_small and pixel_color == 2:\n                output_grid[r, c] = 0\n            # Rule 3: Large grid specific transformation for Blue(1)\n            elif not is_small and pixel_color == 1:\n                # Check neighbors using the helper function on the *input* grid\n                if _check_blue_neighbors(input_grid, r, c):\n                    output_grid[r, c] = 0\n            # Other cases: pixel remains unchanged (handled by initial copy)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 12735,
    "candidates_token_count": 984,
    "total_token_count": 13719,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.609366,
  "retries": 1
}