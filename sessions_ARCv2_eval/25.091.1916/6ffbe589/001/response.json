{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nExtracts the largest connected component of non-white pixels (values 1-9) from the input grid and returns the subgrid corresponding to its bounding box. Connectivity is defined by 8-way adjacency (horizontal, vertical, and diagonal).\n\"\"\"\n\ndef find_connected_components(grid):\n    \"\"\"\n    Finds all connected components of non-white pixels in the grid.\n\n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        list: A list of components, where each component is a list of\n              (row, col) tuples representing the coordinates of its pixels.\n              Returns an empty list if no non-white pixels are found.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n    components = []\n\n    for r in range(rows):\n        for c in range(cols):\n            # If it's a non-white pixel and hasn't been visited yet\n            if grid[r, c] != 0 and not visited[r, c]:\n                component = []\n                q = deque([(r, c)])\n                visited[r, c] = True\n\n                while q:\n                    row, col = q.popleft()\n                    component.append((row, col))\n\n                    # Check all 8 neighbors\n                    for dr in [-1, 0, 1]:\n                        for dc in [-1, 0, 1]:\n                            if dr == 0 and dc == 0:\n                                continue # Skip self\n\n                            nr, nc = row + dr, col + dc\n\n                            # Check bounds and if neighbor is non-white and not visited\n                            if 0 <= nr < rows and 0 <= nc < cols and \\\n                               grid[nr, nc] != 0 and not visited[nr, nc]:\n                                visited[nr, nc] = True\n                                q.append((nr, nc))\n                \n                if component:\n                    components.append(component)\n                    \n    return components\n\ndef get_bounding_box(component):\n    \"\"\"\n    Calculates the bounding box (min_row, min_col, max_row, max_col) for a component.\n\n    Args:\n        component (list): A list of (row, col) tuples for the component's pixels.\n\n    Returns:\n        tuple: (min_row, min_col, max_row, max_col) or None if component is empty.\n    \"\"\"\n    if not component:\n        return None\n        \n    rows = [r for r, c in component]\n    cols = [c for r, c in component]\n    \n    min_row = min(rows)\n    min_col = min(cols)\n    max_row = max(rows)\n    max_col = max(cols)\n    \n    return min_row, min_col, max_row, max_col\n\ndef transform(input_grid):\n    \"\"\"\n    Identifies the largest connected component of non-white pixels (1-9)\n    in the input grid using 8-way adjacency, calculates its bounding box,\n    and extracts the corresponding subgrid.\n\n    Args:\n        input_grid (list or np.array): The input 2D grid.\n\n    Returns:\n        np.array: The extracted subgrid containing the largest component,\n                  or an empty array if no non-white pixels exist.\n    \"\"\"\n    # Ensure input is a numpy array\n    grid = np.array(input_grid)\n    \n    # Handle empty input grid case\n    if grid.size == 0:\n        return np.array([[]])\n\n    # Step 1: Find all connected components of non-white pixels\n    components = find_connected_components(grid)\n\n    # Handle case where there are no non-white pixels\n    if not components:\n        # Return an empty grid or perhaps a 1x1 white grid?\n        # Let's return an empty numpy array consistent with finding nothing.\n         return np.array([[]]) # Or potentially np.array([[0]]) if a single pixel output is preferred\n\n    # Step 2: Find the largest component based on the number of pixels\n    largest_component = max(components, key=len)\n\n    # Step 3: Determine the bounding box of the largest component\n    min_row, min_col, max_row, max_col = get_bounding_box(largest_component)\n\n    # Step 4: Extract the subgrid defined by the bounding box\n    # Note: Slicing is exclusive for the end index, so add 1\n    output_grid = grid[min_row : max_row + 1, min_col : max_col + 1]\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5223,
    "candidates_token_count": 1083,
    "total_token_count": 6306,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.48215,
  "retries": 1
}