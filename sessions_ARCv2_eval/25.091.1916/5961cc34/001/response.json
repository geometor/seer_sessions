{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom scipy.ndimage import label\n\n\"\"\"\nTransformation Rule:\n\n1. Identify all distinct connected shapes composed of Blue (1) and Green (3) pixels in the input grid. Treat Blue and Green as equivalent for shape definition.\n2. Count the total number of these distinct shapes.\n3. Locate the single Yellow (4) pixel and identify its column (the \"Key Column\").\n4. Based on the shape count:\n    a. If the count is exactly 1: Create an output grid of the same dimensions filled with the background color (Azure, 8), and then set all pixels in the Key Column to Red (2).\n    b. If the count is greater than 1: Create an output grid of the same dimensions filled with the background color (Azure, 8). Then, for every pixel that was part of any Blue (1) or Green (3) shape in the input, set the corresponding pixel in the output grid to Red (2).\n\"\"\"\n\ndef find_objects(grid, colors):\n    \"\"\"\n    Finds connected objects of specified colors in a grid.\n\n    Args:\n        grid (np.ndarray): The input grid.\n        colors (list or set): A list or set of color values to consider as part of the objects.\n\n    Returns:\n        tuple: A tuple containing:\n            - labeled_array (np.ndarray): An array where each object is marked with a unique integer label.\n            - num_objects (int): The total number of distinct objects found.\n    \"\"\"\n    mask = np.isin(grid, list(colors))\n    labeled_array, num_objects = label(mask)\n    return labeled_array, num_objects\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule based on the count of Blue/Green shapes.\n\n    Args:\n        input_grid (np.ndarray): The input 2D grid.\n\n    Returns:\n        np.ndarray: The transformed 2D grid.\n    \"\"\"\n    # Define colors\n    background_color = 8\n    shape_colors = {1, 3}  # Blue and Green\n    key_color = 4          # Yellow\n    output_color = 2       # Red\n\n    # Initialize output grid with the background color\n    output_grid = np.full_like(input_grid, background_color)\n\n    # Find and count the Blue/Green shapes\n    labeled_shapes, num_shapes = find_objects(input_grid, shape_colors)\n\n    # Find the location of the Yellow key pixel\n    key_coords = np.where(input_grid == key_color)\n    if len(key_coords[0]) == 0:\n        # Handle case where key color is not found (optional, based on task constraints)\n        # For this task, assume it's always present based on examples.\n        # If it could be missing, we might return the initial background grid or raise an error.\n        print(\"Warning: Key color (Yellow) not found.\")\n        return output_grid \n    \n    # Assuming only one key pixel exists as per examples\n    key_col = key_coords[1][0] \n\n    # Apply conditional transformation based on the number of shapes\n    if num_shapes == 1:\n        # Fill the entire Key Column with the output color\n        output_grid[:, key_col] = output_color\n    elif num_shapes > 1:\n        # Find all coordinates belonging to the Blue/Green shapes\n        shape_coords = np.where(np.isin(input_grid, list(shape_colors)))\n        # Set the corresponding pixels in the output grid to the output color\n        output_grid[shape_coords] = output_color\n    # If num_shapes == 0, the output grid remains the background color, which seems correct.\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 9415,
    "candidates_token_count": 863,
    "total_token_count": 10278,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.555923,
  "retries": 1
}