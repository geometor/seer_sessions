Input_Grid:
  Pixels: Values 0-9 representing colors.
  Background_Pixel: White (0).
  Marker_Colors: {Orange(7), Azure(8)}
  Content_Candidate_Colors: {Blue(1), Red(2), Green(3), Yellow(4), Gray(5), Magenta(6), Maroon(9)} # Excludes 0, 7, 8

Output_Grid:
  Derivation: Based on selection, background determination, and composition.
  Background_Color: Determined by a specific rule (see Actions).
  Content: A subset of input objects whose colors are in Content_Candidate_Colors.

Actions:
  - Identify_Candidate_Objects: Find all contiguous objects whose color is in Content_Candidate_Colors. Store color, pixel coordinates.
  - Identify_Marker_Locations: Find coordinates of all pixels with Marker_Colors (7, 8).
  - Determine_Background_Color:
    - Check input[0,0]. If its color `c` is in Content_Candidate_Colors, use `c`.
    - Else (if input[0,0] is 0, 7, or 8), find the mode (most frequent) color among all pixels with Content_Candidate_Colors in the input. Use the mode color (lowest value in case of ties).
  - Identify_Background_Object: Find the specific object instance (among all non-zero objects) that contains the top-most, left-most pixel matching the determined Background_Color.
  - Select_Content_Objects:
    - Start with the list of Candidate_Objects.
    - Remove the identified Background_Object from this list.
    - For each remaining Candidate_Object:
        - Check if any of its pixels are adjacent (8-way) to any identified Marker_Location.
        - Keep the object if adjacency is found.
  - Calculate_Canvas: Find the minimum bounding box containing all pixels of the *selected* content objects in their original input coordinates.
  - Create_Output: Make a new grid sized Canvas + (1-pixel padding on all sides), filled with Background_Color. Handle the case of no selected objects (e.g., return 3x3 background).
  - Draw_Content: Copy the exact pixel data of each selected content object from its input location to the corresponding location within the padded canvas on the output grid.