{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nTransforms the input grid based on color mapping rules derived from key blocks outside a gray frame.\n\nThe transformation logic involves several steps:\n1. Identifying a rectangular frame made of a specific color (gray, value 5) in the input grid by finding the minimum and maximum row and column indices of pixels with this color.\n2. Locating key-value color pairs outside this frame by examining adjacent pixels. The logic prioritizes horizontal (left->right) adjacency, then vertical (top->down) adjacency to establish a mapping rule (Color A -> Color B). The frame color and the determined background color are ignored when searching for these pairs.\n3. Determining the background color that should remain invariant during the transformation. This is identified as the most frequent color found in the area outside the frame, excluding the frame color itself and any colors that become part of a mapping rule (either as a key or a value). Fallback mechanisms are included if this primary identification method is ambiguous or fails.\n4. Cropping the input grid to the exact region defined by the frame's bounding box (inclusive).\n5. Creating the output grid by applying the derived mapping rules to the pixels within this cropped region. Pixels matching a key color (Color A) are changed to the corresponding value color (Color B). The frame color (5) and the identified invariant background color are preserved in their original positions. Any other pixel colors within the frame that are not part of the mapping rules also remain unchanged.\n\"\"\"\n\ndef find_frame_bbox(grid_np: np.ndarray, frame_color: int = 5) -> tuple[int, int, int, int] | None:\n    \"\"\"\n    Finds the bounding box coordinates (min_row, min_col, max_row, max_col) \n    of the pixels matching the specified frame color using their minimum and maximum indices.\n    Returns None if the frame color is not present in the grid.\n    \"\"\"\n    # Find all coordinates where the grid matches the frame color\n    coords = np.argwhere(grid_np == frame_color)\n    \n    # If no coordinates are found, the frame color doesn't exist; return None\n    if coords.size == 0:\n        return None \n        \n    # Determine the minimum and maximum row and column indices from the coordinates\n    r_min, c_min = coords.min(axis=0)\n    r_max, c_max = coords.max(axis=0)\n    \n    # Return the bounding box coordinates\n    return (r_min, c_min, r_max, c_max)\n\n\ndef find_mapping_rules_and_background(grid_np: np.ndarray, frame_bbox: tuple[int, int, int, int] | None, frame_color: int = 5) -> tuple[dict[int, int], int]:\n    \"\"\"\n    Identifies color mapping rules (as a dictionary {key_color: value_color}) \n    and the invariant background color (as an integer) by analyzing the region \n    of the grid outside the provided frame bounding box.\n    \"\"\"\n    rows, cols = grid_np.shape\n    \n    # If the frame bounding box is not provided, return default empty mappings and background color 0\n    if frame_bbox is None:\n         print(\"Warning: Frame bounding box is None in find_mapping_rules. Returning defaults.\")\n         return {}, 0 \n\n    r_min, c_min, r_max, c_max = frame_bbox\n\n    outside_colors_counter = Counter()\n    outside_coords = []\n    # Iterate through each cell of the grid\n    for r in range(rows):\n        for c in range(cols):\n            # Determine if the current cell is outside the frame's bounding box\n            is_outside = not (r >= r_min and r <= r_max and c >= c_min and c <= c_max)\n            if is_outside:\n                color = grid_np[r, c]\n                # Count the frequency of non-frame colors outside the frame\n                if color != frame_color:\n                    outside_colors_counter[color] += 1\n                # Store the coordinates of all cells outside the frame\n                outside_coords.append((r, c))\n\n    # --- Determine Potential Background Color ---\n    potential_background = -1\n    # Sort the counted outside colors by frequency (descending) and then by color value (ascending)\n    sorted_colors = sorted(outside_colors_counter.items(), key=lambda item: (-item[1], item[0]))\n    # The most frequent color is the initial candidate for the background\n    if sorted_colors:\n        potential_background = sorted_colors[0][0] \n    else:\n        # If no non-frame colors were found outside, default the background to 0\n        potential_background = 0 \n\n    # --- Find Mapping Rules by Checking Adjacency ---\n    mappings = {} # Dictionary to store color_a -> color_b mappings\n    mapped_colors = set() # Set to track colors involved in any mapping (key or value)\n    processed_pairs = set() # Set to track unique pairs (a,b) to avoid redundant checks\n\n    # Iterate through the coordinates identified as being outside the frame\n    for r, c in outside_coords:\n        color_a = grid_np[r, c]\n        # Skip if the color is the frame color, the potential background, or already a mapping key\n        if color_a == frame_color or color_a == potential_background or color_a in mappings:\n            continue\n\n        # Check the neighbor to the right\n        if c + 1 < cols:\n             nr, nc = r, c + 1\n             # Check if the right neighbor is also outside the frame\n             is_neighbor_outside = not (nr >= r_min and nr <= r_max and nc >= c_min and nc <= c_max)\n             if is_neighbor_outside:\n                 color_b = grid_np[nr, nc]\n                 # Check if color_b is a valid target for mapping (different from A, not frame, not background)\n                 if color_b != color_a and color_b != frame_color and color_b != potential_background:\n                     # Create a sorted tuple to uniquely identify the pair regardless of order\n                     pair = tuple(sorted((color_a, color_b)))\n                     # If this pair hasn't been processed and color_a hasn't been mapped yet\n                     if pair not in processed_pairs and color_a not in mappings:\n                         # Establish the mapping A -> B (horizontal priority)\n                         mappings[color_a] = color_b\n                         mapped_colors.add(color_a)\n                         mapped_colors.add(color_b)\n                         processed_pairs.add(pair)\n                         # Once color_a is mapped, move to the next coordinate in outside_coords\n                         continue \n\n        # If no horizontal mapping was found, check the neighbor below\n        if r + 1 < rows:\n             nr, nc = r + 1, c\n             # Check if the bottom neighbor is also outside the frame\n             is_neighbor_outside = not (nr >= r_min and nr <= r_max and nc >= c_min and nc <= c_max)\n             if is_neighbor_outside:\n                  color_b = grid_np[nr, nc]\n                  # Check if color_b is a valid target for mapping\n                  if color_b != color_a and color_b != frame_color and color_b != potential_background:\n                      pair = tuple(sorted((color_a, color_b)))\n                      # If this pair hasn't been processed and color_a hasn't been mapped yet\n                      if pair not in processed_pairs and color_a not in mappings:\n                           # Establish the mapping A -> B (vertical)\n                           mappings[color_a] = color_b\n                           mapped_colors.add(color_a)\n                           mapped_colors.add(color_b)\n                           processed_pairs.add(pair)\n                           # Loop continues to the next coordinate\n\n    # --- Finalize Background Color ---\n    actual_background = potential_background\n    # If the initial potential background color was used in a mapping\n    if potential_background in mapped_colors:\n        actual_background = -1 # Reset the background color\n        # Find the next most frequent outside color that *wasn't* mapped\n        for color, count in sorted_colors: \n            if color not in mapped_colors:\n                actual_background = color\n                break # Found a suitable background color\n\n        # Fallback if all outside non-frame colors were involved in mappings\n        if actual_background == -1:\n            # Check inside the frame (excluding the border) for the most frequent color\n            # that isn't the frame color and wasn't mapped.\n            inside_counter = Counter()\n            # Check if frame has an interior (width and height > 1 pixel excluding borders)\n            if r_max > r_min and c_max > c_min: \n                 for r_in in range(r_min + 1, r_max):\n                     for c_in in range(c_min + 1, c_max):\n                         color = grid_np[r_in, c_in]\n                         # Count frequency if not frame color and not already mapped\n                         if color != frame_color and color not in mapped_colors:\n                             inside_counter[color] += 1\n            \n            # Sort the inside colors by frequency\n            sorted_inside = sorted(inside_counter.items(), key=lambda item: (-item[1], item[0]))\n            if sorted_inside:\n                 # The most frequent unmapped inside color becomes the background\n                 actual_background = sorted_inside[0][0] \n            else:\n                # If no suitable background found via any method, default to 0\n                print(\"Warning: Could not determine a definitive background color. Defaulting to 0.\")\n                actual_background = 0 \n\n    # Return the final mapping rules and the determined background color\n    return mappings, actual_background\n\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Transforms the input grid according to ARC task logic:\n    1. Finds a gray (5) frame.\n    2. Derives color mapping rules from adjacent color blocks outside the frame.\n    3. Determines the invariant background color.\n    4. Crops the grid to the frame's boundaries.\n    5. Applies the mappings to the cropped area, preserving frame and background colors.\n    \"\"\"\n    # Convert the input list of lists to a NumPy array for efficient operations\n    input_np = np.array(input_grid, dtype=int)\n    frame_color = 5 # Define the color designated as the frame\n\n    # Step 1: Find the bounding box of the gray frame\n    frame_bbox = find_frame_bbox(input_np, frame_color)\n\n    # If no frame is detected, return the original input grid as per ARC convention\n    if frame_bbox is None:\n        # print(\"Warning: No frame (color 5) found. Returning input grid unchanged.\")\n        return input_grid\n\n    r_min, c_min, r_max, c_max = frame_bbox\n\n    # Step 2: Determine the color mapping rules and the invariant background color\n    mappings, invariant_background = find_mapping_rules_and_background(input_np, frame_bbox, frame_color)\n\n    # Step 3: Crop the input grid to the area defined by the frame's bounding box.\n    # Create a copy to avoid modifying the original input array slice.\n    output_np = input_np[r_min:r_max + 1, c_min:c_max + 1].copy()\n    output_h, output_w = output_np.shape # Get dimensions of the output grid\n\n    # Step 4: Apply the transformation rules to the cropped grid (output_np)\n    for r_out in range(output_h):\n        for c_out in range(output_w):\n            current_color = output_np[r_out, c_out]\n\n            # Check conditions and apply transformations:\n            # If the color is the frame color, do nothing.\n            if current_color == frame_color:\n                continue \n            # If the color is the invariant background, do nothing.\n            elif current_color == invariant_background:\n                continue \n            # If the color is a key in the mappings dictionary, change it to the mapped value.\n            elif current_color in mappings:\n                output_np[r_out, c_out] = mappings[current_color]\n            # Otherwise (color is not frame, not background, not a mapping key), it remains unchanged.\n            \n    # Convert the transformed NumPy array back to a standard Python list of lists\n    output_grid = output_np.tolist()\n\n    # Return the final transformed grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5725,
    "candidates_token_count": 18560,
    "total_token_count": 24285,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-preview-03-25",
  "response_time": 134.011954,
  "retries": 1
}