# Facts observed from train_1 and train_2 examples
grid_properties:
  size: [10, 10]
  background_color: 0
colors:
  present_in_input: variable # [0, 1, 2, 3] for train_1; [0, 1, 3, 4, 5] for train_2
  present_in_output: variable
  unique_input_colors: # Colors appearing exactly once in the input grid
    train_1: [3]
    train_2: [3, 5]
  most_frequent_input_color: # Most frequent non-zero color(s) in input
    train_1: [1, 2] # Tie
    train_2: [4]
objects_input:
  properties:
    - id
    - color(s)
    - location (list of [row, col])
    - size (number of cells)
    - shape_desc (optional)
  criteria:
    bounding_box_source: objects with size 3
    outer_fill_color_source: the unique color belonging to a multi-cell object
    inner_fill_color_source: the other unique color (if it exists)
    inner_bounding_box_source: objects with size 3 whose color is NOT the single most frequent non-zero color in the grid (if one exists)
transformation:
  action: layered_fill_region
  layers:
    - layer_id: outer_fill
      fill_color_rule: find unique color in a multi-cell input object
      region_definition:
        method: bounding_box
        source_objects: objects with size 3
      fill_rule: replace background (0) only
    - layer_id: inner_fill (conditional)
      condition: exists a second unique color AND a single most frequent non-zero input color
      fill_color_rule: use the second unique color
      region_definition:
        method: bounding_box
        source_objects: size-3 objects whose color is not the most frequent grid color
      fill_rule: replace background (0) only (overwrites outer fill where applicable)
  preservation:
    - all original non-zero cells retain their color and position.