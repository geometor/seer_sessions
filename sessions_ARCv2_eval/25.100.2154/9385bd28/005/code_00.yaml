# Facts observed from all training examples and code execution results
grid_properties:
  size: variable
  background_color_rule: most frequent color in the input grid
colors:
  present_in_input: variable
  present_in_output: variable
  unique_input_colors_rule: colors appearing exactly once in the input grid (excluding background)
  fill_colors_determination:
    mode_selection: based on presence of unique_input_colors
    mode_unique_colors:
      # Determines outer_fill_color and uc_used (unique color source)
      candidates_rule: form pairs (uc, neighbor_or_uc) where uc is unique color, neighbor_or_uc is uc or its non-background orthogonal neighbor.
      outer_fill_color_rule: value from the candidate pair with the maximum value, breaking ties by maximizing uc.
      # Determines inner_fill_color
      inner_fill_color_rule: (if >1 unique color exists) highest unique color NOT equal to uc_used.
    mode_no_unique_colors:
      # Processes each distinct color C found in size-3 objects
      trigger: process per distinct color C found in size-3 objects
      fill_color_rule(C): max(max_adjacent_non_background_neighbor, C) # Previous neighbor-only rule failed E4 C=6->Fill=6; Needs neighbor *or* self. Max seems best fit.
  most_frequent_non_background_color_rule: find color counts excluding background, identify single highest count OR set of tied highest counts.
objects_input:
  properties:
    - id
    - color
    - location (list of [row, col])
    - size (number of cells)
  criteria:
    size_3_objects: objects with size = 3
    size_3_lt_5_objects: size-3 objects with color < 5 (used in unique color mode outer BB)
transformation:
  action: conditional_layered_fill
  condition: presence of unique input colors
  mode_unique_colors:
    layers:
      - layer_id: outer_fill
        fill_color_rule: derived from unique colors and neighbors (pair rule)
        region_definition:
          method: minimal_bounding_box
          source_objects: size_3_objects with color < 5
        fill_rule: replace background color only # Adjacency preservation rule seems incorrect (failed E3)
      - layer_id: inner_fill (conditional)
        condition: inner_fill_color exists # Trigger regardless of most frequent count status
        fill_color_rule: highest remaining unique color not used for outer fill
        region_definition:
          method: minimal_bounding_box # This remains the biggest uncertainty
          source_objects_rule: | # Revised hypothesis based on E2/E3 failure analysis
            Select from 'size_3_lt_5_objects' those whose color is NOT in the set of most frequent non-background color(s).
            If this selection results in an empty set, maybe fall back to using all 'size_3_lt_5_objects'? (Needs testing)
            *Self-Correction: This rule predicted wrong inner BB for E3. High uncertainty remains.*
            *Alternative Hypothesis: Maybe inner BB is Outer BB inset by 1? Or related to locations of unique colors? No consistent simple rule found yet.*
        fill_rule: replace background color only (overwrites outer fill where applicable)
  mode_no_unique_colors:
    # High uncertainty based on E4 failure
    process_per_color_group: For each distinct color C in size_3_objects (sorted by C)
      layers: # Conceptually, one layer per color C
        - layer_id: fill_for_C
          fill_color_rule: max(max_adjacent_non_background_neighbor, C) # Revised based on E4 C=6 case analysis
          region_definition:
            method: minimal_bounding_box # This is likely incorrect; regions seem shifted/clipped in E4
            source_objects: size_3_objects with color C
          fill_rule: replace background color only
          overlap_rule: Later fills (higher C) overwrite earlier fills. # Assumption
  preservation:
    - all original non-background cells retain their color and position.