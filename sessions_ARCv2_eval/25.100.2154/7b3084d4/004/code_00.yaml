Input_Grid:
  Properties:
    Size: Variable (e.g., 20x20)
    Background_Digit: 0
  Objects:
    - Type: Cluster
      Quantity: 4 (connected components of non-zero digits)
      Properties:
        - Bounding_Box: (min_r, min_c, max_r, max_c)
        - H: Height (max_r - min_r + 1)
        - W: Width (max_c - min_c + 1)
        - Max_Dim: max(H, W)
        - Center: (avg_r, avg_c)
        - Dominant_Digit: Most frequent non-zero digit.
        - Contains_5: Boolean, true if '5' is present in the cluster.
        - Role: TL_Cluster, TR_Cluster, BL_Cluster, BR_Cluster (Assigned based on Center Y then X).
Parameters:
  - N: min(cluster.Max_Dim for cluster in clusters)
  - Output_Size: 2N x 2N
  - k: N // 2
Transformation_Steps:
  - Find_Clusters: Identify 4 clusters and calculate their properties.
  - Determine_N: Calculate N from cluster dimensions.
  - Assign_Roles: Sort clusters by center (Y then X) to assign TL, TR, BL, BR roles. Record dominant digits D_TL, D_TR, D_BL, D_BR.
  - Select_Assembly_Rule:
      - If minY(TL_Cluster) == minY(TR_Cluster): Rule B (Swap top, set Rotation=True)
      - Else: Rule A (Standard placement, set Rotation=False)
  - Extract_Subgrids: Get top-left NxN from each *role* cluster's bbox (`Subgrid_TL`, `Subgrid_TR`, `Subgrid_BL`, `Subgrid_BR`).
  - Rotate_If_Needed: If Rotation=True, rotate `Subgrid_TR` 270 deg clockwise -> `Rotated_Subgrid_TR`.
  - Assemble_Grid:
      - Create 2N x 2N `OutputGrid`.
      - Place subgrids based on Assembly Rule:
          - TL_Out: `Rotated_Subgrid_TR` (Rule B) or `Subgrid_TL` (Rule A)
          - TR_Out: `Subgrid_TL` (Rule B) or `Subgrid_TR` (Rule A)
          - BL_Out: `Subgrid_BL`
          - BR_Out: `Subgrid_BR`
  - Fill_Zeroes:
      - Iterate through `OutputGrid`.
      - If cell `(r,c)` has a 0 from the source subgrid:
          - Determine output quadrant (TL, TR, BL, BR).
          - Determine dominant digit of the *source cluster* for that quadrant (based on Assembly Rule and Roles: e.g., TL_Out gets D_TR if Rule B, D_TL if Rule A).
          - Replace 0 with the corresponding source dominant digit.
  - Apply_Boundary_Modifications: (This step requires refinement)
      - Rule_5: If *any* input cluster `Contains_5`, set `OutputGrid[0, 0] = 5`.
      - Other_Rules: Modify specific cells, primarily near the N-1, N row/col boundaries.
          - Observations for N>2 suggest overrides at `[k, N]`, `[k, N-1]`, `[N-1, k]`, `[N-1, N+k]`, `[N+k, k]`, `[N+k, N-1]`, `[N+k, N]` using dominant digits D_TL, D_BL, D_BR. Rule `[N-2, N+k] = D_BR` might apply for N>=5.
          - Observations for N=2 suggest a different pattern, potentially replacing the center 2x2 (`[1,1]`..`[2,2]`) with values derived from D_BR, D_TR, D_TL.
          - The exact, general rule for this step is not fully determined.
Output_Grid:
  - The final state of `OutputGrid` after all modifications.