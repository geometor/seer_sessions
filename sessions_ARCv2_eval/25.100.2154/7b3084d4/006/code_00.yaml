Input_Grid:
  Properties:
    Size: Variable (e.g., 20x20)
    Background_Digit: 0
  Objects:
    - Type: Cluster
      Quantity: 4 (connected components of non-zero digits)
      Properties:
        - Bounding_Box: (min_r, min_c, max_r, max_c)
        - H: Height (max_r - min_r + 1)
        - W: Width (max_c - min_c + 1)
        - Max_Dim: max(H, W)
        - Center: (avg_r, avg_c) based on bbox corners.
        - Dominant_Digit: Most frequent non-zero digit within the component.
        - Contains_5: Boolean, true if '5' is present in the component digits.
        - Role: TL_Cluster, TR_Cluster, BL_Cluster, BR_Cluster (Assigned based on sorted Center Y then X).
Parameters:
  - N: min(cluster.Max_Dim for cluster in clusters)
  - Output_Size: 2N x 2N
  - k: N // 2
Transformation_Steps:
  - 1_Find_Clusters: Identify 4 clusters and calculate their properties. Sort by center (Y then X).
  - 2_Determine_N: Calculate N from cluster dimensions.
  - 3_Assign_Roles: Assign TL, TR, BL, BR roles based on sorted order. Record dominant digits D_TL, D_TR, D_BL, D_BR.
  - 4_Select_Assembly_Rule:
      - If minY(TL_Cluster.bbox) == minY(TR_Cluster.bbox): Rule B (Swap top placement, set Rotation=True)
      - Else: Rule A (Standard placement, set Rotation=False)
  - 5_Extract_Subgrids: Get top-left NxN from each *role* cluster's bbox (`Subgrid_TL`, etc.).
  - 6_Rotate_If_Needed: If Rotation=True, rotate `Subgrid_TR` 270 deg clockwise -> `Transformed_Subgrid`.
  - 7_Assemble_Grid:
      - Create 2N x 2N `OutputGrid`.
      - Place subgrids based on Assembly Rule (TL_Out uses `Transformed_Subgrid` if Rule B, else `Subgrid_TL`; TR_Out uses `Subgrid_TL` if Rule B, else `Subgrid_TR`; BL/BR use respective subgrids).
  - 8_Fill_Zeroes:
      - Iterate through `OutputGrid`.
      - If cell `(r,c)` has a 0 from the source subgrid:
          - Determine output quadrant (TL, TR, BL, BR).
          - Determine the dominant digit of the *source cluster* for that quadrant (e.g., TL_Out gets D_TR if Rule B, D_TL if Rule A).
          - Replace 0 with the corresponding source dominant digit.
  - 9_Apply_Boundary_Modifications:
      - Rule_9.1 (Digit_5_Override): If *any* input cluster `Contains_5`, set `OutputGrid[0, 0] = 5`.
      - Rule_9.2 (Other_Overrides):
          - If N > 2: Apply specific point overrides using dominant digits D_TL, D_BL, D_BR. Coordinates include (bounds checked): `[k, N]`, `[k, N-1]`, `[N-1, k]`, `[N-1, N+k]`, `[N+k, 0]`, `[N+k, 1]`, `[N+k, k]`, `[N+k, k+1]`, `[N+k, N]`, `[N+k, N+1]`. An additional override at `[N-2, N+k]` applies if N>=5. (See NL Program Step 8.2 for specific assignments).
          - If N == 2: The boundary modification pattern is significantly different and more complex than point overrides. It involves changes across multiple rows/columns near the boundary, possibly based on dominant digits of adjacent/diagonal quadrants. The precise general rule for N=2 is not fully determined. Only Rule 9.1 applies reliably in this case based on current examples.
Output_Grid:
  - The final state of `OutputGrid` after all modifications.