Task: Modify colors of 'base' objects and potentially parts of 'upper structures' based on color context.

Definitions:
  - BackgroundColor: The most frequent color in the input grid.
  - UpperStructure: A contiguous object composed solely of Blue (1) and/or Red (2) pixels.
  - Base: A contiguous object composed of a single color (not Blue, Red, or BackgroundColor) that is adjacent (orthogonally or diagonally) to an UpperStructure and is generally located below or level with it (e.g., base.min_row >= structure.min_row). A structure might have multiple separate bases associated with it if they touch different parts, or one base might touch multiple structures. Focus is on the base(s) directly underneath.
  - TriggerPixel: A single-pixel object whose color is not BackgroundColor, Blue, or Red, and which is not identified as a Base, and is not adjacent to any UpperStructure.

Identification:
  - Find all UpperStructures.
  - Find all potential Base objects.
  - Associate Bases with UpperStructures they touch below. Record the original color of associated Bases.
  - Identify TriggerPixels.

Transformation Scenarios:

Scenario 1: Swap Case
  - Condition: The set of original colors of all associated Bases contains both Green (3) AND Azure (8).
  - Actions:
    1. Base Swap: Change all pixels of original Green (3) Bases to Azure (8). Change all pixels of original Azure (8) Bases to Green (3).
    2. Structure Red Pixel Change: For every Red (2) pixel within an UpperStructure, if its associated Base was originally Green (3), change the Red (2) pixel to Azure (8). (If the associated base was Azure(8), the Red(2) pixel remains Red(2)).
    3. Base Pixel Below Red Change: For every pixel within a Base, if it is located directly below a Red (2) pixel from an associated UpperStructure AND the Base's original color was Azure (8), change that Base pixel to Red (2). (This overrides the Base Swap for this pixel).

Scenario 2: Trigger Case
  - Condition: Swap Case condition is false, AND one or more TriggerPixels exist.
  - Assumption: All TriggerPixels have the same color (`TargetColor`).
  - Actions:
    1. Base Color Change: Change all pixels of all identified Bases (regardless of original color) to the `TargetColor`.
    2. Trigger Removal: Change all TriggerPixels to the BackgroundColor.
    3. Anomaly (Example 2 specific?): A new pixel appears. Input[14,3]=3 (Background). Output[14,3]=4 (Yellow). Trigger was at (10,3) (Magenta 6). Bases were Yellow (4). Rule is unclear - potentially place original base color at (trigger_row + N, trigger_col)? Or related to single-pixel base? (Ignoring for general program for now).

Scenario 3: No Action
  - Condition: Neither Swap Case nor Trigger Case conditions are met.
  - Action: The grid remains unchanged.

Example 1 Analysis (Swap Case):
  - Background: Yellow (4).
  - Bases Found: Green (3), Azure (8). Condition met.
  - Structure 1 (Top-Right): Base=Azure(8). Action: Base->Green(3). Red pixel (3,13) unchanged. Pixel below red (4,13) -> Red(2).
  - Structure 2 (Mid-Left): Base=Green(3). Action: Base->Azure(8). Red pixel (7,4) -> Azure(8). Pixel below red (8,4) -> Azure(8).
  - Structure 3 (Bottom-Mid): Base=Green(3). Action: Base->Azure(8). Red pixels (11,10-11) to (14,10-11) -> Azure(8). Pixels below red (15,10-11) -> Azure(8).

Example 2 Analysis (Trigger Case):
  - Background: Green (3).
  - Bases Found: Yellow (4) (single pixel at (4,2)), Yellow (4) (block at (12:14, 10:12)). No Green/Azure bases.
  - Trigger Found: Magenta (6) at (10,3). TargetColor = Magenta (6).
  - Condition met.
  - Action: Change all Yellow (4) base pixels -> Magenta (6). Change trigger pixel (10,3) -> Background (3).
  - (Anomaly: Output[14,3] becomes Yellow(4)).
