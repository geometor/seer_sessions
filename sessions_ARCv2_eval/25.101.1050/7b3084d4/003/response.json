{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport math\nfrom typing import List\n\n\"\"\"\nThe transformation rule extracts all non-white pixels within their minimal bounding box from the input grid, collects these pixel values in row-major order, and reshapes them into a square output grid. The side length of the output grid is the square root of the total number of non-white pixels.\n\n1. Find all non-white pixels (value != 0) in the input grid.\n2. Calculate the total count (N) of these non-white pixels.\n3. Determine the side length (S) of the output square grid, where S = sqrt(N). (Implicitly assumes N is a perfect square).\n4. Determine the minimal bounding box (min_row, max_row, min_col, max_col) containing all non-white pixels.\n5. Iterate through the rows of the input grid within the bounding box (from min_row to max_row).\n6. Within each row, iterate through the columns within the bounding box (from min_col to max_col).\n7. If a pixel at (row, col) is non-white, add its value to a 1D list.\n8. Reshape this 1D list of N pixel values into an S x S grid.\n9. Return the S x S grid.\n\"\"\"\n\ndef _find_bounding_box(grid: np.ndarray) -> tuple[int, int, int, int] | None:\n    \"\"\"Finds the minimal bounding box containing all non-zero elements.\"\"\"\n    non_zero_coords = np.argwhere(grid != 0)\n    if non_zero_coords.size == 0:\n        return None  # No non-background pixels found\n    min_row = non_zero_coords[:, 0].min()\n    max_row = non_zero_coords[:, 0].max()\n    min_col = non_zero_coords[:, 1].min()\n    max_col = non_zero_coords[:, 1].max()\n    return min_row, max_row, min_col, max_col\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Extracts non-background pixels within their bounding box and reshapes them into a square grid.\n    \"\"\"\n    input_array = np.array(input_grid, dtype=int)\n\n    # 1. Find coordinates and count of non-white pixels\n    non_zero_coords = np.argwhere(input_array != 0)\n    num_non_zero = non_zero_coords.shape[0]\n\n    # Handle case where input grid is all background or empty\n    if num_non_zero == 0:\n        return []\n\n    # 2. Calculate the side length of the output square grid\n    side_length = int(math.sqrt(num_non_zero))\n    # Basic check if N is a perfect square (might need more robust error handling if not guaranteed)\n    if side_length * side_length != num_non_zero:\n         # This case indicates the hypothesis might be wrong for some inputs\n         # For now, proceed assuming it's always a square based on examples\n         # or return an empty/error state? Returning empty for now.\n        print(f\"Warning: Number of non-zero pixels ({num_non_zero}) is not a perfect square.\")\n        return [] # Or raise an error\n\n    # 3. Find the bounding box\n    bbox = _find_bounding_box(input_array)\n    # This check should be redundant if num_non_zero > 0, but good practice\n    if bbox is None:\n        return [] \n        \n    min_row, max_row, min_col, max_col = bbox\n\n    # 4. Extract non-white pixels within the bounding box in row-major order\n    non_zero_pixels_list = []\n    for r in range(min_row, max_row + 1):\n        for c in range(min_col, max_col + 1):\n            pixel = input_array[r, c]\n            if pixel != 0:\n                non_zero_pixels_list.append(pixel)\n\n    # 5. Reshape the list into the S x S output grid\n    # Check if the number of extracted pixels matches expected count N\n    if len(non_zero_pixels_list) != num_non_zero:\n         print(f\"Error: Extracted pixel count ({len(non_zero_pixels_list)}) doesn't match expected ({num_non_zero}).\")\n         return [] # Error state\n\n    output_array = np.array(non_zero_pixels_list).reshape((side_length, side_length))\n\n    # 6. Convert final numpy array back to list of lists\n    output_grid = output_array.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 17998,
    "candidates_token_count": 1646,
    "total_token_count": 19644,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-preview-03-25",
  "response_time": 12.579999,
  "retries": 1
}