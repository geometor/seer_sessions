task_description: Fill background pixels using iterative propagation with priority. The fill color is determined by a mapping from source colors (adjacent to background) potentially influenced by adjacent higher-index source colors.

elements:
  - type: grid
    properties: Contains pixels with color values 0-9.
  - type: background_pixel
    properties:
      - color: The most frequent color in the input grid (BG).
      - role: Target pixels to be replaced during the transformation.
  - type: source_pixel
    properties:
      - color: A non-background color (S) in the input grid that is orthogonally adjacent to at least one background_pixel.
      - role: Influences the color of adjacent background pixels in the output, potentially mapping to a different fill color based on adjacency rules.
  - type: fill_pixel
    properties:
      - color: A color (F) that replaces a background_pixel in the output grid. It is determined by the source_pixel(s) adjacent to the original background_pixel via a derived mapping.
      - priority: Determined by the fill color's index (lower index = higher priority).
  - type: source_fill_map
    properties:
      - type: dictionary mapping source_color (S) -> fill_color (F).
      - derivation_rule (Hypothesis 20):
          - For each source color S:
            - Find all adjacent source colors S'.
            - If any adjacent S' exists such that S' > S:
              - Map S -> max(adjacent S' where S' > S).
            - Else (no adjacent S' > S):
              - Map S -> S (identity map).
      - limitations: This derivation rule matches observed fills in Examples 2 & 4, but not 1 & 3.
      - scope: Applies to the specific task instance.

relationships:
  - type: adjacency
    between: [pixel, pixel]
    properties: Orthogonal neighbors (up, down, left, right).
  - type: source_adjacency
    between: [source_pixel, source_pixel]
    properties: Orthogonal adjacency between pixels of different source colors.
  - type: determines_fill_via_map
    from: source_pixel_color (S)
    to: fill_pixel_color (F)
    using: source_fill_map
    properties: A source pixel S influences adjacent background pixels to become color F = source_fill_map[S].
  - type: overwrites
    from: lower_index_color
    to: higher_index_color or background_pixel
    properties: Occurs when multiple colors (original sources or propagating fills) compete for the same pixel location during propagation; the color with the lowest index prevails.

actions:
  - name: identify_background_color
    target: input_grid
    output: background_color_value (BG)
  - name: identify_sources_and_adjacency
    target: input_grid, background_color
    output: set of source_colors (S), dictionary of source_adjacencies (S -> set(adjacent S')).
  - name: derive_source_fill_map (Hypothesis 20)
    target: source_colors, source_adjacencies
    output: dictionary source_fill_map (S -> F)
    steps:
      - Initialize empty map M.
      - For each source color s in S:
        - Find max_higher_adj = -1
        - If s has adjacent sources in source_adjacencies:
           - For each adjacent source adj_s in source_adjacencies[s]:
             - If adj_s > s:
               - max_higher_adj = max(max_higher_adj, adj_s)
        - If max_higher_adj != -1:
           - M[s] = max_higher_adj
        - Else:
           - M[s] = s
  - name: iterative_mapped_priority_flood_fill
    target: input_grid
    using:
        - background_color (BG)
        - source_fill_map (M) derived via Hypothesis 20
        - priority_rule (lower color index wins)
    output: output_grid
    steps:
      - Initialize working_grid = input_grid.
      - Get the set of actual fill colors F_set = set(M.values()).
      - Repeat until no changes occur in an iteration:
        - Create next_grid = copy of working_grid.
        - For each pixel (r, c):
          - Get current_color = working_grid[r, c].
          - Find potential fill influences:
            - Initialize empty list `influences`.
            - For each neighbor `(nr, nc)` with color `C_neighbor` in working_grid:
              - If `C_neighbor == BG`: continue
              - If `C_neighbor` is a source color `s` in `M`: `influences.append(M[s])`
              - Else if `C_neighbor` is a fill color `f` in `F_set`: `influences.append(f)`
              # Note: Non-source, non-fill colors simply act as barriers implicitly
          - If `influences` is not empty:
            - Find `winning_fill = min(influences)`.
            - update_pixel = False
            - If `current_color == BG`: update_pixel = True
            - Else if `winning_fill < current_color`: update_pixel = True
            - If update_pixel and `next_grid[r, c] != winning_fill`:
              - Set `next_grid[r, c] = winning_fill`. Mark change occurred.
        - Update `working_grid = next_grid`.
    notes: The map derivation (Hypothesis 20) used here is the best fit found but is known to be imperfect for all training examples. The flood fill process itself uses the derived map.
