{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\n\n\"\"\"\nProcesses a 2D grid of integers column by column. \nFor each column:\n1. Finds all non-zero values.\n2. If fewer than two non-zero values exist, the column remains unchanged.\n3. If two or more non-zero values exist:\n   a. Identifies the minimum non-zero value (`min_val`) in the column.\n   b. Finds the row index (`trigger_row`) of the *first* occurrence of `min_val`.\n   c. For all rows *below* `trigger_row`, any non-zero value in that column is replaced with `min_val`. \n   d. Values at or above `trigger_row`, and all zero values, remain unchanged.\n\"\"\"\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies the column-based transformation rule to the input grid.\n\n    Args:\n        input_grid: A list of lists representing the input 2D grid of integers.\n\n    Returns:\n        A new list of lists representing the transformed grid.\n    \"\"\"\n    # Handle empty grid case\n    if not input_grid or not input_grid[0]:\n        return []\n\n    # Get grid dimensions\n    num_rows = len(input_grid)\n    num_cols = len(input_grid[0])\n\n    # Initialize output_grid as a deep copy of the input\n    # This ensures unchanged cells/columns are correctly preserved\n    output_grid = copy.deepcopy(input_grid)\n\n    # Iterate through each column index\n    for c_idx in range(num_cols):\n        # --- Find non-zero elements and their locations in the current column ---\n        non_zero_info = [] # List to store tuples of (value, row_index)\n        for r_idx in range(num_rows):\n            value = input_grid[r_idx][c_idx]\n            if value != 0:\n                non_zero_info.append((value, r_idx))\n\n        # --- Check if transformation is needed (at least two non-zeros) ---\n        if len(non_zero_info) < 2:\n            # If less than 2 non-zeros, this column remains unchanged (already copied)\n            continue\n\n        # --- Determine the minimum non-zero value ---\n        # Extract just the values from non_zero_info\n        non_zero_values = [val for val, r_idx in non_zero_info]\n        min_val = min(non_zero_values)\n\n        # --- Find the first row index where the minimum value occurs ---\n        trigger_row = -1 # Initialize trigger_row\n        for val, r_idx in non_zero_info:\n            if val == min_val:\n                trigger_row = r_idx\n                break # Stop at the first occurrence\n\n        # Ensure trigger_row was found (should always happen if len >= 2)\n        if trigger_row == -1: \n             # This case should technically not be reached if len(non_zero_info) >= 2\n             # but included for robustness\n             continue\n\n        # --- Apply the transformation to rows below the trigger row ---\n        # Iterate through rows starting from the one *after* the trigger row\n        for r_idx in range(trigger_row + 1, num_rows):\n            # Check if the *original* value at this position was non-zero\n            if input_grid[r_idx][c_idx] != 0:\n                # If it was non-zero, update the corresponding cell in the output grid\n                output_grid[r_idx][c_idx] = min_val\n            # If the original value was zero, it remains zero (already copied)\n\n    # Return the modified grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2981,
    "candidates_token_count": 1882,
    "total_token_count": 4863,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-preview-03-25",
  "response_time": 13.817742,
  "retries": 1
}