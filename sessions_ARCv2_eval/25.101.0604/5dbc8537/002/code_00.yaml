task_description: The task involves two distinct grid transformation types based on input characteristics. Type 1 extracts and fills segments based on row index. Type 2 uses one part of the grid as a template and fills based on patterns in another part.

transformation_types:
  - type_id: segment_fill
    detection_criteria: Presence of rows containing a segment of width 7 bounded by the value 9.
    applies_to: train_1
  - type_id: region_projection
    detection_criteria: Absence of characteristic 9-bounded segments, likely a specific grid size (e.g., 20x20) with distinct top/bottom regions.
    applies_to: train_2

type_segment_fill: # Corresponds to train_1
  input_dimensions: [15, 15] # Example specific
  output_dimensions: [15, 7] # Example specific
  objects:
    - name: boundary_marker
      value: 9
      role: Delimits the segment of interest horizontally.
    - name: segment
      properties:
        width: 7
      location: Horizontal strip between first and last boundary_marker in a row.
      role: Basis for the output row.
    - name: fill_target
      value: 4
      location: Cells within the segment (excluding boundaries).
      role: Cells to be replaced by paint_color.
    - name: preserved_cells
      location: Cells within the segment (excluding boundaries) not matching fill_target value.
      role: Cells copied directly to output, preserving their original value.
    - name: paint_color
      role: Color used to replace fill_target cells.
      determination: Lookup table based on row index `r`.
        - r in {0, 1}: 8
        - r in {2, 3, 4, 5, 7}: 3
        - r == 6: 3
        - r in {8, 9}: 1
        - r in {10, 11, 14}: 5
        - r in {12, 13}: 7
  actions:
    - for each input row `r`:
        - find: first `c1` and last `c2` index of boundary_marker.
        - if `c1` and `c2` found and `c2 - c1 + 1 == 7`:
            - extract: segment `S = Input[r, c1:c2+1]`.
            - create: output row `O` as a copy of `S`.
            - determine: paint_color `P` based on `r`.
            - for `i` from 1 to 5:
                - if `O[i] == fill_target`:
                    - set: `O[i] = P`.
            - if `r == 6`: # Special case
                - set: `O[4] = 0`.
            - append: `O` to the final output grid.

type_region_projection: # Corresponds to train_2
  input_dimensions: [20, 20] # Example specific
  output_dimensions: [9, 20] # Example specific
  regions:
    - name: top_pattern_region
      rows: 0-10
      background_color: 8
      role: Provides pattern information for filling.
    - name: bottom_template_region
      rows: 11-19
      background_color_1: 2 # Preserved background
      background_color_2: 8 # Fill target background
      role: Defines the structure and fill locations for the output.
  objects:
    - name: preserved_cell
      value: 2
      location: Cells in bottom_template_region.
      role: Copied directly to the output grid.
    - name: fill_target_cell
      value: 8
      location: Cells in bottom_template_region.
      role: Cells in the output grid to be filled with a determined color `P`.
    - name: fill_color_P
      role: Color used to replace fill_target_cells in the output.
      determination: Complex function `F(r, c, Input[0:11, :])` depending on the output row `r`, column `c`, and the content of the top_pattern_region. The exact function `F` requires further analysis.
  actions:
    - select: `Bottom = Input[11:20, :]`.
    - create: `Output` grid of size 9x20.
    - for `r` from 0 to 8:
        - for `c` from 0 to 19:
            - get: `value = Bottom[r, c]`.
            - if `value == 2`:
                - set: `Output[r, c] = 2`.
            - elif `value == 8`:
                - determine: `P = F(r, c, Input[0:11, :])`. # Placeholder for complex rule
                - set: `Output[r, c] = P`.