# Metrics based on the code provided in the previous prompt

# Example 1 Data (Mode A)
exp1 = [[0,0,0,0,0,0,0,0,0],[1,0,0,1,0,0,1,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[6,0,6,0,6,0,6,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[3,3,3,3,3,3,3,3,0]]
out1 = [[0,0,0,0,0,0,0,0,0],[1,0,0,1,0,0,1,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[6,0,6,0,6,0,6,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[3,3,3,3,3,3,3,3,0]] # Corrected based on Mode A logic

# Example 2 Data (Mode B - using previous code's logic for calculation)
# Ref NZ = [(2, 3), (9, 3), (15, 1), (18, 9)]
# Mode B Rule: Start 0s, Apply Ref NZ, Overlay Input NZ
exp2 = [[0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,1,0,0,9,0],[0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0],[0,0,4,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,9,0],[0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,5,0],[0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,1,0,0,9,0],[0,0,4,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,9,0],[0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0],[0,0,4,0,0,0,0,0,0,3,0,0,0,0,0,1,0,0,9,0]]
out2 = [ # Calculated using: Start 0s, Apply Ref NZ, Overlay Input NZ
  [0,0,3,0,0,0,0,0,0,3,0,0,0,0,0,1,0,0,9,0], # Row 0 (Input NZ=[]) -> Ref Pattern
  [0,0,3,0,0,0,0,0,0,3,0,0,0,0,0,1,0,0,9,0], # Row 1 (Input NZ=[]) -> Ref Pattern
  [0,0,4,0,0,0,0,0,0,3,0,0,0,0,0,1,0,0,9,0], # Row 2 (Input NZ=[(2,4)]) -> Ref Pattern, O[2]=4
  [0,0,3,0,0,0,0,0,0,3,0,0,0,0,0,1,0,0,5,0], # Row 3 (Input NZ=[(18,5)]) -> Ref Pattern, O[18]=5
  [0,0,3,0,0,0,0,0,0,3,0,0,0,0,0,1,0,0,9,0], # Row 4 (Input NZ=[(15,1)]) -> Ref Pattern, O[15]=1
  [0,0,3,0,0,0,0,0,0,3,0,0,0,0,0,1,0,0,9,0], # Row 5 (Input NZ=[(2,3)]) -> Ref Pattern, O[2]=3
  [0,0,3,0,0,0,0,0,0,3,0,0,0,0,0,1,0,0,9,0], # Row 6 (Input NZ=[(18,9)]) -> Ref Pattern, O[18]=9
  [0,0,3,0,0,0,0,0,0,3,0,0,0,0,0,1,0,0,9,0], # Row 7 (Input NZ=[(9,3)]) -> Ref Pattern, O[9]=3
  [0,0,3,0,0,0,0,0,0,3,0,0,0,0,0,1,0,0,9,0]  # Row 8 (Input NZ=[(2,3),(9,3),(15,1),(18,9)]) -> Ref Pattern, Overlays match
]

# Example 3 Data (Mode B - using previous code's logic for calculation)
# Ref NZ = [(1, 2), (5, 2), (9, 6), (13, 2)]
# Mode B Rule: Start 0s, Apply Ref NZ, Overlay Input NZ
exp3 = [[0,2,0,0,0,2,0,0,0,6,0,0,0,2,0],[0,0,0,0,0,2,0,0,0,6,0,0,0,0,0],[0,2,0,0,0,2,0,0,0,6,0,0,0,0,0],[0,0,0,0,0,2,0,0,0,6,0,0,0,2,0],[0,2,0,0,0,2,0,0,0,6,0,0,0,0,0],[0,0,0,0,0,2,0,0,0,6,0,0,0,0,0],[0,2,0,0,0,2,0,0,0,6,0,0,0,2,0]]
out3 = [ # Calculated using: Start 0s, Apply Ref NZ, Overlay Input NZ
  [0,2,0,0,0,2,0,0,0,6,0,0,0,2,0], # Row 0 (Input NZ=[]) -> Ref Pattern
  [0,2,0,0,0,2,0,0,0,6,0,0,0,2,0], # Row 1 (Input NZ=[]) -> Ref Pattern
  [0,2,0,0,0,2,0,0,0,6,0,0,0,2,0], # Row 2 (Input NZ=[]) -> Ref Pattern
  [0,2,0,0,0,2,0,0,0,6,0,0,0,2,0], # Row 3 (Input NZ=[(13,2)]) -> Ref Pattern, O[13]=2
  [0,2,0,0,0,2,0,0,0,6,0,0,0,2,0], # Row 4 (Input NZ=[(1,2)]) -> Ref Pattern, O[1]=2
  [0,2,0,0,0,2,0,0,0,6,0,0,0,2,0], # Row 5 (Input NZ=[(5,2),(9,6)]) -> Ref Pattern, O[5]=2, O[9]=6
  [0,2,0,0,0,2,0,0,0,6,0,0,0,2,0]  # Row 6 (Input NZ=[(1,2),(5,2),(9,6),(13,2)]) -> Ref Pattern, Overlays match
]


def count_diff(grid1, grid2):
    diff = 0
    if not grid1 or not grid2 or len(grid1) != len(grid2) or len(grid1[0]) != len(grid2[0]):
        rows1 = len(grid1) if grid1 else 0
        rows2 = len(grid2) if grid2 else 0
        cols1 = len(grid1[0]) if rows1 > 0 and grid1[0] else 0
        cols2 = len(grid2[0]) if rows2 > 0 and grid2[0] else 0
        # Basic penalty for size mismatch
        return max(rows1*cols1, rows2*cols2) if rows1*cols1 != rows2*cols2 else 0

    rows = len(grid1)
    cols = len(grid1[0])
    for r in range(rows):
        if len(grid1[r]) != len(grid2[r]):
             diff += max(len(grid1[r]), len(grid2[r])) # Penalize for row mismatch
             continue
        for c in range(cols):
            if grid1[r][c] != grid2[r][c]:
                diff += 1
    return diff

print(f"Example 1 Pixels Off: {count_diff(exp1, out1)}")
print(f"Example 2 Pixels Off: {count_diff(exp2, out2)}")
print(f"Example 3 Pixels Off: {count_diff(exp3, out3)}")