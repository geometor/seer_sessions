# Metrics based on the failed code provided in the previous prompt

# Example 1 Data
exp1 = [[0,0,0,0,0,0,0,0,0],[1,0,0,1,0,0,1,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[6,0,6,0,6,0,6,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[3,3,3,3,3,3,3,3,0]]
out1 = [[0,0,0,0,0,0,0,0,0],[1,0,0,1,0,0,1,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[6,0,6,0,6,0,6,0,6],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[3,3,3,3,3,3,3,3,0]]

# Example 2 Data
exp2 = [[0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,1,0,0,9,0],[0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0],[0,0,4,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,9,0],[0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,5,0],[0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,1,0,0,9,0],[0,0,4,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,9,0],[0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0],[0,0,4,0,0,0,0,0,0,3,0,0,0,0,0,1,0,0,9,0]]
out2 = [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,4,0,0,0,0,0,0,3,0,0,0,0,0,1,0,0,9,0],[0,0,3,0,0,0,0,0,0,3,0,0,0,0,0,1,0,0,5,0],[0,0,3,0,0,0,0,0,0,3,0,0,0,0,0,1,0,0,9,0],[0,0,3,0,0,0,0,0,0,3,0,0,0,0,0,1,0,0,9,0],[0,0,3,0,0,0,0,0,0,3,0,0,0,0,0,1,0,0,9,0],[0,0,3,0,0,0,0,0,0,3,0,0,0,0,0,1,0,0,9,0],[0,0,3,0,0,0,0,0,0,3,0,0,0,0,0,1,0,0,9,0]]

# Example 3 Data
exp3 = [[0,2,0,0,0,2,0,0,0,6,0,0,0,2,0],[0,0,0,0,0,2,0,0,0,6,0,0,0,0,0],[0,2,0,0,0,2,0,0,0,6,0,0,0,0,0],[0,0,0,0,0,2,0,0,0,6,0,0,0,2,0],[0,2,0,0,0,2,0,0,0,6,0,0,0,0,0],[0,0,0,0,0,2,0,0,0,6,0,0,0,0,0],[0,2,0,0,0,2,0,0,0,6,0,0,0,2,0]]
out3 = [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,2,0,0,0,2,0,0,0,6,0,0,0,2,0],[0,2,0,0,0,2,0,0,0,6,0,0,0,2,0],[0,2,0,0,0,2,0,0,0,6,0,0,0,2,0],[0,2,0,0,0,2,0,0,0,6,0,0,0,2,0]]

def count_diff(grid1, grid2):
    diff = 0
    if not grid1 or not grid2 or len(grid1) != len(grid2) or len(grid1[0]) != len(grid2[0]):
        rows1 = len(grid1) if grid1 else 0
        rows2 = len(grid2) if grid2 else 0
        cols1 = len(grid1[0]) if rows1 > 0 and grid1[0] else 0
        cols2 = len(grid2[0]) if rows2 > 0 and grid2[0] else 0
        print(f"Grid dimension mismatch or empty grid: Grid1({rows1}x{cols1}), Grid2({rows2}x{cols2})")
        # Estimate difference based on total possible pixels if dimensions mismatch significantly
        # This part might need adjustment based on how to score size mismatches
        return max(rows1*cols1, rows2*cols2) if rows1*cols1 != rows2*cols2 else 0

    rows = len(grid1)
    cols = len(grid1[0])
    for r in range(rows):
        if len(grid1[r]) != len(grid2[r]):
             print(f"Row length mismatch at row {r}: len(grid1[r])={len(grid1[r])}, len(grid2[r])={len(grid2[r])}")
             diff += max(len(grid1[r]), len(grid2[r])) # Penalize heavily for row mismatch
             continue
        for c in range(cols):
            if grid1[r][c] != grid2[r][c]:
                diff += 1
    return diff

print(f"Example 1 Pixels Off: {count_diff(exp1, out1)}")
print(f"Example 2 Pixels Off: {count_diff(exp2, out2)}")
print(f"Example 3 Pixels Off: {count_diff(exp3, out3)}")
