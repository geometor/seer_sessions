task_description: Extract a subgrid defined by the combined bounding box of the non-background object(s) with the largest bounding box area. Populate the subgrid by copying original non-background pixels and filling original background pixels based on the color of the closest pixel belonging to a non-frame object.

definitions:
  background_color: The most frequently occurring pixel value in the input grid.
  object: A connected component of pixels having the same non-background color. Connectivity is 8-way (includes diagonals). Assumed to be monochromatic.
  pixel: A tuple `(row, col, color)`.
  bounding_box: The smallest rectangle (min_row, min_col, max_row_exclusive, max_col_exclusive) enclosing all pixels of an object.
  area: The area of a bounding box: `(max_row_exclusive - min_row) * (max_col_exclusive - min_col)`.
  max_area_objects: The set of objects whose bounding boxes have the largest area among all objects in the input grid.
  frame_bounding_box: The combined bounding box minimally enclosing all max_area_objects. This defines the size `(height, width)` and origin `(frame_r0, frame_c0)` of the output grid.
  frame_objects: Synonym for max_area_objects.
  non_frame_objects: All non-background objects that are NOT frame_objects.
  non_frame_pixels: The set of all pixels `(r, c, color)` belonging to any non_frame_object.

transformation_steps:
  - step: Identify the `background_color`.
  - step: Find all non-background `object`s using 8-way connectivity. Store the pixels belonging to each object.
  - step: Calculate the `bounding_box` and its `area` for each object.
  - step: Determine the maximum `bounding_box` area found (`max_area`).
  - step: Identify all `frame_objects` (those with area == `max_area`).
  - step: Identify all `non_frame_objects` and collect all their `non_frame_pixels`.
  - step: Calculate the `frame_bounding_box` (origin `(frame_r0, frame_c0)`, size `height` x `width`) enclosing all `frame_objects`.
  - step: Create an output grid of size `height` x `width`.
  - step: If `non_frame_pixels` is empty, fill the output grid with `background_color` and skip the next step (or use another fallback rule if specified by examples).
  - step: For each cell `(out_r, out_c)` in the output grid:
      - Corresponding input coordinates: `(in_r, in_c) = (frame_r0 + out_r, frame_c0 + out_c)`.
      - Get the value from the input grid: `input_val = input[in_r][in_c]`.
      - If `input_val` is NOT the `background_color`:
          - Set `output[out_r][out_c] = input_val`.
      - Else (`input_val` IS the `background_color`):
          - Find the `pixel` `p = (pr, pc, p_color)` in `non_frame_pixels` that minimizes the Euclidean distance squared `d_sq = (in_r - pr)^2 + (in_c - pc)^2`.
          - Apply tie-breaking if multiple pixels share the minimum distance:
              1. Prefer the pixel with the minimum `p_color`.
              2. If still tied, prefer the pixel with the minimum row `pr`.
              3. If still tied, prefer the pixel with the minimum column `pc`.
          - Set `output[out_r][out_c]` to the `p_color` of the selected closest pixel.
  - step: Return the populated output grid.

notes:
  - Connectivity for objects is 8-way.
  - The frame size is determined by the combined bounding box of object(s) with maximum bounding box area.
  - The fill rule (closest non-frame pixel) is the current best hypothesis but showed discrepancies in manual checks against training examples. Further refinement might be needed.
  - Assumes non-frame objects exist for filling; behavior if none exist should be clarified (fallback to background color?).