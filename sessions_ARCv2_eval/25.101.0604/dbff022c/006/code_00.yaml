elements:
  - element: grid
    properties:
      - type: 2D array of integers (0-9)
      - size: variable (rows x columns)
  - element: cell
    properties:
      - value: integer (0-9)
      - position: (row, column)
  - element: shape
    properties:
      - type: connected component (8-way adjacency) of identical non-zero cells
      - border_color: integer (C > 0)
      - cells: set of cell positions {(r, c), ...}
      - id: unique, hashable identifier (e.g., integer) for each shape instance
  - element: zero_component
    properties:
      - type: connected component (4-way/orthogonal adjacency) of 0-valued cells
      - cells: set of cell positions {(r, c), ...}
  - element: hole
    properties:
      - type: zero_component
      - characteristic: All non-zero orthogonal neighbors of the component's cells belong to the same, single shape instance (identified by shape.id).
      - enclosing_shape_id: The unique ID of the shape instance identified by the neighbors.
  - element: fill_color
    properties:
      - value: integer (F > 0) or None

relationships:
  - type: spatial
    description: Cells have orthogonal and diagonal neighbors. Shapes and zero components occupy regions.
  - type: adjacency
    description: Cells within shapes are connected (8-way). Cells within zero components are connected (4-way). Zero components have orthogonal neighbors which can be other zeros or non-zero cells belonging to shapes.
  - type: enclosure (local)
    description: A hole (zero_component) is enclosed by a specific shape instance (identified by enclosing_shape_id) if all its non-zero orthogonal neighbors belong exclusively to that shape instance.
  - type: context
    description: The fill color for a hole enclosed by a shape of color 4 depends on the minimum border color of *other* shapes (identified by different shape.id) present in the grid.

actions:
  - action: identify_shapes
    input: grid
    output: list of shape objects [ {color: C, cells: {...}, id: ID}, ... ], cell_to_shape_id_map { (r,c): ID, ... }
    method: Find connected components of non-zero cells using 8-way adjacency. Assign a unique integer ID to each shape object. Map cells to their shape ID.
  - action: identify_zero_components
    input: grid
    output: list of zero_components [ {cells: {(r, c), ...}}, ... ]
    method: Find connected components of 0-valued cells using 4-way adjacency.
  - action: identify_holes
    input: zero_component_cells, grid, cell_to_shape_id_map
    output: enclosing_shape_id (integer or None if not a hole)
    method:
      1. Collect all unique non-zero orthogonal neighbors for all cells in zero_component_cells.
      2. If no non-zero neighbors exist, return None.
      3. Look up the shape ID for each non-zero neighbor using cell_to_shape_id_map. Collect these IDs into a set.
      4. If the set contains exactly one unique shape ID, return that ID.
      5. Otherwise (neighbors are 0 or belong to multiple shapes), return None.
  - action: get_shape_by_id
    input: shape_id, all_shapes
    output: shape object {color: C, cells: {...}, id: ID}
    method: Find the shape object in the list `all_shapes` whose `id` matches the input `shape_id`.
  - action: determine_fill_color
    input: enclosing_shape object S, all_shapes
    output: fill_color F (integer or None)
    logic:
      - Let C = S['color']
      - If C=3 -> F=3
      - If C=7 -> F=7
      - If C=8 -> F=1
      - If C=2 -> F=7
      - If C=4:
        - Find border colors of all shapes in `all_shapes` where shape['id'] != S['id'] -> other_border_colors set.
        - If other_border_colors is empty -> F=None
        - Else -> min_obd = min(other_border_colors)
          - If min_obd = 5 -> F=5
          - If min_obd = 3 -> F=6
          - Else -> F=None
      - Else (C=5 or other unspecified colors) -> F=None
  - action: apply_fill
    input: grid, all_shapes, cell_to_shape_id_map
    output: modified grid
    method:
      1. Create output_grid = copy(grid).
      2. Find all zero_components using identify_zero_components.
      3. Create a map from shape ID to shape object for quick lookup.
      4. For each `component` in zero_components:
         a. Determine enclosing_shape_id = identify_holes(component['cells'], grid, cell_to_shape_id_map).
         b. If enclosing_shape_id is not None:
            i. Get the enclosing_shape object S using get_shape_by_id (or the ID-to-shape map).
            ii. Determine fill_color F = determine_fill_color(S, all_shapes).
            iii. If F is not None:
                - For each cell (rz, cz) in component['cells']:
                    output_grid[rz][cz] = F
      5. Return output_grid.