task_description: Extract connected non-background objects from the core area of an input grid, pad them symmetrically to a consistent width determined by the widest object found in the core area, and stack them vertically in order.

definitions:
  grid: A 2D array of digits.
  background_color: 8
  border_markers: [0, 1, 2] # Digits often found in border rows/columns, outside the core processing area.
  core_grid: The smallest rectangular subgrid of the input containing all cells with values other than the background_color (8).
  object: A connected component of cells within the core_grid containing digits other than the background_color. Connectivity is 4-way (up, down, left, right).
  bounding_box: The smallest rectangle enclosing an object relative to the core_grid's coordinates.
  object_subgrid: The content of the core_grid within an object's bounding box.

actions:
  - identify_core_grid: Find the minimum and maximum row and column indices of all cells in the input_grid that are not the background_color (8). Extract the subgrid defined by these bounds.
  - find_objects: Within the core_grid, locate all connected components (objects) of non-background_color digits.
  - extract_subgrids: For each object, extract the subgrid corresponding to its bounding_box from the core_grid.
  - determine_target_width: Find the maximum width among all extracted object_subgrids.
  - order_subgrids: Arrange the extracted object_subgrids based on the top-left coordinate of their corresponding object's bounding_box within the core_grid (top-to-bottom, then left-to-right).
  - pad_subgrids: For each ordered object_subgrid whose width is less than the target_width, pad it symmetrically with the background_color (8) on the left and right until its width equals the target_width. If odd padding is needed, add the extra column to the right.
  - concatenate_subgrids: Stack the ordered, padded subgrids vertically to create the final output grid.

relationships:
  - The output grid is composed of padded representations of the objects found in the input's core_grid.
  - The width of the output grid is determined by the width of the widest object found in the input's core_grid. (Exception: train_1 appears to follow a different width/padding rule).
  - The order of object representations in the output corresponds to the top-to-bottom, left-to-right spatial order of the objects found within the core_grid.
  - Padding exclusively uses the background_color (8).

observation_notes:
  - The core grid must be identified first by finding the bounding box of all non-8 cells in the input.
  - Subsequent operations (object finding, padding, stacking) occur relative to this core grid.
  - Examples train_2, train_3, train_4 consistently follow the rule of padding extracted objects to the maximum width found among them.
  - Example train_1 does not follow this padding/width rule. Its output width (6) is larger than the maximum width of its core objects (2). The transformation for its objects (e.g., `[[1,6],[2,6]]` -> `[[1,2,6,6,6,6]]`) seems unique and may require a separate rule, potentially influenced by its specific border markers or object content.