{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom scipy.ndimage import label, find_objects\n\n\"\"\"\nTransforms a 2D grid based on the following rules:\n1. Defines a Frame Color (5) and a Background Color (0). Any other color is a Content Color.\n2. Identifies the \"Main Frame\": the largest connected component of Frame Color cells in the input grid that touches at least one edge.\n3. Initializes an output grid of the same dimensions.\n4. Determines the color of each cell in the output grid based on the input grid and the Main Frame:\n    a. If a cell is part of the Main Frame, its output color is Frame Color.\n    b. If an input cell has Background Color and is not part of the Main Frame, its output color is Background Color.\n    c. If an input cell has Frame Color but is *not* part of the Main Frame:\n        i. Check the color below it in the input grid.\n        ii. If the color below is a Content Color, the output color is the color below.\n        iii. Otherwise (color below is Frame or Background), the output color is Background Color.\n    d. If an input cell has a Content Color and is *not* part of the Main Frame:\n        i. Look down the column from the cell below it in the input grid.\n        ii. If Background Color (0) is found *before* Frame Color (5), or if the bottom boundary is reached without encountering Frame Color, the output color becomes Frame Color.\n        iii. If Frame Color (5) is found *before* Background Color (0), the output color remains the original Content Color.\n\"\"\"\n\ndef find_main_frame_mask(grid: np.ndarray, frame_color: int) -> np.ndarray:\n    \"\"\"\n    Identifies the largest connected component of frame_color cells\n    that touches any edge of the grid.\n    Returns a boolean mask where True indicates a cell is part of the main frame.\n    \"\"\"\n    H, W = grid.shape\n    # Create a binary mask where frame_color cells are True\n    binary_mask = (grid == frame_color)\n    \n    # Label connected components using 8-connectivity (default)\n    labeled_array, num_features = label(binary_mask)\n    \n    if num_features == 0:\n        return np.zeros_like(grid, dtype=bool) # No frame color cells found\n\n    largest_edge_component_label = 0\n    max_size = -1\n\n    # Iterate through each component label (1 to num_features)\n    for i in range(1, num_features + 1):\n        component_mask = (labeled_array == i)\n        component_size = np.sum(component_mask)\n        \n        # Check if this component touches any edge\n        touches_edge = False\n        # Get coordinates where the component exists\n        coords = np.argwhere(component_mask)\n        # Check if any coordinate touches an edge\n        if coords.size > 0: # Ensure component is not empty (shouldn't happen with label>0)\n             if np.any(coords[:, 0] == 0) or np.any(coords[:, 0] == H - 1) or \\\n                np.any(coords[:, 1] == 0) or np.any(coords[:, 1] == W - 1):\n                 touches_edge = True\n        \n        # If it touches an edge and is larger than the current max, update\n        if touches_edge and component_size > max_size:\n            max_size = component_size\n            largest_edge_component_label = i\n            \n    # If no component touching an edge was found, return an empty mask\n    if largest_edge_component_label == 0:\n         return np.zeros_like(grid, dtype=bool)\n\n    # Create the final mask for the largest edge-touching component\n    main_frame_mask = (labeled_array == largest_edge_component_label)\n    \n    return main_frame_mask\n\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:  \n    \"\"\"\n    Applies the transformation rules to the input grid.\n    \"\"\"\n    # Convert input to numpy array for easier processing\n    input_arr = np.array(input_grid, dtype=int)\n    H, W = input_arr.shape\n    \n    # Initialize output grid with a temporary value (-1) to ensure all cells are explicitly set\n    output_arr = np.full_like(input_arr, -1) \n    \n    FRAME_COLOR = 5\n    BACKGROUND_COLOR = 0\n\n    # --- Step 1: Identify the Main Frame ---\n    main_frame_mask = find_main_frame_mask(input_arr, FRAME_COLOR)\n\n    # --- Step 2: Process Each Cell based on input_arr and main_frame_mask ---\n    for r in range(H):\n        for c in range(W):\n            input_color = input_arr[r, c]\n            is_main_frame = main_frame_mask[r, c]\n\n            # --- Rule 4a: Check Main Frame ---\n            if is_main_frame:\n                output_arr[r, c] = FRAME_COLOR\n                continue # Processed this cell\n\n            # --- Rule 4b: Check Background Color (and not main frame) ---\n            if input_color == BACKGROUND_COLOR:\n                 output_arr[r, c] = BACKGROUND_COLOR\n                 continue # Processed this cell\n\n            # --- Rule 4c: Check Non-Frame 5 ---\n            if input_color == FRAME_COLOR: # Already know it's not main_frame\n                color_below_in = BACKGROUND_COLOR # Default if out of bounds\n                if r + 1 < H:\n                    color_below_in = input_arr[r + 1, c]\n                \n                # Check if color_below is a Content Color\n                is_content_below = (color_below_in != BACKGROUND_COLOR and color_below_in != FRAME_COLOR)\n                \n                if is_content_below:\n                    output_arr[r, c] = color_below_in # Rule 4c.ii\n                else:\n                    output_arr[r, c] = BACKGROUND_COLOR # Rule 4c.iii\n                continue # Processed this cell\n\n            # --- Rule 4d: Check Content Color (and not main frame) ---\n            # This implicitly covers all remaining cases (input color is content color)\n            # because previous checks handled main_frame, background, and non-frame 5.\n            \n            # Look down the column from r+1 in the input array\n            found_zero_first = False\n            found_five_first = False\n            for r_look in range(r + 1, H):\n                look_color = input_arr[r_look, c]\n                if look_color == BACKGROUND_COLOR:\n                    found_zero_first = True # Rule 4d.iii (part 1)\n                    break\n                if look_color == FRAME_COLOR:\n                    found_five_first = True # Rule 4d.iv (part 1)\n                    break\n            \n            # Determine output based on findings\n            if found_zero_first:\n                output_arr[r, c] = FRAME_COLOR\n            elif found_five_first:\n                output_arr[r, c] = input_color # Keep original content color\n            else: # Neither 0 nor 5 found below (reached boundary)\n                output_arr[r, c] = FRAME_COLOR # Rule 4d.iii (part 2 - boundary case)\n            # No continue needed, this is the last possibility\n\n    # Ensure all cells were assigned (debugging check)\n    if np.any(output_arr == -1):\n        raise ValueError(\"Error: Not all cells were assigned an output color.\")\n\n    # --- Step 3: Convert the result back to a list of lists ---\n    output_grid = output_arr.tolist()\n    \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 18828,
    "candidates_token_count": 2103,
    "total_token_count": 20931,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-preview-03-25",
  "response_time": 15.362972,
  "retries": 1
}