Grid:
  type: object
  properties:
    size: 12x12 (consistent across examples)
    cells: list of lists of integers (colors)

Colors:
  - 0: Black (Background/Empty)
  - 1: Blue (Subject to vertical and horizontal propagation)
  - 2: Red (Boundary marker for Rule 1)
  - 3: Green (Fill color for Rule 1 & 2, subject to vertical and horizontal propagation)
  - 4: Magenta (Trigger for Rule 2 and Rule 3)
  - 6: Cyan (Fill color for Rule 3, subject to horizontal propagation)
  - 7: Orange (Secondary trigger for Rule 2, subject to vertical propagation)

Triggers_and_Patterns:
  - Input_Red_Boundaries: A pair of '2's on the same row in the input grid.
  - Input_Four_Seven: A '4' immediately followed by a '7' on the same row in the input grid.
  - Input_Four_Alone: A '4' in the input grid NOT immediately followed by a '7', and not processed by Four_Seven rule.
  - Input_Vertical_Gap_X: A '0' cell in the input grid vertically between two identical 'X' cells (X = 1, 3, or 7) in the input grid.
  - Output_Horizontal_Gap_X: A cell in the working grid with color Y horizontally between two cells of identical color X (X = 1, 3, or 6), where Y != X.

Actions:
  - Modify_Boundary_Color: Change cell color (e.g., 2 -> 3).
  - Fill_Horizontal_Segment: Change colors of cells between two columns on a row (e.g., fill with 3).
  - Place_Marker: Change a single cell's color based on context (e.g., place 1 within a 3-filled segment).
  - Copy_Row_Segment: Replace a segment of a row with the corresponding segment from the row below (based on input grid).
  - Fill_Pattern: Replace a specific pattern with another (e.g., '4 7 ...' -> '3 3 3 3').
  - Fill_Column_Segment_Vertically: Change colors of cells in a column from a trigger cell downwards (e.g., fill with 6).
  - Fill_Gap_Vertically: Change a cell's color based on its vertical neighbors (using input grid context).
  - Fill_Gap_Horizontally: Change a cell's color based on its identical horizontal neighbors (iterative, overwrites existing color).

Rules_and_Order: (Applied sequentially to modify `output_grid`)
  - 1_Red_Boundary_Transform:
      - trigger: Input_Red_Boundaries (c1, c2) found in input[r].
      - context: Check if input[r][c1+1:c2] contains 0.
      - action: output[r][c1]=3, output[r][c2]=3, output[r][c1+1:c2]=3. Place '1' at output[r][c1+2] if 0 was found, else at output[r][c2-1].
  - 2_Four_Seven_Transform:
      - trigger: Input_Four_Seven pattern at input[r][c] and input[r][c+1].
      - action: Replace output[r][0:c] with input[r+1][0:c]. Replace output[r][c:c+4] with [3, 3, 3, 3] (respecting grid width). Mark this '4' at (r,c) as processed.
  - 3_Four_Alone_Transform:
      - trigger: Input_Four_Alone pattern at input[r][c] (not processed by rule 2).
      - action: Set output[r][c] = 6. For i from r+1 to height-1, set output[i][c] = 6.
  - 4_Vertical_Propagation:
      - trigger: Input_Vertical_Gap_X at input[r][c] (where X is 1, 3, or 7).
      - action: Set output[r][c] = X. (Apply for all r, c before moving to next rule).
  - 5_Horizontal_Propagation:
      - trigger: Output_Horizontal_Gap_X in the current output grid (for colors X = 1, 3, or 6).
      - action: Fill the gap cell with color X (overwriting previous color Y). Apply iteratively per row until no changes.