objects:
  - name: input_grid
    properties:
      - type: 2D array of integers (digits 0-9)
      - background_color: 8
      - contains_axis_row: true
  - name: output_grid
    properties:
      - type: 2D array of integers (digits 0-9)
      - dimensions: same as input_grid
      - background_color: 8
  - name: axis_row
    properties:
      - type: row vector within the input_grid
      - identifier: contains the digit 6
      - index: R
  - name: cell
    properties:
      - row_index: r
      - column_index: c
      - value: integer (digit 0-9)
      - location: (r, c) in a grid
relationships:
  - type: symmetry
    between: cell (r, c) and cell (r_sym, c)
    where: r_sym = R + (R - r)
  - type: adjacency
    between: row r and axis_row R
    where: abs(r - R) == 1
actions:
  - name: find_axis_row
    input: input_grid
    output: axis_row_index R
  - name: initialize_output
    produces: output_grid (filled with background color 8)
  - name: copy_axis_row
    source: input_grid[R]
    destination: output_grid[R]
  - name: calculate_output_cell_value
    inputs:
      - current cell coordinates: (r, c)
      - axis_row_index: R
      - input_grid
    preconditions:
      - r != R
    process:
      - get axis value: val_axis = input_grid[R][c]
      - if val_axis == 6, output is 8
      - calculate symmetric row: r_sym = R + (R - r)
      - if r_sym is out of bounds, output is 8
      - get symmetric value: val_sym = input_grid[r_sym][c]
      - get original value: val_orig = input_grid[r][c]
      - check condition 1: c1 = (val_orig == 8 and val_sym == 8)
      - check condition 2: c2 = (val_orig == 8 and val_sym == val_axis)
      - check condition 3: c3 = (val_orig == val_axis and val_sym == 8)
      - check condition 4: c4 = (val_orig == val_axis and val_sym == val_axis and abs(r - R) == 1)
      - if c1 or c2 or c3 or c4, output is val_axis
      - else, output is 8
    output: value for output_grid[r][c]