task_type: grid_transformation
grid_properties:
  dimensionality: 2
  cell_values: integers (0-9)
  size: 10x10
objects:
  - name: cell
    properties:
      - value: integer (color)
      - position: (row, column)
  - name: grid
    properties:
      - cells: collection of cell objects
relationships:
  - type: adjacency
    between: cell, cell
    properties:
      - direction: orthogonal (North, South, East, West)
  - type: flanking
    definition: A cell C at (r, c) is flanked horizontally if input[r][c-1] == input[r][c+1] == X, where X != 0. It is flanked vertically if input[r-1][c] == input[r+1][c] == Y, where Y != 0.
actions:
  - name: transform_grid
    inputs: input_grid (grid object)
    outputs: output_grid (grid object)
    rule:
      - description: Two-phase transformation based on input grid structure.
      - phase_1_identify_bridges:
          - target: Cells C where input_grid[C.position] == 0.
          - condition: Cell C is flanked horizontally OR vertically in the input_grid.
          - action: Mark C.position as a 'bridge_location'.
      - phase_2_construct_output:
          - initialize: output_grid conceptually empty.
          - iterate: through each cell position (r, c).
          - rule_1: IF (r, c) is marked as 'bridge_location', THEN output_grid[r][c] = 1.
          - rule_2: ELIF input_grid[r][c] == 1, THEN output_grid[r][c] = 0.
          - rule_3: ELSE output_grid[r][c] = input_grid[r][c]. # Handles non-zero/non-one values and non-flanked zeros.
observations:
  - note: This rule fully explains examples 1 and 3.
  - anomaly: Example 2's expected output does not conform perfectly to this rule. Specifically, some bridge points identified by phase 1 do not become 1, some input 1s are not changed to 0, and some 0s become 1 without being identified as bridge points by the simple flanking rule. The general rule might need refinement or conditional logic based on Example 2's specific features (e.g., row indices, color values like '5', connectivity).