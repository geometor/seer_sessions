{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms a 2D grid based on a multi-step process derived from Examples 1 and 3:\n1.  Identify 'bridge' locations: Input cells with value 0 that are flanked horizontally or vertically by identical non-zero neighbors.\n2.  Analyze connectivity: Determine connected components of non-zero cells in the input grid using 8-directional adjacency. Identify 'main' components as those containing at least one cell with value 2 or 3.\n3.  Construct output grid:\n    - Bridge locations become 1.\n    - Input cells with value 1 remain 1 if they belong to a 'main' component, otherwise they become 0.\n    - All other input cells retain their original values.\nThis rule accurately describes Examples 1 and 3 but is not expected to work for Example 2.\n\"\"\"\n\nimport copy\nfrom collections import deque\n\ndef _is_valid(r, c, rows, cols):\n    \"\"\"Check if coordinates are within grid bounds.\"\"\"\n    return 0 <= r < rows and 0 <= c < cols\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:  \n    \n    rows = len(input_grid)\n    if rows == 0:\n        return []\n    cols = len(input_grid[0])\n    if cols == 0:\n        return [[] for _ in range(rows)]\n\n    # --- Step 1: Identify Bridge Locations ---\n    bridge_locations = set()\n    for r in range(rows):\n        for c in range(cols):\n            if input_grid[r][c] == 0:\n                # Check horizontal flanking\n                if c > 0 and c < cols - 1:\n                    left_val = input_grid[r][c-1]\n                    right_val = input_grid[r][c+1]\n                    if left_val != 0 and left_val == right_val:\n                        bridge_locations.add((r, c))\n                        continue # Found bridge, skip vertical check\n                # Check vertical flanking\n                if r > 0 and r < rows - 1:\n                    top_val = input_grid[r-1][c]\n                    bottom_val = input_grid[r+1][c]\n                    if top_val != 0 and top_val == bottom_val:\n                        bridge_locations.add((r, c))\n\n    # --- Step 2: Analyze Connectivity ---\n    visited = set()\n    # Map cell coordinates to whether their component contains a 2 or 3\n    component_is_main = {} \n    \n    for r in range(rows):\n        for c in range(cols):\n            # Start BFS from unvisited non-zero cells\n            if input_grid[r][c] != 0 and (r, c) not in visited:\n                component_cells = []\n                q = deque([(r, c)])\n                visited.add((r, c))\n                current_component_is_main = False\n                \n                while q:\n                    curr_r, curr_c = q.popleft()\n                    component_cells.append((curr_r, curr_c))\n                    \n                    # Check if this cell makes the component 'main'\n                    if input_grid[curr_r][curr_c] in [2, 3]:\n                        current_component_is_main = True\n                        \n                    # Explore 8 neighbors\n                    for dr in [-1, 0, 1]:\n                        for dc in [-1, 0, 1]:\n                            if dr == 0 and dc == 0:\n                                continue\n                            nr, nc = curr_r + dr, curr_c + dc\n                            \n                            # If neighbor is valid, non-zero, and not visited\n                            if _is_valid(nr, nc, rows, cols) and \\\n                               input_grid[nr][nc] != 0 and \\\n                               (nr, nc) not in visited:\n                                visited.add((nr, nc))\n                                q.append((nr, nc))\n                                \n                # Mark all cells in the found component\n                for comp_r, comp_c in component_cells:\n                    component_is_main[(comp_r, comp_c)] = current_component_is_main\n\n    # --- Step 3: Construct Output Grid ---\n    output_grid = copy.deepcopy(input_grid)\n\n    for r in range(rows):\n        for c in range(cols):\n            # Rule 1: Bridge location\n            if (r, c) in bridge_locations:\n                output_grid[r][c] = 1\n            # Rule 2: Original value was 1\n            elif input_grid[r][c] == 1:\n                # Check component status (default to False if cell wasn't part of any component - shouldn't happen for non-zero)\n                is_main = component_is_main.get((r, c), False) \n                if is_main:\n                    output_grid[r][c] = 1 # Keep 1 if in main component\n                else:\n                    output_grid[r][c] = 0 # Change to 0 if not in main component\n            # Rule 3: Other cells (original 0s not bridged, 2s, 3s, 4s, etc.)\n            # Keep original value (already handled by deepcopy)\n            # No 'else' block needed explicitly\n            \n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 21834,
    "candidates_token_count": 1608,
    "total_token_count": 23442,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-preview-03-25",
  "response_time": 13.807251,
  "retries": 1
}