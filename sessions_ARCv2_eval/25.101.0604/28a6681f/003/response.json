{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms a 2D grid based on a two-phase process:\n1. Identification Phase: Identifies 'bridge' locations. A cell at (r, c) is a bridge location if its value in the input grid is 0 and it is flanked either horizontally or vertically by identical non-zero neighbors in the input grid.\n2. Construction Phase: Creates the output grid.\n    - If a cell position was identified as a bridge location, its value in the output grid is 1.\n    - If a cell's value in the input grid was 1 and it was *not* a bridge location, its value in the output grid becomes 0.\n    - Otherwise, the cell retains its original value from the input grid.\n\"\"\"\n\nimport copy\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies the two-phase transformation rule to the input grid.\n\n    Args:\n        input_grid: A 2D list of integers representing the input grid.\n\n    Returns:\n        A 2D list of integers representing the transformed output grid.\n    \"\"\"\n    \n    # Get grid dimensions\n    rows = len(input_grid)\n    if rows == 0:\n        return [] # Handle empty grid case\n    cols = len(input_grid[0])\n    if cols == 0:\n        return [[] for _ in range(rows)] # Handle empty row case\n\n    # --- Phase 1: Identify Bridge Locations ---\n    bridge_locations = set()\n    for r in range(rows):\n        for c in range(cols):\n            # Check if the current cell value in the input grid is 0\n            if input_grid[r][c] == 0:\n                # Check for horizontal flanking\n                # Check if left and right neighbors exist within bounds\n                if c > 0 and c < cols - 1:\n                    left_neighbor_val = input_grid[r][c-1]\n                    right_neighbor_val = input_grid[r][c+1]\n                    # Check if neighbors are identical and non-zero\n                    if left_neighbor_val != 0 and left_neighbor_val == right_neighbor_val:\n                        bridge_locations.add((r, c))\n                        continue # Found a bridge, move to next cell\n\n                # Check for vertical flanking (only if horizontal condition was not met)\n                # Check if top and bottom neighbors exist within bounds\n                if r > 0 and r < rows - 1:\n                    top_neighbor_val = input_grid[r-1][c]\n                    bottom_neighbor_val = input_grid[r+1][c]\n                    # Check if neighbors are identical and non-zero\n                    if top_neighbor_val != 0 and top_neighbor_val == bottom_neighbor_val:\n                        bridge_locations.add((r, c))\n                        \n    # --- Phase 2: Construct Output Grid ---\n    # Initialize output_grid as a deep copy of the input grid\n    output_grid = copy.deepcopy(input_grid)\n\n    # Iterate through each cell to apply the construction rules\n    for r in range(rows):\n        for c in range(cols):\n            # Rule 1: If it's a bridge location, set to 1\n            if (r, c) in bridge_locations:\n                output_grid[r][c] = 1\n            # Rule 2: Else if the original value was 1 (and not a bridge), set to 0\n            elif input_grid[r][c] == 1:\n                output_grid[r][c] = 0\n            # Rule 3: Else (not a bridge, not originally 1), keep original value (already handled by deepcopy)\n            # No explicit action needed here.\n\n    # Return the final transformed grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 9037,
    "candidates_token_count": 1884,
    "total_token_count": 10921,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-preview-03-25",
  "response_time": 14.669715,
  "retries": 1
}