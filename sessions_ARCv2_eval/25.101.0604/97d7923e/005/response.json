{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport copy\n\n\"\"\"\nTransformation Rule:\n\n1. Identify the global smallest non-zero integer (R) and the global largest \n   non-zero integer (T) in the input grid.\n2. If R or T cannot be found, or if R equals T, return the input grid unchanged.\n3. Create a copy of the input grid for the output. Get the number of rows.\n4. Process each column independently:\n    a. Find the row index of the first occurrence of R (`first_r_row`). \n       If not found, skip the column.\n    b. Check the blocking condition: If `first_r_row >= rows // 2`, skip the column.\n    c. Find the row index of the first occurrence of T below `first_r_row` \n       (`first_t_below_r_row`). If not found, skip the column.\n    d. Determine the replacement start row (`start_row`):\n       - If `first_r_row == 1`, `start_row = first_t_below_r_row + 2`.\n       - Otherwise, `start_row = first_t_below_r_row`.\n    e. Apply replacements: Iterate from `start_row` to the end of the column. \n       If a cell in the input contains T, change the corresponding cell \n       in the output to R.\n5. Return the modified output grid.\n\"\"\"\n\ndef find_key_values(grid: np.ndarray) -> tuple[int | None, int | None]:\n    \"\"\"Finds the smallest (R) and largest (T) non-zero values in the grid.\"\"\"\n    non_zeros = grid[grid > 0]\n    if non_zeros.size == 0:\n        return None, None  # No non-zero numbers found\n    \n    min_val = np.min(non_zeros)\n    max_val = np.max(non_zeros)\n    \n    # Handle case where only one unique non-zero value exists\n    if min_val == max_val:\n        return None, None \n        \n    return min_val, max_val\n\ndef find_first_occurrence(arr: np.ndarray, value: int, start_row: int = 0) -> int | None:\n    \"\"\"Finds the row index of the first occurrence of 'value' in 'arr' starting from 'start_row'.\"\"\"\n    indices = np.where(arr[start_row:] == value)[0]\n    if len(indices) > 0:\n        return indices[0] + start_row # Adjust index relative to the original array\n    return None\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:  \n    # Convert input to numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    \n    # 1. Identify Global Key Values (R and T)\n    r_val, t_val = find_key_values(input_np)\n\n    # 2. Handle Edge Cases (no R/T or R==T)\n    if r_val is None or t_val is None:\n        return copy.deepcopy(input_grid) # Return a copy\n\n    # 3. Initialize Output grid and get dimensions\n    output_np = np.copy(input_np)\n    rows, cols = input_np.shape\n\n    # 4. Process Each Column\n    for j in range(cols):\n        col_data = input_np[:, j]\n\n        # 4a. Find First R\n        first_r_row = find_first_occurrence(col_data, r_val)\n        if first_r_row is None:\n            continue # Skip column if R not found\n\n        # 4b. Check Blocking Condition\n        block_threshold = rows // 2\n        if first_r_row >= block_threshold:\n            continue # Skip column if first R is too low\n\n        # 4c. Find First T Below R\n        first_t_below_r_row = find_first_occurrence(col_data, t_val, start_row=first_r_row + 1)\n        if first_t_below_r_row is None:\n            continue # Skip column if no T found below the first R\n\n        # 4d. Determine Replacement Start Row\n        start_row: int\n        if first_r_row == 1:\n            start_row = first_t_below_r_row + 2\n        else:\n            start_row = first_t_below_r_row\n\n        # 4e. Apply Replacements\n        # Ensure start_row is within bounds before looping\n        if start_row < rows:\n            for i in range(start_row, rows):\n                if input_np[i, j] == t_val:\n                    output_np[i, j] = r_val\n\n    # 5. Return Result\n    return output_np.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 16128,
    "candidates_token_count": 1543,
    "total_token_count": 17671,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-preview-03-25",
  "response_time": 11.6238,
  "retries": 1
}