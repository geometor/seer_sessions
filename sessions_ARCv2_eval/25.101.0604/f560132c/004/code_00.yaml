task_type: grid_transformation

input_features:
  grid_dimensions: variable
  background_color: 0
  objects:
    - type: shape # Connected component of non-zero cells
      properties:
        - color: integer (1-9)
        - contiguity: 4-directional
        - cells: list of (row, col) tuples
        - bounding_box: (min_r, min_c, max_r, max_c)
        - dimensions: (H_comp, W_comp) # Height/Width of bounding_box
        - colors_present: set of unique colors within the component
        - is_noisy: boolean (True if len(colors_present) > 1)
        - border_color: integer (most frequent color if is_noisy, tie-break with max color value)
    - type: noise_pixel
      properties:
        - color: integer (1-9)
        - location: (row, col)
        - container_shape_color: integer # The border_color of the shape it's inside
      constraints:
        - Exists only within a 'noisy' shape
        - color != 0
        - color != container_shape_color

output_features:
  grid_dimensions: [H_out, W_out] # Derived, see relationships
  content: grid derived by scaling the noise pattern of the unique noisy input shape

relationships:
  - type: containment
    description: Exactly one shape ('noisy_shape') contains noise pixels.
  - type: transformation
    description: The noise pattern within the 'noisy_shape' is scaled up to produce the output grid.
  - type: scale_determination
    description: |
      The integer scaling factor ('Scale') is determined by the width of the
      bounding box of the 'noisy_shape' (`W_comp`).
      Scale = W_comp - 1.
  - type: output_size_determination
    description: |
      The output grid dimensions (`H_out`, `W_out`) are determined by scaling the
      dimensions of the minimal bounding box of the noise pixels (`H_noise`, `W_noise`)
      by the calculated 'Scale'.
      H_out = H_noise * Scale
      W_out = W_noise * Scale
  - type: rendering_rule # Revised rule
    description: |
      Each output pixel's color at `(r_out, c_out)` is determined by the color
      of the single corresponding pixel in the noise grid.
      The corresponding noise grid coordinates `(nr, nc)` are found by integer division
      (or floor of float division):
      `nr = floor(r_out / Scale)`
      `nc = floor(c_out / Scale)`
      The output pixel `(r_out, c_out)` takes the color `noise_grid[nr][nc]`.
      (Implicitly handles boundaries as the mapping stays within the scaled area).

actions:
  - find_components: Identify all 4-directionally connected components of non-zero cells.
  - identify_noisy_shape: Find the unique component containing more than one distinct color. Store its bounding box width (`W_comp`).
  - determine_border_color: Find the most frequent color within the noisy shape (tie-break with max color value).
  - extract_noise_pixels: Identify all pixels within the noisy shape whose color is not the border color.
  - calculate_noise_bbox: Find the minimal bounding box containing all noise pixels. Store its dimensions (`H_noise`, `W_noise`).
  - create_noise_grid: Create a grid of size `H_noise` x `W_noise` containing the noise pixels relative to their bounding box origin.
  - calculate_scale: Compute `Scale = W_comp - 1`.
  - calculate_output_size: Compute `H_out = H_noise * Scale`, `W_out = W_noise * Scale`.
  - render_output: Create the output grid of size `H_out` x `W_out` using the revised rendering_rule (direct mapping via floor division).
