common_properties:
  background_digit: 8
  object_height: 2 # Key patterns/objects are consistently 2 rows high.
  ignored_input_columns: [0, 1, -1] # First, second, and last columns.
  ignored_input_rows: [0, 1] # First two rows seem consistently non-data.
  object_definition: Connected components of non-background digits, exactly 2 rows high, within the core input area.

transformation_strategies:
  - strategy_name: Stacking
    observed_in: [train_2, train_3]
    trigger_conditions: Potentially shorter input grids (e.g., <= 8 rows?), absence of specific complex patterns.
    input_processing: Identify all object *instances*.
    output_construction:
      - Determine max object width (`W`).
      - Output dimensions: `(2 * num_objects) x W`.
      - For each object instance (in input order):
        - Center its pattern horizontally in width `W`, padding with background_digit.
        - Append the resulting 2 rows to the output.
  - strategy_name: Composition
    observed_in: [train_1]
    trigger_conditions: Potentially taller input grids (e.g., > 8 rows?), presence of specific complex patterns (e.g., `[[1,6],[2,6]]`, `[[4,7],[7,4]]`).
    input_processing: Identify object *types* present.
    output_construction:
      - Target output grid has fixed dimensions (e.g., 12x6 for train_1).
      - A predefined layout maps specific input object types to specific locations and patterns in the output grid.
      - May involve transformations (e.g., transposition) or combining parts of different objects.
      - Unspecified cells filled with background_digit.

example_train_1: # Composition Strategy
  input_grid:
    dimensions: [20, 8]
    core_area: Rows 2-19, Columns 2-6
    identified_object_types: # Based on re-evaluation for composition
      - T_44: [[4, 4], [4, 4]]
      - T_99: [[9, 9], [9, 9]]
      - T_12_66: [[1, 6], [2, 6]] # Note: provides sub-patterns
      - T_66: [[6, 6], [6, 6]]
      - T_4774: [[4, 7], [7, 4]] # Note: transformed in output
      - T_77: [[7, 7], [7, 7]]
      - T_33: [[3, 3], [3, 3]]
      # - T_36_36: [[3, 6], [3, 6]] # May be redundant if T_33 and T_66 are handled
  output_grid:
    dimensions: [12, 6]
    structure: Fixed layout composed from specific object types.

example_train_2: # Stacking Strategy
  input_grid:
    dimensions: [8, 11]
    core_area: Rows 2-7, Columns 2-9
    identified_object_instances:
      - pattern: [[3, 3], [3, 3]] (width 2)
      - pattern: [[4, 4, 4, 4], [4, 4, 4, 4]] (width 4)
      - pattern: [[6, 6], [6, 6]] (width 2)
      - pattern: [[9, 9], [9, 9]] (width 2)
  output_grid:
    dimensions: [8, 4] # 2*4 objects, max_width=4
    structure: Vertical stack of centered object instances.

example_train_3: # Stacking Strategy
  input_grid:
    dimensions: [8, 28]
    core_area: Rows 2-7, Columns 2-26
    identified_object_instances:
      - pattern: [[3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3]] (width 8)
      - pattern: [[9, 9], [9, 9]] (width 2)
      - pattern: [[7, 7, 7, 7], [7, 7, 7, 7]] (width 4)
      - pattern: [[4, 4, 4, 4], [4, 4, 4, 4]] (width 4)
      - pattern: [[9, 9], [9, 9]] (width 2)
      - pattern: [[6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6]] (width 8)
      - pattern: [[4, 4], [4, 4]] (width 2)
  output_grid:
    dimensions: [14, 8] # 2*7 objects, max_width=8
    structure: Vertical stack of centered object instances.