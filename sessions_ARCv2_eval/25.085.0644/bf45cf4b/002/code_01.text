# Natural Language Program

1.  **Identify Background Color**: Find the most frequent color in the input grid and designate it as the background color.
2.  **Identify Non-Background Color Sets**: Find all unique non-background colors present. Observe how these colors group together spatially to form two distinct structures. Determine the set of colors belonging to each structure. (For example, Structure A uses colors {C1}, Structure B uses colors {C2, C3}).
3.  **Calculate Structure Bounding Boxes**:
    *   For Structure A: Find all pixels with colors in Set A. Calculate the minimum bounding box (min_row_A, min_col_A, max_row_A, max_col_A) enclosing these pixels.
    *   For Structure B: Find all pixels with colors in Set B. Calculate the minimum bounding box (min_row_B, min_col_B, max_row_B, max_col_B) enclosing these pixels.
4.  **Identify Pattern and Control Structures**:
    *   Count the number of background-colored pixels within Bounding Box A (`bg_count_A`).
    *   Count the number of background-colored pixels within Bounding Box B (`bg_count_B`).
    *   If `bg_count_A <= bg_count_B`, then Structure A is the Pattern Structure and Structure B is the Control Structure.
    *   Otherwise, Structure B is the Pattern Structure and Structure A is the Control Structure.
5.  **Extract Pattern Tile**: Define the pattern tile as the rectangular subgrid extracted from the input grid using the bounding box coordinates of the Pattern Structure. Let the height and width of this tile be `ph` and `pw`.
6.  **Determine Control Dimensions**: Get the height (`ch`) and width (`cw`) of the bounding box of the Control Structure. `ch = max_row_control - min_row_control + 1`, `cw = max_col_control - min_col_control + 1`.
7.  **Construct Output Grid**: Create a new grid by tiling the extracted pattern tile `ch` times vertically and `cw` times horizontally. The dimensions of the output grid will be `(ch * ph) x (cw * pw)`.
8.  **Return Output Grid**: The resulting tiled grid is the final output.
