{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\ndef find_bounding_box(grid):\n    \"\"\"\n    Finds the minimum bounding box containing all non-white pixels.\n    \n    Args:\n        grid (np.array): The input grid.\n        \n    Returns:\n        tuple: (min_row, max_row, min_col, max_col) or None if no non-white pixels.\n    \"\"\"\n    non_white_pixels = np.argwhere(grid != 0)\n    if non_white_pixels.size == 0:\n        return None  # No non-white pixels found\n        \n    min_row = np.min(non_white_pixels[:, 0])\n    max_row = np.max(non_white_pixels[:, 0])\n    min_col = np.min(non_white_pixels[:, 1])\n    max_col = np.max(non_white_pixels[:, 1])\n    \n    return min_row, max_row, min_col, max_col\n\ndef transform(input_grid):\n    \"\"\"\n    Extracts the smallest rectangular subgrid containing all non-white pixels \n    from the input grid.\n    \n    1. Convert the input list of lists to a numpy array.\n    2. Find the coordinates of all pixels that are not white (value != 0).\n    3. If no non-white pixels exist, return a 1x1 grid containing white (0).\n    4. Determine the minimum and maximum row and column indices (bounding box) \n       that enclose all these non-white pixels.\n    5. Extract the subgrid defined by this bounding box from the input array.\n    6. Convert the resulting numpy array back to a list of lists.\n    \"\"\"\n    # Convert input to numpy array for efficient processing\n    grid_np = np.array(input_grid, dtype=int)\n    \n    # Find the bounding box of non-white pixels\n    bbox = find_bounding_box(grid_np)\n    \n    # Handle case where input is all white\n    if bbox is None:\n        return [[0]] # Return a 1x1 white grid as per observation refinement\n        \n    min_row, max_row, min_col, max_col = bbox\n    \n    # Extract the subgrid using the bounding box coordinates\n    # Slicing is [start_row:end_row+1, start_col:end_col+1]\n    output_grid_np = grid_np[min_row : max_row + 1, min_col : max_col + 1]\n    \n    # Convert the resulting numpy array back to a list of lists\n    output_grid = output_grid_np.tolist()\n    \n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3810,
    "candidates_token_count": 627,
    "total_token_count": 4437,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 70.594651
}