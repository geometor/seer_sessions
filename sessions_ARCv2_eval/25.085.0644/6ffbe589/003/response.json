{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentifies the connected component of non-white pixels with the largest\nbounding box area and crops the input grid to that bounding box.\nConnectivity is 8-way (including diagonals).\n\"\"\"\n\ndef find_connected_components(grid_np):\n    \"\"\"\n    Finds all connected components of non-white pixels in the grid using 8-way connectivity.\n\n    Args:\n        grid_np (np.array): The input grid as a numpy array.\n\n    Returns:\n        list: A list of components, where each component is a list of (row, col) tuples.\n              Returns an empty list if no non-white pixels are found.\n    \"\"\"\n    rows, cols = grid_np.shape\n    visited = set()\n    components = []\n\n    for r in range(rows):\n        for c in range(cols):\n            # If pixel is non-white and not visited yet, start BFS\n            if grid_np[r, c] != 0 and (r, c) not in visited:\n                component = []\n                q = deque([(r, c)])\n                visited.add((r, c))\n\n                while q:\n                    row, col = q.popleft()\n                    component.append((row, col))\n\n                    # Check 8 neighbors (horizontal, vertical, diagonal)\n                    for dr in [-1, 0, 1]:\n                        for dc in [-1, 0, 1]:\n                            if dr == 0 and dc == 0:\n                                continue  # Skip self\n\n                            nr, nc = row + dr, col + dc\n\n                            # Check boundaries\n                            if 0 <= nr < rows and 0 <= nc < cols:\n                                # Check if neighbor is non-white and not visited\n                                if grid_np[nr, nc] != 0 and (nr, nc) not in visited:\n                                    visited.add((nr, nc))\n                                    q.append((nr, nc))\n\n                # Add the found component to the list\n                if component: # Ensure we don't add empty lists if logic were ever to allow it\n                    components.append(component)\n\n    return components\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by cropping it to the bounding box of the\n    connected component of non-white pixels that has the largest area.\n    \"\"\"\n    # Convert input list of lists to a numpy array for efficient processing\n    input_grid_np = np.array(input_grid, dtype=int)\n\n    # Step 1: Identify all connected components of non-white pixels (8-way)\n    components = find_connected_components(input_grid_np)\n\n    # Handle edge case: no non-white pixels found\n    if not components:\n        # Return a minimal white grid as per typical ARC behavior for empty results\n        return [[0]]\n\n    largest_bbox_area = -1\n    target_bbox = None # Will store (min_r, max_r, min_c, max_c) of the target component\n\n    # Step 2 & 3: Iterate through components, calculate bounding box and its area\n    for component in components:\n        # This check is technically redundant if find_connected_components guarantees non-empty components\n        if not component:\n            continue\n\n        # Determine the min/max row and column indices for the component\n        rows = [r for r, c in component]\n        cols = [c for r, c in component]\n\n        min_r, max_r = min(rows), max(rows)\n        min_c, max_c = min(cols), max(cols)\n\n        # Calculate the dimensions and area of the bounding box\n        height = max_r - min_r + 1\n        width = max_c - min_c + 1\n        area = height * width\n\n        # Step 4: Select the component with the maximum bounding box area\n        # If areas are equal, the first one encountered with the max area is kept.\n        if area > largest_bbox_area:\n            largest_bbox_area = area\n            # Step 5: Store the coordinates of the largest bounding box found so far\n            target_bbox = (min_r, max_r, min_c, max_c)\n\n    # This case should ideally not be reached if components list is non-empty\n    if target_bbox is None:\n         return [[0]]\n\n    # Step 6: Crop the original input grid using the target bounding box coordinates\n    min_r, max_r, min_c, max_c = target_bbox\n    # NumPy slicing: [start_row : end_row+1, start_col : end_col+1]\n    output_grid_np = input_grid_np[min_r : max_r + 1, min_c : max_c + 1]\n\n    # Convert the resulting numpy array back to a list of lists\n    output_grid = output_grid_np.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 18385,
    "candidates_token_count": 1132,
    "total_token_count": 19517,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 19.96011
}