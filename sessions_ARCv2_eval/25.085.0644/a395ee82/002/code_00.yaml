task_description: Stamp a copy of the largest object, centered at the location of each pixel belonging to the color(s) of the smallest object(s).

definitions:
  background_color: The color that appears most frequently in the input grid.
  objects: Contiguous areas of non-background colors.
  pattern_object: The non-background object with the largest number of pixels. If there's a tie, the behavior is undefined by current examples, but assumed consistent.
  marker_color(s): The color(s) of the non-background object(s) with the smallest number of pixels. There can be multiple smallest objects and multiple colors if they share the minimum size.
  marker_locations: All pixels in the input grid whose color matches any marker_color.
  pattern_bbox_center: The center coordinates (row, col) calculated from the bounding box of the pattern_object. Calculated as `(height // 2, width // 2)` relative to the bounding box's top-left corner.

transformation:
  - step: Identify background_color.
  - step: Identify all non-background objects and their properties (color, size, coordinates, bounding_box).
  - step: Determine the pattern_object (largest size). Store its color, relative pixel coordinates (relative to its bounding box top-left), and calculate its pattern_bbox_center.
  - step: Determine the minimum size among non-background objects.
  - step: Identify all marker_color(s) associated with this minimum size.
  - step: Identify all marker_locations in the input grid.
  - step: Initialize the output grid as a copy of the input grid.
  - step: For each marker_location (marker_r, marker_c):
      - Calculate the target top-left position (target_r, target_c) for placing the pattern: `target_r = marker_r - pattern_bbox_center.row`, `target_c = marker_c - pattern_bbox_center.col`.
      - For each relative coordinate (rel_r, rel_c) of the pattern_object:
          - Calculate the absolute output coordinate (out_r, out_c): `out_r = target_r + rel_r`, `out_c = target_c + rel_c`.
          - If (out_r, out_c) is within the grid boundaries:
              - Set the pixel at (out_r, out_c) in the output grid to the pattern_object's color. Overwriting occurs if pixels are already colored.

edge_cases:
  - If no non-background objects exist, the output is likely the same as the input.
  - If only one non-background object exists, it's both the pattern and the marker. The examples don't cover this, but the logic implies it would copy itself centered on its own pixels, likely resulting in a slightly shifted/expanded version or no visible change if placement aligns perfectly.
  - Pattern placement near edges results in clipping; only parts of the pattern within the grid boundaries are drawn.
  - If multiple objects share the largest size, the choice of pattern_object might matter (not seen in examples).
  - If multiple objects share the smallest size but have different colors, all their colors become marker_colors (seen in Example 3).