{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\n\ndef find_bounding_box(grid, bg_color):\n    \"\"\"\n    Finds the minimum bounding box containing all non-background pixels.\n\n    Args:\n        grid (np.array): The input grid.\n        bg_color (int): The background color.\n\n    Returns:\n        tuple: (min_row, max_row, min_col, max_col) or None if no non-bg pixels.\n    \"\"\"\n    non_bg_coords = np.argwhere(grid != bg_color)\n    if non_bg_coords.size == 0:\n        return None\n    min_row = non_bg_coords[:, 0].min()\n    max_row = non_bg_coords[:, 0].max()\n    min_col = non_bg_coords[:, 1].min()\n    max_col = non_bg_coords[:, 1].max()\n    return min_row, max_row, min_col, max_col\n\ndef transform(input_grid):\n    \"\"\"\n    Identifies the background color (assumed to be the color of the top-left pixel).\n    Finds the minimum bounding box enclosing all non-background pixels in the input grid.\n    Creates an output grid of the same dimensions as the input, filled with the background color.\n    Copies the content of the input grid within the calculated bounding box (including any background pixels within that box) \n    to the top-left corner (0,0) of the output grid.\n    \"\"\"\n    # Convert input list of lists to numpy array for efficient processing\n    grid = np.array(input_grid, dtype=int)\n    height, width = grid.shape\n\n    # Determine background color - assuming the top-left pixel is representative\n    # or the most frequent color if top-left is part of an object near the edge.\n    # Let's stick with top-left for simplicity based on examples.\n    bg_color = grid[0, 0]\n\n    # Find the bounding box of non-background elements\n    bbox = find_bounding_box(grid, bg_color)\n\n    # Initialize the output grid with the background color\n    output_grid = np.full_like(grid, bg_color)\n\n    # If a bounding box was found (i.e., non-background pixels exist)\n    if bbox:\n        min_row, max_row, min_col, max_col = bbox\n\n        # Extract the subgrid defined by the bounding box from the input\n        sub_grid = grid[min_row : max_row + 1, min_col : max_col + 1]\n        sub_height, sub_width = sub_grid.shape\n\n        # Check if the subgrid fits within the output grid dimensions (it should by definition)\n        if sub_height <= height and sub_width <= width:\n            # Copy the extracted subgrid to the top-left corner of the output grid\n            output_grid[0:sub_height, 0:sub_width] = sub_grid\n        else:\n            # This case should not happen if output_grid has the same dims as input\n            # but added as a safeguard. Copy only the part that fits.\n            h_fit = min(sub_height, height)\n            w_fit = min(sub_width, width)\n            output_grid[0:h_fit, 0:w_fit] = sub_grid[0:h_fit, 0:w_fit]\n\n    # Convert the result back to a list of lists as required by the ARC format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6810,
    "candidates_token_count": 817,
    "total_token_count": 7627,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 81.923546
}