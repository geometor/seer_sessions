{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport itertools\n\n\"\"\"\nIdentify the bounding box corresponding to the primary cluster of non-white pixels \nby analyzing projections. Find the longest contiguous range of rows containing \nat least one non-white pixel, and the longest contiguous range of columns \ncontaining at least one non-white pixel. The intersection of these ranges defines \nthe bounding box. Extract the subgrid from the input corresponding to this \nbounding box.\n\"\"\"\n\ndef find_longest_contiguous_run(counts):\n    \"\"\"\n    Finds the start and end indices of the longest contiguous run of non-zero values.\n    If multiple runs have the same max length, returns the first one found.\n\n    Args:\n        counts (np.array): A 1D array of counts or indicators (e.g., 0 or 1).\n\n    Returns:\n        tuple: (start_index, end_index) of the longest run, or (0, -1) if no non-zero elements.\n               The end_index is inclusive.\n    \"\"\"\n    max_len = 0\n    best_start = 0\n    best_end = -1 # Use -1 to indicate no run found yet\n\n    current_len = 0\n    current_start = 0\n\n    for i, count in enumerate(counts):\n        if count > 0:\n            if current_len == 0:\n                current_start = i\n            current_len += 1\n        else:\n            if current_len > max_len:\n                max_len = current_len\n                best_start = current_start\n                best_end = i - 1 # Run ended at previous index\n            current_len = 0 # Reset run\n\n    # Check if the longest run extends to the end of the array\n    if current_len > max_len:\n        max_len = current_len\n        best_start = current_start\n        best_end = len(counts) - 1\n\n    return best_start, best_end\n\n\ndef transform(input_grid):\n    \"\"\"\n    Extracts the subgrid corresponding to the primary cluster of non-white pixels.\n\n    Args:\n        input_grid (list): A list of lists representing the input grid.\n\n    Returns:\n        list: A list of lists representing the cropped output grid.\n    \"\"\"\n    # Convert input to numpy array for easier processing\n    input_np = np.array(input_grid, dtype=int)\n    rows, cols = input_np.shape\n\n    # Handle empty input\n    if rows == 0 or cols == 0:\n        return [[]]\n\n    # Find non-white pixels\n    non_white_pixels = np.argwhere(input_np != 0)\n\n    # Handle case with no non-white pixels\n    if non_white_pixels.shape[0] == 0:\n        # Return based on expected behavior - maybe empty grid? Or original?\n        # Examples imply non-empty output. Let's assume empty grid.\n        return [[]] \n\n    # Project onto rows: count non-white pixels per row\n    row_counts = np.zeros(rows, dtype=int)\n    unique_rows = np.unique(non_white_pixels[:, 0])\n    for r in unique_rows:\n        row_counts[r] = 1 # Just need to know if row has > 0 non-white pixels\n        \n    # Find longest contiguous run of rows with non-white pixels\n    min_r, max_r = find_longest_contiguous_run(row_counts)\n\n    # Project onto columns: count non-white pixels per column\n    col_counts = np.zeros(cols, dtype=int)\n    unique_cols = np.unique(non_white_pixels[:, 1])\n    for c in unique_cols:\n        col_counts[c] = 1 # Just need to know if col has > 0 non-white pixels\n\n    # Find longest contiguous run of columns with non-white pixels\n    min_c, max_c = find_longest_contiguous_run(col_counts)\n    \n    # Check if valid ranges were found\n    if max_r < min_r or max_c < min_c:\n        # This shouldn't happen if there are non-white pixels, but as a safeguard\n        return [[]] \n\n    # Crop the input grid using the bounding box coordinates\n    # Slicing is [start_row : end_row+1, start_col : end_col+1]\n    output_np = input_np[min_r : max_r + 1, min_c : max_c + 1]\n\n    # Convert the resulting numpy array back to a list of lists\n    output_grid = output_np.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 18857,
    "candidates_token_count": 1088,
    "total_token_count": 19945,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 61.36763,
  "retries": 1
}