{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport collections\n\n\"\"\"\nTransforms an input grid by:\n1. Identifying the background color (most frequent).\n2. Finding all contiguous non-background objects (8-way connectivity).\n3. Determining the color ('shape_color') and pixel locations of the largest object (by pixel count).\n4. Identifying single-pixel 'anchor' objects whose color is different from both the background and shape_color. The color of these anchors is 'anchor_color', and their locations are recorded.\n5. Creating a new grid filled with the background color.\n6. Copying the largest object onto the new grid using its original locations and 'shape_color'.\n7. If anchor points were found, iterate through each anchor point location:\n    a. Draw the 'anchor_color' at the center coordinate.\n    b. Draw the 'shape_color' at the four orthogonally adjacent coordinates, respecting grid boundaries. These drawings overwrite any existing pixels (background or the copied largest object).\n8. If no non-background objects are found, the output is a grid filled with the background color.\n9. If non-background objects exist but no anchor points are found, the output is the grid with the background and the copied largest object.\n\"\"\"\n\ndef find_objects(grid, background_color):\n    \"\"\"\n    Finds all contiguous objects of non-background colors in the grid.\n    Connectivity includes orthogonal and diagonal neighbors (8-way).\n\n    Args:\n        grid (np.array): The input grid.\n        background_color (int): The color to ignore (background).\n\n    Returns:\n        list: A list of dictionaries, where each dictionary represents an object\n              with keys 'color', 'locations' (list of (row, col) tuples),\n              and 'size'. Returns an empty list if no non-background objects found.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n    \n    for r in range(rows):\n        for c in range(cols):\n            # If the cell is not background and not visited yet\n            if grid[r, c] != background_color and not visited[r, c]:\n                obj_color = grid[r, c]\n                obj_pixels = []\n                # Use BFS (queue) to find all connected pixels of the same color\n                q = collections.deque([(r, c)])\n                visited[r, c] = True\n                \n                while q:\n                    row, col = q.popleft()\n                    obj_pixels.append((row, col))\n                    \n                    # Check 8 neighbors (orthogonal and diagonal)\n                    for dr in [-1, 0, 1]:\n                        for dc in [-1, 0, 1]:\n                            if dr == 0 and dc == 0:\n                                continue # Skip self\n                            nr, nc = row + dr, col + dc\n                            \n                            # Check bounds and if neighbor is same color and not visited\n                            if 0 <= nr < rows and 0 <= nc < cols and \\\n                               not visited[nr, nc] and grid[nr, nc] == obj_color:\n                                visited[nr, nc] = True\n                                q.append((nr, nc))\n                                \n                # Store the found object\n                objects.append({\n                    'color': obj_color,\n                    'locations': obj_pixels,\n                    'size': len(obj_pixels)\n                })\n    return objects\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n    \"\"\"\n    # Convert input to numpy array for easier processing\n    grid = np.array(input_grid, dtype=int)\n    rows, cols = grid.shape\n    \n    # Handle empty grid case\n    if grid.size == 0: \n        return []\n\n    # 1. Determine background color\n    unique_colors, counts = np.unique(grid, return_counts=True)\n    # Handle edge case of a grid with only one color (or zero elements)\n    if len(unique_colors) == 0: \n         return input_grid # Return original if truly empty or invalid\n    background_color = unique_colors[np.argmax(counts)]\n    \n    # 2. Find all non-background objects\n    all_objects = find_objects(grid, background_color)\n    \n    # Initialize the output grid with the background color\n    output_grid = np.full((rows, cols), background_color, dtype=int)\n\n    # 3. Handle case where there are no non-background objects\n    if not all_objects:\n        # Return the grid filled with the background color\n        return output_grid.tolist()\n\n    # 4. Identify the largest object, its color ('shape_color'), and its pixels\n    # If there's a tie in size, max() typically takes the first one found.\n    largest_object = max(all_objects, key=lambda obj: obj['size'])\n    shape_color = largest_object['color']\n    largest_object_pixels = largest_object['locations']\n    \n    # 5. Identify anchor points and their color\n    anchor_locations = []\n    anchor_color = -1 # Sentinel value indicates anchor color not yet found\n    found_anchor_color = False\n    for obj in all_objects:\n        # Check if it's a single pixel AND not background AND not the largest object's color\n        if obj['size'] == 1 and obj['color'] != background_color and obj['color'] != shape_color:\n            # If this is the first valid anchor found, store its color\n            if not found_anchor_color:\n                 anchor_color = obj['color'] \n                 found_anchor_color = True\n            \n            # Add the location ONLY if the color matches the determined anchor_color\n            # Ensures all drawn anchors use the same color, based on the first one found.\n            if obj['color'] == anchor_color:\n                 anchor_locations.append(obj['locations'][0]) # location is (row, col)\n\n    # 6. Copy the largest object onto the output grid\n    for r, c in largest_object_pixels:\n        # Basic bounds check (should be redundant if find_objects is correct)\n        if 0 <= r < rows and 0 <= c < cols: \n            output_grid[r, c] = shape_color\n\n    # 7. If anchors were found, draw the cross patterns\n    if found_anchor_color and anchor_locations: \n        for r, c in anchor_locations:\n            # 7a. Place anchor color at the center (check bounds)\n            if 0 <= r < rows and 0 <= c < cols:\n                output_grid[r, c] = anchor_color\n            \n            # 7b. Define orthogonal neighbors\n            neighbors = [(r - 1, c), (r + 1, c), (r, c - 1), (r, c + 1)]\n            \n            # Place shape color at valid orthogonal neighbors, overwriting existing color\n            for nr, nc in neighbors:\n                if 0 <= nr < rows and 0 <= nc < cols:\n                    output_grid[nr, nc] = shape_color\n                \n    # Convert final output grid back to list of lists format and return\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 23454,
    "candidates_token_count": 1672,
    "total_token_count": 25126,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 20.841191,
  "retries": 1
}