{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nTransforms the input grid by applying a color substitution rule based on the grid's background color. \nThe background color is identified as the most frequent color in the input grid. \nSpecific color substitutions are applied only to certain foreground colors, depending on the background.\n\nRule Mapping based on Background Color:\n- If Background is Azure (8): White (0) -> Gray (5), Red (2) -> Green (3).\n- If Background is Maroon (9): Yellow (4) -> Gray (5), Orange (7) -> Green (3).\n- If Background is Orange (7): Blue (1) -> Green (3), Magenta (6) -> Gray (5).\nOther colors, including the background color itself, remain unchanged.\n\"\"\"\n\ndef find_background_color(grid):\n    \"\"\"Finds the most frequent color in the grid, assumed to be the background.\"\"\"\n    colors, counts = np.unique(grid, return_counts=True)\n    return colors[np.argmax(counts)]\n\ndef transform(input_grid):\n    \"\"\"\n    Applies a conditional color substitution based on the background color.\n    \n    Args:\n        input_grid (list of lists): The input grid represented as a list of lists of integers.\n\n    Returns:\n        list of lists: The transformed grid.\n    \"\"\"\n    # Convert input to numpy array for easier handling\n    input_array = np.array(input_grid, dtype=int)\n    \n    # Create a copy of the input grid to modify for the output\n    output_array = np.copy(input_array)\n    \n    # Determine the background color\n    background_color = find_background_color(input_array)\n    \n    # Define the substitution rules based on the background color\n    substitution_rules = {\n        8: {  # Azure background\n            0: 5,  # White -> Gray\n            2: 3   # Red -> Green\n        },\n        9: {  # Maroon background\n            4: 5,  # Yellow -> Gray\n            7: 3   # Orange -> Green\n        },\n        7: {  # Orange background\n            1: 3,  # Blue -> Green\n            6: 5   # Magenta -> Gray\n        }\n    }\n    \n    # Get the specific rules for the current background, if any\n    current_rules = substitution_rules.get(background_color, {})\n    \n    # Iterate through each pixel in the input grid\n    rows, cols = input_array.shape\n    for r in range(rows):\n        for c in range(cols):\n            # Get the color of the current pixel\n            pixel_color = input_array[r, c]\n            \n            # Check if this color needs substitution based on the current rules\n            if pixel_color in current_rules:\n                # Apply the substitution to the output grid\n                output_array[r, c] = current_rules[pixel_color]\n                \n    # Convert the output numpy array back to a list of lists\n    output_grid = output_array.tolist()\n    \n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6164,
    "candidates_token_count": 708,
    "total_token_count": 6872,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 11.676143,
  "retries": 1
}