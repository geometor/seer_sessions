{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom scipy.ndimage import binary_dilation, generate_binary_structure\n\n\"\"\"\nTransforms the input grid based on a conditional rule involving Red (2), White (0), and Blue (1) pixels. \nThe rule selection depends on whether any White pixel is adjacent (including diagonals) to any Blue pixel, \nand whether the total count of Red pixels is greater than 1.\n\nCondition Logic:\n1. Check if any White(0) pixel is adjacent (8-way connectivity) to any Blue(1) pixel.\n2. Count the total number of Red(2) pixels.\n3. If (White is adjacent to Blue) AND (Red pixel count > 1), then apply Rule Set TRUE.\n4. Otherwise, apply Rule Set FALSE.\n\nRule Sets:\n- Rule Set TRUE: White(0) becomes Blue(1), Blue(1) becomes White(0). Red(2) and others remain unchanged.\n- Rule Set FALSE: Red(2) becomes White(0), White(0) becomes Blue(1). Blue(1) and others remain unchanged.\n\"\"\"\n\ndef check_adjacency(grid, color1, color2):\n    \"\"\"\n    Checks if any pixel of color1 is adjacent (8-way) to any pixel of color2.\n\n    Args:\n        grid (np.array): The input grid.\n        color1 (int): The first color value.\n        color2 (int): The second color value.\n\n    Returns:\n        bool: True if any color1 pixel is adjacent to a color2 pixel, False otherwise.\n    \"\"\"\n    # Create a mask for color1 pixels\n    mask1 = (grid == color1)\n    if not np.any(mask1):\n        return False # No pixels of color1 exist\n\n    # Define 8-way connectivity structure\n    structure = generate_binary_structure(2, 2) \n    \n    # Dilate the color1 mask by one pixel in all 8 directions\n    dilated_mask1 = binary_dilation(mask1, structure=structure)\n    \n    # Create a mask for color2 pixels\n    mask2 = (grid == color2)\n    if not np.any(mask2):\n        return False # No pixels of color2 exist\n\n    # Check if the dilated area of color1 overlaps with any color2 pixel\n    return np.any(dilated_mask1 & mask2)\n\ndef count_pixels(grid, color):\n    \"\"\"\n    Counts the number of pixels of a specific color in the grid.\n\n    Args:\n        grid (np.array): The input grid.\n        color (int): The color value to count.\n\n    Returns:\n        int: The total count of pixels with the specified color.\n    \"\"\"\n    return np.sum(grid == color)\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the conditional color transformation to the input grid.\n\n    Args:\n        input_grid (list[list[int]]): A 2D list representing the input grid.\n\n    Returns:\n        list[list[int]]: A 2D list representing the transformed output grid.\n    \"\"\"\n    # Convert input list of lists to a NumPy array for efficient processing\n    input_np = np.array(input_grid, dtype=int)\n    \n    # --- Determine the condition ---\n    # Check if White(0) is adjacent to Blue(1)\n    white_touches_blue = check_adjacency(input_np, 0, 1)\n    \n    # Count the number of Red(2) pixels\n    num_red_pixels = count_pixels(input_np, 2)\n    \n    # Evaluate the primary condition for using Rule Set TRUE\n    use_true_rule = white_touches_blue and (num_red_pixels > 1)\n    \n    # --- Apply the transformation ---\n    # Initialize output grid as a copy of the input\n    output_grid = np.copy(input_np)\n    \n    if use_true_rule:\n        # Apply Rule Set TRUE: White -> Blue, Blue -> White\n        # Find pixels that are White (0) in the input\n        white_pixels_mask = (input_np == 0)\n        # Find pixels that are Blue (1) in the input\n        blue_pixels_mask = (input_np == 1)\n        \n        # Change White pixels to Blue in the output grid\n        output_grid[white_pixels_mask] = 1 \n        # Change Blue pixels to White in the output grid\n        output_grid[blue_pixels_mask] = 0 \n        # Red and other colors remain unchanged (already copied)\n    else:\n        # Apply Rule Set FALSE: Red -> White, White -> Blue\n        # Find pixels that are Red (2) in the input\n        red_pixels_mask = (input_np == 2)\n        # Find pixels that are White (0) in the input\n        white_pixels_mask = (input_np == 0)\n        \n        # Change Red pixels to White in the output grid\n        output_grid[red_pixels_mask] = 0\n        # Change White pixels to Blue in the output grid\n        output_grid[white_pixels_mask] = 1\n        # Blue and other colors remain unchanged (already copied)\n        \n    # Convert the final NumPy array back to a list of lists for the output format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 17652,
    "candidates_token_count": 1224,
    "total_token_count": 18876,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.992342,
  "retries": 1
}