{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef transform(input_grid):\n    \"\"\"\n    Extracts the minimal bounding box containing all pixels whose color is not the most frequent color (background color).\n\n    1. Analyze the input grid to find unique colors and their frequencies.\n    2. Identify the background color as the most frequent color.\n    3. Locate all pixels that do *not* match the background color.\n    4. If no such pixels exist, return an empty grid.\n    5. Otherwise, determine the minimum and maximum row and column indices (bounding box) encompassing these non-background pixels.\n    6. Extract the subgrid defined by this bounding box from the input grid.\n    \"\"\"\n    # Convert input list of lists to a NumPy array for efficient processing\n    grid = np.array(input_grid, dtype=int)\n    \n    # Handle empty input grid case\n    if grid.size == 0:\n        return []\n\n    # 1. Find unique colors and their counts\n    unique_colors, counts = np.unique(grid, return_counts=True)\n\n    # Handle the case where the grid has only one color\n    if len(unique_colors) <= 1:\n        # If only one color exists, it's the background, so no 'object' pixels exist.\n        return [] \n\n    # 2. Determine the background color (most frequent)\n    background_color = unique_colors[np.argmax(counts)]\n\n    # 3. Locate all pixels that are *not* the background color\n    object_pixels_coords = np.where(grid != background_color)\n\n    # 4. If no non-background pixels are found, return an empty grid\n    if object_pixels_coords[0].size == 0:\n        return []\n\n    # 5. Calculate the bounding box coordinates\n    min_row = np.min(object_pixels_coords[0])\n    max_row = np.max(object_pixels_coords[0])\n    min_col = np.min(object_pixels_coords[1])\n    max_col = np.max(object_pixels_coords[1])\n\n    # 6. Extract the subgrid using the bounding box coordinates\n    # Slicing is inclusive of start index, exclusive of end index, so add 1 to max values.\n    output_grid_np = grid[min_row:max_row + 1, min_col:max_col + 1]\n\n    # Convert the resulting NumPy array back to a list of lists\n    output_grid = output_grid_np.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 23274,
    "candidates_token_count": 591,
    "total_token_count": 23865,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 10.537041,
  "retries": 1
}