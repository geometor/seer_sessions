task_description: Reorganize pattern blocks extracted from an input grid, using '6' as a separator and '7' as background. The reorganization method (splitting vs. extracting) and output arrangement (horizontal/vertical stacking, ordering) depend on the configuration of the '6' separators in the input.

elements:
  - id: grid
    description: A 2D array of integers.
  - id: background_digit
    value: 7
    description: Represents empty space or background.
  - id: separator_digit
    value: 6
    description: Used to form lines that separate regions or subgrids.
  - id: pattern_digits
    value: [1, 2, 3, 4, 8, 9] # Digits observed in patterns
    description: Digits representing the core patterns/objects.
  - id: separator_line
    description: A horizontal or vertical line composed entirely of separator_digits (6).
  - id: pattern_region
    description: A connected component of pattern_digits within the grid, not crossing separator_lines.
  - id: subgrid
    description: A rectangular section of the input grid obtained by splitting along separator_lines.
  - id: panel
    description: A standardized grid (e.g., 5x5) used in the output to display an extracted pattern_region, padded with background_digit (7).

relationships_and_actions:
  - action: identify_separators
    input: grid
    output: list of horizontal_separator_lines, list of vertical_separator_lines
    description: Locates complete rows or columns filled only with the separator_digit (6).
  - action: determine_mode
    input: grid, separator_lines
    output: mode ('split' or 'extract'), separator_type ('horizontal' or 'vertical')
    description: >
      Checks if separators fully partition the grid into rectangular blocks each containing one pattern (Mode 'split').
      If horizontal separators partition -> separator_type = 'horizontal'.
      If vertical separators partition -> separator_type = 'vertical'.
      Otherwise, assume Mode 'extract' (like train_1). In train_1, the separator is horizontal.
  - action: split_grid
    condition: mode == 'split'
    input: grid, separator_lines, separator_type
    output: list of subgrids, order ('original' or 'reverse')
    description: >
      Splits the grid along the separators.
      If separator_type is 'horizontal', order is 'reverse' (bottom-to-top).
      If separator_type is 'vertical', order is 'original' (left-to-right).
  - action: extract_regions
    condition: mode == 'extract'
    input: grid
    output: list of panels, order ('relative_position')
    description: >
      Finds connected pattern_regions. Creates a 5x5 panel for each, placing the pattern inside padded with background_digit (7).
      Determines order based on region position relative to the main separator (e.g., Above-Left, Below-Right, Above-Right, Below-Left for a horizontal separator).
  - action: construct_output
    input: subgrids or panels, order, separator_type (from mode determination)
    output: output_grid
    description: >
      Arranges the subgrids/panels according to the determined order.
      If input separators were horizontal (split mode) or if mode was extract: arrange items HORIZONTALLY/VERTICALLY?? -> Recheck logic.
      - If Mode 'split' with HORIZONTAL separators: Arrange subgrids HORIZONTALLY in REVERSE order, separated by VERTICAL 6s lines.
      - If Mode 'split' with VERTICAL separators: Arrange subgrids VERTICALLY in ORIGINAL order, separated by HORIZONTAL 6s lines.
      - If Mode 'extract' (like train_1, horizontal separator): Arrange panels VERTICALLY in relative_position order (AL, BR, AR, BL), separated by HORIZONTAL 6s lines.
