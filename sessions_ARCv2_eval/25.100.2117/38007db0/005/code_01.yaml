Input:
  type: grid
  structure:
    - Composite grid composed of an M x N arrangement of smaller sub-grids.
    - M: Number of sub-grid rows (must be >= 3 for this task).
    - N: Number of sub-grid columns.
    - Separator value: Uniform value filling single rows and columns between sub-grids, identifiable at input[0,0].
    - Separator lines: Defined by rows/columns filled entirely with the separator value. Indices stored in `sep_rows` and `sep_cols`.
    - Sub-grids:
      - Identification: Located between consecutive separator lines.
      - Dimensions: Uniform (H x W), where H = sep_rows[1]-sep_rows[0]+1, W = sep_cols[1]-sep_cols[0]+1. (Observed H=7, W=7 in examples).
      - Indexing: Sub-grids indexed by (row_index r, column_index c) from 0 to M-1 and 0 to N-1.
      - Location: Sub-grid(r, c) corresponds to input array slice `[sep_rows[r] : sep_rows[r+1]+1, sep_cols[c] : sep_cols[c+1]+1]`.
      - Property: The last row of any sub-grid(r, c) is identical to the first row of sub-grid(r+1, c). Similarly, the last column matches the first column of sub-grid(r, c+1). This implies separator lines are part of the sub-grids.

Output:
  type: grid
  structure:
    - Vertical stack derived from three specific sub-grids from the input.
    - dimensions: ((H) + (H-1) + (H-1)) x W = (3*H - 2) x W. (Observed 19x7 in examples, consistent with H=7).

Transformation:
  action: Sub-grid identification, selection based on index and N, overlapping vertical concatenation.
  mechanism:
    - Identify separator value, `sep_rows`, `sep_cols`.
    - Determine number of block columns, N = len(sep_cols) - 1.
    - Determine block dimensions H and W.
    - Define target block indices:
      - Index 1: (r1=0, c1=2)
      - Index 2: (r2=1, c2=0)
      - Index 3: (r3=2, c3=C3), where C3 = (N - 1) if N is even, else C3 = (N - 2).
    - Validate that M>=3 and column indices c1, c2, c3 are valid (0 <= c < N).
    - Extract the three target sub-grids (Block1, Block2, Block3) using the slicing logic: `input[sep_rows[r] : sep_rows[r+1]+1, sep_cols[c] : sep_cols[c+1]+1]`.
    - Construct the output grid by vertically concatenating:
      - Block1 (all H rows)
      - Block2, excluding its first row (rows 1 to H-1, i.e., `Block2[1:, :]`)
      - Block3, excluding its first row (rows 1 to H-1, i.e., `Block3[1:, :]`)