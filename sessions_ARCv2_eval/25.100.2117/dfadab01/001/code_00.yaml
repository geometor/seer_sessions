grid_properties:
  variable_dimensions: True # Seen 20x20 and 10x10
  background_digit: 0
input_features:
  - type: SixBlock
    value: 6
    shape: 2x2
    condition: Appears as a solid 2x2 block.
    # Example train_1 locations: [[1, 1], [3, 3]]
  - type: TwoMarker
    value: 2
    condition: Any single '2'.
    # Example train_1 locations: [[1, 8], [1, 13], [6, 8], [6, 13]]
    # Example train_2 locations: [[1, 5], [5, 1]]
  - type: FiveThreeRectangle
    value: 5 and 3
    shape: Rectangle defined by four points (r1, c1), (r1, c2), (r2, c1), (r2, c2)
    condition: r1 < r2, c1 < c2, value at (r1, c1) and (r1, c2) is 5, value at (r2, c1) and (r2, c2) is 3.
    # Example train_1 corners: [[11, 8]: 5, [11, 13]: 5, [16, 8]: 3, [16, 13]: 3]
  - type: ThreeMarker
    value: 3
    condition: Any single '3'. Can participate in FiveThreeRectangle or TriggerOneSquare rules.
    # Example train_1 locations: [[11, 2], [16, 2], [16, 8], [16, 13]]
    # Example train_2 locations: [[1, 1], [5, 5], [9, 9]]
  - type: OneSquare
    value: 1
    shape: 4x4 hollow square
    condition: Appears as a hollow 4x4 square made of '1's.
    # Example train_2 location: [5, 5] # Top-left corner

output_generation_rules:
  - rule_id: ShiftSixBlock
    source_feature: SixBlock
    input_location: (r, c) # Top-left of 2x2 block
    output_pattern: 2x2 block of '6's
    output_location: (r-1, c-1) # Top-left of output block
    # Observed in train_1
  - rule_id: GenerateFourSquareFromTwo
    source_feature: TwoMarker
    input_location: (r, c)
    output_pattern: 4x4 hollow square of '4's
    output_location: (r, c) # Top-left of output square
    # Observed in train_1, train_2
  - rule_id: GenerateSixBlocksFromFiveThreeRectangle
    source_feature: FiveThreeRectangle
    input_locations: Corners P1=(r1, c1), P2=(r1, c2), P3=(r2, c1), P4=(r2, c2)
    output_pattern: Four 2x2 blocks of '6's
    output_locations: [(r1, c1), (r1, c2), (r2-3, c1), (r2-3, c2)] # Top-left of each output block
    # Observed in train_1
  - rule_id: TriggerOneSquareFromThree
    source_feature: ThreeMarker
    condition: Complex condition based on '3' positions and FiveThreeRectangle participation.
      1. Identify all '3's *not* part of any FiveThreeRectangle (let this set be `EligibleThrees`).
      2. Identify all vertical pairs ((r_a, c), (r_b, c) with r_a < r_b) within `EligibleThrees`.
      3. If vertical pairs exist: Find the pair with the minimum `r_b`. The trigger location is (r_b, c) for this pair.
      4. If no vertical pairs exist: Find the '3' in `EligibleThrees` with the minimum row index (r_min), breaking ties with the minimum column index (c_min). The trigger location is (r_min, c_min).
      5. If a trigger location is determined, apply the rule.
    input_location: Determined trigger location (r_trigger, c_trigger) as per above logic.
    output_pattern: 4x4 hollow square of '1's
    output_location: (r_trigger, c_trigger) # Top-left of output square
    # Logic derived from train_1 (vertical pair case) and train_2 (no vertical pair case)
  - rule_id: ShiftOneSquare
    source_feature: OneSquare
    input_location: (r, c) # Top-left of 4x4 hollow square
    output_pattern: 4x4 hollow square of '1's
    output_location: (r, c+1) # Top-left of output square
    # Observed in train_2
