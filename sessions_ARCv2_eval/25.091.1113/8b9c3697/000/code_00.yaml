task_description: Fill cavities in shapes triggered by adjacent red pixels.

definitions:
  background_color: The most frequent color in the input grid.
  red_color: 2
  fill_color: 0
  container_colors: Any color other than background_color and red_color.

objects:
  - type: grid
    properties: pixels, height, width
  - type: red_object
    properties:
      - color: red_color
      - pixels: list of (row, col) tuples forming a contiguous block
      - location: coordinates of pixels
  - type: container_object
    properties:
      - color: one of container_colors
      - pixels: list of (row, col) tuples forming a contiguous block
      - location: coordinates of pixels
      - shape_features: presence of cavities/inlets (regions of background pixels partially enclosed by the object)
  - type: cavity_region
    properties:
      - pixels: list of (row, col) tuples forming a contiguous block of background_color
      - location: coordinates of pixels
      - bounding_object: the container_object that defines the cavity
      - status: potential fill target

actions:
  - name: identify_objects
    inputs: input_grid
    outputs: background_color, list_of_red_objects, list_of_container_objects
  - name: find_cavities_near_red
    inputs: red_object, container_objects, input_grid
    outputs: list_of_cavity_regions adjacent to red_object
  - name: flood_fill
    inputs: start_pixel (in cavity_region), region_to_fill (cavity_region.pixels), fill_color, target_grid, boundary_pixels (container_object.pixels)
    outputs: modified_target_grid
  - name: replace_color
    inputs: object_pixels, new_color, target_grid
    outputs: modified_target_grid

relationships:
  - type: adjacency
    between: [red_object, background_pixel]
    details: Edge or corner sharing.
  - type: containment
    between: [background_pixel, cavity_region]
  - type: bounding
    between: [cavity_region, container_object]
  - type: edge_adjacency
    between: [red_object, filled_cavity_region]
    details: Edge sharing only.

transformation_trigger:
  condition: A red_object is adjacent (edge/corner) to a background_pixel that belongs to a cavity_region bounded by a single container_object.

transformation_steps:
  - step: Initialize output_grid as a copy of input_grid.
  - step: Identify background_color, red_objects, container_objects.
  - step: Create a set `processed_red_objects` = {}.
  - step: For each `red_obj` in `red_objects`:
    - if `red_obj` in `processed_red_objects`, continue.
    - Find `cavities` adjacent to `red_obj`.
    - if `cavities` exist:
      - Select one `cavity` and its `bounding_container`.
      - Flood_fill the `cavity` region in `output_grid` with `fill_color`, stopping at `bounding_container` pixels.
      - Let `filled_region_pixels` be the set of pixels changed to `fill_color`.
      - Check if any pixel in `red_obj` is edge_adjacent to any pixel in `filled_region_pixels`.
      - if edge_adjacent:
          replace_color(`red_obj`.pixels, `fill_color`, `output_grid`)
      - else:
          replace_color(`red_obj`.pixels, `background_color`, `output_grid`)
      - Add `red_obj` to `processed_red_objects`.
  - step: For each `red_obj` in `red_objects`:
    - if `red_obj` not in `processed_red_objects`:
      replace_color(`red_obj`.pixels, `background_color`, `output_grid`)
  - step: Return `output_grid`.
