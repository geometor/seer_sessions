task_description: "Perform a multi-source flood fill starting from 'seed' pixels."
constants:
  - GRAY: 8
  - GREEN: 3
elements:
  - type: background
    color: GRAY (8)
    description: "The default grid color, which is the target for filling."
  - type: barrier
    color: GREEN (3)
    description: "Impassable boundaries for the flood fill. Static."
    properties:
      - static: Position and color remain unchanged in the output.
      - blocks_fill: Fill cannot enter or cross these pixels.
  - type: seed
    description: "Pixels with colors other than GRAY (8) or GREEN (3)."
    properties:
      - static: Position and color remain unchanged in the output.
      - source_of_fill: Initiates a flood fill process.
      - fill_color_determiner: The color of the seed determines the color used for its corresponding fill.
  - type: fill_area
    description: "Regions of GRAY (8) pixels in the input that become colored in the output."
    properties:
      - initial_color: GRAY (8)
      - final_color: Determined by the color of the nearest seed pixel from which the fill originated.
      - connectivity: 8-way (adjacent and diagonal) to seed pixels or other filled pixels of the same color.
      - bounded: Fill expansion stops at GREEN barriers, grid edges, or any non-GRAY pixels.
actions:
  - type: identify_elements
    input: input_grid
    output: locations of background (GRAY), barrier (GREEN), and seed (all others) pixels.
  - type: multi_source_flood_fill
    input: input_grid, identified_elements
    parameters:
      - fill_target: GRAY (8)
      - barrier_color: GREEN (3)
      - connectivity: 8 (includes diagonals)
    output: modified_grid
    description: >
      Simultaneously start a flood fill from all seed pixels.
      Each fill uses the color of its starting seed pixel.
      The fill propagates into adjacent (8-way) GRAY pixels.
      The fill stops if it encounters a GREEN pixel, a non-GRAY pixel, or the grid boundary.
      If multiple fills could reach the same GRAY pixel, the first one (determined by BFS order) colors it.
output_generation:
  - step: Initialize output_grid as a copy of input_grid.
  - step: Identify all seed pixels (non-GRAY, non-GREEN).
  - step: Perform a multi-source Breadth-First Search (BFS) flood fill:
      a. Initialize a queue with all seed pixels, storing (row, col, seed_color).
      b. Initialize a 'visited' grid/set to track barriers, seeds, and already filled pixels. Mark all GREEN and seed pixels as visited initially.
      c. While the queue is not empty:
          i. Dequeue a pixel (r, c, fill_color).
          ii. For each 8-way neighbor (nr, nc):
             - If the neighbor is within bounds AND the input_grid[nr, nc] is GRAY AND the neighbor has not been visited:
                 - Set output_grid[nr, nc] = fill_color.
                 - Mark (nr, nc) as visited.
                 - Enqueue (nr, nc, fill_color).
  - step: Return the final output_grid.