{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nimport copy\n\n\"\"\"\nTransformation Rule:\n1. Find all solid 3x3 squares of a single color (not white/0) in the input grid.\n2. For each found solid 3x3 square:\n    a. Hollow it out in place by changing its center pixel to white (0).\n    b. Determine a 'partner' color based on a swap rule: Red (2) <-> Green (3), Blue (1) <-> Yellow (4), Magenta (6) <-> Magenta (6).\n    c. Determine a new location for a corresponding hollow frame based on the original square's position:\n        i. If all original solid 3x3 squares were found in row 1, the new location's top-left corner is (14, original_col).\n        ii. Otherwise, if the original square was in column 2, the new location's top-left corner is (original_row, 15).\n        iii. Otherwise, if the original square was in column 15, the new location's top-left corner is (original_row, 2).\n        iv. (Assumption: The examples cover all location rules needed).\n    d. Create a new 3x3 hollow frame (center pixel white/0, perimeter pixels are the partner color) at the calculated new location.\n3. Keep all other elements (background, complex shapes, pre-existing hollow frames) unchanged.\n\"\"\"\n\ndef find_solid_3x3_squares(grid):\n    \"\"\"Finds the top-left coordinates and color of all solid 3x3 squares.\"\"\"\n    squares = []\n    height, width = grid.shape\n    for r in range(height - 2):\n        for c in range(width - 2):\n            color = grid[r, c]\n            if color == 0:  # Skip background\n                continue\n            # Check if the 3x3 block is solid and matches the top-left color\n            is_solid = True\n            for i in range(3):\n                for j in range(3):\n                    if grid[r + i, c + j] != color:\n                        is_solid = False\n                        break\n                if not is_solid:\n                    break\n            if is_solid:\n                squares.append({'r': r, 'c': c, 'color': color})\n    return squares\n\ndef draw_hollow_frame(grid, r, c, color):\n    \"\"\"Draws a 3x3 hollow frame at (r, c) with the given color.\"\"\"\n    height, width = grid.shape\n    if r < 0 or r + 2 >= height or c < 0 or c + 2 >= width:\n        # Ensure the frame fits within the grid boundaries\n        return \n        \n    for i in range(3):\n        for j in range(3):\n            if i == 1 and j == 1:\n                grid[r + i, c + j] = 0  # Center pixel is white\n            else:\n                grid[r + i, c + j] = color # Perimeter pixels\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule: hollowing solid 3x3 squares and creating\n    color-swapped, position-shifted hollow copies.\n    \"\"\"\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n    height, width = output_grid.shape\n\n    # 1. Find all solid 3x3 squares\n    solid_squares = find_solid_3x3_squares(input_grid)\n\n    if not solid_squares:\n        return output_grid # No squares found, return original grid\n\n    # Determine location rule based on original square positions\n    all_in_row_1 = all(sq['r'] == 1 for sq in solid_squares)\n\n    # Define the color swap map\n    color_swap_map = {\n        2: 3, 3: 2,  # Red <-> Green\n        1: 4, 4: 1,  # Blue <-> Yellow\n        6: 6        # Magenta <-> Magenta\n    }\n\n    # Process each found square\n    for square in solid_squares:\n        r, c, color = square['r'], square['c'], square['color']\n\n        # 2a. Hollow the original square in the output grid\n        output_grid[r + 1, c + 1] = 0\n\n        # 2b. Determine the partner color\n        swapped_color = color_swap_map.get(color, color) # Default to original if not in map\n\n        # 2c. Determine the new location\n        new_r, new_c = -1, -1 # Initialize invalid coordinates\n        if all_in_row_1:\n            # Rule i: All originals in row 1 -> new frame in row 14\n            new_r, new_c = 14, c\n        elif c == 2:\n            # Rule ii: Original in col 2 -> new frame in col 15\n             new_r, new_c = r, 15\n        elif c == 15:\n             # Rule iii: Original in col 15 -> new frame in col 2\n             new_r, new_c = r, 2\n        # Add potential default or error handling if needed, though examples seem covered.\n\n        # 2d. Create the new hollow frame if location is valid\n        if new_r != -1 and new_c != -1:\n             draw_hollow_frame(output_grid, new_r, new_c, swapped_color)\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 8008,
    "candidates_token_count": 1295,
    "total_token_count": 9303,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 101.648331,
  "retries": 2
}