{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nPerform a flood fill starting from the white (0) border cells of the input grid.\nThe fill propagates only through adjacent white (0) cells in the input grid.\nInput azure (8) cells act as barriers and stop the fill.\nAll cells reachable by the fill (starting from the white border cells) are marked\nas azure (8) in the output grid.\nCells that were originally barriers (input azure 8) or were white (0) but unreachable\nfrom the border remain white (0) in the output grid.\n\"\"\"\n\ndef transform(input_grid):\n    \"\"\"\n    Applies a flood fill transformation based on border reachability.\n\n    Args:\n        input_grid (numpy.ndarray): A 2D numpy array representing the input grid.\n\n    Returns:\n        numpy.ndarray: A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    # Get grid dimensions\n    height, width = input_grid.shape\n\n    # Initialize output_grid with white (0) - this will be the final grid.\n    # Cells remain white unless visited by the fill.\n    output_grid = np.zeros((height, width), dtype=int)\n\n    # Initialize queue for Breadth-First Search (BFS)\n    queue = deque()\n    # visited_locations set keeps track of cells added to queue/processed\n    # to prevent cycles and redundant work.\n    visited_locations = set()\n\n    # --- Seed the BFS queue with starting points ---\n    # Iterate through all border cells\n    for r in range(height):\n        for c in [0, width - 1]:  # Left and right borders\n            # Check if the border cell is white (0) in the input and hasn't been visited\n            if input_grid[r, c] == 0 and (r, c) not in visited_locations:\n                visited_locations.add((r, c))\n                queue.append((r, c))\n                # Mark this starting reachable cell as azure (8) in the output\n                output_grid[r, c] = 8\n\n    for c in range(1, width - 1):  # Top and bottom borders (excluding corners already checked)\n         for r in [0, height - 1]:\n            # Check if the border cell is white (0) in the input and hasn't been visited\n            if input_grid[r, c] == 0 and (r, c) not in visited_locations:\n                visited_locations.add((r, c))\n                queue.append((r, c))\n                # Mark this starting reachable cell as azure (8) in the output\n                output_grid[r, c] = 8\n\n    # --- Performing the Flood Fill (BFS) ---\n    # Define 4-way adjacent neighbors movements\n    moves = [(0, 1), (0, -1), (1, 0), (-1, 0)] # Right, Left, Down, Up\n\n    while queue:\n        # Get the next cell to process from the front of the queue\n        r, c = queue.popleft()\n\n        # Explore its neighbors\n        for dr, dc in moves:\n            nr, nc = r + dr, c + dc\n\n            # Check 1: Is the neighbor within the grid boundaries?\n            if 0 <= nr < height and 0 <= nc < width:\n                # Check 2: Has the neighbor already been visited?\n                if (nr, nc) not in visited_locations:\n                    # Check 3: Is the neighbor white (0) in the input grid (i.e., passable)?\n                    if input_grid[nr, nc] == 0:\n                        # If all checks pass, this neighbor is reachable and passable\n                        visited_locations.add((nr, nc)) # Mark as visited\n                        queue.append((nr, nc)) # Add to queue for further exploration\n                        # Mark this reachable cell as azure (8) in the output grid\n                        output_grid[nr, nc] = 8\n\n    # After the BFS, output_grid contains azure (8) for all cells reachable\n    # from the white border cells via paths of white cells.\n    # Barrier cells (input azure 8) and unreachable white cells remain white (0).\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 23934,
    "candidates_token_count": 965,
    "total_token_count": 24899,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.177365,
  "retries": 1
}