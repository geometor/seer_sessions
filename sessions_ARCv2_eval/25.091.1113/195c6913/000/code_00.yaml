task_type: pattern_fill
common_elements:
  - background_color: Persists from input to output, often the most frequent color or frames the grid.
  - fillable_color: Color of the area in the input that gets replaced by the pattern.
  - pattern_sequence: A repeating sequence of colors used for filling.
  - seed_colors: Pixels of these colors initiate the fill into adjacent fillable areas.
  - terminator_colors: Pixels of these colors halt the fill and retain their color.
  - erased_colors: (Optional) Pixels of these colors are replaced by the background color.
  - adjacency: 8-directional (includes diagonals).

example_specifics:
  - example: train_1
    background_color: 3 # green
    fillable_color: 0 # white
    seed_colors: [2, 8] # red, azure
    terminator_colors: [4] # yellow
    erased_colors: []
    pattern_sequence: [2, 2, 8] # red, red, azure
    seed_handling: Retain original color (2 or 8).
    terminator_handling: Retain original color (4).
    fill_start_color: 2 # First element of sequence.
  - example: train_2
    background_color: 2 # red
    fillable_color: 8 # azure
    seed_colors: [4] # yellow
    terminator_colors: [9] # maroon
    erased_colors: [1] # blue
    pattern_sequence: [4, 1] # yellow, blue
    seed_handling: Retain original color (4).
    terminator_handling: Retain original color (9).
    erased_handling: Replace with background color (2).
    fill_start_color: 4 # First element of sequence.
  - example: train_3
    background_color: 1 # blue
    fillable_color: 4 # yellow
    seed_colors: [2, 3] # red, green
    terminator_colors: [8] # azure
    erased_colors: []
    pattern_sequence: [2, 2, 3] # red, red, green
    seed_handling: Replace with pattern start color (2).
    terminator_handling: Retain original color (8).
    fill_start_color: 2 # First element of sequence.

transformation_process:
  - step: Initialize output grid by copying the input grid.
  - step: Identify the roles of each color (Background, Fillable, Seed, Terminator, Erased).
  - step: (If applicable) Replace all pixels with Erased colors with the Background color in the output grid.
  - step: (If applicable) Modify the color of Seed pixels in the output grid according to example-specific rules.
  - step: Identify all Fillable pixels in the *input* grid that are 8-directionally adjacent to Seed pixels in the *input* grid. These are the initial fill locations.
  - step: Use a Breadth-First Search (BFS) or similar propagation method starting from these initial fill locations.
  - step: Maintain a `visited` set to track filled pixels.
  - step: For the initial fill locations not already visited, set their color in the output grid to the first color of the `pattern_sequence`, mark as visited, and add to the BFS queue.
  - step: While the BFS queue is not empty:
      - Dequeue a pixel `(r, c)`.
      - Determine the next color in the `pattern_sequence` based on the color of `output[r][c]`.
      - For each 8-directional neighbor `(nr, nc)`:
          - If `(nr, nc)` is within grid bounds AND the color `input[nr][nc]` is the Fillable color AND `(nr, nc)` is not in the `visited` set:
              - Set `output[nr][nc]` to the determined next pattern color.
              - Add `(nr, nc)` to the `visited` set.
              - Enqueue `(nr, nc)`.
  - step: Ensure Background and Terminator pixels retain their original colors throughout the process.