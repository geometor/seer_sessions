task_description: Apply a cellular automaton rule for a number of steps equal to the maximum dimension of the grid.
grid_properties:
  - Input and output grids have the same dimensions.
  - Dimensions vary across examples (22x22, 12x12, 16x16).
  - Only two colors are present: white (0) and azure (8).
initial_state:
  - The input grid contains a small number of azure (8) pixels acting as a seed pattern.
  - Seed patterns vary: 'H' shape, diamond shape, cross shape.
transformation:
  - A cellular automaton rule is applied iteratively.
  - The number of iterations is `N = max(grid_height, grid_width)`.
  - The rule determines the next state of each cell based on its neighbors in the previous state.
  - Cells outside the grid boundary are treated as white (0).
automaton_rule:
  - A cell's state depends on the sum of the states of its *cardinal* neighbors (up, down, left, right).
  - Let azure=1 and white=0.
  - If the sum of the four cardinal neighbors' states is odd, the cell becomes azure (8) in the next step.
  - If the sum is even, the cell becomes white (0) in the next step.
final_state:
  - The output grid shows a complex pattern, often resembling a Sierpinski triangle/carpet grown from the initial seed.
  - The number of azure pixels is significantly larger in the output compared to the input.