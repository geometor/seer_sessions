task_description: Identify a background/noise color. Find an even number of distinct, large 'primary' colored shapes. Divide these shapes into two groups (Targets and Sources) based on spatial arrangement and/or internal noise presence. Targets contain the noise color within their bounding box. Sources provide filler colors. Pair Targets and Sources based on relative order. Create the output by taking the Target shapes' bounding box areas, replacing the noise color pixels within them with the corresponding Source color, and assembling these modified areas while preserving relative positions.

example_1:
  input_grid_size: [20, 15]
  output_grid_size: [6, 12]
  primary_shapes: # Large, distinct non-noise objects
    - {color: 1 (blue), bbox: [0, 5, 0, 5], approx_pos: top-left}
    - {color: 4 (yellow), bbox: [0, 5, 6, 11], approx_pos: top-right}
    - {color: 2 (red), bbox: [9, 12, 2, 5], approx_pos: bottom-left}
    - {color: 3 (green), bbox: [13, 16, 7, 10], approx_pos: bottom-right}
  noise_color: 8 (azure) # Color most frequent inside primary shape bboxes (but not the shape colors)
  target_shapes: # Primary shapes containing noise_color in their bbox
    - {color: 1 (blue), bbox: [0, 5, 0, 5]}
    - {color: 4 (yellow), bbox: [0, 5, 6, 11]}
  source_shapes: # Remaining primary shapes
    - {color: 2 (red), bbox: [9, 12, 2, 5]}
    - {color: 3 (green), bbox: [13, 16, 7, 10]}
  pairing: # Based on sorted spatial order (top-left, top-right, bottom-left, bottom-right)
    - target: 1 (blue) -> source: 2 (red)
    - target: 4 (yellow) -> source: 3 (green)
  action:
    - Define subgrid from target bbox (e.g., input[0:6, 0:6] for blue).
    - Replace noise color (8) pixels within subgrid with paired source color (2).
    - Repeat for yellow target (bbox [0:6, 6:12]), replacing noise (8) with source color (3).
  assembly: Arrange modified target subgrids based on their relative positions.

example_2:
  input_grid_size: [30, 30]
  output_grid_size: [16, 16]
  primary_shapes: # Large, distinct non-noise objects
    - {color: 4 (yellow), bbox: [0, 7, 0, 7], approx_pos: top-left}
    - {color: 3 (green), bbox: [0, 7, 8, 15], approx_pos: top-right}
    - {color: 8 (azure), bbox: [8, 15, 0, 7], approx_pos: bottom-left}
    - {color: 1 (blue), bbox: [8, 15, 8, 15], approx_pos: bottom-right}
    # Note: Source patterns (9, 7, 1, 5) are smaller objects, not primary shapes here.
  noise_color: 2 (red) # Color most frequent inside primary shape bboxes (but not the shape colors)
  target_shapes: # Primary shapes containing noise_color in their bbox
    - {color: 4 (yellow), bbox: [0, 7, 0, 7]}
    - {color: 3 (green), bbox: [0, 7, 8, 15]}
    - {color: 8 (azure), bbox: [8, 15, 0, 7]}
    - {color: 1 (blue), bbox: [8, 15, 8, 15]}
  source_shapes: Not applicable (sources are derived from regions/patterns)
  source_colors_derivation: # Find the dominant non-noise color in regions corresponding to targets
    - Region near top-left target (4): Contains color 9 (maroon)
    - Region near top-right target (3): Contains color 7 (orange)
    - Region near bottom-left target (8): Contains color 1 (blue pattern)
    - Region near bottom-right target (1): Contains color 5 (gray)
  pairing: # Based on sorted spatial order of targets and corresponding derived source colors
    - target: 4 (yellow) -> source_color: 9 (maroon)
    - target: 3 (green) -> source_color: 7 (orange)
    - target: 8 (azure) -> source_color: 1 (blue pattern)
    - target: 1 (blue) -> source_color: 5 (gray)
  action:
    - Define subgrid from target bbox (e.g., input[0:8, 0:8] for yellow).
    - Replace noise color (2) pixels within subgrid with paired source color (9).
    - Repeat for other targets (green->7, azure->1, blue->5).
  assembly: Arrange modified target subgrids based on their relative positions (2x2 grid).
