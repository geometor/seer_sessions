task_description: Replace pixels of a target color in the source region with a tiled 3x3 pattern derived from a key region.

definitions:
  - object: grid
    type: 2D array of integers 0-9
  - object: key_region
    location: input_grid[0:5, 0:5]
    properties:
      - contains a pattern with two distinct non-white colors (C1, C2) on a white background.
  - object: source_region
    location: input_grid[:, 6:]
    properties:
      - contains the data to be transformed.
      - has the same dimensions as the output grid.
  - object: key_pattern_source
    location: key_region[1:4, 1:4] (central 3x3)
    properties:
      - defines the base structure for the replacement pattern.
      - primarily uses colors C1 and C2.
  - object: replacement_pattern
    type: 3x3 grid
    derivation: Generated from key_pattern_source by swapping C1 and C2.
  - variable: key_colors
    value: {C1, C2} # The two distinct non-white colors in the key_region/key_pattern_source.
  - variable: target_color
    value: T
    derivation: Determined by the specific pair of key_colors {C1, C2} based on predefined rules.
  - variable: separator
    location: input_grid[:, 5]
    value: magenta (6)
    role: separates key mechanism from source data.

rules:
  - rule_name: target_color_determination
    inputs: [key_colors {C1, C2}]
    outputs: [target_color T]
    logic: |
      Based on observed pairs in training examples:
      - If {C1, C2} = {4, 7}, then T = 3.
      - If {C1, C2} = {1, 2}, then T = 8.
      - If {C1, C2} = {3, 8}, then T = 5.
  - rule_name: replacement_pattern_generation
    inputs: [key_pattern_source, key_colors {C1, C2}]
    outputs: [replacement_pattern P]
    logic: |
      Create P (3x3) where P[r][c] = swap(key_pattern_source[r][c]).
      The swap function replaces C1 with C2 and C2 with C1. Other colors remain unchanged.
  - rule_name: grid_transformation
    inputs: [source_grid, target_color T, replacement_pattern P]
    outputs: [output_grid]
    logic: |
      Initialize output_grid as a copy of source_grid.
      For each pixel (r, c) in source_grid:
        If source_grid[r][c] == T:
          output_grid[r][c] = P[r % 3][c % 3] # Tile the pattern

relationships:
  - The key_region controls the transformation of the source_region.
  - The key_colors {C1, C2} determine both the target_color (T) and the transformation within the replacement_pattern.
  - The output_grid is derived from the source_grid by replacing only the pixels matching the target_color.