{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport collections\nimport copy\n\ndef find_connected_white_component(grid, start_r, start_c, visited):\n    \"\"\"\n    Finds a connected component of white pixels (0) starting from (start_r, start_c)\n    using Breadth-First Search (BFS) and identifies adjacent non-white, non-blue colors.\n\n    Args:\n        grid (list[list[int]]): The input grid.\n        start_r (int): Starting row index.\n        start_c (int): Starting column index.\n        visited (list[list[bool]]): Grid to keep track of visited pixels.\n\n    Returns:\n        tuple: A tuple containing:\n            - component_pixels (list[tuple[int, int]]): List of (row, col) tuples for pixels in the component.\n            - adjacent_colors (set[int]): Set of distinct non-white, non-blue colors adjacent to the component.\n            Return (None, None) if the starting pixel is not white or already visited.\n    \"\"\"\n    if grid[start_r][start_c] != 0 or visited[start_r][start_c]:\n        return None, None\n\n    height = len(grid)\n    width = len(grid[0])\n    component_pixels = []\n    adjacent_colors = set()\n    queue = collections.deque([(start_r, start_c)])\n    visited[start_r][start_c] = True\n\n    while queue:\n        r, c = queue.popleft()\n        component_pixels.append((r, c))\n\n        # Check 4 neighbors (up, down, left, right)\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n\n            # Check if neighbor is within grid boundaries\n            if 0 <= nr < height and 0 <= nc < width:\n                neighbor_color = grid[nr][nc]\n\n                # If neighbor is white and not visited, add to queue\n                if neighbor_color == 0 and not visited[nr][nc]:\n                    visited[nr][nc] = True\n                    queue.append((nr, nc))\n                # If neighbor is colored (not white and not blue), add its color to the set\n                elif neighbor_color > 1: # Colors 2 through 9\n                    adjacent_colors.add(neighbor_color)\n\n    return component_pixels, adjacent_colors\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid based on the following rule:\n    Find connected components of white pixels (color 0).\n    If a white component is adjacent to pixels of at least two *different* colors\n    (excluding white (0) and blue (1)), then change all pixels within that\n    white component to blue (color 1).\n    Otherwise, the white component remains unchanged.\n    All other non-white pixels remain unchanged.\n    Adjacency is defined by sharing an edge (4-connectivity).\n    \"\"\"\n\n    # Make a deep copy to avoid modifying the original input grid\n    output_grid = [row[:] for row in input_grid]\n    height = len(input_grid)\n    width = len(input_grid[0])\n    visited = [[False for _ in range(width)] for _ in range(height)]\n\n    # Iterate through each pixel of the grid\n    for r in range(height):\n        for c in range(width):\n            # If the pixel is white (0) and hasn't been visited yet\n            if input_grid[r][c] == 0 and not visited[r][c]:\n                # Find the connected white component and its adjacent colors\n                component_pixels, adjacent_colors = find_connected_white_component(input_grid, r, c, visited)\n\n                # If a valid component was found\n                if component_pixels is not None:\n                    # Check if the component is adjacent to at least two different non-white, non-blue colors\n                    if len(adjacent_colors) >= 2:\n                        # Change all pixels in this component to blue (1) in the output grid\n                        for pr, pc in component_pixels:\n                            output_grid[pr][pc] = 1\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 2414,
    "candidates_token_count": 974,
    "total_token_count": 3388,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 25.594231,
  "retries": 1
}