Task: Conditional Horizontal Alignment Based on Isolated Marker (Pattern Ex1/Ex3)

Input_Features:
  - Grid: 2D array of integers (colors).
  - Background_Color: The most frequent color in the grid.
  - Components: Contiguous blocks of non-background colors (8-way connectivity).
    - Isolated_Markers:
      - Definition: Single-pixel components with no non-background neighbors (adjacent or diagonal).
      - Properties: Position (row, col), Color.
      - Reference_Marker: The isolated marker with the minimum row, then minimum column. Defines `ref_col` (its column) and `ref_color` (its color).
    - Objects:
      - Definition: Components with size > 1 pixel, or single pixels that are not isolated.
      - Properties:
        - Pixels: Set of coordinates [(r, c)].
        - Center_Column (`center_col`): Calculated as round(mean(columns of Pixels)).
        - Contains_Ref_Color: Boolean indicating if any pixel in the object has the `ref_color`.
        - Local_Ref_Column (`local_ref_c`): If Contains_Ref_Color is true, the column index of the top-most, left-most pixel within the object having the `ref_color`. Otherwise, undefined.

Transformation_Rule (Applicable to Pattern Ex1/Ex3):
  - Identify_Reference: Find Reference_Marker, `ref_col`, `ref_color`. If no isolated markers, return input grid unchanged.
  - Initialize_Output: Create an output grid filled with Background_Color.
  - Place_Reference_Marker: Copy Reference_Marker to its original position `(r, c)` in the output grid (it does not move).
  - Move_Other_Isolated_Markers: For each non-reference Isolated_Marker, place its color at `(original_row, ref_col)` in the output grid, checking bounds.
  - Determine_Object_Shift: For each Object:
    - Calculate `center_col`.
    - Check `Contains_Ref_Color`.
    - If `Contains_Ref_Color`:
      - Calculate `local_ref_c`.
      - Calculate `dx_local = ref_col - local_ref_c`.
      - Calculate `dx_center = ref_col - center_col`.
      - If `abs(center_col - local_ref_c) <= 1`:
        - Set `dx = dx_local` (Use Local Ref Rule).
      - Else:
        - Set `dx = dx_center` (Use Center Rule - Local Ref too far).
    - Else (Object does not contain `ref_color`):
      - Calculate `dx_center = ref_col - center_col`.
      - Set `dx = dx_center` (Use Center Rule).
  - Apply_Object_Shift: For each pixel `(r, c)` in the Object, place its original color in the output grid at `(r, c + dx)`, checking grid boundaries. Handle overwrites (last write wins).
  - Return: Final output grid.

Excluded_Pattern (Example 2):
  - Example 2 demonstrates a different transformation pattern not covered by the rule above.
  - Features of Example 2 include: multiple marker colors, vertical movement, significant object restructuring, and movement logic not based solely on alignment with the primary reference marker column. A separate analysis would be required for this pattern.