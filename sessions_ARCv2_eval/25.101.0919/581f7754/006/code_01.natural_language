# Natural Language Program (Pattern Observed in Examples 1 & 3)

1.  Identify the background color, which is the most common color in the input grid.
2.  Locate all 'isolated markers'. An isolated marker is a single pixel of a non-background color that has no non-background neighbors (adjacent or diagonal).
3.  If no isolated markers are found, the transformation is complete; return the original input grid.
4.  Select the 'reference marker' from the isolated markers. This is the marker with the smallest row index. If there are multiple markers in the same lowest row, select the one with the smallest column index among them. Note the reference marker's column (`ref_col`) and its color (`ref_color`).
5.  Create a new output grid, identical in size to the input grid, and fill it completely with the background color.
6.  Place the reference marker onto the output grid at its original input coordinates `(r, c)`. The reference marker itself does not change position relative to the grid, only acting as a reference point.
7.  For any *other* isolated markers (those that are not the reference marker), place their color onto the output grid. Each marker keeps its original row index but is moved horizontally to the reference column `ref_col`. Ensure the target position `(row, ref_col)` is within the grid boundaries.
8.  Identify all 'objects'. Objects are connected groups (including diagonals) of two or more non-background pixels, or single non-background pixels that were *not* identified as isolated markers.
9.  For each object, determine its horizontal shift `dx`:
    a. Calculate the object's geometric center column (`center_col`) by averaging the column indices of all its pixels and rounding to the nearest integer.
    b. Check if any pixel within the object has the same color as the reference marker (`ref_color`).
    c. **If the object contains the `ref_color`**:
        i.  Find the specific pixel within the object that has the `ref_color` and has the smallest row index (and smallest column index in case of a tie). Record this pixel's column as `local_ref_c`.
        ii. Compare the geometric center column (`center_col`) to this local reference column (`local_ref_c`). If the absolute difference `abs(center_col - local_ref_c)` is 1 or 0, calculate the shift as `dx = ref_col - local_ref_c`.
        iii. Otherwise (if the local reference pixel is further than 1 column away from the geometric center), calculate the shift as `dx = ref_col - center_col`.
    d. **If the object does not contain the `ref_color`**:
        Calculate the shift as `dx = ref_col - center_col`.
10. Apply the calculated shift `dx` to the object: For every pixel `(r, c)` that belongs to the object in the input grid, place its original color into the output grid at the new coordinates `(r, c + dx)`. Only place pixels if the new coordinates `(r, c + dx)` are within the grid boundaries. If multiple pixels are shifted to the same output coordinate, the one processed last will determine the final color.
11. Return the completed output grid.

*(Disclaimer: This program describes the transformation logic observed in Examples 1 and 3. It does not apply to Example 2, which follows a distinct and more complex set of rules involving vertical movement and different marker interactions.)*