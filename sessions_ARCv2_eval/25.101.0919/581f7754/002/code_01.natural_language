# Natural Language Program (Based on Ex1 and Ex3)

1.  Determine the background color (the most common color in the input grid).
2.  Find all single pixels that are strictly isolated (i.e., have no non-background pixels adjacent to them horizontally, vertically, or diagonally). These are the 'markers'.
3.  If no isolated markers were found, return the input grid unchanged.
4.  Identify the 'reference marker': among all isolated markers, choose the one with the smallest row index. If there's a tie, choose the one with the smallest column index among those tied. Record its column index as `ref_col`.
5.  Create a new output grid of the same size as the input, filled entirely with the background color.
6.  Place the reference marker pixel at its original coordinates in the output grid.
7.  For every *other* isolated marker pixel found in step 2, place its color in the output grid at the same row it had in the input, but at column `ref_col`.
8.  Find all 'objects': these are the connected components of non-background pixels that have more than one pixel, OR single non-background pixels that were *not* strictly isolated.
9.  For each object:
    a. Calculate the object's center column (`center_col`) by taking the mean of the column indices of all pixels belonging to the object and rounding to the nearest integer.
    b. Calculate the horizontal shift amount `dx = ref_col - center_col`.
    c. For each pixel `(r, c)` belonging to this object in the input grid, place its original color into the output grid at position `(r, c + dx)`. Ensure the new column `c + dx` is within the grid boundaries; ignore pixels that would move outside. If multiple pixels map to the same output cell, the last one processed overwrites previous ones.
10. Return the completed output grid.

*(Note: This procedure does not account for the transformations seen in Example 2.)*