task_elements:
  - item: input_grid
    properties:
      - composed_of: repeating_blocks separated by lines
      - dimensions: variable height and width
      - colors: variable set
  - item: output_grid
    properties:
      - composed_of: repeating_blocks separated by lines
      - dimensions: height matches input, width is fixed based on block width
      - structure: single column of blocks
      - colors: subset of input colors (separator + pattern colors)
  - item: blocks
    properties:
      - arrangement: grid (Rows x Columns) in input, single column (Rows x 1) in output
      - size: constant H x W within a task (e.g., 5x5)
      - structure: contains an internal_pattern
      - identification: separated by separator_lines
  - item: separator_lines
    properties:
      - thickness: 1 pixel
      - color: consistent within a task (color of input_grid[0][0])
      - role: define block boundaries horizontally and vertically
      - location: row 0, H+1, 2(H+1), ... and col 0, W+1, 2(W+1), ...
  - item: internal_pattern
    properties:
      - size: H x W (derived from grid structure)
      - location: resides within the bounds defined by separator_lines
      - variability: most patterns are identical (common pattern), some are unique (occur once in the input grid)
      - frequency: count of occurrences for each distinct pattern

actions:
  - action: identify_grid_parameters
    inputs: input_grid
    outputs: separator_color, block_height (H), block_width (W), block_rows (R), block_columns (C)
    steps:
      - Get separator_color from input_grid[0][0].
      - Find H: Search for the first row index `r > 0` where all pixels equal separator_color. H = r - 1. (Handle case with no full separator row).
      - Find W: Search for the first column index `c > 0` where all pixels equal separator_color. W = c - 1. (Handle case with no full separator column).
      - Calculate R = (input_height - 1) / (H + 1).
      - Calculate C = (input_width - 1) / (W + 1).
      - Validate parameters and dimension consistency.
  - action: extract_patterns
    inputs: input_grid, H, W, R, C
    outputs: list_of_patterns_with_positions
    steps:
      - Iterate through block grid indices (r from 0 to R-1, c from 0 to C-1).
      - For each block (r, c), extract the HxW subgrid starting at grid position (r*(H+1)+1, c*(W+1)+1).
      - Store each pattern along with its original block position (r, c).
  - action: find_target_pattern
    inputs: list_of_patterns_with_positions
    outputs: selected_unique_pattern
    steps:
      - Count the occurrences of each distinct pattern.
      - Identify patterns with a count of 1 (unique patterns).
      - Filter the input list to keep only unique patterns with their positions.
      - Sort the unique patterns based on position: first by row index (r), then by column index (c).
      - Select the pattern from the first element of the sorted list.
      - If no unique patterns exist, raise an error or apply a defined fallback (e.g., return the top-leftmost pattern overall - though examples suggest unique patterns are always present).
  - action: construct_output
    inputs: selected_unique_pattern, R, H, W, separator_color
    outputs: output_grid
    steps:
      - Calculate output dimensions: height = R*H + (R+1), width = W+2.
      - Create an output grid of these dimensions, initialized with the separator_color.
      - For each block row `r` from 0 to R-1:
        - Calculate pattern top-left corner in output: `row_start = r*(H+1) + 1`, `col_start = 1`.
        - Copy the `selected_unique_pattern` into the output grid at `(row_start, col_start)`.

relationships:
  - The output grid's structure (number of block rows R, block size HxW, separator color) is directly derived from the input grid.
  - The pattern used in the output grid is one of the patterns present in the input grid.
  - The selected pattern is unique (appears only once) in the input grid.
  - If multiple unique patterns exist, the one chosen corresponds to the block that appears earliest in a top-to-bottom, left-to-right scan of the input blocks.
  - The output grid always has exactly one column of blocks, regardless of the number of columns in the input.
