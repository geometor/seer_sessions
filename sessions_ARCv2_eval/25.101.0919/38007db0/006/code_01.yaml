task_elements:
  - item: input_grid
    properties:
      - composed_of: grid of blocks separated by lines
      - dimensions: variable height (R blocks) and width (C blocks)
  - item: output_grid
    properties:
      - composed_of: grid of blocks separated by lines
      - dimensions: height matches input (R blocks), width fixed (1 block)
      - content: repetitions of a single selected pattern from the input
  - item: blocks
    properties:
      - arrangement: RxC grid in input, Rx1 grid in output
      - size: constant H x W within a task
      - structure: contains an internal_pattern
      - identification: separated by separator_lines
  - item: separator_lines
    properties:
      - thickness: 1 pixel
      - color: consistent within a task (input_grid[0][0])
      - role: define block boundaries
  - item: internal_pattern
    properties:
      - size: H x W
      - location: within block boundaries
      - frequency: count of occurrences of each distinct pattern in the input grid
      - uniqueness: count == 1
      - position: row and column index (r, c) of the block containing the pattern

actions:
  - action: analyze_grid_structure
    inputs: input_grid (list of lists)
    outputs: separator_color (int), block_height (H), block_width (W), block_rows (R), block_columns (C)
    description: Determines the separator color, dimensions of blocks, and the number of blocks horizontally and vertically by analyzing separator lines.
  - action: extract_patterns_and_details
    inputs: input_grid (numpy array), H, W, R, C
    outputs: list of pattern details (dicts [{'pattern', 'count', 'positions', 'first_pos'}])
    description: Extracts each HxW pattern, counts frequency of distinct patterns, lists all positions, and notes the first (top-leftmost) position.
  - action: select_target_pattern
    inputs: list of pattern details
    outputs: target_pattern (tuple of tuples)
    logic:
      - Filter for patterns with count == 1 (unique patterns).
      - If unique patterns exist:
        - Sort them by their 'first_pos' (top-leftmost).
        - Return the 'pattern' of the first in the sorted list.
      - Else (no unique patterns):
        - Find the maximum count among all patterns.
        - Filter for patterns with this maximum count (most common).
        - Sort them by their 'first_pos'.
        - Return the 'pattern' of the first in the sorted list.
    description: Selects the pattern to be used in the output based on uniqueness and position priority.
  - action: construct_output_grid
    inputs: target_pattern, R, H, W, separator_color
    outputs: output_grid (list of lists)
    steps:
      - Calculate output dimensions (R blocks high, 1 block wide).
      - Initialize grid with separator color.
      - Place target_pattern into each block location in the single column.
    description: Creates the final output grid by repeating the selected pattern.

relationships:
  - Output grid dimensions (R, H, W, separator color) are derived from the input grid.
  - Output grid content consists of the target_pattern repeated R times vertically.
  - The target_pattern is selected from the input patterns based on frequency and position.
  - Priority is given to unique patterns (count=1).
  - Among unique patterns, the one with the top-leftmost position ('first_pos') is chosen.
  - If no unique patterns exist, the most common pattern is chosen.
  - Among equally common patterns, the one with the top-leftmost position ('first_pos') is chosen as a tie-breaker.
