elements:
  - object: grid
    properties:
      - height: H (variable)
      - width: W (variable)
      - pixels: 2D array of colors (0-9)
  - object: border
    properties:
      - type: inner (segment delimiter)
      - color: Red (2)
      - location: column 1 and column W-2 within specific rows ('pattern rows')
  - object: row_segment
    properties:
      - source_row_index: r (index of a pattern row)
      - start_column: 2
      - end_column: W-3
      - content: sequence of pixels from input_grid[r][2:W-2]
  - object: pattern_unit
    properties:
      - colors: ordered list of pixel colors
      - length: L (1 <= L <= MAX_PATTERN_SEARCH_LENGTH)
      - derivation: Determined from the input row_segment based on best repeating fit within length constraints.

relationships:
  - Grid contains potential pattern rows.
  - Inner Borders (Red=2) define the horizontal boundaries of Row Segments within pattern rows.
  - Each input Row Segment determines a single best Pattern Unit.
  - The Pattern Unit is identified by finding the sub-segment (of length L <= MAX_PATTERN_SEARCH_LENGTH) that maximizes matches when repeated across the entire input Row Segment, with shortest length L used as a tie-breaker.
  - The determined Pattern Unit is used to generate the corrected pixel sequence for the corresponding segment in the output grid.

actions:
  - initialize_output: Create a deep copy of the input grid.
  - iterate_rows: Process each row 'r' from 0 to H-1.
  - identify_pattern_row: Check if input_grid[r][1] == PATTERN_MARKER_COLOR and input_grid[r][W-2] == PATTERN_MARKER_COLOR.
  - extract_segment: If it's a pattern row, get the segment = input_grid[r][2 : W-2].
  - determine_best_pattern_unit:
      - For the extracted segment:
          - Set maximum search length: `max_L = min(MAX_PATTERN_SEARCH_LENGTH, len(segment))`.
          - Iterate through possible lengths `L` from 1 to `max_L`.
          - For each `L`, iterate through all subsegments of length `L` starting at index `i` (`segment[i:i+L]`) as candidate patterns.
          - Score each candidate pattern by counting how many positions in the *entire* segment match the pattern if it were repeated (`segment[j] == candidate[j % L]`).
          - Identify the maximum score achieved by any candidate pattern within the length limit `max_L`.
          - Select the pattern(s) that achieved the maximum score.
          - Choose the pattern with the shortest length `L` as the `best_pattern_unit`.
  - apply_correction:
      - If a `best_pattern_unit` is found:
          - Iterate through columns 'c' from 2 to W-3 for the current row 'r'.
          - Calculate the index within the pattern unit: `pattern_index = (c - 2) % length(best_pattern_unit)`.
          - Determine the expected color `E = best_pattern_unit[pattern_index]`.
          - Update the output grid: `output_grid[r][c] = E`.
  - return_output: Return the modified output grid.

constants:
  - PATTERN_MARKER_COLOR: 2 # Red
  - MAX_PATTERN_SEARCH_LENGTH: 6 # Reduced from 8 to enforce simpler patterns