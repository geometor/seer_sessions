elements:
  - item: grid
    properties:
      - 2D array of integers 0-9 (colors)
      - height and width vary
  - item: divider
    properties:
      - vertical line
      - single column
      - color: red (2)
      - located at column 'div_col'
      - separates grid into left (columns < div_col) and right (columns > div_col) sections
  - item: background
    properties:
      - color: white (0)
  - item: segments
    properties:
      - horizontal blocks of contiguous non-white pixels
      - located in the left section
  - item: row_context
    properties:
      - derived per row from the left section
      - C_all: set of unique non-white colors
      - C_adj: color of the rightmost non-white pixel
      - L: length of the contiguous block of C_adj ending at the rightmost position
      - c_o: the single other non-white color, if exactly one exists besides C_adj
  - item: pattern
    properties:
      - sequence of colors
      - fills the right section of the output grid (columns > div_col)
      - generated per row based on 'row_context'
      - repeats horizontally

relationships:
  - The 'divider' defines the left/right boundary.
  - The 'pattern' in a row on the right side is derived from the 'row_context' of the same row.
  - Pattern generation depends on the number of unique colors (len(C_all)), the length L, and specific color values (C_adj, c_o).

actions:
  - identify: the column index 'div_col' of the red 'divider'.
  - analyze: for each row 'r', the left section (input[r, 0:div_col]) to determine 'row_context' (C_all, C_adj, L, c_o).
  - generate: a repeating base 'pattern' P based on 'row_context'.
    - rule_0 (empty left side): P is effectively empty (right side remains white).
    - rule_1 (single color: len(C_all) == 1):
        - If L=1: P = [C_adj]
        - If L>1: P = [C_adj] + [0] * (L-1)
    - rule_2 (multi-color: len(C_all) > 1):
        - If L=1: P = [C_adj]
        - If L>1:
            - Construct base segment: P_seg = [C_adj, 0]
            - Construct base pattern: P_base = P_seg * (L-1) + [C_adj, c_o] (Length 2*L)
            - If L == 2 and c_o == 3: # Special case from train_2_row_8
                - P_mod = list(P_base)
                - P_mod[-1] = 0
                - P = P_base + P_mod (Length 4*L = 8)
            - Else: # General L>1 multi-color case (includes L=2, c_o=2 from train_2_row_4)
                - P = P_base[-L:] (Take the last L elements of P_base)
  - fill: the right section of the row 'r' (output[r, div_col+1:]) by cyclically repeating the generated 'pattern' P.
