{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms a grid by propagating non-zero values downwards within each column. \nIf a cell contains 0 (background) and a non-zero value (\"color\") exists above it \nin the same column (potentially separated by other 0s), the 0 cell in the output \ngrid takes the value of the most recently encountered non-zero value above it in \nthat column. This process occurs independently for each column. Original non-zero \nvalues remain in their positions.\n\"\"\"\n\nimport numpy as np\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies downward propagation of non-zero values in each column of the grid.\n\n    Args:\n        input_grid: A 2D NumPy array of integers representing the input grid.\n\n    Returns:\n        A 2D NumPy array of integers representing the transformed grid.\n    \"\"\"\n    # Ensure input is a NumPy array\n    if not isinstance(input_grid, np.ndarray):\n        input_grid = np.array(input_grid)\n\n    # Check for empty input grid\n    if input_grid.size == 0:\n        return np.array([]) # Return empty array if input is empty\n\n    # Get grid dimensions\n    num_rows, num_cols = input_grid.shape\n\n    # Initialize output_grid as a copy of the input grid\n    # We modify this grid based on the input grid's state\n    output_grid = input_grid.copy()\n\n    # Iterate through each column independently\n    for col_idx in range(num_cols):\n        # Keep track of the last non-zero color encountered in this column\n        last_color = 0\n        # Iterate through each row in the current column from top to bottom\n        for row_idx in range(num_rows):\n            # Get the value from the *original* input grid for decision making\n            current_input_value = input_grid[row_idx, col_idx]\n\n            # If the current cell in the input grid has a non-zero value (a color)\n            if current_input_value != 0:\n                # Update the last seen color for this column\n                last_color = current_input_value\n                # The output grid already has this value from the copy\n            # If the current cell in the input grid is zero (background)\n            # AND we have seen a non-zero color above it in this column\n            elif current_input_value == 0 and last_color != 0:\n                # Set the corresponding cell in the output grid to the last seen color\n                output_grid[row_idx, col_idx] = last_color\n            # If the current cell is 0 and last_color is also 0 (start of column or only 0s above)\n            # The output grid cell remains 0 (already set by copy)\n\n    # Return the modified grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 4664,
    "candidates_token_count": 940,
    "total_token_count": 5604,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 9.09224,
  "retries": 1
}