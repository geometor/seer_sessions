{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\n\n\"\"\"\nProcess the grid column by column. Within each column, iterate from top to bottom. Keep track of the most recently encountered non-zero value in that column. If a zero cell is encountered, replace it with the most recently seen non-zero value from above in the same column. If no non-zero value has been seen above a zero cell in the column, leave it as zero. Non-zero cells retain their original value.\n\"\"\"\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies a downward propagation transformation to each column independently.\n\n    Args:\n        input_grid: A list of lists representing the 2D input grid.\n\n    Returns:\n        A list of lists representing the transformed 2D output grid.\n    \"\"\"\n    # Initialize output_grid as a deep copy of the input to preserve original values\n    output_grid = copy.deepcopy(input_grid)\n    \n    # Get grid dimensions\n    if not input_grid:\n        return []\n    num_rows = len(input_grid)\n    if num_rows == 0 or not input_grid[0]:\n        return [[] for _ in range(num_rows)]\n    num_cols = len(input_grid[0])\n\n    # Perform transformations column by column\n    for j in range(num_cols):\n        # Keep track of the last non-zero value seen in the current column while scanning downwards\n        last_non_zero_value = 0 \n        \n        # Iterate through rows from top to bottom\n        for i in range(num_rows):\n            # Get the value from the *original* input grid to determine propagation\n            current_input_value = input_grid[i][j]\n            \n            if current_input_value != 0:\n                # If the current cell in the input is non-zero, update the last seen non-zero value.\n                # The output grid already has this correct value from the initial copy.\n                last_non_zero_value = current_input_value\n            else:\n                # If the current cell in the input is zero\n                # Check if we have encountered a non-zero value above it in this column\n                if last_non_zero_value != 0:\n                    # If yes, fill the corresponding cell in the output grid with that value\n                    output_grid[i][j] = last_non_zero_value\n                    \n    # Return the modified grid\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1326,
    "candidates_token_count": 2623,
    "total_token_count": 3949,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 22.845685,
  "retries": 1
}