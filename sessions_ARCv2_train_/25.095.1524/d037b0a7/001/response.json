{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport copy\n\n\"\"\"\nTransforms an input grid based on a vertical downward filling rule.\nNon-zero values in the input grid are copied to the output grid.\nZero values in the input grid are replaced in the output grid by the value \nof the nearest non-zero cell directly above them in the same column of the input grid. \nIf all cells above a zero cell in the input grid are also zero, the output cell remains zero.\n\"\"\"\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies a vertical downward fill transformation to the input grid.\n\n    Args:\n        input_grid: A list of lists representing the 2D input grid of integers.\n\n    Returns:\n        A list of lists representing the transformed 2D output grid.\n    \"\"\"\n    # Ensure input_grid is not empty to avoid index errors\n    if not input_grid or not input_grid[0]:\n        return []\n\n    rows = len(input_grid)\n    cols = len(input_grid[0])\n\n    # Initialize output_grid with zeros, same dimensions as input_grid\n    output_grid = [[0 for _ in range(cols)] for _ in range(rows)]\n\n    # Iterate through each column\n    for c in range(cols):\n        # Iterate through each row within the column\n        for r in range(rows):\n            # Get the value from the input grid\n            input_value = input_grid[r][c]\n\n            # If the input value is non-zero, copy it directly to the output\n            if input_value != 0:\n                output_grid[r][c] = input_value\n            # If the input value is zero, look upwards in the input grid\n            else:\n                # Start searching from the row directly above (r-1) up to row 0\n                found_value = 0 # Default to 0 if no non-zero is found above\n                for r_source in range(r - 1, -1, -1):\n                    # Check the value in the input grid above the current cell\n                    value_above = input_grid[r_source][c]\n                    # If a non-zero value is found\n                    if value_above != 0:\n                        # Assign this value to the output grid and stop searching upwards\n                        found_value = value_above\n                        break \n                # Assign the found value (or 0 if none was found) to the output cell\n                output_grid[r][c] = found_value\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1416,
    "candidates_token_count": 1925,
    "total_token_count": 3341,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 17.692739,
  "retries": 1
}