{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms an input grid by propagating the last seen non-zero value downwards within each column. \nZeros below a non-zero number in a column are replaced by that number until another non-zero number is encountered in that column.\n\"\"\"\n\nimport copy\n\ndef transform(input_grid: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Applies the downward propagation transformation to the input grid.\n\n    Args:\n        input_grid: A 2D list representing the input grid of integers.\n\n    Returns:\n        A 2D list representing the transformed grid.\n    \"\"\"\n    # Ensure the input is not empty\n    if not input_grid or not input_grid[0]:\n        return []\n\n    # Get grid dimensions\n    height = len(input_grid)\n    width = len(input_grid[0])\n\n    # Initialize output_grid as a deep copy of the input grid\n    # This ensures original non-zero values are preserved unless overwritten\n    output_grid = copy.deepcopy(input_grid)\n\n    # Iterate through each column\n    for c in range(width):\n        # Initialize the last non-zero value seen in this column\n        last_non_zero_value = 0\n\n        # Iterate through each row within the current column, from top to bottom\n        for r in range(height):\n            # Get the value from the original input grid for reference\n            input_value = input_grid[r][c]\n\n            # If the input value is non-zero, update the last seen non-zero value\n            if input_value != 0:\n                last_non_zero_value = input_value\n                # Ensure the output grid has this non-zero value (already true from copy, but explicit)\n                output_grid[r][c] = input_value\n            # If the input value is zero AND we have previously seen a non-zero value in this column\n            elif last_non_zero_value != 0:\n                # Update the corresponding cell in the output grid with the last non-zero value\n                output_grid[r][c] = last_non_zero_value\n            # If the input value is zero and no non-zero value has been seen yet in this column,\n            # the output remains zero (as initialized by the copy).\n\n    # Return the fully transformed grid\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1262,
    "candidates_token_count": 940,
    "total_token_count": 2202,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 8.388788,
  "retries": 1
}