{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom scipy.ndimage import label, generate_binary_structure\n\n\"\"\"\nTransforms the input grid based on the connectivity of Blue (1) pixels.\n\nThe transformation rule depends on whether all Blue (1) pixels in the input grid\nform a single contiguous object when considering only 4-way (horizontal and vertical)\nconnections.\n\n1. Identify all distinct groups (objects) of Blue pixels using 4-way connectivity.\n2. Count the number of these distinct Blue objects.\n3. Check the condition: Is the number of Blue objects exactly 1?\n\n4. If the condition is TRUE (exactly one 4-way connected Blue object):\n    - Change all White pixels (0) to Blue (1).\n    - Change all Blue pixels (1) to White (0).\n    - Keep Red pixels (2) and all other colors unchanged.\n5. If the condition is FALSE (more than one 4-way connected Blue object):\n    - Change all Red pixels (2) to White (0).\n    - Change all White pixels (0) to Blue (1).\n    - Keep Blue pixels (1) and all other colors unchanged.\n\"\"\"\n\ndef count_objects_4way(grid, color):\n    \"\"\"\n    Counts the number of distinct objects of a specific color using 4-way connectivity.\n\n    Args:\n        grid (np.array): The input grid.\n        color (int): The color value to find objects for.\n\n    Returns:\n        int: The number of distinct objects found.\n    \"\"\"\n    # Create a binary mask where True indicates the target color\n    mask = (grid == color)\n    # If no pixels of the target color exist, return 0 objects\n    if not np.any(mask):\n        return 0\n    # Define 4-connectivity structure (no diagonals)\n    structure = generate_binary_structure(2, 1) \n    # Label connected components in the mask\n    labeled_array, num_features = label(mask, structure=structure)\n    # Return the count of distinct objects found\n    return num_features\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the conditional color transformation based on the 4-way connectivity\n    of Blue pixels.\n\n    Args:\n        input_grid (list[list[int]]): A 2D list representing the input grid.\n\n    Returns:\n        list[list[int]]: A 2D list representing the transformed output grid.\n    \"\"\"\n    # Convert input list of lists to a NumPy array for efficient processing\n    input_np = np.array(input_grid, dtype=int)\n    \n    # --- Determine the condition ---\n    # Count the number of distinct Blue(1) objects using 4-way connectivity\n    num_blue_objects = count_objects_4way(input_np, 1) # Blue color = 1\n    \n    # Condition check: Is there exactly one Blue object?\n    is_single_blue_object = (num_blue_objects == 1)\n    \n    # --- Apply the transformation ---\n    # Initialize output grid as a copy of the input\n    output_grid = np.copy(input_np)\n    \n    if is_single_blue_object:\n        # Apply Rule B: White -> Blue, Blue -> White\n        # Find pixels that are White (0) in the input\n        white_pixels_mask = (input_np == 0)\n        # Find pixels that are Blue (1) in the input\n        blue_pixels_mask = (input_np == 1)\n        \n        # Change White pixels to Blue in the output grid\n        output_grid[white_pixels_mask] = 1 \n        # Change Blue pixels to White in the output grid\n        output_grid[blue_pixels_mask] = 0 \n        # Red and other colors remain unchanged (already copied)\n    else:\n        # Apply Rule A: Red -> White, White -> Blue\n        # Find pixels that are Red (2) in the input\n        red_pixels_mask = (input_np == 2)\n        # Find pixels that are White (0) in the input\n        white_pixels_mask = (input_np == 0)\n        \n        # Change Red pixels to White in the output grid\n        output_grid[red_pixels_mask] = 0\n        # Change White pixels to Blue in the output grid\n        output_grid[white_pixels_mask] = 1\n        # Blue and other colors remain unchanged (already copied)\n        \n    # Convert the final NumPy array back to a list of lists for the output format\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 26832,
    "candidates_token_count": 1048,
    "total_token_count": 27880,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 136.965425,
  "retries": 2
}