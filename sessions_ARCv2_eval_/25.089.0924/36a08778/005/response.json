{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransforms the input grid by filling connected areas of orange pixels (7) with magenta (6) \nif the area is connected (8-way adjacency) to a red pixel (2). Existing magenta pixels (6) \nact as impassable barriers, blocking connectivity. Original red pixels and original magenta \npixels remain unchanged.\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the conditional connected components fill transformation.\n\n    Args:\n        input_grid (np.array): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.array: A 2D numpy array representing the transformed output grid.\n    \"\"\"\n    # Define colors\n    orange = 7\n    red = 2\n    magenta = 6\n    \n    # Get grid dimensions\n    height, width = input_grid.shape\n    \n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n    \n    # Keep track of visited cells to avoid processing the same component multiple times\n    visited = np.zeros((height, width), dtype=bool)\n\n    # Iterate through each cell in the grid\n    for r in range(height):\n        for c in range(width):\n            # Start a search if we find an unvisited orange or red cell (potential component start)\n            # Also ensure the cell itself is not a magenta barrier\n            if not visited[r, c] and (input_grid[r, c] == orange or input_grid[r, c] == red):\n                \n                # Initialize structures for Breadth-First Search (BFS)\n                component_pixels = []  # Store coordinates of cells in the current component\n                found_source = False  # Flag to track if a red source is found in the component\n                queue = deque([(r, c)]) # Queue for BFS\n                \n                # Mark the starting cell as visited immediately\n                visited[r, c] = True\n\n                # Perform BFS to find the connected component\n                while queue:\n                    curr_r, curr_c = queue.popleft()\n                    \n                    # Add current cell to the component list\n                    component_pixels.append((curr_r, curr_c))\n                    \n                    # Check if the current cell is a red source\n                    if input_grid[curr_r, curr_c] == red:\n                        found_source = True\n                        \n                    # Explore 8-way neighbors (including diagonals)\n                    for dr in [-1, 0, 1]:\n                        for dc in [-1, 0, 1]:\n                            # Skip the cell itself\n                            if dr == 0 and dc == 0:\n                                continue \n                                \n                            nr, nc = curr_r + dr, curr_c + dc\n                            \n                            # Check neighbor validity:\n                            # 1. Within grid bounds?\n                            if 0 <= nr < height and 0 <= nc < width:\n                                # 2. Not visited yet?\n                                if not visited[nr, nc]:\n                                    # 3. Not a barrier (magenta)?\n                                    if input_grid[nr, nc] != magenta:\n                                        # 4. Part of the potential component (orange or red)? \n                                        #    (This is implicitly handled by checking it's not magenta,\n                                        #     as those are the only other possibilities besides orange/red\n                                        #     that we start the BFS from). We could explicitly check:\n                                        #     if input_grid[nr, nc] == orange or input_grid[nr, nc] == red:\n                                        # But simply checking it's not magenta is sufficient here.\n                                        \n                                        # Mark valid neighbor as visited and add to queue\n                                        visited[nr, nc] = True\n                                        queue.append((nr, nc))\n\n                # After exploring the entire component, check if a red source was found within it\n                if found_source:\n                    # If a source was found, change all orange cells *in this component* to magenta\n                    for comp_r, comp_c in component_pixels:\n                        # Check the original color in the input grid\n                        if input_grid[comp_r, comp_c] == orange:\n                            output_grid[comp_r, comp_c] = magenta\n                            \n    # Return the modified grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 18189,
    "candidates_token_count": 989,
    "total_token_count": 19178,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 16.019869,
  "retries": 1
}