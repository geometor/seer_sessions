task_description: Map colors found inside a specific white rectangular region to rows in an output grid, and determine the number/placement of pixels on that row by counting corresponding colored objects outside the white region.

definitions:
  - name: white_rectangle
    description: The largest contiguous rectangular area in the input grid composed solely of white (0) pixels.
    properties:
      - height: H
      - width: W
      - top_left_corner: (r0, c0)
  - name: marker_pixel
    description: A single non-white pixel located strictly inside the white_rectangle in the input grid.
    properties:
      - color: C
      - input_location: (r_in, c_in)
      - relative_row: r_rel = r_in - r0
  - name: external_object
    description: A contiguous group of pixels (including diagonals) of a specific color C located entirely outside the white_rectangle.
    properties:
      - color: C
  - name: output_grid
    description: The target grid generated by the transformation.
    properties:
      - height: H (same as white_rectangle)
      - width: W (same as white_rectangle)
      - background_color: white (0)

relationships_and_actions:
  - action: identify_white_rectangle
    actor: system
    input: input_grid
    output: white_rectangle (H, W, r0, c0)
  - action: initialize_output
    actor: system
    input: H, W
    output: output_grid (H x W, filled with white)
  - action: find_marker_pixels
    actor: system
    input: input_grid, white_rectangle
    output: list of marker_pixels [ (C1, r_rel1), (C2, r_rel2), ... ]
  - action: count_external_objects
    actor: system
    input: input_grid, white_rectangle, color C
    output: count N
  - action: place_pixels_in_output
    actor: system
    input: output_grid, marker_pixel (C, r_rel), external_object_count N
    process: |
      For k from 1 to N:
        Calculate target column c_out = 2*k - 1.
        If c_out < W (width of output_grid):
          Set output_grid[r_rel][c_out] = C.
    output: modified output_grid

workflow:
  - step: 1. identify_white_rectangle from input_grid.
  - step: 2. initialize_output grid based on white_rectangle dimensions (H, W).
  - step: 3. find_marker_pixels inside the white_rectangle.
  - step: 4. For each unique marker_pixel (C, r_rel):
      a. count_external_objects (N) of color C outside the white_rectangle.
      b. place_pixels_in_output grid at row r_rel using color C and count N, clipping columns if they exceed W-1.
  - step: 5. Return the final output_grid.
