{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentify the single connected component of gray (8) pixels that is adjacent \n(horizontally or vertically) to the single magenta (6) pixel. Blue (1) pixels act \nas barriers. Change all gray (8) pixels that do *not* belong to this \nmagenta-adjacent component to orange (7). Leave the magenta pixel, blue pixels, \nand the gray pixels belonging to the magenta-adjacent component unchanged.\n\"\"\"\n\ndef find_pixel(grid, color):\n    \"\"\"Finds the first occurrence of a pixel with the specified color.\"\"\"\n    rows, cols = grid.shape\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] == color:\n                return (r, c)\n    return None # Should not happen for magenta (6) in this task\n\ndef find_magenta_adjacent_gray_component(grid, start_pos):\n    \"\"\"\n    Performs a BFS starting from gray neighbors of start_pos to find\n    all connected gray pixels.\n    \"\"\"\n    rows, cols = grid.shape\n    component_m_pixels = set() # Stores (r, c) of gray pixels in the component\n    queue = deque()\n    \n    start_r, start_c = start_pos\n\n    # Find initial gray neighbors of the magenta start point and add them to the queue and set\n    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n        nr, nc = start_r + dr, start_c + dc\n        # Check bounds and if the neighbor is gray (8)\n        if 0 <= nr < rows and 0 <= nc < cols and grid[nr, nc] == 8:\n            # Check if not already added (unlikely at this stage but good practice)\n            if (nr, nc) not in component_m_pixels:\n                component_m_pixels.add((nr, nc))\n                queue.append((nr, nc))\n\n    # Perform BFS from the initial neighbors\n    while queue:\n        r, c = queue.popleft()\n\n        # Explore neighbors of the current gray pixel\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n\n            # Check bounds\n            if 0 <= nr < rows and 0 <= nc < cols:\n                # Check if the neighbor is gray (8) and not already visited/added\n                if grid[nr, nc] == 8 and (nr, nc) not in component_m_pixels:\n                    component_m_pixels.add((nr, nc))\n                    queue.append((nr, nc))\n                    \n    return component_m_pixels\n\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Transforms the input grid according to the specified rules.\n    \n    Args:\n        input_grid: A numpy array representing the input grid.\n\n    Returns:\n        A numpy array representing the transformed output grid.\n    \"\"\"\n    # Initialize output_grid as a copy of the input\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n\n    # 1. Locate the single magenta (6) pixel\n    magenta_pos = find_pixel(input_grid, 6)\n    if magenta_pos is None:\n        # Should not happen based on examples, but return original if it does\n        return output_grid \n\n    # 2. Identify the connected component of gray (8) pixels adjacent to magenta\n    component_m_pixels = find_magenta_adjacent_gray_component(input_grid, magenta_pos)\n\n    # 3. Iterate through the grid and change non-component gray pixels to orange\n    for r in range(rows):\n        for c in range(cols):\n            # Check if the current pixel is gray (8)\n            if input_grid[r, c] == 8:\n                # Check if this gray pixel is NOT part of the magenta-adjacent component\n                if (r, c) not in component_m_pixels:\n                    # Change it to orange (7) in the output grid\n                    output_grid[r, c] = 7\n            # All other pixels (blue, magenta, gray in component M) remain unchanged implicitly\n            # because output_grid started as a copy.\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 12807,
    "candidates_token_count": 1023,
    "total_token_count": 13830,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.091871,
  "retries": 1
}