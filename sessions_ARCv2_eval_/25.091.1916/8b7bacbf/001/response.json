{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nThis transformation identifies a unique color (excluding white) in the input grid, \nwhich serves as a 'fill color'. It then locates all 2x2 squares composed entirely of \nwhite pixels (0). For each such white square, it examines the 8 neighboring pixels. \nIf 3 or more of these neighbors belong to a defined set of 'frame colors' (all colors \npresent except white, blue, and the fill color), the 2x2 white square in the output \ngrid is filled with the unique 'fill color'. All other pixels retain their \noriginal color.\n\"\"\"\n\ndef find_unique_color(grid):\n    \"\"\"Finds the color that appears exactly once in the grid (excluding 0).\"\"\"\n    counts = Counter()\n    for r in range(grid.shape[0]):\n        for c in range(grid.shape[1]):\n            if grid[r, c] != 0: # Exclude white\n                counts[grid[r, c]] += 1\n                \n    unique_color = None\n    for color, count in counts.items():\n        if count == 1:\n            unique_color = color\n            break # Assume only one unique color based on examples\n            \n    return unique_color\n\ndef get_frame_colors(grid, fill_color):\n    \"\"\"Determines the set of frame colors.\"\"\"\n    present_colors = set(np.unique(grid))\n    # Frame colors are all present colors except white(0), blue(1), and the fill_color\n    frame_colors = present_colors - {0, 1, fill_color}\n    return frame_colors\n\ndef transform(input_grid):\n    \"\"\"\n    Fills 2x2 white squares with a unique color if they are bordered by at least \n    three 'frame color' pixels.\n    \"\"\"\n    input_np = np.array(input_grid, dtype=int)\n    output_np = np.copy(input_np)\n    height, width = input_np.shape\n\n    # 1. Find the unique fill color\n    fill_color = find_unique_color(input_np)\n    if fill_color is None:\n        # If no unique color is found (as defined by the rule), return the input unchanged.\n        # This might need adjustment based on task constraints if this case is possible.\n        return input_grid\n\n    # 2. Define the frame colors\n    frame_colors = get_frame_colors(input_np, fill_color)\n\n    # 3. Iterate through the grid to find potential 2x2 white squares\n    for r in range(height - 1):\n        for c in range(width - 1):\n            # 4. Check if the 2x2 square is all white\n            square = input_np[r:r+2, c:c+2]\n            if np.all(square == 0):\n                \n                # 5. Examine the 8 neighbors\n                neighbor_count = 0\n                for dr in range(-1, 3): # Relative row index from -1 to 2\n                    for dc in range(-1, 3): # Relative col index from -1 to 2\n                        # Skip the square itself\n                        if 0 <= dr <= 1 and 0 <= dc <= 1:\n                            continue\n\n                        # Calculate absolute neighbor coordinates\n                        nr, nc = r + dr, c + dc\n\n                        # Check boundaries\n                        if 0 <= nr < height and 0 <= nc < width:\n                            # 6. Count neighbors with frame colors\n                            if input_np[nr, nc] in frame_colors:\n                                neighbor_count += 1\n                \n                # 7. If condition met, fill the square in the output grid\n                if neighbor_count >= 3:\n                    output_np[r:r+2, c:c+2] = fill_color\n\n    # Convert back to list of lists for the expected output format\n    return output_np.tolist()\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6509,
    "candidates_token_count": 915,
    "total_token_count": 7424,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.028329,
  "retries": 1
}