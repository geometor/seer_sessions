{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIterate through each pixel in the input grid, excluding the border pixels.\nFor each internal pixel, examine its 8 neighbors (Moore neighborhood).\nIf all 8 neighbors have the exact same non-white color, then change the color of the central pixel to white (0) in the output grid.\nAll other pixels, including the border pixels and internal pixels whose neighbors don't meet the condition, retain their original color from the input grid.\n\"\"\"\n\nimport numpy as np\n\ndef _check_neighbors(grid, r, c):\n    \"\"\"\n    Checks if all 8 neighbors of the pixel at (r, c) are the same non-white color.\n\n    Args:\n        grid (np.array): The input grid.\n        r (int): Row index of the central pixel.\n        c (int): Column index of the central pixel.\n\n    Returns:\n        bool: True if all 8 neighbors are the same non-white color, False otherwise.\n    \"\"\"\n    # Get the color of the top-left neighbor\n    neighbor_color = grid[r - 1, c - 1]\n\n    # If the neighbor color is white (0), it cannot form the required frame\n    if neighbor_color == 0:\n        return False\n\n    # Define the relative coordinates of the 8 neighbors\n    neighbor_coords = [\n        (-1, -1), (-1, 0), (-1, 1),\n        (0, -1),           (0, 1),\n        (1, -1), (1, 0), (1, 1)\n    ]\n\n    # Check if all neighbors have the same color as neighbor_color\n    for dr, dc in neighbor_coords:\n        if grid[r + dr, c + dc] != neighbor_color:\n            return False\n\n    # If all checks pass, the neighbors form a uniform non-white frame\n    return True\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by changing the center pixel to white if its 8 neighbors\n    form a uniform non-white frame.\n\n    Args:\n        input_grid (list of lists or np.array): The input grid.\n\n    Returns:\n        list of lists: The transformed output grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n\n    # Initialize output_grid as a copy of the input grid\n    output_grid = np.copy(input_np)\n\n    # Get grid dimensions\n    height, width = input_np.shape\n\n    # Cannot form a frame if grid is smaller than 3x3\n    if height < 3 or width < 3:\n        return output_grid.tolist()\n\n    # Iterate through the internal pixels of the grid (excluding borders)\n    # r goes from 1 to height-2, c goes from 1 to width-2\n    for r in range(1, height - 1):\n        for c in range(1, width - 1):\n            # Check if the 8 neighbors of the current pixel (r, c)\n            # form a uniform non-white frame\n            if _check_neighbors(input_np, r, c):\n                # If they do, set the central pixel (r, c) in the output grid to white (0)\n                output_grid[r, c] = 0\n\n    # Return the modified output grid as a list of lists\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 10272,
    "candidates_token_count": 786,
    "total_token_count": 11058,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 89.199175
}