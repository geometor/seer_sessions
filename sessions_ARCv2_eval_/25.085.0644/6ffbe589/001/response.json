{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentifies the largest connected component of non-white pixels (value > 0) in the input grid, considering 8-way connectivity (including diagonals). \nThen, it crops the input grid to the minimal bounding box containing this largest component.\n\"\"\"\n\ndef find_connected_components(grid_np):\n    \"\"\"\n    Finds all connected components of non-white pixels in the grid.\n\n    Args:\n        grid_np (np.array): The input grid as a numpy array.\n\n    Returns:\n        list: A list of components, where each component is a list of (row, col) tuples.\n    \"\"\"\n    rows, cols = grid_np.shape\n    visited = set()\n    components = []\n\n    for r in range(rows):\n        for c in range(cols):\n            # If pixel is non-white and not visited yet, start BFS\n            if grid_np[r, c] != 0 and (r, c) not in visited:\n                component = []\n                q = deque([(r, c)])\n                visited.add((r, c))\n\n                while q:\n                    row, col = q.popleft()\n                    component.append((row, col))\n\n                    # Check 8 neighbors (horizontal, vertical, diagonal)\n                    for dr in [-1, 0, 1]:\n                        for dc in [-1, 0, 1]:\n                            if dr == 0 and dc == 0:\n                                continue  # Skip self\n\n                            nr, nc = row + dr, col + dc\n\n                            # Check boundaries\n                            if 0 <= nr < rows and 0 <= nc < cols:\n                                # Check if neighbor is non-white and not visited\n                                if grid_np[nr, nc] != 0 and (nr, nc) not in visited:\n                                    visited.add((nr, nc))\n                                    q.append((nr, nc))\n                \n                components.append(component)\n                \n    return components\n\ndef transform(input_grid):\n    \"\"\"\n    Identifies the largest connected component of non-white pixels and crops the grid to its bounding box.\n\n    Args:\n        input_grid (list[list[int]]): The input grid.\n\n    Returns:\n        list[list[int]]: The cropped output grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_grid_np = np.array(input_grid, dtype=int)\n    \n    # Find all connected components of non-white pixels\n    components = find_connected_components(input_grid_np)\n\n    # Handle case where there are no non-white pixels\n    if not components:\n        # Return a minimal representation, e.g., a 1x1 white grid, or perhaps the original grid.\n        # Let's return a 1x1 white grid based on typical ARC behavior for \"empty\" outputs.\n        return [[0]] \n\n    # Find the largest component (by number of pixels)\n    largest_component = max(components, key=len)\n\n    # If the largest component is empty (shouldn't happen if components is not empty, but good practice)\n    if not largest_component:\n         return [[0]]\n\n    # Calculate the bounding box of the largest component\n    rows = [r for r, c in largest_component]\n    cols = [c for r, c in largest_component]\n    \n    min_r, max_r = min(rows), max(rows)\n    min_c, max_c = min(cols), max(cols)\n\n    # Crop the original grid using the bounding box coordinates\n    # Slicing is [start_row:end_row+1, start_col:end_col+1]\n    output_grid_np = input_grid_np[min_r : max_r + 1, min_c : max_c + 1]\n\n    # Convert the resulting numpy array back to a list of lists\n    output_grid = output_grid_np.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5151,
    "candidates_token_count": 923,
    "total_token_count": 6074,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.170791
}