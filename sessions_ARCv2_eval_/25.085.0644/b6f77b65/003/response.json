{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nTransform the input grid based on the color C of the pixel at (0,0).\nDetermine a downward shift amount S based on C:\n- If C is Maroon (9), S = 0.\n- If C is Magenta (6), S = 2.\n- Otherwise, S = 3.\n\nIf S = 0, return a copy of the input grid.\n\nIf S > 0:\n1. Create a new output grid filled with white (0).\n2. Copy the indicator pixel C to output grid at (0,0).\n3. Find all distinct monochromatic objects (connected components of the same non-white color using 4-way adjacency), ignoring the pixel at (0,0).\n4. For each monochromatic object found:\n   - If the object's color is NOT equal to C, shift all its pixels down by S rows in the output grid. Discard pixels shifted off the grid.\n   - If the object's color IS equal to C, discard the object.\n5. Return the resulting output grid.\n\"\"\"\n\nimport numpy as np\nfrom collections import deque\n\ndef find_mono_objects(grid: np.ndarray) -> list:\n    \"\"\"\n    Finds all connected monochromatic objects (pixels of the same color)\n    in the grid, ignoring the pixel at (0,0) and white pixels (0).\n    Uses 4-way adjacency.\n\n    Args:\n        grid: The input numpy array representing the grid.\n\n    Returns:\n        A list of objects, where each object is a dictionary containing:\n        - 'pixels': a list of (row, col) tuples for the object.\n        - 'color': the integer color of the object.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n    objects = []\n\n    # Mark (0,0) as visited to ignore the indicator pixel location,\n    # regardless of its color.\n    if rows > 0 and cols > 0:\n        visited[0, 0] = True\n\n    for r in range(rows):\n        for c in range(cols):\n            color = grid[r, c]\n            # Find start of a new object: non-white, not visited\n            if color != 0 and not visited[r, c]:\n                current_object_pixels = []\n                q = deque([(r, c)])\n                visited[r, c] = True\n                object_color = color # All pixels in this object must have this color\n\n                while q:\n                    row, col = q.popleft()\n                    current_object_pixels.append((row, col)) # Store only coords\n\n                    # Check neighbors (4-connectivity: up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        # Check bounds, SAME color, and not visited\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] == object_color and not visited[nr, nc]:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n\n                objects.append({\n                    'pixels': current_object_pixels, # List of (r, c) tuples\n                    'color': object_color\n                })\n    return objects\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the transformation rule to the input grid.\n    \"\"\"\n    rows, cols = input_grid.shape\n\n    # 1. Examine the color C of the pixel at (0, 0)\n    indicator_color = input_grid[0, 0]\n\n    # 2. Determine the downward shift amount S\n    if indicator_color == 9:  # Maroon\n        shift_amount = 0\n    elif indicator_color == 6: # Magenta\n        shift_amount = 2\n    else: # Any other color\n        shift_amount = 3\n\n    # 3. If S is 0, return a copy of the input grid\n    if shift_amount == 0:\n        return input_grid.copy()\n\n    # 4. If S > 0:\n    #    a. Create a new output grid filled with white (0)\n    output_grid = np.zeros_like(input_grid)\n\n    #    b. Copy the indicator pixel C to the output grid\n    output_grid[0, 0] = indicator_color\n\n    #    c. Identify all distinct monochromatic objects (ignoring (0,0))\n    mono_objects = find_mono_objects(input_grid)\n\n    #    d. Process each monochromatic object\n    for obj in mono_objects:\n        obj_color = obj['color']\n        obj_pixels = obj['pixels']\n\n        # ii. If the object's color is NOT the indicator color C\n        if obj_color != indicator_color:\n            # Shift its pixels downwards\n            for r, c in obj_pixels:\n                # Calculate the new row\n                r_new = r + shift_amount\n                # If the new row is within grid height\n                if r_new < rows:\n                    # Set the pixel in the output grid\n                    output_grid[r_new, c] = obj_color\n        # iii. If the object's color IS the indicator color C, do nothing (object removed)\n\n    # e. Return the resulting output grid\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 16291,
    "candidates_token_count": 1257,
    "total_token_count": 17548,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.448206
}