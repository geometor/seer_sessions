{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nTransform the input grid based on the color C of the pixel at (0,0).\nThis color determines the downward shift amount S:\n- If C is 9 (Maroon), S = 0 (no change).\n- If C is 6 (Magenta), S = 2.\n- Otherwise, S = 3.\nIf S > 0, identify all distinct connected non-white objects (excluding the pixel at (0,0)).\nRemove objects containing the color C.\nShift the remaining objects downwards by S rows.\nCopy the original indicator pixel C to (0,0) in the output.\n\"\"\"\n\ndef find_objects(grid, indicator_color):\n    \"\"\"\n    Finds all connected objects of non-white pixels in the grid,\n    ignoring the pixel at (0,0).\n    Returns a list of objects, where each object is a dictionary containing:\n    - 'pixels': a list of (row, col, color) tuples for the object.\n    - 'has_indicator_color': a boolean indicating if the object contains the indicator_color.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool)\n    objects = []\n    \n    # Mark (0,0) as visited to ignore the indicator pixel\n    if rows > 0 and cols > 0:\n        visited[0, 0] = True\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r, c] != 0 and not visited[r, c]:\n                # Start BFS for a new object\n                current_object_pixels = []\n                has_indicator = False\n                q = deque([(r, c)])\n                visited[r, c] = True\n\n                while q:\n                    row, col = q.popleft()\n                    color = grid[row, col]\n                    current_object_pixels.append((row, col, color))\n                    if color == indicator_color:\n                        has_indicator = True\n\n                    # Check neighbors (4-connectivity: up, down, left, right)\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = row + dr, col + dc\n                        if 0 <= nr < rows and 0 <= nc < cols and \\\n                           grid[nr, nc] != 0 and not visited[nr, nc]:\n                            visited[nr, nc] = True\n                            q.append((nr, nc))\n                            \n                objects.append({\n                    'pixels': current_object_pixels,\n                    'has_indicator_color': has_indicator\n                })\n    return objects\n\ndef transform(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Transforms the input grid based on the color C at (0,0).\n    Determines shift amount S based on C.\n    Removes objects containing C.\n    Shifts remaining objects down by S rows.\n    \"\"\"\n    rows, cols = input_grid.shape\n    \n    # 1. Examine the color C of the pixel at (0, 0)\n    indicator_color = input_grid[0, 0]\n\n    # 2. Determine the downward shift amount S\n    if indicator_color == 9:  # Maroon\n        shift_amount = 0\n    elif indicator_color == 6: # Magenta\n        shift_amount = 2\n    else: # Yellow (4), Orange (7), or others\n        shift_amount = 3\n\n    # 3. If S is 0, return a copy of the input grid\n    if shift_amount == 0:\n        return input_grid.copy()\n\n    # 4. If S > 0:\n    #    a. Create a new output grid filled with white (0)\n    output_grid = np.zeros_like(input_grid)\n    \n    #    b. Copy the indicator pixel to the output grid\n    output_grid[0, 0] = indicator_color\n\n    #    c. Identify all distinct connected objects (ignoring (0,0))\n    objects = find_objects(input_grid, indicator_color)\n\n    #    d. Process each object\n    for obj in objects:\n        # ii. If the object does NOT contain the indicator color C\n        if not obj['has_indicator_color']:\n            # Shift its pixels downwards\n            for r, c, col in obj['pixels']:\n                # Calculate the new row\n                r_new = r + shift_amount\n                # If the new row is within grid height\n                if r_new < rows:\n                    # Set the pixel in the output grid\n                    output_grid[r_new, c] = col\n\n    # e. Return the resulting output grid\n    return output_grid\n\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5281,
    "candidates_token_count": 1109,
    "total_token_count": 6390,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 14.522372
}