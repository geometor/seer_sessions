task_description: Copy each non-white object vertically downwards to the first available white space, potentially resizing the grid height.

grid_properties:
  - input_grid: 2D array of integers (colors 0-9).
  - output_grid: 2D array of integers (colors 0-9).
  - output_grid_size: Same width as input. Height is >= input height, adjusted dynamically if copies extend beyond the original height.
  - background_color: 0 (white).

objects:
  - type: pattern
    definition: Contiguous block of non-white pixels (color > 0) in the input grid. Adjacency is horizontal/vertical.
    properties:
      - color: The specific non-white integer value.
      - pixels: List of (row, column) coordinates comprising the object.
      - shape: Defined by the relative coordinates of its pixels.
      - location: Absolute coordinates in the input grid.

actions:
  - name: find_objects
    input: input_grid
    output: list of identified pattern objects.
  - name: determine_vertical_shift
    input:
      - pattern_object (pixels)
      - input_grid
      - current_max_row (of the grid being built)
    output: minimum_delta_r (integer > 0)
    description: |
      Find the smallest positive integer `k` such that for every pixel `(r, c)` in the pattern_object, the target coordinate `(r + k, c)` corresponds to a white pixel (0) in the input_grid or is outside the input_grid's row bounds.
  - name: resize_grid
    input:
      - output_grid
      - required_height
    output: resized_output_grid
    description: |
      If the destination of a copied object (`r + delta_r`) exceeds the current output grid height, increase the grid height (padding with white pixels) to accommodate it.
  - name: copy_object_pixels
    input:
      - pattern_object (color, pixels)
      - delta_r
      - output_grid
    output: modified_output_grid
    description: |
      For each pixel `(r, c)` with color `C` in the pattern_object, set the pixel at `(r + delta_r, c)` in the output_grid to color `C`. This overwrites the existing pixel value (which should be white based on the shift calculation).

processing_flow:
  1. Initialize the output_grid as a copy of the input_grid. Keep track of the required maximum row index (`max_required_row`), initialized to `input_rows - 1`.
  2. Identify all unique non-white pattern objects in the input_grid.
  3. For each pattern object:
     a. Determine its minimum required vertical shift (`delta_r`) by checking downward offsets `k=1, 2, ...` against the *original* input_grid state.
     b. Calculate the maximum row index reached by this object's copy: `max_r_copy = max(r for r, c in object_pixels) + delta_r`.
     c. Update the overall `max_required_row = max(max_required_row, max_r_copy)`.
  4. If `max_required_row` is greater than the initial `output_grid.height - 1`, resize the `output_grid` vertically, padding with white pixels, to have `max_required_row + 1` rows.
  5. For each pattern object again (using the `delta_r` calculated in step 3a):
     a. Perform the `copy_object_pixels` action onto the (potentially resized) `output_grid`.
  6. Return the final `output_grid`.
