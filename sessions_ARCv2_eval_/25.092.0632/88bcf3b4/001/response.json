{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nTransforms the input grid based on color adjacency rules.\n\n1. Identifies the background color (most frequent) and the three unique non-background colors.\n2. Sorts the non-background colors numerically:\n    - Lowest index = Source_Color\n    - Middle index = Unaffected_Color\n    - Highest index = Target_Color\n3. Iterates through each pixel of the input grid.\n4. If a pixel has the Source_Color:\n    - Checks its 8 neighbors (including diagonals) in the input grid.\n    - If any neighbor has the Target_Color, the corresponding pixel in the output grid is set to Target_Color.\n    - Otherwise (no Target_Color neighbors), the output pixel is set to the Background_Color.\n5. Pixels with colors other than Source_Color (Background, Unaffected, Target) retain their original color in the output grid.\n\"\"\"\n\ndef get_colors(grid):\n    \"\"\"Identifies background and non-background colors.\"\"\"\n    unique_colors, counts = np.unique(grid, return_counts=True)\n    background_color = unique_colors[np.argmax(counts)]\n    non_background_colors = sorted([color for color in unique_colors if color != background_color])\n    if len(non_background_colors) != 3:\n        # This case might indicate an issue with the problem assumption or the specific input\n        # For robustness, handle it, perhaps by returning None or raising an error\n        # Or, if it's possible only a subset exist, adapt logic. Assuming 3 based on examples.\n        print(f\"Warning: Expected 3 non-background colors, found {len(non_background_colors)}: {non_background_colors}\")\n        # Decide on handling: maybe return placeholders or raise error?\n        # Returning placeholders for now to avoid crashing during tests if input deviates.\n        source, unaffected, target = (None, None, None)\n        if len(non_background_colors) > 0: source = non_background_colors[0]\n        if len(non_background_colors) > 1: unaffected = non_background_colors[1]\n        if len(non_background_colors) > 2: target = non_background_colors[2]\n        return background_color, source, unaffected, target\n        \n    source_color = non_background_colors[0]\n    unaffected_color = non_background_colors[1]\n    target_color = non_background_colors[2]\n    \n    return background_color, source_color, unaffected_color, target_color\n\ndef is_valid(r, c, rows, cols):\n    \"\"\"Checks if coordinates are within grid bounds.\"\"\"\n    return 0 <= r < rows and 0 <= c < cols\n\ndef transform(input_grid):\n    \"\"\"\n    Applies the transformation rule to the input grid.\n    \"\"\"\n    input_np = np.array(input_grid, dtype=int)\n    rows, cols = input_np.shape\n    \n    # initialize output_grid as a copy of the input\n    output_grid = np.copy(input_np)\n\n    # 1. Identify colors and roles\n    background_color, source_color, unaffected_color, target_color = get_colors(input_np)\n\n    # Handle cases where exactly 3 non-background colors might not be found\n    if source_color is None or target_color is None:\n         # If crucial colors are missing, maybe return the input unchanged or handle error\n         print(\"Error: Could not determine Source or Target color. Returning input.\")\n         return input_grid # Or output_grid which is currently a copy\n\n    # 3. Iterate through each pixel of the *input* grid\n    for r in range(rows):\n        for c in range(cols):\n            # 4. Check if the current pixel has the Source_Color\n            if input_np[r, c] == source_color:\n                is_adjacent_to_target = False\n                # Check 8 neighbors\n                for dr in [-1, 0, 1]:\n                    for dc in [-1, 0, 1]:\n                        if dr == 0 and dc == 0:\n                            continue # Skip the cell itself\n                        \n                        nr, nc = r + dr, c + dc\n                        \n                        # Check if neighbor is valid and has the Target_Color\n                        if is_valid(nr, nc, rows, cols) and input_np[nr, nc] == target_color:\n                            is_adjacent_to_target = True\n                            break # Found one, no need to check further\n                    if is_adjacent_to_target:\n                        break # Exit outer loop too\n                \n                # Update the output grid based on adjacency check\n                if is_adjacent_to_target:\n                    output_grid[r, c] = target_color\n                else:\n                    output_grid[r, c] = background_color\n            \n            # 5. Else (pixel is Background, Unaffected, or Target):\n            # No action needed as output_grid started as a copy.\n\n    # Convert back to list of lists if necessary for ARC standard\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5109,
    "candidates_token_count": 1186,
    "total_token_count": 6295,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.160935,
  "retries": 1
}