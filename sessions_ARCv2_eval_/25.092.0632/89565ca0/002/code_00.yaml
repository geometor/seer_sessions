task_description: Identify specific character colors present in the input grid, determine a 'noise' color, and construct an output grid based on a potentially modified canonical order of character colors, applying a specific fill pattern.

definitions:
  - name: background_color
    value: 0 (white)
  - name: potential_character_colors
    value: [1, 2, 3, 4, 8] # blue, red, green, yellow, azure
  - name: canonical_order
    value: [8, 1, 2, 4, 3] # azure, blue, red, yellow, green
  - name: noise_color_definition
    value: The most frequent color in the input grid that is NOT the background_color and NOT one of the identified present_character_colors. Ties are broken by choosing the lower numerical color value. Defaults to 5 (gray) if no such color exists.

steps:
  - step: 1. Identify Present Character Colors
    description: Find the set of unique colors present in the input grid and intersect it with the set of potential_character_colors.
    inputs:
      - input_grid
      - potential_character_colors
    outputs:
      - present_character_colors: set # e.g., {1, 2, 3} for train_1

  - step: 2. Determine Initial Output Order
    description: Filter the canonical_order list, keeping only the colors that are in the present_character_colors set.
    inputs:
      - canonical_order
      - present_character_colors
    outputs:
      - initial_output_order: list # e.g., [1, 2, 3] for train_1

  - step: 3. Apply Conditional Swap
    description: Check if *neither* Azure (8) *nor* Yellow (4) are in present_character_colors. If this condition is met, AND if both Red (2) and Green (3) are present, swap their positions within the initial_output_order list.
    inputs:
      - initial_output_order
      - present_character_colors
    outputs:
      - final_output_order: list # e.g., [1, 3, 2] for train_1 after swap

  - step: 4. Identify Noise Color
    description: Calculate the frequency of all colors in the input grid. Find the color with the highest frequency among those that are not background (0) and not in present_character_colors. Use the noise_color_definition for tie-breaking and default.
    inputs:
      - input_grid
      - present_character_colors
    outputs:
      - noise_color: int # e.g., 5 for train_1, 5 for train_2, 7 for train_3

  - step: 5. Construct Output Grid
    description: Create an output grid with height equal to the number of colors in final_output_order and width equal to 4. Iterate through the final_output_order with index `idx`. For each `char_color` at `idx`:
      - Calculate `n_repeats`: If it's the last color in the order AND `idx >= 2`, `n_repeats = 3`. Otherwise, `n_repeats = min(idx, 3)`.
      - Create the row: `[char_color] + [char_color] * n_repeats + [noise_color] * (3 - n_repeats)`.
      - Append the row to the output grid.
    inputs:
      - final_output_order
      - noise_color
    outputs:
      - output_grid

example_1_trace:
  input_grid: train_1_input
  step_1_output: present_character_colors = {1, 3, 2}
  step_2_output: initial_output_order = [1, 2, 3] (filtering [8, 1, 2, 4, 3])
  step_3_output: Condition check: 8 not present AND 4 not present? Yes. 2 present AND 3 present? Yes. Swap 2 and 3 in [1, 2, 3]. final_output_order = [1, 3, 2]
  step_4_output: noise_color = 5 (gray)
  step_5_output:
    - idx=0, color=1: last=False. n_repeats=min(0,3)=0. row=[1, 5, 5, 5]
    - idx=1, color=3: last=False. n_repeats=min(1,3)=1. row=[3, 3, 5, 5]
    - idx=2, color=2: last=True, idx=2>=2. n_repeats=3. row=[2, 2, 2, 2]
    - output_grid = [[1, 5, 5, 5], [3, 3, 5, 5], [2, 2, 2, 2]] (Matches Expected)

example_2_trace:
  input_grid: train_2_input
  step_1_output: present_character_colors = {1, 2, 3, 4, 8}
  step_2_output: initial_output_order = [8, 1, 2, 4, 3]
  step_3_output: Condition check: 8 not present? No. No swap. final_output_order = [8, 1, 2, 4, 3]
  step_4_output: noise_color = 5 (gray)
  step_5_output:
    - idx=0, color=8: n=0. row=[8, 5, 5, 5]
    - idx=1, color=1: n=1. row=[1, 1, 5, 5]
    - idx=2, color=2: n=2. row=[2, 2, 2, 5]
    - idx=3, color=4: n=3. row=[4, 4, 4, 4]
    - idx=4, color=3: last=True, idx=4>=2. n=3. row=[3, 3, 3, 3]
    - output_grid = [[8, 5, 5, 5], [1, 1, 5, 5], [2, 2, 2, 5], [4, 4, 4, 4], [3, 3, 3, 3]] (Matches Expected)