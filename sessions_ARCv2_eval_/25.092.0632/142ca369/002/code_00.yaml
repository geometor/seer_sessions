Examples: 3
Grid_Size: Variable (e.g., 20x20, 18x18)
Colors: white(0), blue(1), red(2), green(3), yellow(4), gray(5), magenta(6), orange(7)

Input_Objects:
  - Type: Contiguous shapes or individual pixels.
  - Colors: Various non-white colors.
  - Property: Source for diagonal lines.
  - Persistence: All input objects remain unchanged in the output grid.

Output_Objects:
  - Includes all input objects.
  - Additional pixels forming diagonal lines originating from input pixels.

Actions:
  - Create an output grid identical to the input grid.
  - For each non-white pixel `P` at (`r`, `c`) with color `C` in the input grid:
    - Action: Emit a diagonal line trace.
    - Start_Trace_Position: (`r+1`, `c+1`).
    - Direction: Downwards and to the right (+1 row, +1 column per step).
    - Color: `C`.
    - Trace_Step: For current trace position (`tr`, `tc`):
      - Condition_Check: Examine the pixel at (`tr`, `tc`) in the *original input grid*.
      - If `input_grid[tr, tc]` is white (0):
          - Color the pixel at (`tr`, `tc`) in the *output grid* with color `C`.
          - Continue trace to (`tr+1`, `tc+1`).
      - If `input_grid[tr, tc]` is non-white (> 0):
          - Stop the trace for pixel `P` immediately. Do *not* color (`tr`, `tc`).
    - Termination_Condition_Boundary: Stop trace if `tr` or `tc` goes outside grid bounds.

Relationships:
  - Added diagonal lines originate *from* input non-white pixels.
  - The path of a diagonal line is constrained by grid boundaries and the positions of *other* non-white pixels in the *input grid*.
  - The final output grid combines the original input pixels and the correctly terminated diagonal line pixels.