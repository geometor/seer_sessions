# Overall Grid Structure
grid:
  properties:
    - dimensions_preserved: True # Input and output grids have the same height and width
    - has_border: True # A consistent color forms a 1-pixel border around the grid and vertical separators
    - border_color: variable # Changes between examples (gray, blue, magenta, yellow)
    - separator_columns: True # Columns of the border color divide the inner area
    - num_regions: 4 # The separators create four distinct rectangular regions/panels

# Regions/Panels (Panel 1, 2, 3, 4 from left-to-right)
regions:
  properties:
    - background_color: consistent_within_task # A single color acts as the background within all panels for a given task (yellow, azure, maroon, white)
    - contain_patterns: True # Panels contain distinct shapes/patterns made of non-background colors
  relationships:
    - panel_1_output: identical_to_input
    - panel_2_output: identical_to_input
    - panel_3_output: identical_to_input
    - panel_4_output: derived_from_input_panels

# Patterns (Non-background pixels within a region)
patterns:
  properties:
    - color: variable
    - shape: variable
  actions:
    - extract_pattern_2: Identify non-background pixels in input Panel 2 relative to Panel 2's origin.
    - extract_pattern_3: Identify non-background pixels in input Panel 3 relative to Panel 3's origin.
    - apply_pattern_2_to_panel_4: Place extracted Pattern 2 onto output Panel 4 (relative to Panel 4's origin) over the background color.
    - apply_pattern_3_to_panel_4: Place extracted Pattern 3 onto output Panel 4 (relative to Panel 4's origin), overwriting any existing pixels (including those from Pattern 2).

# Transformation Summary
transformation:
  description: Copy Panels 1, 2, and 3. Construct Panel 4 by overlaying the pattern from Panel 2 and then the pattern from Panel 3 onto the background color within the bounds of Panel 4.
  panel_4_rule: Output_Panel4 = Background + Pattern2 + Pattern3 (Pattern3 overwrites Pattern2 on overlap)
