{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\n\"\"\"\nTransformation Rule:\n1. Identify the background color, which is the most frequent color in the input grid.\n2. Locate all pixels (foreground pixels) that are *not* the background color.\n3. Determine the minimum bounding box (min_row, max_row, min_col, max_col) that encloses all foreground pixels.\n4. Extract the subgrid defined by this bounding box from the input grid. This extracted subgrid is the output.\n\"\"\"\n\ndef find_background_color(grid):\n  \"\"\"Finds the most frequent color in the grid.\"\"\"\n  flat_grid = grid.flatten()\n  counts = Counter(flat_grid)\n  # Find the color with the maximum count\n  background_color = counts.most_common(1)[0][0]\n  return background_color\n\ndef find_bounding_box(grid, background_color):\n  \"\"\"Finds the bounding box of non-background pixels.\"\"\"\n  foreground_pixels = np.where(grid != background_color)\n  rows, cols = foreground_pixels\n  if len(rows) == 0:\n    # Handle cases where there are no foreground pixels (not in examples, but good practice)\n    # Option 1: Return None or raise error\n    # Option 2: Return a default box (e.g., the whole grid, or 0,0,0,0)\n    # Based on examples, we assume foreground pixels always exist.\n    return None # Or perhaps return (0, grid.shape[0]-1, 0, grid.shape[1]-1) to return the whole grid?\n                 # Let's stick to the observed pattern and assume they exist.\n  \n  min_row = np.min(rows)\n  max_row = np.max(rows)\n  min_col = np.min(cols)\n  max_col = np.max(cols)\n  return min_row, max_row, min_col, max_col\n\ndef transform(input_grid):\n    \"\"\"\n    Extracts the subgrid containing all non-background pixels, defined by their minimal bounding box.\n    \"\"\"\n    # Convert input list of lists to numpy array for efficient operations\n    input_grid_np = np.array(input_grid, dtype=int)\n    \n    # 1. Determine the background color\n    background_color = find_background_color(input_grid_np)\n    \n    # 2. & 3. Locate foreground pixels and find their bounding box\n    bounding_box = find_bounding_box(input_grid_np, background_color)\n    \n    # Check if a bounding box was found (handles edge case)\n    if bounding_box is None:\n      # No foreground pixels found, decide on return value.\n      # Based on examples, this shouldn't happen.\n      # Returning an empty list or the original grid might be options.\n      # Let's assume for now it implies an empty output or error, returning empty list.\n      return [] \n      \n    min_row, max_row, min_col, max_col = bounding_box\n    \n    # 4. Extract the subgrid using the bounding box coordinates\n    # NumPy slicing is [start_row:end_row+1, start_col:end_col+1]\n    output_grid_np = input_grid_np[min_row : max_row + 1, min_col : max_col + 1]\n    \n    # Convert the output numpy array back to a list of lists\n    output_grid = output_grid_np.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 6061,
    "candidates_token_count": 827,
    "total_token_count": 6888,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 12.282084,
  "retries": 1
}