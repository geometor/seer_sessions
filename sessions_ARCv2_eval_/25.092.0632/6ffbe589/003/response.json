{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentifies all distinct contiguous groups of non-white pixels (objects) in the \ninput grid using 4-way adjacency (horizontal/vertical). Selects the object \nwith the largest number of pixels. Calculates the minimum bounding box \nenclosing this largest object. Returns a new grid containing the portion of the \ninput grid defined by this bounding box.\n\"\"\"\n\ndef _find_connected_component(grid, start_row, start_col, visited):\n    \"\"\"\n    Finds a single connected component of non-white pixels using BFS.\n    \n    Args:\n        grid (np.array): The input grid.\n        start_row (int): The starting row for the search.\n        start_col (int): The starting column for the search.\n        visited (np.array): A boolean grid tracking visited pixels.\n\n    Returns:\n        list: A list of (row, col) tuples representing the coordinates of the\n              pixels in the found component, or None if the start pixel is\n              invalid (white or already visited).\n    \"\"\"\n    rows, cols = grid.shape\n    # Check if the starting point is valid (bounds, visited, non-white)\n    if not (0 <= start_row < rows and 0 <= start_col < cols) or \\\n       visited[start_row, start_col] or \\\n       grid[start_row, start_col] == 0: # 0 is white/background\n        return None\n\n    component_coords = []\n    q = deque([(start_row, start_col)])\n    visited[start_row, start_col] = True # Mark starting pixel as visited\n\n    while q:\n        r, c = q.popleft()\n        component_coords.append((r, c))\n\n        # Check neighbors (up, down, left, right) using 4-way adjacency\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n            \n            # Check if neighbor is within bounds\n            if 0 <= nr < rows and 0 <= nc < cols:\n                 # Check if neighbor is non-white and hasn't been visited yet\n                if not visited[nr, nc] and grid[nr, nc] != 0:\n                    visited[nr, nc] = True # Mark neighbor as visited\n                    q.append((nr, nc)) # Add neighbor to the queue\n\n    return component_coords\n\ndef _find_all_objects(grid):\n    \"\"\"\n    Finds all distinct contiguous non-white objects in the grid.\n    \n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        list: A list where each element is a list of (row, col) tuples\n              representing an object's pixel coordinates. Returns an empty list\n              if no non-white pixels are found.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros((rows, cols), dtype=bool) # Initialize visited grid\n    all_objects = []\n\n    # Iterate through each pixel of the input grid\n    for r in range(rows):\n        for c in range(cols):\n            # If pixel is non-white and not yet visited, it's the start of a new object\n            if grid[r, c] != 0 and not visited[r, c]:\n                # Find all connected pixels for this new object\n                component = _find_connected_component(grid, r, c, visited)\n                if component: # Should always be true if conditions met\n                    all_objects.append(component)\n                    \n    return all_objects\n\ndef _get_bounding_box(coords):\n    \"\"\"\n    Calculates the minimum bounding box for a set of coordinates.\n    \n    Args:\n        coords (list): A list of (row, col) tuples for an object.\n\n    Returns:\n        tuple: (min_row, max_row, min_col, max_col) or None if coords is empty.\n    \"\"\"\n    if not coords:\n        return None\n        \n    # Find the minimum and maximum row and column indices from the coordinates\n    min_r = min(r for r, c in coords)\n    max_r = max(r for r, c in coords)\n    min_c = min(c for r, c in coords)\n    max_c = max(c for r, c in coords)\n    \n    return min_r, max_r, min_c, max_c\n\ndef transform(input_grid):\n    \"\"\"\n    Extracts the largest contiguous non-white object (by pixel count) \n    from the input grid.\n\n    Args:\n        input_grid (list of lists): The input grid represented as a list of lists.\n\n    Returns:\n        list of lists: The extracted subgrid containing the largest object.\n                       Returns a 1x1 white grid [[0]] if no non-white objects \n                       are found in the input.\n    \"\"\"\n    # Convert input list of lists to a NumPy array for efficient processing\n    grid_np = np.array(input_grid, dtype=int)\n    \n    # 1. Find all distinct contiguous non-white objects\n    all_objects = _find_all_objects(grid_np)\n\n    # Handle the edge case where the input grid has no non-white pixels\n    if not all_objects:\n        return [[0]] \n\n    # 2. & 3. Count pixels for each object and select the object with the maximum count\n    # The length of the list of coordinates for an object is its pixel count.\n    largest_object_coords = max(all_objects, key=len)\n\n    # 4. Determine the minimum bounding box for the largest object\n    bounding_box = _get_bounding_box(largest_object_coords)\n    \n    # This check should ideally not be needed if all_objects wasn't empty, \n    # but added for robustness.\n    if bounding_box is None: \n        return [[0]] # Should not happen if largest_object_coords is valid\n        \n    min_r, max_r, min_c, max_c = bounding_box\n\n    # 5. Create the output grid by extracting the subgrid using slicing\n    # Note: NumPy slicing is exclusive of the end index, so add 1 to max values.\n    output_grid_np = grid_np[min_r : max_r + 1, min_c : max_c + 1]\n    \n    # Convert the resulting NumPy array back to a list of lists format\n    output_grid = output_grid_np.tolist()\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "citation_metadata": {
        "citation_sources": [
          {
            "start_index": 6062,
            "end_index": 6257,
            "uri": "https://github.com/Rijgersberg/advent-of-code-2020",
            "license_": ""
          }
        ]
      },
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 32719,
    "candidates_token_count": 1533,
    "total_token_count": 34252,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 99.671313,
  "retries": 2
}