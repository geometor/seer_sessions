{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\n\"\"\"\nIdentifies the largest rectangular area within the input grid that is defined by\na border composed entirely of white (0) pixels. The function then extracts the\nsubgrid corresponding to this rectangle, including both the white border and\nany pixels contained within it (regardless of their color). The extracted\nsubgrid forms the output grid.\n\"\"\"\n\nimport numpy as np\n\ndef _check_white_border(grid_slice):\n    \"\"\"Checks if the border of a given grid slice is all white (0).\"\"\"\n    height, width = grid_slice.shape\n    if height < 2 or width < 2: # Need at least 2x2 for a border\n        return False\n    # Check top border (row 0)\n    if not np.all(grid_slice[0, :] == 0):\n        return False\n    # Check bottom border (row height-1)\n    if not np.all(grid_slice[height-1, :] == 0):\n        return False\n    # Check left border (col 0)\n    if not np.all(grid_slice[:, 0] == 0):\n        return False\n    # Check right border (col width-1)\n    if not np.all(grid_slice[:, width-1] == 0):\n        return False\n    return True\n\n\ndef transform(input_grid):\n    \"\"\"\n    Finds the largest rectangle with an all-white border in the input grid\n    and returns the subgrid defined by that rectangle.\n\n    Args:\n        input_grid (list[list[int]]): The input grid.\n\n    Returns:\n        list[list[int]]: The extracted subgrid corresponding to the largest\n                         white-bordered rectangle, or an empty list if none\n                         is found.\n    \"\"\"\n    np_input = np.array(input_grid, dtype=int)\n    height, width = np_input.shape\n    max_area = -1\n    best_rect_coords = None # Will store (top_r, top_c, bottom_r, bottom_c)\n\n    # Iterate through all possible top-left corners (r1, c1)\n    for r1 in range(height):\n        for c1 in range(width):\n            # Iterate through all possible bottom-right corners (r2, c2)\n            # Ensure r2 > r1 and c2 > c1 for a valid rectangle with a border\n            for r2 in range(r1 + 1, height):\n                for c2 in range(c1 + 1, width):\n                    # Extract the potential rectangular subgrid\n                    subgrid = np_input[r1:r2+1, c1:c2+1]\n\n                    # Check if this subgrid has an all-white border\n                    if _check_white_border(subgrid):\n                        # Calculate the area of this rectangle\n                        current_height = r2 - r1 + 1\n                        current_width = c2 - c1 + 1\n                        current_area = current_height * current_width\n\n                        # If this rectangle is larger than the best one found so far, update\n                        if current_area > max_area:\n                            max_area = current_area\n                            # Store the coordinates defining the rectangle in the original grid\n                            best_rect_coords = (r1, c1, r2, c2)\n\n    # If a largest white-bordered rectangle was found\n    if best_rect_coords:\n        # Extract the subgrid from the input using the stored coordinates\n        r1, c1, r2, c2 = best_rect_coords\n        output_grid_np = np_input[r1 : r2 + 1, c1 : c2 + 1]\n        # Convert the NumPy array back to a list of lists for the output\n        output_grid = output_grid_np.tolist()\n    else:\n        # Handle the case where no white-bordered rectangle was found\n        # Based on examples, this case seems unlikely. Return empty list.\n        print(\"Warning: No white-bordered rectangular area found.\")\n        output_grid = []\n\n    return output_grid\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 17061,
    "candidates_token_count": 932,
    "total_token_count": 17993,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 13.609347,
  "retries": 1
}