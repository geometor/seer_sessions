{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentify contiguous regions of white (0) pixels in the input grid using 8-way adjacency.\nFor each distinct white region found:\n1. Identify all non-white pixels that are adjacent (8-way, including diagonals) to any pixel within the white region. These form the 'boundary pixels'.\n2. Check if the set of boundary pixels is non-empty and if all boundary pixels share the exact same color, C.\n3. If a uniform surrounding color C exists, determine the fill color F based on the following rules:\n    - If C is Green (3), set F to Green (3).\n    - If C is Orange (7), set F to Orange (7).\n    - If C is Red (2), set F to Orange (7).\n    - If C is Gray (8), set F to Blue (1).\n    - If C is Yellow (4):\n        - Check if the input grid is square (height equals width).\n        - If the grid is square, set F to the color value equal to the grid's height (or width) divided by 2 using integer division (e.g., a 10x10 grid results in F=5).\n        - If the grid is not square, set F to white (0), meaning the hole is not filled.\n    - For any other uniform surrounding color C not listed above, set F to white (0) (no fill).\n4. If a non-white fill color F (F > 0) is determined for the white region, change the color of all pixels belonging to that specific white region to F in the output grid.\n5. Pixels that are not part of a fillable white region (either because they were not white initially, or the white region didn't meet the filling criteria) remain unchanged from the input grid.\nInitialize the output grid as a copy of the input grid, and apply the modifications based on the rules above.\n\"\"\"\n\ndef get_neighbors(r, c, height, width):\n    \"\"\" \n    Get 8-way adjacent neighbor coordinates (including diagonals) \n    for a given cell (r, c) that are within the grid bounds.\n    \"\"\"\n    neighbors = []\n    for dr in [-1, 0, 1]:\n        for dc in [-1, 0, 1]:\n            # Skip the center cell itself\n            if dr == 0 and dc == 0:\n                continue\n            nr, nc = r + dr, c + dc\n            # Check if the neighbor is within grid boundaries\n            if 0 <= nr < height and 0 <= nc < width:\n                neighbors.append((nr, nc))\n    return neighbors\n\ndef find_white_region_and_boundary(grid, start_r, start_c, visited):\n    \"\"\"\n    Performs a Breadth-First Search (BFS) starting from (start_r, start_c)\n    to find a contiguous region of white (0) pixels using 8-way adjacency.\n    It identifies the non-white pixels adjacent to this region (boundary).\n\n    Args:\n        grid (np.array): The input grid.\n        start_r (int): Starting row index.\n        start_c (int): Starting column index.\n        visited (np.array): A boolean grid marking visited pixels.\n\n    Returns:\n        tuple: A tuple containing:\n            - region_coords (set): A set of (r, c) tuples for pixels in the white region.\n            - boundary_pixels (set): A set of ((r, c), color) tuples for boundary pixels.\n        Returns (None, None) if the starting pixel is invalid (already visited or not white).\n    \"\"\"\n    height, width = grid.shape\n    # Check if the starting point is valid\n    if visited[start_r, start_c] or grid[start_r, start_c] != 0:\n        return None, None\n\n    region_coords = set()\n    # Using a set for boundary_pixels automatically handles duplicates\n    boundary_pixels = set() \n    queue = deque([(start_r, start_c)])\n    # Mark the starting pixel as visited immediately\n    visited[start_r, start_c] = True \n    \n    while queue:\n        r, c = queue.popleft()\n        # Add the current pixel to the identified white region\n        region_coords.add((r, c))\n\n        # Explore neighbors\n        for nr, nc in get_neighbors(r, c, height, width):\n            neighbor_color = grid[nr, nc]\n            if neighbor_color == 0: # Neighbor is white\n                # If this white neighbor hasn't been visited, add to queue\n                if not visited[nr, nc]:\n                    visited[nr, nc] = True\n                    queue.append((nr, nc))\n            else: # Neighbor is non-white, potential boundary pixel\n                # Add the boundary pixel's coordinate and color to the set\n                boundary_pixels.add(((nr, nc), neighbor_color))\n                \n    return region_coords, boundary_pixels\n\n\ndef transform(input_grid):\n    \"\"\"\n    Transforms the input grid by filling enclosed white regions based \n    on the surrounding color and grid properties.\n\n    Args:\n        input_grid (list of lists): The input grid represented as a 2D list.\n\n    Returns:\n        list of lists: The transformed grid.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    input_np = np.array(input_grid, dtype=int)\n    # Create a copy to modify, leaving the original input unchanged\n    output_grid = np.copy(input_np)\n    height, width = input_np.shape\n    # Keep track of visited white pixels to process each region only once\n    visited = np.zeros_like(input_np, dtype=bool)\n\n    # Iterate through each pixel in the grid\n    for r in range(height):\n        for c in range(width):\n            # Check if it's a white pixel and hasn't been visited yet\n            if input_np[r, c] == 0 and not visited[r, c]:\n                # Found the start of a potential white region, explore it\n                region_coords, boundary_pixels = find_white_region_and_boundary(input_np, r, c, visited)\n\n                # If the region exploration was valid (started on a white pixel)\n                if region_coords is not None:\n                    # Check if the region has any boundary pixels\n                    if not boundary_pixels:\n                        # No boundary (e.g., touches grid edge or fully surrounded by white)\n                        # Or an isolated white pixel with no non-white neighbours - skip.\n                        continue \n\n                    # Extract the colors of all boundary pixels\n                    boundary_colors = {color for _, color in boundary_pixels}\n                    \n                    # Check if all boundary pixels have the same single color\n                    if len(boundary_colors) == 1:\n                        surrounding_color_C = boundary_colors.pop()\n                        fill_color_F = 0 # Default: no fill (keep white)\n\n                        # Apply the color mapping rules\n                        if surrounding_color_C == 3: # Green surround -> Green fill\n                            fill_color_F = 3\n                        elif surrounding_color_C == 7: # Orange surround -> Orange fill\n                            fill_color_F = 7\n                        elif surrounding_color_C == 2: # Red surround -> Orange fill\n                            fill_color_F = 7 \n                        elif surrounding_color_C == 8: # Gray surround -> Blue fill\n                            fill_color_F = 1 \n                        elif surrounding_color_C == 4: # Yellow surround - check grid shape\n                            if height == width: # Grid is square\n                                # Fill color is determined by grid dimension / 2\n                                fill_color_F = height // 2\n                                # Ensure calculated color is valid (0-9). Redundant for ARC constraints but safe.\n                                if not (0 <= fill_color_F <= 9):\n                                    fill_color_F = 0 # Revert to no fill if calculation is out of bounds\n                            else: # Grid is not square\n                                fill_color_F = 0 # No fill for yellow in non-square grids\n                        \n                        # If a valid non-white fill color was determined\n                        if fill_color_F != 0:\n                            # Iterate through all coordinates of the identified white region\n                            for reg_r, reg_c in region_coords:\n                                # Update the color in the output grid\n                                output_grid[reg_r, reg_c] = fill_color_F\n\n    # Convert the final numpy array back to a list of lists for the output\n    return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 3617,
    "candidates_token_count": 1982,
    "total_token_count": 5599,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 45.752356,
  "retries": 1
}