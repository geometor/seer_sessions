{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import deque\n\n\"\"\"\nIdentify all groups of connected non-white pixels (8-way connectivity).\nFind the group with the largest number of pixels.\nDetermine the bounding box of this largest group.\nCrop the input grid to this bounding box and return the result.\n\"\"\"\n\ndef _find_connected_objects(grid):\n    \"\"\"\n    Finds all connected components of non-background pixels using BFS.\n\n    Args:\n        grid (np.array): The input grid.\n\n    Returns:\n        list: A list where each element is a list of (row, col) tuples\n              representing the coordinates of pixels in a connected object.\n    \"\"\"\n    rows, cols = grid.shape\n    visited = np.zeros_like(grid, dtype=bool)\n    objects = []\n    background_color = 0\n\n    for r in range(rows):\n        for c in range(cols):\n            # If it's a non-background pixel and not yet visited\n            if grid[r, c] != background_color and not visited[r, c]:\n                current_object_pixels = []\n                q = deque([(r, c)])\n                visited[r, c] = True\n\n                while q:\n                    row, col = q.popleft()\n                    current_object_pixels.append((row, col))\n\n                    # Check all 8 neighbors (including diagonals)\n                    for dr in [-1, 0, 1]:\n                        for dc in [-1, 0, 1]:\n                            # Skip the center pixel itself\n                            if dr == 0 and dc == 0:\n                                continue\n\n                            nr, nc = row + dr, col + dc\n\n                            # Check bounds\n                            if 0 <= nr < rows and 0 <= nc < cols:\n                                # Check if neighbor is non-background and not visited\n                                if grid[nr, nc] != background_color and not visited[nr, nc]:\n                                    visited[nr, nc] = True\n                                    q.append((nr, nc))\n\n                if current_object_pixels:\n                    objects.append(current_object_pixels)\n\n    return objects\n\ndef _calculate_bounding_box(pixels):\n    \"\"\"\n    Calculates the minimum bounding box for a list of pixel coordinates.\n\n    Args:\n        pixels (list): A list of (row, col) tuples.\n\n    Returns:\n        tuple: (min_row, max_row, min_col, max_col) or None if no pixels.\n    \"\"\"\n    if not pixels:\n        return None\n\n    rows = [r for r, c in pixels]\n    cols = [c for r, c in pixels]\n\n    min_row = min(rows)\n    max_row = max(rows)\n    min_col = min(cols)\n    max_col = max(cols)\n\n    return min_row, max_row, min_col, max_col\n\n\ndef transform(input_grid):\n    \"\"\"\n    Identifies the largest connected object of non-background pixels\n    and crops the grid to its bounding box.\n\n    Args:\n        input_grid (np.array): A 2D numpy array representing the input grid.\n\n    Returns:\n        np.array: A 2D numpy array representing the cropped output grid.\n                 Returns an empty array if no non-background objects are found.\n    \"\"\"\n    # Convert input list of lists to numpy array if necessary\n    grid = np.array(input_grid)\n\n    # 1. Identify all connected non-background objects\n    objects = _find_connected_objects(grid)\n\n    # Handle case where there are no objects\n    if not objects:\n        return np.array([[]], dtype=int) # Or handle as appropriate, maybe empty grid of correct shape?\n\n    # 2. Find the object with the largest pixel count\n    largest_object = max(objects, key=len)\n\n    # 3. Determine the bounding box of the largest object\n    bounding_box = _calculate_bounding_box(largest_object)\n    if bounding_box is None:\n         return np.array([[]], dtype=int) # Should not happen if objects is not empty\n\n    min_row, max_row, min_col, max_col = bounding_box\n\n    # 4. Create the output grid by cropping the input grid\n    # Note: Slicing in numpy is exclusive of the end index, so add 1\n    output_grid = grid[min_row : max_row + 1, min_col : max_col + 1]\n\n    return output_grid.tolist() # Convert back to list of lists if required by framework\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5315,
    "candidates_token_count": 1051,
    "total_token_count": 6366,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 15.31215,
  "retries": 1
}