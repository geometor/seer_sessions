task_type: object_extraction, filtering, relative_positioning

components:
  - role: input_grid
    type: 2D array of integers (colors 0-9)
    properties:
      - contains a background color (white, 0)
      - may contain multiple distinct objects (groups of connected non-white pixels)
  - role: output_grid
    type: 2D array of integers (colors 0-9)
    properties:
      - dimensions match the bounding box of the 'target object' from the input_grid.
      - contains only the pixels belonging to the 'target object', positioned relative to the top-left corner of the bounding box.
      - all pixels not belonging to the target object are set to the background color (white, 0).

objects:
  - type: pixel_group
    definition: A contiguous group of non-white pixels in the input grid.
    connectivity: 8-way (includes diagonals)
    properties:
      - pixels: list of (row, col) coordinates comprising the object.
      - size: number of pixels in the group (len(pixels)).
      - bounding_box: minimum rectangle enclosing all pixels (min_row, max_row, min_col, max_col).
  - type: target_object
    definition: The 'pixel_group' with the largest 'size' (maximum pixel count).
    assumption: There is expected to be a unique largest object.

relationships:
  - type: selection
    description: The target_object is selected from all identified pixel_groups based on having the maximum size.
  - type: spatial_mapping
    description: Each pixel (r, c) of the target_object in the input grid is mapped to a new position (r - min_row, c - min_col) in the output grid, where (min_row, min_col) are from the target_object's bounding_box.
  - type: framing
    description: The target_object's bounding_box determines the height (max_row - min_row + 1) and width (max_col - min_col + 1) of the output grid.

actions:
  - name: find_pixel_groups
    description: Identify all connected components of non-white pixels (value != 0) using 8-way connectivity, returning a list where each item contains the coordinates of pixels for one group.
    inputs: input_grid
    outputs: list_of_pixel_groups (each group is a list of (r, c) tuples)
  - name: select_target_object
    description: Find the pixel_group from the list that has the maximum number of pixels.
    inputs: list_of_pixel_groups
    outputs: target_object_pixels (list of (r, c) tuples)
  - name: get_bounding_box
    description: Calculate the min/max row/column indices for the pixels in the target object.
    inputs: target_object_pixels
    outputs: bounding_box (min_r, max_r, min_c, max_c)
  - name: create_output_canvas
    description: Create a new grid with height = max_r - min_r + 1 and width = max_c - min_c + 1, filled entirely with the background color (white, 0).
    inputs: bounding_box
    outputs: output_grid
  - name: draw_target_object
    description: For each pixel (r, c) in target_object_pixels, get its color from input_grid[r, c] and place it in the output_grid at position (r - min_r, c - min_c).
    inputs: output_grid, target_object_pixels, input_grid, bounding_box (min_r, min_c needed)
    outputs: populated_output_grid

goal: Extract the single largest connected object (by pixel count) of non-background colors from the input grid and display it, preserving pixel colors and relative positions, on a clean background grid sized exactly to fit the object's bounding box.