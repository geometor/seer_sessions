{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef find_background_color(grid):\n  \"\"\"Finds the most frequent color in the grid, assumed to be the background.\"\"\"\n  counts = Counter(grid.flatten())\n  # Find the color with the highest count\n  background_color = counts.most_common(1)[0][0]\n  return background_color\n\ndef count_same_color_neighbors(grid, r, c, color):\n  \"\"\"Counts the number of adjacent (up, down, left, right) neighbors with the same color.\"\"\"\n  count = 0\n  height, width = grid.shape\n  neighbors = [\n      (r - 1, c),  # Up\n      (r + 1, c),  # Down\n      (r, c - 1),  # Left\n      (r, c + 1)   # Right\n  ]\n  for nr, nc in neighbors:\n    # Check bounds\n    if 0 <= nr < height and 0 <= nc < width:\n      # Check color\n      if grid[nr, nc] == color:\n        count += 1\n  return count\n\ndef transform(input_grid):\n  \"\"\"\n  Transforms the input grid by removing pixels from non-background objects\n  that have fewer than two adjacent neighbors of the same color. Adjacent neighbors\n  are considered only horizontally and vertically. The removed pixels are replaced\n  with the background color.\n  \"\"\"\n  # Convert input to numpy array for easier manipulation\n  input_np = np.array(input_grid, dtype=int)\n  height, width = input_np.shape\n\n  # Initialize output_grid as a copy of the input\n  output_grid = np.copy(input_np)\n\n  # Determine the background color (most frequent color)\n  background_color = find_background_color(input_np)\n\n  # Iterate through each pixel of the input grid\n  for r in range(height):\n    for c in range(width):\n      pixel_color = input_np[r, c]\n\n      # Check if the pixel is part of a non-background object\n      if pixel_color != background_color:\n        # Count adjacent neighbors with the same color\n        neighbor_count = count_same_color_neighbors(input_np, r, c, pixel_color)\n\n        # If the count is less than 2, change the pixel in the output grid to the background color\n        if neighbor_count < 2:\n          output_grid[r, c] = background_color\n\n  # Convert the result back to a list of lists if necessary (often numpy arrays are acceptable)\n  return output_grid.tolist()\n```"
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 5724,
    "candidates_token_count": 603,
    "total_token_count": 6327,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-pro-exp-03-25",
  "response_time": 8.56335,
  "retries": 1
}