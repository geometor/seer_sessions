task_elements:
  - element: grid
    description: A 2D array of pixels representing colors (black=0, blue=1, orange=7).
  - element: pixel
    properties:
      - color: Integer 0, 1, or 7.
      - location: (row, column) coordinates.
      - neighbors: 8 adjacent pixels (including diagonals).
objects:
  - object: potential_trigger_pixel
    description: A pixel with color black (0) in the input grid.
  - object: non_trigger_pixel
    description: A black pixel that is part of a 2x2 square of black pixels in the input grid. A pixel (r,c) is part of a 2x2 black square if itself and its neighbors at (r+1,c), (r,c+1), (r+1,c+1) are all black, OR itself and (r-1,c), (r,c+1), (r-1,c+1) are all black, OR itself and (r+1,c), (r,c-1), (r+1,c-1) are all black, OR itself and (r-1,c), (r,c-1), (r-1,c-1) are all black (within bounds).
  - object: trigger_pixel
    description: A potential_trigger_pixel that is NOT a non_trigger_pixel.
  - object: affected_neighbor
    description: A blue (1) pixel in the input grid that is one of the 8 neighbors of a trigger_pixel.
actions:
  - action: identify_trigger_pixels
    description: Iterate through the input grid. For each black (0) pixel, check if it forms any 2x2 black square with its neighbors. If it does not, classify it as a trigger_pixel.
  - action: apply_color_change
    description: Create the output grid as a copy of the input grid. For each identified trigger_pixel at (r, c), iterate through its 8 neighbors (nr, nc). If a neighbor (nr, nc) exists within the grid boundaries and its color in the input grid is blue (1), change its color in the output grid to orange (7).
relationships:
  - relationship: neighborhood_3x3
    description: The transformation examines the 3x3 area around a black pixel to determine the trigger (based on the 2x2 rule) and applies changes within that area.
  - relationship: adjacency_2x2
    description: The trigger condition specifically checks for the presence of 2x2 blocks of black pixels.
  - relationship: input_output_mapping
    description: The output grid is derived from the input grid by changing specific blue pixels to orange based on the locations of trigger_pixels. All other pixels (black pixels, non-affected blue pixels) retain their original color. Overlapping transformations are allowed (a blue pixel can be changed to orange if it's a neighbor of multiple trigger_pixels).