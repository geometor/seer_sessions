task_description: "Identify frame and picture shapes in the input, clean them, pair them based on spatial containment, combine them by placing the picture inside the frame with a 1-pixel border, and arrange the combined units in the output grid based on the input frame positions."

elements:
  - element: "frame"
    properties:
      - shape: "rectangle"
      - size: "HxW"
      - pattern: "solid color C1 (potentially with noise pixels inside)"
      - role: "container"
  - element: "picture"
    properties:
      - shape: "rectangle"
      - size: "(H-2)x(W-2)"
      - pattern: "solid color C2 (potentially surrounded by or containing noise pixels)"
      - role: "contained"
  - element: "noise"
    properties:
      - color: "variable (e.g., azure 8 in ex1, red 2 in ex2)"
      - location: "within or between frames and pictures"
      - role: "ignored during shape identification and reconstruction"

relationships:
  - type: "spatial_containment"
    description: "The bounding box of a picture shape is located within the bounding box of a frame shape in the input grid."
    connects: ["frame", "picture"]
  - type: "size_relation"
    description: "Picture dimensions are exactly 2 less than Frame dimensions (height-2, width-2)."
    connects: ["frame", "picture"]
  - type: "output_arrangement"
    description: "Combined frame+picture units in the output maintain the relative spatial arrangement of the corresponding frames from the input."
    connects: ["frame", "output_grid"]

actions:
  - action: "identify_shapes"
    description: "Find all rectangular regions corresponding to potential frames (HxW) and pictures ((H-2)x(W-2)) based on their dominant color, ignoring noise."
    inputs: ["input_grid"]
    outputs: ["list_of_frames", "list_of_pictures"]
  - action: "pair_shapes"
    description: "Match each frame with the picture spatially contained within it in the input grid."
    inputs: ["list_of_frames", "list_of_pictures", "input_grid"]
    outputs: ["list_of_pairs"]
  - action: "construct_unit"
    description: "For each pair (Frame C1, Picture C2), create an HxW grid of C1 and place an (H-2)x(W-2) grid of C2 inside it at offset (1,1)."
    inputs: ["frame_color_C1", "picture_color_C2", "frame_size_HxW"]
    outputs: ["combined_unit_grid"]
  - action: "assemble_output"
    description: "Arrange the combined_unit_grids into the final output grid based on the relative positions of the original frames in the input."
    inputs: ["list_of_pairs", "list_of_combined_units"]
    outputs: ["output_grid"]
