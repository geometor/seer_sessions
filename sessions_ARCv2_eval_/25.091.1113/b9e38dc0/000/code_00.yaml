task_type: pattern_transformation
transformation_name: flood_fill_with_boundaries
common_elements:
  - grid_representation: 2D array of integers (colors)
  - background_color: Typically the most frequent color in the input.
  - objects: Contiguous areas of non-background colors.
actions:
  - identify_background_color
  - identify_non_background_colors
  - determine_fill_color: The color that expands.
  - determine_boundary_colors: All non-background colors *except* the fill color.
  - perform_flood_fill:
      origin: All pixels initially having the fill color.
      target_pixels: Pixels with the background color.
      fill_value: The fill color.
      stop_condition: Encountering a boundary color pixel or grid edge.
      connectivity: Cardinal neighbors (up, down, left, right).
relationships:
  - fill_color: Expands into the background.
  - boundary_colors: Constrain the expansion of the fill color.
  - background_color: Is replaced by the fill color during the operation.
  - other_colors: (Like Magenta/Azure in Ex3) Act as boundary colors if they are not the designated fill color.
examples_summary:
  - example_1:
      background: blue (1)
      fill_color: maroon (9)
      boundary_colors: [green (3), gray (5)]
  - example_2:
      background: white (0)
      fill_color: yellow (4)
      boundary_colors: [gray (5)]
  - example_3:
      background: orange (7)
      fill_color: green (3)
      boundary_colors: [maroon (9), magenta (6), azure (8)] # Note: Magenta and Azure are present but outside the main filled area. They still act as boundaries if the fill reaches them.
uncertainty:
  - The exact rule for selecting the 'fill_color' from multiple non-background colors needs clarification. In the examples, it seems to be the color whose flood fill (using other non-background colors as boundaries) successfully generates the output. A more direct selection criteria isn't immediately obvious from just these three examples (e.g., it's not always the unique color, nor always the color with fewest/most pixels).
